// flags for A_Chase
const int CHF_FASTCHASE        = 1;
const int CHF_NOPLAYACTIVE     = 2;
const int CHF_NIGHTMAREFAST    = 4;
const int CHF_RESURRECT        = 8;
const int CHF_DONTMOVE         = 16;
const int CHF_NORANDOMTURN     = 32;
const int CHF_NODIRECTIONTURN  = 64;
const int CHF_NOPOSTATTACKTURN = 128;
const int CHF_STOPIFBLOCKED    = 256;

const int CHF_DONTTURN = CHF_NORANDOMTURN|CHF_NOPOSTATTACKTURN|CHF_STOPIFBLOCKED;

// flags for A_CustomMissile
const int CMF_AIMOFFSET       = 1;
const int CMF_AIMDIRECTION    = 2;
const int CMF_TRACKOWNER      = 4;
const int CMF_CHECKTARGETDEAD = 8;
/*
const int CMF_ABSOLUTEPITCH   = 16;
const int CMF_OFFSETPITCH     = 32;
const int CMF_SAVEPITCH       = 64;
const int CMF_ABSOLUTEANGLE   = 128;
*/
//const int CMF_BADPITCH        = 256; // for compatibility handling only - avoid!

// NOT IMPLEMENTED!
const int CMF_ABSOLUTEPITCH = 16;
const int CMF_OFFSETPITCH   = 32;
const int CMF_SAVEPITCH     = 64;
const int CMF_ABSOLUTEANGLE = 128;
const int CMF_BADPITCH      = 256; // for compatibility handling only - avoid!

//  Flags for A_SeekerMissile
const int SMF_LOOK     = 1;
const int SMF_PRECISE  = 2;
const int SMF_CURSPEED = 4;

//  Flags for A_SpawnItemEx
const int SXF_TRANSFERTRANSLATION = 1;
const int SXF_ABSOLUTEPOSITION    = 2;
const int SXF_ABSOLUTEANGLE       = 4;
const int SXF_ABSOLUTEMOMENTUM    = 8;
const int SXF_ABSOLUTEVELOCITY    = 8; // "momentum" is deprecated by gozzo
const int SXF_SETMASTER           = 16;
const int SXF_NOCHECKPOSITION     = 32;
const int SXF_TELEFRAG            = 64;
const int SXF_CLIENTSPAWN         = 128;  // only used by Skulltag
const int SXF_CLIENTSIDE          = 128;  // only used by Skulltag
const int SXF_TRANSFERAMBUSHFLAG  = 256;
const int SXF_TRANSFERPITCH       = 512;
const int SXF_TRANSFERPOINTERS    = 1024;

const int SXF_USEBLOODCOLOR       = 1<<11;
const int SXF_CLEARCALLERTID      = 1<<12;
const int SXF_MULTIPLYSPEED       = 1<<13;
const int SXF_TRANSFERSCALE       = 1<<14;
const int SXF_TRANSFERSPECIAL     = 1<<15; // maybe implemented
const int SXF_CLEARCALLERSPECIAL  = 1<<16; // maybe implemented
const int SXF_TRANSFERSTENCILCOL  = 1<<17; // maybe implemented
const int SXF_TRANSFERALPHA       = 1<<18;
const int SXF_TRANSFERRENDERSTYLE = 1<<19;
const int SXF_SETTARGET           = 1<<20;
const int SXF_SETTRACER           = 1<<21;
const int SXF_NOPOINTERS          = 1<<22;
const int SXF_ORIGINATOR          = 1<<23;
const int SXF_TRANSFERSPRITEFRAME = 1<<24; // not implemented
const int SXF_TRANSFERROLL        = 1<<25;
const int SXF_ISTARGET            = 1<<26;
const int SXF_ISMASTER            = 1<<27;
const int SXF_ISTRACER            = 1<<28;

// morph constants
const int MRF_ADDSTAMINA        = 1;
const int MRF_FULLHEALTH        = 2;
const int MRF_UNDOBYTOMEOFPOWER = 4;
const int MRF_UNDOBYCHAOSDEVICE = 8;
const int MRF_FAILNOTELEFRAG    = 16;
const int MRF_FAILNOLAUGH       = 32;
const int MRF_WHENINVULNERABLE  = 64;
const int MRF_LOSEACTUALWEAPON  = 128;
const int MRF_NEWTIDBEHAVIOUR   = 256;
const int MRF_UNDOBYDEATH       = 512;
const int MRF_UNDOBYDEATHFORCED = 1024;
const int MRF_UNDOBYDEATHSAVES  = 2048;

// flags for A_CustomBulletAttack
const int CBAF_AIMFACING     = 1;
const int CBAF_NORANDOM      = 2;
const int CBAF_EXPLICITANGLE = 4;
const int CBAF_NOPITCH       = 8;
const int CBAF_NORANDOMPUFFZ = 16;
const int CBAF_PUFFTARGET    = 32;
const int CBAF_PUFFMASTER    = 64;
const int CBAF_PUFFTRACER    = 128;

// flags for A_FireBullets
const int FBF_USEAMMO       = 1;
const int FBF_NORANDOM      = 2;
const int FBF_EXPLICITANGLE = 4;
const int FBF_NOPITCH       = 8;
const int FBF_NOFLASH       = 16;
const int FBF_NORANDOMPUFFZ = 32;
const int FBF_PUFFTARGET    = 64;
const int FBF_PUFFMASTER    = 128;
const int FBF_PUFFTRACER    = 256;

// flags for A_LookEx
const int LOF_NOSIGHTCHECK    = 1;
const int LOF_NOSOUNDCHECK    = 2;
const int LOF_DONTCHASEGOAL   = 4;
const int LOF_NOSEESOUND      = 8;
const int LOF_FULLVOLSEESOUND = 16;
const int LOF_NOJUMP          = 32;

// flags for A_Respawn
const int RSF_FOG        = 1;
const int RSF_KEEPTARGET = 2;
const int RSF_TELEFRAG   = 4;

// flags for A_ChangeVelocity
const int CVF_RELATIVE = 1;
const int CVF_REPLACE = 2;

// flags for A_WeaponReady

const int WRF_NOBOB       = 1;
const int WRF_NOSWITCH    = 2;
const int WRF_NOPRIMARY   = 4;
const int WRF_NOSECONDARY = 8;
const int WRF_NOFIRE      = 12;
const int WRF_ALLOWRELOAD = 16;
const int WRF_ALLOWZOOM   = 32;
const int WRF_DISABLESWITCH = 64;
const int WRF_ALLOWREFIRE = 8192; // k8vavoom specific
// not implemented yet
const int WRF_ALLOWUSER1 = 128;
const int WRF_ALLOWUSER2 = 256;
const int WRF_ALLOWUSER3 = 512;
const int WRF_ALLOWUSER4 = 1024;

// flags for A_RailAttack and A_CustomRailgun
const int RGF_SILENT        = 1;
const int RGF_NOPIERCING    = 2;
// not implemented
const int RGF_EXPLICITANGLE = 4;
const int RGF_FULLBRIGHT    = 8;
const int RGF_CENTERZ       = 16;
const int RGF_NORANDOMPUFFZ = 32;

// flags for A_Mushroom
const int MSF_Standard = 0;
const int MSF_Classic  = 1;
const int MSF_DontHurt = 2;

// flags for A_Blast
const int BF_USEAMMO      = 1;
const int BF_DONTWARN     = 2;
const int BF_AFFECTBOSSES = 4;
const int BF_NOIMPACTDAMAGE = 8;

// flags for A_CustomPunch
const int CPF_USEAMMO       = 1;
const int CPF_DAGGER        = 2;
const int CPF_PULLIN        = 4;
const int CPF_NORANDOMPUFFZ = 8;
const int CPF_NOTURN        = 16;
const int CPF_STEALARMOR    = 32; // not implemented yet

// render style constants
enum ERenderStyle {
  STYLE_None, // do not draw
  STYLE_Normal, // normal; just copy the image to the screen
  STYLE_Fuzzy, // draw silhouette using "fuzz" effect
  STYLE_SoulTrans, // draw translucent with amount in r_transsouls
  STYLE_OptFuzzy, // draw as fuzzy or translucent, based on user preference
  STYLE_Stencil, // solid color
  STYLE_Translucent, // draw translucent
  STYLE_Add, // draw additive
  STYLE_Shaded, // not implemented
  STYLE_TranslucentStencil, // not implemented
  STYLE_Shadow, // not implemented
  STYLE_Subtract, // not implemented
  STYLE_AddStencil, // solid color, additive
  STYLE_AddShaded, // not implemented
  // special style for sprites only
  STYLE_Dark = 64,
};

// A_PlaySound constants
const int CHAN_AUTO = 0;
const int CHAN_VOICE = 1;
const int CHAN_WEAPON = 2;
const int CHAN_ITEM = 3;
const int CHAN_BODY = 4;

// channel 8 is "auto"
const int CHAN_0 = 0;
const int CHAN_1 = 1;
const int CHAN_2 = 2;
const int CHAN_3 = 3;
const int CHAN_4 = 4;
const int CHAN_5 = 5;
const int CHAN_6 = 6;
const int CHAN_7 = 7;
const int CHAN_8 = 0;
const int CHAN_9 = 0;

const int CHAN_SLOT0 = 0;
const int CHAN_SLOT1 = 1;
const int CHAN_SLOT2 = 2;
const int CHAN_SLOT3 = 3;
const int CHAN_SLOT4 = 4;
const int CHAN_SLOT5 = 5;
const int CHAN_SLOT6 = 6;
const int CHAN_SLOT7 = 7;
const int CHAN_SLOT8 = 0;
const int CHAN_SLOT9 = 0;

const int CHAN_SLOT_0 = 0;
const int CHAN_SLOT_1 = 1;
const int CHAN_SLOT_2 = 2;
const int CHAN_SLOT_3 = 3;
const int CHAN_SLOT_4 = 4;
const int CHAN_SLOT_5 = 5;
const int CHAN_SLOT_6 = 6;
const int CHAN_SLOT_7 = 7;
const int CHAN_SLOT_8 = 0;
const int CHAN_SLOT_9 = 0;


const int CHAN_LISTENERZ = 0; //(8): Sound is played from the listener's Z-height. (Needs verifying)
const int CHAN_MAYBE_LOCAL = 0; //(16): Sound is subject to compat_silentpickup and will not play if the sound is made by an actor other than the local player's camera when compatibility flag is enabled.
const int CHAN_UI = 0; //(32): Sound is considered an interface sound and is not recorded into savegames.
const int CHAN_NOPAUSE = 0; //(64): Sound is not paused by menus and will play through time-stopping powerup effects.
const int CHAN_LOOP = 0; //(256): Sound loops.
const int CHAN_NOSTOP = 0; //(4096): Do not override the sound that is currently playing on the same channel with this one. This is only the case if both sounds are the same. If they are different, the playing sound is overridden regardless.


const int XF_HURTSOURCE         = 0x01; // Hurts the source: if set, the source can be damaged by the explosion. Note that the source is not necessarily the calling actor. This flag is set by default.
const int XF_NOTMISSILE         = 0x02; // Not a missile: if set, the calling actor is considered to be the source. By default, the calling actor is assumed to be a projectile, and the source is therefore considered to be the calling actor's target.
const int XF_EXPLICITDAMAGETYPE = 0x04; // The damagetype parameter will never change to the actor's damagetype.
const int XF_NOSPLASH           = 0x08; // No splash: if set, the explosion does not create any terrain splashes.
const int XF_THRUSTZ            = 0; // this is new in GZDoom 4.1.3, and we don't care


const int SPF_FORCECLAMP  = 0x01;
const int SPF_INTERPOLATE = 0x00;

// Pointer constants, bitfield-enabled
//enum EPointerFlags {
const int AAPTR_DEFAULT = 0;
const int AAPTR_NULL    = 0x1;
const int AAPTR_TARGET  = 0x2;
const int AAPTR_MASTER  = 0x4;
const int AAPTR_TRACER  = 0x8;

const int AAPTR_PLAYER_GETTARGET       = 0x10;
const int AAPTR_PLAYER_GETCONVERSATION = 0x20;

const int AAPTR_PLAYER1 = 0x40;
const int AAPTR_PLAYER2 = 0x80;
const int AAPTR_PLAYER3 = 0x100;
const int AAPTR_PLAYER4 = 0x200;
const int AAPTR_PLAYER5 = 0x400;
const int AAPTR_PLAYER6 = 0x800;
const int AAPTR_PLAYER7 = 0x1000;
const int AAPTR_PLAYER8 = 0x2000;

const int AAPTR_FRIENDPLAYER = 0x4000;
const int AAPTR_LINETARGET   = 0x8000;

// k8vavoom extensions
const int AAPTR_OWNER = 0x100000;
//};


// Flags for A_JumpIfTargetInLOS and A_JumpIfInTargetLOS
//enum EJumpFlags
const int JLOSF_PROJECTILE = 1;
const int JLOSF_NOSIGHT = 1<<1;
const int JLOSF_CLOSENOFOV = 1<<2;
const int JLOSF_CLOSENOSIGHT = 1<<3;
const int JLOSF_CLOSENOJUMP = 1<<4;
const int JLOSF_DEADNOJUMP = 1<<5;
const int JLOSF_CHECKMASTER = 1<<6;
const int JLOSF_TARGETLOS = 1<<7;
const int JLOSF_FLIPFOV = 1<<8;
const int JLOSF_ALLYNOJUMP = 1<<9;
const int JLOSF_COMBATANTONLY = 1<<10;
const int JLOSF_NOAUTOAIM = 1<<11;
const int JLOSF_CHECKTRACER = 1<<12;


// constants for `SetPlayerProperty()`
const int PROP_FROZEN = 0;
const int PROP_NOTARGET = 1;
const int PROP_INSTANTWEAPONSWITCH = 2;
const int PROP_FLY = 3;
const int PROP_TOTALLYFROZEN = 4;
const int PROP_INVULNERABILITY = 5;
const int PROP_STRENGTH = 6;
const int PROP_INVISIBILITY = 7;
const int PROP_RADIATIONSUIT = 8;
const int PROP_ALLMAP = 9;
const int PROP_INFRARED = 10;
const int PROP_WEAPONLEVEL2 = 11;
const int PROP_FLIGHT = 12;
const int PROP_SPEED = 15;
const int PROP_BUDDHA = 16; // not supported


// flags for A_Fade*
enum EFadeFlags {
  FTF_REMOVE = 1<<0,
  FTF_CLAMP  = 1<<1,
};


const int GFF_NOEXTCHANGE = 1;


// sound attenuation values
const float ATTN_NONE   = 0;
const float ATTN_NORM   = 1;
const float ATTN_IDLE   = 1.001;
const float ATTN_STATIC = 3;


// flags for A_VileAttack
enum EVileAttackFlags {
  VAF_DMGTYPEAPPLYTODIRECT = 1,
};


// flags for A_TakeInventory and A_TakeFromTarget
enum ETakeFlags {
  TIF_NOTAKEINFINITE = 1,
};


// flags for A_Remove*
enum ERemoveFlags {
  RMVF_MISSILES   = 0x00000001,
  RMVF_NOMONSTERS = 0x00000002,
  RMVF_MISC       = 0x00000004,
  RMVF_EVERYTHING = 0x00000008,
  RMVF_EXFILTER   = 0x00000010,
  RMVF_EXSPECIES  = 0x00000020,
  RMVF_EITHER     = 0x00000040,
};


// flags for A_RadiusGive
enum ERadiusGiveFlags {
  RGF_GIVESELF  = 1,
  RGF_PLAYERS   = 1<<1,
  RGF_MONSTERS  = 1<<2,
  RGF_OBJECTS   = 1<<3,
  RGF_VOODOO    = 1<<4,
  RGF_CORPSES   = 1<<5,
  RGF_NOTARGET  = 1<<6,
  RGF_NOTRACER  = 1<<7,
  RGF_NOMASTER  = 1<<8,
  RGF_CUBE      = 1<<9,
  RGF_NOSIGHT   = 1<<10,
  RGF_MISSILES  = 1<<11,
  RGF_INCLUSIVE = 1<<12,
  RGF_ITEMS     = 1<<13,
  RGF_KILLED    = 1<<14,
  RGF_EXFILTER  = 1<<15,
  RGF_EXSPECIES = 1<<16,
  RGF_EITHER    = 1<<17,
};


enum ERadiusThrustFlags {
  RTF_AFFECTSOURCE = 1,
  RTF_NOIMPACTDAMAGE = 2,
  RTF_NOTMISSILE = 4,
  RTF_THRUSTZ = 16,
};


// flags for A_PainAttack
enum EPainAttackFlags {
  PAF_NOSKULLATTACK = 1,
  PAF_AIMFACING     = 2,
  PAF_NOTARGET      = 4,
};


// flags for A_Damage (Master/Target/Tracer/Children/Siblings/Self) series
enum EDamageFlags {
  DMSS_FOILINVUL = 0x00000001,
  DMSS_AFFECTARMOR = 0x00000002,
  DMSS_KILL = 0x00000004,
  DMSS_NOFACTOR = 0x00000008,
  DMSS_FOILBUDDHA = 0x00000010,
  DMSS_NOPROTECT = 0x00000020,
  DMSS_EXFILTER = 0x00000040,
  DMSS_EXSPECIES = 0x00000080,
  DMSS_EITHER = 0x00000100,
  DMSS_INFLICTORDMGTYPE = 0x00000200,
};


enum EFireCustomMissileFlags {
  FPF_AIMATANGLE = 1,
  FPF_TRANSFERTRANSLATION = 2,
  FPF_NOAUTOAIM = 4,
};


// A_ZoomFactor flags
const int ZOOM_INSTANT = 1;
const int ZOOM_NOSCALETURNING = 2;


// flags for A_Kill (Master/Target/Tracer/Children/Siblings) series
enum EKillFlags {
  KILS_FOILINVUL    = 0x00000001,
  KILS_KILLMISSILES = 0x00000002,
  KILS_NOMONSTERS   = 0x00000004,
  KILS_FOILBUDDHA   = 0x00000008,
  KILS_EXFILTER     = 0x00000010,
  KILS_EXSPECIES    = 0x00000020,
  KILS_EITHER       = 0x00000040,
};


// for A_Saw
const int SF_NORANDOM = 1;
const int SF_RANDOMLIGHTMISS = 2;
const int SF_RANDOMLIGHTHIT = 4;
const int SF_RANDOMLIGHTBOTH = 6;
const int SF_NOUSEAMMOMISS = 8;
const int SF_NOUSEAMMO = 16;
const int SF_NOPULLIN = 32;
const int SF_NOTURN = 64;
const int SF_STEALARMOR = 128; // not implemented


// flags for A_AlertMonsters
enum EAlertFlags {
  AMF_TARGETEMITTER   = 1,
  AMF_TARGETNONPLAYER = 2,
  AMF_EMITFROMTARGET  = 4,
}


const int PTROP_UNSAFETARGET = 1;
const int PTROP_UNSAFEMASTER = 2;
const int PTROP_NOSAFEGUARDS = PTROP_UNSAFETARGET|PTROP_UNSAFEMASTER;


// flags for A_QuakeEx
enum EQuakeFlags {
  QF_RELATIVE      = 1,
  QF_SCALEDOWN     = 1<<1,
  QF_SCALEUP       = 1<<2,
  QF_MAX           = 1<<3,
  QF_FULLINTENSITY = 1<<4,
  QF_WAVE          = 1<<5,
};


enum EParticleFlags {
  SPF_FULLBRIGHT   = 1,
  SPF_RELPOS       = 1<<1,
  SPF_RELVEL       = 1<<2,
  SPF_RELACCEL     = 1<<3,
  SPF_RELANG       = 1<<4,
  SPF_NOTIMEFREEZE = 1<<5,
};
const int SPF_RELATIVE = SPF_RELPOS|SPF_RELVEL|SPF_RELACCEL|SPF_RELANG;


// A_CheckProximity flags
enum EProximityFlags {
  CPXF_ANCESTOR    = 1,
  CPXF_LESSOREQUAL = 1<<1,
  CPXF_NOZ         = 1<<2,
  CPXF_COUNTDEAD   = 1<<3,
  CPXF_DEADONLY    = 1<<4,
  CPXF_EXACT       = 1<<5,
  CPXF_SETTARGET   = 1<<6,
  CPXF_SETMASTER   = 1<<7,
  CPXF_SETTRACER   = 1<<8,
  CPXF_FARTHEST    = 1<<9,
  CPXF_CLOSEST     = 1<<10,
  CPXF_SETONPTR    = 1<<11,
  CPXF_CHECKSIGHT  = 1<<12,
};


enum WARPF {
  WARPF_ABSOLUTEOFFSET    = 0x1,
  WARPF_ABSOLUTEANGLE     = 0x2,
  WARPF_USECALLERANGLE    = 0x4,

  WARPF_NOCHECKPOSITION   = 0x8,

  WARPF_INTERPOLATE       = 0x10,
  WARPF_WARPINTERPOLATION = 0x20,
  WARPF_COPYINTERPOLATION = 0x40,

  WARPF_STOP              = 0x80,
  WARPF_TOFLOOR           = 0x100,
  WARPF_TESTONLY          = 0x200,
  WARPF_ABSOLUTEPOSITION  = 0x400,
  WARPF_BOB               = 0x800,
  WARPF_MOVEPTR           = 0x1000,
  WARPF_USEPTR            = 0x2000,
  WARPF_USETID            = 0x2000,
  WARPF_COPYVELOCITY      = 0x4000,
  WARPF_COPYPITCH         = 0x8000,
};


enum FAF_Flags {
  FAF_BOTTOM = 1,
  FAF_MIDDLE = 2,
  FAF_TOP    = 4,
  FAF_NODISTFACTOR = 8, // deprecated
};


// flags for A_CheckLOF

enum ELOFFlags
{
  CLOFF_NOAIM_VERT =      0x1,
  CLOFF_NOAIM_HORZ =      0x2,

  CLOFF_JUMPENEMY =     0x4,
  CLOFF_JUMPFRIEND =      0x8,
  CLOFF_JUMPOBJECT =      0x10,
  CLOFF_JUMPNONHOSTILE =    0x20,

  CLOFF_SKIPENEMY =     0x40,
  CLOFF_SKIPFRIEND =      0x80,
  CLOFF_SKIPOBJECT =      0x100,
  CLOFF_SKIPNONHOSTILE =    0x200,

  CLOFF_MUSTBESHOOTABLE =   0x400,

  CLOFF_SKIPTARGET =      0x800,
  CLOFF_ALLOWNULL =     0x1000,
  CLOFF_CHECKPARTIAL =    0x2000,

  CLOFF_MUSTBEGHOST =     0x4000,
  CLOFF_IGNOREGHOST =     0x8000,

  CLOFF_MUSTBESOLID =     0x10000,
  CLOFF_BEYONDTARGET =    0x20000,

  CLOFF_FROMBASE =      0x40000,
  CLOFF_MUL_HEIGHT =      0x80000,
  CLOFF_MUL_WIDTH =     0x100000,

  CLOFF_JUMP_ON_MISS =    0x200000,
  CLOFF_AIM_VERT_NOOFFSET = 0x400000,

  CLOFF_SETTARGET =     0x800000,
  CLOFF_SETMASTER =     0x1000000,
  CLOFF_SETTRACER =     0x2000000,

  CLOFF_SKIPOBSTACLES = CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_SKIPNONHOSTILE,
  CLOFF_NOAIM = CLOFF_NOAIM_VERT|CLOFF_NOAIM_HORZ
};


// Flags for GetAngle
enum EGetAngleFlags
{
  GAF_RELATIVE =      1,
  GAF_SWITCH =      1 << 1,
};


// Flags for GetZAt
enum EZFlags
{
  GZF_ABSOLUTEPOS =     1,      // Use the absolute position instead of an offsetted one.
  GZF_ABSOLUTEANG =     1 << 1,   // Don't add the actor's angle to the parameter.
  GZF_CEILING =         1 << 2,   // Check the ceiling instead of the floor.
  GZF_3DRESTRICT =      1 << 3,   // Ignore midtextures and 3D floors above the pointer's z.
  GZF_NOPORTALS =       1 << 4,   // Don't pass through any portals.
  GZF_NO3DFLOOR =       1 << 5,   // Pass all 3D floors.
};

enum FMDFlags {
  FMDF_NOPITCH     = 1<<0,
  FMDF_INTERPOLATE = 1<<1,
  FMDF_NOANGLE     = 1<<2,
};


// flags for A_BFGSpray
enum EBFGSprayFlags {
  BFGF_HURTSOURCE = 1,
  BFGF_MISSILEORIGIN = 2,
};


enum ERaise {
  RF_TRANSFERFRIENDLINESS = 1,
  RF_NOCHECKPOSITION = 2,
}


// flags for A_Teleport
enum /*ETeleportFlags*/ {
  TF_TELEFRAG =   0x00000001, // Allow telefrag in order to teleport.
  TF_RANDOMDECIDE = 0x00000002, // Randomly fail based on health. (A_Srcr2Decide)
  TF_FORCED =     0x00000004, // Forget what's in the way. TF_Telefrag takes precedence though.
  TF_KEEPVELOCITY = 0x00000008, // Preserve velocity.
  TF_KEEPANGLE =    0x00000010, // Keep angle.
  TF_USESPOTZ =   0x00000020, // Set the z to the spot's z, instead of the floor.
  TF_NOSRCFOG =   0x00000040, // Don't leave any fog behind when teleporting.
  TF_NODESTFOG =    0x00000080, // Don't spawn any fog at the arrival position.
  TF_USEACTORFOG =  0x00000100, // Use the actor's TeleFogSourceType and TeleFogDestType fogs.
  TF_NOJUMP =     0x00000200, // Don't jump after teleporting.
  TF_OVERRIDE =   0x00000400, // Ignore NOTELEPORT.
  TF_SENSITIVEZ =   0x00000800, // Fail if the actor wouldn't fit in the position (for Z).

  TF_KEEPORIENTATION = TF_KEEPVELOCITY|TF_KEEPANGLE,
  TF_NOFOG = TF_NOSRCFOG|TF_NODESTFOG,
};


// gozzo constant
const int ChunkFlags = SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEVELOCITY;


enum ESkillProperty {
  SKILLP_FastMonsters,
  SKILLP_Respawn,
  SKILLP_RespawnLimit,
  SKILLP_DisableCheats,
  SKILLP_AutoUseHealth,
  SKILLP_SpawnFilter,
  SKILLP_EasyBossBrain,
  SKILLP_ACSReturn,
  SKILLP_NoPain,
  SKILLP_EasyKey,
  SKILLP_SlowMonsters,
  SKILLP_Infight,
  SKILLP_PlayerRespawn,
};

// floating point properties
enum EFSkillProperty {
  SKILLP_AmmoFactor,
  SKILLP_DropAmmoFactor,
  SKILLP_ArmorFactor,
  SKILLP_HealthFactor,
  SKILLP_DamageFactor,
  SKILLP_Aggressiveness,
  SKILLP_MonsterHealth,
  SKILLP_FriendlyHealth,
  SKILLP_KickbackFactor,
};
