//------------------------------------------------------------------------------
class Actor extends Thinker
  native
{
  field x = _GetOriginX;
  field y = _GetOriginY;
  field z = _GetOriginZ;

  field velx = _GetVelocityX;
  field vely = _GetVelocityY;
  field velz = _GetVelocityZ;

  // "momentum", deprecated
  field momx = _GetVelocityX;
  field momy = _GetVelocityY;
  field momz = _GetVelocityZ;

  field angle = _GetAnglesYaw;
  field yaw = _GetAnglesYaw;
  field pitch = _GetAnglesPitch;
  field roll = _GetAnglesRoll;

  /*
  field x = Origin.x;
  field y = Origin.y;
  field z = Origin.z;

  field velx = Velocity.x;
  field vely = Velocity.y;
  field velz = Velocity.z;

  // "momentum", deprecated
  field momx = Velocity.x;
  field momy = Velocity.y;
  field momz = Velocity.z;

  field angle = Angles.yaw;
  field yaw = Angles.yaw;
  field pitch = Angles.pitch;
  field roll = Angles.roll;
  */

  field radius = Radius;
  field height = Height;
  field scalex = ScaleX;
  field scaley = ScaleY;

  field ceilingz = CeilingZ;
  field floorz = FloorZ;

  field alpha = Alpha;
  field health = Health;
  field mass = Mass;
  field MeleeRange = MeleeRange;

  field reactiontime = ReactionTime;
  field speed = speed;

  field waterlevel = WaterLevel;
  field watertype = WaterType;

  field TID = TID;
  field TIDToHate = TIDToHate;

  field Threshold = Threshold;

  field Damage = MissileDamage; //k8: i think so


  alias random = random;
  alias frandom = frandom;
  alias random2 = random2;
  alias randompick = randompick;
  alias frandompick = frandompick;

  alias CheckClass = CheckClass;

  alias GetIntFieldByName = GetIntFieldByName;
  alias GetSelf = _GetSelf;
  alias GetSSR = _GetSSR;


  action native A_RemoveIfRadiusAmountGreater (int radius, int amount, name className, optional bool exact);

  action native A_RearrangePointers (pointer target, pointer master, pointer tracer, int flags);

  //
  //  Monster AI
  //
  action native A_Look();
  action native A_Look2();
  action native A_LookEx(eval int flags, eval float minseedist, eval float maxseedist, eval float maxheardist,
      eval float fov, eval name wakestate);
  action native A_TurretLook();
  action native A_Wander();
  action native A_Chase(optional state melee, optional state missile, optional eval int flags);
  action native A_FastChase();
  action native A_VileChase();
  action native A_ExtChase(eval bool usemelee, eval bool usemissile,
    optional evalnot bool playactive, optional eval bool nightmarefast);
  action native A_FaceTarget();
  action native A_Die(optional DamageType);
  action native A_CentaurDefend();
  action native A_AlertMonsters();
  action native A_ClearTarget();
  action native A_ClearSoundTarget();
  action native A_KillMaster();
  action native A_KillChildren(optional string damagetype, optional int flags, optional string filter, optional string species, optional int src, optional int inflict);
  action native A_SentinelBob();
  action native A_Burst(class<Actor> chunktype);

  action native A_SetArg (int n, int v);

  //
  //  Generic monster attacks
  //
  action native A_CustomMissile(class<Actor> missiletype, optional eval float spawnheight,
    optional eval int spawnoffs_xy, optional eval float angle, optional eval int aimmode,
    optional eval float pitch);
  action native A_CustomBulletAttack(eval float spread_horiz, eval float spread_vert,
    eval int numbullets, eval int damage, optional class<Actor> pufftype,
    optional eval float range, optional eval int flags);
  action native A_CustomRailgun(eval int damage, optional eval float offset_xy,
    optional eval color color1, optional eval color color2, optional eval int flags,
    optional eval bool aim, optional eval float maxdiff, optional class<Actor> pufftype);
  action native A_CustomMeleeAttack(eval int damage, optional string meleesound,
    optional string misssound, optional string damagetype, optional eval bool bleed);
  action native A_CustomComboAttack(class<Actor> missiletype, eval float spawnheight,
    eval int damage, optional string meleesound, optional string damagetype,
    optional eval bool bleed);
  action native A_MeleeAttack();
  action native A_MissileAttack();
  action native A_ComboAttack();
  action native A_BasicAttack(eval int meleedamage, string meleesound,
    class<Actor> missiletype, eval float missileheight);
  action native A_BulletAttack();
  action native A_MonsterRail();
  action native A_Explode(optional eval int damage, optional eval int distance,
    optional evalnot bool hurtsource, optional eval bool alert,
    optional eval int dmgdistance, optional eval int nails, optional eval int naildamage);
  action native A_RadiusThrust(optional eval int force, optional eval int distance,
    optional evanot bool affectsource);
  action native A_Detonate();
  action native A_ThrowGrenade(class<Actor> itemtype, optional eval float spawnheight,
    optional eval float xyvel, optional eval float zvel, optional evalnot bool useammo);
  action native A_MonsterRefire(int prob, state jump);

  //
  //  Freeze death functions
  //
  action native A_FreezeDeath();
  action native A_GenericFreezeDeath();
  action native A_FreezeDeathChunks();
  action native A_IceGuyDie();

  //
  //  Sound functions
  //
  action native A_PlaySound(string soundname);
  action native A_PlaySoundEx(string soundname, string chanel, optional bool loop, optional int attenuation);
  action native A_PlayWeaponSound(string soundname);
  action native A_ActiveSound();
  action native A_LoopActiveSound();
  action native A_FLoopActiveSound();
  action native A_StopSound(optional int channel);
  action native A_StopSoundEx(string channel);
  action native A_Pain();
  action native A_Scream();
  action native A_XScream();
  action native A_VileStart();
  action native A_BrainPain();
  action native A_BrainAwake();
  action native A_PlayerScream();

  //
  //  Special actions
  //
  action native A_BossDeath();
  action native A_KeenDie();
  action native A_BrainDie();
  action native A_GetHurt();
  action native A_KlaxonBlare();
  action native A_CheckTerrain();
  action native A_Print(string text, optional eval float time, optional name fontname);
  action native A_PrintBold(string text, optional eval float time, optional name fontname);
  action native A_SetBlend(color color1, eval float alpha, eval int tics, optional color color2);
  action native A_CheckSight(state label);
  action native A_CheckFloor(state label);
  action native A_CheckCeiling(state label);
  action native A_CheckPlayerDone();
  action native A_SkullPop(optional class<Actor> spawntype);

  //
  //  Spawn functions
  //
  action native A_TossGib();
  action native A_SpawnDebris(class<Actor> SpawnType, optional eval bool transfer_translation,
    optional eval float mult_h, optional eval float mult_v);
  action native A_SpawnItem(class<Actor> itemtype, optional eval float distance,
    optional eval float zheight, optional evalnot bool useammo,
    optional eval bool transfer_translation);
  action native A_SpawnItemEx(class<Actor> itemtype, optional eval float xoffs,
    optional eval float yoffs, optional eval float zoffs, optional eval float xmom,
    optional eval float ymom, optional eval float zmom, optional eval float angle,
    optional eval int flags, optional eval int chance, optional eval bool ApplyTranslation);

  //
  //  State jumps
  //
  action native A_Jump(eval int chance, state label, ...);
  action native A_JumpIf(eval bool expr, state label);
  action native A_JumpIfCloser(eval float dist, state label);
  action native A_JumpIfHealthLower(eval int health, state label);
  action native A_JumpIfInventory(class<Actor> itemtype, eval int amount, state label);
  action native A_JumpIfInTargetInventory(class<Actor> itemtype, eval int amount, state label);
  action native A_JumpIfTargetInLOS(state label, optional float fov, optional int flags, optional float distmax, optional float distclose);
  action native A_JumpIfInTargetLOS(state label, optional float fov, optional int flags, optional float distmax, optional float distclose);
  action native A_JumpIfCVarTrue(string cvar, state label);
  action native A_JumpIfCVarFalse(string cvar, state label);
  action native A_CheckRange (float distance, state label, optional bool check2d);

  //
  //  Flags and appearance
  //
  action native A_ChangeFlag(string name, eval bool value);
  action native A_CheckFlag (string flagname, state label, optional int aptr);
  action native A_SetFloorClip();
  action native A_UnSetFloorClip();
  action native A_HideThing();
  action native A_UnHideThing();
  action native A_SetInvulnerable();
  action native A_UnSetInvulnerable();
  action native A_SetReflective();
  action native A_UnSetReflective();
  action native A_SetReflectiveInvulnerable();
  action native A_UnSetReflectiveInvulnerable();
  action native A_SetShootable();
  action native A_UnSetShootable();
  action native A_NoGravity();
  action native A_Gravity();
  action native A_LowGravity();
  action native A_NoBlocking(optional bool drop=true);
  action native A_Fall();
  action native A_SetSolid();
  action native A_UnsetSolid();
  action native A_SetFloat();
  action native A_UnsetFloat();
  action native A_ScreamAndUnblock();
  action native A_ActiveAndUnblock();
  action native A_SetShadow();
  action native A_ClearShadow();
  action native A_SetTranslucent(eval float alpha, optional eval int mode);
  action native A_FadeIn(optional eval float increase);
  action native A_FadeOut(optional eval float reduce);
  action native A_FadeTo(float target, optional float amount, optional int flags);
  action native A_QueueCorpse();
  action native A_DeQueueCorpse();
  action native A_ChangeVelocity(float x, float y, float z, int flags);
    action native A_ScaleVelocity(float scale);
  action native A_PreExplode(int RenderStyle, float A);

  //
  //  Misc. Stuff
  //
  action native A_Log(string text);
  action native A_LogInt(int num);

  //
  //  Missile movement
  //
  action native A_SeekerMissile(eval int threshold, eval int turnmax, optional eval int flags,
          optional eval int chance, optional eval int distance);
  action native A_Tracer();
  action native A_Tracer2();
  action native A_Fire(optional eval int Height);
  action native A_BishopMissileWeave();
  action native A_CStaffMissileSlither();
  action native A_Countdown();
  action native A_CountdownArg(eval int argnum);
  action native A_Stop();

  //
  //  Inventory functions
  //
  action native A_GiveInventory(class<Inventory> itemtype, optional eval int amount);
  action native A_GiveToTarget(class<Inventory> itemtype, optional eval int amount);
  action native A_TakeInventory(class<Inventory> itemtype, optional eval int amount, optional int flags, optional int giveto);
  action native A_TakeFromTarget(class<Inventory> itemtype, optional eval int amount);
  action native A_DropInventory(class<Inventory> itemtype);
  action native A_SelectWeapon(class<Weapon> weapontype);

  //
  //  Weapon functions
  //
  action native A_Recoil(eval float force);

  //
  //  Weapon attack functions
  //
  action native A_Punch();
  action native A_FireAssaultGun();

  //
  //  Original Doom/Strife monster attacks
  //
  action native A_PosAttack();
  action native A_SPosAttack();
  action native A_SPosAttackUseAtkSound();
  action native A_CPosAttack();
  action native A_CPosRefire();
  action native A_SpidRefire();
  action native A_TroopAttack();
  action native A_SargAttack();
  action native A_HeadAttack();
  action native A_BruisAttack();
  action native A_SkullAttack(optional float speed);
  action native A_BspiAttack();
  action native A_CyberAttack();
  action native A_PainAttack(optional class<Actor> spawntype);
  action native A_DualPainAttack(optional class<Actor> spawntype);
  action native A_PainDie(optional class<Actor> spawntype);
  action native A_SkelFist();
  action native A_SkelMissile();
  action native A_FatAttack1(optional class<Actor> spawntype);
  action native A_FatAttack2(optional class<Actor> spawntype);
  action native A_FatAttack3(optional class<Actor> spawntype);
  action native A_VileTarget(optional name firetype);
  action native A_VileAttack(optional string sound, optional int initialdamage, optional int blastdamage, optional int blastradius, optional float thrustfactor, optional string damagetype, optional int flags);
  action native A_BrainSpit();
  action native A_SpawnFly();
  action native A_SpawnSound();
  action native A_BrainScream();
  action native A_BrainExplode();
  action native A_Mushroom(optional class<Actor> spawntype, optioal eval int amount,
        optional eval int flags, optional eval float hrange,
        optional eval float vrange);
  action native A_M_Saw();
  action native A_SentinelRefire();

  //
  //  Monster specific functions for Doom
  //
  action native A_Hoof();
  action native A_Metal();
  action native A_BabyMetal();
  action native A_FatRaise();
  action native A_SkelWhoosh();
  action native A_StartFire();
  action native A_FireCrackle();
  action native A_BFGSpray(optional class<Actor> flashtype, optional eval int numrays, optioal eval int damage);

  action native A_SetAngle(float newyaw);
  action native A_SetPitch(float newa, optional int flags, optional int ptr);
  action native A_SetRoll(float newa, optional int flags, optional int ptr);

  action native A_SetRollExt(float newa);
  action native A_SetYawExt(float newa);
  action native A_SetPitchExt(float newa);

  action native A_LayToFloorWithYaw(float yaw);

  action native A_SetScale(float scaleX, optional float scaleY, optional int pointer, optional bool usezero);

  action native A_SetScaleXExt(float scale);
  action native A_SetScaleYExt(float scale);

  action native A_ChangeScaleXExt(float delta);
  action native A_ChangeScaleYExt(float delta);

  action native A_DropItem (name item, optional int dropamount, optional int chance);

  //
  //  Not documented
  //
  action native A_SetGravity(eval float gravity);
  action native A_PlayerSkinCheck(state label);
  action native A_Respawn(optional eval int flags);
  action native A_BarrelDestroy();
  action native A_Feathers();
  action native A_ShootGun();
  action native A_RocketInFlight();
  action native A_Bang4Cloud();
  action native A_DropFire();
  action native A_GiveQuestItem(int QuestType);
  action native A_RemoveForceField();
  action native A_PigPain();
  action native A_ClassBossHealth();


  // ACS
  action native ACS_Execute (int script, int map, optional int s_arg1, optional int s_arg2, optional int s_arg3);
  action native ACS_ExecuteAlways (int script, int map, optional int s_arg1, optional int s_arg2, optional int s_arg3);
  action native ACS_ExecuteWithResult (int script, optional int s_arg1, optional int s_arg2, optional int s_arg3);
  action native ACS_NamedExecute (string script, int map, optional int s_arg1, optional int s_arg2, optional int s_arg3);
  action native ACS_NamedExecuteAlways (string script, int map, optional int s_arg1, optional int s_arg2, optional int s_arg3);
  action native ACS_NamedExecuteWithResult (string script, optional int s_arg1, optional int s_arg2, optional int s_arg3);

  alias CallACS = ACS_NamedExecuteWithResult;

  alias GetCVar = GetCvarF;

  action native CountInv (string itemtype, optional int ptr_select);

  action native A_SpawnProjectile (string missiletype, optional float spawnheight, optional float spawnofs_xy, optional float angle, optional int flags, optional float pitch, optional int ptr);

  action native A_Quake (float intensity, float ticduation, float damrad, float tremrad, optional name soundname);

  action native A_DamageSelf(int amount, optional string damagetype, optional int flags, optional string filter, optional string species, optional int src, optional int inflict);

  action native A_k8ConLog (string msg);

  action native A_SetTics (int tics);

  action native A_RemoveChildren (optional bool all, optional int flags, optional string filter, optional string species);
  action native A_RadiusGive (name item, float distance, int flags, optional int amount, optional string filter, optional string species, optional float mindist, optional int limit);


  // k8 extensions
  // does shell-like glob matching
  action native A_CheckFloorTextureGlob (string txname, state label, optional int aptr);
}

//------------------------------------------------------------------------------
class Inventory extends Actor
  native
{
  //
  //  State jumps
  //
  action native A_JumpIfNoAmmo(state label);

  //
  //  Weapon functions
  //
  action native A_WeaponReady(optional eval int flags);
  action native A_SetPitch(float newpitch);
  action native A_Lower(optional float lowerspeed=6);
  action native A_Raise(optional float raisespeed=6);
  action native A_ReFire();
  action native A_ClearReFire();
  action native A_GunFlash(optional name newstate, optional int flags);
  action native A_CheckReload();
  action native A_CheckForReload(eval int Count, state Jump, optional eval bool DoIncrement);
  action native A_ResetReloadCounter();
  action native A_Light(eval int value);
  action native A_Light0();
  action native A_Light1();
  action native A_Light2();
  action native A_LightInverse();
  action native A_ZoomFactor(float zoom, optional eval int flags);

  //
  //  Weapon attack functions
  //
  action native A_Saw(optional string fullsound, optional string hitsound,
    optional eval int damage, optional class<Actor> pufftype);
  action native A_CustomPunch(eval int PunchDamage, optional eval bool NoRandom,
    optional eval int flags, optional class<Actor> PuffType,
    optional eval float Range, optional eval float LifeSteal);
  action native A_FireBullets(eval float spread_horz, eval float spread_vert,
    eval int numbullets, eval int damage, optional class<Actor> pufftype,
    optional eval int flags, optional eval float range);
  action native A_FireCustomMissile(class<Actor> MissileType,
    optional eval float Angle, optional evalnot bool UseAmmo,
    optional eval int SpawnXY, optional eval float SpawnZ,
    optional eval int AimAtAngle, optional eval float Pitch);
  action native A_RailAttack(eval int damage, optional eval float offset_xy,
    optional evalnot bool useammo, optional color color1, optional color color2,
    optional eval int flags, optional eval float maxdiff, optional class<Actor> pufftype);
  action native A_FireProjectile (class!Actor MissileType, optional float angle, optional bool useammo, optional float spawnofs_xy, optional float spawnheight, optional int flags, optional float pitch);

  //
  //  Not documented Doom weapon atack functions
  //
  action native A_FirePistol();
  action native A_FireShotgun();
  action native A_FireShotgun2();
  action native A_OpenShotgun2();
  action native A_LoadShotgun2();
  action native A_CloseShotgun2();
  action native A_FireCGun();
  action native A_FireMissile();
  action native A_FirePlasma();
  action native A_FireRailgun();
  action native A_FireRailgunLeft();
  action native A_FireRailgunRight();
  action native A_RailWait();
  action native A_BFGsound();
  action native A_FireBFG();
}
