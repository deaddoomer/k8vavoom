// miscelaneous options menu
menudef MiscOptions {
  //selector = MenuSelector_SmallRight;
  Title = "MISC OPTIONS";

  option bool {
    title = "Quit prompt";
    cvar = menu_quit_prompt;
    help = "Show quit promt on exit?";
  }

  option bool {
    title = "'Secret Found' Message";
    cvar = show_secret_message;
    help = "Show 'you found a secret area' message?";
  }

  option bool {
    title = "'Secret Found' Sound";
    cvar = play_secret_sound;
    help = "Play 'you found a secret area' sound (misc/secret)?";
  }

  option bool {
    title = "Checkpoints for map enter autosaves";
    cvar = sv_autoenter_checkpoints;
    help =
      "Use smaller (and more resistant to savegame format changes)"
      "\"checkpoint saves\" on entering new map."
      "This can work wrong with some complex mods, so you can try if it"
      "works (by completing one map, quicksave, and load autosave), and"
      "turn this off if something is wrong.";
  }

  option bool {
    title = "Flip Corpses";
    cvar = r_flip_corpses;
    help =
      "Randomly flip monster corpses?",
      "This affects only rendering.";
  }

  option bool {
    title = "Allow vanilla cheatcodes";
    cvar = allow_vanilla_cheats;
    help = "Turn this on to allow IDXXX cheatcodes from Vanilla DooM.";
  }

  option slider {
    title = "Head Bobbing";
    cvar = movebob;
    step = 0.1;
    min = 0;
    max = 1;
    help = "Player camera bobbing. Vanilla default is 0.25.";
  }

  option slider {
    title = "Weapon Bobbing";
    cvar = weaponbob;
    step = 0.02;
    min = 0;
    max = 1;
    help = "Player weapon bobbing. Relative to camera bobbing.";
  }

  option slider {
    title = "Save compression";
    cvar = save_compression_level;
    step = 1;
    min = 0;
    max = 9;
  }


  header "Color Maps";

  option enum {
    title = "Inverse Colormap";
    cvar = k8ColormapInverse;
    list {
      "Original Inverse",
      "Monochrome Grayscale",
      "Gold",
      "Green",
      "Red",
      "Berserk Red",
      "Blue",
      "Inverse",
    }
    help =
      "You can replace original 'inversed' colormap for invulnerability"
      "with another one of your choice.";
  }

  option enum {
    title = "LightAmp Colormap";
    cvar = k8ColormapLightAmp;
    list {
      "Original",
      "Monochrome Grayscale",
      "Gold",
      "Green",
      "Red",
      "Berserk Red",
      "Blue",
      "Inverse",
    }
    help =
      "You can replace LightAmp colormap with another one of your choice.";
  }

  option enum {
    title = "Berserk Colormap";
    cvar = k8ColormapBerserk;
    list {
      "Original Tint",
      "Monochrome Grayscale",
      "Gold",
      "Green",
      "Red",
      "Berserk Red",
      "Blue",
      "Inverse",
    }
    help =
      "You can replace Berserk tint with a colormap of your choice."
      "Note that you can override berserk tint color with cvar:"
      "\cJk8BerserkTint #100";
  }

  option enum {
    title = "EnviroSuit Colormap";
    cvar = k8ColormapEnviSuit;
    list {
      "Original Tint",
      "Monochrome Grayscale",
      "Gold",
      "Green",
      "Red",
      "Berserk Red",
      "Blue",
      "Inverse",
    }
    help =
      "You can replace EnviroSuit tint with a colormap of your choice.";
  }

  option slider {
    title = "Max Pickup Flash Time";
    cvar = k8BonusFlashMaxTime;
    min = 0.1;
    max = 4.0;
    step = 0.1;
    help =
      "Maximum time for bonus flash.",
      "If too high, picking up alot of bonuses can be annoying.",
      "One bonus lasts 0.2 seconds. Use 0 for unlimited time.";
  }

  option slider {
    title = "Max Damage Tint Intensity";
    cvar = k8DamageFlashMaxIntensity;
    min = 0.1;
    max = 1.0;
    step = 0.02;
    help =
      "Maximum intensity for damage screen tint.",
      "Getting alot of damage in a short time turns screen to",
      "almost completely red. You can decrease this valud to",
      "avoid this. But beware! This is very close to cheating.";
  }




  header "Internal Node Builder";

  option enum {
    title = "Internal Nodes Builder";
    cvar = nodes_builder_type;
    list {
      "Auto",
      "AJBSP",
      "ZDBSP",
    }
    help =
      "Internal nodes builder."
      "If set to 'Auto', the engine will select the nodes builder"
      "that should did its best on a given map."
      "\cJIf unsure, leave it as 'Auto'.";
  }

  option enum [__k8vavoom_developer_version > 0] {
    title = "Normal Nodes Builder";
    cvar = nodes_builder_normal;
    list {
      "Auto",
      "AJBSP",
      "ZDBSP",
    }
    help =
      "Nodes builder for normal (non-UDMF) maps."
      "\cGDO NOT set to 'Auto'!";
  }

  option enum [__k8vavoom_developer_version > 0] {
    title = "UDMF Nodes Builder";
    cvar = nodes_builder_udmf;
    list {
      "Auto",
      "AJBSP",
      "ZDBSP",
    }
    help =
      "Nodes builder for UDMF maps."
      "\cGDO NOT set to 'Auto'!";
  }

  option bool {
    title = "Fast mode (suboptimal)";
    cvar = nodes_fast_mode;
    help =
      "Use simpler nodes building algorithm. This can speedup"
      "building nodes for some huge maps, but rendering"
      "(and other engine activities) can be somewhat slower."
      "\cJIf in doubt, leave this 'OFF'.";
  }

  option bool {
    title = "Show builder warnings";
    cvar = nodes_show_warnings;
  }


  header "Prebuilt Nodes (dev)" [__k8vavoom_developer_version > 0];

  option bool [__k8vavoom_developer_version > 0] {
    title = "Force node rebuilding";
    cvar = loader_force_nodes_rebuild;
    help =
      "Always rebuild nodes for a map."
      "\cJIf in doubt, leave this 'ON'.";
  }

  option bool [__k8vavoom_developer_version > 0] {
    title = "Allow PWAD z-nodes";
    cvar = nodes_allow_compressed;
    help =
      "Load prebuilt GL Nodes?"
      "If turned off, the engine will use internal node builder."
      "\cJIf in doubt, set this to 'OFF'."
      "\cGWARNING: GL Node loader is buggy, and may not work.";
  }


  header "Cache options";

  option bool {
    title = "Cache built data";
    cvar = loader_cache_data;
    help =
      "If level loading takes too much time, the engine can cache level data,"
      "so next loads will be MUCH faster.";
  }

  option bool {
    title = "(autoreset) Kill cache for next map";
    cvar = loader_cache_ignore_one;
    textColor = BRICK;
    help =
      "Ignore cache for next loaded map."
      "This option will be automatically reset after map loading.";
  }

  option numeric {
    title = "Cache timeout (seconds)";
    cvar = loader_cache_time_limit;
    step = 0.5;
    min = 0.5;
    max = 16;
    help = "How long level loading should take to make engine cache data?";
  }

  option numeric {
    title = "Cache max age (days)";
    cvar = loader_cache_max_age_days;
    step = 1;
    min = 1;
    max = 32;
    help =
      "Engine will automatically delete old caches."
      "This options controls cache data age."
      "Cache data older than this will be deleted.";
  }

  option slider {
    title = "Cache compression";
    cvar = loader_cache_compression_level;
    step = 1;
    min = 0;
    max = 9;
  }

  option numeric {
    title = "Lighting cache timeout (seconds)";
    cvar = loader_cache_time_limit_lightmap;
    step = 0.5;
    min = 0.5;
    max = 16;
    help = "How long level lighting should take to make engine cache lightmap data?";
  }

  option slider {
    title = "Lightmap cache compression";
    cvar = loader_cache_compression_level_lightmap;
    step = 1;
    min = 0;
    max = 9;
  }


  header "Particle FX options";

  option bool {
    title = "Particle effects";
    cvar = r_particle_effects;
  }

  option bool {
    title = "Particle puffs";
    cvar = r_particle_puffs;
  }

  option bool {
    title = "Particle blood";
    cvar = r_particle_blood;
  }

  option bool {
    title = "Particle trails";
    cvar = r_particle_trails;
  }


  header "Death Roll Options";

  option bool {
    title = "Enable Death Roll";
    cvar = cl_deathroll_enabled;
    help = "Roll the camera when the player dies?";
  }

  option slider {
    title = "Death Roll Amount";
    cvar = cl_deathroll_amount;
    step = 2;
    min = 0;
    max = 180;
    help = "Death Roll Angle.";
  }

  option slider {
    title = "Death Roll Speed";
    cvar = cl_deathroll_speed;
    step = 2;
    min = 2;
    max = 200;
    help = "Death Roll Speed.";
  }


  header "GZDoom Emulation Options";

  option bool {
    title = "Emulate Broken Gotos";
    cvar = dbg_emulate_broken_gozzo_gotos;
    help =
      "GZDoom simply continues the execution if decorate state is trying to"
      "jump to non-existing state. k8vavoom destroys the actor in this case."
      "Destroying the actor allows to detect mod bugs, but emulating broken"
      "gotos allows to play some mods."
      "\cGWARNING! This may cause some mods (especially weapon mods) to malfunction!"
      "Also, you will get a console warning in any case.";
  }
}
