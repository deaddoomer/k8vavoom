// miscelaneous options menu
menudef MiscOptions {
  //selector = MenuSelector_SmallRight;
  Title = "MISC OPTIONS";

  option bool {
    title = "Quit prompt";
    cvar = menu_quit_prompt;
    help = "Show quit promt on exit?";
  }

  option bool {
    title = "Checkpoints for map enter autosaves";
    cvar = sv_autoenter_checkpoints;
    help =
      "Use smaller (and more resistant to savegame format changes)"
      "\"checkpoint saves\" on entering new map."
      "This can work wrong with some complex mods, so you can try if it"
      "works (by completing one map, quicksave, and load autosave), and"
      "turn this off if something is wrong.";
  }

  option bool {
    title = "Allow vanilla cheatcodes";
    cvar = allow_vanilla_cheats;
    help = "Turn this on to allow IDXXX cheatcodes from Vanilla DooM.";
  }

  option slider {
    title = "Bobbing";
    cvar = movebob;
    step = 0.1;
    min = 0;
    max = 1;
  }

  option slider {
    title = "Save compression";
    cvar = save_compression_level;
    step = 1;
    min = 0;
    max = 9;
  }


  header "Internal Node Builder";

  option enum {
    title = "Internal Nodes Builder";
    cvar = nodes_builder_type;
    list {
      "Auto",
      "AJBSP",
      "ZDBSP",
    }
    help =
      "Internal nodes builder."
      "If set to 'Auto', the engine will select the nodes builder"
      "that should did its best on a given map."
      "\cJIf unsure, leave it as 'Auto'.";
  }

  option enum [__k8vavoom_developer_version > 0] {
    title = "Normal Nodes Builder";
    cvar = nodes_builder_normal;
    list {
      "Auto",
      "AJBSP",
      "ZDBSP",
    }
    help =
      "Nodes builder for normal (non-UDMF) maps."
      "\cGDO NOT set to 'Auto'!";
  }

  option enum [__k8vavoom_developer_version > 0] {
    title = "UDMF Nodes Builder";
    cvar = nodes_builder_udmf;
    list {
      "Auto",
      "AJBSP",
      "ZDBSP",
    }
    help =
      "Nodes builder for UDMF maps."
      "\cGDO NOT set to 'Auto'!";
  }

  option bool {
    title = "Force node rebuilding";
    cvar = loader_force_nodes_rebuild;
    help =
      "Always rebuild nodes for a map."
      "\cJIf in doubt, leave this 'ON'.";
  }

  option bool {
    title = "Fast mode (suboptimal)";
    cvar = nodes_fast_mode;
    help =
      "Use simpler nodes building algorithm. This can speedup"
      "building nodes for some huge maps, but rendering"
      "(and other engine activities) can be somewhat slower."
      "\cJIf in doubt, leave this 'OFF'.";
  }

  option bool {
    title = "Show builder warnings";
    cvar = nodes_show_warnings;
  }

  option bool {
    title = "Allow PWAD z-nodes";
    cvar = nodes_allow_compressed;
    help =
      "Load prebuilt GL Nodes?"
      "If turned off, the engine will use internal node builder."
      "\cJIf in doubt, set this to 'OFF'."
      "\cGWARNING: GL Node loader is buggy, and may not work.";
  }

  option bool [__k8vavoom_developer_version > 0] {
    title = "Build (rough) PVS";
    cvar = pvs_build_on_loading;
    help =
      "Build simple PVS set."
      "This rarely speeds up rendering, but can take alot of time to build.";
  }

  option numeric [__k8vavoom_developer_version > 0] {
    title = "PVS threads";
    cvar = pvs_threads;
    step = 1;
    min = 0;
    max = 16;
    help =
      "How many CPU cores can be used to build PVS set?"
      "0 means 'Use all available cores'.";
  }


  header "Cache options";

  option bool {
    title = "Cache built data";
    cvar = loader_cache_data;
    help =
      "If level loading takes too much time, the engine can cache level data,"
      "so next loads will be MUCH faster.";
  }

  option bool {
    title = "(autoreset) Kill cache for next map";
    cvar = loader_cache_ignore_one;
    textColor = BRICK;
    help =
      "Ignore cache for next loaded map."
      "This option will be automatically reset after map loading.";
  }

  option numeric {
    title = "Cache timeout (seconds)";
    cvar = loader_cache_time_limit;
    step = 0.5;
    min = 0.5;
    max = 16;
    help = "How long level loading should take to make engine cache data?";
  }

  option numeric {
    title = "Cache max age (days)";
    cvar = loader_cache_max_age_days;
    step = 1;
    min = 1;
    max = 32;
    help =
      "Engine will automatically delete old caches."
      "This options controls cache data age."
      "Cache data older than this will be deleted.";
  }

  option slider {
    title = "Cache compression";
    cvar = loader_cache_compression_level;
    step = 1;
    min = 0;
    max = 9;
  }


  header "Deepwater options";

  option bool {
    title = "Classic deepwater";
    cvar = deepwater_hacks;
    help = "Fix self-referenced Deep Water sectors, so they will be rendered properly.";
  }

  option bool {
    title = "Fix floor floodfill bugs";
    cvar = deepwater_hacks_floor;
    //textColor = LIGHTBLUE;
    //textColor = DARKRED;
    textColor = PURPLE;
    help =
      "This tries to fix sectors without low texture."
      "You may know it as 'flat floodfill bug' in Vanilla."
      "Currently this fixer is very simple, and can fix only simple cases."
      "It may cause rendering glitches, but such cases are rare."
      "\cJIf in doubt, turn this 'ON'. Yes, 'ON'!";
  }

  option bool {
    title = "Fix ceiling floodfill bugs";
    cvar = deepwater_hacks_ceiling;
    //textColor = LIGHTBLUE;
    //textColor = DARKRED;
    textColor = PURPLE;
    help =
      "This tries to fix sectors without high texture."
      "You may know it as 'flat floodfill bug' in Vanilla."
      "Currently this fixer is very simple, and can fix only simple cases."
      "It may cause rendering glitches, but such cases are rare."
      "\cJIf in doubt, turn this 'ON'. Yes, 'ON'!";
  }

  option bool {
    title = "Fix Hanging Bridges";
    cvar = deepwater_hacks_bridges;
    textColor = PURPLE;
    help =
      "This tries to fix 'Hanging Bridges'."
      "Vanilla floodfill bug sometimes exploited to create bridges"
      "that looks like hanging over the lower sector floor. Those"
      "bridges are still 2D, but they are looking 3D."
      "It may cause rendering glitches, but such cases are rare."
      "\cJIf in doubt, turn this 'ON'. Yes, 'ON'!";
  }


  header "Particle FX options";

  option bool {
    title = "Particle effects";
    cvar = r_particle_effects;
  }

  option bool {
    title = "Particle puffs";
    cvar = r_particle_puffs;
  }

  option bool {
    title = "Particle blood";
    cvar = r_particle_blood;
  }

  option bool {
    title = "Particle trails";
    cvar = r_particle_trails;
  }


  header "GZDoom Emulation Options";

  option bool {
    title = "Emulate Broken Gotos";
    cvar = dbg_emulate_broken_gozzo_gotos;
    help =
      "GZDoom simply continues the execution if decorate state is trying to"
      "jump to non-existing state. k8vavoom destroys the actor in this case."
      "Destroying the actor allows to detect mod bugs, but emulating broken"
      "gotos allows to play some mods."
      "\cGWARNING! This may cause some mods (especially weapon mods) to malfunction!"
      "Also, you will get a console warning in any case.";
  }
}
