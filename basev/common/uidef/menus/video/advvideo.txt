// use "extend" to extend menu

// advanced video options menu
menudef AdvVideoOptions {
  //selector = MenuSelector_SmallRight;
  Title = "ADVANCED VIDEO OPTIONS";

  option bool {
    title = "Decals";
    cvar = r_decals;
  }

  option slider {
    title = "Maximum Big Decals";
    cvar = gl_bigdecal_limit;
    help =
      "Maximum number of relatively big decals on one wall segment.",
      "Keep this number small if you're playing with Gore mod, because",
      "alot of big blood decals can slow down rendering when you're",
      "looking at a wall from a close distance.",
      "",
      "0 means 'no limit'.";
    step = 1;
    min = 0;
    max = 64;
  }

  option slider {
    title = "Maximum Small Decals";
    cvar = gl_smalldecal_limit;
    help =
      "Maximum number of small decals (like bullet marks) on one wall segment.",
      "",
      "0 means 'no limit'.";
    step = 1;
    min = 0;
    max = 128;
  }

  option bool {
    title = "Recalc Static Lightmaps";
    cvar = r_lmap_recalc_static;
    help =
      "Recalculate static lightmaps when map geometry changed?",
      "This may cause major slowdowns for maps with huge light sources",
      "near doors/lifts.",
      "You can switch this option off if it is your case.",
      "Please, note that lighting will be less correct with this option",
      "turned off.",
      "\cJIf unsure, leave it enabled.";
  }

  option bool {
    title = "Recalc Lightmaps For Static Lights";
    cvar = r_lmap_recalc_moved_static;
    help =
      "Recalculate lightmaps when static light source was moved?",
      "If the map has something like candelabra on a lift, and that",
      "lift was moved, the engine can recalculate lighting.",
      "This is usually almost unnoticeable, but you can turn this off",
      "if you're playing some decoration-heavy map.",
      "\cJIf unsure, leave it enabled.";
  }

  option slider {
    title = "Static Lightmap Recalc Timeout";
    cvar = r_lmap_recalc_timeout;
    min = 0;
    max = 30;
    step = 1;
    help =
      "Do not use more than this number of milliseconds to recalculate",
      "static lightmaps.",
      "If the engine needs to update static lightmaps, and updating takes",
      "more than this, some surfaces will be scheduled to update in the next",
      "frame. '0' means 'no limit'.",
      "Please, note that lighting may flicker a little if lightmap rebuilding",
      "cannot be finished in time. This is harmless, but can be slightly annoying.",
      "\cJIf unsure, leave it as is.";
  }

  option bool {
    title = "Partial Lightmap Update";
    cvar = gl_lmap_allow_partial_updates;
    help =
      "Allow partial lightmap atlas updates?"
      "Usually, only some lightmaps need to be updated for each frame."
      "The engine keep lightmaps cached in several big texture atlases,"
      "and can update only changed parts. But this can be buggy"
      "with some drivers."
      "\cJIf unsure, leave it enabled.";
  }

  option bool {
    title = "Disable Overbright Rendering";
    cvar = gl_regular_disable_overbright;
    help =
      "*Disable* overbright lightmaps?"
      "Setting this to 'ON' (i.e. disabling) may be useful for complex",
      "maps with alot of visible geometry and lighting. Overbrighting",
      "requires one more texture sampler, and this can cause some",
      "slowdowns.",
      "\cJIf unsure, leave it as 'OFF'.";
  }

  /* textures are always sorted, because why not?
  option bool {
    title = "Sort textures";
    cvar = gl_sort_textures;
    help =
      "Sort textures, so renderer will do less texture switches."
      "This can win several FPS on huge maps.";
  }
  */

  /* sprites are always sorted, because why not?
  option bool {
    title = "Sort sprites";
    cvar = r_sort_sprites;
    help =
      "Sort sprites, so sprites on the same coords will flicker less."
      "This *can* reduce sprite flickering, but it is not guaranteed.";
  }
  */

  option bool {
    title = "Better Thing Rendering";
    cvar = r_draw_adjacent_sector_things;
    help =
      "Render all things that touches a visible sector."
      "This can slow down rendering a little, but fixes some cases where a"
      "thing suddenly pops into view when camera moves a little.";
  }


  header "Ambient Light";

  option bool {
    title = "Level ambient light";
    cvar = r_allow_ambient;
    help =
      "Set to 'OFF' to turn off sector lighting"
      "(i.e. the map will be lighted only by dynamic lights).";
  }

  option slider {
    title = "Minimum ambient light";
    cvar = r_ambient_min;
    help = "If the map is too dark, you can set minimum light level.";
    step = 16;
    min = 0;
    max = 255;
  }


  header "Lighting";

  option bool {
    title = "Darken lights";
    cvar = r_darken;
  }

  option bool {
    title = "Simulate Faded lights";
    cvar = r_fade_light;
  }

  option enum {
    title = "Fake Wall Contrast";
    cvar = r_fakecontrast;
    list {
      "Disable",
      "Vanilla Fake Contrast",
      "Smooth Lighting",
    }
    help =
      "Controls fake contrast/smooth lighting for walls."
      "Please note that MAPINFO will override this setting."
      "\cJYou need to restart level for this to take effect.";
  }

  option bool {
    title = "Force Fake Contrast";
    cvar = r_fakecontrast_ignore_mapinfo;
    help = "Ignore MAPINFO fake contrast setting, and always use the previous setting.";
  }

  option enum {
    title = "Static Lightmap Filtering";
    cvar = r_lmap_filtering;
    list {
      "None",
      "Simple (recommended)",
      "Simple+Extra",
      "Extra (slow)",
    }
    help =
      "What kind of filtering apply to static lightmaps?"
      "You can try various options to find good balance"
      "between speed and quality.";
  }

  option enum {
    title = "Static Lightmap Tracing Mode";
    cvar = r_lmap_bsp_trace_static;
    list {
      "Blockmap",
      "BSP",
    }
    help =
      "Should static lightmap tracer use blockmap, or BSP tree",
      "to cast rays? Blockmap tracer is about 3.5 times faster,",
      "and usually gives better results.";
  }

  option enum {
    title = "Dynamic Lightmap Tracing Mode";
    cvar = r_lmap_bsp_trace_dynamic;
    list {
      "Blockmap",
      "BSP",
    }
    help =
      "Should static lightmap tracer use blockmap, or BSP tree",
      "to cast rays? Blockmap tracer is about 3.5 times faster,",
      "and usually gives better results.";
  }

  option slider {
    title = "Light Fade Factor";
    cvar = r_fade_factor;
    step = 1;
    min = 1;
    max = 10;
  }

  option slider {
    title = "Sky Brightness Factor";
    cvar = r_sky_bright_factor;
    step = 0.1;
    min = 0.1;
    max = 1;
  }


  header "Lightmap Light Tracing";

  option bool {
    title = "Check textures in static trace";
    cvar = r_lmap_texture_check_static;
    help =
      "Should static light tracer check textures to allow static light",
      "shine through texture holes?";
  }

  option bool {
    title = "Check textures in dynamic trace";
    cvar = r_lmap_texture_check_dynamic;
    help =
      "Should static light tracer check textures to allow dynamic light",
      "shine through texture holes?";
  }

  option numeric {
    title = "Minimum texcheck dynamic radius";
    cvar = r_lmap_texture_check_radius_dynamic;
    step = 10;
    min = 0;
    max = 1000;
    help =
      "Do not check textures if dynamic light is smaller than this radius.";
  }


  header "Thing Light Tracing";

  option bool {
    title = "Check textures in static trace";
    cvar = r_lmap_texture_check_static;
    help =
      "Should static light tracer check textures to allow static light",
      "shine through texture holes when checking thing lighting?";
  }

  option bool {
    title = "Check textures in dynamic trace";
    cvar = r_lmap_texture_check_dynamic;
    help =
      "Should static light tracer check textures to allow dynamic light",
      "shine through texture holes when checking thing lighting?";
  }

  option numeric {
    title = "Minimum texcheck dynamic radius";
    cvar = r_lmap_texture_check_radius_dynamic;
    step = 10;
    min = 0;
    max = 1000;
    help =
      "Do not check textures if dynamic light is smaller than this radius",
      " when checking thing lighting.";
  }


  /*
  header "Translucency";

  option bool {
    title = "Better translucent wall lighting";
    cvar = r_adv_masked_wall_vertex_light;
    help =
      "Estimate lighting of translucent wall using its vertices?"
      "Currently, translucent walls are not affected by dynamic"
      "lighting. You can use this option to estimate lighting in"
      "such cases."
      "Note that this can slow down rendering for maps with alot of"
      "translucent walls.";
  }
  */


  header "Dynamic Lighting";

  option bool {
    title = "Dynamic/stencil shadows";
    cvar = r_shadows;
  }

  option bool {
    title = "Dynamic lights";
    cvar = r_dynamic_lights;
  }

  option bool {
    title = "Clip Dynamic Lights";
    cvar = r_dynamic_clip;
    help =
      "Trace dynamic light sources to produce proper shadows, and"
      "to prevent bonuses shining through secret walls."
      "This may slow down rendering a little, but most of the time"
      "it is OK to have this turned on."
      "Note that slowdown doesn't depend on map size, only on geometry complexity.";
  }

  option bool {
    title = "Better DynLight Visibility Check";
    cvar = r_dynamic_light_better_vis_check;
    help =
      "Perform BSP visibility check before trying to add dynamic light."
      "This may, or may not make things better for you."
      "Note that you cannot have more than 32 dynamic lights in one frame,"
      "so the engine has to decide somehow which dynlighs can be dropped."
      "There are some heuristics for this, and visibility check can help."
      "Another drawback of this feature is that the checker is using"
      "visibility info from the previous frame, not from the current one.";
  }

  option bool {
    title = "Model Dynamic lighting";
    cvar = r_model_light;
  }

  /* k8: this doesn't work with shaders; need to be restored later
  option bool {
    title = "Model Vertex Lightning";
    cvar = gl_model_lighting;
  }
  */

  header "Shadow Volumes";

  option bool {
    title = "Model Shadows";
    cvar = r_model_shadows;
    help = "Let 3D models cast shadows in stenciled lighting mode.";
  }

  option bool {
    title = "Player Shadows";
    cvar = r_camera_player_shadows;
    help =
      "Let player 3D model cast shadows in stenciled lighting mode."
      "This doesn't affect non-camera player models.";
  }


  header "Other Lightmap Lighting";

  option bool {
    title = "Static Lightmap Overbright";
    cvar = r_lmap_overbright_static;
  }

  option slider {
    title = "Specular (overbright) Intensity";
    cvar = r_lmap_specular;
    step = 0.1;
    min = 0;
    max = 4;
  }

  option bool {
    title = "Precalculate Static Lights";
    cvar = r_precalc_static_lights;
    help =
      "Precalculate static lights for lightmapped renderer?"
      "For most maps this takes a little time, but there can be maps"
      "with alot of lighting decorations, and preprocessing those can take"
      "alot of time too. Note that the engine is able to cache calculated"
      "lightmaps, so most of the time full calculation will be perfromed"
      "only once per map."
      "\cJIf in doubt, leave this 'ON'.\c-";
  }


  header "Texture Filtering";

  option numeric [gl_max_anisotropy > 1] {
    title = "Anisotropy level";
    cvar = gl_texture_filter_anisotropic;
    step = 1;
    min = 1;
    max = [gl_max_anisotropy];
    help =
      "Setting this to something greater than '1' will tell GPU to peform",
      "some filtering on far-away textures, so they will less likely be turned",
      "into pixel mess.",
      "Please, note that this requires at least 'Nearest Mipmap' texture filtering.",
      "If your GPU supports high values here, you can stop at '8'. Higher values",
      "are slower, and usually won't improve the picture.";
  }

  option enum {
    title = "Texture Filter";
    cvar = gl_texture_filter;
    list {
      "Nearest",
      "Nearest Mipmap",
      "Linear Nearest",
      "Bilinear",
      "Trilinear"
    }
    help = "Wall/floor/ceiling texture filtering mode.";
  }

  option enum {
    title = "Sprites Filter";
    cvar = gl_sprite_filter;
    list {
      "Nearest",
      "Nearest Mipmap",
      "Linear Nearest",
      "Bilinear",
      "Trilinear"
    }
    help = "Sprite texture filtering mode.";
  }

  option enum {
    title = "Models Filter";
    cvar = gl_model_filter;
    list {
      "Nearest",
      "Nearest Mipmap",
      "Linear Nearest",
      "Bilinear",
      "Trilinear"
    }
    help = "3D models texture filtering mode.";
  }


  header "UI Graphics Filtering";

  option bool {
    title = "Font filtering";
    cvar = gl_font_filtering;
    help = "UI font texture filtering (smoothing).";
  }

  option bool {
    title = "Pictures filtering";
    cvar = gl_pic_filtering;
    help = "Backdrop picture filtering (smoothing).";
  }


  header "Strange Options";

  option bool [/*gl_is_shitty_gpu == 0 &&*/ __k8vavoom_developer_version > 0] {
    title = "Use floating Point Depth Buffer";
    cvar = gl_enable_fp_zbuffer;
    help =
      "Floating point depth buffer has much better precision than normal,"
      "but it is twice as big. Turning off fp depth buffer can give you"
      "somewhat better FPS in stenciled lighting."
      "\cJIf in doubt, leave this 'OFF'."
      ""
      "\cKNOTE: You have to go to 'Screen Resolution' menu and"
      "\cKuse 'Set Resolution' to activate this.";
  }

  option bool [gl_is_shitty_gpu == 0] {
    title = "Enable 'Reverse Z' trick";
    cvar = gl_enable_reverse_z;
    help =
      "This is the trick that allows almost infinite view distance."
      "There is no reason to manually change this, as the engine will"
      "automatically turn this off if your GPU is not capable of using"
      "this trick."
      ""
      "\cJIf in doubt, leave this 'ON'."
      "\cGWARNING: stenciled lighting is broken with fp depth buffer, if"
      "\cGthis is turned off!"
      ""
      "\cKNOTE: You have to go to 'Screen Resolution' menu and"
      "\cKuse 'Set Resolution' to activate this.";
  }

  option bool {
    title = "Improve depth buffer precision";
    cvar = gl_enable_clip_control;
    help =
      "If your OpenGL has `glClipControl()` function (or the corresponding"
      "extension), the engine can better utilize depth buffer (you can set"
      "'gl_maxdist' cvar to greater values without artifacts)."
      "\cJIf in doubt, leave this 'ON', and the engine will decide."
      "Note that 'reverse z trick' won't work with this feature disabled."
      ""
      "\cKNOTE: You have to go to 'Screen Resolution' menu and"
      "\cKuse 'Set Resolution' to activate this.";
  }
}
