// use "extend" to extend menu

// advanced video options menu
menudef AdvVideoOptions {
  //selector = MenuSelector_SmallRight;
  Title = "ADVANCED VIDEO OPTIONS";

  option bool {
    title = "Decals";
    cvar = r_decals_enabled;
  }

  option bool {
    title = "Sort textures";
    cvar = gl_sort_textures;
    help =
      "Sort textures, so renderer will do less texture switches."
      "This can win several FPS on huge levels.";
  }

  option bool {
    title = "Sort sprites";
    cvar = r_sort_sprites;
    help =
      "Sort sprites, so sprites on the same coords will flicker less."
      "This *can* reduce sprite flickering, but it is not guaranteed.";
  }

  option bool {
    title = "Better Thing Rendering";
    cvar = r_draw_adjacent_subsector_things;
    help =
      "Render all things from a visible sector."
      "This can slow down rendering a little, but fixes some cases where"
      "thing is suddenly disappears when it's subsector is not visible.";
  }


  header "Lighting";

  option bool {
    title = "Darken lights";
    cvar = r_darken;
  }

  option bool {
    title = "Simulate Faded lights";
    cvar = r_fade_light;
  }

  option enum {
    title = "Static Lightmap Filtering";
    cvar = r_lmap_filtering;
    list {
      "None",
      "Simple (recommended)",
      "Simple+Extra",
      "Extra (slow)",
    }
    help =
      "What kind of filtering apply to static lightmaps?"
      "You can try various options to find good balance"
      "between speed and quality.";
  }

  option slider {
    title = "Light Fade Factor";
    cvar = r_fade_factor;
    step = 1;
    min = 1;
    max = 10;
  }

  option slider {
    title = "Sky Brightness Factor";
    cvar = r_sky_bright_factor;
    step = 0.1;
    min = 0.1;
    max = 1;
  }


  header "Translucency";

  option slider {
    title = "Lost Souls Translucency";
    cvar = r_transsouls;
    step = 0.05;
    min = 0;
    max = 1;
  }

  option bool {
    title = "Optional Fuzzy Effect";
    cvar = r_drawfuzz;
  }


  header "Dynamic Lighting";

  option bool {
    title = "Dynamic lights";
    cvar = r_dynamic;
  }

  option bool {
    title = "Clip Dynamic Lights";
    cvar = r_dynamic_clip;
  }

  option bool {
    title = "Properly Clip DynLights";
    cvar = r_dynamic_clip_more;
    help =
      "Trace dynamic light sources to produce proper shadows, and"
      "to prevent bonuses shining through secret walls."
      "This may slow down rendering a little, but most of the time"
      "it is OK to have this turned on."
      "Note that slowdown doesn't depend on level size, only on geometry complexity.";
  }

  option bool {
    title = "Better DynLight Visibility Check";
    cvar = r_dynamic_light_better_vis_check;
    help =
      "Perform BSP visibility check before trying to add dynamic light."
      "This may, or may not make things better for you."
      "Note that you cannot have more than 32 dynamic lights in one frame,"
      "so the engine has to decide somehow which dynlighs can be dropped."
      "There are some heuristics for this, and visibility check can help."
      "Another drawback of this feature that checker is using visibility"
      "info from the previous frame, not from the current one.";
  }

  option bool {
    title = "Model Dynamic lighting";
    cvar = r_model_light;
  }

  /* k8: this doesn't work with shaders; need to be restored later
  option bool {
    title = "Model Vertex Lightning";
    cvar = gl_model_lighting;
  }
  */

  option bool {
    title = "Model Shadows";
    cvar = r_model_shadows;
    help =
      "Let 3D models cast shadows in stenciled lighting mode."
      "WARNING: This will *DRAMATICALLY* slow down renderer!";
  }


  header "Other Lightmap Lighting";

  option bool {
    title = "Additive Static Lights";
    cvar = r_static_add;
  }

  option bool {
    title = "Specular Highlights";
    cvar = gl_specular_highlights;
  }

  option slider {
    title = "Specular Level";
    cvar = r_specular;
    step = 0.1;
    min = 0;
    max = 2;
  }


  header "Miscellaneous";

  option bool {
    title = "Blend sprites";
    cvar = gl_blend_sprites;
    help =
      "May make rendering faster or slower. Who knows?"
      "If in doubt, leave this 'OFF'.";
  }


  header "Texture Filtering";

  option numeric [gl_max_anisotropy > 1] {
    title = "Anisotropy level";
    cvar = gl_texture_filter_anisotropic;
    step = 1;
    min = 1;
    max = [gl_max_anisotropy];
  }

  option enum {
    title = "Texture Filter";
    cvar = gl_texture_filter;
    list {
      "Nearest",
      "Nearest Mipmap",
      "Linear Nearest",
      "Bilinear",
      "Trilinear"
    }
  }

  option enum {
    title = "Sprites Filter";
    cvar = gl_sprite_filter;
    list {
      "Nearest",
      "Nearest Mipmap",
      "Linear Nearest",
      "Bilinear",
      "Trilinear"
    }
  }

  option enum {
    title = "Models Filter";
    cvar = gl_model_filter;
    list {
      "Nearest",
      "Nearest Mipmap",
      "Linear Nearest",
      "Bilinear",
      "Trilinear"
    }
  }

  header "Strange Options";

  option bool [gl_is_shitty_gpu == 0] {
    title = "Use floating Point Depth Buffer";
    cvar = gl_enable_fp_zbuffer;
    help =
      "Floating point depth buffer has much better precision than normal,"
      "but it is twice as big. Turning off fp depth buffer can give you"
      "somewhat better FPS in stenciled lighting."
      ""
      "NOTE: You have to go to 'Screen Resolution' menu and"
      "use 'Set Resolution' to activate this.";
  }

  option bool [gl_is_shitty_gpu == 0] {
    title = "Enable 'Reverse Z' trick";
    cvar = gl_enable_reverse_z;
    help =
      "IF IN DOUBT, LEAVE THIS 'ON'!"
      "WARNING: stenciled lighting is broken with fp depth buffer, if"
      "this is turned off!"
      ""
      "This is the trick that allows almost infinite view distance."
      "There is no reason to manually change this, as the engine will"
      "automatically turn this off if your GPU is not capable of using"
      "this trick."
      ""
      "NOTE: You have to go to 'Screen Resolution' menu and"
      "use 'Set Resolution' to activate this.";
  }

  option bool {
    title = "Improve depth buffer precision";
    cvar = gl_enable_clip_control;
    help =
      "If your OpenGL has `glClipControl()` function (or the corresponding"
      "extension), the engine can better utilize depth buffer (you can set"
      "'gl_maxdist' cvar to greater values without artifacts)."
      "If in doubt, leave this 'ON', and the engine will decide."
      "Note that 'reverse z trick' won't work with this feature disabled.";
  }
}
