// accessibility options menu
menudef AccessibilityOptions {
  //selector = MenuSelector_SmallRight;
  Title = "ACCESSIBILITY OPTIONS";


  header "Bobbing";

  option slider {
    title = "Head Bobbing";
    cvar = movebob;
    step = 0.1;
    min = 0;
    max = 1;
    help = "Player camera bobbing. Vanilla default is 0.25.";
  }

  option slider {
    title = "Weapon Bobbing";
    cvar = weaponbob;
    step = 0.02;
    min = 0;
    max = 1;
    help = "Player weapon bobbing. Relative to camera bobbing.";
  }


  header "Lighting Control";

  option enum {
    title = "Flickering/Pulse Sector Light";
    cvar = r_sectorflick_mode;
    list {
      "Enabled",
      "When Sector Is Invisible",
      "Disabled",
    }
    help =
      "Control flickering/pulse sector lighting.",
      "\c[WHITE]Note that dynamic lights are independent of this!\c-";
  }

  option slider {
    title = "Fixed Light Level";
    cvar = r_force_sector_light;
    step = 4;
    min = 0;
    max = 255;
    help =
      "Force uniform lighting for all sectors.",
      "\c[WHITE]0\c- means don't force.";
  }

  option slider {
    title = "Extra Level Lighting";
    cvar = r_level_extra_lighting;
    step = 4;
    min = 0;
    max = 255;
    help = "Increase lighting of all sectors.";
  }

  option enum {
    title = "Extra Light From Firing";
    cvar = r_extralight_mode;
    list {
      "Enabled",
      "Disabled"
    }
    help =
      "Enable or disable extra lighting from weapon firing.",
      "Please, note that this won't affect dynamic lighting",
      "that can be attached to player weapons!";
  }

  option bool {
    title = "Allow Dynamic Lights";
    cvar = r_dynamic_lights;
    help = "Allow dynamic lighting with light sources?";
  }

  option bool {
    title = "Allow Static Lighting";
    cvar = r_static_lights;
    help =
      "Allow static lighting with light sources?",
      "\c[WHITE]Please, note that static lights may still flicker or pulse!\c-";
  }

  option enum {
    title = "Lighting Effects";
    cvar = r_dynlightfx_mode;
    list {
      "Enabled",
      "Disabled"
    }
    help =
      "You can turn off lighting effects from dynamic lighting here.",
      "Note that this controls static light from light sources too",
      "(i.e. from things like candelabras, or static light sources",
      "directly put on the map).",
      "\c[WHITE]Please, note that most lighting from things (like powerups)\c-",
      "\c[WHITE]is not controlled by this.\c-",
      "\c[WHITE]You may want to disable sprite dynamic lights too.\c-";
  }

  option enum {
    title = "Sprite Dynamic Lights";
    cvar = r_sprlight_mode;
    list {
      "Enabled",
      "Disabled"
    }
    help =
      "You can turn off lighting effects from sprites here.",
      "Sprites can have light sources attached to specific frames.",
      "Here, you can turn off those lights. It is hard to control",
      "flickering for such lights, so the only way is to control them",
      "is to turn them off (at least for now).";
  }


  header "Render Control";

  option bool {
    title = "Render Player Weapon";
    cvar = r_draw_psprites;
    help =
      "You can turn off psprite (player weapons) rendering.";
  }

  option enum {
    title = "Screen Shaking";
    cvar = r_screen_shake_mode;
    // bit 0: quake disabled
    // bit 1: thrust disabled
    list {
      "Normal",
      "Quake Disabled",
      "Thrust Disabled",
      "Quake And Thrust Disabled",
    }
    help = "You can turn off screen shacking from earthquakes and such here.";
  }


  header "Fullbright Sprites";

  option enum {
    title = "Fullbright Sprites";
    cvar = r_fullbright_sprites_mode;
    list {
      "Normal",
      "Interesting",
      "All"
    }
    help =
      "Always render sprites as fullbright?",
      "'Interesting' sprites are players, monsters, projectiles, and pickups.";
  }

  option slider {
    title = "Player Fullbright Level";
    cvar = r_fullbright_splevel_player;
    min = 0;
    max = 255;
    step = 4;
  }

  option slider {
    title = "Monster Fullbright Level";
    cvar = r_fullbright_splevel_monster;
    min = 0;
    max = 255;
    step = 4;
  }

  option slider {
    title = "Projectile Fullbright Level";
    cvar = r_fullbright_splevel_missile;
    min = 0;
    max = 255;
    step = 4;
  }

  option slider {
    title = "Pickup Fullbright Level";
    cvar = r_fullbright_splevel_pickup;
    min = 0;
    max = 255;
    step = 4;
  }

  option slider {
    title = "Corpse Fullbright Level";
    cvar = r_fullbright_splevel_corpse;
    min = 0;
    max = 255;
    step = 4;
  }

  option slider {
    title = "Decoration Fullbright Level";
    cvar = r_fullbright_splevel_decoration;
    min = 0;
    max = 255;
    step = 4;
  }

  option slider {
    title = "Other Fullbright Level";
    cvar = r_fullbright_splevel_other;
    min = 0;
    max = 255;
    step = 4;
  }


  header "Global Colormap/Tint Control";

  option enum {
    title = "Global Colormap Mode";
    cvar = r_colormap_mode;
    list {
      "Default",
      "No Fullbright",
      "No Color Change",
      "Fully Disabled",
    }
    help =
      "You can globally control colormap effects with this.",
      "It is possible to disable map fullbright, color change, or both.",
      "Individual colormap settings for some powerups can be set below.";
  }

  option enum {
    title = "Global Colortint Mode";
    cvar = r_colortint_mode;
    list {
      "Enabled",
      "Disabled",
    }
    help =
      "You can globally control colorting effects with this.",
      "Color tinting is screen flashing on pickups,",
      "or other such palette-like color tinting effects.";
  }


  header "Color Maps";

  option enum {
    title = "Inverse Colormap";
    cvar = k8ColormapInverse;
    list {
      "Original Inverse",
      "Monochrome Grayscale",
      "Gold",
      "Green",
      "Red",
      "Berserk Red",
      "Blue",
      "Inverse",
      "No Color Change",
      "Fixed Light Amplification",
    }
    help =
      "You can replace original 'inversed' colormap for invulnerability"
      "with another one of your choice.";
  }

  option enum {
    title = "LightAmp Colormap";
    cvar = k8ColormapLightAmp;
    list {
      "Original",
      "Monochrome Grayscale",
      "Gold",
      "Green",
      "Red",
      "Berserk Red",
      "Blue",
      "Inverse",
      "No Color Change",
      "Fixed Light Amplification",
    }
    help =
      "You can replace LightAmp colormap with another one of your choice.";
  }

  option enum {
    title = "Berserk Colormap";
    cvar = k8ColormapBerserk;
    list {
      "Original Tint",
      "Monochrome Grayscale",
      "Gold",
      "Green",
      "Red",
      "Berserk Red",
      "Blue",
      "Inverse",
      "No Color Change",
      "Fixed Light Amplification",
    }
    help =
      "You can replace Berserk tint with a colormap of your choice."
      "Note that you can override berserk tint color with cvar:"
      "\cJk8BerserkTint #100";
  }

  option enum {
    title = "EnviroSuit Colormap";
    cvar = k8ColormapEnviSuit;
    list {
      "Original Tint",
      "Monochrome Grayscale",
      "Gold",
      "Green",
      "Red",
      "Berserk Red",
      "Blue",
      "Inverse",
      "No Color Change",
      "Fixed Light Amplification",
    }
    help =
      "You can replace EnviroSuit tint with a colormap of your choice.";
  }

  option slider {
    title = "Max Pickup Flash Time";
    cvar = k8BonusFlashMaxTime;
    min = 0.0;
    max = 4.0;
    step = 0.1;
    help =
      "Maximum time for bonus flash.",
      "If too high, picking up alot of bonuses can be annoying.",
      "One bonus lasts 0.2 seconds. Use 0 for unlimited time.";
  }

  option slider {
    title = "Max Damage Tint Intensity";
    cvar = k8DamageFlashMaxIntensity;
    min = 0.0;
    max = 1.0;
    step = 0.02;
    help =
      "Maximum intensity for damage screen tint.",
      "Getting alot of damage in a short time turns screen to",
      "almost completely red. You can decrease this value to",
      "avoid this. But beware! This is very close to cheating.";
  }


  header "Color Blindness Helpers";

  option enum {
    title = "Color Swap Mode";
    cvar = acc_colorswap_mode;
    list {
      "RGB (normal)",
      "GBR",
      "GRB",
      "BRG",
      "BGR",
      "RBG"
    }
    help =
      "You can swap color components here.",
      "This will distort colors, of course, but may help some",
      "color-blind people to differentiate colors better.";
  }


  header "Color Blindness Emulation";

  option enum {
    title = "Colorblind Emulation Mode";
    cvar = acc_colormatrix_mode;
    list {
      "None",
      "Protanopia",
      "Protanomaly",
      "Deuteranopia",
      "Deuteranomaly",
      "Tritanopia",
      "Tritanomaly",
      "Achromatopsia",
      "Achromatomaly",
    }
    help =
      "Rough colorblindness emulation modes.",
      "This can help you to test your maps/graphics against",
      "different colorblindness kinds.",
      "\c[!RED]WARNING! The emulation is not perfect!\c-";
  }
}
