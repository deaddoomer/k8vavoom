// video options menu
menudef VideoOptions {
  //selector = MenuSelector_SmallRight;
  Title = "VIDEO OPTIONS";

  header [gl_crippled_gpu > 0] "WARNING!";
  header [gl_crippled_gpu > 0] "YOUR GPU IS SEVERELY CRIPPLED";
  header [gl_crippled_gpu > 0] "BY THE VENDOR!";
  header [gl_crippled_gpu > 0] "ADVANCED K8VAVOOM GRAPHICAL";
  header [gl_crippled_gpu > 0] "FEATURES CAN BE VERY SLOW!";
  header [gl_crippled_gpu > 0] "-";

  option slider {
    title = "Brightness";
    cvar = brightness;
    step = 1;
    min = 0;
    max = 4;
  }

  option slider {
    title = "Light Fade Factor";
    cvar = r_fade_factor;
    step = 0.1;
    min = 0.1;
    max = 10;
  }

  option slider {
    title = "Sky Brightness Factor";
    cvar = r_sky_bright_factor;
    step = 0.1;
    min = 0;
    max = 4;
  }

  option slider {
    title = "Menu darkness";
    cvar = menu_darkening;
    step = 0.1;
    min = 0;
    max = 1;
    help = "Menu background darkening.";
  }

  option bool {
    title = "Screen Wipe";
    cvar = r_wipe_enabled;
    help = "Use screen wipe?";
  }

  option enum {
    title = "Wipe Type";
    cvar = r_wipe_type;
    list {
      "Vertical Crossfade Down",
      "Vertical Crossfade Up",
      "Fullscreen Crossfade",
    }
    help = "Select screen wipe type.";
  }

  option enum {
    title = "Underwater Distorsion";
    cvar = r_underwater;
    list {
      "None",
      "Quake-like",
    }
    help = "Use underwater distortion shader?";
  }

  option enum {
    title = "Tonemap";
    cvar = r_tonemap;
    list {
      "Normal",
      "Palette",
    }
    help =
      "Very experimental tonemapping modes.",
      "'Palette' will try to map the resulting image into 256-color palette.",
      "\c[WHITE]WARNING: this feature is VERY EXPERIMENTAL.";
  }

  option bool {
    title = "Tonemap PSprites";
    cvar = r_tonemap_psprites;
    help = "Apply tonemap filter to player sprites too?";
  }

  option bool [gl_can_hires_tonemap > 0] {
    title = "HiRes Tonemap LUT";
    cvar = gl_tonemap_pal_hires;
    help =
      "Use better palette LUT table for palette tonemap?",
      "This will use 128x128x128 color cube, but will",
      "require 16MB of VRAM instead of 1MB.";
  }

  option enum [gl_can_cas_filter > 0] {
    title = "Contrast Adaptive Sharpening";
    cvar = r_cas_filter;
    list {
      "None",
      "Simple",
    }
    help =
      "Very experimental CAS filtering.",
      "If you prefer to play with bilinear texture filtering,",
      "try to turn this on, it may make distant textures less",
      "blurry. This also helps to get better details for",
      "\"Nearest with mipmaps\" texture filtering mode.";
  }

  option slider [gl_can_cas_filter > 0] {
    title = "CAS Sharpening Coefficient";
    cvar = r_cas_filter_coeff;
    min = 0;
    max = 1;
    step = 0.1;
    help =
      "CAS Sharpening coefficient.",
      "You can play with this a little, to increase",
      "filter contrast.";
  }


  header "Lighting";

  option enum {
    title = "Light Mode";
    cvar = r_light_mode;
    list {
      "Vavoom",
      "Vanilla-like",
      "Vanilla-like Banded",
    }
    help =
      "This selects lighting mode.",
      "\c[!WHITE]Vavoom\c- is the lighting mode used in Vavoom, and then in k8vavoom.",
      "\c[!WHITE]Vanilla-like\c- is the lighting mode that is closest to Vanilla Doom.",
      "\c[!WHITE]Vanilla-like Banded\c- is like the previous one, but with banded levels.",
      "",
      "\"Banded\" means that it has a small amout of light levels, and the",
      "transition between them is not smoothed in any way.";
  }

  option slider [k8vavoom_developer_version > 0] {
    title = "Minimum Vanilla-like Visibility";
    cvar = r_light_globvis;
    min = -128;
    max = 128;
    step = 0.2;
    help = "Minimum visibility for Vanilla-like lighting mode.";
  }


  header "Overbright";

  option bool {
    title = "Lightmap Overbright";
    cvar = r_lmap_overbright;
  }

  option bool {
    title = "AdvRender Overbright";
    cvar = r_adv_overbright;
    help =
      "Overbright support for Shadow Maps and Shadow Volumes.",
      "\c[WHITE]WARNING! While this makes the picture better, it can eat 10 or more FPS!\c-",
      "\c[WHITE]Turn this 'OFF' for weaker CPUs or complex maps.";
  }

  option slider {
    title = "Specular (Overbright) Intensity";
    cvar = r_overbright_specular;
    step = 0.1;
    min = 0;
    max = 4;
  }


  header "Renderer";

  option render {
    title = "Level renderer";
    cvar = r_level_renderer;
    help =
      "Lightmapped renderer is faster, and produces nice soft light."
      "Stencil lighting produces DooM3-like sharp volumetric light."
      "\cJYou have to restart level/game (or load save) to activate new renderer."
      "\cJOr, you can use 'VidRendererRestart' console command.";
  }


  header "Voxel Models";

  option enum {
    title = "Voxel Optimisation";
    cvar = vox_optimisation;
    list {
      "Normal",
      "Better",
      "Maximum",
      "Ultra",
    }
    help =
      "Voxel models must be converted to polygonal models for",
      "GPU rendering. The converter can use various optimisation",
      "methods for this conversion.",
      "",
      "\c[Cyan]Normal\c- The fastest one, creates less 'Space Ants'.",
      "\c[Cyan]Better\c- Slightly slower, but produces better models.",
      "\c[Cyan]Maximum\c- Evenslowest one, but gives better results.",
      "\c[Cyan]Ultra\c- The slowest one, but gives the best results.",
      "If in doubt, choose '\c[WHITE]Ultra\c-'.",
      "",
      "Note that all methods will create 'Space Ants', but"
      "you may trade some rendering speed for visual quality",
      "by turning '\c[WHITE]Fix T-Junctions\c-' option '\c[WHITE]ON\c-'.";
  }

  option bool {
    title = "Fix Face Visibility";
    cvar = vox_fix_faces;
    help =
      "Some KVX models contain invalid visibility info.",
      "The engine can recalculate it for better conversion."
      "This is fast, so if in doubt, leave this '\c[WHITE]ON\c-'.";
  }

  option bool {
    title = "Fix T-Junctions";
    cvar = vox_fix_tjunctions;
    help =
      "Fix T-Junctions in converted voxel models?",
      "Voxel conversion introduces T-Junctions (you may"
      "know them as 'Space Ants').",
      "By default this option is turned off, but if you",
      "want to trade some rendering speed for slightly",
      "better visual quality, you can turn this on.",
      "",
      "\c[!Red]WARNING! Turning this 'ON' \c[!WHITE]DRAMATICALLY\c[!Red] increases",
      "\c[!Red]triangle count (i.e. slows down the rendering)!";
  }

  option bool {
    title = "Cache converted voxels";
    cvar = vox_cache_enabled;
    help =
      "Enable caching of converted voxel models?",
      "",
      "Converting voxels to 3D models can take a long time",
      "for big voxel packs, so the engine can cache converted",
      "models, and simply load them instead of voxels next time.",
      "Leave this 'ON' if in doubt, it is safe.";
  }

  option bool {
    title = "Verbose conversion";
    cvar = vox_verbose_conversion;
    help = "Show some informational messages from voxel converter?";
  }


  header "Texture Filtering Options";

  option numeric [gl_max_anisotropy > 1] {
    title = "Anisotropy level";
    cvar = gl_texture_filter_anisotropic;
    step = 1;
    min = 1;
    max = [gl_max_anisotropy];
    help =
      "Setting this to something greater than '1' will tell GPU to",
      "peform some filtering on far-away textures, so they will less",
      "likely be turned into pixel mess.",
      "Please, note that this requires at least 'Nearest Mipmap'",
      "texture filtering. If your GPU supports high values here,",
      "you can stop at '8'. Higher values are slower, and usually",
      "won't improve the picture.";
  }

  option enum {
    title = "Texture Filter";
    cvar = gl_texture_filter;
    list {
      "Nearest",
      "Nearest Mipmap",
      "Linear Nearest",
      "Bilinear",
      "Trilinear"
    }
    help = "Wall/floor/ceiling texture filtering mode.";
  }

  option enum {
    title = "Sprites Filter";
    cvar = gl_sprite_filter;
    list {
      "Nearest",
      "Nearest Mipmap",
      "Linear Nearest",
      "Bilinear",
      "Trilinear"
    }
    help = "Sprite texture filtering mode.";
  }

  option enum {
    title = "Models Filter";
    cvar = gl_model_filter;
    list {
      "Nearest",
      "Nearest Mipmap",
      "Linear Nearest",
      "Bilinear",
      "Trilinear"
    }
    help = "3D models texture filtering mode.";
  }


  header "UI Graphics Filtering";

  option bool {
    title = "Font filtering";
    cvar = gl_font_filtering;
    help = "UI font texture filtering (smoothing).";
  }

  option bool {
    title = "Pictures filtering";
    cvar = gl_pic_filtering;
    help = "Backdrop picture filtering (smoothing).";
  }


  header "Brightmap Options";

  option bool {
    title = "Brightmaps";
    cvar = r_brightmaps;
    help =
      "Enable brightmaps."
      "You still should have proper GLDEFS and brightmap textures loaded.";
  }

  option bool {
    title = "Sprite Brightmaps";
    cvar = r_brightmaps_sprite;
    help =
      "If you have brightmaps turned on, you can"
      "turn off brightmaps for sprites here.";
  }

  option bool {
    title = "Additive Brightmaps";
    cvar = r_brightmaps_additive;
    help =
      "If you have brightmaps turned on, brightmaps will be added"
      "to the current ambient light level, otherwise max(ambient, bmap)"
      "will be used.";
  }

  option bool {
    title = "Filter Brightmaps";
    cvar = r_brightmaps_filter;
    help =
      "Perform bilinear filtering on brightmaps."
      "This may look better, as brightmaps are supposed to glow.";
  }


  header "Other Visual Options";

  option bool {
    title = "Smooth particles";
    cvar = gl_smooth_particles;
  }

  option bool {
    title = "Glowing Flats";
    cvar = r_glow_flat;
    help =
      "Enable glowing flats."
      "You still should have proper GLDEFS loaded.";
  }

  /*
  option bool {
    title = "High Resolution Textures";
    cvar = r_hirestex;
    textColor = PURPLE;
    help =
      "This mode is experimental, and may produce broken lighting.",
      "\cGUse with caution, and please, don't report any bugs with this turned on.",
      "\cJRequires full engine restart after change.";
  }
  */


  header "Interpolation Options";

  option bool {
    title = "Movement";
    cvar = r_interpolate_thing_movement;
    help = "Interpolate thing/monster movement?";
  }

  option bool {
    title = "Sprite Rotation";
    cvar = r_interpolate_thing_angles_sprites;
    help =
      "Interpolate thing/monster rotation for sprites?",
      "",
      "This is separated from interpolation for 3D models,",
      "because some sprites looks funny when interpolated.",
      "Think of Baron of Hell attack, when he instantly",
      "turns to the player: it looks goofy when he raises",
      "his hand, and then turns to the player.",
      ""
      "\cJIf unsure, leave it 'OFF'.";
  }

  option bool {
    title = "3D Model Rotation";
    cvar = r_interpolate_thing_angles_models;
    help = "Interpolate rotation for 3D models?";
  }

  option bool {
    title = "3D Monster Rotation";
    cvar = r_interpolate_thing_angles_models_monsters;
    help =
      "Interpolate monster rotation for 3D models?",
      "Will have any effect only if the previous option is enabled.";
  }


  header "More Options";

  option submenu {
    title = "Texture Precaching Options";
    submenu = "PrecacheVideoOptions";
  }

  option submenu {
    title = "Sprite And Fake Shadow Options";
    submenu = "SpriteVideoOptions";
  }

  option submenu {
    title = "3D Models Options";
    submenu = "AliasModelVideoOptions";
  }

  option submenu {
    title = "Advanced Video Options";
    //smclass = MenuScreenAdvancedVideoOptions;
    submenu = "AdvVideoOptions";
  }

  option submenu {
    title = "Advanced Rendering Options";
    submenu = "AdvRenderOptions";
  }

  option submenu {
    title = "Light Filtering Options";
    submenu = "AdvVideoLightFilterOptions";
  }

  option submenu [gl_can_bloom > 0] {
    title = "Bloom Options";
    submenu = "PFXBloomOptions";
  }

  option submenu {
    title = "Decal Options";
    submenu = "DecalOptions";
  }

  option submenu [gl_can_shadowmaps > 0] {
    title = "Shadowmap Options";
    submenu = "ShadowMapOptions";
  }
}
