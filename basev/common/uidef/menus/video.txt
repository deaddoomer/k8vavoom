// video options menu
menudef VideoOptions {
  //selector = MenuSelector_SmallRight;
  Title = "VIDEO OPTIONS";

  option slider {
    title = "Screen size";
    cvar = screen_size;
    step = 1;
    min = 1;
    max = 11;
  }

  option slider {
    title = "Brightness";
    cvar = brightness;
    step = 1;
    min = 0;
    max = 4;
  }

  option slider {
    title = "Menu darkness";
    cvar = menu_darkening;
    step = 0.1;
    min = 0;
    max = 1;
  }


  header "Renderer";

  option render {
    title = "Level renderer";
    cvar = r_level_renderer;
    help =
      "Lightmapped renderer is faster, and produces nice soft light."
      "Stencil lighting produces DooM3-like sharp volumetric light."
      "You have to restart level/game (or load save) to activate new renderer.";
  }


  header "Precaching Options";

  option bool {
    title = "Precache Level Textures";
    cvar = r_precache_textures;
    help =
      "Precache level textures (upload them to GPU) on level loading?"
      "This has relatively low impact on most level loading times, and"
      "the game will stutter less on entering new areas.";
  }

  option bool {
    title = "Precache Alias Model Textures";
    cvar = r_precache_model_textures;
    help =
      "Precache alias model textures (upload them to GPU) on level loading?"
      "This has relatively low impact on most level loading times, and"
      "the game will stutter less on entering new areas.";
  }

  option bool {
    title = "Precache Sprite Textures";
    cvar = r_precache_sprite_textures;
    help =
      "Precache most used sprite textures (upload them to GPU) on level loading?"
      "This scans spawned level things, and precaches most of their sprites."
      "Usually this has a medium impact on GPU and loading times."
      "Turn this 'ON' if you have a box with 3+GB of RAM and non-integrated GPU.";
  }

  option bool {
    title = "Precache *ALL* Sprite Textures";
    cvar = r_precache_all_sprite_textures;
    help =
      "Precache *ALL* sprite textures (upload them to GPU) on level loading?"
      "This has *HUGE* impact on loading times, and require *ALOT* of GPU memory."
      "Better leave this 'OFF'.";
  }

  option slider {
    title = "Maximum Sprite Textures To Precache";
    cvar = r_precache_max_sprites;
    step = 16;
    min = 0;
    max = 32768;
    help =
      "Some mods has enormous number of sprites. You can limit number of"
      "sprite textures the engine will try to precache here."
      "Zero means 'no limits'.";
  }

  option bool {
    title = "Reset Level Texture Cache";
    cvar = r_reupload_level_textures;
    help =
      "If this option is turned on, the engine will reset level"
      "texture cache each time new map is loaded.";
  }

  option bool {
    title = "Reupload Textures On Level Change";
    cvar = r_reupload_textures;
    help =
      "If this option is turned on, the engine will reupload all cached textures"
      "each time new map is loaded. Turn this off only if you turned off texture"
      "precaching, to release GPU memory.";
  }


  header "Brightmap Options";

  option bool {
    title = "Brightmaps";
    cvar = r_brightmaps;
    help =
      "Enable brightmaps."
      "You still should have proper GLDEFS and brightmap textures loaded.";
  }

  option bool {
    title = "Sprite Brightmaps";
    cvar = r_brightmaps_sprite;
    help =
      "If you have brightmaps turned on, you can"
      "turn off brightmaps for sprites here.";
  }

  option bool {
    title = "Additive Brightmaps";
    cvar = r_brightmaps_additive;
    help =
      "If you have brightmaps turned on, brightmaps will be added"
      "to the current ambient light level, otherwise max(ambient, bmap)"
      "will be used.";
  }

  option bool {
    title = "Filter Brightmaps";
    cvar = r_brightmaps_filter;
    help =
      "Perform bilinear filtering on brightmaps."
      "This may look better, as brightmaps are supposed to glow.";
  }


  header "Other Visual Options";

  option bool {
    title = "Smooth particles";
    cvar = gl_smooth_particles;
  }

  option bool {
    title = "Glowing Flats";
    cvar = r_glow_flat;
    help =
      "Enable glowing flats."
      "You still should have proper GLDEFS loaded.";
  }

  option bool {
    title = "High Resolution Textures";
    cvar = r_hirestex;
    textColor = PURPLE;
    help =
      "This mode is partially broken (especially with lightmapped renderer)."
      "Use with caution, and be prepared to various texture and lighting bugs.";
  }


  header "3D Models Options";

  option bool {
    title = "Render Thing Models";
    cvar = r_models;
  }

  option bool {
    title = "Render Hand Weapon Models";
    cvar = r_view_models;
  }

  option bool {
    title = "Model Autorotation";
    cvar = r_model_autorotating;
    help = "You can turn off pickup model rotation here.";
  }

  option bool {
    title = "Model Autobobbing";
    cvar = r_model_autobobbing;
    help = "You can turn off pickup model bobbing here.";
  }

  option bool {
    title = "Model Frame Interpolation";
    cvar = r_interpolate_frames;
    help = "Interpolate model animation if it has interstate frames?";
  }


  header "Interpolation Options";

  option bool {
    title = "Movement Interpolation";
    cvar = r_interpolate_thing_movement;
    help = "Interpolate thing/monster movement?";
  }

  option bool {
    title = "Sprite Rotation Interpolation";
    cvar = r_interpolate_thing_angles_sprites;
    help =
      "Interpolate thing/monster rotation for sprites?"
      "This is separated from interpolation for 3D models,"
      "because some sprites looks funny when interpolated."
      "Think of Baron of Hell attack, when he instantly"
      "turns to the player: it looks goofy when he raises"
      "his hand, and then turns to the player.";
  }

  option bool {
    title = "3D Model Rotation Interpolation";
    cvar = r_interpolate_thing_angles_models;
    help = "Interpolate thing/monster rotation for 3D models?";
  }


  header "More Options";

  option submenu {
    title = "Sprite And Fake Shadow Options";
    submenu = "SpriteVideoOptions";
  }

  option submenu {
    title = "Advanced Video Options";
    //smclass = MenuScreenAdvancedVideoOptions;
    submenu = "AdvVideoOptions";
  }

  option submenu {
    title = "Advanced Rendering Options";
    submenu = "AdvRenderOptions";
  }

  option submenu {
    title = "Light Filtering Options";
    submenu = "AdvVideoLightFilterOptions";
  }
}
