//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class Level_K8BDW : replaces(Level);

const int DefaultMaxAllowedEntities = 1000;

int casingEntCounter;
int casingSkipDeathCounter;

int cvCasingMaxEntities = -1;


final void bdwCasingUpdateCvarCache () {
  cvCasingMaxEntities = GetCvar('k8GoreOpt_MaxBloodEntities');
  if (cvCasingMaxEntities < 0) cvCasingMaxEntities = DefaultMaxAllowedBloodEntities;
}


override void BeforeWorldTick (float DeltaTime) {
  bdwCasingUpdateCvarCache();
  ::BeforeWorldTick(DeltaTime);
  //print("BEFORE: %s", DeltaTime);
}


override void AfterUnarchiveThinkers () {
  bdwCasingUpdateCvarCache();
  ::AfterUnarchiveThinkers();
  k8LimiterUnarchiveThinkers(BDW_CasingBase, cvCasingMaxEntities, ref casingEntCounter, ref casingSkipDeathCounter, GetCvar('k8GoreOpt_LimiterDebug'));
}


override void OnEntitySpawned (Entity ent) {
  /*
  if (FS_FileExists("bdw.dat")) {
    auto ct = FS_ReadFileContents("bdw.dat");
    print("  goo: %q|", ct);
    writeln("  zoo: ", ct, "|");
    auto par = SpawnObject(ScriptsParser);
    scope(exit) delete par;
    par.OpenLumpFullName("bdw.dat");
    print("  parse: %B", par.GetString());
    print("  string: '%q'", par.String);
  } else {
    writeln("creating bdw!");
    FS_WriteFileContents("bdw.dat", "SHITFUCK !");
  }
  */
  ::OnEntitySpawned(ent);
  if (ent isa BDW_CasingBase) {
    if (cvCasingMaxEntities < 0) bdwCasingUpdateCvarCache();
    ++casingEntCounter;
    int allowed = cvCasingMaxEntities;
    if (casingEntCounter > allowed) {
      k8LimiterCleanup(BDW_CasingBase, allowed, ref casingEntCounter, ref casingSkipDeathCounter, GetCvar('k8GoreOpt_LimiterDebug'));
    }
  }
}


override void OnEntityDying (Entity ent) {
  ::OnEntityDying(ent);
  if (ent isa BDW_CasingBase) {
    if (casingSkipDeathCounter) {
      --casingSkipDeathCounter;
    } else {
      --casingEntCounter;
    }
  }
}
