//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//#define K8GORE_DEBUG
class Level_K8Gore : replaces(VLevel);

const int DefaultMaxAllowedBloodEntities = 1500;

//!int bloodEntCounter;
//!int bloodSkipDeathCounter;

/*
#ifdef K8GORE_DEBUG
bool cvBloodDebugDump;
#endif
bool cvBloodLimiterDebugDump;
int cvBloodMaxEntities = -1;
*/
transient bool cvBloodColoredBlood;


final void goreBloodUpdateCvarCache () {
/*
#ifdef K8GORE_DEBUG
  cvBloodDebugDump = GetCvarB('k8GoreOpt_DbgReportNumber');
#endif
  cvBloodLimiterDebugDump = GetCvarB('K8BDWOpt_LimiterDebug');
  cvBloodMaxEntities = GetCvar('k8GoreOpt_MaxBloodEntities');
  if (cvBloodMaxEntities < 0) cvBloodMaxEntities = DefaultMaxAllowedBloodEntities;
*/
  cvBloodColoredBlood = GetCvarB('k8GoreOpt_ForceColoredBlood');
}


override void AfterLevelLoaded () {
  goreBloodUpdateCvarCache();
  ::AfterLevelLoaded();
}


override void BeforeWorldTick (float DeltaTime) {
  goreBloodUpdateCvarCache();
  ::BeforeWorldTick(DeltaTime);
  //print("BEFORE: %s", DeltaTime);
}

//override void AfterWorldTick (float DeltaTime) { ::AfterWorldTick(DeltaTime); print("AFTER: %s", DeltaTime); }


override void AfterUnarchiveThinkers () {
  goreBloodUpdateCvarCache();
  ::AfterUnarchiveThinkers();
  //!k8LimiterUnarchiveThinkers(K8Gore_BloodBase, cvBloodMaxEntities, ref bloodEntCounter, ref bloodSkipDeathCounter, cvBloodLimiterDebugDump);
}


override void OnEntitySpawned (Entity ent) {
  //if (cvBloodMaxEntities < 0) goreBloodUpdateCvarCache();
  ::OnEntitySpawned(ent);
  //print("SPAWNED: %C", ent);
/*
  if (ent isa K8Gore_BloodBase) {
#ifdef K8GORE_DEBUG
    if (cvBloodDebugDump) print("SPAWNED: %C (%d current)", ent, bloodEntCounter);
#endif
    ++bloodEntCounter;
    int allowed = cvBloodMaxEntities;
    if (bloodEntCounter > allowed) {
      k8LimiterCleanup(K8Gore_BloodBase, allowed, ref bloodEntCounter, ref bloodSkipDeathCounter, cvBloodLimiterDebugDump);
    }
  }
*/
  if (cvBloodColoredBlood) {
    EntityEx ee = EntityEx(ent);
    if (ee isa Cacodemon) {
      //ee.BloodType = K8Gore_BloodBlue;
      //ee.BloodSplatterType = K8Gore_Blood_SplatterReplacerBlue;
      ee.BloodType = K8Gore_Blood;
      ee.BloodSplatterType = K8Gore_Blood_SplatterReplacer;
      ee.BloodColor = 0xff_00_00_40;
      ee.BloodTranslation = R_GetBloodTranslation(ee.BloodColor);
    } else if (ee isa BaronOfHell || ee isa HellKnight) {
      //ee.BloodType = K8Gore_BloodGreen;
      //ee.BloodSplatterType = K8Gore_Blood_SplatterReplacerGreen;
      ee.BloodType = K8Gore_Blood;
      ee.BloodSplatterType = K8Gore_Blood_SplatterReplacer;
      ee.BloodColor = 0xff_00_40_00;
      ee.BloodTranslation = R_GetBloodTranslation(ee.BloodColor);
    }
  }
}


/*
override void OnEntityDying (Entity ent) {
  ::OnEntityDying(ent);
  //print("DYING: %C", ent);
  if (ent isa K8Gore_BloodBase) {
#ifdef K8GORE_DEBUG
    if (cvBloodMaxEntities < 0) goreBloodUpdateCvarCache();
#endif
    if (bloodSkipDeathCounter) {
      --bloodSkipDeathCounter;
#ifdef K8GORE_DEBUG
      if (cvBloodDebugDump) print("DYING SKIP: %C (%d left; %d left to skip)", ent, bloodEntCounter, bloodSkipDeathCounter);
#endif
    } else {
      --bloodEntCounter;
#ifdef K8GORE_DEBUG
      if (cvBloodDebugDump) print("DYING: %C (%d left)", ent, bloodEntCounter);
#endif
    }
  }
}
*/
