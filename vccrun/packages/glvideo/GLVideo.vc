//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class GLVideo : Object abstract native;

// default mode is `Blend.Normal`
enum BlendMode {
  None, // blending disabled
  Normal, // glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
  Blend, // glBlendFunc(GL_SRC_ALPHA, GL_ONE)
  Filter, // glBlendFunc(GL_DST_COLOR, GL_SRC_COLOR)
  Invert, // glBlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ZERO)
  Modulate /*Particle*/, // glBlendFunc(GL_DST_COLOR, GL_ZERO)
  Highlight, // glBlendFunc(GL_DST_COLOR, GL_ONE);
  DstMulDstAlpha, // glBlendFunc(GL_ZERO, GL_DST_ALPHA);
  InvModulate, // glBlendFunc(GL_ZERO, GL_SRC_COLOR)
  Premult, // glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);

  Additive = BlendMode.Blend,
}

enum BlendFunc {
  Add,
  Sub,
  SubRev,
  Min,
  Max,
}

// call this before `openScreen()` to make sure that `openScreen()` will not randomly fail
// WARNING! due to bug in video subsystem, don't skip this step!
//native final static void performPreInit ();

native final static bool canInit ();
native final static bool hasOpenGL ();
native final static bool isInitialized ();
native final static int screenWidth ();
native final static int screenHeight ();

native final static bool isMouseCursorVisible ();
// no recursion is supported
native final static void hideMouseCursor ();
native final static void showMouseCursor ();

native final static void getRealWindowSize (out int w, out int h);

// call this *AFTER* you opened a screen
native final static bool glHasNPOT { get; }

// call this *AFTER* you opened a screen
native final static bool glHasExtension (string extname);

//native final static void setScale (float sx, float sy);

//native final static int getFrameTime ();
//native final static void setFrameTime (int newframetime); // in msecs
native final static int frameTime { get; set; }

native final static bool dbgDumpOpenGLInfo { get; set; }

native final static bool openScreen (string winname, int width, int height, optional int fullscreen);
native final static void closeScreen ();

//native final bool fullscreen { get; set; }

native final static void clearScreen (optional int rgb);
//native final static void clearScreenRGB (int r, int g, int b);

native final static void clearDepth (optional float val/*=1.0f*/);
native final static void clearStencil (optional int val/*=0*/);
native final static void clearColor (optional int rgb/*=0*/);

native final static void runEventLoop ();

native final static void requestRefresh ();
native final static void requestQuit ();
native final static void resetQuitRequest ();

// do forced GLSwap (i.e. show rendered frame)
native final static void forceSwap ();

// in "direct mode" we are rendering on front (visible) screen buffer
native final static bool directMode { get; set; }


// in "depth testing mode" we are using z coordinate to do depth testing (default is off)
// note that `clearScreen()` will clear depth buffer only if this mode is on
native final static bool depthTest { get; set; }

enum ZFunc {
  Never,
  Always,
  Equal,
  NotEqual,
  Less, // default
  LessEqual,
  Greater,
  GreaterEqual,
}


enum StencilOp {
  Keep,
  Zero,
  Replace,
  Incr,
  IncrWrap,
  Decr,
  DecrWrap,
  Invert,
}

enum StencilFunc {
  Never,
  Less,
  LEqual,
  Greater,
  GEqual,
  Equal,
  NotEqual,
  Always,
}

//WARNING: MUST BE THE SAME AS `StencilFunc`
enum AlphaFunc {
  Never,
  Less,
  LEqual,
  Greater,
  GEqual,
  Equal,
  NotEqual,
  Always, // disables alpha test
}


native final static ZFunc depthFunc { get; set; }

// current z value, in range of [0..65535]
// values closer to 0 takes priority
native final static int currZ { get; set; }
native final static float currZFloat { get; }


//native final static void setSmoothLine (bool v);
native final static bool smoothLine { get; set; }

// color: aarrggbb
// WARNING: "a" is inverted, and actually means "transparency"
//          i.e. a==0 is completely opaque
//          it is easier this way, even if it may look conunterintuitive for you
//native final static int getColorARGB ();
//native final static void setColorARGB (int argb);
native final static int colorARGB { get; set; }

// BlendXXX
//native final static int getBlendMode ();
//native final static void setBlendMode (int v);
native final static BlendMode blendMode { get; set; }
native final static BlendFunc blendFunc { get; set; }


// aborts if font cannot be loaded
native final static void loadFontDF (name fontname, string fnameIni, string fnameTexture);

// aborts if font cannot be loaded
native final static void loadFontPCF (name fontname, string filename);

//native final static name getFont ();
//native final static void setFont (name fontname);
native final static name fontName { get; set; }

struct FontCharInfo {
  int ch;
  //int width, height; // height may differ from font height
  //int advance; // horizontal advance to print next char
  //int topofs; // offset from font top (i.e. y+topofs should be used to draw char)
  int leftbear, rightbear; // positive means "more to the respective bbox side"
  int ascent, descent; // both are positive, which actually means "offset from baseline to the respective direction"
}


native final static int fontHeight ();
native final static int spaceWidth ();
native final static bool getCharInfo (int ch, out FontCharInfo ci); // returns `false` if char wasn't found
native final static int charWidth (int ch);
native final static int textWidth (string text); // max width, knows about '\n'
native final static int textHeight (string text); // this knows about '\n'
native final static void drawTextAt (int x, int y, string text);
native final static void drawTextAtTexture (GLTexture tx, int x, int y, string text, optional int color);

native final static void drawLine (int x0, int y0, int x1, int y1);
native final static void drawRect (int x0, int y0, int w, int h);
native final static void fillRect (int x0, int y0, int w, int h);

// 0: no vsync; -1: adaptive vsync; 1: "hard" vsync
native final static int swapInterval { get; set; }


const int StencilMax = 0xff; // 8-bit stencil buffer

native final static int realStencilBits { get; }
native final static bool framebufferHasAlpha { get; }

native final static bool stencil { get; set; }
native final static void stencilOp (StencilOp sfail, StencilOp dpfail, optional StencilOp dppass);
// (refval&mask) func (stecilbuf&mask)
native final static void stencilFunc (StencilFunc func, int refval, optional int mask);

// incoming_alpha AlphaFunc alphaTestVal
native final static AlphaFunc alphaTestFunc { get; set; }
// note that this is OpenGL alpha in [0..1] range, where `1` is opaque
native final static float alphaTestVal { get; set; }

enum CMask {
  None  = 0x00,
  Red   = 0x01,
  Green = 0x02,
  Blue  = 0x04,
  Alpha = 0x08,
  //
  Colors = 0x07,
  All    = 0x0f,
}
native final static CMask colorMask { get; set; }


// true : GL_LINEAR
// false: GL_NEAREST
native final static bool textureFiltering { get; set; }


native final static bool getMousePos (out int x, out int y);


// ////////////////////////////////////////////////////////////////////////// //
enum GLMatrix {
  ModelView,
  Projection,
}

// default is `GLMatrix.ModelView`
static native final GLMatrix glMatrixMode { /*get;*/ set; }

static native final void glPushMatrix ();
static native final void glPopMatrix ();
static native final void glLoadIdentity ();
static native final void glScale (float sx, float sy, optional float sz);
static native final void glTranslate (float dx, float dy, optional float dz);
static native final void glRotate (float angle, TVec axis);


// ////////////////////////////////////////////////////////////////////////// //
// setup projection
// default is 2d, top-down
// 2d setup disables face culling
// any setup reset matrices
native final static void glSetup2D (optional bool bottomUp);
// default culling is `Front`
native final static void glSetup3D (float fov, optional float aspect/*=1*/);
// set this before calling `glSetup3D()`, read after that to see if it is in effect
//native final static bool glUseReverseZ { get; set; }

enum GLFaceCull {
  None,
  Front,
  Back,
}

static native final GLFaceCull glCullFace { /*get;*/ set; }

enum GLBegin {
  Points,
  Lines,
  LineStrip,
  LineLoop,
  Triangles,
  TriangleStrip,
  TriangleFan,
  Quads,
  QuadStrip,
  Polygon,
}

native final static void glSetTexture (GLTexture tx, optional bool repeat); // `none` means disable texturing
native final static void glSetColor (float r, float g, float b, optional float a/*=1*/);

native final static void glBegin (GLBegin mode, optional bool for2d/*=false*/);
native final static void glEnd ();
// with optional texture coordinates
native final static void glVertex (TVec p, optional float s, optional float t);

enum FogMode {
  None,
  Linear,
  Exp,
  Exp2,
}

native final static FogMode glFogMode { set; }
native final static float glFogDensity { set; }
native final static float glFogStart { set; }
native final static float glFogEnd { set; }
native final static void glSetFogColor (float r, float g, float b, optional float a);


static native final float glPolygonOffsetFactor { get; }
static native final float glPolygonOffsetUnits { get; }
static native final void glPolygonOffset (float factor, float units);


// ////////////////////////////////////////////////////////////////////////// //
struct ScissorRect {
  int x, y, w, h;
  int enabled;
}


//native final static bool getScissorEnabled ();
//native final static void setScissorEnabled (bool v);
native final static bool scissorEnabled { get; set; }

native final static void getScissor (out ScissorRect sr);
native final static void setScissor (ref optional ScissorRect sr);

native final static void copyScissor (out ScissorRect dest, const ref ScissorRect src);


// returns `false` if no area left
final static bool scissorCombine (int x0, int y0, int w, int h) {
  ScissorRect sr;
  getScissor(sr);
  if (!sr.enabled) {
    sr.x = 0;
    sr.y = 0;
    sr.w = screenWidth;
    sr.h = screenHeight;
    sr.enabled = true;
  }
  if (sr.w < 1 || sr.h < 1) return false; // nothing to do
  if (w < 1 || h < 1) {
    sr.w = 0;
    sr.h = 0;
  } else {
    int sx1 = sr.x+sr.w-1;
    int sy1 = sr.y+sr.h-1;
    int x1 = x0+w-1;
    int y1 = y0+h-1;
    // check for overlapping rects
    if (x0 > sx1 || y0 > sy1 || x1 < sr.x || y1 < sr.y) {
      // no overlap
      sr.w = 0;
      sr.h = 0;
    } else {
      // overlaps
      if (x0 > sr.x) sr.x = x0;
      if (y0 > sr.y) sr.y = y0;
      if (x1 < sx1) sx1 = x1;
      if (y1 < sy1) sy1 = y1;
      sr.w = sx1-sr.x+1;
      sr.h = sy1-sr.y+1;
    }
  }
  setScissor(sr);
  return (sr.w > 0 && sr.h > 0);
}


final static void drawBevel (int x0, int y0, int awidth, int aheight, int argbUp, int argbDown) {
  colorARGB = argbUp;
  drawLine(x0, y0, x0+awidth, y0);
  drawLine(x0, y0+1, x0, y0+aheight);
  colorARGB = argbDown;
  drawLine(x0+1, y0+aheight-1, x0+awidth, y0+aheight-1);
  drawLine(x0+awidth-1, y0+1, x0+awidth-1, y0+aheight-1);
}


// ////////////////////////////////////////////////////////////////////////// //
/*
// will set alpha to opaque, and return alpha as 0
final static int colorRGB {
  get { return GLVideo.getColorARGB()&0xff_ff_ff; }
  set { GLVideo.setColorARGB(value|(value&0xff_00_00_00 ? 0 : 0xff_00_00_00)); }
}
*/
//alias colorRGB = colorARGB;
alias color = colorARGB;
