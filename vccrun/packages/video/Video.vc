/**************************************************************************
 *    This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 3
 *  of the License, or (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 **************************************************************************/
class Video : Object abstract native;

// default mode is `BlendNormal`
enum {
  BlendNormal, // glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
  BlendBlend, // glBlendFunc(GL_SRC_ALPHA, GL_ONE)
  BlendFilter, // glBlendFunc(GL_DST_COLOR, GL_SRC_COLOR)
  BlendInvert, // glBlendFunc(GL_ONE_MINUS_DST_COLOR, GL_ZERO)
}


native final static bool canInit ();
native final static bool hasOpenGL ();
native final static bool isInitialized ();
native final static int screenWidth ();
native final static int screenHeight ();

native final static void setScale (float sx, float sy);

//native final static int getFrameTime ();
//native final static void setFrameTime (int newframetime); // in msecs
native final static bool frameTime { get; set; }

native final static bool openScreen (string winname, int width, int height);
native final static void closeScreen ();

native final static void clearScreen ();
//native final static void clearScreenRGB (int r, int g, int b);

native final static void runEventLoop ();

native final static void requestRefresh ();
native final static void requestQuit ();
native final static void resetQuitRequest ();

// do forced GLSwap (i.e. show rendered frame)
native final static void forceSwap ();

// in "direct mode" we are rendering on front (visible) screen buffer
native final static bool directMode { get; set; }


// in "depth testing mode" we are using z coordinate to do depth testing (default is off)
// note that `clearScreen()` will clear depth buffer only if this mode is on
native final static bool depthTest { get; set; }

enum ZFunc {
  Never,
  Always,
  Equal,
  NotEqual,
  Less, // default
  LessEqual,
  Greater,
  GreaterEqual,
}

native final static ZFunc depthFunc { get; set; }

// current z value, in range of [0..65535]
// values closer to z takes priority
native final static int currZ { get; set; }


// aborts if font cannot be loaded
native final static void loadFont (name fontname, string fnameIni, string fnameTexture);

//native final static void setSmoothLine (bool v);
native final static bool smoothLine { get; set; }

// color: aarrggbb
// WARNING: "a" is inverted, and actually means "transparency"
//          i.e. a==0 is completely opaque
//          it is easier this way, even if it may look conunterintuitive for you
//native final static int getColorARGB ();
//native final static void setColorARGB (int argb);
native final static int colorARGB { get; set; }

// BlendXXX
//native final static int getBlendMode ();
//native final static void setBlendMode (int v);
native final static int blendMode { get; set; }


//native final static name getFont ();
//native final static void setFont (name fontname);
native final static name fontName { get; set; }

native final static int fontHeight ();
native final static int spaceWidth ();
native final static int charWidth (int ch);
native final static int textWidth (string text);
native final static int textHeight (string text);
native final static void drawTextAt (int x, int y, string text);

native final static void drawLine (int x0, int y0, int x1, int y1);
native final static void drawRect (int x0, int y0, int w, int h);
native final static void fillRect (int x0, int y0, int w, int h);


// ////////////////////////////////////////////////////////////////////////// //
struct ScissorRect {
  int x, y, w, h;
  int enabled;
}


//native final static bool getScissorEnabled ();
//native final static void setScissorEnabled (bool v);
native final static bool scissorEnabled { get; set; }

native final static void getScissor (ScissorRect *sr);
native final static void setScissor (ScissorRect *sr);

native final static void copyScissor (ScissorRect *dest, ScissorRect *src);


// returns `false` if no area left
final static bool scissorCombine (int x0, int y0, int w, int h) {
  ScissorRect sr;
  getScissor(&sr);
  if (!sr.enabled) {
    sr.x = 0;
    sr.y = 0;
    sr.w = screenWidth;
    sr.h = screenHeight;
    sr.enabled = true;
  }
  if (sr.w < 1 || sr.h < 1) return false; // nothing to do
  if (w < 1 || h < 1) {
    sr.w = 0;
    sr.h = 0;
  } else {
    int sx1 = sr.x+sr.w-1;
    int sy1 = sr.y+sr.h-1;
    int x1 = x0+w-1;
    int y1 = y0+h-1;
    // check for overlapping rects
    if (x0 > sx1 || y0 > sy1 || x1 < sr.x || y1 < sr.y) {
      // no overlap
      sr.w = 0;
      sr.h = 0;
    } else {
      // overlaps
      if (x0 > sr.x) sr.x = x0;
      if (y0 > sr.y) sr.y = y0;
      if (x1 < sx1) sx1 = x1;
      if (y1 < sy1) sy1 = y1;
      sr.w = sx1-sr.x+1;
      sr.h = sy1-sr.y+1;
    }
  }
  setScissor(&sr);
  return (sr.w > 0 && sr.h > 0);
}


final static void drawBevel (int x0, int y0, int awidth, int aheight, int argbUp, int argbDown) {
  colorARGB = argbUp;
  drawLine(x0, y0, x0+awidth, y0);
  drawLine(x0, y0+1, x0, y0+aheight);
  colorARGB = argbDown;
  drawLine(x0+1, y0+aheight-1, x0+awidth, y0+aheight-1);
  drawLine(x0+awidth-1, y0+1, x0+awidth-1, y0+aheight-1);
}


// ////////////////////////////////////////////////////////////////////////// //
/*
// will set alpha to opaque, and return alpha as 0
final static int colorRGB {
  get { return Video.getColorARGB()&0xff_ff_ff; }
  set { Video.setColorARGB(value|(value&0xff_00_00_00 ? 0 : 0xff_00_00_00)); }
}
*/
//alias colorRGB = colorARGB;
alias color = colorARGB;
