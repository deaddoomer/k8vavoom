//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class StatusBarScreen : StatusBarShared;

// location of statistics, justified according to widget type
const int
  ST_BGX = 160,
  ST_BGY = 448,

  // AMMO number position
  ST_AMMOX = ST_BGX+44,
  ST_AMMOY = ST_BGY+3,

  // health number position
  ST_HEALTHX = ST_BGX+90,
  ST_HEALTHY = ST_BGY+3,

  // frags position
  ST_FRAGSX = ST_BGX+138,
  ST_FRAGSY = ST_BGY+3,

  // weapon position
  ST_ARMSBGX = ST_BGX+104,
  ST_ARMSBGY = ST_BGY+0,
  ST_ARMSX = ST_BGX+111,
  ST_ARMSY = ST_BGY+4,
  ST_ARMSXSPACE = 12,
  ST_ARMSYSPACE = 10,

  // location of marine face
  ST_FACESX     = ST_BGX+143,
  ST_FACESY     = ST_BGY+0,

  // armor number pos
  ST_ARMORX = ST_BGX+221,
  ST_ARMORY = ST_BGY+3,

  // key icon positions
  ST_KEY0X = ST_BGX+239,
  ST_KEY0Y = ST_BGY+3,
  ST_KEY1X = ST_BGX+239,
  ST_KEY1Y = ST_BGY+13,
  ST_KEY2X = ST_BGX+239,
  ST_KEY2Y = ST_BGY+23,

  // ammunition counter
  ST_AMMO0X = ST_BGX+288,
  ST_AMMO0Y = ST_BGY+5,
  ST_AMMO1X = ST_BGX+288,
  ST_AMMO1Y = ST_BGY+11,
  ST_AMMO2X = ST_BGX+288,
  ST_AMMO2Y = ST_BGY+23,
  ST_AMMO3X = ST_BGX+288,
  ST_AMMO3Y = ST_BGY+17,

  // indicate maximum ammunition
  // only needed because backpack exists
  ST_MAXAMMO0X = ST_BGX+314,
  ST_MAXAMMO0Y = ST_BGY+5,
  ST_MAXAMMO1X = ST_BGX+314,
  ST_MAXAMMO1Y = ST_BGY+11,
  ST_MAXAMMO2X = ST_BGX+314,
  ST_MAXAMMO2Y = ST_BGY+23,
  ST_MAXAMMO3X = ST_BGX+314,
  ST_MAXAMMO3Y = ST_BGY+17,

  // fullscreen widgets
  ST_TDHEALTHX = 120,
  ST_TDHEALTHY = 460,

  ST_TDARMORX = 280,
  ST_TDARMORY = 460,

  ST_TDAMMOX = 620,
  ST_TDAMMOY = 460;


// face widget macros
enum {
  // number of status faces
  ST_NUMPAINFACES     = 5,
  ST_NUMSTRAIGHTFACES = 3,
  ST_NUMTURNFACES     = 2,
  ST_NUMSPECIALFACES  = 3,

  ST_FACESTRIDE = (ST_NUMSTRAIGHTFACES+ST_NUMTURNFACES+ST_NUMSPECIALFACES),

  ST_NUMEXTRAFACES = 2,

  ST_NUMFACES = (ST_FACESTRIDE*ST_NUMPAINFACES+ST_NUMEXTRAFACES),

  ST_TURNOFFSET     = (ST_NUMSTRAIGHTFACES),
  ST_OUCHOFFSET     = (ST_TURNOFFSET+ST_NUMTURNFACES),
  ST_EVILGRINOFFSET = (ST_OUCHOFFSET+1),
  ST_RAMPAGEOFFSET  = (ST_EVILGRINOFFSET+1),
  ST_GODFACE        = (ST_NUMPAINFACES*ST_FACESTRIDE),
  ST_DEADFACE       = (ST_GODFACE+1)
};

const float ST_STRAIGHTFACETIME = 0.5;
const float ST_TURNTIME         = 1.0;
const float ST_EVILGRINTIME     = 2.0;
const float ST_RAMPAGEDELAY     = 2.0;

const int ST_MUCHPAIN = 20;

const float ST_FULLSCREEN_ALPHA = 0.65;

Player cl;

// pics
int pic_bar;
int pic_arms;
int pic_tallnum[10];
int pic_yellownum[10];
int pic_graynum[10];
int pic_minus;
int pic_percent;
int pic_faceback;
int pic_faces[ST_NUMFACES];
int pic_keys[6];
int pic_pause;
//For Icons in Fullscreen HUD
int pic_health;
int pic_armor[2];
// Additions for inventory bar
//int pic_artiflash[4];
int pic_artibox;
int pic_selectbox;
int pic_invgeml[2];
int pic_invgemr[2];

// face widget data

// count until face changes
float sb_facetime;

// used for evil grin
bool sb_GotWeapon;

// used to use appopriately pained face
int sb_oldhealth;

// int sb_face_lastattackdown = -1;
int sb_face_priority;

int sb_cpo_lastcalc;
int sb_cpo_oldhealth;

float sb_face_lastattackdown;

// current face index, used by w_faces
int sb_faceindex;


struct AmmoInfo {
  Ammo ammo;
  int wslot;
  int widx;
  bool active;
}


//==========================================================================
//
//  checkForDoom2
//
//==========================================================================
final bool checkForDoom2 () {
  bool isDoom2 = IsAnyDoom2;
  if (isDoom2 && cl && cl.MO) {
    string xmap = string(cl.MO.XLevel.MapName);
    if (xmap.length == 4 && (xmap[0] == "e" || xmap[0] == "E") && (xmap[2] == "m" || xmap[2] == "M")) {
      isDoom2 = false;
      //print("MSG: forcing Doom1 (leavemap=%s)", xmap);
    }
  }
  return isDoom2;
}


//==========================================================================
//
//  StartMap
//
//==========================================================================
override void StartMap () {
  ::StartMap();

  pic_bar = R_RegisterPic('stbar');
  pic_arms = R_RegisterPic('starms');

  foreach (auto i; 0..10) {
    pic_tallnum[i] = R_RegisterPic(name(va("sttnum%d", i)));
    pic_yellownum[i] = R_RegisterPic(name(va("stysnum%d", i)));
    pic_graynum[i] = R_RegisterPic(name(va("stgnum%d", i)));
  }
  pic_minus = R_RegisterPic('sttminus');
  pic_percent = R_RegisterPic('sttprcnt');

  pic_faceback = R_RegisterPic('stfb0');

  foreach (auto i; 0..6) pic_keys[i] = R_RegisterPic(name(va("stkeys%d", i)));

  foreach (auto i; 0..ST_NUMPAINFACES) {
    pic_faces[i*ST_FACESTRIDE+0] = R_RegisterPic(name(va("stfst%d0", i)));
    pic_faces[i*ST_FACESTRIDE+1] = R_RegisterPic(name(va("stfst%d1", i)));
    pic_faces[i*ST_FACESTRIDE+2] = R_RegisterPic(name(va("stfst%d2", i)));
    pic_faces[i*ST_FACESTRIDE+3] = R_RegisterPic(name(va("stftr%d0", i)));
    pic_faces[i*ST_FACESTRIDE+4] = R_RegisterPic(name(va("stftl%d0", i)));
    pic_faces[i*ST_FACESTRIDE+5] = R_RegisterPic(name(va("stfouch%d", i)));
    pic_faces[i*ST_FACESTRIDE+6] = R_RegisterPic(name(va("stfevl%d", i)));
    pic_faces[i*ST_FACESTRIDE+7] = R_RegisterPic(name(va("stfkill%d", i)));
  }
  pic_faces[ST_GODFACE] = R_RegisterPic('stfgod0');
  pic_faces[ST_DEADFACE] = R_RegisterPic('stfdead0');

  pic_pause = R_RegisterPic('m_pause');

  // fullscreen HUD stuff
  pic_health = R_RegisterPic('stima0');
  pic_armor[0] = R_RegisterPic('arm1a0');
  pic_armor[1] = R_RegisterPic('arm2a0');

  // inventory bar stuff
  /*
  pic_artiflash[0] = R_RegisterPic('useartia');
  pic_artiflash[1] = R_RegisterPic('useartib');
  pic_artiflash[2] = R_RegisterPic('useartic');
  pic_artiflash[3] = R_RegisterPic('useartid');
  */
  pic_artibox = R_RegisterPic('artibox');
  pic_selectbox = R_RegisterPic('selectbo');
  pic_invgeml[0] = R_RegisterPic('invgeml1');
  pic_invgeml[1] = R_RegisterPic('invgeml2');
  pic_invgemr[0] = R_RegisterPic('invgemr1');
  pic_invgemr[1] = R_RegisterPic('invgemr2');
}


//==========================================================================
//
//  SB_DrawTallNum
//
//==========================================================================
void SB_DrawTallNum (int x, int y, int num, float alpha, bool perc) {
  int w;
  int neg;
  picinfo_t info;

  if (perc) DrawPic(x, y, pic_percent, alpha);

  R_GetPicInfo(pic_tallnum[0], &info);
  w = info.width;

  neg = num < 0;
  if (neg) num = -num;

  // in the special case of 0, you draw 0
  //if (!num) DrawPic(x-w, y, pic_tallnum[0], alpha);

  // draw the new number
  do {
    x -= w;
    DrawPic(x, y, pic_tallnum[num%10], alpha);
    num /= 10;
  } while (num);

  // draw a minus sign if necessary
  if (neg) DrawPic(x-8, y, pic_minus, alpha);
}


//==========================================================================
//
//  SB_DrawSmallNum
//
//==========================================================================
void SB_DrawSmallNum (int x, int y, int num) {
  picinfo_t info;

  if (num < 0) num = -num;

  R_GetPicInfo(pic_yellownum[0], &info);
  int w = info.width;

  // in the special case of 0, you draw 0
  //if (!num) DrawPic(x-w, y, pic_yellownum[0]);

  // draw the new number
  do {
    x -= w;
    DrawPic(x, y, pic_yellownum[num%10]);
    num /= 10;
  } while (num);
}


//==========================================================================
//
//  SB_DrawMainBar
//
//==========================================================================
override void SB_DrawMainBar () {
  if (!cl || !cl.MO) return;

  // draw something in the blank spaces
  // check which version of Doom we are playing
  if (checkForDoom2()) {
    FillRectWithFlat(0, 448, 640, 32, 'grnrock');
  } else {
    FillRectWithFlat(0, 448, 640, 32, 'floor7_2');
  }

  // background
  DrawPic(ST_BGX, ST_BGY, pic_bar);

  // ready weapon ammo
  if (cl.ReadyWeapon && cl.ReadyWeapon.Ammo1) {
    SB_DrawTallNum(ST_AMMOX, ST_AMMOY, cl.ReadyWeapon.Ammo1.Amount, 1.0, false);
  }

  // health percentage
  SB_DrawTallNum(ST_HEALTHX, ST_HEALTHY, cl.Health, 1.0, true);

  if (ClGame.deathmatch) {
    // frags sum
    SB_DrawTallNum(ST_FRAGSX, ST_FRAGSY, cl.Frags, 1.0, false);
  } else {
    // weapons owned
    auto pawn = PlayerPawn(cl.MO);
    DrawPic(ST_ARMSBGX, ST_ARMSBGY, pic_arms);
    foreach (auto i; 0..6) {
      bool HaveWeapon = false;
      Inventory Item;
      for (Item = EntityEx(cl.MO).Inventory; Item; Item = Item.Inventory) {
        if (!Weapon(Item) || !pawn) continue;
        int TmpSlot, TmpIndex;
        pawn.FindWeaponSlot(class!Weapon(Item.Class), TmpSlot, TmpIndex);
        if (TmpSlot == i+2) {
          HaveWeapon = true;
          break;
        }
      }
      DrawPic(ST_ARMSX+(i%3)*ST_ARMSXSPACE, ST_ARMSY+(i/3)*ST_ARMSYSPACE, (HaveWeapon ? pic_yellownum[i+2] : pic_graynum[i+2]));
    }
  }

  // faces
  if (ClGame.maxclients > 1) DrawPic(ST_FACESX, ST_FACESY, pic_faceback, default, cl.MO.Translation);
  DrawPic(ST_FACESX, ST_FACESY, pic_faces[sb_faceindex]);

  // armor percentage
  BasicArmor Armor = BasicArmor(EntityEx(cl.MO).FindInventory(BasicArmor));
  SB_DrawTallNum(ST_ARMORX, ST_ARMORY, (Armor ? Armor.Amount : 0), 1.0, true);

  // keyboxes 0-2
       if (EntityEx(cl.MO).FindInventory(BlueSkull)) DrawPic(ST_KEY0X, ST_KEY0Y, pic_keys[3]);
  else if (EntityEx(cl.MO).FindInventory(BlueCard)) DrawPic(ST_KEY0X, ST_KEY0Y, pic_keys[0]);

       if (EntityEx(cl.MO).FindInventory(YellowSkull)) DrawPic(ST_KEY1X, ST_KEY1Y, pic_keys[4]);
  else if (EntityEx(cl.MO).FindInventory(YellowCard)) DrawPic(ST_KEY1X, ST_KEY1Y, pic_keys[1]);

       if (EntityEx(cl.MO).FindInventory(RedSkull)) DrawPic(ST_KEY2X, ST_KEY2Y, pic_keys[5]);
  else if (EntityEx(cl.MO).FindInventory(RedCard)) DrawPic(ST_KEY2X, ST_KEY2Y, pic_keys[2]);

  // ammo count (all four kinds)
  DrawAmmo(ST_AMMO0X, ST_AMMO0Y, ST_MAXAMMO0X, ST_MAXAMMO0Y, Clip);
  DrawAmmo(ST_AMMO1X, ST_AMMO1Y, ST_MAXAMMO1X, ST_MAXAMMO1Y, Shell);
  DrawAmmo(ST_AMMO2X, ST_AMMO2Y, ST_MAXAMMO2X, ST_MAXAMMO2Y, Cell);
  DrawAmmo(ST_AMMO3X, ST_AMMO3Y, ST_MAXAMMO3X, ST_MAXAMMO3Y, RocketAmmo);

  // draw inventory bar or ready item when needed (it's drawn with transparency)
  if (cl.InventoryTime && cl.InvFirst) {
    // inventory
    Inventory Item = cl.InvFirst;
    foreach (auto i; 0..7) {
      DrawPic(210+i*31, 448, pic_artibox, ST_FULLSCREEN_ALPHA);
      if (Item) {
        DrawShadowedPic(207+i*31, 446, R_RegisterPic(Item.IconName));
        SB_DrawSmallNum(238+i*31, 470, Item.Amount);
        if (Item == cl.InvPtr) DrawPic(210+i*31, 448, pic_selectbox, ST_FULLSCREEN_ALPHA);
        Item = Item.NextInv();
      }
    }
    if (cl.InvFirst && cl.InvFirst.PrevInv()) DrawPic(198, 447, pic_invgeml[!(ClGame.GLevel.TicTime&4) ? 0 : 1], ST_FULLSCREEN_ALPHA);
    if (Item) DrawPic(429, 447, pic_invgemr[!(ClGame.GLevel.TicTime&4) ? 0 : 1], ST_FULLSCREEN_ALPHA);
  } else if (cl.InvPtr) {
    // ready artifact
    DrawPic(486, 448, pic_artibox, ST_FULLSCREEN_ALPHA);
    DrawShadowedPic(483, 446, R_RegisterPic(cl.InvPtr.IconName));
    SB_DrawSmallNum(514, 470, cl.InvPtr.Amount);
  }
}


//==========================================================================
//
//  DrawAmmo
//
//==========================================================================
void DrawAmmo (int CountX, int CountY, int MaxX, int MaxY, class!Inventory AmmoClass) {
  Inventory Item = EntityEx(cl.MO).FindInventory(AmmoClass);
  // ammo count
  SB_DrawSmallNum(CountX, CountY, (Item ? Item.Amount : 0));
  // max ammo count
  int maxam;
  if (Item) {
    Ammo ammo = Ammo(Item);
    maxam = (ammo ? ammo.k8GetAmmoKingMax() : Item.MaxAmount);
  } else {
    maxam = AmmoClass.default.MaxAmount;
  }
  SB_DrawSmallNum(MaxX, MaxY, maxam);
}


//==========================================================================
//
//  IsStandardAmmoClass
//
//==========================================================================
bool IsStandardAmmoClass (class a) {
  if ((a isa Clip) ||
      (a isa Shell) ||
      (a isa RocketAmmo) ||
      (a isa Cell))
  {
    return true;
  }
  class arep = GetClassReplacee(a);
  if (arep != a) {
    //print("*** C2: %C replaced %C", a, arep);
    if ((arep isa Clip) ||
        (arep isa Shell) ||
        (arep isa RocketAmmo) ||
        (arep isa Cell))
    {
      return true;
    }
  }
  while (a) {
    if (nameicmp(GetClassName(a), 'BDW_RifleClip') == 0) return true;
    if (nameicmp(GetClassName(a), 'BDW_ShotgunShell') == 0) return true;
    a = GetClassParent(a);
  }
  return false;
}


//==========================================================================
//
//  SB_DrawFullscreenStats
//
//==========================================================================
override void SB_DrawFullscreenStats () {
  if (!cl || !cl.MO) return;

  auto ovw = GetVirtualWidth();
  auto ovh = GetVirtualHeight();

  // fullscreen widgets
  int ST_TDHEALTHX = 120;
  int ST_TDHEALTHY = ovh-20; //460;

  int ST_TDARMORX = 280;
  int ST_TDARMORY = ovh-20; //460;

  int ST_TDAMMOX = ovw-20; //620;
  int ST_TDAMMOY = ovh-20; //460;

  //print("LEVEL: %s (%n)", cl.Level.LevelName, cl.MO.XLevel.MapName);

  float fsalpha = ST_FULLSCREEN_ALPHA;
  if (CvarExists('r_hud_fullscreen_alpha')) {
    fsalpha = GetCvarF('r_hud_fullscreen_alpha');
    if (fsalpha < 0) fsalpha = ST_FULLSCREEN_ALPHA;
  }

  // health
  SB_DrawTallNum(ST_TDHEALTHX, ST_TDHEALTHY, cl.Health, fsalpha, false);
  DrawPic(ST_TDHEALTHX-60, ST_TDHEALTHY+15, pic_health, fsalpha);

  // Health Accumulation Device
  if (GetCvarB('k8HealthAccum_Enabled')) {
    SB_DrawTallNum(ST_TDHEALTHX, ST_TDHEALTHY-18, cl.k8HealthAccum_Amount, fsalpha, false);
  }

  // armor
  BasicArmor Armor = BasicArmor(EntityEx(cl.MO).FindInventory(BasicArmor));
  if (Armor && Armor.Amount) {
    int i = Armor.SavePercent > 0.335 ? 1 : 0;
    SB_DrawTallNum(ST_TDARMORX, ST_TDARMORY, Armor.Amount, fsalpha, false);
    DrawPic(ST_TDARMORX-60, ST_TDARMORY+15, pic_armor[i], fsalpha);
  }

  // ready weapon ammo with icon
  if (cl.ReadyWeapon) {
    if (cl.ReadyWeapon.Ammo1) {
      SB_DrawTallNum(ST_TDAMMOX, ST_TDAMMOY, cl.ReadyWeapon.Ammo1.Amount, fsalpha, false);
      DrawPic(ST_TDAMMOX-60, ST_TDAMMOY+15, R_RegisterPic(cl.ReadyWeapon.Ammo1.IconName), fsalpha);
    }
    if (cl.ReadyWeapon.Ammo2 && cl.ReadyWeapon.Ammo2 != cl.ReadyWeapon.Ammo1) {
      SB_DrawTallNum(ST_TDAMMOX, ST_TDAMMOY-32, cl.ReadyWeapon.Ammo2.Amount, fsalpha, false);
      DrawPic(ST_TDAMMOX-60, ST_TDAMMOY-32+15, R_RegisterPic(cl.ReadyWeapon.Ammo2.IconName), fsalpha);
    }
  }

  // keys
  int KeyX = ovw/2;
  for (Inventory Item = EntityEx(cl.MO).Inventory; Item; Item = Item.Inventory) {
    if (Key(Item)) {
      int Pic = R_RegisterPic(Item.IconName);
      if (Pic >= 0) {
        DrawPic(KeyX, /*470*/ovh-10, Pic, fsalpha);
        KeyX += 20;
      }
    }
  }

  if (ClGame.deathmatch) {
    // frags sum
    SB_DrawTallNum(ovw-10, 10, cl.Frags, fsalpha, false);
  }


  // weapons owned and their ammo
  /*
  {
    auto pawn = PlayerPawn(cl.MO);
    if (pawn) {
      Weapon wlist[10]; // arbitrary limit
      int widx[10];
      int wpncount = 0;
      // collect and count weapons to properly center it
      for (Inventory Item = EntityEx(cl.MO).Inventory; Item; Item = Item.Inventory) {
        Weapon wpn = Weapon(Item);
        if (!wpn) continue;
        if (!wpn.Ammo1) continue;
        int tmpslot, tmpindex;
        pawn.FindWeaponSlot(class!Weapon(wpn.Class), out tmpslot, out tmpindex);
        if (tmpslot >= 2 && tmpslot <= 9) {
          if (wlist[tmpslot] && widx[tmpslot] >= tmpindex) continue;
          if (!wlist[tmpslot]) ++wpncount;
          wlist[tmpslot] = wpn;
          widx[tmpslot] = tmpindex;
        }
      }
      // draw weapons
      if (wpncount) {
        SetFont('smallfont');
        int xpos = ovw/2-(wpncount*30)/2;
        int ypos = ovh-10-30;
        foreach (auto idx; 0..wlist.length) {
          if (!wlist[idx]) continue;
          //SB_DrawTallNum(xpos, ypos, cl.ReadyWeapon.Ammo1.Amount, fsalpha, false);
          //DrawPic(ST_TDAMMOX-60, ST_TDAMMOY+15, R_RegisterPic(cl.ReadyWeapon.Ammo1.IconName), fsalpha);
          DrawPic(xpos, ypos, R_RegisterPic(wlist[idx].Ammo1.IconName), fsalpha);
          SetTextAlign(hleft, vtop);
          DrawText(xpos, ypos+20, va("%3d", wlist[idx].Ammo1.Amount), CR_UNTRANSLATED, CR_UNTRANSLATED, fsalpha);
          xpos += 30;
        }
      }
    }
  }
  */
  if (GetCvarB('r_hud_draw_fs_ammo')) {
    auto pawn = PlayerPawn(cl.MO);
    if (pawn) {
      array!AmmoInfo alist; // arbitrary limit
      // collect and count weapon ammo to properly center it
      for (Inventory Item = EntityEx(cl.MO).Inventory; Item; Item = Item.Inventory) {
        Weapon wpn = Weapon(Item);
        if (!wpn || !wpn.Ammo1) continue;
        Ammo wammo = wpn.Ammo1;
        if (!wammo) {
          wammo = wpn.Ammo2;
          if (!wammo) continue;
        } else {
          if (!IsStandardAmmoClass(wammo.Class)) {
            // check if secondary ammo is something standard
            Ammo wa2 = wpn.Ammo2;
            if (wa2) {
              //print("BAD AMMO CLASS %C; GOOD AMMO CLASS %C (%s)", wammo, wa2, IsStandardAmmoClass(wa2.Class));
              if (IsStandardAmmoClass(wa2.Class)) wammo = wa2;
            }
          } else {
            //print("GOOD AMMO CLASS %C", wammo);
          }
        }
        //class!Ammo a2 = class!Ammo(GetClassReplacement(wammo));
        //if (a2) wammo = a2;
        int tmpslot, tmpindex;
        pawn.FindWeaponSlot(class!Weapon(wpn.Class), out tmpslot, out tmpindex);
        if (tmpslot >= 2 && tmpslot <= 9) {
          bool found = false;
          foreach (const ref AmmoInfo a; alist) if (a.ammo == wammo) { found = true; break; }
          if (!found) {
            // new ammo
            //print("ammo %C for weapon %C; secondary is %C, good: %s", wammo, wpn, wpn.Ammo2, IsStandardAmmoClass(wammo.Class));
            AmmoInfo *ai = alist.alloc();
            ai.ammo = wammo;
            ai.wslot = tmpslot;
            ai.widx = tmpindex;
            ai.active = (wpn == cl.ReadyWeapon);
          }
        }
      }
      // draw ammo
      if (alist.length) {
        alist.sort(delegate int (const ref AmmoInfo a, const ref AmmoInfo b) {
          int d = a.wslot-b.wslot;
          if (d) return d;
          return a.widx-b.widx;
        });
        SetFont('smallfont');
        SetTextAlign(hleft, vtop);
        //SetTextAlign(hcenter, vtop);
        int xpos = ovw/2-(alist.length*30)/2;
        int ypos = ovh-10-20;
        picinfo_t pi;
        foreach (const ref AmmoInfo ai; alist) {
          //SB_DrawTallNum(xpos, ypos, cl.ReadyWeapon.Ammo1.Amount, fsalpha, false);
          //DrawPic(ST_TDAMMOX-60, ST_TDAMMOY+15, R_RegisterPic(cl.ReadyWeapon.Ammo1.IconName), fsalpha);
          float alpha = fmin(1.0, fsalpha+(ai.active ? 0.4 : 0.05));
          int ico = R_RegisterPic(ai.ammo.IconName);
          if (ico) {
            R_GetPicInfo(ico, &pi);
            DrawPic(xpos+(30-pi.width)/2, ypos, ico, alpha);
          }
          int maxam = ai.ammo.k8GetAmmoKingMax();
          int am = ai.ammo.Amount;
          int aclr = (am < maxam ? (am < maxam/4 ? CR_UNTRANSLATED : CR_GREEN) : CR_YELLOW);
          DrawText(xpos, ypos+4, va("%3d", am), aclr, CR_UNTRANSLATED, alpha);
          //DrawText(xpos+(30/2), ypos+4, va("%d", ai.ammo.Amount), CR_UNTRANSLATED, CR_UNTRANSLATED, fsalpha);
          xpos += 30;
        }
      }
    }
  }

  if (GetCvarB('r_hud_draw_fs_face')) {
    // faces
    //if (ClGame.maxclients > 1) DrawPic(12, ovh-32, pic_faceback, fsalpha, cl.MO.Translation);
    //DrawPic(12, ovh-32, pic_faces[sb_faceindex], fsalpha);
    picinfo_t pi;
    R_GetPicInfo(pic_faces[sb_faceindex], &pi);
    int rhgt = int((pi.height-pi.yoffset)*R_GetAspectRatio());
    //print("hgt=%s; ofs=%s", pi.height, pi.yoffset);
    DrawPicScaled(12, Height-rhgt-2, pic_faces[sb_faceindex], 1, R_GetAspectRatio(), fsalpha);
  }

  // draw inventory bar or ready item when needed (it's drawn with transparency)
  if (cl.InventoryTime && cl.InvFirst) {
    // inventory
    Inventory Item = cl.InvFirst;
    foreach (auto i; 0..7) {
      DrawPic(210+i*31, /*448*/ovh-32, pic_artibox, fsalpha);
      if (Item) {
        DrawShadowedPic(207+i*31, /*446*/ovh-34, R_RegisterPic(Item.IconName));
        SB_DrawSmallNum(238+i*31, /*470*/ovh-10, Item.Amount);
        if (Item == cl.InvPtr) DrawPic(210+i*31, /*448*/ovh-32, pic_selectbox, fsalpha);
        Item = Item.NextInv();
      }
    }
    if (cl.InvFirst && cl.InvFirst.PrevInv()) DrawPic(198, /*447*/ovh-33, pic_invgeml[!(ClGame.GLevel.TicTime&4) ? 0 : 1], fsalpha);
    if (Item) DrawPic(429, /*447*/ovh-33, pic_invgemr[!(ClGame.GLevel.TicTime&4) ? 0 : 1], fsalpha);
  } else if (cl.InvPtr) {
    // ready artifact
    DrawPic(486, /*448*/ovh-32, pic_artibox, fsalpha);
    DrawShadowedPic(483, /*446*/ovh-34, R_RegisterPic(cl.InvPtr.IconName));
    SB_DrawSmallNum(514, /*470*/ovh-10, cl.InvPtr.Amount);
  }
}


//==========================================================================
//
//  SB_DrawPause
//
//==========================================================================
void SB_DrawPause () {
  if (ClGame.Game.bPaused && GetCvar('draw_pause')) {
    auto ovw = GetVirtualWidth();
    DrawPic(/*286*/ovw/2-33, 14, pic_pause);
  }
}


//==========================================================================
//
//  SB_Drawer
//
//==========================================================================
override void SB_Drawer (int sb_view) {
  SB_Housekeeping(sb_view);
  if (!cl || !cl.MO) return;
  if (!GetCvarB('r_statusbar_draw')) return;
  SB_DrawMainPart(sb_view);
  SB_DrawPause();
}


//==========================================================================
//
//  CalcPainOffset
//
//==========================================================================
final int CalcPainOffset () {
  int health = (cl.Health > 100 ? 100 : cl.Health);
  if (health != sb_cpo_oldhealth) {
    sb_cpo_lastcalc = ST_FACESTRIDE*(((100-health)*ST_NUMPAINFACES)/101);
    sb_cpo_oldhealth = health;
  }
  return sb_cpo_lastcalc;
}


//==========================================================================
//
//  UpdateFaceWidget
//
//  This is a not-very-pretty routine which handles the face states and
//  their timing.
//  the precedence of expressions is:
//    dead > evil grin > turned head > straight ahead
//
//==========================================================================
final void UpdateFaceWidget (float FrameTime) {
  // a random number per tick
  int st_randomnumber = P_Random();

  if (sb_face_priority < 10) {
    // dead
    if (!cl.Health) {
      sb_face_priority = 9;
      sb_faceindex = ST_DEADFACE;
      sb_facetime = 0.01;
    }
  }

  if (sb_face_priority < 9) {
    if (cl.BonusFlash) {
      // picking up bonus
      bool doevilgrin = false;
      if (sb_GotWeapon) {
        doevilgrin = true;
        sb_GotWeapon = false;
      }
      if (doevilgrin) {
        // evil grin if just picked up weapon
        sb_face_priority = 8;
        sb_facetime = ST_EVILGRINTIME;
        sb_faceindex = CalcPainOffset()+ST_EVILGRINOFFSET;
      }
    }
  }

  if (sb_face_priority < 8) {
    if (cl.DamageFlash && cl.Attacker && cl.Attacker != cl.MO) {
      // being attacked
      sb_face_priority = 7;

      if (cl.Health-sb_oldhealth > ST_MUCHPAIN) {
        sb_facetime = ST_TURNTIME;
        sb_faceindex = CalcPainOffset()+ST_OUCHOFFSET;
      } else {
        float badguyangle = atan2(cl.Attacker.Origin.y-cl.MO.Origin.y, cl.Attacker.Origin.x-cl.MO.Origin.x);
        float diffang;
        bool i;

        if (badguyangle > cl.MO.Angles.yaw) {
          // whether right or left
          diffang = AngleMod360(badguyangle-cl.MO.Angles.yaw);
          i = (diffang > 180.0);
        } else {
          // whether left or right
          diffang = AngleMod360(cl.MO.Angles.yaw-badguyangle);
          i = (diffang <= 180.0);
        } // confusing, aint it?

        sb_facetime = ST_TURNTIME;
        sb_faceindex = CalcPainOffset();

        if (diffang < 45.0) {
          // head-on
          sb_faceindex += ST_RAMPAGEOFFSET;
        } else if (i) {
          // turn face right
          sb_faceindex += ST_TURNOFFSET;
        } else {
          // turn face left
          sb_faceindex += ST_TURNOFFSET+1;
        }
      }
    }
  }

  if (sb_face_priority < 7) {
    // getting hurt because of your own damn stupidity
    if (cl.DamageFlash) {
      if (cl.Health-sb_oldhealth > ST_MUCHPAIN) {
        sb_face_priority = 7;
        sb_facetime = ST_TURNTIME;
        sb_faceindex = CalcPainOffset()+ST_OUCHOFFSET;
      } else {
        sb_face_priority = 6;
        sb_facetime = ST_TURNTIME;
        sb_faceindex = CalcPainOffset()+ST_RAMPAGEOFFSET;
      }
    }
  }

  if (sb_face_priority < 6) {
    // rapid firing
    if ((cl.bAttackDown && !cl.bFrozen && !cl.bTotallyFrozen) ||
        (cl.Level.bFrozen && !(cl.Cheats&PlayerEx::CF_TIMEFREEZE)))
    {
      if (sb_face_lastattackdown == -1.0) {
        sb_face_lastattackdown = ST_RAMPAGEDELAY;
      } else {
        sb_face_lastattackdown -= FrameTime;
        if (sb_face_lastattackdown <= 0.0) {
          sb_face_priority = 5;
          sb_faceindex = CalcPainOffset()+ST_RAMPAGEOFFSET;
          sb_facetime = 0.01;
          sb_face_lastattackdown = 0.01;
        }
      }
    } else {
      sb_face_lastattackdown = -1.0;
    }
  }

  if (sb_face_priority < 5) {
    // invulnerability
    if ((cl.Cheats&Player::CF_GODMODE) || EntityEx(cl.MO).bInvulnerable) {
      sb_face_priority = 4;
      sb_faceindex = ST_GODFACE;
      sb_facetime = 0.01;
    }
  }

  // look left or look right if the facecount has timed out
  if (sb_facetime <= 0.0) {
    sb_faceindex = CalcPainOffset()+(st_randomnumber%3);
    sb_facetime = ST_STRAIGHTFACETIME;
    sb_face_priority = 0;
  }

  sb_facetime -= FrameTime;
  sb_oldhealth = cl.Health;
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  ::Tick(DeltaTime);
  if (cl.MO) UpdateFaceWidget(DeltaTime);
}


//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================
override void SB_UpdateWidgets () {
}


//==========================================================================
//
//  OnVisibilityChanged
//
//==========================================================================
override void OnVisibilityChanged (bool bNewVisibility) {
  bTickEnabled = bNewVisibility;
}


defaultproperties {
  bTickEnabled = true;
  Focusable = true;
  Width = 640;
  Height = 480;
}
