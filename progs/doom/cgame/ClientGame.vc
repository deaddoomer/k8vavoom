//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ClientGame : ClientGameShared;

const int NUM_END_MESSAGES = 15;

TitleScreen GTitle;
IntermissionScreen GImission;
FinaleScreen GFinale;

name quitsounds[8];

string endmsg[NUM_END_MESSAGES];

int pic_brdr_t;
int pic_brdr_b;
int pic_brdr_l;
int pic_brdr_r;
int pic_brdr_tl;
int pic_brdr_tr;
int pic_brdr_bl;
int pic_brdr_br;


//==========================================================================
//
//  checkForDoom2
//
//==========================================================================
final bool checkForDoom2 () {
  bool isDoom2 = IsAnyDoom2;
  if (isDoom2 && cl && cl.MO) {
    string xmap = string(cl.MO.XLevel.MapName);
    if (xmap.length == 4 && (xmap[0] == "e" || xmap[0] == "E") && (xmap[2] == "m" || xmap[2] == "M")) {
      isDoom2 = false;
      //print("MSG: forcing Doom1 (leavemap=%s)", xmap);
    }
  }
  return isDoom2;
}


//==========================================================================
//
//  RootWindowCreated
//
//==========================================================================
override void RootWindowCreated () {
  GTitle = TitleScreen(GRoot.NewChild(TitleScreen));
  GSBar = StatusBarScreen(GRoot.NewChild(StatusBarScreen));
  GImission = IntermissionScreen(GRoot.NewChild(IntermissionScreen));
  GFinale = FinaleScreen(GRoot.NewChild(FinaleScreen));
  GTitle.ClGame = self;
  GSBar.SetClGame(self);
  GSBar.Hide();
  GImission.ClGame = self;
  GImission.Hide();
  GFinale.ClGame = self;
  GFinale.Hide();
}


//==========================================================================
//
//  Connected
//
//==========================================================================
override void Connected () {
  GTitle.Hide();
  GTitle.StopDemoLoop();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}


//==========================================================================
//
//  Disconnected
//
//==========================================================================
override void Disconnected () {
  GTitle.Show();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}


//==========================================================================
//
//  DemoPlaybackStarted
//
//==========================================================================
override void DemoPlaybackStarted () {
  GTitle.Hide();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}


//==========================================================================
//
//  DemoPlaybackStopped
//
//==========================================================================
override void DemoPlaybackStopped () {
  GTitle.Show();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}


//==========================================================================
//
//  OnHostEndGame
//
//==========================================================================
override void OnHostEndGame () {
  GTitle.OnHostEndGame();
}


//==========================================================================
//
//  OnHostError
//
//==========================================================================
override void OnHostError () {
  GTitle.OnHostError();
}


//==========================================================================
//
//  StatusBarStartMap
//
//==========================================================================
override void StatusBarStartMap () {
  StatusBarScreen(GSBar).cl = PlayerEx(cl);
  GSBar.Show();
  GSBar.StartMap();
  GImission.Hide();
  GFinale.Hide();
}


//==========================================================================
//
//  StatusBarDrawer
//
//==========================================================================
override void StatusBarDrawer (int sb_view) {
  GSBar.SB_Drawer(sb_view);
  GSBar.SB_DrawNetworkStats();
}


//==========================================================================
//
//  StatusBarUpdateWidgets
//
//==========================================================================
override void StatusBarUpdateWidgets (float DeltaTime) {
  GSBar.SB_UpdateWidgets();
}


//==========================================================================
//
//  IntermissionStart
//
//==========================================================================
override void IntermissionStart () {
  StopAllSounds(keepLastSwitch:true);
  GSBar.Hide();
  GImission.Show();
  GImission.Start();
  GFinale.Hide();
}


//==========================================================================
//
//  StartFinale
//
//==========================================================================
override void StartFinale (name FinaleType) {
  intermissionPhase = IM_Phase.Finale;
  GSBar.Hide();
  GImission.Hide();
  GFinale.Show();
  GFinale.StartFinale(FinaleType);
}


//===========================================================================
//
//  FinaleResponder
//
//===========================================================================
override bool FinaleResponder (event_t *event) {
  return GFinale.Responder(event);
}


//==========================================================================
//
//  GetQuitPromptText
//
//==========================================================================
override string GetQuitPromptText () {
  return endmsg[P_Random()%endmsg.length];
}


//==========================================================================
//
//  GetQuitPromptSound
//
//  override this in subclasses
//
//==========================================================================
override name GetQuitPromptSound () {
  return quitsounds[P_Random()%quitsounds.length];
}


//==========================================================================
//
//  SharewareResponse
//
//==========================================================================
override void SharewareResponse (int key) {
  PushMenuScreen(SpawnMenu(MenuScreenHelp));
}


//==========================================================================
//
//  InitBorder
//
//==========================================================================
void InitBorder () {
  pic_brdr_t = R_RegisterPic('brdr_t');
  pic_brdr_b = R_RegisterPic('brdr_b');
  pic_brdr_l = R_RegisterPic('brdr_l');
  pic_brdr_r = R_RegisterPic('brdr_r');
  pic_brdr_tl = R_RegisterPic('brdr_tl');
  pic_brdr_tr = R_RegisterPic('brdr_tr');
  pic_brdr_bl = R_RegisterPic('brdr_bl');
  pic_brdr_br = R_RegisterPic('brdr_br');
}


//==========================================================================
//
//  DrawBorder
//
//  Draws border
//
//==========================================================================
override void DrawBorder (int x, int y, int w, int h, optional int ybotofs) {
  if (!pic_brdr_b) InitBorder();

  //FIXME: should be scaled according to ratio!
  if (w <= 8 || h <= 8) return;
  //h -= 8;

  for (int i = 0; i < w; i += 8) {
    GRoot.DrawPic(x+i, y-8, pic_brdr_t);
    GRoot.DrawPic(x+i, y+h, pic_brdr_b);
  }
  for (int i = 0; i < h; i += 8) {
    GRoot.DrawPic(x-8, y+i, pic_brdr_l);
    GRoot.DrawPic(x+w, y+i, pic_brdr_r);
  }

  // draw beveled edge
  GRoot.DrawPic(x-8, y-8, pic_brdr_tl);
  GRoot.DrawPic(x+w, y-8, pic_brdr_tr);
  GRoot.DrawPic(x-8, y+h, pic_brdr_bl);
  GRoot.DrawPic(x+w, y+h, pic_brdr_br);
}


//==========================================================================
//
//  DrawViewBorder
//
//==========================================================================
override void DrawViewBorder (int x, int y, int w, int h) {
  name flatname = 'ScreenBackPic'; //(checkForDoom2() ? 'grnrock' : 'floor7_2');
  //GRoot.FillRectWithFlatRepeat(0, 0, 640, 480/*-32*/, 'grnrock');
  GRoot.FillRectWithFlatRepeat(0, 0, GetVirtualWidth(), GetVirtualHeight(), flatname);
  DrawBorder(x, y, w, h-8);
}


defaultproperties {
  sb_height = 32;
  msgboxState.flatName = 'flat20';
  BigSelectorXOffset = -32;
  BigSelectorYOffset = -5;
  BigSelectorAnimSpeed = 4;
  BigSelectorAnimFrames[0] = 'm_skull1';
  BigSelectorAnimFrames[1] = 'm_skull2';
  if (!checkForDoom2()) {
    DefaultFinaleMusic = 'd_victor';
    DefaultFinaleType = 'EndGamePic1';
    quitsounds[0] = '*death';
    quitsounds[1] = 'demon/pain';
    quitsounds[2] = 'grunt/pain';
    quitsounds[3] = 'misc/gibbed';
    quitsounds[4] = 'misc/teleport';
    quitsounds[5] = 'grunt/sight1';
    quitsounds[6] = 'grunt/sight3';
    quitsounds[7] = 'demon/melee';
  } else {
    DefaultFinaleMusic = 'd_read_m';
    DefaultFinaleType = 'EndGameCast';
    quitsounds[0] = 'vile/active';
    quitsounds[1] = 'misc/p_pkup';
    quitsounds[2] = 'brain/cube';
    quitsounds[3] = 'misc/gibbed';
    quitsounds[4] = 'skeleton/swing';
    quitsounds[5] = 'knight/death';
    quitsounds[6] = 'baby/active';
    quitsounds[7] = 'demon/melee';
  }
  endmsg[0] = "are you sure you want to\nquit this great game?";
  endmsg[1] = "please don't leave, there's more\ndemons to toast!";
  endmsg[2] = "let's beat it -- this is turning\ninto a bloodbath!";
  endmsg[3] = "i wouldn't leave if i were you.\ndos is much worse.";
  endmsg[4] = "you're trying to say you like dos\nbetter than me, right?";
  endmsg[5] = "don't leave yet -- there's a\ndemon around that corner!";
  endmsg[6] = "ya know, next time you come in here\ni'm gonna toast ya.";
  endmsg[7] = "go ahead and leave. see if i care.";
  endmsg[8] = "you want to quit?\nthen, thou hast lost an eighth!";
  endmsg[9] = "don't go now, there's a \ndimensional shambler waiting\nat the dos prompt!";
  endmsg[10] = "get outta here and go back\nto your boring programs.";
  endmsg[11] = "if i were your boss, i'd \n deathmatch ya in a minute!";
  endmsg[12] = "look, bud. you leave now\nand you forfeit your body count!";
  endmsg[13] = "just leave. when you come\nback, i'll be waiting with a bat.";
  endmsg[14] = "you're lucky i don't smack\nyou for thinking about leaving.";

  namedmenus.put("main", MenuScreenMain);
  namedmenus.put("psetup", MenuScreenPlayerSetup);
  namedmenus.put("help", MenuScreenHelp);
}
