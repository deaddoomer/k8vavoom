//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreenOptions : MenuScreen;

//==========================================================================
//
//  CreateChoices
//
//==========================================================================

override void CreateChoices()
{
  MenuTextButton Btn;
  bool found = false;

  CreateSubMenuText("Controls", MenuScreenControls);

  // add "Special Controls" for MODs if keyconf lump is present,
  // and it has an "addkeysection" command
  if (WadLumpPresent('keyconf')) {
    ScriptsParser kc = ScriptsParser(SpawnObject(ScriptsParser));
    kc.OpenLumpName('keyconf');
    // lump is present, scan it until we find a 'addkeysection'
    while (!kc.AtEnd()) {
      if (kc.Check("addkeysection")) {
        kc.ExpectString();
        kc.ExpectString();
        found = true;
      }
      kc.GetString();
    }
    kc.Destroy();
  }
  if (found) {
    // surely a MOD that contains KEYCONF bindings,
    // so we'll show the special controls option
    CreateSubMenuText("Special Controls", MenuScreenSpecialControls);
  }

  CreateSubMenuText("Mouse Options", MenuScreenMouseOptions);
  CreateSubMenuText("Screen Resolution", MenuScreenScreenResolution);
  CreateSubMenuText("Video Options", MenuScreenVideoOptions);
  CreateSubMenuText("Sound Options", MenuScreenSoundOptions);
  CreateSubMenuText("Gameplay Options", MenuScreenGameplayOptions);
  CreateSubMenuText("Misc Options", MenuScreenMiscOptions);

  Btn = MenuTextButton(NewChild(MenuSmallTextButton));
  Btn.SetOrigin(ChoicesStartX, currentY);
  Btn.Text = "Go to console";
  Btn.Activated = ActivateConsole;
  currentY += Btn.Height;
}


//==========================================================================
//
//  ActivateConsole
//
//==========================================================================
void ActivateConsole (Object Sender) {
  CmdBuf_AddText("ToggleConsole\n");
}


defaultproperties
{
  ChoicesStartX = 160;
  ChoicesStartY = 32;
  SelectorType = MenuSelector_SmallRight;
  Title = "OPTIONS";
}
