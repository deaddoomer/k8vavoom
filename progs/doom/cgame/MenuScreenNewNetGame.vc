//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenNewNetGameDoom : replaces(MenuScreenNewNetGame);


//==========================================================================
//
//  CreateEpisodeList
//
//==========================================================================
override void CreateEpisodeList (out array!string epnames) {
  if (IsAnyDoom2) return;
  epnames[$] = "Knee-Deep in the Dead";
  if (WadLumpPresent('e2m1')) {
    epnames[$] = "The Shores of Hell";
    epnames[$] = "Inferno";
    if (WadLumpPresent('e4m1')) epnames[$] = "Thy Flesh Consumed";
  }
}


//==========================================================================
//
//  CreateMapList
//
//==========================================================================
override void CreateMapList (int aepisode, out array!string mapnames) {
  /*
  print("=== MAP COUNT: %d ===", P_GetNumMaps());
  for (int i = 0; i < P_GetNumMaps(); ++i) {
    print("  %d: <%s> (%d)", i, P_GetMapName(i), P_GetMapInfo(i)->LevelNum);
  }

  for (int i = 0; i < P_GetNumEpisodes(); ++i) {
    EpisodeDef *EDef = P_GetEpisodeDef(i);
    name startMap = EDef->Name;
    if (EDef->TeaserName && !IsMapPresent(EDef->Name)) startMap = EDef->TeaserName;
    print("EPISODE #%d (%s:%s): start map is %s", i, EDef->Text, GetLangString(EDef->Text), startMap);
  }
  */

  // build episode list and map list
  if (!IsAnyDoom2) {
    // doom1
    foreach (int i; 0..9) mapnames[$] = P_GetMapName(aepisode*9+i);
  } else {
    // doom2
#ifdef FIXME
    int count = 0;
    for (int i = 1; i <= 99; ++i) {
      int map = P_TranslateMap(i);
      if (map != -1) {
        //Level.EnumNames[count] = P_GetMapName(map);
        Level.AddItem(P_GetMapName(map));
        count++;
      }
    }
    return;
#else
    foreach (int i; 0..P_GetNumMaps()) mapnames[$] = P_GetMapName(i);
  }
#endif
}


//==========================================================================
//
//  GetMapName
//
//==========================================================================
override string GetMapName (int aepisode, int map) {
  if (IsAnyDoom2) {
    MapInfo *mi = P_GetMapInfo(map);
    if (!mi) return "";
    return string(mi->LumpName);
  } else {
    return va("e%dm%d", aepisode+1, map+1);
  }
}
