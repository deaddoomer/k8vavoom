//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenNewNetGame : MenuScreen;

MenuChoiceEnum Players;
MenuChoiceEnum Monsters;
MenuChoiceEnum DeathMatch;
MenuChoiceEnum Skill;
MenuChoiceEnum TimeLimit;
MenuChoiceEnum Episode;
MenuChoiceEnum Level;


override void CreateChoices () {
  MenuTextButton startGame;

  startGame = MenuTextButton(NewChild(MenuSmallTextButton));
  startGame.SetOrigin(ChoicesStartX, currentY);
  startGame.Text = "Start Game";
  startGame.Activated = &ActivateStartNewGame;
  currentY += startGame.Height;

  Players = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Players.SetOrigin(ChoicesStartX, currentY);
  Players.Text = "Max players";
  Players.AddItem("2");
  Players.AddItem("3");
  Players.AddItem("4");
  Players.AddItem("5");
  Players.AddItem("6");
  Players.AddItem("7");
  Players.AddItem("8");
  Players.SetSessionCvar('_netgame_max_players_', 2);
  currentY += Players.Height;

  Monsters = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
  Monsters.SetOrigin(ChoicesStartX, currentY);
  Monsters.Text = "Monsters";
  Monsters.SetSessionCvar('_netgame_allow_monsters_', 0);
  currentY += Monsters.Height;

  DeathMatch = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  DeathMatch.SetOrigin(ChoicesStartX, currentY);
  DeathMatch.Text = "Game type";
  DeathMatch.AddItem("Cooperative");
  DeathMatch.AddItem("Deathmatch");
  DeathMatch.AddItem("Deathmatch2");
  DeathMatch.SetSessionCvar('_netgame_game_type_', 2);
  currentY += DeathMatch.Height;

  Skill = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Skill.SetOrigin(ChoicesStartX, currentY);
  Skill.Text = "Skill";
  for (int i = 0; i < P_GetNumSkills(); ++i) Skill.AddItem(P_GetSkillDef(i)->Name);
  Skill.SetSessionCvar('_netgame_game_skill_', 2);
  currentY += Skill.Height;

  TimeLimit = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  TimeLimit.SetOrigin(ChoicesStartX, currentY);
  TimeLimit.Text = "Time limit";
  TimeLimit.AddItem("0");
  TimeLimit.AddItem("5");
  TimeLimit.AddItem("10");
  TimeLimit.AddItem("15");
  TimeLimit.AddItem("20");
  TimeLimit.AddItem("25");
  TimeLimit.AddItem("30");
  TimeLimit.AddItem("35");
  TimeLimit.AddItem("40");
  TimeLimit.AddItem("45");
  TimeLimit.AddItem("50");
  TimeLimit.AddItem("55");
  TimeLimit.AddItem("60");
  TimeLimit.SetSessionCvar('_netgame_time_limit_', 0);
  currentY += TimeLimit.Height;

  if (!IsAnyDoom2) {
    Episode = MenuChoiceEnum(NewChild(MenuChoiceEnum));
    Episode.SetOrigin(ChoicesStartX, currentY);
    Episode.Text = "Episode";
    Episode.AddItem("Knee - Deep in the Dead");
    if (WadLumpPresent('e2m1')) {
      Episode.AddItem("The Shores of Hell");
      Episode.AddItem("Inferno");
      if (WadLumpPresent('e4m1')) Episode.AddItem("Thy Flesh Consumed");
    }
    Episode.SetSessionCvar('_netgame_episode_', 0);
    Episode.ValueChanging = &ChangedEpisode;
    currentY += Episode.Height;
  }

  Level = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Level.SetOrigin(ChoicesStartX, currentY);
  Level.AddItem("test");
  Level.Text = "Level";
  Level.SetSessionCvar('_netgame_mapindex_', 0);
  currentY += Level.Height;

  if (!IsAnyDoom2) {
    InitMapList(int(Level.getSavedValue(0)));
  } else {
    InitMapList(0);
  }

  //Level.Value = getSavedInt('_netgame_mapindex_', 0);
}


void InitMapList (int epi) {
  /*
  print("=== MAP COUNT: %d ===", P_GetNumMaps());
  for (int i = 0; i < P_GetNumMaps(); ++i) {
    print("  %d: <%s> (%d)", i, P_GetMapName(i), P_GetMapInfo(i)->LevelNum);
  }

  for (int i = 0; i < P_GetNumEpisodes(); ++i) {
    EpisodeDef *EDef = P_GetEpisodeDef(i);
    name startMap = EDef->Name;
    if (EDef->TeaserName && !IsMapPresent(EDef->Name)) startMap = EDef->TeaserName;
    print("EPISODE #%d (%s:%s): start map is %s", i, EDef->Text, GetLangString(StrToName(EDef->Text)), NameToStr(startMap));
  }
  */

  // build episode list and map list
  if (!IsAnyDoom2) {
    // doom1
    for (int i = 0; i < 9; ++i) {
      //Level.EnumNames[i] = P_GetMapName(epi * 9 + i);
      Level.AddItem(P_GetMapName(epi*9+i));
    }
  } else {
    // doom2
#ifdef FIXME
    int count = 0;
    for (int i = 1; i <= 99; ++i) {
      int map = P_TranslateMap(i);
      if (map != -1) {
        //Level.EnumNames[count] = P_GetMapName(map);
        Level.AddItem(P_GetMapName(map));
        count++;
      }
    }
    Level.MaxValue = count;
    return;
#else
    for (int i = 0; i < P_GetNumMaps(); ++i) {
      //Level.EnumNames[i] = P_GetMapName(i);
      Level.AddItem(P_GetMapName(i));
    }
  }
#endif
  Level.Value = Level.getSavedValue(0);
}


bool ChangedEpisode (Object Sender, float newValue) { InitMapList(int(newValue)); return true; }


void ActivateStartNewGame (Object Sender) {
  CmdBuf_AddText("Disconnect\n");
  CmdBuf_AddText("MaxPlayers %d\n", Players.Value + 2);
  CmdBuf_AddText("NoMonsters %d\n", !Monsters.Value);
  CmdBuf_AddText("DeathMatch %d\n", DeathMatch.Value);
  CmdBuf_AddText("TimeLimit %d\n", TimeLimit.Value * 5);
  CmdBuf_AddText("Skill %d\n", Skill.Value);
  if (IsAnyDoom2) {
    /*
    if (Level.Value + 1 < 10)
      CmdBuf_AddText("Map MAP0%d\n", Level.Value + 1);
    else
      CmdBuf_AddText("Map MAP%d\n", Level.Value + 1);
    */
    mapInfo_t *mi = P_GetMapInfo(int(Level.Value));
    if (mi) {
      CmdBuf_AddText("Map %s\n", NameToStr(mi->LumpName));
    } else {
      Error("cannot start map!");
    }
  } else {
    CmdBuf_AddText("Map E%dM%d\n", Episode.Value + 1, Level.Value + 1);
  }
}


defaultproperties {
  ChoicesStartX = 128;
  ChoicesStartY = 40;
  SelectorType = MenuSelector_SmallRight;
  Title = "NEW GAME";
}
