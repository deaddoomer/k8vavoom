//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//
//  This section contains the main bot AI. The
//  main bot AI loop, B_Think, is called every tic.
//  Also included are various bot decision-making
//  procedures, such as B_CheckStuff and B_SetEnemy.
//
//**************************************************************************
#ifdef IN_VCC
# include "../../common/botai/BotPlayer_base.vc"
#else
# include "progs/botai/BotPlayer_base.vc"
#endif

// Main bot class
class BotPlayer : BotPlayerBase;


//==========================================================================
//
//  CheckOtherItem
//
//==========================================================================
override bool CheckOtherItem (Actor item, out bool res) {
  if (::CheckOtherItem(item, out res)) return true;

  if ((item.Class == Soulsphere || item.Class == Megasphere) && botmo.Health >= 2*Player::MAXHEALTH) {
    res = false;
    return true;
  }

  BasicArmor Armor = BasicArmor(botmo.FindInventory(BasicArmor, disableReplacement:true));
  if (!Armor) return false;

  if (item.Class == Megasphere && Armor.Amount >= 200) {
    res = false;
    return true;
  }

  return false;
}


//==========================================================================
//
//  BotAimSpecial
//
//==========================================================================
override bool BotAimSpecial (float dist, bool right, float an) {
  if (player.ReadyWeapon.bBotBfg) {
    // BFG9000
    SetAngle(AngleTo(enemy.Origin));
    return true;
  }
  return ::BotAimSpecial(dist, right, an);
}


//==========================================================================
//
//  AttackSpecial
//
//==========================================================================
override bool AttackSpecial () {
  if (player.ReadyWeapon.Class == Chaingun) {
    // double tap the chaingun for extreme accuracy
    if (info.accuracy == bsk_supreme) {
      if (t_fire) return true;
    }
  }
  return ::AttackSpecial();
}


//==========================================================================
//
//  IsDangerous
//
//  Checks if a sector is dangerous.
//
//==========================================================================
override bool IsDangerous (sector_t *sec) {
  int special = sec->special&~SECSPEC_SECRET_MASK;

  switch (special) {
    case 64+5:
    case 64+7:
    case 64+16:
    case 64+4:
    case 64+11:
      return true;
    default:
      // [RH] Ignore unknown specials
      break;
  }

  switch (special&SECSPEC_DAMAGE_MASK) {
    case 0x100: // 2/5 damage per 31 ticks
    case 0x200: // 5/10 damage per 31 ticks
    case 0x300: // 10/20 damage per 31 ticks
      return true;
    default:
      break;
  }

  //if (sec->damage) return true;

  return ::IsDangerous(sec);
}
