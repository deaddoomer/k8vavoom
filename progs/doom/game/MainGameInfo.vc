//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MainGameInfo : LineSpecialGameInfo;

//enum { NUMTOTALBOTS = 12 };
//enum { NUMBOTTYPES = 12 };

//BotPlayer::botinfo_t botinfo[NUMTOTALBOTS];
//int botskill;

int INITIAL_HEALTH;



//==========================================================================
//
//  Init
//
//==========================================================================
override void Init () {
  ::Init();

  //writeln("*******************************************");
  KBCheatClearAll();
  if (IsAnyDoom2) {
    KBCheatAppend("idclev##", "map map##");
  } else {
    KBCheatAppend("idclev##", "map e#m#");
  }
  KBCheatAppend("idkfa", "gimme backpack; gimme weapons; gimme ammo; gimme armor; gimme keys");
  KBCheatAppend("idfa", "gimme backpack; gimme weapons; gimme ammo; gimme armor");
  KBCheatAppend("idchoppers", "gimme choppers");
  KBCheatAppend("idspispopd", "noclip");
  KBCheatAppend("idclip", "noclip");
  KBCheatAppend("iddqd", "god");
  KBCheatAppend("iddt", "iddt");
  KBCheatAppend("idbeholdv", "gimme Invulnerability");
  KBCheatAppend("idbeholdb", "gimme Berserk");
  KBCheatAppend("idbeholdi", "gimme Invisibility");
  KBCheatAppend("idbeholdr", "gimme Suit");
  KBCheatAppend("idbeholda", "gimme AllMap");
  KBCheatAppend("idbeholdl", "gimme LightAmp");
}


//==========================================================================
//
//  InitNewGame
//
//==========================================================================
override void InitNewGame (int skill) {
  SetSkill(skill);
  nomonsters = GetCvar('NoMonsters');
  bRespawnItems = GetCvar('deathmatch') >= 2;
  bWeaponsStay = netgame && GetCvar('deathmatch') < 2;
}


//==========================================================================
//
//  InitBotTypes
//
//==========================================================================
override void InitBotTypes () {
  AppendBotType(
    "bot1",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot1\\color\\green\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot2",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot2\\color\\black\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot3",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot3\\color\\white\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot4",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot4\\color\\brown\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot5",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot5\\color\\red\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot6",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot6\\color\\pink\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot7",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot7\\color\\blue\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot8",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot8\\color\\indigo\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot9",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot9\\color\\magenta\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot10",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot10\\color\\purple\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot11",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot11\\color\\orange\\class\\0\\model\\doomguy"
  );
  AppendBotType(
    "bot12",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot12\\color\\yellow\\class\\0\\model\\doomguy"
  );
  NUMBOTTYPES = botinfo.length;
}


//==========================================================================
//
//  TranslateLine
//
//  front sector is not set yet
//
//==========================================================================
void TranslateLine (VLevel InLevel, line_t *line) {
  int OldSpec = line->special;
  int OldTag = line->arg1;
  int OldFlags = line->flags;

  if (OldSpec < 0) {
    printwarn("TranslateLine: special=%d; tag=%d; flags=%x", OldSpec, OldTag, OldFlags);
    OldSpec = 0;
    OldTag = 0;
    line->special = 0;
    line->arg1 = 0;
  }

  // clear unknown flags
  line->flags &= 0x01ff;

  // for BOOM compatibility all lines need to have its ID to be the same as the tag
  if (OldTag) line->lineTag = OldTag;

  if (!line->special) return;

  // handle Boom's generalised types
  if (OldSpec > 0x2F80) {
    // activation flags
    switch (OldSpec&0x0006) {
      case 0:
        line->SpacFlags = SPAC_Cross;
        break;
      case 2:
      case 6:
        if (OldFlags&0x0200) {
          line->SpacFlags = SPAC_UseThrough;
        } else {
          line->SpacFlags = SPAC_Use;
        }
        break;
      case 4:
        line->SpacFlags = SPAC_Impact;
        break;
    }
    if (OldSpec&1) line->flags |= ML_REPEAT_SPECIAL;

    // we treat push triggers like switch triggers with zero tags
    if ((OldSpec&0x0006) == 6) {
      line->arg1 = 0;
    } else {
      line->arg1 = OldTag;
    }

    if (OldSpec < 0x3000) {
      // generalised crusher (tag, dnspeed, upspeed, silent, damage)
      line->special = LNSPEC_CeilingGenericCrush;
      if (OldSpec&0x0020) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 8; break;
        case 0x0008: line->arg2 = 16; break;
        case 0x0010: line->arg2 = 32; break;
        case 0x0018: line->arg2 = 64; break;
      }
      line->arg3 = line->arg2;
      line->arg4 = (OldSpec&0x0040)>>6;
      line->arg5 = 10;
    } else if (OldSpec < 0x3400) {
      // generalised stairs (tag, speed, step, dir/igntxt, reset)
      line->special = LNSPEC_StairsGeneric;
      if (OldSpec&0x0020) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 2; break;
        case 0x0008: line->arg2 = 4; break;
        case 0x0010: line->arg2 = 16; break;
        case 0x0018: line->arg2 = 32; break;
      }
      switch (OldSpec&0x00c0) {
        case 0x0000: line->arg3 = 4; break;
        case 0x0040: line->arg3 = 8; break;
        case 0x0080: line->arg3 = 16; break;
        case 0x00c0: line->arg3 = 24; break;
      }
      line->arg4 = (OldSpec&0x0300)>>8;
      line->arg5 = 0;
    } else if (OldSpec < 0x3800) {
      // generalised lift (tag, speed, delay, target, height)
      line->special = LNSPEC_PlatGeneric;
      if (OldSpec&0x0020) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 16; break;
        case 0x0008: line->arg2 = 32; break;
        case 0x0010: line->arg2 = 64; break;
        case 0x0018: line->arg2 = 128; break;
      }
      switch (OldSpec&0x00c0) {
        case 0x0000: line->arg3 = 8; break;
        case 0x0040: line->arg3 = 24; break;
        case 0x0080: line->arg3 = 40; break;
        case 0x00c0: line->arg3 = 80; break;
      }
      line->arg4 = ((OldSpec&0x0300)>>8)+1;
      line->arg5 = 0;
    } else if (OldSpec < 0x3c00) {
      // generalised locked door (tag, speed, kind, delay, lock)
      line->special = LNSPEC_DoorGeneric;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 16; break;
        case 0x0008: line->arg2 = 32; break;
        case 0x0010: line->arg2 = 64; break;
        case 0x0018: line->arg2 = 128; break;
      }
      line->arg3 = (OldSpec&0x0020)>>5;
      line->arg4 = 0;
      line->arg5 = (OldSpec&0x01c0)>>6;
           if (line->arg5 == 0) line->arg5 = 100;
      else if (line->arg5 == 7) line->arg5 = 101;
      line->arg5 |= (OldSpec&0x0200)>>2;
    } else if (OldSpec < 0x4000) {
      // generalised door (tag, speed, kind, delay, lock)
      line->special = LNSPEC_DoorGeneric;
      if (OldSpec&0x0080) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 16; break;
        case 0x0008: line->arg2 = 32; break;
        case 0x0010: line->arg2 = 64; break;
        case 0x0018: line->arg2 = 128; break;
      }
      line->arg3 = (OldSpec&0x0060)>>5;
      if ((OldSpec&0x0006) == 6) {
        line->arg1 = OldTag;
        line->arg3 |= 128;
      }
      switch (OldSpec&0x0300) {
        case 0x0000: line->arg4 = 8; break;
        case 0x0100: line->arg4 = 32; break;
        case 0x0200: line->arg4 = 72; break;
        case 0x0300: line->arg4 = 240; break;
      }
      line->arg5 = 0;
    } else {
      // generalised ceiling (tag, speed, height, target, change/model/direct/crush)
      // generalised floor (tag, speed, height, target, change/model/direct/crush)
      if (OldSpec < 0x6000) {
        line->special = LNSPEC_CeilingGeneric;
      } else {
        line->special = LNSPEC_FloorGeneric;
      }
      if ((OldSpec&0x0c20) == 0x0020) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 8; break;
        case 0x0008: line->arg2 = 16; break;
        case 0x0010: line->arg2 = 32; break;
        case 0x0018: line->arg2 = 64; break;
      }
      line->arg4 = ((OldSpec&0x0380)>>7)+1;
      if (line->arg4 >= 7) {
        line->arg3 = 24+(line->arg4-7)*8;
        line->arg4 = 0;
      } else {
        line->arg3 = 0;
      }
      line->arg5 = ((OldSpec&0x0c00)>>10)|((OldSpec&0x0060)>>3)|((OldSpec&0x1000)>>8);
    }
    if ((line->flags&ML_MONSTERSCANACTIVATE) && line->SpacFlags == SPAC_Cross) {
      // in Boom, anything can activate such a line so set the proper type here
      line->SpacFlags = SPAC_AnyCross;
    }
    return;
  }

  auto trsp = FindLDefSpecTransForSpecial(InLevel, OldSpec);
  PerformLDefSpecialTranslation(InLevel, OldSpec, trsp, line);

  // fix spac
  if (trsp && !IsLDef3DFloorSpecial(trsp)) {
    // activation flags
    if ((OldFlags&0x0200) != 0 && trsp.spac == SPAC_Use) {
      line->SpacFlags = SPAC_UseThrough;
    } else {
      line->SpacFlags = trsp.spac;
    }
    if (trsp.repeat) line->flags |= ML_REPEAT_SPECIAL;
    if (trsp.monst) line->flags |= ML_MONSTERSCANACTIVATE;
    if ((line->flags&ML_SECRET) && (line->SpacFlags&(SPAC_Use|SPAC_UseThrough)) != 0) line->flags &= ~ML_MONSTERSCANACTIVATE;
    // check to see if we want thinkers destroyed or not
    if (trsp.not_destroy) line->flags |= ML_KEEPDATA;
  }

  /*
  switch (OldSpec) {
    //EDGE plane-copy
    case 394: // Slope_FrontFloorToTaggedSlope
      line->special = LNSPEC_PlaneCopy;
      //line->arg1 = line->tag;
      line->arg2 = 0;
      line->arg3 = 0;
      line->arg4 = 0;
      line->arg5 = 0;
      //line->tag = 0;
      return;
    case 395: // Slope_FrontCeilingToTaggedSlope
      line->special = LNSPEC_PlaneCopy;
      //line->arg2 = line->tag;
      line->arg2 = line->arg1;
      line->arg1 = 0;
      line->arg3 = 0;
      line->arg4 = 0;
      line->arg5 = 0;
      //line->tag = 0;
      return;
    case 396: // Slope_FrontFloorAndCeilingToTaggedSlope
      line->special = LNSPEC_PlaneCopy;
      //line->arg1 = line->tag;
      //line->arg2 = line->tag;
      line->arg2 = line->arg2;
      line->arg3 = 0;
      line->arg4 = 0;
      line->arg5 = 0;
      //line->tag = 0;
      return;
  }
  */
}


//==========================================================================
//
//  TranslateSector
//
//==========================================================================
void TranslateSector (sector_t *sector) {
  int special;
  int high;

  special = sector->special;
  if (!special) return;
  if (special == 9) {
    sector->special = SECSPEC_SECRET_MASK;
    return;
  }

  // this supports phased lighting with specials 21-24 and wind specials 40-51
  high = (special&0xfe0)<<3;
  special &= 0x01f;
       if (special < 21) sector->special = high|(special+64);
  else if (special < 40) sector->special = high|(special-20);
  else sector->special = high|special;
}


//==========================================================================
//
//  TranslateThing
//
//==========================================================================
void TranslateThing (mthing_t *mthing) {
  // translate the spawn flags to Hexen format
  int flags = mthing->options;
  if (flags&0x100) flags &= 0x1f; //k8: wtf is this?

  mthing->options = (flags&0xf)| /*0x7e0;*/
    0xe0| /* player classes? */
    LineSpecialLevelInfo::MTF_GSINGLE|
    LineSpecialLevelInfo::MTF_GCOOP|
    LineSpecialLevelInfo::MTF_GDEATHMATCH;

  if (flags&0x10) mthing->options &= ~LineSpecialLevelInfo::MTF_GSINGLE;
  if (flags&0x20) mthing->options &= ~LineSpecialLevelInfo::MTF_GDEATHMATCH; // Boom
  if (flags&0x40) mthing->options &= ~LineSpecialLevelInfo::MTF_GCOOP; // Boom
  if (flags&0x80) mthing->options |= LineSpecialLevelInfo::MTF_FRIENDLY; // MBF friendly monsters

  // hide dm-only things for coop games
  if ((mthing->options&(LineSpecialLevelInfo::MTF_GDEATHMATCH|LineSpecialLevelInfo::MTF_GSINGLE)) == LineSpecialLevelInfo::MTF_GDEATHMATCH &&
      !GetCvarB('sv_coop_dm_things'))
  {
    mthing->options &= ~LineSpecialLevelInfo::MTF_GCOOP;
    //mthing->options |= LineSpecialLevelInfo::MTF_GSINGLE;
  }
}


//==========================================================================
//
//  TranslateLevel
//
//==========================================================================
override void TranslateLevel (VLevel InLevel) {
  foreach (auto i; 0..InLevel.Lines.length) TranslateLine(InLevel, &InLevel.Lines[i]);
  foreach (auto i; 0..InLevel.Sectors.length) TranslateSector(&InLevel.Sectors[i]);
  foreach (auto i; 0..InLevel.Things.length) TranslateThing(&InLevel.Things[i]);
}


//==========================================================================
//
//  TranslateSpecialActions
//
//==========================================================================
override void TranslateSpecialActions (LevelInfo Level) {
  foreach (ref VMapSpecialAction sac; Level.SpecialActions) {
    int special = sac.Special;
    if (special >= 0) continue; // no translation needed
    auto trsp = spec_trans_tab.find(-special);
    if (!trsp) {
      // oops
      sac.Special = 0;
      printwarn("TRANSLATION: boss special %d -- NOT FOUND!", -special);
      continue;
    }
    sac.Special = trsp.special;
    // args
    int tag = sac.Args[0];
    sac.Args[0] = 0;
    sac.Args[0] = (trsp.arg1 == -1 ? tag : (trsp.arg1 == -666 ? sac.Args[0] : trsp.arg1));
    sac.Args[1] = (trsp.arg2 == -1 ? tag : (trsp.arg2 == -666 ? sac.Args[1] : trsp.arg2));
    sac.Args[2] = (trsp.arg3 == -1 ? tag : (trsp.arg3 == -666 ? sac.Args[2] : trsp.arg3));
    sac.Args[3] = (trsp.arg4 == -1 ? tag : (trsp.arg4 == -666 ? sac.Args[3] : trsp.arg4));
    sac.Args[4] = (trsp.arg5 == -1 ? tag : (trsp.arg5 == -666 ? sac.Args[4] : trsp.arg5));
    printdebug("BOSSSPECIAL %s for '%s' translated to %s (tag %s)", -special, sac.TypeName, sac.Special, tag);
  }
}


defaultproperties {
  LevelInfoClass = DoomLevelInfo;
  /*
  if (GetCvarI('_game_override')) {
    GameFilterFlag = GetCvarI('_game_override');
  } else {
    GameFilterFlag = EntityEx::GAME_Doom;
  }
  */
#ifdef CHEX_QUEST
  GameFilterFlag = EntityEx::GAME_Chex|EntityEx::GAME_Doom;
#else
  GameFilterFlag = EntityEx::GAME_Doom;
#endif
  bDefaultLaxMonsterActivation = true;
  bNoClipIgnoreFloor = true;
  bAlwaysSwitchNewWeapon = true;
  DefaultKickBack = 150.0;
  bBloodRandomiseTime = true;
  GibsHealthFactor = 1.0;

  botskill = 2;

  INITIAL_HEALTH = 100;
  GOD_HEALTH = 100;

  PlayerClasses.length = 1;
#ifdef CHEX_QUEST
  PlayerClasses[0] = ChexPlayer;
  /*
  WeaponSlots[1].Weapons[0] = Bootspoon;
  WeaponSlots[1].Weapons[1] = SuperBootspork;
  WeaponSlots[2].Weapons[0] = MiniZorcher;
  WeaponSlots[3].Weapons[0] = LargeZorcher;
  WeaponSlots[3].Weapons[1] = SuperLargeZorcher;
  WeaponSlots[4].Weapons[0] = RapidZorcher;
  WeaponSlots[5].Weapons[0] = ZorchPropulsor;
  WeaponSlots[6].Weapons[0] = PhasingZorcher;
  WeaponSlots[7].Weapons[0] = LAZDevice;
  */
#else
  PlayerClasses[0] = DoomPlayer;
#endif
  WeaponSlots[1].Weapons[0] = Fist;
  WeaponSlots[1].Weapons[1] = Chainsaw;
  WeaponSlots[2].Weapons[0] = Pistol;
  WeaponSlots[3].Weapons[0] = Shotgun;
  WeaponSlots[3].Weapons[1] = SuperShotgun;
  WeaponSlots[4].Weapons[0] = Chaingun;
  WeaponSlots[5].Weapons[0] = RocketLauncher;
  WeaponSlots[6].Weapons[0] = PlasmaRifle;
  WeaponSlots[7].Weapons[0] = BFG9000;
}
