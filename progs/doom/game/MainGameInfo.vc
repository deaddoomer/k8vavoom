//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MainGameInfo : LineSpecialGameInfo;

//const int NUM_SPECIALS = 394;

struct spec_trans_t {
  int special;
  int arg1;
  int arg2;
  int arg3;
  int arg4;
  int arg5;
  int spac;
  int repeat;
  int monst;
  int not_destroy;
};

dictionary!(int, spec_trans_t) spec_trans_tab; //[NUM_SPECIALS];
// arg1 is ignored
// key is old special
dictionary!(int, spec_trans_t) trans_3d_floors;

enum { NUMTOTALBOTS = 12 };
enum { NUMBOTTYPES = 12 };

BotPlayer::botinfo_t botinfo[NUMTOTALBOTS];
int botskill;

int INITIAL_HEALTH;


//==========================================================================
//
//  Init
//
//==========================================================================
override void Init () {
  ::Init();
  InitTranslationTables();
  InitBotTypes();

  //writeln("*******************************************");
  KBCheatClearAll();
  if (IsAnyDoom2) {
    KBCheatAppend("idclev##", "map map##");
  } else {
    KBCheatAppend("idclev##", "map e#m#");
  }
  KBCheatAppend("idkfa", "gimme backpack; gimme weapons; gimme ammo; gimme armor; gimme keys");
  KBCheatAppend("idfa", "gimme backpack; gimme weapons; gimme ammo; gimme armor");
  KBCheatAppend("idchoppers", "gimme choppers");
  KBCheatAppend("idspispopd", "noclip");
  KBCheatAppend("idclip", "noclip");
  KBCheatAppend("iddqd", "god");
  KBCheatAppend("iddt", "iddt");
  KBCheatAppend("idbeholdv", "gimme Invulnerability");
  KBCheatAppend("idbeholdb", "gimme Berserk");
  KBCheatAppend("idbeholdi", "gimme Invisibility");
  KBCheatAppend("idbeholdr", "gimme Suit");
  KBCheatAppend("idbeholda", "gimme AllMap");
  KBCheatAppend("idbeholdl", "gimme LightAmp");
}


//==========================================================================
//
//  InitNewGame
//
//==========================================================================
override void InitNewGame (int skill) {
  SetSkill(skill);
  nomonsters = GetCvar('NoMonsters');
  bRespawnItems = GetCvar('deathmatch') >= 2;
  bWeaponsStay = netgame && GetCvar('deathmatch') < 2;
}


//==========================================================================
//
//  InitBotTypes
//
//==========================================================================
void InitBotTypes () {
  SetBotType(0,
    "bot1",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot1\\color\\green\\class\\0\\model\\doomguy"
  );
  SetBotType(1,
    "bot2",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot2\\color\\black\\class\\0\\model\\doomguy"
  );
  SetBotType(2,
    "bot3",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot3\\color\\white\\class\\0\\model\\doomguy"
  );
  SetBotType(3,
    "bot4",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot4\\color\\brown\\class\\0\\model\\doomguy"
  );
  SetBotType(4,
    "bot5",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot5\\color\\red\\class\\0\\model\\doomguy"
  );
  SetBotType(5,
    "bot6",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot6\\color\\pink\\class\\0\\model\\doomguy"
  );
  SetBotType(6,
    "bot7",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot7\\color\\blue\\class\\0\\model\\doomguy"
  );
  SetBotType(7,
    "bot8",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot8\\color\\indigo\\class\\0\\model\\doomguy"
  );
  SetBotType(8,
    "bot9",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot9\\color\\magenta\\class\\0\\model\\doomguy"
  );
  SetBotType(9,
    "bot10",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot10\\color\\purple\\class\\0\\model\\doomguy"
  );
  SetBotType(10,
    "bot11",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot11\\color\\orange\\class\\0\\model\\doomguy"
  );
  SetBotType(11,
    "bot12",
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    BotPlayer::bsk_medium,
    "\\Name\\bot12\\color\\yellow\\class\\0\\model\\doomguy"
  );
}


//==========================================================================
//
//  SetBotType
//
//==========================================================================
void SetBotType (int i, string Name, int accuracy, int intelect, int evade,
  int anticip, int reaction, string userinfo)
{
  botinfo[i].Name = Name;
  botinfo[i].accuracy = accuracy;
  botinfo[i].intelect = intelect;
  botinfo[i].evade = evade;
  botinfo[i].anticip = anticip;
  botinfo[i].reaction = reaction;
  botinfo[i].userinfo = userinfo;
}


//==========================================================================
//
//  InitTranslationTables
//
//==========================================================================
void InitTranslationTables () {
  // 0
  SetLineTrans(1, LNSPEC_DoorRaise, 0, 16, 150, 0, 0, SPAC_Use, true, true);
  SetLineTrans(2, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(3, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(4, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_Cross, false, true);
  SetLineTrans(5, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(6, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_Cross, false);
  SetLineTrans(7, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_Use, false);
  SetLineTrans(8, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_Cross, false);
  SetLineTrans(9, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_Use, false);

  SetLineTrans(10, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_Cross, false, true);
  SetLineTrans(11, LNSPEC_ExitNormal, -1, 0, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(12, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(13, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(14, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_Use, false);
  SetLineTrans(15, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_Use, false);
  SetLineTrans(16, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_Cross, false);
  SetLineTrans(17, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_Cross, false);
  SetLineTrans(18, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(19, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_Cross, false);

  SetLineTrans(20, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(21, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_Use, false);
  SetLineTrans(22, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(23, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(24, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_Impact, false);
  SetLineTrans(25, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_Cross, false);
  SetLineTrans(26, LNSPEC_DoorLockedRaise, 0, 16, 150, 2|128, 0, SPAC_Use, true);
  SetLineTrans(27, LNSPEC_DoorLockedRaise, 0, 16, 150, 3|128, 0, SPAC_Use, true);
  SetLineTrans(28, LNSPEC_DoorLockedRaise, 0, 16, 150, 1|128, 0, SPAC_Use, true);
  SetLineTrans(29, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_Use, false);

  SetLineTrans(30, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(31, LNSPEC_DoorOpen, 0, 16, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(32, LNSPEC_DoorLockedRaise, 0, 16, 0, 2|128, 0, SPAC_Use, false, true);
  SetLineTrans(33, LNSPEC_DoorLockedRaise, 0, 16, 0, 1|128, 0, SPAC_Use, false, true);
  SetLineTrans(34, LNSPEC_DoorLockedRaise, 0, 16, 0, 3|128, 0, SPAC_Use, false, true);
  SetLineTrans(35, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(36, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_Cross, false);
  SetLineTrans(37, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(38, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(39, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_Cross, false, true);

  SetLineTrans(40, LNSPEC_CeilingGeneric, -1, 8, 0, 1, 8, SPAC_Cross, false);
  SetLineTrans(41, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(42, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(43, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(44, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(45, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_Use, true);
  SetLineTrans(46, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_Impact, true, true);
  SetLineTrans(47, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_Impact, false);
  SetLineTrans(48, LNSPEC_ScrollTextureLeft, 64, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(49, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_Use, false);

  SetLineTrans(50, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(51, LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(52, LNSPEC_ExitNormal, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(53, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_Cross, false);
  SetLineTrans(54, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(55, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_Use, false);
  SetLineTrans(56, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_Cross, false);
  SetLineTrans(57, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(58, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_Cross, false);
  SetLineTrans(59, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_Cross, false);

  SetLineTrans(60, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(61, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(62, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_Use, true);
  SetLineTrans(63, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_Use, true);
  SetLineTrans(64, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(65, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_Use, true);
  SetLineTrans(66, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_Use, true);
  SetLineTrans(67, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_Use, true);
  SetLineTrans(68, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(69, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_Use, true);

  SetLineTrans(70, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_Use, true);
  SetLineTrans(71, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_Use, false);
  SetLineTrans(72, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(73, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_Cross, true);
  SetLineTrans(74, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(75, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(76, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_Cross, true);
  SetLineTrans(77, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_Cross, true);
  SetLineTrans(78, LNSPEC_FloorTransferNumeric, -1, 0, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(79, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_Cross, true);

  SetLineTrans(80, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(81, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(82, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(83, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_Cross, true);
  SetLineTrans(84, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(85, LNSPEC_ScrollTextureRight, 64, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(86, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(87, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_Cross, true);
  SetLineTrans(88, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_Cross, true, true);
  SetLineTrans(89, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_Cross, true);

  SetLineTrans(90, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_Cross, true);
  SetLineTrans(91, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(92, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_Cross, true);
  SetLineTrans(93, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_Cross, true);
  SetLineTrans(94, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_Cross, true);
  SetLineTrans(95, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(96, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(97, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_Cross, true, true);
  SetLineTrans(98, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_Cross, true);
  SetLineTrans(99, LNSPEC_DoorLockedRaise, -1, 64, 0, 2|128, 0, SPAC_Use, true);

  SetLineTrans(100, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_Cross, false);
  SetLineTrans(101, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(102, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_Use, false);
  SetLineTrans(103, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(104, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(105, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_Cross, true);
  SetLineTrans(106, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(107, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(108, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_Cross, false);
  SetLineTrans(109, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_Cross, false);

  SetLineTrans(110, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(111, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_Use, false);
  SetLineTrans(112, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(113, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(114, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_Use, true);
  SetLineTrans(115, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(116, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(117, LNSPEC_DoorRaise, 0, 64, 150, 0, 0, SPAC_Use, true);
  SetLineTrans(118, LNSPEC_DoorOpen, 0, 64, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(119, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_Cross, false);

  SetLineTrans(120, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_Cross, true);
  SetLineTrans(121, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_Cross, false);
  SetLineTrans(122, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_Use, false);
  SetLineTrans(123, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_Use, true);
  SetLineTrans(124, LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(125, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCross, false);
  SetLineTrans(126, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCross, true);
  SetLineTrans(127, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_Use, false);
  SetLineTrans(128, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(129, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_Cross, true);

  SetLineTrans(130, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(131, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(132, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(133, LNSPEC_DoorLockedRaise, -1, 64, 0, 2|128, 0, SPAC_Use, false);
  SetLineTrans(134, LNSPEC_DoorLockedRaise, -1, 64, 0, 1|128, 0, SPAC_Use, true);
  SetLineTrans(135, LNSPEC_DoorLockedRaise, -1, 64, 0, 1|128, 0, SPAC_Use, false);
  SetLineTrans(136, LNSPEC_DoorLockedRaise, -1, 64, 0, 3|128, 0, SPAC_Use, true);
  SetLineTrans(137, LNSPEC_DoorLockedRaise, -1, 64, 0, 3|128, 0, SPAC_Use, false);
  SetLineTrans(138, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(139, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_Use, true);

  SetLineTrans(140, LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_Use, false);
  SetLineTrans(141, LNSPEC_CeilingCrushAndRaiseSilentA, -1, 8, 8, 10, 0, SPAC_Cross, false);
  SetLineTrans(142, LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_Cross, false);
  SetLineTrans(143, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_Cross, false);
  SetLineTrans(144, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_Cross, false);
  SetLineTrans(145, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(146, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_Cross, false);
  SetLineTrans(147, LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_Cross, true);
  SetLineTrans(148, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_Cross, true);
  SetLineTrans(149, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_Cross, true);

  SetLineTrans(150, LNSPEC_CeilingCrushAndRaiseSilentA, -1, 8, 8, 10, 0, SPAC_Cross, true);
  SetLineTrans(151, LNSPEC_FloorAndCeilingLowerRaise, -1, 8, 8, 0, 0, SPAC_Cross, true);
  SetLineTrans(152, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(153, LNSPEC_FloorTransferTrigger, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(154, LNSPEC_FloorTransferTrigger, -1, 0, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(155, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_Cross, true);
  SetLineTrans(156, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_Cross, true);
  SetLineTrans(157, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(158, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(159, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_Use, false);

  SetLineTrans(160, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_Use, false);
  SetLineTrans(161, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_Use, false);
  SetLineTrans(162, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_Use, false);
  SetLineTrans(163, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(164, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_Use, false);
  SetLineTrans(165, LNSPEC_CeilingCrushAndRaiseSilentA, -1, 8, 8, 10, 0, SPAC_Use, false);
  SetLineTrans(166, LNSPEC_CeilingGeneric, -1, 8, 0, 1, 8, SPAC_Use, false);
  SetLineTrans(167, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(168, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(169, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_Use, false);

  SetLineTrans(170, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(171, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(172, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_Use, false);
  SetLineTrans(173, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(174, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_Use, false, true);
  SetLineTrans(175, LNSPEC_DoorCloseWaitOpen, -1, 8, 240, 0, 0, SPAC_Use, false);
  SetLineTrans(176, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(177, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(178, LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_Use, true);
  SetLineTrans(179, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_Use, true);

  SetLineTrans(180, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_Use, true);
  SetLineTrans(181, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_Use, true);
  SetLineTrans(182, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(183, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_Use, true);
  SetLineTrans(184, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_Use, true);
  SetLineTrans(185, LNSPEC_CeilingCrushAndRaiseSilentA, -1, 8, 8, 10, 0, SPAC_Use, true);
  SetLineTrans(186, LNSPEC_CeilingGeneric, -1, 8, 0, 1, 8, SPAC_Use, true);
  SetLineTrans(187, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(188, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(189, LNSPEC_FloorTransferTrigger, -1, 0, 0, 0, 0, SPAC_Use, false);

  SetLineTrans(190, LNSPEC_FloorTransferTrigger, -1, 0, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(191, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_Use, true);
  SetLineTrans(192, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(193, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_Use, true);
  SetLineTrans(194, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(195, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_Use, true, true);
  SetLineTrans(196, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_Use, true);
  SetLineTrans(197, LNSPEC_ExitNormal, 0, 0, 0, 0, 0, SPAC_Impact, false);
  SetLineTrans(198, LNSPEC_ExitSecret, 0, 0, 0, 0, 0, SPAC_Impact, false);
  SetLineTrans(199, LNSPEC_CeilingLowerToLowest, -1, 8, 0, 0, 0, SPAC_Cross, false);

  SetLineTrans(200, LNSPEC_CeilingLowerToHighestFloor, -1, 8, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(201, LNSPEC_CeilingLowerToLowest, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(202, LNSPEC_CeilingLowerToHighestFloor, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(203, LNSPEC_CeilingLowerToLowest, -1, 8, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(204, LNSPEC_CeilingLowerToHighestFloor, -1, 8, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(205, LNSPEC_CeilingLowerToLowest, -1, 8, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(206, LNSPEC_CeilingLowerToHighestFloor, -1, 8, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(207, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_Cross, false, true);
  SetLineTrans(208, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_Cross, true, true);
  SetLineTrans(209, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_Use, false, true);

  SetLineTrans(210, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_Use, true, true);
  SetLineTrans(211, LNSPEC_PlatToggle, -1, 0, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(212, LNSPEC_PlatToggle, -1, 0, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(213, LNSPEC_TransferFloorLight, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(214, LNSPEC_ScrollCeiling, -1, 6, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(215, LNSPEC_ScrollFloor, -1, 6, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(216, LNSPEC_ScrollFloor, -1, 6, 1, 0, 0, SPAC_Cross, false);
  SetLineTrans(217, LNSPEC_ScrollFloor, -1, 6, 2, 0, 0, SPAC_Cross, false);
  SetLineTrans(218, LNSPEC_ScrollTextureModel, -1, 2, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(219, LNSPEC_FloorLowerToNearest, -1, 8, 0, 0, 0, SPAC_Cross, false);

  SetLineTrans(220, LNSPEC_FloorLowerToNearest, -1, 8, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(221, LNSPEC_FloorLowerToNearest, -1, 8, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(222, LNSPEC_FloorLowerToNearest, -1, 8, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(223, LNSPEC_SectorSetFriction, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(224, LNSPEC_SectorSetWind, -1, 0, 0, 1, 0, SPAC_Cross, false);
  SetLineTrans(225, LNSPEC_SectorSetCurrent, -1, 0, 0, 1, 0, SPAC_Cross, false);
  SetLineTrans(226, LNSPEC_PointPushSetForce, -1, 0, 0, 1, 0, SPAC_Cross, false);
  SetLineTrans(227, LNSPEC_ElevatorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(228, LNSPEC_ElevatorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(229, LNSPEC_ElevatorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_Use, false);

  SetLineTrans(230, LNSPEC_ElevatorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(231, LNSPEC_ElevatorLowerToNearest, -1, 32, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(232, LNSPEC_ElevatorLowerToNearest, -1, 32, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(233, LNSPEC_ElevatorLowerToNearest, -1, 32, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(234, LNSPEC_ElevatorLowerToNearest, -1, 32, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(235, LNSPEC_ElevatorMoveToFloor, -1, 32, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(236, LNSPEC_ElevatorMoveToFloor, -1, 32, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(237, LNSPEC_ElevatorMoveToFloor, -1, 32, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(238, LNSPEC_ElevatorMoveToFloor, -1, 32, 0, 0, 0, SPAC_Use, true);
  SetLineTrans(239, LNSPEC_FloorTransferNumeric, -1, 0, 0, 0, 0, SPAC_Cross, false);

  SetLineTrans(240, LNSPEC_FloorTransferNumeric, -1, 0, 0, 0, 0, SPAC_Cross, true);
  SetLineTrans(241, LNSPEC_FloorTransferNumeric, -1, 0, 0, 0, 0, SPAC_Use, false);
  SetLineTrans(242, LNSPEC_TransferHeights, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(243, LNSPEC_TeleportLine, -1, -1, 0, 0, 0, SPAC_Cross, false, true);
  SetLineTrans(244, LNSPEC_TeleportLine, -1, -1, 0, 0, 0, SPAC_Cross, true, true);
  SetLineTrans(245, LNSPEC_ScrollCeiling, -1, 5, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(246, LNSPEC_ScrollFloor, -1, 5, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(247, LNSPEC_ScrollFloor, -1, 5, 1, 0, 0, SPAC_Cross, false);
  SetLineTrans(248, LNSPEC_ScrollFloor, -1, 5, 2, 0, 0, SPAC_Cross, false);
  SetLineTrans(249, LNSPEC_ScrollTextureModel, -1, 1, 0, 0, 0, SPAC_Cross, false);

  SetLineTrans(250, LNSPEC_ScrollCeiling, -1, 4, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(251, LNSPEC_ScrollFloor, -1, 4, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(252, LNSPEC_ScrollFloor, -1, 4, 1, 0, 0, SPAC_Cross, false);
  SetLineTrans(253, LNSPEC_ScrollFloor, -1, 4, 2, 0, 0, SPAC_Cross, false);
  SetLineTrans(254, LNSPEC_ScrollTextureModel, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(255, LNSPEC_ScrollTextureOffsets, 0, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(256, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_Cross, true);
  SetLineTrans(257, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_Cross, true);
  SetLineTrans(258, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_Use, true);
  SetLineTrans(259, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_Use, true);

  SetLineTrans(260, LNSPEC_LineTranslucent, -1, 168, 0, 0, 0, SPAC_Cross, false); // was 128, changed to better reflect BOOM default
  SetLineTrans(261, LNSPEC_TransferCeilingLight, -1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(262, LNSPEC_TeleportLine, -1, -1, 1, 0, 0, SPAC_Cross, false, true);
  SetLineTrans(263, LNSPEC_TeleportLine, -1, -1, 1, 0, 0, SPAC_Cross, true, true);
  SetLineTrans(264, LNSPEC_TeleportLine, -1, -1, 1, 0, 0, SPAC_MCross, false);
  SetLineTrans(265, LNSPEC_TeleportLine, -1, -1, 1, 0, 0, SPAC_MCross, true);
  SetLineTrans(266, LNSPEC_TeleportLine, -1, -1, 0, 0, 0, SPAC_MCross, false);
  SetLineTrans(267, LNSPEC_TeleportLine, -1, -1, 0, 0, 0, SPAC_MCross, true);
  SetLineTrans(268, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_MCross, false);
  SetLineTrans(269, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_MCross, true);

  // Doom Legacy
  // 270: fraggle script
  //TODO: transfer sky is not fully implemented yet
  SetLineTrans(271, LNSPEC_StaticInit, -1, 255, 0, 0, 0, SPAC_Cross, false); // transfer sky (MBF?)
  SetLineTrans(272, LNSPEC_StaticInit, -1, 255, 1, 0, 0, SPAC_Cross, false); // transfer sky (MBF?)
  // 273..279: fraggle script
  SetLineTrans(280, LNSPEC_TransferHeights, -1, 12, 0, 0, 0, 0/*SPAC_Cross*/, false); // clip fake planes, underwater
  // 281 is processed in 3d floor section
  SetLineTrans(282, LNSPEC_StaticInit, -1, 1, 0, 0, 0, 0/*SPAC_Cross*/, false); // light/fog color
  // no 283
  SetLineTrans(284, LNSPEC_LineTranslucent, -1, 128, 0, 0, 0, 0/*SPAC_Cross*/, false);
  SetLineTrans(285, LNSPEC_LineTranslucent, -1, 192, 0, 0, 0, 0/*SPAC_Cross*/, false);
  SetLineTrans(286, LNSPEC_LineTranslucent, -1, 48, 0, 0, 0, 0/*SPAC_Cross*/, false);
  SetLineTrans(287, LNSPEC_LineTranslucent, -1, 128, 1, 0, 0, 0/*SPAC_Cross*/, false); // additive
  SetLineTrans(288, LNSPEC_LineTranslucent, -1, 255, 0, 0, 0, 0/*SPAC_Cross*/, false);
  // 289 is processed in 3d floor section

  // Doom Legacy water (processed below)
  //SetLineTrans(301, LNSPEC_SectorSet3dFloor, -1, 255, 1, 0, 0, SPAC_Cross, false); // LNSPEC_StaticInit

  SetLineTrans(333, LNSPEC_StaticInit, -1, 0, 0, 0, 0, 0/*SPAC_Cross*/, false); // gravity
  SetLineTrans(334, LNSPEC_StaticInit, -1, 1, 0, 0, 0, 0/*SPAC_Cross*/, false); // color
  SetLineTrans(335, LNSPEC_StaticInit, -1, 2, 0, 0, 0, 0/*SPAC_Cross*/, false); // damage

  SetLineTrans(336, LNSPEC_LineMirror, -666, -666, -666, -666, -666, 0/*SPAC_Cross*/, false);
  SetLineTrans(337, LNSPEC_LineHorizon, -666, -666, -666, -666, -666, 0/*SPAC_Cross*/, false);
  SetLineTrans(338, LNSPEC_FloorWaggle, -1, 24, 32, 0, 0, SPAC_Cross, false);
  SetLineTrans(339, LNSPEC_FloorWaggle, -1, 12, 32, 0, 0, SPAC_Cross, false);

  SetLineTrans(340, LNSPEC_PlaneAlign, 1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(341, LNSPEC_PlaneAlign, 0, 1, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(342, LNSPEC_PlaneAlign, 1, 1, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(343, LNSPEC_PlaneAlign, 2, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(344, LNSPEC_PlaneAlign, 0, 2, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(345, LNSPEC_PlaneAlign, 2, 2, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(346, LNSPEC_PlaneAlign, 2, 1, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(347, LNSPEC_PlaneAlign, 1, 2, 0, 0, 0, SPAC_Cross, false);
  //348 = WALK, Autosave()
  //349 = USE, Autosave()

  // ZDoom line types
  //TODO: not fully implemented yet
  SetLineTrans(350, LNSPEC_TransferHeights, -1, 2, 0, 0, 0, 0/*SPAC_Cross*/, false); // just fake the floor
  SetLineTrans(351, LNSPEC_TransferHeights, -1, 6, 0, 0, 0, 0/*SPAC_Cross*/, false); // just fake the floor and clip it too
  //352 = 0, Sector_CopyScroller(tag, 1)  // copy ceiling scroller
  //353 = 0, Sector_CopyScroller(tag, 2)  // copy floor scroller
  //354 = 0, Sector_CopyScroller(tag, 6)  // copy carrying floor scroller

  // eternity
  SetLineTrans(386, LNSPEC_PlaneAlign, 1, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(387, LNSPEC_PlaneAlign, 0, 1, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(388, LNSPEC_PlaneAlign, 1, 1, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(389, LNSPEC_PlaneAlign, 2, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(390, LNSPEC_PlaneAlign, 0, 2, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(391, LNSPEC_PlaneAlign, 2, 2, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(392, LNSPEC_PlaneAlign, 2, 1, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(393, LNSPEC_PlaneAlign, 1, 2, 0, 0, 0, SPAC_Cross, false);

  // 3DGE
  SetLineTrans(409, LNSPEC_LineTranslucent, -1, 204, 0, 0, 0, SPAC_Cross, false); // 80%
  SetLineTrans(410, LNSPEC_LineTranslucent, -1, 153, 0, 0, 0, SPAC_Cross, false); // 60%
  SetLineTrans(411, LNSPEC_LineTranslucent, -1, 101, 0, 0, 0, SPAC_Cross, false); // 40%
  SetLineTrans(412, LNSPEC_LineTranslucent, -1, 50, 0, 0, 0, SPAC_Cross, false); // 20%

  SetLineTrans(422, LNSPEC_ScrollTextureRight, 64, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(423, LNSPEC_ScrollTextureUp, 64, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(424, LNSPEC_ScrollTextureDown, 64, 0, 0, 0, 0, SPAC_Cross, false);
  SetLineTrans(425, LNSPEC_ScrollTextureBoth, 0, 64, 0, 0, 64, SPAC_Cross, false);
  SetLineTrans(426, LNSPEC_ScrollTextureBoth, 0, 64, 0, 64, 0, SPAC_Cross, false);
  SetLineTrans(427, LNSPEC_ScrollTextureBoth, 0, 0, 64, 0, 64, SPAC_Cross, false);
  SetLineTrans(428, LNSPEC_ScrollTextureBoth, 0, 0, 64, 64, 0, SPAC_Cross, false);

  // k8: i'm not sure if SPAC flags are right here
  SetLineTrans(434, LNSPEC_FloorRaiseByValue, -1, 8, 2, 0, 0, SPAC_Use, false);
  SetLineTrans(435, LNSPEC_FloorRaiseByValue, -1, 8, 2, 0, 0, SPAC_Use, true); // repeated
  SetLineTrans(436, LNSPEC_FloorRaiseByValue, -1, 8, 2, 0, 0, SPAC_Cross, false);
  SetLineTrans(437, LNSPEC_FloorRaiseByValue, -1, 8, 2, 0, 0, SPAC_Cross, true); // repeated
  SetLineTrans(438, LNSPEC_FloorRaiseByValue, -1, 8, 2, 0, 0, SPAC_Impact, false);
  SetLineTrans(439, LNSPEC_FloorRaiseByValue, -1, 8, 2, 0, 0, SPAC_Impact, true); // repeated


  // 3d floors
  // https://zdoom.org/wiki/Sector_Set3dFloor
  Set3DFloorTrans(281, 1, 0, 255);
  Set3DFloorTrans(289, 1, 1, 255);
  //
  Set3DFloorTrans(300, 1, 1, 127);
  Set3DFloorTrans(301, 2, 2, 127);
  Set3DFloorTrans(302, 3, 6, 127); // not properly implemented yet
  Set3DFloorTrans(303, 3, -666, -666);
  Set3DFloorTrans(304, 2, 2, 255);
  Set3DFloorTrans(305, 3, 2, -666);
  Set3DFloorTrans(306, 1, -666, -666);
  Set3DFloorTrans(332, 4, -666, -666);
  // 3DGE
  Set3DFloorTrans(400, 1, 0, 255);
  Set3DFloorTrans(401, 1, 16, 255);
  Set3DFloorTrans(402, 1, 32, 255);
  Set3DFloorTrans(403, 2, 2, 255);
  Set3DFloorTrans(404, 2, 2, 204);
  Set3DFloorTrans(405, 2, 2, 153);
  Set3DFloorTrans(406, 2, 2, 102);
  Set3DFloorTrans(407, 2, 2, 51);
  Set3DFloorTrans(408, 2, 2, -666);
  Set3DFloorTrans(413, 1, 8, 255);
  Set3DFloorTrans(414, 1, 8, 204);
  Set3DFloorTrans(415, 1, 8, 153);
  Set3DFloorTrans(416, 1, 8, 102);
  Set3DFloorTrans(417, 1, 8, 51);
}


//==========================================================================
//
//  Set3DFloorTrans
//
//==========================================================================
void Set3DFloorTrans (int oldspecial, int arg2, int arg3, int arg4) {
  spec_trans_t trs;
  trs.special = LNSPEC_SectorSet3dFloor;
  trs.arg2 = arg2;
  trs.arg3 = arg3;
  trs.arg4 = arg4;
  trans_3d_floors.put(oldspecial, trs);
}


//==========================================================================
//
//  SetLineTrans
//
//==========================================================================
void SetLineTrans (int i, int special, int arg1, int arg2, int arg3,
  int arg4, int arg5, int spac, int repeat, optional int monst,
  optional int not_destroy)
{
  spec_trans_t trs;
  trs.special = special;
  trs.arg1 = arg1;
  trs.arg2 = arg2;
  trs.arg3 = arg3;
  trs.arg4 = arg4;
  trs.arg5 = arg5;
  trs.spac = spac;
  trs.repeat = repeat;
  trs.monst = monst;
  trs.not_destroy = not_destroy;
  spec_trans_tab.put(i, trs);
}


//==========================================================================
//
//  TranslateLine
//
//  front sector is not set yet
//
//==========================================================================
void TranslateLine (Level InLevel, line_t *line) {
  int OldSpec = line->special;
  int OldTag = line->arg1;
  int OldFlags = line->flags;

  if (OldSpec < 0) {
    printwarn("TranslateLine: special=%d; tag=%d; flags=%x", OldSpec, OldTag, OldFlags);
    OldSpec = 0;
    OldTag = 0;
    line->special = 0;
    line->arg1 = 0;
  }

  // clear unknown flags
  line->flags &= 0x01ff;

  // for BOOM compatibility all lines needs to have it's ID same as tag
  if (OldTag) line->lineTag = OldTag;

  if (!line->special) return;

  // handle Boom's generalised types
  if (OldSpec > 0x2F80) {
    // activation flags
    switch (OldSpec&0x0006) {
      case 0:
        line->SpacFlags = SPAC_Cross;
        break;
      case 2:
      case 6:
        if (OldFlags&0x0200) {
          line->SpacFlags = SPAC_UseThrough;
        } else {
          line->SpacFlags = SPAC_Use;
        }
        break;
      case 4:
        line->SpacFlags = SPAC_Impact;
        break;
    }
    if (OldSpec&1) line->flags |= ML_REPEAT_SPECIAL;

    // we treat push triggers like switch triggers with zero tags
    if ((OldSpec&0x0006) == 6) {
      line->arg1 = 0;
    } else {
      line->arg1 = OldTag;
    }

    if (OldSpec < 0x3000) {
      // generalised crusher (tag, dnspeed, upspeed, silent, damage)
      line->special = LNSPEC_CeilingGenericCrush;
      if (OldSpec&0x0020) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 8; break;
        case 0x0008: line->arg2 = 16; break;
        case 0x0010: line->arg2 = 32; break;
        case 0x0018: line->arg2 = 64; break;
      }
      line->arg3 = line->arg2;
      line->arg4 = (OldSpec&0x0040)>>6;
      line->arg5 = 10;
    } else if (OldSpec < 0x3400) {
      // generalised stairs (tag, speed, step, dir/igntxt, reset)
      line->special = LNSPEC_StairsGeneric;
      if (OldSpec&0x0020) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 2; break;
        case 0x0008: line->arg2 = 4; break;
        case 0x0010: line->arg2 = 16; break;
        case 0x0018: line->arg2 = 32; break;
      }
      switch (OldSpec&0x00c0) {
        case 0x0000: line->arg3 = 4; break;
        case 0x0040: line->arg3 = 8; break;
        case 0x0080: line->arg3 = 16; break;
        case 0x00c0: line->arg3 = 24; break;
      }
      line->arg4 = (OldSpec&0x0300)>>8;
      line->arg5 = 0;
    } else if (OldSpec < 0x3800) {
      // generalised lift (tag, speed, delay, target, height)
      line->special = LNSPEC_PlatGeneric;
      if (OldSpec&0x0020) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 16; break;
        case 0x0008: line->arg2 = 32; break;
        case 0x0010: line->arg2 = 64; break;
        case 0x0018: line->arg2 = 128; break;
      }
      switch (OldSpec&0x00c0) {
        case 0x0000: line->arg3 = 8; break;
        case 0x0040: line->arg3 = 24; break;
        case 0x0080: line->arg3 = 40; break;
        case 0x00c0: line->arg3 = 80; break;
      }
      line->arg4 = ((OldSpec&0x0300)>>8)+1;
      line->arg5 = 0;
    } else if (OldSpec < 0x3c00) {
      // generalised locked door (tag, speed, kind, delay, lock)
      line->special = LNSPEC_DoorGeneric;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 16; break;
        case 0x0008: line->arg2 = 32; break;
        case 0x0010: line->arg2 = 64; break;
        case 0x0018: line->arg2 = 128; break;
      }
      line->arg3 = (OldSpec&0x0020)>>5;
      line->arg4 = 0;
      line->arg5 = (OldSpec&0x01c0)>>6;
           if (line->arg5 == 0) line->arg5 = 100;
      else if (line->arg5 == 7) line->arg5 = 101;
      line->arg5 |= (OldSpec&0x0200)>>2;
    } else if (OldSpec < 0x4000) {
      // generalised door (tag, speed, kind, delay, lock)
      line->special = LNSPEC_DoorGeneric;
      if (OldSpec&0x0080) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 16; break;
        case 0x0008: line->arg2 = 32; break;
        case 0x0010: line->arg2 = 64; break;
        case 0x0018: line->arg2 = 128; break;
      }
      line->arg3 = (OldSpec&0x0060)>>5;
      if ((OldSpec&0x0006) == 6) {
        line->arg1 = OldTag;
        line->arg3 |= 128;
      }
      switch (OldSpec&0x0300) {
        case 0x0000: line->arg4 = 8; break;
        case 0x0100: line->arg4 = 32; break;
        case 0x0200: line->arg4 = 72; break;
        case 0x0300: line->arg4 = 240; break;
      }
      line->arg5 = 0;
    } else {
      // generalised ceiling (tag, speed, height, target, change/model/direct/crush)
      // generalised floor (tag, speed, height, target, change/model/direct/crush)
      if (OldSpec < 0x6000) {
        line->special = LNSPEC_CeilingGeneric;
      } else {
        line->special = LNSPEC_FloorGeneric;
      }
      if ((OldSpec&0x0c20) == 0x0020) line->flags |= ML_MONSTERSCANACTIVATE;
      switch (OldSpec&0x0018) {
        case 0x0000: line->arg2 = 8; break;
        case 0x0008: line->arg2 = 16; break;
        case 0x0010: line->arg2 = 32; break;
        case 0x0018: line->arg2 = 64; break;
      }
      line->arg4 = ((OldSpec&0x0380)>>7)+1;
      if (line->arg4 >= 7) {
        line->arg3 = 24+(line->arg4-7)*8;
        line->arg4 = 0;
      } else {
        line->arg3 = 0;
      }
      line->arg5 = ((OldSpec&0x0c00)>>10)|((OldSpec&0x0060)>>3)|((OldSpec&0x1000)>>8);
    }
    if ((line->flags&ML_MONSTERSCANACTIVATE) && line->SpacFlags == SPAC_Cross) {
      // in Boom, anything can activate such a line so set the proper type here
      line->SpacFlags = SPAC_AnyCross;
    }
    return;
  }

  {
    auto trs = trans_3d_floors.find(OldSpec);
    if (trs) {
      line->special = trs.special;
      if (trs.arg2 != -666) line->arg2 = trs.arg2;
      if (trs.arg3 != -666) line->arg3 = trs.arg3;
      if (trs.arg4 != -666) line->arg4 = trs.arg4;
      return;
    }
  }

  switch (OldSpec) {
    //EDGE plane-copy
    case 394: // Slope_FrontFloorToTaggedSlope
      line->special = LNSPEC_PlaneCopy;
      //line->arg1 = line->tag;
      line->arg2 = 0;
      line->arg3 = 0;
      line->arg4 = 0;
      line->arg5 = 0;
      //line->tag = 0;
      return;
    case 395: // Slope_FrontCeilingToTaggedSlope
      line->special = LNSPEC_PlaneCopy;
      //line->arg2 = line->tag;
      line->arg2 = line->arg1;
      line->arg1 = 0;
      line->arg3 = 0;
      line->arg4 = 0;
      line->arg5 = 0;
      //line->tag = 0;
      return;
    case 396: // Slope_FrontFloorAndCeilingToTaggedSlope
      line->special = LNSPEC_PlaneCopy;
      //line->arg1 = line->tag;
      //line->arg2 = line->tag;
      line->arg2 = line->arg2;
      line->arg3 = 0;
      line->arg4 = 0;
      line->arg5 = 0;
      //line->tag = 0;
      return;
  }

  auto trsp = spec_trans_tab.find(OldSpec);
  if (!trsp) {
    line->special = 0;
    line->arg1 = 0;
    printwarn("TRANSLATION: linedef #%s, special %d -- NOT FOUND!", line-&InLevel.Lines[0], OldSpec);
    if (GetCvarB('trans_debug_log')) {
      print("=================================================");
      print("***TRANS: linedef #%s, special %d -- NOT FOUND!", line-&InLevel.Lines[0], OldSpec);
      print("%s items in translation table", spec_trans_tab.length);
      for (auto idx = spec_trans_tab.firstIndex(); spec_trans_tab.isValidIndex(idx); idx = spec_trans_tab.nextIndex(idx)) {
        auto key = spec_trans_tab.keyAtIndex(idx); // pointer to key
        auto val = spec_trans_tab.valueAtIndex(idx); // pointer to value
        print("  idx=%s; key=%s; value.special=%s", idx, key, val.special);
      }
    }
    return;
  }

  // special
  line->special = trsp.special;
  // args
  line->arg1 = (trsp.arg1 == -1 ? OldTag : (trsp.arg1 == -666 ? line->arg1 : trsp.arg1));
  line->arg2 = (trsp.arg2 == -1 ? OldTag : (trsp.arg2 == -666 ? line->arg2 : trsp.arg2));
  line->arg3 = (trsp.arg3 == -1 ? OldTag : (trsp.arg3 == -666 ? line->arg3 : trsp.arg3));
  line->arg4 = (trsp.arg4 == -1 ? OldTag : (trsp.arg4 == -666 ? line->arg4 : trsp.arg4));
  line->arg5 = (trsp.arg5 == -1 ? OldTag : (trsp.arg5 == -666 ? line->arg5 : trsp.arg5));

  // activation flags
  if ((OldFlags&0x0200) != 0 && trsp.spac == SPAC_Use) {
    line->SpacFlags = SPAC_UseThrough;
  } else {
    line->SpacFlags = trsp.spac;
  }
  if (trsp.repeat) line->flags |= ML_REPEAT_SPECIAL;
  if (trsp.monst) line->flags |= ML_MONSTERSCANACTIVATE;
  if ((line->flags&ML_SECRET) && (line->SpacFlags&(SPAC_Use|SPAC_UseThrough)) != 0) line->flags &= ~ML_MONSTERSCANACTIVATE;
  // check to see if we want thinkers destroyed or not
  if (trsp.not_destroy) line->flags |= ML_KEEPDATA;
}


//==========================================================================
//
//  TranslateSector
//
//==========================================================================
void TranslateSector (sector_t *sector) {
  int special;
  int high;

  special = sector->special;
  if (!special) return;
  if (special == 9) {
    sector->special = SECSPEC_SECRET_MASK;
    return;
  }

  // this supports phased lighting with specials 21-24 and wind specials 40-51
  high = (special&0xfe0)<<3;
  special &= 0x01f;
       if (special < 21) sector->special = high|(special+64);
  else if (special < 40) sector->special = high|(special-20);
  else sector->special = high|special;
}


//==========================================================================
//
//  TranslateThing
//
//==========================================================================
void TranslateThing (mthing_t *mthing) {
  // translate the spawn flags to Hexen format
  int flags = mthing->options;
  if (flags&0x100) flags &= 0x1f;

  mthing->options = (flags&0xf)|0x7e0;
  if (flags&0x10) mthing->options &= ~LineSpecialLevelInfo::MTF_GSINGLE;
  if (flags&0x80) mthing->options |= LineSpecialLevelInfo::MTF_FRIENDLY; // MBF friendly monsters
}


//==========================================================================
//
//  TranslateLevel
//
//==========================================================================
override void TranslateLevel (Level InLevel) {
  foreach (auto i; 0..InLevel.Lines.length) TranslateLine(InLevel, &InLevel.Lines[i]);
  foreach (auto i; 0..InLevel.Sectors.length) TranslateSector(&InLevel.Sectors[i]);
  foreach (auto i; 0..InLevel.Things.length) TranslateThing(&InLevel.Things[i]);
}


defaultproperties {
  LevelInfoClass = DoomLevelInfo;
  /*
  if (GetCvarI('_game_override')) {
    GameFilterFlag = GetCvarI('_game_override');
  } else {
    GameFilterFlag = EntityEx::GAME_Doom;
  }
  */
  GameFilterFlag = EntityEx::GAME_Doom;
  bDefaultLaxMonsterActivation = true;
  bNoClipIgnoreFloor = true;
  bAlwaysSwitchNewWeapon = true;
  DefaultKickBack = 150.0;
  bBloodRandomiseTime = true;
  GibsHealthFactor = 1.0;

  botskill = 2;

  INITIAL_HEALTH = 100;
  GOD_HEALTH = 100;

  PlayerClasses.Num = 1;
  PlayerClasses[0] = DoomPlayer;

  WeaponSlots[1].Weapons[0] = Fist;
  WeaponSlots[1].Weapons[1] = Chainsaw;
  WeaponSlots[2].Weapons[0] = Pistol;
  WeaponSlots[3].Weapons[0] = Shotgun;
  WeaponSlots[3].Weapons[1] = SuperShotgun;
  WeaponSlots[4].Weapons[0] = Chaingun;
  WeaponSlots[5].Weapons[0] = RocketLauncher;
  WeaponSlots[6].Weapons[0] = PlasmaRifle;
  WeaponSlots[7].Weapons[0] = BFG9000;
}
