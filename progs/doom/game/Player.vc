//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Player : PlayerEx;

BotPlayer Bot;


//==========================================================================
//
//  CreateBot
//
//==========================================================================
override void CreateBot () {
  Bot = BotPlayer(SpawnObject(BotPlayer, skipReplacement:false));
  Bot.player = self;
  Bot.OnBeginPlay();
  bAutoAim = false;
}


//==========================================================================
//
//  DestroyBot
//
//==========================================================================
override void DestroyBot () {
  if (Bot != none) {
    Bot.Destroy();
    Bot = none;
  }
}


//==========================================================================
//
//  BotSendSubSectorChange
//
//==========================================================================
override void BotSendSubSectorChange (subsector_t *ss) {
  if (!ss) return;
  if (Bot) {
    //print("saying bot to process subsector #%d", ss-&MO.XLevel.Subsectors[0]);
    Bot.CheckAndDropNodeAt(ss);
  }
}


//==========================================================================
//
//  BotDumpNodes
//
//==========================================================================
override void BotDumpNodes () {
  if (!Bot) return;
  Bot.DumpNodes();
}


//==========================================================================
//
//  BotTestFindPathTo
//
//==========================================================================
override void BotTestFindPathTo (TVec dest) {
  if (!Bot) return;
  Bot.TestFindPathTo(dest);
}


//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================
override void UserinfoChanged () {
  if (!bSpawned) return;
  SetClientModel();
}


//==========================================================================
//
//  SetClientModel
//
//==========================================================================
override void SetClientModel () {
  // k8: not yet
  MO.bFixedModel = false;
  return;
  /*
  string model = Info_ValueForKey(UserInfo, "model");

  if (!model) {
    MO.bFixedModel = false;
    return;
  }

  MO.bFixedModel = true;
  MO.FixedModelName = va("players/%s/player.xml", model);
  */
}


//==========================================================================
//
//  BotOnSpawn
//
//==========================================================================
override void BotOnSpawn () {
  Bot.OnSpawn();
}


//==========================================================================
//
//  DoClearPlayer
//
//==========================================================================
override void DoClearPlayer () {
  BotPlayer b = Bot;
  ::DoClearPlayer();
  Bot = b;
}


//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================
override int GetRebornHealth () {
  return MainGameInfo(Level.Game).INITIAL_HEALTH;
}


//==========================================================================
//
//  GotAmmo
//
//==========================================================================
override void GotAmmo (Ammo NewAmmo) {
  // we were down to zero, so select a new weapon
  // preferences are not user selectable
  if (!ReadyWeapon || ReadyWeapon.bWimpyWeapon) {
    Weapon Best = BestWeapon(class!Ammo(NewAmmo.Class));
    if (Best && (!ReadyWeapon || Best.SelectionOrder < ReadyWeapon.SelectionOrder)) {
      PendingWeapon = Best;
    }
  }
}


//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================
override void PlayerImpulse () {
  ::PlayerImpulse();
}


//==========================================================================
//
//  BotTick
//
//==========================================================================
override void BotTick (float deltaTime) {
  Bot.BotTick(deltaTime);
}


//==========================================================================
//
//  Cheat_Gimme_AC
//
//==========================================================================
void Cheat_Gimme_AC (const ref array!string args, bool newArg, out array!string aclist) {
  //print("!!!!!!!!! <%s> : <%s> %s", args[0], args[$-1], newArg);
  if (args.length == 1) {
    if (!newArg) return;
  } else if (args.length == 2) {
    if (newArg) return;
  } else {
    return;
  }
  //string pfx = (newArg ? "" : args[$-1]);

  aclist[$] = "All";
  aclist[$] = "AllMap";
  aclist[$] = "Ammo";
  aclist[$] = "Armor";
  aclist[$] = "Armor2";
  aclist[$] = "Arsenal";
  aclist[$] = "Backpack";
  aclist[$] = "Bersek";
  aclist[$] = "Choppers";
  aclist[$] = "ElvenGifts";
  aclist[$] = "Health";
  aclist[$] = "Health2";
  aclist[$] = "Invisibility";
  aclist[$] = "Invulnerability";
  aclist[$] = "Keys";
  aclist[$] = "LiteAmp";
  aclist[$] = "NoKeys";
  aclist[$] = "Powers";
  aclist[$] = "Suit";
  aclist[$] = "Weapons";
}


//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================
const int
  GIMME_INVULNERABILITY = 0x00040000,
  GIMME_STRENGTH        = 0x00080000,
  GIMME_INVISIBILITY    = 0x00100000,
  GIMME_IRONFEET        = 0x00200000,
  GIMME_ALLMAP          = 0x00400000,
  GIMME_INFRARED        = 0x00800000,
  GIMME_HEALTH          = 0x01000000,
  GIMME_HEALTH2         = 0x02000000,
  GIMME_ARMOR           = 0x04000000,
  GIMME_ARMOR2          = 0x08000000,

  //GIMME_KEYS            = 0x0003f000,
  GIMME_POWERS          = 0x00fc0000,
  GIMME_ALL             = 0xffffffff;

void Cheat_Gimme () {
  int gimmeFlags = 0;
  class!Inventory Cls;

  if (Cmd_CheckParm("ElvenGifts")) {
    GiveElvenGifts(forced:true);
    //return;
  }

  if (MO && Cmd_CheckParm("NoKeys")) {
    RemoveKeysVerbose();
  }

  // all
  if (Cmd_CheckParm("All")) gimmeFlags |= GIMME_ALL;

  // powers
  if (Cmd_CheckParm("Powers")) gimmeFlags |= GIMME_POWERS;
  if (Cmd_CheckParm("Invulnerability") || Cmd_CheckParm("Invul")) gimmeFlags |= GIMME_INVULNERABILITY;
  if (Cmd_CheckParm("Bersek")) gimmeFlags |= GIMME_STRENGTH;
  if (Cmd_CheckParm("Invisibility") || Cmd_CheckParm("Invis")) gimmeFlags |= GIMME_INVISIBILITY;
  if (Cmd_CheckParm("Suit")) gimmeFlags |= GIMME_IRONFEET;
  if (Cmd_CheckParm("AllMap")) gimmeFlags |= GIMME_ALLMAP;
  if (Cmd_CheckParm("LiteAmp") || Cmd_CheckParm("LightAmp")) gimmeFlags |= GIMME_INFRARED;

  // health
  if (Cmd_CheckParm("Health")) gimmeFlags |= GIMME_HEALTH;
  if (Cmd_CheckParm("Health2")) gimmeFlags |= GIMME_HEALTH2;

  // armor
  if (Cmd_CheckParm("Armor")) gimmeFlags |= GIMME_ARMOR;
  if (Cmd_CheckParm("Armor2")) gimmeFlags |= GIMME_ARMOR2;

  // weapons
  if (Cmd_CheckParm("Weapons") || Cmd_CheckParm("All") || Cmd_CheckParm("Arsenal")) {
    /*
    LineSpecialGameInfo GI = LineSpecialGameInfo(Level.Game);
    foreach (auto sidx; 0..LineSpecialGameInfo::NUM_WEAPON_SLOTS+1) {
      foreach (auto widx; 0..LineSpecialGameInfo::MAX_WEAPONS_PER_SLOT) {
        if (GI.WeaponSlots[sidx].Weapons[widx]) print("slot #%d, weapon #%d: '%C'", sidx, widx, GI.WeaponSlots[sidx].Weapons[widx]);
      }
    }
    */
    bool gotit = false;
    class!Weapon WpnCls;
    foreach AllClasses(Weapon, WpnCls) {
      if (WpnCls.default.bCheatNotWeapon) continue;
      class!Weapon repl = class!Weapon(GetClassReplacement(WpnCls));
      if (repl && repl != WpnCls) continue;
      auto st = FindClassState(WpnCls, 'Ready');
      if (!st) continue; // an abstract base class
      if (!AreStateSpritesPresent(st)) continue; // no sprites
      // if weapon cannot be spawned, you cannot get it
      st = FindClassState(WpnCls, 'Spawn');
      if (!st) continue; // an abstract base class
      if (!AreStateSpritesPresent(st)) continue; // no sprites
      // check if already have it
      if (EntityEx(MO).FindInventory(WpnCls, disableReplacement:true)) continue;
      //Weapon Wpn = Weapon(Level.Spawn(WpnCls, default, default, default, AllowReplace:false));
      Weapon Wpn = EntityEx.SpawnWeaponType(Level, WpnCls, disableReplace:true);
      Wpn.AmmoGive1 = 0;
      Wpn.AmmoGive2 = 0;
      if (!Wpn.TryPickup(EntityEx(MO))) {
        Wpn.Destroy();
      } else {
        print("CHEAT: got '%C'!", WpnCls);
        gotit = true;
      }
    }
    if (gotit) cprint("You got weapons!");
  }

  // choppers
  if (Cmd_CheckParm("Choppers")) {
    class!Weapon WpnCls;
    foreach AllClasses(Weapon, WpnCls) {
      if (WpnCls.default.bCheatNotWeapon) continue;
      class!Weapon repl = class!Weapon(GetClassReplacement(WpnCls));
      if (repl && repl != WpnCls) continue;
      auto st = FindClassState(WpnCls, 'Ready');
      if (!st) continue; // an abstract base class
      if (!AreStateSpritesPresent(st)) continue; // no sprites
      //print("WPN: <%C>", WpnCls);
      bool csfound = false;
      for (class wcc = WpnCls; wcc; wcc = GetClassParent(wcc)) if (GetClassName(wcc) == 'Chainsaw') { csfound = true; break; }
      //if (!csfound) for (class wcc = WpnCls; wcc; wcc = GetClassReplacee(wcc)) if (GetClassName(wcc) == 'Chainsaw') { csfound = true; break; }
      if (!csfound) continue;
      //print("WPN IS CHAINSAW!");
      //Weapon Wpn = Weapon(Level.Spawn(WpnCls, default, default, default/*, false*/));
      Weapon Wpn = EntityEx.SpawnWeaponType(Level, WpnCls, disableReplace:true);
      if (Wpn) {
        Wpn.AmmoGive1 = 0;
        Wpn.AmmoGive2 = 0;
        if (!Wpn.TryPickup(EntityEx(MO))) {
          Wpn.Destroy();
        } else {
          print("CHEAT: got '%C'!", WpnCls);
          ChangeWeapon(1);
          cprint("You got Chainsaw!");
          break;
        }
      }
    }
  }

  // backpack
  if (Cmd_CheckParm("Backpack") || Cmd_CheckParm("All")) {
    BackpackItem Pack = Level.Spawn(Backpack, default, default, default/*, false*/);
    Pack.bDropped = true;
    if (!Pack.TryPickup(EntityEx(MO))) {
      Pack.Destroy();
    } else {
      cprint("You got Backpack!");
    }
  }

  // Ammo
  if (Cmd_CheckParm("Ammo") || Cmd_CheckParm("All") || Cmd_CheckParm("Arsenal")) {
    bool gotit = false;
    foreach AllClasses(Ammo, Cls) {
      // Only direct descendants.
      if (GetClassParent(Cls) != Ammo) continue;
      Ammo AmmoItem = EntityEx.SpawnAmmoType(Level, class!Ammo(Cls));
      if (!AmmoItem) continue;
      Inventory invAmmo = EntityEx(MO).FindInventory(Cls);
      if (invAmmo && Ammo(invAmmo)) {
        delete AmmoItem;
        AmmoItem = Ammo(invAmmo);
        assert(AmmoItem);
      } else {
        assert(Ammo(AmmoItem));
        if (!AmmoItem.TryPickup(EntityEx(MO))) {
          AmmoItem.Destroy();
          AmmoItem = none;
        } else {
          gotit = true;
        }
      }
      /*
      Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
      if (!AmmoItem) {
        AmmoItem = Level.Spawn(Cls, default, default, default, AllowReplace:false);
        if (!AmmoItem.TryPickup(EntityEx(MO))) {
          AmmoItem.Destroy();
          AmmoItem = none;
        } else {
          gotit = true;
        }
      }
      */
      if (Ammo(AmmoItem)) { AmmoItem.Amount = Ammo(AmmoItem)./*MaxAmount*/k8GetAmmoKingMax(); gotit = true; }
    }
    if (gotit) cprint("You got ammo!");
  }

  // Keys
  if (Cmd_CheckParm("Keys") || Cmd_CheckParm("All")) {
    bool gotit = false;
    foreach AllClasses(Key, Cls) {
      class!Key repl = class!Key(GetClassReplacement(Cls));
      if (repl && repl != Cls) continue;
      auto st = FindClassState(Cls, 'Spawn');
      if (!st) continue; // an abstract base class
      if (!AreStateSpritesPresent(st)) continue; // no sprites
      EntityEx(MO).GiveInventoryType(Cls, disableReplace:true);
      gotit = true;
    }
    cprint("You got keys!");
  }

  // powers
  if (gimmeFlags&GIMME_INVULNERABILITY) { EntityEx(MO).GiveInventoryType(InvulnerabilitySphere); cprint("You got Invulnerability!"); }
  if (gimmeFlags&GIMME_STRENGTH) { EntityEx(MO).GiveInventoryType(PowerStrength); cprint("You got Strength!"); }
  if (gimmeFlags&GIMME_INVISIBILITY) { EntityEx(MO).GiveInventoryType(PowerInvisibility); cprint("You got Invisibility!"); }
  if (gimmeFlags&GIMME_IRONFEET) { EntityEx(MO).GiveInventoryType(PowerIronFeet); cprint("You got EnviroSuit!"); }
  if (gimmeFlags&GIMME_INFRARED) { EntityEx(MO).GiveInventoryType(PowerLightAmp); cprint("You got Light Amplifier!"); }

  // items
  if (gimmeFlags&GIMME_ALLMAP) { EntityEx(MO).GiveInventoryType(Allmap); cprint("You got Computer Map!"); }

  // health
  if ((gimmeFlags&GIMME_HEALTH) && Health < 100) {
    Health = 100;
    MO.Health = 100;
  }
  if (gimmeFlags&GIMME_HEALTH2) {
    Health = 200;
    MO.Health = 200;
  }

  if (gimmeFlags&(GIMME_HEALTH|GIMME_HEALTH2)) cprint("You got health!");

  // armor
  if (gimmeFlags&GIMME_ARMOR) { EntityEx(MO).GiveInventoryType(GreenArmor); cprint("You got Green Armor!"); }
  if (gimmeFlags&GIMME_ARMOR2) { EntityEx(MO).GiveInventoryType(BlueArmor); cprint("You got Blue Armor!"); }

  //cprint("YOU GOT IT");
}


//==========================================================================
//
//  KilledActor
//
//==========================================================================
override void KilledActor (EntityEx Victim) {
  // check for frag changes
  if (Victim.bIsPlayer) {
    if (bIsBot) Bot.Killed(Victim);
    if (Victim.Player.bIsBot) Player(Victim.Player).Bot.Died(EntityEx(MO));
    if (MO == Victim) --Frags; else ++Frags;
  }
}


defaultproperties {
}
