//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

BotPlayer Bot;

//==========================================================================
//
//  CreateBot
//
//==========================================================================

override void CreateBot()
{
  Bot = BotPlayer(SpawnObject(BotPlayer));
  Bot.player = self;
  Bot.OnBeginPlay();
  bAutoAim = true;
}

//==========================================================================
//
//  DestroyBot
//
//==========================================================================

override void DestroyBot()
{
  if (Bot != none)
  {
    Bot.Destroy();
    Bot = none;
  }
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

override void UserinfoChanged()
{
  if (!bSpawned)
  {
    return;
  }
  SetClientModel();
}

//==========================================================================
//
//  SetClientModel
//
//==========================================================================

override void SetClientModel()
{
  string model;

  model = Info_ValueForKey(UserInfo, "model");
  if (!model)
  {
    MO.bFixedModel = false;
    return;
  }

  MO.bFixedModel = true;
  MO.FixedModelName = va("players/%s/player.xml", model);
}

//==========================================================================
//
//  BotOnSpawn
//
//==========================================================================

override void BotOnSpawn()
{
  Bot.OnSpawn();
}

//==========================================================================
//
//  DoClearPlayer
//
//==========================================================================

override void DoClearPlayer()
{
  BotPlayer b;

  b = Bot;
  ::DoClearPlayer();
  Bot = b;
}

//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================

override int GetRebornHealth()
{
  return MainGameInfo(Level.Game).INITIAL_HEALTH;
}

//==========================================================================
//
//  GotAmmo
//
//==========================================================================

override void GotAmmo(Ammo NewAmmo)
{
  // We were down to zero,
  // so select a new weapon.
  // Preferences are not user selectable.
  if (!ReadyWeapon || ReadyWeapon.bWimpyWeapon)
  {
    Weapon Best = BestWeapon(class!Ammo(NewAmmo.Class));
    if (Best && (!ReadyWeapon ||
      Best.SelectionOrder < ReadyWeapon.SelectionOrder))
    {
      PendingWeapon = Best;
    }
  }
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

override void PlayerImpulse()
{
  int impulse;

  impulse = Impulse;
  Impulse = 0;

  if (impulse <= LineSpecialGameInfo::NUM_WEAPON_SLOTS)
  {
    ChangeWeapon(impulse);
  }
  else if (impulse == 13)
  {
    InventoryLeft();
  }
  else if (impulse == 14)
  {
    InventoryRight();
  }
  else if (impulse == 15)
  {
    InventoryUse();
  }
  else if (impulse == 16)
  {
    //  Suicide
    Actor(MO).Damage(none, none, 10000);
  }
  else if (impulse == 17)
  {
    PrevWeapon();
  }
  else if (impulse == 18)
  {
    NextWeapon();
  }
  else if (impulse == 43)
  {
    Actor(MO).FireSuperBullet();
  }
  else if (impulse == 56)
  {
    bReloadQueued = true;
  }
  else if (impulse >= 200 && impulse <= 205)
  {
    LineSpecialLevelInfo(Level).ConChoiceImpulse(impulse - 200);
  }
}

//==========================================================================
//
//  BotTick
//
//==========================================================================

override void BotTick(float deltaTime)
{
  Bot.BotTick(deltaTime);
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

const int
  GIMME_INVULNERABILITY = 0x00040000,
  GIMME_STRENGTH        = 0x00080000,
  GIMME_INVISIBILITY    = 0x00100000,
  GIMME_IRONFEET        = 0x00200000,
  GIMME_ALLMAP          = 0x00400000,
  GIMME_INFRARED        = 0x00800000,
  GIMME_HEALTH          = 0x01000000,
  GIMME_HEALTH2         = 0x02000000,
  GIMME_ARMOR           = 0x04000000,
  GIMME_ARMOR2          = 0x08000000,

  //GIMME_KEYS            = 0x0003f000,
  GIMME_POWERS          = 0x00fc0000,
  GIMME_ALL             = 0xffffffff;

override void Cheat_Gimme () {
  int i1 = 0;
  class!Inventory Cls;

  // all
  if (Cmd_CheckParm("All")) i1 |= GIMME_ALL;

  // powers
  if (Cmd_CheckParm("Powers")) i1 |= GIMME_POWERS;
  if (Cmd_CheckParm("Invulnerability") || Cmd_CheckParm("Invul")) i1 |= GIMME_INVULNERABILITY;
  if (Cmd_CheckParm("Bersek")) i1 |= GIMME_STRENGTH;
  if (Cmd_CheckParm("Invisibility") || Cmd_CheckParm("Invis")) i1 |= GIMME_INVISIBILITY;
  if (Cmd_CheckParm("Suit")) i1 |= GIMME_IRONFEET;
  if (Cmd_CheckParm("AllMap")) i1 |= GIMME_ALLMAP;
  if (Cmd_CheckParm("LiteAmp") || Cmd_CheckParm("LightAmp")) i1 |= GIMME_INFRARED;

  // health
  if (Cmd_CheckParm("Health")) i1 |= GIMME_HEALTH;
  if (Cmd_CheckParm("Health2")) i1 |= GIMME_HEALTH2;

  // armor
  if (Cmd_CheckParm("Armor")) i1 |= GIMME_ARMOR;
  if (Cmd_CheckParm("Armor2")) i1 |= GIMME_ARMOR2;

  // weapons
  if (Cmd_CheckParm("Weapons") || Cmd_CheckParm("All") || Cmd_CheckParm("Arsenal")) {
    /*
    LineSpecialGameInfo GI = LineSpecialGameInfo(Level.Game);
    foreach (auto sidx; 0..LineSpecialGameInfo::NUM_WEAPON_SLOTS+1) {
      foreach (auto widx; 0..LineSpecialGameInfo::MAX_WEAPONS_PER_SLOT) {
        if (GI.WeaponSlots[sidx].Weapons[widx]) print("slot #%d, weapon #%d: '%C'", sidx, widx, GI.WeaponSlots[sidx].Weapons[widx]);
      }
    }
    */
    bool gotit = false;
    class!Weapon WpnCls;
    foreach AllClasses(Weapon, WpnCls) {
      if (WpnCls.default.bCheatNotWeapon) continue;
      class!Weapon repl = class!Weapon(GetClassReplacement(WpnCls));
      if (repl && repl != WpnCls) continue;
      auto st = FindClassState(WpnCls, 'Ready');
      if (!st) continue; // an abstract base class
      if (!AreStateSpritesPresent(st)) continue; // no sprites
      Weapon Wpn = Weapon(Level.Spawn(WpnCls, default, default, default, false));
      Wpn.AmmoGive1 = 0;
      Wpn.AmmoGive2 = 0;
      if (!Wpn.TryPickup(EntityEx(MO))) {
        Wpn.Destroy();
      } else {
        print("CHEAT: got '%C'!", WpnCls);
        gotit = true;
      }
    }
    if (gotit) cprint("You got weapons!");
  }

  // choppers
  if (Cmd_CheckParm("Choppers")) {
    class!Weapon WpnCls;
    foreach AllClasses(Weapon, WpnCls) {
      if (WpnCls.default.bCheatNotWeapon) continue;
      class!Weapon repl = class!Weapon(GetClassReplacement(WpnCls));
      if (repl && repl != WpnCls) continue;
      auto st = FindClassState(WpnCls, 'Ready');
      if (!st) continue; // an abstract base class
      if (!AreStateSpritesPresent(st)) continue; // no sprites
      //print("WPN: <%C>", WpnCls);
      bool csfound = false;
      for (class wcc = WpnCls; wcc; wcc = GetClassParent(wcc)) if (GetClassName(wcc) == 'Chainsaw') { csfound = true; break; }
      //if (!csfound) for (class wcc = WpnCls; wcc; wcc = GetClassReplacee(wcc)) if (GetClassName(wcc) == 'Chainsaw') { csfound = true; break; }
      if (!csfound) continue;
      //print("WPN IS CHAINSAW!");
      Weapon Wpn = Weapon(Level.Spawn(WpnCls, default, default, default, false));
      Wpn.AmmoGive1 = 0;
      Wpn.AmmoGive2 = 0;
      if (!Wpn.TryPickup(EntityEx(MO))) {
        Wpn.Destroy();
      } else {
        print("CHEAT: got '%C'!", WpnCls);
        ChangeWeapon(1);
        cprint("You got Chainsaw!");
        break;
      }
    }
  }

  // backpack
  if (Cmd_CheckParm("Backpack") || Cmd_CheckParm("All")) {
    BackpackItem Pack = Level.Spawn(Backpack, default, default, default, false);
    Pack.bDropped = true;
    if (!Pack.TryPickup(EntityEx(MO))) {
      Pack.Destroy();
    } else {
      cprint("You got Backpack!");
    }
  }

  // Ammo
  if (Cmd_CheckParm("Ammo") || Cmd_CheckParm("All") || Cmd_CheckParm("Arsenal")) {
    bool gotit = false;
    foreach AllClasses(Ammo, Cls) {
      // Only direct descendants.
      if (GetClassParent(Cls) != Ammo) continue;
      Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
      if (!AmmoItem) {
        AmmoItem = Level.Spawn(Cls, default, default, default, false);
        if (!AmmoItem.TryPickup(EntityEx(MO))) {
          AmmoItem.Destroy();
          AmmoItem = none;
        } else {
          gotit = true;
        }
      }
      if (AmmoItem) { AmmoItem.Amount = AmmoItem.MaxAmount; gotit = true; }
    }
    if (gotit) cprint("You got ammo!");
  }

  // Keys
  if (Cmd_CheckParm("Keys") || Cmd_CheckParm("All")) {
    bool gotit = false;
    foreach AllClasses(Key, Cls) {
      class!Key repl = class!Key(GetClassReplacement(Cls));
      if (repl && repl != Cls) continue;
      auto st = FindClassState(Cls, 'Spawn');
      if (!st) continue; // an abstract base class
      if (!AreStateSpritesPresent(st)) continue; // no sprites
      EntityEx(MO).GiveInventoryType(Cls);
      gotit = true;
    }
    cprint("You got keys!");
  }

  // powers
  if (i1&GIMME_INVULNERABILITY) { EntityEx(MO).GiveInventoryType(InvulnerabilitySphere); cprint("You got Invulnerability!"); }
  if (i1&GIMME_STRENGTH) { EntityEx(MO).GiveInventoryType(PowerStrength); cprint("You got Strength!"); }
  if (i1&GIMME_INVISIBILITY) { EntityEx(MO).GiveInventoryType(PowerInvisibility); cprint("You got Invisibility!"); }
  if (i1&GIMME_IRONFEET) { EntityEx(MO).GiveInventoryType(PowerIronFeet); cprint("You got EnviroSuit!"); }
  if (i1&GIMME_INFRARED) { EntityEx(MO).GiveInventoryType(PowerLightAmp); cprint("You got Light Amplifier!"); }

  // items
  if (i1&GIMME_ALLMAP) { EntityEx(MO).GiveInventoryType(Allmap); cprint("You got Computer Map!"); }

  // health
  if ((i1&GIMME_HEALTH) && Health < 100) {
    Health = 100;
    MO.Health = 100;
  }
  if (i1&GIMME_HEALTH2) {
    Health = 200;
    MO.Health = 200;
  }

  if (i1&(GIMME_HEALTH|GIMME_HEALTH2)) cprint("You got health!");

  // armor
  if (i1&GIMME_ARMOR) { EntityEx(MO).GiveInventoryType(GreenArmor); cprint("You got Green Armor!"); }
  if (i1&GIMME_ARMOR2) { EntityEx(MO).GiveInventoryType(BlueArmor); cprint("You got Blue Armor!"); }

  //cprint("YOU GOT IT");
}


//==========================================================================
//
//  KilledActor
//
//==========================================================================

override void KilledActor(EntityEx Victim)
{
  // Check for frag changes
  if (Victim.bIsPlayer)
  {
    if (bIsBot)
    {
      Bot.Killed(Victim);
    }

    if (Victim.Player.bIsBot)
    {
      Player(Victim.Player).Bot.Died(EntityEx(MO));
    }

    if (MO == Victim)
    {
      Frags--;
    }
    else
    {
      Frags++;
    }
  }
}

defaultproperties
{
}
