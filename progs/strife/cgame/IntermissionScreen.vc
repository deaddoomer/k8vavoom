//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class IntermissionScreen : Widget;

enum
{
  IMS_Stats,
  IMS_Text,
  IMS_Done
};

ClientGameBase ClGame;

float TextSpeed;
float TextWait;

// specifies current state
int interstate;
float intertime;

float HubCount;
string HubText;
name TextFlat;
int TextPic;

//==========================================================================
//
//  Start
//
//==========================================================================

void Start()
{
  StopAllSounds();
  if (!ClGame.deathmatch && !ClGame.cl.Level.bNoIntermission)
  {
    print("Intermission stats are not yet implemented");
  }
  if (!ClGame.deathmatch)
  {
    IM_InitHubText();
  }
  else
  {
    CmdBuf_AddText("TeleportNewMap\n");
  }
}

//==========================================================================
//
//  Tick
//
//==========================================================================

override void Tick(float DeltaTime)
{
  intertime += DeltaTime;
  if (ClGame.skipintermission || intertime > HubCount)
  {
    CmdBuf_AddText("TeleportNewMap\n");
    interstate = IMS_Done;
    ClGame.skipintermission = false;
  }
}

//==========================================================================
//
//  OnDraw
//
//==========================================================================

override void OnDraw()
{
  if (interstate == IMS_Done)
  {
    return;
  }

  switch (interstate)
  {
  case IMS_Text:
    IM_DrawHubText();
  }
}

//========================================================================
//
//  IM_InitHubText
//
//  Initialises the stats for single player mode
//
//========================================================================

void IM_InitHubText()
{
  if (!ClGame.im.Text)
  {
    CmdBuf_AddText("TeleportNewMap\n");
    interstate = IMS_Done;
    return;
  }

  if (ClGame.im.bTextIsLump)
  {
    HubText = LoadTextLump(name(ClGame.im.Text));
  }
  else
  {
    HubText = ClGame.im.Text;
  }
  HubCount = itof(strlenutf8(HubText)) * TextSpeed + TextWait;

  TextFlat = '';
  TextPic = 0;
  if (ClGame.im.TextPic)
  {
    TextPic = R_RegisterPic(ClGame.im.TextPic);
  }
  else if (ClGame.im.TextFlat)
  {
    TextFlat = ClGame.im.TextFlat;
  }

  if (ClGame.im.TextMusic)
  {
    CmdBuf_AddText(va("music loop %n\n", ClGame.im.TextMusic));
  }
  else
  {
    CmdBuf_AddText("music loop d_intro\n");
  }
  interstate = IMS_Text;
}

//===========================================================================
//
//  IM_DrawHubText
//
//===========================================================================

void IM_DrawHubText()
{
  if (TextPic)
  {
    DrawFullScreenPic(TextPic);
  }
  else if (TextFlat)
  {
    FillRectWithFlat(0, 0, 640, 480, TextFlat);
  }
  else
  {
    R_FillRect(0, 0, 640, 480, 0);
  }
  int count = ftoi((intertime - 0.3) / TextSpeed);
  count = clamp(count, 0, strlenutf8(HubText));
  SetFont('smallfont');
  SetTextAlign(hleft, vtop);
  DrawText(170, 145, substrutf8(HubText, 0, count));
}

//==========================================================================
//
//  OnVisibilityChanged
//
//==========================================================================

override void OnVisibilityChanged(bool bNewVisibility)
{
  bTickEnabled = bNewVisibility;
}

defaultproperties
{
  bTickEnabled = true;
  Focusable = true;
  Width = 320;
  Height = 200;
}
