//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenNewNetGame : MenuScreen;

MenuChoiceEnum    Players;
MenuChoiceEnum    Monsters;
MenuChoiceEnum    DeathMatch;
MenuChoiceEnum    Skill;
MenuChoiceEnum    TimeLimit;
MenuChoiceEnum    Level;

//==========================================================================
//
//  CreateChoices
//
//==========================================================================

override void CreateChoices()
{
  MenuTextButton    Btn;
  int         i;
  int currY = ChoicesStartY;

  Btn = MenuTextButton(NewChild(MenuSmallTextButton));
  Btn.SetOrigin(ChoicesStartX, currY);
  Btn.Text = "Start Game";
  Btn.Activated = &ActivateStartNewGame;
  currY += Btn.Height;

  Players = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Players.SetOrigin(ChoicesStartX, currY);
  Players.Text = "Max players";
  Players.AddItem("2");
  Players.AddItem("3");
  Players.AddItem("4");
  Players.AddItem("5");
  Players.AddItem("6");
  Players.AddItem("7");
  Players.AddItem("8");
  Players.SetInitialValue(2);
  currY += Players.Height;

  Monsters = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
  Monsters.SetOrigin(ChoicesStartX, currY);
  Monsters.Text = "Monsters";
  currY += Monsters.Height;

  DeathMatch = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  DeathMatch.SetOrigin(ChoicesStartX, currY);
  DeathMatch.Text = "Game type";
  DeathMatch.AddItem("Cooperative");
  DeathMatch.AddItem("Deathmatch");
  DeathMatch.AddItem("Deathmatch2");
  DeathMatch.AddItem("Deathmatch3");
  DeathMatch.SetInitialValue(2);
  currY += DeathMatch.Height;

  Skill = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Skill.SetOrigin(ChoicesStartX, currY);
  Skill.Text = "Skill";
  for (i = 0; i < P_GetNumSkills(); i++)
  {
    Skill.AddItem(P_GetSkillDef(i)->Name);
  }
  Skill.SetInitialValue(2);
  currY += Skill.Height;

  TimeLimit = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  TimeLimit.SetOrigin(ChoicesStartX, currY);
  TimeLimit.Text = "Time limit";
  TimeLimit.AddItem("0");
  TimeLimit.AddItem("5");
  TimeLimit.AddItem("10");
  TimeLimit.AddItem("15");
  TimeLimit.AddItem("20");
  TimeLimit.AddItem("25");
  TimeLimit.AddItem("30");
  TimeLimit.AddItem("35");
  TimeLimit.AddItem("40");
  TimeLimit.AddItem("45");
  TimeLimit.AddItem("50");
  TimeLimit.AddItem("55");
  TimeLimit.AddItem("60");
  currY += TimeLimit.Height;

  Level = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Level.SetOrigin(ChoicesStartX, currY);
  Level.Text = "Level";
  currY += Level.Height;

  InitMapList();
}

//==========================================================================
//
//  InitMapList
//
//==========================================================================

void InitMapList()
{
#ifdef FIXME
  foreach (auto i; 1..100) {
    int map = P_TranslateMap(i);
    if (map != -1) Level.AddItem(P_GetMapName(map));
  }
  Level.MaxValue = count;
#else
  foreach (auto i; 0..32) Level.AddItem(P_GetMapName(i));
#endif
  Level.Value = 0;
}

//==========================================================================
//
//  ActivateStartNewGame
//
//==========================================================================

void ActivateStartNewGame(Object Sender)
{
  CmdBuf_AddText("Disconnect\n");
  CmdBuf_AddText("MaxPlayers %d\n", Players.Value + 2);
  CmdBuf_AddText("NoMonsters %d\n", !Monsters.Value);
  CmdBuf_AddText("DeathMatch %d\n", DeathMatch.Value);
  CmdBuf_AddText("TimeLimit %d\n", TimeLimit.Value * 5);
  CmdBuf_AddText("Skill %d\n", Skill.Value);
  if (Level.Value + 1 < 10)
    CmdBuf_AddText("Map MAP0%d\n", Level.Value + 1);
  else
    CmdBuf_AddText("Map MAP%d\n", Level.Value + 1);
}

defaultproperties
{
  ChoicesStartX = 128;
  ChoicesStartY = 40;
  SelectorType = MenuSelector_SmallRight;
  Title = "NEW GAME";
}
