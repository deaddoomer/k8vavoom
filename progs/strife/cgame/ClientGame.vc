//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ClientGame : ClientGameShared;

TitleScreen     GTitle;
IntermissionScreen  GImission;
FinaleScreen    GFinale;

int pic_brdr_t;
int pic_brdr_b;
int pic_brdr_l;
int pic_brdr_r;
int pic_brdr_tl;
int pic_brdr_tr;
int pic_brdr_bl;
int pic_brdr_br;

//==========================================================================
//
//  RootWindowCreated
//
//==========================================================================

override void RootWindowCreated()
{
  CreateCvar('sb_show_weapons', "0", "Show Strife Weapons", 0);
  CreateCvar('sb_show_keys', "0", "Show Strife Keys", 0);
  CreateCvar('sb_show_objectives', "0", "Show Strife Objectives", 0);

  GTitle = TitleScreen(GRoot.NewChild(TitleScreen));
  GSBar = StatusBarScreen(GRoot.NewChild(StatusBarScreen));
  GImission = IntermissionScreen(GRoot.NewChild(IntermissionScreen));
  GFinale = FinaleScreen(GRoot.NewChild(FinaleScreen));
  GTitle.ClGame = self;
  GSBar.ClGame = self;
  GSBar.Hide();
  GImission.ClGame = self;
  GImission.Hide();
  GFinale.ClGame = self;
  GFinale.Hide();
}

//==========================================================================
//
//  Connected
//
//==========================================================================

override void Connected()
{
  GTitle.Hide();
  GTitle.StopDemoLoop();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  Disconnected
//
//==========================================================================

override void Disconnected()
{
  GTitle.Show();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  DemoPlaybackStarted
//
//==========================================================================

override void DemoPlaybackStarted()
{
  GTitle.Hide();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  DemoPlaybackStopped
//
//==========================================================================

override void DemoPlaybackStopped()
{
  GTitle.Show();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  OnHostEndGame
//
//==========================================================================

override void OnHostEndGame()
{
  GTitle.OnHostEndGame();
}

//==========================================================================
//
//  OnHostError
//
//==========================================================================

override void OnHostError()
{
  GTitle.OnHostError();
}

//==========================================================================
//
//  StatusBarStartMap
//
//==========================================================================

override void StatusBarStartMap()
{
  StatusBarScreen(GSBar).cl = Player(cl);
  GSBar.Show();
  GSBar.StartMap();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  StatusBarDrawer
//
//==========================================================================

override void StatusBarDrawer(int sb_view)
{
  GSBar.SB_Drawer(sb_view);
}

//==========================================================================
//
//  StatusBarUpdateWidgets
//
//==========================================================================

override void StatusBarUpdateWidgets(float DeltaTime)
{
  GSBar.SB_UpdateWidgets();
}

//==========================================================================
//
//  IintermissionStart
//
//==========================================================================

override void IintermissionStart()
{
  GSBar.Hide();
  GImission.Show();
  GImission.Start();
  GFinale.Hide();
}

//==========================================================================
//
//  StartFinale
//
//==========================================================================

override void StartFinale(name FinaleType)
{
  GSBar.Hide();
  GImission.Hide();
  GFinale.Show();
  GFinale.StartFinale(FinaleType);
}

//===========================================================================
//
//  FinaleResponder
//
//===========================================================================

override bool FinaleResponder(event_t *event)
{
  return false;
}

//==========================================================================
//
//  DeactivateMenu
//
//==========================================================================

override void DeactivateMenu()
{
  ForceMenuOff();
}

//==========================================================================
//
//  MenuResponder
//
//==========================================================================

override bool MenuResponder(event_t * event)
{
  if (!CurrentMenuScreen)
  {
    // Pop-up menu?
    if (event->type == ev_keydown && event->data1 == K_ESCAPE)
    {
      PushMenuScreen(SpawnMenu(MenuScreenMain));
      return true;
    }
  }
  return false;
}

//==========================================================================
//
//  MenuActive
//
//==========================================================================

override bool MenuActive()
{
  return CurrentMenuScreen != none;
}

//==========================================================================
//
//  SetMenu
//
//==========================================================================

override void SetMenu(string Name)
{
  if (!stricmp(Name, "Main"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenMain));
    return;
  }
  if (!stricmp(Name, "Save"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenSaveGame));
    return;
  }
  if (!stricmp(Name, "Load"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenLoadGame));
    return;
  }
  if (!stricmp(Name, "PSetup"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenPlayerSetup));
    return;
  }
  if (!stricmp(Name, "Options") || !stricmp(Name, "OptionsMenu"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenOptions));
    return;
  }
  if (!stricmp(Name, "Controls"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenControls));
    return;
  }
  /*
  if (!stricmp(Name, "Controls2"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenControls2));
    return;
  }
  */
  if (!stricmp(Name, "Mouse"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenMouseOptions));
    return;
  }
  if (!stricmp(Name, "Resolution"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenScreenResolution));
    return;
  }
  if (!stricmp(Name, "Video"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenVideoOptions));
    return;
  }
  if (!stricmp(Name, "Sound"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenSoundOptions));
    return;
  }
  if (!stricmp(Name, "Help"))
  {
    PushMenuScreen(SpawnMenu(MenuScreenHelp));
    return;
  }
  if (!stricmp(Name, "Quit"))
  {
    menu_quit();
    return;
  }
  PushMenuScreen(SpawnMenu(MenuScreenMain));
}

//==========================================================================
//
//  menu_quit
//
//==========================================================================

override void menu_quit()
{
  if (!GetCvarB('menu_quit_prompt')) { CmdBuf_AddText("Quit\n"); return; }
  MessageBoxStartMessage("Do you really want to leave?\n\n(press y to quit)",
    MB_Quit, true);
}

//==========================================================================
//
//  QuitResponse
//
//==========================================================================

override void QuitResponse(int ch)
{
  if (ch != K_y)
    return;
  PushMenuScreen(SpawnMenu(MenuScreenQuit));
}

//==========================================================================
//
//  InitBorder
//
//==========================================================================

void InitBorder()
{
  pic_brdr_t = R_RegisterPic('brdr_t');
  pic_brdr_b = R_RegisterPic('brdr_b');
  pic_brdr_l = R_RegisterPic('brdr_l');
  pic_brdr_r = R_RegisterPic('brdr_r');
  pic_brdr_tl = R_RegisterPic('brdr_tl');
  pic_brdr_tr = R_RegisterPic('brdr_tr');
  pic_brdr_bl = R_RegisterPic('brdr_bl');
  pic_brdr_br = R_RegisterPic('brdr_br');
}

//==========================================================================
//
//  DrawBorder
//
//  Draws border
//
//==========================================================================

override void DrawBorder(int x, int y, int w, int h)
{
  int i;

  if (!pic_brdr_b)
  {
    InitBorder();
  }

  for (i = 0; i < w; i += 8)
    GRoot.DrawPic(x + i, y - 8, pic_brdr_t);

  for (i = 0; i < w; i += 8)
    GRoot.DrawPic(x + i, y + h, pic_brdr_b);

  for (i = 0; i < h; i += 8)
    GRoot.DrawPic(x - 8, y + i, pic_brdr_l);

  for (i = 0; i < h; i += 8)
    GRoot.DrawPic(x + w, y + i, pic_brdr_r);

  // Draw beveled edge.
  GRoot.DrawPic(x - 8, y - 8, pic_brdr_tl);
  GRoot.DrawPic(x + w, y - 8, pic_brdr_tr);
  GRoot.DrawPic(x - 8, y + h, pic_brdr_bl);
  GRoot.DrawPic(x + w, y + h, pic_brdr_br);
}

//==========================================================================
//
//  DrawViewBorder
//
//==========================================================================

override void DrawViewBorder(int x, int y, int w, int h)
{
  GRoot.FillRectWithFlat(0, 0, 640, 480/* - 32*/, 'f_pave01');
  DrawBorder(x, y, w, h);
}

//==========================================================================
//
//  StartSpeech
//
//==========================================================================

override void StartSpeech(EntityEx Speaker, int SpeechNum)
{
  ConDialog Dlg;

  Dlg = ConDialog(SpawnMenu(ConDialog));
  Dlg.SetSpeech(Speaker, SpeechNum);
  PushMenuScreen(Dlg);
}

//==========================================================================
//
//  StartConSlideshow1
//
//==========================================================================

override void StartConSlideshow1()
{
  PushMenuScreen(SpawnMenu(ConSlideshow1));
}

//==========================================================================
//
//  StartConSlideshow2
//
//==========================================================================

override void StartConSlideshow2()
{
  PushMenuScreen(SpawnMenu(ConSlideshow2));
}

//==========================================================================
//
//  SetFinaleType
//
//==========================================================================

override void SetFinaleType(int FinaleType)
{
  GFinale.StrifeFinaleType = FinaleType;
}

defaultproperties
{
  sb_height = 32;
  MsgBoxFlat = 'f_pave01';
  BigSelectorXOffset = -32;
  BigSelectorYOffset = -5;
  BigSelectorAnimSpeed = 6;
  BigSelectorAnimFrames[0] = 'm_curs1';
  BigSelectorAnimFrames[1] = 'm_curs2';
  BigSelectorAnimFrames[2] = 'm_curs3';
  BigSelectorAnimFrames[3] = 'm_curs4';
  BigSelectorAnimFrames[4] = 'm_curs5';
  BigSelectorAnimFrames[5] = 'm_curs6';
  BigSelectorAnimFrames[6] = 'm_curs7';
  BigSelectorAnimFrames[7] = 'm_curs8';
  DefaultFinaleMusic = 'd_intro';
  DefaultFinaleType = 'EndGameStrife';
}
