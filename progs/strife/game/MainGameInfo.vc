//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MainGameInfo : LineSpecialGameInfo;


//==========================================================================
//
//  Init
//
//==========================================================================
override void Init () {
  ::Init();
}


//==========================================================================
//
//  InitNewGame
//
//==========================================================================
override void InitNewGame (int skill) {
  SetSkill(skill);
  nomonsters = GetCvar('NoMonsters');
  bRespawnItems = !!GetCvar('deathmatch');
  bWeaponsStay = netgame && GetCvar('deathmatch') < 2;
}


//==========================================================================
//
//  TranslateLine
//
//==========================================================================
override void TranslateLine (VLevel InLevel, line_t *line) {
  int OldSpec = line->special;
  int OldTag = line->arg1;
  int OldFlags = line->flags;

  line->flags &= 0x01ff;
  if (OldFlags&ML_RAILING_STRIFE) line->flags |= ML_RAILING;
  if (OldFlags&ML_BLOCK_FLOATERS_STRIFE) line->flags |= ML_BLOCK_FLOATERS;

  if (!line->special) {
    if (OldFlags&ML_TRANSLUCENT_STRIFE) {
      line->special = LNSPEC_LineTranslucent;
      line->arg2 = 170;
    }
    return;
  }

  // for BOOM compatibility all lines need to have its ID to be the same as the tag
  //if (OldTag) line->lineTag = OldTag;

  auto trsp = FindLDefSpecTransForSpecial(InLevel, OldSpec);
  PerformLDefSpecialTranslation(InLevel, OldSpec, trsp, line);

  // fix flags
  if (OldFlags&ML_TRANSLUCENT_STRIFE) {
    if (line->special == /*49*/LNSPEC_GlassBreak) {
      line->arg2 = 170;
    } else {
      print("Translucent flag not compatible with line special");
    }
  }

  /*
  if (!trsp) return;
  if (IsLDef3DFloorSpecial(trsp)) return;
  */
}


//==========================================================================
//
//  TranslateSector
//
//==========================================================================
override void TranslateSector (VLevel InLevel, sector_t *sector) {
  int special = sector->special;
  if (!special) return;

  if (special == 9) {
    sector->special = SECSPEC_SECRET_MASK;
    return;
  }

  // this supports phased lighting with specials 21-24 and wind specials 40-51
  int high = (sector->special&0xfe0)<<3;
  special &= 0x01f;
       if (special == 5 || special == 15 || special == 16 || special == 18) sector->special = high|(special+100);
  else if (special < 21) sector->special = high|(special+64);
  else if (special < 40) sector->special = high|(special-20);
  else sector->special = high|special;
}


//==========================================================================
//
//  TranslateThing
//
//==========================================================================
override void TranslateThing (VLevel InLevel, mthing_t *mthing) {
  // translate the spawn flags to Hexen format
  int flags = mthing->options;
  mthing->options = (flags&0x7)|0x7e0;
  if (flags&0x10) mthing->options &= ~StrifeLevelInfo::MTF_GSINGLE;
  if (flags&0x08) mthing->options |= LineSpecialLevelInfo::MTF_STANDSTILL;
  if (flags&0x20) mthing->options |= LineSpecialLevelInfo::MTF_AMBUSH;
  if (flags&0x40) mthing->options |= LineSpecialLevelInfo::MTF_FRIENDLY;
  if (flags&0x100) mthing->options |= LineSpecialLevelInfo::MTF_SHADOW;
  if (flags&0x200) mthing->options |= LineSpecialLevelInfo::MTF_ALTSHADOW;
}


//==========================================================================
//
//  TranslateSpecialActions
//
//==========================================================================
override void TranslateSpecialActions (VLevel InLevel, LevelInfo Level) {
  foreach (ref VMapSpecialAction sac; Level.SpecialActions) {
    if (sac.Special >= 0) continue; // no translation needed
    printerror("UMAPINFO BOSS ACTIONS AREN'T SUPPORTED FOR THIS GAME!");
  }
}


//==========================================================================
//
//  GetConScriptName
//
//==========================================================================
override name GetConScriptName (name LevelName) {
  //foreach (auto i; 1..99) if (LevelName == name(va("map%02d", i))) return name(va("script%02d", i));
  //printdebug("GetConScriptName: '%s'", LevelName);
  string s = string(LevelName);
  if (s.length != 5) return '';
  if (!s.startsWith("map")) return '';
  if (s[3] < "0" || s[3] > "9" || s[4] < "0" || s[3] > "9") return '';
  if (s[3] == "0" && s[4] == "0") return '';
  s = "script"~s[3..5];
  //printdebug("GetConScriptName: res='%s'", s);
  return name(s);
}


defaultproperties {
  LevelInfoClass = StrifeLevelInfo;
  GameFilterFlag = EntityEx::GAME_Strife;
  //AcsHelper = 'strfhelp';
  AcsHelper = ''; //k8: there is no need to load ACS helper anymore
  GenericConScript = 'script00';
  TeleportFogState = 'Strife';
  DefaultKickBack = 100.0;
  bDefaultLaxMonsterActivation = true;
  bAlwaysSwitchNewWeapon = true;
  bBloodSpray = true;
  PlayerClasses.length = 1;
  PlayerClasses[0] = StrifePlayer;

  WeaponSlots[1].Weapons[0] = PunchDagger;
  WeaponSlots[2].Weapons[0] = StrifeCrossbow2;
  WeaponSlots[2].Weapons[1] = StrifeCrossbow;
  WeaponSlots[3].Weapons[0] = AssaultGun;
  WeaponSlots[4].Weapons[0] = MiniMissileLauncher;
  WeaponSlots[5].Weapons[0] = StrifeGrenadeLauncher2;
  WeaponSlots[5].Weapons[1] = StrifeGrenadeLauncher;
  WeaponSlots[6].Weapons[0] = FlameThrower;
  WeaponSlots[7].Weapons[0] = Mauler2;
  WeaponSlots[7].Weapons[1] = Mauler;
  WeaponSlots[8].Weapons[0] = Sigil;
}
