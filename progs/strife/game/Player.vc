//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Player : PlayerEx;

const float INFRATIME = 120.0;

const int INITIAL_HEALTH = 100;
const int INITIAL_AMMO   = 50;


//==========================================================================
//
//  ResetPlayerOnSpawn
//
//==========================================================================
override void ResetPlayerOnSpawn (optional bool keepPlayerState) {
  ::ResetPlayerOnSpawn(keepPlayerState!optional);
}


//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================
override int GetRebornHealth () {
  return INITIAL_HEALTH;
}


//==========================================================================
//
//  GotAmmo
//
//==========================================================================
override void GotAmmo (Ammo NewAmmo) {
  if (!NewAmmo) return;
  // we were down to zero, so select a new weapon
  // preferences are not user selectable
  if (!ReadyWeapon || (ReadyWeapon.bWimpyWeapon && !ReadyWeapon.bNoAutoSwitch)) {
    Weapon Best = BestWeapon(class!Ammo(NewAmmo.Class));
    if (Best && Best.SelectionOrder < ReadyWeapon.SelectionOrder) {
      PendingWeapon = Best;
    }
  }
}


//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================
override void PlayerImpulse () {
  int impulse = Impulse;

  if (impulse == 11) { InventoryThrow(); Impulse = 0; return; }

  if (impulse >= 200 && impulse <= 205) {
    LineSpecialLevelInfo(Level).ConChoiceImpulse(impulse-200); // done in superhandler
    // check if the player is ending a conversation
    if (impulse == 200) {
      // give the player some time to avoid shooting if
      // ending the conversation with the mouse
      Buttons = 0;
    }
    Impulse = 0;
    return;
  }

  ::PlayerImpulse();
  Impulse = 0;
}


//==========================================================================
//
//  Cheat_Gimme_AC
//
//==========================================================================
void Cheat_Gimme_AC (const ref array!string args, bool newArg, out array!string aclist) {
  if (args.length == 1) {
    if (!newArg) return;
  } else if (args.length == 2) {
    if (newArg) return;
  } else {
    return;
  }

  aclist[$] = "Ammo";
  aclist[$] = "Arsenal";
  aclist[$] = "Backpack";
  aclist[$] = "CommUnit";
  aclist[$] = "Gold";
  aclist[$] = "Health";
  aclist[$] = "Keys";
  aclist[$] = "NoKeys";
  aclist[$] = "QuestItems";
  aclist[$] = "Sigil";
  aclist[$] = "Weapons";
}


//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================
void Cheat_Gimme () {
  if (!MO) return;

  if (Cmd_CheckParm("ElvenGifts")) {
    GiveElvenGifts(forced:true);
  }

  if (Cmd_CheckParm("NoKeys")) {
    RemoveKeysVerbose();
  }

  // backpack
  if (Cmd_CheckParm("Backpack")) {
    Inventory I = Level.SpawnEntityChecked(class!Inventory, AmmoSatchel, default, default, default, false);
    if (I) {
      I.bDropped = true;
      if (!I.TryPickup(EntityEx(MO))) I.Destroy();
    }
    cprint("EXTRA AMMO");
  }

  // weapons
  if (Cmd_CheckParm("Weapons") || Cmd_CheckParm("arsenal")) {
    CheatHelper_AllWeapons();
    cprint("ALL WEAPONS");
  }

  // ammo
  if (Cmd_CheckParm("Ammo") || Cmd_CheckParm("arsenal")) {
    CheatHelper_AllAmmo();
    cprint("FULL AMMO");
  }

  // keys
  if (Cmd_CheckParm("Keys")) {
    CheatHelper_AllKeys();
    cprint("ALL KEYS");
  }

  // health
  if (Cmd_CheckParm("Health")) {
    Health = MAXHEALTH+Stamina;
    MO.Health = MAXHEALTH+Stamina;
    cprint("FULL HEALTH");
  }

  // comm unit
  if (Cmd_CheckParm("CommUnit")) {
    EntityEx(MO).GiveInventoryType(Communicator);
    cprint("YOU GOT IT");
  }

  // sigil piece
  if (Cmd_CheckParm("Sigil")) {
    Sigil S = Level.SpawnEntityChecked(class!Sigil, Sigil, default, default, default, false);
    if (S) {
      if (!S.SpecialDropAction(none)) S.Destroy();
    }
    cprint("SIGIL PIECE");
  }

  // quest items
  if (Cmd_CheckParm("QuestItems")) {
    foreach (auto i; 0..31) {
      if (Cmd_CheckParm(va("Quest%d", i+1))) {
        EntityEx(MO).GiveInventoryType(class!Inventory(FindClass(name(va("QuestItem%d", i)))));
        cprint("YOU GOT IT");
      }
    }
  }

  // gold
  if (Cmd_CheckParm("Gold")) {
    Inventory GoldItem = EntityEx(MO).FindInventory(Coin);
    if (!GoldItem) {
      GoldItem = Level.SpawnEntityChecked(class!Inventory, Coin, default, default, default, false);
      if (GoldItem) {
        if (!GoldItem.TryPickup(EntityEx(MO))) {
          GoldItem.Destroy();
          GoldItem = none;
        }
      }
    }
    if (GoldItem) GoldItem.Amount = min(100_000, GoldItem.MaxAmount);
    cprint("GOT GOLD");
  }
}


//==========================================================================
//
//  StartDeathSlideShow
//
//==========================================================================
override void StartDeathSlideShow () {
  ClientFinaleType(1);
  Level.Completed(-1, -1, 0);
}


//==========================================================================
//
//  KilledActor
//
//==========================================================================
override void KilledActor (EntityEx Victim) {
  // check for frag changes
  if (Victim.bIsPlayer) {
    if (MO == Victim) {
      --Frags;
    } else {
      ++Frags;
    }
  }
}


//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================
override int GetSigilPieces () {
  Sigil S = Sigil(EntityEx(MO).FindInventory(Sigil));
  if (S) return S.NumPieces;
  return 0;
}


defaultproperties {
  bInventoryAlwaysOpen = true;
  InvSize = 5;
}
