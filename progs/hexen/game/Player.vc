//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Player : PlayerEx;

BotPlayer Bot;

//==========================================================================
//
//  CreateBot
//
//==========================================================================

override void CreateBot()
{
  Bot = BotPlayer(SpawnObject(BotPlayer, skipReplacement:false));
  Bot.player = self;
  Bot.OnBeginPlay();
  bAutoAim = true;
}

//==========================================================================
//
//  OnNetReborn
//
//==========================================================================

override void OnNetReborn(EntityEx OldMO)
{
  Weapon bestWeapon;
  Inventory Item;

  // Restore keys and weapons when reborn in co-op
  bestWeapon = none;
  if (OldMO)
  {
    for (Item = OldMO.Inventory; Item; )
    {
      Inventory Next = Item.Inventory;
      if (Weapon(Item))
      {
        if (!bestWeapon || bestWeapon.SelectionOrder >
          Weapon(Item).SelectionOrder)
        {
          bestWeapon = Weapon(Item);
        }
        Item.AttachToOwner(EntityEx(MO));
      }
      else if (FourthWeaponHolder(Item) || Key(Item))
      {
        Item.AttachToOwner(EntityEx(MO));
      }
      Item = Next;
    }
    OldMO.DestroyAllInventory();
  }
  GiveAmmo(Mana1, 0);
  GiveAmmo(Mana2, 0);
  EntityEx(MO).FindInventory(Mana1).Amount = 25;
  EntityEx(MO).FindInventory(Mana2).Amount = 25;
  if (bestWeapon)
  {
    // Bring up the best weapon
    PendingWeapon = bestWeapon;
  }
}

//==========================================================================
//
//  DestroyBot
//
//==========================================================================

override void DestroyBot()
{
  if (Bot != none)
  {
    Bot.Destroy();
    Bot = none;
  }
}

//==========================================================================
//
//  ResetPlayerOnSpawn
//
//==========================================================================

override void ResetPlayerOnSpawn(optional bool keepPlayerState)
{
  ::ResetPlayerOnSpawn(keepPlayerState!optional);
}

//==========================================================================
//
//  BotOnSpawn
//
//==========================================================================

override void BotOnSpawn()
{
  Bot.OnSpawn();
}

//==========================================================================
//
//  DoClearPlayer
//
//==========================================================================

override void DoClearPlayer()
{
  BotPlayer b;

  b = Bot;
  ::DoClearPlayer();
  Bot = b;
}

//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================

override int GetRebornHealth()
{
  return MAXHEALTH;
}


//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================
override void PlayerImpulse () {
  int impulse = Impulse;
  //Impulse = 0;

  // Hexen artifact hot keys
  Inventory Arti = none;

  switch (impulse) {
    case 5:
      if (!EntityEx(MO).FindInventory(PowerInvulnerable)) Arti = EntityEx(MO).FindInventory(ArtiInvulnerability);
      Impulse = 0;
      break;
    case 6: Arti = EntityEx(MO).FindInventory(ArtiPork); Impulse = 0; break;
    case 7: Arti = EntityEx(MO).FindInventory(ArtiTeleportOther); Impulse = 0; break;
    case 8: Arti = EntityEx(MO).FindInventory(ArtiTeleport); Impulse = 0; break;
    case 9: Arti = EntityEx(MO).FindInventory(ArtiBlastRadius); Impulse = 0; break;
    case 10: Arti = EntityEx(MO).FindInventory(ArtiPoisonBag); Impulse = 0; break;
    case 12: if (Health < MAXHEALTH) Arti = EntityEx(MO).FindInventory(ArtiHealth); Impulse = 0; break;
  }

  if (Arti) {
    // Use an artifact
    EntityEx(MO).UseInventory(Arti);
  } else {
    ::PlayerImpulse();
  }
  Impulse = 0;
}


//==========================================================================
//
//  BotTick
//
//==========================================================================

override void BotTick(float deltaTime)
{
  Bot.BotTick(deltaTime);
}

//==========================================================================
//
//  SpawnSpeedEffect
//
//==========================================================================

override void SpawnSpeedEffect()
{
  EntityEx speedA = HexenLevelInfo(Level).Spawn(PlayerSpeed, MO.Origin);
  if (speedA)
  {
    speedA.Angles.yaw = MO.Angles.yaw;
    speedA.CopyTranslations(MO);
    speedA.Target = Actor(MO);
    speedA.Special1 = PClass;
    if (speedA.Special1 > 2)
    {
      speedA.Special1 = 0;
    }
    int Idx;
    switch (PClass)
    {
    case HexenDefs::PCLASS_FIGHTER:
      Idx = 0;
      break;
    case HexenDefs::PCLASS_CLERIC:
      Idx = 2;
      break;
    case HexenDefs::PCLASS_MAGE:
      Idx = 4;
      break;
    case HexenDefs::PCLASS_PIG:
      Idx = 6;
      break;
    }
    speedA.SetState(GetStatePlus(speedA.IdleState, Idx, true));
    speedA.FloorClip = MO.FloorClip;
#ifdef FIXME
    if (self == GPlayers[consoleplayer])
    {
      speedA.bHidden = true;
    }
#endif
  }
}


//==========================================================================
//
//  Cheat_Gimme_AC
//
//==========================================================================
void Cheat_Gimme_AC (const ref array!string args, bool newArg, out array!string aclist) {
  if (args.length == 1) {
    if (!newArg) return;
  } else if (args.length == 2) {
    if (newArg) return;
  } else {
    return;
  }

  aclist[$] = "Ammo";
  aclist[$] = "Arsenal";
  aclist[$] = "Artifacts";
  aclist[$] = "ElvenGifts";
  aclist[$] = "Health";
  aclist[$] = "Keys";
  aclist[$] = "NoKeys";
  aclist[$] = "Puzzles";
  aclist[$] = "Weapons";
}


//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================
void Cheat_Gimme () {
  if (!MO) return;

  if (Cmd_CheckParm("ElvenGifts")) {
    GiveElvenGifts(forced:true);
  }

  if (Cmd_CheckParm("NoKeys")) {
    RemoveKeysVerbose();
  }

  if (Cmd_CheckParm("weapons") || Cmd_CheckParm("arsenal")) {
    HexenArmor HArmor = HexenArmor(EntityEx(MO).FindInventory(HexenArmor, disableReplacement:true));
    foreach (int i; 0..4) HArmor.Slots[i] = HArmor.SlotsIncrement[i];

    CheatHelper_AllWeapons();

    FourthWeaponHolder Hold = FourthWeaponHolder(EntityEx(MO).FindInventory(FourthWeaponHolder));
    if (!Hold) {
      Hold = Level.SpawnEntityChecked(class!FourthWeaponHolder, FourthWeaponHolder, default, default, default, false);
      if (Hold) Hold.AttachToOwner(EntityEx(MO));
    }
    if (Hold) Hold.PieceMask = 7;

    cprint("ALL WEAPONS");
  }

  if (Cmd_CheckParm("ammo") || Cmd_CheckParm("arsenal")) {
    CheatHelper_AllAmmo();
    cprint("ALL AMMO");
  }

  if (Cmd_CheckParm("health")) {
    if (MorphTime) {
      MO.Health = MAXMORPHHEALTH;
      Health = MO.Health;
    } else {
      MO.Health = MAXHEALTH;
      Health = MO.Health;
    }
    cprint("FULL HEALTH");
  }

  if (Cmd_CheckParm("keys")) {
    CheatHelper_AllKeys();
    cprint("ALL KEYS");
  }

  if (Cmd_CheckParm("artifacts")) {
    // all artifacts
    class!Inventory Cls;
    Inventory Inv;
    foreach AllClasses(Inventory, Cls) {
      if (!Cls.default.bInvBar || !Cls.default.MaxAmount) continue; // not an artifact
      if (!EntityEx.IsSpawnableClass(Cls)) continue; // not spawnable
      if (ClassIsChildOf(Cls, PuzzleItem)) continue; // not puzzle items
      Inv = Level.SpawnEntityChecked(class!Inventory, Cls, default, default, default, false);
      if (Inv) {
        Inv.Amount = Inv.MaxAmount;
        if (!Inv.TryPickup(EntityEx(MO))) Inv.Destroy();
      }
    }
    cprint("ALL ARTIFACTS");
  }

  if (Cmd_CheckParm("puzzles")) {
    class!Inventory Cls;
    foreach AllClasses(PuzzleItem, Cls) {
      if (!EntityEx.IsSpawnableClass(Cls)) continue; // not spawnable
      EntityEx(MO).GiveInventoryType(Cls);
    }
    cprint("ALL PUZZLE ARTIFACTS");
  }
}


//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
  if (MorphTime)
  {
    UndoPlayerMorph(false, self);
  }
  else
  {
    Actor(MO).MorphPlayer(PorkFX.default.PlayerClass, 40.0,
      PorkFX.default.MorphStyle, none, none, Actor(MO));
  }
  cprint("SQUEAL!!");
}

//==========================================================================
//
//  Cheat_Class
//
//==========================================================================

void Cheat_Class()
{
  int i;
  int pclass;
  Inventory Item;

  if (MorphTime)
  {
    // don't change class if the player is morphed
    cprint("CAN'T CHANGE CLASS WHILE MORPHED");
    return;
  }
  if (Cmd_CheckParm("fighter"))
  {
    pclass = HexenDefs::PCLASS_FIGHTER;
  }
  else if (Cmd_CheckParm("cleric"))
  {
    pclass = HexenDefs::PCLASS_CLERIC;
  }
  else if (Cmd_CheckParm("mage"))
  {
    pclass = HexenDefs::PCLASS_MAGE;
  }
  else
  {
    cprint("INVALID PLAYER CLASS");
    return;
  }
  //FIXME it doesn't work like this.
  PClass = pclass;
  HexenArmor HArmor = HexenArmor(EntityEx(MO).FindInventory(HexenArmor, disableReplacement:true));
  for (i = 0; i < 4; i++)
  {
    HArmor.Slots[i] = 0.0;
  }

  // Remove all weapons
  for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
  {
    if (Weapon(Item) || FourthWeaponHolder(Item))
    {
      Item.Destroy();
    }
  }
  BaseClass = pclass;
//  PostMorphWeapon(HexenDefs::WP_FIRST);
  Actor(MO).MorphPlayer(class!PlayerPawn(Level.Game.PlayerClasses[PClass]), 0.0,
    PorkFX.default.MorphStyle, none, none, Actor(MO));
  SetCvar('class', pclass);
  SB_Start();
}

//==========================================================================
//
//  IsWeaponAlwaysExtremeDeath
//
//==========================================================================

override bool IsWeaponAlwaysExtremeDeath()
{
  // Always extreme death from fourth weapon
  return ReadyWeapon.bExtremeDeath;
}

//==========================================================================
//
//  KilledActor
//
//==========================================================================

override void KilledActor(EntityEx Victim)
{
  // Check for frag changes
  if (Victim.bIsPlayer)
  {
    if (bIsBot)
    {
      Bot.Killed(Victim);
    }

    if (Victim.Player.bIsBot)
    {
      Player(Victim.Player).Bot.Died(EntityEx(MO));
    }

    if (Victim == MO)
    {
      // Self-frag
      Frags--;
    }
    else
    {
      Frags++;
    }
  }
}

//==========================================================================
//
//  PlayerMorphed
//
//==========================================================================

override void PlayerMorphed(EntityEx OldMO)
{
  PClass = HexenDefs::PCLASS_PIG;
}

defaultproperties
{
}
