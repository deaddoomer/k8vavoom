//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//
//  This section contains the main bot AI. The
//  main bot AI loop, B_Think, is called every tic.
//  Also included are various bot decision-making
//  procedures, such as B_CheckStuff and B_SetEnemy.
//
//**************************************************************************
#ifdef IN_VCC
# include "../../common/botai/BotPlayer_base.vc"
#else
# include "progs/botai/BotPlayer_base.vc"
#endif

// Main bot class
class BotPlayer : BotPlayerBase;


//==========================================================================
//
//  WeapPieceFromItem
//
//  Returns a weapon type from an actor
//
//==========================================================================
private int WeapPieceFromItem (Actor item) {
  if (FourthWeaponPiece(item) && ClassIsChildOf(botmo.Class, GetClassReplacement(FourthWeaponPiece(item).PieceClass))) {
    return FourthWeaponPiece(item).PieceValue;
  }
  return -1;
}


//==========================================================================
//
//  CheckWeaponItem
//
//==========================================================================
override bool CheckWeaponItem (Weapon Wpn, out bool res) {
  // If we don't have the weapon, pick it up
  if (ClassIsChildOf(botmo.Class, GetClassReplacement(HexenWeapon(Wpn).WeaponClass)) &&
      !botmo.FindInventory(class!Inventory(Wpn.Class)))
  {
    res = true;
    return true;
  }

  // If we have no more room for the mana it gives
  if (botmo.FindInventory(Wpn.AmmoType1).Amount == botmo.FindInventory(Wpn.AmmoType1).MaxAmount) {
    res = false;
    return true;
  }

  res = false;
  return true;
}


//==========================================================================
//
//  CheckAmmoItem
//
//==========================================================================
override bool CheckAmmoItem (Ammo ammo, out bool res) {
  // If we have no more room for the mana it gives
  Inventory ManaItem = botmo.FindInventory(ammo.GetParentAmmo());
  if (ManaItem && ManaItem.Amount == ManaItem.MaxAmount) {
    res = false;
    return true;
  }

  return false;
}


//==========================================================================
//
//  CheckSpecialItem
//
//==========================================================================
override bool CheckSpecialItem (Actor item, out bool res) {
  int piece = WeapPieceFromItem(item);

  if (piece != -1) {
    bNewItemIsWeapon = true;

    // If we don't have the weapon, pick it up
    FourthWeaponHolder Hold = FourthWeaponHolder(botmo.FindInventory(FourthWeaponHolder));
    if (!Hold || (Hold.PieceMask & piece) != piece) {
      res = true;
      return true;
    }

    // If we have no more room for the mana it gives
    if (botmo.FindInventory(Mana1).Amount == botmo.FindInventory(Mana1).MaxAmount &&
        botmo.FindInventory(Mana2).Amount == botmo.FindInventory(Mana2).MaxAmount)
    {
      res = false;
      return true;
    }
  }

  return false;
}


//==========================================================================
//
//  IsDangerous
//
//  Checks if a sector is dangerous.
//
//==========================================================================
override bool IsDangerous (sector_t *sec) {
  switch (sec->special) {
    case 7: // Damage_Sludge
    case 5: // Damage_LavaWimpy
    case 16:  // Damage_LavaHefty
    case 4: // Scroll_EastLavaDamage
      return true;
  }
  return ::IsDangerous(sec);
}


defaultproperties {
  // bot options
  boptCheckWimpyWeapon = false;
}
