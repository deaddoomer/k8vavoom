//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class IntermissionScreen : Widget;

enum
{
  IMS_Stats,
  IMS_Text,
  IMS_Done
};

ClientGameBase ClGame;

const float TALLY_EFFECT_TIME = 0.625;
const float TALLY_FINAL_X_DELTA = 23.0;
const float TALLY_FINAL_Y_DELTA = 13.0;
const float TALLY_START_XPOS  = 338.0;
const float TALLY_STOP_XPOS   = 250.0;
const float TALLY_START_YPOS  = 272.0;
const float TALLY_STOP_YPOS   = 223.0;
const int TALLY_TOP_X     = 245;
const int TALLY_TOP_Y     = 149;
const int TALLY_LEFT_X      = 167;
const int TALLY_LEFT_Y      = 211;
const int TALLY_TOTALS_X    = 451;

float TextSpeed;
float TextWait;
name TextFlat;
int TextPic;

// specifies current state
int interstate;
float intertime;

// background (map of levels).
int patchINTERPIC;

float HubCount;
string HubText;

// used for general timing
float cnt;

int slaughterboy;

int tallytop;
int tallylft;

bool showTotals;

//==========================================================================
//
//  Start
//
//==========================================================================

void Start()
{
  StopAllSounds();
  IM_InitStats();
  IM_LoadPics();

  if (!ClGame.deathmatch && !HubCount)
  {
    interstate = IMS_Done;
    cnt = 0.3;
  }
}

//==========================================================================
//
//  Tick
//
//==========================================================================

override void Tick(float DeltaTime)
{
  if (interstate == IMS_Done)
  {
    if (cnt > 0.0)
    {
      cnt -= DeltaTime;
      if (cnt <= 0.0)
      {
        IM_UnloadPics();
        CmdBuf_AddText("TeleportNewMap\n");
      }
    }
    return;
  }
  intertime += DeltaTime;
  if (ClGame.skipintermission || (!ClGame.deathmatch && !HubCount))
  {
    interstate = IMS_Done;
    cnt = 0.3;
    ClGame.skipintermission = false;
  }
}

//==========================================================================
//
//  OnDraw
//
//==========================================================================

override void OnDraw()
{
  if (interstate == IMS_Done)
  {
    return;
  }

  switch (interstate)
  {
  case IMS_Stats:
    IM_DrawDeathTally();
    break;

  case IMS_Text:
    IM_DrawHubText();
  }
}

//========================================================================
//
//  IM_LoadPics
//
//========================================================================

void IM_LoadPics()
{
}

//========================================================================
//
//  IM_UnloadPics
//
//========================================================================

void IM_UnloadPics()
{
}

//========================================================================
//
//  IM_InitStats
//
//  Initialises the stats for single player mode
//
//========================================================================

void IM_InitStats()
{
  int i;
  int j;
  int slaughterfrags;
  int posnum;
  int slaughtercount;
  int playercount;
  PlayerReplicationInfo RepInfo;
  PlayerReplicationInfo Other;

  ClGame.skipintermission = false;
  intertime = 0.0;
  if (!ClGame.deathmatch)
  {
    if (!ClGame.cl.Level.bNoIntermission)
    {
      print("Single player stats are not implemented");
    }
    IM_InitHubText();
  }
  else
  {
    patchINTERPIC = R_RegisterPic('interpic');
    tallytop = R_RegisterPic('tallytop');
    tallylft = R_RegisterPic('tallylft');

    interstate = IMS_Stats;
    slaughterboy = 0;
    slaughterfrags = -9999;
    posnum = 0;
    playercount = 0;
    slaughtercount = 0;
    foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
    {
      i = RepInfo.PlayerNum;
      playercount++;
      posnum++;
      if (RepInfo.Frags > slaughterfrags)
      {
        slaughterboy = 1 << i;
        slaughterfrags = RepInfo.Frags;
        slaughtercount = 1;
      }
      else if (RepInfo.Frags == slaughterfrags)
      {
        slaughterboy |= 1 << i;
        slaughtercount++;
      }
    }
    if (playercount == slaughtercount)
    { // don't do the slaughter stuff if everyone is equal
      slaughterboy = 0;
    }
    CmdBuf_AddText("music loop hub\n");
  }
}

//========================================================================
//
//  IM_InitHubText
//
//  Initialises the stats for single player mode
//
//========================================================================

void IM_InitHubText()
{
  IntermissionText *itext =
    ClGame.intermissionPhase == ClientGame::IM_Phase.Leave ? &ClGame.im.LeaveText :
    ClGame.intermissionPhase == ClientGame::IM_Phase.Enter ? &ClGame.im.EnterText :
    nullptr;

  interstate = IMS_Text;
  HubCount = 0.0;
  if (itext.Text)
  {
    if (itext.bTextIsLump)
    {
      HubText = LoadTextLump(name(itext.Text));
    }
    else
    {
      HubText = itext.Text;
    }
    HubCount = float(strlenutf8(HubText)) * TextSpeed + TextWait;

    TextFlat = '';
    TextPic = 0;
    if (itext.TextPic)
    {
      TextPic = R_RegisterPic(itext.TextPic);
    }
    else if (itext.TextFlat)
    {
      TextFlat = itext.TextFlat;
    }

    if (itext.TextMusic)
    {
      CmdBuf_AddText(va("music loop \"%q\"\n", itext.TextMusic));
    }
    else
    {
      CmdBuf_AddText("music loop hub\n");
    }
  }
}

//===========================================================================
//
//  IM_DrawHubText
//
//===========================================================================

void IM_DrawHubText()
{
  if (TextPic)
  {
    DrawFullScreenPic(TextPic);
  }
  else if (TextFlat)
  {
    FillRectWithFlatRepeat(0, 0, 640, 480, TextFlat);
  }
  else
  {
    R_FillRect(0, 0, 640, 480, 0);
  }
  int count = int((intertime - 0.3) / TextSpeed);
  count = clamp(count, 0, strlenutf8(HubText));
  SetFont('smallfont');
  SetTextAlign(hleft, vtop);
  DrawText(170, 145, substrutf8(HubText, 0, count));
}

//==========================================================================
//
//  IM_DrawNumber
//
//==========================================================================

void IM_DrawNumber(int val, int x, int y, int wrapThresh)
{
  SetFont('smallfont');
  SetTextAlign(hcentre, vtop);
  if (!(val < -9 && wrapThresh < 1000))
  {
    DrawText(x, y, va("%d",
        val >= wrapThresh ? val % wrapThresh : val));
  }
  else
  {
    DrawText(x, y, "XX");
  }
}

//==========================================================================
//
//  IM_DrawNumberBold
//
//==========================================================================

void IM_DrawNumberBold(int val, int x, int y, int wrapThresh)
{
  SetFont('smallfont');
  SetTextAlign(hcentre, vtop);
  if (!(val < -9 && wrapThresh < 1000))
  {
    DrawText(x, y, va("%d", val >= wrapThresh ? val % wrapThresh : val), CR_YELLOW);
  }
  else
  {
    DrawText(x, y, "XX", CR_YELLOW);
  }
}

//========================================================================
//
//  IM_DrawDeathTally
//
//========================================================================

void IM_DrawDeathTally()
{
  int i, j;
  float xPos, yPos;
  float xDelta, yDelta;
  float xStart, scale;
  int x, y;
  bool bold;
  PlayerReplicationInfo RepInfo;
  PlayerReplicationInfo Other;

  DrawFullScreenPic(patchINTERPIC);
  if (intertime < TALLY_EFFECT_TIME)
  {
    showTotals = false;
    scale = intertime / TALLY_EFFECT_TIME;
    xDelta = scale * TALLY_FINAL_X_DELTA;
    yDelta = scale * TALLY_FINAL_Y_DELTA;
    xStart = TALLY_START_XPOS -
      scale * (TALLY_START_XPOS - TALLY_STOP_XPOS);
    yPos = TALLY_START_YPOS -
      scale * (TALLY_START_YPOS - TALLY_STOP_YPOS);
  }
  else
  {
    xDelta = TALLY_FINAL_X_DELTA;
    yDelta = TALLY_FINAL_Y_DELTA;
    xStart = TALLY_STOP_XPOS;
    yPos = TALLY_STOP_YPOS;
  }
  if (intertime >= TALLY_EFFECT_TIME && showTotals == false)
  {
    showTotals = true;
    LocalSound('PlatformStop');
  }
  y = int(yPos);
  foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
  {
    i = RepInfo.PlayerNum;
    xPos = xStart;
    SetFont('smallfont');
    SetTextAlign(hleft, vtop);
    DrawText(int(xPos), y, RepInfo.PlayerName,
      i == ClGame.cl.ClientNum ? CR_YELLOW : CR_WHITE);
    if (showTotals && !((slaughterboy & (1 << i)) &&
      !(int(32.0 * intertime) & 16)))
    {
      if (i == ClGame.cl.ClientNum)
      {
        IM_DrawNumberBold(RepInfo.Frags, TALLY_TOTALS_X, y, 1000);
      }
      else
      {
        IM_DrawNumber(RepInfo.Frags, TALLY_TOTALS_X, y, 1000);
      }
    }
    yPos += yDelta;
    y = int(yPos);
  }
}

//==========================================================================
//
//  OnVisibilityChanged
//
//==========================================================================

override void OnVisibilityChanged(bool bNewVisibility)
{
  bTickEnabled = bNewVisibility;
}

defaultproperties
{
  bTickEnabled = true;
  Focusable = true;
  Width = 640;
  Height = 480;
  TextSpeed = 0.1;
  TextWait = 4.0;
}
