//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ClientGame : ClientGameShared;

TitleScreen     GTitle;
IntermissionScreen  GImission;
FinaleScreen    GFinale;

int pic_bordt;
int pic_bordb;
int pic_bordl;
int pic_bordr;
int pic_bordtl;
int pic_bordtr;
int pic_bordbl;
int pic_bordbr;

//==========================================================================
//
//  RootWindowCreated
//
//==========================================================================

override void RootWindowCreated()
{
  GTitle = TitleScreen(GRoot.NewChild(TitleScreen));
  GSBar = StatusBarScreen(GRoot.NewChild(StatusBarScreen));
  GImission = IntermissionScreen(GRoot.NewChild(IntermissionScreen));
  GFinale = FinaleScreen(GRoot.NewChild(FinaleScreen));
  GTitle.ClGame = self;
  GSBar.SetClGame(self);
  GSBar.Hide();
  GImission.ClGame = self;
  GImission.Hide();
  GFinale.ClGame = self;
  GFinale.Hide();
}

//==========================================================================
//
//  Connected
//
//==========================================================================

override void Connected()
{
  GTitle.Hide();
  GTitle.StopDemoLoop();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  Disconnected
//
//==========================================================================

override void Disconnected()
{
  GTitle.Show();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  DemoPlaybackStarted
//
//==========================================================================

override void DemoPlaybackStarted()
{
  GTitle.Hide();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  DemoPlaybackStopped
//
//==========================================================================

override void DemoPlaybackStopped()
{
  GTitle.Show();
  GSBar.Hide();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  OnHostEndGame
//
//==========================================================================

override void OnHostEndGame()
{
  GTitle.OnHostEndGame();
}

//==========================================================================
//
//  OnHostError
//
//==========================================================================

override void OnHostError()
{
  GTitle.OnHostError();
}

//==========================================================================
//
//  StatusBarStartMap
//
//==========================================================================

override void StatusBarStartMap()
{
  StatusBarScreen(GSBar).cl = PlayerEx(cl);
  GSBar.Show();
  GSBar.StartMap();
  GImission.Hide();
  GFinale.Hide();
}

//==========================================================================
//
//  StatusBarDrawer
//
//==========================================================================

override void StatusBarDrawer(int sb_view)
{
  GSBar.SB_Drawer(sb_view);
  GSBar.SB_DrawNetworkStats();
}

//==========================================================================
//
//  StatusBarUpdateWidgets
//
//==========================================================================

override void StatusBarUpdateWidgets(float DeltaTime)
{
  GSBar.SB_UpdateWidgets();
}

//==========================================================================
//
//  IntermissionStart
//
//==========================================================================

override void IntermissionStart()
{
  GSBar.Hide();
  GImission.Show();
  GImission.Start();
  GFinale.Hide();
}

//==========================================================================
//
//  StartFinale
//
//==========================================================================

override void StartFinale(name FinaleType)
{
  GSBar.Hide();
  GImission.Hide();
  GFinale.Show();
  GFinale.StartFinale(FinaleType);
}

//===========================================================================
//
//  FinaleResponder
//
//===========================================================================

override bool FinaleResponder(event_t *event)
{
  return false;
}


//==========================================================================
//
//  GetQuitPromptText
//
//==========================================================================
override string GetQuitPromptText () {
  return "ARE YOU SURE YOU WANT TO QUIT?";
}


//==========================================================================
//
//  InitBorder
//
//==========================================================================

void InitBorder()
{
  pic_bordt = R_RegisterPic('bordt');
  pic_bordb = R_RegisterPic('bordb');
  pic_bordl = R_RegisterPic('bordl');
  pic_bordr = R_RegisterPic('bordr');
  pic_bordtl = R_RegisterPic('bordtl');
  pic_bordtr = R_RegisterPic('bordtr');
  pic_bordbl = R_RegisterPic('bordbl');
  pic_bordbr = R_RegisterPic('bordbr');
}

//==========================================================================
//
//  DrawBorder
//
//  Draws border
//
//==========================================================================

override void DrawBorder(int x, int y, int w, int h, optional int ybotofs)
{
  int i;

  //FIXME: should be scaled according to ratio!
  if (w <= 8 || h <= 16) return;
  //h -= 16;

  if (!pic_bordb)
  {
    InitBorder();
  }

  for (i = 0; i < w; i += 16) GRoot.DrawPic(x + i, y - 4, pic_bordt);
  for (i = 0; i < w; i += 16) GRoot.DrawPic(x + i, y + h+ybotofs, pic_bordb);
  for (i = 0; i < h; i += 16) GRoot.DrawPic(x - 4, y + i, pic_bordl);
  for (i = 0; i < h; i += 16) GRoot.DrawPic(x + w, y + i, pic_bordr);

  // Draw beveled edge.
  GRoot.DrawPic(x - 4, y - 4, pic_bordtl);
  GRoot.DrawPic(x + w, y - 4, pic_bordtr);
  GRoot.DrawPic(x - 4, y + h+ybotofs, pic_bordbl);
  GRoot.DrawPic(x + w, y + h+ybotofs, pic_bordbr);
}

//==========================================================================
//
//  DrawViewBorder
//
//==========================================================================

override void DrawViewBorder(int x, int y, int w, int h)
{
  GRoot.FillRectWithFlatRepeat(0, 0, 640, 480/* - 39*/, /*'f_022'*/'ScreenBackPic');
  DrawBorder(x, y, w, h-16, 6);
}

defaultproperties
{
  sb_height = 39;
  msgboxState.flatName = 'f_019';
  BigSelectorXOffset = -28;
  BigSelectorYOffset = -1;
  BigSelectorAnimSpeed = 2;
  BigSelectorAnimFrames[0] = 'm_slctr1';
  BigSelectorAnimFrames[1] = 'm_slctr2';
  DefaultFinaleMusic = 'hub';
  DefaultFinaleType = 'EndGameChess';
  YesMenuColor = "Red";
  NoMenuColor = "Red";

  namedmenus.put("main", MenuScreenMain);
  namedmenus.put("psetup", MenuScreenPlayerSetup);
  namedmenus.put("help", MenuScreenHelp);
}
