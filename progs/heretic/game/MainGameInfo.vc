//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MainGameInfo : LineSpecialGameInfo;

const float DEFAULT_TELEFOGHEIGHT = 32.0;
transient bool shareware;


//==========================================================================
//
//  Init
//
//==========================================================================
override void Init () {
  ::Init();
  shareware = !WadLumpPresent('e2m1');
}


//==========================================================================
//
//  InitNewGame
//
//==========================================================================
override void InitNewGame (int skill) {
  SetSkill(skill);
  nomonsters = GetCvar('NoMonsters');
  bRespawnItems = !!GetCvar('deathmatch');
  bWeaponsStay = netgame && !GetCvar('deathmatch');
}


//==========================================================================
//
//  InitBotTypes
//
//==========================================================================
override void InitBotTypes () {
  AppendBotType(
    "bot1",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot1\\color\\0\\class\\0\\model\\doomguy\\skin\\green.pcx"
  );
  AppendBotType(
    "bot2",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot2\\color\\1\\class\\0\\model\\doomguy\\skin\\bluef.pcx"
  );
  AppendBotType(
    "bot3",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot3\\color\\2\\class\\0\\model\\doomguy\\skin\\pinkf.pcx"
  );
  AppendBotType(
    "bot4",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot4\\color\\3\\class\\0\\model\\doomguy\\skin\\camo.pcx"
  );
  AppendBotType(
    "bot5",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot5\\color\\4\\class\\0\\model\\doomguy\\skin\\green.pcx"
  );
  AppendBotType(
    "bot6",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot6\\color\\5\\class\\0\\model\\doomguy\\skin\\bluef.pcx"
  );
  AppendBotType(
    "bot7",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot7\\color\\6\\class\\0\\model\\doomguy\\skin\\pinkf.pcx"
  );
  AppendBotType(
    "bot8",
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    bsk_medium,
    "\\Name\\bot8\\color\\7\\class\\0\\model\\doomguy\\skin\\camo.pcx"
  );
  NUMBOTTYPES = botinfo.length;
}


//==========================================================================
//
//  TranslateLine
//
//==========================================================================
override void TranslateLine (VLevel InLevel, line_t *line) {
  if (!line->special) return;

  // for BOOM compatibility all lines need to have its ID to be the same as the tag
  //int OldTag = line->arg1;
  //if (OldTag) line->lineTag = OldTag;

  int OldSpec = line->special;
  auto trsp = FindLDefSpecTransForSpecial(InLevel, OldSpec);
  PerformLDefSpecialTranslation(InLevel, OldSpec, trsp, line);
}


//==========================================================================
//
//  TranslateSector
//
//==========================================================================
override void TranslateSector (VLevel InLevel, sector_t *sector) {
  int special = sector->special;
  if (!special) return;

  if (special == 9) {
    sector->special = SECSPEC_SECRET_MASK;
    return;
  }

  int high = (special&0xfc0)<<3;
  special &= 0x3f;
       if (special == 5) sector->special = high|SECSPEC_DamageLavaWimpy;
  else if (special == 6) sector->special = high|SECSPEC_DamageSludge;
  else if (special == 16) sector->special = high|SECSPEC_DamageLavaHefty;
  else if (special == 4) sector->special = high|SECSPEC_ScrollEastLavaDamage;
  else if (special < 20) sector->special = high|(special+64);
  else if (special < 40) sector->special = high|(special+205);
  else sector->special = high|special;
}


//==========================================================================
//
//  TranslateThing
//
//==========================================================================
override void TranslateThing (VLevel InLevel, mthing_t *mthing) {
  // translate the spawn flags to Hexen format
  int flags = mthing->options;
  mthing->options = (flags&0xf)|0x7e0;
  if (flags&0x10) mthing->options &= ~HereticLevelInfo::MTF_GSINGLE;
}


//==========================================================================
//
//  TranslateSpecialActions
//
//==========================================================================
override void TranslateSpecialActions (VLevel InLevel, LevelInfo Level) {
  foreach (ref VMapSpecialAction sac; Level.SpecialActions) {
    if (sac.Special >= 0) continue; // no translation needed
    printerror("UMAPINFO BOSS ACTIONS AREN'T SUPPORTED FOR THIS GAME!");
  }
}


defaultproperties {
  LevelInfoClass = HereticLevelInfo;
  GameFilterFlag = EntityEx::GAME_Heretic;
  bDefaultLaxMonsterActivation = true;
  bDefaultBloodSplatter = true;
  bUseHexenPolyobjTypes = true;
  bNightmareFastChase = true;
  bRavenStylePickupRespawn = true;
  TeleFogHeight = DEFAULT_TELEFOGHEIGHT;
  TeleportFogState = 'Raven';
  DefaultKickBack = 150.0;
  InvDefaultMaxAmount = 16;
  IceMoveFactor = 0.25;
  bRipperBloodNoGravity = true;

  botskill = 2;

  PlayerClasses.length = 1;
  PlayerClasses[0] = HereticPlayer;

  WeaponSlots[1].Weapons[0] = Staff;
  WeaponSlots[1].Weapons[1] = Gauntlets;
  WeaponSlots[2].Weapons[0] = GoldWand;
  WeaponSlots[3].Weapons[0] = Crossbow;
  WeaponSlots[4].Weapons[0] = Blaster;
  WeaponSlots[5].Weapons[0] = SkullRod;
  WeaponSlots[6].Weapons[0] = PhoenixRod;
  WeaponSlots[7].Weapons[0] = Mace;
}
