//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Player : PlayerEx;

BotPlayer Bot;

//==========================================================================
//
//  CreateBot
//
//==========================================================================

override void CreateBot()
{
  Bot = BotPlayer(SpawnObject(BotPlayer, skipReplacement:false));
  Bot.player = self;
  Bot.OnBeginPlay();
  bAutoAim = true;
}

//==========================================================================
//
//  DestroyBot
//
//==========================================================================

override void DestroyBot()
{
  if (Bot != none)
  {
    Bot.Destroy();
    Bot = none;
  }
}

//==========================================================================
//
//  BotOnSpawn
//
//==========================================================================

override void BotOnSpawn()
{
  Bot.OnSpawn();
}

//==========================================================================
//
//  DoClearPlayer
//
//==========================================================================

override void DoClearPlayer()
{
  BotPlayer b;

  b = Bot;
  ::DoClearPlayer();
  Bot = b;
}

//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================

override int GetRebornHealth()
{
  return MAXHEALTH;
}

//==========================================================================
//
//  GotAmmo
//
//==========================================================================

override void GotAmmo(Ammo NewAmmo)
{
  if (!NewAmmo) return;
  if (!ReadyWeapon || (ReadyWeapon.bWimpyWeapon && !ReadyWeapon.bNoAutoSwitch) /*&& GetCvarB('wpn_autoswitch')*/)
  {
    Weapon Best = BestWeapon(class!Ammo(NewAmmo.Class));
    if (Best && Best.SelectionOrder < ReadyWeapon.SelectionOrder) PendingWeapon = Best;
  }
}


//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================
override void PlayerImpulse () {
  int imp = Impulse;

  // Heretic artifact hot keys
  Inventory Arti = none;

  if (imp == 11) {
    Impulse = 0;
    if (!EntityEx(MO).FindInventory(PowerWeaponLevel2)) {
      Arti = EntityEx(MO).FindInventory(ArtiTomeOfPower);
    }
  }

  if (Arti) {
    // Use an artifact
    EntityEx(MO).UseInventory(Arti);
  }

  ::PlayerImpulse();
  Impulse = 0;
}


//==========================================================================
//
//  BotTick
//
//==========================================================================

override void BotTick(float deltaTime)
{
  Bot.BotTick(deltaTime);
}



//==========================================================================
//
//  Cheat_Gimme_AC
//
//==========================================================================
void Cheat_Gimme_AC (const ref array!string args, bool newArg, out array!string aclist) {
  if (args.length == 1) {
    if (!newArg) return;
  } else if (args.length == 2) {
    if (newArg) return;
  } else {
    return;
  }

  aclist[$] = "Ammo";
  aclist[$] = "Arsenal";
  aclist[$] = "Artifacts";
  aclist[$] = "CurrAmmo";
  aclist[$] = "ElvenGifts";
  aclist[$] = "Health";
  aclist[$] = "InfAmmo";
  aclist[$] = "Keys";
  aclist[$] = "NoKeys";
  aclist[$] = "Power";
  aclist[$] = "Weapons";
}


//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================
void Cheat_Gimme () {
  if (!MO) return;

  if (Cmd_CheckParm("ElvenGifts")) {
    GiveElvenGifts(forced:true);
  }

  if (Cmd_CheckParm("NoKeys")) {
    RemoveKeysVerbose();
  }

  if (Cmd_CheckParm("weapons") || Cmd_CheckParm("arsenal")) {
    EntityEx(MO).GiveInventoryType(EnchantedShield);
    EntityEx(MO).GiveInventoryType(BagOfHolding);
    CheatHelper_AllWeapons(Cmd_CheckParm("full"));
    cprint("ALL WEAPONS");
  }

  if (Cmd_CheckParm("weapons") || Cmd_CheckParm("ammo") || Cmd_CheckParm("arsenal")) {
    CheatHelper_AllAmmo(Cmd_CheckParm("full"));
    cprint("ALL AMMO");
  }

  if (Cmd_CheckParm("currammo")) {
    CheatHelper_AllAmmo(false, current:true);
    cprint("CURRENT AMMO");
  }

  if (Cmd_CheckParm("power")) {
    Inventory Pw = EntityEx(MO).FindInventory(PowerWeaponLevel2);
    if (Pw) {
      Pw.Destroy();
      cprint("POWER OFF");
    } else {
      EntityEx(MO).GiveInventoryType(PowerWeaponLevel2);
      cprint("POWER ON");
    }
  }

  if (Cmd_CheckParm("health")) {
    if (MorphTime) {
      MO.Health = MAXMORPHHEALTH;
      Health = MO.Health;
    } else {
      MO.Health = MAXHEALTH;
      Health = MO.Health;
    }
    cprint("FULL HEALTH");
  }

  if (Cmd_CheckParm("keys")) {
    CheatHelper_AllKeys();
    cprint("ALL KEYS");
  }

  if (Cmd_CheckParm("artifacts")) {
    // all artifacts
    class!Inventory Cls;
    foreach AllClasses(Inventory, Cls) {
      if (!Cls.default.bInvBar || !Cls.default.MaxAmount) continue; // not an artifact
      if (!EntityEx.IsSpawnableClass(Cls)) continue; // not spawnable
      if (ClassIsChildOf(Cls, PuzzleItem)) continue; // not puzzle items
      Inventory Item = Level.SpawnEntityChecked(class!Inventory, Cls, default, default, default, false);
      if (Item) {
        Item.Amount = Item.MaxAmount;
        if (!Item.TryPickup(EntityEx(MO))) Item.Destroy();
      }
    }
    cprint("ALL ARTIFACTS");
  }

  CheatHelper_GimmePowers();
}


//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
  if (MorphTime)
  {
    if (UndoPlayerMorph(false, self))
    {
      cprint("CHICKEN OFF");
    }
  }
  else
  {
    if (Actor(MO).MorphPlayer(EggFX.default.PlayerClass, 40.0,
      EggFX.default.MorphStyle, none, none, Actor(MO)))
    {
      cprint("CHICKEN ON");
    }
  }
}

//==========================================================================
//
//  KilledActor
//
//==========================================================================

override void KilledActor(EntityEx Victim)
{
  // Check for frag changes
  if (Victim.bIsPlayer)
  {
    if (bIsBot)
    {
      Bot.Killed(Victim);
    }

    if (Victim.Player.bIsBot)
    {
      Player(Victim.Player).Bot.Died(EntityEx(MO));
    }

    // Frag stuff
    if (Victim == MO)
    {
      // Self-frag
      Frags--;
    }
    else
    {
      Frags++;
      MO.PlaySound('misc/frag', CHAN_ITEM);
      if (MorphTime)
      {
        // Make a super chicken
        EntityEx(MO).GiveInventoryType(PowerWeaponLevel2);
      }
    }
  }
}

defaultproperties
{
}
