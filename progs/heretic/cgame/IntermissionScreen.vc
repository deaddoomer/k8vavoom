//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//FIXME: FIX AND UNIFY WITH DOOM CODE
class IntermissionScreen : Widget;

// intermission states
enum {
  IMS_Stats,
  IMS_PrevLoc,
  IMS_NextLoc,
  IMS_Text,
  IMS_Done
};

const float TEXTSPEED = 0.1;
const float TEXTWAIT  = 7.0;

ClientGameBase ClGame;

// specifies current state
int interstate;
float intertime;

int im_episode;
int im_map;
int im_nextepisode;
int im_nextmap;

int hours;
int minutes;
int seconds;

int killPercent[MAXPLAYERS];
int bonusPercent[MAXPLAYERS];
int secretPercent[MAXPLAYERS];

int patchFaceOkay[4];
int patchFaceDead[4];

float dSlideX[MAXPLAYERS];
float dSlideY[MAXPLAYERS];

int slaughterboy; // in DM, the player with the most kills

int oldinterstate;
float oldintertime;

int im_sounds;

// used for general timing
float cnt;

float HubCount;
string HubText;
name TextFlat;
int TextPic;

IntermissionBackground Background;


//==========================================================================
//
//  Start
//
//==========================================================================
void Start () {
  StopAllSounds();
  FindEpisodeAndMap(ClGame.im.LeaveMap, &im_episode, &im_map);
  FindEpisodeAndMap(ClGame.im.EnterMap, &im_nextepisode, &im_nextmap);

  if (!Background) {
    Background = NewChild(IntermissionBackground);
    Background.ScaleX = float(Width)/float(Background.Width);
    Background.ScaleY = float(Height)/float(Background.Height);
  }

  IM_InitStats();
  IM_LoadPics();
}


//==========================================================================
//
//  FindEpisodeAndMap
//
//==========================================================================
void FindEpisodeAndMap (name Name, int *epi, int *map) {
  string sn = string(Name);
  foreach (auto e; 1..6) {
    foreach (auto m; 1..10) {
      if (sn == va("e%dm%d", e, m)) {
        *epi = e;
        *map = m;
        return;
      }
    }
  }
  *epi = 4;
  *map = 1;
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  if (interstate == IMS_Done) {
    if (cnt > 0.0) {
      cnt -= DeltaTime;
      if (cnt <= 0.0) {
        IM_UnloadPics();
        CmdBuf_AddText("TeleportNewMap\n");
      }
    }
    return;
  }
  intertime += DeltaTime;
  if (oldintertime < intertime) {
    ++interstate;
    if (im_episode > 3 && interstate >= IMS_PrevLoc) {
      // extended wad levels: skip directly to the next level
      interstate = IMS_Text;
    }
    switch (interstate) {
      case IMS_PrevLoc:
        IM_LoadPics();
        oldintertime = intertime+6.0;
        break;
      case IMS_NextLoc:
        IM_LoadPics();
        oldintertime = 99999.0;
        break;
      case IMS_Text:
        IM_InitText();
        break;
      case IMS_Done:
        Background.State = IntermissionBackground::STATE_Done;
        cnt = 0.3;
        break;
      default:
        break;
    }
  }
  if (ClGame.bSkipIntermission) {
    if (interstate == IMS_Stats && intertime < 5.0) {
      intertime = 5.0;
      ClGame.bSkipIntermission = false;
      return;
    } else if (interstate == IMS_PrevLoc && im_episode < 4) {
      interstate = IMS_NextLoc;
      ClGame.bSkipIntermission = false;
      LocalSound('doors/dr1_clos');
      return;
    } else if (interstate < IMS_Text) {
      IM_InitText();
      ClGame.bSkipIntermission = false;
      LocalSound('doors/dr1_clos');
    } else {
      ClGame.bSkipIntermission = false;
      interstate = IMS_Done;
      Background.State = IntermissionBackground::STATE_Done;
      cnt = 0.3;
    }
  }
}


//==========================================================================
//
//  OnPostDraw
//
//==========================================================================
override void OnPostDraw () {
  if (oldinterstate != IMS_NextLoc && interstate == IMS_NextLoc) LocalSound('plats/pt1_stop');
  oldinterstate = interstate;

  switch (interstate) {
    case IMS_Stats: // draw stats
           if (ClGame.maxclients == 1) IM_DrawSingleStats();
      else if (!ClGame.deathmatch) IM_DrawCoopStats();
      else IM_DrawDMStats();
      break;
    case IMS_PrevLoc: // leaving old level
      if (im_episode < 4) IM_DrawOldLevel();
      break;
    case IMS_NextLoc: // going to the next level
      if (im_episode < 4) IM_DrawYAH();
      break;
    case IMS_Text: // displaying text
      IM_DrawText();
      break;
    case IMS_Done: // waiting before going to the next level
      break;
  }
}


//========================================================================
//
//  IM_LoadPics
//
//========================================================================
void IM_LoadPics () {
  name BgPic = (interstate <= IMS_PrevLoc ? ClGame.im.ExitPic : ClGame.im.EnterPic);
  if (!BgPic && interstate != IMS_Stats) {
    switch (im_episode) {
      case 1: BgPic = '$in_htc1'; break;
      case 2: BgPic = '$in_htc2'; break;
      case 3: BgPic = '$in_htc3'; break;
    }
  }
  if (BgPic) {
    ubyte BgState;
    switch (interstate) {
      case IMS_Stats: BgState = IntermissionBackground::STATE_Default; break;
      case IMS_PrevLoc: BgState = IntermissionBackground::STATE_PrevLoc; break;
      case IMS_Done: BgState = IntermissionBackground::STATE_Done; break;
      default: BgState = IntermissionBackground::STATE_NextLoc; break;
    }
    Background.Init(BgPic, BgState, ClientGameShared(ClGame));
  } else {
    Background.InitFlat('floor16', ClientGameShared(ClGame));
  }

  patchFaceOkay[0] = R_RegisterPic('facea0');
  patchFaceOkay[1] = R_RegisterPic('facea1');
  patchFaceOkay[2] = R_RegisterPic('facea2');
  patchFaceOkay[3] = R_RegisterPic('facea3');
  patchFaceDead[0] = R_RegisterPic('faceb0');
  patchFaceDead[1] = R_RegisterPic('faceb1');
  patchFaceDead[2] = R_RegisterPic('faceb2');
  patchFaceDead[3] = R_RegisterPic('faceb3');
}


//========================================================================
//
//  IM_UnloadPics
//
//========================================================================
void IM_UnloadPics () {
}


//========================================================================
//
//  IM_InitStats
//
//========================================================================
void IM_InitStats () {
  PlayerReplicationInfo RepInfo;
  //PlayerReplicationInfo Other;

  if (ClGame.maxclients == 1) {
    if (ClGame.cl.Level.bNoIntermission) {
      IM_InitText();
      return;
    }

    int time = int(ClGame.GLevel.LevelInfo.CompletitionTime);
    hours = time/3600;
    time -= hours*3600;
    minutes = time/60;
    time -= minutes*60;
    seconds = time;
  } else if (!ClGame.deathmatch) {
    if (ClGame.cl.Level.bNoIntermission) {
      IM_InitText();
      return;
    }

    foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo) {
      int i = RepInfo.PlayerNum;
      killPercent[i] = 0;
      bonusPercent[i] = 0;
      secretPercent[i] = 0;
      if (ClGame.cl.Level.TotalKills)
      {
        killPercent[i] = RepInfo.KillCount*100/ClGame.cl.Level.TotalKills;
      }
      if (ClGame.cl.Level.TotalItems)
      {
        bonusPercent[i] = RepInfo.ItemCount*100/ClGame.cl.Level.TotalItems;
      }
      if (ClGame.cl.Level.TotalSecret)
      {
        secretPercent[i] = RepInfo.SecretCount*100/ClGame.cl.Level.TotalSecret;
      }
    }
  } else {
    slaughterboy = 0;
    int slaughterfrags = -9999;
    int posnum = 0;
    int playercount = 0;
    int slaughtercount = 0;
    foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo) {
      int i = RepInfo.PlayerNum;
      ++playercount;
      dSlideX[i] = (43.0*float(posnum))/20.0;
      dSlideY[i] = (36.0*float(posnum))/20.0;
      ++posnum;
      if (RepInfo.Frags > slaughterfrags) {
        slaughterboy = 1<<i;
        slaughterfrags = RepInfo.Frags;
        slaughtercount = 1;
      } else if (RepInfo.Frags == slaughterfrags) {
        slaughterboy |= 1<<i;
        ++slaughtercount;
      }
    }
    if (playercount == slaughtercount) {
      // don't do the slaughter stuff if everyone is equal
      slaughterboy = 0;
    }
  }

  interstate = IMS_Stats;
  ClGame.bSkipIntermission = false;
  intertime = 0.0;
  oldintertime = (im_episode > 3 ? 35.0 : 10.0);
  im_sounds = 0;
  if (ClGame.im.InterMusic) {
    CmdBuf_AddText(va("music loop \"%q\"\n", ClGame.im.InterMusic));
  } else {
    CmdBuf_AddText("music loop mus_intr\n");
  }
}


//========================================================================
//
//  IM_DrawSingleStats
//
//========================================================================
void IM_DrawSingleStats () {
  SetTextShadow(true);
  SetFont('bigfont');
  SetTextAlign(hleft, vtop);
  DrawText(210, 205, "KILLS");
  DrawText(210, 230, "ITEMS");
  DrawText(210, 255, "SECRETS");
  SetTextAlign(hcenter, vtop);
  DrawText(320, 143, ClGame.im.LeaveName);
  SetTextShadow(false);

  SetFont('smallfont');
  DrawText(320, 165, "FINISHED");

  if (intertime < 1.0) return;

  if (im_sounds < 1 && intertime >= 1.0) {
    LocalSound('doors/dr1_clos');
    ++im_sounds;
  }
  SetTextShadow(true);
  SetFont('bigfont');
  SetTextAlign(hleft, vtop);
  DrawText(362, 205, va("%d", ClGame.cl.KillCount));
  DrawText(397, 205, "/");
  DrawText(410, 205, va("%d", ClGame.cl.Level.TotalKills));
  SetTextShadow(false);
  if (intertime < 2.0) return;

  if (im_sounds < 2 && intertime >= 2.0) {
    LocalSound('doors/dr1_clos');
    ++im_sounds;
  }
  SetTextShadow(true);
  SetFont('bigfont');
  SetTextAlign(hleft, vtop);
  DrawText(362, 230, va("%d", ClGame.cl.ItemCount));
  DrawText(397, 230, "/");
  DrawText(410, 230, va("%d", ClGame.cl.Level.TotalItems));
  SetTextShadow(false);
  if (intertime < 3.0) return;

  if (im_sounds < 3 && intertime >= 3.0) {
    LocalSound('doors/dr1_clos');
    ++im_sounds;
  }
  SetTextShadow(true);
  SetFont('bigfont');
  SetTextAlign(hleft, vtop);
  DrawText(362, 255, va("%d", ClGame.cl.SecretCount));
  DrawText(397, 255, "/");
  DrawText(410, 255, va("%d", ClGame.cl.Level.TotalSecret));
  SetTextShadow(false);
  if (intertime < 5.0) return;

  if (im_sounds < 4 && intertime >= 5.0) {
    LocalSound('doors/dr1_clos');
    ++im_sounds;
  }

  if (!WadLumpPresent('extended') || im_episode < 4) {
    SetTextShadow(true);
    SetFont('bigfont');
    SetTextAlign(hleft, vtop);
    DrawText(245, 300, "TIME");
    DrawText(315, 300, va("%d%d:%d%d:%d%d", hours/10, hours%10, minutes/10, minutes%10, seconds/10, seconds%10));
    SetTextShadow(false);
  } else {
    SetFont('smallfont');
    SetTextAlign(hcenter, vtop);
    DrawText(320, 300, "NOW ENTERING:");
    SetTextShadow(true);
    SetFont('bigfont');
    DrawText(320, 310, ClGame.im.EnterName);
    SetTextShadow(false);
    ClGame.bSkipIntermission = false;
  }
}


//========================================================================
//
//  IM_DrawCoopStats
//
//========================================================================
void IM_DrawCoopStats () {
  PlayerReplicationInfo RepInfo;

  SetTextShadow(true);
  SetFont('bigfont');
  SetTextAlign(hleft, vtop);
  DrawText(255, 175, "KILLS");
  DrawText(315, 175, "BONUS");
  DrawText(392, 175, "SECRET");

  SetTextAlign(hcenter, vtop);
  DrawText(320, 143, ClGame.im.LeaveName);
  SetTextShadow(false);
  SetFont('smallfont');
  DrawText(320, 165, "FINISHED");

  SetTextShadow(true);
  SetFont('bigfont');
  SetTextAlign(hleft, vtop);
  int ypos = 190;
  foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo) {
    int i = RepInfo.PlayerNum;
    DrawShadowedPic(185, ypos, patchFaceOkay[i]);
    if (intertime < 1.25) {
      ypos += 37;
      continue;
    } else if (intertime >= 1.25 && im_sounds < 1) {
      LocalSound('doors/dr1_clos');
      ++im_sounds;
    }
    DrawText(247, ypos+10, va("%d", killPercent[i]));
    DrawText(281, ypos+10, "%");
    DrawText(322, ypos+10, va("%d", bonusPercent[i]));
    DrawText(356, ypos+10, "%");
    DrawText(399, ypos+10, va("%d", secretPercent[i]));
    DrawText(433, ypos+10, "%");
    ypos += 37;
  }
  SetTextShadow(false);
}


//========================================================================
//
//  IM_DrawDMStats
//
//========================================================================
void IM_DrawDMStats () {
  PlayerReplicationInfo RepInfo;

  //int xpos = 250;
  int ypos = 195;

  SetTextShadow(true);
  SetFont('bigfont');
  SetTextAlign(hleft, vtop);
  DrawText(425, 170, "FRAGS");
  DrawText(525, 170, "DEATHS");
  SetTextShadow(false);

  if (intertime < 0.625) {
    foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo) {
      int i = RepInfo.PlayerNum;
      DrawShadowedPic(200, ypos+int(dSlideY[i]*35.0*intertime), patchFaceOkay[i]);
      SetFont('smallfont');
      SetTextAlign(hleft, vtop);
      DrawText(240, ypos+10+int(dSlideY[i]*35.0*intertime), RepInfo.PlayerName);
    }
    return;
  }

  if (intertime >= 0.625 && im_sounds < 1) {
    LocalSound('doors/dr1_clos');
    ++im_sounds;
  }

  if (intertime >= 3.0 && slaughterboy && im_sounds < 2) {
    LocalSound('*evillaugh');
    ++im_sounds;
  }
  SetTextShadow(true);
  SetFont('bigfont');
  SetTextAlign(hleft, vtop);
  foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo) {
    int i = RepInfo.PlayerNum;
    if (intertime < 3.0 || i == ClGame.cl.ClientNum) {
      DrawShadowedPic(200, ypos, patchFaceOkay[i]);
    } else {
      DrawPic(200, ypos, patchFaceOkay[i], 0.4);
    }
    SetFont('smallfont');
    SetTextAlign(hleft, vtop);
    DrawText(240, ypos+10, RepInfo.PlayerName);
    if (slaughterboy&(1<<i)) {
      if (!(int(32.0*intertime)&16)) {
        DrawText(423, ypos+10, va("%d", RepInfo.Frags));
        DrawText(523, ypos+10, va("%d", RepInfo.Deaths));
      }
    } else {
      DrawText(423, ypos+10, va("%d", RepInfo.Frags));
      DrawText(523, ypos+10, va("%d", RepInfo.Deaths));
    }
    ypos += 36;
    //xpos += 43;
  }
  SetTextShadow(false);
}


//========================================================================
//
//  IM_DrawOldLevel
//
//========================================================================
void IM_DrawOldLevel () {
  SetTextAlign(hcenter, vtop);

  SetTextShadow(true);
  SetFont('bigfont');
  DrawText(320, 3, ClGame.im.LeaveName);
  SetTextShadow(false);

  SetFont('smallfont');
  DrawText(320, 25, "FINISHED");
}


//========================================================================
//
//  IM_DrawYAH
//
//========================================================================
void IM_DrawYAH () {
  SetTextAlign(hcenter, vtop);

  SetFont('smallfont');
  DrawText(320, 10, "NOW ENTERING:");

  SetTextShadow(true);
  SetFont('bigfont');
  DrawText(320, 20, ClGame.im.EnterName);
  SetTextShadow(false);
}


//==========================================================================
//
//  IM_InitText
//
//==========================================================================
void IM_InitText () {
  if (ClGame.deathmatch) {
    interstate = IMS_Done;
    Background.State = IntermissionBackground::STATE_Done;
    cnt = 0.3;
    return;
  }

  IntermissionText *itext =
    ClGame.intermissionPhase == ClientGame::IM_Phase.Leave ? &ClGame.im.LeaveText :
    ClGame.intermissionPhase == ClientGame::IM_Phase.Enter ? &ClGame.im.EnterText :
    nullptr;

  if (ClGame.cl.Level.bNoIntermission) itext = nullptr;

  if (!itext || !itext.Text) {
    if (ClGame.cl.Level.bNoIntermission) {
      CmdBuf_AddText("TeleportNewMap\n");
      interstate = IMS_Done;
      Background.State = IntermissionBackground::STATE_Done;
      cnt = 0.0;
      return;
    } else {
      interstate = IMS_Done;
      Background.State = IntermissionBackground::STATE_Done;
      cnt = 0.3;
      return;
    }
  }

  HubText = (itext.bTextIsLump ? LoadTextLump(name(itext.Text)) : itext.Text);
  HubCount = float(strlenutf8(HubText))*TEXTSPEED+TEXTWAIT;

  TextFlat = '';
  TextPic = 0;
       if (itext.TextPic) TextPic = R_RegisterPic(itext.TextPic);
  else if (itext.TextFlat) TextFlat = itext.TextFlat;

  ClGame.bSkipIntermission = false;
  interstate = IMS_Text;
  intertime = 0.0;
  oldintertime = HubCount;
  if (itext.TextMusic) {
    CmdBuf_AddText(va("music loop \"%q\"\n", itext.TextMusic));
  } else {
    CmdBuf_AddText("music loop mus_cptd\n");
  }
}


//==========================================================================
//
//  IM_DrawText
//
//==========================================================================
void IM_DrawText () {
  int count;

  // erase the entire screen to a tiled background
       if (TextPic) DrawFullScreenPic(TextPic);
  else if (TextFlat) FillRectWithFlatRepeat(0, 0, GetVirtualWidth(), GetVirtualHeight(), TextFlat);
  else R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0);

  // draw some of the text onto the screen
  count = int((intertime-0.3)/TEXTSPEED);
  count = clamp(count, 0, strlenutf8(HubText));

  SetFont('smallfont');
  SetTextAlign(hleft, vtop);
  //if (hubTextHeight < 0) {
    int hubTextHeight = max(8, TextHeight(HubText));
    int hubTextWidth = max(8, TextWidth(HubText));
    //writeln(HubText);
    //writeln("text size: ", hubTextWidth, "x", hubTextHeight);
  //}
  //DrawText(180, 145, substrutf8(HubText, 0, count));
  DrawText((GetVirtualWidth()-hubTextWidth)/2, (GetVirtualHeight()-hubTextHeight)/2, substrutf8(HubText, 0, count));
}


//==========================================================================
//
//  OnVisibilityChanged
//
//==========================================================================
override void OnVisibilityChanged (bool bNewVisibility) {
  bTickEnabled = bNewVisibility;
  if (bNewVisibility) SetFullScaledSize(Width, Height);
}


defaultproperties {
  bTickEnabled = true;
  Focusable = true;
  Width = 640;
  Height = 480;
}
