//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class StatusBarScreen : StatusBarShared;

const int BAR_X = 160;
const int BAR_Y = 438;

Player cl;

// Chain
int HealthMarker;
int ChainWiggle;

bool hitCentreFrame;

// Graphics
int pic_barback;
int pic_god1;
int pic_god2;
int pic_barltop;
int pic_barrtop;
int pic_chain;
int pic_lifegem;
int pic_ltface;
int pic_rtface;
int pic_mainbar;
int pic_innum[10];
int pic_smallinnum[10];
int pic_minus;
int pic_lame;
int pic_bignum[10];
int bignumwidth[10];
int pic_ykey;
int pic_gkey;
int pic_bkey;
int pic_artiflash[4];
int pic_artibox;
int pic_invbar;
int pic_selectbox;
int pic_flight[16];
int pic_book[16];
int pic_invgeml[2];
int pic_invgemr[2];
int pic_paused;
// For the Fullscreen stuff
int pic_health;
int pic_armor[2];

//==========================================================================
//
//  StartMap
//
//==========================================================================

override void StartMap()
{
  int i;
  picinfo_t info;

  ::StartMap();

  pic_barback = R_RegisterPic('barback');
  pic_god1 = R_RegisterPic('god1');
  pic_god2 = R_RegisterPic('god2');
  pic_barltop = R_RegisterPic('ltfctop');
  pic_barrtop = R_RegisterPic('rtfctop');
  pic_chain = R_RegisterPic('chain');
  if (ClGame.maxclients == 1)
  {
    // single player game uses red life gem
    pic_lifegem = R_RegisterPic('lifegem2');
  }
  else
  {
    pic_lifegem = R_RegisterPic(name(va("lifegem%d", cl.ClientNum)));
  }
  pic_ltface = R_RegisterPic('ltface');
  pic_rtface = R_RegisterPic('rtface');

  if (ClGame.deathmatch)
  {
    pic_mainbar = R_RegisterPic('statbar');
  }
  else
  {
    pic_mainbar = R_RegisterPic('lifebar');
  }
  for (i = 0; i < 10; i++)
  {
    pic_innum[i] = R_RegisterPic(name(va("in%d", i)));
    pic_smallinnum[i] = R_RegisterPic(name(va("smallin%d", i)));
    pic_bignum[i] = R_RegisterPic(name(va("fontb%d", 16 + i)));
    R_GetPicInfo(pic_bignum[i], &info);
    bignumwidth[i] = info.width;
  }
  pic_minus = R_RegisterPic('negnum');
  pic_lame = R_RegisterPic('lame');
  pic_ykey = R_RegisterPic('ykeyicon');
  pic_gkey = R_RegisterPic('gkeyicon');
  pic_bkey = R_RegisterPic('bkeyicon');

  pic_artiflash[0] = R_RegisterPic('useartia');
  pic_artiflash[1] = R_RegisterPic('useartib');
  pic_artiflash[2] = R_RegisterPic('useartic');
  pic_artiflash[3] = R_RegisterPic('useartid');
  pic_artibox = R_RegisterPic('artibox');
  pic_invbar = R_RegisterPic('invbar');
  pic_selectbox = R_RegisterPic('selectbo');
  pic_invgeml[0] = R_RegisterPic('invgeml1');
  pic_invgeml[1] = R_RegisterPic('invgeml2');
  pic_invgemr[0] = R_RegisterPic('invgemr1');
  pic_invgemr[1] = R_RegisterPic('invgemr2');

  for (i = 0; i < 16; i++)
  {
    pic_flight[i] = R_RegisterPic(name(va("spfly%d", i)));
    pic_book[i] = R_RegisterPic(name(va("spinbk%d", i)));
  }

  pic_paused = R_RegisterPic('paused');

  //  FULLSCREEN ICONS FOR HEALTH AND ARMOR
  pic_health = R_RegisterPic('ptn1a0');
  pic_armor[0] = R_RegisterPic('shlda0');
  pic_armor[1] = R_RegisterPic('shd2a0');
}

//==========================================================================
//
//  SB_DrawNumber9
//
//==========================================================================

void SB_DrawNumber9(int x, int y, int num)
{
  int w = 9;
  int neg = num < 0;

  if (num < -9)
  {
    //  Lame message
    DrawPic(x + 1, y + 1, pic_lame);
    return;
  }
  if (neg)
  {
    num = -num;
  }

  x = x + 27;

  // in the special case of 0, you draw 0
  if (!num)
  {
    DrawPic(x - w, y, pic_innum[0]);
  }

  // draw the new number
  while (num)
  {
    x -= w;
    DrawPic(x, y, pic_innum[num % 10]);
    num /= 10;
  }

  // draw a minus sign if necessary
  if (neg)
  {
    DrawPic(x - 8, y, pic_minus);
  }
}

//==========================================================================
//
//  SB_DrawNumber12
//
//==========================================================================

void SB_DrawNumber12(int x, int y, int num)
{
  x = x + 36;

  // in the special case of 0, you draw 0
  if (!num)
  {
    DrawShadowedPic(x - bignumwidth[0], y, pic_bignum[0]);
  }

  // draw the new number
  while (num)
  {
    x -= bignumwidth[num % 10];
    DrawShadowedPic(x, y, pic_bignum[num % 10]);
    num /= 10;
    x -= 3;
  }
}

//==========================================================================
//
//  SB_DrawINumber
//
//==========================================================================

void SB_DrawINumber(int x, int y, int num)
{
  if (num > 1)
  {
    x = x + 8;

    // draw the new number
    while (num)
    {
      x -= 4;
      DrawPic(x, y, pic_smallinnum[num % 10]);
      num /= 10;
    }
  }
}

//==========================================================================
//
//  SB_DrawMainBar
//
//==========================================================================

override void SB_DrawMainBar()
{
  int chainY;
  int healthPos;
  int i;
  int health;

  if (!cl || !cl.MO)
  {
    return;
  }

  // draw something in the blank spaces
  FillRectWithFlat(0, 438, 640, 42,
    !WadLumpPresent('e2m1') ? 'floor04' : 'flat513');

  //  Background
  DrawPic(BAR_X, BAR_Y, pic_barback);

  if (cl.Cheats & Player::CF_GODMODE)
  {
    //  God mode
    DrawPic(BAR_X + 16, BAR_Y + 9, pic_god1);
    DrawPic(BAR_X + 287, BAR_Y + 9, pic_god2);
  }

  //  Top
  DrawPic(BAR_X + 0, BAR_Y - 10, pic_barltop);
  DrawPic(BAR_X + 290, BAR_Y - 10, pic_barrtop);

  //  Healtn and chain
  health = HealthMarker;
  if (health < 0)
  {
    health = 0;
  }
  else if (health > 100)
  {
    health = 100;
  }
  healthPos = (health * 256) / 100;
  chainY = (HealthMarker == cl.Health) ? 33 : 33 + ChainWiggle;

  //  Chain
  DrawPic(BAR_X + 2 + (healthPos % 17), BAR_Y + chainY, pic_chain);
  DrawPic(BAR_X + 17 + healthPos, BAR_Y + chainY, pic_lifegem);
  DrawPic(BAR_X + 0, BAR_Y + 32, pic_ltface);
  DrawPic(BAR_X + 276, BAR_Y + 32, pic_rtface);
  for (i = 0; i < 16; i++)
  {
    ShadeRect(BAR_X + 277 + i, BAR_Y + 32, 1, 10, float(9 + i) / 32.0);
    ShadeRect(BAR_X + 19 + i, BAR_Y + 32, 1, 10, float(9 + 15 - i) / 32.0);
  }

  if (!cl.InventoryTime)
  {
    //  Main interface
    DrawPic(BAR_X + 34, BAR_Y + 2, pic_mainbar);

    //  Frags / Health
    if (ClGame.deathmatch)
    {
      SB_DrawNumber9(BAR_X + 61, BAR_Y + 12, cl.Frags);
    }
    else
    {
      SB_DrawNumber9(BAR_X + 61, BAR_Y + 12, health);
    }

    if (cl.ReadyWeapon && cl.ReadyWeapon.Ammo1)
    {
      //  Ammo
      SB_DrawNumber9(BAR_X + 109, BAR_Y + 4, cl.ReadyWeapon.Ammo1.Amount);
      DrawPic(BAR_X + 111, BAR_Y + 14, R_RegisterPic(cl.ReadyWeapon.Ammo1.IconName));
    }

    //  Ready artifact
    if (cl.ArtifactFlash)
    {
      DrawPic(BAR_X + 182, BAR_Y + 3,
        pic_artiflash[cl.ArtifactFlash - 1]);
    }
    else if (cl.InvPtr)
    {
      DrawPic(BAR_X + 179, BAR_Y + 2,
        R_RegisterPic(cl.InvPtr.IconName));
      SB_DrawINumber(BAR_X + 201, BAR_Y + 24, cl.InvPtr.Amount);
    }

    //  Keys
    if (EntityEx(cl.MO).FindInventory(KeyYellow))
    {
      DrawPic(BAR_X + 153, BAR_Y + 6, pic_ykey);
    }
    if (EntityEx(cl.MO).FindInventory(KeyGreen))
    {
      DrawPic(BAR_X + 153, BAR_Y + 14, pic_gkey);
    }
    if (EntityEx(cl.MO).FindInventory(KeyBlue))
    {
      DrawPic(BAR_X + 153, BAR_Y + 22, pic_bkey);
    }

    //  Armor
    BasicArmor Armor = BasicArmor(EntityEx(cl.MO).FindInventory(
      BasicArmor));
    SB_DrawNumber9(BAR_X + 228, BAR_Y + 12, Armor ? Armor.Amount : 0);
  }
  else
  {
    //  Inventory
    DrawPic(BAR_X + 34, BAR_Y + 2, pic_invbar);
    Inventory Item = cl.InvFirst;
    for (i = 0; Item && i < 7; i++)
    {
      DrawPic(BAR_X + 50 + i * 31, BAR_Y + 2,
        R_RegisterPic(Item.IconName));
      SB_DrawINumber(BAR_X + 69 + i * 31, BAR_Y + 24, Item.Amount);
      if (Item == cl.InvPtr)
      {
        DrawPic(BAR_X + 50 + i * 31, BAR_Y + 31, pic_selectbox);
      }
      Item = Item.NextInv();
    }
    if (cl.InvFirst && cl.InvFirst.PrevInv())
    {
      DrawPic(BAR_X + 38, BAR_Y + 1, pic_invgeml[!(int(cl.MO.Level.XLevel.Time * 35.0) & 4) ? 0 : 1]);
    }
    if (Item)
    {
      DrawPic(BAR_X + 269, BAR_Y + 1, pic_invgemr[!(int(cl.MO.Level.XLevel.Time * 35.0) & 4) ? 0 : 1]);
    }
  }
}


private final int xfix (int x) { return (x == 640/2 ? GetVirtualWidth()/2 : x < 640/2 ? x : GetVirtualWidth()-(640-x)); }
private final int yfix (int y) { return (y == 480/2 ? GetVirtualHeight()/2 : y < 480/2 ? y: GetVirtualHeight()-(480-y)); }


//==========================================================================
//
//  SB_DrawFullscreenStats
//
//==========================================================================
override void SB_DrawFullscreenStats () {
  if (!cl || !cl.MO) return;

  // health
  SB_DrawNumber9(50, yfix(456), cl.Health);
  DrawPic(30, yfix(494), pic_health, 0.6);

  // armorpoints
  BasicArmor Armor = BasicArmor(EntityEx(cl.MO).FindInventory(BasicArmor));
  if (Armor && Armor.Amount) {
    int i = (Armor.SavePercent > 0.5 ? 1 : 0);
    SB_DrawNumber9(140, yfix(456), Armor.Amount);
    DrawPic(120, yfix(490), pic_armor[i], 0.6);
  }

  // frags
  if (ClGame.deathmatch) SB_DrawNumber9(xfix(200), yfix(450), cl.Frags);

  // ammo
  if (cl.ReadyWeapon && cl.ReadyWeapon.Ammo1) {
    SB_DrawNumber9(xfix(610), yfix(456), cl.ReadyWeapon.Ammo1.Amount);
    DrawPic(xfix(590), yfix(454), R_RegisterPic(cl.ReadyWeapon.Ammo1.IconName), 0.6);
  }
  if (cl.ReadyWeapon && cl.ReadyWeapon.Ammo2 && cl.ReadyWeapon.Ammo2 != cl.ReadyWeapon.Ammo1) {
    SB_DrawNumber9(xfix(610), yfix(424), cl.ReadyWeapon.Ammo2.Amount);
    DrawPic(xfix(590), yfix(422), R_RegisterPic(cl.ReadyWeapon.Ammo2.IconName), 0.6);
  }

  // keys
  int KeyX = GetVirtualWidth()/2;
  for (Inventory Item = EntityEx(cl.MO).Inventory; Item; Item = Item.Inventory) {
    if (Key(Item)) {
      int Pic = R_RegisterPic(Item.IconName);
      if (Pic >= 0) {
        DrawPic(KeyX, yfix(460), Pic, 0.6);
        KeyX += 20;
      }
    }
  }

  if (cl.InventoryTime) {
    // inventory
    Inventory Item = cl.InvFirst;
    foreach (auto i; 0..7) {
      DrawPic(210+i*31, yfix(448), pic_artibox, 0.6);
      if (Item) {
        DrawShadowedPic(xfix(210)+i*31, yfix(448), R_RegisterPic(Item.IconName));
        SB_DrawINumber(xfix(229)+i*31, yfix(470), Item.Amount);
        if (Item == cl.InvPtr) DrawPic(xfix(210)+i*31, yfix(477), pic_selectbox, 0.6);
        Item = Item.NextInv();
      }
    }
    if (cl.InvFirst && cl.InvFirst.PrevInv()) DrawPic(xfix(198), yfix(447), pic_invgeml[!(int(cl.MO.Level.XLevel.Time*35.0)&4) ? 0 : 1], 0.6);
    if (Item) DrawPic(xfix(429), yfix(447), pic_invgemr[!(int(cl.MO.Level.XLevel.Time*35.0)&4) ? 0 : 1], 0.6);
  } else if (cl.InvPtr) {
    // ready artifact
    DrawPic(xfix(546), yfix(440), pic_artibox, 0.6);
    DrawShadowedPic(xfix(546), yfix(440), R_RegisterPic(cl.InvPtr.IconName));
    SB_DrawINumber(xfix(567), yfix(462), cl.InvPtr.Amount);
  }
}


//==========================================================================
//
//  SB_DrawIcons
//
//==========================================================================
void SB_DrawIcons () {
  if (!cl.MO) return;

  // artifact rotating icons
  Powerup Pw = Powerup(EntityEx(cl.MO).FindInventory(PowerFlight));
  if (Pw && (Pw.EffectTime > Player::BLINKTHRESHOLD || !(int(2.0*Pw.EffectTime)&1))) {
    int frame = (int(cl.MO.Level.XLevel.Time*35.0) /* ClGame.GLevel.TicTime */ / 3)&15;
    if (cl.MO.bFly) {
      if (hitCentreFrame && frame != 15 && frame != 0) {
        frame = 15;
      } else {
        hitCentreFrame = false;
      }
    } else {
      if (hitCentreFrame || frame == 15 || frame == 0) {
        frame = 15;
        hitCentreFrame = true;
      }
    }
    DrawPic(20, 17, pic_flight[frame]);
  }

  Pw = Powerup(EntityEx(cl.MO).FindInventory(PowerWeaponLevel2));
  if (Pw && !cl.MorphTime && (Pw.EffectTime > Player::BLINKTHRESHOLD || !(int(2.0*Pw.EffectTime)&1))) {
    DrawPic(/*xfix*/(620), 17, pic_book[(int(cl.MO.Level.XLevel.Time*35.0)/3)&15]);
  }
}


//==========================================================================
//
//  SB_DrawPause
//
//==========================================================================
void SB_DrawPause () {
  if (ClGame.Game.bPaused && GetCvar('draw_pause')) {
    DrawPic(GetVirtualWidth()/2, (ClGame.maxclients > 1 ? 140 : 40), pic_paused);
  }
}


//==========================================================================
//
//  SB_Drawer
//
//==========================================================================
override void SB_Drawer(int sb_view) {
  SB_Housekeeping(sb_view);
  if (!cl || !cl.MO) return;
  if (!GetCvarB('r_statusbar_draw')) return;
  SB_DrawMainPart(sb_view);
  {
    SB_SavedVScreenState sss;
    SB_SetCorrected640x480(out sss);
    scope(exit) SB_RestoreVScreen(ref sss);
    SB_DrawIcons();
  }
  SB_DrawPause();
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

override void SB_UpdateWidgets()
{
  int i;
  int delta;
  int curHealth;

  if (ClGame.GLevel.TicTime & 1)
  {
    ChainWiggle = P_Random() & 1;
  }

  curHealth = cl.Health;
  if (curHealth < 0)
  {
    curHealth = 0;
  }
  if (curHealth < HealthMarker)
  {
    delta = (HealthMarker - curHealth) >> 2;
    if (delta < 1)
    {
      delta = 1;
    }
    else if (delta > 8)
    {
      delta = 8;
    }
    HealthMarker -= delta;
  }
  else if (curHealth > HealthMarker)
  {
    delta = (curHealth - HealthMarker) >> 2;
    if (delta < 1)
    {
      delta = 1;
    }
    else if (delta > 8)
    {
      delta = 8;
    }
    HealthMarker += delta;
  }
}

//==========================================================================
//
//  OnVisibilityChanged
//
//==========================================================================

override void OnVisibilityChanged(bool bNewVisibility)
{
  bTickEnabled = bNewVisibility;
}

defaultproperties
{
  bTickEnabled = true;
  Focusable = true;
  Width = 640;
  Height = 480;
}
