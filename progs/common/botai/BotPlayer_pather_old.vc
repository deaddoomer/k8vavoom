//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
#define BOT_PATHER_OLD

// A-Star node
class BotPathNode : MiAStarNodeBase;

struct Transition {
  int subnum;
  float dist;
  float moveCost; // +20 for "needUse", arbitrary weight
  bool needJump;
  bool needUse;
}

Level XLevel; // level object (i.e. actual map)
TVec Origin;
int ssnum;

// reachable subsectors (should be at least one, zero means "don't know yet")
array!Transition ssreachable;

// `true` if this node has some impassable 2-sided walls
// this means that this node should be re-evaluated next time the bot hits it
// this is done so the bot can notice opened secret doors like one on MAP01, for example
bool needRecalc;


static final BotPathNode CreateNew (Level axlevel) {
  BotPathNode res = SpawnObject(BotPathNode);
  res.XLevel = axlevel;
  return res;
}


override void Destroy () {
  ssreachable.length = 0;
  ::Destroy();
}


final bool CanReachSS (GameObject::subsector_t *ss) {
  if (!ss) return false;
  int dsnum = ss-&XLevel.Subsectors[0];
  if (dsnum == ssnum) return true;
  foreach (const ref auto tr; ssreachable) if (tr.subnum == dsnum) return true;
  return false;
}


final bool CanReachSSByIndex (int dsnum) {
  if (dsnum < 0 || dsnum >= XLevel.Subsectors.length) return false;
  if (dsnum == ssnum) return true;
  foreach (const ref auto tr; ssreachable) if (tr.subnum == dsnum) return true;
  return false;
}


final Transition *FindSSTranstion (GameObject::subsector_t *ss) {
  if (!ss) return nullptr;
  int dsnum = ss-&XLevel.Subsectors[0];
  if (dsnum == ssnum) return nullptr;
  foreach (const ref auto tr; ssreachable) if (tr.subnum == dsnum) return &tr;
  return nullptr;
}


defaultproperties {
}


// ////////////////////////////////////////////////////////////////////////// //
class BotPathGraph : MiAStarGraphBase;

BotPlayerBase bot;
int lastNodeUpdate; // if this is not equal to `bot.lastNodeUpdate`, reset cache
int currentPos;


final void Setup (BotPlayerBase abot) {
  if (!abot) FatalError("something is very wrong with bot pathfinder");
  bot = abot;
}


final bool IsComplete () {
  return (currentPos >= PathArrayLength());
}

// -1: done
final int GetNextSSNum () {
  if (currentPos < PathArrayLength()) return BotPathNode(PathArrayNode(currentPos++)).ssnum;
  return -1;
}

// -1: done
final int GetCurrSSNum () {
  if (currentPos < PathArrayLength()) return BotPathNode(PathArrayNode(currentPos)).ssnum;
  return -1;
}

final int GetPathSSNum (int index) {
  return BotPathNode(PathArrayNode(index)).ssnum;
}


// returns `false` if there is no path
final bool BuildPath (int ssStart, int ssEnd) {
  currentPos = 0;
  if (ssStart < 0 || ssEnd < 0) return false; // just in case
  BotPlayerBase abot = bot;
  if (!abot || !abot.player || abot.player.Health <= 0) return false;
  // we may need alive bot mobile to re-evaluate nodes
  Actor botmo = Actor(abot.player.MO);
  if (!botmo || botmo.Health <= 0) return false; // dead bot cannot go anywhere
  bot = abot;
  int sslen = abot.ssnodes.length;
  if (!sslen || ssStart >= sslen || ssEnd >= sslen) return false;
  // early exit: same subsector is always reachable
  if (ssStart == ssEnd && !abot.ssnodes[ssStart]) {
    // that node doesn't exist yet, so create it (otherwise we have nothing to return)
    auto node = BotPathNode.CreateNew(botmo.XLevel);
    node.Origin = botmo.XLevel.GetSubsectorCenter(&botmo.XLevel.Subsectors[ssStart]);
    node.Origin.z = EntityEx::ONFLOORZ;
    node.ssnum = ssStart;
    node.needRecalc = true; // anyway
    abot.ssnodes[ssStart] = node;
    PathArrayClear();
    PathArrayPushNode(node);
    pathCost = 0;
    return true;
  }
  // both nodes should present
  if (!abot.ssnodes[ssStart] || !abot.ssnodes[ssEnd]) return false;
  // invalidate cache, if necessary
  if (lastNodeUpdate != bot.lastNodeUpdate) {
    //if (GetCvarB('bot_developer_messages_crumbs')) print("invalidating path cache");
    lastNodeUpdate = bot.lastNodeUpdate;
    Reset();
  }
  // run solver
  return Solve(abot.ssnodes[ssStart], abot.ssnodes[ssEnd]);
}


// estimate distance between two nodes
// use squared distance, because it doesn't matter, so we can avoid `sqrt()` call
override float LeastCostEstimate (MiAStarNodeBase start, MiAStarNodeBase end) {
  return (BotPathNode(start).Origin-BotPathNode(end).Origin).length2DSquared;
}


// should always generate the same set for the same node,
// so we cannot update nodes here
override void AdjacentCost (MiAStarNodeBase node) {
  foreach (const ref auto tr; BotPathNode(node).ssreachable) {
    PushAdjacentCost(bot.ssnodes[tr.subnum], tr.moveCost);
  }
}
