//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuChoiceEnum : MenuChoice;

string Text;
bool bLeftAlign;

int Value;
array<string> EnumNames;

delegate bool ValueChanging(Object Sender, int NewValue);

name cvarSession; // if not empty, value will be saved in it, and read back on creation


//==========================================================================
//
//  getSavedValue
//
//==========================================================================
int getSavedValue (optional int defval) {
  if (!specified_defval) defval = Value;
  if (cvarSession) return getSavedInt(cvarSession, defval);
  return defval;
}


//==========================================================================
//
//  SetSessionCvar
//
//==========================================================================
void SetSessionCvar (name Name, optional int defval) {
  if (!specified_defval) defval = 0;
  cvarSession = Name;
  if (Name) defval = getSavedInt(Name, defval);
  if (SetNewValue(defval)) Value = defval;
}


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int x, int y) {
  if (bLeftAlign) {
    SetPos(x, y);
  } else {
    CursorXOffs = 200;
    SetPos(x-CursorXOffs, y);
  }
}

//==========================================================================
//
//  SetNewValue
//
//==========================================================================
bool SetNewValue (int newValue) {
  if (newValue < 0 || newValue >= EnumNames.length) return false;
  if (ValueChanging) {
    if (!ValueChanging(self, newValue)) return false;
  }
  if (cvarSession) setSavedInt(cvarSession, newValue);
  Value = newValue;
  return true;
}


//==========================================================================
//
//  AddItem
//
//==========================================================================
void AddItem (string AValue) {
  EnumNames.Num = EnumNames.Num+1;
  EnumNames[EnumNames.Num-1] = AValue;
}


//==========================================================================
//
//  SetInitialValue
//
//==========================================================================
void SetInitialValue (int AValue) {
  Value = AValue;
  if (Value >= EnumNames.Num) Value = EnumNames.Num-1;
  if (Value < 0) Value = 0;
  if (cvarSession) setSavedInt(cvarSession, Value);
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  int Col = (IsFocus() ? CR_YELLOW : CR_WHITE);
  if (bLeftAlign) {
    SetTextAlign(hleft, vtop);
    DrawText(0, 0, Text, Col);
  } else {
    SetTextAlign(hright, vtop);
    DrawText(CursorXOffs, 0, Text, Col);
  }

  int xx = (bLeftAlign ? TextWidth(Text)+8 : CursorXOffs+10);
  SetTextAlign(hleft, vtop);
  if (Value >= 0 && Value < EnumNames.length) DrawText(xx, 0, EnumNames[Value], (IsFocus() ? CR_YELLOW : CR_TAN));
}


//==========================================================================
//
//  OnKeyDown
//
//==========================================================================
override bool OnKeyDown (int key) {
  int newValue;
  switch (key) {
    case K_LEFTARROW:
      if (Value > 0) newValue = Value-1; else newValue = EnumNames.Num-1;
      if (SetNewValue(newValue)) LocalSound('menu/change');
      return true;
    case K_RIGHTARROW:
    case K_ENTER:
    case K_PADENTER:
    case K_MOUSE1:
      if (Value < EnumNames.Num-1) newValue = Value+1; else newValue = 0;
      if (SetNewValue(newValue)) LocalSound('menu/change');
      return true;
  }
  return false;
}


override void OnMouseClick (int X, int Y) {
  SetFocus();
  int newValue = (Value < EnumNames.Num-1 ? Value+1 : 0);
  if (SetNewValue(newValue)) LocalSound('menu/change');
}


override void OnRMouseClick (int X, int Y) {
  SetFocus();
  int newValue = (Value > 0 ? Value-1 : EnumNames.Num-1);
  if (SetNewValue(newValue)) LocalSound('menu/change');
}


defaultproperties
{
  Width = 360;
  Height = 10;
  cvarSession = '';
}
