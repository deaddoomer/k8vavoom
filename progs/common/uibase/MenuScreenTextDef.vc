//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenTextDef : MenuScreen;

string defFileName;
name menuName;
bool isControls;


//==========================================================================
//
//  LoadMenu
//
//==========================================================================
final static MenuDefinition LoadMenu (string defFileName) {
  if (!defFileName) FatalError("undefined menudef");
  auto par = MenuDefinition.openParser(defFileName);
  scope(exit) delete par;
  par.Expect("menudef");
  auto mdef = SpawnObject(MenuDefinition);
  mdef.parse(par);
  return mdef;
}


//==========================================================================
//
//  CreateMenu
//
//==========================================================================
override void CreateMenu () {
  if (defFileName == " <custom> ") {
    ::CreateMenu();
  } else {
    auto mdef = LoadMenu(defFileName);
    scope(exit) delete mdef;
    //mdef.dump();
    CreateMenuFromDef(mdef);
  }
}


//==========================================================================
//
//  CreateMenuItemsFromList
//
//==========================================================================
void CreateMenuItemsFromList (ref array!MenuDefOptionBase options) {
  foreach (auto opt; options) {
    if (!opt.test()) continue;
    if (opt isa MenuDefOptionModSubMenus) {
      auto smm = MenuDefOptionModSubMenus(opt);
      CreateMenuItemsFromList(smm.options);
      continue;
    }
    auto xlen = Items.length;
    auto mc = opt.CreateOption(self);
    if (mc) {
      if (opt.help) mc.customHelpText = opt.help;
      //printdebug("%C: mc.Width=%s; Width=%s", self, mc.Width, Width);
      mc.Width = Width;
      mc.CursorXOffs = Width/2;
      if (opt isa MenuDefOptionSubHeader) {
        mc.SetOrigin(0, GetCurrentY());
      } else {
        mc.CursorXOffsHR = Width/2;
        mc.SetOrigin(Width/2, GetCurrentY());
      }
      //currentY += mc.Height;
    }
  }
}


//==========================================================================
//
//  CreateMenuFromDef
//
//==========================================================================
void CreateMenuFromDef (MenuDefinition mdef) {
  menuName = name(mdef.menuName.toLowerCase());
  Title = mdef.title;

  if (nameicmp(mdef.seltype, 'Controls') == 0) {
    isControls = true;
    class!MenuSelectorBase cc = class!MenuSelectorBase(MenuSelector_SmallRight);
    if (cc) SelectorType = cc;
    ChoicesStartX = Width/2; //190;
    //ChoicesStartX = 0;
    //ChoicesStartY = 26;
  } else if (mdef.seltype) {
    class!MenuSelectorBase cc = class!MenuSelectorBase(FindClass(mdef.seltype));
    if (cc) SelectorType = cc;
  }

  if (!helpText) helpText = GetRootWidget().NewChild(HelpText);
  helpText.OnTop = true;
  helpText.text = "";
  CreateTitle();
  CreateBackButton();
  //currentY = ChoicesStartY;

  CreateMenuItemsFromList(mdef.options);
}


//==========================================================================
//
//  CreateTitle
//
//==========================================================================
override void CreateTitle () {
  if (Title) {
    if (!titleItem) titleItem = NewChild(MenuTitleText);
    titleItem.Width = Width;
    titleItem.Text = Title;
    //titleItem.SetOrigin(TitleX, TitleY);
    titleItem.SetOrigin(0, TitleY);
    //titleItem.centerText = true;
    //titleItem.FixSize();
  } else {
    delete titleItem;
  }
  // fix item container size
  OnConfigurationChanged();
}


//==========================================================================
//
//  CursorMoved
//
//==========================================================================
override void CursorMoved (optional bool forced) {
  ::CursorMoved(forced!optional);
  if (isControls && Selector && ClGame) {
    Selector.SetOriginCentered(Items[CursorPos].X+Items[CursorPos].CursorXOffs+ClGame.ControlColumn*90, Items[CursorPos].Y+Items[CursorPos].CursorYOffs, Items[CursorPos].Height);
  }
}


defaultproperties {
  Focusable = true;
  MenuScrollable = true;
  AllowVerticalResize = true;

  //Width = 380;
  Width = 520;
  Height = 260;
  ChoicesStartX = 200;
  //ChoicesStartY = 26;
  TitleX = 180;
  SelectorType = MenuSelector_SmallRight;
}
