//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuTextButton : MenuChoice;

name ActivateSound;
string Text;
name TextFont;
int TextHAlign;
int TextVAlign;
class!MenuScreen submenuClass;
string submenuName;
string concmd;
int hasSubMenuChecked; // <0: nope; 0: not checked; >0: ok


delegate void Activated (Object Sender);


void SetSubMenuClass (class!MenuScreen asubmenuClass) {
  submenuClass = asubmenuClass;
}


void SetSubMenuName (string menuName) {
  submenuName = menuName;
}


void SetText (string AText) {
  if (StrStartsWith(AText, "$")) {
    Text = GetLangString(AText[1..$]);
  } else {
    Text = AText;
  }
}


int CalcTextWidth () {
  SetFont(TextFont);
  return TextWidth(Text);
}


void ActivateEvent () {
  // there was(?) the bug: parent can be destroyed before activation event comes (wtf?!)
  if (!Parent) printwarn("button '%s' (%C) has no parent! pos=(%d,%d)", Text, self, X, Y);
  if (Activated) Activated(self);
  if (Parent && GetClGame()) {
    MenuScreen newMenu = none;
         if (submenuClass) newMenu = GetClGame().SpawnMenu(submenuClass);
    else if (submenuName && GetClGame().HasNamedMenuStr(submenuName)) newMenu = GetClGame().SpawnNamedMenuStr(submenuName);
    if (newMenu) {
      GetClGame().PushMenuScreen(newMenu);
    } else {
      if (submenuName) printwarn("cannot activate submenu '%s'", submenuName);
    }
  }
}


override bool OnKeyDown (int key) {
  key = ConvertBoundKey(key);
  if (key == K_ENTER || key == K_PADENTER || key == K_MOUSE1 || key == K_JOY1) {
    ActivateEvent();
    LocalSound(ActivateSound);
    return true;
  }
  return false;
}


override void OnMouseClick (int X, int Y) {
  SetFocus();
  ActivateEvent();
  LocalSound(ActivateSound);
}


void CheckSubMenu (optional bool changeEnabled) {
  if (!hasSubMenuChecked) {
    if (submenuClass) {
      hasSubMenuChecked = 1; //(submenuClass ? 1 : -1); // why not?
    } else if (submenuName) {
      if (Parent && GetClGame()) {
        hasSubMenuChecked = (GetClGame().HasNamedMenuStr(submenuName) ? 1 : -1);
      }
    }
    if (changeEnabled && hasSubMenuChecked < 0) Enabled = false;
  }
}


override void OnDraw () {
  CheckSubMenu();

  int clr = (IsFocus() ? TextColorFocus : TextColor);
  if (hasSubMenuChecked < 0 || !Enabled) clr = CR_DARKGRAY;

  SetFont(TextFont);
  SetTextAlign(TextHAlign, TextVAlign);
  DrawText(CursorXOffs, 0, Text, clr);
}


defaultproperties
{
  ActivateSound = 'menu/choose';
  TextColor = CR_UNTRANSLATED;
  TextColorFocus = CR_UNTRANSLATED;
  submenuClass = none;
}
