//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//
// message box API
//
//**************************************************************************

string YesMenuColor = "White";
string YesMenuText = "YES";

string NoMenuColor = "White";
string NoMenuText = "NO";

name QuitPromptSound = 'misc/chat';


enum MsgBoxInputType {
  None,
  YesNo,
  Keybind,
  Warning,
}

enum MessageBoxType {
  None,
  Quit,
  ControlAll,
  ControlStrife,
  ControlNonStrife,
  Shareware,
  Nightmare,
  EndGame,
  Warning,
}


// message box
struct MessageBoxState {
  bool active;
  int x;
  int y;
  int width;
  int height;
  string text; // ...and here is the message string!
  bool wantInput; // timed message = no input from user
  MessageBoxType type;
  name flatName;
  // for quit box
  name soundName;
  bool playAndQuit;
  // for yes/no
  bool currYes;
}

MessageBoxState msgboxState;

// border pics
int picBorderL;
int picBorderR;
int picBorderT;
int picBorderB;
int picBorderTL;
int picBorderTR;
int picBorderBL;
int picBorderBR;
// background pic
int picBack;


//==========================================================================
//
//  MsgBoxLoadPictures
//
//==========================================================================
void MsgBoxLoadPictures () {
  picBorderL = R_RegisterPicPath('graphics/msgbox/mbox_border_l.png');
  picBorderR = R_RegisterPicPath('graphics/msgbox/mbox_border_r.png');
  picBorderT = R_RegisterPicPath('graphics/msgbox/mbox_border_t.png');
  picBorderB = R_RegisterPicPath('graphics/msgbox/mbox_border_b.png');
  picBorderTL = R_RegisterPicPath('graphics/msgbox/mbox_border_tl.png');
  picBorderTR = R_RegisterPicPath('graphics/msgbox/mbox_border_tr.png');
  picBorderBL = R_RegisterPicPath('graphics/msgbox/mbox_border_bl.png');
  picBorderBR = R_RegisterPicPath('graphics/msgbox/mbox_border_br.png');
  picBack = R_RegisterPicPath('graphics/msgbox/mbox_background.png');
}


//==========================================================================
//
//  MsgBoxDrawBorder
//
//  Draws message box border
//
//==========================================================================
void MsgBoxDrawBorder (int x, int y, int w, int h) {
  if (!picBorderL) MsgBoxLoadPictures();

  if (w < 1 || h < 1) return;

  // top and bottom
  for (int i = 0; i < w; i += 16) {
    GRoot.DrawPic(x+i, y-4, picBorderT);
    GRoot.DrawPic(x+i, y+h, picBorderB);
  }

  // left and right
  for (int i = 0; i < h; i += 16) {
    GRoot.DrawPic(x-4, y+i, picBorderL);
    GRoot.DrawPic(x+w, y+i, picBorderR);
  }

  // corners
  GRoot.DrawPic(x-4, y-4, picBorderTL);
  GRoot.DrawPic(x+w, y-4, picBorderTR);
  GRoot.DrawPic(x-4, y+h, picBorderBL);
  GRoot.DrawPic(x+w, y+h, picBorderBR);
}


//==========================================================================
//
//  IsQuitPromptEnabled
//
//==========================================================================
bool IsQuitPromptEnabled () {
  return GetCvarB('menu_quit_prompt');
}


//==========================================================================
//
//  GetMessageBoxInputType
//
//==========================================================================
MsgBoxInputType GetMessageBoxInputType () {
  if (!msgboxState.active) return MsgBoxInputType.None;
  if (msgboxState.type >= MessageBoxType.ControlAll && msgboxState.type <= MessageBoxType.ControlNonStrife) return MsgBoxInputType.Keybind; //wtf?!
  if (!msgboxState.wantInput) return MsgBoxInputType.None;
  if (msgboxState.type == MessageBoxType.None) return MsgBoxInputType.None; //wtf?!
  if (msgboxState.type == MessageBoxType.Shareware) return MsgBoxInputType.Warning; //wtf?!
  if (msgboxState.type == MessageBoxType.Warning) return MsgBoxInputType.Warning; //wtf?!
  return MsgBoxInputType.YesNo;
}


//==========================================================================
//
//  IsMessageBoxWithMenu
//
//==========================================================================
bool IsMessageBoxWithMenu () {
  return
    msgboxState.active && msgboxState.wantInput &&
    (GetMessageBoxInputType() == MsgBoxInputType.YesNo || GetMessageBoxInputType() == MsgBoxInputType.Warning);
}


//==========================================================================
//
//  IsMessageBoxSingleButton
//
//==========================================================================
bool IsMessageBoxSingleButton () {
  return
    msgboxState.active && msgboxState.wantInput &&
    GetMessageBoxInputType() == MsgBoxInputType.Warning;
}


//==========================================================================
//
//  QuitMessageBoxSound
//
//==========================================================================
void QuitMessageBoxSound (name QuitSound) {
  if (!QuitSound) return;
  msgboxState.active = true;
  msgboxState.playAndQuit = true;
  msgboxState.soundName = QuitSound;
  StopLocalSounds();
  CmdBuf_AddText("Music stop\n");
  LocalSound(QuitSound);
}


//==========================================================================
//
//  MessageBoxSetYesNoPos
//
//==========================================================================
void MessageBoxSetYesNoPos (bool yes) {
  if (IsMessageBoxSingleButton()) yes = true; // "yes" is always at the top
  msgboxState.currYes = yes;
}


//==========================================================================
//
//  MessageBoxStartMessage
//
//==========================================================================
void MessageBoxStartMessage (string text, MessageBoxType type, bool input) {
  float ui_msgxbox_wrap_trigger = GetCvarF('ui_msgxbox_wrap_trigger');
  float ui_msgxbox_wrap_width = GetCvarF('ui_msgxbox_wrap_width');

  auto oldfont = GRoot.GetFont();
  scope(exit) GRoot.SetFont(oldfont);
  GRoot.SetFont('smallfont');

  // cannot use `.xstrip` here
  while (text && text[0] == "\n") text = text[1..$];
  while (text && text[$-1] <= 32) text = text[0..$-1];
  if (!text) text = " ";

  if (ui_msgxbox_wrap_trigger > 0 && ui_msgxbox_wrap_width > 0) {
    // split too long text
    msgboxState.width = GRoot.TextWidth(text);
    //if (msgboxState.width > GetVirtualWidth()-192) text = GRoot.SplitTextWithNewlines(text, /*GetVirtualWidth()-132*/304);
    if (float(msgboxState.width)/float(GetVirtualWidth()) > ui_msgxbox_wrap_trigger) {
      int newwdt = int(float(GetVirtualWidth())*ui_msgxbox_wrap_width);
      //print("oldwdt=%s; oldtext=<%q>", msgboxState.width, text);
      text = GRoot.SplitTextWithNewlines(text, newwdt, trimRight:true);
      //print("newwdt=%s; newtext=<%q>", newwdt, text);
    }
  }

  msgboxState.active = true;
  msgboxState.text = text;
  msgboxState.type = type;
  msgboxState.wantInput = input;
  msgboxState.currYes = true;

  //if (IsMessageBoxWithMenu()) text ~= "\n\n\n";

  int wdt = max(max(GRoot.TextWidth(text), GRoot.TextWidth(YesMenuText)), GRoot.TextWidth(NoMenuText))+16;
  wdt = (wdt+15)/16;
  wdt *= 16;

  int hgt = GRoot.TextHeight(text)+16;
  if (IsMessageBoxWithMenu()) hgt += GetMessageBoxMenuItemHeight()*(IsMessageBoxSingleButton() ? 2 : 3);
  hgt = (hgt+15)/16;
  hgt *= 16;

  msgboxState.width = min(/*304*/GetVirtualWidth()-16, wdt);
  msgboxState.height = min(/*184*/GetVirtualHeight()-16, hgt);
  msgboxState.x = (GetVirtualWidth()-wdt)/2;
  msgboxState.y = (GetVirtualHeight()-hgt)/2;

  if (GetMessageBoxInputType() == MsgBoxInputType.Keybind) SetCvar('__ui_control_waiting', 1);

  CmdBuf_AddText("HideConsole\n");
  ActivateUIMouse();
}


//==========================================================================
//
//  MessageBoxStartBindQuery
//
//  strifeMode:
//    <0: non-strife
//    >1: strife
//    =0: don't care
//
//==========================================================================
void MessageBoxStartBindQuery (MenuControlKey currctl, int strifeMode) {
  printdebug("MessageBoxStartBindQuery");
  CurrentCtl = currctl;
  auto mt = (strifeMode < 0 ? MessageBoxType.ControlNonStrife : strifeMode > 0 ? MessageBoxType.ControlStrife : MessageBoxType.ControlAll);
  MessageBoxStartMessage("Press new key\n\nESC to cancel", mt, input:false);
}


//==========================================================================
//
//  MessageBoxShowSharewareWarning
//
//==========================================================================
void MessageBoxShowSharewareWarning (optional string text) {
  if (!text) text = "ONLY AVAILABLE IN THE REGISTERED VERSION";
  MessageBoxStartMessage(text, MessageBoxType.Shareware, input:true);
}


//==========================================================================
//
//  MessageBoxShowEndGameQuery
//
//==========================================================================
void MessageBoxShowEndGameQuery (optional string text) {
  if (!text) text = "Do you really want to end the game?";
  MessageBoxStartMessage(text, MessageBoxType.EndGame, input:true);
}


//==========================================================================
//
//  MessageBoxShowSkillQuery
//
//==========================================================================
void MessageBoxShowSkillQuery (string text) {
  text = TranslateString(text.xstrip);
  if (!text) text = "Are you sure? This skill level\nisn't even remotely fair.";
  MessageBoxStartMessage(text, MessageBoxType.Nightmare, true);
}


//==========================================================================
//
//  MessageBoxShowWarning
//
//==========================================================================
override void MessageBoxShowWarning (string text) {
  text = TranslateString(text.xstrip);
  if (!text) return;
  MessageBoxStartMessage(text, MessageBoxType.Warning, true);
}


//==========================================================================
//
//  GetMessageBoxMenuItemHeight
//
//  font must be set
//
//==========================================================================
int GetMessageBoxMenuItemHeight () {
  return GRoot.FontHeight();
}


//==========================================================================
//
//  GetMessageBoxMenuTop
//
//  font must be set
//
//==========================================================================
int GetMessageBoxMenuTop () {
  return msgboxState.y+msgboxState.height-GetMessageBoxMenuItemHeight()*2-8;
}


//==========================================================================
//
//  MessageBoxGetMenuItemAt
//
//  returns -1, or menu item index
//
//==========================================================================
int MessageBoxGetMenuItemAt (int x, int y) {
  if (!IsMessageBoxWithMenu()) return -1;

  if (x < msgboxState.x+2 || x >= msgboxState.x+msgboxState.width-4) return -1;
  if (y < msgboxState.y || y >= msgboxState.y+msgboxState.height) return -1;

  auto oldfont = GRoot.GetFont();
  scope(exit) GRoot.SetFont(oldfont);
  GRoot.SetFont('smallfont');

  int fh = GetMessageBoxMenuItemHeight();
  int y0 = y-GetMessageBoxMenuTop();
  if (y0 < 0 || y0 >= fh*2) return -1;
  if (y0 >= fh && IsMessageBoxSingleButton()) return -1;

  return y0/fh;
}


//==========================================================================
//
//  MessageBoxDrawer
//
//==========================================================================
override void MessageBoxDrawer () {
  // horiz. & vertically center string and print it
  if (msgboxState.active) {
    if (!picBack) MsgBoxLoadPictures();

    GRoot.SetFont('smallfont');

    GRoot.FillRectWithFlatRepeatHandle(msgboxState.x, msgboxState.y, msgboxState.width, msgboxState.height, picBack);
    //DrawBorder(msgboxState.x, msgboxState.y, msgboxState.width, msgboxState.height);
    MsgBoxDrawBorder(msgboxState.x, msgboxState.y, msgboxState.width, msgboxState.height);
    //GRoot.DrawRect(msgboxState.x, msgboxState.y, msgboxState.width, msgboxState.height, RGB(255, 0, 0));

    bool hasMenu = IsMessageBoxWithMenu();
    int y0, fh;

    // draw yes/no selection bar
    if (hasMenu) {
      //int y0 = (GetVirtualHeight()-GRoot.TextHeight(msgboxState.text))/2;
      fh = GetMessageBoxMenuItemHeight();
      y0 = GetMessageBoxMenuTop();
      //GRoot.ShadeRect(msgboxState.x+2, y0+(msgboxState.currYes ? 0 : 1)*fh, msgboxState.width-4, fh, 0.6);
      GRoot.FillRect(msgboxState.x+2, y0+(msgboxState.currYes ? 0 : 1)*fh, msgboxState.width-4, fh, RGB(152, 205, 50), 0.6);
    }

    // draw text
    //GRoot.SetTextAlign(hcenter, vcenter);
    GRoot.SetTextAlign(hcenter, vtop);
    //GRoot.DrawText(GetVirtualWidth()/2, GetVirtualHeight()/2, msgboxState.text);
    //GRoot.DrawText(GRoot.Width/2, GRoot.Height/2, msgboxState.text);
    if (GetMessageBoxInputType() == MsgBoxInputType.Warning) {
      GRoot.DrawText(GRoot.Width/2, msgboxState.y+8, msgboxState.text, CR_RED);
    } else {
      GRoot.DrawText(GRoot.Width/2, msgboxState.y+8, msgboxState.text);
    }

    // draw menu
    if (hasMenu) {
      GRoot.SetTextAlign(hcenter, vtop);
      if (IsMessageBoxSingleButton()) {
        string okText = va("\c[%s]%s\c-", YesMenuColor, "OK");
        GRoot.DrawText(GRoot.Width/2, y0, okText);
      } else {
        string yesText = (msgboxState.currYes ? va("\c[%s]%s\c-", YesMenuColor, YesMenuText) : YesMenuText);
        string noText = (msgboxState.currYes ? NoMenuText : va("\c[%s]%s\c-", NoMenuColor, NoMenuText));
        GRoot.DrawText(GRoot.Width/2, y0, yesText);
        GRoot.DrawText(GRoot.Width/2, y0+fh, noText);
      }
    }
  }

  if (msgboxState.playAndQuit && !IsLocalSoundPlaying(msgboxState.soundName)) {
    CmdBuf_AddText("Quit\n");
  }
}


//==========================================================================
//
//  MessageBoxResponder
//
//==========================================================================
override bool MessageBoxResponder (event_t *event) {
  if (msgboxState.playAndQuit) return true;

  // take care of any messages that need input
  if (msgboxState.active && event.type == ev_keydown) {
    if (msgboxState.wantInput && (GetMessageBoxInputType() == MsgBoxInputType.YesNo || GetMessageBoxInputType() == MsgBoxInputType.Warning)) {
      // menu selection
      if (event.keycode == K_ENTER || event.keycode == K_SPACE || event.keycode == K_MOUSE1) {
        // menu selection
        event.keycode = (msgboxState.currYes || IsMessageBoxSingleButton() ? K_y : K_n);
      } else if (event.keycode == K_ESCAPE || event.keycode == K_MOUSE2) {
        MessageBoxSetYesNoPos(false);
        event.keycode = (IsMessageBoxSingleButton() ? K_y : K_n);
      } else {
        switch (Widget.ConvertBoundKey(event.keycode)) {
          case K_UPARROW:
          case K_HOME:
            MessageBoxSetYesNoPos(true);
            return true;
          case K_DOWNARROW:
          case K_END:
            MessageBoxSetYesNoPos(false);
            return true;
          case K_ENTER:
          case K_MOUSE1:
            // menu selection
            event.keycode = (msgboxState.currYes || IsMessageBoxSingleButton() ? K_y : K_n);
            break;
          // translate some keypresses to answers
          case K_t:
          case K_y:
            MessageBoxSetYesNoPos(true);
            event.keycode = K_y;
            break;
          case K_o:
          case K_n:
          case K_ESCAPE:
            MessageBoxSetYesNoPos(false);
            event.keycode = (IsMessageBoxSingleButton() ? K_y : K_n);
            break;
          default:
            // eat other keys
            return true;
        }
      }
    }

    msgboxState.active = false;
    switch (msgboxState.type) {
      case MessageBoxType.None: break;
      case MessageBoxType.Quit: QuitResponse(event->data1); break;
      case MessageBoxType.ControlAll:
      case MessageBoxType.ControlStrife:
      case MessageBoxType.ControlNonStrife:
        SetCvar('__ui_control_waiting', 0);
        ControlResponse(event->data1, msgboxState.type);
        break;
      case MessageBoxType.Shareware: SharewareResponse(event->data1); break;
      case MessageBoxType.Nightmare: VerifyNightmare(event->data1); break;
      case MessageBoxType.EndGame: EndGameResponse(event->data1); break;
      case MessageBoxType.Warning: WarningResponse(event->data1); break;
    }

    CheckAndDeactivateUIMouse();
    return true;
  }

  if (msgboxState.active && (GRoot.bMouseEnabled || GRoot.bMouseForced) && event.type == ev_uimouse) {
    //printdebug("mouse! x=%s; y=%s", GRoot.MouseX, GRoot.MouseY);
    if (msgboxState.wantInput &&
        (GetMessageBoxInputType() == MsgBoxInputType.YesNo ||
         GetMessageBoxInputType() == MsgBoxInputType.Warning))
    {
      int idx = MessageBoxGetMenuItemAt(GRoot.MouseX, GRoot.MouseY);
      if (idx >= 0) MessageBoxSetYesNoPos(idx == 0);
      return true;
    }
  }

  return false;
}


//==========================================================================
//
//  MessageBoxActive
//
//==========================================================================
override bool MessageBoxActive () {
  return msgboxState.active;
}


//==========================================================================
//
//  ControlResponse
//
//==========================================================================
void ControlResponse (int key, int msgtype) {
  string kb_down;
  string kb_up;
  int key1;
  int key2;
  int strifeMode = 0;

  switch (msgtype) {
    case MessageBoxType.ControlAll: strifeMode = 0; break;
    case MessageBoxType.ControlStrife: strifeMode = 1; break;
    case MessageBoxType.ControlNonStrife: strifeMode = -1; break;
    default: return;
  }

  if (key != K_ESCAPE) {
    kb_down = CurrentCtl.CommandOn;
    kb_up = CurrentCtl.CommandOff;
    // old keyconf can register binding like 'addmenukey "Reload" +d_reload'
    // there is prolly '-d_reload' too, so force it here
    if (kb_down && !kb_up && kb_down[0] == "+" && kb_down.strIndexOf(";") < 0) kb_up = "-"~kb_down[1..$];
    if (kb_up == " " || kb_up == ";") kb_up = "";
    int isActive;
    IN_GetBindingKeys(kb_down, &key1, &key2, strifeMode, CurrentCtl.ModSection, out isActive);
    if (ControlColumn == 0) {
      IN_SetBinding(key1, "", "", strifeMode, CurrentCtl.ModSection);
      IN_SetBinding(key, kb_down, kb_up, strifeMode, CurrentCtl.ModSection);
    }
    if (ControlColumn == 1) {
      IN_SetBinding(key2, "", "", strifeMode, CurrentCtl.ModSection);
      IN_SetBinding(key, kb_down, kb_up, strifeMode, CurrentCtl.ModSection);
    }
  }
}


//==========================================================================
//
//  VerifyNightmare
//
//  Realy nightmare skill?
//
//==========================================================================
void VerifyNightmare (int ch) {
  if (ch != K_y && ch != K_t) return;
  NewGame(SkillToConfirm);
}


//==========================================================================
//
//  EndGameResponse
//
//==========================================================================
void EndGameResponse (int ch) {
  if (ch != K_y && ch != K_t) return;
  CmdBuf_AddText("Disconnect\n");
}


//==========================================================================
//
//  WarningResponse
//
//==========================================================================
void WarningResponse (int ch) {
  if (ch != K_y && ch != K_t) return;
  msgboxState.active = false;
}


//==========================================================================
//
//  GetQuitPromptText
//
//  override this in subclasses
//
//==========================================================================
string GetQuitPromptText () {
  return "";
}


//==========================================================================
//
//  GetQuitPromptSound
//
//  override this in subclasses
//
//==========================================================================
name GetQuitPromptSound () {
  return '';
}


//==========================================================================
//
//  ShowQuitPrompt
//
//==========================================================================
void ShowQuitPrompt () {
  if (!IsQuitPromptEnabled()) { CmdBuf_AddText("Quit\n"); return; }
  if (QuitPromptSound) LocalSound('misc/chat');
  string text = GetQuitPromptText();
  if (!text) text = "ARE YOU SURE YOU WANT TO QUIT?";
  MessageBoxStartMessage(text, MessageBoxType.Quit, input:true);
}


//==========================================================================
//
//  QuitResponse
//
//  override this in subclasses
//
//==========================================================================
void QuitResponse (int key) {
  if (key != K_y) return;
  // continue to show message box?
  name snd = GetQuitPromptSound();
  if (snd) {
    QuitMessageBoxSound(snd);
  } else {
    CmdBuf_AddText("Quit\n");
  }
}


//==========================================================================
//
//  SharewareResponse
//
//  override this in subclasses
//
//==========================================================================
void SharewareResponse (int key) {
  WarningResponse(key);
}
