//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
// Notify messages
//
// directly included from "StatusBarShared.vc"
//**************************************************************************


//==========================================================================
//
//  ClearNotify
//
//==========================================================================
void ClearNotify () {
  notifyMsgCount = 0;
  chatMsgCount = 0;
}


//==========================================================================
//
//  CompressMessageSlots
//
//==========================================================================
void CompressMessageSlots (ref array!NotifyMessage list, ref int count) {
  list.sort(delegate int (ref NotifyMessage a, ref NotifyMessage b) {
    if (a.time <= 0.0) {
      // timeouted messages will be moved to the end of the list
      return (b.time <= 0.0 ? 0 : 1);
    } else if (b.time <= 0.0) {
      // timeouted messages will be moved to the end of the list
      return -1;
    } else {
      float d = (a.time-b.time);
      return (d < 0 ? -1 : d > 0 ? 1 : 0);
    }
  });
  count = 0;
  while (count < list.length && list[count].time > 0.0) ++count;
}


//==========================================================================
//
//  AllocMessageSlot
//
//==========================================================================
void AllocMessageSlot (int maxcount, ref array!NotifyMessage list, ref int count, string nick, string s, float time) {
  if (time <= 0.0) return;
  if (!s) return;
  // find existing message
  NotifyMessage *msg;
  for (int n = count-1; n >= 0; --n) {
    msg = cast([unsafe])(&list[n]);
    assert(msg.time > 0.0);
    if (msg.nick == nick && msg.text == s) {
      ++msg.dupcount;
      msg.time = time;
      CompressMessageSlots(ref list, ref count);
      return;
    }
  }
  // append new message
  assert(count <= maxcount);
  if (count == maxcount) {
    foreach (int c; 1..list.length) list[c-1] = list[c];
  } else {
    if (list.length < maxcount) list.length = maxcount;
    ++count;
  }
  msg = cast([unsafe])(&list[count-1]);
  msg.dupcount = 1;
  msg.nick = nick;
  msg.text = s;
  msg.time = time;
}


//==========================================================================
//
//  AddNotifyMessage
//
//==========================================================================
void AddNotifyMessage (string Str) {
  Str = Str.xstrip;
  if (!Str) return;

  SetFont('smallfont');
  array!SplitLine Lines;
  SplitText(Str, Lines, GetVirtualWidth()-32);

  foreach (auto i; 0..Lines.length) {
    string text = Lines[i].Text.xstrip;
    if (!text) continue;
    AllocMessageSlot(NUM_NOTIFY_LINES, ref notifyMessages, ref notifyMsgCount, "", text, GetCvarF('hud_notify_time'));
  }
}


//==========================================================================
//
//  AddChatMessage
//
//==========================================================================
void AddChatMessage (string nick, string aText) {
  aText = aText.xstrip;
  if (!aText) return;

  nick = nick.removeColors.xstrip;
  if (!nick) nick = "<dumb>";
  nick ~= ":";

  SetFont('smallfont');
  array!SplitLine Lines;
  SplitText(aText, Lines, GetVirtualWidth()-32);

  foreach (auto i; 0..Lines.length) {
    string text = Lines[i].Text.removeColors.xstrip;
    if (!text) continue;
    AllocMessageSlot(NUM_CHAT_LINES, ref chatMessages, ref chatMsgCount, nick, text, GetCvarF('hud_chat_time'));
  }
}


//==========================================================================
//
//  DrawNotify
//
//==========================================================================
void DrawNotify () {
  if (!notifyMsgCount) return;
  SetFont('smallfont');
  SetTextAlign(hleft, vtop);

  int col = GetCvar('hud_font_color');

  // notify lines
  int y = 0;
  if (GetCvar('dbg_world_think_vm_time') || GetCvar('dbg_world_think_decal_time') || GetCvar('draw_gc_stats')) y += FontHeight();

  foreach (ref NotifyMessage msg; notifyMessages) {
    if (msg.time > 0.0) {
      DrawText(4, y, (msg.dupcount > 1 ? va("%s  \c[darkgreen]x%s", msg.text, msg.dupcount) : msg.text), col);
      y += FontHeight();
    }
  }
}


//==========================================================================
//
//  DrawChat
//
//==========================================================================
void DrawChat () {
  if (!chatMsgCount) return;
  SetFont('smallfont');
  SetTextAlign(hleft, vtop);

  int ncol = GetCvar('hud_chat_nick_color');
  int tcol = GetCvar('hud_chat_text_color');

  // count messages
  int y = Height-64;
  foreach (ref NotifyMessage msg; chatMessages) {
    if (msg.time > 0.0) y -= FontHeight();
  }

  foreach (ref NotifyMessage msg; chatMessages) {
    if (msg.time > 0.0) {
      DrawText(4, y, msg.nick, ncol);
      DrawText(4+TextWidth(msg.nick)+2, y, (msg.dupcount > 1 ? va("%s  \c[darkgreen]x%s", msg.text, msg.dupcount) : msg.text), tcol);
      y += FontHeight();
    }
  }
}


//==========================================================================
//
//  UpdateNotify
//
//==========================================================================
void UpdateNotify (float DeltaTime) {
  if (!notifyMsgCount) return;
  bool changed = false;
  foreach (ref NotifyMessage msg; notifyMessages) {
    if (msg.time > 0.0) { changed = true; msg.time -= DeltaTime; }
  }
  if (changed) CompressMessageSlots(ref notifyMessages, ref notifyMsgCount);
}


//==========================================================================
//
//  UpdateChat
//
//==========================================================================
void UpdateChat (float DeltaTime) {
  if (!chatMsgCount) return;
  bool changed = false;
  foreach (ref NotifyMessage msg; chatMessages) {
    if (msg.time > 0.0) { changed = true; msg.time -= DeltaTime; }
  }
  if (changed) CompressMessageSlots(ref chatMessages, ref chatMsgCount);
}
