//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class HUDMessage : Widget;

/*ClientGameShared*/ClientGameBase ClGame;

int Id; // ID, used as a priority or to replace a previous message

array!SplitLine MsgLines;
name MsgFont;
string MsgText;
int MsgColor;
float MsgAlpha;

// calculated size of the message box
int MsgWidth;
int MsgHeight;

// message location
float MsgX;
float MsgY;

int HudWidth;
int HudHeight;
//bool isTextFont;

bool bCenterX; // true if text lines should be centered
bool bNoWrap;
int DrawMsgX, DrawMsgY;

bool isHealthBar;

float HoldTime;
float Time;

float hbarCurr, hbarMax; // health

int hbarPicBack = -1;
int hbarPicFill = -1;
int hbarPicBorder = -1;


//==========================================================================
//
//  IntegralScale
//
//==========================================================================
bool IntegralScale () {
  int div = 1;
  int wdt = Parent.Width, hgt = Parent.Height;
  while (wdt/div >= 640 && hgt/div >= 400) ++div;
  if (div > 1) --div;
  int mywdt = Parent.Width/div;
  int myhgt = Parent.Height/div;
  float scaleX = float(Parent.Width)/float(mywdt);
  float scaleY = float(Parent.Height)/float(myhgt);
  int xofs = int((Parent.Width-mywdt*scaleX)/2);
  int yofs = int((Parent.Height-myhgt*scaleY)/2);
  return SetConfiguration(xofs, yofs, mywdt, myhgt, scaleX, scaleY);
}


//==========================================================================
//
//  FullscreenScaleSize
//
//==========================================================================
bool FullscreenScaleSize (int mywdt, int myhgt, optional bool proportional) {
  //SetSize(Parent.Width, Parent.Height);
  float ratio = R_GetAspectRatioValue()*(3.0/4.0);
  if (!ratio) ratio = 1.0;
  float pwdt = (proportional || true ? float(Parent.Width)/ratio : float(Parent.Width));
  //printdebug("ratio=%s", R_GetAspectRatio());
  float scaleX = float(pwdt)/float(mywdt);
  float scaleY = float(Parent.Height)/float(myhgt);
  if (proportional) {
    float scale = fmin(scaleX, scaleY);
    int xofs = int((Parent.Width-mywdt*scale)/2);
    int yofs = int((Parent.Height-myhgt*scale)/2);
    //printdebug("ratio=%s (%s); xofs=%s; yofs=%s; scale=%s (%s:%s)", R_GetAspectRatio(), R_GetAspectRatioValue(), xofs, yofs, scale, scaleX, scaleY);
    return SetConfiguration(xofs, yofs, mywdt, myhgt, scale, scale);
  } else {
    int xofs = int((Parent.Width-mywdt*scaleX)/2);
    int yofs = int((Parent.Height-myhgt*scaleY)/2);
    return SetConfiguration(xofs, yofs, mywdt, myhgt, scaleX, scaleY);
  }
}


//==========================================================================
//
//  FullscreenScale
//
//==========================================================================
bool FullscreenScale () {
  return FullscreenScaleSize(640, 480, proportional:true);
}


//==========================================================================
//
//  FixSize
//
//==========================================================================
bool FixSize () {
  if (!HudWidth || !HudHeight) {
    //return IntegralScale();
    return FullscreenScale();
  } else {
    //FIXME: negative HUD height means "ignore statusbar"
    return FullscreenScaleSize(HudWidth, abs(HudHeight), proportional:false);
  }
}


//==========================================================================
//
//  CalcMsgCoords
//
//==========================================================================
void CalcMsgCoords () {
  //printdebug("ratio=%s", R_GetAspectRatio());

  // split message, and calculate message size
  MsgLines.length = 0;
  SetFont(MsgFont);
  if (bNoWrap) {
    MsgLines.length = 1;
    MsgLines[0].Text = MsgText;
    MsgLines[0].Width = TextWidth(MsgLines[0].Text);
  } else {
    /*MsgHeight =*/ SplitText(MsgText, MsgLines, Width);
  }
  MsgWidth = 0;
  MsgHeight = 0;
  foreach (auto ref line; MsgLines) {
    MsgWidth = max(MsgWidth, line.Width);
    MsgHeight += FontHeight();
  }
  if (MsgWidth < 1) MsgWidth = 1;
  if (MsgHeight < 1) MsgHeight = 1;

  //printdebug("id=%s: pos=(%s,%s); size=(%sx%s), hud=(%sx%s); font=<%s>; text=\"%q\"", Id, MsgX, MsgY, Width, Height, HudWidth, HudHeight, MsgFont, MsgText);
  //printdebug("  linecount=%s; msgsize=(%sx%s)", MsgLines.length, MsgWidth, MsgHeight);

  if (!HudWidth || !HudHeight) {
    // default size

    // x coord
    // [-2.0, -1.0): Same as [-1.0,0.0), but center each line inside box
    // [-1.0, 0.0): Position between left and right edge of screen
    // [0.0, 1.0]: Position between left and right edge valid box locations
    // (1.0, 2.0]: Same as [0.0,1.0], but center each line inside box
    if (MsgX < 0) {
      // screen coords
      bCenterX = (MsgX < -1.0f);
      float nx;
      if (bCenterX) {
        nx = fclamp(MsgX+2, 0.0f, 1.0f);
      } else {
        nx = fclamp(MsgX+1, 0.0f, 1.0f);
      }
      DrawMsgX = int(nx*Width);
    } else {
      // box coords
      bCenterX = (MsgX > 1.0f);
      float nx;
      if (bCenterX) {
        nx = fclamp(MsgX-1, 0.0f, 1.0f);
      } else {
        nx = fclamp(MsgX, 0.0f, 1.0f);
      }
      DrawMsgX = int(nx*(Width-MsgWidth));
    }

    // y coord
    // [-1.0, 0.0): Position between top and bottom edge of screen
    // [ 0.0, 1.0]: Position between top and bottom of valid box locations
    if (MsgY < 0) {
      // screen coords
      float ny = fclamp(MsgY+1, 0.0f, 1.0f);
      DrawMsgY = int(ny*Height);
    } else {
      // box coords
      float ny = fclamp(MsgY, 0.0f, 1.0f);
      DrawMsgY = int(ny*(Height-MsgHeight));
    }
  } else {
    //wrapWidth
    DrawMsgX = int(MsgX);
    DrawMsgY = int(MsgY);
    int FracPart;

    FracPart = int(fabs(MsgX-DrawMsgX)*10.0+0.5)%10;
    // fractional part specifies alignment:
    //   0 - center
    //   1 - left
    //   2 - right
    switch (FracPart&3) {
      case 0: DrawMsgX -= MsgWidth/2; break;
      case 2: DrawMsgX -= MsgWidth; break;
    }
    bCenterX = !!(FracPart&4);

    FracPart = int(fabs(MsgY-DrawMsgY)*10.0+0.5)%10;
    // fractional part specifies alignment:
    //   0 - center
    //   1 - top
    //   2 - bottom
    switch (FracPart&3) {
      case 0: DrawMsgY -= MsgHeight/2; break;
      case 2: DrawMsgY -= MsgHeight; break;
    }
  }
  //printdebug("  drawpos=(%s,%s)", DrawMsgX, DrawMsgY);
}


//==========================================================================
//
//  OnConfigurationChanged
//
//==========================================================================
override void OnConfigurationChanged () {
  if (FixSize()) CalcMsgCoords();
}


//==========================================================================
//
//  Reset
//
//==========================================================================
void Reset () {
  MsgLines.reset();
  MsgFont = default.MsgFont;
  MsgColor = default.MsgColor;
  MsgAlpha = default.MsgAlpha;
  MsgWidth = default.MsgWidth;
  MsgHeight = default.MsgHeight;
  MsgX = default.MsgX;
  MsgY = default.MsgY;
  HudWidth = default.HudWidth;
  HudHeight = default.HudHeight;
  //isTextFont = default.isTextFont;
  bCenterX = default.bCenterX;
  DrawMsgX = default.DrawMsgX;
  DrawMsgY = default.DrawMsgY;
  isHealthBar = default.isHealthBar;
  HoldTime = default.HoldTime;
  Time = default.Time;
  hbarCurr = default.hbarCurr;
  hbarMax = default.hbarMax;
  hbarPicBack = default.hbarPicBack;
  hbarPicFill = default.hbarPicFill;
  hbarPicBorder = default.hbarPicBorder;
}


//==========================================================================
//
//  HBarLoadGfx
//
//==========================================================================
void HBarLoadGfx () {
  hbarPicBack = R_RegisterPicPath('graphics/healthbar/healthbar_bottom.png');
  hbarPicFill = R_RegisterPicPath('graphics/healthbar/healthbar_top.png');
  hbarPicBorder = R_RegisterPicPath('graphics/healthbar/healthbar_border.png');
  if (hbarPicBack < 0 || hbarPicFill < 0 || hbarPicBorder < 0) {
    hbarPicBack = -666;
  }
}


//==========================================================================
//
//  IsActive
//
//==========================================================================
final bool IsActive () {
  if (!ClGame || !ClGame.Game) return true; // just in case
  if (ClGame.Game.isPaused) return false; // paused
  return true; // active
}


//==========================================================================
//
//  Init
//
//==========================================================================
void Init (string Message, name AFont, int Type, int AId, int Color,
  float AMsgX, float AMsgY, int AHudWidth, int AHudHeight, float AHoldTime,
  float Time1, float Time2, float Alpha, bool NoWrap)
{
  Time = 0;

  // health bar: Time1 is current health, Time2 is max health, Message is name

  //print("HUDMSG(%d): font=[%s]; pos=(%f,%f); size=(%d,%d); msg=<%q>; HoldTime=%s; times=(%s,%s)", AId, AFont, AMsgX, AMsgY, AHudWidth, AHudHeight, Message, AHoldTime, Time1, Time2);

  Id = AId;
  MsgFont = AFont;
  if (!MsgFont) { MsgFont = 'smallfont'; AFont = MsgFont; }
  MsgColor = Color;
  MsgText = Message;
  HoldTime = AHoldTime;
  HoldTime = fclamp(HoldTime, 0, 100000); // 0 MEANS ALOT HERE!
  HudWidth = AHudWidth;
  HudHeight = AHudHeight;
  MsgX = AMsgX;
  MsgY = AMsgY;
  //if (HoldTime > 0) HoldTime += 0.5/35.0;

  if (AFont == 'HEALTHBAR') {
    MsgFont = 'smallfont';
    HBarLoadGfx();
    isHealthBar = true;
    hbarCurr = fmax(0, Time1);
    hbarMax = fmax(1, Time2);
    bCenterX = true;
    MsgAlpha = fclamp(GetCvarF('k8HealthBarAlpha'), 0, 1);
    HoldTime = 0.25;
    bNoWrap = true;
  } else {
    isHealthBar = false;
    // negative alpha means "additive"; not implemented yet
    MsgAlpha = fclamp(fabs(Alpha), 0.0, 1.0);
    bNoWrap = NoWrap;
  }

  /*
  isTextFont =
    (nameicmp(AFont, 'confont') == 0) ||
    (nameicmp(AFont, 'smallfont') == 0) ||
    (nameicmp(AFont, 'smallfont2') == 0) ||
    (nameicmp(AFont, 'bigfont') == 0);
  */
  /*
  if (GetCvarB('hud_scale_messages')) {
  }
  */
  //if (isHealthBar) isTextFont = false;

  FixSize();
  CalcMsgCoords();
}


//==========================================================================
//
//  DrawTextLine
//
//  this will be overriden in inherited classes
//
//==========================================================================
void DrawTextLine (int LineIdx, int x, int y, string Text) {
  //float alpha = (isTextFont ? MsgAlpha : (MsgAlpha >= 1 ? 0.99 : MsgAlpha));
  DrawText(x, y, Text, MsgColor, CR_YELLOW, fclamp(MsgAlpha, 0.0f, 1.0f));
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  float alpha = fclamp(MsgAlpha, 0.0f, 1.0f);// : (MsgAlpha >= 1 ? 0.99 : MsgAlpha));
  if (alpha == 0) return;

  SetFont(MsgFont);
  SetTextAlign(hleft, vtop);

  int y;
  if (isHealthBar) {
    y = int(Height*0.1);
    if (hbarPicBack > 0) {
      // hbarPicBorder: 320x16
      // hbarPicBack: 316x10
      // hbarPicFill: 316x10
      int picX = (Width-320)/2;
      /* not
      R_DrawPic(picX, y, hbarPicBorder);
      R_DrawPic(picX, y, hbarPicBack);
      R_DrawPicPart(picX, y, fclamp(hbarCurr/hbarMax, 0, 1), 1, hbarPicFill);
      */
      float used = fclamp(hbarCurr/hbarMax, 0, 1);
      //used = 0.3;
      DrawPic(picX, y, hbarPicBorder, MsgAlpha);
      if (used > 0) DrawPicPart(picX, y, used, 1, hbarPicFill, MsgAlpha);
      if (used < 1) DrawPicPartEx(picX, y, used, 0, 1, 1, hbarPicBack, MsgAlpha);
      y += 16;
    }
    bCenterX = true;
    DrawMsgX = (Width-MsgWidth)/2;
  } else {
    y = DrawMsgY;
  }

  foreach (int idx, auto ref line; MsgLines) {
    int x = DrawMsgX+(bCenterX ? (MsgWidth-line.Width)/2 : 0);
    DrawTextLine(idx, x, y, line.Text);
    y += FontHeight();
  }
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  if (!IsActive) return; // do not tick when game is paused
  if (FixSize()) CalcMsgCoords();
  if (HoldTime && Time > HoldTime) {
    if (isHealthBar) {
      while (MsgAlpha > 0 && Time > HoldTime) {
        MsgAlpha -= 0.05;
        HoldTime += 0.05;
      }
      if (MsgAlpha <= 0) {
        Destroy();
        return;
      }
    } else {
      //print("  %C(%s): TIME=%s; HoldTime=%s; tfrm=%s; htfrm=%s; <%q>", self, UniqueId, Time, HoldTime, Time/35.0, HoldTime/35.0, (MsgLines.length ? MsgLines[0].Text : "<>"));
      Destroy();
      return;
    }
  }
  // moved here, so messages won't blink
  Time += DeltaTime;
}


defaultproperties {
  Width = 640;
  Height = 480;
  bTickEnabled = true;
  MsgAlpha = 1.0;
}
