//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class HUDMessageFadeInOut : HUDMessage;

int State;
float FadeInTime;
float FadeOutTime;


//==========================================================================
//
//  Reset
//
//==========================================================================
override void Reset () {
  ::Reset();
  State = default.State;
  FadeInTime = default.FadeInTime;
  FadeOutTime = default.FadeOutTime;
}


//==========================================================================
//
//  Init
//
//==========================================================================
override void Init (string Message, name AFont, int Type, int AId, int Color,
                    float AMsgX, float AMsgY, int AHudWidth, int AHudHeight, float AHoldTime,
                    float Time1, float Time2, float Alpha, bool NoWrap)
{
  ::Init(Message, AFont, Type, AId, Color, AMsgX, AMsgY, AHudWidth, AHudHeight, AHoldTime, Time1, Time2, Alpha, NoWrap);
  Time1 = fclamp(Time1, 0, 100000);
  Time2 = fclamp(Time2, 0, 100000);
  HoldTime = fclamp(HoldTime, 0, 100000);
  FadeInTime = Time1;
  FadeOutTime = Time2;
  if (!HoldTime) HoldTime = 1.0/35.0;
  if (!FadeInTime) FadeInTime = 1.0/35.0;
  if (!FadeOutTime) FadeOutTime = 1.0/35.0;
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  if (!IsActive) return; // do not tick when game is paused
  //Time += DeltaTime;
  switch (State) {
    case 0:
      if (Time > FadeInTime || !FadeInTime) {
        State = 1;
        MsgAlpha = 1.0;
        Time -= FadeInTime;
        //return;
        goto case;
      }
      MsgAlpha = fclamp((FadeInTime ? Time/FadeInTime : 1.0), 0, 1);
      break;
    case 1:
      if (Time > HoldTime) {
        State = 2;
        Time -= HoldTime;
        //return;
        goto case;
      }
      break;
    case 2:
      if (Time > FadeOutTime || !FadeOutTime) {
        Destroy();
        return;
      }
      MsgAlpha = fclamp((FadeOutTime ? 1.0-Time/FadeOutTime : 0.0), 0.0, 1.0);
      break;
  }
  // moved here, so messages won't blink
  Time += DeltaTime;
}


defaultproperties {
  MsgAlpha = 0.0;
}
