//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
#define HUD_ALLOW_REUSE

class HUDMessageContainer : Widget;

ClientGameBase ClGame;


//==========================================================================
//
//  OnCreate
//
//==========================================================================
override void OnCreate () {
  ::OnCreate();
  /*
  Width = GetVirtualWidth();
  Height = GetVirtualHeight();
  */
  FixWidgetSize();
}


//==========================================================================
//
//  Tick
//
//==========================================================================
void FixWidgetSize () {
  SetSize(Parent.Width, Parent.Height);
  /*
  //SetFullScaledSize(640, 400, proportional:true, aspect:1.0);
  int div = 1;
  int wdt = Parent.Width, hgt = Parent.Height;
  while (wdt/div >= 640 && hgt/div >= 400) ++div;
  if (div > 1) --div;
  int mywdt = Parent.Width/div;
  int myhgt = Parent.Height/div;
  float scaleX = float(Parent.Width)/float(mywdt);
  float scaleY = float(Parent.Height)/float(myhgt);
  int xofs = int((Parent.Width-mywdt*scaleX)/2);
  int yofs = int((Parent.Height-myhgt*scaleY)/2);
  SetConfiguration(xofs, yofs, mywdt, myhgt, scaleX, scaleY);
  */
}


//==========================================================================
//
//  OnConfigurationChanged
//
//==========================================================================
override void OnConfigurationChanged () {
  for (auto Probe = FirstChild; Probe; Probe = Probe.Next) {
    HUDMessage m = HUDMessage(Probe);
    if (m) {
      m.SetSize(Width, Height);
    }
  }
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  FixWidgetSize();
}


//==========================================================================
//
//  ClearHudMessages
//
//==========================================================================
void ClearHudMessages () {
  DestroyAllChildren();
}


//==========================================================================
//
//  AddHudMessage
//
//==========================================================================
void AddHudMessage (string Message, name aFont, int Type, int Id, int Color,
  string ColorName, float x, float y, int HudWidth, int HudHeight,
  float HoldTime, float Time1, float Time2, float Alpha)
{
  Widget Probe;
  HUDMessage Msg;
  //bool isHealthBar = false;

  class!HUDMessage hudClass = none;

  if (aFont == 'HEALTHBAR') {
    if (!Id || Id == 0xffffffff) return; // orphaned
    hudClass = HUDMessage;
    //isHealthBar = true;
    Type = HUDMSG_PLAIN; // just in case
  } else {
    switch (Type&0xff) {
      default: case HUDMSG_PLAIN: hudClass = HUDMessage; break;
      case HUDMSG_FADEOUT: hudClass = HUDMessageFadeOut; break;
      case HUDMSG_TYPEON: hudClass = HUDMessageTypeOnFadeOut; break;
      case HUDMSG_FADEINOUT: hudClass = HUDMessageFadeInOut; break;
    }
  }

  // log to console if needed.
  if (Type&HUDMSG_LOG) {
    //print("\ci<------------------------------->");
    print("\c[red]ACS:\c[normal] %s%s", TextColorString(Color), Message);
    //print("\ci<------------------------------->");
    Type &= ~HUDMSG_LOG;
  }
  //printdebug("id=%s; font=%s; x=%f; y=%f; size=(%dx%d); hold=%f; t1=%f; t2=%f; msg=<%q>", Id, aFont, x, y, HudWidth, HudHeight, HoldTime, Time1, Time2, Message);

  // handle colors specified by name
  if (Type&HUDMSG_COLORSTRING) Color = FindTextColor(ColorName);

  #ifdef HUD_ALLOW_REUSE
  HUDMessage hudReuse = none;
  #endif

  // reuse previous message with the same ID, if possible
  if (Id && Id != 0xffffffff) {
    for (Probe = FirstChild; Probe; Probe = Probe.Next) {
      if (HUDMessage(Probe).Id == Id) {
        //print("*** found and destroyed old HUD message with id %d", Id);
        #ifdef HUD_ALLOW_REUSE
        if (Probe.Class == hudClass) {
          hudReuse = HUDMessage(Probe);
        } else
        #endif
        {
          delete Probe;
        }
        break;
      }
    }
    //print("*** new HUD message with id %d", Id);
  } else {
    // is this orphaned message with infinite hold time?
    if (HoldTime <= 0 && (Type&0xffff) == HUDMSG_PLAIN) {
      // yes, don't allow it, or we may get HUD message spam
      HoldTime = 0.5;
    }
  }

  #ifdef HUD_ALLOW_REUSE
  //printdebug("id=%s; font=%s; x=%f; y=%f; size=(%dx%d); hold=%f; t1=%f; t2=%f; msg=<%q>; reuse=%C", Id, aFont, x, y, HudWidth, HudHeight, HoldTime, Time1, Time2, Message, hudReuse);
  if (hudReuse) {
    Msg = hudReuse;
    Msg.Reset();
  } else
  #endif
  {
    Msg = NewChild(hudClass);
  }
  //printdebug("id=%s; obj=%C(%s)", Id, Msg, Msg.UniqueId);

  Msg.ClGame = ClGame;

  Msg.Init(Message, aFont, Type, Id, Color, x, y, HudWidth, HudHeight, HoldTime, Time1, Time2, Alpha, !!(Type&HUDMSG_NOWRAP));

  // insert in the list in the proper location
  #ifdef HUD_ALLOW_REUSE
  if (!hudReuse)
  #endif
  {
    Probe = FirstChild;
    while (Probe && (Probe == Msg || HUDMessage(Probe).Id > Id)) Probe = Probe.Next;
    if (Probe) Msg.MoveBefore(Probe);
  }
  //Msg.dumpClipRect("MSG02");

  /*
  printdebug("==============");
  for (Probe = FirstChild; Probe; Probe = Probe.Next) {
    if (HUDMessage(Probe)) {
      HUDMessage m = HUDMessage(Probe);
      printdebug("  %C:%s: Id=%s; Time=%s; HoldTime=%s; bTickEnabled=%B", m, m.UniqueId, m.Id, m.Time, m.HoldTime, m.bTickEnabled);
    } else {
      printdebug("  %C:%s", Probe, Probe.UniqueId);
    }
  }
  */

  /*
  int count = 0;
  for (Probe = FirstChild; Probe; Probe = Probe.Next) ++count;
  if (count) {
    print("=== HUD MESSAGES: %d", count);
    for (Probe = FirstChild; Probe; Probe = Probe.Next) print("  %C (%d)", Probe, HUDMessage(Probe).Id);
  }
  */
}


defaultproperties {
  bTickEnabled = true;
  Width = 640;
  Height = 400;
}
