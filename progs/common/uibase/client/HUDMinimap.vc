//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class HUDMinimap : Widget;


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  float darken = fclamp(GetCvarF('minimap_darken'), 0.0, 1.0);
  ShadeRect(0, 0, Width, Height, darken);

  float xc, yc, angle, plrangle;
  if (!AM_GetPlayerPos(out xc, out yc, out angle)) return;

  if (!GetCvarB('minimap_rotate')) {
    plrangle = angle;
    angle = 0.0f;
  } else {
    plrangle = 0.0f;
  }

  float alpha = fclamp(GetCvarF('minimap_alpha'), 0.0, 1.0);
  float scale = GetCvarF('minimap_scale');
  if (scale <= 0.0f) return;
  scale = 1.0f/scale;

  AM_DrawAtWidget(self, xc, yc, scale:scale, angle:angle, plrangle:plrangle, alpha:alpha);
}


defaultproperties {
  Visible = false;
  Focusable = false;
  //bUseScissor = true;
  //bWantMouseInput = false;
}
