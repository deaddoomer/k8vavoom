//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ClientGameShared : LineSpecialClientGame abstract;

// for gzdoom
struct OptionValueDef {
  string caption;
  float value;
}

struct OptionValue {
  string Name;
  array!OptionValueDef list;
}

array!OptionValue optvals;

transient dictionary!(name, int) savedChoices; // menu name, saved choice

const int MAX_MENU_STACK = 64;

StatusBarShared GSBar;

array!MenuScreen menuStack;

MenuScreen CurrentMenuScreen;

MenuControlKey CurrentCtl;
int ControlColumn; // menu column for controls

int MenuPClass;
name MenuStartMap;
string SkillClassName;
int SkillToConfirm;


int BigSelectorXOffset;
int BigSelectorYOffset;
int BigSelectorAnimSpeed;
array!name BigSelectorAnimFrames;

name DefaultFinaleMusic;
name DefaultFinaleType;


array!MenuDefinition menudefs;
dictionary!(string, class!MenuScreen) namedmenus;


#include "ClientGameShared.msgbox.vc"


//==========================================================================
//
//  PostSpawn
//
//  called after the engine spawned the object
//
//==========================================================================
void PostSpawn () {
  LoadMenuDefs();
  LoadGZMenuDefs();
}


//==========================================================================
//
//  ActivateUIMouse
//
//==========================================================================
void ActivateUIMouse () {
  SetCvar('__ui_active', 1);
  if (GRoot && !GRoot.bMouseEnabled && GetCvarB('ui_mouse')) GRoot.SetMouse(true);
}


//==========================================================================
//
//  DeactivateUIMouse
//
//==========================================================================
void DeactivateUIMouse () {
  SetCvar('__ui_active', 0);
  if (GRoot && GRoot.bMouseEnabled) GRoot.SetMouse(false);
}


//==========================================================================
//
//  CheckAndDeactivateUIMouse
//
//==========================================================================
void CheckAndDeactivateUIMouse () {
  if (menuStack.length) return;
  if (CurrentMenuScreen) return;
  if (MessageBoxActive()) return;
  DeactivateUIMouse();
}


//**************************************************************************
//
// menu filter API
//
//**************************************************************************

//==========================================================================
//
//  MenuFilterOptionList
//
//==========================================================================
void MenuFilterOptionList (ref array!MenuDefOptionBase optlist, void delegate (MenuDefOptionBase opt) checker) {
  //printdebug("  optlist.length=%s", optlist.length);
  foreach (MenuDefOptionBase opt; optlist) {
    //printdebug("   %s", opt);
    if (MenuDefOptionSubHeader(opt)) continue; // ignore subheaders
    if (MenuDefOptionControls(opt)) continue; // ignore controls
    if (MenuDefOptionBind(opt)) continue; // ignore bind
    if (!opt.test()) continue; // condition failed
    auto mmo = MenuDefOptionModSubMenus(opt);
    if (mmo) { MenuFilterOptionList(mmo.options, checker); continue; }
    checker(opt);
  }
}


//==========================================================================
//
//  MenuCollectFilteredOptions
//
//==========================================================================
void MenuCollectFilteredOptions (void delegate (MenuDefOptionBase opt) checker) {
  assert(checker);
  foreach (MenuDefinition mdef; menudefs) {
    //printdebug("::: %s :::", mdef);
    MenuFilterOptionList(mdef.options, checker);
  }
}


//==========================================================================
//
//  LoadMenuDefs
//
//==========================================================================
void LoadMenuDefs () {
  {
    auto par = MenuDefinition.openParser("//uidef/menu_list.txt");
    scope(exit) delete par;
    par.Expect("menus");
    par.Expect("{");
    while (!par.Check("}")) {
      if (par.Check(",")) continue;
      par.ExpectString();
      string fname = va("//uidef/%s", par.String);
      auto mpar = MenuScreen.CreateMenuParser(fname);
      scope(exit) delete mpar;
      for (;;) {
        MenuDefinition mdef = MenuScreen.LoadOneMenu(mpar);
        if (!mdef) break;
        if (!mdef.menuName) { delete mdef; continue; }
        menudefs[$] = mdef;
      }
    }
  }

  // load mod menus
  foreach (int lump; WadIterateNS(EWadNamespace.Global)) {
    if (W_LumpName(lump) == 'modmenu') {
      auto par = MenuDefinition.openParserFromLump(lump);
      scope(exit) delete par;
      while (par.Check("menudef")) {
        auto mdef = SpawnObject(MenuDefinition);
        mdef.parse(par);
        if (!mdef) continue;
        if (!mdef.menuName) { delete mdef; continue; }
        // try to extend menu
        if (mdef.extension) {
          MenuDefinition mtoext = none;
          foreach (MenuDefinition m; menudefs) {
            if (stricmp(m.menuName, mdef.menuName) == 0) {
              mtoext = m;
              break;
            }
          }
          if (mtoext) {
            // extend it
            auto modext = mtoext.findModSubMenuOption();
            foreach (MenuDefOptionBase opt; mdef.options) modext.options[$] = opt;
            mdef.options.clear();
            delete mdef;
            continue;
          }
        }
        // either no menu to extend found, or a brand new menu
        menudefs[$] = mdef;
      }
    }
  }

  // find mod option submenu
  /*
  MenuDefOptionModSubMenus msub = none;
  foreach (MenuDefinition mdef; menudefs) {
    if (mdef.menuName.stricmp("OptionsMenu") == 0) {
      msub = mdef.findModSubMenuOption();
      if (msub) break;
    }
  }

  // find orphan gz menus
  if (msub) {
    foreach (MenuDefinition mdef; menudefs) {
      if (mdef.menuName.stricmp("OptionsMenu") == 0) {
        msub = mdef.findModSubMenuOption();
        if (msub) break;
      }
    }
  }
  */
}


//==========================================================================
//
//  SkipGZIdiocity
//
//  section name skipped
//
//==========================================================================
void SkipGZIdiocity (ScriptsParser par) {
  if (!par.Check("{")) {
    par.ExpectString();
    par.Expect("{");
  }
  int level = 1;
  for (;;) {
    if (par.Check("{")) {
      ++level;
      continue;
    }
    if (par.Check("}")) {
      --level;
      if (level == 0) break;
      continue;
    }
    if (!par.GetString()) return;
  }
}


//==========================================================================
//
//  ParseGZOptionMenu
//
//==========================================================================
void ParseGZOptionMenu (ScriptsParser par, bool extend) {
  par.ExpectString();
  string mname = par.String.toLowerCase();
  // hack for idiotic mods that overrides the whole options menu
  bool isOptRedefine = (!extend && stricmp(mname, "OptionsMenu") == 0);
  if (isOptRedefine) extend = true;
  MenuDefinition mdef;
  int stidx = 0;
  MenuDefOptionModSubMenus suboption = none;
  if (extend) {
    foreach (auto md2; menudefs) {
      if (stricmp(string(md2.menuName), mname) == 0) {
        // i found her!
        mdef = md2;
        break;
      }
    }
    if (!mdef) {
      //par.ScriptError("cannot extend unknown menu '%s'", mname);
      printwarn("GZ-MENUDEF ERROR: cannot extend unknown menu '%s'", mname);
    } else {
      stidx = mdef.options.length;
      suboption = mdef.findModSubMenuOption();
    }
  } else {
    mdef = SpawnObject(MenuDefinition);
    mdef.menuName = mname;
    mdef.gzMenu = true;
  }
  //print("MENUDEF: %soptions menu '%s'...", (extend ? "extending " : ""), mdef.menuName);
  par.Expect("{");
  while (!par.Check("}")) {
    if (par.Check("Title")) {
      par.ExpectString();
      if (mdef && !extend) mdef.title = par.String;
      continue;
    }
    auto opt = MenuDefOptionBase.parseGZ(par);
    if (!opt) continue;
    if (!mdef) { delete opt; continue; }
    if (suboption) {
      // hack for idiotic mods that overrides the whole options menu
      if (isOptRedefine) {
        // this should be submenu
        auto sub = MenuDefOptionSubMenu(opt);
        if (!sub) { delete opt; continue; }
        // check if it is known option
        if (stricmp(sub.subname, "CustomizeControls") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "MouseOptions") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "JoystickOptions") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "PlayerMenu") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "GameplayOptions") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "CompatibilityOptions") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "AutomapOptions") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "HUDOptions") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "MiscOptions") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "SoundOptions") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "VideoOptions") == 0) { delete opt; continue; }
        if (stricmp(sub.subname, "VideoModeMenu") == 0) { delete opt; continue; }
        sub.gzPostFilter = true;
        // other things will be postfiltered
      }
      suboption.options[$] = opt;
    } else {
      mdef.options[$] = opt;
    }
  }
  if (mdef) {
    MenuDefinition.filterOptionList(mdef.options, stidx);
    if (suboption) MenuDefinition.filterOptionList(suboption.options);
    if (!extend) menudefs[$] = mdef;
  }
  /*
  // hack for some idiotic mods
  if (!extend && mdef && stricmp(mdef.menuName, "KetchupOptionsGZDoom") == 0) {
    foreach (auto md2; menudefs) {
      if (stricmp(string(md2.menuName), "OptionsMenu") == 0) {
        print("GZ: hacking in ketchup options (%s)", mdef.title);
        // i found her!
        suboption = md2.findModSubMenuOption();
        auto optsub = SpawnObject(MenuDefOptionSubMenu);
        optsub.title = mdef.title;
        optsub.subname = mdef.menuName;
        suboption.options[$] = optsub;
      }
    }
  }
  */
}


//==========================================================================
//
//  LoadGZMenuDef
//
//  parse GZDoom menudef
//
//==========================================================================
void LoadGZMenuDef (ScriptsParser par) {
  for (;;) {
    if (par.Check("AddOptionMenu")) {
      ParseGZOptionMenu(par, extend:true);
    } else if (par.Check("OptionMenu")) {
      ParseGZOptionMenu(par, extend:false);
    } else if (par.Check("OptionValue")) {
      par.ExpectString();
      int f = 0;
      while (f < optvals.length) {
        if (stricmp(optvals[f].Name, par.String) == 0) {
          optvals[f].list.length = 0;
          optvals.remove(f);
        } else {
          ++f;
        }
      }
      optvals.length += 1;
      optvals[$-1].Name = par.String;
      par.Expect("{");
      while (!par.Check("}")) {
        par.ExpectFloat(withSign:true);
        float val = par.Float;
        par.Expect(",");
        par.ExpectString();
        string cap = par.String;
        optvals[$-1].list.length += 1;
        optvals[$-1].list[$-1].caption = cap;
        optvals[$-1].list[$-1].value = val;
      }
    } else if (par.Check("OptionString")) {
      // sometimes used for "true" and "false" (colorfull hell)
      par.ExpectString();
      int f = 0;
      while (f < optvals.length) {
        if (stricmp(optvals[f].Name, par.String) == 0) {
          optvals[f].list.length = 0;
          optvals.remove(f);
        } else {
          ++f;
        }
      }
      optvals.length += 1;
      optvals[$-1].Name = par.String;
      par.Expect("{");
      while (!par.Check("}")) {
        bool ok = true;
        float val;
             if (par.CheckFloat(withSign:true)) val = par.Float;
        else if (par.Check("true")) val = 1;
        else if (par.Check("false")) val = 0;
        else if (par.Check("on")) val = 1;
        else if (par.Check("off")) val = 0;
        else ok = false;
        par.Expect(",");
        par.ExpectString();
        if (ok) {
          string cap = par.String;
          optvals[$-1].list.length += 1;
          optvals[$-1].list[$-1].caption = cap;
          optvals[$-1].list[$-1].value = val;
        }
      }
      // remove empty option
      if (optvals[$-1].list.length == 0) {
        optvals.remove(optvals.length-1);
      }
    } else {
      if (!par.GetString()) break;
      //par.ScriptError("unknown gz menudef command '%s'", par.String);
      print("GZMENU: skipping unimplemented section '%s'", par.String);
      SkipGZIdiocity(par);
    }
  }
}


//==========================================================================
//
//  LoadGZMenuDefs
//
//  parse GZDoom menudef
//
//==========================================================================
void LoadGZMenuDefs () {
  if (GetCvarB('_gz_skip_menudef')) return;

  // scan
  array!int mdlumps;
  array!bool fignore;
  foreach (int lump; WadIterateNS(EWadNamespace.Global)) {
    if (W_LumpName(lump) == 'menudef') {
      int fidx = W_LumpFile(lump);
      //printdebug("lump %s (file %s): menudef (%s)", lump, fidx, mdlumps.length);
      while (fignore.length <= fidx) fignore[$] = false;
      mdlumps[$] = lump;
    } else if (W_LumpName(lump) == 'modmenu') {
      int fidx = W_LumpFile(lump);
      //printdebug("lump %s (file %s): modmenu (%s)", lump, fidx, mdlumps.length);
      while (fignore.length <= fidx) fignore[$] = false;
      fignore[fidx] = true;
    }
  }

  foreach (int lump; mdlumps) {
    if (lump > 0) {
      int fidx = W_LumpFile(lump);
      if (fignore[fidx]) {
        //printdebug("INGNORE menudef from lump %s (%s)", lump, W_FullLumpName(lump));
        continue;
      }
      //printdebug("LOADING menudef from lump %s (%s)", lump, W_FullLumpName(lump));
      auto par = SpawnObject(ScriptsParser);
      scope(exit) delete par;
      par.OpenLumpIndex(lump);
      par.SetCMode(true);
      par.SetEscape(true);
      LoadGZMenuDef(par);
    }
  }

  // fix optionvalue forwards
  foreach (MenuDefinition mdef; menudefs) {
    mdef.fixGZOptionValues(optvals, delegate bool (string subname) {
      foreach (MenuDefinition m; menudefs) {
        if (m.gzMenu && stricmp(m.menuName, subname) == 0) return true;
      }
      return false;
    });
  }
}


//==========================================================================
//
//  GetAllMenuNames
//
//  mode:
//    -1: only gz
//     0: all
//     1: only non-gz
//
//==========================================================================
void GetAllMenuNames (ref array!string names, int mode) {
  if (mode >= 0) {
    // all
    names[$] = "Save";
    names[$] = "Load";
    names[$] = "Resolution";
    names[$] = "MenuSearch";
  }
  foreach (MenuDefinition mdef; menudefs) {
    if ((mode < 0 && !mdef.gzMenu) || (mode > 0 && mdef.gzMenu)) continue;
    if (!mdef.menuName) continue;
    names[$] = mdef.menuName;
  }
}


//==========================================================================
//
//  SetCommonMenu
//
//==========================================================================
bool SetCommonMenu (string Name) {
  if (!Name) return false;

  if (!stricmp(Name, "Save")) { PushMenuScreen(SpawnMenu(MenuScreenSaveGame)); return true; }
  if (!stricmp(Name, "Load")) { PushMenuScreen(SpawnMenu(MenuScreenLoadGame)); return true; }
  if (!stricmp(Name, "Options") || !stricmp(Name, "OptionsMenu")) { PushMenuScreen(SpawnNamedMenu('OptionsMenu')); return true; }
  if (!stricmp(Name, "Controls")) { PushMenuScreen(SpawnNamedMenu('ControlsMain')); return true; }
  if (!stricmp(Name, "Mouse")) { PushMenuScreen(SpawnNamedMenu('MouseOptions')); return true; }
  if (!stricmp(Name, "Resolution")) { PushMenuScreen(SpawnMenu(MenuScreenScreenResolution)); return true; }
  if (!stricmp(Name, "Video")) { PushMenuScreen(SpawnNamedMenu('VideoOptions')); return true; }
  if (!stricmp(Name, "Sound")) { PushMenuScreen(SpawnNamedMenu('SoundOptions')); return true; }
  if (!stricmp(Name, "MenuSearch")) { PushMenuScreen(SpawnMenu(MenuScreenSearchFilter)); return true; }
  if (!stricmp(Name, "Quit")) { ShowQuitPrompt(); return true; }

  // find textual named menu
  foreach (MenuDefinition mdef; menudefs) {
    if (stricmp(mdef.menuName, Name) == 0) {
      PushMenuScreen(SpawnNamedMenu(name(Name)));
      return true;
    }
  }

  // find named menu by classs
  Name = Name.toLowerCase;
  auto cp = namedmenus.find(Name);
  if (cp) { PushMenuScreen(SpawnMenu(*cp)); return true; }

  return false;
}


//==========================================================================
//
//  SetMenu
//
//==========================================================================
override void SetMenu (string Name) {
  if (SetCommonMenu(Name)) return;
  SetCommonMenu("Main");
}


//==========================================================================
//
//  SpawnMenu
//
//==========================================================================
MenuScreen SpawnMenu (class!MenuScreen CID) {
  class!MenuScreen rpl = class!MenuScreen(GetClassReplacement(CID));
  if (rpl) CID = rpl;
  MenuScreen m = MenuScreen(GRoot.NewChild(CID));
  m.ClGame = self;
  m.CreateMenu();
  LoadMenuChoice(m);
  return m;
}


//==========================================================================
//
//  HasNamedMenuStr
//
//  FIXME: SLOOOW!
//
//==========================================================================
bool HasNamedMenuStr (string menuName) {
  if (!menuName) return false;
  foreach (MenuDefinition mdef; menudefs) {
    if (stricmp(mdef.menuName, menuName) == 0) return true;
  }
  return false;
}


//==========================================================================
//
//  SpawnNamedMenuStr
//
//==========================================================================
MenuScreen SpawnNamedMenuStr (string menuName) {
  if (!menuName) {
    printerror("Cannot spawn unnamed menu");
    return none;
  }

  MenuDefinition mdefmain = none;
  foreach (MenuDefinition mdef; menudefs) {
    if (stricmp(mdef.menuName, menuName) == 0) {
      mdefmain = mdef;
      break;
    }
  }
  if (!mdefmain) {
    printerror("Menu '%n' not found (name)", menuName);
    return none;
  }

  // create menu
  auto m = GRoot.NewChild(MenuScreen);
  m.ClGame = self;
  m.CreateMenuFromDef(mdefmain);
  LoadMenuChoice(m);

  return m;
}


//==========================================================================
//
//  SpawnNamedMenu
//
//==========================================================================
MenuScreen SpawnNamedMenu (name menuName) {
  return SpawnNamedMenuStr(string(menuName));
}


// ////////////////////////////////////////////////////////////////////////// //
// menu stack handling
// ////////////////////////////////////////////////////////////////////////// //

//==========================================================================
//
//  PushMenuScreen
//
//==========================================================================
void PushMenuScreen (MenuScreen menu) {
  // avoid stacking menus invoked by hotkeys
  if (menu.MenuName) {
    foreach (auto i, auto msc; menuStack) {
      if (!msc) continue; // just in case
      if (msc.MenuName != menu.MenuName) continue;
      while (menuStack.length > i) {
        delete menuStack[$-1];
        menuStack.remove(menuStack.length-1);
      }
      CurrentMenuScreen = none;
      break;
    }
  }

  if (menuStack.length >= MAX_MENU_STACK) FatalError("PushMenu: menu stack overflow");

  menuStack[$] = menu;

  ActivateUIMouse();
  if (!CurrentMenuScreen) {
    CmdBuf_AddText("HideConsole\n");
    LocalSound(menu.ActivateSound);
  } else {
    CurrentMenuScreen.Hide();
  }

  CurrentMenuScreen = menu;
  CurrentMenuScreen.SetFocus();
}


//==========================================================================
//
//  SaveMenuChoice
//
//==========================================================================
void SaveMenuChoice (MenuScreen menu) {
  if (!menu) return;
  name menuName = menu.MenuName;
  if (!menuName) return;
  savedChoices.put(menuName, menu.GetChoiceForSaving());
}


//==========================================================================
//
//  LoadMenuChoice
//
//==========================================================================
void LoadMenuChoice (MenuScreen menu) {
  if (!menu) return;
  name menuName = menu.MenuName;
  if (!menuName) return;
  auto cp = savedChoices.find(menuName);
  if (!cp) return;
  menu.SetSavedChoice(*cp);
}


//==========================================================================
//
//  PopMenu
//
//==========================================================================
void PopMenu () {
  if (menuStack.length == 0) FatalError("PopMenu: menu stack underflow");
  MenuScreen menu = menuStack[$-1];
  menuStack.length -= 1;

  SaveMenuChoice(menu);

  if (menuStack.length) {
    if (menu) LocalSound(menu.DeactivateSound);
    CurrentMenuScreen = menuStack[$-1];
    CurrentMenuScreen.ShowAndActivate();
  } else {
    if (menu) LocalSound(menu.ClearMenusSound);
    CurrentMenuScreen = none;
    CheckAndDeactivateUIMouse();
  }

  delete menu;
}


//==========================================================================
//
//  ForceMenuOff
//
//==========================================================================
void ForceMenuOff () {
  foreach (ref auto msc; menuStack) {
    SaveMenuChoice(msc);
    delete msc;
  }
  menuStack.clear();
  CurrentMenuScreen = none;
  CheckAndDeactivateUIMouse();
}


//==========================================================================
//
//  DrawBorder
//
//  draw border (around message box, usually)
//
//==========================================================================
void DrawBorder (int x, int y, int w, int h, optional int ybotofs) {
}


//**************************************************************************
//
// HUD messages API
//
//**************************************************************************

//==========================================================================
//
//  AddNotifyMessage
//
//==========================================================================
override void AddNotifyMessage (string Str) {
  GSBar.AddNotifyMessage(Str);
}


//==========================================================================
//
//  AddChatMessage
//
//==========================================================================
override void AddChatMessage (string nick, string text) {
  GSBar.AddChatMessage(nick, text);
}


//==========================================================================
//
//  AddCenterMessage
//
//==========================================================================
override void AddCenterMessage (string Msg) {
  GSBar.AddCenterMessage(Msg);
}


//==========================================================================
//
//  AddHudMessage
//
//==========================================================================
override void AddHudMessage (string Message, name Font, int Type, int Id, int Color,
  string ColorName, float x, float y, int HudWidth, int HudHeight,
  float HoldTime, float Time1, float Time2, float Alpha)
{
  //print("AddHudMessage: id=%s; msg=<%q>", Id, Message);
  GSBar.AddHudMessage(Message, Font, Type, Id, Color, ColorName, x, y,
    HudWidth, HudHeight, HoldTime, Time1, Time2, Alpha);
}


//==========================================================================
//
//  SetPClass
//
//==========================================================================
void SetPClass (int PClass) {
  MenuPClass = PClass;
  SkillClassName = va("%n", class!PlayerPawn(Game.PlayerClasses[PClass]).default.SpawnClass);
  //print("EPISODES: %d", P_GetNumEpisodes());
  if (P_GetNumEpisodes() > 1) {
    PushMenuScreen(SpawnMenu(MenuScreenEpisode));
  } else {
    SetEpisode(P_GetEpisodeDef(0));
  }
}


//==========================================================================
//
//  SetEpisode
//
//==========================================================================
void SetEpisode (EpisodeDef *EDef) {
  MenuStartMap = EDef->Name;
  if (EDef->TeaserName && !IsMapPresent(EDef->Name)) MenuStartMap = EDef->TeaserName;
  if (EDef->bNoSkillMenu) {
    NewGame(2);
  } else {
    PushMenuScreen(SpawnMenu(MenuScreenSkill));
  }
}


//==========================================================================
//
//  NewGame
//
//==========================================================================
void NewGame (int SkillLevel) {
  SetCvar('Skill', SkillLevel);
  SetCvar('Class', MenuPClass);

  CmdBuf_AddText("Disconnect\n");
  CmdBuf_AddText("MaxPlayers 1\n");
  CmdBuf_AddText("Map \"%q\"\n", MenuStartMap);

  ForceMenuOff();
}


//==========================================================================
//
//  MenuResponder
//
//==========================================================================
override bool MenuResponder (event_t *event) {
  if (!CurrentMenuScreen) {
    // pop-up menu?
    if (event->type == ev_keydown && event->keycode == K_ESCAPE) {
      SetMenu("Main");
      return true;
    }
  }
  return false;
}


//==========================================================================
//
//  MenuActive
//
//==========================================================================
override bool MenuActive () {
  return (CurrentMenuScreen != none);
}


//==========================================================================
//
//  DeactivateMenu
//
//==========================================================================
override void DeactivateMenu () {
  ForceMenuOff();
}


defaultproperties {
}
