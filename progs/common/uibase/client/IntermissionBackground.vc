//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class IntermissionBackground : Widget;


enum {
  STATE_Default,
  STATE_PrevLoc,
  STATE_NextLoc,
  STATE_Done,
}


enum {
  COND_None,
  COND_IfLeaving,
  COND_IfNotLeaving,
  COND_IfEntering,
  COND_IfNotEntering,
  COND_IfVisited,
  COND_IfNotVisited,
  COND_IfTravelling,
  COND_IfNotTravelling,
}


struct AnimInfo {
  ubyte Cond;

  name MapName1;
  name MapName2;

  // location of animation
  int X;
  int Y;

  // period in seconds between animations
  float Period;

  // actual graphics for frames of animations
  array!int Pics;

  // next value of btime (used in conjunction with period)
  float NextTime;

  // next frame number to animate
  int Ctr;

  bool bOnce;
}


struct SpotInfo {
  name Map;
  int X;
  int Y;
}


ClientGameShared ClGame;

int BackgroundPic;
name BackgroundFlat;
int SplatPic;
array!int PointerPics;
bool bNoAutoStartMap;

array!AnimInfo Anims;
array!SpotInfo Spots;

// used for timing of background animation
float btime;

ubyte State;


//==========================================================================
//
//  Init
//
//==========================================================================
void Init (name Name, ubyte AState, ClientGameShared AClGame) {
  Clean();

  State = AState;
  ClGame = AClGame;

  string NameStr = string(Name);
  if (StrStartsWith(NameStr, "$")) {
    //print("INTERBG: parsing script '%s'", NameStr[1..$]);
    ParseScript(name(NameStr[1..$]));
  } else {
    BackgroundPic = R_RegisterPic(Name);
  }
}


//==========================================================================
//
//  InitPic
//
//==========================================================================
void InitPic (name Name, ClientGameShared AClGame) {
  Clean();
  ClGame = AClGame;
  BackgroundPic = R_RegisterPic(Name);
}


//==========================================================================
//
//  InitFlat
//
//==========================================================================
void InitFlat (name Name, ClientGameShared AClGame) {
  Clean();
  ClGame = AClGame;
  BackgroundFlat = Name;
}


//==========================================================================
//
//  Clean
//
//==========================================================================
void Clean () {
  BackgroundPic = 0;
  BackgroundFlat = '';
  SplatPic = 0;
  PointerPics.Num = 0;
  bNoAutoStartMap = false;
  btime = 0.0;
  Anims.Num = 0;
  Spots.Num = 0;
  State = STATE_Default;
}


//==========================================================================
//
//  ParseScript
//
//==========================================================================
void ParseScript (name ScriptName) {
  if (!WadLumpPresent(ScriptName)) {
    print("Intermission script %n doesn't exist", ScriptName);
    BackgroundPic = R_RegisterPic('interpic');
    return;
  }

  ScriptsParser sc = ScriptsParser(SpawnObject(ScriptsParser));
  sc.OpenLumpName(ScriptName);
  while (!sc.AtEnd()) {
    if (sc.Check("Background")) {
      sc.ExpectString();
      BackgroundPic = R_RegisterPic(name(strlwr(sc.String)));
      continue;
    }

    if (sc.Check("NoAutoStartMap")) {
      bNoAutoStartMap = true;
      continue;
    }

    if (sc.Check("Splat")) {
      sc.ExpectString();
      SplatPic = R_RegisterPic(name(strlwr(sc.String)));
      continue;
    }

    if (sc.Check("Pointer")) {
      while (sc.GetString()) {
        if (!sc.Crossed) {
          int i = PointerPics.Num;
          PointerPics.length = i+1;
          PointerPics[i] = R_RegisterPic(name(strlwr(sc.String)));
        } else {
          sc.UnGet();
          break;
        }
      }
      continue;
    }

    if (sc.Check("Spots")) {
      sc.Expect("{");
      while (!sc.Check("}")) {
        int i = Spots.Num;
        Spots.length = i+1;
        sc.ExpectString();
        Spots[i].Map = name(strlwr(sc.String));
        sc.ExpectNumber();
        Spots[i].X = sc.Number;
        sc.ExpectNumber();
        Spots[i].Y = sc.Number;
      }
      continue;
    }

    int i = Anims.Num;
    Anims.length = i+1;

    if (sc.Check("IfLeaving")) {
      Anims[i].Cond = COND_IfLeaving;
      sc.ExpectString();
      Anims[i].MapName1 = name(strlwr(sc.String));
    } else if (sc.Check("IfNotLeaving")) {
      Anims[i].Cond = COND_IfNotLeaving;
      sc.ExpectString();
      Anims[i].MapName1 = name(strlwr(sc.String));
    } else if (sc.Check("IfEntering")) {
      Anims[i].Cond = COND_IfEntering;
      sc.ExpectString();
      Anims[i].MapName1 = name(strlwr(sc.String));
    } else if (sc.Check("IfNotEntering")) {
      Anims[i].Cond = COND_IfNotEntering;
      sc.ExpectString();
      Anims[i].MapName1 = name(strlwr(sc.String));
    } else if (sc.Check("IfVisited")) {
      Anims[i].Cond = COND_IfVisited;
      sc.ExpectString();
      Anims[i].MapName1 = name(strlwr(sc.String));
    } else if (sc.Check("IfNotVisited")) {
      Anims[i].Cond = COND_IfNotVisited;
      sc.ExpectString();
      Anims[i].MapName1 = name(strlwr(sc.String));
    } else if (sc.Check("IfTravelling")) {
      Anims[i].Cond = COND_IfTravelling;
      sc.ExpectString();
      Anims[i].MapName1 = name(strlwr(sc.String));
      sc.ExpectString();
      Anims[i].MapName2 = name(strlwr(sc.String));
    } else if (sc.Check("IfNotTravelling")) {
      Anims[i].Cond = COND_IfTravelling;
      sc.ExpectString();
      Anims[i].MapName1 = name(strlwr(sc.String));
      sc.ExpectString();
      Anims[i].MapName2 = name(strlwr(sc.String));
    }

    if (sc.Check("Animation")) {
      sc.ExpectNumber();
      Anims[i].X = sc.Number;
      sc.ExpectNumber();
      Anims[i].Y = sc.Number;
      sc.ExpectNumber();
      Anims[i].Period = float(sc.Number) / 35.0;
      if (sc.Check("Once")) Anims[i].bOnce = true;
      sc.Expect("{");
      while (!sc.Check("}")) {
        int j = Anims[i].Pics.Num;
        Anims[i].Pics.Num = j+1;
        sc.ExpectString();
        Anims[i].Pics[j] = R_RegisterPic(name(strlwr(sc.String)));
      }
      // init variables
      Anims[i].Ctr = -1;
      // specify the next time to draw it
      Anims[i].NextTime = btime + 0.01 + Random() * Anims[i].Period;
    } else if (sc.Check("Pic")) {
      sc.ExpectNumber();
      Anims[i].X = sc.Number;
      sc.ExpectNumber();
      Anims[i].Y = sc.Number;
      Anims[i].Period = 0.0;
      Anims[i].Pics.Num = 1;
      sc.ExpectString();
      Anims[i].Pics[0] = R_RegisterPic(name(strlwr(sc.String)));
      // init variables
      Anims[i].Ctr = -1;
      // specify the next time to draw it
      Anims[i].NextTime = btime + 0.01;
    } else {
      sc.ScriptError("Bad syntax");
    }
  }
  sc.Destroy();
}


//==========================================================================
//
//  Tick
//
//  Updates stuff each frame
//
//==========================================================================
override void Tick (float DeltaTime) {
  // counter for general background animation
  btime += DeltaTime;
  for (int i = 0; i < Anims.Num; ++i) {
    if (btime >= Anims[i].NextTime) {
      Anims[i].Ctr++;
      if (Anims[i].Ctr >= Anims[i].Pics.Num) {
        if (Anims[i].bOnce) {
          Anims[i].Ctr = Anims[i].Pics.Num-1;
        } else {
          Anims[i].Ctr = 0;
        }
      }
      Anims[i].NextTime = btime+Anims[i].Period;
    }
  }
}


//==========================================================================
//
//  DrawPicEx
//
//==========================================================================
final void DrawPicEx (float x, float y, int handle, int xofs, int yofs) {
  if (handle <= 0) return;
  //int rx = int(x*(GetVirtualWidth()/320.0));
  //int ry = int(y*(GetVirtualHeight()/200.0));
  int rx = int(x+xofs);
  int ry = int(y+yofs);
  //print("xy=(%s,%s); rxy=(%s,%s); h=%s", x, y, rx, ry, handle);
  R_DrawPic(rx, ry, handle);
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  if (BackgroundPic > 0) {
    //DrawPic(0, 0, BackgroundPic);
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    /*
    picinfo_t pinf;
    R_GetPicInfo(BackgroundPic, &pinf);
    if (pinf.width >= 320 && pinf.height >= 200) {
      SetVirtualScreen(pinf.width, pinf.height);
    } else {
      SetVirtualScreen(320, 200);
    }
    R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_404040);
    R_DrawPic(0, 0, BackgroundPic);
    */
    int xofs, yofs;
    float scale;
    DrawFullScreenPic(BackgroundPic, dontRestoreVScreen:true, out xofs:xofs, out yofs:yofs, out scale:scale);
    /*
    {
      picinfo_t pinf;
      R_GetPicInfo(BackgroundPic, &pinf);
      print("pinf:(%s,%s); vs:(%s,%s); ofs:(%s,%s); scale=%s", pinf.width, pinf.height, GetVirtualWidth(), GetVirtualHeight(), xofs, yofs, scale);
    }
    */
    if (Anims.length) {
      //SetVirtualScreen(640, 480);
      foreach (const ref auto anim; Anims) {
        if (!CheckCond(anim.Cond, anim.MapName1, anim.MapName2)) continue;
        if (anim.Ctr >= 0) DrawPicEx(anim.X, anim.Y, anim.Pics[anim.Ctr], xofs, yofs);
      }
    }
    //print("State=%s; spots=%s", State, Spots.length);
    if (State > STATE_Default && Spots.length) {
      //SetVirtualScreen(640, 480);
      foreach (int i, const ref auto spot; Spots) {
        // flash level we are leaving now
        if (spot.Map == ClGame.im.LeaveMap && State == STATE_PrevLoc && (int(2.0*btime)&1)) continue;
        if (IsVisited(spot.Map)) DrawPicEx(spot.X, spot.Y, SplatPic, xofs, yofs);
        if (spot.Map == ClGame.im.EnterMap &&
            (State == STATE_Done || (State == STATE_NextLoc && (int(32.0*btime)&31) < 20)))
        {
          DrawPointer(i, xofs, yofs);
        }
      }
    }
  } else if (BackgroundFlat) {
    FillRectWithFlat(0, 0, Width, Height, BackgroundFlat);
  }
}


//==========================================================================
//
//  DrawPointer
//
//==========================================================================
final private void DrawPointer (int n, int xofs, int yofs) {
  int i;
  int left;
  int top;
  int right;
  int bottom;
  bool fits;
  picinfo_t info;

  fits = false;
  i = 0;
  do {
    R_GetPicInfo(PointerPics[i], &info);
    left = Spots[n].X-info.xoffset;
    top = Spots[n].Y-info.yoffset;
    right = left+info.width;
    bottom = top+info.height;

    if (left >= 0 && right < Width && top >= 0 && bottom < Height) {
      fits = true;
    } else {
      ++i;
    }
  } while (!fits && i != PointerPics.Num);

  if (fits && i < PointerPics.Num) {
    DrawPicEx(Spots[n].X, Spots[n].Y, PointerPics[i], xofs, yofs);
  } else {
    // DEBUG
    dprint("Could not place patch on level %d", n+1);
  }
}


//==========================================================================
//
//  CheckCond
//
//==========================================================================
bool CheckCond (ubyte Cond, name MapName1, name MapName2) {
  switch (Cond) {
    case COND_IfLeaving: return (State < STATE_NextLoc && MapName1 == ClGame.im.LeaveMap);
    case COND_IfNotLeaving: return (State >= STATE_NextLoc || MapName1 != ClGame.im.LeaveMap);
    case COND_IfEntering: return (State >= STATE_NextLoc && MapName1 == ClGame.im.EnterMap);
    case COND_IfNotEntering: return (State < STATE_NextLoc || MapName1 != ClGame.im.EnterMap);
    case COND_IfVisited: return IsVisited(MapName1);
    case COND_IfNotVisited: return !IsVisited(MapName1);
    case COND_IfTravelling: return (MapName1 == ClGame.im.LeaveMap && MapName2 == ClGame.im.EnterMap);
    case COND_IfNotTravelling: return (MapName1 != ClGame.im.LeaveMap || MapName2 != ClGame.im.EnterMap);
  }
  return true;
}


//==========================================================================
//
//  IsVisited
//
//==========================================================================
bool IsVisited (name Map) {
  for (int i = 0; i < PlayerEx::MAX_MAPS_VISITED; ++i) {
    if (PlayerEx(ClGame.cl).MapsVisited[i] == Map) return true;
  }
  return false;
}


defaultproperties {
  Width = 320;
  Height = 200;
  bTickEnabled = true;
}
