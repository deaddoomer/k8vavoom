//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class StatusBarShared : Widget;

protected ClientGameBase ClGame;

enum NUM_NOTIFY_LINES = 8;
enum NUM_CHAT_LINES = 16;

const float CenterMessageFadeoutTime = 0.3;

struct NotifyMessage {
  string text;
  string nick; // for chat
  float time;
}

NotifyMessage[NUM_NOTIFY_LINES] notifyMessages;
int notifyMsgCount;
int notifyMsgHead;

NotifyMessage[NUM_CHAT_LINES] chatMessages;
int chatMsgCount;
int chatMsgHead;

array!SplitLine CenterMessageLines;
int CenterMessageHeight;
float CenterTime;

HUDMessageContainer HudMsgWin;

bool lastWasFullscreen;


//==========================================================================
//
//  OnCreate
//
//==========================================================================
override void OnCreate () {
  ::OnCreate();
  HudMsgWin = NewChild(HUDMessageContainer);
  HudMsgWin.ClGame = ClGame;
  Width = GetVirtualWidth();
  Height = GetVirtualHeight();
  //HudMsgWin.Width = Width;
  //HudMsgWin.Height = Height;
  lastWasFullscreen = false;
  // load healthbar graphics
  R_RegisterPicPath('graphics/healthbar/healthbar_bottom.png');
  R_RegisterPicPath('graphics/healthbar/healthbar_top.png');
  R_RegisterPicPath('graphics/healthbar/healthbar_border.png');
}


//==========================================================================
//
//  SetClGame
//
//==========================================================================
void SetClGame (ClientGameBase aclgame) {
  ClGame = aclgame;
  HudMsgWin.ClGame = ClGame;
}


//==========================================================================
//
//  SetClGame
//
//==========================================================================
ClientGameBase GetClGame () {
  return ClGame;
}


//==========================================================================
//
//  StartMap
//
//  WARNING! this can be called several times for one map! (k8:FIXME!)
//
//==========================================================================
void StartMap () {
  ClearNotify();
  ClearCenterMessage();
  ClearHudMessages();
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  DrawNotify();
  DrawChat();
  DrawCenterMessage();
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  auto root = GetRootWidget();
  //print("SBTICK: root=%C; sz=(%d,%d)", root, root.Width, root.Height);
  if (root && (Width != root.Width || Height != root.Height)) {
    SetSize(root.Width, root.Height);
  }
  UpdateNotify(DeltaTime);
  UpdateChat(DeltaTime);
  UpdateCenterMessage(DeltaTime);
}


//**************************************************************************
//  Notify messages
//**************************************************************************

//==========================================================================
//
//  ClearNotify
//
//==========================================================================
void ClearNotify () {
  notifyMsgCount = 0;
  notifyMsgHead = 0;

  chatMsgCount = 0;
  chatMsgHead = 0;
}


//==========================================================================
//
//  AddNotifyMessage
//
//==========================================================================
void AddNotifyMessage (string Str) {
  array!SplitLine Lines;

  SetFont('smallfont');
  SplitText(Str, Lines, GetVirtualWidth()-32);

  foreach (auto i; 0..Lines.length) {
    string text = Lines[i].Text.xstrip;
    if (!text) continue;
    if (notifyMsgCount >= NUM_NOTIFY_LINES) {
      --notifyMsgCount;
      ++notifyMsgHead;
    }
    NotifyMessage *msg = &notifyMessages[(notifyMsgCount+notifyMsgHead)%NUM_NOTIFY_LINES];
    ++notifyMsgCount;
    msg.text = text;
    msg.time = GetCvarF('hud_notify_time');
  }
}


//==========================================================================
//
//  AddChatMessage
//
//==========================================================================
void AddChatMessage (string nick, string Text) {
  array!SplitLine Lines;
  nick = nick.removeColors.xstrip;
  if (!nick) nick = "<dumb>";
  nick ~= ":";

  SetFont('smallfont');
  SplitText(Text, Lines, GetVirtualWidth()-32);

  foreach (auto i; 0..Lines.length) {
    string text = Lines[i].Text.removeColors.xstrip;
    if (!text) continue;
    if (chatMsgCount >= NUM_CHAT_LINES) {
      --chatMsgCount;
      ++chatMsgHead;
    }
    NotifyMessage *msg = &chatMessages[(chatMsgCount+chatMsgHead)%NUM_CHAT_LINES];
    ++chatMsgCount;
    msg.text = text;
    msg.nick = nick;
    msg.time = GetCvarF('hud_chat_time');
  }
}


//==========================================================================
//
//  DrawNotify
//
//==========================================================================
void DrawNotify () {
  SetFont('smallfont');
  SetTextAlign(hleft, vtop);

  int col = GetCvar('hud_font_color');

  // notify lines
  int y = 0;
  int i = 0;
  while (i < notifyMsgCount) {
    NotifyMessage *msg = &notifyMessages[(i+notifyMsgHead)%NUM_NOTIFY_LINES];
    if (msg->time <= 0.0) {
      ++notifyMsgHead;
      --notifyMsgCount;
    } else {
      DrawText(4, y, msg->text, col);
      y += FontHeight();
      ++i;
    }
  }
}


//==========================================================================
//
//  DrawChat
//
//==========================================================================
void DrawChat () {
  SetFont('smallfont');
  SetTextAlign(hleft, vtop);

  int ncol = GetCvar('hud_chat_nick_color');
  int tcol = GetCvar('hud_chat_text_color');

  // count messages
  int y = Height-64;
  int i = 0;
  while (i < chatMsgCount) {
    NotifyMessage *msg = &chatMessages[(i+chatMsgHead)%NUM_CHAT_LINES];
    if (msg.time <= 0.0) {
      ++chatMsgHead;
      --chatMsgCount;
    } else {
      y -= FontHeight();
      ++i;
    }
  }

  i = 0;
  while (i < NUM_CHAT_LINES) {
    NotifyMessage *msg = &chatMessages[(i+chatMsgHead)%NUM_CHAT_LINES];
    ++i;
    if (msg.time <= 0.0) continue;
    DrawText(4, y, msg.nick, ncol);
    DrawText(4+TextWidth(msg.nick)+2, y, msg.text, tcol);
    y += FontHeight();
  }
}


//==========================================================================
//
//  UpdateNotify
//
//==========================================================================
void UpdateNotify (float DeltaTime) {
  foreach (auto i; 0..notifyMsgCount) notifyMessages[(i+notifyMsgHead)%NUM_NOTIFY_LINES].time -= DeltaTime;
}


//==========================================================================
//
//  UpdateChat
//
//==========================================================================
void UpdateChat (float DeltaTime) {
  foreach (auto i; 0..chatMsgCount) chatMessages[(i+chatMsgHead)%NUM_CHAT_LINES].time -= DeltaTime;
}


//**************************************************************************
//  Center message
//**************************************************************************

//==========================================================================
//
//  ClearCenterMessage
//
//==========================================================================
void ClearCenterMessage () {
  CenterTime = 0.0;
}


//==========================================================================
//
//  AddCenterMessage
//
//==========================================================================
void AddCenterMessage (string Msg) {
  SetFont('smallfont');
  CenterMessageHeight = SplitText(Msg, CenterMessageLines, 600);
  CenterTime = fmax(0.5, GetCvarF('hud_center_message_time'));
}


//==========================================================================
//
//  DrawCenterMessage
//
//==========================================================================
void DrawCenterMessage () {
  if (CenterTime && CenterMessageLines) {
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    int LineH = CenterMessageHeight/CenterMessageLines.length;
    SetFont('smallfont');
    SetTextAlign(hleft, vtop);
    int tx = ovw/2;
    int ty = (ovh-CenterMessageLines.length*LineH)/2-32;
    float alpha = (CenterTime < 0 ? (CenterMessageFadeoutTime+CenterTime)/CenterMessageFadeoutTime : 1);
    foreach (auto i; 0..CenterMessageLines.length) {
      DrawText(tx-CenterMessageLines[i].Width/2, ty+i*LineH, CenterMessageLines[i].Text, GetCvar('hud_font_color_centered'), CR_YELLOW, alpha);
    }
  }
}


//==========================================================================
//
//  UpdateCenterMessage
//
//==========================================================================
void UpdateCenterMessage (float DeltaTime) {
  if (CenterTime) {
    CenterTime -= DeltaTime;
    if (CenterTime < -CenterMessageFadeoutTime) CenterTime = 0.0;
  }
}



//**************************************************************************
//  HUD messages
//**************************************************************************

//==========================================================================
//
//  ClearHudMessages
//
//==========================================================================
void ClearHudMessages () {
  if (HudMsgWin) HudMsgWin.ClearHudMessages();
}


//==========================================================================
//
//  AddHudMessage
//
//==========================================================================
void AddHudMessage (string Message, name Font, int Type, int Id, int Color,
  string ColorName, float x, float y, int HudWidth, int HudHeight,
  float HoldTime, float Time1, float Time2)
{
  if (!HudMsgWin) return;
  HudMsgWin.AddHudMessage(Message, Font, Type, Id, Color, ColorName, x, y, HudWidth, HudHeight, HoldTime, Time1, Time2);
}


// fullscreen statusbar
 // the screen is not 640x480
void SB_DrawFullscreenStats () {}

// normal statusbar, called in order
void SB_DrawMainBarPre (bool inAutomap) {} // the screen is not 640x480
void SB_FillMainBar (bool inAutomap) {} // this fills the sides with the rock texture; the screen is 640x480
void SB_DrawMainBar (bool inAutomap) {} // the screen is 640x480
void SB_DrawMainBarPost (bool inAutomap) {} // the screen is not 640x480


struct SB_SavedVScreenState {
  int width, height;
  float scaleY;
}


final void SB_SetCorrected640x480 (out SB_SavedVScreenState sss) {
  sss.width = GetVirtualWidth();
  sss.height = GetVirtualHeight();
  sss.scaleY = ScaleY;
  SetVirtualScreen(640, 480);
  if (Width != 640 || Height != 480) SetSize(640, 480);
  ScaleY = ScaleY*R_GetAspectRatio();
  Y = -int(480.0*ScaleY-480);
}


final void SB_RestoreVScreen (const ref SB_SavedVScreenState sss) {
  ScaleY = sss.scaleY;
  Y = 0;
  SetVirtualScreen(sss.width, sss.height);
  if (Width != sss.width || Height != sss.height) SetSize(sss.width, sss.height);
}


void SB_DrawMainBarCorrected (bool inAutomap, bool doFill) {
  SB_SavedVScreenState sss;
  SB_SetCorrected640x480(out sss);
  scope(exit) SB_RestoreVScreen(ref sss);
  if (doFill) SB_FillMainBar(inAutomap);
  SB_DrawMainBar(inAutomap);
}


// this is common code for all games
void SB_DrawMainPart (int sb_view) {
  int sblocks = R_GetScreenBlocks();
  if (sblocks >= R_SCREEN_BLOCKS_NO_STATUSBAR) return;
  auto ovw = GetVirtualWidth();
  auto ovh = GetVirtualHeight();
  if (Width != ovw || Height != ovh) SetSize(ovw, ovh);
  if (sb_view == SB_VIEW_FULLSCREEN || sblocks >= R_SCREEN_BLOCKS_FS_STATUSBAR) {
    SB_DrawFullscreenStats();
  } else {
    bool inAutomap = (sb_view == SB_VIEW_AUTOMAP);
    SB_DrawMainBarPre(inAutomap);
    SB_DrawMainBarCorrected(inAutomap, doFill:true);
    SB_DrawMainBarPost(inAutomap);
  }
}


// global locations
const int WI_SPACINGY = 33;

// deathmatch stuff
const int DM_MATRIXX = 202;
const int DM_MATRIXY = 208;

const int DM_TOTALSX = 329;
const int DM_DEATHSX = 429;

const int DM_SPACINGX = 40;


//==========================================================================
//
//  SB_DrawDeathmatchStats
//
//==========================================================================
void SB_DrawDeathmatchStats () {
  SetFont('bigfont');

  PlayerReplicationInfo RepInfo;

  SetTextAlign(hcenter, vtop);
  // draw stat titles (top line)
  DrawText(DM_TOTALSX, DM_MATRIXY-WI_SPACINGY, "FRAGS");
  DrawText(DM_DEATHSX, DM_MATRIXY-WI_SPACINGY, "DEATHS");

  // draw stats
  int y = DM_MATRIXY;

  foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo) {
    if (RepInfo.PlayerNum == ClGame.cl.ClientNum) {
      // your face
      int star = R_RegisterPic('stfst01');
      picinfo_t info;
      R_GetPicInfo(star, &info);
      DrawPic(DM_MATRIXX-info.width-5, y-8, star);
    }
    SetTextAlign(hleft, vtop);
    SetFont('smallfont');
    DrawText(DM_MATRIXX, y+5, RepInfo.PlayerName);
    SetTextAlign(hright, vtop);
    SetFont('bigfont');
    DrawText(DM_TOTALSX, y, va("%s", RepInfo.Frags));
    DrawText(DM_DEATHSX, y, va("%s", RepInfo.Deaths));
    //print("  f:%s d:%s -- %s", RepInfo.Frags, RepInfo.Deaths, RepInfo.PlayerName);
    y += 24;
  }
}


// net game stuff
const int NG_STATSY = 210;
const int NG_STATSX = (172+32/2);

const int NG_SPACINGX = 64;


//==========================================================================
//
//  SB_DrawCoopStats
//
//==========================================================================
void SB_DrawCoopStats () {
  picinfo_t info;
  PlayerReplicationInfo RepInfo;

  int pwidth = TextWidth("%");

  SetFont('bigfont');
  SetTextAlign(hright, vtop);
  // draw stat titles (top line)
  DrawText(NG_STATSX+NG_SPACINGX, NG_STATSY, "kills");
  DrawText(NG_STATSX+2*NG_SPACINGX, NG_STATSY, "items");
  DrawText(NG_STATSX+3*NG_SPACINGX, NG_STATSY, "scrt");
  DrawText(NG_STATSX+4*NG_SPACINGX, NG_STATSY, "frgs");

  // draw stats
  int y = NG_STATSY+TextHeight("kills");

  foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo) {
    int i = RepInfo.PlayerNum;
    int x = NG_STATSX;

    if (i == ClGame.cl.ClientNum) {
      // your face
      int star = R_RegisterPic('stfst01');
      DrawPic(x-info.width, y, star);
    }

    SetTextAlign(hright, vtop);
    x += NG_SPACINGX;
    DrawText(x-pwidth, y+10, va("%d", RepInfo.KillCount));
    x += NG_SPACINGX;
    DrawText(x-pwidth, y+10, va("%d", RepInfo.ItemCount));
    x += NG_SPACINGX;
    DrawText(x-pwidth, y+10, va("%d", RepInfo.SecretCount));
    x += NG_SPACINGX;

    SetTextAlign(hright, vtop);
    DrawText(x, y+10, va("%d", RepInfo.Frags));

    y += WI_SPACINGY;
  }
}


//==========================================================================
//
//  SB_DrawNetworkStats
//
//==========================================================================
void SB_DrawNetworkStats () {
  if (!ClGame) return;
  if (!ClGame.GLevel) return;
  if (ClGame.Game.NetMode <= GameInfo::NM_Standalone) return;
  if (!ClGame.cl || !ClGame.cl.MO || ClGame.cl.MO.Health > 0) return;
  if (ClGame.deathmatch) {
    SB_DrawDeathmatchStats();
  } else {
    SB_DrawCoopStats();
  }
}


//==========================================================================
//
//  SB_DrawNetworkStats
//
//==========================================================================
void SB_Drawer (int sb_view) {
  SB_Housekeeping(sb_view);
}


void SB_UpdateWidgets () {
}


void SB_Housekeeping (int sb_view) {
  bool fs = (sb_view == SB_VIEW_FULLSCREEN);
  lastWasFullscreen = fs;
}


defaultproperties {
}
