//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenPlayerSetup : MenuScreen;

//array!name SkinNames;

MenuInputLine PlayerName;
MenuSpriteAnim Anim;
MenuModel Mdl;
MenuChoiceEnum EPClass;
MenuChoiceColor ColorBox;
int PClass;


struct ClassInfo {
  string sprite; // "PLAY"
  string className;
}

array!ClassInfo PClasses;


//==========================================================================
//
//  GetItemContainerOfsY
//
//==========================================================================
override int GetItemContainerOfsY () {
  return ::GetItemContainerOfsY()+8;
}


//==========================================================================
//
//  CreateClasses
//
//==========================================================================
void CreateClasses () {
  auto cls = PClasses.alloc();
  cls.sprite = "PLAY";
  cls.className = "Doomguy";
}


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
override void CreateChoices () {
  PClasses.clear();
  CreateClasses();

  if (PClasses.length == 0) {
    auto cls = PClasses.alloc();
    cls.sprite = "PLAY";
    cls.className = "Doomguy";
  }

  foreach (auto idx, const ref auto pcl; PClasses) {
    R_InstallSprite(pcl.sprite, idx+500);
  }
  R_InstallSpriteComplete();


  PlayerName = GetItemContainer().NewChild(MenuInputLine);
  PlayerName.SetOrigin(ChoicesStartX+10, GetCurrentY());
  PlayerName.CursorXOffs = -10;
  PlayerName.SetText("Name");
  PlayerName.Value = GetCvarS('Name');
  PlayerName.ValueChanged = &ChangeName;

  if (PClasses.length > 1) {
    EPClass = GetItemContainer().NewChild(MenuChoiceEnum);
    EPClass.SetOrigin(ChoicesStartX, GetCurrentY());
    EPClass.SetText("Class");
    foreach (const ref auto pcl; PClasses) EPClass.AddItem(pcl.className);
    EPClass.SetInitialValue(GetCvar('class'));
    EPClass.ValueChanging = &ChangeClass;
  }


  ColorBox = GetItemContainer().NewChild(MenuChoiceColor);
  //ColorBox.SetInitialValue(Col);
  ColorBox.SetSessionColorCvar('color');
  ColorBox.SetText("Color");
  ColorBox.SetOrigin(ChoicesStartX, GetCurrentY());
  ColorBox.ValueChanging = delegate bool (Object Sender, int NewValue) {
    if (Anim) Anim.Color = NewValue;
    if (Mdl) Mdl.Color = NewValue;
    return true;
  };


  Anim = GetItemContainer().NewChild(MenuSpriteAnim);
  Anim.SetPos(220, 150);
  Anim.SprDef = 500;
  Anim.Speed = 8;
  Anim.NumFrames = 4;
  Anim.TranslStart = 112;
  Anim.TranslEnd = 127;
  Anim.Color = ColorBox.ColorValue;

  /* NOT YET
  auto model = InstallModel("models/players/doomguy/player.xml");
  if (model) {
    name SkinName;
    string SkinDesc;

    SetCvarS('model', "doomguy");

    Mdl = GetItemContainer().NewChild(MenuModel);
    Mdl.Origin = vector(-128.0, 64.0, -32.0);
    Mdl.Angle = 345.0;
    Mdl.Model = model;
    Mdl.TranslStart = 112;
    Mdl.TranslEnd = 127;
    Mdl.Color = Col;
  }
  */

  PClass = (EPClass ? int(EPClass.Value) : 0);
  SetPClass();
}


//==========================================================================
//
//  ChangeName
//
//==========================================================================
void ChangeName (Object Sender) {
  SetCvarS('Name', PlayerName.Value);
}


//==========================================================================
//
//  ChangeClass
//
//==========================================================================
bool ChangeClass (Object Sender, float newValue) {
  SetCvar('class', int(newValue));
  PClass = int(newValue);
  SetPClass();
  return true;
}


//==========================================================================
//
//  SetPClass
//
//==========================================================================
void SetPClass () {
  Anim.SprDef = 500+PClass;
}


defaultproperties {
  MenuName = 'Player_Setup_Menu';
  ChoicesStartX = 64;
  SelectorType = MenuSelector_SmallRight;
  Title = "PLAYER SETUP";
  CenterChoicesVert = false;
}
