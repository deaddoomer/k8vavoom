//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class MenuScreenSkill : MenuScreen;


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
override void CreateChoices () {
  foreach (auto i; 0..P_GetNumSkills()) {
    MenuChoiceSkill Btn = MenuChoiceSkill(NewChild(MenuChoiceSkill));
    SkillDef *SDef = P_GetSkillDef(i);
    Btn.SetPos(ChoicesStartX, currentY);
    if (SDef->bMenuNameIsPic) {
      Btn.PicHandle = R_RegisterPic(StrToName(SDef->MenuName));
    } else {
      Btn.SetText(SDef->MenuName);
    }
    foreach (auto j; 0..SDef->PlayerClassNames.length) {
      if (!stricmp(SDef->PlayerClassNames[j].ClassName, ClGame.SkillClassName)) {
        Btn.SetText(SDef->PlayerClassNames[j].MenuName);
        Btn.PicHandle = 0;
      }
    }
    if (strlen(SDef->TextColour) > 0) Btn.Text = strcat(strcat("\c[", SDef->TextColour), strcat("]", Btn.Text));
    Btn.SkillIndex = i;
    Btn.bMustConfirm = SDef->bMustConfirm;
    Btn.ConfirmationText = SDef->ConfirmationText;
    Btn.Activated = &ActivateSkill;
    currentY += Btn.Height;
  }
}


//==========================================================================
//
//  SetDefaultChoice
//
//==========================================================================
override void SetDefaultChoice () {
  ::SetDefaultChoice();

  int goodSkill = max(0, P_GetNumSkills()-2);
  foreach (auto i; 0..P_GetNumSkills()) {
    auto sdef = P_GetSkillDef(i);
    if (sdef->bMustConfirm) {
      goodSkill = i-1;
      break;
    }
  }

  foreach (auto i; 0..goodSkill) CycleNextChoice();
}


//==========================================================================
//
//  ActivateSkill
//
//==========================================================================
void ActivateSkill (Object Sender) {
  MenuChoiceSkill Btn = MenuChoiceSkill(Sender);
  if (Btn.bMustConfirm) {
    ClGame.SkillToConfirm = Btn.SkillIndex;
    ClGame.MessageBoxStartMessage(
      strlen(Btn.ConfirmationText) > 0 ? Btn.ConfirmationText :
      "are you sure? this skill level\nisn\'t even remotely fair.\n\npress y or n.",
      ClientGameShared::MB_Nightmare, true);
  } else {
    ClGame.NewGame(Btn.SkillIndex);
  }
}


defaultproperties {
  ChoicesStartX = 38;
  ChoicesStartY = 40;
  SelectorType = MenuSelector_Big;
  Title = "CHOOSE SKILL LEVEL:";
}
