//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš, dj_jl
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenSpecialControls : MenuScreenControls;

// we'll create some arrays here for special controls
/*
struct alias_t {
  string alias_name; // name of the alias
  string command; // command to type from console
  string secid; // section id
};

struct bind {
  string bind_key; // key to bind this alias to
  string alias_name; // name of the alias
  string secid; // section id
};
*/

struct menukey {
  string desc; // description of the key for menu
  string alias_name; // name of the alias
  string secid; // section id
};

struct SectionInfo {
  string secname;
  string secid;
};

// jeep dynamic arrays of each of these so that we "build"
// the special control sections in the menu
//array!alias_t aliases_list;
//array!bind dbinds_list;
//array!bind binds_list;
array!menukey menukeys_list;

// all known sections
array!SectionInfo sections;


//==========================================================================
//
//  FindOrAddKeySection
//
//  returns section id
//
//==========================================================================
protected final string FindOrAddKeySection (string secid, string secname) {
  if (!secid) {
    if (secname) {
      secid = secname;
    } else {
      secid = "(unknown)";
      secname = "Uncategorized";
    }
  }

  foreach (ref const auto ss; sections) {
    if (stricmp(ss.secid, secid) == 0) {
      /*
      if (!secname || stricmp(ss.secname, secname) == 0) {
        return secid;
      }
      // same id, different names; change id
      secid ~= ".other";
      return FindOrAddKeySection(secid, secname);
      */
      return secid;
    }
  }

  // add a new section
  sections.length += 1;
  if (!secname) secname = va("--- %s ---", sections.length);
  sections[$-1].secname = secname;
  sections[$-1].secid = secid;
  return secid;
}


//==========================================================================
//
//  ParseKeyConfLump
//
//==========================================================================
void ParseKeyConfLump (int lump) {
  if (lump < 0) return;
  auto kc = SpawnObject(ScriptsParser);
  scope(exit) delete kc;
  kc.OpenLumpIndex(lump);
  string secid = ""; //FindOrAddKeySection("", ""); // default section
  int scnum = 0;
  while (!kc.AtEnd()) {
    // We are only interested in a couple of commands, like
    // 'addkeysection', 'bind', 'defaultbind' and 'addmenukey'
    if (kc.Check("addkeysection")) {
      // addkeysection "Title" keysection<-(for config file)
      kc.ExpectString();
      string secname = xstrip(kc.String);
      //if (!secname) secname = va("--- %s ---", scnum++);
      // section id
      kc.ExpectString();
      //printdebug("*** section: '%s' (%s)", kc.String, secname);
      secid = FindOrAddKeySection(kc.String, secname);
      //printdebug("new section: '%s'", secid);
      continue;
    }
    if (kc.Check("alias")) {
      // store alias name in the special array
      kc.ExpectString();
      kc.ExpectString();
      /*
      auto aa = aliases_list.alloc();
      kc.ExpectString();
      aa.alias_name = xstrip(kc.String);
      kc.ExpectString();
      aa.command = xstrip(kc.String);
      aa.secid = secid;
      if (!secid) aliases_list.remove(aliases_list.length-1);
      */
      continue;
    }
    if (kc.Check("defaultbind")) {
      kc.ExpectString();
      kc.ExpectString();
      /*
      auto bb = dbinds_list.alloc();
      kc.ExpectString();
      bb.bind_key = xstrip(kc.String);
      kc.ExpectString();
      bb.alias_name = xstrip(kc.String);
      bb.secid = secid;
      if (!secid) dbinds_list.remove(dbinds_list.length-1);
      */
      continue;
    }
    if (kc.Check("bind")) {
      kc.ExpectString();
      kc.ExpectString();
      /*
      auto bb = binds_list.alloc();
      kc.ExpectString();
      bb.bind_key = xstrip(kc.String);
      kc.ExpectString();
      bb.alias_name = xstrip(kc.String);
      bb.secid = secid;
      if (!secid) binds_list.remove(binds_list.length-1);
      */
      continue;
    }
    if (kc.Check("addmenukey")) {
      auto mk = menukeys_list.alloc();
      kc.ExpectString();
      mk.desc = xstrip(kc.String);
      kc.ExpectString();
      mk.alias_name = xstrip(kc.String);
      mk.secid = secid;
      if (!secid) menukeys_list.remove(menukeys_list.length-1);
      continue;
    }
    kc.GetString();
  }
}


//==========================================================================
//
//  GenerateArrays
//
//  This method generates dynamic arrays of special controls from KEYCONF
//  scripts
//
//==========================================================================
void GenerateArrays () {
  foreach (int lump; WadIterateNS(EWadNamespace.Global)) {
    if (W_LumpName(lump) == 'keyconf') {
      ParseKeyConfLump(lump);
    }
  }
}


//==========================================================================
//
//  AddControl
//
//==========================================================================
void AddControl (string Text, string CommandOn, string CommandOff, string modName) {
  MenuControlKey newCtl = MenuControlKey(NewChild(MenuControlKey));
  //SetChoiceInitialSizeSimple(newCtl);
  newCtl.Width = Width;
  newCtl.CursorXOffs = Width/2;
  newCtl.CursorXOffsHR = Width/2;
  newCtl.SetOrigin(/*ChoicesStartX*/Width/2, currentY);
  newCtl.Height = 10;
  newCtl.Text = Text;
  newCtl.CommandOn = CommandOn;
  newCtl.CommandOff = CommandOff;
  newCtl.ModSection = modName;
  newCtl.strifeMode = 0;
  //printdebug("%s (%s): %s %s", Text, modName, CommandOn, CommandOff);
  /*
  newCtl.strifeMode = strifeMode;
       if (strifeMode < 0) newCtl.Disabled = IsStrife;
  else if (strifeMode > 0) newCtl.Disabled = !IsStrife;
  */
  currentY += newCtl.Height;
}


//==========================================================================
//
//  AddHeader
//
//==========================================================================
void AddHeader (string Text, bool firstHdr) {
  auto Btn = MenuTextButton(NewChild(MenuSmallTextButton));
  Btn.TextHAlign = hcenter;
  Btn.TextVAlign = vbottom;
  if (!firstHdr) currentY += 4;
  //SetChoiceInitialSizeSimple(Btn);
  Btn.Width = Width;
  Btn.CursorXOffs = Width/2;
  Btn.CursorXOffsHR = Width/2;
  Btn.SetOrigin(/*ChoicesStartX*//*Width/2*/0, currentY);
  Btn.Text = Text;
  Btn.Focusable = false;
  Btn.TextColor = CR_FIRE;
  Btn.TextColorFocus = CR_FIRE;
  Btn.Height = 10;
  currentY += Btn.Height;
}


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
override void CreateChoices () {
  // first, generate arrays for using for building controls list
  GenerateArrays();

  currentY = ChoicesStartY;

  bool firstHdr = true;
  foreach (const ref auto sec; sections) {
    bool addHeader = true;
    foreach (const ref auto mk; menukeys_list) {
      if (mk.secid != sec.secid) continue;
      if (!mk.desc || !mk.alias_name) continue;
      if (addHeader) {
        addHeader = false;
        //printdebug("id=<%s>; name=<%s>", sec.secid, sec.secname);
        AddHeader(sec.secname, firstHdr);
        firstHdr = false;
      }
      AddControl(mk.desc, mk.alias_name, "", sec.secid);
    }
  }

  /*
  if (menukeys_list.Num > 0) {
    foreach (auto i; 0..menukeys_list.length) {
      // for each menukey, we must check the alias name inside of all defaultbinds and binds, to extract key binds

      // first look inside of default binds list
      if (dbinds_list.Num > 0) {
        foreach (auto j; 0..dbinds_list.length) {
          if (!strcmp(menukeys_list[i].alias_name, dbinds_list[j].alias_name)) {
            // the alias name is the same, so we'll use the bind for a MenuControlKey
            AddControl(menukeys_list[i].desc, dbinds_list[j].alias_name, "");
          }
        }
      }

      // also look inside of the binds list
      if (binds_list.length > 0) {
        foreach (auto j; 0..binds_list.length) {
          if (!strcmp(menukeys_list[i].alias_name, binds_list[j].alias_name)) {
            // the alias name is the same, so we'll use the bind for a MenuControlKey
            AddControl(menukeys_list[i].desc, binds_list[j].alias_name, "");
          }
        }
      }
    }
  }
  */
}


defaultproperties {
  Title = "MOD CONTROLS";
  strifeMode = -1; // mods are usually for non-strife
}
