//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenScreenResolution : MenuScreen;

struct mode_t {
  int width;
  int height;
};

mode_t modes[7];

MenuChoiceEnum Mode;
MenuInputLine EdWidth;
MenuInputLine EdHeight;
MenuChoiceEnum Depth;
MenuChoiceEnum Windowed;
MenuChoiceEnum VSync;
MenuChoiceEnum VSyncAdaptive;
MenuChoiceEnum S3TC;
MenuChoiceNumeric ScrScale;
MenuChoiceNumeric UIMinScale;
MenuChoiceNumeric UIMaxScale;


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
override void CreateChoices () {
  Mode = GetItemContainer().NewChild(MenuChoiceEnum);
  SetChoiceInitialSizePos(Mode);
  Mode.SetText("Resolution");
  foreach (ref auto mi; modes) Mode.AddItem(va("%dx%d", mi.width, mi.height));
  Mode.SetInitialValue(GetModeValue());
  Mode.ValueChanging = delegate bool (Object Sender, float NewValueF) {
    int NewValue = int(NewValueF);
    EdWidth.Value = va("%d", modes[NewValue].width);
    EdHeight.Value = va("%d", modes[NewValue].height);
    return true;
  };
    SetLastHelp("Choose one of the predefined screen sizes.");

  EdWidth = GetItemContainer().NewChild(MenuInputLine);
  //SetChoiceInitialSizePos(EdWidth);
  //EdWidth.SetOrigin(ChoicesStartX+10, GetCurrentY());
  //EdWidth.CursorXOffs = -10;
  EdWidth.MakeOneLineControl();
  EdWidth.SetText("Width");
  EdWidth.Value = GetCvarS('screen_width');
  EdWidth.DisableSlotRendering();
    SetLastHelp("Custom screen resolution.");

  EdHeight = GetItemContainer().NewChild(MenuInputLine);
  //SetChoiceInitialSizePos(EdHeight);
  //EdHeight.SetOrigin(ChoicesStartX+10, GetCurrentY());
  //EdHeight.CursorXOffs = -10;
  EdHeight.MakeOneLineControl();
  EdHeight.SetText("Height");
  EdHeight.Value = GetCvarS('screen_height');
  EdHeight.DisableSlotRendering();
    SetLastHelp("Custom screen resolution.");

  ScrScale = GetItemContainer().NewChild(MenuChoiceNumeric);//CreateFloatNumericCvar("Screen Scale", 'gl_scale', 1, 1, 64);
  SetChoiceInitialSizePos(ScrScale);
  ScrScale.SetText("Screen Scale");
  //ScrScale.cvarSession = cvname;
  ScrScale.ValueDelta = 1;
  ScrScale.Value = GetCvarF('screen_scale');
  ScrScale.MinValue = 1;
  ScrScale.MaxValue = 8;
  //ScrScale.SetSessionCvar(cvname);
    SetLastHelp(
      "Screen scaling factor.\n"~
      "You can set it to >1 to render screen in lower resolution.\n"~
      "\n"~
      "\cGWARNING! Requires applying of 'SET RESOLUTION' option!");

  UIMaxScale = GetItemContainer().NewChild(MenuChoiceNumeric);
  SetChoiceInitialSizePos(UIMaxScale);
  UIMaxScale.SetText("Max UI Scale");
  //UIMaxScale.cvarSession = cvname;
  UIMaxScale.ValueDelta = 1;
  UIMaxScale.Value = GetCvarI('ui_max_scale');
  UIMaxScale.MinValue = 0;
  UIMaxScale.MaxValue = 8;
  //UIMaxScale.SetSessionCvar(cvname);
    SetLastHelp(
      "Maximum UI scaling factor. Set to 0 to let the engine choose\n"~
      "You can choose `1` to get unscaled UI.\n"~
      "Please, note that this also affects Fullscreen HUD, and HUD messages.\n"~
      "\n"~
      "\cGWARNING! Requires applying of 'SET RESOLUTION' option!");

  UIMinScale = GetItemContainer().NewChild(MenuChoiceNumeric);
  SetChoiceInitialSizePos(UIMinScale);
  UIMinScale.SetText("Min UI Scale");
  //UIMinScale.cvarSession = cvname;
  UIMinScale.ValueDelta = 1;
  UIMinScale.Value = GetCvarI('ui_min_scale');
  UIMinScale.MinValue = 0;
  UIMinScale.MaxValue = 8;
  //UIMinScale.SetSessionCvar(cvname);
    SetLastHelp(
      "Minumum UI scaling factor. Set to 0 to let the engine choose\n"~
      "\n"~
      "\cGWARNING! You can make UI unusable by setting big values here!\n"~
      "\cGWARNING! Requires applying of 'SET RESOLUTION' option!");

  Windowed = CreateEnumCvar("Fullscreen mode", 'screen_fsmode',
    "Window",
    "Scaled FS",
    "Real FS"
  );
  //Windowed.Width = Width;
    SetLastHelp(
      "There are two fullscreen modes available.\n"~
      "Scaled Fullscreen mode will not change your desktop resolution,\n"~
      "it will scale rendered image instead.\n"~
      "Real Fullscreen mode will change your desktop resolution.\n"~
      "\n"~
      "\cGWARNING: The engine trusts you, and will not check if videomode is valid.");

  CreateEnumCvar("FS Letterbox", 'gl_letterbox',
    "No",
    "Yes"
  );
    SetLastHelp(
      "Use letterbox mode for scaled fullscreen?");

  CreateEnumCvar("FS Scale Filter", 'gl_letterbox_filter',
    "Nearest",
    "Linear (smooth)"
  );
    SetLastHelp(
      "Which texture filter the engine should use to scale image in Scaled FS?");

  VSync = GetItemContainer().NewChild(MenuChoice_OnOff);
  SetChoiceInitialSizePos(VSync);
  //VSync.SetOrigin(ChoicesStartX, GetCurrentY());
  VSync.SetText("VSync");
  VSync.SetInitialValue(GetCvar('r_vsync'));
    SetLastHelp(
      "Use vsync (synchronize screen updates with physical frame refresh)?\n"~
      "\n"~
      "You have to use \"Set Resolution\" to activate new setting.\n"~
      "Note that FPS is hard-capped at 250, i.e. you will never get more than that.");

  VSyncAdaptive = GetItemContainer().NewChild(MenuChoice_OnOff);
  SetChoiceInitialSizePos(VSyncAdaptive);
  //VSyncAdaptive.SetOrigin(ChoicesStartX, GetCurrentY());
  VSyncAdaptive.SetText("Use Adaptive VSync");
  VSyncAdaptive.SetInitialValue(GetCvar('r_vsync_adaptive'));
    SetLastHelp(
      "This modifies VSync mode, switching between normal/adaptive vsyncs.\n"~
      "\n"~
      "If your GPU supports it, the engine can stop doing vsync when\n"~
      "the framerate is lower than physical frame refresh time.\n"~
      "This will allow you to get a smooth rendering if your GPU is\n"~
      "fast enough, but will not cap FPS to half of the refresh rate\n"~
      "if framerate is slightly below it.\n"~
      "It is recommented to turn this 'ON'.\n"~
      "\n"~
      "\c[white]WARNING: this feature has no effect if 'VSYNC' above is turned off!\n"~
      "\n"~
      "You have to use \"Set Resolution\" to activate new setting.\n");

  /*
  CreateEnumCvar("Aspect Ratio", 'r_aspect_ratio',
    "Vanilla",
    "Standard (4:3)",
    "Wide Screen 1 (16:9)",
    "Wide Screen 2 (16:10)"
  );
  */

  auto itemRatio = GetItemContainer().NewChild(MenuChoiceEnum);
  SetChoiceInitialSizePos(itemRatio);
  itemRatio.SetText("Aspect Ratio");
  // add all known aspect ratios
  foreach (int ridx; 0..R_GetAspectRatioCount()) {
    if (R_GetAspectRatioHoriz(ridx) == 1 && R_GetAspectRatioVert(ridx) == 1) {
      if (!IsDeveloperVersion) continue;
    }
    itemRatio.AddItem(R_GetAspectRatioDsc(ridx), ridx);
  }
  itemRatio.SetSessionCvar('r_aspect_ratio');
    SetLastHelp(
      "Screen aspect ratio."/*~
      "\n'Vanilla' is for square pixels, regardless of screen resolution.\n"*/);


  if (GetCvarB('__gl_s3tc_present')) {
    S3TC = GetItemContainer().NewChild(MenuChoiceEnum);
    SetChoiceInitialSizePos(S3TC);
    S3TC.SetText("Texture Compression");
      S3TC.AddItem("None");
      S3TC.AddItem("HiRes");
      S3TC.AddItem("All");
    S3TC.SetInitialValue(GetCvar('gl_s3tc_mode'));
      SetLastHelp(
        "You can turn on texture compression This may slightly degrade\n"~
        "image quality, but will use much less GPU RAM.\n"~
        "\n"~
        "You have to use \"Set Resolution\" to activate new setting.");
  } else {
    S3TC = none;
  }

  CreateChoiceSubHeader(" ");

  MenuTextButton Btn = GetItemContainer().NewChild(MenuSmallTextButton);
  //SetTextButtonInitialSizePos(Btn);
  SetChoiceInitialSizePos(Btn);
  //Btn.SetOrigin(ChoicesStartX, GetCurrentY());
  Btn.SetText("Restart Renderer");
  Btn.Activated = delegate void (Object Sender) { CmdBuf_AddText("VidRendererRestart\n"); };
    SetLastHelp(
      "Use this to restart renderer when you changed lighting type.\n"~
      "This won't change resoultion.\n\n"~
      "Console command for this is \c[WHITE]VidRendererRestart");

  Btn = GetItemContainer().NewChild(MenuSmallTextButton);
  //SetTextButtonInitialSizePos(Btn);
  SetChoiceInitialSizePos(Btn);
  //Btn.SetOrigin(ChoicesStartX, GetCurrentY());
  Btn.SetText("Set Resolution");
  Btn.Activated = &ActivateSetMode;
    SetLastHelp("Use this to set new resolution.");
}


//==========================================================================
//
//  GetModeValue
//
//==========================================================================
int GetModeValue () {
  int w = GetCvar('screen_width');
  int h = GetCvar('screen_height');
  foreach (auto mi; 0..modes.length) {
    if (modes[mi].width == w && modes[mi].height == h) return mi;
  }
  return 0;
}


//==========================================================================
//
//  ActivateSetMode
//
//==========================================================================
void ActivateSetMode (Object Sender) {
  SetCvar('screen_fsmode', int(Windowed.Value));
  SetCvar('r_vsync', int(VSync.Value));
  SetCvar('r_vsync_adaptive', int(VSyncAdaptive.Value));
  if (S3TC) SetCvar('gl_s3tc_mode', int(S3TC.Value));
  SetCvarF('screen_scale', ScrScale.Value);
  SetCvarI('ui_max_scale', max(0, int(UIMaxScale.Value)));
  SetCvarI('ui_min_scale', max(0, int(UIMinScale.Value)));
  CmdBuf_AddText("SetResolution %d %d\n", atoi(EdWidth.Value) ? atoi(EdWidth.Value) : modes[int(Mode.Value)].width,
    atoi(EdHeight.Value) ? atoi(EdHeight.Value) : modes[int(Mode.Value)].height);
}


defaultproperties {
  MenuName = 'Screen_Resolution_Menu';
  WidthThreshold = 10;
  ChoicesStartX = 120;
  SelectorType = MenuSelector_SmallRight;
  Title = "SCREEN RESOLUTION";
  modes[0].width = 640; modes[0].height = 480;
  modes[1].width = 800; modes[1].height = 600;
  modes[2].width = 1024; modes[2].height = 768;
  modes[3].width = 1152; modes[3].height = 864;
  modes[4].width = 1280; modes[4].height = 1024;
  modes[5].width = 1600; modes[5].height = 1200;
  modes[6].width = 1920; modes[6].height = 1200;
}
