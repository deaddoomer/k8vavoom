//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenHelpBase : MenuScreen;

struct PageInfo {
  name picname;
  int pichandle;
  int width, height;
}

array!PageInfo pages;
int currPage;


//==========================================================================
//
//  AppendHelpPage
//
//==========================================================================
protected void AppendHelpPage (name Name, optional bool nonIWAD) {
  if (!Name) return;
  int lump = W_CheckNumForName(Name);
  if (lump < 0) return;
  if (nonIWAD && W_IsIWADLump(lump)) return;
  // load picture
  int pich = R_RegisterPic(Name);
  if (pich < 0) return;
  // get picture dimensions
  picinfo_t pnfo;
  R_GetPicInfo(pich, &pnfo);
  if (pnfo.width < 1 || pnfo.height < 1) return;
  auto pg = pages.alloc();
  pg.picname = Name;
  pg.pichandle = pich;
  pg.width = pnfo.width;
  pg.height = pnfo.height;
}


//==========================================================================
//
//  prevPage
//
//==========================================================================
protected bool prevPage () {
  if (--currPage >= 0) return true;
  currPage = 0;
  return false;
}


//==========================================================================
//
//  nextPage
//
//==========================================================================
protected bool nextPage () {
  if (++currPage >= pages.length) { currPage = max(0, pages.length-1); return false; }
  return true;
}


//==========================================================================
//
//  CreateBackButton
//
//==========================================================================
override void CreateBackButton () {
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  if (currPage < 0 || currPage >= pages.length) {
    // bad page
    ShadeRect(0, 0, Width, Height, GetCvarF('menu_darkening'));
  } else {
    DrawFullScreenPic(pages[currPage].pichandle);
    // draw page number
    GetRootWidget.SetFont('smallfont');
    GetRootWidget.SetTextAlign(hright, vbottom);
    GetRootWidget.DrawText(GetRootWidget.Width, GetRootWidget.Height, va("[%d/%d]", currPage+1, pages.length), CR_DARKGRAY);
    // restore text align
    GetRootWidget.SetTextAlign(hleft, vtop);
  }
}


//==========================================================================
//
//  Key
//
//==========================================================================
override bool OnKeyDown (int key) {
  key = ConvertBoundKey(key);
  switch (key) {
    case K_ESCAPE:
    case K_BACKSPACE:
    case K_F1:
      LocalSound('menu/clear');
      ClGame.ForceMenuOff();
      return true;

    case K_LEFTARROW: case K_PAD4:
      if (prevPage()) LocalSound('menu/clear');
      return true;

    case K_RIGHTARROW: case K_PAD6:
      if (nextPage()) LocalSound('menu/clear');
      return true;

    case K_ENTER: case K_PADENTER:
    case K_SPACE:
      LocalSound('menu/clear');
      if (!nextPage()) ClGame.ForceMenuOff();
      return true;
  }

  return true;
}


defaultproperties {
  X = 0;
  Y = 0;
  //ScaleX = 2.0;
  //ScaleY = 2.4;
}
