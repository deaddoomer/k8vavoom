//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//#define VV_TEST_HEX_WHEEL
class MenuScreenHelpBase : MenuScreen;

struct PageInfo {
  name picname;
  int pichandle;
  int width, height;
}

array!PageInfo pages;
int currPage;

#ifdef VV_TEST_HEX_WHEEL
float lastMouseX = -6666;
float lastMouseY = -6666;
int radius = 6;
int cellW = 8;
int cellH = 8;
#endif


//==========================================================================
//
//  AppendHelpPage
//
//==========================================================================
protected void AppendHelpPage (name Name, optional bool nonIWAD, optional bool title) {
  //if (title && ClGame && ClGame.MenuActive()) return; // don't register title for main menu help
  if (!Name) return;
  int lump = W_CheckNumForName(Name);
  if (lump < 0) return;
  if (nonIWAD && W_IsIWADLump(lump)) return;
  // load picture
  int pich = R_RegisterPic(Name);
  if (pich < 0) return;
  // get picture dimensions
  picinfo_t pnfo;
  R_GetPicInfo(pich, &pnfo);
  if (pnfo.width < 1 || pnfo.height < 1) return;
  auto pg = pages.alloc();
  pg.picname = Name;
  pg.pichandle = pich;
  pg.width = pnfo.width;
  pg.height = pnfo.height;
}


//==========================================================================
//
//  AppendBoomHelpScreens
//
//  add additionan Boom help screens
//
//==========================================================================
void AppendBoomHelpScreens () {
  foreach (int idx; 0..100) {
    name hn = findExistingName(va("help%02d", idx));
    AppendHelpPage(hn);
  }
}


//==========================================================================
//
//  prevPage
//
//==========================================================================
protected bool prevPage () {
  if (--currPage >= 0) return true;
  currPage = 0;
  return false;
}


//==========================================================================
//
//  nextPage
//
//==========================================================================
protected bool nextPage () {
  if (++currPage >= pages.length) { currPage = max(0, pages.length-1); return false; }
  return true;
}


//==========================================================================
//
//  CreateBackButton
//
//==========================================================================
override void CreateBackButton () {
}


#ifdef VV_TEST_HEX_WHEEL
final int GetWheelX () { return GetRootWidget.Width/2; }
final int GetWheelY () { return GetRootWidget.Height/2; }

final void DrawWheel () {
  Widget root = GetRootWidget;

  int x = GetWheelX();
  int y = GetWheelY();
  int w = int(root.CalcHexColorPatternWidth(radius, cellW, cellH));
  int h = int(root.CalcHexColorPatternHeight(radius, cellW, cellH));

  root.DrawHexColorPattern(x, y, radius, cellW, cellH);
  root.DrawRect(x, y, w, h, RGB(255, 255, 0));
}

final void HiHex (float mx, float my) {
  Widget root = GetRootWidget;
  int hpx, hpy;
  if (!root.CalcHexColorPatternCoords(out hpx, out hpy, mx, my, GetWheelX(), GetWheelY(), radius, cellW, cellH)) return;
  float hx, hy;
  root.CalcHexColorPatternHexCoordsAt(out hx, out hy, hpx, hpy, GetWheelX(), GetWheelY(), radius, cellW, cellH);
  root.ShadeHex(hx, hy, cellW, cellH, 0.8);
}
#endif


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  Widget root = GetRootWidget;

  if (currPage < 0 || currPage >= pages.length) {
    // bad page
    ShadeRect(0, 0, Width, Height, GetCvarF('menu_darkening'));
  } else {
    DrawFullScreenPic(pages[currPage].pichandle);
    // draw page number
    root.SetFont('smallfont');
    root.SetTextAlign(hright, vbottom);
    root.DrawText(root.Width, root.Height, va("%d/%d", currPage+1, pages.length), CR_DARKGRAY);
    // restore text align
    root.SetTextAlign(hleft, vtop);
  }

  #ifdef VV_TEST_HEX_WHEEL
  DrawWheel();
  HiHex(lastMouseX, lastMouseY);
  #endif
}


//==========================================================================
//
//  OnEvent
//
//==========================================================================
override bool OnEvent (ref event_t evt) {
  #ifdef VV_TEST_HEX_WHEEL
  if (evt.bubbling && evt.type == ev_mouse) {
    lastMouseX = evt.msx+ClipRect.OriginX/ClipRect.ScaleX;
    lastMouseY = evt.msy+ClipRect.OriginY/ClipRect.ScaleY;
    Widget root = GetRootWidget;
    int hpx, hpy;
    bool ok = root.CalcHexColorPatternCoords(out hpx, out hpy, lastMouseX, lastMouseY, GetWheelX(), GetWheelY(), radius, cellW, cellH);
    printdebug("!!! hpos=(%s,%s); pos=(%s,%s); ok=%B", hpx, hpy, lastMouseX, lastMouseY, ok);
  }
  #endif

  if (evt.bubbling && evt.type == ev_keydown) {
    int key = ConvertBoundKey(evt.keycode);
    switch (key) {
      case K_ESCAPE:
      case K_BACKSPACE:
      case K_F1:
        LocalSound('menu/clear');
        ClGame.ForceMenuOff();
        return true;

      case K_LEFTARROW: case K_PAD4:
        if (prevPage()) LocalSound('menu/clear');
        return true;

      case K_RIGHTARROW: case K_PAD6:
        if (nextPage()) LocalSound('menu/clear');
        return true;

      case K_ENTER: case K_PADENTER:
      case K_SPACE:
        LocalSound('menu/clear');
        if (!nextPage()) ClGame.ForceMenuOff();
        return true;
    }

    return true;
  }
  return ::OnEvent(evt);
}


defaultproperties {
  X = 0;
  Y = 0;
  //ScaleX = 2.0;
  //ScaleY = 2.4;
}
