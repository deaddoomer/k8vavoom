//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenScreenResolution : MenuScreen;

struct mode_t {
  int width;
  int height;
};

mode_t modes[7];

MenuChoiceEnum Mode;
MenuInputLine EdWidth;
MenuInputLine EdHeight;
MenuChoiceEnum Depth;
MenuChoiceEnum Windowed;
MenuChoiceEnum VSync;
MenuChoiceNumeric ScrScale;


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
override void CreateChoices () {
  Mode = GetItemContainer().NewChild(MenuChoiceEnum);
  SetChoiceInitialSizePos(Mode);
  Mode.Text = "Resolution";
  foreach (ref auto mi; modes) Mode.AddItem(va("%dx%d", mi.width, mi.height));
  Mode.SetInitialValue(GetModeValue());
  Mode.ValueChanging = delegate bool (Object Sender, float NewValueF) {
    int NewValue = int(NewValueF);
    EdWidth.Value = va("%d", modes[NewValue].width);
    EdHeight.Value = va("%d", modes[NewValue].height);
    return true;
  };
  //currentY += Mode.Height;
    SetLastHelp("Choose one of the predefined screen sizes.");

  EdWidth = GetItemContainer().NewChild(MenuInputLine);
  //SetChoiceInitialSizePos(EdWidth);
  //EdWidth.SetOrigin(ChoicesStartX+10, GetCurrentY());
  //EdWidth.CursorXOffs = -10;
  EdWidth.MakeOneLineControl();
  EdWidth.Text = "Width";
  EdWidth.Value = GetCvarS('screen_width');
  EdWidth.DisableSlotRendering();
  //currentY += EdWidth.Height;
    SetLastHelp("Custom screen resolution.");

  EdHeight = GetItemContainer().NewChild(MenuInputLine);
  //SetChoiceInitialSizePos(EdHeight);
  //EdHeight.SetOrigin(ChoicesStartX+10, GetCurrentY());
  //EdHeight.CursorXOffs = -10;
  EdHeight.MakeOneLineControl();
  EdHeight.Text = "Height";
  EdHeight.Value = GetCvarS('screen_height');
  EdHeight.DisableSlotRendering();
  //currentY += EdHeight.Height;
    SetLastHelp("Custom screen resolution.");

  ScrScale = GetItemContainer().NewChild(MenuChoiceNumeric);//CreateFloatNumericCvar("Screen Scale", 'gl_scale', 1, 1, 64);
  SetChoiceInitialSizePos(ScrScale);
  ScrScale.Text = "Screen Scale";
  //ScrScale.cvarSession = cvname;
  ScrScale.ValueDelta = 1;
  ScrScale.Value = GetCvarF('screen_scale');
  ScrScale.MinValue = 1;
  ScrScale.MaxValue = 8;
  //ScrScale.SetSessionCvar(cvname);
  //currentY += ScrScale.Height;
    SetLastHelp(
      "Screen scaling factor.\n"~
      "You can set it to >1 to render screen in lower resolution.\n"~
      "\cGWARNING! Requires applying of 'SET RESOLUTION' option!");

  Windowed = CreateEnumCvar("Fullscreen mode", 'screen_fsmode',
    "Window",
    "Scaled FS",
    "Real FS"
  );
  //Windowed.Width = Width;
    SetLastHelp(
      "There are two fullscreen modes available.\n"~
      "Scaled Fullscreen mode will not change your desktop resolution,\n"~
      "it will scale rendered image instead.\n"~
      "Real Fullscreen mode will change your desktop resolution.\n"~
      "\cGWARNING: The engine trusts you, and will not check if videomode is valid.");

  CreateEnumCvar("FS Letterbox", 'gl_letterbox',
    "No",
    "Yes"
  );
    SetLastHelp(
      "Use letterbox mode for scaled fullscreen?");

  CreateEnumCvar("FS Scale Filter", 'gl_letterbox_filter',
    "Nearest",
    "Linear (smooth)"
  );
    SetLastHelp(
      "Which texture filter the engine should use to scale image in Scaled FS?");

  VSync = GetItemContainer().NewChild(MenuChoice_OnOff);
  SetChoiceInitialSizePos(VSync);
  //VSync.SetOrigin(ChoicesStartX, GetCurrentY());
  VSync.Text = "VSync";
  VSync.SetInitialValue(GetCvar('r_vsync'));
    SetLastHelp(
      "The engine will try to use adaptive vsync automatically.\n"~
      "You have to use \"Set Resolution\" to activate new setting.\n"~
      "Note that FPS is capped at 90, so don't expect glaring numbers without vsync.");
  //currentY += VSync.Height;

  /*
  CreateEnumCvar("Aspect Ratio", 'r_aspect_ratio',
    "Vanilla",
    "Standard (4:3)",
    "Wide Screen 1 (16:9)",
    "Wide Screen 2 (16:10)"
  );
  */

  auto itemRatio = GetItemContainer().NewChild(MenuChoiceEnum);
  SetChoiceInitialSizePos(itemRatio);
  itemRatio.Text = "Aspect Ratio";
  // add all known aspect ratios
  foreach (int ridx; 0..R_GetAspectRatioCount()) {
    if (R_GetAspectRatioHoriz(ridx) == 1 && R_GetAspectRatioVert(ridx) == 1) {
      if (!IsDeveloperVersion) continue;
    }
    itemRatio.AddItem(R_GetAspectRatioDsc(ridx), ridx);
  }
  itemRatio.SetSessionCvar('r_aspect_ratio');
  //currentY += itemRatio.Height;
    SetLastHelp(
      "Screen aspect ratio."/*~
      "\n'Vanilla' is for square pixels, regardless of screen resolution.\n"*/);

  MenuTextButton Btn = GetItemContainer().NewChild(MenuSmallTextButton);
  //SetTextButtonInitialSizePos(Btn);
  SetChoiceInitialSizePos(Btn);
  //Btn.SetOrigin(ChoicesStartX, GetCurrentY());
  Btn.Text = "Set Resolution";
  Btn.Activated = &ActivateSetMode;
}


//==========================================================================
//
//  GetModeValue
//
//==========================================================================
int GetModeValue () {
  int w = GetCvar('screen_width');
  int h = GetCvar('screen_height');
  foreach (auto mi; 0..modes.length) {
    if (modes[mi].width == w && modes[mi].height == h) return mi;
  }
  return 0;
}


//==========================================================================
//
//  ActivateSetMode
//
//==========================================================================
void ActivateSetMode (Object Sender) {
  SetCvar('screen_fsmode', int(Windowed.Value));
  SetCvar('r_vsync', int(VSync.Value));
  SetCvarF('screen_scale', ScrScale.Value);
  CmdBuf_AddText("SetResolution %d %d\n", atoi(EdWidth.Value) ? atoi(EdWidth.Value) : modes[int(Mode.Value)].width,
    atoi(EdHeight.Value) ? atoi(EdHeight.Value) : modes[int(Mode.Value)].height);
}


defaultproperties {
  MenuName = 'Screen_Resolution_Menu';
  WidthThreshold = 10;
  ChoicesStartX = 120;
  SelectorType = MenuSelector_SmallRight;
  Title = "SCREEN RESOLUTION";
  modes[0].width = 640; modes[0].height = 480;
  modes[1].width = 800; modes[1].height = 600;
  modes[2].width = 1024; modes[2].height = 768;
  modes[3].width = 1152; modes[3].height = 864;
  modes[4].width = 1280; modes[4].height = 1024;
  modes[5].width = 1600; modes[5].height = 1200;
  modes[6].width = 1920; modes[6].height = 1200;
}
