//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenScreenResolution : MenuScreen;

struct mode_t {
  int width;
  int height;
};

mode_t modes[6];

MenuChoiceEnum Mode;
MenuInputLine EdWidth;
MenuInputLine EdHeight;
MenuChoiceEnum Depth;
MenuChoiceEnum Windowed;
MenuChoiceEnum VSync;


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
override void CreateChoices () {
  Mode = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  SetChoiceInitialSizePos(Mode);
  Mode.Text = "Resolution";
  foreach (ref auto mi; modes) Mode.AddItem(va("%dx%d", mi.width, mi.height));
  Mode.SetInitialValue(GetModeValue());
  Mode.ValueChanging = delegate bool (Object Sender, float NewValueF) {
    int NewValue = int(NewValueF);
    EdWidth.Value = va("%d", modes[NewValue].width);
    EdHeight.Value = va("%d", modes[NewValue].height);
    return true;
  };
  currentY += Mode.Height;

  EdWidth = MenuInputLine(NewChild(MenuInputLine));
  SetChoiceInitialSizePos(EdWidth);
  EdWidth.SetOrigin(ChoicesStartX+10, currentY);
  EdWidth.CursorXOffs = -10;
  EdWidth.Text = "Width";
  EdWidth.Value = GetCvarS('screen_width');
  EdWidth.DisableSlotRendering();
  currentY += EdWidth.Height;

  EdHeight = MenuInputLine(NewChild(MenuInputLine));
  SetChoiceInitialSizePos(EdHeight);
  EdHeight.SetOrigin(ChoicesStartX+10, currentY);
  EdHeight.CursorXOffs = -10;
  EdHeight.Text = "Height";
  EdHeight.Value = GetCvarS('screen_height');
  EdHeight.DisableSlotRendering();
  currentY += EdHeight.Height;

  Windowed = CreateEnumCvar("Fullscreen mode", 'screen_fsmode',
    "Window",
    "Scaled FS",
    "Real FS"
  );
  //Windowed.Width = Width;
    SetLastHelp(
      "There are two fullscreen modes available.\n"~
      "Scaled Fullscreen mode will not change your desktop resolution,\n"~
      "it will scale rendered image instead.\n"~
      "Real Fullscreen mode will change your desktop resolution.\n"~
      "WARNING: The engine trusts you, and will not check if videomode is valid.");

  VSync = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
  SetChoiceInitialSizePos(VSync);
  //VSync.SetOrigin(ChoicesStartX, currentY);
  VSync.Text = "VSync";
  VSync.SetInitialValue(GetCvar('r_vsync'));
    SetLastHelp(
      "The engine will try to use adaptive vsync automatically.\n"~
      "You have to use \"Set Resolution\" to activate new setting.\n"~
      "Note that FPS is capped at 90, so don't expect glaring numbers without vsync.");
  currentY += VSync.Height;

  CreateEnumCvar("Aspect Ratio", 'r_aspect_ratio',
    "Vanilla",
    "Standard (4:3)",
    "Wide Screen 1 (16:9)",
    "Wide Screen 2 (16:10)"
  );
    SetLastHelp(
      "Screen aspect ratio.\n"~
      "'Vanilla' is (almost) how DooM was looking on the original VGA.\n"~
      "'Standard' is normal 4:3 (somewhat distorted graphics).\n"~
      "Others are for various wide-screen modes.");

  MenuTextButton Btn = MenuTextButton(NewChild(MenuSmallTextButton));
  //SetTextButtonInitialSizePos(Btn);
  SetChoiceInitialSizePos(Btn);
  //Btn.SetOrigin(ChoicesStartX, currentY);
  Btn.Text = "Set Resolution";
  Btn.Activated = &ActivateSetMode;
}


//==========================================================================
//
//  GetModeValue
//
//==========================================================================
int GetModeValue () {
  int w = GetCvar('screen_width');
  int h = GetCvar('screen_height');
  foreach (auto mi; 0..modes.length) {
    if (modes[mi].width == w && modes[mi].height == h) return mi;
  }
  return 0;
}


//==========================================================================
//
//  ActivateSetMode
//
//==========================================================================
void ActivateSetMode (Object Sender) {
  SetCvar('screen_fsmode', int(Windowed.Value));
  SetCvar('r_vsync', int(VSync.Value));
  CmdBuf_AddText("SetResolution %d %d\n", atoi(EdWidth.Value) ? atoi(EdWidth.Value) : modes[int(Mode.Value)].width,
    atoi(EdHeight.Value) ? atoi(EdHeight.Value) : modes[int(Mode.Value)].height);
}


defaultproperties {
  WidthThreshold = 10;
  ChoicesStartX = 120;
  ChoicesStartY = 26;
  SelectorType = MenuSelector_SmallRight;
  Title = "SCREEN RESOLUTION";
  modes[0].width = 640; modes[0].height = 480;
  modes[1].width = 800; modes[1].height = 600;
  modes[2].width = 1024; modes[2].height = 768;
  modes[3].width = 1152; modes[3].height = 864;
  modes[4].width = 1280; modes[4].height = 1024;
  modes[5].width = 1600; modes[5].height = 1200;
}
