//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreenScreenResolution : MenuScreen;

struct mode_t {
  int width;
  int height;
};

mode_t modes[6];
//int depths[3];

MenuChoiceEnum Mode;
MenuInputLine EdWidth;
MenuInputLine EdHeight;
MenuChoiceEnum Depth;
MenuChoiceEnum Windowed;
MenuChoiceEnum VSync;


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
override void CreateChoices () {
  Mode = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Mode.SetOrigin(ChoicesStartX, currentY);
  Mode.Text = "Resolution";
  /*
  Mode.AddItem("640x480");
  Mode.AddItem("800x600");
  Mode.AddItem("1024x768");
  Mode.AddItem("1152x864");
  Mode.AddItem("1280x1024");
  Mode.AddItem("1600x1200");
  */
  foreach (ref auto mi; modes) Mode.AddItem(va("%dx%d", mi.width, mi.height));
  Mode.SetInitialValue(GetModeValue());
  Mode.ValueChanging = delegate bool (Object Sender, int NewValue) {
    EdWidth.Value = va("%d", modes[NewValue].width);
    EdHeight.Value = va("%d", modes[NewValue].height);
    return true;
  };
  currentY += Mode.Height;



  EdWidth = MenuInputLine(NewChild(MenuInputLine));
  EdWidth.SetOrigin(ChoicesStartX+10, currentY);
  EdWidth.CursorXOffs = -10;
  EdWidth.Text = "Width";
  EdWidth.Value = GetCvarS('screen_width');
  EdWidth.DisableSlotRendering();
  currentY += EdWidth.Height;

  EdHeight = MenuInputLine(NewChild(MenuInputLine));
  EdHeight.SetOrigin(ChoicesStartX+10, currentY);
  EdHeight.CursorXOffs = -10;
  EdHeight.Text = "Height";
  EdHeight.Value = GetCvarS('screen_height');
  EdHeight.DisableSlotRendering();
  currentY += EdHeight.Height;

  /*
  Depth = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Depth.SetOrigin(ChoicesStartX, currentY);
  Depth.Text = "Bit depth";
  Depth.AddItem("16");
  Depth.AddItem("24");
  Depth.AddItem("32");
  Depth.SetInitialValue(GetDepthValue());
  currentY += Depth.Height;
  */

  Windowed = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
  Windowed.SetOrigin(ChoicesStartX, currentY);
  Windowed.Text = "Windowed";
  Windowed.SetInitialValue(GetCvar('screen_windowed'));
  currentY += Windowed.Height;

  VSync = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
  VSync.SetOrigin(ChoicesStartX, currentY);
  VSync.Text = "VSync";
  VSync.SetInitialValue(GetCvar('r_vsync'));
  currentY += VSync.Height;

  CreateEnumCvar("Aspect Ratio", 'r_aspect_ratio',
    "Normal",
    "Original (4:3)",
    "Wide Screen 1 (16:9)",
    "Wide Screen 2 (16:10)"
  );

  MenuTextButton Btn = MenuTextButton(NewChild(MenuSmallTextButton));
  Btn.SetOrigin(ChoicesStartX, currentY);
  Btn.Text = "Set Resolution";
  Btn.Activated = &ActivateSetMode;
}


//==========================================================================
//
//  GetModeValue
//
//==========================================================================
final int GetModeValue () {
  int w = GetCvar('screen_width');
  int h = GetCvar('screen_height');
  foreach (auto mi; 0..modes.length) {
    if (modes[mi].width == w && modes[mi].height == h) return mi;
  }
  return 0;
}


//==========================================================================
//
//  GetDepthValue
//
//==========================================================================
/*
final int GetDepthValue () {
  int b = GetCvar('screen_bpp');
  foreach (auto bi; 0..3) if (depths[bi] == b) return bi;
  return 0;
}
*/


//==========================================================================
//
//  ActivateSetMode
//
//==========================================================================
void ActivateSetMode (Object Sender) {
  SetCvar('screen_windowed', Windowed.Value);
  SetCvar('r_vsync', VSync.Value);
  CmdBuf_AddText("SetResolution %d %d\n", atoi(EdWidth.Value) ? atoi(EdWidth.Value) : modes[Mode.Value].width,
    atoi(EdHeight.Value) ? atoi(EdHeight.Value) : modes[Mode.Value].height);
}


defaultproperties {
  ChoicesStartX = 120;
  ChoicesStartY = 26;
  SelectorType = MenuSelector_SmallRight;
  Title = "SCREEN RESOLUTION";
  modes[0].width = 640; modes[0].height = 480;
  modes[1].width = 800; modes[1].height = 600;
  modes[2].width = 1024; modes[2].height = 768;
  modes[3].width = 1152; modes[3].height = 864;
  modes[4].width = 1280; modes[4].height = 1024;
  modes[5].width = 1600; modes[5].height = 1200;
  /*
  depths[0] = 16;
  depths[1] = 24;
  depths[2] = 32;
  */
}
