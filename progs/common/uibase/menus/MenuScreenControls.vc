//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class MenuScreenControls : MenuScreen;

int NumControls;


// We'll create some arrays here for special controls
struct alias_t {
  string alias_name; // name of the alias
  string command; // command to type from console
};


struct bind {
  string bind_key; // key to bind this alias to
  string alias_name; // name of the alias
};


struct menukey {
  string desc; // description of the key for menu
  string alias_name; // name of the alias
};


// jeep dynamic arrays of each of these so that we "build"
// the special control sections in the menu
array!alias_t aliases_list;
array!bind dbinds_list;
array!bind binds_list;
array!menukey menukeys_list;

string AltTitle; // alternate title for the screen (if any)


//==========================================================================
//
//  GenerateArrays
//
//  This method generates dynamic arrays of special controls from KEYCONF
//  scripts
//
//==========================================================================
void GenerateArrays () {
  // This method parses KEYCONF special controls to be added to
  // a special controls screen to display
  ScriptsParser kc = ScriptsParser(SpawnObject(ScriptsParser));

  kc.OpenLumpName('keyconf');
  // Lump is present, scan it until we find a 'addkeysection'
  while (!kc.AtEnd()) {
    // We are only interested in a couple of commands, like
    // 'addkeysection', 'bind', 'defaultbind' and 'addmenukey'
    if (kc.Check("addkeysection")) {
      // addkeysection "Title" keysection<-(for config file)
      kc.ExpectString();
      AltTitle = kc.String;
      // Ignore the config section
      // (until we think a way to implement it)
      kc.ExpectString();
    }
    if (kc.Check("alias")) {
      // Store alias name in the special array
      aliases_list.length += 1;
      kc.ExpectString();
      aliases_list[$-1].alias_name = kc.String;
      kc.ExpectString();
      aliases_list[$-1].command = kc.String;
    }
    if (kc.Check("defaultbind")) {
      dbinds_list.length += 1;
      kc.ExpectString();
      dbinds_list[$-1].bind_key = kc.String;
      kc.ExpectString();
      dbinds_list[$-1].alias_name = kc.String;
    }
    if (kc.Check("bind")) {
      binds_list.length += 1;
      kc.ExpectString();
      binds_list[$-1].bind_key = kc.String;
      kc.ExpectString();
      binds_list[$-1].alias_name = kc.String;
    }
    if (kc.Check("addmenukey")) {
      menukeys_list.length += 1;
      kc.ExpectString();
      menukeys_list[$-1].desc = kc.String;
      kc.ExpectString();
      menukeys_list[$-1].alias_name = kc.String;
    }
    kc.GetString();
  }
  kc.Destroy();
}


//==========================================================================
//
//  AddControl
//
//==========================================================================
void AddControl (string Text, string CommandOn, string CommandOff) {
  MenuControlKey newCtl = MenuControlKey(NewChild(MenuControlKey));
  newCtl.SetOrigin(ChoicesStartX, ChoicesStartY+NumControls*10);
  newCtl.Height = 10;
  newCtl.Text = Text;
  newCtl.CommandOn = CommandOn;
  newCtl.CommandOff = CommandOff;
  ++NumControls;
}


//==========================================================================
//
//  AddText
//
//==========================================================================
void AddText (string Text) {
  auto Btn = MenuTextButton(NewChild(MenuSmallTextButton));
  Btn.SetOrigin(ChoicesStartX, ChoicesStartY+NumControls*10);
  Btn.Text = Text;
  Btn.Focusable = false;
  Btn.TextColour = CR_OLIVE;
  Btn.TextColourFocus = CR_OLIVE;
  Btn.Height = 10;
  ++NumControls;
}


//==========================================================================
//
//  CreateControlKeyChoices
//
//==========================================================================
void CreateControlKeyChoices () {
  //print("=== CreateControlKeyChoices ===");

  AddControl("Move foward", "+Forward", "-Forward");
  AddControl("Move backward", "+Backward", "-Backward");
  AddControl("Turn left", "+Left", "-Left");
  AddControl("Turn right", "+Right", "-Right");
  AddControl("Move left", "+MoveLeft", "-MoveLeft");
  AddControl("Move right", "+MoveRight", "-MoveRight");
  AddControl("Fire", "+Attack", "-Attack");
  AddControl("Use", "+Use", "-Use");
  AddControl("Run", "+Speed", "-Speed");
  AddControl("Strafe", "+Strafe", "-Strafe");

  AddText("");

  AddControl("Look up", "+LookUp", "-LookUp");
  AddControl("Look down", "+LookDown", "-LookDown");
  AddControl("Centre look", "+LookCentre", "-LookCentre");
  AddControl("Jump", "+Jump", "-Jump");
  AddControl("Crouch", "+Crouch", "-Crouch");
  AddControl("Alt Fire", "+AltAttack", "-AltAttack");
  AddControl("Mouse look", "+MouseLook", "-MouseLook");

  AddText("");

  AddControl("Reload", "impulse 56", "");
  AddControl("Fly up", "+FlyUp", "-FlyUp");
  AddControl("Fly down", "+FlyDown", "-FlyDown");
  AddControl("Centre flight", "+FlyCentre", "-FlyCentre");
  AddControl("Inventory left", "Impulse 13", "");
  AddControl("Inventory right", "Impulse 14", "");
  AddControl("Inventory use", "Impulse 15", "");
  AddControl("Talk key", "ChatMode", "");
  AddControl("Toggle always run", "ToggleAlwaysRun", "");
  AddControl("Previous weapon", "impulse 17", "");
  AddControl("Next weapon", "impulse 18", "");
  AddControl("Toggle Console", "ToggleConsole", "");
  AddControl("Smaller view", "SizeDown", "");
  AddControl("Larger view", "SizeUp", "");

  AddText("");
  AddControl("Quick Save", "QuickSave", "");
  AddControl("Quick Load", "QuickLoad", "");

  if (GameName == "strife") {
    // strife keys
    AddText("");
    AddText("Strife Keys");
    AddControl("Inventory drop", "Impulse 11", "");
    AddControl("Show weapons", "sb_show_weapons 1", "sb_show_weapons 0");
    AddControl("Show keys", "sb_show_keys 1", "sb_show_keys 0");
    AddControl("Show objectives", "sb_show_objectives 1", "sb_show_objectives 0");
  }

  Height = ChoicesStartY+NumControls*10;
  if (Height > GetVirtualHeight()) {
    Height = GetVirtualHeight();
    MenuScrollable = true;
  }
}


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
override void CreateChoices () {
  //print("=== CreateChoices (%n) ===", GetClassName(Class));
  CreateControlKeyChoices();
}


//==========================================================================
//
//  CursorMoved
//
//==========================================================================
override void CursorMoved () {
  ::CursorMoved();
  if (Selector && ClGame) {
    Selector.SetPos(160+Items[CursorPos].X+ClGame.ControlColumn*90, Items[CursorPos].Y);
    Selector.SetYOfs(Items[CursorPos].Height);
  }
}


defaultproperties {
  X = 130;
  Y = 60;
  Width = 380;
  Height = 360;

  ChoicesStartX = 190;
  ChoicesStartY = 26;

  TitleX = 190;

  SelectorType = MenuSelector_SmallRight;
  Title = "SETUP CONTROLS";
  MenuScrollable = true;
}
