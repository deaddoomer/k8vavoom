//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuScreenControls : MenuScreen;

int NumControls;


// We'll create some arrays here for special controls
struct alias_t {
  string alias_name; // name of the alias
  string command; // command to type from console
};


struct bind {
  string bind_key; // key to bind this alias to
  string alias_name; // name of the alias
};


struct menukey {
  string desc; // description of the key for menu
  string alias_name; // name of the alias
};


// jeep dynamic arrays of each of these so that we "build"
// the special control sections in the menu
array!alias_t aliases_list;
array!bind dbinds_list;
array!bind binds_list;
array!menukey menukeys_list;

string AltTitle; // alternate title for the screen (if any)

int strifeMode = 0; // 0: don't care; -1: disabled in Strife; 1: enabled in Strife


//==========================================================================
//
//  ParseKeyConfLump
//
//==========================================================================
void ParseKeyConfLump (int lump) {
  if (lump < 0) return;
  auto kc = SpawnObject(ScriptsParser);
  scope(exit) delete kc;
  kc.OpenLumpIndex(lump);

  while (!kc.AtEnd()) {
    // We are only interested in a couple of commands, like
    // 'addkeysection', 'bind', 'defaultbind' and 'addmenukey'
    if (kc.Check("addkeysection")) {
      // addkeysection "Title" keysection<-(for config file)
      kc.ExpectString();
      AltTitle = kc.String;
      // Ignore the config section
      // (until we think out a way to implement it)
      kc.ExpectString();
      continue;
    }
    if (kc.Check("alias")) {
      // Store alias name in the special array
      auto aa = aliases_list.alloc();
      kc.ExpectString();
      aa.alias_name = kc.String;
      kc.ExpectString();
      aa.command = kc.String;
      continue;
    }
    if (kc.Check("defaultbind")) {
      auto bb = dbinds_list.alloc();
      kc.ExpectString();
      bb.bind_key = kc.String;
      kc.ExpectString();
      bb.alias_name = kc.String;
      continue;
    }
    if (kc.Check("bind")) {
      auto bb = binds_list.alloc();
      kc.ExpectString();
      bb.bind_key = kc.String;
      kc.ExpectString();
      bb.alias_name = kc.String;
      continue;
    }
    if (kc.Check("addmenukey")) {
      auto mk = menukeys_list.alloc();
      kc.ExpectString();
      mk.desc = kc.String;
      kc.ExpectString();
      mk.alias_name = kc.String;
      continue;
    }
    kc.GetString();
  }
}


//==========================================================================
//
//  GenerateArrays
//
//  This method generates dynamic arrays of special controls from KEYCONF
//  scripts
//
//==========================================================================
void GenerateArrays () {
  foreach (int lump; WadIterateNS(EWadNamespace.Global)) {
    if (W_LumpName(lump) == 'keyconf') {
      ParseKeyConfLump(lump);
    }
  }
}


//==========================================================================
//
//  AddControl
//
//==========================================================================
void AddControl (string Text, string CommandOn, string CommandOff) {
  MenuControlKey newCtl = MenuControlKey(NewChild(MenuControlKey));
  //SetChoiceInitialSizeSimple(newCtl);
  newCtl.SetOrigin(/*ChoicesStartX*/Width/2, ChoicesStartY+NumControls*10);
  newCtl.Width = Width;
  newCtl.CursorXOffs = Width/2;
  newCtl.CursorXOffsHR = Width/2;
  newCtl.Height = 10;
  newCtl.Text = Text;
  newCtl.CommandOn = CommandOn;
  newCtl.CommandOff = CommandOff;
  newCtl.strifeMode = strifeMode;
       if (strifeMode < 0) newCtl.Disabled = IsStrife;
  else if (strifeMode > 0) newCtl.Disabled = !IsStrife;
  ++NumControls;
}


//==========================================================================
//
//  AddText
//
//==========================================================================
void AddText (string Text) {
  auto Btn = MenuTextButton(NewChild(MenuSmallTextButton));
  Btn.SetOrigin(/*ChoicesStartX*/Width/2, ChoicesStartY+NumControls*10);
  //SetChoiceInitialSizeSimple(Btn);
  Btn.Width = Width;
  Btn.CursorXOffs = Width/2;
  Btn.CursorXOffsHR = Width/2;
  Btn.Text = Text;
  Btn.Focusable = false;
  Btn.TextColor = CR_OLIVE;
  Btn.TextColorFocus = CR_OLIVE;
  Btn.Height = 10;
  ++NumControls;
}


//==========================================================================
//
//  CreateControlKeyChoices
//
//==========================================================================
void CreateControlKeyChoices () {
  Error("ooops");
}


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
override void CreateChoices () {
  CreateControlKeyChoices();
}


//==========================================================================
//
//  CursorMoved
//
//==========================================================================
override void CursorMoved () {
  ::CursorMoved();
  if (Selector && ClGame) {
    Selector.SetOriginCentered(Items[CursorPos].X+Items[CursorPos].CursorXOffs+ClGame.ControlColumn*90, Items[CursorPos].Y+Items[CursorPos].CursorYOffs, Items[CursorPos].Height);
  }
}


defaultproperties {
  WidthThreshold = 10;
  X = 130;
  Y = 60;
  Width = 380;
  Height = 360;

  ChoicesStartX = 190;
  //ChoicesStartX = 0;
  ChoicesStartY = 26;

  TitleX = 190;

  SelectorType = MenuSelector_SmallRight;
  Title = "SETUP CONTROLS";
  MenuScrollable = true;
}
