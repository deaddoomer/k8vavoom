//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class HelpText : Widget;

private string mText;
private bool mAtTop;

name FontName = 'smallfont';


final string text {
  get { return mText; }
  set { setText(value); }
}

final bool atTop {
  get { return mAtTop; }
  set { setAtTop(value); }
}


//==========================================================================
//
//  positionIt
//
//==========================================================================
void positionIt () {
  SetOrigin((GetVirtualWidth()-Width)/2, (mAtTop ? 2+16 : GetVirtualHeight()-Height-3));
}


//==========================================================================
//
//  setText
//
//==========================================================================
void setText (string text) {
  string fname = GetCvarS('ui_font_helptext');
  if (fname && !FontName.strEquCI(fname)) FontName = name(fname);

  text = text.xstrip;
  mText = SplitTextWithNewlines(text, GetVirtualWidth()-16);

  SetFont(FontName);
  SetTextAlign(hleft, vtop);
  SetSize(TextWidth(mText)+8, TextHeight(mText)+7);
  positionIt();
}


//==========================================================================
//
//  setAtTop
//
//==========================================================================
void setAtTop (bool v) {
  if (v == mAtTop) return;
  mAtTop = v;
  positionIt();
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  if (!mText || Width < 1 || Height < 1) return;
  SetFont(FontName);
  SetTextAlign(hleft, vtop);
  ShadeRect(0, 0, Width, Height, /*GetCvarF('menu_darkening')*/0.8);
  DrawRect(0, 0, Width, Height, RGB(255, 127, 0));
  DrawText(4, 4, mText, CR_ORANGE);
}


defaultproperties {
  X = 0;
  Y = 0;
  Width = 0;
  Height = 0;
  Focusable = false;
}
