//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuStaticAnim : /*Widget*/MenuSelectorBase;

int Speed;
array!int Frames;
float Time;

int OffsetX;
int OffsetY;

int OriginX;
int OriginY;

bool bAutoSize;
bool bBackwards;


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int OrgX, int OrgY) {
  OriginX = OrgX;
  OriginY = OrgY;
  SetPos(OriginX-OffsetX, OriginY-OffsetY);
}


//==========================================================================
//
//  AddFrame
//
//==========================================================================
void AddFrame (name Name) {
  int Handle;
  picinfo_t Info;

  Handle = R_RegisterPic(Name);
  Frames.length = Frames.length+1;
  Frames[Frames.length-1] = Handle;
  if (bAutoSize) {
    R_GetPicInfo(Handle, &Info);
    if (Frames.length == 1) {
      // set up offsets and size for initial frame
      OffsetX = Info.xoffset;
      OffsetY = Info.yoffset;
      SetSize(Info.width, Info.height);
    } else {
      // adjust offsets and size
      if (OffsetX < Info.xoffset) OffsetX = Info.xoffset;
      if (OffsetY < Info.yoffset) OffsetY = Info.yoffset;
      if (Width-OffsetX < Info.width-Info.xoffset) Width = Info.width-Info.xoffset+OffsetX;
      if (Height-OffsetY < Info.height-Info.yoffset) Height = Info.height-Info.yoffset+OffsetY;
    }
    SetPos(OriginX-OffsetX, OriginY-OffsetY);
  }
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  Time += DeltaTime;
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  int frame = int(Time*float(Speed))%Frames.length;
  if (bBackwards) frame = Frames.length-frame-1;
  DrawPic(OffsetX, OffsetY, Frames[frame]);
}


defaultproperties {
  bTickEnabled = true;
  bAutoSize = true;
}
