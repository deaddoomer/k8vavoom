//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuSaveSlot : MenuChoiceSlot;

const int SLOTTEXTLEN = 24;

int Status;
bool bEnteringText;
int SlotNum;
string Text;
string EnterText;
bool waitingDeletion; // special rendering


//==========================================================================
//
//  OnCreate
//
//==========================================================================
override void OnCreate () {
  ::OnCreate();
  InitSlot();
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  DrawStrikeLine = waitingDeletion;
  if (bEnteringText && IsFocus()) {
    DrawSlot(0, EnterText, true);
  } else {
    DrawSlot(0, Text, false);
  }
  DrawStrikeLine = false;
}


//==========================================================================
//
//  OnFocusReceived
//
//==========================================================================
override void OnFocusReceived () {
  waitingDeletion = false;
  ::OnFocusReceived();
}


//==========================================================================
//
//  OnFocusLost
//
//==========================================================================
override void OnFocusLost () {
  waitingDeletion = false;
  ::OnFocusLost();
}


//==========================================================================
//
//  ActivateSlot
//
//==========================================================================
void ActivateSlot () {
}


//==========================================================================
//
//  OnKeyDown
//
//==========================================================================
override bool OnKeyDown (int key) {
  if (bEnteringText) {
    // save game string input
    switch (key) {
      case K_ESCAPE:
      case K_MOUSE2:
        waitingDeletion = false;
        bEnteringText = false;
        break;

      case K_ENTER:
      case K_PADENTER:
      case K_MOUSE1:
      case K_JOY1:
        waitingDeletion = false;
        bEnteringText = false;
        if (key == K_JOY1 && !EnterText) EnterText = va("saved game %d", SlotNum);
        if (EnterText) {
          Text = EnterText;
          CmdBuf_AddText("Save %d \"%q\"\n", SlotNum, Text);
          GetClGame().ForceMenuOff();
        }
        break;

      case K_BACKSPACE:
        waitingDeletion = false;
        if (EnterText) EnterText = EnterText[0..$-1];
        break;

      default:
        if (EnterText.length < SLOTTEXTLEN-1) {
          string tk = TranslateKey(key);
          if (tk && tk[0] >= 32 && tk[0] < 128) {
            EnterText ~= tk;
          }
        }
        break;
    }
    return true;
  }

  key = ConvertBoundKey(key);

  if (key == K_DELETE || key == K_PADDOT) {
    if (Status) {
      if (!waitingDeletion) {
        waitingDeletion = true;
      } else {
        waitingDeletion = false;
        Status = 0;
        Text = "*deleted slot*";
        //print("DEL! slot=%d; status=%d", SlotNum, Status);
        CmdBuf_AddText("DeleteSavedGame %d\n", SlotNum);
      }
    }
    return true;
  }

  if (key == K_INSERT || key == K_PAD0) {
    waitingDeletion = false;
    return true;
  }

  if (key == K_ENTER || key == K_PADENTER || key == K_MOUSE1 || key == K_JOY1) {
    waitingDeletion = false;
    ActivateSlot();
    return true;
  }

  return false;
}


//==========================================================================
//
//  OnMouseClick
//
//==========================================================================
override void OnMouseClick (int X, int Y) {
  SetFocus();
  waitingDeletion = false;
  if (bEnteringText) {
    bEnteringText = false;
    if (EnterText) {
      Text = EnterText;
      CmdBuf_AddText("Save %d \"%q\"\n", SlotNum, Text);
      GetClGame().ForceMenuOff();
    }
  }
  ActivateSlot();
}


defaultproperties {
}
