//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuSList : MenuChoice;

int Cursor;
bool Master;
string lastCurrAddr;


//==========================================================================
//
//  OnCreate
//
//==========================================================================
override void OnCreate () {
  Width = Parent.Width;
  Height = Parent.Height;
}


//==========================================================================
//
//  StartSearching
//
//==========================================================================
void StartSearching () {
  StartSearch(Master);
}


//==========================================================================
//
//  DrawTextBox
//
//==========================================================================
void DrawTextBox (string text) {
  auto rootw = GetClGame().GRoot;

  rootw.SetTextAlign(hcenter, vcenter);
  rootw.SetFont('smallfont');

  int w = (rootw.TextWidth(text)+16)&~15;
  int h = (rootw.TextHeight(text)+16)&~15;
  //if (w > 304) w = 304;
  //if (h > 184) h = 184;

  int x = (rootw.Width-w)/2;
  int y = (rootw.Height-h)/2;

  rootw.FillRectWithFlatRepeat(x, y, w, h, GetClGame().msgboxState.flatName);
  GetClGame().DrawBorder(x, y, w, h);

  rootw.DrawText(rootw.Width/2, rootw.Height/2, text);
}


//==========================================================================
//
//  DMMode2Str
//
//==========================================================================
static final string DMMode2Str (int dmmode) {
  switch (dmmode) {
    case 0: return "COOP";
    case 1: return "DM";
    case 2: return "ALTDM";
  }
  return "UNKN";
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  //DrawBackground();

  auto slist = GetSlist();
  assert(slist);

  bool allowBG = IsFocused;

  SetFont('smallfont');

  int maxmapwdt = 0;
  int maxplrwdt = TextWidth(va("9/9"));
  int maxaddrwdt = 0;
  int maxmodewdt = 0;
  int newCurPos = -1;
  foreach (int idx, auto const ref nfo; slist.Cache) {
    maxmapwdt = max(maxmapwdt, TextWidth(nfo.Map));
    maxplrwdt = max(maxplrwdt, TextWidth(va("%d/%d", nfo.Users, nfo.MaxUsers)));
    maxaddrwdt = max(maxaddrwdt, TextWidth(nfo.CName));
    maxmodewdt = max(maxmodewdt, TextWidth(DMMode2Str(nfo.DeathMatch)));
    if (lastCurrAddr && lastCurrAddr == nfo.CName) newCurPos = idx;
  }

  if (newCurPos >= 0) Cursor = newCurPos;

  if (slist.Cache.length) {
    if (Cursor >= slist.Cache.length) Cursor = slist.Cache.length-1;
    if (Cursor < 0) Cursor = 0;
    assert(Cursor >= 0 && Cursor < slist.Cache.length);
    lastCurrAddr = slist.Cache[Cursor].CName;
  } else {
    Cursor = -1;
  }

  // right-aligned
  int xposUsers = Width-8;
  // left-aligned
  int xposMode = xposUsers-maxplrwdt-6-maxmodewdt;
  int xposAddr = xposMode-6-maxaddrwdt;
  int xposMap = xposAddr-6-maxmapwdt;

  //printdebug("====== count=%s ======", slist.Cache.length);
  int itemy = 32;
  foreach (int i; 0..slist.Cache.length) {
    //printdebug("  %s: name=<%s>; map=<%s>", i, slist.Cache[i].Name, slist.Cache[i].Map);
    int clr = (Cursor == i ? CR_WHITE : CR_RED);
    if (!slist.Cache[i].bGoodProtocol || !slist.Cache[i].bGoodWadList) clr = CR_BLACK;
    else if (slist.Cache[i].bPasswordProtected) clr = CR_CYAN;
    // background
    if (allowBG && Cursor == i) FillRect(0, itemy, Width, FontHeight(), RGB(152, 205, 50), 0.6);
    // draw server name
    SetTextAlign(hleft, vtop);
    DrawText(16, itemy, slist.Cache[i].Name, clr);
    // draw server map
    SetTextAlign(hleft, vtop);
    DrawText(xposMap, itemy, slist.Cache[i].Map, clr);
    // draw server user address
    DrawText(xposAddr, itemy, slist.Cache[i].CName, clr);
    // draw server mode
    DrawText(xposMode, itemy, DMMode2Str(slist.Cache[i].DeathMatch), clr);
    // draw users
    if (slist.Cache[i].MaxUsers) {
      SetTextAlign(hright, vtop);
      DrawText(Width-4, itemy, va("%d/%d", slist.Cache[i].Users, slist.Cache[i].MaxUsers), clr);
    }
    itemy += FontHeight();
  }

  if (Cursor >= 0 && Cursor < slist.Cache.length) {
    SetTextAlign(hleft, vtop);
    DrawText(8, 32+Cursor*FontHeight(), ">", CR_YELLOW);
  }

  if (slist.Cache.length && Cursor >= 0 && Cursor < slist.Cache.length) {
    int x = 8;
    int y = 32+HOSTCACHESIZE*FontHeight();
    foreach (int i; 0..slist.Cache[Cursor].WadFiles.length) {
      if (!slist.Cache[Cursor].WadFiles[i]) break;
      int w = TextWidth(slist.Cache[Cursor].WadFiles[i]);
      if (x+w > Width-8) {
        x = 8;
        y += FontHeight();
        //if (y > 190) break;
      }
      DrawText(x, y, slist.Cache[Cursor].WadFiles[i], CR_BROWN);
      x += w+8;
    }
  }

  if (slist.ReturnReason) DrawText(16, Width-FontHeight()-2, slist.ReturnReason);

       if (slist.bInProgress) DrawTextBox("Searching...");
  else if (!slist.Cache.length) DrawTextBox("No servers found");
}


//==========================================================================
//
//  OnEvent
//
//==========================================================================
override bool OnEvent (ref event_t evt) {
  if (evt.bubbling && evt.type == ev_keydown) {
    auto slist = GetSlist();
    assert(slist);

    int key = ConvertBoundKey(evt.keycode);
    switch (key) {
      case K_DOWNARROW:
        if (slist.Cache.length) {
          if (++Cursor >= slist.Cache.length) Cursor = 0;
          LocalSound('menu/cursor');
          lastCurrAddr = "";
        }
        return true;

      case K_UPARROW:
        if (slist.Cache.length) {
          if (--Cursor < 0) Cursor = slist.Cache.length-1;
          LocalSound('menu/cursor');
          lastCurrAddr = "";
        }
        return true;

      case K_ENTER:
      case K_PADENTER:
        if (lastCurrAddr && slist.Cache.length && Cursor >= 0 && Cursor < slist.Cache.length) {
          LocalSound('menu/choose');
          if (slist.Cache[Cursor].bGoodProtocol && slist.Cache[Cursor].bGoodWadList) {
            CmdBuf_AddText("connect \"%q\"\n", slist.Cache[Cursor].CName);
            GetClGame().ForceMenuOff();
          }
        }
        return true;

      case K_SPACE:
        if (!slist.bInProgress) {
          Cursor = -1;
          StartSearch(Master);
        }
        return true;
    }

    if (slist.bInProgress) return true;
  }

  return ::OnEvent(evt);
}


defaultproperties {
}
