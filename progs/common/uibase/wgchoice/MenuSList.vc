//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuSList : MenuChoice;

int Cursor;
slist_t *slist;
bool Master;


//==========================================================================
//
//  StartSearching
//
//==========================================================================
void StartSearching () {
  StartSearch(Master);
}


//==========================================================================
//
//  DrawTextBox
//
//==========================================================================
void DrawTextBox (string text) {
  // h/v center string and print it
#ifdef FOO_BOO
  int w = (TextWidth(text)+16)&~15;
  int h = (TextHeight(text)+16)&~15;
  if (w > 304) w = 304;
  if (h > 184) h = 184;

  SetTextAlign(hcentre, vcentre);

  int x = (GetVirtualWidth()-w)/2;
  int y = (GetVirtualHeight()-h)/2;

  FillRectWithFlat(x, y, w, h, GetClGame().MsgBoxFlat);
  GetClGame().DrawBorder(x, y, w, h);

  DrawText(GetVirtualWidth()/2, GetVirtualHeight(), text);
#else
  auto rootw = GetClGame().GRoot;

  rootw.SetTextAlign(hcentre, vcentre);
  rootw.SetFont('smallfont');

  int w = (rootw.TextWidth(text)+16)&~15;
  int h = (rootw.TextHeight(text)+16)&~15;
  //if (w > 304) w = 304;
  //if (h > 184) h = 184;

  int x = (rootw.Width-w)/2;
  int y = (rootw.Height-h)/2;

  rootw.FillRectWithFlat(x, y, w, h, GetClGame().MsgBoxFlat);
  GetClGame().DrawBorder(x, y, w, h);

  rootw.DrawText(rootw.Width/2, rootw.Height/2, text);
#endif
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  slist = GetSlist();

  SetTextAlign(hleft, vtop);
  foreach (int i; 0..slist->Cache.length) {
    DrawText(16, 32+10*i, slist->Cache[i].Name);
    DrawText(16+128, 32+10*i, slist->Cache[i].Map);
    if (slist->Cache[i].MaxUsers) {
      DrawText(16+256, 32+10*i, va("%d/%d", slist->Cache[i].Users, slist->Cache[i].MaxUsers));
    }
  }
  DrawText(8, 32+Cursor*10, ">");

  if (slist->ReturnReason) DrawText(16, 116, slist->ReturnReason);

  if (slist->Cache.length && Cursor >= 0 && Cursor < slist->Cache.length) {
    int x = 8;
    int y = 124;
    foreach (int i; 0..slist->Cache[Cursor].WadFiles.length) {
      if (!slist->Cache[Cursor].WadFiles[i]) break;
      int w = TextWidth(slist->Cache[Cursor].WadFiles[i]);
      if (x+w > 312) {
        x = 8;
        y += 9;
        if (y > 190) break;
      }
      DrawText(x, y, slist->Cache[Cursor].WadFiles[i]);
      x += w+8;
    }
  }

       if (slist->bInProgress) DrawTextBox("Searching...");
  else if (!slist->Cache.length) DrawTextBox("No servers found");
}


//==========================================================================
//
//  OnKeyDown
//
//==========================================================================
override bool OnKeyDown (int key) {
  slist = GetSlist();

  if (slist->bInProgress) return true;

  key = ConvertBoundKey(key);
  switch (key) {
    case K_DOWNARROW:
      if (slist->Cache.length) {
        if (++Cursor >= slist->Cache.length) Cursor = 0;
        LocalSound('menu/cursor');
      }
      return true;

    case K_UPARROW:
      if (slist->Cache.length) {
        if (--Cursor < 0) Cursor = slist->Cache.length-1;
        LocalSound('menu/cursor');
      }
      return true;

    case K_ENTER:
    case K_PADENTER:
      if (slist->Cache.length) {
        LocalSound('menu/choose');
        CmdBuf_AddText("connect \"%q\"\n", slist->Cache[Cursor].CName);
      }
      return true;

    case K_SPACE:
      Cursor = 0;
      StartSearch(Master);
      return true;
  }

  return false;
}


defaultproperties {
}
