//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class MenuChoiceNumeric : MenuChoice;

//int TextColour = CR_WHITE;
int TextColour = CR_RED;
int TextColourFocus = CR_YELLOW;
int ValueColour = CR_DARKGREEN; //CR_RED;
int ValueColourFocus = CR_GREEN; //CR_YELLOW;
string Text;

float Value;
float ValueDelta;
float MinValue;
float MaxValue;


delegate bool ValueChanging (Object Sender, float NewValue);


//==========================================================================
//
//  getSavedValue
//
//==========================================================================
float getSavedValue (optional float defval) {
  if (!specified_defval) defval = Value;
  if (cvarSession) return getSavedFloat(cvarSession, defval);
  return defval;
}


//==========================================================================
//
//  SetSessionCvar
//
//==========================================================================
void SetSessionCvar (name Name, optional float defval) {
  if (!specified_defval) defval = 0;
  cvarSession = Name;
  if (Name) defval = fclamp(getSavedFloat(Name, defval), MinValue, MaxValue);
  if (SetNewValue(defval)) Value = defval;
}


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int x, int y) {
  SetPos(x-CursorXOffs, y);
}


//==========================================================================
//
//  SetNewValue
//
//==========================================================================
bool SetNewValue (float newValue) {
  if (ValueChanging) {
    if (!ValueChanging(self, newValue)) return false;
  }
  if (cvarSession) setSavedFloat(cvarSession, newValue);
  Value = newValue;
  return true;
}


//==========================================================================
//
//  SetInitialValue
//
//==========================================================================
void SetInitialValue (float AValue) {
  Value = AValue;
  if (Value < MinValue) Value = MinValue;
  if (Value > MaxValue) Value = MaxValue;
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  int Col = (IsFocus() ? TextColourFocus : TextColour);

  /*
  if (bLeftAlign) {
    SetTextAlign(hleft, vtop);
    DrawText(0, 0, Text, Col);
  } else
  */
  {
    SetTextAlign(hright, vtop);
    DrawText(CursorXOffs, 0, Text, Col);
  }

  //int xx = (bLeftAlign ? TextWidth(Text)+8 : CursorXOffs+10);
  int xx = CursorXOffs+10;
  int Col2 = (IsFocus() ? ValueColourFocus : ValueColour);
  SetTextAlign(hleft, vtop);
  //k8: we have much better fp->str now, so there's no need to perform any string trickery here
  DrawText(xx, 0, va("%f", Value), Col2);
}


//==========================================================================
//
//  OnKeyDown
//
//==========================================================================
override bool OnKeyDown (int key) {
  int nkey = ConvertBoundKey(key);
  float newValue;
  switch (nkey) {
    case K_LEFTARROW:
    case K_MWHEELDOWN:
      newValue = Value-ValueDelta;
      if (newValue < MinValue) newValue = MinValue;
      if (SetNewValue(newValue)) LocalSound('menu/change');
      return true;
    case K_RIGHTARROW:
    case K_MWHEELUP:
      newValue = Value+ValueDelta;
      if (newValue > MaxValue) newValue = MaxValue;
      if (SetNewValue(newValue)) LocalSound('menu/change');
      return true;
  }
  return ::OnKeyDown(key);
}


//==========================================================================
//
//  OnMouseClick
//
//==========================================================================
override void OnMouseClick (int X, int Y) {
  SetFocus();
  float newValue = Value-ValueDelta;
  if (newValue < MinValue) newValue = MinValue;
  if (SetNewValue(newValue)) LocalSound('menu/change');
}


//==========================================================================
//
//  OnRMouseClick
//
//==========================================================================
override void OnRMouseClick (int X, int Y) {
  SetFocus();
  float newValue = Value+ValueDelta;
  if (newValue > MaxValue) newValue = MaxValue;
  if (SetNewValue(newValue)) LocalSound('menu/change');
}


defaultproperties {
  Width = 360;
  Height = 10;
  CursorXOffs = 200;
  Value = 0.0;
  ValueDelta = 1.0;
  MinValue = 0.0;
  MaxValue = 1.0;
}
