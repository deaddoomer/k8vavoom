//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuInputLine : MenuChoiceSlot;

bool bEnteringText;
string Text;
string Value;
string EnterText;
int MaxTextLength;

delegate void ValueChanged (Object Sender);


//==========================================================================
//
//  OnCreate
//
//==========================================================================
override void OnCreate () {
  ::OnCreate();
  InitSlot();
}


//==========================================================================
//
//  OnFocusLost
//
//==========================================================================
override void OnFocusLost () {
  AbortEnteringText();
  ::OnFocusLost();
}


//==========================================================================
//
//  SetText
//
//==========================================================================
void SetText (string AText) {
  Text = TranslateString(AText);
}


//==========================================================================
//
//  DisableSlotRendering
//
//==========================================================================
void DisableSlotRendering () {
  if (DrawSlotPic) {
    DrawSlotPic = false;
    //Height = 20;
    auto oldFont = GetFont();
    scope(exit) SetFont(oldFont);
    SetFont('smallfont');
    Height = FontHeight()+TextHeightAdd;
    // hack for default doom font
    if (Height == 10 && TextHeightAdd == 2) Height = 11;
  }
}


//==========================================================================
//
//  MakeOneLineControl
//
//==========================================================================
void MakeOneLineControl () {
  DisableSlotRendering();
  Width = Parent.Width;
  auto par = FindParentWithClass(MenuScreen);
  if (par) {
    par.SetChoiceInitialSizePos(self);
    SetOrigin(0, par.GetCurrentY());
  }
  //CursorXOffs = -10;
}


//==========================================================================
//
//  OnValueChanged
//
//==========================================================================
void OnValueChanged () {
  if (ValueChanged) ValueChanged(self);
}


//==========================================================================
//
//  StartEnteringText
//
//==========================================================================
void StartEnteringText (optional bool sound/*=false*/) {
  if (!bEnteringText) {
    bEnteringText = true;
    EnterText = Value;
    if (sound) LocalSound('menu/choose');
  }
}


//==========================================================================
//
//  AbortEnteringText
//
//==========================================================================
void AbortEnteringText () {
  bEnteringText = false;
  EnterText = Value;
}


//==========================================================================
//
//  FinishEnteringText
//
//==========================================================================
void FinishEnteringText () {
  if (bEnteringText) {
    bEnteringText = false;
    Value = EnterText;
    OnValueChanged();
  }
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  DrawBackground();

  SetFont('smallfont');

  if (DrawSlotPic) {
    // editor with a slot
    SetTextAlign(hleft, vtop);
    DrawText(0, 0, Text, IsFocused ? CR_YELLOW : CR_WHITE);
    if (bEnteringText) {
      DrawSlot(12-(DrawSlotPic ? 0 : 7), EnterText, true);
    } else {
      DrawSlot(12-(DrawSlotPic ? 0 : 7), Value, false);
    }
  } else {
    // editor without a slot
    int ty = TextHeightAdd/2;
    SetTextAlign(hright, vtop);
    DrawText(CursorXOffs, ty, Text, (IsFocused ? CR_YELLOW : CR_WHITE));
    SetTextAlign(hleft, vtop);
    int xx = CursorXOffs+10;
    int inputWidth = Width-xx-3;
    ShadeRect(xx-1, ty, inputWidth, FontHeight(), GetCvarF('menu_darkening'));
    string txt = (bEnteringText ? EnterText : Value);
    if (bEnteringText) {
      while (txt && TextWidth(txt)+CursorWidth() > inputWidth+2) txt = txt[1..$];
      DrawText(xx, ty, txt);
      DrawCursor();
    } else {
      bool drawDot = false;
      if (TextWidth(txt) > inputWidth) {
        while (txt && TextWidth(txt) > inputWidth) txt = txt[0..$-1];
        if (txt) txt = txt[0..$-1];
        drawDot = true;
      }
      DrawText(xx, ty, txt);
      if (drawDot) DrawText(xx+TextWidth(txt), ty, ".", CR_FIRE);
    }
  }
}


//==========================================================================
//
//  IsAlphaDigit
//
//==========================================================================
static final bool IsAlphaDigit (int ch) {
  return
    (ch >= 65 && ch <= 90) ||
    (ch >= 97 && ch <= 122) ||
    (ch >= 48 && ch <= 57);
}


//==========================================================================
//
//  OnEvent
//
//==========================================================================
override bool OnEvent (ref event_t evt) {
  // "on click"
  if (evt.bubbling && evt.type == ev_click && evt.dest == self) {
    switch (evt.keycode) {
      case K_MOUSE1:
        if (IsFocused) {
          if (!bEnteringText) StartEnteringText(sound:true);
          return true;
        }
        break;
      case K_MOUSE2:
        if (IsFocused) {
          if (bEnteringText) AbortEnteringText();
          return true;
        }
        break;
    }
  }

  if (evt.bubbling && evt.type == ev_keydown) {
    if (bEnteringText) {
      switch (evt.keycode) {
        case K_ESCAPE:
          AbortEnteringText();
          break;
        case K_ENTER:
        case K_PADENTER:
          FinishEnteringText();
          break;
        case K_BACKSPACE:
          if (EnterText) {
            if (evt.bCtrl) {
              if (EnterText[$-1] <= 32) {
                while (EnterText && EnterText[$-1] <= 32) EnterText = EnterText[0..$-1];
              } else {
                bool wantAD = IsAlphaDigit(EnterText[$-1]);
                while (EnterText && IsAlphaDigit(EnterText[$-1]) == wantAD) EnterText = EnterText[0..$-1];
              }
            } else {
              EnterText = EnterText[0..$-1];
            }
          }
          break;
        case K_DELETE: // ^DEL
          if (evt.bCtrl) {
            EnterText = "";
          }
          break;
        default:
          // ^Y
          if (evt.bCtrl && evt.keycode == K_y) {
            EnterText = "";
            break;
          }
          if (MaxTextLength <= 0 || EnterText.length < MaxTextLength) {
            string cc = TranslateKey(evt.keycode);
            if (cc && cc[0] >= 32 && cc[0] < 128) {
              EnterText ~= cc;
            }
          }
          break;
      }
      return true;
    } else {
      // not entering text
      if (IsFocused) {
        int key = ConvertBoundKey(evt.keycode);
        if (key == K_ENTER || key == K_JOY1) {
          StartEnteringText(sound:true);
          return true;
        }
      }
    }
  }
  return ::OnEvent(evt);
}


defaultproperties {
  Height = 30;
  MaxTextLength = 30;
}
