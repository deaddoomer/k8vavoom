//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuChoice : Widget;

int CursorXOffs;
int CursorYOffs;
int CursorXOffsHR; // for right-aligned text
name cvarSession; // if not empty, value will be saved in it, and read back on creation
string customHelpText;

int TextColor = CR_RED;
int TextColorFocus = CR_YELLOW;
int ValueColor = CR_TAN;
int ValueColorFocus = CR_YELLOW;


//==========================================================================
//
//  FixFractionalValue
//
//  used in sliders to fix fractional values
//
//==========================================================================
static final float FixFractionalValue (float value, float delta) {
  float mult = 1;
  delta = fabs(delta);
  if (!delta) delta = 1;
  while (delta < 1) { mult *= 10; delta *= 10; }
  if (fabs(value*mult-ftrunc(value*mult)) < 0.0001) {
    //print("nvfixT: %s -> %s", value*mult, ftrunc(value*mult));
    value = ftrunc(value*mult)/mult;
  } else if (fabs(value*mult-fround(value*mult)) < 0.0001) {
    //print("nvfixR: %s -> %s", value*mult, fround(value*mult));
    value = fround(value*mult)/mult;
  }
  return value;
}


//==========================================================================
//
//  getHelp
//
//==========================================================================
string getHelp () {
  if (customHelpText) return customHelpText;
  if (cvarSession) return GetCvarHelp(cvarSession);
  return "";
}


//==========================================================================
//
//  FixLatchedColor
//
//==========================================================================
void FixLatchedColor () {
  if (!cvarSession) return;
  int cf = CvarGetFlags(cvarSession);
  if (cf == -1 || !(cf&CVAR_LATCH)) return;
  if (TextColor != default.TextColor) return;
  if (TextColorFocus != default.TextColorFocus) return;
  TextColor = CR_SAPPHIRE;
  TextColorFocus = CR_ICE;
}


//==========================================================================
//
//  setSavedInt
//
//==========================================================================
final static void setSavedInt (name Name, int val) {
  if (!CvarExists(Name)) {
    CreateCvar(Name, va("%d", val), "___saved_menu__value___", 0);
  } else {
    SetCvar(Name, val);
    int cf = CvarGetFlags(Name);
    if (cf > 0 && (cf&CVAR_LATCH)) CvarUnlatchAll();
  }
}


//==========================================================================
//
//  getSavedInt
//
//==========================================================================
final static int getSavedInt (name Name, int defval) {
  if (!CvarExists(Name)) return defval;
  return GetCvar(Name);
}


//==========================================================================
//
//  setSavedFloat
//
//==========================================================================
final static void setSavedFloat (name Name, float val) {
  if (!CvarExists(Name)) {
    CreateCvar(Name, va("%f", val), "___saved_menu__value___", 0);
  } else {
    SetCvarF(Name, val);
    int cf = CvarGetFlags(Name);
    if (cf > 0 && (cf&CVAR_LATCH)) CvarUnlatchAll();
  }
}


//==========================================================================
//
//  getSavedFloat
//
//==========================================================================
final static float getSavedFloat (name Name, float defval) {
  if (!CvarExists(Name)) return defval;
  return GetCvarF(Name);
}


//==========================================================================
//
//  GetClGame
//
//==========================================================================
ClientGameShared GetClGame () {
  return (Parent ? MenuScreen(Parent).ClGame : none);
}


//==========================================================================
//
//  OnFocusReceived
//
//==========================================================================
override void OnFocusReceived () {
  if (MenuScreen(Parent) && MenuScreen(Parent).Selector) {
    MenuScreen(Parent).Selector.SetOriginCentered(X+CursorXOffs, Y+CursorYOffs, Height);
  }
  ::OnFocusReceived();
}


//==========================================================================
//
//  OnMouseEnter
//
//==========================================================================
override void OnMouseEnter() {
  //SetFocus();
  //LocalSound('menu/cursor');
}


defaultproperties {
  Focusable = true;
  Width = 320;
  //Height = 200;
  Height = 24;
  cvarSession = '';
  CursorXOffsHR = 200;
}
