//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuChoice : Widget;

int CursorXOffs;
int CursorYOffs;
int CursorXOffsHR; // for right-aligned text
name cvarSession; // if not empty, value will be saved in it, and read back on creation
string customHelpText;

int TextColor = CR_RED;
int TextColorFocus = CR_YELLOW;
int ValueColor = CR_TAN;
int ValueColorFocus = CR_YELLOW;


//==========================================================================
//
//  FixFractionalValue
//
//  used in sliders to fix fractional values
//
//==========================================================================
static final float FixFractionalValue (float value, float delta) {
  float mult = 1;
  delta = fabs(delta);
  if (!delta) delta = 1;
  while (delta < 1) { mult *= 10; delta *= 10; }
  if (fabs(value*mult-ftrunc(value*mult)) < 0.0001) {
    //print("nvfixT: %s -> %s", value*mult, ftrunc(value*mult));
    value = ftrunc(value*mult)/mult;
  } else if (fabs(value*mult-fround(value*mult)) < 0.0001) {
    //print("nvfixR: %s -> %s", value*mult, fround(value*mult));
    value = fround(value*mult)/mult;
  }
  return value;
}


//==========================================================================
//
//  getHelp
//
//==========================================================================
string getHelp () {
  string res = "";
       if (customHelpText) res = customHelpText;
  else if (cvarSession) res = GetCvarHelp(cvarSession);
  else return "";
  if (StrStartsWith(res, "$")) res = GetLangString(res[1..$]);
  return res;
}


//==========================================================================
//
//  FixLatchedColor
//
//==========================================================================
void FixLatchedColor () {
  if (!cvarSession) return;
  int cf = CvarGetFlags(cvarSession);
  if (cf == -1 || !(cf&CVAR_LATCH)) return;
  if (TextColor != default.TextColor) return;
  if (TextColorFocus != default.TextColorFocus) return;
  TextColor = CR_SAPPHIRE;
  TextColorFocus = CR_ICE;
}


//==========================================================================
//
//  setSavedInt
//
//==========================================================================
final static void setSavedInt (name Name, int val) {
  if (!CvarExists(Name)) {
    CreateCvar(Name, va("%d", val), "___saved_menu__value___", 0);
  } else {
    SetCvar(Name, val);
    int cf = CvarGetFlags(Name);
    if (cf > 0 && (cf&CVAR_LATCH)) CvarUnlatchAll();
  }
}


//==========================================================================
//
//  getSavedInt
//
//==========================================================================
final static int getSavedInt (name Name, int defval) {
  if (!CvarExists(Name)) return defval;
  return GetCvar(Name);
}


//==========================================================================
//
//  setSavedFloat
//
//==========================================================================
final static void setSavedFloat (name Name, float val) {
  if (!CvarExists(Name)) {
    CreateCvar(Name, va("%f", val), "___saved_menu__value___", 0);
  } else {
    SetCvarF(Name, val);
    int cf = CvarGetFlags(Name);
    if (cf > 0 && (cf&CVAR_LATCH)) CvarUnlatchAll();
  }
}


//==========================================================================
//
//  getSavedFloat
//
//==========================================================================
final static float getSavedFloat (name Name, float defval) {
  if (!CvarExists(Name)) return defval;
  return GetCvarF(Name);
}


//==========================================================================
//
//  SetNewValue
//
//  return `false` if value is unnaceptable
//  return `true` (and possibly clamp value) if it is acceptable
//  acceptable value will be saved in session cvar (if it is set)
//
//==========================================================================
bool SetNewValue (ref float newValue) {
  if (cvarSession) setSavedFloat(cvarSession, newValue);
  return true;
}


//==========================================================================
//
//  SetSessionCvar
//
//==========================================================================
void SetSessionCvar (name Name, optional float defval) {
  cvarSession = Name;
  if (Name) defval = getSavedFloat(Name, defval);
  SetNewValue(ref defval);
  FixLatchedColor();
}


//==========================================================================
//
//  GetClGame
//
//==========================================================================
ClientGameShared GetClGame () {
  return (Parent ? MenuScreen(Parent).ClGame : none);
}


//==========================================================================
//
//  DrawBackground
//
//==========================================================================
void DrawBackground () {
  if (IsFocus()) {
    //ShadeRect(0, 0, Width, Height-2, 0.6);
    int hgt = Height;
    if (hgt == 10) hgt -= 2; else hgt -= 1;
    FillRect(0, 0, Width, hgt, RGB(152, 205, 50), 0.6);
  }
}


//==========================================================================
//
//  OnFocusReceived
//
//==========================================================================
override void OnFocusReceived () {
  if (MenuScreen(Parent) && MenuScreen(Parent).Selector) {
    MenuScreen(Parent).Selector.SetOriginCentered(X+CursorXOffs, Y+CursorYOffs, Height);
  }
  ::OnFocusReceived();
}


//==========================================================================
//
//  OnMouseEnter
//
//==========================================================================
override void OnMouseEnter() {
  //SetFocus();
  //LocalSound('menu/cursor');
}


//==========================================================================
//
//  OnEvent
//
//==========================================================================
override bool OnEvent (ref event_t evt) {
  if (evt.type == ev_keydown) {
    //printdebug("key=%s (shift=%B)", evt.keycode, evt.bShift);
    if (evt.keycode == "/" && evt.bShift) {
      if (CvarExists(cvarSession)) {
        print("option cvar: %s", cvarSession);
        return true;
      }
    }
  }
  return false;
}


//==========================================================================
//
//  OnKeyDown
//
//==========================================================================
override bool OnKeyDown (int key) {
  if (!cvarSession) return false;
  // restore default value
  switch (key) {
    case K_BACKSPACE: // [R]estore
      if (CvarExists(cvarSession)) {
        string s = GetCvarDefault(cvarSession);
        if (s) {
          bool err;
          float newValue = atof(s, out err);
          if (!err) {
            //print("KD! %s [%s]", cvarSession, newValue);
            if (SetNewValue(ref newValue)) LocalSound('menu/change');
            return true;
          }
        }
      }
      break;
  }
  return false;
}


defaultproperties {
  Focusable = true;
  Width = 320;
  //Height = 200;
  Height = 24;
  cvarSession = '';
  CursorXOffsHR = 200;
}
