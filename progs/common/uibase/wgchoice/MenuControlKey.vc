//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuControlKey : MenuChoice;

string Text;
string CommandOn;
string CommandOff;
string ModSection;
bool Disabled;
int strifeMode; // <0: non-strife; >1: strife; 0: don't care


//==========================================================================
//
//  SetText
//
//==========================================================================
void SetText (string AText) {
  if (StrStartsWith(AText, "$")) {
    Text = GetLangString(AText[1..$]);
  } else {
    Text = AText;
  }
}


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int x, int y) {
  //SetPos(x-160, y);
  CursorXOffs = /*200*/CursorXOffsHR;
  SetPos(x-CursorXOffs, y);
  //print("!!! %s %s", X, CursorXOffs);
}


override void OnDraw () {
  DrawBackground();

  int key1 = -1;
  int key2 = -1;

  int Col = (Disabled ? CR_BLACK : IsFocus() ? CR_YELLOW : CR_WHITE);
  SetTextAlign(hright, vtop);
  //int ctpos = 160;
  int ctpos = CursorXOffs;

  DrawText(ctpos, 0, Text, Col);

  int isActive = 3;
  IN_GetBindingKeys(CommandOn, &key1, &key2, strifeMode, ModSection, out isActive);
  //if (ModSection) printdebug("%s (%s): %s %s", CommandOn, ModSection, key1, key2);

  SetTextAlign(hleft, vtop);
  //Col = IsFocus() ? CR_YELLOW : CR_OLIVE;
  Col = (Disabled ? CR_BLACK : IsFocus() ? CR_FIRE : /*CR_LIGHTBLUE*/CR_DARKGREEN);
  // this binding can be inactive, if it is a mod default binding
  //if (!Disabled && !isActive) Col = CR_RED;

  if (key1 >= 0) {
    DrawText(ctpos+10, 0, KeyNameForNum(key1), (Disabled || (isActive&1) != 0 ? Col : CR_RED));
  } else {
    DrawText(ctpos+10, 0, "---", /*Col*/CR_BLACK);
  }
  if (key2 >= 0) {
    DrawText(ctpos+100, 0, KeyNameForNum(key2), (Disabled || (isActive&2) != 0 ? Col : CR_RED));
  } else {
    DrawText(ctpos+100, 0, "---", /*Col*/CR_BLACK);
  }
}


override bool OnKeyDown (int key) {
  int key1;
  int key2;

  switch (key) {
    case K_LEFTARROW:
      GetClGame().ControlColumn = 0;
      MenuScreen(Parent).CursorMoved();
      return true;
    case K_RIGHTARROW:
      GetClGame().ControlColumn = 1;
      MenuScreen(Parent).CursorMoved();
      return true;
    case K_ENTER:
    case K_PADENTER:
    case K_MOUSE1:
    case K_JOY1:
      if (!Disabled) {
        GetClGame().CurrentCtl = self;
        int mt = (strifeMode < 0 ? ClientGameShared::MB_ControlNonStrife : strifeMode > 0 ? ClientGameShared::MB_ControlStrife : ClientGameShared::MB_ControlAll);
        GetClGame().MessageBoxStartMessage("Press new key\n\nESC to cancel", mt, false);
      }
      return true;
    case K_BACKSPACE:
    case K_MOUSE2:
    case K_DELETE:
      if (!Disabled) {
        int isActive;
        IN_GetBindingKeys(CommandOn, &key1, &key2, strifeMode, ModSection, out isActive);
        if (GetClGame().ControlColumn == 0) IN_SetBinding(key1, "", "", strifeMode, ModSection);
        if (GetClGame().ControlColumn == 1) IN_SetBinding(key2, "", "", strifeMode, ModSection);
        // restore default mod key?
        if (key == K_BACKSPACE && ModSection) {
          int mkey1, mkey2;
          IN_GetDefaultModBindingKeys(CommandOn, &mkey1, &mkey2, ModSection);
          //printdebug("mod=%s; command=%s; key=(%s,%s); mkey=(%s,%s)", ModSection, CommandOn, key1, key2, mkey1, mkey2);
          // first, remove any mod bindings for the old key
          // second, setup default mod bindings for the default mod key
          if (mkey1 > 0 && GetClGame().ControlColumn == 0) {
            IN_SetBinding(key1, "<modclear>", "", strifeMode, ModSection);
            IN_SetBinding(mkey1, "<default>", "", strifeMode, ModSection);
          }
          if (mkey2 > 0 && GetClGame().ControlColumn == 1) {
            IN_SetBinding(key2, "<modclear>", "", strifeMode, ModSection);
            IN_SetBinding(mkey2, "<default>", "", strifeMode, ModSection);
          }
        }
      }
      return true;
  }

  //return ::OnKeyDown(key);
  return false; //k8:FIXME!
}


override void OnMouseClick (int X, int Y) {
  if (!Disabled) {
    SetFocus();
    GetClGame().CurrentCtl = self;
    int mt = (strifeMode < 0 ? ClientGameShared::MB_ControlNonStrife : strifeMode > 0 ? ClientGameShared::MB_ControlStrife : ClientGameShared::MB_ControlAll);
    GetClGame().MessageBoxStartMessage("Press new key\n\nESC to cancel", mt, false);
  }
}


defaultproperties {
  CursorXOffs = 160;
}
