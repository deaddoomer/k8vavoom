//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuControlKey : MenuChoice;

string Text;
string CommandOn;
string CommandOff;
bool Disabled;
int strifeMode;


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int x, int y) {
  //SetPos(x-160, y);
  CursorXOffs = /*200*/CursorXOffsHR;
  SetPos(x-CursorXOffs, y);
  //print("!!! %s %s", X, CursorXOffs);
}


override void OnDraw () {
  DrawBackground();

  int key1 = -1;
  int key2 = -1;

  int Col = (Disabled ? CR_BLACK : IsFocus() ? CR_YELLOW : CR_WHITE);
  SetTextAlign(hright, vtop);
  //int ctpos = 160;
  int ctpos = CursorXOffs;

  DrawText(ctpos, 0, Text, Col);

  IN_GetBindingKeys(CommandOn, &key1, &key2, strifeMode);

  SetTextAlign(hleft, vtop);
  //Col = IsFocus() ? CR_YELLOW : CR_OLIVE;
  Col = (Disabled ? CR_BLACK : IsFocus() ? CR_FIRE : /*CR_LIGHTBLUE*/CR_DARKGREEN);
  if (key1 >= 0) {
    DrawText(ctpos+10, 0, KeyNameForNum(key1), Col);
  } else {
    DrawText(ctpos+10, 0, "---", /*Col*/CR_BLACK);
  }
  if (key2 >= 0) {
    DrawText(ctpos+100, 0, KeyNameForNum(key2), Col);
  } else {
    DrawText(ctpos+100, 0, "---", /*Col*/CR_BLACK);
  }
}


override bool OnKeyDown (int key) {
  int key1;
  int key2;

  switch (key) {
    case K_LEFTARROW:
      GetClGame().ControlColumn = 0;
      MenuScreen(Parent).CursorMoved();
      return true;
    case K_RIGHTARROW:
      GetClGame().ControlColumn = 1;
      MenuScreen(Parent).CursorMoved();
      return true;
    case K_ENTER:
    case K_PADENTER:
    case K_MOUSE1:
    case K_JOY1:
      if (!Disabled) {
        GetClGame().CurrentCtl = self;
        int mt = (strifeMode < 0 ? ClientGameShared::MB_ControlNonStrife : strifeMode > 0 ? ClientGameShared::MB_ControlStrife : ClientGameShared::MB_ControlAll);
        GetClGame().MessageBoxStartMessage("Press new key\n\nESC to cancel", mt, false);
      }
      return true;
    case K_BACKSPACE:
    case K_MOUSE2:
    case K_DELETE:
      if (!Disabled) {
        IN_GetBindingKeys(CommandOn, &key1, &key2, strifeMode);
        if (GetClGame().ControlColumn == 0) IN_SetBinding(key1, "", "", strifeMode);
        if (GetClGame().ControlColumn == 1) IN_SetBinding(key2, "", "", strifeMode);
      }
      return true;
  }

  //return ::OnKeyDown(key);
  return false; //k8:FIXME!
}


override void OnMouseClick (int X, int Y) {
  if (!Disabled) {
    SetFocus();
    GetClGame().CurrentCtl = self;
    int mt = (strifeMode < 0 ? ClientGameShared::MB_ControlNonStrife : strifeMode > 0 ? ClientGameShared::MB_ControlStrife : ClientGameShared::MB_ControlAll);
    GetClGame().MessageBoxStartMessage("Press new key\n\nESC to cancel", mt, false);
  }
}


defaultproperties {
  CursorXOffs = 160;
}
