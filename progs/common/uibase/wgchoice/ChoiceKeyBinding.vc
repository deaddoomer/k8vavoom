//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuControlKey : MenuChoiceBase;

string Text;
string CommandOn;
string CommandOff;
string ModSection;
int strifeMode; // <0: non-strife; >1: strife; 0: don't care
bool Disabled;


//==========================================================================
//
//  SetText
//
//==========================================================================
void SetText (string AText) {
  Text = TranslateString(AText);
  FixMinimumHeight();
}


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int x, int y) {
  //SetPos(x-160, y);
  CursorXOffs = /*200*/CursorXOffsHR;
  SetPos(x-CursorXOffs, y);
  //print("!!! %s %s", X, CursorXOffs);
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  DrawBackground();

  SetFont('smallfont');

  int Col = (Disabled ? CR_BLACK : IsFocused ? CR_YELLOW : CR_WHITE);
  SetTextAlign(hright, vtop);
  //int ctpos = 160;
  int ctpos = CursorXOffs;
  int ty = TextHeightAdd/2;

  DrawText(ctpos, ty, Text, Col);

  //int isActive = 3;
  //IN_GetBindingKeys(CommandOn, &key1, &key2, strifeMode, ModSection, out isActive);
  //if (ModSection) printdebug("%s (%s): %s %s", CommandOn, ModSection, key1, key2);

  array!int keylist;
  IN_GetBindingKeysEx(CommandOn, ref keylist, strifeMode, ModSection);

  SetTextAlign(hleft, vtop);
  //Col = IsFocused ? CR_YELLOW : CR_OLIVE;
  Col = (Disabled ? CR_BLACK : IsFocused ? CR_FIRE : /*CR_LIGHTBLUE*/CR_DARKGREEN);
  // this binding can be inactive, if it is a mod default binding
  //if (!Disabled && !isActive) Col = CR_RED;

  ctpos += 10;
  foreach (int f; 0..4) {
    int key = (f < keylist.length ? keylist[f] : 0);
    if (key != 0) {
      string s = KeyNameForNum(abs(key)).replace("_", "-");
      DrawText(ctpos, ty, s, (Disabled || key > 0 ? Col : CR_RED));
    } else {
      DrawText(ctpos, ty, "---", /*Col*/CR_BLACK);
    }
    ctpos += 100; // don't forget to fix width in `MenuScreen.CursorMoved()` too
  }
}


//==========================================================================
//
//  OnEvent
//
//==========================================================================
override bool OnEvent (ref event_t evt) {
  // "on click"
  if (evt.bubbling && evt.type == ev_click && evt.dest == self) {
    if (!Disabled) {
      if (evt.keycode == K_MOUSE1) {
        SetFocus();
        GetClGame().MessageBoxStartBindQuery(self, strifeMode);
        return true;
      }
    }
  }

  if (evt.bubbling && evt.type == ev_keydown) {
    int key1;
    int key2;

    switch (ConvertBoundKey(evt.keycode)) {
      case K_LEFTARROW:
        if (GetClGame().ControlColumn > 0) {
          --GetClGame().ControlColumn;
          FindParentWithClass(MenuScreen).CursorMoved(forced:true);
          LocalSound('menu/cursor');
        }
        return true;
      case K_RIGHTARROW:
        if (GetClGame().ControlColumn < 3) {
          ++GetClGame().ControlColumn;
          FindParentWithClass(MenuScreen).CursorMoved(forced:true);
          LocalSound('menu/cursor');
        }
        return true;
      case K_ENTER:
      //case K_MOUSE1:
      case K_JOY1:
        if (!Disabled) GetClGame().MessageBoxStartBindQuery(self, strifeMode);
        return true;
      case K_BACKSPACE:
      //case K_MOUSE2:
      case K_DELETE:
        if (!Disabled) {
          array!int keylist;
          //int isActive;
          IN_GetBindingKeysEx(CommandOn, ref keylist, strifeMode, ModSection);
          int kidx = GetClGame().ControlColumn;
          // remove binding
          if (kidx >= 0 && kidx < keylist.length) {
            int kcode = abs(keylist[kidx]);
            IN_SetBinding(kcode, "", "", strifeMode, ModSection);
            // restore default mod key?
            if (evt.keycode == K_BACKSPACE && ModSection) {
              IN_GetDefaultModBindingKeysEx(CommandOn, ref keylist, ModSection);
              //printdebug("mod=%s; command=%s; key=(%s,%s); mkey=(%s,%s)", ModSection, CommandOn, key1, key2, mkey1, mkey2);
              // first, remove any mod bindings for the old key
              // second, setup default mod bindings for the default mod key
              if (kidx < keylist.length) {
                IN_SetBinding(kcode, "<modclear>", "", strifeMode, ModSection);
                IN_SetBinding(keylist[kidx], "<default>", "", strifeMode, ModSection);
              }
            }
          }
        }
        return true;
    }
  }

  return ::OnEvent(evt);
}


defaultproperties {
  CursorXOffs = 160;
}
