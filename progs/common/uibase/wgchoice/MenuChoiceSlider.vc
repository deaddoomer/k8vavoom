//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuChoiceSlider : MenuChoice;

string Text;

float Value;
float ValueDelta;
float MinValue;
float MaxValue;

int pic_M_THERML;
int pic_M_THERMM;
int pic_M_THERMR;
int pic_M_THERMO;

int pic_M_SLDLT;
int pic_M_SLDMD1;
int pic_M_SLDMD2;
int pic_M_SLDRT;
int pic_M_SLDKB;

delegate bool ValueChanging (Object Sender, float NewValue);


//==========================================================================
//
//  getSavedValue
//
//==========================================================================
float getSavedValue (optional float defval) {
  if (!specified_defval) defval = Value;
  if (cvarSession) return getSavedFloat(cvarSession, defval);
  return defval;
}


//==========================================================================
//
//  SetSessionCvar
//
//==========================================================================
void SetSessionCvar (name Name, optional float defval) {
  if (!specified_defval) defval = 0;
  cvarSession = Name;
  if (Name) defval = getSavedFloat(Name, defval);
  if (SetNewValue(defval)) Value = defval;
  FixLatchedColor();
}


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int x, int y) {
  SetPos(x-CursorXOffs, y);
}


//==========================================================================
//
//  SetNewValue
//
//==========================================================================
bool SetNewValue (float newValue) {
  if (ValueChanging) {
    if (!ValueChanging(self, newValue)) return false;
  }
  if (cvarSession) setSavedFloat(cvarSession, newValue);
  Value = newValue;
  return true;
}


//==========================================================================
//
//  SetInitialValue
//
//==========================================================================
void SetInitialValue (float AValue) {
  Value = AValue;
  if (Value < MinValue) Value = MinValue;
  if (Value > MaxValue) Value = MaxValue;
}


//==========================================================================
//
//  OnCreate
//
//==========================================================================
override void OnCreate () {
  ::OnCreate();

  if (WadLumpPresent('m_sldlt')) {
    pic_M_SLDLT = R_RegisterPic('m_sldlt');
    pic_M_SLDMD1 = R_RegisterPic('m_sldmd1');
    pic_M_SLDMD2 = R_RegisterPic('m_sldmd2');
    pic_M_SLDRT = R_RegisterPic('m_sldrt');
    pic_M_SLDKB = R_RegisterPic('m_sldkb');
  } else {
    pic_M_THERML = R_RegisterPic('m_therml');
    pic_M_THERMM = R_RegisterPic('m_thermm');
    pic_M_THERMR = R_RegisterPic('m_thermr');
    pic_M_THERMO = R_RegisterPic('m_thermo');
  }
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  int xx, xt;

  //FillRect(0, 0, Width, Height-2, 0xff_000000|(int(ClipRect.OriginY)&0xff));

  SetTextAlign(hright, vtop);
  DrawText(CursorXOffs, 2+1, Text, IsFocus() ? TextColourFocus : TextColour);

  bool oldflt = GetCvarB('gl_pic_filtering');
  scope(exit) SetCvar('gl_pic_filtering', oldflt ? 1 : 0);
  SetCvar('gl_pic_filtering', GetCvarB('gl_font_filtering') ? 1 : 0);

  picinfo_t pinf;
  if (pic_M_SLDLT != -1) {
    xx = CursorXOffs;
    DrawPic(xx, 0, pic_M_SLDLT);
    xx += 32;
    for (int i = 0; i < 12; ++i) {
      DrawPic(xx, 0, (i&1 ? pic_M_SLDMD1 : pic_M_SLDMD2));
      xx += 8;
    }
    DrawPic(xx, 0, pic_M_SLDRT);
    R_GetPicInfo(pic_M_SLDRT, &pinf);
    xt = xx+pinf.width;
    xx = CursorXOffs+30+int((Value-MinValue)*100.0/(MaxValue-MinValue));
    DrawPic(xx, 7, pic_M_SLDKB);
  } else {
    xx = CursorXOffs+8;
    DrawPic(xx, 0, pic_M_THERML);
    xx += 8;
    for (int i = 0; i < 13; ++i) {
      DrawPic(xx, 0, pic_M_THERMM);
      xx += 8;
    }
    DrawPic(xx, 0, pic_M_THERMR);
    R_GetPicInfo(pic_M_THERMR, &pinf);
    xt = xx+pinf.width;
    xx = CursorXOffs+8+6+int((Value-MinValue)*100.0/(MaxValue-MinValue));
    DrawPic(xx, 0, pic_M_THERMO);
  }

  SetTextAlign(hleft, vtop);
  string sv;
  if (fabs(Value) < 0.000001) sv = "0";
  else {
    sv = va("%f", Value);
    /*
         if (sv.globmatch("0.9999*")) sv = va("0.%s", int(Value*10)%10+1);
    else if (sv.globmatch("0.0000*")) sv = va("0.%s", int(Value*10)%10);
    else if (sv.globmatch("0.5555*")) sv = "0.5";
    else if (sv.globmatch("*.9999*")) sv = va("%d", int(Value)+1);
    else if (sv.globmatch("*.0000*")) sv = va("%d", int(Value));
    else if (sv.globmatch("*.5555*")) sv = va("%d.5", int(Value));
    else sv = va("%f", Value);
    */
  }
  DrawText(xt+3, 3, sv, CR_BLACK);
}


//==========================================================================
//
//  OnKeyDown
//
//==========================================================================
override bool OnKeyDown (int key) {
  int nkey = ConvertBoundKey(key);
  float newValue;
  switch (nkey) {
    case K_LEFTARROW:
    case K_MWHEELDOWN:
      newValue = Value-ValueDelta;
      if (newValue < MinValue) newValue = MinValue;
      if (SetNewValue(newValue)) LocalSound('menu/change');
      return true;
    case K_RIGHTARROW:
    case K_MWHEELUP:
      newValue = Value+ValueDelta;
      if (newValue > MaxValue) newValue = MaxValue;
      if (SetNewValue(newValue)) LocalSound('menu/change');
      return true;
  }
  return ::OnKeyDown(key);
}


//==========================================================================
//
//  OnMouseClick
//
//==========================================================================
override void OnMouseClick (int X, int Y) {
  SetFocus();
  float newValue = Value-ValueDelta;
  if (newValue < MinValue) newValue = MinValue;
  if (SetNewValue(newValue)) LocalSound('menu/change');
}


//==========================================================================
//
//  OnRMouseClick
//
//==========================================================================
override void OnRMouseClick (int X, int Y) {
  SetFocus();
  float newValue = Value+ValueDelta;
  if (newValue > MaxValue) newValue = MaxValue;
  if (SetNewValue(newValue)) LocalSound('menu/change');
}


defaultproperties
{
  Width = 360;
  Height = 16-2;
  CursorXOffs = 200;
  pic_M_SLDLT = -1;
  Value = 0.0;
  ValueDelta = 1.0;
  MinValue = 0.0;
  MaxValue = 1.0;

  TextColour = CR_RED;
  TextColourFocus = CR_YELLOW;
}
