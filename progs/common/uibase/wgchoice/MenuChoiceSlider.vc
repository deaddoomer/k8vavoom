//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuChoiceSlider : MenuChoiceNumeric;

int pic_M_THERML;
int pic_M_THERMM;
int pic_M_THERMR;
int pic_M_THERMO;

int pic_M_SLDLT;
int pic_M_SLDMD1;
int pic_M_SLDMD2;
int pic_M_SLDRT;
int pic_M_SLDKB;


//==========================================================================
//
//  OnCreate
//
//==========================================================================
override void OnCreate () {
  ::OnCreate();
  if (WadLumpPresent('m_sldlt')) {
    pic_M_SLDLT = R_RegisterPic('m_sldlt');
    pic_M_SLDMD1 = R_RegisterPic('m_sldmd1');
    pic_M_SLDMD2 = R_RegisterPic('m_sldmd2');
    pic_M_SLDRT = R_RegisterPic('m_sldrt');
    pic_M_SLDKB = R_RegisterPic('m_sldkb');
  } else {
    pic_M_THERML = R_RegisterPic('m_therml');
    pic_M_THERMM = R_RegisterPic('m_thermm');
    pic_M_THERMR = R_RegisterPic('m_thermr');
    pic_M_THERMO = R_RegisterPic('m_thermo');
  }
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  int xx, xt;

  DrawBackground();

  SetTextAlign(hright, vtop);
  DrawText(CursorXOffs, 2+1, Text, IsFocus() ? TextColorFocus : TextColor);

  bool oldflt = GetCvarB('gl_pic_filtering');
  scope(exit) SetCvar('gl_pic_filtering', oldflt ? 1 : 0);
  SetCvar('gl_pic_filtering', GetCvarB('gl_font_filtering') ? 1 : 0);

  picinfo_t pinf;
  if (pic_M_SLDLT != -1) {
    xx = CursorXOffs;
    DrawPic(xx, 0, pic_M_SLDLT);
    xx += 32;
    for (int i = 0; i < 12; ++i) {
      DrawPic(xx, 0, (i&1 ? pic_M_SLDMD1 : pic_M_SLDMD2));
      xx += 8;
    }
    DrawPic(xx, 0, pic_M_SLDRT);
    R_GetPicInfo(pic_M_SLDRT, &pinf);
    xt = xx+pinf.width;
    xx = CursorXOffs+30+int((Value-MinValue)*100.0/(MaxValue-MinValue));
    DrawPic(xx, 7, pic_M_SLDKB);
  } else {
    xx = CursorXOffs+8;
    DrawPic(xx, 0, pic_M_THERML);
    xx += 8;
    for (int i = 0; i < 13; ++i) {
      DrawPic(xx, 0, pic_M_THERMM);
      xx += 8;
    }
    DrawPic(xx, 0, pic_M_THERMR);
    R_GetPicInfo(pic_M_THERMR, &pinf);
    xt = xx+pinf.width;
    xx = CursorXOffs+8+6+int((Value-MinValue)*100.0/(MaxValue-MinValue));
    DrawPic(xx, 0, pic_M_THERMO);
  }

  SetTextAlign(hleft, vtop);
  //k8: we have much better fp->str now, so there's no need to perform any string trickery here
  DrawText(xt+3, 3, va("%f", Value), CR_BLACK);
}


defaultproperties {
  Height = 16-2;
  pic_M_SLDLT = -1;
}
