//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuChoiceEnum : MenuChoice;

struct EnumValue {
  string caption;
  float value;
}

string Text;
bool bLeftAlign;

float Value;
array!EnumValue vallist;

delegate bool ValueChanging (Object Sender, float NewValue);


//==========================================================================
//
//  SetText
//
//==========================================================================
void SetText (string AText) {
  if (StrStartsWith(AText, "$")) {
    Text = GetLangString(AText[1..$]);
  } else {
    Text = AText;
  }
}


//==========================================================================
//
//  findValue
//
//==========================================================================
int findValue (float val) {
  foreach (auto idx, ref EnumValue v; vallist) {
    if (v.value == val) return idx;
  }
  return -1;
}


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int x, int y) {
  if (bLeftAlign) {
    SetPos(x, y);
  } else {
    CursorXOffs = /*200*/CursorXOffsHR;
    SetPos(x-CursorXOffs, y);
  }
}


//==========================================================================
//
//  SetNewValue
//
//==========================================================================
override bool SetNewValue (ref float newValue) {
  if (ValueChanging) {
    if (!ValueChanging(self, newValue)) return false;
  }
  if (!::SetNewValue(ref newValue)) return false;
  Value = newValue;
  return true;
}


//==========================================================================
//
//  ClearAndReset
//
//==========================================================================
void ClearAndReset () {
  if (vallist.length) {
    vallist.reset();
    Value = 0;
    if (cvarSession) setSavedFloat(cvarSession, 0);
  }
}


//==========================================================================
//
//  AddItem
//
//==========================================================================
void AddItem (string AValue, optional float val) {
  if (!specified_val && vallist.length) val = int(vallist[$-1].value)+1;
  vallist.length += 1;
  if (StrStartsWith(AValue, "$")) AValue = GetLangString(AValue[1..$]);
  vallist[$-1].caption = AValue;
  vallist[$-1].value = val;
}


//==========================================================================
//
//  SetInitialValue
//
//==========================================================================
void SetInitialValue (float AValue) {
  Value = AValue;
  //int idx = findValue(AValue);
  if (cvarSession) setSavedFloat(cvarSession, Value);
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  DrawBackground();

  string caption;
  int idx = findValue(Value);
  if (idx < 0) {
    caption = (float(int(Value)) == Value ? va("i:%d", int(Value)) : va("f:%f", Value));
  } else {
    caption = vallist[idx].caption;
  }
  int Col = (IsFocus() ? TextColorFocus : TextColor);
  if (bLeftAlign) {
    SetTextAlign(hleft, vtop);
    DrawText(0, 0, Text, Col);
  } else {
    SetTextAlign(hright, vtop);
    DrawText(CursorXOffs, 0, Text, Col);
  }
  int xx = (bLeftAlign ? TextWidth(Text)+8 : CursorXOffs+10);
  SetTextAlign(hleft, vtop);
  DrawText(xx, 0, caption, (IsFocus() ? ValueColorFocus : ValueColor));
}


//==========================================================================
//
//  OnKeyDown
//
//==========================================================================
override bool OnKeyDown (int key) {
  if (vallist.length == 0) return false;
  int cvtkey = ConvertBoundKey(key);
  float newValue;
  int idx;
  switch (cvtkey) {
    case K_LEFTARROW:
    case K_MOUSE2:
    case K_MWHEELUP:
      idx = findValue(Value);
      if (idx < 0) idx = 0; else idx = (idx+vallist.length-1)%vallist.length;
      newValue = vallist[idx].value;
      if (SetNewValue(ref newValue)) LocalSound('menu/change');
      return true;
    case K_RIGHTARROW:
    case K_ENTER:
    case K_PADENTER:
    case K_MOUSE1:
    case K_MWHEELDOWN:
      idx = findValue(Value);
      if (idx < 0) idx = 0; else idx = (idx+1)%vallist.length;
      newValue = vallist[idx].value;
      if (SetNewValue(ref newValue)) LocalSound('menu/change');
      return true;
  }
  return ::OnKeyDown(key);
}


override void OnMouseClick (int X, int Y) {
  SetFocus();
  if (vallist.length == 0) return;
  int idx = findValue(Value);
  if (idx < 0) idx = 0; else idx = (idx+1)%vallist.length;
  float newValue = vallist[idx].value;
  if (SetNewValue(ref newValue)) LocalSound('menu/change');
}


override void OnRMouseClick (int X, int Y) {
  SetFocus();
  if (vallist.length == 0) return;
  int idx = findValue(Value);
  if (idx < 0) idx = 0; else idx = (idx+vallist.length-1)%vallist.length;
  float newValue = vallist[idx].value;
  if (SetNewValue(ref newValue)) LocalSound('menu/change');
}


defaultproperties {
  Width = 360;
  Height = 10;
  cvarSession = '';
}
