//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuInputLine : MenuChoiceSlot;

bool bEnteringText;
string Text;
string Value;
string EnterText;

delegate void ValueChanged (Object Sender);


override void OnCreate () {
  ::OnCreate();
  InitSlot();
}


void DisableSlotRendering () {
  if (DrawSlotPic) {
    DrawSlotPic = false;
    Height = 20;
  }
}

void OnValueChanged () {
  if (ValueChanged) ValueChanged(self);
}


override void OnDraw () {
  DrawBackground();

  SetTextAlign(hleft, vtop);
  DrawText(0, 0, Text, IsFocus() ? CR_YELLOW : CR_WHITE);
  if (bEnteringText) {
    DrawSlot(12-(DrawSlotPic ? 0 : 7), EnterText, true);
  } else {
    DrawSlot(12-(DrawSlotPic ? 0 : 7), Value, false);
  }
}


override bool OnEvent (ref event_t evt) {
  if (!bEnteringText) return false;
  if (evt.type != ev_keydown) return false;
  // ^Y
  if (evt.keycode == K_y && evt.bCtrl) {
    EnterText = "";
    return true;
  }
  // ^DEL
  if (evt.keycode == K_DELETE && evt.bCtrl) {
    EnterText = "";
    return true;
  }
  return false;
}


override bool OnKeyDown (int key) {
  if (bEnteringText) {
    switch (key) {
      case K_ESCAPE:
      case K_MOUSE2:
        bEnteringText = false;
        break;
      case K_ENTER:
      case K_PADENTER:
      case K_MOUSE1:
        bEnteringText = false;
        Value = EnterText;
        OnValueChanged();
        break;
      case K_BACKSPACE:
        if (EnterText) EnterText = EnterText[0..$-1];
        break;
      default:
        if (EnterText.length < 30) {
          string cc = TranslateKey(key);
          if (cc && cc[0] >= 32 && cc[0] < 128) {
            EnterText ~= cc;
          }
        }
        break;
    }
    return true;
  }

  int cvtkey = ConvertBoundKey(key);
  if (cvtkey == K_ENTER || cvtkey == K_PADENTER || cvtkey == K_MOUSE1 || cvtkey == K_JOY1) {
    // we are going to be intercepting all chars
    bEnteringText = true;
    EnterText = Value;
    LocalSound('menu/choose');
    return true;
  }

  return ::OnKeyDown(key);
}


override void OnMouseClick (int X, int Y) {
  SetFocus();

  if (bEnteringText) {
    bEnteringText = false;
    Value = EnterText;
    OnValueChanged();
  }

  // we are going to be intercepting all chars
  bEnteringText = true;
  EnterText = Value;
  LocalSound('menu/choose');
}


defaultproperties {
  Height = 30;
}
