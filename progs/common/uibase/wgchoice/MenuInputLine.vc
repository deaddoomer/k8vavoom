//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class MenuInputLine : MenuChoiceSlot;

bool bEnteringText;
string Text;
string Value;
string EnterText;

delegate void ValueChanged (Object Sender);


override void OnCreate () {
  ::OnCreate();
  InitSlot();
}


void DisableSlotRendering () {
  if (DrawSlotPic) {
    DrawSlotPic = false;
    Height = 20;
  }
}

void OnValueChanged () {
  if (ValueChanged) ValueChanged(self);
}


override void OnDraw () {
  SetTextAlign(hleft, vtop);
  DrawText(0, 0, Text, IsFocus() ? CR_YELLOW : CR_WHITE);
  if (bEnteringText) {
    DrawSlot(12-(DrawSlotPic ? 0 : 7), EnterText, true);
  } else {
    DrawSlot(12-(DrawSlotPic ? 0 : 7), Value, false);
  }
}


override bool OnKeyDown (int key) {
  int Len;

  if (bEnteringText) {
    switch (key) {
      case K_ESCAPE:
      case K_MOUSE2:
        bEnteringText = false;
        break;
      case K_ENTER:
      case K_PADENTER:
      case K_MOUSE1:
        bEnteringText = false;
        Value = EnterText;
        OnValueChanged();
        break;
      case K_BACKSPACE:
        if (EnterText.length) EnterText = EnterText[0..$-1];
        break;
      default:
        if (key >= 32 && key < 128) {
          Len = strlen(EnterText);
          if (Len < 30) EnterText ~= TranslateKey(key);
        }
        break;
    }
    return true;
  }

  key = ConvertBoundKey(key);
  if (key == K_ENTER || key == K_PADENTER || key == K_MOUSE1 || key == K_JOY1) {
    // we are going to be intercepting all chars
    bEnteringText = true;
    EnterText = Value;
    LocalSound('menu/choose');
    return true;
  }

  return false;
}


override void OnMouseClick (int X, int Y) {
  SetFocus();

  if (bEnteringText) {
    bEnteringText = false;
    Value = EnterText;
    OnValueChanged();
  }

  // we are going to be intercepting all chars
  bEnteringText = true;
  EnterText = Value;
  LocalSound('menu/choose');
}


defaultproperties {
  Height = 30;
}
