//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuChoiceEnum : MenuChoiceBase;

struct EnumValue {
  string caption;
  float value;
}

string Text;
bool bLeftAlign;

float Value;
array!EnumValue vallist;

MenuComboBoxPopup cbox;

delegate bool ValueChanging (Object Sender, float NewValue);


//==========================================================================
//
//  SetText
//
//==========================================================================
void SetText (string AText) {
  Text = TranslateString(AText);
  //int ohgt = Height;
  FixMinimumHeight();
}


//==========================================================================
//
//  findValue
//
//==========================================================================
int findValue (float val) {
  foreach (auto idx, ref EnumValue v; vallist) {
    if (v.value == val) return idx;
  }
  return -1;
}


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int x, int y) {
  if (bLeftAlign) {
    SetPos(x, y);
  } else {
    CursorXOffs = /*200*/CursorXOffsHR;
    SetPos(x-CursorXOffs, y);
  }
}


//==========================================================================
//
//  SetNewValue
//
//==========================================================================
override bool SetNewValue (ref float newValue) {
  if (ValueChanging) {
    if (!ValueChanging(self, newValue)) return false;
  }
  if (!::SetNewValue(ref newValue)) return false;
  Value = newValue;
  return true;
}


//==========================================================================
//
//  ClearAndReset
//
//==========================================================================
void ClearAndReset () {
  if (vallist.length) {
    vallist.reset();
    Value = 0;
    if (cvarSession) setSavedFloat(cvarSession, 0);
  }
}


//==========================================================================
//
//  AddItem
//
//==========================================================================
void AddItem (string AValue, optional float val) {
  if (!val!specified && vallist.length) val = int(vallist[$-1].value)+1;
  vallist.length += 1;
  vallist[$-1].caption = TranslateString(AValue);
  vallist[$-1].value = val;
}


//==========================================================================
//
//  SetInitialValue
//
//==========================================================================
void SetInitialValue (float AValue) {
  Value = AValue;
  //int idx = findValue(AValue);
  if (cvarSession) setSavedFloat(cvarSession, Value);
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  DrawBackground();

  SetFont(FontName);

  string caption;
  int idx = findValue(Value);
  if (idx < 0) {
    caption = (float(int(Value)) == Value ? va("i:%d", int(Value)) : va("f:%f", Value));
  } else {
    caption = vallist[idx].caption;
  }

  int ty = TextHeightAdd/2;
  int Col = (IsFocused ? TextColorFocus : TextColor);
  if (bLeftAlign) {
    SetTextAlign(hleft, vtop);
    DrawText(0, ty, Text, Col);
  } else {
    SetTextAlign(hright, vtop);
    DrawText(CursorXOffs, ty, Text, Col);
  }
  int xx = (bLeftAlign ? TextWidth(Text)+8 : CursorXOffs+10);
  SetTextAlign(hleft, vtop);
  int Col2 = (IsFocused ? ValueColorFocus : ValueColor);
  if (isReadOnly) Col2 = CR_BLACK;
  DrawText(xx, ty, caption, Col2);
}


//==========================================================================
//
//  OnEvent
//
//==========================================================================
override bool OnEvent (ref event_t evt) {
  if (isReadOnly) return ::OnEvent(evt);

  // "on click"
  if (evt.type == ev_click && evt.dest == self) {
    if (evt.keycode == K_MOUSE1) {
      if (IsFocused) {
        if (vallist) OpenComboPopup(/*X*/default, /*Y*/default);
      } else {
        SetFocus();
      }
      return true;
    }
  }

  if (evt.type == ev_keydown && vallist.length != 0) {
    float newValue;
    int idx;
    if (evt.keycode >= K_MOUSE1 && evt.keycode <= K_MOUSE9) return ::OnEvent(evt);
    switch (ConvertBoundKey(evt.keycode)) {
      case K_LEFTARROW:
        idx = findValue(Value);
        if (idx < 0) idx = 0; else idx = (idx+vallist.length-1)%vallist.length;
        newValue = vallist[idx].value;
        if (SetNewValue(ref newValue)) LocalSound('menu/change');
        return true;
      case K_ENTER:
        OpenComboPopup();
        return true;
      case K_RIGHTARROW:
        idx = findValue(Value);
        if (idx < 0) idx = 0; else idx = (idx+1)%vallist.length;
        newValue = vallist[idx].value;
        if (SetNewValue(ref newValue)) LocalSound('menu/change');
        return true;
        break;
    }
  }

  return ::OnEvent(evt);
}


//==========================================================================
//
//  OpenComboPopup
//
//==========================================================================
void OpenComboPopup (optional int X, optional int Y) {
  if (!vallist) return;
  int idx = findValue(Value);
  /*MenuComboBoxPopup*/ cbox = MenuComboBoxPopup(GetRootWidget.NewChild(MenuComboBoxPopup));
  if (!cbox) return;
  cbox.choice = self;
  if (!X!specified) {
    auto oldFont = GetFont();
    scope(exit) SetFont(oldFont);
    SetFont(FontName);
    int xx = (bLeftAlign ? TextWidth(Text)+8 : CursorXOffs+10);
    X = xx;
  }
  if (!Y!specified) Y = -2;
  LocalXYToRoot(out cbox.xbase, out cbox.ybase, X, Y);
  foreach (int c, const ref auto vv; vallist) cbox.addItem(vv.caption, (c == idx));
  LocalSound('menu/change');
}


//==========================================================================
//
//  SetComboChoice
//
//==========================================================================
void SetComboChoice (int idx) {
  if (idx < 0 || idx >= vallist.length) return;
  float newValue = vallist[idx].value;
  if (SetNewValue(ref newValue)) LocalSound('menu/change');
}


//==========================================================================
//
//  OnClose
//
//==========================================================================
override void OnClose () {
  if (cbox) delete cbox;
  ::OnClose();
}


//==========================================================================
//
//  OnVisibilityChanged
//
//==========================================================================
override void OnVisibilityChanged (bool bNewVisibility) {
  if (!bNewVisibility) {
    if (cbox) delete cbox;
  }
  ::OnVisibilityChanged(bNewVisibility);
}


defaultproperties {
  //Width = 360;
  //Height = 10;
  //cvarSession = '';
}


// ////////////////////////////////////////////////////////////////////////// //
class MenuComboBoxPopup : Widget;

array!string items;
int currItem;
int defItem;
int xbase, ybase;
MenuChoiceEnum choice;


//==========================================================================
//
//  addItem
//
//==========================================================================
void addItem (string text, bool current) {
  text = text.xstrip;
  if (!text) text = "<undefined>";
  if (current) {
    currItem = items.length;
    defItem = currItem;
  }
  items[$] = text;

  auto oldFont = GetFont();
  scope(exit) SetFont(oldFont);

  SetFont(choice.FontName);
  //SetTextAlign(hleft, vtop);
  int hgt = 0, wdt = 0;
  foreach (auto str; items) {
    hgt += TextHeight(str);
    wdt = max(wdt, TextWidth(str));
  }

  SetSize(wdt+8, hgt+8);

  int x0 = xbase-1;
  if (x0+wdt+10 > Parent.Width) x0 = Parent.Width-wdt-10;
  if (x0 < 0) x0 = 0;

  int y0 = ybase-1;
  if (y0+hgt+10 > Parent.Height) y0 = Parent.Height-hgt-10;
  if (y0 < 0) y0 = 0;

  SetOrigin(x0, y0);
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  if (!items || Width < 1 || Height < 1) return;
  //printdebug("%s: cob=%B; focused=%B", UniqueId, CloseOnBlur, IsFocused());
  SetFont(choice.FontName);
  SetTextAlign(hleft, vtop);
  ShadeRect(0, 0, Width, Height, /*GetCvarF('menu_darkening')*/0.8);
  DrawRect(0, 0, Width, Height, RGB(255, 255, 255));
  //DrawText(4, 4, mText, CR_ORANGE);

  int y = 4;
  foreach (int idx, auto str; items) {
    int hgt = TextHeight(str);
    //if (idx == currItem) FillRect(1, y, Width-2, hgt, RGB(152, 205, 50), 0.6);
    if (idx == currItem) FillRect(1, y, Width-2, hgt, RGB(152*2, 205, 50), 0.8);
    DrawText(4, y, str, (idx == currItem ? CR_WHITE : idx == defItem ? CR_YELLOW : /*CR_OLIVE*/CR_TEAL));
    y += hgt;
  }
}


//==========================================================================
//
//  OnEvent
//
//==========================================================================
override bool OnEvent (ref event_t evt) {
  //printdebug("%s: event:%s", UniqueId, evt.type);

  // any events are always processed by us (i.e. we intercept everything, because we are the popup)

  if (evt.type == ev_mouse) {
    if (evt.msx >= 1 && evt.msy >= 4 && evt.msx < Width-1 && evt.msy < Height-4) {
      int idx = FindItemAt(evt.msx, evt.msy);
      if (idx >= 0) currItem = idx;
    }
    return true;
  }

  if (evt.type == ev_click) {
    int idx = FindItemAt(evt.x, evt.y);
    if (idx >= 0) {
      currItem = idx;
      if (choice) choice.SetComboChoice(currItem);
      Destroy();
    }
    return true;
  }

  // keys/mouse
  if (evt.type == ev_keydown) {
    if (evt.keycode >= K_MOUSE1 && evt.keycode <= K_MOUSE9) {
      if (evt.keycode != K_MOUSE1 || evt.x < 0 || evt.y < 0 || evt.x >= Width || evt.y >= Height) {
        //printdebug("xclick!");
        Destroy();
        return true;
      }
    }
    switch (ConvertBoundKey(evt.keycode)) {
      case K_ESCAPE:
        Destroy();
        return true;
      case K_ENTER:
        if (choice) choice.SetComboChoice(currItem);
        Destroy();
        return true;
      case K_UPARROW:
        if (currItem > 0) --currItem;
        return true;
      case K_DOWNARROW:
        if (currItem < items.length-1) ++currItem;
        return true;
      case K_HOME:
        currItem = 0;
        return true;
      case K_END:
        currItem = items.length-1;
        return true;
    }
  }

  ::OnEvent(evt);
  return true;
}


//==========================================================================
//
//  FindItemAt
//
//==========================================================================
int FindItemAt (int x, int y) {
  if (x < 1 || y < 4 || x >= Width-1 || y >= Height-4) return -1;
  auto oldFont = GetFont();
  scope(exit) SetFont(oldFont);
  SetFont(choice.FontName);
  int yy = 4;
  foreach (int idx, auto str; items) {
    int hgt = TextHeight(str);
    if (y >= yy && y < yy+hgt) return idx;
    yy += hgt;
  }
  return -1;
}


//==========================================================================
//
//  OnClose
//
//==========================================================================
override void OnClose () {
  //printdebug("%s: closing", UniqueId);
  if (choice) choice.cbox = none;
  ::OnClose();
}


defaultproperties {
  X = 0;
  Y = 0;
  Width = 0;
  Height = 0;
  Focusable = true;
  CloseOnBlur = true;
  OnTop = true;
}
