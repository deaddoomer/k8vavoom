//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuChoiceSlot : MenuChoiceBase;

int pic_M_LSLEFT;
int pic_M_LSCNTR;
int pic_M_LSRGHT;

int pic_M_FSLOT;

bool DrawSlotPic;
bool DrawStrikeLine;


//**************************************************************************
//**
//**  Slot for saves and input lines
//**
//**************************************************************************

//==========================================================================
//
//  FixMinimumHeight
//
//==========================================================================
override void FixMinimumHeight () {
  UpdateFontName();
  /*
  auto oldFont = GetFont();
  scope(exit) SetFont(oldFont);
  SetFont('smallfont');
  int height = clamp(FontHeight(), 10, 32);
  */
  if (Height < 30) Height = 30;
}


//==========================================================================
//
//  InitSlot
//
//==========================================================================
void InitSlot () {
  if (WadLumpPresent('m_fslot')) {
    pic_M_FSLOT = R_RegisterPic('m_fslot');
  } else {
    pic_M_LSLEFT = R_RegisterPic('m_lsleft');
    pic_M_LSCNTR = R_RegisterPic('m_lscntr');
    pic_M_LSRGHT = R_RegisterPic('m_lsrght');
  }
}


//==========================================================================
//
//  DrawSlot
//
//==========================================================================
int DrawSlot (int y, string text, bool entering, optional int color) {
  int xx;
  int j;

  if (DrawSlotPic) {
    if (pic_M_FSLOT != -1) {
      DrawPic(0, y, pic_M_FSLOT);
    } else {
      DrawPic(3, y+12, pic_M_LSLEFT);
      for (j = 0, xx = 11; j < 24; j++, xx += 8) {
        DrawPic(xx, y+12, pic_M_LSCNTR);
      }
      DrawPic(xx, y+12, pic_M_LSRGHT);
    }
  } else {
    ShadeRect(0, y+4, 128, 10, GetCvarF('menu_darkening'));
  }

  SetFont(FontName);
  SetTextAlign(hleft, vtop);
  DrawText(5, y+5, text, color!optional);
  if (entering) DrawCursor();

  if (DrawStrikeLine) {
    FillRect(4, y+5+2, 24*8+5+2, 2+2, 0xff_00_00_00);
    FillRect(5, y+5+3, 24*8+5, 2, 0xff_ff_00_00);
  }

  return 20;
}


defaultproperties {
  pic_M_FSLOT = -1;
  DrawSlotPic = true;
  Height = 30;
}
