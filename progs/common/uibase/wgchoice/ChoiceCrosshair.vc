//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MenuCrosshairChoice : MenuChoiceBase;

string Text;
bool bLeftAlign;
name cvar;

final int value {
  get {
    if (cvar) return GetCvar(cvar);
    return 0;
  }
  set(value) {
    if (cvar) SetCvar(cvar, value);
  }
}


//==========================================================================
//
//  FixMinimumHeight
//
//==========================================================================
override void FixMinimumHeight () {
  ::FixMinimumHeight();
  //if (Height < height) Height = height;
}


//==========================================================================
//
//  SetText
//
//==========================================================================
void SetText (string AText) {
  Text = TranslateString(AText);
  FixMinimumHeight();
}


//==========================================================================
//
//  isValidValue
//
//==========================================================================
final int loadPic (int v) {
  if (v <= 0) return 0;
  if (v > 9) return 0;
  name pn = name(va("croshai%x", v));
  int pic = R_RegisterPic(pn);
  if (pic > 0) return pic;
  return 0;
}


//==========================================================================
//
//  isValidValue
//
//==========================================================================
final bool isValidValue (int v) {
  if (v < 0) return false;
  if (v == 0) return true;
  if (v > 15) return false;
  return !!loadPic(v);
}


//==========================================================================
//
//  SetOrigin
//
//==========================================================================
override void SetOrigin (int x, int y) {
  if (bLeftAlign) {
    SetPos(x, y);
  } else {
    CursorXOffs = /*200*/CursorXOffsHR;
    SetPos(x-CursorXOffs, y);
  }
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  DrawBackground();

  SetFont(FontName);

  int ty = TextHeightAdd/2;
  int Col = (IsFocused ? TextColorFocus : TextColor);
  if (bLeftAlign) {
    SetTextAlign(hleft, vtop);
    DrawText(0, ty, Text, Col);
  } else {
    SetTextAlign(hright, vtop);
    DrawText(CursorXOffs, ty, Text, Col);
  }
  int xx = (bLeftAlign ? TextWidth(Text)+8 : CursorXOffs+10)+4;
  SetTextAlign(hleft, vtop);
  int pic = loadPic(value);
  if (pic) {
    DrawPic(xx, 5, pic);
  }
}


//==========================================================================
//
//  OnEvent
//
//==========================================================================
override bool OnEvent (ref event_t evt) {
  // "on click"
  if (evt.type == ev_click && evt.dest == self) {
    if (evt.keycode == K_MOUSE1) {
      SetFocus();
      return true;
    }
  }

  if (evt.type == ev_keydown) {
    int idx = value;
    int key = ConvertBoundKey(evt.keycode);
    switch (key) {
      case K_LEFTARROW:
      case K_MWHEELUP:
        if (evt.keycode != K_MWHEELUP || (IsFocused() && evt.y >= 0 && evt.y < Height && evt.x > CursorXOffs)) {
          if (idx > 0) {
            --idx;
            if (isValidValue(idx)) {
              value = idx;
              LocalSound('menu/change');
            }
          }
          return true;
        }
        break;
      case K_RIGHTARROW:
      case K_ENTER:
      case K_MWHEELDOWN:
        if (evt.keycode != K_MWHEELDOWN || (IsFocused() && evt.y >= 0 && evt.y < Height && evt.x > CursorXOffs)) {
          if (idx < 9) {
            ++idx;
            if (isValidValue(idx)) {
              value = idx;
              LocalSound('menu/change');
            }
          }
          return true;
        }
        break;
    }
  }

  return ::OnEvent(evt);
}


defaultproperties {
  //Width = 360;
  TextHeightAdd = 8;
  //Height = 14;
  cvarSession = '';

  TextColor = CR_RED;
  TextColorFocus = CR_YELLOW;
}
