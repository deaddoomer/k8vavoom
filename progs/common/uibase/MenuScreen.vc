//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreen : Widget;

const int MAX_MENU_ITEMS		= 32;

ClientGameShared		ClGame;

MenuChoice				Items[MAX_MENU_ITEMS];
int						NumItems;
int						CursorPos;
int						CursorPrev;

int						ChoicesStartX;
int						ChoicesStartY;

class<Widget>			SelectorType;
Widget					Selector;

string					Title;
int						TitleX;
int						TitleY;

name					ActivateSound;
name					DeactivateSound;
name					ClearMenusSound;

//==========================================================================
//
//	CreateMenu
//
//==========================================================================

void CreateMenu()
{
	CreateTitle();
	DrawBackButton();
	CreateChoices();
	CreateSelector();
	SetDefaultChoice();
}

//==========================================================================
//
//	OnChildAdded
//
//==========================================================================

void OnChildAdded(Widget Child)
{
	if (MenuChoice(Child) && !MenuChoice_BackButton(Child))
	{
		if (NumItems >= MAX_MENU_ITEMS)
		{
			FatalError("Too many menu items");
		}
		Items[NumItems++] = MenuChoice(Child);
	}
	::OnChildAdded(Child);
}

//==========================================================================
//
//	CreateTitle
//
//==========================================================================

void CreateTitle()
{
	MenuTitleText newTitle;

	if (Title)
	{
		newTitle = MenuTitleText(NewChild(MenuTitleText));
		newTitle.Text = Title;
		newTitle.SetOrigin(TitleX, TitleY);
	}
}

//==========================================================================
//
//	DrawBackButton
//
//==========================================================================

void DrawBackButton()
{
	//  Draw the back button on the top left corner of the menu screen
	MenuChoice_BackButton	BackButton;

	BackButton =  MenuChoice_BackButton(NewChild(MenuChoice_BackButton));
	BackButton.SetOrigin(Width - 20, 1);
}

//==========================================================================
//
//	CreateChoices
//
//==========================================================================

void CreateChoices()
{
}

//==========================================================================
//
//	CreateSelector
//
//==========================================================================

void CreateSelector()
{
	if (SelectorType)
	{
		Selector = NewChild(SelectorType);
	}
}

//==========================================================================
//
//	CursorMoved
//
//==========================================================================

void CursorMoved()
{
	if (CursorPrev == CursorPos || MenuChoice_BackButton(Items[CursorPos]))
		return;

	if (CursorPos >= 0 && CursorPos < NumItems)
	{
		SetCurrentFocusChild(Items[CursorPos]);
	}

	if (Selector)
	{
		Selector.SetOrigin(Items[CursorPos].X + Items[CursorPos].CursorXOffs,
			Items[CursorPos].Y + Items[CursorPos].CursorYOffs);
	}
}

//==========================================================================
//
//	SetDefaultChoice
//
//==========================================================================

void SetDefaultChoice()
{
	int i;

	// default cursor position
	CursorPos = 0;
	CursorPrev = 0;

	// force first available item to have focus
	for (i = 0; i < NumItems; i++)
	{
		if (Items[i].Focusable && Items[i].Enabled && !MenuChoice_BackButton(Items[i]))
		{
			CursorPrev = -1;
			CursorPos = i;
			CursorMoved();
			break;
		}
	}
}

//==========================================================================
//
//	CyclePrevChoice
//
//==========================================================================

void CyclePrevChoice()
{
	CursorPrev = CursorPos;
	do
	{
		if (!CursorPos)
			CursorPos = NumItems - 1;
		else
			CursorPos--;
	}
	while ((!Items[CursorPos].Focusable || !Items[CursorPos].Enabled) &&
		!MenuChoice_BackButton(Items[CursorPos]) && CursorPrev != CursorPos);
	CursorMoved();
}

//==========================================================================
//
//	CycleNextChoice
//
//==========================================================================

void CycleNextChoice()
{
	CursorPrev = CursorPos;
	do
	{
		if (CursorPos == NumItems - 1)
			CursorPos = 0;
		else
			CursorPos++;
	}
	while ((!Items[CursorPos].Focusable || !Items[CursorPos].Enabled) &&
		!MenuChoice_BackButton(Items[CursorPos]) && CursorPrev != CursorPos);
	CursorMoved();
}

//==========================================================================
//
//	OnKeyDown
//
//==========================================================================

bool OnKeyDown(int key)
{
	switch (key)
	{
	case K_DOWNARROW:
	case K_MWHEELDOWN:
		CycleNextChoice();
		LocalSound('menu/cursor');
		return true;

	case K_UPARROW:
	case K_MWHEELUP:
		CyclePrevChoice();
		LocalSound('menu/cursor');
		return true;

	case K_ESCAPE:
	case K_MOUSE2:
		ClGame.PopMenu();
		return true;
	}

	return false;
}

//==========================================================================
//
//	OnDraw
//
//  Fade all the screen buffer, so that the menu is more readable,
// especially now that we use the small hudfont in the menus...
//
//==========================================================================

void OnDraw()
{
	ShadeRect(0, 0, 640, 480, GetCvarF('menu_darkening'));
}

defaultproperties
{
	X = 160;
	Y = 140;
	Width = 320;
	Height = 200;
	TitleX = 160;
	TitleY = 24;
	Focusable = true;

	ActivateSound = 'menu/activate';
	DeactivateSound = 'menu/backup';
	ClearMenusSound = 'menu/clear';
}
