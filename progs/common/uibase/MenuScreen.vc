//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ItemContainerWidget : Widget;


//==========================================================================
//
//  OnChildAdded
//
//  append it to the parent menu child list
//
//==========================================================================
override void OnChildAdded (Widget Child) {
  auto menu = FindParentWithClass(MenuScreen);
  if (menu) menu.NewItemAdded(Child);
  ::OnChildAdded(Child);
}


//==========================================================================
//
//  OnDraw
//
//==========================================================================
override void OnDraw () {
  auto menu = FindParentWithClass(MenuScreen);
  if (menu && !menu.HighlightBackground) return;
  // don't highlight menus with big selector
  if (menu.Selector && MenuSelector_Big(menu.Selector)) return;
  // draw highlight
  auto fc = GetCurrentFocus();
  if (fc) {
    auto mcc = MenuChoiceBase(fc);
    if (mcc && mcc.HighlightBackground) {
      //printdebug("%C: OnDraw: %C (%s)", self, mcc, mcc.UniqueId);
      int hgt = mcc.Height;
      if (hgt == 10) hgt -= 2; else hgt -= 1;
      FillRect(0, mcc.Y+ChildrenOfsY, Width, hgt, RGB(152, 205, 50), 0.6);
    }
  }
}


defaultproperties {
  Focusable = true;
  //UseScissor = true;
  //WantMouseInput = true;
}


// ////////////////////////////////////////////////////////////////////////// //
class MenuScreen : Widget;

ClientGameShared ClGame;

string defFileName;
name MenuName;
bool isControls;

MenuTitleText titleItem;
Widget ItemContainer;
array!MenuChoiceBase Items;
MenuChoice_BackButton BackButton;

bool MenuScrollable;
bool AllowVerticalResize;
int OfsYPrev;
int CursorPos;
int CursorPrev;

int ChoicesStartX;

class!MenuSelectorBase SelectorType;
MenuSelectorBase Selector;

string Title;

name ActivateSound;
name DeactivateSound;
name ClearMenusSound;

//int currentY;

HelpText helpText;

int WidthThreshold = 380;

#ifdef K8_DEVELOPER
enum k8Developer = true;
#else
enum k8Developer = false;
#endif

bool HighlightBackground;
bool CenterChoicesVert;


//==========================================================================
//
//  IsMultiplayerEnabled
//
//==========================================================================
final static bool IsMultiplayerEnabled () {
  return !GetCvarB('dbg_disable_multiplayer');
}


//==========================================================================
//
//  OnDestroy
//
//==========================================================================
override void OnDestroy () {
  //printdebug("%C: OnDestroy", self);
  //if (helpText) printdebug("%C: destroying helpText(%s)", self, helpText.UniqueId);
  delete helpText;
  ::OnDestroy();
}


//==========================================================================
//
//  OnCreate
//
//==========================================================================
override void OnCreate () {
  ::OnCreate();
  ItemContainer = CreateItemContainer();
}


//==========================================================================
//
//  OnVisibilityChanged
//
//  Called when this widget is shown or hidden.
//
//==========================================================================
override void OnVisibilityChanged (bool bNewVisibility) {
  if (helpText) {
    if (bNewVisibility) {
      //printdebug("raising help text (%s)", helpText.UniqueId);
      helpText.Show();
      //helpText.Raise();
    } else {
      helpText.Hide();
    }
  }
  ::OnVisibilityChanged(bNewVisibility);
}


//==========================================================================
//
//  OnConfigurationChanged
//
//  Called when position or size has been changed.
//
//==========================================================================
override void OnConfigurationChanged () {
  ::OnConfigurationChanged();
  //printdebug("%C: config changed; size=%dx%d", self, Width, Height);
  if (ItemContainer) {
    int sy = GetItemContainerOfsY();
    ItemContainer.SetConfiguration(0, sy, Width, Height-sy);
  }
  if (Selector && Items.length) CursorMoved(forced:true); // this fixes selector position
}


//==========================================================================
//
//  OnBeforePopMenu
//
//  this is called before `ClGame.PopMenu()`
//  return `false` to prevent closing (but still eat the event)
//  `userAbort` is true if closed via `esc`
//
//==========================================================================
bool OnBeforePopMenu (bool userAbort) {
  return true;
}


//==========================================================================
//
//  DoPopMenu
//
//  call this instead of `ClGame.PopMenu()`
//
//==========================================================================
void DoPopMenu (bool userAbort) {
  if (OnBeforePopMenu(userAbort)) {
    ClGame.PopMenu();
  }
}


//==========================================================================
//
//  ShowAndActivate
//
//==========================================================================
void ShowAndActivate () {
  Show();
  Raise();
  SetFocus();
  if (helpText) {
    //printdebug("showing help text (%s)", helpText.UniqueId);
    helpText.Show();
    //helpText.Raise();
  }
}


//==========================================================================
//
//  FinishCreatingMenu
//
//==========================================================================
void FinishCreatingMenu () {
  //if (AllowVerticalResize) Height = max(Height, Items[$-1].Y+Items[$-1].Height+4);
  //printdebug("%C: FinishCreatingMenu! (avs=%B; itemcount=%s)", self, AllowVerticalResize, Items.length);
  SetDefaultChoice();
  CreateSelector();
  if (AllowVerticalResize && Items.length > 0) {
    int newHeight = max(Height, Items[$-1].Y+Items[$-1].Height+2+GetItemContainerOfsY());
    if (newHeight > GetVirtualHeight()-28) {
      newHeight = GetVirtualHeight()-28;
      MenuScrollable = true;
    }
    //printdebug("%C: old height=%s; new height=%s", self, Height, newHeight);
    Height = newHeight;
  }

  FixTitleWidthClosePos();

  // center menu
  SetPos((GetVirtualWidth()-Width)/2, (GetVirtualHeight()-Height)/2);

  if (CenterChoicesVert && Items) {
    auto ctr = GetItemContainer();
    int y0 = ctr.ChildrenOfsY; // negative means "scrolled down"
    int y1 = Items[$-1].Y+Items[$-1].Height+y0;
    if (y0 == 0 && y1 < ctr.Height) {
      // smaller than container, center
      int yofs = (ctr.Height-y1)/2-Items[0].Y;
      //printdebug("%s: y1=%s; height=%s; i0y=%s; yofs=%s", MenuName, y1, ctr.Height, Items[0].Y, yofs);
      if (yofs) {
        foreach (auto it; Items) it.Y = it.Y+yofs;
        CursorMoved(forced:true); // this fixes selector position
      }
    }
  }
}


//==========================================================================
//
//  LoadMenu
//
//==========================================================================
final static MenuDefinition LoadMenu (string defFileName) {
  if (!defFileName) FatalError("undefined menudef");
  auto par = MenuDefinition.openParser(defFileName);
  scope(exit) delete par;
  par.Expect("menudef");
  auto mdef = SpawnObject(MenuDefinition);
  mdef.parse(par);
  return mdef;
}


//==========================================================================
//
//  CreateMenuItemsFromList
//
//==========================================================================
void CreateMenuItemsFromList (ref array!MenuDefOptionBase options, optional int styofs) {
  foreach (auto opt; options) {
    if (!opt.test()) continue;
    if (opt isa MenuDefOptionModSubMenus) {
      auto smm = MenuDefOptionModSubMenus(opt);
      CreateMenuItemsFromList(smm.options);
      continue;
    }
    auto xlen = Items.length;
    auto mc = opt.CreateOption(self);
    if (mc) {
      if (opt.help) mc.customHelpText = opt.help;
      //printdebug("%C: mc.Width=%s; Width=%s", self, mc.Width, Width);
      mc.Width = Width;
      mc.CursorXOffs = Width/2;
      if (opt isa MenuDefOptionSubHeader) {
        mc.SetOrigin(0, GetCurrentY());
      } else {
        mc.CursorXOffsHR = Width/2;
        mc.SetOrigin(Width/2, GetCurrentY());
      }
      if (styofs) { mc.Y = mc.Y+styofs; styofs = 0; }
      //currentY += mc.Height;
    }
  }
}


//==========================================================================
//
//  CreateMenuFromDef
//
//==========================================================================
void CreateMenuFromDef (MenuDefinition mdef) {
  Width = 520;
  Height = 260;
  ChoicesStartX = 200;
  SelectorType = MenuSelector_SmallRight;

  MenuName = name(mdef.menuName.toLowerCase());
  Title = mdef.title;

  if (nameicmp(mdef.seltype, 'Controls') == 0) {
    isControls = true;
    class!MenuSelectorBase cc = class!MenuSelectorBase(MenuSelector_SmallRight);
    if (cc) SelectorType = cc;
    ChoicesStartX = Width/2; //190;
    //ChoicesStartX = 0;
  } else if (mdef.seltype) {
    class!MenuSelectorBase cc = class!MenuSelectorBase(FindClass(mdef.seltype));
    if (cc) SelectorType = cc;
  }

  if (!helpText) helpText = GetRootWidget().NewChild(HelpText);
  helpText.OnTop = true;
  helpText.text = "";
  CreateTitle();
  CreateBackButton();

  CreateMenuItemsFromList(mdef.options);
  FinishCreatingMenu();
}


//==========================================================================
//
//  CreateMenu
//
//==========================================================================
void CreateMenu () {
  if (!defFileName || defFileName == " <custom> ") {
    if (!helpText) helpText = GetRootWidget().NewChild(HelpText);
    if (defFileName == " <custom> ") {
      Width = 520;
      Height = 260;
      ChoicesStartX = 200;
      SelectorType = MenuSelector_SmallRight;
    }
    helpText.OnTop = true;
    helpText.text = "";
    CreateTitle();
    CreateBackButton();
    CreateChoices();
    FinishCreatingMenu();
  } else {
    auto mdef = LoadMenu(defFileName);
    scope(exit) delete mdef;
    //mdef.dump();
    CreateMenuFromDef(mdef);
  }
}


//==========================================================================
//
//  NewItemAdded
//
//==========================================================================
void NewItemAdded (Widget Child) {
  if (!Child) return;
  // do not add "close" button to item list
  if (MenuChoiceBase(Child) && !MenuChoice_BackButton(Child)) {
    //if (Items.length > 1024) FatalError("Too many menu items");
    Items[Items.Length] = MenuChoiceBase(Child);
  }
}


//==========================================================================
//
//  OnChildAdded
//
//==========================================================================
override void OnChildAdded (Widget Child) {
  NewItemAdded(Child);
  ::OnChildAdded(Child);
}


//==========================================================================
//
//  CreateTitle
//
//==========================================================================
void CreateTitle () {
  if (Title) {
    if (!titleItem) titleItem = NewChild(MenuTitleText);
    titleItem.Text = Title;
    titleItem.FixSize();
  } else {
    delete titleItem;
  }
  // fix item container size
  OnConfigurationChanged();
}


//==========================================================================
//
//  ChangeTitle
//
//==========================================================================
void ChangeTitle (string newtitle) {
  //if (!titleItem) return; // no title, cannot insert it now
  //if (!newtitle) newtitle = " "; //FIXME
  if (Title == newtitle) return;
  Title = newtitle;
  CreateTitle();
}


//==========================================================================
//
//  CreateBackButton
//
//  create the back button on the top left corner of the menu screen
//
//==========================================================================
void CreateBackButton () {
  if (!BackButton) {
    BackButton = NewChild(MenuChoice_BackButton);
    BackButton.Width = BackButton.CalcTextWidth()+8;
    BackButton.SetOrigin(Width-20, 1);
  }
}


//==========================================================================
//
//  CreateItemContainer
//
//==========================================================================
Widget CreateItemContainer () {
  //return none;
  Widget itc = NewChild(ItemContainerWidget);
  itc.SetConfiguration(0, 0, Width, Height);
  return itc;
}


//==========================================================================
//
//  GetItemContainer
//
//==========================================================================
Widget GetItemContainer () {
  return (ItemContainer ? ItemContainer : Widget(self));
}


//==========================================================================
//
//  GetItemContainerOfsY
//
//==========================================================================
int GetItemContainerOfsY () {
  return (titleItem ? titleItem.Y+titleItem.Height+2 : 0);
}


//==========================================================================
//
//  GetChoicesStartY
//
//==========================================================================
int GetChoicesStartY () {
  int sy = (ItemContainer ? 0 : titleItem ? titleItem.Y+titleItem.Height+2 : 0);
  //if (SelectorType == MenuSelector_Big) sy += 6;
  return sy;
}


//==========================================================================
//
//  GetCurrentY
//
//==========================================================================
int GetCurrentY () {
  int sy = (Items.length > 1 ? Items[$-2].Y+Items[$-2].Height : GetChoicesStartY());
  return sy;
}


//==========================================================================
//
//  CreateChoices
//
//==========================================================================
void CreateChoices () {
}


//==========================================================================
//
//  FixTitleWidthClosePos
//
//==========================================================================
void FixTitleWidthClosePos () {
  if (titleItem) titleItem.FixSize();
  if (BackButton) BackButton.SetOrigin(Width-20, 1);
}


//==========================================================================
//
//  SetLastHelp
//
//==========================================================================
void SetLastHelp (string help) {
  if (Items.length) Items[$-1].customHelpText = help;
}


//==========================================================================
//
//  SetChoiceInitialSizeSimple
//
//==========================================================================
void SetChoiceInitialSizeSimple (MenuChoiceBase cc, optional bool doCurOffs/*=true*/) {
  if (!cc) return;
  if (!specified_doCurOffs) doCurOffs = true;
  cc.Width = Width;
  if (Width > WidthThreshold) {
    //print("[%s] wdt=%d", text, Width);
    //!cc.Width = Width;
    if (doCurOffs) {
      cc.CursorXOffs = Width/2;
      cc.CursorXOffsHR = Width/2;
    }
  }
}


//==========================================================================
//
//  SetChoiceInitialSizePos
//
//==========================================================================
void SetChoiceInitialSizePos (MenuChoiceBase cc) {
  if (!cc) return;
  cc.Width = Width;
  if (Width > WidthThreshold) {
    //print("[%s] wdt=%d", text, Width);
    //!cc.Width = Width;
    cc.CursorXOffs = Width/2;
    cc.CursorXOffsHR = Width/2;
    cc.SetOrigin(Width/2, GetCurrentY());
  } else {
    cc.SetOrigin(ChoicesStartX, GetCurrentY());
  }
}


//==========================================================================
//
//  SetTextButtonInitialSizePos
//
//==========================================================================
void SetTextButtonInitialSizePos (MenuTextButton cc) {
  if (!cc) return;
  cc.SetOrigin(ChoicesStartX, GetCurrentY());
  if (Width > WidthThreshold) cc.Width = Width;
}


//==========================================================================
//
//  CreateOnOffCvar
//
//  should be called from `CreateChoices()` (and `currentY` must be set)
//
//==========================================================================
MenuChoice_OnOff CreateOnOffCvar (string text, name cvname) {
  auto onoff = GetItemContainer().NewChild(MenuChoice_OnOff);
  SetChoiceInitialSizePos(onoff);
  onoff.SetText(text);
  onoff.SetSessionCvar(cvname);
  //currentY += onoff.Height;
  return onoff;
}


//==========================================================================
//
//  CreateEnumCvar
//
//  should be called from `CreateChoices()` (and `currentY` must be set)
//
//==========================================================================
MenuChoiceEnum CreateEnumCvar (string text, name cvname,
  optional string item0, optional string item1, optional string item2,
  optional string item3, optional string item4, optional string item5,
  optional string item6, optional string item7, optional string item8,
  optional string item9, optional string item10, optional string item11,
  optional string item12, optional string item13, optional string item14,
  optional string item15, optional string item16, optional string item17,
  optional string item18, optional string item19, optional string item20,
  optional string item21, optional string item22, optional string item23,
  optional string item24, optional string item25, optional string item26)
{
  auto en = GetItemContainer().NewChild(MenuChoiceEnum);
  SetChoiceInitialSizePos(en);
  en.SetText(text);
  if (specified_item0) en.AddItem(item0);
  if (specified_item1) en.AddItem(item1);
  if (specified_item2) en.AddItem(item2);
  if (specified_item3) en.AddItem(item3);
  if (specified_item4) en.AddItem(item4);
  if (specified_item5) en.AddItem(item5);
  if (specified_item6) en.AddItem(item6);
  if (specified_item7) en.AddItem(item7);
  if (specified_item8) en.AddItem(item8);
  if (specified_item9) en.AddItem(item9);
  if (specified_item10) en.AddItem(item10);
  if (specified_item11) en.AddItem(item11);
  if (specified_item12) en.AddItem(item12);
  if (specified_item13) en.AddItem(item13);
  if (specified_item14) en.AddItem(item14);
  if (specified_item15) en.AddItem(item15);
  if (specified_item16) en.AddItem(item16);
  if (specified_item17) en.AddItem(item17);
  if (specified_item18) en.AddItem(item18);
  if (specified_item19) en.AddItem(item19);
  if (specified_item20) en.AddItem(item20);
  if (specified_item21) en.AddItem(item21);
  if (specified_item22) en.AddItem(item22);
  if (specified_item23) en.AddItem(item23);
  if (specified_item24) en.AddItem(item24);
  if (specified_item25) en.AddItem(item25);
  if (specified_item26) en.AddItem(item26);
  en.SetSessionCvar(cvname);
  //currentY += en.Height;
  return en;
}


//==========================================================================
//
//  CreateFloatSliderCvar
//
//  should be called from `CreateChoices()` (and `currentY` must be set)
//
//==========================================================================
MenuChoiceSlider CreateFloatSliderCvar (string text, name cvname, float delta, optional float min, optional float max) {
  /*
  if (Items.length > 0 && Items[$-1] !isa MenuChoiceSlider && Items[$-1].Height == 10) {
    Items[$-1].Height = 8;
    currentY -= 2;
  }
  */
  auto slider = GetItemContainer().NewChild(MenuChoiceSlider);
  SetChoiceInitialSizePos(slider);
  slider.SetText(text);
  slider.cvarSession = cvname;
  slider.ValueDelta = delta;
  if (specified_min) slider.MinValue = min;
  if (specified_max) slider.MaxValue = max;
  slider.SetSessionCvar(cvname);
  //currentY += slider.Height;
  return slider;
}


//==========================================================================
//
//  CreateFloatNumericCvar
//
//  should be called from `CreateChoices()` (and `currentY` must be set)
//
//==========================================================================
MenuChoiceNumeric CreateFloatNumericCvar (string text, name cvname, float delta, optional float min, optional float max) {
  auto slider = GetItemContainer().NewChild(MenuChoiceNumeric);
  SetChoiceInitialSizePos(slider);
  slider.SetText(text);
  slider.cvarSession = cvname;
  slider.ValueDelta = delta;
  if (specified_min) slider.MinValue = min;
  if (specified_max) slider.MaxValue = max;
  slider.SetSessionCvar(cvname);
  //currentY += slider.Height;
  return slider;
}


//==========================================================================
//
//  CreateChoiceSubHeader
//
//  should be called from `CreateChoices()` (and `currentY` must be set)
//  default color: CR_ORANGE
//
//==========================================================================
MenuTextButton CreateChoiceSubHeader (string text, optional int color) {
  auto btn = GetItemContainer().NewChild(MenuSmallTextButton);
  btn.TextHAlign = hcenter;
  btn.TextVAlign = vbottom;
  if (Width > WidthThreshold) {
    btn.Width = Width;
    btn.CursorXOffs = Width/2;
    btn.SetOrigin(0, GetCurrentY());
  } else {
    btn.SetOrigin(ChoicesStartX, GetCurrentY());
  }
  btn.SetText(text);
  btn.Focusable = false;
  if (specified_color) {
    btn.TextColor = color;
    btn.TextColorFocus = color;
  } else {
    btn.TextColor = CR_ORANGE;
    btn.TextColorFocus = CR_ORANGE;
  }
  btn.Height = 12;
  //currentY += btn.Height;
  return btn;
}


//==========================================================================
//
//  CreateSubMenuText
//
//==========================================================================
MenuTextButton CreateSubMenuText (string text, class!MenuScreen asubmenuClass) {
  auto btn = GetItemContainer().NewChild(MenuSmallTextButton);
  btn.SetOrigin(ChoicesStartX, GetCurrentY());
  if (Width > WidthThreshold) btn.Width = Width;
  btn.SetText(text);
  btn.SetSubMenuClass(asubmenuClass);
  //currentY += btn.Height;
  return btn;
}


//==========================================================================
//
//  CreateSubMenuBigText
//
//==========================================================================
MenuTextButton CreateSubMenuBigText (string text, class!MenuScreen asubmenuClass) {
  auto btn = GetItemContainer().NewChild(MenuBigTextButton);
  btn.SetOrigin(ChoicesStartX, GetCurrentY());
  if (Width > WidthThreshold) btn.Width = Width;
  btn.SetText(text);
  btn.SetSubMenuClass(asubmenuClass);
  //currentY += btn.Height;
  return btn;
}


//==========================================================================
//
//  CreateSubMenuTextNamed
//
//==========================================================================
MenuTextButton CreateSubMenuTextNamed (string text, name menuName) {
  auto btn = GetItemContainer().NewChild(MenuSmallTextButton);
  btn.SetOrigin(ChoicesStartX, GetCurrentY());
  if (Width > WidthThreshold) btn.Width = Width;
  btn.SetText(text);
  btn.SetSubMenuName(string(menuName));
  //currentY += btn.Height;
  return btn;
}


//==========================================================================
//
//  CreateSubMenuBigTextNamed
//
//==========================================================================
MenuTextButton CreateSubMenuBigTextNamed (string text, name menuName) {
  auto btn = GetItemContainer().NewChild(MenuBigTextButton);
  btn.SetOrigin(ChoicesStartX, GetCurrentY());
  if (Width > WidthThreshold) btn.Width = Width;
  btn.SetText(text);
  btn.SetSubMenuName(string(menuName));
  //currentY += btn.Height;
  return btn;
}


//==========================================================================
//
//  CreateSelector
//
//==========================================================================
void CreateSelector () {
  if (!SelectorType || Selector) return;
  if (Items.length == 0) return;
  Selector = NewChild(SelectorType);
  CursorMoved(forced:true); // this fixes selector position
}


//==========================================================================
//
//  GetSelectorBaseY
//
//==========================================================================
int GetSelectorBaseY () {
  return (ItemContainer ? ItemContainer.Y+ItemContainer.ChildrenOfsY : 0);
}


//==========================================================================
//
//  CalcTotalHeight
//
//==========================================================================
final int CalcTotalHeight () {
  foreach (auto it; Items; reverse) {
    if (it.IsFocusable && it.IsEnabled) {
      return it.Y+it.Height;
    }
  }
  return 0;
}


//==========================================================================
//
//  GetItemYS
//
//==========================================================================
final int GetItemYS (int idx) {
  if (idx < 0) return 0;
  if (idx >= Items.Length) return CalcTotalHeight();
  return Items[idx].Y;
}


//==========================================================================
//
//  GetItemYE
//
//==========================================================================
final int GetItemYE (int idx) {
  if (idx < 0) return 0;
  if (idx >= Items.Length) return CalcTotalHeight();
  return Items[idx].Y+Items[idx].Height;
}


//==========================================================================
//
//  GetItemYH
//
//==========================================================================
final int GetItemYH (int idx) {
  if (idx < 0) return 0;
  if (idx >= Items.Length) return 0;
  return Items[idx].Height;
}


//==========================================================================
//
//  FixTopIndex
//
//==========================================================================
final void FixTopIndex () {
  if (Items.length == 0) return;
  if (CursorPos < 0) CursorPos = Items.length-1; else if (CursorPos >= Items.length) CursorPos = 0;
  if (helpText) {
    helpText.text = Items[CursorPos].getHelp();
    helpText.Raise();
  }
  if (Items.length == 1) { if (helpText) helpText.atTop = false; CursorPos = 0; GetItemContainer().ChildrenOfsY = 0; return; }
  if (!MenuScrollable) { if (helpText) helpText.atTop = false; GetItemContainer().ChildrenOfsY = 0; return; }
  // check if this is first selectable item
  bool isFirstItem = true;
  foreach (auto index, auto item; Items) {
    if (!item.Focusable || !item.Enabled) continue;
    if (MenuChoice_BackButton(item)) continue;
    isFirstItem = index == CursorPos;
    break;
  }
  if (isFirstItem) { if (helpText) helpText.atTop = false; GetItemContainer().ChildrenOfsY = 0; return; }
  // make sure that cursor is visible
  int th = CalcTotalHeight();
  int ys = GetItemYS(CursorPos);
  int ye = GetItemYE(CursorPos);
  //print("Menu <%C>; ofs=%d; ys=%d; ye=%d; th=%d; height=%d; hh=%d; bs=%d; OriginY=%s", Class, GetItemContainer().ChildrenOfsY, ys, ye, th, Height, helpText.Height, GetVirtualHeight()-helpText.Height-4, Y2Virtual(ye));
  int csy = GetChoicesStartY();
       if (ys+GetItemContainer().ChildrenOfsY < csy) GetItemContainer().ChildrenOfsY = -ys+csy;
  else if (ye+GetItemContainer().ChildrenOfsY > GetItemContainer().Height) GetItemContainer().ChildrenOfsY = -(ye-GetItemContainer().Height);
  // make sure that help is visible
  if (helpText && helpText.Height > 0) {
    helpText.atTop = (GetItemContainer().Y2Virtual(ye)+GetItemContainer().ChildrenOfsY >= GetVirtualHeight()-helpText.Height-4);
  }
}


//==========================================================================
//
//  CursorMoved
//
//==========================================================================
void CursorMoved (optional bool forced) {
  if (Items.length == 0) return;
  FixTopIndex();
  assert(CursorPos >= 0 && CursorPos < Items.length);
  if (MenuChoice_BackButton(Items[CursorPos])) return; //FIXME: still set selector position!
  if (!forced && CursorPrev == CursorPos && GetItemContainer().ChildrenOfsY == OfsYPrev && Items[CursorPos].IsFocused()) return;
  auto it = Items[CursorPos];
  if (!it.IsFocused()) it.SetFocus();
  if (Selector) {
    int xofs = (isControls && ClGame ? ClGame.ControlColumn*90 : 0);
    Selector.SetOriginCentered(it.X+it.CursorXOffs+xofs, it.Y, it.Height);
  }
  CursorPrev = CursorPos;
  OfsYPrev = GetItemContainer().ChildrenOfsY;
}


//==========================================================================
//
//  SetDefaultChoice
//
//==========================================================================
void SetDefaultChoice () {
  // default cursor position
  GetItemContainer().ChildrenOfsY = 0;
  OfsYPrev = 0;
  CursorPos = 0;
  CursorPrev = 0;

  // force first available item to have focus
  foreach (int idx, MenuChoiceBase item; Items) {
    if (item.Focusable && item.Enabled && !MenuChoice_BackButton(item)) {
      CursorPrev = -1;
      CursorPos = idx;
      CursorMoved();
      break;
    }
  }
}


//==========================================================================
//
//  MakeItemSelected
//
//==========================================================================
bool MakeItemSelected (MenuChoiceBase it) {
  if (!it || MenuChoice_BackButton(it)) {
    //if (Selector) Selector.Hide();
    return false;
  }
  //printdebug("%C: MakeItemSelected: %C (%s)", self, it, it.UniqueId);
  foreach (int idx, MenuChoiceBase item; Items) {
    if (item == it && item.Focusable && item.Enabled && !MenuChoice_BackButton(item)) {
      if (CursorPos == idx) return true; // nothing to do
      CursorPrev = -1;
      CursorPos = idx;
      CursorMoved();
      return true;
    }
  }
  return false;
}


//==========================================================================
//
//  GetChoiceForSaving
//
//==========================================================================
int GetChoiceForSaving () {
  return (CursorPos+(-GetItemContainer().ChildrenOfsY)*10000);
}


//==========================================================================
//
//  SetSavedChoice
//
//  should be called after menu is fully created, and default choice set
//
//==========================================================================
void SetSavedChoice (int saval) {
  int idx = saval%10000;
  int top = saval/10000;
  if (idx < 0 || idx >= Items.length || CursorPos == idx) return;
  if (Items[idx].Focusable && Items[idx].Enabled) {
    CursorPrev = -1;
    CursorPos = idx;
    GetItemContainer().ChildrenOfsY = -top;
    CursorMoved();
  }
}


//==========================================================================
//
//  CyclePrevChoice
//
//==========================================================================
void CyclePrevChoice () {
  if (Items.length < 2) return;
  CursorPrev = CursorPos;
  do {
    if (!CursorPos) CursorPos = Items.length-1; else --CursorPos;
  } while ((!Items[CursorPos].Focusable || !Items[CursorPos].Enabled) && !MenuChoice_BackButton(Items[CursorPos]) && CursorPrev != CursorPos);
  CursorMoved();
}


//==========================================================================
//
//  CycleNextChoice
//
//==========================================================================
void CycleNextChoice () {
  if (Items.length < 2) return;
  CursorPrev = CursorPos;
  do {
    if (CursorPos == Items.length-1) CursorPos = 0; else ++CursorPos;
  } while ((!Items[CursorPos].Focusable || !Items[CursorPos].Enabled) && !MenuChoice_BackButton(Items[CursorPos]) && CursorPrev != CursorPos);
  CursorMoved();
}


//==========================================================================
//
//  DoHome
//
//==========================================================================
void DoHome () {
  if (Items.length < 2) return;
  CursorPrev = CursorPos;
  for (CursorPos = 0; CursorPos < Items.Length; ++CursorPos) {
    if (Items[CursorPos].Focusable && Items[CursorPos].Enabled && !MenuChoice_BackButton(Items[CursorPos])) break;
  }
  CursorMoved();
}


//==========================================================================
//
//  DoEnd
//
//==========================================================================
void DoEnd () {
  if (Items.length < 2) return;
  CursorPrev = CursorPos;
  for (CursorPos = Items.Length-1; CursorPos >= 0; --CursorPos) {
    if (Items[CursorPos].Focusable && Items[CursorPos].Enabled && !MenuChoice_BackButton(Items[CursorPos])) break;
  }
  CursorMoved();
}


//==========================================================================
//
//  OnDraw
//
//  fade all the screen buffer, so that the menu is more readable,
//  especially now that we use the small hudfont in the menus
//
//==========================================================================
override void OnDraw () {
  ShadeRect(0, 0, Width, Height, GetCvarF('menu_darkening'));
}


//==========================================================================
//
//  OnPostDraw
//
//==========================================================================
override void OnPostDraw () {
  auto ctr = GetItemContainer();
  int y0 = ctr.ChildrenOfsY; // negative means "scrolled down"
  int y1 = CalcTotalHeight()+y0;
  if (y0 < 0 || y1 > ctr.Height) {
    SetFont('consolefont');
    if (y0 < 0) DrawText(4, 4, "\x1a", CR_GOLD); // up arrow
    if (y1 > ctr.Height) DrawText(4, 4+FontHeight(), "\x1b", CR_GOLD); // down arrow
    SetFont('smallfont');
  }
}


//==========================================================================
//
//  OnEvent
//
//==========================================================================
override bool OnEvent (ref event_t evt) {
  if (evt.type == ev_broadcast) {
    if (evt.data1 == ev_resolution) {
      //printdebug("%C: *** RESOLUTION ***", self);
      // center menu
      SetPos((GetVirtualWidth()-Width)/2, (GetVirtualHeight()-Height)/2);
    }
    return ::OnEvent(evt);
  }

  if (evt.bubbling && evt.type == ev_keydown && evt.keycode == K_MOUSE2) {
    DoPopMenu(userAbort:true);
    return true;
  }

  if (evt.bubbling && evt.type == ev_keydown) {
    int key = ConvertBoundKey(evt.keycode);
    switch (key) {
      case K_UPARROW:
      case K_PAD8:
      case K_MWHEELUP:
        if (Items.length > 1) {
          CyclePrevChoice();
          LocalSound('menu/cursor');
        }
        return true;
      case K_DOWNARROW:
      case K_PAD2:
      case K_MWHEELDOWN:
        if (Items.length > 1) {
          CycleNextChoice();
          LocalSound('menu/cursor');
        }
        return true;
      case K_HOME:
      case K_PAD7:
        if (Items.length > 1) {
          DoHome();
          LocalSound('menu/cursor');
        }
        return true;
      case K_END:
      case K_PAD1:
        if (Items.length > 1) {
          DoEnd();
          LocalSound('menu/cursor');
        }
        return true;
      case K_ESCAPE:
        DoPopMenu(userAbort:true);
        return true;
    }
  }

  return ::OnEvent(evt);
}


defaultproperties {
  Focusable = true;
  MenuScrollable = true; // was `false`
  AllowVerticalResize = true; // was `false`
  //UseScissor = true;

  X = 160;
  Y = 140;
  Width = 320;
  Height = 200;

  ActivateSound = 'menu/activate';
  DeactivateSound = 'menu/backup';
  ClearMenusSound = 'menu/clear';

  //WantMouseInput = true;
  HighlightBackground = true;
  CenterChoicesVert = true;

  /* for text menus
  //Width = 380;
  Width = 520;
  Height = 260;
  ChoicesStartX = 200;
  SelectorType = MenuSelector_SmallRight;
  */
}
