//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreen : Widget;

ClientGameShared ClGame;

array<MenuChoice> Items;
int CursorPos;
int CursorPrev;

int ChoicesStartX;
int ChoicesStartY;

class<Widget> SelectorType;
Widget Selector;

string Title;
int TitleX;
int TitleY;

name ActivateSound;
name DeactivateSound;
name ClearMenusSound;


// ////////////////////////////////////////////////////////////////////////// //
//k8: is this necessary?
void OnDestroy () {
  Items.Num = 0;
}


void CreateMenu () {
  CreateTitle();
  DrawBackButton();
  CreateChoices();
  CreateSelector();
  SetDefaultChoice();
}


void OnChildAdded (Widget Child) {
  if (MenuChoice(Child) && !MenuChoice_BackButton(Child)) {
    if (Items.Num > 128) FatalError("Too many menu items");
    Items.Num = Items.Num+1;
    Items[Items.Num-1] = MenuChoice(Child);
  }
  ::OnChildAdded(Child);
}


void CreateTitle () {
  if (Title) {
    MenuTitleText newTitle = MenuTitleText(NewChild(MenuTitleText));
    newTitle.Text = Title;
    newTitle.SetOrigin(TitleX, TitleY);
  }
}


void DrawBackButton () {
  // Draw the back button on the top left corner of the menu screen
  MenuChoice_BackButton BackButton = MenuChoice_BackButton(NewChild(MenuChoice_BackButton));
  BackButton.SetOrigin(Width-20, 1);
}


void CreateChoices () {
}


void CreateSelector () {
  if (SelectorType) Selector = NewChild(SelectorType);
}


void CursorMoved () {
  if (Items.Num == 0) return;
  if (CursorPos < 0) CursorPos = Items.Num-1; else if (CursorPos >= Items.Num) CursorPos = 0;

  if (CursorPrev == CursorPos || MenuChoice_BackButton(Items[CursorPos])) return;

  if (CursorPos >= 0 && CursorPos < Items.Num) SetCurrentFocusChild(Items[CursorPos]);

  if (Selector) Selector.SetOrigin(Items[CursorPos].X+Items[CursorPos].CursorXOffs, Items[CursorPos].Y+Items[CursorPos].CursorYOffs);
}


void SetDefaultChoice () {
  // default cursor position
  CursorPos = 0;
  CursorPrev = 0;

  // force first available item to have focus
  int i;
  for (i = 0; i < Items.Num; ++i) {
    if (Items[i].Focusable && Items[i].Enabled && !MenuChoice_BackButton(Items[i])) {
      CursorPrev = -1;
      CursorPos = i;
      CursorMoved();
      break;
    }
  }
}


int GetChoiceForSaving () {
  return CursorPos;
}


// should be called after menu is fully created, and default choice set
void SetSavedChoice (int idx) {
  if (idx < 0 || idx >= Items.Num || CursorPos == idx) return;
  if (Items[idx].Focusable && Items[idx].Enabled) {
    CursorPrev = -1;
    CursorPos = idx;
    CursorMoved();
  }
}


void CyclePrevChoice () {
  if (Items.Num < 2) return;
  CursorPrev = CursorPos;
  do {
    if (!CursorPos) CursorPos = Items.Num-1; else --CursorPos;
  } while ((!Items[CursorPos].Focusable || !Items[CursorPos].Enabled) && !MenuChoice_BackButton(Items[CursorPos]) && CursorPrev != CursorPos);
  CursorMoved();
}


void CycleNextChoice () {
  if (Items.Num < 2) return;
  CursorPrev = CursorPos;
  do {
    if (CursorPos == Items.Num - 1) CursorPos = 0; else ++CursorPos;
  } while ((!Items[CursorPos].Focusable || !Items[CursorPos].Enabled) && !MenuChoice_BackButton(Items[CursorPos]) && CursorPrev != CursorPos);
  CursorMoved();
}


bool OnKeyDown (int key) {
  switch (key) {
    case K_DOWNARROW:
    case K_MWHEELDOWN:
      if (Items.Num > 1) {
        CycleNextChoice();
        LocalSound('menu/cursor');
      }
      return true;

    case K_UPARROW:
    case K_MWHEELUP:
      if (Items.Num > 1) {
        CyclePrevChoice();
        LocalSound('menu/cursor');
      }
      return true;

    case K_ESCAPE:
    case K_MOUSE2:
      ClGame.PopMenu();
      return true;
  }
  return false;
}


// fade all the screen buffer, so that the menu is more readable,
// especially now that we use the small hudfont in the menus
void OnDraw () {
  ShadeRect(0, 0, 640, 480, GetCvarF('menu_darkening'));
}


defaultproperties {
  X = 160;
  Y = 140;
  Width = 320;
  Height = 200;
  TitleX = 160;
  TitleY = 24;
  Focusable = true;

  ActivateSound = 'menu/activate';
  DeactivateSound = 'menu/backup';
  ClearMenusSound = 'menu/clear';
}
