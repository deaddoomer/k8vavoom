//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class MenuScreenLoadSaveGame : MenuScreen;

bool autosaves;


//==========================================================================
//
//  CreateLoadSaveChoices
//
//==========================================================================
void CreateLoadSaveChoices (class!MenuSaveSlot destClass) {
  foreach (auto i; 0..8) {
    MenuSaveSlot newChoice = destClass(NewChild(destClass));
    newChoice.SetOrigin(ChoicesStartX, ChoicesStartY+i*18);
    newChoice.SlotNum = (autosaves ? -1-i : i);
    newChoice.Status = SV_GetSaveString(newChoice.SlotNum, &newChoice.Text);
  }
}


//==========================================================================
//
//  RefreshLoadSaveChoices
//
//==========================================================================
void RefreshLoadSaveChoices () {
  foreach (auto i; 0..8) {
    if (i >= Items.length) break;
    MenuSaveSlot ss = MenuSaveSlot(Items[i]);
    if (!ss) continue;
    ss.SlotNum = (autosaves ? -1-i : i);
    ss.Status = SV_GetSaveString(ss.SlotNum, &ss.Text);
  }
}


//==========================================================================
//
//  SwitchAutoNormal
//
//  virtual, so children can fix the title accordingly
//
//==========================================================================
void SwitchAutoNormal () {
  autosaves = !autosaves;
  RefreshLoadSaveChoices();
}


//==========================================================================
//
//  OnKeyDown
//
//==========================================================================
override bool OnKeyDown (int key) {
  switch (key) {
    case K_TAB: SwitchAutoNormal(); return true;
  }
  return ::OnKeyDown(key);
}


defaultproperties {
  ChoicesStartX = 80;
  ChoicesStartY = 40;
  SelectorType = MenuSelector_Big;
  Title = "LOAD OR SAVE GAME";
}
