//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuScreenSoundOptions : MenuScreen;

//==========================================================================
//
//  CreateChoices
//
//==========================================================================

override void CreateChoices()
{
  MenuChoiceSlider  Slider;
  MenuChoiceEnum    Enum;
  MenuTextButton    Btn;
  //int         currentY;

  currentY = ChoicesStartY;

  Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
  Enum.SetOrigin(ChoicesStartX, currentY);
  Enum.Text = "External Music";
  Enum.SetInitialValue(GetCvar('snd_external_music'));
  Enum.ValueChanging = &ChangeExternalMusic;
  currentY += Enum.Height;

  Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Enum.SetOrigin(ChoicesStartX, currentY);
  Enum.Text = "MIDI Output Device";
  Enum.AddItem("System MIDI Device");
  Enum.AddItem("Timidity");
  Enum.SetInitialValue(GetCvar('snd_mid_player'));
  Enum.ValueChanging = &ChangeMIDIPlayer;
  currentY += Enum.Height;

  Enum = MenuChoiceEnum(NewChild(MenuChoiceEnum));
  Enum.SetOrigin(ChoicesStartX, currentY);
  Enum.Text = "MOD Music Output Device";
  Enum.AddItem("MikMod");
  Enum.AddItem("MODPlug");
  Enum.SetInitialValue(GetCvar('snd_mod_player'));
  Enum.ValueChanging = &ChangeMODPlayer;
  currentY += Enum.Height;

  Btn = MenuTextButton(NewChild(MenuSmallTextButton));
  Btn.SetOrigin(ChoicesStartX, currentY);
  Btn.Text = "MOD Output Options";
  Btn.Activated = &ActivateMODOptions;
  currentY += Btn.Height + 10;

  Slider = MenuChoiceSlider(NewChild(MenuChoiceSlider));
  Slider.SetOrigin(ChoicesStartX, currentY);
  Slider.Text = "Music volume";
  Slider.ValueDelta = 0.1;
  Slider.SetInitialValue(GetCvarF('snd_music_volume'));
  Slider.ValueChanging = &ChangeMusicVolume;
  currentY += Slider.Height;

  Slider = MenuChoiceSlider(NewChild(MenuChoiceSlider));
  Slider.SetOrigin(ChoicesStartX, currentY);
  Slider.Text = "Sound volume";
  Slider.ValueDelta = 0.1;
  Slider.SetInitialValue(GetCvarF('snd_sfx_volume'));
  Slider.ValueChanging = &ChangeSoundVolume;
  currentY += Slider.Height;

  Slider = MenuChoiceSlider(NewChild(MenuChoiceSlider));
  Slider.SetOrigin(ChoicesStartX, currentY);
  Slider.Text = "Sound Channels";
  Slider.MinValue = 8.0;
  Slider.MaxValue = 256.0;
  Slider.ValueDelta = 8.0;
  Slider.SetInitialValue(itof(GetCvar('snd_channels')));
  Slider.ValueChanging = &ChangeSoundChannels;
  currentY += Slider.Height;

  /* this doesn't work yet
  Enum = MenuChoiceEnum(NewChild(MenuChoice_OnOff));
  Enum.SetOrigin(ChoicesStartX, currentY);
  Enum.Text = "Swap stereo";
  Enum.SetInitialValue(GetCvar('snd_swap_stereo'));
  Enum.ValueChanging = &ChangeSwapStereo;
  */
  CreateFloatSliderCvar("Random sound pitch", 'snd_random_pitch', 0.05, 0, 1);
  CreateFloatSliderCvar("Random pitch boost", 'snd_random_pitch_boost', 0.1, 1, 4);
}

//==========================================================================
//
//  ChangeSoundVolume
//
//==========================================================================

bool ChangeSoundVolume(Object Sender, float newValue)
{
  SetCvarF('snd_sfx_volume', newValue);
  return true;
}

//==========================================================================
//
//  ChangeSwapStereo
//
//==========================================================================

bool ChangeSwapStereo(Object Sender, int newValue)
{
  SetCvar('snd_swap_stereo', newValue);
  return true;
}

//==========================================================================
//
//  ChangeMusicVolume
//
//==========================================================================

bool ChangeMusicVolume(Object Sender, float newValue)
{
  SetCvarF('snd_music_volume', newValue);
  return true;
}

//==========================================================================
//
//  ChangeExternalMusic
//
//==========================================================================

bool ChangeExternalMusic(Object Sender, int newValue)
{
  SetCvar('snd_external_music', newValue);
  return true;
}

//==========================================================================
//
//  ChangeMIDIPlayer
//
//==========================================================================

bool ChangeMIDIPlayer(Object Sender, int newValue)
{
  SetCvar('snd_mid_player', newValue);
  return true;
}

//==========================================================================
//
//  ChangeMODPlayer
//
//==========================================================================

bool ChangeMODPlayer(Object Sender, int newValue)
{
  SetCvar('snd_mod_player', newValue);
  return true;
}

//==========================================================================
//
//  ChangeSoundChannels
//
//==========================================================================

bool ChangeSoundChannels(Object Sender, float newValue)
{
  SetCvar('snd_channels', ftoi(newValue));
  return true;
}

//==========================================================================
//
//  ActivateMODOptions
//
//==========================================================================

void ActivateMODOptions(Object Sender)
{
  ClGame.PushMenuScreen(ClGame.SpawnMenu(MenuScreenMODOptions));
}

defaultproperties
{
  Width = 370;
  ChoicesStartX = 210;
  ChoicesStartY = 37;
  SelectorType = MenuSelector_SmallRight;
  Title = "SOUND SETTINGS";
}
