//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
const float FIREDEMON_ATTACK_RANGE = 512.0;
const int SORCBALL_INITIAL_SPEED   = 7;
const int SORCBALL_TERMINAL_SPEED  = 25;
const int SORCBALL_SPEED_ROTATIONS = 5;
const int SORCFX4_RAPIDFIRE_TIME   = 6*3; // 3 seconds
const float SORCFX4_SPREAD_ANGLE   = 20.0;
const float SORC_DEFENSE_HEIGHT    = 45.0;
const int SORC_DEFENSE_TIME        = 255;
const int BOUNCE_TIME_UNIT         = 35/2;

enum {
  SORC_DECELERATE,
  SORC_ACCELERATE,
  SORC_STOPPING,
  SORC_FIRESPELL,
  SORC_STOPPED,
  SORC_NORMAL,
  SORC_FIRING_SPELL,
};

const int KORAX_FIRST_TELEPORT_TID = 248;
const int KORAX_TELEPORT_TID = 249;

const float KORAX_MISSILE_DELTA_ANGLE = 85.0;
const float KORAX_ARM_EXTENSION_SHORT = 40.0;
const float KORAX_ARM_EXTENSION_LONG = 55.0;

const float KORAX_ARM1_HEIGHT = 108.0;
const float KORAX_ARM2_HEIGHT = 82.0;
const float KORAX_ARM3_HEIGHT = 54.0;
const float KORAX_ARM4_HEIGHT = 104.0;
const float KORAX_ARM5_HEIGHT = 86.0;
const float KORAX_ARM6_HEIGHT = 53.0;

const float KORAX_COMMAND_HEIGHT = 120.0;
const float KORAX_COMMAND_OFFSET = 27.0;

const float KORAX_BOLT_HEIGHT = 48.0;
const int KORAX_BOLT_LIFETIME = 3;


//==========================================================================
//
//  A_SmBounce
//
//==========================================================================
[decorate] final void A_SmBounce () {
  // give some more momentum (x,y,&z)
  Origin.z = FloorZ+1.0;
  Velocity.z = (2.0+Random()*4.0)*35.0;
  Velocity.x = Random()*3.0*35.0;
  Velocity.y = Random()*3.0*35.0;
}


//==========================================================================
//
//  A_IceGuyMissileExplode
//
//==========================================================================
[decorate] final void A_IceGuyMissileExplode () {
  foreach (auto i; 0..8) {
    EntityEx mo = SpawnMissileAngle(IceGuyFX2, float(i)*45.0, -0.3*35.0, 3.0);
    if (mo) mo.Target = Target;
  }
}


//==========================================================================
//
//  A_SerpentHeadCheck
//
//==========================================================================
[decorate] final void A_SerpentHeadCheck () {
  if (Origin.z <= FloorZ) {
    if (GetFloorType()->bLiquid) {
      HitFloorType();
      SetState(none);
    } else {
      SetState(FindState('Death'));
    }
  }
}


//==========================================================================
//
//  A_FloatGib
//
//==========================================================================
[decorate] final void A_FloatGib () {
  FloorClip -= 1.0;
}


//==========================================================================
//
//  A_SinkGib
//
//==========================================================================
[decorate] final void A_SinkGib () {
  FloorClip += 1.0;
}


//==========================================================================
//
//  A_DelayGib
//
//==========================================================================
[decorate] final void A_DelayGib () {
  StateTime -= Random()*2.0;
}


//==========================================================================
//
//  A_WraithFX2
//
//  Spawns sparkle tail of missile.
//
//==========================================================================
[decorate] final void A_WraithFX2 () {
  float angle;
  foreach (auto i; 0..2) {
    EntityEx A = Spawn(WraithFX2, Origin);
    if (A) {
      if (Random() < 0.5) {
        angle = AngleMod360(Angles.yaw+Random()*90.0);
      } else {
        angle = AngleMod360(Angles.yaw-Random()*90.0);
      }
      A.Velocity.z = 0.0;
      A.Velocity.x = (Random()/2.0+1.0)*cos(angle)*35.0;
      A.Velocity.y = (Random()/2.0+1.0)*sin(angle)*35.0;
      A.Target = self;
      A.FloorClip = 10.0;
    }
  }
}


//============================================================================
//
//  A_DragonFX2
//
//============================================================================
[decorate] final void A_DragonFX2 () {
  float delay = 0.5+Random();
  for (int i = 1+(P_Random()&3); i; --i) {
    EntityEx A = Spawn(DragonExplosion, Origin+vector((Random()-0.5)*64.0, (Random()-0.5)*64.0, (Random()-0.5)*16.0));
    if (A) {
      A.StateTime = delay+Random()*0.2*float(i);
      A.Target = Target;
    }
  }
}


//============================================================================
//
//  A_SorcSpinBalls
//
//  Spawn spinning balls above head - actor is sorcerer.
//
//============================================================================
[decorate] final void A_SorcSpinBalls () {
  // to prevent spawning balls more than once
  IdleState = GetStatePlus(IdleState, 2);

  A_SlowBalls();
  Args[0] = 0; // currently no defense
  Args[3] = SORC_NORMAL;
  Args[4] = SORCBALL_INITIAL_SPEED; // initial orbit speed
  Special1f = 1.0;

  TVec org = Origin;
  org.z = Origin.z-FloorClip+Height;

  EntityEx ball = Spawn(SorcBall1, org, default, default/*, false*/);
  if (ball) {
    ball.Target = self;
    ball.Special2 = SORCFX4_RAPIDFIRE_TIME;
  }

  ball = Spawn(SorcBall2, org, default, default/*, false*/);
  if (ball) ball.Target = self;

  ball = Spawn(SorcBall3, org, default, default/*, false*/);
  if (ball) ball.Target = self;
}


//==========================================================================
//
//  A_SorcFX1Seek
//
//  Yellow spell - offense
//
//==========================================================================
[decorate] final void A_SorcFX1Seek () {
  if (Args[4]-- <= 0) {
    if (Args[3]-- <= 0) {
      SetState(FindState('Death'));
      PlaySound('SorcererHeadScream', CHAN_VOICE, 1.0, ATTN_NONE);
    } else {
      Args[4] = BOUNCE_TIME_UNIT;
    }
  }
  SeekerMissile(2.0, 6.0);
}


//==========================================================================
// Blue spell - defense
//==========================================================================
//
// FX2 Variables
//      Special1f       current angle
//      Args[0]     0 = CW,  1 = CCW
//==========================================================================

//==========================================================================
//
//  A_SorcFX2Split
//
//  Split ball in two
//
//==========================================================================
[decorate] final void A_SorcFX2Split () {
  EntityEx A = Spawn(SorcFX2, Origin, default, default/*, false*/);
  if (A) {
    A.Target = Target;
    A.Args[0] = 0;  // CW
    A.Special1f = Angles.yaw; // Set angle
    A.SetState(A.FindState('Orbit'));
  }

  A = Spawn(SorcFX2, Origin, default, default/*, false*/);
  if (A) {
    A.Target = Target;
    A.Args[0] = 1;  // CCW
    A.Special1f = Angles.yaw; // Set angle
    A.SetState(A.FindState('Orbit'));
  }

  SetState(none);
}


//==========================================================================
//
//  A_SorcFX2Orbit
//
//  Orbit FX2 about sorcerer
//
//==========================================================================
[decorate] final void A_SorcFX2Orbit () {
  float angle;
  float x, y, z;
  float dist = Target.Radius;

  if ((Target.Health <= 0) || // sorcerer is dead
      (!Target.Args[0])) // time expired
  {
    SetState(FindState('Death'));
    Target.Args[0] = 0;
    Actor(Target).bReflective = false;
    Actor(Target).bInvulnerable = false;
  }

  if (Args[0] && (Target.Args[0]-- <= 0)) {
    // time expired
    SetState(FindState('Death'));
    Target.Args[0] = 0;
    Actor(Target).bReflective = false;
  }

  // move to new position based on angle
  if (Args[0]) {
    // counter clock-wise
    Special1f = AngleMod360(Special1f+10.0);
    angle = Special1f;
    x = Target.Origin.x+dist*cos(angle);
    y = Target.Origin.y+dist*sin(angle);
    z = Target.Origin.z-Target.FloorClip+SORC_DEFENSE_HEIGHT;
    z += 15.0*cos(angle);
    // Spawn trailer
    Spawn(SorcFX2T1, vector(x, y, z));
  } else {
    // clock wise
    Special1f = AngleMod360(Special1f-10.0);
    angle = Special1f;
    x = Target.Origin.x+dist*cos(angle);
    y = Target.Origin.y+dist*sin(angle);
    z = Target.Origin.z-Target.FloorClip+SORC_DEFENSE_HEIGHT;
    z += 20.0*sin(angle);
    // spawn trailer
    Spawn(SorcFX2T1, vector(x, y, z));
  }

  Origin.x = x;
  Origin.y = y;
  Origin.z = z;
}


//==========================================================================
//
//  A_SorcFX4Check
//
//  FX4 - rapid fire balls
//
//==========================================================================
[decorate] final void A_SorcFX4Check () {
  if (Special2-- <= 0) SetState(FindState('Death'));
}


//==========================================================================
//
//  A_KBoltRaise
//
//==========================================================================
[decorate] final void A_KBoltRaise () {
  // spawn a child upward
  float z = Origin.z+KORAX_BOLT_HEIGHT;
  if (z+KORAX_BOLT_HEIGHT < CeilingZ) {
    EntityEx A = Spawn(KoraxBolt, vector(Origin.x, Origin.y, z));
    if (A) A.Special1 = KORAX_BOLT_LIFETIME;
  } else {
    // maybe cap it off here
  }
}


//==========================================================================
//
//  A_KBolt
//
//==========================================================================
[decorate] final void A_KBolt () {
  // countdown lifetime
  if (Special1-- <= 0) SetState(none);
}


//==========================================================================
//
//  A_KSpiritSeeker
//
//==========================================================================
[decorate] final void A_KSpiritSeeker (float thresh, float turnMax) {
  float delta;

  if (Tracer == none) return;

  int dir = FaceActor(Actor(Tracer), out delta);
  if (delta > thresh) {
    delta /= 2.0;
    if (delta > turnMax) delta = turnMax;
  }
  if (dir) {
    // turn clockwise
    Angles.yaw = AngleMod360(Angles.yaw+delta);
  } else {
    // turn counter clockwise
    Angles.yaw = AngleMod360(Angles.yaw-delta);
  }

  float angle = Angles.yaw;
  Velocity.x = Speed*cos(angle);
  Velocity.y = Speed*sin(angle);

  if (!(XLevel.TicTime&15) ||
      Origin.z > Tracer.Origin.z+Tracer.Height ||
      Origin.z+Height < Tracer.Origin.z)
  {
    float newZ = Tracer.Origin.z+Random()*Tracer.Height;
    float deltaZ = newZ-Origin.z;
    if (fabs(deltaZ) > 15.0) {
      if (deltaZ > 0.0) deltaZ = 15.0; else deltaZ = -15.0;
    }
    if (Speed) {
      float dist = DistTo2(Tracer);
      dist = dist/Speed;
      Velocity.z = deltaZ/dist;
      if (dist < 1.0 || !dist.isfinite) Velocity.z = 0;
    } else {
      Velocity.z = 0;
    }
  }
}


//==========================================================================
//
//  A_KSpiritWeave
//
//==========================================================================
[decorate] final void A_KSpiritWeave () {
  float angle = AngleMod360(Angles.yaw+90.0);
  int WeaveXY = (Special2>>16)&63;
  int WeaveZ = (Special2&0xffff)&63;
  float newX = Origin.x-cos(angle)*Level.Game.FloatBobOffsets[WeaveXY]*4.0;
  float newY = Origin.y-sin(angle)*Level.Game.FloatBobOffsets[WeaveXY]*4.0;

  WeaveXY = (WeaveXY+(P_Random()%5))&63;
  newX += cos(angle)*Level.Game.FloatBobOffsets[WeaveXY]*4.0;
  newY += sin(angle)*Level.Game.FloatBobOffsets[WeaveXY]*4.0;
  TryMove(vector(newX, newY, Origin.z), AllowDropOff:false);
  float savedz = Origin.z;
  Origin.z -= Level.Game.FloatBobOffsets[WeaveZ]*2.0;
  // check to make sure there's nothing in the way of the float
  if (!TestMobjZ()) Origin.z = savedz;

  WeaveZ = (WeaveZ+(P_Random()%5))&63;
  savedz = Origin.z;
  // check to make sure there's nothing in the way of the float
  if (TestMobjZ()) Origin.z += Level.Game.FloatBobOffsets[WeaveZ]*2.0;

  Special2 = (WeaveXY<<16)|(WeaveZ&0xffff);
}


//==========================================================================
//
//  A_KSpiritRoam
//
//==========================================================================
[decorate] final void A_KSpiritRoam () {
  if (Special1-- <= 0) {
    PlaySound('SpiritDie', CHAN_VOICE);
    SetState(FindState('Death'));
  } else {
    if (Tracer) A_KSpiritSeeker(10.0, 20.0);
    A_KSpiritWeave();
    if (Random() < 0.1953125) PlaySound('SpiritActive', CHAN_VOICE, 1.0, ATTN_NONE);
  }
}


//==========================================================================
//
//  A_CFlameRotate
//
//==========================================================================
[decorate] final void A_CFlameRotate () {
  float an = AngleMod360(Angles.yaw+90.0);
  Velocity.x = Special1f+2.0*35.0*cos(an);
  Velocity.y = Special2f+2.0*35.0*sin(an);
  Angles.yaw = AngleMod360(Angles.yaw+90.0/15.0);
}


//============================================================================
//
//  CHolyTailFollow
//
//============================================================================
final void CHolyTailFollow (float dist) {
  EntityEx child = Tracer;
  if (child) {
    float an = atan2(child.Origin.y-Origin.y, Origin.x-child.Origin.x);
    float oldDistance = DistTo(child);
    if (child.TryMove(vector(Origin.x+dist*cos(an), Origin.y+dist*sin(an), child.Origin.z), AllowDropOff:false)) {
      float newDistance = DistTo2(child)-1.0;
      if (oldDistance < 1.0) {
        if (child.Origin.z < Origin.z) {
          child.Origin.z = Origin.z-dist;
        } else {
          child.Origin.z = Origin.z+dist;
        }
      } else {
        child.Origin.z = Origin.z+newDistance/oldDistance*(child.Origin.z-Origin.z);
      }
    }
    Actor(child).CHolyTailFollow(dist-1.0);
  }
}


//============================================================================
//
//  CHolyTailRemove
//
//============================================================================
final void CHolyTailRemove () {
  if (Tracer) Actor(Tracer).CHolyTailRemove();
  Destroy();
}


//============================================================================
//
//  A_CHolyTail
//
//============================================================================
[decorate] final void A_CHolyTail () {
  EntityEx parent = Target;
  if (parent) {
    if (!parent.bMissile) {
      // ghost removed, so remove all tail parts
      CHolyTailRemove();
      return;
    } else if (TryMove(vector(
                         parent.Origin.x-14.0*cos(parent.Angles.yaw),
                         parent.Origin.y-14.0*sin(parent.Angles.yaw), Origin.z), AllowDropOff:false))
    {
      Origin.z = parent.Origin.z-5.0;
    }
    CHolyTailFollow(10.0);
  }
}


//===========================================================================
//
// Bat Spawner Variables
//  Special1    frequency counter
//  Args[0]     frequency of spawn (1=fastest, 10=slowest)
//  Args[1]     spread angle (0..255)
//  Args[2]
//  Args[3]     duration of bats (in octics)
//  Args[4]     turn amount per move (in degrees)
//
// Bat Variables
//  Special2  - lifetime counter
//  Args[4]   - turn amount per move (in degrees)
//
//===========================================================================

//===========================================================================
//
//  A_BatSpawnInit
//
//===========================================================================
[decorate] final void A_BatSpawnInit () {
  Special1 = 0; // frequency count
}


//===========================================================================
//
//  A_BatSpawn
//
//===========================================================================
[decorate] final void A_BatSpawn () {
  // countdown until next spawn
  if (Special1-- > 0) return;
  Special1 = Args[0]; // reset frequency count

  float delta = float(Args[1]);
  if (delta == 0.0) delta = 1.0;
  float angle = AngleMod360(Angles.yaw+delta*(Random()-0.5)*360.0/256.0);
  EntityEx mo = SpawnMissileAngle(Bat, angle, 0.0);
  if (mo) {
    mo.Args[0] = P_Random()&63; // floatbob index
    mo.Args[4] = Args[4]; // turn degrees
    mo.Special2 = Args[3]<<3; // set lifetime
    mo.Target = self;
  }
}


//===========================================================================
//
//  A_BatMove
//
//===========================================================================
[decorate] final void A_BatMove () {
  float newangle;

  if (Special2 < 0) SetState(FindState('Death'));
  Special2 -= 2; // called every 2 tics

  if (Random() < 0.5) {
    newangle = AngleMod360(Angles.yaw+float(Args[4]));
  } else {
    newangle = AngleMod360(Angles.yaw-float(Args[4]));
  }

  // adjust momentum vector to new direction
  float newSpeed = Speed*Random()*4.0;
  Velocity.x = newSpeed*cos(newangle);
  Velocity.y = newSpeed*sin(newangle);

  if (Random() < 0.05859375) PlaySound('BatScream', CHAN_VOICE);

  // handle Z movement
  float savedz = Origin.z;
  Origin.z = Target.Origin.z+2.0*Level.Game.FloatBobOffsets[Args[0]&63];
  if (!TestMobjZ()) Origin.z = savedz;
  Args[0] = (Args[0]+3)&63;
}


//==========================================================================
//
//  A_TimeBomb
//
//==========================================================================
[decorate] final void A_TimeBomb () {
  // time bombs
  Origin.z += 32.0;
  //RenderStyle = STYLE_Normal;
  RenderStyle = STYLE_Add;
  Alpha = 1.0;
  A_Explode();
}


//===========================================================================
//
//  A_CheckThrowBomb
//
//===========================================================================
[decorate] final void A_CheckThrowBomb () {
  if (!--Health) SetState(FindState('Death'));
}


//===========================================================================
//
//  A_CheckThrowBomb2
//
//===========================================================================
[decorate] final void A_CheckThrowBomb2 () {
  if (fabs(Velocity.x) < 1.5*35.0 &&
      fabs(Velocity.y) < 1.5*35.0 &&
      Velocity.z < 2.0*35.0)
  {
    SetState(GetStatePlus(IdleState, 6, IgnoreJump:true));
    Origin.z = FloorZ;
    Velocity.z = 0.0;
    BounceType = BOUNCE_None;
    bMissile = false;
  }
  A_CheckThrowBomb();
}


//==========================================================================
//
// Fog Variables:
//
//      Special1    Counter for spawn frequency
//      Special2    Index into floatbob table
//      args[0]     Speed (0..10) of fog
//      args[1]     Angle of spread (0..128)
//      args[2]     Frequency of spawn (1..10)
//      args[3]     Lifetime countdown
//      args[4]     Boolean: fog moving?
//
//==========================================================================

//==========================================================================
//
//  A_FogSpawn
//
//==========================================================================
[decorate] final void A_FogSpawn () {
  EntityEx A;

  if (Special1-- > 0) return;

  Special1 = Args[2]; // reset frequency count

  switch (P_Random()%3) {
    case 0: A = Spawn(FogPatchSmall, Origin); break;
    case 1: A = Spawn(FogPatchMedium, Origin); break;
    case 2: A = Spawn(FogPatchLarge, Origin); break;
  }

  if (A) {
    float delta = float(Args[1]);
    if (delta == 0.0) delta = 1.0;
    A.Angles.yaw = AngleMod360(Angles.yaw+((Random()*delta)-(delta*0.5))*360.0/256.0);
    A.Target = self;
    if (Args[0] < 1) Args[0] = 1;
    A.Args[0] = (P_Random()%(Args[0]))+1; // P_Random speed
    A.Args[3] = Args[3];  // Set lifetime
    A.Args[4] = 1;  // Set to moving
    A.Special2 = P_Random()&63;
  }
}


//==========================================================================
//
//  A_FogMove
//
//==========================================================================
[decorate] final void A_FogMove () {
  if (!Args[4]) return;

  if (Args[3]-- <= 0) {
    SetState(FindState('Death'));
    return;
  }

  if ((Args[3]%4) == 0) {
    float savedz = Origin.z;
    Origin.z += Level.Game.FloatBobOffsets[Special2&63]/2.0;
    if (!TestMobjZ()) Origin.z = savedz;
    Special2 = (Special2+1)&63;
  }

  float mvspeed = float(Args[0]);
  float angle = Angles.yaw;
  Velocity.x = mvspeed*cos(angle)*35.0;
  Velocity.y = mvspeed*sin(angle)*35.0;
}


//==========================================================================
//
//  A_PotteryChooseBit
//
//==========================================================================
[decorate] final void A_PotteryChooseBit () {
  Special1 = 1+2*(P_Random()%5);
  SetState(GetStatePlus(FindState('Death'), Special1, IgnoreJump:true));
  StateTime = 8.0+Random()*16.0;
}


//==========================================================================
//
//  A_PotteryCheck
//
//==========================================================================
[decorate] final void A_PotteryCheck () {
  foreach (auto i; 0..MAXPLAYERS) {
    if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned) continue;
    Actor pmo = Actor(Level.Game.Players[i].MO);
    if (CanSee(pmo) && (fabs(AngleMod180(atan2(Origin.y-pmo.Origin.y, Origin.x-pmo.Origin.x)-pmo.Angles.yaw)) <= 45.0)) {
      // previous state (pottery bit waiting state)
      SetState(GetStatePlus(FindState('Death'), Special1, IgnoreJump:true));
      return;
    }
  }
}


//============================================================================
//
//  A_CorpseExplode
//
//============================================================================
[decorate] final void A_CorpseExplode () {
  EntityEx A;
  for (int i = (P_Random()&3)+3; i; --i) {
    A = Spawn(CorpseBit, Origin);
    if (A) A.SetState(GetStatePlus(A.IdleState, P_Random()%3, IgnoreJump:true));
    if (A) {
      A.Velocity.x = (Random()-Random())*4.0*35.0;
      A.Velocity.y = (Random()-Random())*4.0*35.0;
      A.Velocity.z = (Random()*8.0+5.0)*(3.0/4.0)*35.0;
    }
  }
  // spawn a skull
  A = Spawn(CorpseBit, Origin);
  if (A) A.SetState(GetStatePlus(A.IdleState, 3, IgnoreJump:true));
  if (A) {
    A.Velocity.x = (Random()-Random())*4.0*35.0;
    A.Velocity.y = (Random()-Random())*4.0*35.0;
    A.Velocity.z = (Random()*8.0+5.0)*(3.0/4.0)*35.0;
    A.PlaySound('FireDemonDeath', CHAN_VOICE);
  }
  Destroy();
}


//==========================================================================
//
//  A_LeafSpawn
//
//==========================================================================
[decorate] final void A_LeafSpawn () {
  for (int i = (P_Random()&3)+1; i; --i) {
    EntityEx A = Spawn((P_Random()&1 ? class!Actor(Leaf2) : class!Actor(Leaf1)),
                       Origin+vector((Random()-Random())*64.0, (Random()-Random())*64.0, Random()*64.0));
    if (A) {
      A.Thrust(Angles.yaw, Random()*2.0+3.0);
      A.Target = self;
    }
  }
}


//==========================================================================
//
//  A_LeafThrust
//
//==========================================================================
[decorate] final void A_LeafThrust () {
  if (Random() > 0.375) return;
  Velocity.z += (Random()*2.0+1.0)*35.0;
}


//==========================================================================
//
//  A_LeafCheck
//
//==========================================================================
[decorate] final void A_LeafCheck () {
  ++Special1;
  if (Special1 >= 20) {
    SetState(none);
    return;
  }
  if (Random() > 0.25) {
    if (!Velocity.x && !Velocity.y) {
      if (!Target) {
        printwarn("A_LeafCheck: %C has no Target set! (the thing that should not be, still)", self);
      } else {
        Thrust(Target.Angles.yaw, Random()*2.0+1.0);
      }
    }
  } else {
    SetState(GetStatePlus(IdleState, 7));
    Velocity.z = (Random()*2.0+1.0)*35.0;
    if (!Target) {
      printwarn("A_LeafCheck: %C has no Target set! (the thing that should not be, upwind)", self);
    } else {
      Thrust(Target.Angles.yaw, Random()*2.0+2.0);
    }
    bMissile = true;
  }
}


//===========================================================================
//
//  A_SoAExplode
//
//  Suit of Armor Explode
//
//===========================================================================
[decorate] final void A_SoAExplode () {
  EntityEx A;

  foreach (auto i; 0..10) {
    A = Spawn(ZArmorChunk, Origin+vector((Random()-0.5)*16.0, (Random()-0.5)*16.0, Random()*Height));
    A.SetState(GetStatePlus(A.IdleState, i, IgnoreJump:true));
    if (A) {
      A.Velocity.x = (Random()-Random())*4.0*35.0;
      A.Velocity.y = (Random()-Random())*4.0*35.0;
      A.Velocity.z = (Random()*8.0+5.0)*35.0;
    }
  }

  if (Args[0]) {
    // spawn an item; don't spawn monsters it they are disabled
    class!EntityEx Cls = class!EntityEx(FindClassFromScriptId(Args[0], LineSpecialGameInfo(Level.Game).GameFilterFlag));
    if (Cls && (!Level.Game.nomonsters || !Cls.default.bMonster)) Spawn(Cls, Origin, vector(0.0, 0.0, 0.0));
  }

  if (A) A.PlaySound('SuitofArmorBreak', CHAN_VOICE);
  Destroy();
}


//
// Fire Demon AI
//

//  Special1  Index into floatbob
//  Special2  Whether strafing or not

//============================================================================
//
//  A_FiredSpawnRock
//
//============================================================================
[decorate] final void A_FiredSpawnRock () {
  EntityEx mo;
  TVec rockOrg;
  class!Actor rtype;

  switch (P_Random()%5) {
    case 0: rtype = FireDemonRock1; break;
    case 1: rtype = FireDemonRock2; break;
    case 2: rtype = FireDemonRock3; break;
    case 3: rtype = FireDemonRock4; break;
    case 4: rtype = FireDemonRock5; break;
  }

  rockOrg.x = Origin.x+(Random()-0.5)*16.0;
  rockOrg.y = Origin.y+(Random()-0.5)*16.0;
  rockOrg.z = Origin.z+Random()*8.0;
  mo = Spawn(rtype, rockOrg);
  if (mo) {
    mo.Target = self;
    mo.CopyTranslations(self);
    mo.Velocity.x = (Random()-0.5)*4.0*35.0;
    mo.Velocity.y = (Random()-0.5)*4.0*35.0;
    mo.Velocity.z = Random()*4.0*35.0;
    mo.Special1 = 2; // number of bounces
  }

  // initialise fire demon
  Special2 = 0;
  bJustAttacked = false;
}


//============================================================================
//
//  A_FiredRocks
//
//============================================================================
[decorate] final void A_FiredRocks () {
  A_FiredSpawnRock();
  A_FiredSpawnRock();
  A_FiredSpawnRock();
  A_FiredSpawnRock();
  A_FiredSpawnRock();
}


//============================================================================
//
//  A_FiredChase
//
//============================================================================
[decorate] final void A_FiredChase () {
  if (ReactionCount) --ReactionCount;
  if (Threshold) --Threshold;

  // float up and down
  float savedz = Origin.z;
  Origin.z += Level.Game.FloatBobOffsets[Special1&63];
  if (!TestMobjZ()) Origin.z = savedz;
  Special1 = (Special1+2)&63;

  // ensure it stays above certain height
  if (Origin.z < FloorZ+64.0) {
    savedz = Origin.z;
    Origin.z += 2.0;
    if (!TestMobjZ()) Origin.z = savedz;
  }

  if (!Target || !Target.bShootable) {
    // invalid enemy
    LookForPlayers(360);
    return;
  }

  // strafe
  if (Special2 > 0) {
    --Special2;
  } else {
    Special2 = 0;
    Velocity.x = 0.0;
    Velocity.y = 0.0;
    float dist = DistTo(Target);
    if (dist < FIREDEMON_ATTACK_RANGE)
    {
      if (P_Random() < 30)
      {
        float ang = atan2(Target.Origin.y-Origin.y, Target.Origin.x-Origin.x);
        if (P_Random() < 128) ang = AngleMod360(ang+90.0); else ang = AngleMod360(ang-90.0);
        Velocity.x = 8.0*cos(ang)*35.0;
        Velocity.y = 8.0*sin(ang)*35.0;
        Special2 = 3; // strafe time
      }
    }
  }

  FaceMovementDirection();

  // normal movement
  if (!Special2) {
    if (--MoveCount < 0 || !StepMove()) NewChaseDir();
  }

  // do missile attack
  if (!bJustAttacked) {
    if (CheckMissileRange() && (P_Random() < 20)) {
      SetState(MissileState);
      bJustAttacked = true;
      return;
    }
  } else {
    bJustAttacked = false;
  }

  // make active sound
  if (ActiveSound && P_Random() < 3) PlaySound(ActiveSound, CHAN_VOICE);
}


//============================================================================
//
//  A_FiredAttack
//
//============================================================================
[decorate] final void A_FiredAttack () {
  EntityEx mo = SpawnMissile(Target, FireDemonMissile);
  if (mo) PlaySound('FireDemonAttack', CHAN_WEAPON);
}


//============================================================================
//
//  A_FiredSplotch
//
//============================================================================
[decorate] final void A_FiredSplotch () {
  EntityEx A = Spawn(FireDemonSplotch1, Origin);
  if (A) {
    A.CopyTranslations(self);
    A.Velocity.x = (Random()-0.5)*8.0*35.0;
    A.Velocity.y = (Random()-0.5)*8.0*35.0;
    A.Velocity.z = (3.0+Random()*4.0)*35.0;
  }

  A = Spawn(FireDemonSplotch2, Origin);
  if (A) {
    A.CopyTranslations(self);
    A.Velocity.x = (Random()-0.5)*8.0*35.0;
    A.Velocity.y = (Random()-0.5)*8.0*35.0;
    A.Velocity.z = (3.0+Random()*4.0)*35.0;
  }
}


//==========================================================================
//
//  A_IceGuyLook
//
//==========================================================================
[decorate] final void A_IceGuyLook () {
  class!Actor tp;
  A_Look();
  if (Random() < 0.25) {
    float dist = Radius*(Random()*2.0-1.0);
    float an = AngleMod360(Angles.yaw+90.0);
    if (Random() < 0.5) tp = IceGuyWisp2; else tp = IceGuyWisp1;
    Spawn(tp, Origin+vector(dist*cos(an), dist*sin(an), 60.0));
  }
}


//==========================================================================
//
//  A_IceGuyChase
//
//==========================================================================
[decorate] final void A_IceGuyChase () {
  class!Actor tp;
  A_Chase();
  if (Random() < 0.5) {
    float dist = Radius*(Random()*2.0-1.0);
    float an = AngleMod360(Angles.yaw+90.0);
    if (Random() < 0.5) tp = IceGuyWisp2; else tp = IceGuyWisp1;
    EntityEx A = Spawn(tp, Origin+vector(dist*cos(an), dist*sin(an), 60.0));
    if (A) {
      A.Velocity = Velocity;
      A.Target = self;
    }
  }
}


//==========================================================================
//
//  A_IceGuyAttack
//
//==========================================================================
[decorate] final void A_IceGuyAttack () {
  if (!Target) return;

  float an = AngleMod360(Angles.yaw+90.0);
  SpawnMissileXYZ(Origin+vector(Radius/2.0*cos(an), Radius/2.0*sin(an), 40.0), Target, IceGuyFX);

  an = AngleMod360(Angles.yaw-90.0);
  SpawnMissileXYZ(Origin+vector(Radius/2.0*cos(an), Radius/2.0*sin(an), 40.0), Target, IceGuyFX);

  PlaySound(AttackSound, CHAN_WEAPON);
}


//  Special1  Number of blurs/missiles to spawn
//  Special2  Index into floatbob

//==========================================================================
//
//  A_BishopChase
//
//==========================================================================
[decorate] final void A_BishopChase () {
  float savedz = Origin.z;

  Origin.z -= Level.Game.FloatBobOffsets[Special2&63]/2.0;
  if (!TestMobjZ()) Origin.z = savedz;
  Special2 = (Special2+4)&63;
  savedz = Origin.z;
  Origin.z += Level.Game.FloatBobOffsets[Special2&63]/2.0;
  if (!TestMobjZ()) Origin.z = savedz;
}


//==========================================================================
//
//  A_BishopDecide
//
//==========================================================================
[decorate] final void A_BishopDecide () {
  if (P_Random() < 220) return;
  SetState(FindState('Blur'));
}


//==========================================================================
//
//  A_BishopDoBlur
//
//==========================================================================
[decorate] final void A_BishopDoBlur () {
  Special1 = (P_Random()&3)+3; // P_Random number of blurs
       if (P_Random() < 120) Thrust(AngleMod360(Angles.yaw+90.0), 11.0);
  else if (P_Random() > 125) Thrust(AngleMod360(Angles.yaw-90.0), 11.0);
  else Thrust(Angles.yaw, 11.0); // thrust forward
  PlaySound('BishopBlur', CHAN_VOICE);
}


//==========================================================================
//
//  A_BishopSpawnBlur
//
//==========================================================================
[decorate] final void A_BishopSpawnBlur () {
  if (!--Special1) {
    Velocity.x = 0.0;
    Velocity.y = 0.0;
    if (P_Random() > 96 || (GetCvar('alternate_monster_attacks') && !CanSee(Target, disableBetterSight:true))) {
      SetState(SeeState);
    } else {
      SetState(MissileState);
    }
  }

  EntityEx blur = Spawn(BishopBlur, Origin);
  if (blur) {
    blur.CopyTranslations(self);
    blur.Angles = Angles;
  }
}


//==========================================================================
//
//  A_BishopAttack
//
//==========================================================================
[decorate] final void A_BishopAttack () {
  if (!Target) return;
  PlaySound(AttackSound, CHAN_WEAPON);
  if (CheckMeleeRange()) {
    Target.Damage(self, self, HITDICE(4), DmgType:'Melee', spawnBlood:true);
    return;
  }
  Special1 = (P_Random()&3)+5;
}


//==========================================================================
//
//  A_BishopAttack2
//
//  Spawns one of a string of bishop missiles
//
//==========================================================================
[decorate] final void A_BishopAttack2 () {
  if (!Target || !Special1) {
    Special1 = 0;
    SetState(SeeState);
    return;
  }

  EntityEx mo = SpawnMissile(Target, BishopFX);
  if (mo) {
    mo.Tracer = Target;
    mo.Special2 = 16;
  }

  --Special1;
}


//==========================================================================
//
//  A_BishopPainBlur
//
//==========================================================================
[decorate] final void A_BishopPainBlur () {
  if (P_Random() < 64) {
    SetState(FindState('Blur'));
    return;
  }

  EntityEx blur = Spawn(BishopPainBlur,
                        Origin+vector((Random()-Random())*16.0,
                        (Random()-Random())*16.0, (Random()-Random())*8.0));
  if (blur) {
    blur.CopyTranslations(self);
    blur.Angles = Angles;
  }
}


//==========================================================================
//
//  A_SerpentHumpDecide
//
//  Decided whether to hump up or to missile attack
//
//==========================================================================
[decorate] final void A_SerpentHumpDecide () {
  if (MissileState) {
    if (P_Random() > 30) return;
    if (P_Random() < 40) {
      // missile attack
      SetState(MeleeState);
      return;
    }
    if (!CheckMeleeRange()) {
      // the hump shouldn't occur when within melee range
      if (P_Random() < 128) {
        SetState(MeleeState);
      } else {
        SetState(FindState('Hump'));
        PlaySound('SerpentActive', CHAN_VOICE);
      }
    }
  } else {
    if (P_Random() > 3) return;
    if (!CheckMeleeRange()) {
      // the hump shouldn't occur when within melee range
      SetState(FindState('Hump'));
      PlaySound('SerpentActive', CHAN_VOICE);
    }
  }
}


//==========================================================================
//
//  A_SerpentUnHide
//
//==========================================================================
[decorate] final void A_SerpentUnHide () {
  bInvisible = false;
  FloorClip = 24.0;
}


//==========================================================================
//
//  A_SerpentRaiseHump
//
//  Raises the hump above the surface by raising the FloorClip level
//
//==========================================================================
[decorate] final void A_SerpentRaiseHump () {
  FloorClip -= 4.0;
}


//==========================================================================
//
//  A_SerpentLowerHump
//
//==========================================================================
[decorate] final void A_SerpentLowerHump () {
  FloorClip += 4.0;
}


//==========================================================================
//
//  A_SerpentHide
//
//==========================================================================
[decorate] final void A_SerpentHide () {
  bInvisible = true;
  FloorClip = 0.0;
}


//==========================================================================
//
//  A_SerpentCheckForAttack
//
//==========================================================================
[decorate] final void A_SerpentCheckForAttack () {
  if (!Target) return;
  if (MissileState && !CheckMeleeRange()) {
    SetState(FindState('Attack'));
    return;
  }
  if (CheckMeleeRange2()) {
    SetState(FindState('Walk'));
  } else if (CheckMeleeRange()) {
    if (P_Random() < 32) {
      SetState(FindState('Walk'));
    } else {
      SetState(FindState('Attack'));
    }
  }
}


//==========================================================================
//
//  A_SerpentChooseAttack
//
//==========================================================================
[decorate] final void A_SerpentChooseAttack () {
  if (MissileState) {
    if (!Target || (GetCvar('alternate_monster_attacks') && !CanSee(Target, disableBetterSight:true)) || CheckMeleeRange()) return;
    SetState(MissileState);
  }
}


//==========================================================================
//
//  A_SerpentMeleeAttack
//
//==========================================================================
[decorate] final void A_SerpentMeleeAttack () {
  if (!Target) return;
  if (CheckMeleeRange()) {
    Target.Damage(self, self, HITDICE(5), DmgType:'Melee', spawnBlood:true);
    PlaySound('SerpentMeleeHit', CHAN_WEAPON);
  }
  if (P_Random() < 96) A_SerpentCheckForAttack();
}


//==========================================================================
//
//  A_SerpentSpawnGibs
//
//==========================================================================
[decorate] final void A_SerpentSpawnGibs () {
  EntityEx A = Spawn(SerpentGib1, vector(Origin.x+(Random()-0.5)*16.0, Origin.y+(Random()-0.5)*16.0, FloorZ+1.0));
  if (A) {
    A.Velocity.x = (Random()-0.5)/4.0*35.0;
    A.Velocity.y = (Random()-0.5)/4.0*35.0;
    A.FloorClip = 6.0;
    A.CopyTranslations(self);
  }

  A = Spawn(SerpentGib2, vector(Origin.x+(Random()-0.5)*16.0, Origin.y+(Random()-0.5)*16.0, FloorZ+1.0));
  if (A) {
    A.Velocity.x = (Random()-0.5)/4.0*35.0;
    A.Velocity.y = (Random()-0.5)/4.0*35.0;
    A.FloorClip = 6.0;
    A.CopyTranslations(self);
  }

  A = Spawn(SerpentGib3, vector(Origin.x+(Random()-0.5)*16.0, Origin.y+(Random()-0.5)*16.0, FloorZ+1.0));
  if (A) {
    A.Velocity.x = (Random()-0.5)/4.0*35.0;
    A.Velocity.y = (Random()-0.5)/4.0*35.0;
    A.FloorClip = 6.0;
    A.CopyTranslations(self);
  }
}


//
// Wraith Variables
//

//  Special1  Internal index into floatbob

//==========================================================================
//
//  A_WraithInit
//
//==========================================================================
[decorate] final void A_WraithInit () {
  Origin.z += 48.0;
  Special1 = 0; // index into floatbob
}


//==========================================================================
//
//  A_WraithFX3
//
//  Spawn an FX3 around the actor during attacks.
//
//==========================================================================
[decorate] final void A_WraithFX3 () {
  int numdropped = P_Random()%15;
  foreach (auto i; 0..numdropped) {
    EntityEx A = Spawn(WraithFX3, Origin);
    if (A) {
      A.Origin.x += (Random()-0.5)*8.0;
      A.Origin.y += (Random()-0.5)*8.0;
      A.Origin.z += Random()*4.0;
      A.Target = self;
    }
  }
}


//==========================================================================
//
//  A_WraithFX4
//
//  Spawn an FX4 during movement.
//
//==========================================================================
[decorate] final void A_WraithFX4 () {
  int chance = P_Random();
  int spawn4, spawn5;

       if (chance < 10) { spawn4 = true; spawn5 = false; }
  else if (chance < 20) { spawn4 = false; spawn5 = true; }
  else if (chance < 25) { spawn4 = true; spawn5 = true; }
  else { spawn4 = false; spawn5 = false; }

  if (spawn4) {
    EntityEx mo = Spawn(WraithFX4, Origin);
    if (mo) {
      mo.Origin.x += (Random()-0.5)*16.0;
      mo.Origin.y += (Random()-0.5)*16.0;
      mo.Origin.z += Random()*4.0;
      mo.Target = self;
    }
  }

  if (spawn5) {
    EntityEx mo = Spawn(WraithFX5, Origin);
    if (mo) {
      mo.Origin.x += (Random()-0.5)*8.0;
      mo.Origin.y += (Random()-0.5)*8.0;
      mo.Origin.z += Random()*4.0;
      mo.Target = self;
    }
  }
}


//==========================================================================
//
//  A_WraithChase
//
//==========================================================================
[decorate] final void A_WraithChase () {
  float savedz = Origin.z;
  Origin.z += Level.Game.FloatBobOffsets[Special1&63];
  if (!TestMobjZ()) Origin.z = savedz;
  Special1 = (Special1+2)&63;
  //if (actor->FloorClip > 0) { SetState(S_WRAITH_RAISE2); return; }
  A_Chase();
  A_WraithFX4();
}


//==========================================================================
//
//  A_WraithMelee
//
//==========================================================================
[decorate] final void A_WraithMelee () {
  // steal health from enemy and give to player
  if (CheckMeleeRange() && P_Random() < 220) {
    int amount = HITDICE(2);
    Target.Damage(self, self, amount, DmgType:'Melee', spawnBlood:true);
    Health += amount;
  }
}


//==========================================================================
//
//  A_WraithRaiseInit
//
//==========================================================================
[decorate] final void A_WraithRaiseInit () {
  bInvisible = false;
  bDontBlast = false;
  bNonShootable = false;
  bShootable = true;
  bSolid = true;
  FloorClip = Height;
}


//============================================================================
//
//  RaiseFromFloor
//
//  Raise incrementally from the floor
//
//============================================================================
final bool RaiseFromFloor () {
  bool done = true;
  // raise a mobj from the ground
  if (FloorClip > 0.0) {
    FloorClip -= 2.0;
    if (FloorClip <= 0.0) {
      FloorClip = 0.0;
      done = true;
    } else {
      done = false;
    }
  }
  return done; // reached target height
}


//==========================================================================
//
//  A_WraithRaise
//
//==========================================================================
[decorate] final void A_WraithRaise () {
  if (RaiseFromFloor()) {
    // reached it's target height
    bNoMorph = false;
    SetState(FindState('Chase'));
    PainChance = Wraith.default.PainChance;
  }
  SpawnDirt(Radius);
}


//==========================================================================
//
//  A_DragonInitFlight
//
//==========================================================================
[decorate] final void A_DragonInitFlight () {
  Tracer = none;
  do {
    // find the first tid identical to the dragon's tid
    Tracer = Actor(Level.FindMobjFromTID(TID, Tracer));
    if (!Tracer) {
      SetState(IdleState);
      return;
    }
  } while (Tracer == self);
  SetTID(0);
}


//==========================================================================
//
//  DragonSeek
//
//==========================================================================
final void DragonSeek (float thresh, float turnMax) {
  int dir;
  float dist;
  float delta;
  EntityEx tempTarget;
  int bestArg;
  float bestAngle;
  float angleToSpot, angleToTarget;
  Actor A;
  EntityEx oldTarget;

  tempTarget = Tracer;
  if (!tempTarget) return;

  dir = FaceActor(Actor(tempTarget), delta);
  if (delta > thresh) {
    delta /= 2.0;
    if (delta > turnMax) delta = turnMax;
  }
  if (dir) {
    // turn clockwise
    Angles.yaw = AngleMod360(Angles.yaw+delta);
  } else {
    // turn counter clockwise
    Angles.yaw = AngleMod360(Angles.yaw-delta);
  }
  Velocity.x = Speed*cos(Angles.yaw);
  Velocity.y = Speed*sin(Angles.yaw);
  if (Origin.z+Height < tempTarget.Origin.z || tempTarget.Origin.z+tempTarget.Height < Origin.z) {
    if (Speed) {
      dist = DistTo2(tempTarget);
      dist = dist/Speed;
      Velocity.z = (tempTarget.Origin.z-Origin.z)/dist;
      if (dist < 1.0 || !dist.isfinite) Velocity.z = 0;
    } else {
      Velocity.z = 0;
    }
  } else {
    dist = DistTo2(tempTarget);
    dist = dist/Speed;
    if (dist < 1.0 || !dist.isfinite) dist = 1.0;
  }
  if (tempTarget.bShootable && P_Random() < 64) {
    // attack the destination mobj if it's attackable
    if (fabs(AngleMod180(Angles.yaw-atan2(tempTarget.Origin.y-Origin.y, tempTarget.Origin.x-Origin.x))) < 45.0/2.0) {
      oldTarget = Target;
      Target = tempTarget;
      if (CheckMeleeRange()) {
        Target.Damage(self, self, HITDICE(10), DmgType:'Melee', spawnBlood:true);
        PlaySound('DragonAttack', CHAN_WEAPON);
      } else if (P_Random() < 128 && CheckMissileRange()) {
        SpawnMissile(tempTarget, DragonFireball);
        PlaySound('DragonAttack', CHAN_WEAPON);
      }
      Target = oldTarget;
    }
  }
  if (dist*35.0 < 4.0) {
    // hit the target thing
    if (Target && P_Random() < 200) {
      bestArg = -1;
      bestAngle = 360.0;
      angleToTarget = atan2(Target.Origin.y-Origin.y, Target.Origin.x-Origin.x);
      foreach (auto i; 0..5) {
        if (!tempTarget.Args[i]) continue;
        A = Actor(Level.FindMobjFromTID(tempTarget.Args[i], none));
        angleToSpot = atan2(A.Origin.y-Origin.y, A.Origin.x-Origin.x);
        delta = fabs(AngleMod180(angleToSpot-angleToTarget));
        if (delta < bestAngle) {
          bestAngle = delta;
          bestArg = i;
        }
      }
      if (bestArg != -1) Tracer = Actor(Level.FindMobjFromTID(tempTarget.Args[bestArg], none));
    } else {
      int i;
      do {
        i = (P_Random()>>2)%5;
      } while (!tempTarget.Args[i]);
      Tracer = Actor(Level.FindMobjFromTID(tempTarget.Args[i], none));
    }
  }
}


//==========================================================================
//
//  A_DragonFlight
//
//==========================================================================
[decorate] final void A_DragonFlight () {
  DragonSeek(4.0, 8.0);
  if (Target) {
    if (!Target.bShootable) {
      // enemy died
      Target = none;
      return;
    }
    float angle = atan2(Target.Origin.y-Origin.y, Target.Origin.x-Origin.x);
    if (fabs(AngleMod180(Angles.yaw-angle)) < 45.0/2.0 && CheckMeleeRange()) {
      Target.Damage(self, self, HITDICE(8), DmgType:'Melee', spawnBlood:true);
      PlaySound('DragonAttack', CHAN_WEAPON);
    } else if (fabs(AngleMod180(Angles.yaw-angle)) <= 20.0) {
      SetState(MissileState);
      PlaySound('DragonAttack', CHAN_WEAPON);
    }
  } else {
    LookForPlayers(360);
  }
}


//==========================================================================
//
//  A_DragonFlap
//
//==========================================================================
[decorate] final void A_DragonFlap () {
  A_DragonFlight();
  if (P_Random() < 240) {
    PlaySound('DragonWingflap', CHAN_BODY);
  } else {
    PlaySound(ActiveSound, CHAN_VOICE);
  }
}


//==========================================================================
//
//  A_DragonPain
//
//==========================================================================
[decorate] final void A_DragonPain () {
  A_Pain();
  if (!Tracer) {
    // no destination spot yet
    SetState(SeeState);
  }
}


//
//  Korax
//
// Korax Scripts (reserved)
//  249     Tell scripts that we are below half health
//  250-254 Control scripts
//  255     Death script
//
// Korax TIDs (reserved)
//  245     Reserved for Korax himself
//  248     Initial teleport destination
//  249     Teleport destination
//  250-254 For use in respective control scripts
//  255     For use in death script (spawn spots)
//
// Arm projectiles
//      arm positions numbered:
//          1   top left
//          2   middle left
//          3   lower left
//          4   top right
//          5   middle right
//          6   lower right
//
// Korax Variables
//
//  Special1    last teleport destination
//  Special2    set if "below half" script not yet run
//

//==========================================================================
//
//  A_KoraxChase
//
//==========================================================================
[decorate] final void A_KoraxChase () {
  Actor spot;

  if (!Special2 && (Health <= (InitialHealth/2))) {
    spot = Actor(Level.FindMobjFromTID(KORAX_FIRST_TELEPORT_TID, none));
    if (spot) Teleport(spot.Origin, spot.Angles.yaw, true, true, false);
    XLevel.StartACS(249, 0, 0, 0, 0, self, nullptr, 0, false, false);
    Special2 = true;  // Don't run again
    return;
  }

  if (!Target) return;

  if (Random() < 0.1171875) {
    SetState(MissileState);
  } else if (Random() < 0.1171875) {
    PlaySound('KoraxActive', CHAN_VOICE, 1.0, ATTN_NONE);
  }

  // teleport away
  if (Health < (InitialHealth>>1)) {
    if (Random() < 0.0390625) {
      spot = Actor(Level.FindMobjFromTID(KORAX_TELEPORT_TID, Tracer));
      Tracer = spot;
      if (spot) Teleport(spot.Origin, spot.Angles.yaw, true, true, false);
    }
  }
}


//==========================================================================
//
//  A_KoraxDecide
//
//==========================================================================
[decorate] final void A_KoraxDecide () {
  if (Random() < 0.859375) {
    SetState(FindState('Attack'));
  } else {
    SetState(FindState('Command'));
  }
}


//==========================================================================
//
//  SpawnKoraxMissile
//
//==========================================================================
final Actor SpawnKoraxMissile (TVec org, EntityEx dest, class!Actor type) {
  org.z -= FloorClip;
  Actor th = SpawnEntityChecked(class!Actor, type, org);
  if (!th) return none;

  if (th.SightSound) th.PlaySound(th.SightSound, CHAN_VOICE);
  th.Target = self; // originator

  TVec dir = dest.Origin-org;
  if (dest.bShadow && !bSeeInvisible) {
    // invisible target
    VectorRotateAroundZ(ref dir, (Random()-Random())*45.0);
  }
  dir = Normalise(dir);
  th.Velocity = dir*th.Speed;
  VectorAngles(dir, out th.Angles);
  return (th.CheckMissileSpawn() ? th : none);
}


//==========================================================================
// Arm 1 projectile
//==========================================================================
final void KoraxFire1 (class!Actor type) {
  float ang = AngleMod360(Angles.yaw-KORAX_MISSILE_DELTA_ANGLE);
  float x = Origin.x+KORAX_ARM_EXTENSION_SHORT*cos(ang);
  float y = Origin.y+KORAX_ARM_EXTENSION_SHORT*sin(ang);
  float z = Origin.z-FloorClip+KORAX_ARM1_HEIGHT;
  SpawnKoraxMissile(vector(x, y, z), Target, type);
}


//============================================================================
// Arm 2 projectile
//============================================================================
final void KoraxFire2 (class!Actor type) {
  float ang = AngleMod360(Angles.yaw-KORAX_MISSILE_DELTA_ANGLE);
  float x = Origin.x+KORAX_ARM_EXTENSION_LONG*cos(ang);
  float y = Origin.y+KORAX_ARM_EXTENSION_LONG*sin(ang);
  float z = Origin.z-FloorClip+KORAX_ARM2_HEIGHT;
  SpawnKoraxMissile(vector(x, y, z), Target, type);
}


//============================================================================
// Arm 3 projectile
//============================================================================
final void KoraxFire3 (class!Actor type) {
  float ang = AngleMod360(Angles.yaw-KORAX_MISSILE_DELTA_ANGLE);
  float x = Origin.x+KORAX_ARM_EXTENSION_LONG*cos(ang);
  float y = Origin.y+KORAX_ARM_EXTENSION_LONG*sin(ang);
  float z = Origin.z-FloorClip+KORAX_ARM3_HEIGHT;
  SpawnKoraxMissile(vector(x, y, z), Target, type);
}


//============================================================================
// Arm 4 projectile
//============================================================================
final void KoraxFire4 (class!Actor type) {
  float ang = AngleMod360(Angles.yaw+KORAX_MISSILE_DELTA_ANGLE);
  float x = Origin.x+KORAX_ARM_EXTENSION_SHORT*cos(ang);
  float y = Origin.y+KORAX_ARM_EXTENSION_SHORT*sin(ang);
  float z = Origin.z-FloorClip+KORAX_ARM4_HEIGHT;
  SpawnKoraxMissile(vector(x, y, z), Target, type);
}


//============================================================================
// Arm 5 projectile
//============================================================================
final void KoraxFire5 (class!Actor type) {
  float ang = AngleMod360(Angles.yaw+KORAX_MISSILE_DELTA_ANGLE);
  float x = Origin.x+KORAX_ARM_EXTENSION_LONG*cos(ang);
  float y = Origin.y+KORAX_ARM_EXTENSION_LONG*sin(ang);
  float z = Origin.z-FloorClip+KORAX_ARM5_HEIGHT;
  SpawnKoraxMissile(vector(x, y, z), Target, type);
}


//============================================================================
// Arm 6 projectile
//============================================================================
final void KoraxFire6 (class!Actor type) {
  float ang = AngleMod360(Angles.yaw+KORAX_MISSILE_DELTA_ANGLE);
  float x = Origin.x+KORAX_ARM_EXTENSION_LONG*cos(ang);
  float y = Origin.y+KORAX_ARM_EXTENSION_LONG*sin(ang);
  float z = Origin.z-FloorClip+KORAX_ARM6_HEIGHT;
  SpawnKoraxMissile(vector(x, y, z), Target, type);
}


//============================================================================
//
//  A_KoraxMissile
//
//============================================================================
[decorate] final void A_KoraxMissile () {
  class!Actor mtype;
  name sound;

  PlaySound('KoraxAttack', CHAN_VOICE);

  switch (P_Random()%6) {
    case 0:
      mtype = WraithFX1;
      sound = 'WraithMissileFire';
      break;
    case 1:
      mtype = Demon1FX1;
      sound = 'DemonMissileFire';
      break;
    case 2:
      mtype = Demon2FX1;
      sound = 'DemonMissileFire';
      break;
    case 3:
      mtype = FireDemonMissile;
      sound = 'FireDemonAttack';
      break;
    case 4:
      mtype = CentaurFX;
      sound = 'CentaurLeaderAttack';
      break;
    case 5:
      mtype = SerpentFX;
      sound = 'CentaurLeaderAttack';
      break;
  }

  // fire all 6 missiles at once
  PlaySound(sound, CHAN_VOICE, 1.0, ATTN_NONE);
  KoraxFire1(mtype);
  KoraxFire2(mtype);
  KoraxFire3(mtype);
  KoraxFire4(mtype);
  KoraxFire5(mtype);
  KoraxFire6(mtype);
}


//============================================================================
// Call action code scripts (250-254)
//============================================================================
[decorate] final void A_KoraxCommand () {
  PlaySound('KoraxCommand', CHAN_VOICE);

  // Shoot stream of lightning to ceiling
  float ang = AngleMod360(Angles.yaw-90.0);
  float x = Origin.x+KORAX_COMMAND_OFFSET*cos(ang);
  float y = Origin.y+KORAX_COMMAND_OFFSET*sin(ang);
  float z = Origin.z+KORAX_COMMAND_HEIGHT;
  Spawn(KoraxBolt, vector(x, y, z));

  int numcommands = (Health <= (InitialHealth>>1) ? 5 : 4);
  switch (P_Random()%numcommands) {
    case 0: XLevel.StartACS(250, 0, 0, 0, 0, self, nullptr, 0, false, false); break;
    case 1: XLevel.StartACS(251, 0, 0, 0, 0, self, nullptr, 0, false, false); break;
    case 2: XLevel.StartACS(252, 0, 0, 0, 0, self, nullptr, 0, false, false); break;
    case 3: XLevel.StartACS(253, 0, 0, 0, 0, self, nullptr, 0, false, false); break;
    case 4: XLevel.StartACS(254, 0, 0, 0, 0, self, nullptr, 0, false, false); break;
  }
}


//============================================================================
//
//  A_KoraxBonePop
//
//============================================================================
[decorate] final void A_KoraxBonePop () {
  EntityEx mo;

  // spawn 6 spirits equalangularly
  mo = SpawnMissileAngle(KoraxSpirit, 60.0*0.0, 5.0*35.0);
  if (mo) KSpiritInit(mo);

  mo = SpawnMissileAngle(KoraxSpirit, 60.0*1.0, 5.0*35.0);
  if (mo) KSpiritInit(mo);

  mo = SpawnMissileAngle(KoraxSpirit, 60.0*2.0, 5.0*35.0);
  if (mo) KSpiritInit(mo);

  mo = SpawnMissileAngle(KoraxSpirit, 60.0*3.0, 5.0*35.0);
  if (mo) KSpiritInit(mo);

  mo = SpawnMissileAngle(KoraxSpirit, 60.0*4.0, 5.0*35.0);
  if (mo) KSpiritInit(mo);

  mo = SpawnMissileAngle(KoraxSpirit, 60.0*5.0, 5.0*35.0);
  if (mo) KSpiritInit(mo);

  XLevel.StartACS(255, 0, 0, 0, 0, self, nullptr, 0, false, false); // death script
}


//==========================================================================
//
//  KSpiritInit
//
//==========================================================================
final void KSpiritInit (EntityEx Spirit) {
  Spirit.Tracer = self; // swarm around korax
  Spirit.Special1 = 5*35/5; // 5 seconds
  Spirit.Special2 = 32+(P_Random()&7); // float bob index

  // spawn a tail for spirit
  EntityEx tail = Spawn(HolyTail, Spirit.Origin);
  tail.Target = Spirit; // parent
  foreach (auto i; 1..3) {
    EntityEx entnext = Spawn(HolyTailTrail, Spirit.Origin);
    tail.Tracer = entnext;
    tail = entnext;
  }
}


//============================================================================
//
//  A_CHolyAttack2
//
//  Spawns the spirits
//
//============================================================================
[decorate] final void A_CHolyAttack2 () {
  // float bob index
  foreach (auto j; 0..4) {
    EntityEx A = Spawn(HolySpirit, Origin);
    if (!A) continue;
    switch (j) {
      case 0: HolySpirit(A).WeaveZ = P_Random()&7; break; // upper-left
      case 1: HolySpirit(A).WeaveZ = 32+(P_Random()&7); break; // upper-right
      case 2: HolySpirit(A).WeaveXY = 32+(P_Random()&7); break; // lower-left
      case 3:
        HolySpirit(A).WeaveXY = 32+(P_Random()&7);
        HolySpirit(A).WeaveZ = 32+(P_Random()&7);
        break;
    }
    A.Origin.z = Origin.z;
    A.Angles.yaw = AngleMod360(Angles.yaw+(45.0+45.0/2.0)-45.0*float(j));
    A.Thrust(A.Angles.yaw, A.Speed*Level.Game.frametime);
    A.Target = Target;
    A.Args[0] = 10; // initial turn value
    A.Args[1] = 0; // initial look angle
    if (Level.Game.deathmatch) {
      // ghosts last slightly less longer in DeathMatch
      A.Health = 85;
    }
    if (Tracer) {
      A.Tracer = Tracer;
      // don't colide with world but colide with things, i.e explode
      A.bColideWithWorld = false;
      A.bSkullFly = true;
      A.bMissile = false;
    }
    EntityEx tail = Spawn(HolyTail, A.Origin);
    if (tail) {
      tail.Target = A;  // parent
      foreach (auto i; 1..3) {
        EntityEx entnext = Spawn(HolyTailTrail, A.Origin);
        tail.Tracer = entnext;
        tail = entnext;
      }
    }
  }
}


//===========================================================================
//
//  A_PoisonBagInit
//
//===========================================================================
[decorate] final void A_PoisonBagInit () {
  EntityEx A = Spawn(PoisonCloud, Origin+vector(0.0, 0.0, 28.0));
  if (A) PoisonCloud(A).InitCloud(Actor(Target));
}


//===========================================================================
//
//  A_PoisonShroom
//
//===========================================================================
[decorate] final void A_PoisonShroom () {
  StateTime = 4.0+Random()*16.0;
}


//==========================================================================
//
//  A_FighterAttack
//
//==========================================================================
[decorate] final void A_FighterAttack () {
  if (!Target) return;

  SpawnMissileAngle(FSwordMissile, AngleMod360(Angles.yaw+45.0/4.0), 0.0);
  SpawnMissileAngle(FSwordMissile, AngleMod360(Angles.yaw+45.0/8.0), 0.0);
  SpawnMissileAngle(FSwordMissile, Angles.yaw, 0.0);
  SpawnMissileAngle(FSwordMissile, AngleMod360(Angles.yaw-45.0/8.0), 0.0);
  SpawnMissileAngle(FSwordMissile, AngleMod360(Angles.yaw-45.0/4.0), 0.0);
  PlaySound('FighterSwordFire', CHAN_WEAPON);
}


//==========================================================================
//
//  A_ClericAttack
//
//  Spawns the spirits
//
//==========================================================================
[decorate] final void A_ClericAttack () {
  if (!Target) return;

  EntityEx A = SpawnMissile(Target, HolyMissile, 40.0);
  if (A) A.Tracer = Target;
  PlaySound('HolySymbolFire', CHAN_WEAPON);
}


//==========================================================================
//
//  MStaffSpawn2
//
//==========================================================================
final void MStaffSpawn2 (float angle) {
  EntityEx mo = SpawnMissileAngle(MageStaffFX2, angle, 0.0, 40.0);
  if (mo) {
    mo.Target = self;
    MageStaffFX2(mo).FindEnemy();
  }
}


//==========================================================================
//
//  A_MageAttack
//
//==========================================================================
[decorate] final void A_MageAttack () {
  if (!Target) return;

  MStaffSpawn2(Angles.yaw);
  MStaffSpawn2(AngleMod360(Angles.yaw-5.0));
  MStaffSpawn2(AngleMod360(Angles.yaw+5.0));
  PlaySound('MageStaffFire', CHAN_WEAPON);
}


//============================================================================
//
//  A_SorcererBishopEntry
//
//============================================================================
[decorate] final void A_SorcererBishopEntry () {
  Spawn(SorcFX3Explosion, Origin);
  PlaySound(SightSound, CHAN_VOICE);
}


//============================================================================
//
//  A_SpawnBishop
//
//  Green spell - spawn bishops
//
//============================================================================
[decorate] final void A_SpawnBishop () {
  EntityEx A = Spawn(Bishop, Origin);
  if (A) {
    if (!A.TestLocation()) {
      A.SetState(none);
      --Level.TotalKills;
    } else if (Target) {
      A.CopyFriendliness(Target, true);
      A.Master = Target;
    }
  }
  SetState(none);
}


//============================================================================
//
// Set balls to slow mode - actor is sorcerer
//
//============================================================================
[decorate] final void A_SlowBalls () {
  Args[3] = SORC_DECELERATE; // slow mode
  Args[2] = SORCBALL_INITIAL_SPEED; // target speed
}


//============================================================================
//
//  Set balls to speed mode - actor is sorcerer
//
//============================================================================
[decorate] final void A_SpeedBalls () {
  Args[3] = SORC_ACCELERATE; // speed mode
  Args[2] = SORCBALL_TERMINAL_SPEED; // target speed
}


//============================================================================
//
//  A_SorcBossAttack
//
//  Resume ball spinning
//
//============================================================================
[decorate] final void A_SorcBossAttack () {
  Args[3] = SORC_ACCELERATE;
  Args[2] = SORCBALL_INITIAL_SPEED;
}


//============================================================================
//
//  A_StopBalls
//
//  Instant stop when rotation gets to ball in _Special2
//  actor is sorcerer
//
//============================================================================
[decorate] final void A_StopBalls () {
  int chance = P_Random();

  Args[3] = SORC_STOPPING; // stopping mode
  Args[1] = 0; // reset rotation counter

       if (Args[0] <= 0 && chance < 200) SpecialCID = SorcBall2; // blue
  else if (Health < (InitialHealth>>1) && chance < 200) SpecialCID = SorcBall3; // green
  else SpecialCID = SorcBall1; // yellow
}


//============================================================================
//
//  A_SpawnFizzle
//
//  Spell cast magic fizzle
//
//============================================================================
[decorate] final void A_SpawnFizzle () {
  TVec org;
  float dist = 5.0;
  float angle = Angles.yaw;
  org.x = Origin.x+dist*cos(angle);
  org.y = Origin.y+dist*sin(angle);
  org.z = Origin.z-FloorClip+Height/2.0;
  foreach (auto ix; 0..5) {
    EntityEx A = Spawn(SorcSpark1, org);
    if (A) {
      float rangle = angle+Random()*5.0*90.0/1024.0;
      A.Velocity.x = Random()*Speed*cos(rangle);
      A.Velocity.y = Random()*Speed*sin(rangle);
      A.Velocity.z = 2.0*35.0;
    }
  }
}


//==========================================================================
//
//  A_Summon
//
//  Summon Minotaur
//
//==========================================================================
[decorate] final void A_Summon () {
  EntityEx A = Spawn(MinotaurFriend, Origin, default, default, true);
  if (A) {
    if (!A.TestLocation() || !Tracer) {
      // didn't fit -- change back to artifact
      A.SetState(none);
      A = Spawn(ArtiDarkServant, Origin, default, default, true);
      if (A) A.bDropped = true;
      return;
    }

    MinotaurFriend(A).StartTime = XLevel.Time;
    if (!Tracer.bCorpse) {
      // master isn't dead
      A.Tracer = Tracer; // pointer to master
      Powerup Power = SpawnEntityChecked(class!Powerup, PowerMinotaur, default, default, default/*, false*/);
      if (Power) {
        Power.bAlwaysPickup = true;
        if (!Power.TryPickup(Target)) Power.Destroy();
      }
      if (Tracer.bIsPlayer) A.FriendPlayer = Tracer.Player.GetPlayerNum()+1;
    }

    // make smoke puff
    Spawn(MinotaurSmoke, Origin, default, default, true);
    PlaySound(A.ActiveSound, CHAN_VOICE);
  }
}
