//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************

//==========================================================================
//
//  A_MntrFloorFire
//
//==========================================================================
[decorate] final void A_MntrFloorFire () {
  Origin.z = FloorZ;
  bIntrJustMoved = false; // disable interpolation
  EntityEx A = Spawn(MinotaurFX3, vector(Origin.x+(Random()-Random())*4.0, Origin.y+(Random()-Random())*4.0, ONFLOORZ));
  if (!A) return;
  A.Target = Target;
  A.Velocity.x = 0.00001; // force block checking
  A.CheckMissileSpawn();
}


//==========================================================================
//
//  A_DripBlood
//
//==========================================================================
[decorate] final void A_DripBlood () {
  EntityEx mo = Spawn(Blood, Origin+vector((Random()-Random())*8.0, (Random()-Random())*8.0, 0.0));
  if (!mo) return;
  mo.CarryBloodTranslations(self);
  mo.Velocity.x = (Random()-Random())*4.0*35.0;
  mo.Velocity.y = (Random()-Random())*4.0*35.0;
  mo.Gravity = 0.125;
}


//==========================================================================
//
//  A_LichIceImpact
//
//==========================================================================
[decorate] final void A_LichIceImpact () {
  foreach (auto i; 0..8) {
    EntityEx shard = Spawn(HeadFX2, Origin);
    if (!shard) continue;
    float angle = float(i)*45.0;
    shard.Target = Target;
    shard.Angles.yaw = angle;
    shard.Velocity.x = shard.Speed*cos(angle);
    shard.Velocity.y = shard.Speed*sin(angle);
    shard.Velocity.z = -0.6*35.0;
    shard.CheckMissileSpawn();
  }
}


//==========================================================================
//
//  A_LichFireGrow
//
//==========================================================================
[decorate] final void A_LichFireGrow () {
  --Health;
  Origin.z += 9.0;
  if (Health == 0) SetState(FindState('NoGrow'));
}


//==========================================================================
//
//  A_BlueSpark
//
//==========================================================================
[decorate] final void A_BlueSpark () {
  foreach (auto i; 0..2) {
    EntityEx spark = Spawn(Sorcerer2FXSpark, Origin);
    if (!spark) continue;
    spark.Velocity.x = (Random()-Random())*2.0*35.0;
    spark.Velocity.y = (Random()-Random())*2.0*35.0;
    spark.Velocity.z = (1.0+Random())*35.0;
  }
}


//===========================================================================
//
//  A_MacePL1Check
//
//===========================================================================
[decorate] final void A_MacePL1Check () self(Actor) {
  if (Special1 == 0) return;
  Special1 -= 4;
  if (Special1 > 0) return;
  Special1 = 0;
  bNoGravity = false;
  Gravity = 0.125;
  float angle = Angles.yaw;
  Velocity.x = 7.0*cos(angle)*35.0;
  Velocity.y = 7.0*sin(angle)*35.0;
  Velocity.z -= Velocity.z/2.0;
}


//===========================================================================
//
//  A_MaceBallImpact
//
//===========================================================================
[decorate] final void A_MaceBallImpact () {
  if (Origin.z <= FloorZ && HitFloorType()) {
    // landed in some sort of liquid
    Destroy();
    return;
  }
  if (Health != 1234 && Origin.z <= FloorZ && Velocity.z) {
    // bounce
    Health = 1234;
    Velocity.z = Velocity.z*192.0/256.0;
    BounceType = BOUNCE_None;
    SetState(IdleState);
    PlaySound('weapons/macebounce', CHAN_VOICE);
  } else {
    // explode
    bNoGravity = true;
    Gravity = 1.0;
    SendExplosion(RGB(255, 128, 0), 86.0, Origin);
    PlaySound('weapons/macehit', CHAN_VOICE);
  }
}


//===========================================================================
//
//  A_MaceBallImpact2
//
//===========================================================================
[decorate] final void A_MaceBallImpact2 () {
  if (Origin.z <= FloorZ && HitFloorType()) {
    // landed in some sort of liquid
    Destroy();
    return;
  }

  if (Origin.z != FloorZ || Velocity.z < 2.0*35.0) {
    // explode
    Velocity = vector(0.0, 0.0, 0.0);
    bNoGravity = true;
    BounceType = BOUNCE_None;
    Gravity = 1.0;
    SendExplosion(RGB(255, 128, 0), 86.0, Origin);
  } else {
    // bounce
    Velocity.z = Velocity.z*192.0/256.0;
    SetState(IdleState);

    EntityEx tiny = Spawn(MaceFX3, Origin);
    if (tiny) {
      tiny.CarryBloodTranslations(self);
      float angle = AngleMod360(Angles.yaw+90.0);
      tiny.Target = Target;
      tiny.Angles.yaw = angle;
      tiny.Velocity.x = Velocity.x/2.0+(Velocity.z-35.0)*cos(angle);
      tiny.Velocity.y = Velocity.y/2.0+(Velocity.z-35.0)*sin(angle);
      tiny.Velocity.z = Velocity.z;
      tiny.CheckMissileSpawn();
    }

    tiny = Spawn(MaceFX3, Origin);
    if (tiny) {
      tiny.CarryBloodTranslations(self);
      float angle = AngleMod360(Angles.yaw-90.0);
      tiny.Target = Target;
      tiny.Angles.yaw = angle;
      tiny.Velocity.x = Velocity.x/2.0+(Velocity.z-35.0)*cos(angle);
      tiny.Velocity.y = Velocity.y/2.0+(Velocity.z-35.0)*sin(angle);
      tiny.Velocity.z = Velocity.z;
      tiny.CheckMissileSpawn();
    }
  }
}


//==========================================================================
//
//  A_Timebomb
//
//==========================================================================
/*
[decorate] final void A_Timebomb () {
  // time bombs
  Origin.z += 32.0;
  RenderStyle = STYLE_Add;
  Alpha = 1.0;
  A_Explode();
}
*/


//==========================================================================
//
//  A_PodPain
//
//==========================================================================
[decorate] final void A_PodPain () {
  int chance = P_Random();
  if (chance < 128) return;
  int count = (chance > 240 ? 2 : 1);
  foreach (auto i; 0..count) {
    EntityEx goo = Spawn(PodGoo, Origin+vector(0.0, 0.0, 48.0));
    if (!goo) continue;
    goo.CarryBloodTranslations(self);
    goo.Target = self;
    goo.Velocity.x = (Random()-Random())*2.0*35.0;
    goo.Velocity.y = (Random()-Random())*2.0*35.0;
    goo.Velocity.z = (0.5+Random()*2.0)*35.0;
  }
}


//==========================================================================
//
//  A_RemovePod
//
//==========================================================================
[decorate] final void A_RemovePod () {
  if (Master && Master.Special1 > 0) --Master.Special1;
}


//==========================================================================
//
//  A_MakePod
//
//==========================================================================
[decorate] final void A_MakePod () {
  if (Special1 == 16) return; // too many generated pods

  float x = Origin.x;
  float y = Origin.y;
  //float z = Origin.z;

  EntityEx A = Spawn(Pod, vector(x, y, ONFLOORZ));
  if (!A) return;
  if (!A.CheckPosition(A.Origin)) {
    // didn't fit
    A.Destroy();
    return;
  }
  A.SetState(A.FindState('Grow'));
  A.Thrust(Random()*360.0, 9.0);
  A.PlaySound('world/podgrow', CHAN_VOICE);
  ++Special1; // increment generated pod count
  A.Master = self; // link the generator to the pod
}


//==========================================================================
//
//  A_AccTeleGlitter
//
//==========================================================================
[decorate] final void A_AccTeleGlitter () {
  if (++Health > 35) Velocity.z += Velocity.z/2.0;
}


//==========================================================================
//
//  A_VolcanoSet
//
//==========================================================================
[decorate] final void A_VolcanoSet () {
  StateTime = 3.0+Random()*3.5;
}


//==========================================================================
//
//  A_VolcanoBlast
//
//==========================================================================
[decorate] final void A_VolcanoBlast () {
  int count = 1+(P_Random()%3);
  foreach (auto i; 0..count) {
    EntityEx blast = Spawn(VolcanoBlast, Origin+vector(0.0, 0.0, 44.0));
    if (!blast) continue;
    blast.CarryBloodTranslations(self);
    blast.Target = self;
    float angle = Random()*360.0;
    blast.Angles.yaw = angle;
    blast.Velocity.x = cos(angle)*35.0;
    blast.Velocity.y = sin(angle)*35.0;
    blast.Velocity.z = (2.5+Random()*4.0)*35.0;
    blast.PlaySound('world/volcano/shoot', CHAN_VOICE);
    blast.CheckMissileSpawn();
  }
}


//==========================================================================
//
//  A_VolcBallImpact
//
//==========================================================================
[decorate] final void A_VolcBallImpact () {
  if (Origin.z <= FloorZ) {
    bNoGravity = true;
    Gravity = 1.0;
    Origin.z += 28.0;
  }
  RadiusAttack(Target, 25, 25.0, true);
  foreach (auto i; 0..4) {
    EntityEx tiny = Spawn(VolcanoTBlast, Origin);
    if (!tiny) continue;
    tiny.Target = self;
    float angle = float(i)*90.0;
    tiny.Angles.yaw = angle;
    tiny.Velocity.x = 0.7*cos(angle)*35.0;
    tiny.Velocity.y = 0.7*sin(angle)*35.0;
    tiny.Velocity.z = (1.0+Random()*2.0)*35.0;
    tiny.CheckMissileSpawn();
  }
}


//==========================================================================
//
//  A_ImpDeath
//
//==========================================================================
[decorate] final void A_ImpDeath () {
  bSolid = false;
  bFloorClip = true;
  if (Origin.z <= FloorZ) SetState(FindState('Crash'));
}


//==========================================================================
//
//  A_ImpXDeath1
//
//==========================================================================
[decorate] final void A_ImpXDeath1 () {
  bSolid = false;
  bNoGravity = true;
  bFloorClip = true;
  Special1 = 666; // flag the crash routine
}


//==========================================================================
//
//  A_ImpExplode
//
//==========================================================================
[decorate] final void A_ImpExplode () {
  bNoGravity = false;
  EntityEx mo = Spawn(HereticImpChunk1, Origin);
  if (mo) {
    mo.CarryBloodTranslations(self);
    mo.Velocity.x = (Random()-Random())*4.0*35.0;
    mo.Velocity.y = (Random()-Random())*4.0*35.0;
    mo.Velocity.z = 9.0*35.0;
  }
  mo = Spawn(HereticImpChunk2, Origin);
  if (mo) {
    mo.CarryBloodTranslations(self);
    mo.Velocity.x = (Random()-Random())*4.0*35.0;
    mo.Velocity.y = (Random()-Random())*4.0*35.0;
    mo.Velocity.z = 9.0*35.0;
  }
  if (Special1 == 666) SetState(FindState('XCrash')); // extreme death crash
}


//==========================================================================
//
//  A_KnightAttack
//
//==========================================================================
[decorate] final void A_KnightAttack () {
  if (!Target) return;
  if (CheckMeleeRange()) {
    Target.Damage(self, self, HITDICE(3), DmgType:'Melee', spawnBlood:true);
    PlaySound('hknight/melee', CHAN_WEAPON);
    return;
  }
  // throw axe
  PlaySound(AttackSound, CHAN_WEAPON);
  if (bShadow || Random() < 0.15625) {
    // red axe
    SpawnMissile(Target, RedAxe, 36.0);
    return;
  }
  // green axe
  SpawnMissile(Target, KnightAxe, 36.0);
}


//==========================================================================
//
//  A_WizAtk1
//
//==========================================================================
[decorate] final void A_WizAtk1 () {
  A_FaceTarget();
  RenderStyle = STYLE_Normal;
  Alpha = 1.0;
  bGhost = false;
}


//==========================================================================
//
//  A_WizAtk2
//
//==========================================================================
[decorate] final void A_WizAtk2 () {
  A_FaceTarget();
  RenderStyle = STYLE_Translucent;
  Alpha = 0.666;
  bGhost = true;
}


//==========================================================================
//
//  A_WizAtk3
//
//==========================================================================
[decorate] final void A_WizAtk3 () {
  TAVec ang;

  RenderStyle = STYLE_Normal;
  Alpha = 1.0;
  bGhost = false;
  if (!Target) return;

  PlaySound(AttackSound, CHAN_WEAPON);
  if (CheckMeleeRange()) {
    Target.Damage(self, self, HITDICE(4), DmgType:'Melee', spawnBlood:true);
    return;
  }

  EntityEx A = SpawnMissile(Target, WizardFX1);
  if (A) {
    VectorAngles(A.Velocity, out ang);
    float angle = A.Angles.yaw;
    SpawnMissileAngles(WizardFX1, AngleMod360(angle-(45.0/8.0)), ang.pitch);
    SpawnMissileAngles(WizardFX1, AngleMod360(angle+(45.0/8.0)), ang.pitch);
  }
}


//==========================================================================
//
//  A_GhostOff
//
//==========================================================================
[decorate] final void A_GhostOff () {
  RenderStyle = STYLE_Normal;
  Alpha = 1.0;
  bGhost = false;
}


//==========================================================================
//
//  A_LichAttack
//
//==========================================================================
[decorate] final void A_LichAttack () {
  // Ice ball     (close 20% : far 60%)
  // Fire column  (close 40% : far 20%)
  // Whirlwind    (close 40% : far 20%)
  // Distance threshold = 8 cells

  if (!Target) return;

  A_FaceTarget();
  if (CheckMeleeRange()) {
    Target.Damage(self, self, HITDICE(6), DmgType:'Melee', spawnBlood:true);
    return;
  }

  int dist = DistTo2(Target) > 8.0*64.0;
  int randAttack = P_Random();
  if (randAttack < (dist ? 150 : 50)) {
    // ice ball
    SpawnMissile(Target, HeadFX1);
    PlaySound('ironlich/attack2', CHAN_WEAPON);
  } else if (randAttack < (dist ? 200 : 150)) {
    // fire column
    EntityEx baseFire = SpawnMissile(Target, HeadFX3);
    if (baseFire) {
      baseFire.SetState(baseFire.FindState('Grown')); // don't grow
      foreach (auto i; 0..5) {
        EntityEx fire = Spawn(HeadFX3, baseFire.Origin);
        if (!fire) continue;
        if (i == 0) PlaySound('ironlich/attack1', CHAN_WEAPON);
        fire.Target = baseFire.Target;
        fire.Angles.yaw = baseFire.Angles.yaw;
        fire.Velocity = baseFire.Velocity;
        fire.MissileDamage = 0;
        fire.Health = (i+1)*2;
        fire.CheckMissileSpawn();
      }
    }
  } else {
    // whirlwind
    EntityEx A = SpawnMissile(Target, Whirlwind);
    if (A) {
      A.Origin.z -= 32.0;
      A.Tracer = Target;
      A.Health = 20*TICRATE;  // Duration
      A.bSeekerMissile = true;
      PlaySound('ironlich/attack3', CHAN_WEAPON);
    }
  }
}


//==========================================================================
//
//  A_GenWizard
//
//==========================================================================
[decorate] final void A_GenWizard () {
  EntityEx A = Spawn(Wizard, Origin, vector(0.0, 0.0, 0.0));
  if (!A) return;
  A.Origin.z = Origin.z-A.Height/2.0;
  if (!A.TestLocation()) {
    // didn't fit
    A.Destroy();
    return;
  }
  A.CopyFriendliness(Target, true);
  A.Master = Target;
  Velocity = vector(0.0, 0.0, 0.0);
  SetState(FindState('Death'));
  bMissile = false;
  Spawn(TeleportFog, Origin);
}


//===========================================================================
//
//  A_StaffAttack
//
//===========================================================================
[decorate] final void A_StaffAttack (int damage, class!Actor PuffType) self(Actor) {
  TVec dir;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  TAVec aangs = Angles;
  aangs.yaw = AngleMod360(aangs.yaw+(Random()-Random())*45.0/8.0);
  EntityEx AimTarget = AimLineAttack(out dir, aangs, DEFAULT_MELEERANGE);
  //FIXME: damage type?
  LineAttack(dir, DEFAULT_MELEERANGE, damage, /*StaffPuff*/PuffType, NoAttackGhosts:true);
  if (AimTarget) {
    // turn to face target
    Angles.yaw = atan2(AimTarget.Origin.y-Origin.y, AimTarget.Origin.x-Origin.x);
    Player.bFixAngle = true;
  }
}


//===========================================================================
//
//  A_GauntletAttack
//
//===========================================================================
[decorate] final void A_GauntletAttack (int power) self(Actor) {
  int damage;
  //float slope;
  int randVal;
  float dist;
  TAVec aangs;
  TVec dir;
  class!Actor PuffType;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Player.SetViewStateOffsets(Random()*4.0-2.0, Weapon::WEAPONTOP+Random()*4.0);
  aangs = Angles;
  if (power) {
    damage = HITDICE(2);
    dist = 4.0*DEFAULT_MELEERANGE;
    aangs.yaw = AngleMod360(aangs.yaw+(Random()-Random())*45.0/16.0);
    PuffType = GauntletPuff2;
  } else {
    damage = HITDICE(2);
    dist = DEFAULT_MELEERANGE+0.00001;
    aangs.yaw = AngleMod360(aangs.yaw+(Random()-Random())*45.0/8.0);
    PuffType = GauntletPuff1;
  }

  EntityEx AimTarget = AimLineAttack(dir, aangs, dist);
  //FIXME: damage type?
  LineAttack(dir, dist, damage, PuffType);
  if (!AimTarget) {
    if (P_Random() > 64) Player.ExtraLight = !Player.ExtraLight;
    PlaySound('weapons/gauntletson', CHAN_WEAPON);
    return;
  }

  randVal = P_Random();
       if (randVal < 64) Player.ExtraLight = 0;
  else if (randVal < 160) Player.ExtraLight = 1;
  else Player.ExtraLight = 2;

  if (Wpn.bPoweredUp) {
    GiveBody(damage>>1);
    PlaySound('weapons/gauntletspowhit', CHAN_WEAPON);
  } else {
    PlaySound('weapons/gauntletshit', CHAN_WEAPON);
  }

  // turn to face target
  float angle = atan2(AimTarget.Origin.y-Origin.y, AimTarget.Origin.x-Origin.x);
  if (AngleMod360(angle-Angles.yaw) > 180.0) {
    if (AngleMod360(angle-Angles.yaw) < 360.0-90.0/20.0) {
      Angles.yaw = AngleMod360(angle+90.0/21.0);
    } else {
      Angles.yaw = AngleMod360(Angles.yaw-90.0/20.0);
    }
  } else {
    if (AngleMod360(angle-Angles.yaw) > 90.0/20.0) {
      Angles.yaw = AngleMod360(angle-90.0/21.0);
    } else {
      Angles.yaw = AngleMod360(Angles.yaw+90.0/20.0);
    }
  }
  bJustAttacked = true;
}


//===========================================================================
//
//  A_FireGoldWandPL1
//
//===========================================================================
[decorate] final void A_FireGoldWandPL1 () self(Actor) {
  TVec dir;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Wpn.DepleteAmmo(Wpn.FireMode);
  int damage = 7+(P_Random()&7);
  Aim(out dir, 16.0*64.0);
  if (PlayerEx(Player).Refire) VectorRotateAroundZ(ref dir, (Random()-Random())*45.0/8.0);
  //FIXME: damage type?
  LineAttack(dir, MISSILERANGE, damage, GoldWandPuff1);
  PlaySound('weapons/wandhit', CHAN_WEAPON);
}


//===========================================================================
//
//  A_FireGoldWandPL2
//
//===========================================================================
[decorate] final void A_FireGoldWandPL2 () self(Actor) {
  TAVec aangs;
  TVec dir;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Wpn.DepleteAmmo(Wpn.FireMode);
  Aim(out dir, 16.0*64.0);
  VectorAngles(dir, out aangs);
  SpawnMissileAngles(GoldWandFX2, AngleMod360(aangs.yaw-(45.0/8.0)), aangs.pitch);
  SpawnMissileAngles(GoldWandFX2, AngleMod360(aangs.yaw+(45.0/8.0)), aangs.pitch);
  VectorRotateAroundZ(ref dir, -45.0/8.0);
  foreach (auto i; 0..5) {
    int damage = 1+(P_Random()&7);
    //FIXME: damage type?
    LineAttack(dir, MISSILERANGE, damage, GoldWandPuff2);
    VectorRotateAroundZ(ref dir, (45.0/8.0)/2.0);
  }
  PlaySound('weapons/wandhit', CHAN_WEAPON);
}


//===========================================================================
//
//  A_FireCrossbowPL1
//
//===========================================================================
[decorate] final void A_FireCrossbowPL1 () self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Wpn.DepleteAmmo(Wpn.FireMode);
  SpawnPlayerMissile(CrossbowFX1);
  SpawnPlayerMissileAngle(CrossbowFX3, AngleMod360(Angles.yaw-(45.0/10.0)));
  SpawnPlayerMissileAngle(CrossbowFX3, AngleMod360(Angles.yaw+(45.0/10.0)));
}


//===========================================================================
//
//  A_FireCrossbowPL2
//
//===========================================================================
[decorate] final void A_FireCrossbowPL2 () self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Wpn.DepleteAmmo(Wpn.FireMode);
  SpawnPlayerMissile(CrossbowFX2);
  SpawnPlayerMissileAngle(CrossbowFX2, AngleMod360(Angles.yaw-(45.0/10.0)));
  SpawnPlayerMissileAngle(CrossbowFX2, AngleMod360(Angles.yaw+(45.0/10.0)));
  SpawnPlayerMissileAngle(CrossbowFX3, AngleMod360(Angles.yaw-(45.0/5.0)));
  SpawnPlayerMissileAngle(CrossbowFX3, AngleMod360(Angles.yaw+(45.0/5.0)));
}


//===========================================================================
//
//  A_FireBlasterPL1
//
//===========================================================================
[decorate] final void A_FireBlasterPL1 () self(Actor) {
  TVec dir;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Wpn.DepleteAmmo(Wpn.FireMode);
  Aim(out dir, 16.0*64.0);
  int damage = HITDICE(4);
  if (PlayerEx(Player).Refire) VectorRotateAroundZ(ref dir, (Random()-Random())*45.0/8.0);
  //FIXME: damage type?
  LineAttack(dir, MISSILERANGE, damage, BlasterPuff);
  PlaySound('weapons/blastershoot', CHAN_WEAPON);
}


//===========================================================================
//
//  A_FireSkullRodPL1
//
//===========================================================================
[decorate] final void A_FireSkullRodPL1 () self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  if (!Wpn.DepleteAmmo(Wpn.FireMode)) return;

  EntityEx A = SpawnPlayerMissile(HornRodFX1);
  // randomize the first frame
  if (A && P_Random() > 128) A.SetState(GetStatePlus(A.IdleState, 1));
}


//===========================================================================
//
//  A_FireSkullRodPL2
//
//  The special2 field holds the player number that shot the rain missile.
//  The specialmobj1 field is used for the seeking routines, special1 as a
//  counter for the sound looping.
//
//===========================================================================
[decorate] final void A_FireSkullRodPL2 () self(Actor) {
  EntityEx AimTarget;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Wpn.DepleteAmmo(Wpn.FireMode);
  HornRodFX2 A = HornRodFX2(SpawnPlayerMissileEx(HornRodFX2, true, out AimTarget));
  // Use MissileMobj instead of the return value from
  // SpawnPlayerMissile because we need to give info to the mobj
  // even if it exploded immediately.
  if (Level.Game.netgame) {
    // multi-player game
    A.RainColor = Player.GetPlayerNum();
  } else {
    // always use red missiles in single player games
    A.RainColor = 2;
  }
  if (AimTarget) {
    A.Tracer = AimTarget;
    A.bSeekerMissile = true;
  }
  A.PlaySound('weapons/hornrodpowshoot', CHAN_WEAPON);
}


//===========================================================================
//
//  A_FireMacePL1
//
//===========================================================================
[decorate] final void A_FireMacePL1 () self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  if (!Wpn.DepleteAmmo(Wpn.FireMode)) return;

  if (P_Random() < 28) {
    EntityEx ball = Spawn(MaceFX2, Origin+vector(0.0, 0.0, 28.0-FloorClip));
    ball.Velocity.z = (2.0+173.0*-tan(Angles.pitch)/32.0)*35.0;
    float angle = Angles.yaw;
    ball.Target = self;
    ball.Angles.yaw = angle;
    ball.Origin.z += 173.0*-tan(Angles.pitch)/16.0;
    ball.Velocity.x = Velocity.x/2.0+ball.Speed*cos(angle);
    ball.Velocity.y = Velocity.y/2.0+ball.Speed*sin(angle);
    ball.PlaySound('weapons/maceshoot', CHAN_WEAPON);
    ball.CheckMissileSpawn();
    return;
  }

  Player.SetViewStateOffsets(Random()*4.0-2.0, Weapon::WEAPONTOP+Random()*4.0);
  {
    EntityEx ball = SpawnPlayerMissileAngle(MaceFX1, AngleMod360(Angles.yaw+(Random()-0.5)*45.0/4.0));
    if (ball) Actor(ball).Special1 = 16;  // tics till dropoff
  }
}


//===========================================================================
//
//  A_FireMacePL2
//
//===========================================================================
[decorate] final void A_FireMacePL2 () self(Actor) {
  EntityEx AimTarget;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Wpn.DepleteAmmo(Wpn.FireMode);
  EntityEx A = SpawnPlayerMissileEx(MaceFX4, false, out AimTarget);
  if (A) {
    A.Velocity.x += Velocity.x;
    A.Velocity.y += Velocity.y;
    A.Velocity.z = (2.0+173.0*(-tan(Angles.pitch))/32.0)*35.0;
    if (AimTarget) {
      A.Tracer = AimTarget;
      A.bSeekerMissile = true;
    }
  }
  PlaySound('weapons/maceshoot', CHAN_WEAPON);
}


//==========================================================================
//
//  A_SpawnMace
//
//  This is implemented using state so that mace spots spawned by ACS
//  scripts work properly. Uses Target to link them.
//
//==========================================================================
[decorate] final void A_SpawnMace () {
  if (Target) return; // already done

  // link all mace spots
  EntityEx invPrev = none;
  EntityEx First = none;
  int SpotCount = 0;
  EntityEx Spot;
  foreach AllThinkers(MaceSpawner, Spot) {
    if (invPrev) invPrev.Target = Spot; else First = Spot;
    invPrev = Spot;
    ++SpotCount;
  }
  invPrev.Target = First;

  if (!SpotCount) return; // no maces placed
  if (!Level.Game.deathmatch && P_Random() < 64) return; // sometimes doesn't show up if not in deathmatch

  Mace M = SpawnEntityChecked(class!Mace, Mace);
  if (M) {
    M.SpotCount = SpotCount;
    M.FirstSpot = First;
    M.DoRespawn();
  }
}


//===========================================================================
//
//  A_BeakRaise
//
//===========================================================================
[decorate] final void A_BeakRaise () self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Player.SetViewObject(Wpn);
  Player.SetViewStateOffsets(0, Weapon::WEAPONTOP);
  Player.SetViewState(PS_WEAPON, Wpn.GetReadyState());
}


//===========================================================================
//
//  A_BeakAttackPL1
//
//===========================================================================
[decorate] final void A_BeakAttackPL1 () self(Actor) {
  TVec dir;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  int damage = 1+(P_Random()&3);
  EntityEx AimTarget = AimLineAttack(out dir, Angles, DEFAULT_MELEERANGE);
  //FIXME: damage type?
  LineAttack(dir, DEFAULT_MELEERANGE, damage, BeakPuff);
  if (AimTarget) {
    Angles.yaw = atan2(AimTarget.Origin.y-Origin.y, AimTarget.Origin.x-Origin.x);
    Player.bFixAngle = true;
  }
  PlaySound('chicken/peck', CHAN_VOICE);
  PlayerEx(Player).ChickenPeck = 12;
  Player.ViewStates[PS_WEAPON].StateTime -= Random()*0.25;
}


//===========================================================================
//
//  A_BeakAttackPL2
//
//===========================================================================
[decorate] final void A_BeakAttackPL2 () self(Actor) {
  TVec dir;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  int damage = HITDICE(4);
  EntityEx AimTarget = AimLineAttack(out dir, (Owner ? Owner.Angles : Angles), DEFAULT_MELEERANGE); //k8: why it may have no owner???
  //FIXME: damage type?
  LineAttack(dir, DEFAULT_MELEERANGE, damage, BeakPuff);
  if (AimTarget) {
    Angles.yaw = atan2(AimTarget.Origin.y-Origin.y, AimTarget.Origin.x-Origin.x);
    Player.bFixAngle = true;
  }
  PlaySound('chicken/peck', CHAN_VOICE);
  PlayerEx(Player).ChickenPeck = 12;
  Player.ViewStates[PS_WEAPON].StateTime -= Random()*0.125;
}


//==========================================================================
//
//  A_Sor1Chase
//
//==========================================================================
[decorate] final void A_Sor1Chase () {
  if (Special1) {
    --Special1;
    StateTime -= 0.1;
  }
  A_Chase();
}


//==========================================================================
//
//  A_Srcr1Attack
//
//  Sorcerer demon attack.
//
//==========================================================================
[decorate] final void A_Srcr1Attack () {
  TAVec ang;

  if (!Target) return;

  PlaySound(AttackSound, CHAN_WEAPON);
  if (CheckMeleeRange()) {
    Target.Damage(self, self, HITDICE(8), DmgType:'Melee', spawnBlood:true);
    return;
  }

  if (Health > (InitialHealth/3)*2) {
    // spit one fireball
    SpawnMissile(Target, SorcererFX1, 48.0);
  } else {
    // spit three fireballs
    EntityEx A = SpawnMissile(Target, SorcererFX1, 48.0);
    if (A) {
      VectorAngles(A.Velocity, out ang);
      float angle = A.Angles.yaw;
      SpawnMissileAngles(SorcererFX1, AngleMod360(angle-3.0), ang.pitch, 48.0);
      SpawnMissileAngles(SorcererFX1, AngleMod360(angle+3.0), ang.pitch, 48.0);
    }
    if (Health < InitialHealth/3) {
      // maybe attack again
      if (Special1) {
        // just attacked, so don't attack again
        Special1 = 0;
      } else {
        // set state to attack again
        Special1 = 1;
        SetState(FindState('Missile2'));
      }
    }
  }
}


//==========================================================================
//
//  A_Sor1Pain
//
//==========================================================================
[decorate] final void A_Sor1Pain () {
  Special1 = 20; // number of steps to walk fast
  A_Pain();
}


//==========================================================================
//
//  A_SorcererRise
//
//==========================================================================
[decorate] final void A_SorcererRise () {
  bSolid = false;
  Sorcerer2 S2 = SpawnEntityChecked(class!Sorcerer2, Sorcerer2, Origin);
  if (S2) {
    S2.SetState(S2.FindState('Rise'));
    S2.Angles.yaw = Angles.yaw;
    S2.CopyFriendliness(self, true);
  }
}


//==========================================================================
//
//  A_ImpMsAttack
//
//  Heretic Imp attack.
//
//==========================================================================
[decorate] final void A_ImpMsAttack () {
  if (!Target || FRandomFull() > 0.25) {
    SetState(SeeState);
  } else {
    decorate_A_SkullAttack(12);
  }
}
