//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//  Flags and appearance
//**************************************************************************

//==========================================================================
//
//  A_SetFloorClip
//
//==========================================================================
[decorate] final void A_SetFloorClip () {
  bFloorClip = true;
  HandleFloorclip();
}


//==========================================================================
//
//  A_UnSetFloorClip
//
//==========================================================================
[decorate] final void A_UnSetFloorClip () {
  bFloorClip = false;
  FloorClip = 0.0;
}


//==========================================================================
//
//  A_HideThing
//
//==========================================================================
[decorate] final void A_HideThing () {
  bInvisible = true;
}


//==========================================================================
//
//  A_UnHideThing
//
//==========================================================================
[decorate] final void A_UnHideThing () {
  bInvisible = false;
}


//==========================================================================
//
//  A_SetInvulnerable
//
//==========================================================================
[decorate] final void A_SetInvulnerable () {
  bInvulnerable = true;
}


//==========================================================================
//
//  A_UnSetInvulnerable
//
//==========================================================================
[decorate] final void A_UnSetInvulnerable () {
  bInvulnerable = false;
}


//==========================================================================
//
//  A_SetReflective
//
//==========================================================================
[decorate] final void A_SetReflective () {
  bReflective = true;
}


//==========================================================================
//
//  A_UnSetReflective
//
//==========================================================================
[decorate] final void A_UnSetReflective () {
  bReflective = false;
}


//==========================================================================
//
//  A_SetReflectiveInvulnerable
//
//==========================================================================
[decorate] final void A_SetReflectiveInvulnerable () {
  bReflective = true;
  A_SetInvulnerable();
}


//==========================================================================
//
//  A_UnSetReflectiveInvulnerable
//
//==========================================================================
[decorate] final void A_UnSetReflectiveInvulnerable () {
  bReflective = false;
  A_UnSetInvulnerable();
}


//==========================================================================
//
//  A_SetShootable
//
//==========================================================================
[decorate] final void A_SetShootable () {
  bNonShootable = false;
  bShootable = true;
}


//==========================================================================
//
//  A_UnSetShootable
//
//==========================================================================
[decorate] final void A_UnSetShootable () {
  bNonShootable = true;
  bShootable = false;
}


//===========================================================================
//
//  A_NoGravity
//
//===========================================================================
[decorate] final void A_NoGravity () {
  bNoGravity = true;
}


//===========================================================================
//
//  A_Gravity
//
//===========================================================================
[decorate] final void A_Gravity () {
  bNoGravity = false;
  Gravity = 1.0;
}


//===========================================================================
//
//  A_LowGravity
//
//===========================================================================
[decorate] final void A_LowGravity () {
  bNoGravity = false;
  Gravity = 0.125;
}


//==========================================================================
//
//  A_NoBlocking
//
//  Unset blocking.
//
//  for VavoomC actor states, and in some Strife actions
//
//==========================================================================
[decorate] final void A_NoBlocking () {
  decorate_A_NoBlocking(true);
}


//==========================================================================
//
//  A_NoBlocking
//
//  Unset blocking.
//
//==========================================================================
[decorate] final void decorate_A_NoBlocking (optional bool drop) {
  int SpeechNum;
  FRogueConSpeech *Speech;
  class!EntityEx DropItemType;

  if (!specified_drop) drop = true;

  // Andy Baker's stealth monsters
  if (bStealth) {
    Alpha = 1.0;
    VisDir = 0;
  }

  // actor is on ground, it can be walked over
  bSolid = false;

  SpeechNum = GetSpeech();
  if (SpeechNum) {
    // drop stuff as determined by conversation
    if (SpeechNum < 0) {
      Speech = cast([unsafe])(&XLevel.GenericSpeeches[-SpeechNum-1]);
    } else {
      Speech = cast([unsafe])(&XLevel.LevelSpeeches[SpeechNum-1]);
    }
    DropItemType = LineSpecialLevelInfo(Level).GetClassFromID(Speech->DropItem);
    if (DropItemType && drop) {
      DropItem(DropItemType, 0, 1.0);
      return;
    }
  }

  // check for monsters dropping things
  if (drop && ShouldDropItems()) DropAllItems();

  NoBlockingSet(drop);
}


//==========================================================================
//
//  A_Fall
//
//  For compatibility
//
//==========================================================================
[decorate] final void A_Fall () {
  // called for Keen and PE, and they should not drop items
  decorate_A_NoBlocking(GetCvarB('gz_afall_drops'));
}


//==========================================================================
//
//  A_SetSolid
//
//==========================================================================
[decorate] final void A_SetSolid () {
  bSolid = true;
}


//==========================================================================
//
//  A_UnsetSolid
//
//==========================================================================
[decorate] final void A_UnsetSolid () {
  bSolid = false;
}


//==========================================================================
//
//  A_SetFloat
//
//==========================================================================
[decorate] final void A_SetFloat () {
  bFloat = true;
}


//==========================================================================
//
//  A_UnsetFloat
//
//==========================================================================
[decorate] final void A_UnsetFloat () {
  bFloat = false;
  bInFloat = false;
}


//==========================================================================
//
//  A_ScreamAndUnblock
//
//  For breakable DECORATE decorations that have only one death state.
//
//==========================================================================
[decorate] final void A_ScreamAndUnblock () {
  A_Scream();
  A_NoBlocking();
}


//==========================================================================
//
//  A_ActiveAndUnblock
//
//  For breakable DECORATE decorations that have only one death state.
//
//==========================================================================
[decorate] final void A_ActiveAndUnblock () {
  A_ActiveSound();
  A_NoBlocking();
}


//==========================================================================
//
//  A_SetShadow
//
//==========================================================================
[decorate] final void A_SetShadow () {
  //bUnknown2 = true;
  bShadow = true;
  RenderStyle = STYLE_Translucent;
  Alpha = 0.333;
}


//==========================================================================
//
//  A_ClearShadow
//
//==========================================================================
[decorate] final void A_ClearShadow () {
  //bUnknown2 = false;
  bShadow = false;
  RenderStyle = STYLE_Normal;
  Alpha = 1.0;
}


//==========================================================================
//
//  A_SetTranslucent
//
//  mode:
//    0: normal
//    1: additive
//    2: fuzz
//
//==========================================================================
[decorate] final void A_SetTranslucent (float AlphaVal, optional int Mode) {
  Alpha = fclamp(AlphaVal, 0, 1);
  //RenderStyle = (Mode == 0 ? STYLE_Translucent : Mode == 2 ? STYLE_Fuzzy : STYLE_Add);
  RenderStyle = (Mode == 1 ? STYLE_Add : Mode == 2 ? STYLE_Fuzzy : STYLE_Translucent);
}


//==========================================================================
//
//  A_FadeIn
//
//==========================================================================
[decorate] final void A_FadeIn (optional float Val, optional int flags) {
  if (RenderStyle == STYLE_Normal) RenderStyle = STYLE_Translucent;
  if (!Val) Val = 0.1;
  Alpha += Val;
  if (specified_flags) {
    if (flags&FTF_CLAMP) Alpha = fclamp(Alpha, 0, 1);
    if ((flags&FTF_REMOVE) && Alpha >= 1) { Destroy(); return; }
  }
  if (Alpha == 1) RenderStyle = STYLE_Normal;
}


//==========================================================================
//
//  A_FadeOut
//
//==========================================================================
[decorate] final void A_FadeOut (optional float Val, optional int flags) {
  if (RenderStyle == STYLE_Normal) RenderStyle = STYLE_Translucent;
  if (!Val) Val = 0.1;
  Alpha -= Val;
  if (!specified_flags) flags = FTF_REMOVE;
  if (flags&FTF_CLAMP) Alpha = fclamp(Alpha, 0, 1);
  if ((flags&FTF_REMOVE) && Alpha <= 0) { Destroy(); return; }
}


//==========================================================================
//
//  A_FadeTo
//
//==========================================================================
[decorate] final void A_FadeTo (float atarget, optional float amount, optional int flags) {
  if (!amount) amount = 0.1;
  amount = fabs(amount);
  if (RenderStyle == STYLE_Normal) RenderStyle = STYLE_Translucent;
  if (flags&FTF_CLAMP) {
    Alpha = fclamp(Alpha, 0, 1);
    atarget = fclamp(atarget, 0, 1);
  }
  if (Alpha < atarget) {
    Alpha += amount;
    if (Alpha >= atarget) {
      if (flags&FTF_REMOVE) { Destroy(); return; }
      Alpha = atarget;
    }
  } else if (Alpha > atarget) {
    Alpha -= amount;
    if (Alpha <= atarget) {
      if (flags&FTF_REMOVE) { Destroy(); return; }
      Alpha = atarget;
    }
  } else {
    // reached
    if (flags&FTF_REMOVE) { Destroy(); return; }
  }
  if (flags&FTF_CLAMP) Alpha = fclamp(Alpha, 0, 1);
  if (Alpha == 1) RenderStyle = STYLE_Normal;
}


//==========================================================================
//
//  A_QueueCorpse
//
//  Throw another corpse on the queue.
//
//==========================================================================
[decorate] final void A_QueueCorpse () {
  EntityEx corpse;

  if (LineSpecialLevelInfo(Level).corpseQueueSlot >= LineSpecialLevelInfo(Level).CorpseQueSize) {
    // too many corpses -- remove an old one
    corpse = LineSpecialLevelInfo(Level).corpseQueue[LineSpecialLevelInfo(Level).corpseQueueSlot%LineSpecialLevelInfo(Level).CorpseQueSize];
    if (corpse) corpse.Destroy();
  }
  LineSpecialLevelInfo(Level).corpseQueue[LineSpecialLevelInfo(Level).corpseQueueSlot%LineSpecialLevelInfo(Level).CorpseQueSize] = self;
  ++LineSpecialLevelInfo(Level).corpseQueueSlot;
}


//============================================================================
//
//  A_DeQueueCorpse
//
//  Remove a mobj from the queue (for resurrection)
//
//============================================================================
[decorate] final void A_DeQueueCorpse () {
  for (int slot = 0; slot < LineSpecialLevelInfo(Level).CorpseQueSize; ++slot) {
    if (LineSpecialLevelInfo(Level).corpseQueue[slot] == self) {
      LineSpecialLevelInfo(Level).corpseQueue[slot] = none;
      break;
    }
  }
}


//==========================================================================
//
//  A_SetTranslation
//
//==========================================================================
[decorate] final void A_SetTranslation (string trname) {
  Translation = R_FindNamedTranslation(trname);
}


//==========================================================================
//
//  decorate_A_CheckFlag
//
//==========================================================================
[decorate] final void decorate_A_CheckFlag (string flagname, state label, optional int aptr) {
  KeepChainResult();
  EntityEx tgt = EntityEx(DecorDoAAPtr('A_CheckFlag', aptr!optional));
  if (!tgt) return;
  //if (!decoDoCheckFlag(flagname, tgt)) return;
  if (!tgt.GetDecorateFlag(flagname)) return;
  DoJump(label);
}


//============================================================================
//
//  A_ChangeFlag
//
//============================================================================
[decorate] final void A_ChangeFlag (string Name, bool Value, optional int aptr) {
  EntityEx tgt = EntityEx(DecorDoAAPtr('A_ChangeFlag', aptr!optional));
  if (!tgt) return;
  decorate_ChangeActorFlag(tgt, Name, Value);
}


//============================================================================
//
//  A_SetSpecial
//
//============================================================================
[decorate] final void A_SetSpecial (int aspecial, optional int aarg0, optional int aarg1,
                                    optional int aarg2, optional int aarg3, optional int aarg4)
{
  Special = aspecial;
  Args[0] = aarg0;
  Args[1] = aarg1;
  Args[2] = aarg2;
  Args[3] = aarg3;
  Args[4] = aarg4;
}


//============================================================================
//
//  A_SetHealth
//
//============================================================================
[decorate] final void A_SetHealth (int newhealth, optional int aptr) {
  EntityEx tgt = EntityEx(DecorDoAAPtr('A_SetHealth', aptr!optional));
  if (!tgt) return;
  if (newhealth < 1) newhealth = 1;
  if (newhealth > int.max/4) newhealth = int.max/4; //k8: arbitrary limit
  if (tgt.bIsPlayer) {
    if (tgt.Player.PlayerState == PST_DEAD) return; // nope, cannot resurrect the player
    if (tgt.Player.MO == tgt) tgt.Player.Health = newhealth;
  }
  tgt.Health = newhealth;
}
