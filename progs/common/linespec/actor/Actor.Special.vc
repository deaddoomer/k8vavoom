//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//  Special actions
//**************************************************************************


//==========================================================================
//
//  A_BossDeath
//
//  Possibly trigger special effects if on first boss level
//
//==========================================================================
[decorate] final void A_BossDeath () {
  //printdebug("%C: A_BossDeath", self);

  bool bossDeathChecked = false;
  bool skipLevelExit = false;

  // check generic actions first
  foreach (ref VMapSpecialAction Action; Level.SpecialActions) {
    if (!Action.Special) continue;
    if (Action.TypeName == 'UMapInfoDoNothing') return; // no boss actions
    if (Action.TypeName == 'UMapInfoActions') { skipLevelExit = true; continue; }
    class!EntityEx cc = class!EntityEx(FindClassNoCase(Action.TypeName));
    if (!cc) continue;
    if (Class == cc || GetClassReplacee(Class) == cc) {
      if (!bossDeathChecked) {
        if (!CheckBossDeath()) return;
        bossDeathChecked = true;
      }
      // do not execute default "exit map" action if one of this was activated
      skipLevelExit = true;
      // trigger it only once
      VMapSpecialAction act = Action;
      Action.Special = 0;
      printdebug("%C: A_BossDeath: special action %s (tag=%s)", self, act.Special, act.Args[0]);
      Level.ExecuteActionSpecial(act.Special, act.Args[0], act.Args[1], act.Args[2], act.Args[3], act.Args[4], nullptr, 0, self);
    }
  }

  class!EntityEx rpc = class!EntityEx(GetClassReplacee(Class));
  if (!rpc) rpc = class!EntityEx(Class);

  if (!((Level.bBaronSpecial && (rpc isa 'BaronOfHell')) ||
        (Level.bCyberDemonSpecial && (rpc isa 'Cyberdemon')) ||
        (Level.bSpiderMastermindSpecial && (rpc isa 'SpiderMastermind')) ||
        (Level.bMap07Special && (rpc isa 'Arachnotron')) ||
        (Level.bMap07Special && (rpc isa 'Fatso')) ||
        (Level.bIronLichSpecial && (rpc isa 'Ironlich')) ||
        (Level.bMinotaurSpecial && (rpc isa 'Minotaur')) ||
        (Level.bDSparilSpecial && (rpc isa 'Sorcerer2'))))
  {
    return;
  }

  if (!bossDeathChecked) {
    if (!CheckBossDeath()) return;
  }

  // victory!
  if (Level.bSpecialActionKillMonsters) {
    // kill any remaining monsters
    //Level.bSpecialActionKillMonsters = false;
    LineSpecialLevelInfo(Level).P_Massacre();
    printdebug("%C: A_BossDeath: massacre", self);
  }

  if (Level.bMap07Special) {
    if (rpc isa 'Fatso') {
      //Level.bMap07Special = false;
      printdebug("%C: A_BossDeath: Fatsos dead", self);
      Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0, 0, nullptr, 0, none);
      return;
    }
    if (rpc isa 'Arachnotron') {
      //Level.bMap07Special = false;
      printdebug("%C: A_BossDeath: Babyspiders dead", self);
      Level.ExecuteActionSpecial(LNSPEC_FloorRaiseByTexture, 667, 8, 0, 0, 0, nullptr, 0, none);
      return;
    }
  } else if (Level.bSpecialActionOpenDoor) {
    //Level.bSpecialActionOpenDoor = false;
    printdebug("%C: A_BossDeath: open door", self);
    Level.ExecuteActionSpecial(LNSPEC_DoorOpen, 666, 64, 150, 0, 0, nullptr, 0, none);
    return;
  } else if (Level.bSpecialActionLowerFloor) {
    //Level.bSpecialActionLowerFloor = false;
    printdebug("%C: A_BossDeath: lower floor", self);
    Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0, 0, nullptr, 0, none);
    return;
  }

  if (!skipLevelExit) {
    printdebug("%C: A_BossDeath: default action -- level exit", self);
    Level.ExitLevel(0);
  }
}


//==========================================================================
//
//  A_KeenDie
//
//  DOOM II special, map 32. Uses special tag 666.
//
//==========================================================================
[decorate] final void A_KeenDie () {
  decorate_A_KeenDie();
}


//==========================================================================
//
//  decorate_A_KeenDie
//
//  DOOM II special, map 32. Uses special tag 666.
//
//==========================================================================
[decorate] final void decorate_A_KeenDie (optional int tag) {
  EntityEx Other;

  A_Fall();

  if (!tag) tag = 666;

  // scan the remaining thinkers to see if all Keens are dead
  // this cast doesn't change the class, it is just a runtime check
  // it is required, because `AllThinkers()` wants a `Thinker`
  foreach AllThinkers(class!EntityEx(Class), Other) {
    if (Other != self && Other.Health > 0) {
      // other mobj of the same Class not dead
      return;
    }
  }
  Level.ExecuteActionSpecial(LNSPEC_DoorOpen, tag, 16, 150, 0, 0, nullptr, 0, none);
}


//==========================================================================
//
//  A_BrainDie
//
//  Killed brain, exit level.
//
//==========================================================================
[decorate] final void A_BrainDie () {
  Level.ExitLevel(0);
}


//==========================================================================
//
//  A_GetHurt
//
//==========================================================================
[decorate] final void A_GetHurt () {
  bInCombat = true;
  if ((P_Random()%5) == 0) {
    PlaySound(PainSound, CHAN_VOICE);
    --Health;
  }
  if (Health <= 0) Died(Target, none);
}


//==========================================================================
//
//  A_KlaxonBlare
//
//==========================================================================
[decorate] final void A_KlaxonBlare () {
  --ReactionCount;
  if (ReactionCount <= 0) {
    Target = none;
    ReactionCount = 60;
    SetState(IdleState);
  }
  if (ReactionCount == 2) {
    // should make enemies go to Idle state again
    LineSpecialLevelInfo(Level).NoiseAlert(none, self);
  } else if (ReactionCount > 50) {
    PlaySound('misc/alarm', CHAN_VOICE);
  }
}


//==========================================================================
//
//  A_CheckTerrain
//
//==========================================================================
[decorate] final void A_CheckTerrain () {
  if (Origin.z == EFloor.spGetPointZ(Origin)) {
    int spc = Sector->special&SECSPEC_BASE_MASK;
    if (spc == SECSPEC_DamageInstantDeath) {
      Damage(none, none, (Health > 0 ? Health+1 : 999), 'InstantDeath', spawnBlood:true);
    } else if (spc == SECSPEC_ScrollCurrent) {
      int anglespeed = Sector->sectorTag-100;
      float terspeed = float(anglespeed%10)/16.0*35.0;
      float finean = float(anglespeed/10)*45.0;
      Velocity.x += terspeed*cos(finean);
      Velocity.y += terspeed*sin(finean);
    }
  }
}


//============================================================================
//
//  A_Print
//
//============================================================================
[decorate] final void A_Print (string Text, optional float Time, optional name FontName) {
  BasePlayer Plr;
       if (bIsPlayer) Plr = Player;
  else if (Target && Target.bIsPlayer) Plr = Target.Player;
  else return;
  Text = TranslateString(Text);
  if (!Text) return;
  if (!Time) Time = fclamp(GetCvarF('hud_notify_time'), 1.0, 7.0);
  Plr.ClientHudMessage(Text, FontName, 0, 123456, GetCvar('hud_font_color')/*CR_UNTRANSLATED*/, "", 0.5, 0.2, 0, 0, Time, 0.0, 0.0, Alpha:1.0);
}


//============================================================================
//
//  A_PrintBold
//
//============================================================================
[decorate] final void A_PrintBold (string Text, optional float Time, optional name FontName) {
  BasePlayer Plr;
       if (bIsPlayer) Plr = Player;
  else if (Target && Target.bIsPlayer) Plr = Target.Player;
  else return;
  Text = TranslateString(Text);
  if (!Text) return;
  if (!Time) Time = fclamp(GetCvarF('hud_notify_time'), 1.0, 7.0);
  Plr.ClientHudMessage(Text, FontName, 0, 123456, GetCvar('hud_font_color')/*CR_UNTRANSLATED*/, "", 0.5, 0.2, 0, 0, Time, 0.0, 0.0, Alpha:1.0);
}


//============================================================================
//
//  A_SetBlend
//
//============================================================================
[decorate] final void A_SetBlend ([color] string Col1, float A, int Tics,
                                  optional [color] string Col2, optional float A2)
{
  //k8: this must only affect the player (i believe)
  EntityEx who = self;
  if (!bIsPlayer) {
    // this might be an inventory
    Inventory inv = Inventory(self);
    if (!inv) return;
    who = EntityEx(inv.Owner);
    if (!who || !who.bIsPlayer) return;
  }

  int C1 = ParseColor(Col1, retZeroIfInvalid:true);
  int C2 = (specified_Col2 ? ParseColor(Col2, retZeroIfInvalid:true) : C1);
  if (!C1 || !C2) return; // invalid colors

  A = fclamp(A, 0.0f, 1.0f);
  A2 = (specified_A2 ? fclamp(A2, 0.0f, 1.0f) : 0.0f);

  if (A <= 0.0f && A2 <= 0.0f) return; // nothing to do

  // huh?
  if (C1 == -1) C1 = 0;
  if (C2 == -1) C2 = 0;
  if (!specified_Col2) C2 = C1;

  FlashFader F = SpawnThinker(FlashFader);
  if (!F) return;
  F.Init(float((C1>>16)&0xff)/255.0, float((C1>>8)&0xff)/255.0, float(C1&0xff)/255.0, A,
         float((C2>>16)&0xff)/255.0, float((C2>>8)&0xff)/255.0, float(C2&0xff)/255.0, A2,
         float(Tics)/35.0, who);
}


//============================================================================
//
//  A_CheckSight
//
//============================================================================
[decorate] final void A_CheckSight (state Label) {
  KeepChainResult();

  foreach (auto i; 0..MAXPLAYERS) {
    if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned) continue;
    auto cam = Level.Game.Players[i].Camera;
    if (!cam) {
      //k8: this can happens when player is switching cameras (why?)
      //    we can check it with brutalv20, with "+vscript_command give PowerStrength"
      dprint("%C: EMPTY CAMERA for player #%d!", self, i);
      continue;
    }
    if (cam.CanSee(self)) return;
  }

  DoJump(Label);
}


//============================================================================
//
//  A_CheckSightOrRange
//
//============================================================================
[decorate] final void A_CheckSightOrRange (float dist, state Label, optional bool do2dcheck) {
  KeepChainResult();

  // check distance
  foreach (auto i; 0..MAXPLAYERS) {
    if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned) continue;
    auto cam = Level.Game.Players[i].Camera;
    if (!cam) {
      //k8: this can happens when player is switching cameras (why?)
      //    we can check it with brutalv20, with "+vscript_command give PowerStrength"
      dprint("%C: EMPTY CAMERA for player #%d!", self, i);
      continue;
    }
    if (do2dcheck) {
      if (DistTo2(cam) <= dist) return; // in range
    } else {
      if (DistTo(cam) <= dist) return; // in range
    }
  }

  // check sight
  foreach (auto i; 0..MAXPLAYERS) {
    if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned) continue;
    auto cam = Level.Game.Players[i].Camera;
    if (!cam) continue;
    if (cam.CanSee(self)) return;
  }

  DoJump(Label);
}


//==========================================================================
//
//  A_CheckFloor
//
//  Checks if an object hit the floor
//
//==========================================================================
[decorate] final void A_CheckFloor (state Label) {
  KeepChainResult();
  if (Origin.z <= FloorZ) DoJump(Label);
}


//==========================================================================
//
//  A_CheckCeiling
//
//  Checks if an object hit the ceiling
//
//==========================================================================
[decorate] final void A_CheckCeiling (state Label) {
  KeepChainResult();
  if (Origin.z >= CeilingZ) DoJump(Label);
}


//============================================================================
//
//  A_CheckPlayerDone
//
//============================================================================
[decorate] final void A_CheckPlayerDone () {
  if (!bIsPlayer) Destroy();
}


//==========================================================================
//
//  A_SkullPop
//
//==========================================================================
[decorate] final void A_SkullPop (optional class!Actor SpawnType) {
  if (!class!PlayerChunk(SpawnType)) SpawnType = BloodySkull;

  bSolid = false;

  EntityEx A = Spawn(SpawnType, Origin+vector(0.0, 0.0, 48.0), default, default/*, false*/);
  if (!A) Error("cannot spawn '%C' in A_SkullPop", SpawnType);

  A.Velocity.x = (Random()-Random())*2.0*35.0;
  A.Velocity.y = (Random()-Random())*2.0*35.0;
  A.Velocity.z = (2.0+Random()/4.0)*35.0;
  A.Health = Health;
  A.Angles.yaw = Angles.yaw;

  if (bIsPlayer) {
    // attach player mobj to bloody skull
    A.Player = Player;
    A.bIsPlayer = true;
    A.ObtainInventory(EntityEx(Player.MO));
    Player = none;
    bIsPlayer = false;
    A.Player.MO = A;
    if (A.Player.Camera == self) A.Player.Camera = A;
    PlayerEx(A.Player).DamageFlash = 1.0;
    PlayerEx(A.Player).DamageFlashType = '';
    LineSpecialLevelInfo(Level).AddPlayerCorpse(self);
  }
}
