//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//  Monster specific functions for Doom
//**************************************************************************

//==========================================================================
//
//  A_Hoof
//
//  Cyberdemon move with hoof sound.
//
//==========================================================================
final void A_Hoof () {
  PlaySound('cyber/hoof', CHAN_BODY);
  A_Chase();
}


//==========================================================================
//
//  A_Metal
//
//  Cyberdemon move with metal sound.
//
//==========================================================================
final void A_Metal () {
  PlaySound('spider/walk', CHAN_BODY);
  A_Chase();
}


//==========================================================================
//
//  A_BabyMetal
//
//  Arachnotron move with metal sound.
//
//==========================================================================
final void A_BabyMetal () {
  PlaySound('baby/walk', CHAN_BODY);
  A_Chase();
}


//==========================================================================
//
//  A_FatRaise
//
//  Mancubus attack sound.
//
//==========================================================================
final void A_FatRaise () {
  A_FaceTarget();
  PlaySound('fatso/raiseguns', CHAN_WEAPON);
}


//==========================================================================
//
//  A_SkelWhosh
//
//  Ravenant attack sound.
//
//==========================================================================
final void A_SkelWhoosh () {
  if (!Target) return;

  A_FaceTarget();
  PlaySound('skeleton/swing', CHAN_WEAPON);
}


//==========================================================================
//
//  A_StartFire
//
//  Make fire start sound.
//
//==========================================================================
final void A_StartFire () {
  PlaySound('vile/firestrt', CHAN_VOICE);
  A_Fire();
}


//==========================================================================
//
//  A_FireCrackle
//
//  Fire sound.
//
//==========================================================================
final void A_FireCrackle () {
  PlaySound('vile/firecrkl', CHAN_VOICE);
  A_Fire();
}


//===========================================================================
//
//  A_BFGSpray
//
//  Spawn a BFG explosion on every monster in view
//
//===========================================================================
final void A_BFGSpray () {
  decorate_A_BFGSpray();
}


//===========================================================================
//
//  decorate_A_BFGSpray
//
//  Spawn a BFG explosion on every monster in view
//
//===========================================================================
final void decorate_A_BFGSpray (optional class!EntityEx FlashType,
                                optional int NumRays, optional int DamageAmount,
                                optional float fov, optional float Distance)
{
  TVec Dir;

  // target is the originator (player) of the missile
  // it may be missing, tho
  // also, zdoom wiki says "this function will create unpredictable effects if used on a non-missile"
  if (!bMissile || !Target) return;

  if (!FlashType) FlashType = BFGExtra;
  if (NumRays <= 0) NumRays = 40;
  if (DamageAmount <= 0) DamageAmount = 15;

  if (!specified_fov || fov <= 0) fov = 90;
  if (Distance <= 0) Distance = 1024;
  float fovd2 = fov/2.0;

  // offset angles from its attack angle
  foreach (auto i; 0..NumRays) {
    TAVec aimAng = Angles;
    //aimAng.yaw = AngleMod360(aimAng.yaw-45.0+90.0/float(NumRays)*float(i));
    aimAng.yaw = AngleMod360(aimAng.yaw-fovd2+fov/float(NumRays)*float(i));

    // target is the originator (player) of the missile
    EntityEx AimTarget = Target.AimLineAttack(out Dir, aimAng, /*16.0*64.0*/Distance);
    if (!AimTarget) continue;

    EntityEx spray = Spawn(FlashType, AimTarget.Origin+vector(0.0, 0.0, AimTarget.Height/4.0));

    if (spray && spray.bPuffGetsOwner) spray.Target = Target;

    int damage = 0;
    foreach (auto j; 0..DamageAmount) damage += (P_Random()&7)+1;

    AimTarget.Damage(Target, Target, damage, spawnBlood:true);
  }
}
