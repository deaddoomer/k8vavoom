//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  Class for Actor state action methods.
//**
//**************************************************************************

// flags for A_Chase
const [decorate] int CHF_FASTCHASE        = 1;
const [decorate] int CHF_NOPLAYACTIVE     = 2;
const [decorate] int CHF_NIGHTMAREFAST    = 4;
const [decorate] int CHF_RESURRECT        = 8;
const [decorate] int CHF_DONTMOVE         = 16;
const [decorate] int CHF_NORANDOMTURN     = 32;
const [decorate] int CHF_NODIRECTIONTURN  = 64;
const [decorate] int CHF_NOPOSTATTACKTURN = 128;
const [decorate] int CHF_STOPIFBLOCKED    = 256;

const [decorate] int CHF_DONTTURN = CHF_NORANDOMTURN|CHF_NOPOSTATTACKTURN|CHF_STOPIFBLOCKED;

// flags for A_CustomMissile
const [decorate] int CMF_AIMOFFSET       = 1;
const [decorate] int CMF_AIMDIRECTION    = 2;
const [decorate] int CMF_TRACKOWNER      = 4;
const [decorate] int CMF_CHECKTARGETDEAD = 8;
/*
const [decorate] int CMF_ABSOLUTEPITCH   = 16;
const [decorate] int CMF_OFFSETPITCH     = 32;
const [decorate] int CMF_SAVEPITCH       = 64;
const [decorate] int CMF_ABSOLUTEANGLE   = 128;
*/
//const [decorate] int CMF_BADPITCH        = 256; // for compatibility handling only - avoid!

// NOT IMPLEMENTED!
const [decorate] int CMF_ABSOLUTEPITCH = 16;
const [decorate] int CMF_OFFSETPITCH   = 32;
const [decorate] int CMF_SAVEPITCH     = 64;
const [decorate] int CMF_ABSOLUTEANGLE = 128;
const [decorate] int CMF_BADPITCH      = 256; // for compatibility handling only - avoid!

//  Flags for A_SeekerMissile
const [decorate] int SMF_LOOK     = 1;
const [decorate] int SMF_PRECISE  = 2;
const [decorate] int SMF_CURSPEED = 4;

//  Flags for A_SpawnItemEx
const [decorate] int SXF_TRANSFERTRANSLATION = 1;
const [decorate] int SXF_ABSOLUTEPOSITION    = 2;
const [decorate] int SXF_ABSOLUTEANGLE       = 4;
const [decorate] int SXF_ABSOLUTEMOMENTUM    = 8;
const [decorate] int SXF_ABSOLUTEVELOCITY    = 8; // "momentum" is deprecated by gozzo
const [decorate] int SXF_SETMASTER           = 16;
const [decorate] int SXF_NOCHECKPOSITION     = 32;
const [decorate] int SXF_TELEFRAG            = 64;
const [decorate] int SXF_CLIENTSPAWN         = 128;  // only used by Skulltag
const [decorate] int SXF_CLIENTSIDE          = 128;  // only used by Skulltag
const [decorate] int SXF_TRANSFERAMBUSHFLAG  = 256;
const [decorate] int SXF_TRANSFERPITCH       = 512;
const [decorate] int SXF_TRANSFERPOINTERS    = 1024;

const [decorate] int SXF_USEBLOODCOLOR       = 1<<11;
const [decorate] int SXF_CLEARCALLERTID      = 1<<12;
const [decorate] int SXF_MULTIPLYSPEED       = 1<<13;
const [decorate] int SXF_TRANSFERSCALE       = 1<<14;
const [decorate] int SXF_TRANSFERSPECIAL     = 1<<15; // maybe implemented
const [decorate] int SXF_CLEARCALLERSPECIAL  = 1<<16; // maybe implemented
const [decorate] int SXF_TRANSFERSTENCILCOL  = 1<<17; // maybe implemented
const [decorate] int SXF_TRANSFERALPHA       = 1<<18;
const [decorate] int SXF_TRANSFERRENDERSTYLE = 1<<19;
const [decorate] int SXF_SETTARGET           = 1<<20;
const [decorate] int SXF_SETTRACER           = 1<<21;
const [decorate] int SXF_NOPOINTERS          = 1<<22;
const [decorate] int SXF_ORIGINATOR          = 1<<23;
const [decorate] int SXF_TRANSFERSPRITEFRAME = 1<<24; // not implemented
const [decorate] int SXF_TRANSFERROLL        = 1<<25;
const [decorate] int SXF_ISTARGET            = 1<<26;
const [decorate] int SXF_ISMASTER            = 1<<27;
const [decorate] int SXF_ISTRACER            = 1<<28;
// perform line trace, to not spawn the thing inside wall or something
const [decorate] int SXF_MUZZLE_TRACE        = 1<<31;

// morph constants
const [decorate] int MRF_ADDSTAMINA        = 1;
const [decorate] int MRF_FULLHEALTH        = 2;
const [decorate] int MRF_UNDOBYTOMEOFPOWER = 4;
const [decorate] int MRF_UNDOBYCHAOSDEVICE = 8;
const [decorate] int MRF_FAILNOTELEFRAG    = 16;
const [decorate] int MRF_FAILNOLAUGH       = 32;
const [decorate] int MRF_WHENINVULNERABLE  = 64;
const [decorate] int MRF_LOSEACTUALWEAPON  = 128;
const [decorate] int MRF_NEWTIDBEHAVIOUR   = 256;
const [decorate] int MRF_UNDOBYDEATH       = 512;
const [decorate] int MRF_UNDOBYDEATHFORCED = 1024;
const [decorate] int MRF_UNDOBYDEATHSAVES  = 2048;

// flags for A_CustomBulletAttack
const [decorate] int CBAF_AIMFACING     = 1;
const [decorate] int CBAF_NORANDOM      = 2;
const [decorate] int CBAF_EXPLICITANGLE = 4;
const [decorate] int CBAF_NOPITCH       = 8;
const [decorate] int CBAF_NORANDOMPUFFZ = 16;
const [decorate] int CBAF_PUFFTARGET    = 32;
const [decorate] int CBAF_PUFFMASTER    = 64;
const [decorate] int CBAF_PUFFTRACER    = 128;
// k8vavoom special
const [decorate] int CBAF_DISABLEMISSILE = 0x100_0000; // do not spawn missile even if it is specified
const [decorate] int CBAF_NOMISSILENO3D  = 0x200_0000; // do not spawn missile if 3d models are disabled
const [decorate] int CBAF_MISSILEHRANDOM = 0x400_0000; // move missile left or right a little (but aim it at hit destination)

// flags for A_FireBullets
const [decorate] int FBF_USEAMMO       = 1;
const [decorate] int FBF_NORANDOM      = 2;
const [decorate] int FBF_EXPLICITANGLE = 4;
const [decorate] int FBF_NOPITCH       = 8;
const [decorate] int FBF_NOFLASH       = 16;
const [decorate] int FBF_NORANDOMPUFFZ = 32;
const [decorate] int FBF_PUFFTARGET    = 64;
const [decorate] int FBF_PUFFMASTER    = 128;
const [decorate] int FBF_PUFFTRACER    = 256;
// k8vavoom special
const [decorate] int FBF_DISABLEMISSILE   = 0x100_0000; // do not spawn missile even if it is specified
const [decorate] int FBF_NOMISSILENO3D    = 0x200_0000; // do not spawn missile if 3d models are disabled
const [decorate] int FBF_MISSILEHRANDOM   = 0x400_0000; // move missile left or right a little (but aim it at hit destination)
const [decorate] int FBF_MISSILEEXSCATTER = 0x800_0000; // extra scatter for multiple shots

// flags for A_LookEx
const [decorate] int LOF_NOSIGHTCHECK    = 1;
const [decorate] int LOF_NOSOUNDCHECK    = 2;
const [decorate] int LOF_DONTCHASEGOAL   = 4;
const [decorate] int LOF_NOSEESOUND      = 8;
const [decorate] int LOF_FULLVOLSEESOUND = 16;
const [decorate] int LOF_NOJUMP          = 32;

// flags for A_Respawn
const [decorate] int RSF_FOG        = 1;
const [decorate] int RSF_KEEPTARGET = 2;
const [decorate] int RSF_TELEFRAG   = 4;

// flags for A_ChangeVelocity
const [decorate] int CVF_RELATIVE = 1;
const [decorate] int CVF_REPLACE = 2;

// flags for A_WeaponReady

const [decorate] int WRF_NOBOB       = 1;
const [decorate] int WRF_NOSWITCH    = 2;
const [decorate] int WRF_NOPRIMARY   = 4;
const [decorate] int WRF_NOSECONDARY = 8;
const [decorate] int WRF_NOFIRE      = 12;
const [decorate] int WRF_ALLOWRELOAD = 16;
const [decorate] int WRF_ALLOWZOOM   = 32;
const [decorate] int WRF_DISABLESWITCH = 64;
const [decorate] int WRF_ALLOWREFIRE = 8192; // k8vavoom specific
// not implemented yet
const [decorate] int WRF_ALLOWUSER1 = 128;
const [decorate] int WRF_ALLOWUSER2 = 256;
const [decorate] int WRF_ALLOWUSER3 = 512;
const [decorate] int WRF_ALLOWUSER4 = 1024;

// flags for A_RailAttack and A_CustomRailgun
const [decorate] int RGF_SILENT        = 1;
const [decorate] int RGF_NOPIERCING    = 2;
// not implemented
const [decorate] int RGF_EXPLICITANGLE = 4;
const [decorate] int RGF_FULLBRIGHT    = 8;
const [decorate] int RGF_CENTERZ       = 16;
const [decorate] int RGF_NORANDOMPUFFZ = 32;

// flags for A_Mushroom
const [decorate] int MSF_Standard = 0;
const [decorate] int MSF_Classic  = 1;
const [decorate] int MSF_DontHurt = 2;

// flags for A_Blast
const [decorate] int BF_USEAMMO      = 1;
const [decorate] int BF_DONTWARN     = 2;
const [decorate] int BF_AFFECTBOSSES = 4;
const [decorate] int BF_NOIMPACTDAMAGE = 8;

// flags for A_CustomPunch
const [decorate] int CPF_USEAMMO       = 1;
const [decorate] int CPF_DAGGER        = 2;
const [decorate] int CPF_PULLIN        = 4;
const [decorate] int CPF_NORANDOMPUFFZ = 8;
const [decorate] int CPF_NOTURN        = 16;
const [decorate] int CPF_STEALARMOR    = 32; // not implemented yet

// A_PlaySound constants
const [decorate] int CHAN_AUTO = 0;
const [decorate] int CHAN_VOICE = 1;
const [decorate] int CHAN_WEAPON = 2;
const [decorate] int CHAN_ITEM = 3;
const [decorate] int CHAN_BODY = 4;

// channel 8 is "auto"
const [decorate] int CHAN_0 = 0;
const [decorate] int CHAN_1 = 1;
const [decorate] int CHAN_2 = 2;
const [decorate] int CHAN_3 = 3;
const [decorate] int CHAN_4 = 4;
const [decorate] int CHAN_5 = 5;
const [decorate] int CHAN_6 = 6;
const [decorate] int CHAN_7 = 7;
const [decorate] int CHAN_8 = 0;
const [decorate] int CHAN_9 = 0;

const [decorate] int CHAN_SLOT0 = 0;
const [decorate] int CHAN_SLOT1 = 1;
const [decorate] int CHAN_SLOT2 = 2;
const [decorate] int CHAN_SLOT3 = 3;
const [decorate] int CHAN_SLOT4 = 4;
const [decorate] int CHAN_SLOT5 = 5;
const [decorate] int CHAN_SLOT6 = 6;
const [decorate] int CHAN_SLOT7 = 7;
const [decorate] int CHAN_SLOT8 = 0;
const [decorate] int CHAN_SLOT9 = 0;

const [decorate] int CHAN_SLOT_0 = 0;
const [decorate] int CHAN_SLOT_1 = 1;
const [decorate] int CHAN_SLOT_2 = 2;
const [decorate] int CHAN_SLOT_3 = 3;
const [decorate] int CHAN_SLOT_4 = 4;
const [decorate] int CHAN_SLOT_5 = 5;
const [decorate] int CHAN_SLOT_6 = 6;
const [decorate] int CHAN_SLOT_7 = 7;
const [decorate] int CHAN_SLOT_8 = 0;
const [decorate] int CHAN_SLOT_9 = 0;


const [decorate] int CHAN_LISTENERZ = 0; //(8): Sound is played from the listener's Z-height. (Needs verifying)
const [decorate] int CHAN_MAYBE_LOCAL = 0; //(16): Sound is subject to compat_silentpickup and will not play if the sound is made by an actor other than the local player's camera when compatibility flag is enabled.
const [decorate] int CHAN_UI = 0; //(32): Sound is considered an interface sound and is not recorded into savegames.
const [decorate] int CHAN_NOPAUSE = 0; //(64): Sound is not paused by menus and will play through time-stopping powerup effects.
const [decorate] int CHAN_LOOP = 0; //(256): Sound loops.
const [decorate] int CHAN_NOSTOP = 0; //(4096): Do not override the sound that is currently playing on the same channel with this one. This is only the case if both sounds are the same. If they are different, the playing sound is overridden regardless.


const [decorate] int XF_HURTSOURCE         = 0x01; // Hurts the source: if set, the source can be damaged by the explosion. Note that the source is not necessarily the calling actor. This flag is set by default.
const [decorate] int XF_NOTMISSILE         = 0x02; // Not a missile: if set, the calling actor is considered to be the source. By default, the calling actor is assumed to be a projectile, and the source is therefore considered to be the calling actor's target.
const [decorate] int XF_EXPLICITDAMAGETYPE = 0x04; // The damagetype parameter will never change to the actor's damagetype.
const [decorate] int XF_NOSPLASH           = 0x08; // No splash: if set, the explosion does not create any terrain splashes.
const [decorate] int XF_THRUSTZ            = 0; // this is new in GZDoom 4.1.3, and we don't care


const [decorate] int SPF_FORCECLAMP  = 0x01;
const [decorate] int SPF_INTERPOLATE = 0x00;


// flags for A_Fade*
enum [decorate] /*EFadeFlags*/ {
  FTF_REMOVE = 1<<0,
  FTF_CLAMP  = 1<<1,
};


const [decorate] int GFF_NOEXTCHANGE = 1;


// flags for A_VileAttack
enum [decorate] /*EVileAttackFlags*/ {
  VAF_DMGTYPEAPPLYTODIRECT = 1,
};


// flags for A_TakeInventory and A_TakeFromTarget
enum [decorate] /*ETakeFlags*/ {
  TIF_NOTAKEINFINITE = 1,
};


// flags for A_Remove*
enum [decorate] /*ERemoveFlags*/ {
  RMVF_MISSILES   = 0x00000001,
  RMVF_NOMONSTERS = 0x00000002,
  RMVF_MISC       = 0x00000004,
  RMVF_EVERYTHING = 0x00000008,
  RMVF_EXFILTER   = 0x00000010,
  RMVF_EXSPECIES  = 0x00000020,
  RMVF_EITHER     = 0x00000040,
};


// flags for A_RadiusGive
enum [decorate] /*ERadiusGiveFlags*/ {
  RGF_GIVESELF  = 1,
  RGF_PLAYERS   = 1<<1,
  RGF_MONSTERS  = 1<<2,
  RGF_OBJECTS   = 1<<3,
  RGF_VOODOO    = 1<<4,
  RGF_CORPSES   = 1<<5,
  RGF_NOTARGET  = 1<<6,
  RGF_NOTRACER  = 1<<7,
  RGF_NOMASTER  = 1<<8,
  RGF_CUBE      = 1<<9,
  RGF_NOSIGHT   = 1<<10,
  RGF_MISSILES  = 1<<11,
  RGF_INCLUSIVE = 1<<12,
  RGF_ITEMS     = 1<<13,
  RGF_KILLED    = 1<<14,
  RGF_EXFILTER  = 1<<15,
  RGF_EXSPECIES = 1<<16,
  RGF_EITHER    = 1<<17,
};


enum [decorate] /*ERadiusThrustFlags*/ {
  RTF_AFFECTSOURCE = 1,
  RTF_NOIMPACTDAMAGE = 2,
  RTF_NOTMISSILE = 4,
  RTF_THRUSTZ = 16,
};


// flags for A_PainAttack
enum [decorate] /*EPainAttackFlags*/ {
  PAF_NOSKULLATTACK = 1,
  PAF_AIMFACING     = 2,
  PAF_NOTARGET      = 4,
};


// flags for A_Damage (Master/Target/Tracer/Children/Siblings/Self) series
enum [decorate] /*EDamageFlags*/ {
  DMSS_FOILINVUL = 0x00000001,
  DMSS_AFFECTARMOR = 0x00000002,
  DMSS_KILL = 0x00000004,
  DMSS_NOFACTOR = 0x00000008,
  DMSS_FOILBUDDHA = 0x00000010,
  DMSS_NOPROTECT = 0x00000020,
  DMSS_EXFILTER = 0x00000040,
  DMSS_EXSPECIES = 0x00000080,
  DMSS_EITHER = 0x00000100,
  DMSS_INFLICTORDMGTYPE = 0x00000200,
};


enum [decorate] /*EFireCustomMissileFlags*/ {
  FPF_AIMATANGLE = 1,
  FPF_TRANSFERTRANSLATION = 2,
  FPF_NOAUTOAIM = 4,
};


// A_ZoomFactor flags
const [decorate] int ZOOM_INSTANT = 1;
const [decorate] int ZOOM_NOSCALETURNING = 2;


// flags for A_Kill (Master/Target/Tracer/Children/Siblings) series
enum [decorate] /*EKillFlags*/ {
  KILS_FOILINVUL    = 0x00000001,
  KILS_KILLMISSILES = 0x00000002,
  KILS_NOMONSTERS   = 0x00000004,
  KILS_FOILBUDDHA   = 0x00000008,
  KILS_EXFILTER     = 0x00000010,
  KILS_EXSPECIES    = 0x00000020,
  KILS_EITHER       = 0x00000040,
};


// for A_Saw
const [decorate] int SF_NORANDOM = 1;
const [decorate] int SF_RANDOMLIGHTMISS = 2;
const [decorate] int SF_RANDOMLIGHTHIT = 4;
const [decorate] int SF_RANDOMLIGHTBOTH = 6;
const [decorate] int SF_NOUSEAMMOMISS = 8;
const [decorate] int SF_NOUSEAMMO = 16;
const [decorate] int SF_NOPULLIN = 32;
const [decorate] int SF_NOTURN = 64;
const [decorate] int SF_STEALARMOR = 128; // not implemented


// flags for A_AlertMonsters
enum [decorate] /*EAlertFlags*/ {
  AMF_TARGETEMITTER   = 1,
  AMF_TARGETNONPLAYER = 2,
  AMF_EMITFROMTARGET  = 4,
}


// flags for A_QuakeEx
enum [decorate] /*EQuakeFlags*/ {
  QF_RELATIVE      = 1,
  QF_SCALEDOWN     = 1<<1,
  QF_SCALEUP       = 1<<2,
  QF_MAX           = 1<<3,
  QF_FULLINTENSITY = 1<<4,
  QF_WAVE          = 1<<5,
};


enum [decorate] /*EParticleFlags*/ {
  SPF_FULLBRIGHT   = 1,
  SPF_RELPOS       = 1<<1,
  SPF_RELVEL       = 1<<2,
  SPF_RELACCEL     = 1<<3,
  SPF_RELANG       = 1<<4,
  SPF_NOTIMEFREEZE = 1<<5,
};
const [decorate] int SPF_RELATIVE = SPF_RELPOS|SPF_RELVEL|SPF_RELACCEL|SPF_RELANG;


// A_CheckProximity flags
enum [decorate] /*EProximityFlags*/ {
  CPXF_ANCESTOR    = 1,
  CPXF_LESSOREQUAL = 1<<1,
  CPXF_NOZ         = 1<<2,
  CPXF_COUNTDEAD   = 1<<3,
  CPXF_DEADONLY    = 1<<4,
  CPXF_EXACT       = 1<<5,
  CPXF_SETTARGET   = 1<<6,
  CPXF_SETMASTER   = 1<<7,
  CPXF_SETTRACER   = 1<<8,
  CPXF_FARTHEST    = 1<<9,
  CPXF_CLOSEST     = 1<<10,
  CPXF_SETONPTR    = 1<<11,
  CPXF_CHECKSIGHT  = 1<<12,
};


enum [decorate] /*WARPF*/ {
  WARPF_ABSOLUTEOFFSET    = 0x1,
  WARPF_ABSOLUTEANGLE     = 0x2,
  WARPF_USECALLERANGLE    = 0x4,

  WARPF_NOCHECKPOSITION   = 0x8,

  WARPF_INTERPOLATE       = 0x10,
  WARPF_WARPINTERPOLATION = 0x20,
  WARPF_COPYINTERPOLATION = 0x40,

  WARPF_STOP              = 0x80,
  WARPF_TOFLOOR           = 0x100,
  WARPF_TESTONLY          = 0x200,
  WARPF_ABSOLUTEPOSITION  = 0x400,
  WARPF_BOB               = 0x800,
  WARPF_MOVEPTR           = 0x1000,
  WARPF_USEPTR            = 0x2000,
  WARPF_USETID            = 0x2000,
  WARPF_COPYVELOCITY      = 0x4000,
  WARPF_COPYPITCH         = 0x8000,
};


enum [decorate] /*FAF_Flags*/ {
  FAF_BOTTOM = 1,
  FAF_MIDDLE = 2,
  FAF_TOP    = 4,
  FAF_NODISTFACTOR = 8, // deprecated
};


// flags for A_CheckLOF
enum [decorate] /*ELOFFlags*/ {
  CLOFF_NOAIM_VERT =      0x1,
  CLOFF_NOAIM_HORZ =      0x2,

  CLOFF_JUMPENEMY =     0x4,
  CLOFF_JUMPFRIEND =      0x8,
  CLOFF_JUMPOBJECT =      0x10,
  CLOFF_JUMPNONHOSTILE =    0x20,

  CLOFF_SKIPENEMY =     0x40,
  CLOFF_SKIPFRIEND =      0x80,
  CLOFF_SKIPOBJECT =      0x100,
  CLOFF_SKIPNONHOSTILE =    0x200,

  CLOFF_MUSTBESHOOTABLE =   0x400,

  CLOFF_SKIPTARGET =      0x800,
  CLOFF_ALLOWNULL =     0x1000,
  CLOFF_CHECKPARTIAL =    0x2000,

  CLOFF_MUSTBEGHOST =     0x4000,
  CLOFF_IGNOREGHOST =     0x8000,

  CLOFF_MUSTBESOLID =     0x10000,
  CLOFF_BEYONDTARGET =    0x20000,

  CLOFF_FROMBASE =      0x40000,
  CLOFF_MUL_HEIGHT =      0x80000,
  CLOFF_MUL_WIDTH =     0x100000,

  CLOFF_JUMP_ON_MISS =    0x200000,
  CLOFF_AIM_VERT_NOOFFSET = 0x400000,

  CLOFF_SETTARGET =     0x800000,
  CLOFF_SETMASTER =     0x1000000,
  CLOFF_SETTRACER =     0x2000000,

  CLOFF_SKIPOBSTACLES = CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_SKIPNONHOSTILE,
  CLOFF_NOAIM = CLOFF_NOAIM_VERT|CLOFF_NOAIM_HORZ
};


// Flags for GetAngle
enum [decorate] /*EGetAngleFlags*/ {
  GAF_RELATIVE = 1,
  GAF_SWITCH = 1<<1,
};


// Flags for GetZAt
enum [decorate] /*EZFlags*/ {
  GZF_ABSOLUTEPOS =     1,      // Use the absolute position instead of an offsetted one.
  GZF_ABSOLUTEANG =     1 << 1,   // Don't add the actor's angle to the parameter.
  GZF_CEILING =         1 << 2,   // Check the ceiling instead of the floor.
  GZF_3DRESTRICT =      1 << 3,   // Ignore midtextures and 3D floors above the pointer's z.
  GZF_NOPORTALS =       1 << 4,   // Don't pass through any portals.
  GZF_NO3DFLOOR =       1 << 5,   // Pass all 3D floors.
};

enum [decorate] /*FMDFlags*/ {
  FMDF_NOPITCH     = 1<<0,
  FMDF_INTERPOLATE = 1<<1,
  FMDF_NOANGLE     = 1<<2,
};


// flags for A_BFGSpray
enum [decorate] /*EBFGSprayFlags*/ {
  BFGF_HURTSOURCE = 1,
  BFGF_MISSILEORIGIN = 2,
};


enum [decorate] /*ERaise*/ {
  RF_TRANSFERFRIENDLINESS = 1,
  RF_NOCHECKPOSITION = 2,
}


// flags for A_Teleport
enum [decorate] /*ETeleportFlags*/ {
  TF_TELEFRAG =   0x00000001, // Allow telefrag in order to teleport.
  TF_RANDOMDECIDE = 0x00000002, // Randomly fail based on health. (A_Srcr2Decide)
  TF_FORCED =     0x00000004, // Forget what's in the way. TF_Telefrag takes precedence though.
  TF_KEEPVELOCITY = 0x00000008, // Preserve velocity.
  TF_KEEPANGLE =    0x00000010, // Keep angle.
  TF_USESPOTZ =   0x00000020, // Set the z to the spot's z, instead of the floor.
  TF_NOSRCFOG =   0x00000040, // Don't leave any fog behind when teleporting.
  TF_NODESTFOG =    0x00000080, // Don't spawn any fog at the arrival position.
  TF_USEACTORFOG =  0x00000100, // Use the actor's TeleFogSourceType and TeleFogDestType fogs.
  TF_NOJUMP =     0x00000200, // Don't jump after teleporting.
  TF_OVERRIDE =   0x00000400, // Ignore NOTELEPORT.
  TF_SENSITIVEZ =   0x00000800, // Fail if the actor wouldn't fit in the position (for Z).

  TF_KEEPORIENTATION = TF_KEEPVELOCITY|TF_KEEPANGLE,
  TF_NOFOG = TF_NOSRCFOG|TF_NODESTFOG,
};


// gozzo constant
const [decorate] int ChunkFlags = SXF_TRANSFERTRANSLATION|SXF_ABSOLUTEVELOCITY;


enum [decorate] /*ESkillProperty*/ {
  SKILLP_FastMonsters,
  SKILLP_Respawn,
  SKILLP_RespawnLimit,
  SKILLP_DisableCheats,
  SKILLP_AutoUseHealth,
  SKILLP_SpawnFilter,
  SKILLP_EasyBossBrain,
  SKILLP_ACSReturn,
  SKILLP_NoPain,
  SKILLP_EasyKey,
  SKILLP_SlowMonsters,
  SKILLP_Infight,
  SKILLP_PlayerRespawn,
};

// floating point properties
enum [decorate] /*EFSkillProperty*/ {
  SKILLP_AmmoFactor,
  SKILLP_DropAmmoFactor,
  SKILLP_ArmorFactor,
  SKILLP_HealthFactor,
  SKILLP_DamageFactor,
  SKILLP_Aggressiveness,
  SKILLP_MonsterHealth,
  SKILLP_FriendlyHealth,
  SKILLP_KickbackFactor,
};


// flags for A_SelectWeapon
enum [decorate] /*ESelectWeaponFlags*/ {
  SWF_SELECTPRIORITY = 1,
};
