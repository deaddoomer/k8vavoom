//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  Class for Actor state action methods.
//**
//**************************************************************************
class Actor : EntityEx abstract [decorate];


//==========================================================================
//
//  Destroyed
//
//==========================================================================
override void Destroyed () {
  // remove from creature queue
  if (bMonster && bCorpse) A_DeQueueCorpse();
  ::Destroyed();
}


//===========================================================================
//
//  A_Log
//
//===========================================================================
[decorate] final void A_Log (string text) {
  print("<------------------------------->");
  print("%s", TranslateString(text));
  print("<------------------------------->");
}


//===========================================================================
//
//  A_LogInt
//
//===========================================================================
[decorate] final void A_LogInt (int num) {
  print("<------------------------------->");
  print("%i", num);
  print("<------------------------------->");
}


//===========================================================================
//
//  A_ChangeVelocity
//
//===========================================================================
[decorate] final void A_ChangeVelocity (float x, optional float y, optional float z, optional int flags, optional int aptr) {
  Entity tgt = DecorDoAAPtr('A_ChangeVelocity', aptr!optional);
  if (!tgt) return;

  TVec nv = vector(x, y, z);

  if (flags&CVF_RELATIVE) {
    // relative axes - make x, y relative to actor's current angle
    float sina, cosa;
    sincos(tgt.Angles.yaw, out sina, out cosa);
    nv.x = x*cosa-y*sina;
    nv.y = x*sina+y*cosa;
  }

  // translate to k8vavoom velocity
  nv *= 35.0;

  if (flags&CVF_REPLACE) {
    // discard old velocity - replace old velocity with new velocity
    tgt.Velocity = nv;
  } else {
    // add new velocity to old velocity
    tgt.Velocity += nv;
  }

  tgt.Velocity = vclampscale(tgt.Velocity, MAXMOVE);
}


//===========================================================================
//
//  A_ScaleVelocity
//
//===========================================================================
[decorate] final void A_ScaleVelocity (float scale, optional int aptr) {
  Entity tgt = DecorDoAAPtr('A_ScaleVelocity', aptr!optional);
  if (!tgt) return;
  tgt.Velocity.x *= scale;
  tgt.Velocity.y *= scale;
  tgt.Velocity.z *= scale;
  tgt.Velocity = vclampscale(tgt.Velocity, MAXMOVE);
}


//===========================================================================
//
//  A_SetGravity
//
//===========================================================================
[decorate] final void A_SetGravity (float Grav) {
  Gravity = fclamp(Grav, 0, 1);
}


//===========================================================================
//
//  A_Respawn
//
//===========================================================================
[decorate] final void A_Respawn (optional int Flags) {
  TVec Org;
  bool OK = false;
  Org.x = SpawnPoint.x;
  Org.y = SpawnPoint.y;
  Org.z = GetPointZClamped(ref XLevel.PointInSector(Org)->floor, Org);
  SetOrigin(Org, properFloorCheck:true);
  bSolid = true;
  Height = default.Height;
  if (Flags&4) {
    if (TeleportMove(Org, true)) OK = true;
  } else if (TestLocation()) {
    OK = true;
  }
  if (OK) {
    Health = InitialHealth;

    // [KS] don't keep target, because it could be self if the monster committed suicide
    //      ...actually it's better off an option, so you have better control over monster behavior
    if (!(Flags&2)) {
      Target = none;
      LastHeard = none;
      LastEnemy = none;
    } else {
      // don't attack yourself (Re: "Marine targets itself after suicide")
      if (Target == self) Target = none;
      if (LastEnemy == self) LastEnemy = none;
    }

    // restore default flags
    RespawnResetFlags();
    SetState(IdleState);
    bInvisible = false;
    if (Flags&1) {
      Spawn(TeleportFog, Origin+vector(0.0, 0.0, LineSpecialGameInfo(Level.Game).TeleFogHeight));
    }
    if (CountsAsKill()) ++Level.TotalKills;
  } else {
    bSolid = false;
  }
}


//==========================================================================
//
//  A_Feathers
//
//==========================================================================
[decorate] final void A_Feathers () {
  int count;

  if (Health > 0) {
    // pain
    count = (P_Random() < 32 ? 2 : 1);
  } else {
    // death
    count = 5+(P_Random()&3);
  }

  foreach (auto i; 0..count) {
    EntityEx mo = Spawn(Feather, Origin+vector(0.0, 0.0, 20.0));
    mo.Target = self;
    mo.Velocity.x = (Random()-Random())*35.0;
    mo.Velocity.y = (Random()-Random())*35.0;
    mo.Velocity.z = (1.0+Random()*2.0)*35.0;
    mo.SetState(GetStatePlus(mo.IdleState, P_Random()&7));
  }
}


//==========================================================================
//
//  A_RocketInFlight
//
//==========================================================================
[decorate] final void A_RocketInFlight () {
  PlaySound('misc/missileinflight', CHAN_VOICE);
  SpawnPuff(Origin, MISSILERANGE, MiniMissilePuff, false);
  EntityEx A = Spawn(RocketTrail, Origin-Velocity/35.0);
  if (A) A.Velocity.z = 1.0*35.0;
}


//==========================================================================
//
//  A_Bang4Cloud
//
//==========================================================================
[decorate] final void A_Bang4Cloud () {
  Spawn(Bang4Cloud, Origin+vector((Random()-Random())*5.0/8.0, (Random()-Random())*5.0/8.0, 0.0));
}


//==========================================================================
//
//  A_DropFire
//
//==========================================================================
[decorate] final void A_DropFire () {
  Actor A = SpawnEntityChecked(class!Actor, FireDroplet, Origin+vector(0.0, 0.0, 24.0));
  if (A) {
    A.Velocity.z = -35.0;
    RadiusAttack(self, 64, 64.0, false, 'Fire');
  }
}


//==========================================================================
//
//  decorate_A_GiveQuestItem
//
//==========================================================================
[decorate] final void decorate_A_GiveQuestItem (int QuestType) {
  // this function does a lot more than just this
  if (DeathSound) {
    PlaySound(DeathSound, CHAN_VOICE);
    PlaySound(DeathSound, 6);
  }

  // give quest item for destroying important object
  // basicly all object using this function does this
  class!Inventory QClass = class!Inventory(FindClass(name(va("QuestItem%d", QuestType))));
  if (QClass) {
    EntityEx(Level.Game.Players[0].MO).GiveInventoryType(QClass);
    Level.Game.Players[0].cprint("$txt_quest_%d", QuestType);
  }
}


//==========================================================================
//
//  A_RemoveForceField
//
//==========================================================================
[decorate] final void A_RemoveForceField () {
  bSpecial = false;
  foreach (auto i; 0..Sector.lines.length) {
    line_t *line = Sector->lines[i];
    if (line->backsector && line->special == LNSPEC_ForceField) {
      line->flags &= ~(ML_BLOCKING|ML_BLOCKEVERYTHING);
      line->special = 0;
      XLevel.Sides[line->sidenum[0]].MidTexture = 0;
      XLevel.Sides[line->sidenum[1]].MidTexture = 0;
    }
  }
}


//==========================================================================
//
//  A_PigPain
//
//==========================================================================
[decorate] final void A_PigPain () {
  A_Pain();
  if (Origin.z <= FloorZ) Velocity.z = 3.5*35.0;
}


//============================================================================
//
//  A_ClassBossHealth
//
//============================================================================
[decorate] final void A_ClassBossHealth () {
  if (Level.Game.netgame && !Level.Game.deathmatch) {
    // co-op only
    if (!Special1) {
      Health *= 5;
      Special1 = true; // has been initialised
    }
  }
}


//==========================================================================
//
//  A_PreExplode
//
//  This method is used to set properties to exploding things
//  just before exploding. This one can be used in DECORATE now.
//
//==========================================================================
[decorate] final void A_PreExplode (int Style, float A) {
  RenderStyle = Style;
  Alpha = A;
}


//============================================================================
//
//  A_BarrelDestroy
//
//  This is only a stub method
//
//============================================================================
[decorate] final void A_BarrelDestroy () {
  // In ZDoom this method is used to preserve barrels because of
  // deathmatch flags... here the only relevant function for it
  // would be to make things invisible.
  // k8: no, Janis, this method should destroy object
  //bRespawnItems = !!GetCvar('deathmatch');
  //bWeaponsStay = netgame && !GetCvar('deathmatch');
  if (Level.Game.netgame && Level.Game.deathmatch && GetCvarB('sv_barrel_respawn')) {
    //print("*** BARREL HIDDEN!");
    RenderStyle = STYLE_None;
    bSolid = false;
    bShootable = false;
    bPickUp = false;
    bNoBlood = true;
    //FIXME: if (!bDontCorpse)?
    bCorpse = true; // just in case
    bMonster = false;
    //bNoGravity = true; // don't bother
    //bInvulnerable = true; // for now
  } else {
    //print("*** BARREL DEAD!");
    DoJump(none); // stop
  }
}


//============================================================================
//
//  A_PlayerSkinCheck
//
//  This is only a stub method
//
//============================================================================
[decorate] final void A_PlayerSkinCheck (state label) {
  // Vavoom doesn't support skins as of now...
  // but there are some MODs that use this method
  return;
}


//==========================================================================
//
//  A_BeShadowyFoe
//
//==========================================================================
[decorate] final void A_BeShadowyFoe () {
  RenderStyle = STYLE_Translucent;
  Alpha = 0.333;
  bFriendly = false;
}


//==========================================================================
//
//  A_FreeTargMobj
//
//==========================================================================
[decorate] final void A_FreeTargMobj () {
  Velocity = vector(0.0, 0.0, 0.0);
  Origin.z = CeilingZ+4.0;
  bIntrJustMoved = false; // disable interpolation
  Gravity = 1.0;
  bSolid = false;
  bShootable = false;
  bFloat = false;
  bCountKill = false;
  bMonster = false;
  bSkullFly = false;
  bIceCorpse = false;
  bNoGravity = true;
  bDropOff = true;
  bCorpse = true;
  bPassMobj = false;
  RenderStyle = STYLE_None;
  Alpha = 0.0;
  Player = none;
  bIsPlayer = false;
  Health = -1000; // don't resurrect
}


//==========================================================================
//
//  A_ExecActionSpecial
//
//==========================================================================
[decorate] final int A_ExecActionSpecial (int Arg1, int Arg2, int Arg3, int Arg4, int Arg5, int aSpecial) {
  return Level.ExecuteActionSpecial(aSpecial, Arg1, Arg2, Arg3, Arg4, Arg5, nullptr, 0, self);
}


//==========================================================================
//
//  A_CallSpecial
//
//==========================================================================
[decorate] final bool A_CallSpecial (int aSpecial, optional int Arg1, optional int Arg2, optional int Arg3, optional int Arg4, optional int Arg5) {
  return Level.ExecuteActionSpecial(aSpecial, Arg1, Arg2, Arg3, Arg4, Arg5, nullptr, 0, self);
}


//==========================================================================
//
//  A_GiveQuestItem
//
//==========================================================================
[decorate] final void A_GiveQuestItem () {
  decorate_A_GiveQuestItem(int(Speed/35.0));
}


//==========================================================================
//
//  A_ItBurnsItBurns
//
//==========================================================================
[decorate] final void A_ItBurnsItBurns () {
  DeathSound = 'human/imonfire';
  A_Scream();
  if (bIsPlayer) {
    Weapon wpn = PlayerEx(Player).ReadyWeapon;
    if (!wpn) return;
    state WaveState = wpn.FindState('BurnWave');
    if (WaveState) {
      Player.SetViewObject(wpn);
      Player.SetViewState(PS_WEAPON, WaveState);
      Player.SetViewState(PS_FLASH, none);
    }
  }
}


//==========================================================================
//
//  A_SetRoll
//
//==========================================================================
[decorate] final void A_SetRollExt (float newa) {
  Angles.roll = /*AngleMod360*/(newa);
}


//==========================================================================
//
//  A_SetYaw
//
//==========================================================================
[decorate] final void A_SetYawExt (float newa) {
  Angles.yaw = /*AngleMod360*/(newa);
}


//==========================================================================
//
//  A_SetPitchExt
//
//==========================================================================
[decorate] final void A_SetPitchExt (float newa) {
  Angles.pitch = /*AngleMod360*/(newa);
}


//==========================================================================
//
//  A_SetScale
//
//  scaleX: the actor's new horizontal scale.
//          Using negative values will result in mirroring the sprite on the axis.
//  scaleY: the actor's new vertical scale. If this parameter is not given, or
//          is set to 0, scaleX is used as well. Default is 0.
//  ptr: The actor to change its scale. This is an actor pointer.
//  usezero: If this is false and scaleY is 0, scaleY uses the same value
//           passed to scaleX, otherwise if it is true, the value of scaleY
//           is used, instead. Default is false.
//==========================================================================
[decorate] final void A_SetScale (float ascaleX, optional float ascaleY, optional int aptr, optional bool usezero) {
  Entity tgt = DecorDoAAPtr('A_SetScale', aptr!optional);
  if (!tgt) return;
  tgt.ScaleX = ascaleX;
  tgt.ScaleY = (usezero || ascaleY != 0 ? ascaleY : ascaleX);
}


//==========================================================================
//
//  A_SetSize
//
//==========================================================================
[decorate] final bool A_SetSize (optional float newradius, optional float newheight, optional bool testpos) {
  auto oldRadius = Radius;
  auto oldHeight = Height;
  if (specified_newradius && newradius >= 0) Radius = newradius;
  if (specified_newheight && newheight >= 0) Height = newheight;
  if (!testpos || TestLocation()) return true;
  // revert
  Radius = oldRadius;
  Height = oldHeight;
  return false;
}


//==========================================================================
//
//  A_SetScaleXExt
//
//==========================================================================
[decorate] final void A_SetScaleXExt (float scale) {
  ScaleX = scale;
}


//==========================================================================
//
//  A_SetScaleYExt
//
//==========================================================================
[decorate] final void A_SetScaleYExt (float scale) {
  ScaleY = scale;
}


//==========================================================================
//
//  A_ChangeScaleXExt
//
//==========================================================================
[decorate] final void A_ChangeScaleXExt (float delta, optional float killLimit) {
  ScaleX = fmax(0, ScaleX+delta);
  if (specified_killLimit && ScaleX < killLimit) Destroy();
}


//==========================================================================
//
//  A_ChangeScaleYExt
//
//==========================================================================
[decorate] final void A_ChangeScaleYExt (float delta, optional float killLimit) {
  ScaleY = fmax(0, ScaleY+delta);
  if (specified_killLimit && ScaleY < killLimit) Destroy();
}


//==========================================================================
//
//  A_LayToFloorWithYaw
//
//==========================================================================
[decorate] final void A_LayToFloorWithYaw (float yaw) {
  tmtrace_t tmtrace;
  GetFloorAndCeiling(out tmtrace);
  if (!tmtrace.EFloor.splane) {
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 0;
    return;
  }
  TVec norm = tmtrace.EFloor.spGetNormal();

  /*
  auto sec = Level.XLevel.PointInSector(Origin);
  if (!sec) {
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 0;
    return;
  }
  TVec norm = sec.floor.normal;
  */
  //print("floor normal: %v", norm);
  if (norm.x == 0 && norm.y == 0) {
    /*
    //norm.z = -norm.z;
    VectorAngles(norm, Angles);
    print("  angles: %v", Angles);
    */
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 0;
  } else {
    VectorAngles(norm, Angles);
    //print("floor normal: %v; angles: %v", norm, Angles);
    Angles.pitch = AngleMod360(Angles.pitch+90);
    // alas
    //Angles.yaw = yaw;
  }
  Origin.z = tmtrace.FloorZ;
  bIntrJustMoved = false; // disable interpolation
}


//==========================================================================
//
//  A_LayToCeilingWithYaw
//
//==========================================================================
[decorate] final void A_LayToCeilingWithYaw (float yaw) {
  tmtrace_t tmtrace;
  GetFloorAndCeiling(out tmtrace);
  if (!tmtrace.ECeiling.splane) {
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 180+90;
    return;
  }
  TVec norm = tmtrace.ECeiling.spGetNormal();

  /*
  auto sec = Level.XLevel.PointInSector(Origin);
  if (!sec) {
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 0;
    return;
  }
  TVec norm = sec.floor.normal;
  */
  //print("floor normal: %v", norm);
  if (norm.x == 0 && norm.y == 0) {
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 180+90;
    //print("   angles: %s", Angles);
  } else {
    VectorAngles(norm, Angles);
    //print("floor normal: %v; angles: %v", norm, Angles);
    Angles.pitch = AngleMod360(Angles.pitch+90);
    // alas
    //Angles.yaw = yaw;
  }
  Origin.z = tmtrace.CeilingZ-Height;
  bIntrJustMoved = false; // disable interpolation
}


//==========================================================================
//
//  A_LayToFloorWithYawSprite
//
//==========================================================================
[decorate] final void A_LayToFloorWithYawSprite (float yaw) {
  tmtrace_t tmtrace;
  GetFloorAndCeiling(out tmtrace);
  if (!tmtrace.EFloor.splane) {
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 90;
    return;
  }
  TVec norm = tmtrace.EFloor.spGetNormal();

  //print("floor normal: %v", norm);
  if (norm.x == 0 && norm.y == 0) {
    //VectorAngles(norm, Angles);
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 90;
  } else {
    //norm = vector(0, 0, 1);
    VectorAngles(norm, Angles);
    Angles.pitch = AngleMod360(Angles.pitch+180);
    //print("  floor normal: %v; angles: %v", norm, Angles);
    // alas
    //RotateVectorAroundVector
    //Angles.yaw = yaw;
  }
  Origin.z = tmtrace.FloorZ;
  bIntrJustMoved = false; // disable interpolation
}


//==========================================================================
//
//  A_LayToCeilingWithYawSprite
//
//==========================================================================
[decorate] final void A_LayToCeilingWithYawSprite (float yaw) {
  tmtrace_t tmtrace;
  GetFloorAndCeiling(out tmtrace);
  if (!tmtrace.ECeiling.splane) {
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 270;
    return;
  }
  TVec norm = tmtrace.ECeiling.spGetNormal();

  //print("ceiling normal: %v", norm);
  if (norm.x == 0 && norm.y == 0) {
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 90+180;
    //VectorAngles(norm, Angles);
    //print("   angles: %s", Angles);
  } else {
    VectorAngles(norm, Angles);
    Angles.pitch = AngleMod360(Angles.pitch+180);
    //print("ceiling normal: %v; angles: %v", norm, Angles);
    // alas
    //Angles.yaw = yaw;
  }
  Origin.z = tmtrace.CeilingZ-Height;
  bIntrJustMoved = false; // disable interpolation
}


//==========================================================================
//
//  InWeaponReadyCheckSetRecurseGuard
//
//==========================================================================
final bool InWeaponReadyCheckSetRecurseGuard (name ftype) {
  // don't allow calling `A_WeaponReady()` more than once per tic
  if (PlayerEx(Player).k8InWeaponReadyWatchCat == XLevel.TicTime) {
    if (GetCvarB('warn_a_weaponready_recurse')) {
      printwarn("A_WeaponReady: %s recursed! %s", ftype, XLevel.CallingState);
    }
    return true;
  }
  //lastActivatedAWR = va("%s", XLevel.CallingState);
  PlayerEx(Player).k8InWeaponReadyWatchCat = XLevel.TicTime;
  return false;
}


//==========================================================================
//
//  WeaponReadyResetAttackState
//
//  changes player state (animation)
//
//==========================================================================
final void WeaponReadyResetAttackState () {
  // get out of attack state
  if (!IdleState) return;
  if ((MissileState && StateIsInSequence(State, MissileState)) ||
      (MeleeState && StateIsInSequence(State, MeleeState)))
  {
    //print("%C: InMissile=%B", self, StateIsInSequence(State, MissileState));
    //print("%C: InMelee  =%B", self, StateIsInSequence(State, MeleeState));
    SetState(IdleState);
  }
}


//==========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
//  Follows after getting weapon up, or after previous attack/fire sequence.
//
//==========================================================================
[decorate] final void A_WeaponReady () {
  decorate_A_WeaponReady();
}


//==========================================================================
//
//  decorate_A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
//  Follows after getting weapon up, or after previous attack/fire sequence.
//
//==========================================================================
[decorate] final void decorate_A_WeaponReady (optional int Flags) {
  if (!bIsPlayer) return;

  bool wasZoomDown = Player.bZoomDown;
  if (PlayerEx(Player).k8InWeaponReadyWatchCat != XLevel.TicTime) Player.bZoomDown = !!(Player.Buttons&BT_ZOOM);

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) {
    PlayerEx(Player).ResetWeaponReloadRefire();
    return;
  }

  Wpn.bBobDisabled = ((Flags&WRF_NOBOB) || Wpn.bDontBob);

  // force weapon to "ready" position in case it tries to perform "instant ready" trick
  if (Player.ViewStates[PS_WEAPON].SY > Weapon::WEAPONTOP) {
    Player.SetViewStateOffsets(0, Weapon::WEAPONTOP);
  }

  if (Player.ViewStates[PS_WEAPON].State == Wpn.GetReadyState() &&
      Wpn.ReadySound && (!Wpn.bReadySndHalf || Random() < 0.5))
  {
    PlaySound(Wpn.ReadySound, CHAN_WEAPON);
  }

  if (Flags&WRF_DISABLESWITCH) {
    // this cancels switch
    PlayerEx(Player).PendingWeapon = none;
  } else if (!(Flags&WRF_NOSWITCH)) {
    // put the weapon away if the player has a pending weapon or has died
    if (PlayerEx(Player).PendingWeapon || Player.MO.Health <= 0) {
      if (InWeaponReadyCheckSetRecurseGuard('weapon change')) return;
      Wpn.bBobDisabled = true;
      PlayerEx(Player).ResetWeaponReloadRefire();
      Player.SetViewObject(Wpn);
      Player.SetViewState(PS_WEAPON, Wpn.GetDownState());
      return;
    }
  }

  //print("wpnready: %C; flags=0x%04x; attack=%B", Wpn, Flags, !!(Player.Buttons&BT_ATTACK));
  if ((Flags&WRF_NOFIRE) != WRF_NOFIRE) {
    // check for fire
    if (!(Flags&WRF_NOPRIMARY) && (Player.Buttons&BT_ATTACK)) {
      if (((Flags&WRF_ALLOWREFIRE) || !Player.bAttackDown) || !Wpn.bNoAutoFire) {
        if (InWeaponReadyCheckSetRecurseGuard('primary fire')) return;
        WeaponReadyResetAttackState();
        Wpn.bBobDisabled = true;
        Player.bAttackDown = true;
        Player.bReloadQueued = false;
        PlayerEx(Player).FireWeapon();
        //if (Wpn.FireMode == Weapon::FIRE_Primary || Wpn.FireMode == Weapon::FIRE_Secondary) PlayerEx(Player).Refire++;
        return;
      }
    } else if (!(Flags&WRF_NOSECONDARY) && (Player.Buttons&BT_ALT_ATTACK) && Wpn.FindState('AltFire')) {
      if (((Flags&WRF_ALLOWREFIRE) || !Player.bAltAttackDown) || !Wpn.bNoAutoFire) {
        if (InWeaponReadyCheckSetRecurseGuard('secondary fire')) return;
        WeaponReadyResetAttackState();
        Wpn.bBobDisabled = true;
        Player.bAltAttackDown = true;
        Player.bReloadQueued = false;
        PlayerEx(Player).AltFireWeapon();
        //if (Wpn.FireMode == Weapon::FIRE_Primary || Wpn.FireMode == Weapon::FIRE_Secondary) PlayerEx(Player).Refire++;
        return;
      }
    } else {
      if (Player.bAttackDown || Player.bAltAttackDown) {
        //k8: i don't think that we need any checks here, but still...
        if (PlayerEx(Player).k8InWeaponReadyWatchCat != XLevel.TicTime) {
          WeaponReadyResetAttackState();
        }
      }
      Player.bAttackDown = false;
      Player.bAltAttackDown = false;
    }
  }

  // check for reload
  if ((Flags&WRF_ALLOWRELOAD) && Player.bReloadQueued && Wpn.GetReloadState()) {
    if (InWeaponReadyCheckSetRecurseGuard('reloading')) return;
    WeaponReadyResetAttackState();
    Wpn.bBobDisabled = true;
    Player.bAttackDown = true;
    Player.bAltAttackDown = true;
    Player.bZoomDown = false;
    PlayerEx(Player).ReloadWeapon();
    return;
  }

  // check for zoom
  if (Flags&WRF_ALLOWZOOM) {
    if ((Player.Buttons&BT_ZOOM) && Wpn.GetZoomState()) {
      if (!wasZoomDown) {
        if (InWeaponReadyCheckSetRecurseGuard('zoom')) return;
        WeaponReadyResetAttackState();
        Wpn.bBobDisabled = true;
        Player.bZoomDown = true;
        PlayerEx(Player).ZoomWeapon();
      }
      return;
    }
  }
  //Player.bZoomDown = !!(Player.Buttons&BT_ZOOM);

  // bobbing is moved out of here to `MovePsprites()`, so weapon can bob independently of tic rate
}
