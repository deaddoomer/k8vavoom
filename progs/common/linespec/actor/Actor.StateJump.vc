//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//  State jumps
//**************************************************************************


//==========================================================================
//
//  A_Jump
//
//==========================================================================
[decorate] final void A_Jump (int Chance, state Label1, optional state Label2,
  optional state Label3, optional state Label4, optional state Label5,
  optional state Label6, optional state Label7, optional state Label8/*,
  optional state Label9, optional state Label10, optional state Label11,
  optional state Label12, optional state Label13, optional state Label14,
  optional state Label15, optional state Label16, optional state Label17,
  optional state Label18, optional state Label19, optional state Label20,
  optional state Label21, optional state Label22, optional state Label23,
  optional state Label24, optional state Label25, optional state Label26,
  optional state Label27, optional state Label28, optional state Label29*/)
{
  KeepChainResult();
  if (Chance > 0) {
    state[12] List;
    List[0] = Label1;
    int count = 1;
    if (specified_Label2) List[count++] = Label2;
    if (specified_Label3) List[count++] = Label3;
    if (specified_Label4) List[count++] = Label4;
    if (specified_Label5) List[count++] = Label5;
    if (specified_Label6) List[count++] = Label6;
    if (specified_Label7) List[count++] = Label7;
    if (specified_Label8) List[count++] = Label8;
    /*
    if (specified_Label9) List[count++] = Label9;
    if (specified_Label10) List[count++] = Label10;
    if (specified_Label11) List[count++] = Label11;
    if (specified_Label12) List[count++] = Label12;
    if (specified_Label13) List[count++] = Label13;
    if (specified_Label14) List[count++] = Label14;
    if (specified_Label15) List[count++] = Label15;
    if (specified_Label16) List[count++] = Label16;
    if (specified_Label17) List[count++] = Label17;
    if (specified_Label18) List[count++] = Label18;
    if (specified_Label19) List[count++] = Label19;
    if (specified_Label20) List[count++] = Label20;
    if (specified_Label21) List[count++] = Label21;
    if (specified_Label22) List[count++] = Label22;
    if (specified_Label23) List[count++] = Label23;
    if (specified_Label24) List[count++] = Label24;
    if (specified_Label25) List[count++] = Label25;
    if (specified_Label26) List[count++] = Label26;
    if (specified_Label27) List[count++] = Label27;
    if (specified_Label28) List[count++] = Label28;
    if (specified_Label29) List[count++] = Label29;
    */

    if (Chance > 255 || P_Random() < Chance) {
      int n = 0;
      if (count > 1) n = P_Random()%count;
      DoJump(List[n]);
      return;
    }
  }
}


//==========================================================================
//
//  A_JumpIf
//
//==========================================================================
/*[decorate]*/ final void A_JumpIf (bool Expr, state Label) {
  //print("%C: label=%C; expr=%B", self, Label, Expr);
  KeepChainResult();
  if (Expr) DoJump(Label);
}


//==========================================================================
//
//  A_JumpIf
//
//  use `float` instead of bool, so decorate will work as expected
//
//==========================================================================
[decorate] final void decorate_A_JumpIf (float Expr, state Label) {
  KeepChainResult();
  if (Expr) DoJump(Label);
}


//==========================================================================
//
//  CheckIfCloser
//
//==========================================================================
final bool CheckIfCloser (EntityEx targ, float Dist, bool noz) {
  if (!targ) return false;
  /*
  if (Targ && (noz ? DistTo2(Targ) : DistTo(Targ)) < Dist &&
      ((Origin.z > Targ.Origin.z && Origin.z-Target.Origin.z-Target.Height < Dist) ||
       (Origin.z <= Targ.Origin.z && Target.Origin.z-Origin.z-Height < Dist)))
  */
  return
    (DistTo2(targ) < Dist && (noz ||
      ((Origin.z > targ.Origin.z && Origin.z-targ.Origin.z-targ.Height < Dist) ||
       (Origin.z <= targ.Origin.z && targ.Origin.z-Origin.z-Height < Dist))));
}


//==========================================================================
//
//  A_JumpIfCloser
//
//==========================================================================
[decorate] final void A_JumpIfCloser (float Dist, state Label, optional bool noz) {
  EntityEx Targ;
  KeepChainResult();

  if (!bIsPlayer) {
    Targ = Target;
  } else {
    TVec Dir;
    Targ = Aim(Dir, 16.0*64.0);
  }

  if (CheckIfCloser(Targ, Dist, noz)) DoJump(Label);
}


//==========================================================================
//
//  A_JumpIfTracerCloser
//
//==========================================================================
[decorate] final void A_JumpIfTracerCloser (float distance, state label, optional bool noz) {
  KeepChainResult();
  if (CheckIfCloser(Tracer, distance, noz)) DoJump(label);
}


//==========================================================================
//
//  A_JumpIfMasterCloser
//
//==========================================================================
[decorate] final void A_JumpIfMasterCloser (float distance, state label, optional bool noz) {
  KeepChainResult();
  if (CheckIfCloser(Master, distance, noz)) DoJump(label);
}


//==========================================================================
//
//  A_JumpIfTargetInsideMeleeRange
//
//==========================================================================
[decorate] final void A_JumpIfTargetInsideMeleeRange (state label) {
  KeepChainResult();
  if (CheckMeleeRange()) DoJump(label);
}


//==========================================================================
//
//  A_JumpIfTargetOutsideMeleeRange
//
//==========================================================================
[decorate] final void A_JumpIfTargetOutsideMeleeRange (state label) {
  KeepChainResult();
  if (!CheckMeleeRange()) DoJump(label);
}


//==========================================================================
//
//  A_JumpIfHealthLower
//
//==========================================================================
[decorate] final void A_JumpIfHealthLower (int HealthVal, state Label, optional int aptr) {
  KeepChainResult();
  EntityEx tgt = EntityEx(DecorDoAAPtr('A_JumpIfHealthLower', aptr!optional));
  if (tgt && tgt.Health < HealthVal) DoJump(Label);
}


//==========================================================================
//
//  A_JumpIfInventory
//
//==========================================================================
final void worker_JumpIfInInventory (EntityEx tgt, class!Actor ItemType, int Amount, state Label) {
  KeepChainResult();
  class!Inventory itp = class!Inventory(ItemType);

  if (itp && tgt) {
    Inventory Item = tgt.FindInventory(itp, disableReplacement:true); //k8: i hope so
    if (Item) {
      Ammo ammo = Ammo(Item);
      int maxam = (ammo ? ammo.k8GetAmmoKingMax() : Item.MaxAmount);
      if ((Amount > 0 && Item.Amount >= Amount) ||
          (Amount == 0 && Item.Amount >= maxam))
      {
        DoJump(Label);
      }
    }
  }
}


//==========================================================================
//
//  A_JumpIfInventory
//
//==========================================================================
[decorate] final void A_JumpIfInventory (class!Actor ItemType, int Amount, state Label, optional int aptr) {
  EntityEx tgt = EntityEx(DecorDoAAPtr('A_JumpIfInventory', aptr!optional));
  worker_JumpIfInInventory(tgt, ItemType, Amount, Label);
}


//==========================================================================
//
//  A_JumpIfInTargetInventory
//
//==========================================================================
[decorate] final void A_JumpIfInTargetInventory (class!Actor ItemType, int Amount, state Label, optional int aptr) {
  EntityEx tgt;
  if (Target) tgt = EntityEx(Target.DecorDoAAPtr('A_JumpIfInventory', aptr!optional));
  worker_JumpIfInInventory(tgt, ItemType, Amount, Label);
}


//==========================================================================
//
//  A_JumpIfTargetInLOS
//
//==========================================================================
[decorate] final void A_JumpIfTargetInLOS (state Label, optional float Fov, optional int flags, optional float distmax, optional float distclose) {
  KeepChainResult();
  if (checkIfTargetInLOS(Fov!optional, flags!optional, distmax!optional, distclose!optional)) DoJump(Label);
}


//==========================================================================
//
//  A_JumpIfInTargetLOS
//
//  https://zdoom.org/wiki/A_JumpIfInTargetLOS
//  wutafuck? it seems to simply call `A_JumpIfTargetInLOS()` on target object
//
//==========================================================================
[decorate] final void A_JumpIfInTargetLOS (state Label, optional float Fov, optional int flags, optional float distmax, optional float distclose) {
  KeepChainResult();
  /*
  EntityEx obj = Target;
  if (!obj) return;
  if (obj.checkIfTargetInLOS(Fov!optional, flags!optional, distmax!optional, distclose!optional)) DoJump(Label);
  */
  // emulate this with flags, because real target is not what you may think, especially for players
  flags |= JLOSF_TARGETLOS|JLOSF_FLIPFOV;
  if (checkIfTargetInLOS(Fov!optional, flags, distmax!optional, distclose!optional)) DoJump(Label);
}


//==========================================================================
//
//  A_JumpIfCVarTrue
//
//==========================================================================
[decorate] final void A_JumpIfCVarTrue (string cvar, state Label) {
  KeepChainResult();
  name cvn = name(cvar);
  if (CvarExists(cvn)) {
    if (GetCvarB(cvn)) DoJump(Label);
  }
}


//==========================================================================
//
//  A_JumpIfCVarFalse
//
//==========================================================================
[decorate] final void A_JumpIfCVarFalse (string cvar, state Label) {
  KeepChainResult();
  name cvn = name(cvar);
  if (CvarExists(cvn)) {
    //print("A_JumpIfCVarFalse: cvar is '%s', value is %s", cvar, (GetCvarB(cvn) ? "true" : "false"));
    if (!GetCvarB(cvn)) DoJump(Label);
  } else {
    //print("A_JumpIfCVarFalse: cvar '%s' NOT FOUND!", cvar);
    DoJump(Label);
  }
}


//==========================================================================
//
//  A_CheckRange
//
//==========================================================================
[decorate] final void A_CheckRange (float distance, state label, optional bool check2d) {
  KeepChainResult();
  distance = fmax(0, distance);
  foreach (auto playnum; 0..MAXPLAYERS) {
    auto plr = PlayerEx(Level.Game.Players[playnum]);
    if (!plr || !plr.bSpawned || !plr.MO) continue;
    // should player be alive? i think so
    if (plr.PlayerState == PST_DEAD) continue;
    if (check2d) {
      if (DistTo2(plr.MO) <= distance) return; // not too far
    } else {
      if (DistTo(plr.MO) <= distance) return; // not too far
    }
  }
  DoJump(label);
}
