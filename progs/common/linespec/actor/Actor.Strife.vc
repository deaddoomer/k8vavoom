//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
const float PUNCH_DAGGER_RANGE = 80.0;
const float MAULERRANGE        = 33.0*64.0;


//==========================================================================
//
//  A_FlameDie
//
//==========================================================================
final void A_FlameDie () {
  bNoGravity = true;
  Velocity.z = (Random()*4.0/10.0)*35.0;
}


//==========================================================================
//
//  A_MaulerTorpedoWave
//
//==========================================================================
final void A_MaulerTorpedoWave () {
  Angles.yaw = AngleMod360(Angles.yaw+180.0);

  // if the torpedo hit the ceiling, it should still spawn the wave
  float savedz = Origin.z;
  scope(exit) Origin.z = savedz;

  if (CeilingZ-Origin.z < 13.0) Origin.z = CeilingZ-13.0;

  foreach (auto i; 0..80) {
    Angles.yaw = AngleMod360(Angles.yaw+45.0/10.0);
    SpawnSubMissile(MaulerTorpedoWave, Target);
  }
}


//==========================================================================
//
//  A_SpectralLightning
//
//==========================================================================
final void A_SpectralLightning () {
  if (Threshold) --Threshold;

  Velocity.x += (Random()-0.5)*6.0*35.0;
  Velocity.y += (Random()-0.5)*6.0*35.0;

  float x = Origin.x+(Random()-0.5)*6.0*50.0;
  float y = Origin.y+(Random()-0.5)*6.0*50.0;

  // spawn bolt in the centre
  Actor lightning1 = Spawn(Threshold > 25 ? class!Actor(SpectralLightningV2) : class!Actor(SpectralLightningV1), vector(x, y, ONCEILINGZ));
  if (lightning1) {
    if (Sector->bHasExtrafloors && Origin.z <= CeilingZ) lightning1.Origin.z = CeilingZ-lightning1.Height;
    lightning1.Target = Target;
    lightning1.Velocity.x = 0.001;
    lightning1.Velocity.y = 0.001;
    lightning1.Velocity.z = -18.0*35.0;
    lightning1.Health = Health;
  }

  // spawn a random bolt
  Actor lightning2 = Spawn(SpectralLightningV2, vector(Origin.x, Origin.y, ONCEILINGZ));
  if (lightning2) {
    if (Sector->bHasExtrafloors && Origin.z <= CeilingZ) lightning2.Origin.z = CeilingZ-lightning2.Height;
    lightning2.Target = Target;
    lightning2.Velocity.x = 0.001;
    lightning2.Velocity.y = 0.001;
    lightning2.Velocity.z = -18.0*35.0;
    lightning2.Health = Health;
  }
}


//==========================================================================
//
//  A_SpectralLightningTail
//
//==========================================================================
final void A_SpectralLightningTail () {
  Actor A = Spawn(SpectralLightningHTail, Origin);
  if (A) A.Angles.yaw = Angles.yaw;
}


//==========================================================================
//
//  A_SpectralBigBallLightning
//
//==========================================================================
final void A_SpectralBigBallLightning () {
  A_Tracer2();

  float dir = Angles.yaw;

  Actor A = Spawn(SpectralLightningH3, Origin);
  if (A) {
    A.Target = Target;
    A.Angles.yaw = AngleMod360(dir+90.0);
    A.Tracer = Tracer;
    A.Velocity.x = A.Speed*cos(A.Angles.yaw);
    A.Velocity.y = A.Speed*sin(A.Angles.yaw);
  }

  A = Spawn(SpectralLightningH3, Origin);
  if (A) {
    A.Target = Target;
    A.Angles.yaw = AngleMod360(dir-90.0);
    A.Tracer = Tracer;
    A.Velocity.x = A.Speed*cos(A.Angles.yaw);
    A.Velocity.y = A.Speed*sin(A.Angles.yaw);
  }

  A = Spawn(SpectralLightningH3, Origin);
  if (A) {
    A.Target = Target;
    A.Angles.yaw = dir;
    A.Tracer = Tracer;
    A.Velocity.x = A.Speed*cos(A.Angles.yaw);
    A.Velocity.y = A.Speed*sin(A.Angles.yaw);
  }
}


//==========================================================================
//
//  A_Explose512
//
//==========================================================================
final void A_Explose512 () {
  RadiusAttack(Target, 512, 512.0, true);
  if (Target && Target.bIsPlayer) Target.Player.ExtraLight = 5;
  RenderStyle = STYLE_Add;
}


//==========================================================================
//
//  A_LightGoesOut
//
//==========================================================================
final void A_LightGoesOut() {
  Sector->params.lightlevel = 0;
  Sector->floor.dist = Level.FindLowestFloorSurrounding(Sector, nullptr);
  foreach (auto i; 0..8) {
    EntityEx foo = Spawn(Rubble1, Origin);
    if (foo) {
      foo.Velocity.x = (Random()*16.0-Random()*8.0)*35.0;
      foo.Velocity.y = (Random()-Random())*8.0*35.0;
      foo.Velocity.z = (7.0+Random()*4.0)*35.0;
    }
  }
}


//==========================================================================
//
//  A_ExtraLightOff
//
//==========================================================================
final void A_ExtraLightOff () {
  if (Target && Target.bIsPlayer) {
    Target.Player.ExtraLight = 0;
  }
}


//==========================================================================
//
//  A_HideDecepticon
//
//  Hide the Acolyte-to-be               ->
//  Hide the guy transforming into an Acolyte      ->
//  Hide the transformer                 ->
//  Transformers are Autobots and Decepticons, and
//  Decepticons are the bad guys, so...          ->
//
//  Hide the Decepticon!
//
//==========================================================================
final void A_HideDecepticon () {
  LineSpecialLevelInfo(Level).EV_DoDoor(999, 64, 0, 0, 0, VerticalDoor::DOOREV_Close, nullptr, none);
  if (Target && Target.bIsPlayer) {
    LineSpecialLevelInfo(Level).NoiseAlert(Target, self);
  }
}


//==========================================================================
//
//  A_AcolyteBits
//
//==========================================================================
final void A_AcolyteBits () {
  if (SpawnPoint.options&LineSpecialLevelInfo::MTF_SHADOW) {
    A_BeShadowyFoe();
  } else if (SpawnPoint.options&LineSpecialLevelInfo::MTF_SHADOW) {
    RenderStyle = STYLE_None;
  }
}


//==========================================================================
//
//  A_AcolyteDeath
//
//==========================================================================
final void A_AcolyteDeath () {
  Actor Other;
  bool hasAlivePlayer;

  // remove any shadowy effects on the Acolyte
  RenderStyle = STYLE_Normal;
  Alpha = 1.0;

  // only the Blue Acolyte does extra stuff on death
  if (Class != AcolyteBlue) return;

  // make sure there is a player alive for victory
  foreach (auto i; 0..MAXPLAYERS) {
    if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0) {
      hasAlivePlayer = true;
      break;
    }
  }
  if (!hasAlivePlayer) return;

  // make sure all the other blue acolytes are dead
  foreach AllThinkers(EntityEx, Other) {
    if (Other != self && Other.Class == Class && Other.Health > 0) {
      // found a living one
      return;
    }
  }

  EntityEx(Level.Game.Players[0].MO).GiveInventoryType(QuestItem7);
  PlayerEx(Level.Game.Players[0]).SetObjectives(14);
  PlayerEx(Level.Game.Players[0]).ClientVoice(14);
}


//==========================================================================
//
//  A_StalkerLookInit
//
//==========================================================================
final void A_StalkerLookInit () {
  // set look state depending on floor/ceiling state
  if (bNoGravity) {
    SetState(FindState('LookCeiling'));
  } else {
    SetState(FindState('LookFloor'));
  }
}


//==========================================================================
//
//  A_StalkerChaseDecide
//
//==========================================================================
final void A_StalkerChaseDecide () {
  if (!bNoGravity) {
    // walking on floor
    SetState(FindState('SeeFloor'));
  } else if (CeilingZ-Height > Origin.z) {
    // falling down
    SetState(FindState('Drop'));
  }
}


//==========================================================================
//
//  A_StalkerAttack
//
//==========================================================================
final void A_StalkerAttack () {
  if (bNoGravity) {
    // land if we are on ceiling
    SetState(FindState('Drop'));
  } else {
    if (!Target) return;

    A_FaceTarget();
    if (CheckMeleeRange()) Target.Damage(self, self, (P_Random()&7)*2+2, spawnBlood:true);
  }
}


//==========================================================================
//
//  A_StalkerDrop
//
//==========================================================================
final void A_StalkerDrop () {
  bNoGravity = false;
  bNoVerticalMeleeRange = false;
}


//==========================================================================
//
//  A_SentinelAttack
//
//==========================================================================
final void A_SentinelAttack () {
  EntityEx missile = SpawnMissileZAimed(32.0, Target, SentinelFX2);
  if (missile && (missile.Velocity.x || missile.Velocity.y)) {
    for (int i = 8; i > 1; --i) {
      EntityEx trail = Spawn(SentinelFX1, vector(
        Origin.x+missile.Radius*itof(i)*cos(missile.Angles.yaw),
        Origin.y+missile.Radius*itof(i)*sin(missile.Angles.yaw),
        missile.Origin.z+(missile.Velocity.z/35.0/4.0*itof(i))));
      if (trail) {
        trail.Target = self;
        trail.Velocity = missile.Velocity;
        trail.CheckMissileSpawn();
      }
    }
    missile.Origin.z += missile.Velocity.z/35.0/4.0;
  }
}


//==========================================================================
//
//  A_ReaverRanged
//
//==========================================================================
final void A_ReaverRanged () {
  TVec aimDir;

  if (!Target) return;

  A_FaceTarget();
  PlaySound('reaver/attack', CHAN_WEAPON);
  AimLineAttack(aimDir, Angles, MISSILERANGE);
  foreach (auto i; 0..3) {
    TVec dir = aimDir;
    VectorRotateAroundZ(ref dir, (Random()-Random())*45.0/2.0);
    int damage = ((P_Random()%8)+1)*3;
    LineAttack(dir, MISSILERANGE, damage, StrifePuff);
  }
}


//==========================================================================
//
//  A_TemplarAttack
//
//==========================================================================
final void A_TemplarAttack () {
  TVec aimDir;

  if (!Target) return;

  PlaySound('templar/shoot', CHAN_WEAPON);
  A_FaceTarget();
  AimLineAttack(aimDir, Angles, MISSILERANGE);
  foreach (auto i; 0..3) {
    TVec dir = aimDir;
    VectorRotateAroundZ(ref dir, (Random()-Random())*45.0/2.0);
    int damage = ((P_Random()%5)+1)*3;
    LineAttack(dir, MISSILERANGE+64.0, damage, MaulerPuff, default, default, 'Disintegrate');
  }
}


//==========================================================================
//
//  CrusaderCheckFlameRange
//
//==========================================================================
final bool CrusaderCheckFlameRange () {
  if (CanSee(Target) && ReactionCount == 0) return (DistTo2(Target) < 264.0);
  return false;
}


//==========================================================================
//
//  A_CrusaderChoose
//
//==========================================================================
final void A_CrusaderChoose () {
  if (!Target) return;

  if (CrusaderCheckFlameRange()) {
    A_FaceTarget();
    Angles.yaw = AngleMod360(Angles.yaw-45.0/4.0);
    SpawnMissileZAimed(40.0, Target, FastFlameMissile);
  } else {
    if (CheckMissileRange()) {
      A_FaceTarget();
      SpawnMissileZAimed(56.0, Target, CrusaderMissile);
      Angles.yaw -= 45.0/32.0;
      SpawnMissileZAimed(40.0, Target, CrusaderMissile);
      Angles.yaw += 45.0/16.0;
      SpawnMissileZAimed(40.0, Target, CrusaderMissile);
      Angles.yaw -= 45.0/16.0;
      ReactionCount += 15;
    }
    SetState(SeeState);
  }
}


//==========================================================================
//
//  A_CrusaderSweepLeft
//
//==========================================================================
final void A_CrusaderSweepLeft () {
  Angles.yaw = AngleMod360(Angles.yaw+45.0/8.0);
  EntityEx misl = SpawnMissileZAimed(48.0, Target, FastFlameMissile);
  if (misl) misl.Velocity.z = 1.0*35.0;
}


//==========================================================================
//
//  A_CrusaderSweepRight
//
//==========================================================================
final void A_CrusaderSweepRight () {
  Angles.yaw = AngleMod360(Angles.yaw-45.0/8.0);
  EntityEx misl = SpawnMissileZAimed(48.0, Target, FastFlameMissile);
  if (misl) misl.Velocity.z = 1.0*35.0;
}


//==========================================================================
//
//  A_CrusaderRefire
//
//==========================================================================
final void A_CrusaderRefire () {
  if (!Target || Target.Health <= 0 || !CanSee(Target)) {
    SetState(SeeState);
  }
}


//==========================================================================
//
//  A_CrusaderDeath
//
//==========================================================================
final void A_CrusaderDeath () {
  if (!CheckBossDeath()) return;
  LineSpecialLevelInfo(Level).EV_DoFloor(667, 8, 0, 0, 0, FloorMover::FLOOREV_LowerToLowest, nullptr);
}


//==========================================================================
//
//  InquisitorCheckDistance
//
//==========================================================================
final bool InquisitorCheckDistance () {
  return (ReactionCount == 0 && Target && CanSee(Target) && DistTo2(Target) < 264.0);
}


//==========================================================================
//
//  A_InquisitorDecide
//
//==========================================================================
final void A_InquisitorDecide () {
  if (Origin.z != FloorZ) return;

  PlaySound('inquisitor/active', CHAN_VOICE);
  if (!Target || !CanSee(Target)) return;

  A_FaceTarget();
  if (!InquisitorCheckDistance()) SetState(FindState('Grenade'));
}


//==========================================================================
//
//  A_InquisitorCheckJump
//
//==========================================================================
final void A_InquisitorCheckJump () {
  EntityEx onmo = EntityEx(CheckOnmobj());

  if (Origin.z != Target.Origin.z) {
    if (Origin.z < Target.Origin.z && (((onmo && onmo.TestMobjZ()) || !onmo) && TestMobjZ())) {
      A_FaceTarget();
      if (Origin.z+Height+64.0 < CeilingZ) {
        SetState(FindState('Jump'));
      } else {
        // don't let him jump while under a low ceiling
        Origin.z = FloorZ;
      }
    } else if (Origin.z != FloorZ && fabs(Velocity.z) < -21.0 && (((onmo && onmo.TestMobjZ()) || !onmo) && TestMobjZ())) {
      // fly when he is falling
      A_FaceTarget();
      SetState(FindState('Jump'));
    }
  } else {
    A_Chase();
  }
}


//==========================================================================
//
//  A_InquisitorAttack
//
//==========================================================================
final void A_InquisitorAttack () {
  if (!Target) return;

  A_FaceTarget();

  EntityEx A = SpawnMissileZAimed(76.0, Target, InquisitorShot);
  if (A) {
    A.Angles.yaw -= 45.0/16.0;
    A.Velocity.x = A.Speed*cos(A.Angles.yaw);
    A.Velocity.y = A.Speed*sin(A.Angles.yaw);
    A.Velocity.z += 4.0*35.0;
  }

  A = SpawnMissileZAimed(76.0, Target, InquisitorShot);
  if (A) {
    A.Angles.yaw += 45.0/16.0;
    A.Velocity.x = A.Speed*cos(A.Angles.yaw);
    A.Velocity.y = A.Speed*sin(A.Angles.yaw);
    A.Velocity.z += 15.0*35.0; // weeeeeeeeeee!!!!
  }
}


//==========================================================================
//
//  A_InquisitorJump
//
//==========================================================================
final void A_InquisitorJump () {
  if (!Target) return;

  EntityEx onmo = EntityEx(CheckOnmobj());

  A_FaceTarget();
  // Increase origin, then check for possibility
  // of getting stuck, if we can get stuck, reset
  // origin value...
  float OldOrgZ = Origin.z;
  Origin.z += 64.0;
  if (((onmo && onmo.TestMobjZ()) || !onmo) && TestMobjZ()) {
    // the way is free, so continue along
    PlaySound('inquisitor/jump', CHAN_BODY);
    Velocity.x += 6.0*35.0*cos(Angles.yaw);
    Velocity.y += 6.0*35.0*sin(Angles.yaw);
    float dist = DistTo2(Target);
    dist /= 6.0*35.0;
    Velocity.z = (Target.Origin.z-Origin.z)/dist;
    if (dist < 1.0 || !dist.isfinite) Velocity.z = 0;
    ReactionCount = 60;
    bNoGravity = true;
  } else {
    // something is in the way, reset the Origin value
    Origin.z = OldOrgZ;
    ReactionCount = 0;
    bNoGravity = false;
  }
}


//==========================================================================
//
//  A_InquisitorCheckLand
//
//==========================================================================
final void A_InquisitorCheckLand () {
  --ReactionCount;
  EntityEx onmo = EntityEx(CheckOnmobj());

  if (((onmo && onmo.TestMobjZ()) || !onmo) && TestMobjZ()) {
    if (Velocity.x == 0.0 && Velocity.y == 0.0 || Origin.z <= FloorZ ||
        (fabs(Velocity.x) > 6.0*35.0 && fabs(Velocity.y) > 6.0*35.0) ||
        ReactionCount < 0 || Origin.z >= Target.Origin.z+Height/6.0)
    {
      SetState(GetStatePlus(SeeState, 1));
      ReactionCount = 0;
      bNoGravity = false;
      return;
    }
  } else {
    A_FaceTarget();
    Velocity.x += 6.0*35.0*cos(Angles.yaw);
    Velocity.y += 6.0*35.0*sin(Angles.yaw);
    float dist = DistTo2(Target);
    dist /= 6.0*35.0;
    Velocity.z = (Target.Origin.z-Origin.z)/dist;
    if (dist < 1.0 || !dist.isfinite) Velocity.z = 0;
  }
  PlaySound('inquisitor/jump', CHAN_BODY);
}


//==========================================================================
//
//  A_TossArm
//
//==========================================================================
final void A_TossArm () {
  TossUpObject(InquisitorArm);
  TossUpObject(InquisitorArm);
}


//==========================================================================
//
//  A_SpotLightning
//
//  Used by Specter1 and Programmer.
//
//==========================================================================
final void A_SpotLightning () {
  if (!Target) return;

  Actor A = Spawn(SpectralLightningSpot, Target.Origin);
  if (A) {
    A.Origin.z = A.FloorZ;
    A.Threshold = 25;
    A.Target = self;
    A.Health = -2;
    A.Tracer = Target;
  }
}


//==========================================================================
//
//  A_SpawnProgrammerBase
//
//==========================================================================
final void A_SpawnProgrammerBase () {
  // spawn separate base object
  TossUpObject(ProgrammerBase);
}


//==========================================================================
//
//  A_ProgrammerDeath
//
//==========================================================================
final void A_ProgrammerDeath () {
  if (!CheckBossDeath()) return;

  Level.ExecuteActionSpecial(LNSPEC_ExitNormal, 0, 0, 0, 0, 0, nullptr, 0, self);
  // this will execute sky changes
  A_BossDeath();
}


//==========================================================================
//
//  A_SpawnEntity
//
//==========================================================================
final void A_SpawnEntity () {
  Actor entity = Spawn(EntityBoss, Origin+vector(0.0, 0.0, 70.0));
  if (entity) {
    entity.Angles.yaw = Angles.yaw;
    entity.CopyFriendliness(self, true);
    entity.Velocity.z = 5.0*35.0;
    // save spawn position for subenties
    entity.Tracer = self;
  }
}


//==========================================================================
//
//  A_AttackAlert
//
//==========================================================================
final void A_AttackAlert (EntityEx target, EntityEx emitter) self(Actor) {
  Entity looker;

  if (emitter.LastHeard) return;
  if (emitter.Health <= 0) return;
  if (!emitter.bMonster) return;
  if (emitter.bInCombat) return;
  emitter.bInCombat = true;

  emitter.Target = target;
  if (emitter.FindState('Pain')) emitter.SetState(emitter.FindState('Pain'));

  for (looker = Sector->ThingList; looker; looker = looker.SNext) {
    if (looker == emitter || looker == target) continue;
    if (looker.Health <= 0) continue;
    if (!EntityEx(looker).bSeesDaggers) continue;
    if (!EntityEx(looker).bInCombat) {
      if (!looker.CanSee(target) && !looker.CanSee(emitter)) continue;
      if (EntityEx(looker).SeeState) {
        EntityEx(looker).Target = target;
        looker.PlaySound(SightSound, CHAN_VOICE);
        looker.SetState(EntityEx(looker).SeeState);
        EntityEx(looker).bInCombat = true;
      }
    }
  }
}


//==========================================================================
//
//  A_JabDagger
//
//==========================================================================
final void A_JabDagger () self(Actor) {
  TVec dir;

  if (!bIsPlayer) return;

  //Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  int power = PlayerEx(Player).Stamina/10;
  int damage = (P_Random()%(power+8))*(power+2);

  TAVec angles = Angles;
  angles.yaw = AngleMod360(angles.yaw+(Random()-Random())*45.0/8.0);
  EntityEx AimTarget = AimLineAttack(dir, angles, PUNCH_DAGGER_RANGE);
  LineAttack(dir, PUNCH_DAGGER_RANGE, damage, StrifeSpark);

  // turn to face target
  if (AimTarget) {
    if (AimTarget.bNoBlood) {
      PlaySound('misc/metalhit', CHAN_WEAPON);
    } else {
      PlaySound('misc/meathit', CHAN_WEAPON);
    }
    Angles.yaw = atan2(AimTarget.Origin.y-Origin.y, AimTarget.Origin.x-Origin.x);
    Player.bFixAngle = true;
    bJustAttacked = true;
    A_AttackAlert(self, AimTarget);
  } else {
    PlaySound('misc/swish', CHAN_WEAPON);
  }
}


//==========================================================================
//
//  A_ShowElectricFlash
//
//==========================================================================
final void A_ShowElectricFlash () self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  Player.SetViewObject(Wpn);
  Player.SetViewState(ps_flash, Wpn.FindState('ElectricFlash'));
}


//==========================================================================
//
//  A_FireArrow
//
//==========================================================================
final void A_FireArrow (class!Actor Proj) self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  float savedangle = Angles.yaw;
  Angles.yaw = AngleMod360(Angles.yaw+(Random()-Random())*45.0/8.0/itof(1<<(PlayerEx(Player).Accuracy*5/100)));
  Wpn.DepleteAmmo(Wpn.FireMode);
  SetState(MissileState);
  SpawnPlayerMissile(Proj);
  Angles.yaw = savedangle;
  PlaySound('weapons/xbowshoot', CHAN_WEAPON);
}


//==========================================================================
//
//  A_FireMiniMissile
//
//==========================================================================
final void A_FireMiniMissile () self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  float savedangle = Angles.yaw;
  Angles.yaw = AngleMod360(Angles.yaw+(Random()-Random())*45.0/4.0/itof(1<<(PlayerEx(Player).Accuracy*5/100)));
  Wpn.DepleteAmmo(Wpn.FireMode);
  SetState(MissileState);
  SpawnPlayerMissile(MiniMissile);
  Angles.yaw = savedangle;
}


//==========================================================================
//
//  A_FireGrenade
//
//==========================================================================
final void A_FireGrenade (class!Actor grenadetype, float angleofs, state flash) self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  if (!Wpn.DepleteAmmo(Wpn.FireMode)) return;

  // make it flash
  Player.SetViewState(ps_flash, flash);

  Origin.z += 32.0;
  EntityEx grenade = SpawnSubMissile(grenadetype, self);
  Origin.z -= 32.0;
  if (!grenade) return;

  if (grenade.SightSound) grenade.PlaySound(grenade.SightSound, CHAN_VOICE);

  grenade.Velocity.z = (tan(-Angles.pitch)*grenade.Speed+12.0*35.0)/1.5;

  float an = Angles.yaw;
  float tworadii = Radius+grenade.Radius;
  grenade.Origin.x += cos(an)*tworadii;
  grenade.Origin.y += sin(an)*tworadii;

  an = Angles.yaw+angleofs;
  grenade.Origin.x += cos(an)*15.0;
  grenade.Origin.y += sin(an)*15.0;
}


//==========================================================================
//
//  A_FireFlamer
//
//==========================================================================
final void A_FireFlamer () self(Actor) {
  EntityEx A;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  //FIXME: deplete ammo first?
  SetState(MissileState);
  Wpn.DepleteAmmo(Wpn.FireMode);
  Angles.yaw = AngleMod360(Angles.yaw+(Random()-Random())*45.0/8.0);
  Player.bFixAngle = true;
  A = SpawnPlayerMissile(FlameMissile);
  if (A) A.Velocity.z += 20.0*35.0/5.0;
}


//==========================================================================
//
//  A_FireMauler1
//
//==========================================================================
final void A_FireMauler1 () self(Actor) {
  TAVec rot;
  TVec aimDir;

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  //FIXME: deplete ammo first?
  PlaySound('weapons/mauler1', CHAN_WEAPON);

  Wpn.DepleteAmmo(Wpn.FireMode);

  Aim(aimDir, 16.0*64.0);
  foreach (auto i; 0..20) {
    rot.pitch = (Random()-Random())*45.0/8.0;
    rot.yaw = (Random()-Random())*45.0/4.0;
    rot.roll = 0.0;
    TVec dir = RotateDirectionVector(aimDir, rot);
    int damage = 5*(P_Random()%3+1);
    LineAttack(dir, MAULERRANGE, damage, MaulerPuff, default, default, 'Disintegrate');
  }
}


//==========================================================================
//
//  A_FireMauler2Pre
//
//==========================================================================
final void A_FireMauler2Pre () self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  PlaySound('weapons/mauler2charge', CHAN_WEAPON);
  Player.ViewStates[ps_weapon].SX += (Random()-Random())*4.0;
  Player.ViewStates[ps_weapon].SY += (Random()-Random())*4.0;
}


//==========================================================================
//
//  A_FireMauler2
//
//==========================================================================
final void A_FireMauler2 () self(Actor) {
  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  //FIXME: deplete ammo first?
  SetState(MissileState);
  Wpn.DepleteAmmo(Wpn.FireMode);
  SpawnPlayerMissile(MaulerTorpedo);
  Damage(none, self, 20, spawnBlood:true);
  Thrust(Angles.yaw+180.0, 125.0/16.0);
}


//==========================================================================
//
//  A_ClearFlash
//
//==========================================================================
final void A_ClearFlash() {
  if (!bIsPlayer) return;

  Player.SetViewState(ps_flash, none);
}
