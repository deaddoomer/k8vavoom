//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//  Original Doom/Strife monster attacks
//**************************************************************************
const float SKULLSPEED = 20.0*35.0;
const float FatsoSpreadAngle = 90.0/8.0;

// Flags for A_PainAttack
enum /*EPainAttackFlags*/ {
  PAF_NOSKULLATTACK = 1,
  PAF_AIMFACING = 2,
  PAF_NOTARGET = 4,
};


//==========================================================================
//
//  A_PosAttack
//
//  Zombieman attack.
//
//==========================================================================
final void A_PosAttack () {
  TVec dir;

  if (!Target) return;

  A_FaceTarget();

  AimLineAttack(out dir, Angles, MISSILERANGE);
  VectorRotateAroundZ(ref dir, (Random()-Random())*45.0/2.0);

  PlaySound('grunt/attack', CHAN_WEAPON);

  int damage = ((P_Random()%5)+1)*3;

  LineAttack(dir, MISSILERANGE, damage, BulletPuff, default, default, 'Bullet', false);
}


//==========================================================================
//
//  A_SPosAttack
//
//  For DeHackEd compatibility only.
//
//==========================================================================
final void A_SPosAttack () {
  if (!Target) return;

  PlaySound('shotguy/attack', CHAN_WEAPON);
  DoSPosAttack();
}


//==========================================================================
//
//  A_SPosAttackUseAtkSound
//
//  Shotgun guy, Spider mastermind attack.
//
//==========================================================================
final void A_SPosAttackUseAtkSound () {
  if (!Target) return;

  PlaySound(AttackSound, CHAN_WEAPON);
  DoSPosAttack();
}


//==========================================================================
//
//  DoSPosAttack
//
//==========================================================================
final void DoSPosAttack () {
  TVec aimDir;

  //k8: Mastermind should use 'Bullet' here
  name atype = 'Shell';
  for (class co = self.Class; co; co = GetClassParent(co)) {
    if (GetClassName(co) == 'SpiderMastermind') {
      atype = 'Bullet';
      break;
    }
  }

  A_FaceTarget();
  AimLineAttack(out aimDir, Angles, MISSILERANGE);
  foreach (auto i; 0..3) {
    TVec dir = aimDir;
    VectorRotateAroundZ(ref dir, (Random()-Random())*45.0/2.0);
    int damage = ((P_Random()%5)+1)*3;
    LineAttack(dir, MISSILERANGE, damage, BulletPuff, default, default, atype, (i != 0));
  }
}


//==========================================================================
//
//  A_CPosAttack
//
//  Heavy weapon dude attack.
//
//==========================================================================
final void A_CPosAttack () {
  int damage;
  TVec dir;

  if (!Target) return;

  // Andy Baker's stealth monsters
  if (bStealth) VisDir = 1;

  //FIXME (k8: what???)
  PlaySound(AttackSound, CHAN_WEAPON);
  A_FaceTarget();
  AimLineAttack(dir, Angles, MISSILERANGE);
  VectorRotateAroundZ(ref dir, (Random()-Random())*45.0/2.0);
  damage = ((P_Random()%5)+1)*3;
  LineAttack(dir, MISSILERANGE, damage, BulletPuff, default, default, 'Bullet', false);
}


//==========================================================================
//
//  A_CPosRefire
//
//  Heavy weapon dude refire.
//
//==========================================================================
final void A_CPosRefire () {
  // keep firing unless target got out of sight
  A_FaceTarget();

  if (P_Random() < 40) return;

  if (!Target || Target.Health <= 0 || !CanSee(Target)) SetState(SeeState);
}


//==========================================================================
//
//  A_SpidRefire
//
//  Spider mastermind refire.
//
//==========================================================================
final void A_SpidRefire () {
  // keep firing unless target got out of sight
  A_FaceTarget();

  if (P_Random() < 10) return;

  if (!Target || Target.Health <= 0 || !CanSee(Target)) SetState(SeeState);
}


//==========================================================================
//
//  A_TroopAttack
//
//  Imp attack.
//
//==========================================================================
final void A_TroopAttack () {
  if (!Target) return;

  A_FaceTarget();
  if (CheckMeleeRange()) {
    PlaySound('imp/melee', CHAN_WEAPON);
    int damage = (P_Random()%8+1)*3;
    Target.Damage(self, self, damage, spawnBlood:true);
    return;
  }

  // launch a missile
  SpawnMissile(Target, DoomImpBall);
}


//==========================================================================
//
//  A_SargAttack
//
//  Demon, Spectre attack.
//
//==========================================================================
final void A_SargAttack () {
  if (!Target) return;

  A_FaceTarget();
  if (CheckMeleeRange()) {
    int damage = ((P_Random()%10)+1)*4;
    Target.Damage(self, self, damage, spawnBlood:true);
  }
}


//==========================================================================
//
//  A_HeadAttack
//
//  Cacodemon attack.
//
//==========================================================================
final void A_HeadAttack () {
  if (!Target) return;

  A_FaceTarget();
  if (CheckMeleeRange()) {
    int damage = (P_Random()%6+1)*10;
    Target.Damage(self, self, damage, spawnBlood:true);
    return;
  }

  // launch a missile
  SpawnMissile(Target, CacodemonBall);
}


//==========================================================================
//
//  A_BruisAttack
//
//  Hell knight, Baron of hell attack.
//
//==========================================================================
final void A_BruisAttack () {
  if (!Target) return;

  if (CheckMeleeRange()) {
    PlaySound('baron/melee', CHAN_WEAPON);
    int damage = (P_Random()%8+1)*10;
    Target.Damage(self, self, damage, spawnBlood:true);
    return;
  }

  // launch a missile
  SpawnMissile(Target, BaronBall);
}


//==========================================================================
//
//  A_SkullAttack
//
//  Lost soul attack. Fly at the player like a missile.
//
//==========================================================================
final void A_SkullAttack () {
  if (!Target) return;

  bSkullFly = true;
  PlaySound(AttackSound, CHAN_VOICE);
  A_FaceTarget();
  Velocity = Normalise(Target.GetCentre()-Origin)*SKULLSPEED;
}


//==========================================================================
//
//  A_SkullAttack
//
//==========================================================================
final void decorate_A_SkullAttack (optional float SkullSpeed) {
  if (!Target) return;
  if (!specified_SkullSpeed) SkullSpeed = SKULLSPEED; else SkullSpeed *= 35.0;

  bSkullFly = true;
  PlaySound(AttackSound, CHAN_VOICE);
  A_FaceTarget();
  Velocity = Normalise(Target.GetCentre()-Origin)*SkullSpeed;
}


//==========================================================================
//
//  A_BspiAttack
//
//  Arachnotron attack.
//
//==========================================================================
final void A_BspiAttack () {
  if (!Target) return;

  A_FaceTarget();
  // launch a missile
  SpawnMissile(Target, ArachnotronPlasma);
}


//==========================================================================
//
//  A_CyberAttack
//
//  Cyberdemon attack.
//
//==========================================================================
final void A_CyberAttack () {
  if (!Target) return;

  A_FaceTarget();
  SpawnMissile(Target, Rocket);
}


//==========================================================================
//
//  A_PainAttack
//
//  Pain elemental attack. Spawn a lost soul and launch it at the target.
//
//==========================================================================
final void A_PainAttack () {
  decorate_A_PainAttack(LostSoul);
}


//==========================================================================
//
//  decorate_A_PainAttack
//
//  Pain elemental attack. Spawn a lost soul and launch it at the target.
//
//==========================================================================
final void decorate_A_PainAttack (optional class!Actor SpawnType, optional float angle,
                                  optional int flags, optional int limit)
{
  if (!Target) return;
  if (GetCvarB('k8ElvenPaineless')) return;

  if (!SpawnType) SpawnType = LostSoul;

  if (limit > 0) {
    int count = 0;
    Thinker th;
    foreach AllThinkers(SpawnType, out th) {
      if (th) {
        ++count;
        if (count >= limit) return;
      }
    }
  }

  if (!(flags&PAF_AIMFACING)) A_FaceTarget();
  if (!specified_angle) angle = Angles.yaw;
  PainShootSkull(SpawnType, angle, !!(flags&PAF_NOSKULLATTACK), !!(flags&PAF_NOTARGET));
}


//==========================================================================
//
//  A_DualPainAttack
//
//==========================================================================
final void A_DualPainAttack (optional class!Actor SpawnType) {
  if (!Target) return;
  if (GetCvarB('k8ElvenPaineless')) return;

  A_FaceTarget();
  PainShootSkull(SpawnType, Angles.yaw+45.0);
  PainShootSkull(SpawnType, Angles.yaw-45.0);
}


//==========================================================================
//
//  A_PainDie
//
//  Pain elemental death.
//
//==========================================================================
final void A_PainDie () {
  decorate_A_PainDie(LostSoul);
}


//==========================================================================
//
//  decorate_A_PainDie
//
//  Pain elemental death.
//
//==========================================================================
final void decorate_A_PainDie (optional class!Actor SpawnType) {
  A_Fall();
  PainShootSkull(SpawnType, Angles.yaw+90.0);
  PainShootSkull(SpawnType, Angles.yaw+180.0);
  PainShootSkull(SpawnType, Angles.yaw+270.0);
}


//==========================================================================
//
//  A_SkelFist
//
//  Ravenant close attack.
//
//==========================================================================
final void A_SkelFist () {
  if (!Target) return;

  A_FaceTarget();

  if (CheckMeleeRange()) {
    int damage = ((P_Random()%10)+1)*6;
    PlaySound('skeleton/melee', CHAN_WEAPON);
    Target.Damage(self, self, damage, spawnBlood:true);
  }
}


//==========================================================================
//
//  A_SkelMissile
//
//  Ravenant far attack.
//
//==========================================================================
final void A_SkelMissile () {
  if (!Target) return;

  A_FaceTarget();
  Origin.z += 16.0; // so missile spawns higher
  EntityEx A = SpawnMissile(Target, RevenantTracer);
  Origin.z -= 16.0; // back to normal

  if (A) {
    A.UnlinkFromWorld();
    A.Origin = A.Origin+A.Velocity*0.03;
    A.LinkToWorld();
    A.Tracer = Target;
    A.bSeekerMissile = true;
  }
}


//==========================================================================
//
//  A_FatAttack1
//
//  Mancubus attack, fire missile in first direction
//
//==========================================================================
final void A_FatAttack1 () {
  decorate_A_FatAttack1(FatShot);
}


//==========================================================================
//
//  decorate_A_FatAttack1
//
//  Mancubus attack, fire missile in first direction
//
//==========================================================================
final void decorate_A_FatAttack1 (optional class!EntityEx SpawnType) {
  if (!Target) return;
  if (!SpawnType) SpawnType = FatShot;

  A_FaceTarget();
  // adjust direction
  Angles.yaw = AngleMod360(Angles.yaw+FatsoSpreadAngle);
  SpawnMissile(Target, SpawnType);

  EntityEx A = SpawnMissile(Target, SpawnType);
  if (A) {
    A.Angles.yaw = AngleMod360(A.Angles.yaw+FatsoSpreadAngle);
    VectorRotateAroundZ(ref A.Velocity, FatsoSpreadAngle);
  }
}


//==========================================================================
//
//  A_FatAttack2
//
//  Mancubus attack, second direction.
//
//==========================================================================
final void A_FatAttack2 () {
  decorate_A_FatAttack2(FatShot);
}


//==========================================================================
//
//  decorate_A_FatAttack2
//
//  Mancubus attack, second direction.
//
//==========================================================================
final void decorate_A_FatAttack2 (optional class!EntityEx SpawnType) {
  if (!Target) return;
  if (!SpawnType) SpawnType = FatShot;

  A_FaceTarget();
  // now here choose opposite deviation.
  Angles.yaw = AngleMod360(Angles.yaw-FatsoSpreadAngle);
  SpawnMissile(Target, SpawnType);

  EntityEx A = SpawnMissile(Target, SpawnType);
  if (A) {
    A.Angles.yaw = AngleMod360(A.Angles.yaw-FatsoSpreadAngle*2.0);
    VectorRotateAroundZ(ref A.Velocity, -FatsoSpreadAngle*2.0);
  }
}


//==========================================================================
//
//  A_FatAttack3
//
//  Mancubus attack, third direction.
//
//==========================================================================
final void A_FatAttack3 () {
  decorate_A_FatAttack3(FatShot);
}


//==========================================================================
//
//  decorate_A_FatAttack3
//
//  Mancubus attack, third direction.
//
//==========================================================================
final void decorate_A_FatAttack3 (optional class!EntityEx SpawnType) {
  if (!Target) return;
  if (!SpawnType) SpawnType = FatShot;

  A_FaceTarget();

  EntityEx A = SpawnMissile(Target, SpawnType);
  if (A) {
    A.Angles.yaw = AngleMod360(A.Angles.yaw-FatsoSpreadAngle/2.0);
    VectorRotateAroundZ(ref A.Velocity, -FatsoSpreadAngle/2.0);
  }

  A = SpawnMissile(Target, SpawnType);
  if (A) {
    A.Angles.yaw = AngleMod360(A.Angles.yaw+FatsoSpreadAngle/2.0);
    VectorRotateAroundZ(ref A.Velocity, FatsoSpreadAngle/2.0);
  }
}


//==========================================================================
//
//  A_VileTarget
//
//  Spawn the hellfire.
//
//==========================================================================
final void A_VileTarget (optional name firetype) {
  if (!Target) return;

  A_FaceTarget();

  class!EntityEx fireClass = ArchvileFire;
  if (specified_firetype) {
    if (firetype) {
      fireClass = class!EntityEx(FindClassNoCase(firetype));
    } else {
      fireClass = none;
    }
  }

  if (fireClass) fireClass = class!EntityEx(GetClassReplacement(fireClass));
  if (fireClass) {
    EntityEx fog = Spawn(/*ArchvileFire*/fireClass, Target.Origin);
    Tracer = fog;
    fog.Target = self;
    fog.Tracer = Target;
    fog.SetState(fog.IdleState);
  } else {
    Tracer = none;
  }
}


//==========================================================================
//
//  A_VileAttack
//
//  Arch-vile attack.
//
//==========================================================================
final void A_VileAttack (optional string sound, optional int initialdamage,
                         optional int blastdamage, optional int blastradius,
                         optional float thrustfactor, optional name damagetype,
                         optional int flags)
{
  if (!Target) return;

  A_FaceTarget();

  if (!CanSee(Target)) return;

  if (!specified_damagetype) damagetype = 'Fire';
  if (!damagetype) damagetype = 'None';

  if (specified_sound) {
    if (sound.length > 0) {
      PlaySound(name(sound), CHAN_WEAPON);
    }
  } else {
    PlaySound('vile/stop', CHAN_WEAPON);
  }
  if (!specified_initialdamage) initialdamage = 20;
  if (initialdamage < 0) initialdamage = 0;
  Target.Damage(self, self, /*20*/initialdamage, (flags&1 ? damagetype : 'None'), spawnBlood:true);

  EntityEx fire = Tracer;
  if (!fire) return;

  // move the fire between the vile and the player
  fire.UnlinkFromWorld();
  fire.Origin.x = Target.Origin.x-24.0*cos(Angles.yaw);
  fire.Origin.y = Target.Origin.y-24.0*sin(Angles.yaw);
  fire.LinkToWorld();

  if (!specified_blastdamage) blastdamage = 70;
  if (blastdamage < 0) blastdamage = 0;

  if (!specified_blastradius) blastradius = 70;
  if (blastradius < 0) blastradius = 0;
  if (blastradius > 0) {
    fire.RadiusAttack(self, blastdamage, float(blastradius), true, damagetype);
  }

  // change velocity Z component before doing RadiusAttack
  if (!specified_thrustfactor) thrustfactor = 1.0;
  if (thrustfactor > 0) {
    Target.Velocity.z = (1000.0*thrustfactor/fmax(1, Target.Mass))*35.0;
  }
}


//==========================================================================
//
//  A_BrainSpit
//
//  Spawn a cube.
//
//==========================================================================
final void A_BrainSpit () {
  decorate_A_BrainSpit();
}


//==========================================================================
//
//  decorate_A_BrainSpit
//
//  Spawn a cube.
//
//==========================================================================
final void decorate_A_BrainSpit (optional name actname) {
  // find brain state object, create it if not found
  BrainState BState = none;
  foreach AllThinkers(BrainState, BState) {
    break;
  }

  if (!BState) {
    BState = Spawn(BrainState);
    BState.FindTargets();
  }

  if (!BState.Targets.Num) return; // no brain targets placed on a map

  BState.bEasy = !BState.bEasy;
  if (Level.World.bSkillEasyBossBrain && !BState.bEasy) return;

  // shoot a cube at current target
  EntityEx targ = BState.Targets[BState.TargetOn];
  BState.TargetOn = (BState.TargetOn+1)%BState.Targets.Num;

  class!Actor brnmiss = SpawnShot;
  if (specified_actname) {
    if (!actname) return;
    brnmiss = class!Actor(FindClassNoCase(actname));
    if (!brnmiss) return;
    brnmiss = class!Actor(GetClassReplacement(brnmiss));
    if (!brnmiss) return;
  }

  // spawn brain missile
  EntityEx A = SpawnMissile(targ, /*SpawnShot*/brnmiss);
  if (A) {
    A.Target = targ;
    A.Master = self;
    // prevent division by 0
    float Frac;
         if (!A.Velocity.x && !A.Velocity.y) Frac = 0.0;
    else if (fabs(A.Velocity.x) > fabs(A.Velocity.y)) Frac = (targ.Origin.x-Origin.x)/A.Velocity.x;
    else Frac = (targ.Origin.y-Origin.y)/A.Velocity.y;
    A.ReactionCount = ftoi(Frac/GetStateDuration(A.State));
  }

  PlaySound('brain/spit', CHAN_WEAPON, 1.0, ATTN_NONE);
}


//==========================================================================
//
//  SpawnFly
//
//  Cube flying, spawn monster, when finished.
//
//==========================================================================
final void SpawnFly (class!EntityEx SpawnType, name SpawnSound) {
  class!EntityEx type;

  if (--ReactionCount) return; // still flying

  // first spawn teleport fog
  EntityEx fog = Spawn(SpawnType, Target.Origin, vector(0.0, 0.0, 0.0));
  if (fog) fog.PlaySound(SpawnSound, CHAN_VOICE);

  // randomly select monster to spawn
  int r = P_Random();

  // probability distribution (kind of :), decreasing likelihood
       if (r < 50) type = DoomImp;
  else if (r < 90) type = Demon;
  else if (r < 120) type = Spectre;
  else if (r < 130) type = PainElemental;
  else if (r < 160) type = Cacodemon;
  else if (r < 162) type = Archvile;
  else if (r < 172) type = Revenant;
  else if (r < 192) type = Arachnotron;
  else if (r < 222) type = Fatso;
  else if (r < 246) type = HellKnight;
  else type = BaronOfHell;

  EntityEx newmobj = Spawn(type, Target.Origin, vector(0.0, 0.0, 0.0));
  if (newmobj) {
    // make new monster hate the same thing eye hates
    // note that this differs from ZDoom which copies friendliness from target spot
    if (Master) newmobj.CopyFriendliness(Master, false);
    if (newmobj.SeeState && newmobj.LookForPlayers(true)) newmobj.SetState(newmobj.SeeState);
    // telefrag anything in this spot
    if (!newmobj.IsDestroyed()) {
      newmobj.bTelestomp = true;
      newmobj.TeleportMove(newmobj.Origin);
    }
  }

  // remove self (i.e., cube)
  Destroy();
}


//==========================================================================
//
//  A_SpawnFly
//
//==========================================================================
final void A_SpawnFly () {
  SpawnFly(SpawnFire, 'brain/spawn');
}


//==========================================================================
//
//  decorate_A_SpawnFly
//
//==========================================================================
final void decorate_A_SpawnFly (optional class!EntityEx SpawnType) {
  name SpawnSound;
  if (SpawnType) {
    SpawnSound = SpawnType.default.SightSound;
  } else {
    SpawnType = SpawnFire;
    SpawnSound = 'brain/spawn';
  }
  SpawnFly(SpawnType, SpawnSound);
}


//==========================================================================
//
//  A_SpawnSound
//
//  Travelling cube sound.
//
//==========================================================================
final void A_SpawnSound () {
  PlaySound('brain/cube', CHAN_VOICE);
  SpawnFly(SpawnFire, 'brain/spawn');
}


//==========================================================================
//
//  A_BrainScream
//
//  Brain death sound, make explosions.
//
//==========================================================================
final void A_BrainScream () {
  TVec org;
  for (org.x = Origin.x-196.0; org.x < Origin.x+320.0; org.x += 8.0) {
    org.y = Origin.y-320.0;
    org.z = 1.0/512.0+Random()*512.0;
    BrainishExplosion(org);
  }

  PlaySound('brain/death', CHAN_VOICE, 1.0, ATTN_NONE);
}


//==========================================================================
//
//  A_BrainExplode
//
//  Brain explosions.
//
//==========================================================================
final void A_BrainExplode () {
  TVec org;
  org.x = Origin.x+(Random()-Random())*8.0;
  org.y = Origin.y;
  org.z = 1.0/512.0+Random()*512.0;
  BrainishExplosion(org);
}


//==========================================================================
//
//  BrainishExplosion
//
//==========================================================================
final void BrainishExplosion (TVec org) {
  EntityEx A = Spawn(Rocket, org, default, default, false);
  A.DeathSound = 'misc/brainexplode';

  // disables collision detection which is not wanted here
  A.MissileDamage = 0;
  A.Velocity.z = Random()*2.0*35.0;

  A.SetState(FindClassState(BossBrain, 'BrainExplode'));

  A.StateTime -= Random()*0.2;
  if (A.StateTime < 0.1) A.StateTime = 0.1;
}


//==========================================================================
//
//  A_Mushroom
//
//==========================================================================
final void A_Mushroom () {
  decorate_A_Mushroom();
}


//==========================================================================
//
//  decorate_A_Mushroom
//
//  killough 9/98: a mushroom explosion effect, sorta :)
//  Original idea: Linguica
//
//==========================================================================
final void decorate_A_Mushroom (optional class!Actor SpawnType,
                                optional int Amount, optional int Flags,
                                optional float vrange, optional float hrange)
{
  if (!SpawnType) SpawnType = FatShot;
  if (!Amount) Amount = GetMissileDamage(0, 1);

  // first make normal explosion
  RadiusAttack(self, 128, 128.0, !(Flags&2), DamageType);

  // now launch mushroom cloud
  // we need something to aim at
  Actor target = Spawn(MapSpot, default, default, default, false);
  target.Height = Height;
  for (int i = -Amount; i <= Amount; i += 8) {
    for (int j = -Amount; j <= Amount; j += 8) {
      // aim in many directions from source
      target.UnlinkFromWorld();
      target.Origin.x = Origin.x+itof(i);
      target.Origin.y = Origin.y+itof(j);
      target.LinkToWorld();
      // aim up fairly high
      target.Origin.z = Origin.z+Length(vector(itof(i), itof(j), 0.0))*(vrange ? vrange : 4.0);
      EntityEx mo;
      // launch fireball
      if (Flags&1) {
        TVec org = vector(Origin.x, Origin.y, Origin.z+32.0);
        mo = SpawnMissileXYZ(org, target, SpawnType);
      } else {
        mo = SpawnMissile(target, SpawnType);
      }
      if (mo) {
        // slow it down a bit
        mo.Velocity = mo.Velocity*(hrange ? hrange : 0.5);
        // make debris fall under gravity
        mo.bNoGravity = false;
      }
    }
  }
  target.Destroy();
}


//===========================================================================
//
//  A_M_Saw
//
//===========================================================================
final void A_M_Saw () {
  TVec dir;

  if (!Target) return;

  A_FaceTarget();
  if (CheckMeleeRange()) {
    int damage = 2*(P_Random()%10+1);
    TAVec aimAng = Angles;
    aimAng.yaw = AngleMod360(aimAng.yaw+(Random()-Random())*45.0/8.0);

    // use meleerange + 1 se the puff doesn't skip the flash
    EntityEx AimTarget = AimLineAttack(out dir, aimAng, MELEERANGE+0.00001);
    LineAttack(dir, MELEERANGE+0.00001, damage, BulletPuff, default, default, 'Chainsaw', false);

    if (!AimTarget) {
      PlaySound('weapons/sawfull', CHAN_WEAPON);
      return;
    }
    PlaySound('weapons/sawhit', CHAN_WEAPON);

    // turn to face target
    float angle = atan2(AimTarget.Origin.y-Origin.y, AimTarget.Origin.x-Origin.x);
    if (AngleMod360(angle-Angles.yaw) > 180.0) {
      if (AngleMod360(angle-Angles.yaw) < -90.0/20.0) {
        Angles.yaw = angle+90.0/21.0;
      } else {
        Angles.yaw = Angles.yaw-90.0/20.0;
      }
    } else {
      if (AngleMod360(angle-Angles.yaw) > 90.0/20.0) {
        Angles.yaw = angle-90.0/21.0;
      } else {
        Angles.yaw += 90.0/20.0;
      }
    }
    Angles.yaw = AngleMod360(Angles.yaw);
  } else {
    PlaySound('weapons/sawfull', CHAN_WEAPON);
  }
}


//==========================================================================
//
//  A_SentinelRefire
//
//==========================================================================
final void A_SentinelRefire () {
  // keep firing unless target got out of sight
  A_FaceTarget();

  if (P_Random() < 30) return;

  if (!Target || Target.Health <= 0 || !CanSee(Target) || P_Random() < 40) SetState(SeeState);
}
