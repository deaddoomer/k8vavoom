//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//  Spawn functions
//**************************************************************************

//==========================================================================
//
//  A_TossGib
//
//==========================================================================
[decorate] final bool A_TossGib () {
  class!EntityEx tp = (bNoBlood ? Junk : Meat);

  EntityEx gib = Spawn(tp, Origin+vector(0.0, 0.0, 24.0));
  if (!gib) return false;

  float an = Random()*360.0;
  gib.Angles.yaw = an;
  float tossspeed = Random()*16.0*35.0;
  gib.Velocity.x = tossspeed*cos(an);
  gib.Velocity.y = tossspeed*sin(an);
  gib.Velocity.z = Random()*16.0*35.0;
  gib.CarryBloodTranslations(self);
  return true;
}


//==========================================================================
//
//  A_SpawnDebris
//
//==========================================================================
[decorate] final bool A_SpawnDebris (class!Actor SpawnType, optional bool TransTransl,
                                     optional float MultH, optional float MultV)
{
  if (!SpawnType) return false;
  if (MultH <= 0.0) MultH = 1.0;
  if (MultV <= 0.0) MultV = 1.0;

  bool res = false;
  foreach (auto i; 0..SpawnType.default.Health) {
    EntityEx A = Spawn(SpawnType, Origin+vector((Random()-0.5)*16.0, (Random()-0.5)*16.0, Random()*Height));
    if (!A) continue;
    if (TransTransl) A.CopyTranslations(self);
    A.CarryBloodTranslations(self);
    // the way it uses states sucks big time
    if (i < GetClassNumOwnedStates(SpawnType)) {
      A.SetState(GetStatePlus(GetClassFirstState(SpawnType), i));
      A.Velocity.x = MultH*(Random()-Random())*4.0*35.0;
      A.Velocity.y = MultH*(Random()-Random())*4.0*35.0;
      A.Velocity.z = MultV*(Random()*8.0+5.0)*35.0;
    }
    res = true;
  }
  return res;
}


//==========================================================================
//
//  InitSpawnedItem
//
//==========================================================================
final void InitSpawnedItem (EntityEx A, bool TransTransl, bool SetMaster,
                            bool NoCheckPos, bool Telestomp, bool TransPitch, bool TransPointers,
                            optional bool Originator)
{
  if (!A) return;

  if (TransTransl && !bDontTranslate) {
    //print("COPYTRANS to `%C` from `%C`", A, self);
    A.CopyTranslations(self);
  }
  A.CarryBloodTranslations(self);

  if (TransPointers) {
    A.Target = Target;
    A.Master = Master; // this will be overridden later if SIXF_SETMASTER is set
    A.Tracer = Tracer;
  }

  if (TransPitch) A.Angles.pitch = Angles.pitch;

  // find instigator for missiles
  EntityEx Instig = self;
  if (!Originator) {
    while (Instig && Instig.IsMissile(true)) Instig = Instig.Target;
  }

  //printdebug("%C: InitSpawnedItem: %C; Telestomp=%B; SetMaster=%B; NoCheckPos=%B", self, A, Telestomp, SetMaster, NoCheckPos);

  if (Telestomp) {
    A.TeleportMove(A.Origin, true);
    // we need this, because otherwise nothing will be spawned if something was telestomped
    NoCheckPos = true;
  }

  //if (SetMaster) printdebug("+++ %C: spawned `%C` with SetMaster; (A.bMonster=%B)", self, A, A.bMonster);

  if (A.bMonster) {
    // check if thing fits in its current location
    if (!NoCheckPos && !A.TestLocation()) {
      if (A.CountsAsKill()) --Level.TotalKills;
      A.Destroy();
      // do not set "success" for state chain calls
      KeepChainResult();
      return;
    }

    if (Instig) {
      if (Instig.bMonster) {
        A.CopyFriendliness(self, true);
        if (SetMaster) A.Master = self;
      } else if (Instig.bIsPlayer) {
        // make monster friendly
        A.bFriendly = true;
        A.FriendPlayer = Instig.Player.GetPlayerNum()+1;
        EntityEx Atk = PlayerEx(Instig.Player).Attacker;
        if (Atk && !Atk.bFriendly) {
          // make it attack monster who last attacked player
          A.LastHeard = Atk;
          A.Target = Atk;
        }
      }
    }
  } else if (!TransPointers) {
    // for missiles or anything else set target to instigator
    if (!Instig) Instig = self;
    A.Target = Instig;
  }
}


//==========================================================================
//
//  A_SpawnPuff
//
//  used in "hitscan projectiles"
//  FIXME: add more args?
//
//==========================================================================
[decorate] final void A_SpawnPuffHitProj (TVec Org, float Range, class!Actor PuffType,
                                          optional Actor Victim, optional int LADamage,
                                          optional bool disableRandomZ, optional int aptr)
{
  KeepChainResult();
  if (!PuffType) return;
  EntityEx spw = EntityEx(DecorDoAAPtr('A_SpawnPuffHitProj', aptr!optional));
  if (!spw) spw = self;
  if (Victim) {
    //printdebug("%C: spawn on victim %C from %C", self, Victim, spw);
    // spawn bullet puffs or blood spots, depending on target type
    if (PuffType.default.bPuffOnActors || Victim.bNoBlood || Victim.bInvulnerable || Victim.bDormant) {
      spw.SpawnPuff(Org, Range, PuffType, Victim, disableRandomZ:disableRandomZ!optional);
    }

    /*
    bool UseAxeBlood = bIsPlayer && PlayerEx(Player).ReadyWeapon && PlayerEx(Player).ReadyWeapon.bAxeBlood;
    bool UseBloodSplatter = UseAxeBlood || bBloodSplatter ||
                            (bIsPlayer && PlayerEx(Player).ReadyWeapon && PlayerEx(Player).ReadyWeapon.bBloodSplatter);
    */
    if (!PuffType.default.bBloodlessImpact && LADamage > 0) {
      if (/*!UseBloodSplatter &&*/ !Victim.bNoBlood && !Victim.bInvulnerable && !Victim.bDormant) {
        //printdebug("   victim blood!");
        Victim.SpawnBlood(Org, LADamage, Org-Velocity*10);
      }
      /*
      if (LADamage && UseBloodSplatter) {
        if (!Victim.bNoBlood && !Victim.bInvulnerable && !Victim.bDormant) {
          if (UseAxeBlood) Victim.SpawnBloodSplatter2(hitPoint, shootOrigin);
          if (P_Random() < 192) Victim.SpawnBloodSplatter(hitPoint, LADamage, shootOrigin);
        }
      }
      */
    }
  } else {
    spw.SpawnPuff(Org, Range, PuffType, none, disableRandomZ:disableRandomZ!optional);
  }
}


//==========================================================================
//
//  A_SpawnItem
//
//==========================================================================
[decorate] final bool A_SpawnItem (class!Actor ItemType, optional float Distance,
                                   optional float ZHeight, optional bool UseAmmo,
                                   optional bool TransTransl)
{
  if (!UseAmmo!specified) UseAmmo = true;

  if (!ItemType) { KeepChainResult(); return false; }

  // don't spawn monsters if this actor has been massacred
  if (nameicmp(DamageType, 'Massacre') == 0 && ItemType.default.bMonster) {
    //k8: should we keep chain result here?
    return false;
  }

  //k8: i absolutely don't know why it was here
  //if (!Distance) Distance = Radius+ItemType.default.Radius;

  // if called from weapon, then use ammo
  if (bIsPlayer &&
      (XLevel.CallingState == Player.ViewStates[PS_WEAPON].State ||
       XLevel.CallingState == Player.ViewStates[PS_FLASH].State ||
       XLevel.CallingState == Player.ViewStates[PS_WEAPON_OVL].State ||
       XLevel.CallingState == Player.ViewStates[PS_WEAPON_OVL_BACK].State))
  {
    Weapon Wpn = PlayerEx(Player).ReadyWeapon;
    if (!Wpn) return false;
    if (UseAmmo && !Wpn.DepleteAmmo(Wpn.FireMode)) return false;
  }

  TVec org = Origin+vector(Distance*cos(Angles.yaw), Distance*sin(Angles.yaw), ZHeight-FloorClip);
  #if 0
  printdebug("A_SpawnItem: type=%C (%C); Distance=%s; org=%s; Origin=%s; yaw=%s",
             ItemType, ItemType.Replacement, Distance, org, Origin, Angles.yaw);
  #endif

  EntityEx A = Spawn(ItemType, org);
  if (A) {
    #if 0
    printdebug("A_SpawnItem:   spawned=%C", A);
    #endif
    InitSpawnedItem(A, TransTransl, UseAmmo, false, false, false, false);
    return true;
  } else {
    KeepChainResult();
    return false;
  }
}


//==========================================================================
//
//  A_SpawnItemEx
//
//==========================================================================
[decorate] final bool A_SpawnItemEx (class!Actor ItemType,
                          optional float XOfs, optional float YOfs, optional float ZOfs,
                          optional float XVel, optional float YVel, optional float ZVel,
                          optional float Angle, optional int Flags, optional int Chance,
                          optional int newtid)
{
  if (!ItemType) { KeepChainResult(); return false; }

  if (Chance > 0 && P_Random() < Chance) return true; // per wiki

  // don't spawn monsters if this actor has been massacred (???)
  if (nameicmp(DamageType, 'Massacre') == 0 && ItemType.default.bMonster) {
    //k8: should we keep chain result here?
    KeepChainResult();
    return false;
  }

  if (!(Flags&SXF_ABSOLUTEANGLE)) Angle += Angles.yaw;

  TVec Org = vector(XOfs, YOfs, ZOfs-FloorClip);
  if (!(Flags&SXF_ABSOLUTEPOSITION)) {
    // in relative mode negative y values mean 'left' and positive ones
    // mean 'right'. This is the inverse orientation of the absolute mode!
    Org.y = -Org.y;
    VectorRotateAroundZ(ref Org, Angle);
  }

  // k8vavoom-specific flag
  if (Flags&SXF_MUZZLE_TRACE) {
    TVec hitPoint;
    if (!XLevel.BSPTraceLine(Origin, Origin+Org, HitPoint:hitPoint, noBlockFlags:SPF_NOBLOCKING|SPF_PLAYER|SPF_HITINFO)) {
      //printdebug("%C: trying to spawn muzzle with trace; dest=%s; hit=%s; diff=%s", self, Origin+Org, hitPoint, Origin+Org-hitPoint);
      TVec dir = Org.normalize;
      Org = hitPoint;
      Org -= dir*4;
    } else {
      Org += Origin;
    }
  } else {
    Org += Origin;
  }

  //printdebug("%C: A_SpawnItemEx: type=%C; org=%s; Origin=%s; yaw=%s; flags=0x%08x", self, ItemType, Org, Origin, Angles.yaw, Flags);
  EntityEx A = Spawn(ItemType, Org);
  //printdebug("A_SpawnItemEx(%C):xxx: angles=%s (%s); AA=%s", A, A.Angles, Angle, Angles);
  InitSpawnedItem(A,
    !!(Flags&SXF_TRANSFERTRANSLATION),
    !!(Flags&SXF_SETMASTER),
    !!(Flags&SXF_NOCHECKPOSITION),
    !!(Flags&SXF_TELEFRAG),
    !!(Flags&SXF_TRANSFERPITCH),
    !!(Flags&SXF_TRANSFERPOINTERS),
    Originator:!!(Flags&SXF_ORIGINATOR));

  if (A && !A.IsDestroyed) {
    A.Velocity.x = fclamp(XVel*35.0, -1024, 1024);
    A.Velocity.y = fclamp(YVel*35.0, -1024, 1024);
    A.Velocity.z = fclamp(ZVel*35.0, -1024, 1024);
    //printdebug("A_SpawnItemEx(%C):000: angles=%s (%s); AA=%s", A, A.Angles, Angle, Angles);
    A.Angles.yaw = Angle;
    //printdebug("A_SpawnItemEx(%C):001: angles=%s (%s)", A, A.Angles, Angle);
    if (!(Flags&SXF_ABSOLUTEVELOCITY)) {
      // the same issue as with offsets
      A.Velocity.y = -A.Velocity.y;
      VectorRotateAroundZ(ref A.Velocity, Angle);
    }
    //print("SPAWN '%C': vel=(%s,%s,%s); A.Velocity=%s", A, XVel, YVel, ZVel, A.Velocity);

    if (Flags&SXF_NOPOINTERS) { A.Master = none; A.Target = none; A.Tracer = none; }

    if (Flags&SXF_TRANSFERAMBUSHFLAG) A.bAmbush = bAmbush;
    if (Flags&SXF_CLEARCALLERTID) SetTID(0);
    if (Flags&SXF_MULTIPLYSPEED) { A.Velocity.x *= A.Speed; A.Velocity.y *= A.Speed; A.Velocity.z *= A.Speed; }
    if (Flags&SXF_TRANSFERSCALE) { A.ScaleX = ScaleX; A.ScaleY = ScaleY; }
    if (Flags&SXF_TRANSFERALPHA) A.Alpha = Alpha;
    if (Flags&SXF_TRANSFERRENDERSTYLE) A.RenderStyle = RenderStyle;

    if ((Flags&(SXF_TRANSFERTRANSLATION|SXF_USEBLOODCOLOR)) == SXF_USEBLOODCOLOR && !A.bDontTranslate) {
      A.Translation = Translation;
      A.BloodTranslation = Translation;
      A.BloodColor = BloodColor;
    }

    if (Flags&(SXF_SETTARGET|SXF_SETTRACER|SXF_SETMASTER)) {
      // find instigator for missiles
      EntityEx Instig = self;
      if (!(Flags&SXF_ORIGINATOR)) {
        while (Instig && Instig.IsMissile(true)) Instig = Instig.Target;
        if (!Instig) Instig = self;
      }
      //printdebug("+++ %C: spawned `%C` with SetMaster=%B (Instig=%C)", self, A, !!(Flags&SXF_SETMASTER), Instig);
      if (Flags&SXF_SETTARGET) A.Target = Instig;
      if (Flags&SXF_SETTRACER) A.Tracer = Instig;
      if (Flags&SXF_SETMASTER) A.Master = Instig;
    }
    //if (Flags&SXF_SETTARGET) A.Target = self;
    //if (Flags&SXF_SETTRACER) A.Tracer = self;
    //if (Flags&SXF_SETMASTER) A.Master = self;
    if (Flags&SXF_TRANSFERROLL) A.Angles.roll = Angles.roll;
    if (Flags&SXF_ISTARGET) Target = A;
    if (Flags&SXF_ISMASTER) Master = A;
    if (Flags&SXF_ISTRACER) Tracer = A;
    if (Flags&SXF_TRANSFERSPECIAL) { A.Special = Special; foreach (auto f; 0..Args.length) A.Args[f] = Args[f]; }
    if (Flags&SXF_CLEARCALLERSPECIAL) { Special = 0; foreach (auto f; 0..Args.length) Args[f] = 0; }
    if (newtid!specified && newtid >= 0) A.SetTID(newtid);
    //if (Flags&SXF_SETMASTER) printdebug("*** %C: spawned `%C` with SetMaster; A.Master=%C; uid=%s", self, A, A.Master, A.UniqueId);
    //printdebug("A_SpawnItemEx(%C):002: angles=%s (%s)", A, A.Angles, Angle);
    return true;
  }

  KeepChainResult();
  return false;
}
