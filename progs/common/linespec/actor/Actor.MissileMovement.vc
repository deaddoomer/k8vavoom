//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//  Missile movement
//**************************************************************************
const float TRACEADJUST = 0.2865921825;
const float TRACE2ANGLE = 7.0*45.0/16.0;


//==========================================================================
//
//  A_SeekerMissile
//
//==========================================================================
[decorate] final void A_SeekerMissile (int Threshold, int TurnMax, optional int flags,
                            optional int chance, optional int distance)
{
       if (Threshold < 0) Threshold = 0;
  else if (Threshold > 90) Threshold = 90;

       if (TurnMax < 0) TurnMax = 0;
  else if (TurnMax > 90) TurnMax = 90;

  if ((flags&SMF_LOOK) && !Tracer && (Random() < float(chance)/100.0)) {
    Entity Other;
    foreach RoughBlockSearch(Other, distance) {
      EntityEx link = EntityEx(Other);
      if (!link) continue;
      if (!(link.bMonster || link.bIsPlayer) || link == Target || link.bDormant) continue;
      if (!link.bShootable) continue;
      if (IsTeammate(link)) continue;
      if (!CanSeek(link)) continue;
      if (bScreenSeeker) {
        if (CanSee(link, disableBetterSight:true)) {
          float angle = AngleMod360(atan2(link.Origin.y-Target.Origin.y, link.Origin.x-Target.Origin.x)-Target.Angles.yaw);
          if (angle <= 226.0*360.0/256.0 || angle >= 30.0*360.0/256.0) continue;
        }
      } else {
        if (!CanSee(link, disableBetterSight:true)) continue;
      }
      Tracer = link;
      break;
    }
  }
  SeekerMissile(float(Threshold), float(TurnMax), !!(flags&SMF_PRECISE), !!(flags&SMF_CURSPEED));
}


//==========================================================================
//
//  A_Tracer
//
//  Revenant missile tracer.
//
//==========================================================================
[decorate] final void A_Tracer () {
  EntityEx A;
  TVec wishdir;
  TVec currdir;
  TVec delta;
  float adjustlen;

  //printdebug("%s: %C: Time=%s; TicTime=%s; TicTime&3=%s (%s : %s)", UniqueId, self, XLevel.Time, XLevel.TicTime, XLevel.TicTime&3, ffloor(XLevel.Time*35), XLevel.Time*35);
  if (XLevel.TicTime&3) return;

  // spawn a puff of smoke behind the rocket
  SpawnPuff(Origin, MISSILERANGE, BulletPuff, false);

  A = Spawn(RevenantTracerSmoke, Origin-Velocity*Level.Game.frametime);
  if (A) {
    A.CarryBloodTranslations(self);
    A.Velocity.z = 1.0*35.0;
    A.StateTime -= Random()*0.1;
    if (A.StateTime < 0.1) A.StateTime = 0.1;
  }

  // adjust direction
  if (!Tracer || Tracer.Health <= 0 || !CanSeek(Tracer)) return;

  wishdir = Normalise(Tracer.GetCenter()-Origin);
  currdir = Normalise(Velocity);
  delta = wishdir-currdir;
  adjustlen = Length(delta);
  if (adjustlen > TRACEADJUST) adjustlen = TRACEADJUST;
  wishdir = currdir+delta*adjustlen;
  Velocity = wishdir*Speed;
  VectorAngles(wishdir, out Angles);
}


//==========================================================================
//
//  A_Tracer2
//
//==========================================================================
[decorate] final void A_Tracer2 () {
  EntityEx dest = Tracer;

  if (!dest || dest.Health <= 0 || !CanSeek(dest)) return;

  // change angle
  float exact = atan2(dest.Origin.y-Origin.y, dest.Origin.x-Origin.x);

  if (exact != Angles.yaw) {
    if (AngleMod360(exact-Angles.yaw) > 180.0) {
      Angles.yaw = AngleMod360(Angles.yaw-TRACE2ANGLE);
      if (AngleMod360(exact-Angles.yaw) < 180.0) Angles.yaw = exact;
    } else {
      Angles.yaw = AngleMod360(Angles.yaw+TRACE2ANGLE);
      if (AngleMod360(exact-Angles.yaw) > 180.0) Angles.yaw = exact;
    }
  }

  exact = Angles.yaw;
  Velocity.x = Speed*cos(exact);
  Velocity.y = Speed*sin(exact);

  // change slope
  if (Speed) {
    float dist = DistTo2(dest);
    dist /= Speed;
    if (dist < 1.0 || !dist.isfinite) dist = 1.0;

    float slope = (dest.Origin.z+40.0-Origin.z)/dist;
    if (slope < Velocity.z) {
      Velocity.z -= 1.0/8.0*35.0;
    } else {
      Velocity.z += 1.0/8.0*35.0;
    }
  }
}


//==========================================================================
//
//  A_Fire
//
//==========================================================================
[decorate] final void A_Fire () {
  decorate_A_Fire();
}


//==========================================================================
//
//  decorate_A_Fire
//
//  Keep fire in front of player unless out of sight.
//
//==========================================================================
[decorate] final void decorate_A_Fire (optional int Height) {
  if (!Target || !Tracer) return;

  // don't move it if the vile lost sight
  if (!Target.CanSee(Tracer, disableBetterSight:true)) return;

  UnlinkFromWorld();
  Origin.x = Tracer.Origin.x+24.0*cos(Tracer.Angles.yaw);
  Origin.y = Tracer.Origin.y+24.0*sin(Tracer.Angles.yaw);
  if (!specified_Height) {
    Origin.z = Tracer.Origin.z;
  } else {
    Origin.z = Tracer.Origin.z+float(Height);
  }
  bIntrJustMoved = false; // disable movement interpolation
  LinkToWorld();
}


//==========================================================================
//
//  A_BishopMissileWeave
//
//==========================================================================
[decorate] final void A_BishopMissileWeave () {
  int WeaveXY = (Special2>>16)&63;
  int WeaveZ = (Special2&0xffff)&63;
  float angle = AngleMod360(Angles.yaw+90.0);
  float newX = Origin.x-cos(angle)*Level.Game.FloatBobOffsets[WeaveXY]*2.0;
  float newY = Origin.y-sin(angle)*Level.Game.FloatBobOffsets[WeaveXY]*2.0;
  WeaveXY = (WeaveXY+2)&63;
  newX += cos(angle)*Level.Game.FloatBobOffsets[WeaveXY]*2.0;
  newY += sin(angle)*Level.Game.FloatBobOffsets[WeaveXY]*2.0;
  TryMove(vector(newX, newY, Origin.z), AllowDropOff:false);
  Origin.z -= Level.Game.FloatBobOffsets[WeaveZ];
  WeaveZ = (WeaveZ+2)&63;
  Origin.z += Level.Game.FloatBobOffsets[WeaveZ];
  Special2 = (WeaveXY<<16)|WeaveZ;
}


//============================================================================
//
//  A_CStaffMissileSlither
//
//============================================================================
[decorate] final void A_CStaffMissileSlither () {
  int WeaveXY = Special2&63;
  float angle = AngleMod360(Angles.yaw+90.0);
  float newX = Origin.x-cos(angle)*Level.Game.FloatBobOffsets[WeaveXY];
  float newY = Origin.y-sin(angle)*Level.Game.FloatBobOffsets[WeaveXY];
  WeaveXY = (WeaveXY+3)&63;
  newX += cos(angle)*Level.Game.FloatBobOffsets[WeaveXY];
  newY += sin(angle)*Level.Game.FloatBobOffsets[WeaveXY];
  TryMove(vector(newX, newY, Origin.z), AllowDropOff:false);
  Special2 = (Special2&~0xffff)|WeaveXY;
}


//==========================================================================
//
//  A_Countdown
//
//==========================================================================
[decorate] final void A_Countdown () {
  if (--ReactionCount <= 0) {
    ExplodeMissile(none);
    bSkullFly = false;
  }
}


//==========================================================================
//
//  A_CountdownArg
//
//==========================================================================
[decorate] final void A_CountdownArg (int Index, optional name jumpstate) {
  if (Index <= 0 || Index > 5) return;
  if (!Args[Index-1]--) {
         if (bMissile) ExplodeMissile(none);
    else if (bShootable) Damage(none, none, Health, spawnBlood:true);
    else {
      if (!jumpstate) jumpstate = 'Death';
      SetState(FindState(jumpstate));
    }
  }
}


//============================================================================
//
//  A_Stop
//
//============================================================================
[decorate] final void A_Stop () {
  Velocity = vector(0.0, 0.0, 0.0);
}


//==========================================================================
//
//  A_Weave
//
//==========================================================================
[decorate] final void A_Weave (int horzspeed, int vertspeed, float horzdist, float vertdist) {
  int WeaveXY = (Special2>>16)&63;
  int WeaveZ = Special2&63;
  float angle = AngleMod360(Angles.yaw+90.0);

  if (horzspeed || horzdist) {
    float newX = Origin.x-cos(angle)*Level.Game.FloatBobOffsets[WeaveXY]*horzdist;
    float newY = Origin.y-sin(angle)*Level.Game.FloatBobOffsets[WeaveXY]*horzdist;
    WeaveXY = (WeaveXY+horzspeed)&63;
    newX += cos(angle)*Level.Game.FloatBobOffsets[WeaveXY]*horzdist;
    newY += sin(angle)*Level.Game.FloatBobOffsets[WeaveXY]*horzdist;
    if (!bNoInteraction) {
      TryMove(vector(newX, newY, Origin.z), AllowDropOff:false);
    } else {
      UnlinkFromWorld();
      bNoBlockmap = true; // why not?
      Origin.x = newX;
      Origin.y = newY;
      LinkToWorld();
    }
  }

  if (vertspeed || vertdist) {
    Origin.z -= Level.Game.FloatBobOffsets[WeaveZ]*vertdist;
    WeaveZ = (WeaveZ+vertspeed)&63;
    Origin.z += Level.Game.FloatBobOffsets[WeaveZ]*vertdist;
  }

  Special2 = (WeaveXY<<16)|WeaveZ;
}
