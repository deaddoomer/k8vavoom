//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//  Sound functions
//**************************************************************************


//==========================================================================
//
//  A_PlaySound
//
//==========================================================================
final void A_PlaySound (optional name Sound, optional int chan, optional float volume,
                        optional bool looping, optional float attenuation,
                        optional bool local)
{
  if (!specified_Sound) Sound = 'weapons/pistol';
  if (!Sound) return;
  //if (!specified_chan) chan = CHAN_BODY;
  if (!specified_chan) chan = CHAN_AUTO; //k8: use `auto` channel
  if (chan < 0 || chan > 7) chan = CHAN_AUTO;
  PlaySound(Sound, chan, volume!optional, attenuation!optional, looping!optional, local!optional);
}


//==========================================================================
//
//  A_PlaySoundEx
//
//  `ChannelNameOrNumber` is a special hacky name for decorate parser
//  fuck you, gozzo!
//
//==========================================================================
final void A_PlaySoundEx (name Sound, string ChannelNameOrNumber, optional bool Loop, optional int Attenuation) {
  int Chan = CHAN_AUTO;
       if (!stricmp(ChannelNameOrNumber, "Auto")) Chan = CHAN_AUTO;
  else if (!stricmp(ChannelNameOrNumber, "Weapon")) Chan = CHAN_WEAPON;
  else if (!stricmp(ChannelNameOrNumber, "Voice")) Chan = CHAN_VOICE;
  else if (!stricmp(ChannelNameOrNumber, "Item")) Chan = CHAN_ITEM;
  else if (!stricmp(ChannelNameOrNumber, "Body")) Chan = CHAN_BODY;
  else if (!stricmp(ChannelNameOrNumber, "SoundSlot5")) Chan = 5;
  else if (!stricmp(ChannelNameOrNumber, "SoundSlot6")) Chan = 6;
  else if (!stricmp(ChannelNameOrNumber, "SoundSlot7")) Chan = 7;

  // attenuation
  float Atten = ATTN_NORMAL;
  switch (Attenuation) {
    case -1: Atten = ATTN_STATIC; break;
    case 1: Atten = ATTN_NONE; break;
  }

  PlaySound(Sound, Chan, default, Atten, Loop);
}


//==========================================================================
//
//  A_PlayWeaponSound
//
//==========================================================================
final void A_PlayWeaponSound (name Sound) {
  PlaySound(Sound, CHAN_WEAPON);
}


//==========================================================================
//
//  A_ActiveSound
//
//==========================================================================
final void A_ActiveSound () {
  if (ActiveSound) PlaySound(ActiveSound, CHAN_VOICE);
}


//==========================================================================
//
//  A_LoopActiveSound
//
//==========================================================================
final void A_LoopActiveSound () {
  if (ActiveSound) PlaySound(ActiveSound, CHAN_VOICE, default, default, true);
}


//==========================================================================
//
//  A_FLoopActiveSound
//
//==========================================================================
final void A_FLoopActiveSound () {
  if (ActiveSound && !GetSoundPlayingInfo(self, GetSoundID(ActiveSound))) {
    PlaySound(ActiveSound, CHAN_VOICE);
  }
}


//==========================================================================
//
//  A_StopSound
//
//==========================================================================
final void A_StopSound (optional int channel) {
  if (!specified_channel) channel = CHAN_VOICE;
  StopSound(channel);
}


//==========================================================================
//
//  A_StopSoundEx
//
//==========================================================================
final void A_StopSoundEx (string Channel) {
  int Chan = 0;
       if (!stricmp(Channel, "Auto")) Chan = CHAN_AUTO;
  else if (!stricmp(Channel, "Weapon")) Chan = CHAN_WEAPON;
  else if (!stricmp(Channel, "Voice")) Chan = CHAN_VOICE;
  else if (!stricmp(Channel, "Item")) Chan = CHAN_ITEM;
  else if (!stricmp(Channel, "Body")) Chan = CHAN_BODY;
  else if (!stricmp(Channel, "SoundSlot5")) Chan = 5;
  else if (!stricmp(Channel, "SoundSlot6")) Chan = 6;
  else if (!stricmp(Channel, "SoundSlot7")) Chan = 7;
  StopSound(Chan);
}


//==========================================================================
//
//  A_Pain
//
//==========================================================================
final void A_Pain () {
  if (bIsPlayer && !PlayerEx(Player).MorphTime) {
         if (Health < 25) PlaySound('*pain25', CHAN_VOICE);
    else if (Health < 50) PlaySound('*pain50', CHAN_VOICE);
    else if (Health < 75) PlaySound('*pain75', CHAN_VOICE);
    else PlaySound('*pain100', CHAN_VOICE);
  } else {
    if (PainSound) PlaySound(PainSound, CHAN_VOICE);
  }
}


//==========================================================================
//
//  A_Scream
//
//  Death sound.
//
//==========================================================================
final void A_Scream () {
  // remove muzzle flash & other light effects
  bDynamicLight = false;
  if (DeathSound) {
    // make boss death sounds full volume
    PlaySound(DeathSound, CHAN_VOICE, 1.0, (bBoss ? ATTN_NONE : ATTN_NORMAL));
  }
}


//==========================================================================
//
//  A_XScream
//
//  Explode death sound.
//
//==========================================================================
final void A_XScream () {
  PlaySound((bIsPlayer ? '*gibbed' : 'misc/gibbed'), CHAN_BODY);
}


//==========================================================================
//
//  A_VileStart
//
//  Arch-vile attack start sound.
//
//==========================================================================
final void A_VileStart () {
  PlaySound('vile/start', CHAN_WEAPON);
}


//==========================================================================
//
//  A_BrainPain
//
//  Brain pain sound.
//
//==========================================================================
final void A_BrainPain () {
  PlaySound('brain/pain', CHAN_VOICE, 1.0, ATTN_NONE);
}


//==========================================================================
//
//  A_BrainAwake
//
//  Init boss spawner.
//
//==========================================================================
final void A_BrainAwake () {
  // do just a sound, like in Boom
  PlaySound('brain/sight', CHAN_VOICE, 1.0, ATTN_NONE);
}


//==========================================================================
//
//  A_PlayerScream
//
//==========================================================================
final void A_PlayerScream () {
  if (!bIsPlayer || DeathSound) {
    PlaySound(DeathSound, CHAN_VOICE);
    return;
  }

  name Sound;
  int Chan = CHAN_VOICE;

  // handle the different player death screams
  if ((Level.bFallingDamage || Level.bOldFallingDamage || Level.bStrifeFallingDamage) &&
      Velocity.z <= -39.0*35.0 && IsSoundPresent('*splat'))
  {
    // falling splat
    Sound = '*splat';
    Chan = CHAN_BODY;
  }
  if (!Sound && Special1 < 10 && IsSoundPresent('*wimpydeath')) {
    // wimpy death sound
    Sound = '*wimpydeath';
  }
  if (!Sound && Health <= -50) {
    if (Health > -100 && IsSoundPresent('*crazydeath')) {
      // crazy death sound
      Sound = '*crazydeath';
    }
    if (!Sound && IsSoundPresent('*xdeath')) {
      // extreme death sound
      Sound = '*xdeath';
    }
    if (!Sound && IsSoundPresent('*gibbed')) {
      // extreme death sound
      Sound = '*gibbed';
      Chan = CHAN_BODY;
    }
  }
  if (!Sound) {
    // normal death sound
    Sound = '*death';
  }

  PlaySound(Sound, Chan);
}
