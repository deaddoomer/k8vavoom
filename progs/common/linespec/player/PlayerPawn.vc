//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PlayerPawn : Actor abstract;

const float WALKING_SPEED = 1000;
const float RUNNING_SPEED = 2000;


enum {
  NUM_WEAPON_SLOTS = 10,
  MAX_WEAPONS_PER_SLOT = 64,
}

// default view height
float ViewHeight;

// real height without crouching; -666 means "not initialized"
float RealHeight;

// player is unable to run if health is lower than this
int RunHealth;

// movement speed modifiers
float ForwardMove1;
float ForwardMove2;
float SideMove1;
float SideMove2;

// color translation range
int TranslStart;
int TranslEnd;

// values for Hexen armor
float[5] HexenArmor;

// jump velocity
// MO `JumpVelZ` is used instead
//!float JumpVelZ;

// name displayed in menu
string DisplayName;

// for ArtiHealRadius
name HealRadiusType;

// special mode of the invulnerability powerup
name InvulnerabilityMode;

// which class filter to use
name SpawnClass;

// icon for intermission screen
name ScoreIcon;

// for morphed player classes
class!Weapon MorphWeapon;

// attack offset, relative to the center of the player
float AttackZOffset;

// damage flash color
int DamageScreenColor;

// maximal health
int MaxHealth;

// K8 Headshots Variables
int k8hsCount;

// weapon slots from decorate
// this is created by decorate, and it is in very special format
// it has info for exactly 10 slots, and each slot list ends with `none`
// i.e. `none` is used as slot delimiter (NOT TERMINATOR! i.e. last `none` may absent)
// also, exact `Weapon` class means "this slot was defined as empty"
transient protected array!(class!Weapon) decoWeaponsClasses;


struct WSlotEntry {
  array!(class!Weapon) weapons;
}
transient protected array!WSlotEntry actualWeaponSlots;

// used in `AllowSecondaryBloodSpawn()`
// 0: do nothing, return false
// >0: if 1, allow blood; decrement
transient int secondaryBloodCount;


//==========================================================================
//
//  GetPawnViewHeight
//
//==========================================================================
float GetPawnViewHeight () {
  if (Height != 56 || ViewHeight != 41 || !GetCvarB('gm_doomguy_eye_camera')) return ViewHeight;
  return 49.5;
}


//==========================================================================
//
//  GetNumberOfSlots
//
//==========================================================================
final int GetNumberOfSlots () {
  return actualWeaponSlots.length;
}


//==========================================================================
//
//  GetSlotSize
//
//==========================================================================
final int GetSlotSize (int slot) {
  return (slot < 0 || slot >= actualWeaponSlots.length ? 0 : actualWeaponSlots[slot].weapons.length);
}


//==========================================================================
//
//  GetWeaponInSlot
//
//==========================================================================
final class!Weapon GetWeaponInSlot (int slot, int index) {
  if (slot < 0 || slot >= actualWeaponSlots.length) return none;
  if (index < 0 || index >= actualWeaponSlots[slot].weapons.length) return none;
  return actualWeaponSlots[slot].weapons[index];
}


//==========================================================================
//
//  SetWeaponInSlot
//
//==========================================================================
protected final void SetWeaponInSlot (int slot, int index, class!Weapon wpn) {
  if (slot < 0 || slot >= actualWeaponSlots.length) return;
  if (index < 0 || index >= actualWeaponSlots[slot].weapons.length) return;
  actualWeaponSlots[slot].weapons[index] = wpn;
}


//==========================================================================
//
//  FindWeaponSlot
//
//==========================================================================
final bool FindWeaponSlot (class!Weapon WpnClass, out int Slot, out int Index/*, optional bool debug*/) {
  if (WpnClass) {
    //if (debug) printdebug("FindWeaponSlot: %C", WpnClass);
    //class!Weapon wpnrep = class!Weapon(GetClassReplacement(WpnClass));
    //if (!wpnrep) wpnrep = WpnClass;
    int pwrSlot = -1, pwrIndex = -1;
    foreach (auto sidx; 0..GetNumberOfSlots()) {
      foreach (auto widx; 0..GetSlotSize(sidx)) {
        class!Weapon swc = GetWeaponInSlot(sidx, widx);
        //if (debug) printdebug("  slot #%d: index #%d: %C", sidx, widx, swc);
        if (!swc) continue;
        if (swc != WpnClass) {
          if (pwrSlot < 0 && swc.default.SisterWeaponType && swc.default.SisterWeaponType == WpnClass) {
            //printdebug("FOUND POWERED '%C' for '%C'", swc.default.SisterWeaponType, swc);
            pwrSlot = sidx;
            pwrIndex = widx;
          }
          continue;
        }
        Slot = sidx;
        Index = widx;
        return true;
      }
    }
    // return slot for sister weapon
    if (pwrSlot >= 0) {
      Slot = pwrSlot;
      Index = pwrIndex;
      return true;
    }
  } else {
    //if (debug) printdebug("FindWeaponSlot: !!!");
  }
  Slot = -1;
  Index = -1;
  return false;
}


//==========================================================================
//
//  IncrementWeaponIndex
//
//  passed indicies must be valid
//
//==========================================================================
final void IncrementWeaponIndex (ref int slot, ref int index, bool allowExtraSlot) {
  if (actualWeaponSlots.length == 0) return; // oops
  // in slot, we're going backwards
  if ((--index) >= 0) return;
  int slotCount = actualWeaponSlots.length-(allowExtraSlot ? 0 : 1);
  foreach (; 0..slotCount) {
    if ((++slot) >= slotCount) slot = 0;
    index = actualWeaponSlots[slot].weapons.length-1;
    if (index >= 0) return;
  }
  // no weapons, result is undefined
}


//==========================================================================
//
//  DecrementWeaponIndex
//
//  passed indicies must be valid
//
//==========================================================================
final void DecrementWeaponIndex (ref int slot, ref int index, bool allowExtraSlot) {
  if (actualWeaponSlots.length == 0) return; // oops
  // in slot, we're going forward
  if ((++index) < actualWeaponSlots[slot].weapons.length) return;
  int slotCount = actualWeaponSlots.length-(allowExtraSlot ? 0 : 1);
  foreach (; 0..slotCount) {
    if ((--slot) < 0) slot = slotCount-1;
    index = 0;
    if (actualWeaponSlots[slot].weapons.length > 0) return;
  }
  // no weapons, result is undefined
}


//==========================================================================
//
//  CompareWeaponPosition
//
//==========================================================================
private final int CompareWeaponPosition (class!Weapon a, class!Weapon b) {
  if (a) {
    if (b) {
      // both a and b is here, compare positions (higher is lower ;-) -- nope
      float spa = fclamp(a.default.SlotPosition, 0, 1);
      float spb = fclamp(b.default.SlotPosition, 0, 1);
      if (spa == spb) return 0;
      return (spa > spb ? 1 : -1);
    }
    // a is here, b is not: a is lower
    return -1;
  }
  // a is not here; if b is here, b is lower
  return (b ? -1 : 0);
}


//==========================================================================
//
//  HasWeaponInAnySlot
//
//==========================================================================
protected final bool HasWeaponInAnySlot (class!Weapon wpn) {
  if (!wpn) return false;
  foreach (auto sidx; 0..GetNumberOfSlots()) {
    foreach (auto widx; 0..GetSlotSize(sidx)) {
      class!Weapon swc = GetWeaponInSlot(sidx, widx);
      if (swc == wpn) return true;
    }
  }
  return false;
}


//==========================================================================
//
//  FindSigilSlotNumber
//
//==========================================================================
protected final int FindSigilSlotNumber () {
  foreach (auto sidx; 0..GetNumberOfSlots()) {
    foreach (auto widx; 0..GetSlotSize(sidx)) {
      class!Weapon swc = GetWeaponInSlot(sidx, widx);
      if (GetClassName(swc) == 'Sigil') return sidx;
    }
  }
  return -1;
}


//==========================================================================
//
//  DumpWeaponSlots
//
//==========================================================================
protected final void DumpWeaponSlots () {
  if (!GetCvarB('dbg_debug_weapon_slots')) return;
  printdebug("=== player pawn '%C' ===", self);
  foreach (auto sidx; 0..GetNumberOfSlots()) {
    printdebug(" --- SLOT #%d ---", sidx);
    foreach (auto widx; 0..GetSlotSize(sidx)) {
      class!Weapon ww = GetWeaponInSlot(sidx, widx);
      if (ww) printdebug("  weapon #%d: %C (priority:%s)", widx, ww, ww.default.SlotPosition);
    }
  }
}


//==========================================================================
//
//  GetBDWOverride
//
//==========================================================================
protected final class!Weapon GetBDWOverride (class!Weapon wcls) {
  if (!wcls) return none;
  class!Weapon repl = class!Weapon(GetClassReplacement(wcls));
  if (!repl) return none;
  string rpname = string(GetClassName(repl));
  if (rpname.strStartsWith("BDW_") || rpname.strStartsWith("K8BDW_")) return repl;
  return wcls;
}


//==========================================================================
//
//  IsHHPoweredWeapon
//
//  check if this is "powered" weapon from heretic/hexen
//  ...or morphed weapon
//
//==========================================================================
bool IsHHPoweredWeapon (class!Weapon wpn) {
  assert(wpn);
  // check for hexen morphed weapon (it is subclass of `Weapon`, so do it here)
  if (wpn isa 'Snout') return true;
  auto hw = class!HereticWeapon(wpn);
  if (!hw) return false;
  if (hw.default.SisterWeaponType && hw.default.bPoweredUp) return true;
  // check well-known morphed weapons
  if (hw isa 'Beak') return true;
  return false;
}


//==========================================================================
//
//  InitializeWeaponSlots
//
//==========================================================================
void InitializeWeaponSlots () {
  bool debugDump = GetCvarB('dbg_debug_weapon_slots');

  //printdebug("*** InitializeWeaponSlots (%C) ***", self);
  auto GI = LineSpecialGameInfo(Level.Game);
  assert(GI);

  // clear all slots
  actualWeaponSlots.length = NUM_WEAPON_SLOTS+1; // one slot is reserved for weapons without explicit slot
  foreach (ref auto wsl; actualWeaponSlots) wsl.weapons.length = 0;

  // set slots from vc code
  foreach (auto sidx; 0..NUM_WEAPON_SLOTS) {
    foreach (auto widx; 0..GI.GetDefaultMaxWeaponsInSlot(sidx)) {
      class!Weapon wcls = GI.GetDefaultWeaponInSlot(sidx, widx);
      if (!wcls) continue;
      class!Weapon repl = class!Weapon(GetClassReplacement(wcls));
      if (repl) {
        if (debugDump) printdebug("*** GI slot #%d, weapon #%d: %C -> %C", sidx, widx, wcls, repl);
        wcls = repl;
      } else {
        if (debugDump) printdebug("*** GI slot #%d, weapon #%d: %C", sidx, widx, wcls);
      }
      actualWeaponSlots[sidx].weapons[$] = wcls;
    }
  }

  // set default slots from player pawn (this overrides vc slots)
  {
    int currDecoSlot = 0;
    foreach (class!Weapon wcls; default.decoWeaponsClasses) {
      if (!wcls) {
        if ((++currDecoSlot) >= NUM_WEAPON_SLOTS) break; // this should not happen, but let's play safe
        continue;
      }
      // special flag, it means "clear slot"
      if (wcls == Weapon) {
        if (debugDump) printdebug("*** pawn slot #%d emptied", currDecoSlot);
        actualWeaponSlots[currDecoSlot].weapons.reset();
      } else {
        // use overrides for player pawn
        if (wcls) {
          class!Weapon repl = class!Weapon(GetClassReplacement(wcls));
          if (repl) wcls = repl;
        }
        if (debugDump) printdebug("*** pawn slot #%d, weapon #%d: %C", currDecoSlot, actualWeaponSlots[currDecoSlot].weapons.length, wcls);
        actualWeaponSlots[currDecoSlot].weapons[$] = wcls;
      }
    }
  }

  // set slots from game info/keyconf
  // this doesn't do any replacements
  // note that keyconf has precedence over weapon.slotnumber
  dictionary!(name, bool) wclassInKeyconf; // this is used to "seal" keyconf weapons
  // do it
  foreach (auto sidx; 0..NUM_WEAPON_SLOTS) {
    if (GI.kkWeaponSlots[sidx].weapons.length == 0) {
      if (GI.kkWeaponSlotCopy[sidx]) continue;
      if (debugDump) printdebug("*** KK/GI slot #%d: cleared!", sidx);
    }
    // overwrite slot
    actualWeaponSlots[sidx].weapons.reset();
    foreach (ref auto wi; GI.kkWeaponSlots[sidx].weapons) {
      assert(wi.wcls);
      class!Weapon wcls = GetBDWOverride(wi.wcls);
      if (debugDump) printdebug("*** %s slot #%d, weapon #%d: %C", (wi.src == LineSpecialGameInfo::WSlotSrc.KEYCONF ? "KEYCONF" : "GameInfo"), sidx, actualWeaponSlots[sidx].weapons.length, wcls);
      actualWeaponSlots[sidx].weapons[$] = wcls;
      wclassInKeyconf.put(GetClassName(wcls), true);
      if (wcls != wi.wcls) wclassInKeyconf.put(GetClassName(wi.wcls), true);
    }
  }

  // now append all weapons with slot number
  int[NUM_WEAPON_SLOTS+1] needSlotSorting;
  assert(needSlotSorting.length == actualWeaponSlots.length);
  foreach (ref auto b; needSlotSorting) b = false;

  {
    class!Weapon wcls;
    foreach AllClasses(Weapon, wcls) {
      //if (debugDump) printdebug(":::000: %C", wcls);
      class!Weapon repl = class!Weapon(GetClassReplacement(wcls));
      if (repl && repl != wcls) continue; // this weapon is replaced with another one, don't bother
      //if (debugDump) printdebug(":::001: %C; defsnum=%s", wcls, wcls.default.SlotNumber);
      // check for keyconf seal
      if (wclassInKeyconf.find(GetClassName(wcls))) {
        if (debugDump) printdebug("*** %C: this weapon is sealed by keyconf", wcls);
        continue;
      }
      // check if this weapon can be "readied"
      if (!EntityEx.CheckSpawnGameFilter(wcls, Level.Game)) continue;
      if (!Weapon.IsUsableWeaponClass(wcls)) {
        if (debugDump) printdebug("*** %C: this weapon is unusable, skipping it", wcls);
        continue;
      }
      // skip powered sister weapons
      if (IsHHPoweredWeapon(wcls)) {
        if (debugDump) printdebug("*** %C: this weapon is powered sister weapon, skipping it", wcls);
        continue;
      }
      // try to find a slot number
      int snum = wcls.default.SlotNumber-1;
      if (snum < 0 || snum >= actualWeaponSlots.length) {
        // if this is replacement weapon, get slot number from replacee
        class!Weapon rpx = class!Weapon(GetClassReplacee(wcls));
        if (rpx) snum = rpx.default.SlotNumber-1;
        // if direct replacee don't have slot number, try to find one in inheritance chain
        if (snum < 0 || snum >= actualWeaponSlots.length) {
          rpx = wcls;
          while (rpx) {
            snum = rpx.default.SlotNumber-1;
            if (snum >= 0 && snum < actualWeaponSlots.length) break;
            rpx = class!Weapon(GetClassParent(rpx));
          }
        }
        // as a last resort, try replacee inheritance chain
        if (snum < 0 || snum >= actualWeaponSlots.length) {
          rpx = class!Weapon(GetClassReplacee(wcls));
          while (rpx) {
            snum = rpx.default.SlotNumber-1;
            if (snum >= 0 && snum < actualWeaponSlots.length) break;
            rpx = class!Weapon(GetClassParent(rpx));
          }
        }
      }
      //if (debugDump) printdebug(":::002: %C; snum=%s", wcls, snum);
      // check found slot number
      if (snum < 0 || snum >= actualWeaponSlots.length) {
        if (!HasWeaponInAnySlot(wcls)) {
          // special handling for Strife Sigils
          if (wcls isa 'Sigil') {
            if (GetClassName(wcls) != 'Sigil') {
              // find base Sigil slot number
              int sgnum = FindSigilSlotNumber();
              if (sgnum >= 0 && sgnum < actualWeaponSlots.length) {
                if (debugDump) printdebug(":::%C: added to sigil slot %d", wcls, sgnum);
                needSlotSorting[sgnum] = true;
                actualWeaponSlots[sgnum].weapons[$] = wcls;
              }
            } else {
              if (debugDump) printdebug(":::%C: skipped base Sigil", wcls);
            }
          } else {
            // skip known  weapons
            name cname = GetClassName(wcls);
            bool doreport = GetCvarB('dbg_report_orphan_weapons');
            /*
            if (doreport) {
              switch (cname) {
                case 'Chainsaw':
                case 'Shotgun':
                case 'SuperShotgun':
                case 'Chaingun':
                case 'RocketLauncher':
                case 'PlasmaRifle':
                case 'BFG9000':
                case 'FWeapAxe':
                case 'FWeapHammer':
                case 'StrifeGrenadeLauncher':
                case 'StrifeGrenadeLauncher2':
                  doreport = false;
                  break;
              }
            }
            */
            if (doreport) {
              printwarn("weapon `%C` has no defined slot (put into slot 11): %s", wcls, GetClassLocationStr(wcls));
            }
            needSlotSorting[10] = true;
            actualWeaponSlots[10].weapons[$] = wcls;
          }
        }
        continue;
      }
      // ok, this weapon has a slot, and can be "readied"; but do we already have it slotted?
      bool wasPresent = false, sameSlot = false;
      // if it present in the same slot, do nothing
      foreach (auto sidx; 0..GetNumberOfSlots()) {
        foreach (auto widx; 0..GetSlotSize(sidx)) {
          class!Weapon swc = GetWeaponInSlot(sidx, widx);
          if (swc == wcls) {
            wasPresent = true;
            if (sidx == snum) sameSlot = true;
          }
        }
      }
      // in the same slot?
      if (sameSlot) {
        if (debugDump) printdebug("*** weapon %C: want slot #%d, and it is already there", wcls, snum);
        continue;
      }
      // if weapon present in other slots, remove it from other slots
      if (wasPresent) {
        foreach (auto sidx; 0..GetNumberOfSlots()) {
          int widx = 0;
          while (widx < actualWeaponSlots[sidx].weapons.length) {
            class!Weapon swc = GetWeaponInSlot(sidx, widx);
            if (swc != wcls) { ++widx; continue; }
            if (debugDump) printdebug("*** weapon %C: removing from slot #%d", wcls, sidx);
            actualWeaponSlots[sidx].weapons.remove(widx);
          }
        }
      }
      // mark this slot as one that needs sorting
      needSlotSorting[snum] = true;
      // put it in a slot
      if (debugDump) printdebug("*** weapon %C: adding to slot #%d as weapon #%d", wcls, snum, actualWeaponSlots[snum].weapons.length);
      actualWeaponSlots[snum].weapons[$] = wcls;
    }
  }

  // now sort all slots that needs sorting
  foreach (int slot; 0..needSlotSorting.length) {
    //if (!needSlotSorting[slot]) continue; // it is cheap to sort slots anyway
    actualWeaponSlots[slot].weapons.sort(&CompareWeaponPosition);
    // remove empty entries
    while (actualWeaponSlots[slot].weapons.length && !actualWeaponSlots[slot].weapons[$-1]) actualWeaponSlots[slot].weapons.length -= 1;
  }

  DumpWeaponSlots();
}


//==========================================================================
//
//  ShouldDropItems
//
//==========================================================================
override bool ShouldDropItems () {
  return false;
}


//==========================================================================
//
//  AddInventory
//
//==========================================================================
override void AddInventory (Inventory Item) {
  if (!Item) return; //k8: just in case
  ::AddInventory(Item);
  if (bIsPlayer && Item.bInvBar && !PlayerEx(Player).InvPtr) {
    PlayerEx(Player).InvPtr = Item;
    PlayerEx(Player).InvFirst = Item;
  }
}


//==========================================================================
//
//  RemoveInventory
//
//==========================================================================
override void RemoveInventory (Inventory Item) {
  if (!Item) return; //k8: just in case
  PlayerEx pex = (bIsPlayer ? PlayerEx(Player) : none);

  bool SelectNewWeap = false;

  if (pex) {
    if (pex.InvPtr == Item) {
      pex.InvPtr = Item.PrevInv();
      if (!pex.InvPtr) pex.InvPtr = Item.NextInv();
    }
    if (pex.InvFirst == Item) {
      pex.InvFirst = Item.PrevInv();
      if (!pex.InvFirst) pex.InvFirst = Item.NextInv();
    }
    if (pex.PendingWeapon == Item) pex.PendingWeapon = none;
    if (pex.ReadyWeapon == Item) {
      pex.ReadyWeapon = none;
      pex.ResetWeaponReloadRefire();
      SelectNewWeap = true;
    }
  }

  ::RemoveInventory(Item);

  if (pex && Item.bInvBar) pex.AdjustInvFirst();

  if (pex && SelectNewWeap && !pex.PendingWeapon) {
    Weapon Best = pex.BestWeapon();
    if (Best) {
      pex.SetWeapon(Best);
      pex.BringUpWeapon();
    }
  }
}


//==========================================================================
//
//  UseInventory
//
//==========================================================================
override bool UseInventory (Inventory Item) {
  if (!Item) return false; //k8: just in case
  PlayerEx pex = (bIsPlayer ? PlayerEx(Player) : none);
  if (!pex) return false; //k8: just in case

  // can't use anything while totally frozen
  if (pex.bTotallyFrozen || (Level.bFrozen && !(pex.Cheats&PlayerEx::CF_TIMEFREEZE))) {
    return false;
  }

  // found match -- try to use
  if (!::UseInventory(Item)) {
    if (!PuzzleItem(Item)) {
      // unable to use artifact, advance pointer
      // gozzo doesn't do this at all; we'll do this for Heretic and Hexen
      string gamename = GetCvarS('game_name');
      if (stricmp(gamename, "Heretic") == 0 || stricmp(gamename, "Hexen") == 0) {
        pex.PlayerNextArtifact();
      }
    }
    return false;
  }

  PlaySound(Item.UseSound, /*CHAN_BODY*//*CHAN_VOICE*/CHAN_AUTO);
  pex.ArtifactFlash = 4;
  return true;
}


//==========================================================================
//
//  AdjustCrouchSpeed
//
//  moved to separate method, do mods can override it
//
//==========================================================================
void AdjustCrouchSpeed (ref float forward, ref float side) {
  // when crouching, speed have to be reduced, and player is not allowed to run
  // normal speed is |1000|, running speed is |2000|
  if (crouchfactor != 1) {
    //if (forward) print("old: f=%s; s=%s; nf=%s; ns=%s", forward, side, forward*crouchfactor, side*crouchfactor);
    forward = fclamp(forward, -WALKING_SPEED, WALKING_SPEED);
    side = fclamp(side, -WALKING_SPEED, WALKING_SPEED);
    forward *= /*crouchfactor*/CROUCHSLOWDOWN;
    side *= /*crouchfactor*/CROUCHSLOWDOWN;
  }
}


//==========================================================================
//
//  AdjustSpeed
//
//  this clamps player speed, and applies some boosts/restrictions
//
//==========================================================================
void AdjustSpeed (ref float forward, ref float side) {
  // when the player has less than 25 health points, he's unable to run
  // used only in Strife
  if (Health < RunHealth) {
    forward = fclamp(forward, -WALKING_SPEED, WALKING_SPEED);
    side = fclamp(side, -WALKING_SPEED, WALKING_SPEED);
  }

  //forward *= (forward >= -1000.0 && forward < 1000.0 ? ForwardMove1 : ForwardMove2);
  if (forward) {
    //printdebug("%C:000: forward=%s (%s : %s)", self, forward, ForwardMove1, ForwardMove2);
    forward *= (fabs(forward) <= 1000.0 ? ForwardMove1 : ForwardMove2);
    //printdebug("%C:001: forward=%s (%s : %s)", self, forward, ForwardMove1, ForwardMove2);
  }
  if (side) {
    //printdebug("%C:000: side=%s (%s : %s)", self, side, SideMove1, SideMove2);
    side *= (fabs(side) <= 1000 ? SideMove1 : SideMove2);
    //printdebug("%C:001: side=%s (%s : %s)", self, side, SideMove1, SideMove2);
  }

  if (Inventory && !PlayerEx(Player).MorphTime) {
    // adjust for a player with a speed artifact
    float SpeedFactor = Inventory.GetSpeedFactor();
    forward *= SpeedFactor;
    side *= SpeedFactor;
  }

  AdjustCrouchSpeed(ref forward, ref side);
}


//==========================================================================
//
//  MorphPlayerThink
//
//==========================================================================
void MorphPlayerThink () {
}


//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================
override int GetSigilPieces () {
  return PlayerEx(Player).GetSigilPieces();
}


//==========================================================================
//
//  UnmorphActor
//
//==========================================================================
override int UnmorphActor (Entity Activator, int Force) {
  if (PlayerEx(Player).MorphTime) {
    return PlayerEx(Player).UndoPlayerMorph(Force, (Activator ? PlayerEx(Activator.Player) : none));
  }
  return 0;
}


//==========================================================================
//
//  GetRealHeight
//
//==========================================================================
final float GetRealHeight () {
  float res = RealHeight;
  if (res == -666) {
    res = Height;
    RealHeight = res;
  }
  return res;
}


//==========================================================================
//
//  GetHeight
//
//==========================================================================
override float GetHeight () {
  return (RealHeight == -666 ? Height : RealHeight);
}


//==========================================================================
//
//  SetHeight
//
//==========================================================================
override void SetHeight (float newvalue) {
  RealHeight = newvalue;
  Height = newvalue*crouchfactor;
}


//==========================================================================
//
//  IsPrimaryBloodSpawnAllowed
//
//  called from `EntityEx::DamageEx()` to give a chance for spawning
//  additional blood for primary bullet attacks
//
//==========================================================================
bool IsPrimaryBloodSpawnAllowed (EntityEx victim, int damage, name DmgType) {
  secondaryBloodCount = (GetCvarI('k8GoreOpt_BloodAmount') >= 3 ? 3+P_Random()%4 : 0);
  //printdebug("%C: IsPrimaryBloodSpawnAllowed; victim=%C; cnt=%s", self, victim, secondaryBloodCount);
  return true;
}


//==========================================================================
//
//  IsSecondaryBloodSpawnAllowed
//
//  called from `EntityEx::DamageEx()` to give a chance for spawning
//  additional blood for secondary bullet attacks
//
//==========================================================================
bool IsSecondaryBloodSpawnAllowed (EntityEx victim, int damage, name DmgType) {
  // 0: do nothing, return false
  // >0: if 1, allow blood; decrement
  //printdebug("%C: IsSecondaryBloodSpawnAllowed; victim=%C; cnt=%s", self, victim, secondaryBloodCount);
  if (secondaryBloodCount <= 0) return false;
  return (secondaryBloodCount-- == 1);
}


//===========================================================================
//
//  GetCrouchFactor
//
//===========================================================================
[decorate] final float decorate_GetCrouchFactor () {
  return crouchfactor;
}


defaultproperties {
  Health = 100;
  Radius = 16.0;
  Height = 56.0;
  PainChance = 1.0;
  Speed = 1.0;
  ReactionCount = 0;
  ViewHeight = 41.0;
  RealHeight = -666;
  ForwardMove1 = 1.0;
  ForwardMove2 = 1.0;
  SideMove1 = 1.0;
  SideMove2 = 1.0;
  JumpVelZ = 8.0*35.0;
  AttackZOffset = 8.0;
  DamageScreenColor = 0xffff0000;
  bSolid = true;
  bShootable = true;
  bDropOff = true;
  bPickUp = true;
  bNoDeathmatch = true;
  bFriendly = true;
  bSlide = true;
  bPassMobj = true;
  bActivatePushWall = true;
  bFloorClip = true;
  bWindThrust = true;
  bTelestomp = true;
  bNoBlockMonst = true;
  k8hsCount = 0;
  secondaryBloodCount = 0;
}
