//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class PlayerPawn : Actor abstract;

// default view height
float ViewHeight;

// real height without crouching; -666 means "not initialized"
float RealHeight;

// player is unable to run if health is lower than this
int RunHealth;

// movement speed modifiers
float ForwardMove1;
float ForwardMove2;
float SideMove1;
float SideMove2;

// colour translation range
int TranslStart;
int TranslEnd;

// values for Hexen armor
float HexenArmor[5];

// jump velocity
// MO `JumpVelZ` is used instead
//!float JumpVelZ;

// name displayed in menu
string DisplayName;

// for ArtiHealRadius
name HealRadiusType;

// special mode of the invulnerability powerup
name InvulnerabilityMode;

// which class filter to use
name SpawnClass;

// icon for intermission screen
name ScoreIcon;

// for morphed player classes
class!Weapon MorphWeapon;

// attack offset, relative to the centre of the player
float AttackZOffset;

// damage flash colour
int DamageScreenColour;

// maximal health
int MaxHealth;

// K8 Headshots Variables
int k8hsCount;


//==========================================================================
//
//  ShouldDropItems
//
//==========================================================================
override bool ShouldDropItems () {
  return false;
}


//==========================================================================
//
//  AddInventory
//
//==========================================================================
override void AddInventory (Inventory Item) {
  if (!Item) return; //k8: just in case
  ::AddInventory(Item);
  if (bIsPlayer && Item.bInvBar && !PlayerEx(Player).InvPtr) {
    PlayerEx(Player).InvPtr = Item;
    PlayerEx(Player).InvFirst = Item;
  }
}


//==========================================================================
//
//  RemoveInventory
//
//==========================================================================
override void RemoveInventory (Inventory Item) {
  if (!Item) return; //k8: just in case
  bool SelectNewWeap = false;
  if (bIsPlayer) {
    if (PlayerEx(Player).InvPtr == Item) {
      PlayerEx(Player).InvPtr = Item.PrevInv();
      if (!PlayerEx(Player).InvPtr) PlayerEx(Player).InvPtr = Item.NextInv();
    }
    if (PlayerEx(Player).InvFirst == Item) {
      PlayerEx(Player).InvFirst = Item.PrevInv();
      if (!PlayerEx(Player).InvFirst) PlayerEx(Player).InvFirst = Item.NextInv();
    }
    if (PlayerEx(Player).PendingWeapon == Item) PlayerEx(Player).PendingWeapon = none;
    if (PlayerEx(Player).ReadyWeapon == Item) {
      PlayerEx(Player).ReadyWeapon = none;
      PlayerEx(Player).Refire = 0;
      SelectNewWeap = true;
    }
  }

  ::RemoveInventory(Item);

  if (bIsPlayer && Item.bInvBar) PlayerEx(Player).AdjustInvFirst();

  if (SelectNewWeap && !PlayerEx(Player).PendingWeapon) {
    Weapon Best = PlayerEx(Player).BestWeapon();
    if (Best) {
      PlayerEx(Player).SetWeapon(Best);
      PlayerEx(Player).BringUpWeapon();
    }
  }
}


//==========================================================================
//
//  UseInventory
//
//==========================================================================
override bool UseInventory (Inventory Item) {
  if (!Item) return false; //k8: just in case
  // can't use anything while totally frozen
  if (PlayerEx(Player).bTotallyFrozen ||
      (Level.bFrozen &&
      !(PlayerEx(Player).Cheats & PlayerEx::CF_TIMEFREEZE)))
  {
    return false;
  }

  // found match -- try to use
  if (!::UseInventory(Item)) {
    if (!PuzzleItem(Item)) {
      // unable to use artifact, advance pointer
      PlayerEx(Player).PlayerNextArtifact();
    }
    return false;
  }

  PlaySound(Item.UseSound, /*CHAN_BODY*/CHAN_AUTO);
  PlayerEx(Player).ArtifactFlash = 4;
  return true;
}


//==========================================================================
//
//  AdjustSpeed
//
//==========================================================================
final void AdjustSpeed (out float forward, out float side) {
  // when the player has less than 25 health points, he's unable to run
  if (Health < RunHealth) {
    //if (forward > 1000.0) forward = 1000.0; else if (forward < -1000.0) forward = -1000.0;
    forward = fclamp(forward, -1000.0, 1000.0);
    //if (side > 1000.0) side = 1000.0; else if (side < -1000.0) side = -1000.0;
    side = fclamp(side, -1000.0, 1000.0);
  }

  if (forward >= -1000.0 && forward < 1000.0) {
    forward *= ForwardMove1;
  } else {
    forward *= ForwardMove2;
  }

  if (side >= -1000.0 && side < 1000.0) {
    side *= SideMove1;
  } else {
    side *= SideMove2;
  }

  if (Inventory && !PlayerEx(Player).MorphTime) {
    // adjust for a player with a speed artifact
    float SpeedFactor = Inventory.GetSpeedFactor();
    forward *= SpeedFactor;
    side *= SpeedFactor;
  }
}


//==========================================================================
//
//  MorphPlayerThink
//
//==========================================================================
void MorphPlayerThink () {
}


//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================
override int GetSigilPieces () {
  return PlayerEx(Player).GetSigilPieces();
}


//==========================================================================
//
//  UnmorphActor
//
//==========================================================================
override int UnmorphActor (Entity Activator, int Force) {
  if (PlayerEx(Player).MorphTime) {
    return PlayerEx(Player).UndoPlayerMorph(Force, (Activator ? PlayerEx(Activator.Player) : none));
  }
  return 0;
}


//==========================================================================
//
//  GetRealHeight
//
//==========================================================================
final float GetRealHeight () {
  float res = RealHeight;
  if (res == -666) {
    res = Height;
    RealHeight = res;
  }
  return res;
}


//==========================================================================
//
//  GetHeight
//
//==========================================================================
override float GetHeight () {
  return (RealHeight == -666 ? Height : RealHeight);
}


//==========================================================================
//
//  SetHeight
//
//==========================================================================
override void SetHeight (float newvalue) {
  RealHeight = newvalue;
  Height = newvalue*crouchfactor;
}


defaultproperties {
  Health = 100;
  Radius = 16.0;
  Height = 56.0;
  PainChance = 1.0;
  Speed = 1.0;
  ReactionCount = 0;
  ViewHeight = 41.0;
  RealHeight = -666;
  ForwardMove1 = 1.0;
  ForwardMove2 = 1.0;
  SideMove1 = 1.0;
  SideMove2 = 1.0;
  JumpVelZ = 8.0 * 35.0;
  AttackZOffset = 8.0;
  DamageScreenColour = 0xffff0000;
  bSolid = true;
  bShootable = true;
  bDropOff = true;
  bPickUp = true;
  bNoDeathmatch = true;
  bFriendly = true;
  bSlide = true;
  bPassMobj = true;
  bActivatePushWall = true;
  bFloorClip = true;
  bWindThrust = true;
  bTelestomp = true;
  bNoBlockMonst = true;
  k8hsCount = 0;
}
