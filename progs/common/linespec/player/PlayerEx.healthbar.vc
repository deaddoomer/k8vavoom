//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************

int nextTicTimeCheck;


//==========================================================================
//
//  HealthBarInit
//
//==========================================================================
void HealthBarInit () {
  nextTicTimeCheck = 0;
}


//==========================================================================
//
//  HealthBarDeinit
//
//==========================================================================
void HealthBarDeinit () {
  nextTicTimeCheck = 0;
}


//==========================================================================
//
//  HealthBarProcessor
//
//==========================================================================
void HealthBarProcessor () {
  if (/*hbarPicBack < 0 ||*/ !MO) return;

  EntityEx ent = EntityEx(MO);
  if (!ent) return;

  int ttime = ent.XLevel.TicTime;
  int diff = nextTicTimeCheck-ttime;
  if (diff > 0 && diff < 8) return;
  nextTicTimeCheck = ttime+6;

  if (!GetCvarB('k8HealthBar')) return;
  if (GetCvarF('k8HealthBarAlpha') <= 0) return;

  // find actor
  TVec dir;
  AngleVector(ent.Angles, out dir);
  int actorMask = (GetCvarB('k8HealthBarShowAll') ? -1 : MF_SHOOTABLE);
  EntityEx ee = EntityEx(ent.PickActor(org:default, dir:dir, distance:8192, actorMask:actorMask, wallMask:ML_BLOCKEVERYTHING|ML_BLOCKHITSCAN));
  if (!ee) return;

  if (actorMask != -1 && !ee.bMonster && GetCvarB('k8HealthBarOnlyMonsters')) return;

  string ename;
  if (GetCvarB('k8HealthBarShowClassName')) {
    ename = va("[%C]", ee);
  } else {
    ename = ee.StrifeName.xstrip;
    if (!ename) {
      if (ee.bIsPlayer && ee.Player && PlayerPawn(ee.Player)) {
        ename = PlayerPawn(ee.Player).DisplayName.xstrip;
        if (ename) ename = va("<%s>", ename);
      }
      if (!ename) ename = va("[%C]", ee);
    }
  }
  if (!ename) ename = "<unknown class>";

       if (ee.bInvulnerable) ename = va("\cP%s", ename); // invulnerables are olive
  else if (ee.bIsPlayer) ename = va("\cY%s", ename); // players are sapphire
  else if (ee.bBoss) ename = va("\cX%s", ename); // bosses are yellow
  else if (!ee.bMonster && !ee.bMissile) {
         if (ee.bShootable) ename = va("\cG%s", ename); // shootables are red
    else if (ee.bPickUp) ename = va("\cI%s", ename); // pickups are orange
    else if (!ee.bSolid) ename = va("\cD%s", ename); // non-solids are green
    else if (ee.bDormant) ename = va("\cT%s", ename); // dormants are purple
    else ename = va("\cU%s", ename); // decorations are dark-gray
  }

  int hltmax = max(1, int(PlayerPawn(ee) ? PlayerPawn(ee).MaxHealth : ee.InitialHealth));
  int hlt = max(0, int(ee.Health));
  int prc = 100*hlt/hltmax;
  string msg = va("%d%% (%d/%d)\n%s", prc, hlt, hltmax, ename);

  int clr = CR_WHITE;
       if (prc < 30) clr = CR_RED;
  else if (prc < 50) clr = CR_YELLOW;
  else if (prc < 80) clr = CR_GOLD;
  else if (prc < 100) clr = CR_GREEN;
  else clr = CR_WHITE;

  ClientHudMessage(msg, 'HEALTHBAR', Type:-1, Id:0xfffffffe, Color:clr, ColorName:"", x:/*320.0*/0, y:/*32.0*/0,
    HudWidth:/*640*/0, HudHeight:/*512*/0,
    HoldTime:7.0/35.0,
    Time1:hlt, Time2:hltmax);
}
