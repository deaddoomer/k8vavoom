//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MorphedMonster : Actor;

int MorphStyle;
float UnmorphTime;
class!Actor UnmorphFlash;
EntityEx UnmorphedMo;


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  if (!UpdateMorphedMonster()) ::Tick(DeltaTime);
}


//==========================================================================
//
//  UpdateMorphedMonster
//
//  Returns true if the pig morphs.
//
//==========================================================================
bool UpdateMorphedMonster () {
  if (Health <= 0) return false;
  if (UnmorphTime > XLevel.Time) return false;
  if (!UnmorphActor(none, false)) return false;
  return true;
}


//==========================================================================
//
//  UnmorphActor
//
//==========================================================================
override int UnmorphActor (Entity Activator, int Force) {
  TVec oldOrigin;
  class!EntityEx originalClass;
  float oldAngle;
  int oldSpecial;
  int oldTID;
  int[5] oldArgs;
  EntityEx mo;

  originalClass = SpecialCID;
  if (originalClass.default.bStayMorphed) return false; // these must remain morphed

  oldOrigin = Origin;
  oldAngle = Angles.yaw;
  oldSpecial = Special;
  oldTID = TID;
  oldArgs[0] = Args[0];
  oldArgs[1] = Args[1];
  oldArgs[2] = Args[2];
  oldArgs[3] = Args[3];
  oldArgs[4] = Args[4];

  UnlinkFromWorld();
  mo = Spawn(originalClass, Origin, AllowReplace:false); //k8:dunno

  if (!mo.TestLocation() && !Force) {
    // didn't fit
    mo.Destroy();
    LinkToWorld(properFloorCheck:true);
    UnmorphTime = XLevel.Time+5.0; // next try in 5 seconds
    return false;
  }
  LinkToWorld(properFloorCheck:true);
  SetTID(0);
  mo.Angles.yaw = oldAngle;
  mo.Special = oldSpecial;
  mo.Args[0] = oldArgs[0];
  mo.Args[1] = oldArgs[1];
  mo.Args[2] = oldArgs[2];
  mo.Args[3] = oldArgs[3];
  mo.Args[4] = oldArgs[4];
  mo.SetTID(oldTID);
  mo.CopyFriendliness(self, true);
  mo.bShadow = bShadow;
  mo.bGhost = bGhost;
  SetState(FindState('FreeTargMobj'));
  UnmorphedMo = mo;
  Spawn(UnmorphFlash ? UnmorphFlash : class!Actor(TeleportFog),
        oldOrigin+vector(0.0, 0.0, LineSpecialGameInfo(Level.Game).TeleFogHeight));
  return true;
}


//==========================================================================
//
//  MorphedDeath
//
//==========================================================================
override bool MorphedDeath (out EntityEx Morphed, out int MorphedStyle, out int MorphedHealth) {
  if (UnmorphTime && (MorphStyle&MORPH_UNDOBYDEATH)) {
    int RealStyle = MorphStyle;
    int RealHealth = Health;
    if (UnmorphActor(none, MorphStyle&MORPH_UNDOBYDEATHFORCED)) {
      Morphed = UnmorphedMo;
      MorphedStyle = RealStyle;
      MorphedHealth = RealHealth;
      return true;
    }
  }
  bStayMorphed = true;
  return false;
}


defaultproperties {
  bAlwaysTick = true;
}
