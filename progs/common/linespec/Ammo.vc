//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Ammo : Inventory
  abstract;

int       BackpackAmount;
int       BackpackMaxAmount;
int       DropAmount;

//==========================================================================
//
//  GetParentAmmo
//
//==========================================================================

final class!Ammo GetParentAmmo()
{
  class Ret = Class;
  //  Get parent class that is direct descendant of Ammo class.
  while (GetClassParent(Ret) != Ammo)
  {
    Ret = GetClassParent(Ret);
  }
  return class!Ammo(Ret);
}

//==========================================================================
//
// k8GetAmmoKingMax
//
//==========================================================================

final int k8GetAmmoKingMax () {
  if (!GetCvarB('k8AmmoKing')) return MaxAmount;

  int max = 666;

  if (GetClassName(Class) == 'BDW_RifleClip' || GetClassName(Class) == 'BDW_ShotgunShell' ||
      GetClassName(GetClassReplacee(Class)) == 'Clip' || GetClassName(GetClassReplacee(Class)) == 'Shell')
  {
    if (GetCvarB('k8HSEnabled')) max = 444; // headshots ARE powerful!
  }

  return max;
}

//==========================================================================
//
//  HandlePickup
//
//==========================================================================

override bool HandlePickup(Inventory Item)
{
  if (Item.Class == Class ||
    (Ammo(Item) && Ammo(Item).GetParentAmmo() == Class))
  {
    if (Amount == /*MaxAmount*/k8GetAmmoKingMax())
    {
      //  We're full.
      return true;
    }

    int ReceiveAmount = Item.Amount;
    if (!Item.bIgnoreSkill)
    {
      //  Extra ammo in baby mode and nightmare mode
      ReceiveAmount = ftoi(itof(ReceiveAmount) *
        Level.World.SkillAmmoFactor);
    }

    int oldammo = Amount;

    Amount += ReceiveAmount;
    if (Amount > /*MaxAmount*/k8GetAmmoKingMax())
    {
      Amount = /*MaxAmount*/k8GetAmmoKingMax();
    }

    //  If non zero ammo, don't change up weapons,
    // player was lower on purpose.
    if (oldammo <= 0 && Owner.Player)
    {
      PlayerEx(Owner.Player).GotAmmo(self);
    }
    Item.bPickupGood = true;
    return true;
  }
  if (Inventory)
  {
    return Inventory.HandlePickup(Item);
  }
  return false;
}

//==========================================================================
//
//  CreateCopy
//
//==========================================================================

override Inventory CreateCopy(EntityEx Toucher)
{
  int NewAmount = Amount;
  if (!bIgnoreSkill)
  {
    //  Extra ammo in baby mode and nightmare mode
    NewAmount = ftoi(itof(NewAmount) * Level.World.SkillAmmoFactor);
  }

  Inventory Copy;
  if (GetClassParent(Class) == Ammo)
  {
    Copy = ::CreateCopy(Toucher);
  }
  else
  {
    Copy = Spawn(GetParentAmmo(), default, default, default, false);
    GoAwayAndDie();
  }
  Copy.Amount = NewAmount;
  //  Don't pick up more ammo that you can carry.
  if (Copy.Amount > Copy.MaxAmount)
  {
    Copy.Amount = Copy.MaxAmount;
  }
  return Copy;
}

//==========================================================================
//
//  CreateTossable
//
//==========================================================================

override Inventory CreateTossable()
{
  Inventory Copy = ::CreateTossable();
  if (Copy)
  {
    //  Avoid cheating on certain skill levels.
    Copy.bIgnoreSkill = true;
  }
  return Copy;
}

defaultproperties
{
  PickupSound = 'misc/ammo_pkup';
  bKeepDepleted = true;
}
