//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class LightningThinker : Actor;

int       Sky1Texture;
int       Sky2Texture;
float     NextLightningFlash;
float     LightningFlash;
array<int>    LightningLightLevels;
array<byte>   LightningSectors;
bool      bStopping;

//==========================================================================
//
//  Init
//
//==========================================================================

void Init()
{
  // Check if the level is a lightning level
  Sky1Texture = Level.Sky1Texture;
  Sky2Texture = Level.Sky2Texture;
  LightningFlash = 0.0;
  LightningLightLevels.Num = XLevel.NumSectors;
  LightningSectors.Num = (XLevel.NumSectors + 7) / 8;
  NextLightningFlash = Random() * 15.0 + 5.0; // don't flash at level start
}

//==========================================================================
//
//  Tick
//
//==========================================================================

override void Tick(float DeltaTime)
{
  //  Update lightning
  if (!NextLightningFlash || LightningFlash)
  {
    DoLightningFlash(DeltaTime);
  }
  else
  {
    NextLightningFlash -= DeltaTime;
    if (NextLightningFlash < 0.0)
    {
      NextLightningFlash = 0.0;
    }
    if (bStopping)
    {
      Destroy();
    }
  }
}

//==========================================================================
//
//  DoLightningFlash
//
//==========================================================================

void DoLightningFlash(float DeltaTime)
{
  int     i;
  sector_t* tempSec;
  bool    foundSec;
  int     flashLight;

  if (LightningFlash)
  {
    LightningFlash -= DeltaTime;
    if (LightningFlash > 0.0)
    {
      for (i = 0; i < XLevel.NumSectors; i++)
      {
        tempSec = &XLevel.Sectors[i];
        if (LightningSectors[i / 8] & (1 << (i & 7)))
        {
          if (LightningLightLevels[i] < tempSec->params.lightlevel - 4)
          {
            tempSec->params.lightlevel -= 4;
          }
        }
      }
    }
    else
    {
      // remove the alternate lightning flash special
      LightningFlash = 0.0;
      for (i = 0; i < XLevel.NumSectors; i++)
      {
        tempSec = &XLevel.Sectors[i];
        if (LightningSectors[i / 8] & (1 << (i & 7)))
        {
          tempSec->params.lightlevel = LightningLightLevels[i];
        }
      }
      Level.Sky1Texture = Sky1Texture;
    }
    return;
  }

  LightningFlash = Random() * 0.25 + 0.25;
  flashLight = 200 + (P_Random() & 31);
  foundSec = false;
  for (i = (XLevel.NumSectors + 7) / 8 - 1; i >= 0; i--)
  {
    LightningSectors[i] = 0;
  }
  for (i = 0; i < XLevel.NumSectors; i++)
  {
    tempSec = &XLevel.Sectors[i];
    int Spec = tempSec->special & SECSPEC_BASE_MASK;
    if (tempSec->ceiling.pic == Level.Game.skyflatnum ||
      Spec == SECSPEC_LightningOutdoor ||
      Spec == SECSPEC_LightningIndoor1 ||
      Spec == SECSPEC_Lightningindoor2)
    {
      LightningLightLevels[i] = tempSec->params.lightlevel;
      LightningSectors[i / 8] |= 1 << (i & 7);
      if (tempSec->special == SECSPEC_LightningIndoor1)
      {
        tempSec->params.lightlevel += 64;
        if (tempSec->params.lightlevel > flashLight)
        {
          tempSec->params.lightlevel = flashLight;
        }
      }
      else if (tempSec->special == SECSPEC_Lightningindoor2)
      {
        tempSec->params.lightlevel += 32;
        if (tempSec->params.lightlevel > flashLight)
        {
          tempSec->params.lightlevel = flashLight;
        }
      }
      else
      {
        tempSec->params.lightlevel = flashLight;
      }
      if (tempSec->params.lightlevel < LightningLightLevels[i])
      {
        tempSec->params.lightlevel = LightningLightLevels[i];
      }
      foundSec = true;
    }
  }

  if (foundSec)
  {
    Level.Sky1Texture = Sky2Texture; // set alternate sky
    PlaySound('world/thunder', CHAN_VOICE, 1.0, ATTN_NONE);
    XLevel.StartTypedACScripts(Level::SCRIPT_Lightning, 0, 0, 0, none,
      false, false);
  }

  // Calculate the next lighting flash
  if (!NextLightningFlash)
  {
    if (P_Random() < 50)
    {
      // Immediate Quick flash
      NextLightningFlash = (Random() * 0.5) + 0.5;
    }
    else
    {
      if (Random() < 0.5 && !(XLevel.TicTime & 32))
      {
        NextLightningFlash = Random() * 8.0 + 2.0;
      }
      else
      {
        NextLightningFlash = Random() * 16.0 + 5.0;
      }
    }
  }
}

//==========================================================================
//
//  ForceLightning
//
//==========================================================================

void ForceLightning(int Mode)
{
  switch (Mode)
  {
  default:
    NextLightningFlash = 0.0;
    break;

  case 1:
    NextLightningFlash = 0.0;
    bStopping = true;
    break;

  case 2:
    bStopping = true;
    break;
  }
}

defaultproperties
{
  bNoSector = true;
  bNoBlockmap = true;
  bNoSplash = true;
}
