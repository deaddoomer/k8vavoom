#ifdef VV_LDEF_USE_OLD_TRANSLATION_CODE
# define VV_LDEF_TRANS_PARSE_CHECK
#endif


#ifdef VV_LDEF_TRANS_PARSE_CHECK
dictionary!(int, bool) trans_seen;
#endif


//==========================================================================
//
//  OpenParserFromLump
//
//==========================================================================
static final ScriptsParser OpenParserFromLump (int lump) {
  auto sc = SpawnObject(ScriptsParser);
  //sc.OpenString('menudef', readText(fname));
  sc.OpenLumpIndex(lump);
  sc.SetCMode(true);
  sc.SetEscape(true);
  return sc;
}


//==========================================================================
//
//  ParseLDefTranslationScripts
//
//==========================================================================
void ParseLDefTranslationScripts () {
  foreach (int lump; WadIterateNS(EWadNamespace.Global)) {
    //printdebug("<<<%s>>> : <<<%s>>>", W_RealLumpName(lump), W_FullLumpName(lump));
    //continue;
    if (!W_RealLumpName(lump).strEquCI("vavoom_ldef_spec_trans.rc")) continue;
    printmsg(PMSG.Init, "parsing linedef special translation script '%s'", W_FullLumpName(lump));
    auto sc = OpenParserFromLump(lump);
    scope(exit) delete sc;
    while (!sc.AtEnd()) {
      if (sc.Check("linedef_specials_table")) {
        ParseLDefTranslations(sc);
        continue;
      }
      sc.ScriptError("unknown section '%s'", sc.String);
    }
  }

  #ifdef VV_LDEF_TRANS_PARSE_CHECK
  for (auto idx = spec_trans_tab.firstIndex(); spec_trans_tab.isValidIndex(idx); idx = spec_trans_tab.nextIndex(idx)) {
    auto osp = spec_trans_tab.keyAtIndex(idx);
    if (!trans_seen.find(osp)) {
      printerror("special %d is not seen", osp);
      assert(0);
    }
    trans_seen.remove(osp);
  }
  assert(trans_seen.length == 0);
  #endif
}


//==========================================================================
//
//  CustomParseLDefTranslations
//
//  this is called *BEFORE* standard processing, so you
//  may inject your own properties.
//
//  return `true` if you parsed the property.
//
//==========================================================================
bool CustomParseLDefTranslations (ScriptsParser sc, ref spec_trans_t trs) {
  return false;
}


//==========================================================================
//
//  ParseLDefTranslations
//
//  "linedef_specials_table" already eaten
//
//==========================================================================
void ParseLDefTranslations (ScriptsParser sc) {
  spec_trans_t trs;
  sc.Expect("{");

  while (!sc.Check("}")) {
    if (sc.AtEnd()) sc.ScriptError("unexpected end of file");

    sc.ExpectNumber();
    int oldspecial = sc.Number;
    if (oldspecial < 1 || oldspecial > 65535) sc.ScriptError("linedef special %d is out of range", oldspecial);

    sc.Expect("=");
    sc.Expect("{");

    // args are unchanged by default
    trs.special = LNSPEC_None;
    trs.arg1 = -666;
    trs.arg2 = -666;
    trs.arg3 = -666;
    trs.arg4 = -666;
    trs.arg5 = -666;
    trs.spac = 0;
    trs.repeat = false;
    trs.monst = false;
    trs.not_destroy = false;

    bool wasOtherBool = false;

    // parse properties
    while (!sc.Check("}")) {
      if (sc.AtEnd()) sc.ScriptError("unexpected end of file");

      if (CustomParseLDefTranslations(sc, ref trs)) continue;

      // args
      if (sc.Check("arg1")) { ParseLDefArgN(sc, ref trs.arg1); continue; }
      if (sc.Check("arg2")) { ParseLDefArgN(sc, ref trs.arg2); continue; }
      if (sc.Check("arg3")) { ParseLDefArgN(sc, ref trs.arg3); continue; }
      if (sc.Check("arg4")) { ParseLDefArgN(sc, ref trs.arg4); continue; }
      if (sc.Check("arg5")) { ParseLDefArgN(sc, ref trs.arg5); continue; }

      // action
      if (sc.Check("action")) { sc.Expect("="); trs.special = ParseLDefActionName(sc); sc.Expect(";"); continue; }

      // spac
      if (sc.Check("spac")) { trs.spac = ParseLDefSpacs(sc); continue; }

      // flags
      if (sc.Check("repeat")) { trs.repeat = ParseLDefBool(sc); wasOtherBool = true; continue; }
      if (sc.Check("monsteractivate")) { trs.monst = ParseLDefBool(sc); wasOtherBool = true; continue; }
      if (sc.Check("keepdata")) { trs.not_destroy = ParseLDefBool(sc); wasOtherBool = true; continue; }

      if (sc.Check("description")) { sc.Expect("="); sc.ExpectString(); sc.Expect(";"); continue; }
      if (sc.Check("sourceport")) { sc.Expect("="); sc.ExpectString(); sc.Expect(";"); continue; }
      if (sc.Check("comment")) { sc.Expect("="); sc.ExpectString(); sc.Expect(";"); continue; }

      sc.ScriptError("invalid linedef special property '%s'", sc.String);
    }

    if (trs.special == LNSPEC_SectorSet3dFloor || trs.special == LNSPEC_SectorSet3dThinFloorEDGE) {
      if (wasOtherBool) sc.ScriptError("3d floor translation cannot have boolean properties");
    }

    #ifdef VV_LDEF_TRANS_PARSE_CHECK
    if (trans_seen.find(oldspecial)) sc.ScriptError("duplicate definition for special %d", oldspecial);
    trans_seen.put(oldspecial, true);
    auto tpp = spec_trans_tab.find(oldspecial);
    if (!tpp) sc.ScriptError("definition for unknown special %d", oldspecial);
    if (tpp.special != trs.special) sc.ScriptError("definition for special %d has invalid action; expected '%s', but got '%s'", oldspecial, LineSpecial2Str(tpp.special), LineSpecial2Str(trs.special));
    if (tpp.arg1 != trs.arg1) sc.ScriptError("definition for special %d has invalid arg1; expected %d, but got %d", oldspecial, tpp.arg1, trs.arg1);
    if (tpp.arg2 != trs.arg2) sc.ScriptError("definition for special %d has invalid arg2; expected %d, but got %d", oldspecial, tpp.arg2, trs.arg2);
    if (tpp.arg3 != trs.arg3) sc.ScriptError("definition for special %d has invalid arg3; expected %d, but got %d", oldspecial, tpp.arg3, trs.arg3);
    if (tpp.arg4 != trs.arg4) sc.ScriptError("definition for special %d has invalid arg4; expected %d, but got %d", oldspecial, tpp.arg4, trs.arg4);
    if (tpp.arg5 != trs.arg5) sc.ScriptError("definition for special %d has invalid arg5; expected %d, but got %d", oldspecial, tpp.arg5, trs.arg5);
    if (tpp.spac != trs.spac) sc.ScriptError("definition for special %d has invalid spac; expected 0x%04x, but got 0x%04x", oldspecial, tpp.spac, trs.spac);
    if (tpp.repeat != trs.repeat) sc.ScriptError("definition for special %d has invalid repeat; expected %d, but got %d", oldspecial, tpp.repeat, trs.repeat);
    if (tpp.monst != trs.monst) sc.ScriptError("definition for special %d has invalid monsteractivate; expected %d, but got %d", oldspecial, tpp.monst, trs.monst);
    if (tpp.not_destroy != trs.not_destroy) sc.ScriptError("definition for special %d has invalid keepdata; expected %d, but got %d", oldspecial, tpp.not_destroy, trs.not_destroy);
    #else
    spec_trans_tab.put(oldspecial, trs);
    #endif
  }
}


//==========================================================================
//
//  ParseLDefArgN
//
//==========================================================================
void ParseLDefArgN (ScriptsParser sc, ref int arg) {
  sc.Expect("=");
       if (sc.Check("origarg1")) arg = -1;
  else if (sc.Check("origarg2")) arg = -2;
  else if (sc.Check("origarg3")) arg = -3;
  else if (sc.Check("origarg4")) arg = -4;
  else if (sc.Check("origarg5")) arg = -5;
  else if (sc.Check("unchanged")) arg = -666;
  else {
    sc.ExpectNumber();
    arg = sc.Number;
  }
  sc.Expect(";");
}


//==========================================================================
//
//  ParseLDefBool
//
//==========================================================================
bool ParseLDefBool (ScriptsParser sc) {
  sc.Expect("=");
  bool res = false;
       if (sc.Check("true")) res = true;
  else if (sc.Check("false")) res = false;
  else if (sc.Check("tan")) res = true;
  else if (sc.Check("ona")) res = false;
  else sc.ScriptError("invalid boolean value '%s'", sc.String);
  sc.Expect(";");
  return res;
}


//==========================================================================
//
//  ParseLDefSpacs
//
//==========================================================================
int ParseLDefSpacs (ScriptsParser sc) {
  sc.Expect("=");
  int res = 0;
  do {
         if (sc.Check("Cross")) res |= SPAC_Cross;
    else if (sc.Check("Use")) res |= SPAC_Use;
    else if (sc.Check("MCross")) res |= SPAC_MCross;
    else if (sc.Check("Impact")) res |= SPAC_Impact;
    else if (sc.Check("Push")) res |= SPAC_Push;
    else if (sc.Check("PCross")) res |= SPAC_PCross;
    else if (sc.Check("UseThrough")) res |= SPAC_UseThrough;
    else if (sc.Check("AnyCross")) res |= SPAC_AnyCross;
    else if (sc.Check("MUse")) res |= SPAC_MUse;
    else if (sc.Check("UseBack")) res |= SPAC_UseBack;
    else if (sc.Check("None")) res |= 0;
    else if (sc.Check("0")) res |= 0;
    else sc.ScriptError("invalid SPAC option '%s'", sc.String);
  } while (sc.Check("|"));
  sc.Expect(";");
  return res;
}


//==========================================================================
//
//  ParseLDefActionName
//
//==========================================================================
int ParseLDefActionName (ScriptsParser sc) {
  if (sc.Check("None")) return LNSPEC_None;
  if (sc.Check("PolyStartLine")) return LNSPEC_PolyStartLine;
  if (sc.Check("PolyRotateLeft")) return LNSPEC_PolyRotateLeft;
  if (sc.Check("PolyRotateRight")) return LNSPEC_PolyRotateRight;
  if (sc.Check("PolyMove")) return LNSPEC_PolyMove;
  if (sc.Check("PolyExplicitLine")) return LNSPEC_PolyExplicitLine;
  if (sc.Check("PolyMoveTimes8")) return LNSPEC_PolyMoveTimes8;
  if (sc.Check("PolyDoorSwing")) return LNSPEC_PolyDoorSwing;
  if (sc.Check("PolyDoorSlide")) return LNSPEC_PolyDoorSlide;
  if (sc.Check("LineHorizon")) return LNSPEC_LineHorizon;
  if (sc.Check("DoorClose")) return LNSPEC_DoorClose;
  if (sc.Check("DoorOpen")) return LNSPEC_DoorOpen;
  if (sc.Check("DoorRaise")) return LNSPEC_DoorRaise;
  if (sc.Check("DoorLockedRaise")) return LNSPEC_DoorLockedRaise;
  if (sc.Check("DoorAnimated")) return LNSPEC_DoorAnimated;
  if (sc.Check("Autosave")) return LNSPEC_Autosave;
  if (sc.Check("TransferWallLight")) return LNSPEC_TransferWallLight;
  if (sc.Check("ThingRaise")) return LNSPEC_ThingRaise;
  if (sc.Check("StartConversation")) return LNSPEC_StartConversation;
  if (sc.Check("ThingStop")) return LNSPEC_ThingStop;
  if (sc.Check("FloorLowerByValue")) return LNSPEC_FloorLowerByValue;
  if (sc.Check("FloorLowerToLowest")) return LNSPEC_FloorLowerToLowest;
  if (sc.Check("FloorLowerToNearest")) return LNSPEC_FloorLowerToNearest;
  if (sc.Check("FloorRaiseByValue")) return LNSPEC_FloorRaiseByValue;
  if (sc.Check("FloorRaiseToHighest")) return LNSPEC_FloorRaiseToHighest;
  if (sc.Check("FloorRaiseToNearest")) return LNSPEC_FloorRaiseToNearest;
  if (sc.Check("StairsBuildDownNormal")) return LNSPEC_StairsBuildDownNormal;
  if (sc.Check("StairsBuildUpNormal")) return LNSPEC_StairsBuildUpNormal;
  if (sc.Check("FloorRaiseAndCrush")) return LNSPEC_FloorRaiseAndCrush;
  if (sc.Check("PillarBuild")) return LNSPEC_PillarBuild;
  if (sc.Check("PillarOpen")) return LNSPEC_PillarOpen;
  if (sc.Check("StairsBuildDownSync")) return LNSPEC_StairsBuildDownSync;
  if (sc.Check("StairsBuildUpSync")) return LNSPEC_StairsBuildUpSync;
  if (sc.Check("ForceField")) return LNSPEC_ForceField;
  if (sc.Check("ClearForceField")) return LNSPEC_ClearForceField;
  if (sc.Check("FloorRaiseByValueTimes8")) return LNSPEC_FloorRaiseByValueTimes8;
  if (sc.Check("FloorLowerByValueTimes8")) return LNSPEC_FloorLowerByValueTimes8;
  if (sc.Check("FloorMoveToValue")) return LNSPEC_FloorMoveToValue;
  if (sc.Check("CeilingWaggle")) return LNSPEC_CeilingWaggle;
  if (sc.Check("TeleportZombieChanger")) return LNSPEC_TeleportZombieChanger;
  if (sc.Check("CeilingLowerByValue")) return LNSPEC_CeilingLowerByValue;
  if (sc.Check("CeilingRaiseByValue")) return LNSPEC_CeilingRaiseByValue;
  if (sc.Check("CeilingCrushAndRaise")) return LNSPEC_CeilingCrushAndRaise;
  if (sc.Check("CeilingLowerAndCrush")) return LNSPEC_CeilingLowerAndCrush;
  if (sc.Check("CeilingCrushStop")) return LNSPEC_CeilingCrushStop;
  if (sc.Check("CeilingCrushRaiseAndStay")) return LNSPEC_CeilingCrushRaiseAndStay;
  if (sc.Check("FloorCrushStop")) return LNSPEC_FloorCrushStop;
  if (sc.Check("CeilingMoveToValue")) return LNSPEC_CeilingMoveToValue;

  if (sc.Check("GlassBreak")) return LNSPEC_GlassBreak;
  if (sc.Check("ExtraFloorLightOnly")) return LNSPEC_ExtraFloorLightOnly;

  if (sc.Check("SectorSetLink")) return LNSPEC_SectorSetLink;
  if (sc.Check("ScrollWall")) return LNSPEC_ScrollWall;
  if (sc.Check("LineSetTextureOffset")) return LNSPEC_LineSetTextureOffset;
  if (sc.Check("SectorChangeFlags")) return LNSPEC_SectorChangeFlags;
  if (sc.Check("LineSetBlocking")) return LNSPEC_LineSetBlocking;

  if (sc.Check("PolyobjMoveToSpotOverride")) return LNSPEC_PolyobjMoveToSpotOverride;

  if (sc.Check("PlatPerpetualRaise")) return LNSPEC_PlatPerpetualRaise;
  if (sc.Check("PlatStop")) return LNSPEC_PlatStop;
  if (sc.Check("PlatDownWaitUpStay")) return LNSPEC_PlatDownWaitUpStay;
  if (sc.Check("PlatDownByValueWaitUpStay")) return LNSPEC_PlatDownByValueWaitUpStay;
  if (sc.Check("PlatUpWaitDownStay")) return LNSPEC_PlatUpWaitDownStay;
  if (sc.Check("PlatUpByValueWaitDownStay")) return LNSPEC_PlatUpByValueWaitDownStay;
  if (sc.Check("FloorLowerTimes8Instant")) return LNSPEC_FloorLowerTimes8Instant;
  if (sc.Check("FloorRaiseTimes8Instant")) return LNSPEC_FloorRaiseTimes8Instant;
  if (sc.Check("FloorMoveToValueTimes8")) return LNSPEC_FloorMoveToValueTimes8;
  if (sc.Check("CeilingMoveToValueTimes8")) return LNSPEC_CeilingMoveToValueTimes8;
  if (sc.Check("Teleport")) return LNSPEC_Teleport;
  if (sc.Check("TeleportNoFog")) return LNSPEC_TeleportNoFog;
  if (sc.Check("ThrustThing")) return LNSPEC_ThrustThing;
  if (sc.Check("DamageThing")) return LNSPEC_DamageThing;
  if (sc.Check("TeleportNewMap")) return LNSPEC_TeleportNewMap;
  if (sc.Check("TeleportEndGame")) return LNSPEC_TeleportEndGame;
  if (sc.Check("TeleportOther")) return LNSPEC_TeleportOther;
  if (sc.Check("TeleportGroup")) return LNSPEC_TeleportGroup;
  if (sc.Check("TeleportSector")) return LNSPEC_TeleportSector;

  if (sc.Check("ACSExecute")) return LNSPEC_ACSExecute;
  if (sc.Check("ACSSuspend")) return LNSPEC_ACSSuspend;
  if (sc.Check("ACSTerminate")) return LNSPEC_ACSTerminate;
  if (sc.Check("ACSLockedExecute")) return LNSPEC_ACSLockedExecute;
  if (sc.Check("ACSExecuteWithResult")) return LNSPEC_ACSExecuteWithResult;
  if (sc.Check("ACSLockedExecuteDoor")) return LNSPEC_ACSLockedExecuteDoor;

  if (sc.Check("PolyobjMoveToSpot")) return LNSPEC_PolyobjMoveToSpot;
  if (sc.Check("PolyobjStop")) return LNSPEC_PolyobjStop;
  if (sc.Check("PolyobjMoveTo")) return LNSPEC_PolyobjMoveTo;
  if (sc.Check("PolyobjMoveToOverride")) return LNSPEC_PolyobjMoveToOverride;

  if (sc.Check("PolyRotateLeftOverride")) return LNSPEC_PolyRotateLeftOverride;
  if (sc.Check("PolyRotateRightOverride")) return LNSPEC_PolyRotateRightOverride;
  if (sc.Check("PolyMoveOverride")) return LNSPEC_PolyMoveOverride;
  if (sc.Check("PolyMoveTimes8Override")) return LNSPEC_PolyMoveTimes8Override;
  if (sc.Check("PillarBuildCrush")) return LNSPEC_PillarBuildCrush;
  if (sc.Check("FloorAndCeilingLowerByValue")) return LNSPEC_FloorAndCeilingLowerByValue;
  if (sc.Check("FloorAndCeilingRaiseByValue")) return LNSPEC_FloorAndCeilingRaiseByValue;

  if (sc.Check("ScrollTextureLeft")) return LNSPEC_ScrollTextureLeft;
  if (sc.Check("ScrollTextureRight")) return LNSPEC_ScrollTextureRight;
  if (sc.Check("ScrollTextureUp")) return LNSPEC_ScrollTextureUp;
  if (sc.Check("ScrollTextureDown")) return LNSPEC_ScrollTextureDown;

  if (sc.Check("LightForceLightning")) return LNSPEC_LightForceLightning;
  if (sc.Check("LightRaiseByValue")) return LNSPEC_LightRaiseByValue;
  if (sc.Check("LightLowerByValue")) return LNSPEC_LightLowerByValue;
  if (sc.Check("LightChangeToValue")) return LNSPEC_LightChangeToValue;
  if (sc.Check("LightFade")) return LNSPEC_LightFade;
  if (sc.Check("LightGlow")) return LNSPEC_LightGlow;
  if (sc.Check("LightFlicker")) return LNSPEC_LightFlicker;
  if (sc.Check("LightStrobe")) return LNSPEC_LightStrobe;
  if (sc.Check("LightStop")) return LNSPEC_LightStop;

  if (sc.Check("PlaneCopy")) return LNSPEC_PlaneCopy;

  if (sc.Check("ThingDamage")) return LNSPEC_ThingDamage;
  if (sc.Check("QuakeTremor")) return LNSPEC_QuakeTremor;
  if (sc.Check("LineSetIdentification")) return LNSPEC_LineSetIdentification;

  if (sc.Check("ThingMove")) return LNSPEC_ThingMove;

  if (sc.Check("ThingSetSpecial")) return LNSPEC_ThingSetSpecial;
  if (sc.Check("ThrustThingZ")) return LNSPEC_ThrustThingZ;

  if (sc.Check("UsePuzzleItem")) return LNSPEC_UsePuzzleItem;
  if (sc.Check("ThingActivate")) return LNSPEC_ThingActivate;
  if (sc.Check("ThingDeactivate")) return LNSPEC_ThingDeactivate;
  if (sc.Check("ThingRemove")) return LNSPEC_ThingRemove;
  if (sc.Check("ThingDestroy")) return LNSPEC_ThingDestroy;
  if (sc.Check("ThingProjectile")) return LNSPEC_ThingProjectile;
  if (sc.Check("ThingSpawn")) return LNSPEC_ThingSpawn;
  if (sc.Check("ThingProjectileGravity")) return LNSPEC_ThingProjectileGravity;
  if (sc.Check("ThingSpawnNoFog")) return LNSPEC_ThingSpawnNoFog;
  if (sc.Check("FloorWaggle")) return LNSPEC_FloorWaggle;
  if (sc.Check("ThingSpawnFacing")) return LNSPEC_ThingSpawnFacing;
  if (sc.Check("SectorSoundChange")) return LNSPEC_SectorSoundChange;

  if (sc.Check("TeleportNoStop")) return LNSPEC_TeleportNoStop;
  if (sc.Check("SectorSetPlaneReflection")) return LNSPEC_SectorSetPlaneReflection;
  if (sc.Check("SectorSet3dFloor")) return LNSPEC_SectorSet3dFloor;
  if (sc.Check("Contents")) return LNSPEC_Contents;

  if (sc.Check("CeilingGenericCrush2")) return LNSPEC_CeilingGenericCrush2;
  if (sc.Check("SectorSetCeilingScale2")) return LNSPEC_SectorSetCeilingScale2;
  if (sc.Check("SectorSetFloorScale2")) return LNSPEC_SectorSetFloorScale2;
  if (sc.Check("PlaneUpNearestWaitDownStay")) return LNSPEC_PlaneUpNearestWaitDownStay;
  if (sc.Check("NoiseAlert")) return LNSPEC_NoiseAlert;
  if (sc.Check("SendToCommunicator")) return LNSPEC_SendToCommunicator;
  if (sc.Check("ThingProjectileIntercept")) return LNSPEC_ThingProjectileIntercept;
  if (sc.Check("ThingChangeTID")) return LNSPEC_ThingChangeTID;
  if (sc.Check("ThingHate")) return LNSPEC_ThingHate;
  if (sc.Check("ThingProjectileAimed")) return LNSPEC_ThingProjectileAimed;
  if (sc.Check("ChangeSkill")) return LNSPEC_ChangeSkill;
  if (sc.Check("ThingSetTranslation")) return LNSPEC_ThingSetTranslation;
  if (sc.Check("PlaneAlign")) return LNSPEC_PlaneAlign;
  if (sc.Check("LineMirror")) return LNSPEC_LineMirror;
  if (sc.Check("LineAlignCeiling")) return LNSPEC_LineAlignCeiling;
  if (sc.Check("LineAlignFloor")) return LNSPEC_LineAlignFloor;
  if (sc.Check("SectorSetRotation")) return LNSPEC_SectorSetRotation;
  if (sc.Check("SectorSetCeilingPanning")) return LNSPEC_SectorSetCeilingPanning;
  if (sc.Check("SectorSetFloorPanning")) return LNSPEC_SectorSetFloorPanning;
  if (sc.Check("SectorSetCeilingScale")) return LNSPEC_SectorSetCeilingScale;
  if (sc.Check("SectorSetFloorScale")) return LNSPEC_SectorSetFloorScale;
  if (sc.Check("StaticInit")) return LNSPEC_StaticInit;
  if (sc.Check("SetPlayerProperty")) return LNSPEC_SetPlayerProperty;
  if (sc.Check("CeilingLowerToHighestFloor")) return LNSPEC_CeilingLowerToHighestFloor;
  if (sc.Check("CeilingLowerInstant")) return LNSPEC_CeilingLowerInstant;
  if (sc.Check("CeilingRaiseInstant")) return LNSPEC_CeilingRaiseInstant;
  if (sc.Check("CeilingCrushRaiseAndStayA")) return LNSPEC_CeilingCrushRaiseAndStayA;
  if (sc.Check("CeilingCrushAndRaiseA")) return LNSPEC_CeilingCrushAndRaiseA;
  if (sc.Check("CeilingCrushAndRaiseSilentA")) return LNSPEC_CeilingCrushAndRaiseSilentA;
  if (sc.Check("CeilingRaiseByValueTimes8")) return LNSPEC_CeilingRaiseByValueTimes8;
  if (sc.Check("CeilingLowerByValueTimes8")) return LNSPEC_CeilingLowerByValueTimes8;
  if (sc.Check("FloorGeneric")) return LNSPEC_FloorGeneric;
  if (sc.Check("CeilingGeneric")) return LNSPEC_CeilingGeneric;
  if (sc.Check("DoorGeneric")) return LNSPEC_DoorGeneric;
  if (sc.Check("PlatGeneric")) return LNSPEC_PlatGeneric;
  if (sc.Check("StairsGeneric")) return LNSPEC_StairsGeneric;
  if (sc.Check("CeilingGenericCrush")) return LNSPEC_CeilingGenericCrush;
  if (sc.Check("PlatDownWaitUpStayLip")) return LNSPEC_PlatDownWaitUpStayLip;
  if (sc.Check("PlatPerpetualRaiseLip")) return LNSPEC_PlatPerpetualRaiseLip;
  if (sc.Check("LineTranslucent")) return LNSPEC_LineTranslucent;
  if (sc.Check("TransferHeights")) return LNSPEC_TransferHeights;
  if (sc.Check("TransferFloorLight")) return LNSPEC_TransferFloorLight;
  if (sc.Check("TransferCeilingLight")) return LNSPEC_TransferCeilingLight;
  if (sc.Check("SectorSetColor")) return LNSPEC_SectorSetColor;
  if (sc.Check("SectorSetFade")) return LNSPEC_SectorSetFade;
  if (sc.Check("SectorSetDamage")) return LNSPEC_SectorSetDamage;
  if (sc.Check("TeleportLine")) return LNSPEC_TeleportLine;
  if (sc.Check("SectorSetGravity")) return LNSPEC_SectorSetGravity;
  if (sc.Check("StairsBuildUpDoom")) return LNSPEC_StairsBuildUpDoom;
  if (sc.Check("SectorSetWind")) return LNSPEC_SectorSetWind;
  if (sc.Check("SectorSetFriction")) return LNSPEC_SectorSetFriction;
  if (sc.Check("SectorSetCurrent")) return LNSPEC_SectorSetCurrent;
  if (sc.Check("ScrollTextureBoth")) return LNSPEC_ScrollTextureBoth;
  if (sc.Check("ScrollTextureModel")) return LNSPEC_ScrollTextureModel;
  if (sc.Check("ScrollFloor")) return LNSPEC_ScrollFloor;
  if (sc.Check("ScrollCeiling")) return LNSPEC_ScrollCeiling;
  if (sc.Check("ScrollTextureOffsets")) return LNSPEC_ScrollTextureOffsets;
  if (sc.Check("ACSExecuteAlways")) return LNSPEC_ACSExecuteAlways;
  if (sc.Check("PointPushSetForce")) return LNSPEC_PointPushSetForce;
  if (sc.Check("FloorRaiseToNearestChange")) return LNSPEC_FloorRaiseToNearestChange;
  if (sc.Check("ThingSetGoal")) return LNSPEC_ThingSetGoal;
  if (sc.Check("FloorRaiseByValueChangeTex")) return LNSPEC_FloorRaiseByValueChangeTex;
  if (sc.Check("PlatToggle")) return LNSPEC_PlatToggle;
  if (sc.Check("LightStrobeDoom")) return LNSPEC_LightStrobeDoom;
  if (sc.Check("LightMinNeighbor")) return LNSPEC_LightMinNeighbor;
  if (sc.Check("LightMaxNeighbor")) return LNSPEC_LightMaxNeighbor;
  if (sc.Check("FloorTransferTrigger")) return LNSPEC_FloorTransferTrigger;
  if (sc.Check("FloorTransferNumeric")) return LNSPEC_FloorTransferNumeric;
  if (sc.Check("ChangeCamera")) return LNSPEC_ChangeCamera;
  if (sc.Check("FloorRaiseToLowestCeiling")) return LNSPEC_FloorRaiseToLowestCeiling;
  if (sc.Check("FloorRaiseByValueChange")) return LNSPEC_FloorRaiseByValueChange;
  if (sc.Check("FloorRaiseByTexture")) return LNSPEC_FloorRaiseByTexture;
  if (sc.Check("FloorLowerToLowestChange")) return LNSPEC_FloorLowerToLowestChange;
  if (sc.Check("FloorLowerToHighest")) return LNSPEC_FloorLowerToHighest;
  if (sc.Check("ExitNormal")) return LNSPEC_ExitNormal;
  if (sc.Check("ExitSecret")) return LNSPEC_ExitSecret;
  if (sc.Check("ElevatorRaiseToNearest")) return LNSPEC_ElevatorRaiseToNearest;
  if (sc.Check("ElevatorMoveToFloor")) return LNSPEC_ElevatorMoveToFloor;
  if (sc.Check("ElevatorLowerToNearest")) return LNSPEC_ElevatorLowerToNearest;
  if (sc.Check("HealThing")) return LNSPEC_HealThing;
  if (sc.Check("DoorCloseWaitOpen")) return LNSPEC_DoorCloseWaitOpen;
  if (sc.Check("FloorDonut")) return LNSPEC_FloorDonut;
  if (sc.Check("FloorAndCeilingLowerRaise")) return LNSPEC_FloorAndCeilingLowerRaise;
  if (sc.Check("CeilingRaiseToNearest")) return LNSPEC_CeilingRaiseToNearest;
  if (sc.Check("CeilingLowerToLowest")) return LNSPEC_CeilingLowerToLowest;
  if (sc.Check("CeilingLowerToFloor")) return LNSPEC_CeilingLowerToFloor;
  if (sc.Check("CeilingCrushRaiseAndStaySilentA")) return LNSPEC_CeilingCrushRaiseAndStaySilentA;

  if (sc.Check("SectorSetPortal")) return LNSPEC_SectorSetPortal;
  if (sc.Check("LineSetPortal")) return LNSPEC_LineSetPortal;

  if (sc.Check("SectorSetFloorGlow")) return LNSPEC_SectorSetFloorGlow;
  if (sc.Check("SectorSetCeilingGlow")) return LNSPEC_SectorSetCeilingGlow;

  // special EDGE actions
  if (sc.Check("EDGEWater")) return LNSPEC_EDGEWater;
  if (sc.Check("SectorSet3dThinFloorEDGE")) return LNSPEC_SectorSet3dThinFloorEDGE;

  sc.ScriptError("invalid action name '%s'", sc.String);
  return 0;
}
