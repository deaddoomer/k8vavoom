#ifdef VV_LDEF_USE_OLD_TRANSLATION_CODE
# define VV_LDEF_TRANS_PARSE_CHECK
#endif


#ifdef VV_LDEF_TRANS_PARSE_CHECK
dictionary!(int, bool) trans_seen;
#endif


//==========================================================================
//
//  OpenParserFromLump
//
//==========================================================================
static final ScriptsParser OpenParserFromLump (int lump) {
  auto sc = SpawnObject(ScriptsParser);
  //sc.OpenString('menudef', readText(fname));
  sc.OpenLumpIndex(lump);
  sc.SetCMode(true);
  sc.SetEscape(true);
  return sc;
}


//==========================================================================
//
//  ParseLDefTranslationScripts
//
//==========================================================================
void ParseLDefTranslationScripts () {
  foreach (int lump; WadIterateDirectory("k8vavoom/linedefs/", allowSubdirs:true)) {
    string fname = W_RealLumpName(lump);
    if (!globmatch(fname, "*.rc", caseSensitive:false)) continue;
    //printdebug("<<<%s>>> : <<<%s>>>", W_RealLumpName(lump), W_FullLumpName(lump));
    //if (!W_RealLumpName(lump).strEquCI("vavoom_ldef_spec_trans.rc")) continue;
    printmsg(PMSG.Init, "parsing linedef special translation script '%s'", W_FullLumpName(lump));
    auto sc = OpenParserFromLump(lump);
    scope(exit) delete sc;
    while (!sc.AtEnd()) {
      if (sc.Check("linedef_specials_table")) {
        ParseLDefTranslations(sc);
        continue;
      }
      sc.ScriptError("unknown section '%s'", sc.String);
    }
  }

  #ifdef VV_LDEF_TRANS_PARSE_CHECK
  for (auto idx = spec_trans_tab.firstIndex(); spec_trans_tab.isValidIndex(idx); idx = spec_trans_tab.nextIndex(idx)) {
    auto osp = spec_trans_tab.keyAtIndex(idx);
    if (!trans_seen.find(osp)) {
      printerror("special %d is not seen", osp);
      assert(0);
    }
    trans_seen.remove(osp);
  }
  assert(trans_seen.length == 0);
  #endif
}


//==========================================================================
//
//  CustomParseLDefTranslations
//
//  this is called *BEFORE* standard processing, so you
//  may inject your own properties.
//
//  return `true` if you parsed the property.
//
//==========================================================================
bool CustomParseLDefTranslations (ScriptsParser sc, ref spec_trans_t trs) {
  return false;
}


//==========================================================================
//
//  ParseLDefTranslations
//
//  "linedef_specials_table" already eaten
//
//==========================================================================
void ParseLDefTranslations (ScriptsParser sc) {
  spec_trans_t trs;
  sc.Expect("{");

  while (!sc.Check("}")) {
    if (sc.AtEnd()) sc.ScriptError("unexpected end of file");

    sc.ExpectNumber();
    int oldspecial = sc.Number;
    if (oldspecial < 1 || oldspecial > 65535) sc.ScriptError("linedef special %d is out of range", oldspecial);

    sc.Expect("=");
    sc.Expect("{");

    // args are unchanged by default
    trs.special = LNSPEC_None;
    trs.arg1 = -666;
    trs.arg2 = -666;
    trs.arg3 = -666;
    trs.arg4 = -666;
    trs.arg5 = -666;
    trs.spac = 0;
    trs.repeat = false;
    trs.monst = false;
    trs.not_destroy = false;

    bool wasOtherBool = false;

    // parse properties
    while (!sc.Check("}")) {
      if (sc.AtEnd()) sc.ScriptError("unexpected end of file");

      if (CustomParseLDefTranslations(sc, ref trs)) continue;

      // args
      if (sc.Check("arg1")) { ParseLDefArgN(sc, ref trs.arg1); continue; }
      if (sc.Check("arg2")) { ParseLDefArgN(sc, ref trs.arg2); continue; }
      if (sc.Check("arg3")) { ParseLDefArgN(sc, ref trs.arg3); continue; }
      if (sc.Check("arg4")) { ParseLDefArgN(sc, ref trs.arg4); continue; }
      if (sc.Check("arg5")) { ParseLDefArgN(sc, ref trs.arg5); continue; }

      // action
      if (sc.Check("action")) { sc.Expect("="); trs.special = ParseLDefActionName(sc); sc.Expect(";"); continue; }

      // spac
      if (sc.Check("spac")) { trs.spac = ParseLDefSpacs(sc); continue; }

      // flags
      if (sc.Check("repeat")) { trs.repeat = ParseLDefBool(sc); wasOtherBool = true; continue; }
      if (sc.Check("monsteractivate")) { trs.monst = ParseLDefBool(sc); wasOtherBool = true; continue; }
      if (sc.Check("keepdata")) { trs.not_destroy = ParseLDefBool(sc); wasOtherBool = true; continue; }

      if (sc.Check("description")) { sc.Expect("="); sc.ExpectString(); sc.Expect(";"); continue; }
      if (sc.Check("sourceport")) { sc.Expect("="); sc.ExpectString(); sc.Expect(";"); continue; }
      if (sc.Check("comment")) { sc.Expect("="); sc.ExpectString(); sc.Expect(";"); continue; }

      sc.ScriptError("invalid linedef special property '%s'", sc.String);
    }

    if (trs.special == LNSPEC_SectorSet3dFloor || trs.special == LNSPEC_SectorSet3dThinFloorEDGE) {
      if (wasOtherBool) sc.ScriptError("3d floor translation cannot have boolean properties");
    }

    #ifdef VV_LDEF_TRANS_PARSE_CHECK
    if (trans_seen.find(oldspecial)) sc.ScriptError("duplicate definition for special %d", oldspecial);
    trans_seen.put(oldspecial, true);
    auto tpp = spec_trans_tab.find(oldspecial);
    if (!tpp) sc.ScriptError("definition for unknown special %d", oldspecial);
    if (tpp.special != trs.special) sc.ScriptError("definition for special %d has invalid action; expected '%s', but got '%s'", oldspecial, LineSpecial2Str(tpp.special), LineSpecial2Str(trs.special));
    if (tpp.arg1 != trs.arg1) sc.ScriptError("definition for special %d has invalid arg1; expected %d, but got %d", oldspecial, tpp.arg1, trs.arg1);
    if (tpp.arg2 != trs.arg2) sc.ScriptError("definition for special %d has invalid arg2; expected %d, but got %d", oldspecial, tpp.arg2, trs.arg2);
    if (tpp.arg3 != trs.arg3) sc.ScriptError("definition for special %d has invalid arg3; expected %d, but got %d", oldspecial, tpp.arg3, trs.arg3);
    if (tpp.arg4 != trs.arg4) sc.ScriptError("definition for special %d has invalid arg4; expected %d, but got %d", oldspecial, tpp.arg4, trs.arg4);
    if (tpp.arg5 != trs.arg5) sc.ScriptError("definition for special %d has invalid arg5; expected %d, but got %d", oldspecial, tpp.arg5, trs.arg5);
    if (tpp.spac != trs.spac) sc.ScriptError("definition for special %d has invalid spac; expected 0x%04x, but got 0x%04x", oldspecial, tpp.spac, trs.spac);
    if (tpp.repeat != trs.repeat) sc.ScriptError("definition for special %d has invalid repeat; expected %d, but got %d", oldspecial, tpp.repeat, trs.repeat);
    if (tpp.monst != trs.monst) sc.ScriptError("definition for special %d has invalid monsteractivate; expected %d, but got %d", oldspecial, tpp.monst, trs.monst);
    if (tpp.not_destroy != trs.not_destroy) sc.ScriptError("definition for special %d has invalid keepdata; expected %d, but got %d", oldspecial, tpp.not_destroy, trs.not_destroy);
    #else
    spec_trans_tab.put(oldspecial, trs);
    #endif
  }
}


//==========================================================================
//
//  ParseLDefArgN
//
//==========================================================================
void ParseLDefArgN (ScriptsParser sc, ref int arg) {
  sc.Expect("=");
       if (sc.Check("origarg1")) arg = -1;
  else if (sc.Check("origarg2")) arg = -2;
  else if (sc.Check("origarg3")) arg = -3;
  else if (sc.Check("origarg4")) arg = -4;
  else if (sc.Check("origarg5")) arg = -5;
  else if (sc.Check("unchanged")) arg = -666;
  // for StaticInit
  else if (sc.Check("StaticCommand_Gravity")) arg = LNSPEC_StaticInit_Command_Gravity;
  else if (sc.Check("StaticCommand_Color")) arg = LNSPEC_StaticInit_Command_Color;
  else if (sc.Check("StaticCommand_Damage")) arg = LNSPEC_StaticInit_Command_Damage;
  else if (sc.Check("StaticCommand_Link")) arg = LNSPEC_StaticInit_Command_Link;
  else if (sc.Check("StaticCommand_Sky")) arg = LNSPEC_StaticInit_Command_Sky;
  else if (sc.Check("StaticCommand_AlignFlat")) arg = LNSPEC_StaticInit_Command_AlignFlat;
  else if (sc.Check("StaticCommand_SetTag")) arg = LNSPEC_StaticInit_Command_SetTag;
  // number
  else {
    sc.ExpectNumber();
    arg = sc.Number;
  }
  sc.Expect(";");
}


//==========================================================================
//
//  ParseLDefBool
//
//==========================================================================
bool ParseLDefBool (ScriptsParser sc) {
  sc.Expect("=");
  bool res = false;
       if (sc.Check("true")) res = true;
  else if (sc.Check("false")) res = false;
  else if (sc.Check("tan")) res = true;
  else if (sc.Check("ona")) res = false;
  else sc.ScriptError("invalid boolean value '%s'", sc.String);
  sc.Expect(";");
  return res;
}


//==========================================================================
//
//  ParseLDefSpacs
//
//==========================================================================
int ParseLDefSpacs (ScriptsParser sc) {
  sc.Expect("=");
  int res = 0;
  do {
         if (sc.Check("Cross")) res |= SPAC_Cross;
    else if (sc.Check("Use")) res |= SPAC_Use;
    else if (sc.Check("MCross")) res |= SPAC_MCross;
    else if (sc.Check("Impact")) res |= SPAC_Impact;
    else if (sc.Check("Push")) res |= SPAC_Push;
    else if (sc.Check("PCross")) res |= SPAC_PCross;
    else if (sc.Check("UseThrough")) res |= SPAC_UseThrough;
    else if (sc.Check("AnyCross")) res |= SPAC_AnyCross;
    else if (sc.Check("MUse")) res |= SPAC_MUse;
    else if (sc.Check("UseBack")) res |= SPAC_UseBack;
    else if (sc.Check("None")) res |= 0;
    else if (sc.Check("0")) res |= 0;
    else sc.ScriptError("invalid SPAC option '%s'", sc.String);
  } while (sc.Check("|"));
  sc.Expect(";");
  return res;
}


//==========================================================================
//
//  ParseLDefActionName
//
//==========================================================================
int ParseLDefActionName (ScriptsParser sc) {
  sc.ExpectString();

  int lsp = Str2LineSpecial(sc.String);
  if (lsp >= 0) return lsp;

  // try special names from "line_specials.txt"
  lsp = FindLineSpecialByName(sc.String);
  if (lsp >= 0) return lsp;

  sc.ScriptError("invalid action name '%s'", sc.String);
  return 0;
}
