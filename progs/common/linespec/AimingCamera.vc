//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**  Based on code from ZDoom with following notice:
//**
//** Copyright 1998-2006 Randy Heit
//** All rights reserved.
//**
//** Redistribution and use in source and binary forms, with or without
//** modification, are permitted provided that the following conditions
//** are met:
//**
//** 1. Redistributions of source code must retain the above copyright
//**    notice, this list of conditions and the following disclaimer.
//** 2. Redistributions in binary form must reproduce the above copyright
//**    notice, this list of conditions and the following disclaimer in the
//**    documentation and/or other materials provided with the distribution.
//** 3. The name of the author may not be used to endorse or promote products
//**    derived from this software without specific prior written permission.
//**
//** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//**
//**************************************************************************
//**
//**  AimingCamera
//**
//**  args[0] = pitch
//**  args[1] = max turn (in degrees)
//**  args[2] = max pitch turn (in degrees)
//**  args[3] = tid of thing to look at
//**
//**************************************************************************
class AimingCamera : SecurityCamera __mobjinfo__(9073);

float MaxPitchChange;


//==========================================================================
//
//  BeginPlay
//
//==========================================================================
override void BeginPlay () {
  MaxPitchChange = itof(Args[2]);

  Args[2] = 0;
  ::BeginPlay();

  EntityEx A;
  foreach AllThinkers(EntityEx, A) {
    if (A.TID == Args[3]) {
      Target = A;
      break;
    }
  }
  if (Target == none) print("AimingCamera %d: Can't find thing %d", TID, Args[3]);
}


//==========================================================================
//
//  TickCamera
//
//==========================================================================
override void TickCamera (float DeltaTime) {
  if (Target) {
    float delta;
    int dir = FaceActor(Target, delta);
    if (delta > Range*DeltaTime) delta = Range*DeltaTime;
    if (dir) {
      Angles.yaw += delta;
    } else {
      Angles.yaw -= delta;
    }
    if (MaxPitchChange) {
      // aim camera's pitch
      TVec dv = Target.GetCentre()-Origin;
      TAVec d;
      VectorAngles(dv, out d);
           if (fabs(d.pitch-Angles.pitch) < MaxPitchChange*DeltaTime) Angles.pitch = d.pitch;
      else if (d.pitch < Angles.pitch) Angles.pitch -= MaxPitchChange*DeltaTime;
      else Angles.pitch += MaxPitchChange*DeltaTime;
    }
  }
}


defaultproperties {
}
