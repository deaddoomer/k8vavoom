//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class CustomInventory : Inventory abstract;


//==========================================================================
//
//  TryPickup
//
//==========================================================================
override bool TryPickup (EntityEx Toucher) {
  if (!CheckInventoryRestrictions(Toucher)) return false;
  //printdebug("CustomInventory:%C: TryPickup: Toucher=%C (self at %s)", self, Toucher, GetClassLocationStr(Class));
  state S = FindState('Pickup');
  bool IsOk = CallStateChain(Toucher, S);
  if ((IsOk || !S) && FindState('Use')) {
    IsOk = ::TryPickup(Toucher);
  } else if (IsOk || bAlwaysPickup) {
    //bool doDebug = (self !isa 'LDWeaponNameAlternation');
    //if (doDebug && bTransferInventory) printwarn("%C: CustomInventory::TryPickup: new owner `%C`; bTransferInventory=%B)", self, Toucher, bTransferInventory);
    GiveQuest(Toucher);
    if (bTransferInventory) TransferInventoryTo(Toucher);
    GoAwayAndDie();
  }
  return IsOk;
}


//==========================================================================
//
//  SpecialDropAction
//
//==========================================================================
override bool SpecialDropAction (EntityEx Source) {
  return CallStateChain(Source, FindState('Drop'));
}


//==========================================================================
//
//  Use
//
//==========================================================================
override bool Use (bool Pickup) {
  return CallStateChain(Owner, FindState('Use'));
}


defaultproperties {
}
