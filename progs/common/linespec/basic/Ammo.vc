//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Ammo : Inventory abstract;

int BackpackAmount;
int BackpackMaxAmount;
int DropAmount;


//==========================================================================
//
//  GetParentAmmo
//
//==========================================================================
final class!Ammo GetParentAmmo () {
  class Ret = Class;
  // get parent class that is direct descendant of Ammo class
  while (GetClassParent(Ret) != Ammo) Ret = GetClassParent(Ret);
  return class!Ammo(Ret);
}


//==========================================================================
//
//  k8IsLoadedAmmo
//
//==========================================================================
bool k8IsLoadedAmmo () {
  switch (GetClassName(Class)) {
    case 'BDW_RifleAmmo':
    case 'BDW_ShotgunAmmo':
      return true;
  }
  return false;
}


//==========================================================================
//
//  k8GetAmmoKingMax
//
//==========================================================================
int k8GetAmmoKingMax () {
  if (!GetCvarB('k8AmmoKing')) return MaxAmount;
  int amax = 666;
  bool isSpecial = false;
  switch (GetClassName(Class)) {
    case 'BDW_RifleClip':
    case 'BDW_ShotgunShell':
      isSpecial = true;
      break;
    // loaded ammo
    case 'BDW_RifleAmmo':
    case 'BDW_ShotgunAmmo':
      return MaxAmount;
  }
  if (!isSpecial) {
    switch (GetClassName(GetClassReplacee(Class))) {
      case 'Clip':
      case 'Shell':
        isSpecial = true;
        break;
    }
  }
  if (isSpecial) {
    if (GetCvarB('k8HSEnabled')) amax = 444; // headshots ARE powerful!
  }
  return max(amax, MaxAmount);
}


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
override bool HandlePickup (Inventory Item) {
  if (Item.Class == Class || (Ammo(Item) && Ammo(Item).GetParentAmmo() == Class)) {
    int amax = k8GetAmmoKingMax();
    int oldammo = Amount;
    if (oldammo >= amax) return true; // we're full

    int ReceiveAmount = Item.Amount;
    if (!Item.bIgnoreSkill) {
      // extra ammo in baby mode and nightmare mode
      ReceiveAmount = int(float(ReceiveAmount)*Level.World.SkillAmmoFactor);
    }


    //Amount += ReceiveAmount;
    //if (Amount > /*MaxAmount*/k8GetAmmoKingMax()) Amount = /*MaxAmount*/k8GetAmmoKingMax();
    Amount = min(amax, oldammo+ReceiveAmount);

    // if non zero ammo, don't change up weapons, player was lower on purpose
    if (oldammo <= 0 && Owner.Player) PlayerEx(Owner.Player).GotAmmo(self);
    Item.bPickupGood = true;
    return true;
  }

  if (Inventory) return Inventory.HandlePickup(Item);

  return false;
}


//==========================================================================
//
//  CreateCopy
//
//==========================================================================
override Inventory CreateCopy (EntityEx Toucher) {
  int NewAmount = Amount;
  if (!bIgnoreSkill) {
    // extra ammo in baby mode and nightmare mode
    NewAmount = int(float(NewAmount)*Level.World.SkillAmmoFactor);
  }

  Inventory Copy;
  if (GetClassParent(Class) == Ammo) {
    Copy = ::CreateCopy(Toucher);
  } else {
    Copy = Spawn(GetParentAmmo(), default, default, default, false);
    GoAwayAndDie();
  }
  Copy.Amount = NewAmount;

  // don't pick up more ammo that you can carry
  if (Copy.Amount > Copy.MaxAmount) Copy.Amount = Copy.MaxAmount;

  return Copy;
}


//==========================================================================
//
//  CreateTossable
//
//==========================================================================
override Inventory CreateTossable () {
  Inventory Copy = ::CreateTossable();
  if (Copy) {
    // avoid cheating on certain skill levels
    Copy.bIgnoreSkill = true;
  }
  return Copy;
}


defaultproperties {
  PickupSound = 'misc/ammo_pkup';
  bKeepDepleted = true;
}
