//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Ammo : Inventory abstract;

int BackpackAmount;
int BackpackMaxAmount;
int DropAmount;


//==========================================================================
//
//  GetParentAmmo
//
//==========================================================================
final class!Ammo GetParentAmmo () {
  class Ret = Class;
  // get parent class that is direct descendant of Ammo class
  while (GetClassParent(Ret) != Ammo) Ret = GetClassParent(Ret);
  return class!Ammo(Ret);
}


//==========================================================================
//
//  k8IsLoadedAmmo
//
//==========================================================================
bool k8IsLoadedAmmo () {
  switch (GetClassName(Class)) {
    case 'BDW_RifleAmmo':
    case 'BDW_ShotgunAmmo':
      return true;
  }
  return false;
}


enum AmmoKingType {
  Shells,
  Bullets,
  Rockets,
  Cells,
  Other,
}


//==========================================================================
//
//  k8GetAmmoKingMax
//
//==========================================================================
int k8GetAmmoKingMax () {
  int maxam = MaxAmount;
  // hack for some idiotic mods
  if (maxam < 2) return maxam;

  if (!GetCvarB('k8AmmoKing')) return maxam;

  AmmoKingType at = AmmoKingType.Other;
  bool isBDW = false;
  bool hasBackpack = false;

  if (Owner && Owner.bIsPlayer) {
    PlayerEx plr = PlayerEx(Owner.Player);
    hasBackpack = (plr && plr.bHasBackpack);
  }

  switch (GetClassName(Class)) {
    // loaded ammo
    case 'BDW_RifleAmmo':
    case 'BDW_ShotgunAmmo':
      return maxam;
    case 'BDW_RifleClip':
      isBDW = true;
      at = AmmoKingType.Bullets;
      break;
    case 'BDW_ShotgunShell':
      isBDW = true;
      at = AmmoKingType.Shells;
      break;
    default:
      switch (GetClassName(GetClassReplacee(Class))) {
        case 'Clip':
          at = AmmoKingType.Bullets;
          break;
        case 'Shell':
          at = AmmoKingType.Shells;
          break;
        case 'RocketAmmo':
          at = AmmoKingType.Rockets;
          break;
        case 'Cell':
          at = AmmoKingType.Cells;
          break;
      }
      break;
  }


  int res;
  switch (at) {
    case AmmoKingType.Shells: res = GetCvarI(GetCvarB('k8HSEnabled') ? 'k8AmmoKing_MaxShells_HS' : 'k8AmmoKing_MaxShells_Normal'); break;
    case AmmoKingType.Bullets: res = GetCvarI(GetCvarB('k8HSEnabled') ? 'k8AmmoKing_MaxBullets_HS' : 'k8AmmoKing_MaxBullets_Normal'); break;
    case AmmoKingType.Rockets: res = GetCvarI('k8AmmoKing_MaxRockets'); break;
    case AmmoKingType.Cells: res = GetCvarI('k8AmmoKing_MaxCells'); break;
    case AmmoKingType.Other: res = GetCvarI('k8AmmoKing_MaxOther'); break;
    default: res = 0;
  }

  if (hasBackpack && GetCvarB('k8AmmoKing_AllowBackpack')) res *= 2;

  if (isBDW) {
    //print("k8GetAmmoKingMax: class=%C; repl=%C; type=%d; res=%d; ma=%d; return=%d; bdw=%B", self, GetClassReplacee(Class), at, res, maxam, res, isBDW);
    return res;
  }
  //print("k8GetAmmoKingMax: class=%C; repl=%C; type=%d; res=%d; ma=%d; return=%d; bdw=%B", self, GetClassReplacee(Class), at, res, maxam, max(res, maxam), isBDW);

  return max(res, maxam);
}


//==========================================================================
//
//  DoPickupInternal
//
//  moved here from `HandlePickup()`, because we need it in several places
//
//==========================================================================
bool DoPickupInternal (Inventory Item) {
  assert(Item);
  //printdebug("%C: DoPickupInternal: Item=%C; Class=%C; Item.Class=%C; itpar: %C", self, Item, Class, Item.Class, Ammo(Item).GetParentAmmo());
  //printdebug("  Item=%C", Item);
  int amax = k8GetAmmoKingMax();
  int oldammo = Amount;
  if (oldammo >= amax) return true; // we're full

  int ReceiveAmount = Item.Amount;
  if (!Item.bIgnoreSkill) {
    // extra ammo in baby mode and nightmare mode
    ReceiveAmount = int(float(ReceiveAmount)*Level.World.GetAmmoFactor());
  }

  //Amount += ReceiveAmount;
  //if (Amount > /*MaxAmount*/k8GetAmmoKingMax()) Amount = /*MaxAmount*/k8GetAmmoKingMax();
  Amount = min(amax, oldammo+ReceiveAmount);

  // if non zero ammo, don't change up weapons, player was lower on purpose
  if (oldammo <= 0 && Owner.Player) PlayerEx(Owner.Player).GotAmmo(self);
  Item.bPickupGood = true;
  return true;
}


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
override bool HandlePickup (Inventory Item) {
  // one ammo does it all, because of complex handling of replaced crap. sigh.
  if (Ammo(Item)) {
    //printdebug("%C: HPP; Item=%C; pa=%C", self, Item, Ammo(Item).GetParentAmmo());
    // we cannot simply use `(Ammo(Item) && Ammo(Item).GetParentAmmo() == Class)` here
    // we can have some parent ammo first in inventory list, and ammo pickup will increase invalid amount
    // so use explicit loop here, and prefer exact match, if there is any
    if (Class == Item.Class) return DoPickupInternal(Item);
    // look for exact match in other inventory items, and for best match otherwise
    Ammo bestParent, best2Parent;
    auto pammo = Ammo(Item).GetParentAmmo();
    for (Inventory inv = self; inv; inv = inv.Inventory) {
      if (inv.Class == Item.Class) return Ammo(inv).DoPickupInternal(Item);
      Ammo a2 = Ammo(inv);
      if (!a2) continue;
      if (!bestParent) {
             if (a2.Class == pammo) bestParent = a2;
        else if (!best2Parent && a2.GetParentAmmo() == pammo) best2Parent = a2;
      }
    }
    // found best match?
    if (bestParent) return bestParent.DoPickupInternal(Item);
    // not so good, but match?
    if (best2Parent) return best2Parent.DoPickupInternal(Item);
    // no matches found, oops
    return false;
  }
  // not an ammo
  return (Inventory ? Inventory.HandlePickup(Item) : false);
}


//==========================================================================
//
//  CreateCopy
//
//==========================================================================
override Inventory CreateCopy (EntityEx Toucher) {
  int NewAmount = Amount;
  if (!bIgnoreSkill) {
    // extra ammo in baby mode and nightmare mode
    NewAmount = int(float(NewAmount)*Level.World.GetAmmoFactor());
  }

  Inventory Copy;
  if (GetClassParent(Class) == Ammo) {
    Copy = ::CreateCopy(Toucher);
  } else {
    Copy = SpawnEntityChecked(class!Inventory, GetParentAmmo(), default, default, default, AllowReplace:false);
    assert(Copy);
    GoAwayAndDie();
  }
  Copy.Amount = NewAmount;

  // don't pick up more ammo that you can carry
  if (Copy.Amount > Copy.MaxAmount) Copy.Amount = Copy.MaxAmount;

  return Copy;
}


//==========================================================================
//
//  CreateTossable
//
//==========================================================================
override Inventory CreateTossable (optional int DropAmount) {
  Inventory Copy = ::CreateTossable(DropAmount!optional);
  if (Copy) Copy.bIgnoreSkill = true; // avoid cheating on certain skill levels
  return Copy;
}


defaultproperties {
  PickupSound = 'misc/ammo_pkup';
  bKeepDepleted = true;
}
