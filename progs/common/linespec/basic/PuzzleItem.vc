//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PuzzleItem : Inventory
  abstract;

int       PuzzleItemNumber;
string      FailMessage;

//==========================================================================
//
//  HandlePickup
//
//==========================================================================

override bool HandlePickup(Inventory Item)
{
  if (Item.Class == Class && Level.Game.netgame && !Level.Game.deathmatch)
  {
    // Can't carry more than 1 puzzle item in coop netplay
    return true;
  }

  return ::HandlePickup(Item);
}

//==========================================================================
//
//  ShouldStay
//
//==========================================================================

override bool ShouldStay()
{
  return Level.Game.netgame && !Level.Game.deathmatch;
}

//==========================================================================
//
//  ShouldRespawn
//
//==========================================================================

override bool ShouldRespawn()
{
  // Remove puzzle items if not cooperative netplay
  return false;
}

//==========================================================================
//
//  Use
//
//==========================================================================

override bool Use(bool Pickup)
{
  if (PlayerEx(Owner.Player).UsePuzzleItem(PuzzleItemNumber))
  {
    return true;
  }
  else
  {
    Owner.Player.centreprint(FailMessage);
    return false;
  }
}

defaultproperties
{
  MaxAmount = DefMaxAmount;
  bNoGravity = true;
  bInvBar = true;
  bFullVolPickupSound = true;
  UseSound = 'PuzzleSuccess';
  FailMessage = "$txt_usepuzzlefailed";
}
