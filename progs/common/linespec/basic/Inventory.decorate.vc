//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  Base class for all items that a player can carry.
//**
//**************************************************************************

//**************************************************************************
//  State jumps
//**************************************************************************

//==========================================================================
//
//  A_JumpIfNoAmmo
//
//==========================================================================
[decorate] final void A_JumpIfNoAmmo (state Label) self(Actor) {
  // only for weapons
  //k8: why it checks for callchain here? prolly to block accidental inventory calls?
  if (!bIsPlayer || XLevel.StateCall) return;
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  if (!Wpn.CheckAmmo(Wpn.FireMode, AutoSwitch:false, RequireAmmo:true)) {
    PlayerEx(Player).SetViewObject(Wpn);
    DoJump(Label);
  }
}


//**************************************************************************
//  Weapon functions
//**************************************************************************

//==========================================================================
//
//  A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//==========================================================================
[decorate] final void A_Lower () self(Actor) {
  do_A_Lower();
}


//==========================================================================
//
//  A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//==========================================================================
[decorate] final void decorate_A_Lower (optional float lowerspeed) self(Actor) {
  do_A_Lower(lowerspeed!optional);
}


//==========================================================================
//
//  A_Raise
//
//==========================================================================
[decorate] final void A_Raise () self(Actor) {
  do_A_Raise();
}


//==========================================================================
//
//  decorate_A_Raise
//
//==========================================================================
[decorate] final void decorate_A_Raise (optional float raisespeed) self(Actor) {
  do_A_Raise(raisespeed!optional);
}


//===========================================================================
//
//  A_ReFire
//
//  VC state function cannot have arguments yet
//
//===========================================================================
[decorate] final void A_ReFire () self(Actor) {
  do_A_ReFire();
}


//===========================================================================
//
//  decorate_A_ReFire
//
//===========================================================================
[decorate] final void decorate_A_ReFire (optional state refirestate) self(Actor) {
  do_A_ReFire(refirestate!optional);
}


//===========================================================================
//
//  A_ClearReFire
//
//===========================================================================
[decorate] final void A_ClearReFire () self(Actor) {
  if (bIsPlayer) PlayerEx(Player).Refire = 0;
}


//===========================================================================
//
//  A_GunFlash
//
//===========================================================================
[decorate] final void A_GunFlash () self(Actor) {
  do_A_GunFlash();
}


//===========================================================================
//
//  A_GunFlash
//
//  GFF_NOEXTCHANGE is 1
//
//===========================================================================
[decorate] final void decorate_A_GunFlash (optional name newstate, optional int flags) self(Actor) {
  do_A_GunFlash(newstate!optional, flags!optional);
}


//===========================================================================
//
//  A_CheckReload
//
//===========================================================================
[decorate] final void A_CheckReload () self(Actor) {
  do_A_CheckReload();
}


//===========================================================================
//
//  A_Light
//
//===========================================================================
[decorate] final void A_Light (int LightValue) self(Actor) {
  if (bIsPlayer) Player.ExtraLight = clamp(LightValue, 0, 20);
}


//===========================================================================
//
//  A_Light0
//
//===========================================================================
[decorate] final void A_Light0 () self(Actor) {
  if (bIsPlayer) Player.ExtraLight = 0;
}


//===========================================================================
//
//  A_Light1
//
//===========================================================================
[decorate] final void A_Light1 () self(Actor) {
  if (bIsPlayer) Player.ExtraLight = 1;
}


//===========================================================================
//
//  A_Light2
//
//===========================================================================
[decorate] final void A_Light2 () self(Actor) {
  if (bIsPlayer) Player.ExtraLight = 2;
}


//==========================================================================
//
//  A_LightInverse
//
//==========================================================================
[decorate] final void A_LightInverse () self(Actor) {
  if (bIsPlayer) Player.ExtraLight = 255;
}


//**************************************************************************
//  Weapon attack functions
//**************************************************************************

//===========================================================================
//
//  A_Saw
//
//===========================================================================
[decorate] final void A_Saw (optional name FullSound, optional name HitSound,
  optional int SawDamage, optional class!Actor PuffType,
  optional int flags, optional float range, optional float spread_xy, optional float spread_z,
  optional float lifesteal, optional float lifestealmax, optional string armorbonustype/*,
  optional bool alertIfHit, optional bool noAlertIfKilled*/) self(Actor)
{
  TVec dir;

  if (!bIsPlayer) return;

  if (lifesteal || lifestealmax || armorbonustype) {
    printwarn("extra `A_Saw()` parameters ignored!");
  }

  if (!specified_FullSound) {
    FullSound = 'weapons/sawfull';
    HitSound = 'weapons/sawhit';
  }

  if (!SawDamage) SawDamage = 2;
  if (!PuffType) PuffType = BulletPuff;
  if (!specified_range || !range) range = SAWRANGE;
  range = fmax(1.0, range); // just in case

  int oldAmmo1, oldAmmo2;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (Wpn) {
    oldAmmo1 = (Wpn.Ammo1 ? Wpn.Ammo1.Amount : 0);
    oldAmmo2 = (Wpn.Ammo2 ? Wpn.Ammo2.Amount : 0);
    if (!(flags&SF_NOUSEAMMO)) {
      if (!Wpn.DepleteAmmo(Wpn.FireMode)) return;
    }
  }

  int damage = SawDamage;
  if (!(flags&SF_NORANDOM)) damage *= P_Random()%10+1;

  TAVec aimAng = Angles;
  aimAng.yaw = AngleMod360(aimAng.yaw+(Random()-Random())*45.0/8.0);

  bool stealth = GetCvarB('k8StealthChainsaw');
  EntityEx AimTarget = AimLineAttack(dir, aimAng, range/*SAWRANGE*/);
  EntityEx hitEntity;
  LineAttack(dir, /*SAWRANGE*/range, damage, PuffType, DmgType:'Chainsaw', out hitEntity:hitEntity);

  if (stealth) {
    if (/*alertIfHit &&*/ hitEntity) {
      //print("SAW HIT: ent=%C (health=%s of %s)", hitEntity, hitEntity.Health, hitEntity.InitialHealth);
      // always
      //if (!noAlertIfKilled || hitEntity.Health > 0)
      {
        LineSpecialLevelInfo(Level).NoiseAlert(self, self);
      }
    }
  } else {
    LineSpecialLevelInfo(Level).NoiseAlert(self, self);
  }

  if (!AimTarget) {
    // miss
    if (Wpn && !(flags&SF_NOUSEAMMO) && (flags&SF_NOUSEAMMOMISS)) {
      // restore ammo
      if (Wpn.Ammo1) Wpn.Ammo1.Amount = oldAmmo1;
      if (Wpn.Ammo2) Wpn.Ammo2.Amount = oldAmmo2;
    }
    // light
    if (flags&SF_RANDOMLIGHTMISS) {
      auto randVal = P_Random();
           if (randVal < 64) Player.ExtraLight = 0;
      else if (randVal < 160) Player.ExtraLight = 1;
      else Player.ExtraLight = 2;
    }
    PlaySound(FullSound, CHAN_WEAPON);
    return;
  }

  PlaySound(HitSound, CHAN_WEAPON);

  // turn to face target
  if (!(flags&SF_NOTURN)) {
    float angle = atan2(AimTarget.Origin.y-Origin.y, AimTarget.Origin.x-Origin.x);
    if (AngleMod360(angle-Angles.yaw) > 180.0) {
      if (AngleMod360(angle-Angles.yaw) < -90.0/20.0) {
        Angles.yaw = angle+90.0/21.0;
      } else {
        Angles.yaw = Angles.yaw-90.0/20.0;
      }
    } else {
      if (AngleMod360(angle-Angles.yaw) > 90.0/20.0) {
        Angles.yaw = angle-90.0/21.0;
      } else {
        Angles.yaw += 90.0/20.0;
      }
    }
  }
  Angles.yaw = AngleMod360(Angles.yaw);

  bJustAttacked = true;
  if (bIsPlayer) {
    Player.bFixAngle = true;
    // light
    if (flags&SF_RANDOMLIGHTHIT) {
      auto randVal = P_Random();
           if (randVal < 64) Player.ExtraLight = 0;
      else if (randVal < 160) Player.ExtraLight = 1;
      else Player.ExtraLight = 2;
    }
  }
}


//===========================================================================
//
//  A_CustomPunch
//
//===========================================================================
[decorate] final void A_CustomPunch (int PunchDamage, optional bool NoRandom,
  optional int Flags, optional class!Actor PuffType,
  optional float Range, optional float LifeSteal,
  optional float lifestealmax, optional class!BasicArmorBonus armorbonustype,
  optional name meleesound, optional name misssound) self(Actor)
{
  TAVec aimAngles;
  TVec dir;
  EntityEx AimTarget;

  if (!bIsPlayer) return;
  if (Range < 0) return; //k8: sanity check
  if (!Range) Range = MELEERANGE; //SAWRANGE; // use saw range instead of melee range here, for puffs

  bool UseAmmo = (specified_Flags ? !!(Flags&CPF_USEAMMO) : false);
  if (!PuffType) PuffType = BulletPuff;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  aimAngles = Angles;
  aimAngles.yaw = AngleMod360(aimAngles.yaw+(Random()-Random())*45.0/8.0);
  AimTarget = AimLineAttack(dir, aimAngles, Range);

  // use ammo only if hit something
  if (Wpn && AimTarget && UseAmmo) {
    if (!Wpn.DepleteAmmo(Wpn.FireMode)) return;
  }

  if (!NoRandom) PunchDamage *= (P_Random()%8+1);

  LineAttack(dir, Range, PunchDamage, PuffType, DmgType:PuffType.default.DamageType);

  // turn to face target
  if (AimTarget) {
    if (LifeSteal > 0) {
      float stealed = fmax(0, float(PunchDamage)*LifeSteal);
      if (stealed > 0 && lifestealmax > 0) stealed = fmin(stealed, lifestealmax);
      if (stealed > 0) {
        if (Flags&CPF_STEALARMOR) {
          RepairArmorWith(int(stealed), armorbonustype!optional);
        } else {
          GiveBody(int(stealed));
        }
      }
    }
    if (Wpn) PlaySound((meleesound ? meleesound : Wpn.AttackSound), CHAN_WEAPON);
    if (!(Flags&CPF_NOTURN)) {
      Angles.yaw = atan2(AimTarget.Origin.y-Origin.y, AimTarget.Origin.x-Origin.x);
      if (bIsPlayer) Player.bFixAngle = true;
    }
    if (Flags&CPF_PULLIN) bJustAttacked = true;
    if (Flags&CPF_DAGGER) A_AttackAlert(self, AimTarget); // incorrect; see https://zdoom.org/wiki/A_CustomPunch
  } else {
    if (misssound) PlaySound(misssound, CHAN_WEAPON);
  }
}


//===========================================================================
//
//  A_FireBullets
//
//===========================================================================
[decorate] final void A_FireBullets (float SpreadHoriz, float SpreadVert, int NumBullets,
  int DamagePerBullet, optional class!Actor PuffType, optional int Flags,
  optional float Range,
  optional class!Actor missile, optional float spawnheight, optional float spawnofsxy) self(Actor)
{
  TVec dir;
  int damage;
  TAVec rot;
  TVec aimDir;
  bool UseAmmo = (specified_Flags ? !!(Flags&FBF_USEAMMO) : true);
  bool randDamage = true;
  bool randSpread = true;
  bool noAimPitch = false;
  bool doFlash = false; // not implemented yet
  bool doRandPuffZ = false; // not implemented yet

  if (!PuffType || !specified_PuffType) PuffType = BulletPuff;
  if (!specified_Range || !Range) Range = 8192; //MISSILERANGE;

  if (Flags&FBF_DISABLEMISSILE) missile = none;
  if (missile && (Flags&FBF_NOMISSILENO3D) && !GetCvarB('r_models')) missile = none;

  if (!bIsPlayer) return;
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  if (UseAmmo) {
    if (!Wpn) return;
    if (!Wpn.DepleteAmmo(Wpn.FireMode)) return;
  }

  if (specified_Flags) {
    randDamage = !(Flags&FBF_NORANDOM);
    randSpread = !(Flags&FBF_EXPLICITANGLE);
    noAimPitch = !!(Flags&FBF_NOPITCH);
    doFlash = !(Flags&FBF_NOFLASH);
    doRandPuffZ = !(Flags&FBF_NORANDOMPUFFZ);
  }

  if (MeleeState) SetState(MeleeState);

  bool noAAim = false;
  name decal = ''; // default
  if (Wpn) {
    PlaySound(Wpn.AttackSound, CHAN_WEAPON);
    noAAim = Wpn.IsAutoaimDisabled(); //bNoAutoaim;
    if (!noAAim && !GetCvarB('k8HitscanAutoAim')) noAAim = true;
    decal = Wpn.DecalName;
  }

  Aim(aimDir, 16.0*64.0, default, noAAim, noAimPitch);

  if (missile && !specified_spawnheight) spawnheight = CalculateLineAttackZOfs(); // fix missile height

  EntityEx puff;
  TVec hitPoint; // used to aim a missile
  if ((NumBullets == 1 && !PlayerEx(Player).Refire) || NumBullets == 0) {
    damage = DamagePerBullet;
    if (randDamage) damage *= (P_Random()%3+1);
    LineAttack(aimDir, Range, damage, PuffType, NoAttackGhosts:default,
               outHitPoint:&hitPoint, PuffType.default.DamageType, secondary:false,
               decalType:decal, disableRandomZ:!doRandPuffZ, out puffEntity:puff);
    if (missile) {
      EntityEx msl;
      if (Flags&FBF_MISSILEHRANDOM) {
        msl = helperSpawnShotSupplementalMissile(missile, hitPoint, spawnheight, spawnofsxy!optional, scatter:2);
      } else {
        VectorAngles(aimDir, out rot);
        msl = SpawnMissileAngles(missile, rot.yaw, rot.pitch, spawnheight, spawnofsxy!optional);
      }
      if (msl && puff) {
        if (Flags&FBF_PUFFTARGET) msl.Target = puff;
        if (Flags&FBF_PUFFMASTER) msl.Master = puff;
        if (Flags&FBF_PUFFTRACER) msl.Tracer = puff;
      }
    }
  } else {
    float scatter = (Flags&FBF_MISSILEEXSCATTER ? 2 : 1);
    if (NumBullets == -1) NumBullets = 1;
    foreach (auto i; 0..NumBullets) {
      if (randSpread) {
        rot.pitch = (Random()-Random())*SpreadVert;
        rot.yaw = (Random()-Random())*SpreadHoriz;
      } else {
        rot.pitch = SpreadVert;
        rot.yaw = SpreadHoriz;
      }
      rot.roll = 0.0;
      dir = RotateDirectionVector(aimDir, rot);
      damage = DamagePerBullet;
      if (randDamage) damage *= (P_Random()%3+1);
      LineAttack(dir, Range, damage, PuffType, NoAttackGhosts:default,
                 outHitPoint:&hitPoint, PuffType.default.DamageType, secondary:(i != 0),
                 decalType:decal, disableRandomZ:!doRandPuffZ, out puffEntity:puff);
      if (missile) {
        EntityEx msl;
        if (Flags&FBF_MISSILEHRANDOM) {
          msl = helperSpawnShotSupplementalMissile(missile, hitPoint, spawnheight, spawnofsxy!optional, scatter:scatter);
        } else {
          VectorAngles(dir, out rot);
          msl = SpawnMissileAngles(missile, rot.yaw, rot.pitch, spawnheight, spawnofsxy!optional);
        }
        if (msl && puff) {
          if (Flags&FBF_PUFFTARGET) msl.Target = puff;
          if (Flags&FBF_PUFFMASTER) msl.Master = puff;
          if (Flags&FBF_PUFFTRACER) msl.Tracer = puff;
        }
      }
    }
  }
}


//===========================================================================
//
//  A_FireCustomMissile
//
//===========================================================================
[decorate] final void A_FireCustomMissile (class!Actor MissileType, optional float Angle,
  optional bool UseAmmo, optional int SpawnXY, optional float SpawnZ,
  optional int Flags, optional float Pitch) self(Actor)
{
  Pitch = -Pitch; // this does it this way
  doFireMissileProjectile(MissileType, Angle!optional, UseAmmo!optional, SpawnXY!optional, SpawnZ!optional, Flags!optional, Pitch!optional);
}


//===========================================================================
//
//  A_FireCustomMissileEx
//
//===========================================================================
[decorate] final void A_FireCustomMissileEx (class!Actor MissileType, optional float Angle,
  optional bool UseAmmo, optional int SpawnLeft, optional float SpawnFwd, optional float SpawnUp,
  optional int Flags, optional float Pitch) self(Actor)
{
  Pitch = -Pitch; // this does it this way
  doFireMissileProjectile(MissileType, Angle!optional, UseAmmo!optional, SpawnLeft!optional, SpawnUp!optional, Flags!optional, Pitch!optional, SpawnFwd!optional);
}


//===========================================================================
//
//  A_FireSTGrenade
//
//===========================================================================
[decorate] final void A_FireSTGrenade (optional class!Actor GrenadeType) self(Actor) {
  if (!specified_GrenadeType) {
    class!Actor gc = class!Actor(FindClassNoCase('Grenade'));
    if (!gc) return;
    GrenadeType = gc;
    gc = GetCompatibleClassReplacement(Actor, gc);
    if (gc) GrenadeType = gc;
  }
  if (!GrenadeType) return;
  doFireMissileProjectile(GrenadeType, default, default, default, default, FPF_NOAUTOAIM, -6.328125);
}


//===========================================================================
//
//  A_FireProjectile
//
//===========================================================================
[decorate] final void A_FireProjectile (class!Actor MissileType, optional float Angle,
                                        optional bool UseAmmo, optional int SpawnXY, optional float SpawnZ,
                                        optional int Flags, optional float Pitch) self(Actor)
{
  doFireMissileProjectile(MissileType, Angle!optional, UseAmmo!optional, SpawnXY!optional, SpawnZ!optional, Flags!optional, Pitch!optional);
}


//===========================================================================
//
//  A_RailAttack
//
//  TODO: process other arguments
//
//===========================================================================
[decorate] final void A_RailAttack (int RailDamage, optional float Offset,
  optional bool UseAmmo, optional string Color1, optional string Color2,
  optional int Flags, optional float MaxDiff, optional class!Actor PuffType,
  optional float spread_xy, optional float spread_z,
  optional float range,
  optional int duration, optional float sparsity, optional float driftspeed, // for particles
  optional class!Actor spawnclass, // for particles
  optional float spawnofs_z, optional int spiraloffset, optional int limit) self(Actor)
{
  if (!specified_UseAmmo) UseAmmo = true;

  if (!bIsPlayer) return;
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) return;

  if ((specified_Flags && (Flags&1)) || UseAmmo) {
    if (!Wpn.DepleteAmmo(Wpn.FireMode, default, 1)) return;
  }

  int Col1 = (Color1 && stricmp(Color1, "none") != 0 ? ParseColor(Color1) : 0);
  int Col2 = (Color2 && stricmp(Color2, "none") != 0 ? ParseColor(Color2) : 0);
  TVec Dir;
  AngleVector(Angles, out Dir);
  RailAttack(Dir, Offset, RailDamage, Col1, Col2, MaxDiff, PuffType, !!(Flags&1), !!(Flags&2),
    distance:range!optional, spawnofs_z:spawnofs_z!optional, pierceLimit:limit!optional);
}


//**************************************************************************
//  Doom weapon atack functions
//**************************************************************************

//===========================================================================
//
//  A_FirePistol
//
//===========================================================================
[decorate] final void A_FirePistol () self(Actor) {
  TVec dir;
  bool Accurate;

  bool noAAim = false;
  name decal = ''; // default
  if (bIsPlayer) {
    Weapon Wpn = PlayerEx(Player).ReadyWeapon;
    if (Wpn) {
      if (!Wpn.DepleteAmmo(Wpn.FireMode, default, 1)) return;
      Player.SetViewObject(Wpn);
      Player.SetViewState(PS_FLASH, Wpn.FindState('Flash'));
      Wpn = PlayerEx(Player).ReadyWeapon;
      if (!Wpn) return;
      decal = Wpn.DecalName;
      noAAim = Wpn.IsAutoaimDisabled(); //bNoAutoaim;
      if (!noAAim && !GetCvarB('k8HitscanAutoAim')) noAAim = true;
    }
    if (MeleeState) SetState(MeleeState);
    Accurate = !PlayerEx(Player).Refire;
    //writeln("PISTOL: Accurate=", Accurate, "; refire=", PlayerEx(Player).Refire);
  } else {
    Accurate = true;
  }

  PlaySound('weapons/pistol', CHAN_WEAPON);

  Aim(dir, 16.0*64.0, default, noAAim);
  GunShot(Accurate, dir, 'Bullet', secondary:false, decal, (bIsPlayer ? 8192.0 : MISSILERANGE));
}


//===========================================================================
//
//  A_FireShotgun
//
//===========================================================================
[decorate] final void A_FireShotgun () self(Actor) {
  if (!bIsPlayer) return;
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  PlaySound('weapons/shotgf', CHAN_WEAPON);
  if (MeleeState) SetState(MeleeState);

  bool noAAim = false;
  name decal = ''; // default
  if (Wpn) {
    if (!Wpn.DepleteAmmo(Wpn.FireMode, default, 1)) return;
    Player.SetViewObject(Wpn);
    Player.SetViewState(PS_FLASH, Wpn.FindState('Flash'));
    Wpn = PlayerEx(Player).ReadyWeapon;
    if (!Wpn) return;
    decal = Wpn.DecalName;
    noAAim = Wpn.IsAutoaimDisabled(); //bNoAutoaim;
    if (!noAAim && !GetCvarB('k8HitscanAutoAim')) noAAim = true;
  }

  TVec dir;
  auto tgt = Aim(dir, 16.0*64.0, default, noAAim);
  float spinc = (tgt ? 0.1 : 0.15);
  float spread = 0;
  foreach (auto i; 0..7) {
    GunShot(accurate:false, dir, 'Shell', secondary:(i != 0), decal, (bIsPlayer ? 8192.0 : MISSILERANGE), spreadPitch:spread);
    spread += spinc;
  }
}


//===========================================================================
//
//  A_FireShotgun2
//
//===========================================================================
[decorate] final void A_FireShotgun2 () self(Actor) {
  if (!bIsPlayer) return;
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  PlaySound('weapons/sshotf', CHAN_WEAPON);
  if (MeleeState) SetState(MeleeState);

  bool noAAim = false;
  name decal = ''; // default
  if (Wpn) {
    if (!Wpn.DepleteAmmo(Wpn.FireMode, default, 2)) return;
    Player.SetViewObject(Wpn);
    Player.SetViewState(PS_FLASH, Wpn.FindState('Flash'));
    Wpn = PlayerEx(Player).ReadyWeapon;
    if (!Wpn) return;
    decal = Wpn.DecalName;
    noAAim = Wpn.IsAutoaimDisabled; //bNoAutoaim;
    if (!noAAim && !GetCvarB('k8HitscanAutoAim')) noAAim = true;
  }

  TAVec rot;
  TVec aimDir;
  Aim(aimDir, 16.0*64.0, default, noAAim);
  foreach (auto i; 0..20) {
    rot.pitch = (Random()-Random())*45.0/8.0;
    rot.yaw = (Random()-Random())*45.0/4.0;
    rot.roll = 0.0;
    TVec dir = RotateDirectionVector(aimDir, rot);
    int damage = 5*(P_Random()%3+1);
    LineAttack(dir, (bIsPlayer ? 8192.0 : MISSILERANGE), damage, BulletPuff, DmgType:'Shell', secondary:(i != 0), decalType:decal);
  }
}


//===========================================================================
//
//  A_OpenShotgun2
//
//===========================================================================
[decorate] final void A_OpenShotgun2 () self(Actor) {
  PlaySound('weapons/sshoto', CHAN_WEAPON);
}


//===========================================================================
//
//  A_LoadShotgun2
//
//===========================================================================
[decorate] final void A_LoadShotgun2 () self(Actor) {
  PlaySound('weapons/sshotl', CHAN_WEAPON);
}


//===========================================================================
//
//  A_CloseShotgun2
//
//===========================================================================
[decorate] final void A_CloseShotgun2 () self(Actor) {
  PlaySound('weapons/sshotc', CHAN_WEAPON);
  do_A_ReFire();
}


//===========================================================================
//
//  A_FireCGun
//
//===========================================================================
[decorate] final void A_FireCGun () self(Actor) {
  if (!bIsPlayer) return;
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  PlaySound('weapons/chngun', CHAN_WEAPON);

  bool noAAim = false;
  name decal = ''; // default
  if (Wpn) {
    if (!Wpn.DepleteAmmo(Wpn.FireMode, default, 1)) return;
    Player.SetViewObject(Wpn);
    if (Player.ViewStates[PS_WEAPON].State == Wpn.GetAttackState(false)) {
      Player.SetViewState(PS_FLASH, Wpn.FindState('Flash'));
    } else {
      Player.SetViewState(PS_FLASH, GetStatePlus(Wpn.FindState('Flash'), 1));
    }
    Wpn = PlayerEx(Player).ReadyWeapon;
    if (!Wpn) return;
    decal = Wpn.DecalName;
    noAAim = Wpn.IsAutoaimDisabled; //bNoAutoaim;
    if (!noAAim && !GetCvarB('k8HitscanAutoAim')) noAAim = true;
  }

  if (MeleeState) SetState(MeleeState);

  TVec dir;
  Aim(dir, 16.0*64.0, default, noAAim);
  GunShot(accurate:!PlayerEx(Player).Refire, dir, 'Bullet', secondary:false, decal, (bIsPlayer ? 8192.0 : MISSILERANGE));
}


//===========================================================================
//
//  A_FireMissile
//
//===========================================================================
[decorate] final void A_FireMissile () self(Actor) {
  if (!bIsPlayer) return;
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  name decal = ''; // default
  if (Wpn) {
    if (!Wpn.DepleteAmmo(Wpn.FireMode, default, 1)) return;
    decal = Wpn.DecalName;
  }
  SpawnPlayerMissile(Rocket, decal);
}


//===========================================================================
//
//  A_FirePlasma
//
//===========================================================================
[decorate] final void A_FirePlasma () self(Actor) {
  if (!bIsPlayer) return;
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  name decal = ''; // default
  if (Wpn) {
    if (!Wpn.DepleteAmmo(Wpn.FireMode, default, 1)) return;
    Player.SetViewObject(Wpn);
    if (!(P_Random()&1)) {
      Player.SetViewState(PS_FLASH, Wpn.FindState('Flash'));
    } else {
      Player.SetViewState(PS_FLASH, GetStatePlus(Wpn.FindState('Flash'), 1));
    }
    Wpn = PlayerEx(Player).ReadyWeapon;
    if (!Wpn) return;
    decal = Wpn.DecalName;
  }
  SpawnPlayerMissile(PlasmaBall, decal);
}


//===========================================================================
//
//  A_FireRailgun
//
//===========================================================================
[decorate] final void A_FireRailgun () self(Actor) {
  DoFireRailgun(0.0);
}


//===========================================================================
//
//  A_FireRailgunLeft
//
//===========================================================================
[decorate] final void A_FireRailgunLeft () self(Actor) {
  DoFireRailgun(-10.0);
}


//===========================================================================
//
//  A_FireRailgunRight
//
//===========================================================================
[decorate] final void A_FireRailgunRight () self(Actor) {
  DoFireRailgun(10.0);
}


//===========================================================================
//
//  A_RailWait
//
//===========================================================================
[decorate] final void A_RailWait () self(Actor) {
}


//===========================================================================
//
//  A_BFGsound
//
//===========================================================================
[decorate] final void A_BFGsound () self(Actor) {
  PlaySound('weapons/bfgf', CHAN_WEAPON);
}


//===========================================================================
//
//  A_FireBFG
//
//===========================================================================
[decorate] final void A_FireBFG () self(Actor) {
  if (!bIsPlayer) return;
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  name decal = ''; // default
  if (Wpn) {
    if (!Wpn.DepleteAmmo(Wpn.FireMode, default, BFG9000.default.AmmoUse1)) return;
    decal = Wpn.DecalName;
  }
  SpawnPlayerMissile(BFGBall, decal);
}


//**************************************************************************
//
//**************************************************************************

//==========================================================================
//
//  A_RestoreSpecialThing1
//
//  Make a special thing visible again.
//
//==========================================================================
[decorate] final void A_RestoreSpecialThing1 () self(Actor) {
  bInvisible = false;
  if (DoRespawn()) PlaySound('misc/spawn', CHAN_VOICE);
}


//==========================================================================
//
//  A_RestoreSpecialThing2
//
//==========================================================================
[decorate] final void A_RestoreSpecialThing2 () self(Actor) {
  bSpecial = true;
  SetState(IdleState);
}
