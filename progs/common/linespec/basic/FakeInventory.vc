//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  Base class for old style DECORATE pickups. It just executes the
//**  attached special.
//**
//**************************************************************************
class FakeInventory : Inventory;

bool bRespawns;


//==========================================================================
//
//  ShouldRespawn
//
//==========================================================================
override bool ShouldRespawn () {
  return bRespawns && ::ShouldRespawn();
}


//==========================================================================
//
//  TryPickup
//
//==========================================================================
override bool TryPickup (EntityEx Toucher) {
  bool Result = Level.ExecuteActionSpecial(Special, Args[0], Args[1],
                        Args[2], Args[3], Args[4], nullptr, 0, Toucher);
  if (Result) {
    if (bTransferInventory) TransferInventoryTo(Toucher); //k8: should it be here?
    GoAwayAndDie();
  }
  return Result;
}


//==========================================================================
//
//  DoPickupSpecial
//
//==========================================================================
override void DoPickupSpecial (EntityEx Toucher) {
  // TryPickup already executed special
}


defaultproperties {
}
