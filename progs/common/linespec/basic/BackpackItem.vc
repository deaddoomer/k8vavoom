//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class BackpackItem : Inventory abstract;

// a depleted backpack will not give any ammo
bool bDepleted;


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
override bool HandlePickup (Inventory Item) {
  if (BackpackItem(Item)) {
    Inventory AmmoItem;
    for (AmmoItem = EntityEx(Owner).Inventory; AmmoItem; AmmoItem = AmmoItem.Inventory) {
      // only direct descendants
      if (GetClassParent(AmmoItem.Class) != Ammo) continue;
      Ammo ait = Ammo(AmmoItem); // should always succeed
      if (ait.k8IsLoadedAmmo()) continue;
      int amax = ait.k8GetAmmoKingMax();
      int oldammo = AmmoItem.Amount;
      //print("ammo=%C (%C); max=%d (%d) (now: %d)", AmmoItem, ait, amax, AmmoItem.MaxAmount, oldammo);
      if (oldammo >= amax) continue;
      int num = ait.default.BackpackAmount;
      if (!num || BackpackItem(Item).bDepleted) continue;
      if (!Item.bIgnoreSkill) {
        // extra ammo in baby mode and nightmare mode
        num = int(float(num)*Level.World.GetAmmoFactor());
      }
      //AmmoItem.Amount += num;
      //if (AmmoItem.Amount > AmmoItem.MaxAmount) AmmoItem.Amount = AmmoItem.MaxAmount;
      AmmoItem.Amount = min(amax, oldammo+num);
      if (oldammo <= 0 && Owner.Player) PlayerEx(Owner.Player).GotAmmo(/*Ammo(AmmoItem)*/ait);
    }
    Item.bPickupGood = true;
    return true;
  }

  if (Inventory) return Inventory.HandlePickup(Item);
  return false;
}


//==========================================================================
//
//  CreateCopy
//
//==========================================================================
override Inventory CreateCopy (EntityEx Toucher) {
  class!Ammo Cls;

  // give toucher every kind of ammo
  foreach AllClasses(Ammo, Cls) {
    // only direct descendants
    if (GetClassParent(Cls) != Ammo) continue;
    Ammo AmmoItem = Ammo(Toucher.FindInventory(Cls));
    if (!AmmoItem) {
      AmmoItem = SpawnAmmoType(self, Cls);
      if (!AmmoItem) continue;
      if (AmmoItem.k8IsLoadedAmmo()) {
        delete AmmoItem;
        continue;
      }
      Ammo a2 = Ammo(Toucher.FindInventory(class!Ammo(AmmoItem.Class)));
      if (a2) {
        delete AmmoItem;
        AmmoItem = a2;
      } else {
        AmmoItem.AttachToOwner(Toucher);
        AmmoItem.Amount = 0;
      }
    }
    int amax = AmmoItem.k8GetAmmoKingMax();
    int oldammo = AmmoItem.Amount;
    if (AmmoItem.MaxAmount < AmmoItem.BackpackMaxAmount) AmmoItem.MaxAmount = AmmoItem.BackpackMaxAmount;
    if (oldammo >= amax) continue;
    int num = AmmoItem.default.BackpackAmount;
    if (!num || bDepleted) continue;
    if (!bIgnoreSkill) {
      // extra ammo in baby mode and nightmare mode
      num = int(float(num)*Level.World.GetAmmoFactor());
    }
    //AmmoItem.Amount += num;
    //if (AmmoItem.Amount > AmmoItem.MaxAmount) AmmoItem.Amount = AmmoItem.MaxAmount;
    AmmoItem.Amount = min(amax, oldammo+num);
    if (oldammo <= 0 && Toucher.Player) PlayerEx(Toucher.Player).GotAmmo(AmmoItem);
  }

  Inventory Copy = ::CreateCopy(Toucher);
  return Copy;
}


//==========================================================================
//
//  AttachToOwner
//
//==========================================================================
override void AttachToOwner (EntityEx NewOwner, optional Inventory oldInv) {
  ::AttachToOwner(NewOwner, oldInv!optional);
  if (NewOwner && NewOwner.bIsPlayer) {
    PlayerEx plr = PlayerEx(Owner.Player);
    if (plr) {
      plr.bHasBackpack = true;
      print("player %C got a backpack!", plr);
    }
  }
}


//==========================================================================
//
//  DetachedFromOwner
//
//==========================================================================
override void DetachedFromOwner () {
  if (Owner && Owner.bIsPlayer) {
    PlayerEx plr = PlayerEx(Owner.Player);
    if (plr) {
      plr.bHasBackpack = true;
      print("player %C lost a backpack!", plr);
    }
  }
  // backpack has been removed, reset all ammo maximal amounts to default
  Inventory AmmoItem;
  for (AmmoItem = EntityEx(Owner).Inventory; AmmoItem; AmmoItem = AmmoItem.Inventory) {
    // only direct descendants (k8: why?)
    //if (GetClassParent(AmmoItem.Class) != Ammo) continue; // not an ammo
    Ammo ammo = Ammo(AmmoItem);
    if (!ammo) continue; // not an ammo
    // this is for ammo king mode
    int maxam = ammo.k8GetAmmoKingMax();
    int amount = ammo.Amount;
    if (amount > maxam) {
      amount = maxam;
      ammo.Amount = amount;
    }
    if (ammo.MaxAmount != Ammo(ammo).BackpackMaxAmount) {
      // maximal amount doesn't match what backpack should give
      continue;
    }
    ammo.MaxAmount = ammo.default.MaxAmount;
    maxam = ammo.k8GetAmmoKingMax();
    if (amount > maxam) ammo.Amount = maxam;
  }
  // just in case
  ::DetachedFromOwner();
}


//==========================================================================
//
//  CreateTossable
//
//==========================================================================
override Inventory CreateTossable (optional int DropAmount) {
  // set depleted flag to prevent cheating
  Inventory Copy = ::CreateTossable(DropAmount!optional);
  if (Copy) BackpackItem(Copy).bDepleted = true;
  return Copy;
}


defaultproperties {
}
