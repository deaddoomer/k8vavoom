//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//
//  BridgeBall
//
// New bridge stuff
//
//  Parent
//      _Special1    true == removing from world
//
//  Child
//      Instigator  pointer to center mobj
//
//**************************************************************************
class BridgeBall : Actor;

float OrbitAngle; // angle of ball
float RotationSpeed = 3.0*360.0/256.0; // every five tics, Hexen moved the ball 3/256th of a revolution
float RotationRadius = 15.0;


//==========================================================================
//
//  A_BridgeOrbit
//
//  FIXME: interpolate this!
//
//==========================================================================
[decorate] final void A_BridgeOrbit () {
  if (Actor(Target).Special1) SetState(none);
  OrbitAngle = AngleMod360(OrbitAngle+RotationSpeed/5.0);
  float s, c;
  sincos(OrbitAngle, out s, out c);
  Origin.x = Target.Origin.x+RotationRadius*c;
  Origin.y = Target.Origin.y+RotationRadius*s;
  Origin.z = Target.Origin.z;
}


states {
Spawn:
  //TLGL A 2 Bright
  //TLGL A 5 Bright A_BridgeOrbit
  TLGL A 1 Bright A_BridgeOrbit
  Wait
}


defaultproperties {
  RenderStyle = STYLE_Add;
  bNoBlockmap = true;
  bNoGravity = true;
  bNoTeleport = true;
}
