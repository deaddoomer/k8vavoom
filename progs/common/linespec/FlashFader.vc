//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class FlashFader : Thinker;

float BlendR1;
float BlendG1;
float BlendB1;
float BlendA1;
float BlendR2;
float BlendG2;
float BlendB2;
float BlendA2;
float Time;
float Duration;
EntityEx ForWho;


//==========================================================================
//
//  Init
//
//==========================================================================
void Init (float ABlendR1, float ABlendG1, float ABlendB1, float ABlendA1,
           float ABlendR2, float ABlendG2, float ABlendB2, float ABlendA2,
           float ADuration, EntityEx AForWho)
{
  BlendR1 = ABlendR1;
  BlendG1 = ABlendG1;
  BlendB1 = ABlendB1;
  BlendA1 = ABlendA1;
  BlendR2 = ABlendR2;
  BlendG2 = ABlendG2;
  BlendB2 = ABlendB2;
  BlendA2 = ABlendA2;
  Duration = ADuration;
  ForWho = AForWho;
  Time = 0.0;
}


//==========================================================================
//
//  Destroy
//
//==========================================================================
override void Destroy () {
  SetBlend(1.0);
  ::Destroy();
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  // we need a valid player
  if (!ForWho || !ForWho.bIsPlayer) {
    Destroy();
    return;
  }

  Time += DeltaTime;
  if (Time >= Duration) {
    SetBlend(1.0);
    Destroy();
    return;
  }
  SetBlend(Time/Duration);
}


//==========================================================================
//
//  Cancel
//
//==========================================================================
void Cancel () {
  Duration = Time;
  BlendA2 = 0.0;
}


//==========================================================================
//
//  SetBlend
//
//==========================================================================
void SetBlend (float Inter) {
  if (!ForWho || !ForWho.bIsPlayer) return;
  PlayerEx P = PlayerEx(ForWho.Player);
  float InvInter = 1.0-Inter;
  P.BlendR = BlendR1*InvInter+BlendR2*Inter;
  P.BlendG = BlendG1*InvInter+BlendG2*Inter;
  P.BlendB = BlendB1*InvInter+BlendB2*Inter;
  P.BlendA = BlendA1*InvInter+BlendA2*Inter;
}


defaultproperties {
}
