//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ArtiTeleport : Inventory
  game(GAME_Raven)
  __mobjinfo__(36)
  __scriptid__(18);

//==========================================================================
//
//  Use
//
//==========================================================================

override bool Use(bool Pickup)
{
  int i;
  float destX;
  float destY;
  float destAngle;

  if (Level.Game.deathmatch)
  {
    i = P_Random() % Level.DeathmatchStarts.Num;
    destX = Level.DeathmatchStarts[i].x;
    destY = Level.DeathmatchStarts[i].y;
    destAngle = float(45 * (Level.DeathmatchStarts[i].angle / 45));
  }
  else
  {
    destX = Level.GetPlayerStart(0, 0)->x;
    destY = Level.GetPlayerStart(0, 0)->y;
    destAngle = float(45 * (Level.GetPlayerStart(0, 0)->angle / 45));
  }
  EntityEx(Owner).Teleport(vector(destX, destY, EntityEx::ONFLOORZ),
    destAngle, true, true, false);
  bool CanLaugh = true;
  if (PlayerEx(Owner.Player).MorphTime &&
    (PlayerEx(Owner.Player).MorphStyle & MORPH_UNDOBYCHAOSDEVICE))
  {
    // Teleporting away will undo any morph effects
    if (!PlayerEx(Owner.Player).UndoPlayerMorph(false,
      PlayerEx(Owner.Player)) &&
      (PlayerEx(Owner.Player).MorphStyle & MORPH_FAILNOLAUGH))
    {
      CanLaugh = false;
    }
  }
  if (CanLaugh)
  {
    // Full volume laugh
    Owner.PlaySound('*evillaugh', CHAN_VOICE, 1.0, ATTN_NONE);
  }
  return true;
}

states
{
Spawn:
  ATLP ABCB 4
  Loop
}

defaultproperties
{
  MaxAmount = DefMaxAmount;
  PickupSound = 'misc/p_pkup';
  PickupMessage = "$txt_artiteleport";
  IconName = 'artiatlp';
  bCountItem = true;
  bFloatBob = true;
  PickupFlashType = PickupFlash;
  bInvBar = true;
}
