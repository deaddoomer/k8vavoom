//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PlaneWatcher : Thinker;

sector_t *Sector;
float WatchD;
float LastD;
int Special;
int Args[5];
Entity Activator;
line_t *Line;
int LineSide;
bool bCeiling;


//==========================================================================
//
//  Start
//
//==========================================================================
void Start (Entity it, line_t *line, int lineSide, bool ceiling, int tag,
            int height, int special, int arg0, int arg1, int arg2, int arg3, int arg4)
{
  //int secnum;
  sec_plane_t *plane;

  Special = special;
  Args[0] = arg0;
  Args[1] = arg1;
  Args[2] = arg2;
  Args[3] = arg3;
  Args[4] = arg4;
  Activator = it;
  Line = line;
  LineSide = lineSide;
  bCeiling = ceiling;

  if (XLevel.FindSectorFromTag(out Sector, tag) >= 0) {
    //Sector = &XLevel.Sectors[secnum];
    if (bCeiling) {
      plane = &Sector->ceiling;
    } else {
      plane = &Sector->floor;
    }
    LastD = plane->dist;
    //FIXME plane.ChangeHeight();
    WatchD = plane->dist+float(height);
  } else {
    Sector = nullptr;
    WatchD = 0.0;
    LastD = 0.0;
  }
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  if (Sector == nullptr) {
    Destroy();
    return;
  }

  float NewDist = (bCeiling ? Sector->ceiling.dist : Sector->floor.dist);

  if ((LastD < WatchD && NewDist >= WatchD) ||
      (LastD > WatchD && NewDist <= WatchD))
  {
    Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
      Args[3], Args[4], Line, LineSide, Activator);
    Destroy();
  }
}


defaultproperties {
}
