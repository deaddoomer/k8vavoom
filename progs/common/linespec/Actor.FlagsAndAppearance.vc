//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//  Flags and appearance
//**************************************************************************

//==========================================================================
//
//  A_SetFloorClip
//
//==========================================================================

final void A_SetFloorClip()
{
  bFloorClip = true;
  HandleFloorclip();
}

//==========================================================================
//
//  A_UnSetFloorClip
//
//==========================================================================

final void A_UnSetFloorClip()
{
  bFloorClip = false;
  FloorClip = 0.0;
}

//==========================================================================
//
//  A_HideThing
//
//==========================================================================

final void A_HideThing()
{
  bInvisible = true;
}

//==========================================================================
//
//  A_UnHideThing
//
//==========================================================================

final void A_UnHideThing()
{
  bInvisible = false;
}

//==========================================================================
//
//  A_SetInvulnerable
//
//==========================================================================

final void A_SetInvulnerable()
{
  bInvulnerable = true;
}

//==========================================================================
//
//  A_UnSetInvulnerable
//
//==========================================================================

final void A_UnSetInvulnerable()
{
  bInvulnerable = false;
}

//==========================================================================
//
//  A_SetReflective
//
//==========================================================================

final void A_SetReflective()
{
  bReflective = true;
}

//==========================================================================
//
//  A_UnSetReflective
//
//==========================================================================

final void A_UnSetReflective()
{
  bReflective = false;
}

//==========================================================================
//
//  A_SetReflectiveInvulnerable
//
//==========================================================================

final void A_SetReflectiveInvulnerable()
{
  bReflective = true;

  A_SetInvulnerable();
}

//==========================================================================
//
//  A_UnSetReflectiveInvulnerable
//
//==========================================================================

final void A_UnSetReflectiveInvulnerable()
{
  bReflective = false;

  A_UnSetInvulnerable();
}

//==========================================================================
//
//  A_SetShootable
//
//==========================================================================

final void A_SetShootable()
{
  bNonShootable = false;
  bShootable = true;
}

//==========================================================================
//
//  A_UnSetShootable
//
//==========================================================================

final void A_UnSetShootable()
{
  bNonShootable = true;
  bShootable = false;
}

//===========================================================================
//
//  A_NoGravity
//
//===========================================================================

final void A_NoGravity()
{
  bNoGravity = true;
}

//===========================================================================
//
//  A_Gravity
//
//===========================================================================

final void A_Gravity()
{
  bNoGravity = false;
  Gravity = 1.0;
}

//===========================================================================
//
//  A_LowGravity
//
//===========================================================================

final void A_LowGravity()
{
  bNoGravity = false;
  Gravity = 0.125;
}

//==========================================================================
//
//  A_NoBlocking
//
//  Unset blocking.
//
//==========================================================================

final void A_NoBlocking()
{
  int         SpeechNum;
  RogueConSpeech*   Speech;
  class<EntityEx>   DropItemType;
  int         i;

  //  Andy Baker's stealth monsters
  if (bStealth)
  {
    Alpha = 1.0;
    VisDir = 0;
  }

  // actor is on ground, it can be walked over
  bSolid = false;

  SpeechNum = GetSpeech();
  if (SpeechNum)
  {
    //  Drop stuff as determined by conversation.
    if (SpeechNum < 0)
    {
      Speech = &XLevel.GenericSpeeches[-SpeechNum - 1];
    }
    else
    {
      Speech = &XLevel.LevelSpeeches[SpeechNum - 1];
    }
    DropItemType = LineSpecialLevelInfo(Level).GetClassFromID(Speech->DropItem);
    if (DropItemType)
    {
      DropItem(DropItemType, 0, 1.0);
      return;
    }
  }

  // Check for monsters dropping things
  if (ShouldDropItems())
  {
    if (DropItemList.Num)
    {
      for (i = 0; i < DropItemList.Num; i++)
      {
        if (DropItemList[i].Type)
        {
          DropItem(class<EntityEx>(DropItemList[i].Type),
            DropItemList[i].Amount, DropItemList[i].Chance);
        }
      }
    }
    else
    {
      NoBlockingSet();
    }
  }
}

//==========================================================================
//
//  A_Fall
//
//  For compatibility
//
//==========================================================================

final void A_Fall()
{
  A_NoBlocking();
}

//==========================================================================
//
//  A_SetSolid
//
//==========================================================================

final void A_SetSolid()
{
  bSolid = true;
}

//==========================================================================
//
//  A_UnsetSolid
//
//==========================================================================

final void A_UnsetSolid()
{
  bSolid = false;
}

//==========================================================================
//
//  A_SetFloat
//
//==========================================================================

final void A_SetFloat()
{
  bFloat = true;
}

//==========================================================================
//
//  A_UnsetFloat
//
//==========================================================================

final void A_UnsetFloat()
{
  bFloat = false;
  bInFloat = false;
}

//==========================================================================
//
//  A_ScreamAndUnblock
//
//  For breakable DECORATE decorations that have only one death state.
//
//==========================================================================

final void A_ScreamAndUnblock()
{
  A_Scream();
  A_NoBlocking();
}

//==========================================================================
//
//  A_ActiveAndUnblock
//
//  For breakable DECORATE decorations that have only one death state.
//
//==========================================================================

final void A_ActiveAndUnblock()
{
  A_ActiveSound();
  A_NoBlocking();
}

//==========================================================================
//
//  A_SetShadow
//
//==========================================================================

final void A_SetShadow()
{
  bUnknown2 = true;
  bShadow = true;
  RenderStyle = STYLE_Translucent;
  Alpha = 0.333;
}

//==========================================================================
//
//  A_ClearShadow
//
//==========================================================================

final void A_ClearShadow()
{
  bUnknown2 = false;
  bShadow = false;
  RenderStyle = STYLE_Normal;
  Alpha = 1.0;
}

//==========================================================================
//
//  A_SetTranslucent
//
//==========================================================================

final void A_SetTranslucent(float AlphaVal, optional int Mode)
{
  if (AlphaVal < 0.0)
  {
    AlphaVal = 0.0;
  }
  else if (AlphaVal > 1.0)
  {
    AlphaVal = 1.0;
  }

  Alpha = AlphaVal;
  RenderStyle = Mode == 0 ? STYLE_Translucent : Mode == 2 ?
    STYLE_Fuzzy : STYLE_Add;
}

//==========================================================================
//
//  A_FadeIn
//
//==========================================================================

final void A_FadeIn(optional float Val)
{
  if (RenderStyle == Entity::STYLE_Normal)
  {
    RenderStyle = Entity::STYLE_Translucent;
  }
  if (!Val)
  {
    Val = 0.1;
  }
  Alpha += Val;
}

//==========================================================================
//
//  A_FadeOut
//
//==========================================================================

final void A_FadeOut(optional float Val)
{
  if (RenderStyle == Entity::STYLE_Normal)
  {
    RenderStyle = Entity::STYLE_Translucent;
  }
  if (!Val)
  {
    Val = 0.1;
  }
  Alpha -= Val;
  if (Alpha <= 0.0)
  {
    Destroy();
  }
}

//==========================================================================
//
//  A_QueueCorpse
//
//  Throw another corpse on the queue.
//
//==========================================================================

final void A_QueueCorpse()
{
  EntityEx corpse;

  if (LineSpecialLevelInfo(Level).corpseQueueSlot >=
    LineSpecialLevelInfo(Level).CorpseQueSize)
  {
    // Too many corpses - remove an old one
    corpse = LineSpecialLevelInfo(Level).corpseQueue[
      LineSpecialLevelInfo(Level).corpseQueueSlot %
      LineSpecialLevelInfo(Level).CorpseQueSize];
    if (corpse)
    {
      corpse.Destroy();
    }
  }
  LineSpecialLevelInfo(Level).corpseQueue[
    LineSpecialLevelInfo(Level).corpseQueueSlot %
    LineSpecialLevelInfo(Level).CorpseQueSize] = self;
  LineSpecialLevelInfo(Level).corpseQueueSlot++;
}

//============================================================================
//
//  A_DeQueueCorpse
//
//  Remove a mobj from the queue (for resurrection)
//
//============================================================================

final void A_DeQueueCorpse()
{
  int slot;

  for (slot = 0; slot < LineSpecialLevelInfo(Level).CorpseQueSize; slot++)
  {
    if (LineSpecialLevelInfo(Level).corpseQueue[slot] == self)
    {
      LineSpecialLevelInfo(Level).corpseQueue[slot] = none;
      break;
    }
  }
}

//============================================================================
//
//  A_ChangeFlag
//
//============================================================================

final void A_ChangeFlag(string Name, bool Value)
{
  bool CountKillBefore = CountsAsKill();
  bool CountItemBefore = bCountItem;
  SetDecorateFlag(Name, Value);
  //  Check if count as kill status changed.
  if (CountsAsKill() != CountKillBefore)
  {
    if (CountsAsKill())
    {
      //  It now counts as kill.
      Level.TotalKills++;
    }
    else
    {
      //  It no longer counts as kill.
      Level.TotalKills--;
    }
  }
  //  The same for items.
  if (CountItemBefore != bCountItem)
  {
    if (bCountItem)
    {
      Level.TotalItems++;
    }
    else
    {
      Level.TotalItems--;
    }
  }
}
