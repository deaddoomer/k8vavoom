//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš, firebrand_kh
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PowerTimeFreezer : Powerup;


//==========================================================================
//
//  InitEffect
//
//==========================================================================
override void InitEffect () {
  if (Owner && Owner.Player) {
    Owner.PlaySound(SightSound, /*CHAN_VOICE*/CHAN_AUTO);

    // give the player and his teammates the power to move when time is frozen
    PlayerEx(Owner.Player).Cheats |= PlayerEx::CF_TIMEFREEZE;
    foreach (int i; 0..MAXPLAYERS) {
      if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned &&
          Level.Game.Players[i].MO && EntityEx(Level.Game.Players[i].MO).IsTeammate(EntityEx(Owner)))
      {
        PlayerEx(Level.Game.Players[i]).Cheats |= PlayerEx::CF_TIMEFREEZE;
      }
    }
    // when this powerup is in effect, pause the music and stop sounds
    CmdBuf_AddText("music pause");
    StopAllSounds();

    // [RH] the effect ends one tic after the counter hits zero, so make sure we start at an odd count
    EffectTime += float(!(int(EffectTime)&1));
    if (!(int(EffectTime)&1)) EffectTime += 1.0;
    // make sure the effect starts and ends on an even tic
    if (!(int(XLevel.Time)&1)) {
      Level.bFrozen = true;
    } else {
      EffectTime += 1.0;
    }
  }
}


//==========================================================================
//
//  DoEffect
//
//==========================================================================
override void DoEffect () {
  ::DoEffect();
  // [RH] do not change LEVEL_FROZEN on odd tics, or the Revenant's tracer will get thrown off
  if (int(XLevel.Time)&1) return;
  // [RH] The "blinking" can't check against EffectTics exactly or it will
  // never happen, because InitEffect ensures that EffectTics will always
  // be odd when level.time is even.
  if (EffectTime > PlayerEx::BLINKTHRESHOLD || (int(4.0*EffectTime)&1)) {
    Level.bFrozen = true;
  } else {
    Level.bFrozen = false;
  }
}


//==========================================================================
//
//  EndEffect
//
//==========================================================================
override void EndEffect () {
  // allow other actors to move about freely once again
  Level.bFrozen = false;

  // also, turn the music back on
  CmdBuf_AddText("music resume");

  // nothing more to do if there's no owner
  if (Owner && Owner.Player) {
    Owner.PlaySound(DeathSound, /*CHAN_VOICE*/CHAN_AUTO);

    PlayerEx(Owner.Player).Cheats &= ~PlayerEx::CF_TIMEFREEZE;
    foreach (int i; 0..MAXPLAYERS) {
      if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned &&
          Level.Game.Players[i].MO && EntityEx(Level.Game.Players[i].MO).IsTeammate(EntityEx(Owner)))
      {
        PlayerEx(Level.Game.Players[i]).Cheats &= ~PlayerEx::CF_TIMEFREEZE;
      }
    }
  }
}


defaultproperties {
  BlendColor = GOLDCOLOR;
  EffectTime = 12.0;
  bHubPower = true;
  bShowTimer = true;
  PowerupTimerName = "Freeze";
}
