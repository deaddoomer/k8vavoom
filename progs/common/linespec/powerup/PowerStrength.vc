//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PowerStrength : Powerup;

//==========================================================================
//
//  HandlePickup
//
//==========================================================================

override bool HandlePickup(Inventory Item)
{
  //  Setting effect time to 0 will cause powerup pickup handler to reset
  // effect time so we get the red flash again.
  if (Item.Class == Class)
  {
    EffectTime = 0.0;
  }
  return ::HandlePickup(Item);
}

//==========================================================================
//
//  Tick
//
//==========================================================================

override void Tick(float DeltaTime)
{
  //  Strength counts up to diminish fade.
  EffectTime += 2.0 * DeltaTime;
  ::Tick(DeltaTime);
}

//==========================================================================
//
//  GetBlend
//
//==========================================================================

override int GetBlend()
{
  // slowly fade the berzerk out
  int Amount = 12 - ftoi(EffectTime / 2.0);
  if (Amount > 0)
  {
    Amount = (Amount + 7) >> 3;
    int a = (Amount + 1) * 28;
    return (BlendColour & 0x00ffffff) | (a << 24);
  }
  return 0;
}

defaultproperties
{
  EffectTime = 1.0 / 35.0;
  BlendColour = RGBA(255, 0, 0, 128);
  bHubPower = true;
}
