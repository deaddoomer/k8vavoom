//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PowerStrength : Powerup;

transient string lastBlendColorString;


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
override bool HandlePickup (Inventory Item) {
  // setting effect time to 0 will cause powerup pickup handler to reset
  // effect time so we get the red flash again
  if (Item.Class == Class) EffectTime = 0.0;
  return ::HandlePickup(Item);
}


//==========================================================================
//
//  SimplifiedTick
//
//  called when entity doesn't need physics
//
//==========================================================================
override void SimplifiedTick (float deltaTime) {
  Tick(deltaTime);
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  // strength counts up to diminish fade
  EffectTime += 2.0*DeltaTime;
  ::Tick(DeltaTime);
}


//==========================================================================
//
//  IsColomapOverrideActive
//
//==========================================================================
override bool IsColomapOverrideActive () {
  int pwAmount = 4-int(EffectTime/2.0);
  //printdebug("ET=%s; A=%s", EffectTime, pwAmount);
  return (pwAmount > 0);
}


//==========================================================================
//
//  GetColormapOverride
//
//==========================================================================
override int GetColormapOverride (out bool dontBlink) {
  switch (GetCvarI('k8ColormapBerserk')) {
    //case CMapOverride.Original:
    case CMapOverride.Monochrome: dontBlink = true; return MONOCOLOR;
    case CMapOverride.Gold: dontBlink = true; return GOLDCOLOR;
    case CMapOverride.Green: dontBlink = true; return GREENCOLOR;
    case CMapOverride.Red: dontBlink = true; return REDCOLOR;
    case CMapOverride.BeRed: dontBlink = true; return BEREDCOLOR;
    case CMapOverride.Blue: dontBlink = true; return BLUECOLOR;
    case CMapOverride.Inverse: dontBlink = true; return INVERSXCOLOR;
    case CMapOverride.NoColor: dontBlink = true; return TRANSNOCOLOR;
    case CMapOverride.FixedAmp:
      dontBlink = true;
      /*
      if (Owner && Owner.bIsPlayer && Owner.Player && Owner.Player.MO == Owner) {
        Owner.Player.ExtraLight += 8;
      }
      */
      return NOTHINGCOLOR;
  }
  return 0;
}


//==========================================================================
//
//  GetBlend
//
//==========================================================================
override int GetBlend () {
  // check user override
  int cm = GetCvarI('k8ColormapBerserk');
  if (cm <= 0 || cm >= CMapOverride.Max) {
    string cs = GetCvarS('k8BerserkTint');
    if (cs != lastBlendColorString) {
      lastBlendColorString = cs;
      BlendColor = (cs ? ParseColor(cs) : RGBA(255, 0, 0, 128));
      BlendColor = (BlendColor&0xff_ff_ff ? (BlendColor&0xff_ff_ff)|0x80_00_00 : 0);
    }
    if (BlendColor) {
      // slowly fade the berzerk out
      int blAmount = 12-int(EffectTime/2.0);
      if (blAmount > 0) {
        blAmount = (blAmount+7)>>3;
        int a = (blAmount+1)*28;
        return (BlendColor&0x00ffffff)|(a<<24);
      }
    }
  }
  return 0;
}


defaultproperties {
  EffectTime = 1.0/35.0;
  BlendColor = RGBA(255, 0, 0, 128);
  bHubPower = true;
  bWeakColormap = true;
  //bShowTimer = true;
  //PowerupTimerName = "Strength";
}
