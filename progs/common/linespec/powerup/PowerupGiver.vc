//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  Base class for items that give owner a powerup when activated.
//**
//**************************************************************************
class PowerupGiver : Inventory abstract;

class!Powerup PowerupType;
// non-0 to override powerup's default time
float EffectTime;
int BlendColor;
name Mode;
float Strength = float.nan; //k8:FIXME, i need a way to know if it is specified


//==========================================================================
//
//  Use
//
//==========================================================================
override bool Use (bool Pickup) {
  class!Powerup pwtype = PowerupType;

  if (!pwtype) {
    for (class!PowerupGiver cc = class!PowerupGiver(Class); cc; cc = class!PowerupGiver(GetClassParent(cc))) {
      //printdebug("  %C: %C", cc, cc.default.PowerupType);
      if (cc.default.PowerupType) {
        pwtype = cc.default.PowerupType;
        printdebug("powerup giver `%C` got powerup type `%C` from powerup giver `%C`", self, pwtype, cc);
        break;
      }
    }
    if (!pwtype) {
      printwarn("tried to use empty powerup `%C`!", self);
      return false;
    }
  }

  Powerup Pw = SpawnEntityChecked(class!Powerup, pwtype, default, default, default/*, false*/);
  if (!Pw) return false;

  if (!Strength.isnan) Pw.Strength = Strength;
  if (EffectTime) Pw.EffectTime = (EffectTime > 0.0 ? EffectTime : -EffectTime*35.0);
  if (BlendColor) Pw.BlendColor = BlendColor;
  if (Mode) Pw.Mode = Mode;
  Pw.bAlwaysPickup = bAlwaysPickup;
  Pw.bAdditiveTime = bAdditiveTime;

  if (!Pw.TryPickup(EntityEx(Owner))) {
    Pw.Destroy();
    return false;
  }

  return true;
}


defaultproperties {
  MaxAmount = DefMaxAmount;
  bInvBar = true;
  PickupSound = 'misc/p_pkup';
}
