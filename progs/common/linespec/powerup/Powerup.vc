//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  Base class for all powerups.
//**
//**************************************************************************
class Powerup : Inventory abstract;

float EffectTime;
int BlendColor;
name Mode;
float Strength = 0; //k8:FIXME, i need a way to know if it is specified


replication {
  reliable if (Role == ROLE_Authority && bNetOwner)
    EffectTime, Mode;
}


//==========================================================================
//
//  Destroyed
//
//==========================================================================
override void Destroyed () {
  EndEffect();
  ::Destroyed();
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  // powerup cannot exist without an owner
  if (!Owner) {
    Destroy();
    return;
  }

  if (EffectTime > 0.0) {
    EffectTime -= DeltaTime;
    if (EffectTime <= 0.0) Destroy();
  }
}


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
override bool HandlePickup (Inventory Item) {
  if (Item.Class == Class) {
    Powerup Pow = Powerup(Item);

    // permanent powerups can be always picked up
    if (!Pow.EffectTime) {
      Item.bPickupGood = true;
      return true;
    }
    // don't pick it up if not yet blinking unless it should always be picked up
    if (EffectTime > PlayerEx::BLINKTHRESHOLD && !Item.bAlwaysPickup) return true; // already have it
    // only increase effect time
    if (Pow.bAdditiveTime) {
      EffectTime += Pow.EffectTime;
      BlendColor = Pow.BlendColor;
    } else if (EffectTime < Pow.EffectTime) {
      EffectTime = Pow.EffectTime;
      BlendColor = Pow.BlendColor;
    }
    Item.bPickupGood = true;
    return true;
  }

  if (Inventory) return Inventory.HandlePickup(Item);
  return false;
}


//==========================================================================
//
//  CreateCopy
//
//==========================================================================
override Inventory CreateCopy (EntityEx Toucher) {
  Owner = Toucher;
  InitEffect();
  // clear the Owner field, unless it was changed by the activation, for
  // example, if this instance is a morph powerup; the flag tells the
  // caller that the ownership has changed so that they can properly handle
  // the situation
  if (!bCreateCopyMoved) Owner = none;
  return self;
}


//==========================================================================
//
//  OwnerDied
//
//==========================================================================
override void OwnerDied () {
  // powerups don't last after owner's death
  Destroy();
}


//==========================================================================
//
//  InitEffect
//
//==========================================================================
void InitEffect () {
}


//==========================================================================
//
//  DoEffect
//
//==========================================================================
override void DoEffect () {
  if (!Owner) return;

  if (EffectTime > 0.0 && Owner.Player) {
    if (EffectTime > PlayerEx::BLINKTHRESHOLD || (int(4.0*EffectTime)&1)) {
           if (BlendColor == INVERSECOLOR) Owner.Player.FixedColormap = PlayerEx::INVERSECOLORMAP;
      else if (BlendColor == GOLDCOLOR) Owner.Player.FixedColormap = PlayerEx::GOLDCOLORMAP;
      else if (BlendColor == REDCOLOR) Owner.Player.FixedColormap = PlayerEx::REDCOLORMAP;
      else if (BlendColor == GREENCOLOR) Owner.Player.FixedColormap = PlayerEx::GREENCOLORMAP;
    } else if ((BlendColor == INVERSECOLOR || BlendColor == GOLDCOLOR ||
                BlendColor == REDCOLOR || BlendColor == GREENCOLOR) &&
               Owner.Player.FixedColormap >= PlayerEx::NUMCOLORMAPS)
    {
      Owner.Player.FixedColormap = 0;
    }
  }
}


//==========================================================================
//
//  EndEffect
//
//==========================================================================
void EndEffect () {
}


//==========================================================================
//
//  GetBlend
//
//==========================================================================
override int GetBlend () {
  if (EffectTime <= PlayerEx::BLINKTHRESHOLD && !(int(4.0*EffectTime)&1)) return 0;
  if (BlendColor == INVERSECOLOR || BlendColor == GOLDCOLOR) return 0;
  return BlendColor;
}


defaultproperties {
}
