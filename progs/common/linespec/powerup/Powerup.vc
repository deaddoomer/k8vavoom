//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  Base class for all powerups.
//**
//**************************************************************************
class Powerup : Inventory abstract;

enum CMapOverride {
  Original,
  Monochrome,
  Gold,
  Green,
  Red,
  BeRed,
  Blue,
  Inverse,
  Max,
}

float EffectTime;
int BlendColor;
name Mode;
float Strength = float.nan; //k8:FIXME, i need a way to know if it is specified
// this is used as `default`, no need to save
transient bool bShowTimer = false;
transient string PowerupTimerName;

bool bSurvivesMapTeleport;
bool bSurvivesHubTeleport; // not implemented yet


replication {
  reliable if (Role == ROLE_Authority && bNetOwner)
    EffectTime, Mode, bShowTimer;
}


//==========================================================================
//
//  Destroyed
//
//==========================================================================
override void Destroyed () {
  EndEffect();
  ::Destroyed();
}


//==========================================================================
//
//  SimplifiedTick
//
//  called when entity doesn't need physics
//
//==========================================================================
override void SimplifiedTick (float deltaTime) {
  Tick(deltaTime);
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  // powerup cannot exist without an owner
  // k8: nope, it can -- when the player is teleporting to a new map in netgame, for example!
  // if (!Owner) { Destroy(); return; }

  if (EffectTime > 0.0) {
    EffectTime -= DeltaTime;
    if (EffectTime <= 0.0) Destroy();
  }
}


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
override bool HandlePickup (Inventory Item) {
  if (Item.Class == Class) {
    Powerup Pow = Powerup(Item);

    // permanent powerups can be always picked up
    if (!Pow.EffectTime) {
      Item.bPickupGood = true;
      return true;
    }
    // don't pick it up if not yet blinking unless it should always be picked up
    if (EffectTime > PlayerEx::BLINKTHRESHOLD && !Item.bAlwaysPickup) return true; // already have it
    // only increase effect time
    if (Pow.bAdditiveTime) {
      EffectTime += Pow.EffectTime;
      BlendColor = Pow.BlendColor;
    } else if (EffectTime < Pow.EffectTime) {
      EffectTime = Pow.EffectTime;
      BlendColor = Pow.BlendColor;
    }
    Item.bPickupGood = true;
    return true;
  }

  if (Inventory) return Inventory.HandlePickup(Item);
  return false;
}


//==========================================================================
//
//  CreateCopy
//
//==========================================================================
override Inventory CreateCopy (EntityEx Toucher) {
  Owner = Toucher;
  InitEffect();
  // clear the Owner field, unless it was changed by the activation, for
  // example, if this instance is a morph powerup; the flag tells the
  // caller that the ownership has changed so that they can properly handle
  // the situation
  if (!bCreateCopyMoved) Owner = none;
  return self;
}


//==========================================================================
//
//  CreateTossable
//
//  never tossable
//
//==========================================================================
override Inventory CreateTossable (optional int DropAmount) {
  return none;
}


//==========================================================================
//
//  OwnerDied
//
//==========================================================================
override void OwnerDied () {
  // powerups don't last after owner's death
  Destroy();
}


//==========================================================================
//
//  InitEffect
//
//==========================================================================
void InitEffect () {
}


//==========================================================================
//
//  IsColomapOverrideActive
//
//  called if `GetColormapOverride()` returned 0 or positive
//  if this method returns false, deactivate colormap
//
//==========================================================================
bool IsColomapOverrideActive () {
  return true;
}


//==========================================================================
//
//  GetColormapOverride
//
//  <=0 means "no override"
//  otherwise should return xxxCOLOR
//
//==========================================================================
int GetColormapOverride (out bool dontBlink) {
  return 0;
}


//==========================================================================
//
//  TranslateColorToCMap
//
//==========================================================================
ubyte TranslateColorToCMap (int clr) {
  switch (clr) {
    case INVERSECOLOR: return PlayerEx::INVERSECOLORMAP;
    case GOLDCOLOR: return PlayerEx::GOLDCOLORMAP;
    case REDCOLOR: return PlayerEx::REDCOLORMAP;
    case GREENCOLOR: return PlayerEx::GREENCOLORMAP;
    case MONOCOLOR: return PlayerEx::MONOCOLORMAP;
    case BEREDCOLOR: return PlayerEx::BEREDCOLORMAP;
    case BLUECOLOR: return PlayerEx::BLUECOLORMAP;
    case INVERSXCOLOR: return PlayerEx::INVERSXCOLORMAP;
  }
  return 0;
}


//==========================================================================
//
//  DoEffect
//
//==========================================================================
override void DoEffect () {
  if (!Owner) return;

  if (EffectTime > 0.0 && Owner && Owner.Player) {
    bool dontBlink = false;
    int bc = GetColormapOverride(out dontBlink);
    if (bc <= 0) {
      bc = BlendColor;
      dontBlink = false;
    } else {
      if (!IsColomapOverrideActive()) {
        // no colormap change
        if (Owner.Player.FixedColormap == TranslateColorToCMap(bc)) Owner.Player.FixedColormap = 0;
        return;
      }
    }
    ubyte cmnum = TranslateColorToCMap(bc);
    if (cmnum) {
      if (dontBlink || EffectTime > PlayerEx::BLINKTHRESHOLD || (int(4.0*EffectTime)&1)) {
        Owner.Player.FixedColormap = cmnum;
      } else {
        if (Owner.Player.FixedColormap >= PlayerEx::NUMCOLORMAPS) Owner.Player.FixedColormap = 0;
      }
    } else {
      if (Owner.Player.FixedColormap >= PlayerEx::NUMCOLORMAPS) Owner.Player.FixedColormap = 0;
    }
  }
}


//==========================================================================
//
//  EndEffect
//
//==========================================================================
void EndEffect () {
  if (Owner && Owner.Player) {
    bool dontBlink = false;
    int bc = GetColormapOverride(out dontBlink);
    ubyte cmap = TranslateColorToCMap(bc > 0 ? bc : BlendColor);
    if (Owner.Player.FixedColormap == cmap) Owner.Player.FixedColormap = 0;
  }
}


//==========================================================================
//
//  GetBlend
//
//==========================================================================
override int GetBlend () {
  if (EffectTime <= PlayerEx::BLINKTHRESHOLD && !(int(4.0*EffectTime)&1)) return 0;
  //if (BlendColor == INVERSECOLOR || BlendColor == GOLDCOLOR) return 0;
  bool dontBlink = false;
  int bc = GetColormapOverride(out dontBlink);
  if (bc > 0) {
    if (TranslateColorToCMap(bc) > 0) return 0;
  }
  if (TranslateColorToCMap(BlendColor) > 0) return 0;
  return BlendColor;
}


defaultproperties {
}
