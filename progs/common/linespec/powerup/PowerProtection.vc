//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PowerProtection : Powerup;


//==========================================================================
//
//  AbsorbDamage
//
//==========================================================================
override void AbsorbDamage (EntityEx inflictor, int damage, name DmgType, ref int NewDamage) {
  if (damage > 0) {
    bool dummy0, dummy1;
    float dmgFactor = 0.25; // default is damage/4
    if (DamageFactors.length) dmgFactor = FindDamageFactor(DmgType, 1.0, out dummy0, dummy1);

    // GZDoom allows zero damage; we weren't, but why?
    NewDamage = max(0, int(float(damage)*dmgFactor)); // (-don't) allow zero damage as result of an underflow

    if (NewDamage < damage) {
      damage = max(1, NewDamage); // so others can work too
      if (Owner) Owner.PlaySound(ActiveSound, /*CHAN_VOICE*/CHAN_BODY);
    }
  }

  ::AbsorbDamage(inflictor, damage, DmgType, NewDamage);
}


//==========================================================================
//
//  InitEffect
//
//==========================================================================
override void InitEffect () {
  if (EntityEx(Owner)) {
    if (SightSound) Owner.PlaySound(SightSound, /*CHAN_VOICE*/CHAN_AUTO);
    // set some special flags for protecting the Owner
    //k8: dunno, it looks right to check for "common protection" here
    if (DamageFactors.length == 0) {
      EntityEx ee = EntityEx(Owner);
      if (!ee) return;
      ee.bNoRadiusDamage = true;
      ee.bNoMorph = true;
      ee.bDontSquash = true;
      ee.bDontBlast = true;
      ee.bNoTeleOther = true;
      ee.bDontRip = true;
      ee.bNoPain = true;
    }
  }
}


//==========================================================================
//
//  EndEffect
//
//==========================================================================
override void EndEffect () {
  if (EntityEx(Owner)) {
    Owner.PlaySound(DeathSound, /*CHAN_VOICE*/CHAN_AUTO);
    // remove flags from Owner
    //k8: dunno, it looks right to check for "common protection" here
    if (DamageFactors.length == 0) {
      EntityEx ee = EntityEx(Owner);
      if (!ee) return;
      ee.bNoRadiusDamage = ee.default.bNoRadiusDamage;
      ee.bNoMorph = ee.default.bNoMorph;
      ee.bDontSquash = ee.default.bDontSquash;
      ee.bDontBlast = ee.default.bDontBlast;
      ee.bNoTeleOther = ee.default.bNoTeleOther;
      ee.bDontRip = ee.default.bDontRip;
      ee.bNoPain = ee.default.bNoPain;
    }
  }
}


defaultproperties {
  EffectTime = 25.0;
  bShowTimer = true;
  PowerupTimerName = "Protection";
}
