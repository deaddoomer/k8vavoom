//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PowerMorph : Powerup;

class!PlayerPawn PlayerClass;
int MorphStyle;
class!Actor MorphFlash;
class!Actor UnmorphFlash;
PlayerEx OwnerPlayer;


//===========================================================================
//
//  InitEffect
//
//===========================================================================
override void InitEffect () {
  if (Owner && Owner.bIsPlayer && PlayerClass) {
    // remember the identity of the player
    OwnerPlayer = PlayerEx(Owner.Player);
    if (EntityEx(Owner).MorphPlayer(PlayerClass, -1.0/*INDEFINITELY*/, MorphStyle, MorphFlash, UnmorphFlash, EntityEx(Owner))) {
      // replace the new owner in our owner; safe because we are not attached to anything yet
      Owner = OwnerPlayer.MO;
      // let the caller know the "real" owner has changed (to the morphed actor)
      bCreateCopyMoved = true;
    } else {
      // let the caller know that the activation failed (can fail the pickup if appropriate)
      bInitEffectFailed = true;
    }
  }
}


//===========================================================================
//
//  EndEffect
//
//===========================================================================
override void EndEffect () {
  // abort if owner already destroyed
  if (!Owner) return;
  // abort if owner already unmorphed
  if (!OwnerPlayer) return;

  // abort if owner is dead; their Die() method will take care of any required unmorphing on death
  if (OwnerPlayer.Health <= 0) return;

  // unmorph if possible
  float SavedMorphTime = OwnerPlayer.MorphTime;
  OwnerPlayer.UndoPlayerMorph(false, OwnerPlayer);

  // abort if unmorph failed; in that case, set the usual retry timer and return
  if (OwnerPlayer.MorphTime) {
    // transfer retry timeout to the powerup's timer
    EffectTime = OwnerPlayer.MorphTime;
    // reload negative morph tics. Use actual value; it may be in use for animation
    OwnerPlayer.MorphTime = SavedMorphTime;
    // try again some time later
    return;
  }

  // unmorph suceeded
  OwnerPlayer = none;
}


defaultproperties {
}
