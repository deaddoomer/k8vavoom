//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PowerDamage : Powerup;


//==========================================================================
//
//  AbsorbDamage
//
//==========================================================================
override void AbsorbDamage (int damage, name DmgType, ref int NewDamage) {
  float dmg_factor;

  if (damage > 0) {
    foreach (auto i; 0..DamageFactors.length) {
      if (nameicmp(DamageFactors[i].DamageType, DmgType) == 0 ||
          (!DmgType && nameicmp(DamageFactors[i].DamageType, 'None') == 0))
      {
        dmg_factor = DamageFactors[i].Factor;
        break;
      }
    }
    NewDamage = int(float(damage)*dmg_factor > 0.0 ? dmg_factor : 1.0);
    if (NewDamage == 0) {
      // don't allow zero damage as result of an underflow
      NewDamage = 1;
    }

    if (Owner && dmg_factor > 1.0) Owner.PlaySound(ActiveSound, CHAN_VOICE);
  }

  if (Inventory) Inventory.AbsorbDamage(damage, DmgType, NewDamage);
}


//==========================================================================
//
//  InitEffect
//
//==========================================================================
override void InitEffect () {
  if (Owner) Owner.PlaySound(SightSound, CHAN_VOICE);
}


//==========================================================================
//
//  EndEffect
//
//==========================================================================
override void EndEffect () {
  if (Owner) Owner.PlaySound(DeathSound, CHAN_VOICE);
}


defaultproperties {
  EffectTime = 25.0;
}
