//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**  Class for Actor state action methods.
//**
//**************************************************************************

//==========================================================================
//
//  DecorDoAAPtr
//
//==========================================================================
final Entity DecorDoAAPtr (name methodname, /*optional*/ int ptr) {
  if (/*!specified_ptr ||*/ ptr == AAPTR_DEFAULT) return self;
  // category 1
  if (bIsPlayer) {
    if (ptr&AAPTR_PLAYER_GETTARGET) {
      //EntityEx targ = AimLineAttack(nullptr, Angles, 8192, noVertAutoAim:true);
      bool noAAim = !PlayerEx(self).bAutoAim, noAAVert = true;
      Weapon Wpn = PlayerEx(self).ReadyWeapon;
      if (Wpn) noAAim = Wpn.IsAutoaimDisabled(); //bNoAutoaim;
      EntityEx targ = Aim(nullptr, 8192/*16*64*/, Angles.yaw, noAutoaim:noAAim, noVertAutoAim:noAAVert);
      if (targ) return targ;
    }
    // AAPTR_PLAYER_GETCONVERSATION // no strife dialogues, so skip
  }
  // category 2
  if (ptr&AAPTR_TARGET) return Target;
  if (ptr&AAPTR_MASTER) return Master;
  if (ptr&AAPTR_TRACER) return Tracer;
  if (ptr&AAPTR_FRIENDPLAYER) {
    if (FriendPlayer > 0 && FriendPlayer <= MAXPLAYERS) {
      auto plr = Level.Game.Players[FriendPlayer-1];
      if (plr && plr.bSpawned && plr.MO) return plr.MO;
    }
  }
  if (ptr&AAPTR_LINETARGET) {
    EntityEx targ = Aim(nullptr, 2048/*16*64*/, Angles.yaw);
    if (targ) return targ;
  }
  // category 3
  int plridx = -1;
       if (ptr&AAPTR_PLAYER1) plridx = 0;
  else if (ptr&AAPTR_PLAYER2) plridx = 1;
  else if (ptr&AAPTR_PLAYER3) plridx = 2;
  else if (ptr&AAPTR_PLAYER4) plridx = 3;
  else if (ptr&AAPTR_PLAYER5) plridx = 4;
  else if (ptr&AAPTR_PLAYER6) plridx = 5;
  else if (ptr&AAPTR_PLAYER7) plridx = 6;
  else if (ptr&AAPTR_PLAYER8) plridx = 7;
  if (plridx >= 0 && plridx < MAXPLAYERS) {
    auto plr = Level.Game.Players[plridx];
    if (plr && plr.bSpawned && plr.MO) return plr.MO;
  }
  if (ptr&AAPTR_NULL) return none;
  FatalError("%s: unsupported ptr (0x%x)", methodname, ptr);
  return none;
}


//==========================================================================
//
//  decorate_GetArg
//
//==========================================================================
final int decorate_GetArg (int n) {
  return (n >= 0 && n < 5 ? Args[n] : 0);
}


//==========================================================================
//
//  A_SetArg
//
//==========================================================================
final void A_SetArg (int n, int v) {
  if (n >= 0 && n < 5) Args[n] = v;
}


//==========================================================================
//
//  A_SetAngle
//
//==========================================================================
final void A_SetAngle (float newyaw, optional int flags, optional int aptr) {
  Entity tgt = DecorDoAAPtr('A_SetAngle', aptr!optional);
  if (!tgt) return;
  tgt.Angles.yaw = AngleMod360(newyaw);
  //dprint("A_SetAngle: not implemented!");
}


/*
const int SPF_FORCECLAMP = 0x01;
const int SPF_INTERPOLATE = 0x00;
*/

//==========================================================================
//
//  clampPitch
//
//==========================================================================
private final float clampPitch (float newpitch) {
  // hack, so player head won't be clamped down
  //print("  A_SetPitch00: newpitch=%f", newpitch);
  if (newpitch >= 360) {
    newpitch = AngleMod360(newpitch);
    //print("  A_SetPitch01: newpitch=%f", newpitch);
  }
  if (newpitch > 180) newpitch = AngleMod360(newpitch)-360; // [-90..]
  //print("  A_SetPitch02: newpitch=%f", newpitch);
  //return fclamp(newpitch, -90.0, 90.0);
  return fclamp(newpitch, -80.0, 80.0); // actual engine limits
}


//==========================================================================
//
//  A_SetPitch
//
//  should be always clamped on player
//
//==========================================================================
final void A_SetPitch (float newpitch, optional int flags, optional int aptr) {
  Entity tgt = DecorDoAAPtr('A_SetPitch', aptr!optional);
  if (!tgt) return;
  if (tgt.bIsPlayer || (flags&0x01) != 0) newpitch = clampPitch(newpitch);
  tgt.Angles.pitch = /*AngleMod360*/(newpitch);
}


//==========================================================================
//
//  A_SetRoll
//
//==========================================================================
final void A_SetRoll (float newroll, optional int flags, optional int aptr) {
  Entity tgt = DecorDoAAPtr('A_SetRoll', aptr!optional);
  if (!tgt) return;
  tgt.Angles.roll = AngleMod360(newroll);
}


//==========================================================================
//
//  ACS_Execute
//
//==========================================================================
final bool ACS_Execute (int script, optional int map, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunACS(self, script, map, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_ExecuteAlways
//
//==========================================================================
final bool ACS_ExecuteAlways (int script, optional int map, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunACSAlways(self, script, map, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_ExecuteWithResult
//
//==========================================================================
final int ACS_ExecuteWithResult (int script, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunACSWithResult(self, script, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_NamedExecute
//
//==========================================================================
final bool ACS_NamedExecute (string script, optional int map, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunNamedACS(self, script, map, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_NamedExecuteAlways
//
//==========================================================================
final bool ACS_NamedExecuteAlways (string script, optional int map, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunNamedACSAlways(self, script, map, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_NamedExecuteWithResult
//
//==========================================================================
final int ACS_NamedExecuteWithResult (string script, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunNamedACSWithResult(self, script, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  decorate_CountInv
//
//==========================================================================
final int decorate_CountInv (name ItemName, optional int aptr) {
  Entity tgt = DecorDoAAPtr('decorate_CountInv', aptr!optional);
  if (!tgt) return 0;
  return tgt.CheckInventory(ItemName);
}


//==========================================================================
//
//  A_SpawnProjectile
//
//==========================================================================
final void A_SpawnProjectile (name MissileTypeName, optional float SpawnHeight, optional float SpawnXYOffset,
                              optional float Angle, optional int AimMode, optional float Pitch/*, optional int ptr*/)
{
  if (!MissileTypeName) return;

  int Flags = AimMode & ~3;
  AimMode &= 3;

  class!EntityEx MissileType = class!EntityEx(FindClassLowerCase(MissileTypeName));
  if (!MissileType) return;
  MissileType = class!EntityEx(GetClassReplacement(MissileType));
  //if (Level.Game.nomonsters && MissileType.default.bMonster) return;

  if (Target || AimMode == 2) {
    if (MissileType) {
      if (!specified_SpawnHeight) SpawnHeight = 32.0;
      if (!specified_SpawnXYOffset) SpawnXYOffset = 0; // was 1, why?
      TVec Offs = float(SpawnXYOffset)*vector(cos(Angles.yaw-90.0), sin(Angles.yaw-90.0), 0.0);
      EntityEx A;

      switch (AimMode) {
        default:
          Origin += Offs;
          A = SpawnMissile(Target, MissileType, SpawnHeight);
          Origin -= Offs;
          break;
        case 1:
          Offs.z = SpawnHeight;
          A = SpawnMissileXYZ(Origin+Offs, Target, MissileType);
          break;
        case 2:
          Origin += Offs;
          A = SpawnMissileAngles(MissileType, Angles.yaw, Pitch, SpawnHeight);
          Origin -= Offs;
      }

      if (A) {
        VectorRotateAroundZ(ref A.Velocity, Angle);
        // find correct shooter for projectiles shooting projectiles
        if (IsMissile(!!(Flags & 4))) {
          EntityEx Own = self;
          while (Own.IsMissile(!!(Flags & 4)) && Own.Target) Own = Own.Target;
          A.Target = Own;
          if (A.bSeekerMissile) A.Tracer = Tracer;
        } else if (A.bSeekerMissile) {
          A.Tracer = Target;
        }
      }
    }
  } else if (Flags & 8) {
    if (SeeState) SetState(SeeState);
  }
}


//===========================================================================
//
//  A_Quake
//
//===========================================================================
final bool A_Quake (float intensity, float ticduation, float damrad, float tremrad, optional name soundname) {
  if (ticduation < 1) return false;
  if (damrad < 1 && tremrad < 1) return false;
  damrad = fmax(0, damrad);
  tremrad = fmax(0, tremrad);
  if (intensity < 1) return false;
  if (intensity > 9) intensity = 9;
  QuakeFocus focus = Spawn(QuakeFocus, Origin);
  if (focus) {
    focus.Richters = int(intensity);
    focus.QuakeDuration = int(ticduation)>>1; // decremented every 2 tics
    focus.DamageRadius = damrad;
    focus.TremorRadius = tremrad;
    if (soundname) PlaySound(soundname, CHAN_AUTO);
    return true;
  }
  return false;
}


//==========================================================================
//
//  decorate_A_CheckFlag
//
//==========================================================================
final void decorate_A_CheckFlag (string flagname, state label, optional int aptr) {
  // state jumps should not affect state chain results
  if (XLevel.StateCall) XLevel.StateCall->Result = false;
  EntityEx tgt = EntityEx(DecorDoAAPtr('A_CheckFlag', aptr!optional));
  if (!tgt) return;
  if (!decoDoCheckFlag(flagname, tgt)) return;
  if (label) DoJump(label);
}


//==========================================================================
//
//  decorate_A_ChangeFlag
//
//==========================================================================
final void decorate_A_ChangeFlag (string flagname, int value) {
  //decoDoFlagAction(flagname, self, !!value);
  decoDoSetFlag(flagname, self, !!value);
}
