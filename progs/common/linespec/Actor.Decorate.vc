//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**  Class for Actor state action methods.
//**
//**************************************************************************

//==========================================================================
//
//  decorate_GetArg
//
//==========================================================================
final int decorate_GetArg (int n) {
  return (n >= 0 && n < 5 ? Args[n] : 0);
}


//==========================================================================
//
//  A_SetArg
//
//==========================================================================
final void A_SetArg (int n, int v) {
  if (n >= 0 && n < 5) Args[n] = v;
}


//==========================================================================
//
//  ACS_Execute
//
//==========================================================================
final bool ACS_Execute (int script, optional int map, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunACS(self, script, map, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_ExecuteAlways
//
//==========================================================================
final bool ACS_ExecuteAlways (int script, optional int map, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunACSAlways(self, script, map, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_ExecuteWithResult
//
//==========================================================================
final int ACS_ExecuteWithResult (int script, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunACSWithResult(self, script, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_NamedExecute
//
//==========================================================================
final bool ACS_NamedExecute (string script, optional int map, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunNamedACS(self, script, map, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_NamedExecuteAlways
//
//==========================================================================
final bool ACS_NamedExecuteAlways (string script, optional int map, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunNamedACSAlways(self, script, map, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_NamedExecuteWithResult
//
//==========================================================================
final int ACS_NamedExecuteWithResult (string script, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunNamedACSWithResult(self, script, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  decorate_CountInv
//
//==========================================================================
final int decorate_CountInv (name ItemName, optional int ptr) {
  Entity tgt = self;
  if (specified_ptr && ptr != AAPTR_DEFAULT) {
    if (ptr == AAPTR_NULL) return 0;
    if (ptr == AAPTR_TARGET) {
      tgt = Target;
    } else {
      FatalError("CountInv: unsupported ptr (0x%x)", ptr);
    }
  }
  if (!tgt) return 0;
  return tgt.CheckInventory(ItemName);
}
