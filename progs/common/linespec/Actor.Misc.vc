//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**  Class for Actor state action methods.
//**
//**************************************************************************

class Actor : EntityEx
  abstract;

// Flags for A_WeaponReady
enum {
  WRF_NOBOB = 1,
  WRF_NOSWITCH = 2,
  WRF_NOPRIMARY = 4,
  WRF_NOSECONDARY = 8,
  WRF_NOFIRE = 12,
  WRF_ALLOWREFIRE = 32,
  WRF_ALLOWRELOAD = 64
};


//==========================================================================
//
//  Destroyed
//
//==========================================================================

override void Destroyed()
{
  // Remove from creature queue
  if (bMonster && bCorpse)
  {
    A_DeQueueCorpse();
  }

  ::Destroyed();
}

//**************************************************************************
//  Not documented
//**************************************************************************

//===========================================================================
//
//  A_Log
//
//===========================================================================

final void A_Log(string text)
{
  print("<------------------------------->");
  print("%s", text);
  print("<------------------------------->");
}

//===========================================================================
//
//  A_LogInt
//
//===========================================================================

final void A_LogInt(int num)
{
  print("<------------------------------->");
  print("%i", num);
  print("<------------------------------->");
}

//===========================================================================
//
//  A_ChangeVelocity
//
//===========================================================================

final void A_ChangeVelocity(float x, float y, float z, int flags)
{
  float vx = x, vy = y, vz = z;

  if (flags & 1)  // relative axes - make x, y relative to actor's current angle
  {
    vx = x * -y * cos(Angles.yaw) * sin(Angles.yaw);
    vx /= 4.0 * 35.0;
    vy = x * sin(Angles.yaw) * y * cos(Angles.yaw);
    vy /= 4.0 * 35.0;
  }
  if (flags & 2)  // discard old velocity - replace old velocity with new velocity
  {
    Velocity.x = vx;
    Velocity.y = vy;
    Velocity.z = vz;
  }
  else  // add new velocity to old velocity
  {
    Velocity.x += vx;
    Velocity.y += vy;
    Velocity.z += vz;
  }
}

//===========================================================================
//
//  A_ScaleVelocity
//
//===========================================================================

final void A_ScaleVelocity(float scale)
{
  Velocity.x *= scale;
  Velocity.y *= scale;
  Velocity.z *= scale;
}

//===========================================================================
//
//  A_SetGravity
//
//===========================================================================

final void A_SetGravity(float Grav)
{
  Gravity = Grav;
  if (Gravity < 0.0)
  {
    Gravity = 0.0;
  }
  else if (Gravity > 1.0)
  {
    Gravity = 1.0;
  }
}

//===========================================================================
//
//  A_Respawn
//
//===========================================================================

final void A_Respawn(optional int Flags)
{
  TVec Org;
  bool OK = false;
  Org.x = SpawnPoint.x;
  Org.y = SpawnPoint.y;
  Org.z = GetPlanePointZ(ref XLevel.PointInSector(Org)->floor, Org);
  SetOrigin(Org);
  bSolid = true;
  Height = default.Height;
  if (Flags & 4)
  {
    if (TeleportMove (Org, true))
    {
      OK = true;
    }
  }
  else if (TestLocation())
  {
      OK = true;
  }
  if (OK)
  {
    Health = default.Health;

    // [KS] Don't keep target, because it could be self if the monster committed suicide
    //      ...Actually it's better off an option, so you have better control over monster behavior.
    if (!(Flags & 2))
    {
      Target = none;
      LastHeard = none;
      LastEnemy = none;
    }
    else
    {
      // Don't attack yourself (Re: "Marine targets itself after suicide")
      if (Target == self)
      {
        Target = none;
      }
      if (LastEnemy == self)
      {
        LastEnemy = none;
      }
    }

    //  Restore default flags
    RespawnResetFlags();
    SetState(IdleState);
    bInvisible = false;
    if (Flags & 1)
    {
      Spawn(TeleportFog, Origin + vector(0.0, 0.0,
        LineSpecialGameInfo(Level.Game).TeleFogHeight));
    }
    if (CountsAsKill())
    {
      Level.TotalKills++;
    }
  }
  else
  {
    bSolid = false;
  }
}

//==========================================================================
//
//  A_Feathers
//
//==========================================================================

final void A_Feathers()
{
  int i;
  int count;
  EntityEx mo;

  if (Health > 0)
  {
    // Pain
    count = P_Random() < 32 ? 2 : 1;
  }
  else
  {
    // Death
    count = 5 + (P_Random() & 3);
  }
  for (i = 0; i < count; i++)
  {
    mo = Spawn(Feather, Origin + vector(0.0, 0.0, 20.0));
    mo.Target = self;
    mo.Velocity.x = (Random() - Random()) * 35.0;
    mo.Velocity.y = (Random() - Random()) * 35.0;
    mo.Velocity.z = (1.0 + Random() * 2.0) * 35.0;
    mo.SetState(GetStatePlus(mo.IdleState, P_Random() & 7));
  }
}

//==========================================================================
//
//  A_ShootGun
//
//==========================================================================

final void A_ShootGun()
{
  int damage;
  TVec dir;

  if (!Target)
    return;

  PlaySound('monsters/rifle', CHAN_WEAPON);
  A_FaceTarget();
  AimLineAttack(dir, Angles, MISSILERANGE);
  VectorRotateAroundZ(ref dir, (Random() - Random()) * 45.0 / 2.0);
  damage = ((P_Random() % 5) + 1) * 3;
  LineAttack(dir, MISSILERANGE, damage, StrifePuff);
}

//==========================================================================
//
//  A_RocketInFlight
//
//==========================================================================

final void A_RocketInFlight()
{
  EntityEx A;

  PlaySound('misc/missileinflight', CHAN_VOICE);
  SpawnPuff(Origin, MISSILERANGE, MiniMissilePuff, false);
  A = Spawn(RocketTrail, Origin - Velocity / 35.0);
  if (A)
  {
    A.Velocity.z = 1.0 * 35.0;
  }
}

//==========================================================================
//
//  A_Bang4Cloud
//
//==========================================================================

final void A_Bang4Cloud()
{
  Spawn(Bang4Cloud, Origin + vector(
    (Random() - Random()) * 5.0 / 8.0,
    (Random() - Random()) * 5.0 / 8.0, 0.0));
}

//==========================================================================
//
//  A_DropFire
//
//==========================================================================

final void A_DropFire()
{
  Actor A = Spawn(FireDroplet, Origin + vector(0.0, 0.0, 24.0));
  A.Velocity.z = -35.0;
  RadiusAttack(self, 64, 64.0, false, 'Fire');
}

//==========================================================================
//
//  decorate_A_GiveQuestItem
//
//==========================================================================

final void decorate_A_GiveQuestItem(int QuestType)
{
  // This function does a lot more than just this
  if (DeathSound)
  {
    PlaySound(DeathSound, CHAN_VOICE);
    PlaySound(DeathSound, 6);
  }

  //  Give quest item for destroying important object.
  //  Basicly all object using this function does this.
  class!Inventory QClass = class!Inventory(FindClass(
    StrToName(va("QuestItem%d", QuestType))));
  if (QClass)
  {
    EntityEx(Level.Game.Players[0].MO).GiveInventoryType(QClass);
    Level.Game.Players[0].cprint(va("$txt_quest_%d", QuestType));
  }
}

//==========================================================================
//
//  A_RemoveForceField
//
//==========================================================================

final void A_RemoveForceField()
{
  int i;
  line_t *line;

  bSpecial = false;
  for (i = 0; i < Sector.lines.length; i++)
  {
    line = Sector->lines[i];
    if (line->backsector && line->special == LNSPEC_ForceField)
    {
      line->flags &= ~(ML_BLOCKING|ML_BLOCKEVERYTHING);
      line->special = 0;
      XLevel.Sides[line->sidenum[0]].MidTexture = 0;
      XLevel.Sides[line->sidenum[1]].MidTexture = 0;
    }
  }
}

//==========================================================================
//
//  A_PigPain
//
//==========================================================================

final void A_PigPain()
{
  A_Pain();
  if (Origin.z <= FloorZ)
  {
    Velocity.z = 3.5 * 35.0;
  }
}

//============================================================================
//
//  A_ClassBossHealth
//
//============================================================================

final void A_ClassBossHealth()
{
  if (Level.Game.netgame && !Level.Game.deathmatch) // co-op only
  {
    if (!Special1)
    {
      Health *= 5;
      Special1 = true;  // has been initialised
    }
  }
}

//==========================================================================
//
//  A_PreExplode
//
//  This method is used to set properties to exploding things
//  just before exploding. This one can be used in DECORATE now.
//
//==========================================================================

void A_PreExplode(int Style, float A)
{
  RenderStyle = Style;
  Alpha = A;
}

//============================================================================
//
//  A_BarrelDestroy
//
//  This is only a stub method
//
//============================================================================

final void A_BarrelDestroy()
{
  // In ZDoom this method is used to preserve barrels because of
  // deathmatch flags... here the only relevant function for it
  // would be to make things invisible.
  RenderStyle = STYLE_None;
}

//============================================================================
//
//  A_PlayerSkinCheck
//
//  This is only a stub method
//
//============================================================================

final void A_PlayerSkinCheck(state label)
{
  // Vavoom doesn't support skins as of now...
  // but there are some MODs that use this method
  return;
}

//**************************************************************************
//**************************************************************************

//==========================================================================
//
//  A_BeShadowyFoe
//
//==========================================================================

final void A_BeShadowyFoe()
{
  RenderStyle = STYLE_Translucent;
  Alpha = 0.333;
  bFriendly = false;
}

//==========================================================================
//
//  A_FreeTargMobj
//
//==========================================================================

final void A_FreeTargMobj()
{
  Velocity = vector(0.0, 0.0, 0.0);
  Origin.z = CeilingZ + 4.0;
  Gravity = 1.0;
  bSolid = false;
  bShootable = false;
  bFloat = false;
  bCountKill = false;
  bMonster = false;
  bSkullFly = false;
  bIceCorpse = false;
  bNoGravity = true;
  bDropOff = true;
  bCorpse = true;
  bPassMobj = false;
  RenderStyle = STYLE_None;
  Alpha = 0.0;
  Player = none;
  bIsPlayer = false;
  Health = -1000; // Don't resurrect
}

//==========================================================================
//
//  A_ExecActionSpecial
//
//==========================================================================

final void A_ExecActionSpecial(int Arg1, int Arg2, int Arg3, int Arg4,
  int Arg5, int Special)
{
  Level.ExecuteActionSpecial(Special, Arg1, Arg2, Arg3, Arg4, Arg5, nullptr,
    0, self);

}

//==========================================================================
//
//  A_GiveQuestItem
//
//==========================================================================

final void A_GiveQuestItem()
{
  decorate_A_GiveQuestItem(ftoi(Speed / 35.0));
}

//==========================================================================
//
//  A_ItBurnsItBurns
//
//==========================================================================

final void A_ItBurnsItBurns()
{
  DeathSound = 'human/imonfire';
  A_Scream();
  if (bIsPlayer)
  {
    state WaveState = PlayerEx(Player).ReadyWeapon.FindState('BurnWave');
    if (WaveState)
    {
      Player.SetViewState(ps_weapon, WaveState);
      Player.SetViewState(ps_flash, none);
    }
  }
}

//==========================================================================
//
//  A_SetPitch
//
//==========================================================================
/*
const int SPF_FORCECLAMP = 0x01;
const int SPF_INTERPOLATE = 0x00;
*/
private final float clampPitch (float newpitch) {
  // hack, so player head won't be clamped down
  //print("  A_SetPitch00: newpitch=%f", newpitch);
  if (newpitch >= 360) {
    newpitch = AngleMod360(newpitch);
    //print("  A_SetPitch01: newpitch=%f", newpitch);
  }
  if (newpitch > 180) newpitch = AngleMod360(newpitch)-360; // [-90..]
  //print("  A_SetPitch02: newpitch=%f", newpitch);
  //return fclamp(newpitch, -90.0, 90.0);
  return fclamp(newpitch, -80.0, 80.0); // actual engine limits
}

// should be always clamped on player
final void A_SetPitch (float newpitch, optional int flags, optional int ptr) {
  //print("A_SetPitch: bIsPlayer=%d; newpitch=%f; pitch=%f", bIsPlayer, newpitch, Angles.pitch);
  if (specified_ptr && ptr != AAPTR_DEFAULT) {
    if (ptr == AAPTR_NULL) return;
    if (ptr == AAPTR_TARGET) {
      if (!Target) return;
      if (Target.bIsPlayer || (flags&0x01) != 0) newpitch = clampPitch(newpitch);
      Target.Angles.pitch = /*AngleMod360*/(newpitch);
      return;
    }
    FatalError("A_SetPitch: unsupported ptr (0x%x)", ptr);
  } else {
    if (bIsPlayer || (flags&0x01) != 0) newpitch = clampPitch(newpitch);
    Angles.pitch = /*AngleMod360*/(newpitch);
  }
}


//==========================================================================
//
//  A_SetAngle
//
//==========================================================================
final void A_SetAngle (float newyaw) {
  /*
  if (newyaw < 0.0) newyaw += 360.0;
  newyaw = AngleMod360(newyaw);
  //if (newyaw > 90.0) newyaw -= 360.0;
  //print("oldpitch=%f; newpitch=%f", Angles.pitch, newpitch);
  Angles.yaw = newyaw;
  //Angles.pitch = -10.0;
  */
  dprint("A_SetAngle: not implemented!");
}


//==========================================================================
//
//  A_SetRoll
//
//==========================================================================
final void A_SetRollExt (float newa) {
  Angles.roll = /*AngleMod360*/(newa);
}


//==========================================================================
//
//  A_SetYaw
//
//==========================================================================
final void A_SetYawExt (float newa) {
  Angles.yaw = /*AngleMod360*/(newa);
}


//==========================================================================
//
//  A_SetPitchExt
//
//==========================================================================
final void A_SetPitchExt (float newa) {
  Angles.pitch = /*AngleMod360*/(newa);
}


//==========================================================================
//
//  A_SetScale
//
// scaleX: the actor's new horizontal scale.
//         Using negative values will result in mirroring the sprite on the axis.
// scaleY: the actor's new vertical scale. If this parameter is not given, or
//         is set to 0, scaleX is used as well. Default is 0.
// ptr: The actor to change its scale. This is an actor pointer.
//      Default is AAPTR_DEFAULT, which corresponds to the calling actor.
// usezero: If this is false and scaleY is 0, scaleY uses the same value
//          passed to scaleX, otherwise if it is true, the value of scaleY
//          is used, instead. Default is false.
//==========================================================================
final void A_SetScale (float scaleX, optional float scaleY, optional int ptr, optional bool usezero) {
  Entity tgt = self;
  if (specified_ptr && ptr != AAPTR_DEFAULT) {
    if (ptr == AAPTR_NULL) return;
    if (ptr == AAPTR_TARGET) {
      tgt = Target;
    } else {
      FatalError("A_SetScale: unsupported ptr (0x%x)", ptr);
    }
  }
  if (!tgt) return;
  tgt.ScaleX = scaleX;
  tgt.ScaleY = (usezero || scaleY != 0 ? scaleY : scaleX);
}


//==========================================================================
//
//  A_SetScaleXExt
//
//==========================================================================
final void A_SetScaleXExt (float scale) {
  ScaleX = scale;
}


//==========================================================================
//
//  A_SetScaleYExt
//
//==========================================================================
final void A_SetScaleYExt (float scale) {
  ScaleY = scale;
}


//==========================================================================
//
//  A_ChangeScaleXExt
//
//==========================================================================
final void A_ChangeScaleXExt (float delta, optional float killLimit) {
  ScaleX = fmax(0, ScaleX+delta);
  if (specified_killLimit && ScaleX < killLimit) Destroy();
}


//==========================================================================
//
//  A_ChangeScaleYExt
//
//==========================================================================
final void A_ChangeScaleYExt (float delta, optional float killLimit) {
  ScaleY = fmax(0, ScaleY+delta);
  if (specified_killLimit && ScaleY < killLimit) Destroy();
}


final void A_LayToFloorWithYaw (float yaw) {
  auto sec = Level.XLevel.PointInSector(Origin);
  if (!sec) {
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 0;
    return;
  }
  TVec norm = sec.floor.normal;
  //print("floor normal: %v", norm);
  if (norm.x == 0 && norm.y == 0) {
    /*
    norm.z = -norm.z;
    VectorAngles(norm, Angles);
    print("  angles: %v", Angles);
    */
    Angles.roll = 0;
    Angles.yaw = yaw;
    Angles.pitch = 0;
  } else {
    VectorAngles(norm, Angles);
    //print("floor normal: %v; angles: %v", norm, Angles);
    Angles.pitch = AngleMod360(Angles.pitch+90);
    // alas
    //Angles.yaw = yaw;
  }
}


//==========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
// Follows after getting weapon up, or after previous attack/fire sequence.
//
//==========================================================================
final void A_WeaponReady (optional int Flags) {
  if (k8InWeaponReady) return; // don't recurse

  if (!bIsPlayer) return;

  Weapon Wpn = PlayerEx(Player).ReadyWeapon;
  if (!Wpn) {
    Player.bReloadQueued = false;
    PlayerEx(Player).Refire = 0;
    return;
  }

  k8InWeaponReady = true;
  scope(exit) k8InWeaponReady = false;

  // get out of attack state
  if (StateIsInSequence(State, MissileState) || StateIsInSequence(State, MeleeState)) {
    SetState(IdleState);
  }

  if (Player.ViewStates[ps_weapon].State == Wpn.GetReadyState() &&
      Wpn.ReadySound && (!Wpn.bReadySndHalf || Random() < 0.5))
  {
    PlaySound(Wpn.ReadySound, CHAN_WEAPON);
  }

  if (!(Flags&WRF_NOSWITCH)) {
    // put the weapon away if the player has a pending weapon or has died
    if (PlayerEx(Player).PendingWeapon || Player.MO.Health <= 0) {
      Player.SetViewState(ps_weapon, Wpn.GetDownState());
      Player.bReloadQueued = false;
      PlayerEx(Player).Refire = 0;
      return;
    }
  }

  if (!(Flags&WRF_NOFIRE)) {
    bool attackDown = ((Player.Buttons&BT_ATTACK) != 0);
    if (attackDown) Player.bReloadQueued = false;
    // check for reload
    if ((Flags&WRF_ALLOWRELOAD) != 0 && Player.bReloadQueued && /*!Player.bAttackDown &&*/ !attackDown && Wpn.FindState('Reload')) {
      Player.bAttackDown = true;
      Player.bReloadQueued = false;
      PlayerEx(Player).Refire = 0;
      PlayerEx(Player).ReloadWeapon();
      return;
    }
    // check for fire
    if (attackDown && (Flags&WRF_NOPRIMARY) == 0) {
      if (((Flags&WRF_ALLOWREFIRE) != 0 || !Player.bAttackDown) || !Wpn.bNoAutoFire) {
        Player.bAttackDown = true;
        Player.bReloadQueued = false;
        PlayerEx(Player).FireWeapon();
        //if (Wpn.FireMode == Weapon::FIRE_Primary || Wpn.FireMode == Weapon::FIRE_Secondary) PlayerEx(Player).Refire++;
        return;
      }
    } else if ((Flags&WRF_NOSECONDARY) == 0 && (Player.Buttons&BT_ALT_ATTACK) != 0 && Wpn.FindState('AltFire')) {
      if (((Flags&WRF_ALLOWREFIRE) != 0 || !Player.bAttackDown) || !Wpn.bNoAutoFire) {
        Player.bAttackDown = true;
        Player.bReloadQueued = false;
        PlayerEx(Player).AltFireWeapon();
        //if (Wpn.FireMode == Weapon::FIRE_Primary || Wpn.FireMode == Weapon::FIRE_Secondary) PlayerEx(Player).Refire++;
        return;
      }
    } else {
      Player.bAttackDown = false;
    }
  }

  if (!(Flags&WRF_NOBOB) || !Wpn.bDontBob) {
    // bob the weapon based on movement speed
    float angle = AngleMod360(180.0*XLevel.Time);
    Player.ViewStates[ps_weapon].SX = 1.0+PlayerEx(Player).Bob*cos(angle);
    if (angle >= 180.0) angle -= 180.0;
    Player.ViewStates[ps_weapon].SY = Weapon::WEAPONTOP+PlayerEx(Player).Bob*sin(angle);
  }
}


//==========================================================================
//
//  DoReadyWeapon
//
//  This function replaces calls to A_WeaponReady in other codepointers.
//
//==========================================================================
final void DoReadyWeapon()
{
  A_WeaponReady(0);
}


//==========================================================================
//
//  decorate_GetArg
//
//==========================================================================
final int decorate_GetArg (int n) {
  return (n >= 0 && n < 5 ? Args[n] : 0);
}


//==========================================================================
//
//  A_SetArg
//
//==========================================================================
final void A_SetArg (int n, int v) {
  if (n >= 0 && n < 5) Args[n] = v;
}


//==========================================================================
//
//  ACS_NamedExecute
//
//==========================================================================
final bool ACS_NamedExecute (string script, int map, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunNamedACS(self, script, map, s_arg1, s_arg2, s_arg3);
}


//==========================================================================
//
//  ACS_ExecuteWithResult
//
//==========================================================================
final int ACS_ExecuteWithResult (int script, optional int s_arg1, optional int s_arg2, optional int s_arg3) {
  return XLevel.RunACSWithResult(self, script, s_arg1, s_arg2, s_arg3);
}
