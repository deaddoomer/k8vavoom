//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************


//==========================================================================
//
//  K8HS_IsGoodDamageType
//
//  return `true` if this damage type allowed for headshots
//  virtual, so mods can override this
//
//==========================================================================
bool K8HS_IsGoodDamageType (EntityEx inflictor, name adamageType) {
  if (!adamageType) return true; // normal damage
  if (nameEquCI(adamageType, 'Chainsaw')) return false; // never
  if (!IsNormalLikeDamage(adamageType)) {
    if (GetCvarB('k8HSDebug_ShowFailedDamageType')) printdebug("DMGTYPE: %s", adamageType);
    // shitsara
    if (inflictor && inflictor.bIsPlayer) {
      class!Inventory shitsaraPlr = class!Inventory(FindClass('IsSamsaraClass'));
      if (shitsaraPlr) {
        if (inflictor.FindInventory(shitsaraPlr, disableReplacement:true)) {
          return true;
        }
      }
    }
    return false;
  }
  return true;
}


//==========================================================================
//
//  K8HS_IsIAmAKindOf
//
//  checks if `self` is a subclass, or a replacement
//  used to check for various insta-kill monster types
//  virtual, so mods can override this
//
//==========================================================================
bool K8HS_IsIAmAKindOf (name ClsName) {
  if (!ClsName) return false;
  if (self isa ClsName) return true;
  class xreplCls = GetClassReplacee(self.Class);
  if (xreplCls) return (xreplCls isa ClsName);
  return false;
}


//==========================================================================
//
//  K8HS_IsHeadshotsAllowed
//
//  called to check if this entity can be headshotted (or critical-shotted)
//  return `false` to completely disable headshots for this entity
//  virtual, so mods can override this
//
//==========================================================================
bool K8HS_IsHSAllowed () {
  // do not allow headshots/criticals on non-monster objects
  if (!bMonster) return false;
  return true;
}


//==========================================================================
//
//  K8HS_IsCriticalsAllowed
//
//  called to check if this entity can be critical-shotted
//  return `false` to avoid criticals on this entity
//  virtual, so mods can override this
//
//==========================================================================
bool K8HS_IsCriticalsAllowed () {
  return true;
}


//==========================================================================
//
//  K8HS_FastkillHook
//
//  return positive number to deal exact this damage to the entity
//  return zero or negative to process as usual
//  called before headshot checks
//  virtual, so mods can override this
//
//==========================================================================
int K8HS_FastkillHook () {
  if (K8HS_IsIAmAKindOf('PainElemental')) {
    if (GetCvarB('k8HSInstaKillPainElementals')) return Health+10;
  } else if (K8HS_IsIAmAKindOf('LostSoul')) {
    if (GetCvarB('k8HSInstaKillLostSouls')) return Health+10;
  }
  return 0;
}


//==========================================================================
//
//  K8HS_HeadshotFastKillHook
//
//  return positive number to deal exact this damage to the entity
//  return zero or negative to process as usual
//  called if headshot check passed
//  virtual, so mods can override this
//
//==========================================================================
int K8HS_HeadshotFastKillHook (int dodmg) {
  if (K8HS_IsIAmAKindOf('Archvile')) {
    int fastdamage = GetCvar('k8HSFastKillArchVileDamage');
    if (fastdamage > 0 && dodmg < fastdamage) {
      //printdebug("%C: Archvile superdamage: old=%s; new=%s; health=%s", self, dodmg, fastdamage, Health);
      return fastdamage;
    }
  }
  return 0;
}


//==========================================================================
//
//  K8HS_CheckHeadshot
//
//  called to check if this entity headshotted
//  return `true` if headshot registered
//  virtual, so mods can override this
//
//==========================================================================
bool K8HS_CheckHeadshot (EntityEx inflictor, TVec hitpos, int damage, name adamageType, bool secondary) {
  bool headshot = false;
  float hithgt = hitpos.z; //-Pos.z;
  float fromtop = Height-hithgt;

  if (Height <= 56.0) {
    // humans, archvile, cacodemon, demon, imp, lost soul, pain elemental, revenant
    headshot = (fromtop <= 14.0);
    //if (headshot && showHeadshots) printdebug("HS56: TAN");
  } else if (Height <= 64.0) {
    // arachnotron(64)
    // bruiser(64)
    if (K8HS_IsIAmAKindOf('Arachnotron')) {
      headshot = (fromtop <= 18.0);
      //if (debugme) printdebug("*******ARACHNO!");
    } else {
      headshot = (fromtop <= 15.0);
    }
    //if (headshot && showHeadshots) printdebug("HS64: TAN");
  } else {
    // cyberdemon(110)
    // mastermind(100)
    // keen(72)
    headshot = (fromtop <= 20.0);
    //if (headshot && showHeadshots) printdebug("HSBIG: TAN");
  }

  return headshot;
}


//==========================================================================
//
//  K8onBeforeDamage
//
//  this script will be called before hitscan/projectile damage is done.
//  you can return new damage, or <= 0 to prevent any damage.
//  note that poisoned puffs will still inflict damage to victim.
//  also note that preventing victim from taking any damage will not
//  "awake" it.
//
//==========================================================================
int K8onBeforeDamage (EntityEx inflictor, TVec hitpos, int damage, name adamageType, bool secondary) {
  if (damage <= 0) return damage;

  // is it from player?
  if (!inflictor) return damage;
  PlayerPawn plr;
  bool fromMissile = false;
  if (!inflictor.bIsPlayer) {
    if (!inflictor.bMissile) return damage;
    //if (inflictor.Target) printdebug("%C: %C (%C)", inflictor, PlayerEx(inflictor.Target), PlayerPawn(inflictor.Target));
    plr = PlayerPawn(inflictor.Target);
    fromMissile = true;
  } else {
    plr = PlayerPawn(inflictor);
  }
  if (!plr) return damage;

  if (!GetCvarB('k8HSEnabled')) return damage;

  if (!fromMissile && !K8HS_IsGoodDamageType(inflictor, adamageType)) return damage;
  if (!K8HS_IsHSAllowed()) return damage;

  bool debugme = GetCvarB('k8HSDebug');

  if (debugme) printdebug("ME: %C; inf: %C", self, GetClassReplacee(inflictor.Class));

  scope(exit) {
    if (fromMissile) {
      plr.k8hsLastMissileTicTime = XLevel.TicTime;
    } else {
      plr.k8hsLastHitscanTicTime = XLevel.TicTime;
    }
  }

  //if (k8CheckBoolCVar('k8HSShowKnownDamage', debugme)) printdebug("K8HS: damage type '%s', damage=%s", adamageType, damage);

  if (debugme) printdebug("InitialHealth=%s; Health=%s", InitialHealth, Health);

  if (InitialHealth < 1 || Health < 1) return damage; // something is very wrong with this monster!

  bool fastkills = GetCvarB('k8HSFastKillAnnoyingMonsters');

  // kill certain monsters in one shot
  int fastdamage = 0;
  if (fastkills) {
    fastdamage = K8HS_FastkillHook();
    if (fastdamage > 0) return fastdamage;
  }

  // when we last fired?
  int ticdiff = XLevel.TicTime-(fromMissile ? plr.k8hsLastMissileTicTime : plr.k8hsLastHitscanTicTime);

  // process refires (very fast firing)
  int refire = 0;
  // force our timeout-based refire
  // we can use `PlayerEx(plr.Player).Refire` here, but it is not reliable
  // same tic is secondary, not refire
  if (ticdiff > 0) {
    // ~0.857 seconds
    if (ticdiff < 30) {
      refire = (fromMissile ? ++plr.k8hsLastMissileRefire : ++plr.k8hsLastHitscanRefire);
      if (debugme) printdebug("%C: %s refire: %s (%s : %s) diff=%s", inflictor, (fromMissile ? "missile" : "hitscan"), refire, plr.k8hsLastMissileTicTime, XLevel.TicTime, ticdiff);
    } else {
      if (fromMissile) plr.k8hsLastMissileRefire = 0; else plr.k8hsLastHitscanRefire = 0;
    }
  }
  // set `refire` to:
  //   -666: totally fucked
  //      0: not fucked
  //      1: slightly fucked
  //      2: more fucked (no precision shots)
  //      3: even more fucked (no precision shots)
  if (refire > 0) {
    if (debugme) printdebug("refire0: %s", refire);
         if (refire >= 16) refire = -666; // totally fucked
    else if (refire >= 12) refire = 3;
    else if (refire >= 6) refire = 2;
    else {
      int rnd = P_Random();
           if (rnd >= 200+(refire == 1 ? 10 : refire > 3 ? -10 : 0)) refire = -666; // sometimes it is totally fucked
      else if (rnd >= 164) refire = 1; // slightly fucked
      else refire = 0; // not fucked
    }
    if (debugme) printdebug("refire1: %s", refire);
  }

  if (refire < 0) return damage; // totally fucked
  if (refire > 0 && P_Random() >= 255/refire) return damage; // oops
  if (debugme) printdebug("refire2: %s", refire);

  // force secondary for same-tic-shots (with threshold)
  if (!secondary && ticdiff >= 0 && ticdiff <= 1) {
    secondary = true;
    if (debugme) printdebug("K8HS: *** *** *** forced secondary for %s '%C'", (fromMissile ? "missile" : "hitscan"), inflictor);
  }

  bool showHeadshots = false;
  if (debugme) {
    showHeadshots = GetCvarB('k8HSShowHeadshots');
    float hithgt = hitpos.z; //-Pos.z;
    float fromtop = Height-hithgt;
    printdebug("  hithgt=%s; fromtop=%s (myz=%s; inflictorz=%s; myhgt=%s)", hithgt, fromtop, Origin.z, hitpos.z, Height);
  }

  bool headshot = K8HS_CheckHeadshot(inflictor, hitpos, damage, adamageType, secondary);

  // precision shot is headshot near thing vertical center
  int precisionShot = 0; // 0: nope; -2: very far; -1: too far; 1: almost; 2: nailed it
  if (headshot && Radius > 0 && refire < 2) {
    //printdebug("HITXY=(%s,%s)", hitpos.x, hitpos.y);
    float hc = fmin(fabs(hitpos.x), fabs(hitpos.y));
    float r3 = Radius/3;
         if (hc <= r3*0.7) precisionShot = 2;
    else if (hc <= r3) precisionShot = 1;
    else if (hc > r3*2.4) precisionShot = -2;
    else if (hc > r3*2) precisionShot = -1;
    //if (fromMissile && precisionShot > 0) --precisionShot; // yeah, nerf it -- nope, no need to
    //printdebug("HC=%s; precisionShot=%s; radius=%s; r3*0.7=%s; r3=%s; r3*2=%s; r3*2.4=%s", hc, precisionShot, Radius, r3*0.7, r3, r3*2, r3*2.4);
  }

  // calc distance
  float mult = GetCvarF('k8HSDistMult');
  if (mult < 0.1) mult = 1.1;
  if (mult > 4) mult = 4;
  if (refire > 1) mult *= refire-1; // divide in half for more fucked refire

  float len = 10000;
  if (headshot) {
    //len = Distance2D(inflictor)*mult;
    // missile is always near, lol; always use player position
    /*
    float xd = self.Origin.x-plr.Origin.x;
    float yd = self.Origin.y-plr.Origin.y;
    len = sqrt(xd*xd+yd*yd);
    */
    len = length2D(self.Origin-plr.Origin);
    // 600: E1M1, from entry to top of the stairs
    if (debugme) printdebug("K8HS: len=%s; multlen=%s", len, len*mult);
    len *= mult;
  }

  // head shot
  if (headshot) {
    if (showHeadshots) {
      float hithgt = hitpos.z; //-Pos.z;
      float fromtop = Height-hithgt;
      printdebug("K8HS: Headshot! %C; Height=%s; fromtop=%s; radius=%s; len=%s", Class, Height, fromtop, Radius, len);
    }
    bool allowCrits = K8HS_IsCriticalsAllowed();

    bool debugCrits = false;
    if (debugme) debugCrits = GetCvarB('k8HSDebug_Crits');

    int dodmg = damage; //*2 baron of hell and other Big Things
    int smallHealth = 50; // baron of hell and other Big Things
    int critChance = int(Random()*100);
    if (debugme) printdebug("initial critChance=%s", critChance);
    // decrease critical chance for refiring
    switch (refire) {
      case 1: critChance -= critChance/8; break; // slightly
      case 2: critChance -= critChance/4; break; // more
      case 3: critChance /= 2; break; // even more
    }
    if (debugme) printdebug("after-refire(%d) critChance=%s", refire, critChance);

    //TODO: int tick = gametic;
    //int tick = k8hsLastHitTick+1;

    if (debugme) printdebug("K8HS: len=%s; critChance=%s; hscount=%s", len, critChance, plr.k8hsCount);
    // multiple shots per one tick?
    if (secondary) {
      // very rarely, secondary shots can do small criticals
      ++plr.k8hsCount;
      if (plr.k8hsCount == 1) {
        // second hitscan sometimes critical too (but never precision)
        //if (allowCrits && Random()*100.0 < 65.0) critChance = 1;
      } else if (plr.k8hsCount == 2) {
        // third hitscan; 1.8 damage sometimes
        critChance = 1;
        if (allowCrits && Random()*100.0 > 75.0) {
          dodmg += int(fround(dodmg*0.8));
          if (debugCrits) printdebug("*Critx1.8 (2); d=%s", dodmg);
        }
      } else {
        // fourth and other hitscans; 1.25 damage sometimes
        critChance = 1;
        if (allowCrits && Random()*100.0 > 80) {
          dodmg += dodmg/4;
          if (debugCrits) printdebug("*Critx1.25 (3); d=%s", dodmg);
        }
      }
      // no precision shots for secondaries
      //if (precisionShot > 0) precisionShot = 0;
    } else {
      plr.k8hsCount = 0;
    }

    int hsCount = plr.k8hsCount;
    if (debugme) printdebug("K8HS: len=%s; critChance=%s; new-hscount=%s", len, critChance, hsCount);

    if (critChance > 13 && !GetCvarB('k8HSCriticals')) critChance = 13;

    int oldcc = critChance;
         if (len > 800) { if (critChance >= 75 && Random()*100 > 10) critChance = 13; }
    else if (len > 400) { if (critChance >= 75 && Random()*100 > 40) critChance = 13; }
    else if (len > 300) { if (critChance >= 75 && Random()*100 > 50) critChance = 13; }
    else if (len > 200) { if (critChance >= 75 && Random()*100 > 70) critChance = 13; }
    else if (len < 136 /*(Radius+plr.Radius)*2*/) { // this is 288 for Mastermind, ok
           if (hsCount <= 1) critChance += 42;
      else if (hsCount <= 2) critChance += 33;
      else if (hsCount >= 8) critChance += 10;
      else critChance += max(0, (8-hsCount))*9;
    }
    if (debugme) printdebug("oldcc=%s; critChance=%s; len=%s (pointblank=%s)", oldcc, critChance, len, (Radius+plr.Radius)*2);

    if (precisionShot) {
      if (debugme) printdebug("PREC=%s; chance-before=%s", precisionShot, critChance);
           if (precisionShot > 1) critChance += 23; // nailed it
      else if (precisionShot > 0) critChance += 13; // almost
      else if (precisionShot < -1) critChance -= 23; // very far
      else if (precisionShot < 0) critChance -= 13; // too far
      if (debugme) printdebug("  chance-after=%s", critChance);
    }

    if (!allowCrits) critChance = 0;

    // note that `critChance` may be negative too (precision shot adjustment)
    // currently it means nothing

    // create message
    bool showMessage = false;
    string messageText = "";
    int messageColor = CR_YELLOW;
    int critCoeff = 0;

    if (critChance >= 95) {
      dodmg *= 10;
      if (debugCrits) printdebug("*Critx10; d=%s", dodmg);
      messageText = "CRITICAL x10!";
      messageColor = CR_YELLOW;
      showMessage = true;
      critCoeff = 10;
    } else if (critChance >= 85) {
      dodmg *= 7;
      if (debugCrits) printdebug("*Critx7; d=%s", dodmg);
      messageText = "CRITICAL x7!";
      messageColor = CR_ORANGE;
      showMessage = true;
      critCoeff = 7;
    } else if (critChance >= 75) {
      dodmg *= 3;
      if (debugCrits) printdebug("*Critx3; d=%s", dodmg);
      messageText = "CRITICAL x3!";
      messageColor = CR_RED;
      showMessage = true;
      critCoeff = 3;
    } else if (critChance >= 55) {
      dodmg *= 2;
      if (debugCrits) printdebug("*Critx2; d=%s", dodmg);
      messageText = "CRITICAL x2!";
      messageColor = CR_RED;
      //showMessage = true;
      critCoeff = 2;
    } else if (critChance > 10) {
      dodmg += dodmg/2; // *1.5
      if (debugCrits) printdebug("*Critx1.5; d=%s", dodmg);
      messageText = "CRITICAL x1.5!";
      messageColor = CR_RED;
      //showMessage = true;
      critCoeff = 1;
    }

    if (debugCrits) printdebug("  critChance=%s; damage=%s; dodmg=%s", critChance, damage, dodmg);

    if (InitialHealth < 100) {
      // humans, imps, ...
      smallHealth = max(InitialHealth/10, 1);
    } else if (InitialHealth < 1000) {
      // demons, cacodemons, ...
      smallHealth = clamp(InitialHealth/10, 12, 28);
    } else {
      smallHealth = 32; // why not?
    }

    if (dodmg) {
      if (showMessage && plr.Player && GetCvarB('k8HSShowCriticals')) {
        // do not replace weaker critical messages
        if (plr.k8hsLastCritMsgHideTime <= XLevel.Time || plr.k8hsLastCritMsgCoeff < critCoeff) {
          plr.k8hsLastCritMsgHideTime = XLevel.Time+1.4;
          plr.k8hsLastCritMsgCoeff = critCoeff;
          plr.Player.ClientHudMessage(
            messageText, 'smallfont', Type:0, Id:123666,
            /*Color:*/messageColor, /*ColorName:*/"",
            x:0.5, y:0.45, HudWidth:0, HudHeight:0,
            HoldTime:1.5, Time1:0.0, Time2:0.0, Alpha:1.0);
        }
      }

      if (fastkills) {
        fastdamage = K8HS_HeadshotFastKillHook(dodmg);
        if (fastdamage > 0) {
          if (debugme) printdebug("%C: OLD dodmg=%s; NEW dodmg=%s", self, dodmg, fastdamage);
          dodmg = fastdamage;
        }
      }

      // if we will left victim with very small health, kill it instead
      bool instakill = false;
      if (Health-dodmg <= smallHealth) dodmg = max(dodmg, Health);
      //int xdmg = dodmg;
      if (Health <= dodmg) {
        // instakill, gore (fe, 'cause +1)
        instakill = true;
        //dodmg = Health+5;
        if (debugCrits) printdebug("  INSTAKILL; dodmg=%s; Health=%s", dodmg, Health);
      }
      // preventing normal damage will prevent monster alerting too, heh

      // ketchup spawn
      if (instakill || headshot) {
        if (!secondary || instakill || dodmg >= Health) {
          SpawnBloodSprayHead(damage:(instakill ? Health : dodmg), spawnBloodPool:(instakill || dodmg >= Health));
        }

        if (instakill) {
          // so they won't gib
          if (fromMissile) {
            // k8vavoom hack for missile headshots
            bool keepDamage = false;
            if (inflictor.bNoExtremeDeath && inflictor.bNoFear && inflictor.bStayMorphed &&
                inflictor.Target && inflictor.Target.bIsPlayer && inflictor.Target.FindInventory(PowerStrength))
            {
              if (debugCrits) printdebug("  INSTAKILL: extreme death override!");
              inflictor.bNoExtremeDeath = false;
              keepDamage = true;
            }
            if (inflictor.bNoExtremeDeath) {
              Health = 1;
              dodmg = 2;
            } else if (inflictor.bExtremeDeath) {
              Health = 1;
              dodmg = -5666;
            } else if (!keepDamage) {
              Health = 1;
              dodmg = 2;
            }
          } else {
            Health = 1;
            dodmg = 2;
          }
        }

        // play headkill sound
        if (dodmg >= Health && CvarExists('k8GoreOpt_HeadshotSound') && GetCvarB('k8GoreOpt_HeadshotSound')) {
          //printdebug("HEADBANG!");
          PlaySound('k8gore/headbang', CHAN_AUTO/*CHAN_VOICE*/, Volume:default, ATTN_NORMAL, Loop:false);
        }
      }

      return dodmg;
    }
  }

  return damage;
}
