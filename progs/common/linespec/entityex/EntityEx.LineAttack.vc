//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
const int FHF_NORANDOMPUFFZ = 1;
const int FHF_NOIMPACTDECAL = 2;


//**************************************************************************
//
//  aiming
//
//**************************************************************************
struct trsplat_t {
  TVec org;
  TVec hit;
  line_t *line;
  sector_t *sec;
  int side;
  bool didhit; // can be true even if `line` is empty (it means floor/ceiling hit)
  Entity mobj; // for other tracers
};


//==========================================================================
//
//  CalculateLineAttackZOfs
//
//  calculate z offset for line attack (will be added to origin)
//
//==========================================================================
float CalculateLineAttackZOfs () {
  // to make the shot go through the crosshair, we should return `ViewHeight`
  float res = Height*0.5-(bFloorClip ? FloorClip : 0.0);
  if (bIsPlayer) {
    if (!GetCvarB('gm_fix_attack_offset')) return res+PlayerEx(Player).GetAttackZOfs;
    return PlayerEx(Player).ViewHeight;
  } else {
    return res+8.0;
  }
}


//==========================================================================
//
//  CalculateMissileAttackZOfs
//
//  calculate z offset for missile attack (will be added to origin)
//
//==========================================================================
float CalculateMissileAttackZOfs (class!EntityEx type) {
  // missiles are spawned 4 units lower than hitscan attacks
  // add an extra unit to simulate Doom's original behaviour
  if (bIsPlayer) {
    auto pex = PlayerEx(Player);
    if (!pex) return Height*0.5-(bFloorClip ? FloorClip : 0.0)+8.0-3.0; // just in case
    if (GetCvarB('gm_fix_projectile_attack_offset')) {
      //return Height*0.5-(bFloorClip ? FloorClip : 0.0)+pex.GetAttackZOfs-3.0;
      auto pwn = PlayerPawn(self);
      if (pwn && type && type.default.Height > 0) {
        //float plrVH = pwn.GetPawnCameraHeight;
        /*
        float plrVH = pex.ViewHeight;
        return plrVH-(bFloorClip ? FloorClip : 0.0)-(type ? type.default.Height*0.5 : 0.0);
        */
        float vz = pwn.CalcSaneViewZ-Origin.z;
        if (type) vz -= type.default.Height*0.5;
        return vz;
      } else {
        return Height*0.5-(bFloorClip ? FloorClip : 0.0)+pex.GetAttackZOfs-3.0;
      }
    } else {
      // 4 is for autoaim
      // should we use the height at all?
      return Height*0.5-(bFloorClip ? FloorClip : 0.0)+(type ? -type.default.Height*0.5 : pex.GetAttackZOfs-3.0);
    }
  } else {
    return Height*0.5-(bFloorClip ? FloorClip : 0.0)+8.0-3.0;
  }
}


//==========================================================================
//
//  PickActor
//
//==========================================================================
override Entity PickActor (optional TVec org, TVec dir, float distance, optional int actorMask, optional int wallMask) {
  if (distance <= 0.0) return none; // just in case

  if (!specified_actorMask) actorMask = MF_SHOOTABLE;
  if (!specified_wallMask) wallMask = ML_BLOCKEVERYTHING|ML_BLOCKHITSCAN;

  if (actorMask == 0) return none; // cannot realisticaly hit anything at all

  if (!specified_org) {
    org = Origin;
    org.z += CalculateLineAttackZOfs();
  }

  TVec dst = org+distance*dir;

  EntityEx th;

  intercept_t in;
  foreach PathTraverse(out in, org, dst, PT_ADDLINES|PT_ADDTHINGS|(Level.CompatTrace ? PT_COMPAT : 0), SPF_NOBLOCKING|SPF_NOBLOCKSIGHT|SPF_NOBLOCKSHOOT, wallMask) {
    if (in.bIsAPlane) return none; // plane hit, no actor found

    //printdebug("LineAttack: isline=%d; frac=%f", (in.bIsALine ? 1 : 0), in.frac);
    //if (!in.bIsALine) printdebug("LineAttack: frac=%f; thing=%C; dist=%f", in.frac, in.Thing, length2D(in.Thing.Origin-org));
    if (in.bIsALine) {
      if (in.bIsABlockingLine) return none; // line hit, no actor found
      continue;
    }

    // hit a thing
    th = EntityEx(in.Thing);

    if (th == self) continue; // can't pick self

    // ignore ghosts
    if (th.bGhost) continue;

    int thflags = th.CalcEntityFlags();
    if (!(thflags&actorMask)) continue; // mask check failed

    // don't go any farther
    return th;
  }

  return none;
}


//==========================================================================
//
//  AimLineAttack
//
//  Sets linetaget and aim_slope when a target is aimed at.
//
//==========================================================================
final EntityEx AimLineAttack (out TVec OutDir, TAVec aangles, float distance,
                              optional bool noVertAutoAim, optional class!EntityEx rocketType)
{
  TVec aim_dir;
  AngleVector(aangles, out aim_dir);

  // just in case
  if (distance <= 0.0) {
    OutDir = aim_dir;
    return none;
  }

  TVec adirdist = aim_dir.xy*distance;

  float aim_z = Origin.z+(rocketType ? CalculateMissileAttackZOfs(rocketType) : CalculateLineAttackZOfs());

  TVec shootOrigin = vector(Origin.x, Origin.y, aim_z);
  TVec dest = shootOrigin+adirdist;
  //float x2 = Origin.x+distance*aim_dir.x;
  //float y2 = Origin.y+distance*aim_dir.y;

  //float aim_range2d = Length2D(vector(distance*aim_dir.x, distance*aim_dir.y));
  float aim_range2d = adirdist.length2D;

  // can't shoot outside view angles
  float topangle = fmin(+89.0, AngleMod180(-aangles.pitch+30.0)); //if (topangle > 89.0) topangle = 89.0;
  float botangle = fmax(-89.0, AngleMod180(-aangles.pitch-30.0)); //if (botangle < -89.0) botangle = -89.0;

  // slopes to top and bottom of target
  float aim_topslope = tan(topangle);
  float aim_bottomslope = tan(botangle);

  // height if not aiming up or down
  float aim_range = distance;
  EntityEx linetarget = none; // who got hit (or nullptr)

  line_t *li;
  EntityEx th;
  float thingtopslope;
  float thingbottomslope;
  float dist;
  float slope;
  opening_t *open;
  TVec hitPoint;
  intercept_t in;

  // ???: use slope for monsters?
  float aim_slope;

  int lflags = ML_BLOCKEVERYTHING|(rocketType ? ML_BLOCKPROJECTILE : ML_BLOCKHITSCAN);

  foreach PathTraverse(out in, shootOrigin, dest, PT_ADDLINES|PT_ADDTHINGS|PT_NOOPENS|PT_AIMTHINGS, SPF_NOBLOCKING|SPF_NOBLOCKSHOOT, lflags) {
    if (in.bIsAPlane) break; // plane hit, no actor found

    if (in.bIsALine) {
      li = in.line;
      if (in.bIsABlockingLine || (li->flags&lflags)) break; // line hit, no actor found

      // crosses a two sided line
      // a two sided line will restrict the possible target ranges
      dist = aim_range*in.frac;
      if (dist < 0.01) continue; // shooter is on the line

      hitPoint = shootOrigin+dist*aim_dir;

      open = XLevel.FindLineOpening(li, hitPoint, 0, SPF_NOBLOCKING|SPF_NOBLOCKSHOOT);

      if (!open || open->range <= 0.0) break; // stop

      dist = aim_range2d*in.frac;

      slope = (open->bottom-aim_z)/dist;
      if (slope > aim_bottomslope) aim_bottomslope = slope;

      slope = (open->top-aim_z)/dist;
      if (slope < aim_topslope) aim_topslope = slope;

      if (aim_topslope <= aim_bottomslope) break; // stop

      continue; // shot continues
    }

    // shoot a thing
    th = EntityEx(in.Thing);
    if (th == self) continue; // can't shoot self

    if (!th.bShootable) continue; // corpse or something

    if (th.bCantAutoAim) continue; // can't auto-aim at pods

    if (IsTeammate(th)) continue; // don't aim at fellow co-op players

    // check angles to see if the thing can be aimed at
    dist = aim_range2d*in.frac;
    if (dist < 0.01) continue; // too close, must be above or below

    thingtopslope = (th.Origin.z+th.Height-aim_z)/dist;
    if (thingtopslope < aim_bottomslope) continue; // shot over the thing

    thingbottomslope = (th.Origin.z-aim_z)/dist;
    if (thingbottomslope > aim_topslope) continue; // shot under the thing

    thingtopslope = fmin(thingtopslope, aim_topslope);
    thingbottomslope = fmax(thingbottomslope, aim_bottomslope);
    //if (thingtopslope > aim_topslope) thingtopslope = aim_topslope;
    //if (thingbottomslope < aim_bottomslope) thingbottomslope = aim_bottomslope;

    aim_slope = (thingtopslope+thingbottomslope)*0.5;
    linetarget = th;

    break; // don't go any farther
  }

  if (linetarget) {
    if (!noVertAutoAim) aangles.pitch = -atan(aim_slope);
    // fix yaw
    TVec dir = linetarget.Origin-shootOrigin;
    float yaw = atan2(dir.y, dir.x);
    if (yaw.isfinite) aangles.yaw = yaw;
  }

  AngleVector(aangles, out OutDir);
  return linetarget;
}


//===========================================================================
//
//  Aim
//
//  Sets a slope so a near miss is at aproximately the height of the
//  intended target
//
//  note that it is impossible to disable autoaim for monsters
//
//===========================================================================
final EntityEx Aim (out TVec OutDir, float distance, optional float yaw,
                    optional bool noAutoaim, optional bool noVertAutoAim,
                    optional class!EntityEx rocketType)
{
  TAVec ang;
  TVec dir;
  EntityEx LineTarget;
  bool aaim;

  if (bIsPlayer) {
    aaim = PlayerEx(Player).bAutoAim;
    if (aaim && specified_noAutoaim) {
      //printdebug("AIM<%C>: noaa=%s", self, (noAutoaim ? "tan" : "ona"));
      if (noAutoaim) aaim = false;
    }
  } else {
    aaim = true; // monsters should always autoaim
  }

  // see which target is to be aimed at
  ang = Angles;
  if (specified_yaw) ang.yaw = yaw;
  if (!aaim) {
    //ang.pitch = AngleMod360(ang.pitch-4);
    AngleVector(ang, out dir);
    OutDir = dir;
  }

  // try to aim at a target
  // this is done even when autoaim is off so that we get a LineTarget that is needed for seeker missiles
  LineTarget = AimLineAttack(out dir, ang, distance, rocketType:rocketType!optional);
  if (!LineTarget) {
    auto origYaw = ang.yaw;
    ang.yaw = AngleMod360(ang.yaw+45.0/8.0);
    LineTarget = AimLineAttack(out dir, ang, distance, noVertAutoAim!optional, rocketType:rocketType!optional);
    if (!LineTarget) {
      ang.yaw = AngleMod360(ang.yaw-45.0/4.0);
      LineTarget = AimLineAttack(out dir, ang, distance, noVertAutoAim!optional, rocketType:rocketType!optional);
      if (!LineTarget) {
        //ang.yaw = AngleMod360(ang.yaw+45.0/8.0);
        ang.yaw = origYaw;
        AngleVector(ang, out dir);
      }
    }
  }

  //if (rocketType) printdebug("%C: AIMed at %C; yaw=%s; dir=%s", self, LineTarget, ang.yaw, dir);

  if (aaim) OutDir = dir;

  return LineTarget;
}


//==========================================================================
//
//  AimEx
//
//==========================================================================
final EntityEx AimEx (out TVec OutDir, float Range, float AngleInc, int NumSteps,
                      optional float FinalRange, optional class!EntityEx rocketType) {
  TAVec aimangles;
  //TVec vforward;
  EntityEx LineTarget;

  foreach (auto i; 0..NumSteps) {
    // try to the left
    aimangles = Angles;
    aimangles.yaw = AngleMod360(aimangles.yaw+float(i)*AngleInc);
    LineTarget = AimLineAttack(out OutDir, aimangles, Range, rocketType:rocketType!optional);
    if (LineTarget) return LineTarget;

    // try to the right
    aimangles = Angles;
    aimangles.yaw = AngleMod360(aimangles.yaw-float(i)*AngleInc);
    LineTarget = AimLineAttack(out OutDir, aimangles, Range, rocketType:rocketType!optional);
    if (LineTarget) return LineTarget;
  }

  if (FinalRange) {
    // didn't find any creatures, so try to strike any walls
    aimangles = Angles;
    LineTarget = AimLineAttack(out OutDir, aimangles, FinalRange, rocketType:rocketType!optional);
  } else {
    //AngleVector(Angles, out vforward);
    //OutDir = vforward;
    AngleVector(Angles, out OutDir);
  }

  return LineTarget;
}


//**************************************************************************
//
//  SHOOTING
//
//**************************************************************************


//==========================================================================
//
//  eventLineAttackACS
//
//==========================================================================
override void eventLineAttackACS (TVec dir, float distance, int LADamage, name aPuffType, name adamagetype, int flags, int pufftid) {
  /*k8: old code
  class!EntityEx PuffType = none;
  if (adamagetype) PuffType = class!EntityEx(FindClassNoCase(adamagetype));
  */
  class!EntityEx PuffType = (aPuffType ? class!EntityEx(FindClassNoCase(aPuffType)) : none);
  //printdebug("%C: eventLineAttackACS: dir=%s; dist=%s; LADamage=%s; aPuffType=%s(%C); adamagetype=%s; flags=%s; pufftid=%s", self, dir, distance, LADamage, aPuffType, PuffType, adamagetype, flags, pufftid);
  if (flags&FHF_NOIMPACTDECAL) {
    LineAttack(dir, distance, LADamage, PuffType, NoAttackGhosts:true, DmgType:adamagetype, decalType:'', pufftid:pufftid, !!(flags&FHF_NORANDOMPUFFZ));
  } else {
    LineAttack(dir, distance, LADamage, PuffType, NoAttackGhosts:true, DmgType:adamagetype, pufftid:pufftid, !!(flags&FHF_NORANDOMPUFFZ));
  }
}


//==========================================================================
//
//  LineAttack
//
//  to prevent decal spawning, pass 'none' as `decalType`
//  (or something else that is non-existing)
//  decalType of '' means "use default puff decal"
//
//  returns `true` if DIDN'T hit anything (not a thing, not a line)
//  this is used to play melee weapon "miss" sound
//
//==========================================================================
final bool LineAttack (TVec dir, float distance, int LADamage,
                       class!EntityEx PuffType, optional bool NoAttackGhosts,
                       optional TVec *outHitPoint, optional name DmgType,
                       optional bool secondary, optional name decalType,
                       optional int pufftid, optional bool disableRandomZ,
                       optional out EntityEx hitEntity, optional out EntityEx puffEntity)
{
  puffEntity = none;
  hitEntity = none;
  if (!Level.Game.IsAuthority) return false;

  TVec shootOrigin = Origin;
  shootOrigin.z += CalculateLineAttackZOfs();

  TVec dst = shootOrigin+distance*dir;

  TVec hitPoint, realHitPoint;
  line_t *li;
  EntityEx th;
  intercept_t in;

#if 0
  if (bIsPlayer) {
    printdebug("%C(%s): === LineAttack (org=%s; dest=%s) ===", self, UniqueId, shootOrigin, dst);
    foreach PathTraverse(out in, shootOrigin, dst, PT_ADDLINES|PT_ADDTHINGS/*|PT_NOOPENS*/|(Level.CompatTrace ? PT_COMPAT : 0), SPF_NOBLOCKING|SPF_NOBLOCKSHOOT, ML_BLOCKEVERYTHING|ML_BLOCKHITSCAN) {
      if (in.bIsAPlane) {
        printdebug("  plane: frac=%s; hp=%s", in.frac, in.hitpoint);
      } else if (in.bIsALine) {
        printdebug("  line: frac=%s; hp=%s; block=%B; line #%d", in.frac, in.hitpoint, in.bIsABlockingLine, in.line-&XLevel.Lines[0]);
      } else {
        th = EntityEx(in.Thing);
        printdebug("  thing: frac=%s; hp=%s; %C(%s)", in.frac, in.hitpoint, th, th.UniqueId);
      }
    }
    printdebug("------------------------");
  }
#endif

  //if (bIsPlayer) printdebug("%C(%s): === LineAttack (org=%s; dest=%s) ===", self, UniqueId, shootOrigin, dst);
  //printdebug("=== LineAttack ===");
  foreach PathTraverse(out in, shootOrigin, dst, PT_ADDLINES|PT_ADDTHINGS|(Level.CompatTrace ? PT_COMPAT : 0), SPF_NOBLOCKING|SPF_NOBLOCKSHOOT, ML_BLOCKEVERYTHING|ML_BLOCKHITSCAN) {
    //printdebug("LineAttack: isline=%B; frac=%s; lstart=%s", in.bIsALine, in.frac, lineStart);

    // plane hit?
    if (in.bIsAPlane) {
      // plane hit, no thing found
      if (!in.bIsASky && PuffType) puffEntity = SpawnPuff(in.hitpoint, distance, PuffType, none);
      return false;
    }

    // line hit?
    if (in.bIsALine) {
      li = in.line;
      hitPoint = in.hitpoint;

      // execute line special when we know that we actally hit this line
      if (li->special && !bNoTrigger) LineSpecialLevelInfo(Level).ActivateLine(li, self, 0, SPAC_Impact);

      // if this line is not a blocking one, continue checking
      if (!in.bIsABlockingLine) continue;

      // hit blocking line
      if (outHitPoint) *outHitPoint = hitPoint;

      // position a bit closer
      realHitPoint = hitPoint;
      hitPoint -= 4.0*dir;

      // spawn bullet puffs
      if (!in.bIsASky && PuffType) {
        puffEntity = SpawnPuff(hitPoint, distance, PuffType, none, in.sector, li,
                               realHitPoint, decalType!optional, pufftid!optional, disableRandomZ!optional);
      }

      // don't go any farther
      return false;
    }

    // shoot a thing
    th = EntityEx(in.Thing);

    if (th == self) continue; // can't shoot self

    if (!th.bShootable) continue; // corpse or something

    // check for physical attacks on a ghost
    if (th.bGhost && NoAttackGhosts) continue;

    // hit a thing
    hitPoint = in.hitpoint;
    // position a bit closer
    hitPoint -= 2.0*dir;
    if (outHitPoint) *outHitPoint = hitPoint;

    bool UseAxeBlood = bIsPlayer && PlayerEx(Player).ReadyWeapon && PlayerEx(Player).ReadyWeapon.bAxeBlood;
    bool UseBloodSplatter = UseAxeBlood || bBloodSplatter ||
                            (bIsPlayer && PlayerEx(Player).ReadyWeapon && PlayerEx(Player).ReadyWeapon.bBloodSplatter);

    // spawn bullet puffs or blood spots, depending on target type
    if ((PuffType && PuffType.default.bPuffOnActors) || th.bNoBlood || th.bInvulnerable || th.bDormant) {
      puffEntity = SpawnPuff(hitPoint, distance, PuffType, th, pufftid:pufftid!optional, disableRandomZ:disableRandomZ!optional);
    }

    if (!PuffType || !PuffType.default.bBloodlessImpact) {
      if (!UseBloodSplatter && !th.bNoBlood && !th.bInvulnerable && !th.bDormant) {
        th.SpawnBlood(hitPoint, LADamage, shootOrigin);
      }
      if (LADamage && UseBloodSplatter) {
        if (!th.bNoBlood && !th.bInvulnerable && !th.bDormant) {
          if (UseAxeBlood) th.SpawnBloodSplatter2(hitPoint, shootOrigin);
          if (P_Random() < 192) th.SpawnBloodSplatter(hitPoint, LADamage, shootOrigin);
        }
      }
    }

    if (LADamage) {
      bool NoArmor = false;
      // allow bPierceArmor on weapons as well
      if (bIsPlayer && PlayerEx(Player).ReadyWeapon && PlayerEx(Player).ReadyWeapon.bPierceArmor) NoArmor = true;
      if (bIsPlayer) {
        TVec thp = hitPoint-th.Origin;
        th.DamageEx(self, self, LADamage, DmgType, NoArmor, thp, secondary);
      } else {
        th.Damage(self, self, LADamage, DmgType, NoArmor);
      }
    }

    // don't go any farther
    hitEntity = th;
    return false;
  }

  if (PuffType) {
    if (PuffType.default.ActiveSound) PlaySound(PuffType.default.ActiveSound, /*CHAN_WEAPON*/CHAN_AUTO); // play miss sound
    if (PuffType.default.bAlwaysPuff) puffEntity = SpawnPuff(dst, distance, PuffType, none, pufftid:pufftid!optional, disableRandomZ:disableRandomZ!optional);
  }

  return true;
}


//**************************************************************************
//
//  RAILGUN
//
//**************************************************************************


//==========================================================================
//
//  RailAttack
//
//==========================================================================
final void RailAttack (TVec dir, float Offset, int RailDamage,
                       optional int Col1, optional int Col2, optional float MaxDiff,
                       optional class!EntityEx PuffType, optional bool Silent,
                       optional bool DontPierce, optional float distance,
                       optional float spawnofs_z, optional int pierceLimit)
{

  if (!Level.Game.IsAuthority) return;
  if (!Silent) PlaySound('weapons/railgf', CHAN_WEAPON);

  if (!specified_PuffType) PuffType = BulletPuff;

  if (!specified_pierceLimit) pierceLimit = int.max;

  name DmgType = 'Railgun';
  if (PuffType && PuffType.default.DamageType) DmgType = PuffType.default.DamageType;

  TVec shootOrigin = Origin;
  shootOrigin.z += CalculateLineAttackZOfs();
  shootOrigin.z += spawnofs_z;
  float sina, cosa;
  sincos(Angles.yaw-90.0, out sina, out cosa);
  shootOrigin.x += Offset*cosa;
  shootOrigin.y += Offset*sina;

  //float distance = 8192.0;
  if (!specified_distance || !distance) distance = 8192.0;
  TVec dst = shootOrigin+distance*dir;

  TVec hitPoint, realHitPoint;
  line_t *li;
  EntityEx th;
  intercept_t in;
  TVec lineEnd = dst;

  foreach PathTraverse(out in, shootOrigin, dst, PT_ADDLINES|PT_ADDTHINGS, SPF_NOBLOCKING|SPF_NOBLOCKSHOOT, ML_BLOCKEVERYTHING) {
    // plane hit?
    if (in.bIsAPlane) {
      if (!in.bIsASky && PuffType) SpawnPuff(in.hitpoint, distance, PuffType, none);
      lineEnd = in.hitpoint;
      break;
    }

    // line hit?
    if (in.bIsALine) {
      li = in.line;
      hitPoint = in.hitpoint;

      // execute line special when we know that we actally hit this line
      if (li->special && !bNoTrigger) LineSpecialLevelInfo(Level).ActivateLine(li, self, 0, SPAC_Impact);

      // if this line is not a blocking one, continue checking
      if (!in.bIsABlockingLine) continue;

      // hit blocking line

      // position a bit closer
      realHitPoint = hitPoint;
      hitPoint -= 4.0*dir;

      // spawn bullet puffs
      if (!in.bIsASky && PuffType) {
        SpawnPuff(hitPoint, distance, PuffType, none, in.sector, li, realHitPoint);
      }

      // don't go any farther
      lineEnd = hitPoint;
      break;
    }

    // shoot a thing
    th = EntityEx(in.Thing);

    if (th == self) continue; // can't shoot self

    if (!th.bShootable) continue; // corpse or something

    hitPoint = in.hitpoint;
    // position a bit closer
    hitPoint -= 4.0*dir; // was 10

    // invulnerable things completely block the shot
    if (th.bInvulnerable) {
      lineEnd = hitPoint;
      break;
    }

    // spawn bullet puffs or blood spots, depending on target type
    bool doBlood = false;
    if (th.bNoBlood || th.bInvulnerable || th.bDormant) {
      if (PuffType) SpawnPuff(hitPoint, distance, PuffType, th);
    } else {
      doBlood =(!PuffType || !PuffType.default.bBloodlessImpact);
    }

    int dmg = th.Damage(self, self, RailDamage, DmgType);
    if (dmg && doBlood) th.SpawnBlood(hitPoint, RailDamage, shootOrigin);

    if (--pierceLimit < 1) DontPierce = true;

    if (th && DontPierce) {
      // we did hit a thing and we can't pierce so we can stop now...
      lineEnd = hitPoint;
      break;
    }
  }

  // yep, "not specified" is processed in client trail code
  if (Col1 || Col2 || !specified_Col1 || !specified_Col2) {
    PlayerEx P;
    foreach AllActivePlayers(P) {
      P.ClientRailTrail(shootOrigin, lineEnd, Col1!optional, Col2!optional, MaxDiff);
    }
  }
}
