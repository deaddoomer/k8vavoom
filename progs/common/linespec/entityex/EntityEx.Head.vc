//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class EntityEx : Entity
  abstract;

const int
  GAME_Doom    = 0x01,
  GAME_Heretic = 0x02,
  GAME_Hexen   = 0x04,
  GAME_Strife  = 0x08,
  GAME_Raven   = GAME_Heretic|GAME_Hexen,
  GAME_Chex    = 0x10,
  GAME_Any     = 0xff;

const float ONFLOORZ    = -99999.0;
const float ONCEILINGZ    = 99999.0;
const float FLOATRANDZ    = 99998.0;

const float FRICTION_NORMAL = 3.28125;
const float FRICTION_LOW  = 0.95703125;
const float FRICTION_FLY  = 2.87109375;
const float FRICTION_WATER  = 3.0;

const float MAXMOVE     = 1050.0;
const float MAXMOVESTEP   = MAXMOVE / (35.0 * 2.0);
const float STOPSPEED   = 2.1875;

const float BOUNCE_VAL    = 1.5;

// follow a player exlusively for 3 seconds
const int BASETHRESHOLD   = 100;

const float MELEERANGE    = 64.0;
// use meleerange+1 so the puff doesn't skip the flash
const float SAWRANGE      = MELEERANGE+0.00001;
const float MISSILERANGE  = (32.0 * 64.0);

const float MONS_LOOK_RANGE = (20.0 * 64.0);
const int MONS_LOOK_LIMIT = 64;

// Factor to scale scrolling effect into mobj-carrying properties = 3/32.
// (This is so scrolling floors and objects on them can move at same speed.)
const float CARRYFACTOR   = 0.09375;

const float CROUCHSPEED = 1.0/12.0;

enum
{
  BOUNCE_None,
  BOUNCE_Doom,
  BOUNCE_Heretic,
  BOUNCE_Hexen
};

enum
{
  APROP_Health        = 0,
  APROP_Speed         = 1,
  APROP_Damage        = 2,
  APROP_Alpha         = 3,
  APROP_RenderStyle   = 4,
  APROP_SeeSound      = 5,  // Sounds can only be set, not gotten
  APROP_AttackSound   = 6,
  APROP_PainSound     = 7,
  APROP_DeathSound    = 8,
  APROP_ActiveSound   = 9,
  APROP_Ambush        = 10,
  APROP_Invulnerable  = 11,
  APROP_JumpZ         = 12,
  APROP_ChaseGoal     = 13,
  APROP_Frightened    = 14,
  APROP_Gravity       = 15,
  APROP_Friendly      = 16,
  APROP_SpawnHealth   = 17,
  // only getters
  APROP_Dropped       = 18,
  // unimplemented
  APROP_Notarget      = 19,
  APROP_Species       = 20,
  APROP_NameTag       = 21, // getter only, implemented in C++ code
  APROP_Score         = 22,
  APROP_Notrigger     = 23,
  APROP_DamageFactor  = 24,
  APROP_MasterTID     = 25,
  APROP_TargetTID     = 26,
  APROP_TracerTID     = 27,
  APROP_WaterLevel    = 28,
  APROP_ScaleX        = 29,
  APROP_ScaleY        = 30,
  APROP_Dormant       = 31,
  APROP_Mass          = 32,
  APROP_Accuracy      = 33,
  APROP_Stamina       = 34,
  APROP_Height        = 35,
  APROP_Radius        = 36,
  APROP_ReactionTime  = 37,
  APROP_MeleeRange    = 38,
  APROP_ViewHeight    = 39,
  APROP_AttackZOffset = 40,
  APROP_StencilColor  = 41,
};

enum
{
  PROP_FROZEN         = 0,
  PROP_NOTARGET       = 1,
  PROP_INSTANTWEAPONSWITCH  = 2,
  PROP_FLY          = 3,
  PROP_TOTALLYFROZEN      = 4,
  PROP_INVULNERABILITY    = 5,
  PROP_STRENGTH       = 6,
  PROP_INVISIBILITY     = 7,
  PROP_RADIATIONSUIT      = 8,
  PROP_ALLMAP         = 9,
  PROP_INFRARED       = 10,
  PROP_WEAPONLEVEL2     = 11,
  PROP_FLIGHT         = 12,
  PROP_SPEED          = 15
};

//  Constants for ClassifyActor
enum
{
  ACTOR_NONE        = 0x00000000,
  ACTOR_WORLD       = 0x00000001,
  ACTOR_PLAYER      = 0x00000002,
  ACTOR_BOT       = 0x00000004,
  ACTOR_VOODOODOLL    = 0x00000008,
  ACTOR_MONSTER     = 0x00000010,
  ACTOR_ALIVE       = 0x00000020,
  ACTOR_DEAD        = 0x00000040,
  ACTOR_MISSILE     = 0x00000080,
  ACTOR_GENERIC     = 0x00000100
};

//  Constants for A_SeekerMissile
enum
{
  SMF_LOOK     = 1,
  SMF_PRECISE  = 2,
  SMF_CURSPEED = 4,
};

//  States
state     IdleState;
state     SeeState;
state     MeleeState;
state     MissileState;

//  Sounds
name      SightSound;
name      ActiveSound;
name      AttackSound;
name      PainSound;
name      CrushPainSound;
name      DeathSound;
name      HowlSound;
name      BounceSound;

//  Flags
bool bSpecial;      // Call P_SpecialThing when touched.
bool bShootable;    // Can be hit.
bool bAmbush;
bool bJustHit;      // Try to attack right back.
bool bJustAttacked;   // Take at least one step before attacking.
bool bSpawnCeiling;   // Hang from ceiling instead of floor.
// movement flags
bool bPickUp;     //  For players to pick up items.
bool bDropped;      //  Dropped by a demon, not level spawned.
bool bNoBlood;      //  Don't bleed when shot (use puff).
bool bNoBloodDecals;      //  Don't spawn blood decals (k8:FIXME: dunno)
bool bInFloat;      //  Floating to a height for a move, don't.
            //  Auto float to target's height.
bool bSkullFly;     //  Skull in flight.
bool bCountKill;    //  Count towards intermission kill total.
bool bCountItem;    //  Count towards intermission item total.
bool bWindThrust;   //  Gets pushed around by the wind specials.
bool bActivateImpact; //  An MF_MISSILE mobj can activate.
            //  SPAC_IMPACT
bool bActivatePushWall; //  Mobj can push walls.
bool bActivateMCross; //  Can activate monster cross lines.
bool bActivatePCross; //  Can activate projectile cross lines.
bool bDormant;      //  Thing is dormant.
bool bWaterJump;
bool bNoTeleport;   //  Does not teleport.
bool bTelestomp;    //  Mobj can stomp another.
bool bCannotPush;   //  Cannot push other pushable mobjs.
bool bSmallSplash;    //  Always use small splash.
bool bNoSplash;     //  Things that don't splash.
bool bStaticLight;    //  Static light source.
bool bStaticLightSpwned;
bool bDynamicLight;   //  Dynamic light source.
bool bLeaveTrail;   //  Leave particles trail type 1 (Rocket).
bool bLeaveTrail2;    //  Leave particles trail type 2 (Grenade).
bool bTriggerHappy;
bool bFloatBob;     //  Use float bobbing z movement.
bool bOnmobjCopyVel;
bool bNoBounceSound;  //  Don't make sound when bouncing.
bool bNoWallBounceSnd;  //  Don't make sound when bouncing off a wall.
bool bNoSplashAlert;  //  Splashes don't alert this monster.
bool bBounceSky;    //  Bounce when hitting the sky.
bool bExplodeOnSky;   //  Explodes when hits the sky.
bool bBounceWalls;    //  Bounces off of walls.
bool bBounceFloors;   //  Bounces off of floors.
bool bBounceCeilings; //  Bounces off of ceilings.
bool bBounceOnActors; //  Bounces against other "non sentient" actors.
bool bBounceOnAllActors; // Bounces off of ALL actors.
bool bBounceAutoOff;  //  When bouncing off a floor, if the new Z velocity is below 3.0, disable further bouncing.
bool bBounceLikeHeretic; // Goes into Death state when bouncing on floors or ceilings.
bool bSlide;      //  Slides against walls.
bool bReflective;   //  Reflects missiles.
bool bSeekerMissile;  //  Is a seeker (for reflection).
bool bNoExplodeFloor; //  Don't explode when hitting the floor.
bool bIceCorpse;    //  A frozen corpse (for blasting).
bool bExplodeOnWater; //  Explode on water surfaces.
bool bCanBounceWater; //  Bounce on water surfaces.
bool bFallingFriction;  //  Apply friction while falling.
bool bNoRadiusDamage; //  Does not take radius damage.
bool bCantAutoAim;    //  Can't auto aim at this actor.
bool bPuffOnActors;   //  Spawn this puff when hitting actors.
bool bInvulnerable;   //  Mobj is invulnerable.
bool bFriendly;     //  Will fight on player's side.
bool bRandomise;    //  Randomise initial state time.
bool bFullVolDeath;   //  Play missile death sound at full volume.
bool bExploCount;   //  Use explosion counters.
bool bSpectral;     //  Can be killed only with Sigil.
bool bDamageInvulnerable; //  These inflictors aren't foiled by invulnerability.
bool bSkullFlyInvulnerable; //  Invulnerable during skull fly attack.
bool bNoDamageThrust; //  Does not thrust target when damaging.
bool bConditionalFireDamage;
bool bNoExtremeDeath; //  Does never gib enemies.
bool bExtremeDeath;   //  Always gibs enemies.
bool bLightning;    //  Electrocutes victims.
bool bHowlVictims;    //  Make victims play howl sound when damaged.
bool bNoGrudge;
bool bNeverTarget;    //  Never switch target to this actor.
bool bNoTargetSwitch; //  Never switches target until current one is dead.
bool bNoGravKill;   //  Doesn't set NoGravity to false when killed.
bool bFaster;
bool bFastMelee;
bool bStanding;     //  Don't walk around.
bool bBoss;       //  Mobj is a major boss.
bool bNonShootable;   //  Mobj is totally non-shootable,
            //  but still considered solid.
bool bThruGhost;    //  Missile will pass through ghosts.
bool bRip;        //  Missile rips through solid targets.
bool bPushable;     //  Can be pushed by other moving mobjs.
bool bBloodlessImpact;  //  Don't spawn blood when hitting a thing.
bool bMonster;
bool bNoDeathmatch;
bool bTeleport;     //  Don't cross lines or look at heights.
bool bSpawnFloat;   //  Spawn random float z.
bool bNoMorph;      //  Don't morph into chicken/pig.
bool bNoBlockMonst;   //  Can cross ML_BLOCKMONSTERS lines
bool bLookAllAround;  //  Actor can see all around.
bool bNeutral;      //  Neutral characters (peasants and beggars).
bool bStandMustSeeTarget; //  COUNTITEM 800000
bool bInCombat;     //  Actors in combat won't talk.
bool bFullVolActive;  //  Play active sound at full volume.
bool bDehackedSpecial;  //  Old style special handling.
bool bUnknown2;     //  8000000
bool bPuffParticles;  //  Puff spawns particles.
bool bExplodeParticles; //  Use particle explosion.
bool bStealth;      //  Andy Baker's Stealth monsters.
bool bChaseGoal;    //  Walks to goal instead of target if a valid goal is set.
bool bExplosionDontHurtSelf; //  For A_Explodearms.
bool bNoSightCheck;   //  Go after target without checking sight.
bool bHuntPlayers;    //  With TIDToHate, hate players too.
bool bNoHatePlayers;  //  Ignore player attacks.
bool bStrifeDamage;   //  Missiles do 4x damage instead of 8x.
bool bDontBlast;    //  Not blasted by blast radius.
bool bVisibilityPulse;  //  Pulse visibility in and out.
bool bArgsDefined;    //  Args are already defined.
bool bShadow;     //  Actor is hard for monsters to see.
bool bGhost;      //  Actor is a ghost.
bool bBossDeath;    //  A_FreezeDeathChunks calls A_BossDeath.
bool bNoIceDeath;   //  Don't use generic ice death.
bool bDontTranslate;  //  Don't use translation.
bool bMissileEvenMore;
bool bNoLiftDrop;   //  Don't fall down with the lift.
bool bStayMorphed;    //  Don't unmorph.
bool bCanBlast;     //  Special cases that can be blasted.
bool bShieldReflect;  //  Centaur style shield reflection.
bool bDontShieldReflect;  //  Projectile not reflected by shield reflection.
bool bDeflect;      //  Different projectile reflection style.
bool bDontReflect;    //  Projectile cannot be reflected.
bool bFireResist;   //  Actor takes half damage from fire.
bool bLowSpectralResist;  //  Actor resists full damage from first sigil projectiles.
bool bDontSquash;   //  Death ball can't squash this actor.
bool bNoTeleOther;    //  Monster is not affected by teleport other artifact.
bool bDontHurtClass;  //  Don't hurt own class with explosions.
bool bDontHurtSpecies;  //  Don't hurt own species with explosions.
bool bNoDamage;     //  Actor reacts to pain but does not take any damage.
bool bDontGib;      //  Don't crunch this corpse to gibs.
bool bNoPain;     //  Don't enter pain state.
bool bPainless;     //  Actor always inflicts painless damage.
bool bForcePain;    //  Forces target into painstate (unless it has the NOPAIN flag).
bool bCantSeek;     //  Seeker missiles cannot home in on this actor.
bool bDontSeekInvisible; //  For seeker missiles: Don't home in on invisible/shadow targets.
bool bPierceArmor;    //  Damage from this actor is not protected by armor.
bool bForceRadiusDmg; //  Override NoRadiusDmg.
bool bSpawnSoundSource; //  Play missile's see sound on spawning object.
bool bAlwaysPuff;   //  Always show puff, even when hit nothing.
bool bSynchronised;   //  For map spawned things don't randomise tics.
bool bAlwaysFast;   //  Always uses 'fast' attack logic.
bool bNeverFast;    //  Never uses 'fast' attack logic.
bool bAlwaysRespawn;  //  Always respawns, regardless of skill.
bool bNeverRespawn;   //  Never respawns, regardless of skill.
bool bDontRip;      //  Ripping projectiles explode when hitting this actor.
bool bCanUseWalls;    //  Can activate "use" specials.
transient bool bInChase; //  Used to prevent recursion in A_Chase.
bool bUseSpecial;   //  Execute special when this thing is being used.
bool bNoInfighting;   //  Disable infighting for this actor.
bool bBloodSplatter;  //  Use blood splatter like in Raven games.
bool bDehExplosion;   //  Use explosion style specified using DeHackEd.
bool bNoVerticalMeleeRange; //  Does not check vertical distance for melee range.
bool bSummonedMonster;  //  Flag MinotaurFriend and other summoned monsters (i.e. by powerups, etc.).
bool bSeesDaggers;    //  Actor is able to hear dagger attacks.
bool bPuffGetsOwner;  //  [BB] Sets the owner of the puff to the player who fired it.
bool bNoInteraction;  //  Thing is completely excluded from any gameplay related checks.
bool bFrightened;   //  Monster runs away from player.
bool bNoFear;     //  Not scared of frightening players.
bool bTouchy;     //  killough 11/98: Dies when solids touch it.
bool bArmed;      //  Object is armed (for touchy objects).
bool bJumpDown;     //  Generalization of dog behavior with dropoffs.
bool bMoveWithSector; //  P_ChangeSector() will still process this actor if it has MF_NOBLOCKMAP.
bool bNoTrigger;    //  Actor cannot trigger any line actions.
bool bBlockedBySolidActors; //  Blocked by solid actors, even if not solid itself.
bool bThruActors;   //  Performs no actor<->actor collision checks.
bool bThruSpecies;    //  Actors passes through other of the same species.
bool bMThruSpecies;   //  Missile passes through actors of its shooter's species.
bool bNoTeleFrag;   //  Actor can't be telefragged.
bool bNoBossRip;    //  For rippermissiles: Don't rip through bosses.
bool bScreenSeeker;   //  Fails the IsOkayToAttack test if potential target is outside player FOV.
bool bBumpSpecial;    //  Actor executes its special when being collided (as the ST flag).
bool bMBFBounce;    //  Doesn't dies while bouncing speed is higher than 0.
bool bAvoidsDropOffs; //  Monster does avoid dropoffs, overrides value of compat_dropoff CVar.
bool bNoTimeFreeze;   //  Monster isn't affected by Time Freeze powerups.
bool bCrashed;      //  Means a monster that has crash state hasn't crashed and can execute Crash method.

//  Params
float     Speed;
float     FastSpeed;
float     FloatSpeed;

int       WoundHealth;
int       GibsHealth;

//  Damage info.
array!DamageFactor   DamageFactors;
float         PainChance;
array!PainChanceInfo PainChances;

float     MissileChance;
float     MissileMinRange;
float     MissileMaxRange;

ubyte      BounceType;
ubyte      BounceCount;
float     BounceFactor;
float     WallBounceFactor;

// Thing being chased/attacked (or nullptr).
// Also the originator for missiles.
EntityEx    Target;
// For monster families
string      Species;
// Last known enemy -- killogh 2/15/98
EntityEx    LastEnemy;
EntityEx    Tracer;
// Monster's goal if not chasing anything
EntityEx    Goal;
//  Master entity
EntityEx    Master;
//  Last actor this one heard
EntityEx    LastHeard;

// Player number last looked for.
int       LastLook;
//  The same for actor.
Entity      LastLookActor;

//  TID of things to hate, 0 if none.
int       TIDToHate;

ubyte      FriendPlayer;

int       MissileDamage;  // For missiles
int       MissilePoisonDamage;

// For nightmare respawn.
mthing_t    SpawnPoint;

// Reaction time: if non 0, don't attack yet.
int       ReactionCount;
// Used by player to freeze a bit after teleporting.
float     ReactionTime;

// If >0, the target will be chased
// no matter what (even if shot)
int       Threshold;

// Movement direction, movement generation (zig-zagging).
int       MoveDir;    // 0-7
int       MoveCount;    // when 0, select a new dir
int       strafecount;    // killough 9/8/98: monster strafing
int       FastChaseStrafeCount;

int       VisDir;

float     RDFactor;

// Static light parameters.
TVec      LightOffset;
int       LightColour;
float     LightRadius;

// Dynamic light parameters.
int       DLightColour;
float     DLightRadius;
int       ExplodeEffect;
float     prev_rad;

float     MeleeRange;

int       Special1; // Special info
int       Special2; // Special info
float     Special1f;
float     Special2f;
class!EntityEx SpecialCID;

name      DamageType;

float     DeathHeight;
float     BurnHeight;

string      StrifeName;

// Identifier in conversation scripts, originaly index into mobjinfo.
int       ConversationID;
int       CurrentSpeech;  // Current speech index.

//  Actor's inventory
Inventory   Inventory;

float     FloatBobPhase;

//  For A_ExplodeParms
int       ExplosionDamage;
int       ExplosionRadius;

string      Obituary;
string      HitObituary;

state     PrevEffectState;

int       MeleeDamage;
name      MeleeSound;
float     MissileHeight;
class!Actor  MissileType;

//  View offset when used as a player camera
float     CameraHeight;

//  Customiseable blood
class!Actor  BloodType;
class!Actor  BloodSplatterType;
class!Actor  AxeBloodType;
int       BloodColour;
int       BloodTranslation;

array!DropItemInfo DropItemList;

int       SkillRespawnCount;

// customiseable jump celocity
float JumpVelZ;
float JumpTime;

//float CrouchHeight;
float crouchfactor = 1.0;

bool k8InWeaponReady; // otherwise recursive calls to it may overflow stack

#ifdef VC_SCRIPT_USE_SPAWNED_CHILDREN_ARRAY
//array!EntityEx SpawnedChildren; // set in `A_SpawnItemEx()`, used in `A_RemoveChildren()`
#else
EntityEx SpawnParent; // set in `A_SpawnItemEx()`, used in `A_RemoveChildren()`
#endif


replication
{
  reliable if (Role == ROLE_Authority && bNetOwner)
    Inventory, bInvulnerable;
}


//===========================================================================
//
//  eventFindTargetForACS
//
//===========================================================================
final override Entity eventFindTargetForACS () {
  // player?
  if (bIsPlayer) {
    if (Player.PlayerState == PST_DEAD) return (Target ? Target : self); // target holds a killer
    // something player is aiming at
    // create direction vector
    TAVec ang = Angles;
    TVec dir;
    AngleVector(ang, dir);
    dir = Normalise(dir);
    return PickActor(default, dir, 8192);
  }
  // for other things, `Target` holds what we want
  return (Target ? Target : self);
}


//===========================================================================
//
//  eventDoAAPtr
//
//===========================================================================
final override Entity eventDoAAPtr (int ptr) {
  return DecorDoAAPtr('eventDoAAPtr', ptr);
}


//==========================================================================
//
//  DecorDoAAPtr
//
//==========================================================================
final Entity DecorDoAAPtr (name methodname, optional int ptr) {
  if (!specified_ptr || ptr == AAPTR_DEFAULT) return self;
  // category 1
  if (bIsPlayer) {
    if (ptr&AAPTR_PLAYER_GETTARGET) {
      //EntityEx targ = AimLineAttack(nullptr, Angles, 8192, noVertAutoAim:true);
      bool noAAim = !PlayerEx(self).bAutoAim, noAAVert = false/*true*/;
      Weapon Wpn = PlayerEx(self).ReadyWeapon;
      if (Wpn && Wpn.IsAutoaimDisabled()) noAAim = true; //bNoAutoaim;
      noAAVert = noAAim;
      EntityEx targ = Aim(nullptr, 8192/*16*64*/, Angles.yaw, noAutoaim:noAAim, noVertAutoAim:noAAVert);
      if (targ) return targ;
    }
    // AAPTR_PLAYER_GETCONVERSATION // no strife dialogues, so skip
  }
  // category 2
  if (ptr&AAPTR_TARGET) return Target;
  if (ptr&AAPTR_MASTER) return Master;
  if (ptr&AAPTR_TRACER) return Tracer;
  if (ptr&AAPTR_FRIENDPLAYER) {
    if (FriendPlayer > 0 && FriendPlayer <= MAXPLAYERS) {
      auto plr = Level.Game.Players[FriendPlayer-1];
      if (plr && plr.bSpawned && plr.MO) return plr.MO;
    }
  }
  if (ptr&AAPTR_LINETARGET) {
    EntityEx targ = Aim(nullptr, 2048/*16*64*/, Angles.yaw);
    if (targ) return targ;
  }
  // category 3
  int plridx = -1;
       if (ptr&AAPTR_PLAYER1) plridx = 0;
  else if (ptr&AAPTR_PLAYER2) plridx = 1;
  else if (ptr&AAPTR_PLAYER3) plridx = 2;
  else if (ptr&AAPTR_PLAYER4) plridx = 3;
  else if (ptr&AAPTR_PLAYER5) plridx = 4;
  else if (ptr&AAPTR_PLAYER6) plridx = 5;
  else if (ptr&AAPTR_PLAYER7) plridx = 6;
  else if (ptr&AAPTR_PLAYER8) plridx = 7;
  if (plridx >= 0 && plridx < MAXPLAYERS) {
    auto plr = Level.Game.Players[plridx];
    if (plr && plr.bSpawned && plr.MO) return plr.MO;
  }
  if (ptr&AAPTR_NULL) return none;
  FatalError("%s: unsupported ptr (0x%x)", methodname, ptr);
  return none;
}


/*
final float GetOriginX () { return Origin.x; }
final float GetOriginY () { return Origin.y; }
final float GetOriginZ () { return Origin.z; }

final float GetVelocityX () { return Velocity.x; }
final float GetVelocityY () { return Velocity.y; }
final float GetVelocityZ () { return Velocity.z; }

final float GetAnglesYaw () { return Angles.yaw; }
final float GetAnglesPitch () { return Angles.pitch; }
final float GetAnglesRoll () { return Angles.roll; }
*/

final Object _GetSelf () { return self; }
final Object _GetSSR () { /*print("(SSR.self=%C)", self);*/ return _stateRouteSelf; }


// convert bool fields to `MF_XXX` flags
final int CalcEntityFlags () {
  int res = 0;
  if (bSpecial) res |= MF_SPECIAL;
  if (bSolid) res |= MF_SOLID;
  if (bShootable) res |= MF_SHOOTABLE;
  if (bNoSector) res |= MF_NOSECTOR;
  if (bNoBlockmap) res |= MF_NOBLOCKMAP;
  if (bAmbush) res |= MF_AMBUSH;
  if (bJustHit) res |= MF_JUSTHIT;
  if (bJustAttacked) res |= MF_JUSTATTACKED;
  if (bSpawnCeiling) res |= MF_SPAWNCEILING;
  if (bNoGravity) res |= MF_NOGRAVITY;
  if (bDropOff) res |= MF_DROPOFF;
  if (bPickUp) res |= MF_PICKUP;
  if (!bColideWithThings && !bColideWithWorld) res |= MF_NOCLIP;
  if (bInChase) res |= MF_INCHASE;
  if (bFloat) res |= MF_FLOAT;
  if (bTeleport) res |= MF_TELEPORT;
  if (bMissile) res |= MF_MISSILE;
  if (bDropped) res |= MF_DROPPED;
  if (bShadow) res |= MF_SHADOW;
  if (bNoBlood) res |= MF_NOBLOOD;
  if (bCorpse) res |= MF_CORPSE;
  if (bInFloat) res |= MF_INFLOAT;
  //if (bInBounce) res |= MF_INBOUNCE;
  if (bCountKill) res |= MF_COUNTKILL;
  if (bCountItem) res |= MF_COUNTITEM;
  if (bSkullFly) res |= MF_SKULLFLY;
  if (bNoDeathmatch) res |= MF_NOTDMATCH;
  if (bSpawnSoundSource) res |= MF_SPAWNSOUNDSOURCE;
  if (bFriendly) res |= MF_FRIENDLY;
  //k8:notyet:const int MF_UNMORPHED = 0x10000000;
  if (bNoLiftDrop) res |= MF_NOLIFTDROP;
  if (bStealth) res |= MF_STEALTH;
  if (bIceCorpse) res |= MF_ICECORPSE;
  return res;
}
