//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//#define DEBUG_TRACE_PATH_FAKEOPEN

const float DEFAULT_MAXSTEPHEIGHT = 24.0;
const float DEFAULT_MAXJUMPHEIGHT = 56.0;
const float DEFAULT_MAXMOVEHEIGHT = DEFAULT_MAXJUMPHEIGHT;
const float DEFAULT_MAXDROPHEIGHT = 384.0;
const float TRACE_MAX_JUMP_DISTANCE = 64.0;


bool delegate (sector_t *sec) TraceIsDangerousSectorCB;


struct PathInfo {
  float angle;
  float needdist;
  float maxdist;
  bool needJump;
  bool needUse;
  TVec dirxy;
  bool success;
}


//==========================================================================
//
//  isGoodDoorLinedef
//
//  sec is possible door sector
//
//==========================================================================
static final bool isGoodDoorLinedef (GameObject::sector_t *sec, GameObject::line_t *ld) {
  //print("  line #%d (flags=0x%08x)...", idx, ld.flags);
  if (!(ld.flags&GameObject::ML_TWOSIDED)) return false; // not interesting
  if (ld.flags&(GameObject::ML_BLOCKING|GameObject::ML_BLOCKPLAYERS|GameObject::ML_BLOCKEVERYTHING)) return false; // not interesting
  //print("  line #%d before backsector...", idx);
  if (ld.backsector != sec) return false;
  //print("  line #%d before special (%d)...", idx, ld.special);
  // door opens to four units below
  switch (ld.special) {
    case GameObject::LNSPEC_DoorOpen: // tag,speed,lighttag
    case GameObject::LNSPEC_DoorRaise: // tag,speed,delay,lighttag
    case GameObject::LNSPEC_DoorAnimated: // tag,speed,delay,lock
      if (ld.arg1 != 0) {
        if (!IsSectorTagEqual(sec, ld.arg1)) return false;
        //print(" ...sector #%s for 'doorness' (%d lines; sub #%d): good tag", sec-&bot.player.MO.XLevel.Sectors[0], sec.lines.length, sub-&bot.player.MO.XLevel.Subsectors[0]);
      }
      return true;
    case GameObject::LNSPEC_DoorLockedRaise: // tag,speed,delay,lock,lighttag
      if (ld.arg4 != 0) return false; // locked
      if (ld.arg1 != 0) {
        if (!IsSectorTagEqual(sec, ld.arg1)) return false;
        //print(" ...sector #%s for 'doorness' (%d lines; sub #%d): good tag", sec-&bot.player.MO.XLevel.Sectors[0], sec.lines.length, sub-&bot.player.MO.XLevel.Subsectors[0]);
      }
      return true;
    case GameObject::LNSPEC_DoorGeneric: // tag,speed,kind,delay,lock
      // if 128 is added to kind, tag is lighttag
      if ((ld.arg3&0x80) == 0 && ld.arg1 != 0) {
        if (!IsSectorTagEqual(sec, ld.arg1)) return false;
        //print(" ...sector #%s for 'doorness' (%d lines; sub #%d): good tag", sec-&bot.player.MO.XLevel.Sectors[0], sec.lines.length, sub-&bot.player.MO.XLevel.Subsectors[0]);
      }
      if ((ld.arg3&0x7f) > 1) return false; // close
      return true;
    //case GameObject::LNSPEC_DoorAnimatedClose: // tag,speed
    //case GameObject::LNSPEC_DoorClose: // tag,speed,lighttag
    //case GameObject::LNSPEC_DoorCloseWaitOpen: // tag,speed,delay,lighttag
  }
  return false;
}


//==========================================================================
//
//  isDoorSector
//
//  returns surrounding sector with the lowest height
//
//==========================================================================
final GameObject::sector_t *isDoorSector (GameObject::sector_t *sec, optional bool ignoreHeight) {
  // if we can fit here, don't bother
  if (!ignoreHeight && sec.ceiling.minz-sec.floor.maxz >= Height) return nullptr;
  // check if this sector has door activation lines
  float hgt = float.max;
  GameObject::sector_t *res = nullptr;
  GameObject::line_t *ld;
  bool seenDoorLD = false;
  foreach (ld; sec.lines) {
    if (ld.flags&GameObject::ML_TWOSIDED) {
      GameObject::sector_t *other = (ld.frontsector == sec ? ld.backsector : ld.frontsector);
      if (other && other != sec && other.ceiling.minz < hgt) {
        res = other;
        hgt = other.ceiling.minz;
      }
    }
    if (!seenDoorLD && isGoodDoorLinedef(sec, ld)) seenDoorLD = true;
  }
  return (seenDoorLD ? res : nullptr);
}


//==========================================================================
//
//  findLowestCeilingSurrounding
//
//  FIXME: doesn't work with slopes
//
//==========================================================================
static final GameObject::sector_t *findLowestCeilingSurrounding (GameObject::sector_t *sec) {
  float hgt = float.max;
  GameObject::sector_t *res = nullptr;
  GameObject::line_t *line;
  foreach (line; sec.lines) {
    if (line.flags&GameObject::ML_TWOSIDED) {
      GameObject::sector_t *other = (line.frontsector == sec ? line.backsector : line.frontsector);
      if (other && other != sec && other.ceiling.minz < hgt) {
        res = other;
        hgt = other.ceiling.minz;
      }
    }
  }
  return res;
}


struct FakeDoorInfo {
  TPlane plane;
  float minz, maxz;
  sector_t *sec;
  bool saved;
}

transient array!FakeDoorInfo fakeOpenedDoors;


//==========================================================================
//
//  fakeSaveOpenDoor
//
//  prerequisite: sector must be a door
//
//==========================================================================
final bool fakeSaveOpenDoor (out FakeDoorInfo fi, GameObject::sector_t *sec, GameObject::sector_t *lowest) {
  if (!lowest) { fi.saved = false; return false; }
  fi.saved = true;
  fi.sec = sec;
  fi.plane.normal = sec.ceiling.normal;
  fi.plane.dist = sec.ceiling.dist;
  fi.minz = sec.ceiling.minz;
  fi.maxz = sec.ceiling.maxz;
  sec.ceiling.normal = lowest.ceiling.normal;
  sec.ceiling.dist = lowest.ceiling.dist+4;
  XLevel.ChangeOneSectorInternal(sec);
  return true;
}


//==========================================================================
//
//  fakeOpenDoor
//
//  prerequisite: sector must be a door
//
//==========================================================================
final void fakeOpenDoor (GameObject::sector_t *sec, GameObject::sector_t *lowest) {
  auto fi = fakeOpenedDoors.alloc();
  if (!fakeSaveOpenDoor(out *fi, sec, lowest)) { fakeOpenedDoors.length -= 1; return; }
}


//==========================================================================
//
//  restoreFakeOpenDoor
//
//==========================================================================
final void restoreFakeOpenDoor (const ref FakeDoorInfo fi) {
  if (fi.saved) {
    GameObject::sector_t *sec = fi.sec;
    sec.ceiling.normal = fi.plane.normal;
    sec.ceiling.dist = fi.plane.dist;
    sec.ceiling.minz = fi.minz;
    sec.ceiling.maxz = fi.maxz;
    XLevel.ChangeOneSectorInternal(sec);
  }
}


//==========================================================================
//
//  TracePathTrySideMove
//
//  try to "pseudoslide" along an obstacle
//  returns `true` on success (and shifts origin)
//
//==========================================================================
private final bool TracePathTrySideMove (ref TVec org, TVec dirxy, float dist, bool ignoreMonsters) {
  /*
  Entity::tmtrace_t tmtrace;
  float yaw = VectorAngleYaw(dirxy);
  TVec d2 = org+dirxy*dist;
  TVec dirLeft = AngleYawVector(yaw+90);
  TVec dirRight = AngleYawVector(yaw-90);
  // sidemove by our radius
  float sideMax = Radius*0.5; // ...and a little more
  float sideMove = 0; // ...and a little more
  while (sideMove < sideMax) {
    sideMove = fmin(sideMove+1, sideMax);
    TVec dd = d2+dirLeft*sideMove;
    if (CheckRelPosition(out tmtrace, dd, noPickups:true, ignoreMonsters:ignoreMonsters, ignorePlayers:ignoreMonsters)) {
      // i found her!
      org += dirLeft*sideMove;
      return true;
    }
    dd = d2+dirRight*sideMove;
    if (CheckRelPosition(out tmtrace, dd, noPickups:true, ignoreMonsters:ignoreMonsters, ignorePlayers:ignoreMonsters)) {
      // i found her!
      org += dirRight*sideMove;
      return true;
    }
  }
  */
  return false;
}


//==========================================================================
//
//  CalcBestDist
//
//  FIXME: idiotic code!
//
//  does small steps from lastdist to newdist
//
//==========================================================================
final void CalcBestDist (TVec org, TVec dirxy, ref float lastdist, float newdist, bool ignoreMonsters) {
  /*
  bool cw = botmo.bColideWithWorld;
  scope(exit) botmo.bColideWithWorld = cw;
  botmo.bColideWithWorld = true;
  */
  Entity::tmtrace_t tmtrace;
  while (newdist > lastdist) {
    float delta = fmin(newdist-lastdist, 8);
    TVec d2 = org+dirxy*(lastdist+delta);
    if (!CheckRelPosition(out tmtrace, d2, noPickups:true, ignoreMonsters:ignoreMonsters, ignorePlayers:ignoreMonsters)) {
      if (!TracePathTrySideMove(ref org, dirxy, lastdist+delta, ignoreMonsters)) return;
    }
    //print("*** step; lastdist=%s; newdist=%s; currDist=%s", lastdist, newdist, lastdist+delta);
    lastdist += delta;
  }
}


//==========================================================================
//
//  CalcBestDistBack
//
//  FIXME: idiotic code!
//
//  does small steps from newdist to lastdist
//
//==========================================================================
final void CalcBestDistBack (TVec org, TVec dirxy, ref float lastdist, float newdist, bool ignoreMonsters) {
  /*
  bool cw = botmo.bColideWithWorld;
  scope(exit) botmo.bColideWithWorld = cw;
  botmo.bColideWithWorld = true;
  */
  Entity::tmtrace_t tmtrace;
  float dist = newdist+8;
  while (dist > 0.1) {
    float delta = fmin(8, dist);
    dist -= delta;
    TVec d2 = org+dirxy*dist;
    if (CheckRelPosition(out tmtrace, d2, noPickups:true, ignoreMonsters:ignoreMonsters, ignorePlayers:ignoreMonsters)) {
      //print("*** GOOD step; dist=%s; newdist=%s", dist, newdist);
      lastdist = dist;
      return;
    }
    if (TracePathTrySideMove(ref org, dirxy, dist, ignoreMonsters)) {
      //print("*** XGOOD step; dist=%s; newdist=%s", dist, newdist);
      lastdist = dist;
      return;
    }
    //print("*** BAD step; dist=%s; newdist=%s", dist, newdist);
  }
  // this is wrong, but...
  //lastdist = newdist;
  lastdist = 0;
}


//==========================================================================
//
//  TracePath
//
//  Checks for obstructions at a certain angle and distance.
//
//  returns `false` if some obstacle was hit
//
//==========================================================================
bool TracePath (float ang, float dist, out PathInfo pi, optional Entity distEnt, optional bool allowJump, optional bool allowDrop, optional bool ignoreMonsters, optional TVec srcOrigin) {
  pi.maxdist = 0;
  pi.needJump = false;
  pi.needUse = false;
  pi.success = false;

  if (dist < 0) { ang += 180; dist = -dist; }
  ang = AngleMod360(ang);
  pi.needdist = dist;
  pi.angle = ang;

  if (!specified_srcOrigin) srcOrigin = Origin;

  // increase radius a little, so exact passages won't confuse tracer
  auto oldRad = Radius;
  scope(exit) Radius = oldRad;
  Radius += 3;

  float bottracerange = dist;
  TVec bottracedir;
  sincos(ang, out bottracedir.y, bottracedir.x);
  bottracedir.z = 0.0;
  pi.dirxy = bottracedir;
  if (dist < 1) {
    // oops
    Entity::tmtrace_t tmtrace;
    pi.success = CheckRelPosition(out tmtrace, srcOrigin, noPickups:true, ignoreMonsters:ignoreMonsters, ignorePlayers:ignoreMonsters);
    return pi.success;
  }

  fakeOpenedDoors.reset();
  scope(exit) {
    // close all opened doors
    foreach (ref FakeDoorInfo fi; fakeOpenedDoors; reverse) {
#ifdef DEBUG_TRACE_PATH_FAKEOPEN
      print("tracepath: fakeclose door (sec=%s)", fi.sec-&XLevel.Sectors[0]);
      print("           bsec: floor=%s, ceil=%s", fi.sec.floor.maxz, fi.sec.ceiling.minz);
#endif
      restoreFakeOpenDoor(ref fi);
#ifdef DEBUG_TRACE_PATH_FAKEOPEN
      print("           bsec: floor=%s, ceil=%s", fi.sec.floor.maxz, fi.sec.ceiling.minz);
#endif
    }
  }

  float x1 = srcOrigin.x;
  float y1 = srcOrigin.y;
  float x2 = x1+dist*bottracedir.x;
  float y2 = y1+dist*bottracedir.y;

  intercept_t in;
  foreach PathTraverse(out in, vector(x1, y1, srcOrigin.z), vector(x2, y2, srcOrigin.z), PT_ADDLINES|PT_ADDTHINGS|PT_NOOPENS) {
    float currDist = dist*in.frac;
    if (in.bIsALine) {
      // line
      line_t *ld = in.line; // this linedef
      TVec hit_point = srcOrigin+(bottracerange*in.frac)*bottracedir;

      if (currDist <= PlayerPawn::DEFAULT_USERANGE && (in.line->SpacFlags&(SPAC_UseThrough|SPAC_Use))) {
        pi.needUse = true;
      }

      // line is impassible
      if (!(ld->flags&ML_TWOSIDED) || (ld->flags&(ML_BLOCKING|ML_BLOCKPLAYERS|ML_BLOCKEVERYTHING))) {
        CalcBestDistBack(srcOrigin, bottracedir, ref pi.maxdist, currDist, ignoreMonsters);
        return false;
      }

      // line isn't two sided
      if (!ld->backsector) {
        CalcBestDistBack(srcOrigin, bottracedir, ref pi.maxdist, currDist, ignoreMonsters);
        return false;
      }

      sector_t *back;
      sector_t *front;
      if (!PointOnPlaneSide(srcOrigin, *ld)) {
        back = ld->backsector;
        front = ld->frontsector;
      } else {
        back = ld->frontsector;
        front = ld->backsector;
      }

      // if it is a door, open it
      if (front && back) {
        auto lowest = isDoorSector(back);
        if (lowest) {
#ifdef DEBUG_TRACE_PATH_FAKEOPEN
          print("tracepath: fakeopen door (front=%s, back=%s, lowest=%s)", front-&XLevel.Sectors[0], back-&XLevel.Sectors[0], lowest-&XLevel.Sectors[0]);
          print("           fsec: floor=%s, ceil=%s", front.floor.maxz, front.ceiling.minz);
          print("           bsec: floor=%s, ceil=%s", back.floor.maxz, back.ceiling.minz);
          print("           lsec: floor=%s, ceil=%s", lowest.floor.maxz, lowest.ceiling.minz);
#endif
          fakeOpenDoor(back, lowest);
#ifdef DEBUG_TRACE_PATH_FAKEOPEN
          print("           bsec: floor=%s, ceil=%s", back.floor.maxz, back.ceiling.minz);
#endif
          pi.needUse = true;
        }
      }

      // sector is dangerous
      if (TraceIsDangerousSectorCB && TraceIsDangerousSectorCB(back)) {
        CalcBestDistBack(srcOrigin, bottracedir, ref pi.maxdist, currDist-Radius, ignoreMonsters);
        return false;
      }

      // crosses a two sided line
      opening_t *open = XLevel.FindLineOpening(ld, hit_point, Height, do3dmidtex:true);
      // no valid openings
      if (!open) {
        CalcBestDistBack(srcOrigin, bottracedir, ref pi.maxdist, currDist, ignoreMonsters);
        return false;
      }

      // no cliff jumping unless we're going after something
      if (!distEnt && !allowDrop) {
        if (open->lowfloor-open->bottom >= DEFAULT_MAXMOVEHEIGHT &&
            open->lowfloor-open->bottom <= DEFAULT_MAXDROPHEIGHT)
        {
          CalcBestDistBack(srcOrigin, bottracedir, ref pi.maxdist, currDist, ignoreMonsters);
          return false;
        }
      }

      // determine if it's wise to jump up to a floor
      float diffheight = open->bottom-open->lowfloor;

      if (diffheight > 0.0) {
        if (diffheight >= DEFAULT_MAXSTEPHEIGHT && diffheight <= DEFAULT_MAXJUMPHEIGHT) {
          if (allowJump) {
            if (currDist <= TRACE_MAX_JUMP_DISTANCE) pi.needJump = true;
            pi.maxdist = currDist;
            continue;
          }
          CalcBestDistBack(srcOrigin, bottracedir, ref pi.maxdist, currDist-Radius, ignoreMonsters);
          return false;
        }
        if (diffheight >= DEFAULT_MAXJUMPHEIGHT) {
          CalcBestDistBack(srcOrigin, bottracedir, ref pi.maxdist, currDist-Radius, ignoreMonsters);
          return false;
        }
      }

      // otherwise we're going down, it is ok
      pi.maxdist = currDist;
    } else {
      // thing
      Actor th = Actor(in.Thing);
      if (!th || th == self) {
        pi.maxdist = currDist;
        continue;
      }

      float dheight = th.Origin.z+th.Height-srcOrigin.z;

      if (th == distEnt) {
        // jump to reach something
        if (dheight >= DEFAULT_MAXSTEPHEIGHT && dheight <= DEFAULT_MAXJUMPHEIGHT) {
          if (allowJump) {
            if (currDist <= TRACE_MAX_JUMP_DISTANCE) pi.needJump = true;
          }
        }
        pi.maxdist = currDist;
        CalcBestDistBack(srcOrigin, bottracedir, ref pi.maxdist, currDist, ignoreMonsters);
        return true;
      }

      if (th.bSolid) {
        bool doIgnore = th.bMissile;
        if (!doIgnore && ignoreMonsters) {
          doIgnore = (th.bMonster || th.bIsPlayer);
        }
        if (!doIgnore) {
          // [FB] Jump to avoid something
          if (dheight >= DEFAULT_MAXSTEPHEIGHT && dheight <= DEFAULT_MAXJUMPHEIGHT) {
            if (allowJump) {
              if (currDist <= TRACE_MAX_JUMP_DISTANCE) pi.needJump = true;
              pi.maxdist = currDist;
              continue;
            }
          }
          CalcBestDist(srcOrigin, bottracedir, ref pi.maxdist, currDist-Radius, ignoreMonsters);
          return false;
        }
      }

      pi.maxdist = currDist;
    }
  }

  // we walked all the way, yay
  CalcBestDistBack(srcOrigin, bottracedir, ref pi.maxdist, dist, ignoreMonsters);
  //!!!if (GetCvarB('bot_developer_messages_roam')) print("   --- traced: %s of %s", pi.maxdist, dist);

  if (pi.maxdist < 1) {
    pi.maxdist = 0;
    return false;
  }

  pi.success = true;
  return true;
}


//==========================================================================
//
//  CheckLineAttackWithCB
//
//  return `true` from callback to stop (and return a thing)
//
//==========================================================================
final EntityEx CheckLineAttackWithCB (TVec dir, float distance, bool delegate (EntityEx th) cb) {

  TVec shootOrigin = Origin;
  shootOrigin.z += CalculateLineAttackZOfs();

  TVec dst = shootOrigin+distance*dir;

  intercept_t in;
  EntityEx th;

  foreach PathTraverse(out in, shootOrigin, dst, PT_ADDLINES|PT_ADDTHINGS|(Level.CompatTrace ? PT_COMPAT : 0), SPF_NOBLOCKING|SPF_NOBLOCKSHOOT, ML_BLOCKEVERYTHING|ML_BLOCKHITSCAN) {
    if (in.bIsAPlane) return none;

    if (in.bIsALine) {
      if (in.bIsABlockingLine) return none;
      continue;
    }

    // shoot a thing
    th = EntityEx(in.Thing);
    if (!th) continue;
    if (th == self) continue; // can't shoot self
    if (!th.bShootable) continue; // corpse or something
    // check for physical attacks on a ghost
    if (th.bGhost /*&& NoAttackGhosts*/) continue;

    // hit thing
    // position a bit closer
    if (!cb) return th;
    if (cb && cb(th)) return th;
  }

  return none;
}
