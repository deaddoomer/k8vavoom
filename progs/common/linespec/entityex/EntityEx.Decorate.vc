//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
// Flags for A_JumpIfTargetInLOS and A_JumpIfInTargetLOS
//enum EJumpFlags
const [decorate] int JLOSF_PROJECTILE = 1;
const [decorate] int JLOSF_NOSIGHT = 1<<1;
const [decorate] int JLOSF_CLOSENOFOV = 1<<2;
const [decorate] int JLOSF_CLOSENOSIGHT = 1<<3;
const [decorate] int JLOSF_CLOSENOJUMP = 1<<4;
const [decorate] int JLOSF_DEADNOJUMP = 1<<5;
const [decorate] int JLOSF_CHECKMASTER = 1<<6;
const [decorate] int JLOSF_TARGETLOS = 1<<7;
const [decorate] int JLOSF_FLIPFOV = 1<<8;
const [decorate] int JLOSF_ALLYNOJUMP = 1<<9;
const [decorate] int JLOSF_COMBATANTONLY = 1<<10;
const [decorate] int JLOSF_NOAUTOAIM = 1<<11;
const [decorate] int JLOSF_CHECKTRACER = 1<<12;


// constants for `SetPlayerProperty()`
const [decorate] int PROP_FROZEN = 0;
const [decorate] int PROP_NOTARGET = 1;
const [decorate] int PROP_INSTANTWEAPONSWITCH = 2;
const [decorate] int PROP_FLY = 3;
const [decorate] int PROP_TOTALLYFROZEN = 4;
const [decorate] int PROP_INVULNERABILITY = 5;
const [decorate] int PROP_STRENGTH = 6;
const [decorate] int PROP_INVISIBILITY = 7;
const [decorate] int PROP_RADIATIONSUIT = 8;
const [decorate] int PROP_ALLMAP = 9;
const [decorate] int PROP_INFRARED = 10;
const [decorate] int PROP_WEAPONLEVEL2 = 11;
const [decorate] int PROP_FLIGHT = 12;
const [decorate] int PROP_SPEED = 15;
const [decorate] int PROP_BUDDHA = 16; // not supported


const [decorate] int PTROP_UNSAFETARGET = 1;
const [decorate] int PTROP_UNSAFEMASTER = 2;
const [decorate] int PTROP_NOSAFEGUARDS = PTROP_UNSAFETARGET|PTROP_UNSAFEMASTER;
const [decorate] int PTROP_NOSAFEGUARDS_FOUR = 4;

// Pointer constants, bitfield-enabled
//enum EPointerFlags
const [decorate] int AAPTR_DEFAULT = 0;
const [decorate] int AAPTR_NULL   = 0x1;
const [decorate] int AAPTR_TARGET = 0x2;
const [decorate] int AAPTR_MASTER = 0x4;
const [decorate] int AAPTR_TRACER = 0x8;

const [decorate] int AAPTR_PLAYER_GETTARGET       = 0x10;
const [decorate] int AAPTR_PLAYER_GETCONVERSATION = 0x20;

const [decorate] int AAPTR_PLAYER1 = 0x40;
const [decorate] int AAPTR_PLAYER2 = 0x80;
const [decorate] int AAPTR_PLAYER3 = 0x100;
const [decorate] int AAPTR_PLAYER4 = 0x200;
const [decorate] int AAPTR_PLAYER5 = 0x400;
const [decorate] int AAPTR_PLAYER6 = 0x800;
const [decorate] int AAPTR_PLAYER7 = 0x1000;
const [decorate] int AAPTR_PLAYER8 = 0x2000;

const [decorate] int AAPTR_FRIENDPLAYER = 0x4000;
const [decorate] int AAPTR_LINETARGET   = 0x8000;

// k8vavoom extensions
const [decorate] int AAPTR_OWNER = 0x10_0000;


//==========================================================================
//
//  decorate_random
//
//==========================================================================
[decorate] final int decorate_random (int From, int To) {
  if (From > To) {
    int Tmp = From;
    From = To;
    To = Tmp;
  }
  int RVal;
  if (To-From > 255) {
    RVal = (P_Random()<<24)|(P_Random()<<16)|(P_Random()<<8)|P_Random();
  } else {
    RVal = P_Random();
  }
  return From+RVal%(To-From+1);
}


//==========================================================================
//
//  decorate_random2
//
//==========================================================================
[decorate] final int decorate_random2 (optional int Mask) {
  if (specified_Mask) return (P_Random()&Mask)-(P_Random()&Mask);
  return P_Random()-P_Random();
}


//==========================================================================
//
//  decorate_frandom
//
//==========================================================================
[decorate] final float decorate_frandom (float From, float To) {
  return From+FRandomFull()*(To-From);
}


//==========================================================================
//
//  decorate_randompick
//
//==========================================================================
/*
[decorate] final int decorate_randompick (int v0, optional int v1, optional int v2, optional int v3,
                               optional int v4, optional int v5, optional int v6,
                               optional int v7, optional int v8, optional int v9,
                               optional int v10, optional int v11, optional int v12,
                               optional int v13, optional int v14, optional int v15,
                               optional int v16, optional int v17, optional int v18,
                               optional int v19, optional int v20, optional int v21,
                               optional int v22, optional int v23, optional int v24,
                               optional int v25, optional int v26, optional int v27)
{
  int[32] values;
  int vcount = 1;
  values[0] = v0;
  if (specified_v1) values[vcount++] = v1;
  if (specified_v2) values[vcount++] = v2;
  if (specified_v3) values[vcount++] = v3;
  if (specified_v4) values[vcount++] = v4;
  if (specified_v5) values[vcount++] = v5;
  if (specified_v6) values[vcount++] = v6;
  if (specified_v7) values[vcount++] = v7;
  if (specified_v8) values[vcount++] = v8;
  if (specified_v9) values[vcount++] = v9;
  if (specified_v10) values[vcount++] = v10;
  if (specified_v11) values[vcount++] = v11;
  if (specified_v12) values[vcount++] = v12;
  if (specified_v13) values[vcount++] = v13;
  if (specified_v14) values[vcount++] = v14;
  if (specified_v15) values[vcount++] = v15;
  if (specified_v16) values[vcount++] = v16;
  if (specified_v17) values[vcount++] = v17;
  if (specified_v18) values[vcount++] = v18;
  if (specified_v19) values[vcount++] = v19;
  if (specified_v20) values[vcount++] = v20;
  if (specified_v21) values[vcount++] = v21;
  if (specified_v22) values[vcount++] = v22;
  if (specified_v23) values[vcount++] = v23;
  if (specified_v24) values[vcount++] = v24;
  if (specified_v25) values[vcount++] = v25;
  if (specified_v26) values[vcount++] = v26;
  if (specified_v27) values[vcount++] = v27;
  return values[P_Random()%vcount];
}
*/


//==========================================================================
//
//  decorate_frandompick
//
//==========================================================================
/*
[decorate] final float decorate_frandompick (float v0, optional float v1, optional float v2, optional float v3,
                                  optional float v4, optional float v5, optional float v6,
                                  optional float v7, optional float v8, optional float v9,
                                  optional float v10, optional float v11, optional float v12,
                                  optional float v13, optional float v14, optional float v15)
{
  float[18] values;
  int vcount = 1;
  values[0] = v0;
  if (specified_v1) values[vcount++] = v1;
  if (specified_v2) values[vcount++] = v2;
  if (specified_v3) values[vcount++] = v3;
  if (specified_v4) values[vcount++] = v4;
  if (specified_v5) values[vcount++] = v5;
  if (specified_v6) values[vcount++] = v6;
  if (specified_v7) values[vcount++] = v7;
  if (specified_v8) values[vcount++] = v8;
  if (specified_v9) values[vcount++] = v9;
  if (specified_v10) values[vcount++] = v10;
  if (specified_v11) values[vcount++] = v11;
  if (specified_v12) values[vcount++] = v12;
  if (specified_v13) values[vcount++] = v13;
  if (specified_v14) values[vcount++] = v14;
  if (specified_v15) values[vcount++] = v15;
  return values[P_Random()%vcount];
}
*/


// ////////////////////////////////////////////////////////////////////////// //
[decorate] final float decorate_sin (float Angle) { return sin(Angle); }
[decorate] final float decorate_cos (float Angle) { return cos(Angle); }
[decorate] final float decorate_tan (float Angle) { return tan(Angle); }
[decorate] final float decorate_asin (float x) { return asin(x); }
[decorate] final float decorate_acos (float x) { return acos(x); }
[decorate] final float decorate_atan (float slope) { return atan(slope); }
[decorate] final float decorate_atan2 (float y, float x) { return atan2(y, x); }
[decorate] final float decorate_sqrt (float v) { return sqrt(v); }
[decorate] final int decorate_roundi (float v) { return roundi(v); }
[decorate] final float decorate_fround (float v) { return fround(v); }
[decorate] final int decorate_trunci (float v) { return trunci(v); }
[decorate] final float decorate_ftrunc (float v) { return ftrunc(v); }
[decorate] final float decorate_fceil (float v) { return fceil(v); }
[decorate] final float decorate_ceil (float v) { return fceil(v); }
[decorate] final float decorate_ffloor (float v) { return ffloor(v); }
[decorate] final float decorate_floor (float v) { return ffloor(v); }
[decorate] final float decorate_flerp (float a, float b, float delta) { return flerp(a, b, delta); }
[decorate] final int decorate_ilerp (int a, int b, float delta) { return lerp(a, b, delta); }
[decorate] final float decorate_smoothstep (float edge0, float edge1, float x) { return smoothstep(edge0, edge1, x); }
[decorate] final float decorate_smoothstepPerlin (float edge0, float edge1, float x) { return smoothstepPerlin(edge0, edge1, x); }
[decorate] final float decorate_AngleMod360 (float angle) { return AngleMod360(angle); }
[decorate] final float decorate_AngleMod180 (float angle) { return AngleMod180(angle); }
[decorate] final float decorate_AngleDiff (float afrom, float ato) { return AngleDiff(afrom, ato); }
[decorate] final float decorate_deg2rad (float angle) { return deg2rad(angle); }
[decorate] final float decorate_rad2deg (float angle) { return rad2deg(angle); }
[decorate] final int decorate_sign (float v) { return int(fsign(v)); }


// ////////////////////////////////////////////////////////////////////////// //
[decorate] final float decorate_GetCVar (name Name) { return GetCvarF(Name); }
[decorate] final float decorate_GetCVarF (name Name) { return GetCvarF(Name); }
[decorate] final int decorate_GetCVarI (name Name) { return GetCvarI(Name); }
[decorate] final bool decorate_GetCVarB (name Name) { return GetCvarB(Name); }
[decorate] final string decorate_GetCVarS (name Name) { return GetCvarS(Name); }


// ////////////////////////////////////////////////////////////////////////// //
//final int *decorate_args { get { return &Args[0]; } }
[decorate] final float decorate_alpha { get { return Alpha; } }
[decorate] final float decorate_angle { get { return AngleMod360(Angles.yaw); } }
[decorate] final float decorate_yaw { get { return AngleMod360(Angles.yaw); } }
[decorate] final float decorate_pitch { get { return AngleMod360(Angles.pitch); } }
[decorate] final float decorate_roll { get { return AngleMod360(Angles.roll); } }
[decorate] final float decorate_ceilingz { get { return CeilingZ; } }
[decorate] final float decorate_floorz { get { return FloorZ; } }
[decorate] final int decorate_health { get { return Health; } }
[decorate] final float decorate_radius { get { return Radius; } }
[decorate] final float decorate_height { get { return Height; } }
[decorate] final float decorate_scalex { get { return ScaleX; } }
[decorate] final float decorate_scaley { get { return ScaleY; } }
[decorate] final float decorate_mass { get { return Mass; } }
[decorate] final float decorate_gravity { get { return Gravity; } }
[decorate] final float decorate_meleerange { get { return MeleeRange; } }
[decorate] final float decorate_reactiontime { get { return ReactionTime*35.0; } }
[decorate] final float decorate_speed { get { return Speed/35.0; } }
[decorate] final float decorate_floatspeed { get { return FloatSpeed/35.0; } }
[decorate] final int decorate_special { get { return Special; } }
[decorate] final int decorate_tid { get { return TID; } }
[decorate] final int decorate_tidtohate { get { return TIDToHate; } }
[decorate] final int decorate_waterlevel { get { return WaterLevel; } }
[decorate] final int decorate_watertype { get { return WaterType; } }
[decorate] final int decorate_threshold { get { return Threshold; } }
[decorate] final int decorate_damage { get { return MissileDamage; } } //k8: i think so
[decorate] final float decorate_x { get { return Origin.x; } }
[decorate] final float decorate_y { get { return Origin.y; } }
[decorate] final float decorate_z { get { return Origin.z; } }
[decorate] final float decorate_momx { get { return Velocity.x/35.0; } }
[decorate] final float decorate_momy { get { return Velocity.y/35.0; } }
[decorate] final float decorate_momz { get { return Velocity.z/35.0; } }
[decorate] final float decorate_velx { get { return Velocity.x/35.0; } }
[decorate] final float decorate_vely { get { return Velocity.y/35.0; } }
[decorate] final float decorate_velz { get { return Velocity.z/35.0; } }
[decorate] final float decorate_missileMore { get { return (bTriggerHappy ? 1.0 : 0.0); } }
[decorate] final int decorate_ExplosionDamage { get { return ExplosionDamage; } }
[decorate] final int decorate_ExplosionRadius { get { return ExplosionRadius; } }

[decorate] final int decorate_Score { get { return Score; } }
[decorate] final int decorate_Accuracy { get { return Accuracy; } }
[decorate] final int decorate_Stamina { get { return Stamina; } }

[decorate] final int decorate_GetUID () { return __ObjectUniqueId; }
[decorate] final Object decorate_GetSelf () { return self; }
[decorate] final Object decorate_GetSSR () { /*print("(SSR.self=%C)", self);*/ return _stateRouteSelf; }
[decorate] final Object decorate_GetTarget () { return Target; }
[decorate] final Object decorate_GetTracer () { return Tracer; }
[decorate] final Object decorate_GetMaster () { return Master; }
[decorate] final Object decorate_GetOwner () { return Owner; }
[decorate] final float decorate_GetStateTime () { return StateTime; }

[decorate] final bool decorate_IsNetGame () { return Level.Game.netgame; }
[decorate] final bool decorate_IsNetServer () { return Level.Game.IsNetServer; }
[decorate] final bool decorate_IsNetClient () { return Level.Game.IsNetClient; }
[decorate] final bool decorate_IsDumbClient () { return Level.Game.IsDumbClient; }
