//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************


//==========================================================================
//
//  decorate_random
//
//==========================================================================
final int decorate_random (int From, int To) {
  if (From > To) {
    int Tmp = From;
    From = To;
    To = Tmp;
  }
  int RVal;
  if (To-From > 255) {
    RVal = (P_Random()<<24)|(P_Random()<<16)|(P_Random()<<8)|P_Random();
  } else {
    RVal = P_Random();
  }
  return From+RVal%(To-From+1);
}


//==========================================================================
//
//  decorate_random2
//
//==========================================================================
final int decorate_random2 (optional int Mask) {
  if (specified_Mask) return (P_Random()&Mask)-(P_Random()&Mask);
  return P_Random()-P_Random();
}


//==========================================================================
//
//  decorate_frandom
//
//==========================================================================
final float decorate_frandom (float From, float To) {
  return From+FRandomFull()*(To-From);
}


//==========================================================================
//
//  decorate_randompick
//
//==========================================================================
final int decorate_randompick (int v0, optional int v1, optional int v2, optional int v3,
                               optional int v4, optional int v5, optional int v6,
                               optional int v7, optional int v8, optional int v9,
                               optional int v10, optional int v11, optional int v12,
                               optional int v13, optional int v14, optional int v15,
                               optional int v16, optional int v17, optional int v18,
                               optional int v19, optional int v20, optional int v21,
                               optional int v22, optional int v23, optional int v24,
                               optional int v25, optional int v26, optional int v27)
{
  int[22] values;
  int vcount = 1;
  values[0] = v0;
  if (specified_v1) values[vcount++] = v1;
  if (specified_v2) values[vcount++] = v2;
  if (specified_v3) values[vcount++] = v3;
  if (specified_v4) values[vcount++] = v4;
  if (specified_v5) values[vcount++] = v5;
  if (specified_v6) values[vcount++] = v6;
  if (specified_v7) values[vcount++] = v7;
  if (specified_v8) values[vcount++] = v8;
  if (specified_v9) values[vcount++] = v9;
  if (specified_v10) values[vcount++] = v10;
  if (specified_v11) values[vcount++] = v11;
  if (specified_v12) values[vcount++] = v12;
  if (specified_v13) values[vcount++] = v13;
  if (specified_v14) values[vcount++] = v14;
  if (specified_v15) values[vcount++] = v15;
  if (specified_v16) values[vcount++] = v16;
  if (specified_v17) values[vcount++] = v17;
  if (specified_v18) values[vcount++] = v18;
  if (specified_v19) values[vcount++] = v19;
  if (specified_v20) values[vcount++] = v20;
  if (specified_v21) values[vcount++] = v21;
  if (specified_v22) values[vcount++] = v22;
  if (specified_v23) values[vcount++] = v23;
  if (specified_v24) values[vcount++] = v24;
  if (specified_v25) values[vcount++] = v25;
  if (specified_v26) values[vcount++] = v26;
  if (specified_v27) values[vcount++] = v27;
  return values[P_Random()%vcount];
}


//==========================================================================
//
//  decorate_frandompick
//
//==========================================================================
final float decorate_frandompick (float v0, optional float v1, optional float v2, optional float v3,
                                  optional float v4, optional float v5, optional float v6,
                                  optional float v7, optional float v8, optional float v9,
                                  optional float v10, optional float v11, optional float v12,
                                  optional float v13, optional float v14, optional float v15)
{
  float[18] values;
  int vcount = 1;
  values[0] = v0;
  if (specified_v1) values[vcount++] = v1;
  if (specified_v2) values[vcount++] = v2;
  if (specified_v3) values[vcount++] = v3;
  if (specified_v4) values[vcount++] = v4;
  if (specified_v5) values[vcount++] = v5;
  if (specified_v6) values[vcount++] = v6;
  if (specified_v7) values[vcount++] = v7;
  if (specified_v8) values[vcount++] = v8;
  if (specified_v9) values[vcount++] = v9;
  if (specified_v10) values[vcount++] = v10;
  if (specified_v11) values[vcount++] = v11;
  if (specified_v12) values[vcount++] = v12;
  if (specified_v13) values[vcount++] = v13;
  if (specified_v14) values[vcount++] = v14;
  if (specified_v15) values[vcount++] = v15;
  return values[P_Random()%vcount];
}


//==========================================================================
//
//  decorate_sin
//
//==========================================================================
final float decorate_sin (float Angle) {
  return sin(Angle);
}


//==========================================================================
//
//  decorate_cos
//
//==========================================================================
final float decorate_cos (float Angle) {
  return cos(Angle);
}


//==========================================================================
//
//  decorate_clamp
//
//==========================================================================
final float decorate_clamp (float val, float min, float max) {
  return fclamp(val, min, max);
}


// ////////////////////////////////////////////////////////////////////////// //
///*final*/ int *decorate_args { get { return &Args[0]; } }
/*final*/ float decorate_alpha { get { return Alpha; } }
/*final*/ float decorate_angle { get { return AngleMod360(Angles.yaw); } }
/*final*/ float decorate_yaw { get { return AngleMod360(Angles.yaw); } }
/*final*/ float decorate_pitch { get { return AngleMod360(Angles.pitch); } }
/*final*/ float decorate_roll { get { return AngleMod360(Angles.roll); } }
/*final*/ float decorate_ceilingz { get { return CeilingZ; } }
/*final*/ float decorate_floorz { get { return FloorZ; } }
/*final*/ int decorate_health { get { return Health; } }
/*final*/ float decorate_radius { get { return Radius; } }
/*final*/ float decorate_scalex { get { return ScaleX; } }
/*final*/ float decorate_scaley { get { return ScaleY; } }
/*final*/ float decorate_mass { get { return Mass; } }
/*final*/ float decorate_gravity { get { return Gravity; } }
/*final*/ float decorate_meleerange { get { return MeleeRange; } }
/*final*/ float decorate_reactiontime { get { return ReactionTime*35.0; } }
/*final*/ float decorate_speed { get { return Speed; } }
/*final*/ int decorate_special { get { return Special; } }
/*final*/ int decorate_tid { get { return TID; } }
/*final*/ int decorate_tidtohate { get { return TIDToHate; } }
/*final*/ int decorate_waterlevel { get { return WaterLevel; } }
/*final*/ int decorate_watertype { get { return WaterType; } }
/*final*/ int decorate_threshold { get { return Threshold; } }
/*final*/ int decorate_damage { get { return MissileDamage; } } //k8: i think so
/*final*/ float decorate_x { get { return Origin.x; } }
/*final*/ float decorate_y { get { return Origin.y; } }
/*final*/ float decorate_z { get { return Origin.z; } }
/*final*/ float decorate_momx { get { return Velocity.x/35.0; } }
/*final*/ float decorate_momy { get { return Velocity.y/35.0; } }
/*final*/ float decorate_momz { get { return Velocity.z/35.0; } }
/*final*/ float decorate_velx { get { return Velocity.x/35.0; } }
/*final*/ float decorate_vely { get { return Velocity.y/35.0; } }
/*final*/ float decorate_velz { get { return Velocity.z/35.0; } }
