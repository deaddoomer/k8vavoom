//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************


//==========================================================================
//
//  DamageEx
//
//  called by PlayerPawn from `LineAttack()`
//
//==========================================================================
void DamageEx (EntityEx inflictor, EntityEx source, int damage, name DmgType, bool NoArmor, TVec hitp, bool secondary, optional bool spawnBlood) {
  if (!Level.Game.IsAuthority) return;
  int newdmg = K8onBeforeDamage(inflictor, hitp, damage, DmgType, secondary);
  //printdebug("THP(%s):(%s,%s,%s); dmg=%s; new=%s; type='%s'", (secondary ? "2" : "1"), hitp.x, hitp.y, hitp.z, damage, newdmg, DmgType);
  //printdebug("THP:(%s,%s,%s); dmg=%s; type='%s'", hitp.x, hitp.y, hitp.z, damage, "FUCK!");
  if (!secondary) {
    //printdebug("%C: first shot; spawnBlood=%B", self, spawnBlood);
    if (!specified_spawnBlood && inflictor && inflictor.bIsPlayer) {
      auto pp = PlayerPawn(inflictor);
      if (pp) {
        spawnBlood = pp.IsPrimaryBloodSpawnAllowed(self, newdmg, DmgType);
        Damage(inflictor, source, /*damage*/newdmg, DmgType, NoArmor, spawnBlood:spawnBlood);
        return;
      }
    }
    Damage(inflictor, source, /*damage*/newdmg, DmgType, NoArmor, spawnBlood:spawnBlood!optional);
  } else {
    // secondary shots won't spawn blood
    //printdebug("%C: secondary shot; spawnBlood=%B (%B); inflictor=%C; source=%C", self, spawnBlood, specified_spawnBlood, inflictor, source);
    if (!specified_spawnBlood && inflictor && inflictor.bIsPlayer) {
      auto pp = PlayerPawn(inflictor);
      if (pp) {
        spawnBlood = pp.IsSecondaryBloodSpawnAllowed(self, newdmg, DmgType);
        //if (spawnBlood) printdebug("%C: SECONDARY BLOOD!", self);
      }
    }
    Damage(inflictor, source, /*damage*/newdmg, DmgType, NoArmor, spawnBlood:spawnBlood);
  }
}


//==========================================================================
//
//  Damage
//
//  Damages both enemies and players.
//
//  "inflictor" is the thing that caused the damage, creature or missile,
//  can be nullptr (slime, etc).
//
//  "source" is the thing to target after taking damage, creature or nullptr.
//  Source and inflictor are the same for melee attacks. Source can be nullptr
//  for slime, barrel explosions and other environmental stuff.
//
//  "forced" can be set to ignore "invulnerable" flag
//
//  "spawnBlood" can be set to spawn blood
//
//  `ignorePowerups` and `NoArmor` now does the same thing (sigh)
//
//  returns 0 if damage is not done
//  returns -1 if damage was absorbed by some armor (unreliable)
//  note that damage resist returns 0
//
//==========================================================================
int Damage (EntityEx inflictor, EntityEx source, int damage,
            optional name DmgType, optional bool NoArmor, optional bool forced,
            optional bool spawnBlood,
            optional bool ignoreDamageFactors, optional bool ignorePowerups)
{
  if (!bShootable && !forced) return 0; // shouldn't happen...
  if (!Level.Game.IsAuthority) return 0;

  if (DmgType) {
    if (nameicmp(DmgType, 'None') == 0 || nameicmp(DmgType, 'Normal') == 0) DmgType = 'None';
  } else {
    DmgType = 'None';
  }

  if (Health <= 0) {
    if (inflictor && nameicmp(DmgType, 'Ice') == 0) return 0;
    if (bIceCorpse) {
      // frozen
      StateTime = 0.1;
      Velocity.x = 0.0;
      Velocity.y = 0.0;
    }
    return 0;
  }

  // apply damage multiplier
  if (source) {
    damage = int(float(damage)*source.GenericDamageMultiplier);
    if (damage <= 0) return 0;
  } else if (inflictor) {
    //k8: gozzo doesn't do this, but why not?
    damage = int(float(damage)*inflictor.GenericDamageMultiplier);
    if (damage <= 0) return 0;
  }

  Inventory ppcurr, ppnext;
  int origDamage = damage;

  // amplify damage with powerups
  if (source && /*source.bIsPlayer &&*/ damage > 0 && source.Inventory) {
    /*
    int NewDmg = damage;
    source.Inventory.AmplifyDamage(self, damage, DmgType, NewDmg);
    damage = NewDmg;
    */
    ppnext = source.Inventory;
    while (ppnext) {
      ppcurr = ppnext;
      ppnext = ppnext.Inventory;
      damage = ppcurr.AmplifyDamage(self, inflictor, damage, DmgType, origDamage);
    }
    // don't return here yet, we may need to awake monster (but use special return code)
    if (damage == -666) return -1;
  }

  // modify damage with special inventory items
  if (self.Inventory) {
    ppnext = self.Inventory;
    while (ppnext) {
      ppcurr = ppnext;
      ppnext = ppnext.Inventory;
      damage = ppcurr.ModifyDamage(source, inflictor, damage, DmgType, origDamage);
    }
    // don't return here yet, we may need to awake monster (but use special return code)
    if (damage == -666) return -1;
  }

  // forced blood?
  if (spawnBlood && damage > 0) {
    if (damage > 100 || forced) {
      SpawnBloodAtHeadExplosion(damage, inflictor);
    } else {
      if (inflictor) {
        // we only need it for blood direction, length doesn't matter
        TVec sorg = inflictor.Origin;
        // no need to move z, it looks better this way
        //sorg.z += fmax(0.0, inflictor.Height*0.5);
        if (inflictor.bMissile && inflictor.Velocity) sorg -= inflictor.Velocity.normalise*64;
        SpawnBlood(Origin, damage, sorg);
      } else {
        SpawnBlood(Origin, damage);
      }
    }
  }

  if (!forced && bInvulnerable && damage < 10000) {
    // actor is invulnerable
    if (bIsPlayer) {
      if (LineSpecialGameInfo(Level.Game).bNoDamageThrustInvulnerable) {
        // for player, no exceptions
        return 0;
      }
    } else if (!inflictor || !inflictor.bDamageInvulnerable) {
      return 0;
    }
  }

  if (inflictor && inflictor.bPierceArmor) NoArmor = true;

  // spectral targets only take damage from spectral projectiles
  if (bSpectral && !forced) {
    if (!inflictor || !inflictor.bSpectral) {
      if (MissileState) SetState(MissileState);
      return 0;
    }
  }

  // Andy Baker's Stealth monsters
  if (bStealth) {
    Alpha = 1.0;
    VisDir = -1;
  }

  if (bSkullFly) {
    if (bSkullFlyInvulnerable && !forced) return 0; // invulnerable during charge attack
    bSkullFly = false;
    Velocity = vector(0.0, 0.0, 0.0);
    if (Health > 0) SetState(SeeState);
  }

  if (bDormant && !forced) return 0; // invulnerable, and won't wake up

  bool isBuddha = false;
  if (bIsPlayer && Player) {
    // take half damage in trainer mode
    damage = int(float(damage)*Level.World.GetDamageFactor());
    isBuddha = !!(PlayerEx(Player).Cheats&PlayerEx::CF_BUDDHA);
    if (!isBuddha && !ignorePowerups && FindBuddhaPowerup()) isBuddha = true;
  }

  // special damage types
  if (inflictor) {
    damage = inflictor.DoSpecialDamage(self, source, damage);
    if (damage == -1) return 0;
  }

  if (nameicmp(DmgType, 'SpectralLow') == 0 && bLowSpectralResist) damage = 0;

  //k8: ignore this for `ignoreDamageFactors`?
  if (bFireResist && nameicmp(DmgType, 'Fire')) damage >>= 1;

  if (damage > 0 && !ignoreDamageFactors) {
    float realdmgfactor = GenericDamageFactor;
    if (DamageFactors || Level.Game.CustomDamageFactors) {
      bool replacefact = false;
      bool skiparmor = false;
      float dfactor = FindDamageFactor(DmgType, float.nan, out replacefact, out skiparmor);
      if (!dfactor.isnan) {
        if (!replacefact) realdmgfactor *= dfactor; else realdmgfactor = dfactor;
        if (skiparmor) NoArmor = true;
        //printdebug("%C: damage type %s reduction factor is %s", self, DmgType, dfactor);
      }
    }
    damage = int(float(damage)*realdmgfactor);
  }
  if (damage <= 0) return 0;

  damage = TakeSpecialDamage(inflictor, source, damage, DmgType, forced:forced!optional);
  if (damage < 0) return 0; // was `-1`

  //printdebug("DAMAGE: self=`%C`; damage=%s; health=%s; forced=%B; dmgtype=<%s>", self, damage, Health, forced, DmgType);
  // push the target unless using a weapon that should not inflict thrust
  if (inflictor && inflictor != self && bColideWithThings && !inflictor.bNoDamageThrust && !bDontThrust) {
    float kickback;

    /* old code
    if (bIsPlayer && !GetCvar('plr_allow_damage_thrust')) {
      kickback = 0.0;
    } else if (!source || !source.bIsPlayer) {
      kickback = LineSpecialGameInfo(Level.Game).DefaultKickBack;
    } else {
      auto wpn = PlayerEx(source.Player).ReadyWeapon;
      kickback = (wpn ? wpn.Kickback : LineSpecialGameInfo(Level.Game).DefaultKickBack);
    }
    */
    if (bIsPlayer && !GetCvar('plr_allow_damage_thrust')) {
      kickback = 0.0;
    } else {
           if (inflictor && inflictor.ProjectileKickback) kickback = inflictor.ProjectileKickback;
      else if (!source || !source.bIsPlayer) kickback = LineSpecialGameInfo(Level.Game).DefaultKickBack;
      else {
        auto wpn = PlayerEx(source.Player).ReadyWeapon;
        kickback = (wpn ? wpn.Kickback : LineSpecialGameInfo(Level.Game).DefaultKickBack);
      }
    }

    if (kickback) {
      TVec dir;
      float thrust = kickback/8.0*float(damage)/fmax(1, Mass);
      if (thrust < 0.0 || thrust > 10.0) thrust = 10.0;
      // make fall forwards sometimes
      //k8: but not if player is cheating
      if (!bIsPlayer || !Player || (!isBuddha && !(PlayerEx(Player).Cheats&(PlayerEx::CF_BUDDHA|PlayerEx::CF_NOCLIP|PlayerEx::CF_GODMODE)))) {
        if (damage < 40 && damage > Health &&
            Origin.z-inflictor.Origin.z > 64.0 &&
            (P_Random()&1) &&
            // [RH] but only if not too fast and not flying
            thrust < 10.0 &&
            !bNoGravity)
        {
          //printdebug("!!!!!!!!!!! damage=%s; Health=%s; distz=%s; thrust=%s; nograv=%B", damage, Health, Origin.z-inflictor.Origin.z, thrust, bNoGravity);
          Angles.yaw += 180.0;
          Angles.yaw = AngleMod360(Angles.yaw);
          thrust *= 4.0;
        }
      }
      dir = GetCenter()-inflictor.GetCenter();
      if (Length(dir) < 0.001) {
        // zero length. In this case Doom would use angle 0
        dir = vector(1.0, 0.0, 0.0);
      }
      if (source && source.bIsPlayer && source == inflictor &&
          PlayerEx(source.Player).ReadyWeapon &&
          PlayerEx(source.Player).ReadyWeapon.bStaff2Kickback)
      {
        // staff power level 2
        dir.z = 0.0;
        Velocity += 35.0*10.0*Normalise(dir);
        Velocity.z += 35.0*5.0;
      } else {
        Velocity += 35.0*thrust*Normalise(dir);
      }
    }
  }

  // player specific
  if (bIsPlayer) {
    //printdebug("%C: dmg=%s; invul=%B", self, damage, bInvulnerable);
    if (!forced && Player && PlayerEx(Player).CheckFriendlyFire(source, damage)) return 0;

    // end of game hell hack
    if ((Sector->special&SECSPEC_BASE_MASK) == SECSPEC_DamageSuperHellslimeExit && damage >= Health) {
      damage = Health-1;
    }

    // below certain threshold, ignore damage in GOD mode, or with INVUL power
    if (damage < 1000 && (bInvulnerable || (PlayerEx(Player).Cheats&PlayerEx::CF_GODMODE))) {
      return -1;
    }

    if (!NoArmor && !ignorePowerups && Inventory) {
      /*
      int NewDmg = damage;
      Inventory.AbsorbDamage(source, damage, DmgType, NewDmg);
      damage = NewDmg;
      if (damage <= 0) return -1;
      */
      ppnext = self.Inventory;
      while (ppnext) {
        ppcurr = ppnext;
        ppnext = ppnext.Inventory;
        damage = ppcurr.AbsorbDamage(source, inflictor, damage, DmgType, origDamage);
      }
      if (damage <= 0) return -1;
    }

    if (damage >= Health && (Level.World.bSkillAutoUseHealth || Level.Game.deathmatch) && !PlayerEx(Player).MorphTime) {
      // try to use some inventory health
      AutoUseHealth(damage-Health+1);
    }

    PlayerEx pex = PlayerEx(Player);
    assert(pex);

    // remember attacker for advanced damage indication
    if (source && Player.MO == self) pex.RememberAttacker(source, source.Origin, damage, DmgType);

    //k8: use main player object health here? Voodoo Dolls are hard!
    if (/*Player.*/Health-damage < 50 && !Level.Game.deathmatch) {
      // try to use some inventory health
      AutoUseStrifeHealth(damage-Health+1);
    }

    // remember last attacker for statusbar face, and add damage flash
    pex.Attacker = source;
    pex.DamageFlash += float(damage)/35.0; // add damage after armor / invuln
    if (pex.DamageFlash > 3.0) pex.DamageFlash = 3.0; // teleport stomp does 10k points...
    pex.DamageFlashType = DmgType;

    // for Korax Arena
    pex.Damaged(inflictor);
  }

  // do the damage
  Health -= damage;

  // fix internal player object damage, and apply "buddha"
  if (bIsPlayer) {
    if (Health < 1 && isBuddha) Health = 1; // "buddha" cheat
    // update internal player object health
    Player.Health = max(0, Health);
  }

  if (Health <= 0) {
    // death
    Special1 = damage;
    // check for special fire damage or ice damage deaths
    if (nameicmp(DmgType, 'Fire') == 0) {
      if (bIsPlayer && !PlayerEx(Player).MorphTime) {
        // check for flame death
        if (!inflictor || !inflictor.bConditionalFireDamage || (Health > -50 && damage > 25)) DamageType = 'Fire';
      } else {
        DamageType = 'Fire'; // for obituary
      }
    } else {
      DamageType = DmgType; // for obituary
    }
    if (source && source.IsServant()) {
      // minotaur's kills go to his master
      EntityEx masta = source.Tracer;
      // make sure still alive and not a pointer to fighter head
      if (masta && masta.bIsPlayer && masta.Player.MO == masta) source = masta;
    }
    Died(source, inflictor);
    return damage;
  }

  if (Health <= WoundHealth) {
    state WoundState = FindState('Wound', DmgType, false);
    if (WoundState) {
      SetState(WoundState);
      return damage;
    }
  }

  float PChance = FindPainChance(DmgType, PainChance);

  if (!bNoPain && !bSkullFly && damage >= PainThreshold && Random() < PChance) {
    if (inflictor && inflictor.bLightning) {
      if ((P_Random() < 96 && !inflictor.bPainless) || inflictor.bForcePain) {
        bJustHit = true; // fight back!
        SetPainState(DmgType);
      } else {
        // "electrocute" the target
        bFullBright = true;
        if (HowlSound && bMonster && P_Random() < 128 && !GetSoundPlayingInfo(self, GetSoundID(HowlSound))) {
          PlaySound(HowlSound, CHAN_VOICE);
        }
      }
    } else {
      bJustHit = true; // fight back!
      if (!inflictor || (inflictor && (!inflictor.bPainless || inflictor.bForcePain))) {
        SetPainState(DmgType);
      }
      if (inflictor && inflictor.bHowlVictims) {
        if (HowlSound && bMonster && P_Random() < 128 &&
            !GetSoundPlayingInfo(self, GetSoundID(HowlSound)))
        {
          PlaySound(HowlSound, CHAN_VOICE);
        }
      }
    }
  }

  ReactionCount = 0; // we're awake now...

  if (source) {
    if (source == Target) {
      Threshold = BASETHRESHOLD;
      if (State == IdleState && SeeState) SetState(SeeState);
    } else if (OkayToSwitchTarget(source)) {
      // Target actor is not intent on another actor,
      // so make him chase after source

      // killough 2/15/98: remember last enemy, to prevent
      // sleeping early; 2/21/98: Place priority on players
      if (!LastEnemy || (!LastEnemy.bIsPlayer && !TIDToHate) || LastEnemy.Health <= 0) {
        LastEnemy = Target; // remember last enemy - killough
      }
      Target = source;
      Threshold = BASETHRESHOLD;
      if (State == IdleState && SeeState) SetState(SeeState);
    }
  }

  return damage;
}


//==========================================================================
//
//  SetPainState
//
//==========================================================================
bool SetPainState (optional name DamageType, optional bool always) {
  auto pst = FindState('Pain', DamageType, false); // allow inexact states
  if (!pst) pst = FindState('Pain'); // just in case
  if (pst) {
    SetState(pst);
    return true;
  } else {
    if (always) SetState(pst);
    return false;
  }
}


//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================
int DoSpecialDamage (EntityEx victim, EntityEx source, int damage) {
  if (victim.bIsPlayer && MissilePoisonDamage > 0 && Level.Game.IsAuthority) {
    victim.PoisonPlayer(source, MissilePoisonDamage);
    damage >>= 1;
  }
  return damage;
}


//==========================================================================
//
//  TakeSpecialDamage
//
//==========================================================================
int TakeSpecialDamage (EntityEx inflictor, EntityEx source, int damage, name DmgType, optional bool forced) {
  if (bNoDamage && !forced) return 0;
  if (!Level.Game.IsAuthority) return 0;

  // always apply damage if actor has regular death state or no death states at all
  if (FindState('Death') || !HasSpecialStates('Death')) return damage;

  // if there's no corresponding death state, actor takes no damage at all
  if (nameicmp(DmgType, 'Ice') == 0) {
    if (FindState('Death', 'Ice', true)) {
      //return damage;
      if ((bIsPlayer || bMonster) && !bNoIceDeath) return damage;
    }
    return -1;
  }

  return (FindState('Death', DmgType, true) ? damage : -1);
}


//==========================================================================
//
//  OkayToSwitchTarget
//
//==========================================================================
bool OkayToSwitchTarget (EntityEx source) {
  if (!source) return false;
  if (source == self) return false; // don't hate self (can happen when shooting barrels)
  if (source.bReallyNeverTarget) return false;
  if (!source.bShootable) return false; // don't hate actors that cannot be hurt
  if (bNoTargetSwitch && Target) return false;
  if ((Master && source.IsA(GetClassName(Master.Class))) || // don't attack your master (or others of its type)
      (source.Master && IsA(GetClassName(source.Master.Class)))) // don't attack your minion (or those of others of your type)
  {
    if (!IsHostile(source) && // allow target switch if other is considered hostile
        (source.TID != TIDToHate || TIDToHate == 0) && // or has the tid we hate
        source.TIDToHate == TIDToHate) // or has different hate information
    {
      return false;
    }
  }
  if (bNoInfightSpecies && IsSameSpecies(self, source)) return false; // don't fight own species
  if (source.bNeverTarget && (source.TID != TIDToHate || TIDToHate == 0) && !IsHostile(source)) return false;
  if (Threshold && !bNoGrudge) return false;
  if (IsFriend(source)) return false; // don't hate friends

  int Inf = GetInfighting();
  if (Inf < 0 && !source.bIsPlayer && !IsHostile(source)) {
    // infighting is off, so don't target it if it's not hostile
    return false;
  }

  // don't target actors that hate the same thing
  if (TIDToHate && TIDToHate == source.TIDToHate) return false;

  if (source.bIsPlayer && bNoHatePlayers) return false;

  if (Target && Target.Health > 0 && TIDToHate &&
      Target.TID == TIDToHate && Random() < 0.5 && CanSee(Target))
  {
    // don't be too quick to give up things we hate
    return false;
  }

  return true;
}


//==========================================================================
//
//  Died
//
//==========================================================================
void Died (EntityEx source, EntityEx inflictor) {
  if (!Level.Game.IsAuthority) return;

  //printdebug("%C: DIED!", self);

  // calculate gibs health
  int GHealth = GibsHealth;
  if (!GHealth) {
    GHealth = int(float(-InitialHealth)*LineSpecialGameInfo(Level.Game).GibsHealthFactor);
  }
  // just in case; it should always be negative, but...
  if (GHealth > 0) GHealth = -GHealth;

  if (inflictor) {
    //printdebug("INFLICTOR: %C: bNoExtremeDeath=%B; bExtremeDeath=%B; health=%s; GHealth=%s", inflictor, inflictor.bNoExtremeDeath, inflictor.bExtremeDeath, Health, GHealth);
    if (inflictor.bNoExtremeDeath) {
      // prevent gibing animation
      Health = -1;
      GHealth = -1000;
    } else if (inflictor.bExtremeDeath) {
      // always extreme death
      Health = -5000;
      GHealth = -1000;
    }
  }

  // handle possible unmorph on death
  bool WasGibbed = (Health < GHealth);
  EntityEx RealSelf = none;
  int RealStyle = 0;
  int RealHealth = 0;

  if (MorphedDeath(RealSelf, RealStyle, RealHealth)) {
    if (!(RealStyle&MORPH_UNDOBYDEATHSAVES)) {
      if (WasGibbed) {
        int RealGibHealth = RealSelf.GibsHealth;
        if (!RealGibHealth) {
          RealGibHealth = int(float(-RealSelf.InitialHealth)*LineSpecialGameInfo(Level.Game).GibsHealthFactor);
        }
        if (RealSelf.Health >= RealGibHealth) {
          // if morphed was gibbed, so must original be (where allowed)
          RealSelf.Health = RealGibHealth -1;
        }
      }
      RealSelf.Died(source, inflictor);
    }
    return;
  }

  // notify actor's items
  for (Inventory Item = Inventory; Item; ) {
    Inventory invNext = Item.Inventory;
    Item.OwnerDied();
    Item = invNext;
  }

  if (source) {
    // set Target to the thing that killed it
    // it's needed for Strife's special dropped items
    Target = source;
  }

  if (source && source.bIsPlayer && PlayerEx(source.Player).IsWeaponAlwaysExtremeDeath()) {
    // always extreme death
    Health = -5000;
  }

  if (bIsPlayer && Level.bDeathSlideShow) {
    // start sad finale
    PlayerEx(Player).StartDeathSlideShow();
  }

  bShootable = false;
  bFloat = false;
  bSkullFly = false;
  if (!bNoGravKill) bNoGravity = false;
  bDropOff = true;
  // gozzo does it like this:
  //   only mosters and things with raise state can become corpses
  //   k8: not that i care even a little
  if (!bDontCorpse) {
    if (!bCorpse) {
      // relink, because corpses could have a smaller radius
      UnlinkFromWorld();
      bCorpse = true;
      LinkToWorld();
    }
    bPassMobj = false;
  }

  // [JM] Fire KILL type scripts for actor. Not needed for players, since they have the "DEATH" script type.
  //printdebug("DEAD: `%C`; bNoKillScripts=%B; bUseKillScripts=%B; bForceKillScripts=%B", self, bNoKillScripts, bUseKillScripts, Level.Game.bForceKillScripts);
  if (!bIsPlayer && !bNoKillScripts && (bUseKillScripts || Level.Game.bForceKillScripts)) {
    //printdebug("calling kill script for `%C`", self);
    XLevel.StartTypedACScripts(VLevel::SCRIPT_Kill, 0, 0, 0, Activator:self, Always:true, RunNow:true);
  }

  //FIXME: need compatibility flag
  float NewHeight = 0.0;
  if (nameEquCI(DamageType, 'Fire')) NewHeight = BurnHeight;
  if (!NewHeight) NewHeight = DeathHeight;
       if (NewHeight < 0.0) Height = 0.0;
  else if (NewHeight) Height = NewHeight;
  else Height /= 4.0;

  if ((bMonster || bIsPlayer) && GetCvarB('r_flip_corpses')) {
    bCorpseFlipped = (P_Random() >= 128);
  }

  if (Special && (!bSpecial || bMonster)) {
    // initiate monster death actions
    auto swd = SwitchableDecoration(self);
    if (!swd || !(swd.ActivationType&SwitchableDecoration::AF_NoDeathSpecial)) {
      Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2], Args[3], Args[4],
                                 nullptr, 0, (Level.bActivateOwnSpecial ? self : source));
    }
  }
  if (CountsAsKill()) ++Level.CurrentKills;
  if (source && source.bIsPlayer) {
    if (CountsAsKill()) {
      // count for intermission
      ++source.Player.KillCount;
    }
    PlayerEx(source.Player).KilledActor(self);
  } else if (!Level.Game.netgame && CountsAsKill()) {
    // count all monster deaths, even those caused by other monsters
    ++Level.Game.Players[0].KillCount;
  }

  if (bIsPlayer) {
    // display obituary
    PlayerEx(Player).DisplayObituary(inflictor, source, DamageType);

    XLevel.StartTypedACScripts(VLevel::SCRIPT_Death, 0, 0, 0, Activator:self, Always:true, RunNow:false);

    ++PlayerEx(Player).Deaths;

    // count environment kills against you
    if (!source) --Player.Frags;

    PlayerEx(Player).Killed(source, inflictor);

    bSolid = false;
    bFly = false;
    PlayerEx(Player).bDisableWeaponSwitch = false;
    Player.PlayerState = PST_DEAD;
    PlayerEx(Player).DropWeapon();
#ifdef FIXME
    if (Player == Level.Game.Players[consoleplayer] && automapactive) {
      // don't die in auto map, switch view prior to dying
      AM_Stop();
    }
#endif
  }

  bool extremeDeath = (Health < GHealth);

  state DeathState = none;
  if (DamageType) {
    // specialised death state for this damage type (ice, etc)
    if ((bIsPlayer || bMonster) && bNoIceDeath && nameEquCI(DamageType, 'Ice')) {
      // do nothing
    } else {
      if (extremeDeath) DeathState = FindState('Death.Extreme', DamageType, true);
      if (!DeathState) DeathState = FindState('Death', DamageType, true);
      if (!DeathState && nameEquCI(DamageType, 'Ice')) DeathState = FindState('GenericFreezeDeath');
      //print("%C: DamageType=%s; DeathState=%s", self, DamageType, DeathState);
    }
    /* old code
    DeathState = FindState('Death', DamageType, true);
    if (nameEquCI(DamageType, 'Ice') && !bNoIceDeath && (bIsPlayer || bMonster)) {
      if (FindState('Death', 'Ice', true)) {
        DeathState = FindState('Death', 'Ice', true);
      } else {
        DeathState = FindState('GenericFreezeDeath');
      }
    }
    */
  }

  if (!DeathState) {
    // don't pass damage type unless it's a massacre damage
    // k8: because dying barrel, for example, passes damage on
    if (!nameEquCI(DamageType, 'Massacre')) DamageType = '';

    //printdebug("%C: Health=%s; GHealth=%s", self, Health, GHealth);
    // extreme death? (typed extreme death already checked above)
    if (extremeDeath) {
      //DeathState = FindState('Death', 'Extreme', true);
      DeathState = FindState('Death', 'Extreme', true);
      if (DeathState) {
        // monsters will not cause blood sprays on each other, only the player
        if ((source && source.bIsPlayer) || (inflictor && inflictor.bIsPlayer)) {
          //printdebug("%C: doing EXTREME; src=%C; inf=%C", self, source, inflictor);
          SpawnBloodSprayHead(damage:InitialHealth, notDead:false, spawnBloodPool:true);
        }
      }
      //if (DeathState) printdebug("%C: FOUND XDEATH %s", self, DeathState);
    }

    // normal death
    if (!DeathState) DeathState = FindState('Death');
  }

  //printdebug("%C:   DeathState=%s", self, DeathState);

  if (DeathState) {
    //if (bIsPlayer) printdebug("%C: player pawn %shas is dying; source=%C; inflictor=%C; DeathState=%s", self, (self.Player && self.Player.MO == self ? "" : "(Voodoo Doll) "), source, inflictor, DeathState);
    SetState(DeathState);
    StateTime -= Random()*0.1;
    if (StateTime < 1.0/35.0) StateTime = 1.0/35.0;
    // remove static light if we are shootable (hack for various shootable lamps)
    /*
    if (bStaticLightSpawned && !bMonster && !bMissile && !bIsPlayer) {
      //bStaticLightSpawned = false; // do not reset this, or the thing will spawn dynamic lights
      Level.RemoveStaticLightByOwner(self);
    }
    */
  } else {
    if (bIsPlayer) printerror("%C: player pawn %shas no death state and will be destroyed; source=%C; inflictor=%C", self, (self.Player && self.Player.MO == self ? "" : "(Voodoo Doll) "), source, inflictor);
    Destroy();
  }
}


//==========================================================================
//
//  MorphedDeath
//
//==========================================================================
bool MorphedDeath (out EntityEx Morphed, out int MorphedStyle, out int MorphedHealth) {
  // May be a morphed player
  if (bIsPlayer && PlayerEx(Player).MorphTime &&
      (PlayerEx(Player).MorphStyle&MORPH_UNDOBYDEATH) &&
      PlayerEx(Player).MO)
  {
    int RealStyle = PlayerEx(Player).MorphStyle;
    int RealHealth = Health;
    if (PlayerEx(Player).UndoPlayerMorph(PlayerEx(Player).MorphStyle&MORPH_UNDOBYDEATHFORCED, PlayerEx(Player))) {
      Morphed = EntityEx(PlayerEx(Player).MO);
      MorphedStyle = RealStyle;
      MorphedHealth = RealHealth;
      return true;
    }
    return false;
  }

  return false;
}


//==========================================================================
//
//  PoisonPlayer
//
//  Sets up all data concerning poisoning
//
//==========================================================================
void PoisonPlayer (EntityEx poisoner, int poison) {
  if ((PlayerEx(Player).Cheats&PlayerEx::CF_GODMODE) || bInvulnerable) return;
  if (!Level.Game.IsAuthority) return;
  PlayerEx(Player).PoisonCount += poison;
  PlayerEx(Player).Poisoner = poisoner;
  PlayerEx(Player).PoisonerPlayer = (poisoner ? PlayerEx(poisoner.Player) : none);
  if (PlayerEx(Player).PoisonCount > 100) PlayerEx(Player).PoisonCount = 100;
  PlayerEx(Player).LastPoisonTime = XLevel.Time;
}


//==========================================================================
//
//  PoisonDamage
//
//  Similar to Actor::Damage
//
//==========================================================================
void PoisonDamage (EntityEx inflictor, EntityEx source, int damage, bool playPainSound) {
  if (Health <= 0) return;
  if (bInvulnerable && damage < 10000) return; // mobj is invulnerable
  if (!Level.Game.IsAuthority) return;

  bool isBuddha = false;
  if (bIsPlayer) {
    // take half damage in trainer mode
    damage = int(float(damage)*Level.World.GetDamageFactor());
    isBuddha = !!(PlayerEx(Player).Cheats&PlayerEx::CF_BUDDHA);
    if (!isBuddha && FindBuddhaPowerup()) isBuddha = true;

    if (damage < 1000 && ((PlayerEx(Player).Cheats&PlayerEx::CF_GODMODE) || bInvulnerable)) {
      return;
    }
    if (damage >= Player.Health && (Level.World.bSkillAutoUseHealth || Level.Game.deathmatch) &&
        !PlayerEx(Player).MorphTime)
    {
      // try to use some inventory health
      AutoUseHealth(damage-Player.Health+1);
    }
    Player.Health -= damage; // mirror mobj health here for Dave
    if (Player.Health < 0) Player.Health = 0;
    if (isBuddha && Player.Health < 1) Player.Health = 1;
    PlayerEx(Player).Attacker = source;
  }

  // do the damage
  Health -= damage;
  if (bIsPlayer && isBuddha && Health < 1) Health = 1;
  if (Health <= 0) {
    // death
    Special1 = damage;
    if (bIsPlayer && inflictor && !PlayerEx(Player).MorphTime) {
      // check for flame death
      if (nameicmp(inflictor.DamageType, 'Fire') == 0 && Health > -50 && damage > 25) {
        DamageType = 'Fire'; // for obituary
      } else {
        DamageType = inflictor.DamageType; // for obituary
      }
    }
    if (!DamageType) DamageType = 'Poison';
    Died(source, inflictor);
    return;
  }

  if (!(XLevel.TicTime&63) && playPainSound) SetPainState('Poison');
}
