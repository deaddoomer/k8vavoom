//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//  BLOOD UTILITIES
//**************************************************************************

const float BloodHeightMult = 0.65;


//==========================================================================
//
//  SpawnBloodParticles
//
//  pass some info to spawned blood actor, so decorate/vc can use 'em.
//  should be called on blood entity
//
//  Tracer, Target: bleeding Entity (can be none)
//  Args[0]: damage (can be 0)
//
//==========================================================================
final void SpawnBloodParticles (TVec Org, int damage) {
  if (!GetCvarB('r_particle_blood')) return;
  int c = P_Random()>>1;
  if (BloodColor) {
    c = -7+(c>>3);
    int r = clamp(((BloodColor>>16)&0xff)+c, 0, 255);
    int g = clamp(((BloodColor>>8)&0xff)+c, 0, 255);
    int b = clamp((BloodColor&0xff)+c, 0, 255);
    c = RGB(r, g, b);
    //print("BloodColor=0x%08x; c=0x%08x", BloodColor, c);
  } else {
    c = RGB(32+c, c>>4, c>>4);
  }
  foreach (int i; 0..MAXPLAYERS) {
    if (!Level.Game.Players[i]) continue;
    if (!Level.Game.Players[i].bSpawned) continue;
    PlayerEx(Level.Game.Players[i]).ParticleEffect(damage,
      LineSpecialLevelInfo::pt_static, 0, Org, 0.0,
      vector(32.0, 32.0, 32.0), 0.5, 10.0, 40.0,
      c/*color*/, 0.6, 0.0);
  }
}


//==========================================================================
//
//  SetBloodArgs
//
//  pass some info to spawned blood actor, so decorate/vc can use 'em.
//  should be called on blood entity
//
//  Tracer, Target: bleeding Entity (can be none)
//  Args[0]: damage (can be 0)
//
//==========================================================================
final void SetBloodArgs (EntityEx amaster, optional int damage) {
  self.Tracer = amaster;
  self.Target = amaster;
  self.Args[0] = damage;
}


//==========================================================================
//
//  BloodAddZClamped
//
//  set spos.z to spos.z+delta, but not higher than ceiling
//  delta will be clamped to [0..)
//
//==========================================================================
final void BloodAddZClamped (ref TVec spos, float delta, float aheight) {
  if (!delta) return;
  auto sec = XLevel.PointInSector(spos);
  aheight = fmax(0, aheight);
  float fz, cz;
  XLevel.GetSectorGapCoords(sec, spos, out fz, out cz);
  if (cz-fz <= aheight) return;
  spos.z += delta;
  spos.z = fclamp(fz, spos.z, cz-aheight);
  /*
  opening_t *open = BuildSectorOpeningsAt(sec, spos, SPF_NOBLOCKSHOOT); // each sector has at least one
  open = XLevel.FindOpening(open, spos.z, spos.z+fmax(0, aheight));
  if (open) {
    if (delta > 0) {
      // positive delta (up)
      spos.z = fmin(spos.z+delta, open.eceiling.splane.minz-1-fmax(0, aheight));
    } else {
      // negative delta (down)
      spos.z = fmax(spos.z+delta, open.efloor.splane.maxz+1);
    }
    //print("spz=%s; cmz=%s", spos.z, reg.ceiling.splane.minz);
  } else {
    spos.z += delta;
  }
  */
}


//==========================================================================
//
//  IsGood2SLineForBloodSplat
//
//==========================================================================
final bool IsGood2SLineForBloodSplat (const line_t *li) {
  // alpha check for various special fx (additive lines are mostly used for fx too)
  return
    li.special != LNSPEC_LineHorizon &&
    li.alpha > 0.6 &&
    !(li.flags&ML_ADDITIVE);
}


//==========================================================================
//
//  TraceSplat
//
//  trace line to the wall, so we can spawn decal on it.
//  returns `true` if wall was hit.
//  returns `false` if floor/ceiling was hit, or nothing was hit.
//  `dir` must be normalized.
//  (not anymore) if zofs is not given, use default entity vertical offset.
//
//  `only2S` means "spawn decals only on two-sided lines"
//
//  if `DecalName` is given, spawn decals
//
//==========================================================================
final bool TraceSplat (TVec org, TVec dir, float distance, optional trsplat_t *tr, optional float zofs,
                       optional name aDecalName, optional bool pass2S, optional bool only2S,
                       optional int atranslation, optional bool doRailings,
                       optional int shadeclr, optional float alpha,
                       optional name animator, optional bool permanent,
                       optional float angle)
{
  trsplat_t temptr;

  TVec shootOrigin = org;
  //ShootOrigin.z += Height*0.5-FloorClip;
  if (specified_zofs) {
    //shootOrigin.z += zofs;
    BloodAddZClamped(shootOrigin, zofs, 0);
  } else {
    //shootOrigin.z += (bIsPlayer ? PlayerEx(Player).GetAttackZOfs : 8.0);
  }

  TVec dst = shootOrigin+distance*dir;

  if (!tr) tr = &temptr;
  tr->org = org;
  tr->hit = dst;
  tr->line = nullptr;
  tr->sec = nullptr;
  tr->didhit = false;
  tr->mobj = none;

  TVec hitPoint;
  line_t *li;
  intercept_t in;
  int side; // declared here, so VM don't need to clear it in the loop
  sector_t *sec; // declared here, so VM don't need to clear it in the loop

  // no line can block The Mighty Blood Splats!
  foreach PathTraverse(out in, org, dst, PT_ADDLINES/*|PT_NOOPENS*/|(doRailings ? PT_RAILINGS:0), SPF_NOBLOCKING, 0/*ML_BLOCKING|ML_BLOCKEVERYTHING*/) {
    if (in.bIsAPlane) {
      //if (bMissile) printdebug("%C: plane hit!", self);
      // hit floor or ceiling
      tr->hit = in.hitpoint;
      tr->didhit = !in.bIsASky;
      if (tr->didhit) tr->hit += in.plane.normal; // move it away a little
      return false;
    }

    if (in.bIsALine) {
      //if (bMissile) printdebug("%C: line #%d hit! blocking=%B", self, in.line-&XLevel.Lines[0], in.bIsABlockingLine);
      li = in.line;
      hitPoint = in.hitpoint; //shootOrigin+(distance*in.frac)*dir;

      sec = in.sector;
      side = in.side;

      if (!in.bIsASky) {
        if (Level.CompatTrace && li->frontsector == li->backsector) {
          if (aDecalName && (pass2S || only2S) && IsGood2SLineForBloodSplat(li)) {
            SpawnDecal(hitPoint, aDecalName, side, li, atranslation:atranslation!optional,
                       ashadeclr:shadeclr!optional, alpha:alpha!optional, animator:animator!optional,
                       permanent:permanent!optional, angle:angle!optional);
          }
        }

        if (!li->pobject && (li->flags&ML_TWOSIDED)) {
          // alpha check for various special fx (additive lines are mostly used for fx too)
          if (aDecalName && (pass2S || only2S) && IsGood2SLineForBloodSplat(li)) {
            SpawnDecal(hitPoint, aDecalName, side, li, atranslation:atranslation!optional,
                       ashadeclr:shadeclr!optional, alpha:alpha!optional, animator:animator!optional,
                       permanent:permanent!optional, angle:angle!optional);
          }
        }
      } else {
        // sky hit, stop
        tr->hit = hitPoint;
        //tr->didhit = true;
        tr->didhit = false;
        return false;
      }

      if (!in.bIsABlockingLine) {
        // 2d polyobjects blocks splats
        if (!li->pobject || li->pobject->posector) continue;
      }

      // hit blocking line
      tr->hit = hitPoint;
      tr->line = li;
      tr->sec = sec;
      tr->side = side;
      tr->didhit = true;

      if (aDecalName && !only2S) {
        SpawnDecal(hitPoint, aDecalName, side, li, atranslation:atranslation!optional,
                   ashadeclr:shadeclr!optional, alpha:alpha!optional, animator:animator!optional,
                   permanent:permanent!optional, angle:angle!optional);
      }

      return true;
    }
  }

  tr->hit = dst;
  tr->didhit = false;

  return false;
}


//==========================================================================
//
//  TraceBleed
//
//  trace line to the wall, spawn blood splats
//
//==========================================================================
final void TraceBleed (int damage, TVec pos, float angle, float pitch, bool radiusDamage) {
  if (damage < 1 || !IsBloodAllowed() || bNoBloodDecals) return;

  if (bIsPlayer && Player) {
    // gods don't bleed
    if ((PlayerEx(Player).Cheats&PlayerEx::CF_GODMODE)) return;
  }

  //k8: sorry, this should be one var, but meh
  //bool isHighDamage = false;
  bool isSmallDamage = false;

  name bclasssplat = /*GetBloodSplatDecalName()*/'BloodSplat';
  name bclasssmear = /*GetBloodSmearDecalName()*/'BloodSmear';

  if (radiusDamage) {
    //if (HasDecal(GetBloodSplatRadiusDecalName())) bclasssplat = GetBloodSplatRadiusDecalName();
    //if (HasDecal(GetBloodSmearRadiusDecalName())) bclasssmear = GetBloodSmearRadiusDecalName();
    bclasssplat = 'BloodSplatRadius';
    bclasssmear = 'BloodSmearRadius';
  }

  name bloodTypeName = bclasssplat;

  int count;
  float noise;

  if (damage < 15) {
    // for low damages, there is a chance to not spray blood at all
    if (damage <= 10) {
      if (P_Random() < /*1*//*60*/30) {
        if (!radiusDamage) return;
        isSmallDamage = true;
        //return;
      }
    }
    count = 1+P_Random()%3+1;
    noise = 11.25/256.0;
  } else if (damage < 25) {
    count = 2+P_Random()%3+2;
    noise = 22.5/256.0;
  } else {
    // for high damages, there is a chance to spray just one big glob of blood
    if (P_Random() < 24) {
      bloodTypeName = bclasssmear;
      count = 2+P_Random()%3+2;
      noise = 45.0/256.0;
      //isHighDamage = true;
    } else {
      count = 6+P_Random()%4+3;
      noise = 45.0/256.0;
    }
  }

  /*
  if (!HasDecal(bloodTypeName)) {
    //print("*** NO BLOOD DECAL '%s'", bloodTypeName);
    return;
  }
  */

  if (isSmallDamage && !radiusDamage) return; // oops

  // blood color
  int btrans = 0;
  if (!bDontTranslate) {
         if (BloodColor) btrans = R_GetBloodTranslation(BloodColor, allowadd:true); // this is fast, and allowed
    else if (BloodTranslation) btrans = BloodTranslation;
    else if (bCopyBloodTranslation) btrans = Translation;
  }
  //print("btrans for %C is %s", self, btrans);

  //int goreDecal = 0;
  trsplat_t tr;
  bool wsp = GetCvarB('blood_widespread');
  while (count-- > 0) {
    //float bleedang = AngleMod360(angle+(P_Random()-128)*noise);
    //k8: meh, spray it in all directions sometimes
    //float bleedang = (P_Random() >= 170 ? 360.0*Random() : AngleMod360(angle+(P_Random()-128)*noise));
    float bleedang = (wsp || P_Random() >= 220 ? 360.0*Random() : AngleMod360(angle+(P_Random()-128)*noise));
    float bleedpitch = AngleMod360(pitch+(P_Random()-128)*noise);
    float bpp = (bleedpitch >= 180 ? bleedpitch-360 : bleedpitch);
    //printdebug("BLOOD: bleedpitch   =%s %s", bleedpitch, bpp);
    //bleedpitch = AngleMod360(fclamp(bleedpitch-90, -70, 70)+90);
    bleedpitch = AngleMod360(fclamp(bpp, -18, 18));
    //printdebug("       bleedpitchfix=%s", bleedpitch);
    float cosp, sinp;
    sincos(bleedpitch, out sinp, out cosp);
    float bas, bac;
    sincos(bleedang, out bas, out bac);
    TVec vdir;
    vdir.x = cosp*bac;
    vdir.y = cosp*bas;
    vdir.z = -sinp;
    //printdebug("BLOOD: angle=%s; pitch=%s; bleedang=%s; bleedpitch=%s; vdir=%s", angle, pitch, bleedang, bleedpitch, vdir);

    if (isSmallDamage && !radiusDamage) continue;

    //print("TraceBleed: %s", bloodTypeName);
    if (!TraceSplat(pos, vdir, 172.0, &tr, 0, bloodTypeName, pass2S:true, only2S:false, atranslation:btrans)) {
      /*
      if (tr.didhit) {
        // hits some plane
        if (!goreDecal) goreDecal = (bloodTypeName.startsWith('K8Gore_') ? 1 : -1);
        if (goreDecal < 0) {
          printdebug("%C: spawning flat decal '%s'; pos=%s; hit=%s", self, bloodTypeName, pos, tr.hit);
          SpawnFlatDecal(tr.hit, bloodTypeName, 4, atranslation:btrans);
        }
      }
      */
    }
  }
}


//==========================================================================
//
//  SpawnBloodSprayHead
//
//  this will be called on XDeath
//
//  it has any sense only for Gore
//
//==========================================================================
final void SpawnBloodSprayHead (int damage, optional bool notDead, optional bool spawnBloodPool) {
  int bcc = int(GetCvarF('k8HSHeadKillBloodCount'));
  if (bcc <= 0) return;

  if (!BloodType || !GetCvarB('k8HSHeadKillBloodSpray') || !IsBloodAllowed()) return;

  if (GetCvarI('k8GoreOpt_Enabled_Override') < 0) return;
  if (!GetCvarB('k8GoreOpt_Enabled') && GetCvarI('k8GoreOpt_Enabled_Override') <= 0) return;

  if (BloodType.Name != 'Blood' && GetCvarI('k8GoreOpt_Enabled_Override') <= 0) {
    printdebug("%C: SpawnBloodSprayHead: non-standard blood, skipping", self);
    return;
  }

  #if 0
  name bloodClassName = 'K8Gore_BloodTransient';
  //print("bloodtype: %C/%C", self.BloodType, GetClassReplacee(self.BloodType));
  //printdebug("bloodClassName: %s; k8GoreOpt_Enabled_Override=%s; k8GoreOpt_Enabled=%B", bloodClassName, GetCvarI('k8GoreOpt_Enabled_Override'), GetCvarB('k8GoreOpt_Enabled'));
  class!Actor bloodClass = class!Actor(FindClass(bloodClassName));
  if (!bloodClass) return;
  // spawner will do this for us
  //bloodClass = class!Actor(GetClassReplacement(bloodClass));
  //if (!bloodClass) return;
  #else
  class!Actor bloodClass = class!Actor(GetClassReplacement(K8Gore_BloodTransient));
  #endif

  //print("BLOOD CLASS: %C (blcn=%s)", bloodClass, bloodClassName);
  bcc = clamp(bcc+int(Random()*7-3), 3, 32); // -3..3

  if (!specified_notDead) notDead = (damage < Health);

  if (!spawnBloodPool && notDead) bcc = max(1, bcc-bcc/3);

  float hgt = Height;
  if (hgt < 1 || (bMonster && bCorpse)) hgt = default.Height;

  TVec spos;
  foreach (; 0..bcc) {
    // k8: the blood will fly away on its own, but help it a little
    spos = Origin+vector((FRandomFull()*16-8)/10.0, (FRandomFull()*16-8)/10.0);
    float zmax = hgt+((FRandomFull()*22-11)/10.0);
    BloodAddZClamped(spos, zmax, bloodClass.default.Height);
    EntityEx bld = EntityEx(Level.Spawn(bloodClass, spos)); // optional TAVec AAngles, optional mthing_t *mthing, optional bool AllowReplace
    if (!bld) break; // limiter hit, no reason to try more
    bld.CopyBloodTranslations(self, copyNormalTranslation:true);
    bld.SetBloodArgs(self, damage);
    bld.Velocity = Velocity;
  }
}


//==========================================================================
//
//  SpawnBlood
//
//==========================================================================
final void SpawnBlood (TVec Org, int damage, optional TVec shootOrg, optional float zofs) {
  if (!BloodType || !IsBloodAllowed()) return;

  class!Actor bloodClass = class!Actor(GetClassReplacement(BloodType));
  if (!bloodClass) return;

  // keep z, but set x and y to our coords
  //Org.x = Origin.x;
  //Org.y = Origin.y;

  if (specified_shootOrg && !bloodClass.default.bBloodDisableSplats) {
    TVec goup = Origin;
    //if (Radius > 0) goup.z += Radius+4+Random()*4;
    // it just looks better this way; originally `Radius` was a typo, but it is roughly at half-height
    goup.z += fmax(0.0, Height*BloodHeightMult)+4+Random()*4;
    TAVec av;
    TVec v = goup-shootOrg;
    VectorAngles(v, out av);
    //print("bleed angles: vel=%s; pitch=%s; roll=%s; yaw=%s", v, av.pitch, av.roll, av.yaw);
    TraceBleed(damage, goup, av.yaw, av.pitch, false);
  }

  //Org.z += (Random()-Random())*4.0;
  if (!specified_zofs) zofs = (Random()-Random())*4.0;
  BloodAddZClamped(Org, zofs, (bloodClass ? bloodClass.default.Height : 0));
  damage = (damage > 255 ? 255 : damage);

  if (GetCvarB('r_particle_blood')) SpawnBloodParticles(Org, damage);

  EntityEx A = Spawn(bloodClass, Org);
  //printdebug("%C:000: spawning blood! (%C)", self, bloodClass);
  if (!A) return; // oops
  //printdebug("%C:001: spawned blood! (%C)", self, A);
  A.CopyBloodTranslations(self, copyNormalTranslation:true);
  //print("spawned blood `%C` for `%C` (bt=%s; A.bDontTranslate=%B; a.t=%s; a.bt=%s)", A, self, BloodTranslation, A.bDontTranslate, A.Translation, A.BloodTranslation);
  A.SetBloodArgs(self, damage:damage);

  //print("shooter vel=%s; A vel=%s", Velocity, A.Velocity);

  A.Velocity.z = 2.0*35.0;
  if (LineSpecialGameInfo(Level.Game).bBloodRandomiseTime) {
    if (!A.Class.Name.nameStartsWithCI('K8Gore_')) {
      A.StateTime -= Random()*0.1;
      if (A.StateTime < 0.1) A.StateTime = 0.1;
    }
  }
  //if (!A.bDontTranslate) A.CopyTranslations(self);
  //if (BloodTranslation && !A.bDontTranslate) { A.Translation = BloodTranslation; A.BloodTranslation = BloodTranslation; }
  A.CopyBloodTranslations(self, copyNormalTranslation:true);

  // gore mod blood is detached
  if (!A.bDetachFromServer) {
    if ((!GetCvarI('k8GoreOpt_Enabled_Override') && GetCvarB('k8GoreOpt_Enabled')) || GetCvarI('k8GoreOpt_Enabled_Override') > 0) return;
    if (LineSpecialGameInfo(Level.Game).bBloodSpray) {
      if (damage > 13) {
        state sps = A.FindState('Spray');
        if (sps) A.SetState(sps);
      } else {
        damage += 2;
      }
    }
    if (GetCvarB('zdoom_blood_hack')) {
      if (damage <= 12 && damage >= 9) {
        A.SetState(GetStatePlus(A.IdleState, 1));
        //A.SetInitialState(GetStatePlus(A.IdleState, 1));
      } else if (damage < 9) {
        A.SetState(GetStatePlus(A.IdleState, 2));
        //A.SetInitialState(GetStatePlus(A.IdleState, 2));
      }
    }
  }

  //printdebug("%C:%s: spawned blood (%s)", A, A.UniqueId, A.State);
}


//==========================================================================
//
//  SpawnBloodAtHead
//
//==========================================================================
final void SpawnBloodAtHead (int damage, optional TVec shootOrg) {
  TVec goup = Origin;
  //float zofs = (Radius > 0 ? Radius+4+Random()*4 : 0);
  // it just looks better this way; originally `Radius` was a typo, but it is roughly at half-height
  float zofs = (Height > 0 ? fmax(0.0, Height*0.85)+4+Random()*4 : 0);
  SpawnBlood(goup, damage, shootOrg!optional, zofs);
}


//==========================================================================
//
//  SpawnBloodAtHeadExplosion
//
//==========================================================================
final void SpawnBloodAtHeadExplosion (int damage, optional EntityEx src) {
  if (damage < 1 || !BloodType || !IsBloodAllowed()) return;

  class!Actor bloodClass = class!Actor(GetClassReplacement(BloodType));
  if (!bloodClass) return;

  if (src && !bloodClass.default.bBloodDisableSplats) {
    TVec goup = Origin;
    //if (Radius > 0) goup.z += Radius+4+Random()*4;
    // it just looks better this way; originally `Radius` was a typo, but it is roughly at half-height
    goup.z += fmax(0.0, Height*BloodHeightMult)+4+Random()*4;
    TAVec av;
    TVec v;
    if (src.bIsPlayer) v = goup-src.Origin; else v = goup-src.Velocity;
    VectorAngles(v, out av);
    //print("bleed angles: vel=(%f,%f,%f); pitch=%f; roll=%f; yaw=%f", v.x, v.y, v.z, av.pitch, av.roll, av.yaw);
    TraceBleed(damage, goup, av.yaw, av.pitch, true);
  }

  // don't spawn excessive blood for Gore mod, it have enough blood already ;-)
  bool goremod =
    (!GetCvarI('k8GoreOpt_Enabled_Override') && GetCvarB('k8GoreOpt_Enabled')) ||
    (GetCvarI('k8GoreOpt_Enabled_Override') > 0);
  //printdebug("%C: GM=%B", self, goremod);
  //goremod = false;

  bool isSmallDamage = false;
  bool isHighDamage = false;

       if (damage <= 10) isSmallDamage = true;
  else if (damage < 25) {}
  else isHighDamage = true;

  SpawnBloodAtHead(damage);
  if (!goremod) SpawnBloodAtHead(damage);
  if (!isSmallDamage) {
    if (Health <= damage) SpawnBloodAtHead(damage);
    SpawnBloodAtHead(damage);
  }

  if (goremod) return;

  // spawn more blood for high damage
  if (isHighDamage) {
    if (Health <= damage) SpawnBloodAtHead(damage);
    if (Health <= damage) SpawnBloodAtHead(damage);
    SpawnBloodAtHead(damage);
    SpawnBloodAtHead(damage);
  } else {
    if (Health <= damage) SpawnBloodAtHead(damage);
    if (Health <= damage) SpawnBloodAtHead(damage);
  }
}


//==========================================================================
//
//  SpawnBloodSplatter
//
//==========================================================================
final void SpawnBloodSplatter (TVec org, int damage, TVec shootOrg) {
  if (damage < 1 || !BloodSplatterType || !IsBloodAllowed()) return;

  class!Actor bloodClass = class!Actor(GetClassReplacement(BloodSplatterType));
  if (!bloodClass) return;

  damage = (damage > 255 ? 255 : damage);

  if (GetCvarB('r_particle_blood')) SpawnBloodParticles(org, damage);

  if (!bloodClass.default.bBloodDisableSplats) {
    TAVec av;
    TVec v = org-shootOrg;
    VectorAngles(v, out av);
    //print("bleed angles: vel=(%f,%f,%f); pitch=%f; roll=%f; yaw=%f", v.x, v.y, v.z, av.pitch, av.roll, av.yaw);
    TraceBleed(damage, org, av.yaw, av.pitch, false);
  }

  EntityEx mo = Spawn(bloodClass, org);
  if (!mo) return;
  mo.SetBloodArgs(self, damage);
  mo.Target = self;
  mo.Velocity.x = (Random()-Random())*4.0*35.0;
  mo.Velocity.y = (Random()-Random())*4.0*35.0;
  mo.Velocity.z = 3.0*35.0;
  mo.CopyBloodTranslations(self, copyNormalTranslation:true);
}


//===========================================================================
//
//  SpawnBloodSplatter2
//
//===========================================================================
final void SpawnBloodSplatter2 (TVec org, TVec shootOrg) {
  if (!AxeBloodType || !IsBloodAllowed()) return;

  class!Actor bloodClass = class!Actor(GetClassReplacement(AxeBloodType));
  if (!bloodClass) return;

  org.x += (Random()-0.5)*8.0;
  org.y += (Random()-0.5)*8.0;

  if (!bloodClass.default.bBloodDisableSplats) {
    TAVec av;
    TVec v = org-shootOrg;
    VectorAngles(v, out av);
    //print("bleed angles: vel=(%f,%f,%f); pitch=%f; roll=%f; yaw=%f", v.x, v.y, v.z, av.pitch, av.roll, av.yaw);
    TraceBleed(500, org, av.yaw, av.pitch, false);
  }

  EntityEx mo = Spawn(bloodClass, org);
  if (!mo) return;
  mo.SetBloodArgs(self);
  mo.Target = self;
  mo.CopyBloodTranslations(self, copyNormalTranslation:true);
}


//==========================================================================
//
//  SpawnBloodRipper
//
//==========================================================================
final void SpawnBloodRipper (int damage, optional EntityEx src) {
  if (damage <= 0 || !BloodType || !IsBloodAllowed()) return;

  class!Actor bloodClass = class!Actor(GetClassReplacement(BloodType));
  if (!bloodClass) return;

  float ltm = XLevel.Time;
  if (lastRipBloodTime >= ltm) return;
  lastRipBloodTime = ltm+fmax(0.2, GetCvarF('blood_ripper_delay')); // arbitrary lower limit

  TVec org;
  org.x = Origin.x+(Random()-Random())*16.0;
  org.y = Origin.y+(Random()-Random())*16.0;
  org.z = Origin.z;
  BloodAddZClamped(org, (Random()-Random())*16.0, bloodClass.default.Height);

  EntityEx th = Spawn(bloodClass, org);
  if (!th) return; // limiter hit
  th.SetBloodArgs(self);
  if (LineSpecialGameInfo(Level.Game).bRipperBloodNoGravity) th.bNoGravity = true;
  th.Velocity.x = Velocity.x/2.0;
  th.Velocity.y = Velocity.y/2.0;
  th.StateTime += Random()*0.1;
  th.CopyBloodTranslations(self, copyNormalTranslation:true);

  //if (damage > 0) SpawnBloodAtHeadExplosion(damage, src!optional);
}
