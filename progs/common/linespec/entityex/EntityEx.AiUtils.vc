//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************

//==========================================================================
//
//  CheckFovTo
//
//  zero fov means "cannot see"
//
//==========================================================================
final bool CheckFovTo (Entity ent, float fov) {
  if (!ent) return false;
  fov = fabs(fov);
  if (fov >= 360) return true; // all around vision
  if (!fov) return false; // cannot see

  // (90..270) -- back
  //float anOld = AngleMod360(atan2(ent.Origin.y-Origin.y, ent.Origin.x-Origin.x)-Angles.yaw);

  // positive: ent is to the right; negative: ent is to the left
  float an = fabs(AngleDiff(atan2(ent.Origin.y-Origin.y, ent.Origin.x-Origin.x), Angles.yaw));

  //print("*** %C -> %C: an=%s; (new:%B  old:%B)", self, ent, an, (an < fov*0.5), (anOld <= 90 || anOld >= 270.0));
  //return false;
  return (an <= fov*0.5);
}


//==========================================================================
//
//  CheckMeleeRange
//
//==========================================================================
final bool CheckMeleeRange () {
  if (!Target) return false;

  float dist = DistTo2(Target);
  if (dist >= MeleeRange+Target.Radius) return false;

  // if moving toward goal, then we've reached it
  if (Target == Goal) return true;

  if (!bNoVerticalMeleeRange) {
    // don't melee things too far above or below actor
    if (Target.Origin.z > Origin.z+Height) return false;
    if (Target.Origin.z+Target.Height < Origin.z) return false;
  }

  if (!CanShoot(Target)) return false;

  return true;
}


//==========================================================================
//
//  CheckMeleeRange2
//
//==========================================================================
final bool CheckMeleeRange2 () {
  if (!Target) return false;

  float dist = DistTo(Target);
  if (dist >= DEFAULT_MELEERANGE*2.0 || dist < DEFAULT_MELEERANGE) return false;

  // enemy is higher than the attacker?
  if (Target.Origin.z > Origin.z+Height) return false;
  // attacker is higher?
  if (Origin.z > Target.Origin.z+Target.Height) return false;

  if (!CanShoot(Target)) return false;

  return true;
}


//==========================================================================
//
//  CheckMissileRange
//
//==========================================================================
final bool CheckMissileRange () {
  if (!Target || Target.IsDestroyed) return false;
  // moved down, to avoid visibility checks if target is too far away
  //if (!CanSee(Target)) return false;

  if (bJustHit) {
    // moved here to make checks faster
    if (!CanShoot(Target)) return false;
    // the target just hit the enemy, so fight back!
    bJustHit = false;
    return true;
  }

  if (ReactionCount) return false; // don't attack yet

  float dist = DistTo(Target)-64.0;
  if (!MeleeState) {
    // no melee attack, so fire more frequently
    dist -= 128.0;
  }

  if (MissileMaxRange && dist > MissileMaxRange) return false; // too far away
  if (MissileMinRange && MeleeState && dist < MissileMinRange) return false; // close for fist attack

  if (bTriggerHappy) dist /= 2.0; // attack from far away
  if (bMissileEvenMore) dist /= 8.0;

  float MChance = MissileChance*Level.World.GetAggressiveness();
  //print("MChance=%s; dist=%s", MChance, dist);
  if (dist > MChance) dist = MChance;

  if (Random()*256.0 < dist) return false;
  //print("  *** MISSILE");

  // moved here to make checks faster
  if (!CanShoot(Target)) return false;

  return true;
}


//==========================================================================
//
//  LookForMonsters
//
//==========================================================================
final bool LookForMonsters (optional bool deadInfight) {
  //k8: this is used only when player is dead, or we are in "perfect hatred" mode
  if (!(Level.PerfectHatredMode&LevelInfo::PHM_HUNT_MONSTERS)) {
    if (!deadInfight || !Level.Game.Players[0].MO.CanSee(self)) return false; // player can't see monster
  } else {
    if (!(Level.PerfectHatredMode&LevelInfo::PHM_WANDER) && !Level.Game.Players[0].MO.CanSee(self)) return false; // player can't see monster
  }
  int count = 0;
  Entity ee;
  //EntityEx mo;
  //foreach AllThinkers(EntityEx, mo)
  foreach RadiusThings(out ee, Origin, MONS_LOOK_RANGE+8) {
    EntityEx mo = EntityEx(ee);
    if (!mo) continue;
    if (!mo.bMonster || mo == self || mo.Health <= 0) continue; // not a valid monster
    if (mo.bReallyNeverTarget) continue;
    if (DistTo(mo) > MONS_LOOK_RANGE) continue; // out of range
    if (P_Random() < 16) continue; // skip
    if (count++ > MONS_LOOK_LIMIT) return false; // stop searching
    if (!CanSee(mo)) continue; // out of sight
    if (IsNotAttackingMaster(mo)) continue;
    // found a target monster
    Target = mo;
    return true;
  }
  return false;
}


//==========================================================================
//
//  LookForMonstersPH
//
//==========================================================================
final bool LookForMonstersPH () {
  //k8: this is used only in "perfect hatred" mode
  if (!(Level.PerfectHatredMode&LevelInfo::PHM_HUNT_MONSTERS)) return false;
  if (LookForMonsters()) return true; // just in case
  float currDist = float.inf;
  Actor bestDist = none;
  Actor mo;
  foreach AllThinkers(Actor, out mo) {
    if (!mo) continue;
    if (!mo.bMonster || mo == self || mo.Health <= 0) continue; // not a valid monster
    if (mo.bReallyNeverTarget) continue;
    float dist = DistTo(mo);
    if (dist > currDist) continue;
    if (P_Random() < 16) continue; // skip
    //if (!CanSee(mo)) continue; // out of sight
    if (IsNotAttackingMaster(mo)) continue;
    currDist = dist;
    bestDist = mo;
  }
  if (bestDist) {
    // found a target monster
    Target = bestDist;
    return true;
  }
  return false;
}


//==========================================================================
//
//  LookForMonsters2
//
//  If fov is 0, only look 180 degrees in front.
//  Use 360 to look all around.
//  Returns true if a monster is targeted.
//
//==========================================================================
final bool LookForMonsters2 (float fov, float minseedist, float maxseedist) {
  if (!maxseedist) maxseedist = 4096;
  minseedist = fmax(0, minseedist);
  maxseedist = fmax(0, maxseedist);
  float minseedistSq = minseedist*minseedist;
  float maxseedistSq = maxseedist*maxseedist;

  if (maxseedist > 0 && (minseedist <= 0 || minseedist < maxseedist)) {
    if (!fov) fov = 180;
    bool allaround = (fabs(fov) >= 360);

    Entity ee;
    foreach RadiusThings(out ee, Origin, maxseedist) {
      EntityEx mo = EntityEx(ee);
      if (!mo) continue;
      if (mo.Health <= 0) continue; // dead
      if (mo == self) continue; // self
      if (!mo.bMonster) continue; // not a monster
      if (bFriendly == mo.bFriendly) continue; // fiendly
      if (mo.bReallyNeverTarget) continue;

      // distance check
      float distSq = DistToSquared(mo);
      if (distSq > maxseedistSq) continue;
      if (minseedistSq && distSq < minseedistSq) continue;

      if (!CanSee(mo)) continue; // out of sight
      if (P_Random() > 128) continue; // sometimes skip

      if (!allaround) {
        /*
        float an = AngleMod360(atan2(mo.Origin.y-Origin.y, mo.Origin.x-Origin.x)-Angles.yaw);
        if (an > 90.0 && an < 270.0) {
          float dist = DistTo(mo);
          // if real close, react anyway
          if (dist > DEFAULT_MELEERANGE) continue; // behind back
        }
        */
        if (!CheckFovTo(mo, fov)) {
          //float dist = DistTo(mo);
          // if real close, react anyway
          if (distSq > DEFAULT_MELEERANGE*DEFAULT_MELEERANGE) continue; // behind back
        }
      }
      Target = mo;
      return true;
    }
  }

  // use goal as target
  if (Goal) {
    Target = Goal;
    return true;
  }

  // use last known enemy if no players sighted -- killough 2/15/98:
  if (LastEnemy && LastEnemy.Health > 0) {
    Target = LastEnemy;
    LastEnemy = none;
    return true;
  }

  return false;
}


//==========================================================================
//
//  LookForPlayers
//
//  If fov is 0, only look 180 degrees in front.
//  Use 360 to look all around.
//  Returns true if a player is targeted.
//
//==========================================================================
final bool LookForPlayers (float fov, optional float minseedist, optional float maxseedist) {
  int dph = Level.PerfectHatredMode;

  if (TIDToHate != 0) {
    if (LookForTID(fov, minseedist, maxseedist)) return true;
    if (!bHuntPlayers) {
      if (!(dph&(LevelInfo::PHM_HUNT_MONSTERS|LevelInfo::PHM_HUNT_PLAYERS))) return false;
    }
  } else if (bFriendly) {
    if (LookForMonsters2(fov, minseedist, maxseedist)) return true;
    if (!(dph&(LevelInfo::PHM_HUNT_MONSTERS|LevelInfo::PHM_HUNT_PLAYERS))) return false;
  }

  if (!Level.Game.netgame && Level.Game.Players[0] &&
      Level.Game.Players[0].bSpawned && Level.Game.Players[0].Health <= 0)
  {
    // single player game and player is dead, look for monsters
    if (GetCvarB('gm_death_infighting')) return LookForMonsters(true);
    if (dph&LevelInfo::PHM_HUNT_MONSTERS) return LookForMonsters();
    Target = none;
    return false;
  }

  // perfect hatred mode?
  if (dph) {
    if ((dph&LevelInfo::PHM_HUNT_MONSTERS) && LookForMonsters()) return true;
    if (!(dph&LevelInfo::PHM_HUNT_PLAYERS)) return false;
  }

  if (!fov) fov = 180;
  bool allaround = (fabs(fov) >= 360);

  if (!maxseedist) maxseedist = 4096;
  minseedist = fmax(0, minseedist);
  maxseedist = fmax(0, maxseedist);
  if (!maxseedist || minseedist >= maxseedist) return false; // cannot see anything
  float minseedistSq = minseedist*minseedist;
  float maxseedistSq = maxseedist*maxseedist;

  int c = 0;
  int stop = (LastLook-1)&(MAXPLAYERS-1);

  for (;; LastLook = (LastLook+1)&(MAXPLAYERS-1)) {
    BasePlayer P = Level.Game.Players[LastLook];
    if (!P && LastLook != stop) continue;

    if (LastLook == stop || c++ == 2) {
      // done looking
      if (!Target) {
        // use goal as target
        if (Goal) {
          Target = Goal;
          return true;
        }
        // use last known enemy if no players sighted -- killough 2/15/98:
        if (LastEnemy && LastEnemy.Health > 0) {
          Target = LastEnemy;
          LastEnemy = none;
          return true;
        }
      }
      return (Target == Goal && Goal);
    }

    if (!P.bSpawned || !P.MO) continue; // not spawned yet
    if (PlayerEx(P).bNoTarget) continue; // don't target
    if (P.Health <= 0) continue; // dead
    if (!EntityEx(P.MO).bShootable) continue; // not shootable

    // distance check
    float distSq = DistToSquared(P.MO);
    if (distSq > maxseedistSq) continue;
    if (minseedistSq && distSq < minseedistSq) continue;

    if (!CanSee(P.MO)) continue; // out of sight

    if (!allaround) {
      /*
      float an = AngleMod360(atan2(P.MO.Origin.y-Origin.y, P.MO.Origin.x-Origin.x)-Angles.yaw);
      if (an > 90.0 && an < 270.0) {
        float dist = DistTo(P.MO);
        // if real close, react anyway
        if (dist > DEFAULT_MELEERANGE) continue; // behind back
      }
      */
      if (!CheckFovTo(P.MO, fov)) {
        //float dist = DistTo(P.MO);
        // if real close, react anyway
        if (distSq > DEFAULT_MELEERANGE*DEFAULT_MELEERANGE) continue; // behind back
      }
    }

    if ((EntityEx(P.MO).bShadow && !Level.CompatInvisibility) || EntityEx(P.MO).bGhost) {
      // player is invisible
      if (DistTo(P.MO) > 2.0*DEFAULT_MELEERANGE && Length(P.MO.Velocity) < 5.0*35.0) {
        // player is sneaking - can't detect
        //return false;
        continue;
      }
      if (P_Random() < 225) {
        // player isn't sneaking, but still didn't detect
        //return false;
        continue;
      }
    }

    if (IsMaster(EntityEx(P.MO))) continue; // don't target master

    // need to be sure the reactiontime is 0 if the monster is leaving
    // its goal to go after a player
    if (Goal && Target == Goal) ReactionTime = 0.0;

    Target = EntityEx(P.MO);
    return true;
  }

  return false;
}


//============================================================================
//
//  LookForTID
//
//  Selects a live monster with the given TID
//
//  If fov is 0, only look 180 degrees in front.
//  Use 360 to look all around.
//  Returns true if a hating TID is targeted.
//
//============================================================================
final bool LookForTID (float fov, float minseedist, float maxseedist) {
  if (!fov) fov = 180;
  bool allaround = (fabs(fov) >= 360);

  if (!maxseedist) maxseedist = 4096;
  minseedist = fmax(0, minseedist);
  maxseedist = fmax(0, maxseedist);
  float minseedistSq = minseedist*minseedist;
  float maxseedistSq = maxseedist*maxseedist;

  if (!maxseedist || minseedist >= maxseedist) return false;

  Entity Tmp;

  if (minseedist < 64) {
    foreach RadiusThings(Tmp, Origin, fmin(maxseedist, 64.0)) {
      if (!EntityEx(Tmp).bShootable) continue; // not shootable
      if (Tmp == self) continue;
      if (Tmp.Health <= 0) continue; // dead
      if (EntityEx(Tmp).bDormant) continue; // skip dormant things

      EntityEx Other;
      if (Tmp.TID == TIDToHate) {
        // good one
        Other = EntityEx(Tmp);
      } else if (EntityEx(Tmp).Target && EntityEx(Tmp).Target.TID == TIDToHate) {
        // if it attacks something with given TID, hate it too
        Other = EntityEx(Tmp).Target;
        if (!Other.bShootable || Other.Health <= 0 || Other.bDormant) continue;
      } else {
        continue;
      }

      // distance check
      float distSq = DistToSquared(Other);
      if (distSq > maxseedistSq) continue;
      if (minseedistSq && distSq < minseedistSq) continue;

      if (!bNoSightCheck && !CanSee(Other)) continue; // out of sight

      // need to be sure the reactiontime is 0 if the monster is leaving
      // its goal to go after a player
      if (Goal && Target == Goal) ReactionTime = 0.0;

      Target = Other;
      LastLookActor = none;
      return true;
    }
  }

  bool ReachedEnd = false;
  // Look for between 7 and 38 hatees at a time
  int Cnt = (P_Random()&31)+7;
  for (Tmp = Level.FindMobjFromTID(TIDToHate, LastLookActor);
       Tmp != LastLookActor;
       Tmp = Level.FindMobjFromTID(TIDToHate, Tmp))
  {
    if (!Tmp) {
      if (ReachedEnd) {
        // we have cycled through the entire list at least once
        // so let's abort because even if we continue nothing can
        // be found
        break;
      }
      ReachedEnd = true;
      continue;
    }

    EntityEx Other = EntityEx(Tmp);

    if (!Other.bShootable) continue; // not a shotable
    if (Other == self) continue; // don't hate self
    if (Other.Health <= 0) continue; // dead
    if (Other.bDormant) continue; // skip dormant things

    // distance check
    float distSq = DistToSquared(Other);
    if (distSq > maxseedistSq) continue;
    if (minseedistSq && distSq < minseedistSq) continue;

    if (--Cnt == 0) break;

    if (!bNoSightCheck) {
      if (!CanSee(Other)) continue; // out of sight
      if (!allaround) {
        /*
        float an = AngleMod360(atan2(Other.Origin.y-Origin.y, Other.Origin.x-Origin.x)-Angles.yaw);
        if (an > 90.0 && an < 270.0) {
          float dist = DistTo(Other);
          // if real close, react anyway
          if (dist > DEFAULT_MELEERANGE) continue; // behind back
        }
        */
        if (!CheckFovTo(Other, fov)) {
          //float dist = DistTo(Other);
          // if real close, react anyway
          if (distSq > DEFAULT_MELEERANGE*DEFAULT_MELEERANGE) continue; // behind back
        }
      }
    }

    // need to be sure the reactiontime is 0 if the monster is leaving
    // its goal to go after something else
    if (Goal && Target == Goal) ReactionTime = 0.0;

    Target = Other;
    LastLookActor = Other;
    return true;
  }

  LastLookActor = Tmp;
  if (!Target) {
    // use goal as target
    if (Goal) {
      Target = Goal;
      return true;
    }
    // use last known enemy if no hatee sighted -- killough 2/15/98:
    if (LastEnemy && LastEnemy.Health > 0) {
      Target = LastEnemy;
      LastEnemy = none;
      return true;
    }
  }

  return false;
}


//==========================================================================
//
//  StepMove
//
//  Move in the current direction, returns false if the move is blocked.
//
//==========================================================================
final bool StepMove () {
  if (bBlasted) return true;
  if (MoveDir == DI_NODIR) return false;

  // instead of yanking non-floating monsters to the ground,
  // let gravity drop them down, unless they're moving down a step
  if (!bNoGravity && Origin.z > FloorZ && !bOnMobj) {
    if (Origin.z <= FloorZ+MaxStepHeight) {
      Origin.z = FloorZ;
    } else {
      return false;
    }
  }

#ifdef RANGECHECK
  if (MoveDir >= 8 || MoveDir < 0) Error("Weird MoveDir!");
#endif

  float origx = Origin.x;
  float origy = Origin.y;
  float deltax = Speed/35.0*LineSpecialGameInfo(Level.Game).xspeed[MoveDir];
  float deltay = Speed/35.0*LineSpecialGameInfo(Level.Game).yspeed[MoveDir];
  float tryx = origx+deltax;
  float tryy = origy+deltay;

  // like P_XYMovement this should do multiple moves if the step size is too large
  float maxmvdist = Radius;
  int steps = 1;

  float xspeed;
  float yspeed;
  if (maxmvdist > 0.0) {
    xspeed = fabs(deltax);
    yspeed = fabs(deltay);
    if (xspeed > yspeed) {
      if (xspeed > maxmvdist) steps = 1+int(xspeed/maxmvdist);
    } else {
      if (yspeed > maxmvdist) steps = 1+int(yspeed/maxmvdist);
    }
  }

  bool try_ok = true;
  bool dropoff = false;
  tmtrace_t tmtrace;
  //auto oldRadius = Radius;
  foreach (int i; 1..steps) {
    // killough 10/98: allow actors to drop off of taller ledges sometimes
    // dropoff==1 means only up to 128 high, and only if the target is
    // immediately on the other side of the line
    if (bJumpDown && Target && !Target.IsFriend(self) &&
        DistTo(Target) < 144.0 && P_Random() < 235 &&
        !(tmtrace.FloorZ-tmtrace.DropOffZ > 128.0 ||
          !Target || Target.Origin.z > tmtrace.DropOffZ))
    {
      dropoff = true;
    }
    try_ok = TryMoveEx(out tmtrace, vector(origx+(deltax/float(steps*i)), origy+(deltay/float(steps*i)), Origin.z), AllowDropOff:dropoff);
    if (!try_ok) break;
  }
  //Radius = oldRadius;

  // killough 3/15/98: don't jump over dropoffs
  if (try_ok) {
    // killough 10/98: allow actors to drop off of taller ledges sometimes
    // dropoff==1 means only up to 128 high, and only if the target is
    // immediately on the other side of the line.
    if (bJumpDown && Target && !Target.IsFriend(self) &&
        DistTo(Target) < 144.0 && P_Random() < 235 &&
        !(tmtrace.FloorZ-tmtrace.DropOffZ > 128.0 ||
          !Target || Target.Origin.z > tmtrace.DropOffZ))
    {
      dropoff = true;
    }
    try_ok = TryMoveEx(out tmtrace, vector(tryx, tryy, Origin.z), AllowDropOff:dropoff);
  }

  if (!try_ok) {
    // open any specials
    if (bFloat && tmtrace.bFloatOk) {
      float savedz = Origin.z;

      // must adjust height
      if (Origin.z < tmtrace.FloorZ) {
        Origin.z += FloatSpeed*2.0*Level.Game.frametime;
      } else {
        Origin.z -= FloatSpeed*2.0*Level.Game.frametime;
      }

      // check to make sure there's nothing in the way of the float
      if (TestMobjZ()) {
        bInFloat = true;
        return true;
      }
      Origin.z = savedz;
    }

    if (bCanJump && !bFloat && tmtrace.bFloatOk &&
        (Origin.z <= FloorZ || bOnMobj) && !JumpTime)
    {
      if (tmtrace.FloorZ-Origin.z <= 48.0 && Target &&
          tmtrace.FloorZ-Target.Origin.z <= 48.0)
      {
        float drDeltaX;
        float drDeltaY;
        TAVec ang;

        CheckDropOff(drDeltaX, drDeltaY);
        TVec dir = Target.Origin-Origin;
        VectorAngles(dir, out ang);

        if (drDeltaX > 0.0) {
          Velocity.x += 0.6*35.0*cos(ang.yaw);
        } else {
          Velocity.x += 0.6*35.0*cos(-ang.yaw);
        }

        if (drDeltaY > 0.0) {
          Velocity.y += 0.6*35.0*sin(ang.yaw);
        } else {
          Velocity.y += 0.6*35.0*sin(-ang.yaw);
        }
        Velocity.z = (JumpVelZ*1.1)*35.0;
        bOnMobj = false;
        JumpTime = 0.5;
        return true;
      }
    }

    if (!tmtrace.SpecHit.length) return false;

    MoveDir = DI_NODIR;

    // if the special is not a door that can be opened, return false
    //
    // killough 8/9/98: this is what caused monsters to get stuck in
    // doortracks, because it thought that the monster freed itself
    // by opening a door, even if it was moving towards the doortrack,
    // and not the door itself.
    //
    // killough 9/9/98: If a line blocking the monster is activated,
    // return true 90% of the time. If a line blocking the monster is
    // not activated, but some other line is, return false 90% of the
    // time. A bit of randomness is needed to ensure it's free from
    // lockups, but for most cases, it returns the correct result.
    //
    // Do NOT simply return false 1/4th of the time (causes monsters to
    // back out when they shouldn't, and creates secondary stickiness).

    int good = 0;
    if (!bNoTrigger) {
      while (tmtrace.SpecHit.length) {
        line_t *ld = tmtrace.SpecHit[$-1];
        tmtrace.SpecHit.length -= 1;
        // if the special is not a door that can be opened, return false
        if ((bCanUseWalls && LineSpecialLevelInfo(Level).ActivateLine(ld, self, 0, SPAC_Use)) ||
            (bActivatePushWall && LineSpecialLevelInfo(Level).ActivateLine(ld, self, 0, SPAC_Push)))
        {
          good |= (ld == tmtrace.BlockingLine ? 1 : 2); //true;
        }
      }
    }
    return good && ((P_Random() >= 203)^(good&1));
  } else {
    bInFloat = false;
  }

  if (!bFloat && !bNoGravity && !bDropOff && !bOnMobj) {
    if (Origin.z > FloorZ) HitFloorType();
    Origin.z = FloorZ;
  }

  return true;
}


//==========================================================================
//
//  TryWalk
//
//  Attempts to move actor in its current (ob->moveangle) direction.
//  If blocked by either a wall or an actor returns FALSE.
//  If move is either clear of block only by a door, returns TRUE and sets.
//  If a door is in the way, an OpenDoor call is made to start it opening.
//
//==========================================================================
final bool TryWalk () {
  if (!StepMove()) return false;
  MoveCount = P_Random()&15;
  return true;
}


//==========================================================================
//
//  DO_NewChaseDir
//
//==========================================================================
final void DO_NewChaseDir (float deltax, float deltay) {
  int[3] d;

  int olddir = MoveDir;
  int turnaround = LineSpecialGameInfo(Level.Game).opposite[olddir];

       if (deltax > 10.0) d[1] = DI_EAST;
  else if (deltax < -10.0) d[1] = DI_WEST;
  else d[1] = DI_NODIR;

       if (deltay < -10.0) d[2] = DI_SOUTH;
  else if (deltay > 10.0) d[2] = DI_NORTH;
  else d[2] = DI_NODIR;

  // try direct route
  if (d[1] != DI_NODIR && d[2] != DI_NODIR) {
    MoveDir = LineSpecialGameInfo(Level.Game).diags[((deltay < 0.0)<<1)+(deltax > 0.0)];
    if (MoveDir != turnaround && TryWalk()) return;
  }

  // try other directions
  if (P_Random() > 200 || fabs(deltay) > fabs(deltax)) {
    int tdir = d[1];
    d[1] = d[2];
    d[2] = tdir;
  }

  if (d[1] == turnaround) d[1] = DI_NODIR;
  if (d[2] == turnaround) d[2] = DI_NODIR;

  if (d[1] != DI_NODIR) {
    MoveDir = d[1];
    if (TryWalk()) return; // either moved forward or attacked
  }

  if (d[2] != DI_NODIR) {
    MoveDir = d[2];
    if (TryWalk()) return;
  }

  // there is no direct path to the player, so pick another direction
  if (olddir != DI_NODIR) {
    MoveDir = olddir;
    if (TryWalk()) return;
  }

  // randomly determine direction of search
  if (P_Random()&1) {
    for (int tdir = DI_EAST; tdir <= DI_SOUTHEAST; ++tdir) {
      if (tdir != turnaround) {
        MoveDir = tdir;
        if (TryWalk()) return;
      }
    }
  } else {
    for (int tdir = DI_SOUTHEAST; tdir != (DI_EAST-1); --tdir) {
      if (tdir != turnaround) {
        MoveDir = tdir;
        if (TryWalk()) return;
      }
    }
  }

  if (turnaround != DI_NODIR) {
    MoveDir = turnaround;
    if (TryWalk()) return;
  }

  MoveDir = DI_NODIR; // can not move
}


//=============================================================================
//
//  NewChaseDir
//
//  killough 9/8/98: Split into two functions
//
//=============================================================================
final void NewChaseDir () {
  if ((bChaseGoal || Goal == Target) && Goal) {
    NewChaseDirTo(Goal.Origin);
  } else {
    if (!Target) Error("NewChaseDir: called with no Target");
    NewChaseDirTo(Target.Origin, Target);
  }
}


//=============================================================================
//
//  NewChaseDirTo
//
//  killough 9/8/98: Split into two functions
//
//=============================================================================
final void NewChaseDirTo (TVec destination, optional EntityEx aTarget) {
  float deltax = destination.x-Origin.x;
  float deltay = destination.y-Origin.y;

  if (aTarget) {
    if (!bNoFear) {
      if ((aTarget.bIsPlayer && (PlayerEx(aTarget.Player).Cheats&PlayerEx::CF_FRIGHTENING)) || bFrightened) {
        deltax = -deltax;
        deltay = -deltay;
      }
    }
  }

  // killough 8/8/98: sometimes move away from target, keeping distance
  // Take advantage over an enemy without missiles, by keeping distance
  strafecount = 0;

  //FIXME:k8: this thing seems to do the reverse of what it should (mosters actually jumps the high dropoffs)
  // Try to move away from a dropoff
  if (FloorZ-DropOffZ > MaxDropoffHeight &&
      Origin.z <= FloorZ && !bDropOff && !bOnMobj && !bFloat &&
      (bAvoidsDropOffs || (!Level.CompatDropOff && GetCvar('monster_dropoff'))))
  {
    float AvoidDeltaX;
    float AvoidDeltaY;
    // We call CheckDropoff here to determine if the
    // bounding box actually needs to be used below
    CheckDropOff(AvoidDeltaX, AvoidDeltaY);

    if (AvoidDeltaX || AvoidDeltaY) {
      // [Graf Zahl] I have changed TryMove to only apply this logic when
      // being called from here. bAavoidingDropoff activates the code that
      // allows monsters to move away from a dropoff. This is different from
      // MBF which requires unconditional use of the altered logic and therefore
      // forcing a massive change in the monster behavior to use this.

      //printdebug("%C:%s: dropoff; delta=(%s,%s)", self, UniqueId, AvoidDeltaX, AvoidDeltaY);

      // use different dropoff movement logic in TryMove
      bAvoidingDropoff = true;
      DO_NewChaseDir(AvoidDeltaX, AvoidDeltaY);
      bAvoidingDropoff = false;

      // If moving away from dropoff, set movecount to 1 so that
      // small steps are taken to get monster away from dropoff.
      MoveCount = 1;
      return;
    }
  } else {
    float dist = Length2D(destination-GetCenter());

    if (aTarget && aTarget.Health > 0) {
      // Enemy target is alive
      if ((bAvoidMelee || GetCvar('monster_backing')) && MissileState &&
          /*actor->type != MT_SKULL &&*/
          ((!aTarget.MissileState && dist < DEFAULT_MELEERANGE*2.0) ||
           (aTarget.Player && PlayerEx(aTarget.Player).ReadyWeapon && PlayerEx(aTarget.Player).ReadyWeapon.bBotMelee &&
            dist < DEFAULT_MELEERANGE*3.0)))
      {
        // Back away from melee attacker
        strafecount = P_Random()&15;
        deltax = -deltax;
        deltay = -deltay;
      }
    }
  }
  DO_NewChaseDir(deltax, deltay);

  // if strafing, set movecount to strafecount so that old Doom
  // logic still works the same, except in the strafing part
  if (strafecount) MoveCount = strafecount;
}


//==========================================================================
//
//  RandomChaseDir
//
//==========================================================================
final void RandomChaseDir () {
  int olddir = MoveDir;
  int turnaround = LineSpecialGameInfo(Level.Game).opposite[olddir];

  if (P_Random()&1) {
    for (int tdir = DI_WEST; tdir <= DI_NORTHWEST; ++tdir) {
      if (tdir != turnaround) {
        MoveDir = tdir;
        if (TryWalk()) return;
      }
    }
  } else {
    for (int tdir = DI_NORTHWEST; tdir >= DI_WEST; --tdir) {
      if (tdir != turnaround) {
        MoveDir = tdir;
        if (TryWalk()) return;
      }
    }
  }

  // if the actor elects to continue in its current direction, let it do
  // so unless the way is blocked. then it must turn.
  int turndir = (P_Random()&1 ? -1 : 1);

  if (olddir == DI_NODIR) olddir = (P_Random()&7);

  for (int tdir = (olddir+turndir)&7; tdir != olddir; tdir = (tdir+turndir)&7) {
    if (tdir != turnaround) {
      MoveDir = tdir;
      if (TryWalk ()) return;
    }
  }

  if (turnaround != DI_NODIR) {
    MoveDir = turnaround;
    if (TryWalk()) {
      MoveCount = P_Random()&15;
      return;
    }
  }

  MoveDir = DI_NODIR; // can not move
}
