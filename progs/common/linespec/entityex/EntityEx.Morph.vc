//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
const float MORPHTIME = 40.0;

// Morph style states how morphing affects health and other effects in the
// game; only valid for players.
enum {
  MORPH_ADDSTAMINA          = 0x00000001, // player has a "power" instead of a "curse" (add stamina instead of limiting to health)
  MORPH_FULLHEALTH          = 0x00000002, // player uses new health semantics (!POWER => MaxHealth of animal, POWER => Normal health behaviour)
  MORPH_UNDOBYTOMEOFPOWER   = 0x00000004, // player unmorphs upon activating a Tome of Power
  MORPH_UNDOBYCHAOSDEVICE   = 0x00000008, // player unmorphs upon activating a Chaos Device
  MORPH_FAILNOTELEFRAG      = 0x00000010, // player stays morphed if unmorph by Tome of Power fails
  MORPH_FAILNOLAUGH         = 0x00000020, // player doesn't laugh if unmorph by Chaos Device fails
  MORPH_WHENINVULNERABLE    = 0x00000040, // player can morph (or scripted unmorph) when invulnerable but ONLY if doing it to themselves
  MORPH_LOSEACTUALWEAPON    = 0x00000080, // player loses specified morph weapon only (not "whichever they have when unmorphing")
  MORPH_NEWTIDBEHAVIOUR     = 0x00000100, // actor TID is by default transferred from the old actor to the new actor
  MORPH_UNDOBYDEATH         = 0x00000200, // actor unmorphs when killed and (unless MORPH_UNDOBYDEATHSAVES) stays dead
  MORPH_UNDOBYDEATHFORCED   = 0x00000400, // actor (if unmorphed when killed) forces unmorph (not very useful with UNDOBYDEATHSAVES)
  MORPH_UNDOBYDEATHSAVES    = 0x00000800, // actor (if unmorphed when killed) regains their health and doesn't die
  MORPH_UNDOALWAYS          = 0x00001000, // ignore unmorph blocking conditions (not implemented)
  MORPH_TRANSFERTRANSLATION = 0x00002000, // transfers the actor's translation to the morphed actor (applies to players and monsters) (not implemented)
}

//==========================================================================
//
//  Morph
//
//==========================================================================
final bool Morph (class!MorphedMonster MonsterClass,
                  class!PlayerPawn PlayerClass, float Duration, int MorphStyle,
                  class!Actor MorphFlash, class!Actor UnmorphFlash)
{
  if (bIsPlayer)
  {
    return MorphPlayer(PlayerClass, (Duration ? Duration : MORPHTIME),
                       MorphStyle, MorphFlash, UnmorphFlash, none);
  } else {
    return MorphMonster(MonsterClass, (Duration ? Duration : MORPHTIME)+Random()*256.0/35.0,
                        MorphStyle, MorphFlash, UnmorphFlash);
  }
}


//==========================================================================
//
//  MorphMonster
//
//==========================================================================
final bool MorphMonster (class!MorphedMonster MonsterClass, float Duration,
                         int MorphStyle, class!Actor MorphFlash, class!Actor UnmorphFlash)
{
  if (!bMonster) return false;
  if (bBoss) return false;
  if (bNoMorph) return false;
  if (!MonsterClass) return false;

  MorphedMonster monster = SpawnEntityChecked(class!MorphedMonster, MonsterClass, Origin, default, default/*, false*/);
  if (!monster) return false;

  if (!MorphFlash) MorphFlash = class!Actor(TeleportFog);
  if (MorphFlash) Spawn(MorphFlash, Origin+vector(0.0, 0.0, LineSpecialGameInfo(Level.Game).TeleFogHeight));

  monster.SpecialCID = class!Actor(Class);
  monster.MorphStyle = MorphStyle;
  monster.UnmorphTime = XLevel.Time+Duration;
  monster.UnmorphFlash = UnmorphFlash;
  monster.RenderStyle = RenderStyle;
  monster.Alpha = Alpha;
  monster.bShadow = bShadow;
  monster.bGhost = bGhost;
  monster.CopyFriendliness(self, true);
  monster.Angles.yaw = Angles.yaw;
  monster.Special = Special;
  monster.SetTID(TID);
  foreach (auto i; 0..Args.length) monster.Args[i] = Args[i];

  SetTID(0);

  SetState(FindState('FreeTargMobj'));
  MonsterMorphed();

  return true;
}


//==========================================================================
//
//  MonsterMorphed
//
//==========================================================================
void MonsterMorphed () {
}


//==========================================================================
//
//  MorphPlayer
//
//  Returns true if the player gets turned into a monster.
//
//==========================================================================
final bool MorphPlayer (class!PlayerPawn PlayerClass, float Duration,
                        int MorphStyle, class!Actor MorphFlash, class!Actor UnmorphFlash,
                        EntityEx Activator)
{
  if (bInvulnerable && (self != Activator || !(MorphStyle&MORPH_WHENINVULNERABLE))) {
    // immune when invulnerable
    return false;
  }
  if (bNoMorph) return false;
  if (!PlayerClass) return false;
  if (PlayerEx(Player).MorphTime) {
    // player is already a beast
    if ((PlayerEx(Player).MorphTime < Duration-1.0) && !FindInventory(PowerWeaponLevel2)) {
      // make a super monster
      GiveInventoryType(PowerWeaponLevel2);
    }
    return false;
  }

  Actor beastMo = SpawnEntityChecked(class!Actor, PlayerClass, Origin, default, default/*, false*/);
  if (!beastMo) return false;

  if (!MorphFlash) MorphFlash = class!Actor(TeleportFog);
  if (MorphFlash) Spawn(MorphFlash, Origin+vector(0.0, 0.0, LineSpecialGameInfo(Level.Game).TeleFogHeight));

  if (TID && (MorphStyle&MORPH_NEWTIDBEHAVIOUR)) {
    beastMo.SetTID(TID);
    SetTID(0);
  }
  beastMo.Tracer = PlayerEx(Player).ReadyWeapon;
  beastMo.Angles = Angles;
  beastMo.Player = Player;
  beastMo.bIsPlayer = true;
  Player.Health = beastMo.Health;
  Player.MO = beastMo;
  if (Player.Camera == self) Player.Camera = beastMo;
  BasicArmor Armor = BasicArmor(FindInventory(BasicArmor, disableReplacement:true));
  Armor.Amount = 0;
  Armor.SavePercent = 0.0;
  HexenArmor HArmor = HexenArmor(FindInventory(HexenArmor, disableReplacement:true));
  if (HArmor) {
    foreach (auto i; 0..4) HArmor.Slots[i] = 0.0;
  }
  Inventory Pw = FindInventory(PowerGhost);
  if (Pw) Pw.Destroy();
  Pw = FindInventory(PowerWeaponLevel2);
  if (Pw) Pw.Destroy();
  beastMo.ObtainInventory(self);
  beastMo.bShadow = bShadow;
  beastMo.bGhost = bGhost;
  beastMo.bFly = bFly;
  PlayerEx(Player).MorphTime = Duration;
  PlayerEx(Player).MorphStyle = MorphStyle;
  PlayerEx(Player).UnmorphFlash = UnmorphFlash;
  PlayerEx(Player).PlayerMorphed(self);
  PlayerEx(Player).ActivateMorphWeapon();

  SetState(FindState('FreeTargMobj'));

  return true;
}


//==========================================================================
//
//  MorphActor
//
//==========================================================================
override int MorphActor (name PlayerClass, name MonsterClass, float Duration,
                         int Style, name MorphFlash, name UnmorphFlash)
{
  return Morph(class!MorphedMonster(FindClassNoCase(MonsterClass)),
    class!PlayerPawn(FindClassNoCase(PlayerClass)), Duration, Style,
    class!Actor(FindClassNoCase(MorphFlash)),
    class!Actor(FindClassNoCase(UnmorphFlash)));
}
