//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class DynamicLight : Actor;

enum {
  DLTYPE_Point,
  DLTYPE_MuzzleFlash,
  DLTYPE_Pulse,
  DLTYPE_Flicker,
  DLTYPE_FlickerRandom,
  DLTYPE_Sector,
  //DLTYPE_Subtractive, // not supported yet
  //DLTYPE_SectorSubtractive, // not supported yet
  DLTYPE_TypeMask = 0x1f,
  // flags (so point light can actually be spotlight; sigh)
  DLTYPE_Subtractive = 0x20,
  DLTYPE_Additive = 0x40,
  DLTYPE_Spot = 0x80,
};

ubyte LightType;
float LightTime;
float Intensity;
bool Attenuated;


//==========================================================================
//
//  OnMapSpawn
//
//==========================================================================
override void OnMapSpawn (mthing_t *mthing) {
  //print("*** dynamic light for class '%C' (lt=%s; TID=%s; dormant=%B, mthing is %shere)", Class, LightType, TID, bDormant, (mthing ? "" : "not "));
  ::OnMapSpawn(mthing);

  //TODO: replace with statics
  if (LightType&DLTYPE_Subtractive) {
    //bDormant = true;
    printwarn("REMOVED SUBTRACTIVE LIGHT: r=%d; g=%d; b=%d; intensuty=%d", Args[0], Args[1], Args[2], Args[3]);
    /*
    if (RGB(Args[0], Args[1], Args[2]) == 0) {
      dprint("*** DUMMY SUBTRACTIVE: r=%d; g=%d; b=%d; Args[3]=%d; Args[4]=%d", Args[0], Args[1], Args[2], Args[3], Args[4]);
      //Destroy();
    }
    */
    Destroy();
    return;
  }

  int ltype = LightType&DLTYPE_TypeMask;

  // adjust Z position (why not?)
  // people loves to put lights into the floor/ceiling, and our tracer is not happy with those
  if (mthing && Sector) FixLightPosition(Sector, ref Origin, mthing-&XLevel.Things[0]);

  //if (LightType&DLTYPE_Spot) printdebug("%C: Angles=%s; [1]=%s; [2]=%s", self, Angles, Args[1], Args[2]);

  //printwarn("LIGHT: r=%d; g=%d; b=%d; intensuty=%d", Args[0], Args[1], Args[2], Args[3]);
  // use static light for placed point lights that cannot be deactivated
  if (ltype == DLTYPE_Point && mthing && !TID && !bDormant) {
    if (mthing->args[4-1] > 0) {
      //printdebug("*** adding static light for class %C (%d, %d, %d, %d)", self, mthing->args[1-1], mthing->args[2-1], mthing->args[3-1], mthing->args[4-1]);
      if (LightType&DLTYPE_Spot) {
        // spotlight
        printdebug("*** adding static spotlight for class %C (%d, %d, %d, %d); angles=%s; org=%s", self, mthing->args[1-1], mthing->args[2-1], mthing->args[3-1], mthing->args[4-1], Angles, Origin);
        TVec dir;
        AngleVector(Angles, out dir);
        // point light color can be specified in string arg
        int ptclr = mthing->args[1-1]|0xff_00_00_00;
        if (mthing->arg0str) {
          int c2 = ParseColor(mthing->arg0str, retZeroIfInvalid:true);
          if (c2) {
            printdebug("%C: parsed string color \"%s\" to 0x%08x (old is 0x%08x)", self, mthing->arg0str, c2, ptclr);
            ptclr = c2;
          }
        }
        Level.AddStaticLightRGB(none, Origin, IntensityToRadius(float(mthing->args[4-1])), ptclr, dir, AngleMod360(max(mthing->args[2-1], mthing->args[3-1])));
      } else if (mthing->args[1-1] == 255 && mthing->args[2-1] == 255 && mthing->args[3-1] == 255) {
        // static white light
        Level.AddStaticLight(none, Origin, IntensityToRadius(float(mthing->args[4-1])));
      } else {
        // static colored light
        Level.AddStaticLightRGB(none, Origin, IntensityToRadius(float(mthing->args[4-1])), RGB(mthing->args[1-1], mthing->args[2-1], mthing->args[3-1]));
      }
    }
    Destroy();
  } else if (LightType == DLTYPE_Sector && mthing && !TID && Level.XLevel.bConvertSectorLightsToStatic && Sector) {
    // hack for Discharge map set
    float Scale = float(Args[3])*0.125;
    if (!Scale) Scale = 1.0;
    Intensity = float(Sector->params.lightlevel)*Scale;
    if (Intensity < 0.0) Intensity = 0.0;
    if (Intensity > 255.0) Intensity = 255.0;
    //printwarn("*** FORCED static light for class '%C' (lt=%s; TID=%s; dormant=%B, mthing is %shere); RGB=(%s,%s,%s); scale=%s; intensity=%s", Class, ltype, TID, bDormant, (mthing ? "" : "not "), Args[0], Args[1], Args[2], Scale, Intensity);
    Level.AddStaticLightRGB(none, Origin, IntensityToRadius(Intensity), RGB(mthing->args[1-1], mthing->args[2-1], mthing->args[3-1]));
    /*
    if (Args[0] == 255 && Args[1] == 255 && Args[2]) {
      Level.AddStaticLight(none, Origin, IntensityToRadius(float(mthing->args[4-1])));
    } else {
      Level.AddStaticLightRGB(none, Origin,
        IntensityToRadius(float(mthing->args[4-1])),
        RGB(mthing->args[1-1], mthing->args[2-1], mthing->args[3-1]));
    }
    */
    Destroy();
  } else {
    //dprint("*** CANNOT add static light for class '%C' (lt=%s; TID=%s; dormant=%B, mthing is %shere)", Class, ltype, TID, bDormant, (mthing ? "" : "not "));
  }
}


//==========================================================================
//
//  BeginPlay
//
//==========================================================================
override void BeginPlay () {
  ::BeginPlay();
  if (!bDormant) Activate(none);
}


//==========================================================================
//
//  Activate
//
//==========================================================================
override bool Activate (EntityEx Activator) {
  bDormant = false;
  LightTime = 0.0;
  Intensity = float(Args[3]);
  return true;
}


//==========================================================================
//
//  Deactivate
//
//==========================================================================
override bool Deactivate (EntityEx Activator) {
  bDormant = true;
  return true;
}


//==========================================================================
//
//  ClientTick
//
//  delta time can be zero for "interframe" ticks
//
//==========================================================================
override void ClientTick (float DeltaTime) {
  ::ClientTick(DeltaTime);

  if (bDormant || !DeltaTime) return;

  int realLightType = LightType&DLTYPE_TypeMask;

  switch (realLightType) {
    case DLTYPE_Point:
      Intensity = float(Args[3]);
      break;
    case DLTYPE_Pulse:
      {
        // avoid division by 0
        float PulseCycle = (Angles.yaw ? Angles.yaw/35.0 : 1.0/35.0);
        LightTime += DeltaTime;
        if (LightTime >= PulseCycle) LightTime = 0.0;
        float Frac = (1.0+sin(360.0*LightTime/PulseCycle))*0.5;
        Intensity = float(Args[3])+Frac*float(Args[4]-Args[3]);
        //print("PULSE: %s (%s)", Frac, Intensity);
      }
      break;
    case DLTYPE_Flicker:
      Intensity = float(Random() >= Angles.yaw/360.0 ? Args[4] : Args[3]);
      break;
    case DLTYPE_FlickerRandom:
      LightTime += DeltaTime;
      if (LightTime > Angles.yaw/35.0) {
        LightTime = 0.0;
        Intensity = float(Args[3])+Random()*float(Args[4]-Args[3]);
      }
      break;
    case DLTYPE_Sector:
      {
        float Scale = float(Args[3])*0.125;
        if (!Scale) Scale = 1.0;
        Intensity = float(Sector->params.lightlevel)*Scale;
        if (Intensity < 0.0) Intensity = 0.0;
        if (Intensity > 255.0) Intensity = 255.0;
      }
      break;
  }

  dlight_t *dl = AllocDlight(self, Origin, IntensityToRadius(Intensity));
  if (dl) {
    //dl->origin = Origin;
    //dl->radius = IntensityToRadius(Intensity);
    dl->die = XLevel.Time+0.01;
    dl->type = /*LightType*/realLightType;
    if (LightType&DLTYPE_Spot) {
      dl.type |= DLTYPE_Spot;
      AngleVector(Angles, out dl.coneDirection);
      //dl.coneAngle = (Args[1]+Args[2])/2.0f; // this is NOT right!
      dl.coneAngle = AngleMod360(max(Args[1], Args[2])); // this is NOT right!
      dl->color = Args[0]|0xff_00_00_00;
    } else {
      dl->color = RGB(Args[0], Args[1], Args[2]);
      // copy subractive/additive flags
      dl.type |= LightType&(DLTYPE_Subtractive|DLTYPE_Additive);
    }
  }
}


//==========================================================================
//
//  IntensityToRadius
//
//==========================================================================
final float IntensityToRadius (float Val) {
  return LevelInfo.GZSizeToRadius(Val, Attenuated, attmult:2.0);
}


defaultproperties {
  Height = 0.0;
  Radius = 0.1;
  bNoBlockmap = true;
  bInvisible = true;
  bNoGravity = true;
}
