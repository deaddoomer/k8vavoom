//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ThrustFloor : Actor;

// thrust spike variables
Actor SpawnedDirt; // pointer to dirt clump mobj
float RaiseSpeed; // speed of raise
bool bRaised; // lowered or raised state
bool bBloody; // bloody spike


//==========================================================================
//
//  A_ThrustInitUp
//
//==========================================================================
[decorate] final void A_ThrustInitUp () {
  RaiseSpeed = 5.0; // raise speed
  bRaised = true; // mark as up
  FloorClip = 0.0;
  bSolid = true;
  SpawnedDirt = none;
}


//==========================================================================
//
//  A_ThrustInitDn
//
//==========================================================================
[decorate] final void A_ThrustInitDn () {
  RaiseSpeed = 5.0; // raise speed
  bRaised = false; // mark as down
  FloorClip = Height;
  bSolid = false;
  bInvisible = true;
  SpawnedDirt = SpawnEntityChecked(class!Actor, DirtClump, Origin);
}


//==========================================================================
//
//  A_ThrustRaise
//
//  Raise incrementally from the floor
//
//==========================================================================
[decorate] final void A_ThrustRaise () {
  // raise spike from the ground
  FloorClip -= RaiseSpeed;
  if (FloorClip <= 0.0) {
    // reached it's target height
    FloorClip = 0.0;
    bRaised = true;
    if (bBloody) {
      //SetState(FindState('BloodyUp'));
      SetState(FindState('BloodThrustInit2'));
    } else {
      //SetState(FindState('Up'));
      SetState(FindState('ThrustInit2'));
    }
  }

  // lose the dirt clump
  if ((FloorClip < Height) && SpawnedDirt) {
    SpawnedDirt.Destroy();
    SpawnedDirt = none;
  }

  // spawn some dirt
  if (P_Random() < 40) SpawnDirt(Radius);
  RaiseSpeed += 1.0; // increase raise speed
}


//==========================================================================
//
//  A_ThrustLower
//
//  Sink incrementally into the floor
//
//==========================================================================
[decorate] final void A_ThrustLower () {
  if (FloorClip < Height) {
    FloorClip += 6.0;
  } else {
    bRaised = false;
    if (bBloody) {
      //SetState(FindState('BloodyDown'));
      SetState(FindState('BloodThrustInit1'));
    } else {
      //SetState(FindState('Down'));
      SetState(FindState('ThrustInit1'));
    }
  }
}


//==========================================================================
//
//  A_ThrustBlock
//
//==========================================================================
[decorate] final void A_ThrustBlock () {
  bSolid = true;
}


//==========================================================================
//
//  A_ThrustImpale
//
//==========================================================================
[decorate] final void A_ThrustImpale () {
  Entity Other;

  // impale all shootables in radius
  // stomp on any things contacted
  foreach RadiusThings(Other, Origin, Radius) {
    if (!EntityEx(Other).bShootable) continue;
    if (Other == self) continue; // don't clip against self

    float blockdist = Other.Radius+Radius;
    if (fabs(Other.Origin.x-Origin.x) >= blockdist ||
        fabs(Other.Origin.y-Origin.y) >= blockdist ||
        Other.Origin.z > Origin.z+Height)
    {
      continue; // didn't hit it
    }

    EntityEx(Other).Damage(self, self, 10001, forced:true, spawnBlood:true);
    bBloody = true; // mark thrust thing as bloody
  }
}


//==========================================================================
//
//  Activate
//
//==========================================================================
override bool Activate (EntityEx Activator) {
  if (!bRaised) {
    PlaySound('ThrustSpikeLower', CHAN_VOICE);
    bInvisible = false;
    if (bBloody) {
      SetState(FindState('BloodThrustRaise'));
    } else {
      SetState(FindState('ThrustRaise'));
    }
  }
  return true;
}


//==========================================================================
//
//  Deactivate
//
//==========================================================================
override bool Deactivate (EntityEx Activator) {
  if (bRaised) {
    PlaySound('ThrustSpikeRaise', CHAN_VOICE);
    if (bBloody) {
      SetState(FindState('BloodThrustLower'));
    } else {
      SetState(FindState('ThrustLower'));
    }
  }
  return true;
}


states {
  Spawn:
  //Down:
  ThrustInit1:
    TSPK A 3
    TSPK A 4 A_ThrustInitDn
    TSPK A -1
    Wait
  //Up:
  ThrustInit2:
    TSPK A 3
    TSPK A 4 A_ThrustInitUp
    TSPK A 10
    Wait
  //BloodyUp:
  BloodThrustInit2:
    TSPK B 3
    TSPK B 4 A_ThrustInitUp
    TSPK B 10
    Wait
  //BloodyDown:
  BloodThrustInit1:
    TSPK B 3
    TSPK B 4 A_ThrustInitDn
    TSPK B -1
    Wait
  ThrustRaise:
    TSPK A 8 A_ThrustRaise
    TSPK A 6 A_ThrustRaise
    TSPK A 4 A_ThrustRaise
    TSPK A 3 A_ThrustBlock
    TSPK A 2 A_ThrustImpale
    //TSPK A 2 A_ThrustRaise
    Wait
  BloodThrustRaise:
    TSPK B 8 A_ThrustRaise
    TSPK B 6 A_ThrustRaise
    TSPK B 4 A_ThrustRaise
    TSPK B 3 A_ThrustBlock
    TSPK B 2 A_ThrustImpale
    //TSPK B 2 A_ThrustRaise
    Wait
  ThrustLower:
    TSPK A 2 A_ThrustLower
    Loop
  BloodThrustLower:
    TSPK B 2 A_ThrustLower
    Loop
}


defaultproperties {
  Radius = 20.0;
  Height = 128.0;
  /*
  bFloorClip = true;
  bNoTeleport = true;
  bInvisible = true;
  */
}
