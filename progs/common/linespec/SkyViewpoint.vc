//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class SkyViewpoint : Actor __mobjinfo__(9080);

bool bAlways;
SkyViewpoint Mate;
float PlaneAlpha;

replication {
  reliable if (Role == ROLE_Authority)
    bAlways, Mate, PlaneAlpha;
}


//==========================================================================
//
//  BeginPlay
//
//==========================================================================
override void BeginPlay () {
  ::BeginPlay();
  InitSkyBox();
}


//==========================================================================
//
//  InitSkyBox
//
//==========================================================================
void InitSkyBox () {
  if (TID == 0) {
    // set this as a default sky box
    foreach (auto i; 0..XLevel.Sectors.length) {
      if (!XLevel.Sectors[i].floor.SkyBox) XLevel.Sectors[i].floor.SkyBox = self;
      if (!XLevel.Sectors[i].ceiling.SkyBox) XLevel.Sectors[i].ceiling.SkyBox = self;
    }
  }
}


//==========================================================================
//
//  Destroyed
//
//==========================================================================
override void Destroyed () {
  // removed all references to this sky box
  foreach (auto i; 0..XLevel.Sectors.length) {
    if (XLevel.Sectors[i].floor.SkyBox == self) XLevel.Sectors[i].floor.SkyBox = none;
    if (XLevel.Sectors[i].ceiling.SkyBox == self) XLevel.Sectors[i].ceiling.SkyBox = none;
  }
  ::Destroyed();
}


//==========================================================================
//
//  SkyBoxGetAlways
//
//==========================================================================
override bool SkyBoxGetAlways () {
  return bAlways;
}


//==========================================================================
//
//  SkyBoxGetMate
//
//==========================================================================
override Entity SkyBoxGetMate () {
  return Mate;
}


//==========================================================================
//
//  SkyBoxGetPlaneAlpha
//
//==========================================================================
override float SkyBoxGetPlaneAlpha () {
  return PlaneAlpha;
}


defaultproperties {
  bNoSector = true;
  bNoBlockmap = true;
  bNoGravity = true;
  bNoSplash = true;
  bAlwaysRelevant = true;
}
