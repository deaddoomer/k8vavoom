//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//  A_FlameDie
//
//==========================================================================

final void A_FlameDie()
{
  bNoGravity = true;
  Velocity.z = (Random() * 4.0 / 10.0) * 35.0;
}

//==========================================================================
//
//  A_MaulerTorpedoWave
//
//==========================================================================

final void A_MaulerTorpedoWave()
{
  int i;
  float savedz;

  Angles.yaw = AngleMod360(Angles.yaw + 180.0);

  //  If the torpedo hit the ceiling, it should still spawn the wave.
  savedz = Origin.z;
  if (CeilingZ - Origin.z < 13.0)
  {
    Origin.z = CeilingZ - 13.0;
  }

  for (i = 0; i < 80; i++)
  {
    Angles.yaw = AngleMod360(Angles.yaw + 45.0 / 10.0);
    SpawnSubMissile(MaulerTorpedoWave, Target);
  }
  Origin.z = savedz;
}

//==========================================================================
//
//  A_SpectralLightning
//
//==========================================================================

final void A_SpectralLightning()
{
  Actor lightning1;
  Actor lightning2;
  float x;
  float y;

  if (Threshold)
  {
    Threshold--;
  }

  Velocity.x += (Random() - 0.5) * 6.0 * 35.0;
  Velocity.y += (Random() - 0.5) * 6.0 * 35.0;

  x = Origin.x + (Random() - 0.5) * 6.0 * 50.0;
  y = Origin.y + (Random() - 0.5) * 6.0 * 50.0;

  //  Spawn bolt in the centre.
  lightning1 = Spawn(Threshold > 25 ? class!Actor(SpectralLightningV2) :
    class!Actor(SpectralLightningV1), vector(x, y, ONCEILINGZ));
  if (Sector->bHasExtrafloors && Origin.z <= CeilingZ)
  {
    lightning1.Origin.z = CeilingZ - lightning1.Height;
  }
  lightning1.Target = Target;
  lightning1.Velocity.x = 0.001;
  lightning1.Velocity.y = 0.001;
  lightning1.Velocity.z = -18.0 * 35.0;
  lightning1.Health = Health;

  //  Spawn a random bolt.
  lightning2 = Spawn(SpectralLightningV2, vector(Origin.x, Origin.y,
    ONCEILINGZ));
  if (Sector->bHasExtrafloors && Origin.z <= CeilingZ)
  {
    lightning2.Origin.z = CeilingZ - lightning2.Height;
  }
  lightning2.Target = Target;
  lightning2.Velocity.x = 0.001;
  lightning2.Velocity.y = 0.001;
  lightning2.Velocity.z = -18.0 * 35.0;
  lightning2.Health = Health;
}

//==========================================================================
//
//  A_SpectralLightningTail
//
//==========================================================================

final void A_SpectralLightningTail()
{
  Actor A;

  A = Spawn(SpectralLightningHTail, Origin);
  A.Angles.yaw = Angles.yaw;
}

//==========================================================================
//
//  A_SpectralBigBallLightning
//
//==========================================================================

final void A_SpectralBigBallLightning()
{
  float angle;
  Actor A;
  float dir;

  A_Tracer2();

  dir = Angles.yaw;

  A = Spawn(SpectralLightningH3, Origin);
  A.Target = Target;
  A.Angles.yaw = AngleMod360(dir + 90.0);
  A.Tracer = Tracer;
  A.Velocity.x = A.Speed * cos(A.Angles.yaw);
  A.Velocity.y = A.Speed * sin(A.Angles.yaw);

  A = Spawn(SpectralLightningH3, Origin);
  A.Target = Target;
  A.Angles.yaw = AngleMod360(dir - 90.0);
  A.Tracer = Tracer;
  A.Velocity.x = A.Speed * cos(A.Angles.yaw);
  A.Velocity.y = A.Speed * sin(A.Angles.yaw);

  A = Spawn(SpectralLightningH3, Origin);
  A.Target = Target;
  A.Angles.yaw = dir;
  A.Tracer = Tracer;
  A.Velocity.x = A.Speed * cos(A.Angles.yaw);
  A.Velocity.y = A.Speed * sin(A.Angles.yaw);
}

//==========================================================================
//
//  A_Explose512
//
//==========================================================================

final void A_Explose512()
{
  int i;

  RadiusAttack(Target, 512, 512.0, true);
  if (Target && Target.bIsPlayer)
  {
    Target.Player.ExtraLight = 5;
  }

  RenderStyle = STYLE_Add;
}

//==========================================================================
//
//  A_LightGoesOut
//
//==========================================================================

final void A_LightGoesOut()
{
  int i;
  EntityEx foo;

  Sector->params.lightlevel = 0;
  Sector->floor.dist = Level.FindLowestFloorSurrounding(Sector, nullptr);
  for (i = 0; i < 8; i++)
  {
    foo = Spawn(Rubble1, Origin);
    if (foo)
    {
      foo.Velocity.x = (Random() * 16.0 - Random() * 8.0) * 35.0;
      foo.Velocity.y = (Random() - Random()) * 8.0 * 35.0;
      foo.Velocity.z = (7.0 + Random() * 4.0) * 35.0;
    }
  }
}

//==========================================================================
//
//  A_ExtraLightOff
//
//==========================================================================

final void A_ExtraLightOff()
{
  if (Target && Target.bIsPlayer)
  {
    Target.Player.ExtraLight = 0;
  }
}

//==========================================================================
//
// A_HideDecepticon
//
// Hide the Acolyte-to-be               ->
// Hide the guy transforming into an Acolyte      ->
// Hide the transformer                 ->
// Transformers are Autobots and Decepticons, and
// Decepticons are the bad guys, so...          ->
//
// Hide the Decepticon!
//
//==========================================================================

final void A_HideDecepticon()
{
  LineSpecialLevelInfo(Level).EV_DoDoor(999, 64, 0, 0, 0,
    VerticalDoor::DOOREV_Close, nullptr, none);
  if (Target && Target.bIsPlayer)
  {
    LineSpecialLevelInfo(Level).NoiseAlert(Target, self);
  }
}

//==========================================================================
//
//  A_AcolyteBits
//
//==========================================================================

final void A_AcolyteBits()
{
  if (SpawnPoint.options & LineSpecialLevelInfo::MTF_SHADOW)
  {
    A_BeShadowyFoe();
  }
  else if (SpawnPoint.options & LineSpecialLevelInfo::MTF_SHADOW)
  {
    RenderStyle = STYLE_None;
  }
}

//==========================================================================
//
//  A_AcolyteDeath
//
//==========================================================================

final void A_AcolyteDeath()
{
  int i;
  Actor Other;

  //  Remove any shadowy effects on the Acolyte.
  RenderStyle = STYLE_Normal;
  Alpha = 1.0;

  //  Only the Blue Acolyte does extra stuff on death.
  if (Class != AcolyteBlue)
    return;

  //  Make sure there is a player alive for victory.
  for (i = 0; i < MAXPLAYERS; i++)
  {
    if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
    {
      break;
    }
  }
  if (i == MAXPLAYERS)
    return;

  //  Make sure all the other blue acolytes are dead.
  foreach AllThinkers(EntityEx, Other)
  {
    if (Other != self && Other.Class == Class && Other.Health > 0)
    {
      //  Found a living one.
      return;
    }
  }

  EntityEx(Level.Game.Players[0].MO).GiveInventoryType(QuestItem7);
  PlayerEx(Level.Game.Players[0]).SetObjectives(14);
  PlayerEx(Level.Game.Players[0]).ClientVoice(14);
}

//==========================================================================
//
//  A_StalkerLookInit
//
//==========================================================================

final void A_StalkerLookInit()
{
  //  Set look state depending on floor/ceiling state.
  if (bNoGravity)
  {
    SetState(FindState('LookCeiling'));
  }
  else
  {
    SetState(FindState('LookFloor'));
  }
}

//==========================================================================
//
//  A_StalkerChaseDecide
//
//==========================================================================

final void A_StalkerChaseDecide()
{
  if (!bNoGravity)
  {
    //  Walking on floor.
    SetState(FindState('SeeFloor'));
  }
  else if (CeilingZ - Height > Origin.z)
  {
    //  Falling down.
    SetState(FindState('Drop'));
  }
}

//==========================================================================
//
//  A_StalkerAttack
//
//==========================================================================

final void A_StalkerAttack()
{
  if (bNoGravity)
  {
    //  Land if we are on ceiling.
    SetState(FindState('Drop'));
  }
  else
  {
    if (!Target)
      return;

    A_FaceTarget();

    if (CheckMeleeRange())
    {
      Target.Damage(self, self, (P_Random() & 7) * 2 + 2);
    }
  }
}

//==========================================================================
//
//  A_StalkerDrop
//
//==========================================================================

final void A_StalkerDrop()
{
  bNoGravity = false;
  bNoVerticalMeleeRange = false;
}

//==========================================================================
//
//  A_SentinelAttack
//
//==========================================================================

final void A_SentinelAttack()
{
  int i;
  EntityEx missile;
  EntityEx trail;

  missile = SpawnMissileZAimed(32.0, Target, SentinelFX2);
  if (missile && (missile.Velocity.x || missile.Velocity.y))
  {
    for (i = 8; i > 1; i--)
    {
      trail = Spawn(SentinelFX1, vector(
        Origin.x + missile.Radius * itof(i) * cos(missile.Angles.yaw),
        Origin.y + missile.Radius * itof(i) * sin(missile.Angles.yaw),
        missile.Origin.z + (missile.Velocity.z / 35.0 / 4.0 * itof(i))));
      if (trail)
      {
        trail.Target = self;
        trail.Velocity = missile.Velocity;
        trail.CheckMissileSpawn();
      }
    }
    missile.Origin.z += missile.Velocity.z / 35.0 / 4.0;
  }
}

//==========================================================================
//
//  A_ReaverRanged
//
//==========================================================================

final void A_ReaverRanged()
{
  int i;
  int damage;
  TVec aimDir;
  TVec dir;

  if (!Target)
    return;

  A_FaceTarget();
  PlaySound('reaver/attack', CHAN_WEAPON);
  AimLineAttack(aimDir, Angles, MISSILERANGE);
  for (i = 0; i < 3; i++)
  {
    dir = aimDir;
    VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
    damage = ((P_Random() % 8) + 1) * 3;
    LineAttack(dir, MISSILERANGE, damage, StrifePuff);
  }
}

//==========================================================================
//
//  A_TemplarAttack
//
//==========================================================================

final void A_TemplarAttack()
{
  int i;
  int damage;
  TVec aimDir;
  TVec dir;

  if (!Target)
    return;

  PlaySound('templar/shoot', CHAN_WEAPON);
  A_FaceTarget();
  AimLineAttack(aimDir, Angles, MISSILERANGE);
  for (i = 0; i < 3; i++)
  {
    dir = aimDir;
    VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
    damage = ((P_Random() % 5) + 1) * 3;
    LineAttack(dir, MISSILERANGE + 64.0, damage, MaulerPuff,,, 'Disintegrate');
  }
}

//==========================================================================
//
//  CrusaderCheckFlameRange
//
//==========================================================================

final bool CrusaderCheckFlameRange()
{
  if (CanSee(Target) && ReactionCount == 0)
  {
    return DistTo2(Target) < 264.0;
  }
  return false;
}

//==========================================================================
//
//  A_CrusaderChoose
//
//==========================================================================

final void A_CrusaderChoose()
{
  if (!Target)
    return;

  if (CrusaderCheckFlameRange())
  {
    A_FaceTarget();
    Angles.yaw = AngleMod360(Angles.yaw - 45.0 / 4.0);
    SpawnMissileZAimed(40.0, Target, FastFlameMissile);
  }
  else
  {
    if (CheckMissileRange())
    {
      A_FaceTarget();
      SpawnMissileZAimed(56.0, Target, CrusaderMissile);
      Angles.yaw -= 45.0 / 32.0;
      SpawnMissileZAimed(40.0, Target, CrusaderMissile);
      Angles.yaw += 45.0 / 16.0;
      SpawnMissileZAimed(40.0, Target, CrusaderMissile);
      Angles.yaw -= 45.0 / 16.0;
      ReactionCount += 15;
    }
    SetState(SeeState);
  }
}

//==========================================================================
//
//  A_CrusaderSweepLeft
//
//==========================================================================

final void A_CrusaderSweepLeft()
{
  EntityEx misl;

  Angles.yaw = AngleMod360(Angles.yaw + 45.0 / 8.0);
  misl = SpawnMissileZAimed(48.0, Target, FastFlameMissile);
  if (misl)
  {
    misl.Velocity.z = 1.0 * 35.0;
  }
}

//==========================================================================
//
//  A_CrusaderSweepRight
//
//==========================================================================

final void A_CrusaderSweepRight()
{
  EntityEx misl;

  Angles.yaw = AngleMod360(Angles.yaw - 45.0 / 8.0);
  misl = SpawnMissileZAimed(48.0, Target, FastFlameMissile);
  if (misl)
  {
    misl.Velocity.z = 1.0 * 35.0;
  }
}

//==========================================================================
//
//  A_CrusaderRefire
//
//==========================================================================

final void A_CrusaderRefire()
{
  if (!Target || Target.Health <= 0 || !CanSee(Target))
  {
    SetState(SeeState);
  }
}

//==========================================================================
//
//  A_CrusaderDeath
//
//==========================================================================

final void A_CrusaderDeath()
{
  if (!CheckBossDeath())
  {
    return;
  }
  LineSpecialLevelInfo(Level).EV_DoFloor(667, 8, 0, 0, 0,
    FloorMover::FLOOREV_LowerToLowest, nullptr);
}

//==========================================================================
//
//  InquisitorCheckDistance
//
//==========================================================================

final bool InquisitorCheckDistance()
{
  return ReactionCount == 0 && Target && CanSee(Target) &&
    DistTo2(Target) < 264.0;
}

//==========================================================================
//
//  A_InquisitorDecide
//
//==========================================================================

final void A_InquisitorDecide()
{
  if (Origin.z != FloorZ)
    return;

  PlaySound('inquisitor/active', CHAN_VOICE);
  if (!Target || !CanSee(Target))
  {
    return;
  }

  A_FaceTarget();
  if (!InquisitorCheckDistance())
  {
    SetState(FindState('Grenade'));
  }
}

//==========================================================================
//
//  A_InquisitorCheckJump
//
//==========================================================================

final void A_InquisitorCheckJump()
{
  EntityEx onmo = EntityEx(CheckOnmobj());

  if (Origin.z != Target.Origin.z)
  {
    if (Origin.z < Target.Origin.z && (((onmo && onmo.TestMobjZ()) ||
      !onmo) && TestMobjZ()))
    {
      A_FaceTarget();
      if (Origin.z + Height + 64.0 < CeilingZ)
      {
        SetState(FindState('Jump'));
      }
      else
      {
        //don't let him jump while under a low ceiling
        Origin.z = FloorZ;
      }
    }
    else if(Origin.z != FloorZ && fabs(Velocity.z) < -21.0 && (((onmo && onmo.TestMobjZ()) ||
      !onmo) && TestMobjZ()))
    {
      //fly when he is falling
      A_FaceTarget();
      SetState(FindState('Jump'));
    }
  }
  else
  {
    A_Chase();
  }
}

//==========================================================================
//
//  A_InquisitorAttack
//
//==========================================================================

final void A_InquisitorAttack()
{
  EntityEx A;
  float an;

  if (!Target)
    return;

  A_FaceTarget();

  A = SpawnMissileZAimed(76.0, Target, InquisitorShot);
  if (A)
  {
    A.Angles.yaw -= 45.0 / 16.0;
    A.Velocity.x = A.Speed * cos(A.Angles.yaw);
    A.Velocity.y = A.Speed * sin(A.Angles.yaw);
    A.Velocity.z += 4.0 * 35.0;
  }

  A = SpawnMissileZAimed(76.0, Target, InquisitorShot);
  if (A)
  {
    A.Angles.yaw += 45.0 / 16.0;
    A.Velocity.x = A.Speed * cos(A.Angles.yaw);
    A.Velocity.y = A.Speed * sin(A.Angles.yaw);
    A.Velocity.z += 15.0 * 35.0;  //weeeeeeeeeee!!!!
  }
}

//==========================================================================
//
//  A_InquisitorJump
//
//==========================================================================

final void A_InquisitorJump()
{
  float an;
  float dist;
  TVec OldOrg;

  if (!Target)
    return;

  EntityEx onmo = EntityEx(CheckOnmobj());

  A_FaceTarget();
  // Increase origin, then check for possibility
  // of getting stuck, if we can get stuck, reset
  // origin value...
  OldOrg = Origin;
  Origin.z += 64.0;
  if (((onmo && onmo.TestMobjZ()) ||
    !onmo) && TestMobjZ())
  {
    // The way is free, so continue along...
    PlaySound('inquisitor/jump', CHAN_BODY);
    Velocity.x += 6.0 * 35.0 * cos(Angles.yaw);
    Velocity.y += 6.0 * 35.0 * sin(Angles.yaw);
    dist = DistTo2(Target);
    dist /= 6.0 * 35.0;
    if (dist < 1.0)
    {
      dist = 1.0;
    }
    Velocity.z = (Target.Origin.z - Origin.z) / dist;
    ReactionCount = 60;
    bNoGravity = true;
    return;
  }
  else
  {
    // Something is in the way, reset the Origin value...
    Origin = OldOrg;
    ReactionCount = 0;
    bNoGravity = false;
    return;
  }
}

//==========================================================================
//
//  A_InquisitorCheckLand
//
//==========================================================================

final void A_InquisitorCheckLand()
{
  ReactionCount--;
  EntityEx onmo = EntityEx(CheckOnmobj());

  if (((onmo && onmo.TestMobjZ()) ||
    !onmo) && TestMobjZ())
  {
    if (Velocity.x == 0.0 && Velocity.y == 0.0 || Origin.z <= FloorZ ||
      fabs(Velocity.x) > 6.0 * 35.0 && fabs(Velocity.y) > 6.0 * 35.0 ||
      ReactionCount < 0 || Origin.z >= Target.Origin.z + Height / 6.0)
    {
      SetState(GetStatePlus(SeeState, 1));
      ReactionCount = 0;
      bNoGravity = false;
      return;
    }
  }
  else
  {
    float dist;

    A_FaceTarget();
    Velocity.x += 6.0 * 35.0 * cos(Angles.yaw);
    Velocity.y += 6.0 * 35.0 * sin(Angles.yaw);
    dist = DistTo2(Target);
    dist /= 6.0 * 35.0;
    if (dist < 1.0)
    {
      dist = 1.0;
    }
    Velocity.z = (Target.Origin.z - Origin.z) / dist;
  }
  PlaySound('inquisitor/jump', CHAN_BODY);
}

//==========================================================================
//
//  A_TossArm
//
//==========================================================================

final void A_TossArm()
{
  TossUpObject(InquisitorArm);
  TossUpObject(InquisitorArm);
}

//==========================================================================
//
//  A_SpotLightning
//
//  Used by Specter1 and Programmer.
//
//==========================================================================

final void A_SpotLightning()
{
  Actor   A;

  if (!Target)
  {
    return;
  }

  A = Spawn(SpectralLightningSpot, Target.Origin);
  A.Origin.z = A.FloorZ;
  A.Threshold = 25;
  A.Target = self;
  A.Health = -2;
  A.Tracer = Target;
}

//==========================================================================
//
//  A_SpawnProgrammerBase
//
//==========================================================================

final void A_SpawnProgrammerBase()
{
  //  Spawn separate base object.
  TossUpObject(ProgrammerBase);
}

//==========================================================================
//
//  A_ProgrammerDeath
//
//==========================================================================

final void A_ProgrammerDeath()
{
  if (!CheckBossDeath())
  {
    return;
  }

  Level.ExecuteActionSpecial(LNSPEC_ExitNormal, 0, 0, 0, 0, 0, nullptr, 0,
    self);
  //  This will execute sky changes.
  A_BossDeath();
}

//==========================================================================
//
//  A_SpawnEntity
//
//==========================================================================

final void A_SpawnEntity()
{
  Actor entity;

  entity = Spawn(EntityBoss, Origin + vector(0.0, 0.0, 70.0));
  if (entity)
  {
    entity.Angles.yaw = Angles.yaw;
    entity.CopyFriendliness(self, true);
    entity.Velocity.z = 5.0 * 35.0;
    //  Save spawn position for subenties.
    entity.Tracer = self;
  }
}

const float PUNCH_DAGGER_RANGE    = 80.0;

//==========================================================================
//
//  A_AttackAlert
//
//==========================================================================

final void A_AttackAlert(EntityEx target, EntityEx emitter) self(Actor)
{
  Entity looker;

  if (emitter.LastHeard)
    return;
  if (emitter.Health <= 0)
    return;
  if (!emitter.bMonster)
    return;
  if (emitter.bInCombat)
    return;
  emitter.bInCombat = true;

  emitter.Target = target;
  if (emitter.FindState('Pain'))
  {
    emitter.SetState(emitter.FindState('Pain'));
  }

  for (looker = Sector->ThingList; looker; looker = looker.SNext)
  {
    if (looker == emitter || looker == target)
      continue;

    if (looker.Health <= 0)
      continue;

    if (!EntityEx(looker).bSeesDaggers)
      continue;

    if (!EntityEx(looker).bInCombat)
    {
      if (!looker.CanSee(target) && !looker.CanSee(emitter))
        continue;

      if (EntityEx(looker).SeeState)
      {
        EntityEx(looker).Target = target;
        looker.PlaySound(SightSound, CHAN_VOICE);
        looker.SetState(EntityEx(looker).SeeState);
        EntityEx(looker).bInCombat = true;
      }
    }
  }
}

//==========================================================================
//
//  A_JabDagger
//
//==========================================================================

final void A_JabDagger() self(Actor)
{
  int     power;
  int     damage;
  TAVec   angles;
  TVec    dir;
  EntityEx  AimTarget;

  if (!bIsPlayer)
  {
    return;
  }
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  power = PlayerEx(Player).Stamina / 10;
  damage = (P_Random() % (power + 8)) * (power + 2);

  angles = Angles;
  angles.yaw = AngleMod360(angles.yaw +
    (Random() - Random()) * 45.0 / 8.0);
  AimTarget = AimLineAttack(dir, angles, PUNCH_DAGGER_RANGE);
  LineAttack(dir, PUNCH_DAGGER_RANGE, damage, StrifeSpark);

  // turn to face target
  if (AimTarget)
  {
    if (AimTarget.bNoBlood)
    {
      PlaySound('misc/metalhit', CHAN_WEAPON);
    }
    else
    {
      PlaySound('misc/meathit', CHAN_WEAPON);
    }
    Angles.yaw = atan2(AimTarget.Origin.y - Origin.y,
      AimTarget.Origin.x - Origin.x);
    Player.bFixAngle = true;
    bJustAttacked = true;
    A_AttackAlert(self, AimTarget);
  }
  else
  {
    PlaySound('misc/swish', CHAN_WEAPON);
  }
}

//==========================================================================
//
//  A_ShowElectricFlash
//
//==========================================================================

final void A_ShowElectricFlash() self(Actor)
{
  if (!bIsPlayer)
  {
    return;
  }
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  Player.SetViewState(ps_flash, Wpn.FindState('ElectricFlash'));
}

//==========================================================================
//
//  A_FireArrow
//
//==========================================================================

final void A_FireArrow(class!Actor Proj) self(Actor)
{
  float savedangle;

  if (!bIsPlayer)
  {
    return;
  }
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  savedangle = Angles.yaw;
  Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) *
    45.0 / 8.0 / itof(1 << (PlayerEx(Player).Accuracy * 5 / 100)));
  Wpn.DepleteAmmo(Wpn.FireMode);
  SetState(MissileState);
  SpawnPlayerMissile(Proj);
  Angles.yaw = savedangle;
  PlaySound('weapons/xbowshoot', CHAN_WEAPON);
}

//==========================================================================
//
//  A_FireMiniMissile
//
//==========================================================================

final void A_FireMiniMissile() self(Actor)
{
  float savedangle;

  if (!bIsPlayer)
  {
    return;
  }
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  savedangle = Angles.yaw;
  Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) *
    45.0 / 4.0 / itof(1 << (PlayerEx(Player).Accuracy * 5 / 100)));
  Wpn.DepleteAmmo(Wpn.FireMode);
  SetState(MissileState);
  SpawnPlayerMissile(MiniMissile);
  Angles.yaw = savedangle;
}

//==========================================================================
//
//  A_FireGrenade
//
//==========================================================================

final void A_FireGrenade(class!Actor grenadetype, float angleofs,
  state flash) self(Actor)
{
  EntityEx grenade;
  float an;
  float tworadii;

  if (!bIsPlayer)
  {
    return;
  }
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  if (!Wpn.DepleteAmmo(Wpn.FireMode))
    return;

  // Make it flash
  Player.SetViewState(ps_flash, flash);

  Origin.z += 32.0;
  grenade = SpawnSubMissile(grenadetype, self);
  Origin.z -= 32.0;
  if (!grenade)
    return;

  if (grenade.SightSound)
  {
    grenade.PlaySound(grenade.SightSound, CHAN_VOICE);
  }

  grenade.Velocity.z = (tan(-Angles.pitch) * grenade.Speed + 12.0 * 35.0) / 1.5;

  an = Angles.yaw;
  tworadii = Radius + grenade.Radius;
  grenade.Origin.x += cos(an) * tworadii;
  grenade.Origin.y += sin(an) * tworadii;

  an = Angles.yaw + angleofs;
  grenade.Origin.x += cos(an) * 15.0;
  grenade.Origin.y += sin(an) * 15.0;
}

//==========================================================================
//
//  A_FireFlamer
//
//==========================================================================

final void A_FireFlamer() self(Actor)
{
  EntityEx A;

  if (!bIsPlayer)
  {
    return;
  }
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  SetState(MissileState);
  Wpn.DepleteAmmo(Wpn.FireMode);
  Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) * 45.0 / 8.0);
  Player.bFixAngle = true;
  A = SpawnPlayerMissile(FlameMissile);
  if (A)
  {
    A.Velocity.z += 20.0 * 35.0 / 5.0;
  }
}

const float     MAULERRANGE   = (33.0 * 64.0);

//==========================================================================
//
//  A_FireMauler1
//
//==========================================================================

final void A_FireMauler1() self(Actor)
{
  int i;
  int damage;
  TAVec rot;
  TVec aimDir;
  TVec dir;

  if (!bIsPlayer)
  {
    return;
  }
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  PlaySound('weapons/mauler1', CHAN_WEAPON);

  Wpn.DepleteAmmo(Wpn.FireMode);

  Aim(aimDir, 16.0 * 64.0);
  for (i = 0; i < 20; i++)
  {
    rot.pitch = (Random() - Random()) * 45.0 / 8.0;
    rot.yaw = (Random() - Random()) * 45.0 / 4.0;
    rot.roll = 0.0;
    dir = RotateDirectionVector(aimDir, rot);
    damage = 5 * (P_Random() % 3 + 1);
    LineAttack(dir, MAULERRANGE, damage, MaulerPuff,,, 'Disintegrate');
  }
}

//==========================================================================
//
//  A_FireMauler2Pre
//
//==========================================================================

final void A_FireMauler2Pre() self(Actor)
{
  if (!bIsPlayer)
  {
    return;
  }
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  PlaySound('weapons/mauler2charge', CHAN_WEAPON);
  Player.ViewStates[ps_weapon].SX += (Random() - Random()) * 4.0;
  Player.ViewStates[ps_weapon].SY += (Random() - Random()) * 4.0;
}

//==========================================================================
//
//  A_FireMauler2
//
//==========================================================================

final void A_FireMauler2() self(Actor)
{
  if (!bIsPlayer)
  {
    return;
  }
  Weapon Wpn = PlayerEx(Player).ReadyWeapon;

  SetState(MissileState);
  Wpn.DepleteAmmo(Wpn.FireMode);
  SpawnPlayerMissile(MaulerTorpedo);
  Damage(none, self, 20);
  Thrust(Angles.yaw + 180.0, 125.0 / 16.0);
}

//==========================================================================
//
//  A_ClearFlash
//
//==========================================================================

final void A_ClearFlash()
{
  if (!bIsPlayer)
  {
    return;
  }

  Player.SetViewState(ps_flash, none);
}
