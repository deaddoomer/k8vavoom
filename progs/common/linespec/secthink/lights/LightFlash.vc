//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  BROKEN LIGHT FLASHING
//**
//**************************************************************************
class LightFlash : Lighting;

float Time;
int MaxLight;
int MinLight;
int MaxTime;
int MinTime;


//==========================================================================
//
//  Init
//
//==========================================================================
void Init (sector_t *InSector) {
  Sector = InSector;
  Sector->LightingData = self;

  MaxLight = Sector->params.lightlevel;
  MinLight = Level.FindMinSurroundingLight(Sector, Sector->params.lightlevel);
  MaxTime = 64;
  MinTime = 7;
  Time = float((P_Random()&MaxTime)+1)/35.0;
}


//==========================================================================
//
//  Tick
//
//  do flashing lights
//
//==========================================================================
override void Tick (float DeltaTime) {
  if (!IsAccEnabled()) return; // don't advance if disabled

  Time -= DeltaTime;
  if (Time >= 0.0) return;

  if (Sector->params.lightlevel == MaxLight) {
    Sector->params.lightlevel = MinLight;
    Time = float((P_Random()&MinTime)+1)/35.0;
  } else {
    Sector->params.lightlevel = MaxLight;
    Time = float((P_Random()&MaxTime)+1)/35.0;
  }
}


defaultproperties {
}
