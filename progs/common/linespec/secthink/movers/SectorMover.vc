//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class SectorMover : SectorThinker;

bool Not_Keep; // this flag let's us know if we can destroy FloorData

struct SavedFlatInfo {
  float lastpos;
  float lastTexZ;
  // used only in linked movement
  sector_t *sec;
}

transient protected array!SavedFlatInfo origLinkPlanes;

/* return values for `MovePlane()`
  RES_OK,
  RES_CRUSHED,
  RES_PASTDEST,
*/


//==========================================================================
//
//  CalcFloorCrush
//
//==========================================================================
protected int CalcFloorCrush (sector_t *sec, int Crush, int Direction) {
  // if our floor goes down, ignore crushing
  return (Direction < 0 && sec && !sec.bExtrafloorSource ? -1 : Crush);
}


//==========================================================================
//
//  CalcCeilingCrush
//
//==========================================================================
protected int CalcCeilingCrush (sector_t *sec, int Crush, int Direction) {
  // if our ceiling goes up, ignore crushing
  return (Direction > 0 && sec && !sec.bExtrafloorSource ? -1 : Crush);
}


//==========================================================================
//
//  SaveFlat
//
//==========================================================================
protected static final void SaveFlat (out SavedFlatInfo dest, const ref sec_plane_t src) {
  dest.lastpos = src.dist;
  dest.lastTexZ = src.TexZ;
}


//==========================================================================
//
//  RestoreFlat
//
//==========================================================================
protected static final void RestoreFlat (ref sec_plane_t dest, const ref SavedFlatInfo src) {
  dest.dist = src.lastpos;
  dest.TexZ = src.lastTexZ;
}


//==========================================================================
//
//  Finished
//
//==========================================================================
void Finished () {
  if (Not_Keep) {
    if (Sector->FloorData == self) Sector->FloorData = none;
    if (Sector->CeilingData == self) Sector->CeilingData = none;
    if (Sector->LightingData == self) Sector->LightingData = none;
    RemoveAffector();
    Destroy();
  }
}


//**************************************************************************
//
//  move floor/ceiling
//
//**************************************************************************


//==========================================================================
//
//  MoveLinkedSectorsPlane
//
//  move a linked sector flat and check for crushing
//  returns `false` if movement was blocked
//
//==========================================================================
final bool MoveLinkedSectorsPlane (sector_t *sec, int floorOrCeiling, const ref SavedFlatInfo saved, int crush, bool stopOnCrush, bool forced) {
  if (!sec) return true;

  float floordelta = (!floorOrCeiling ? sec->floor.dist-saved.lastpos : sec->ceiling.dist-saved.lastpos);
  if (!floordelta) return true;
  float texdelta = (!floorOrCeiling ? sec->floor.TexZ-saved.lastTexZ : sec->ceiling.TexZ-saved.lastTexZ);

  int sidx = sec-&XLevel.Sectors[0];
  if (sidx >= XLevel.sectorlinkStart.length) return true;

  origLinkPlanes.reset(); // so we would be able to restore them
  int snum = XLevel.sectorlinkStart[sidx];
  while (snum >= 0) {
    //print("moving linked sector #%d (control is #%d)", XLevel.sectorlinks[snum].index, sidx);
    sector_t *sc = &XLevel.Sectors[XLevel.sectorlinks[snum].index];
    if (!forced) {
      auto sv = origLinkPlanes.alloc();
      if (!floorOrCeiling) {
        // floor
        SaveFlat(out *sv, ref sc->floor);
      } else {
        // ceiling
        SaveFlat(out *sv, ref sc->ceiling);
      }
      sv->sec = sc;
    }
    if (!floorOrCeiling) {
      sc->floor.dist += floordelta;
      sc->floor.TexZ += texdelta;
    } else {
      sc->ceiling.dist += floordelta;
      sc->ceiling.TexZ += texdelta;
    }
    int flag = XLevel.ChangeSector(sc, crush);
    if (!forced && flag) {
      if (!crush || stopOnCrush) {
        // restore all changed sectors
        foreach (ref auto sv; origLinkPlanes; reverse) {
          if (!floorOrCeiling) {
            RestoreFlat(ref sv.sec->floor, ref sv);
          } else {
            RestoreFlat(ref sv.sec->ceiling, ref sv);
          }
          XLevel.ChangeSector(sv.sec, crush);
        }
      }
      return false;
    }
    snum = XLevel.sectorlinks[snum].next;
  }

  return true;
}


//==========================================================================
//
//  MoveFloorDown
//
//  moves floor plane down
//  returns `RES_XXX`
//  `-1` for `crush` means "ignore stuck mobj"
//
//==========================================================================
int MoveFloorDown (sector_t *sec, float amount, float dest, int crush, bool stopOnCrush) {
  SavedFlatInfo saved;
  SaveFlat(out saved, ref sec->floor);

  sec->floor.dist -= amount*sec->floor.normal.z;
  sec->floor.TexZ -= amount;
  if (sec->floor.dist <= dest) {
    // reached destination
    sec->floor.TexZ += (dest-sec->floor.dist)/sec->floor.normal.z;
    sec->floor.dist = dest;
    bool flag = XLevel.ChangeSector(sec, crush);
    if (flag) {
      RestoreFlat(ref sec->floor, ref saved);
      XLevel.ChangeSector(sec, crush);
    }
    MoveLinkedSectorsPlane(sec, floorOrCeiling:MOVE_PLANE_FLOOR, ref saved, crush, stopOnCrush, forced:true);
    return RES_PASTDEST;
  } else {
    bool flag = XLevel.ChangeSector(sec, crush);
    if (flag) {
      if (!crush || stopOnCrush) {
        RestoreFlat(ref sec->floor, ref saved);
        XLevel.ChangeSector(sec, crush);
      } else {
        MoveLinkedSectorsPlane(sec, floorOrCeiling:MOVE_PLANE_FLOOR, ref saved, crush, stopOnCrush, forced:true);
      }
      return RES_CRUSHED;
    }
    if (!MoveLinkedSectorsPlane(sec, floorOrCeiling:MOVE_PLANE_FLOOR, ref saved, crush, stopOnCrush, forced:false)) {
      // oops, cannot move; all movement restored (if necessary); restore original plane
      if (!crush || stopOnCrush) {
        RestoreFlat(ref sec->floor, ref saved);
        XLevel.ChangeSector(sec, crush);
      }
      return RES_CRUSHED;
    }
  }
  return RES_OK;
}


//==========================================================================
//
//  MoveFloorUp
//
//  moves floor plane up
//  returns `RES_XXX`
//  `-1` for `crush` means "ignore stuck mobj"
//
//==========================================================================
int MoveFloorUp (sector_t *sec, float amount, float dest, int crush, bool stopOnCrush) {
  SavedFlatInfo saved;
  SaveFlat(out saved, ref sec->floor);

  // jff 02/04/98 keep floor from moving thru ceilings
  // [RH] not so easy with arbitrary planes
  if (!sec->bExtrafloorSource &&
      !sec->ceiling.normal.x && !sec->ceiling.normal.y &&
      !sec->floor.normal.x && !sec->floor.normal.y &&
      dest > -sec->ceiling.dist)
  {
    dest = -sec->ceiling.dist;
  }
  sec->floor.dist += amount*sec->floor.normal.z;
  sec->floor.TexZ += amount;
  if (sec->floor.dist > dest) {
    sec->floor.TexZ += (dest-sec->floor.dist)/sec->floor.normal.z;
    sec->floor.dist = dest;
    bool flag = XLevel.ChangeSector(sec, crush);
    if (flag) {
      RestoreFlat(ref sec->floor, ref saved);
      XLevel.ChangeSector(sec, crush);
    } else {
      MoveLinkedSectorsPlane(sec, floorOrCeiling:MOVE_PLANE_FLOOR, ref saved, crush, stopOnCrush, forced:true);
    }
    return RES_PASTDEST;
  } else {
    // COULD GET CRUSHED
    bool flag = XLevel.ChangeSector(sec, crush);
    if (flag) {
      if (!crush || stopOnCrush) {
        RestoreFlat(ref sec->floor, ref saved);
        XLevel.ChangeSector(sec, crush);
      } else {
        MoveLinkedSectorsPlane(sec, floorOrCeiling:MOVE_PLANE_FLOOR, ref saved, crush, stopOnCrush, forced:true);
      }
      return RES_CRUSHED;
    }
  }
  if (!MoveLinkedSectorsPlane(sec, floorOrCeiling:MOVE_PLANE_FLOOR, ref saved, crush, stopOnCrush, forced:true)) {
    // oops, cannot move; all movement restored (if necessary); restore original plane
    if (!crush || stopOnCrush) {
      RestoreFlat(ref sec->floor, ref saved);
      XLevel.ChangeSector(sec, crush);
    }
    return RES_CRUSHED;
  }
  return RES_OK;
}


//==========================================================================
//
//  MoveCeilingDown
//
//  moves ceiling plane down
//  returns `RES_XXX`
//  `-1` for `crush` means "ignore stuck mobj"
//
//==========================================================================
int MoveCeilingDown (sector_t *sec, float amount, float dest, int crush, bool stopOnCrush) {
  SavedFlatInfo saved;
  SaveFlat(out saved, ref sec->ceiling);

  // jff 02/04/98 keep ceiling from moving thru floors
  // [RH] not so easy with arbitrary planes
  if (!sec->bExtrafloorSource &&
      !sec->ceiling.normal.x && !sec->ceiling.normal.y &&
      sec->floor.normal.x && !sec->floor.normal.y &&
      -dest < sec->floor.dist)
  {
    dest = -sec->floor.dist;
  }
  sec->ceiling.dist -= amount*sec->ceiling.normal.z;
  sec->ceiling.TexZ -= amount;
  if (sec->ceiling.dist > dest) {
    sec->ceiling.TexZ += (dest-sec->ceiling.dist)/sec->ceiling.normal.z;
    sec->ceiling.dist = dest;
    bool flag = XLevel.ChangeSector(sec, crush);
    if (flag) {
      RestoreFlat(ref sec->ceiling, ref saved);
      XLevel.ChangeSector(sec, crush);
    }
    return RES_PASTDEST;
  } else {
    // COULD GET CRUSHED
    bool flag = XLevel.ChangeSector(sec, crush);
    if (flag) {
      if (!crush || stopOnCrush) {
        RestoreFlat(ref sec->ceiling, ref saved);
        XLevel.ChangeSector(sec, crush);
      }
      return RES_CRUSHED;
    }
  }
  return RES_OK;
}


//==========================================================================
//
//  MoveCeilingUp
//
//  moves ceiling plane up
//  returns `RES_XXX`
//  `-1` for `crush` means "ignore stuck mobj"
//
//==========================================================================
int MoveCeilingUp (sector_t *sec, float amount, float dest, int crush, bool stopOnCrush) {
  SavedFlatInfo saved;
  SaveFlat(out saved, ref sec->ceiling);

  sec->ceiling.dist += amount*sec->ceiling.normal.z;
  sec->ceiling.TexZ += amount;
  if (sec->ceiling.dist < dest) {
    sec->ceiling.TexZ += (dest-sec->ceiling.dist)/sec->ceiling.normal.z;
    sec->ceiling.dist = dest;
    bool flag = XLevel.ChangeSector(sec, crush);
    if (flag) {
      RestoreFlat(ref sec->ceiling, ref saved);
      XLevel.ChangeSector(sec, crush);
    }
    return RES_PASTDEST;
  } else {
    bool flag = XLevel.ChangeSector(sec, crush);
    if (flag) {
      if (!crush || stopOnCrush) {
        RestoreFlat(ref sec->ceiling, ref saved);
        XLevel.ChangeSector(sec, crush);
      }
      return RES_CRUSHED;
    }
  }
  return RES_OK;
}


//==========================================================================
//
//  MovePlane
//
//  move a plane (floor or ceiling) and check for crushing
//  returns `RES_XXX`
//
//  `-1` for `crush` means "ignore stuck mobj"
//  this is used for doors and crushers when they're going up
//  (they should not stuck)
//  `-667` means "instant move, no smart crush, abort on crush"
//
//==========================================================================
int MovePlane (sector_t *sec, float amount, float dest, int crush,
               int floorOrCeiling, int direction, bool stopOnCrush, optional bool smartCrush)
{
  if (direction == 0) return RES_OK;
  if (!sec) return RES_OK;
  switch (floorOrCeiling) {
    case MOVE_PLANE_FLOOR:
      if (smartCrush) {
             if (crush >= 0) crush = CalcFloorCrush(sec, crush, direction);
        else if (crush == -667) { crush = 0; stopOnCrush = true; }
      }
      return
        direction < 0 ?
          MoveFloorDown(sec, amount, dest, crush, stopOnCrush) :
          MoveFloorUp(sec, amount, dest, crush, stopOnCrush);
    case MOVE_PLANE_CEILING:
      if (smartCrush) {
             if (crush >= 0) crush = CalcCeilingCrush(sec, crush, direction);
        else if (crush == -667) { crush = 0; stopOnCrush = true; }
      }
      return
        direction < 0 ?
          MoveCeilingDown(sec, amount, dest, crush, stopOnCrush) :
          MoveCeilingUp(sec, amount, dest, crush, stopOnCrush);
  }
  return RES_OK;
}


defaultproperties {
  Not_Keep = true;
}
