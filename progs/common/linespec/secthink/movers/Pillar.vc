//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  PILLAR
//**
//**************************************************************************
class Pillar : SectorMover;

int Direction;
int Crush;
float CeilingSpeed;
float FloorSpeed;
float FloorDest;
float CeilingDest;


//==========================================================================
//
//  Init
//
//==========================================================================
void Init (sector_t *InSector, int Arg1, int Arg2, int Arg3, int Arg4, int Arg5, bool InCrush) {
  float NewHeight;

  Sector = InSector;

  TVec Spot = *Sector->lines[0]->v1;
  float FloorHeight = GetPlanePointZ(ref Sector->floor, Spot);
  float CeilHeight = GetPlanePointZ(ref Sector->ceiling, Spot);

  // not so easy
  if (FloorHeight == CeilHeight) {
    // pillar is already closed
    Destroy();
    return;
  }

  Sector->FloorData = self;
  Sector->CeilingData = self;

  if (!Arg3) {
    NewHeight = FloorHeight+((CeilHeight-FloorHeight)/2.0);
  } else {
    NewHeight = FloorHeight+float(Arg3);
  }

  if (!Arg3) {
    FloorSpeed = float(Arg2)*35.0/8.0;
    CeilingSpeed = FloorSpeed;
  } else if (NewHeight-FloorHeight > CeilHeight-NewHeight) {
    FloorSpeed = float(Arg2)*35.0/8.0;
    CeilingSpeed = (CeilHeight-NewHeight)*FloorSpeed/(NewHeight-FloorHeight);
  } else {
    CeilingSpeed = float(Arg2)*35.0/8.0;
    FloorSpeed = (NewHeight-FloorHeight)*CeilingSpeed/(CeilHeight-NewHeight);
  }
  Spot.z = NewHeight;
  FloorDest = DotProduct(Sector->floor.normal, Spot);
  CeilingDest = DotProduct(Sector->ceiling.normal, Spot);
  Direction = 1;
  Crush = InCrush*Arg4;
  StartFloorSound();
}


//==========================================================================
//
//  InitOpen
//
//==========================================================================
void InitOpen (sector_t *InSector, int Arg1, int Arg2, int Arg3, int Arg4, int Arg5) {
  TVec Spot1;
  TVec Spot2;
  float FloorDestHeight;
  float FloorHeight;
  float CeilDestHeight;
  float CeilHeight;

  Sector = InSector;

  if (!Arg3) {
    FloorDestHeight = Level.FindLowestFloorSurrounding(Sector, &Spot1);
  } else {
    Spot1 = *Sector->lines[0]->v1;
    FloorDestHeight = GetPlanePointZ(ref Sector->floor, Spot1)-float(Arg3);
  }
  FloorHeight = GetPlanePointZ(ref Sector->floor, Spot1);
  Spot1.z = FloorDestHeight;
  FloorDest = DotProduct(Sector->floor.normal, Spot1);

  if (!Arg4) {
    CeilDestHeight = Level.FindHighestCeilingSurrounding(Sector, &Spot2);
  } else {
    Spot2 = *Sector->lines[0]->v1;
    CeilDestHeight = GetPlanePointZ(ref Sector->ceiling, Spot2)+float(Arg4);
  }
  CeilHeight = GetPlanePointZ(ref Sector->ceiling, Spot2);
  Spot2.z = CeilDestHeight;
  CeilingDest = DotProduct(Sector->ceiling.normal, Spot2);

  if (FloorHeight != CeilHeight) {
    // pillar isn't closed
    Destroy();
    return;
  }

  Sector->FloorData = self;
  Sector->CeilingData = self;

  if (FloorHeight-FloorDestHeight >= CeilDestHeight-CeilHeight) {
    FloorSpeed = float(Arg2)*35.0/8.0;
    CeilingSpeed = (CeilHeight-CeilDestHeight)*FloorSpeed/(FloorDestHeight-FloorHeight);
  } else {
    CeilingSpeed = float(Arg2)*35.0/8.0;
    FloorSpeed = (FloorDestHeight-FloorHeight)*CeilingSpeed/(CeilHeight-CeilDestHeight);
  }
  Direction = -1; // open the pillar
  StartFloorSound();
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float deltaTime) {
  // first, raise the floor
  int res1 = MovePlane(Sector, FloorSpeed*deltaTime, FloorDest, Crush, 0, Direction, true);
  // then, lower the ceiling
  int res2 = MovePlane(Sector, CeilingSpeed*deltaTime, CeilingDest, Crush, 1, -Direction, true);
  if (res1 == RES_PASTDEST && res2 == RES_PASTDEST) {
    SectorStopSequence(Sector);
    Finished();
  }
}


//==========================================================================
//
//  StartFloorSound
//
//==========================================================================
void StartFloorSound () {
  if (!LineSpecialLevelInfo(Level).DefaultFloorSound || Sector->seqType >= 0) {
    SectorStartSequence(Sector, GetSeqTrans(Sector->seqType, SEQ_Platform), 0);
  } else {
    SectorStartSequence(Sector, LineSpecialLevelInfo(Level).DefaultFloorSound, 0);
  }
}


defaultproperties {
}
