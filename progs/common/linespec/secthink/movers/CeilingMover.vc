//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class CeilingMover : SectorMover;

enum {
  CEILEV_LowerToFloor,
  CEILEV_LowerToHighestFloor,
  CEILEV_LowerToLowest,
  CEILEV_RaiseToHighest,
  CEILEV_RaiseToNearest,
  CEILEV_LowerByValue,
  CEILEV_RaiseByValue,
  CEILEV_LowerByValueTimes8,
  CEILEV_RaiseByValueTimes8,
  CEILEV_LowerTimes8Instant,
  CEILEV_RaiseTimes8Instant,
  CEILEV_MoveToValue,
  CEILEV_MoveToValueTimes8,
  CEILEV_LowerAndCrush,
  CEILEV_CrushAndRaise,
  CEILEV_CrushRaiseAndStay,
  CEILEV_CrushAndRaiseA,
  CEILEV_CrushAndRaiseSilA,
  CEILEV_CrushRaiseAndStayA,
  CEILEV_CrushRaiseAndStaySilA,
  CEILEV_Generic,
  CEILEV_GenericChange0,
  CEILEV_GenericChangeT,
  CEILEV_GenericChange,
  CEILEV_GenericCrush,
  CEILEV_GenericCrush2,
};

int Type;
float BottomDist;
float TopDist;
float Speed;
int Crush;
int Direction;  // 1 = up, 0 = waiting, -1 = down
int Tag;
int OldDirection;
float DnSpeed;
float UpSpeed;
int Texture;
int NewSpecial;
bool bStopOnCrush;
name SeqName;


//==========================================================================
//
//  Init
//
//==========================================================================
void Init (sector_t *InSector, int Arg1, int Arg2, int Arg3, int Arg4,
           int Arg5, int InType, line_t *Line)
{
  float DestHeight;
  TVec Spot;
  sector_t *ModelSec;

  Sector = InSector;
  Sector->CeilingData = self;

  Type = InType;
  Tag = Sector->sectorTag;
  Crush = false;
  Speed = float(Arg2)*35.0/8.0;
  Spot = *Sector->lines[0]->v1;
  SeqName = 'CeilingNormal';
  bStopOnCrush = LineSpecialLevelInfo(Level).bDefaultStopOnCrush;
  switch (Type) {
    case CEILEV_LowerToFloor:
      DestHeight = Level.FindHighestFloorPoint(Sector, &Spot);
      Spot.z = DestHeight;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
      break;
    case CEILEV_LowerToHighestFloor:
      DestHeight = Level.FindHighestFloorSurrounding(Sector, &Spot);
      Spot.z = DestHeight;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
      break;
    case CEILEV_LowerToLowest:
      DestHeight = Level.FindLowestCeilingSurrounding(Sector, &Spot);
      Spot.z = DestHeight;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
      break;
    case CEILEV_RaiseToHighest:
      DestHeight = Level.FindHighestCeilingSurrounding(Sector, &Spot);
      Spot.z = DestHeight;
      TopDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = 1;
      break;
    case CEILEV_RaiseToNearest:
      DestHeight = Level.FindNextHighestCeiling(Sector, &Spot);
      Spot.z = DestHeight;
      TopDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = 1;
      break;
    case CEILEV_LowerByValue:
      DestHeight = GetPlanePointZ(ref Sector->ceiling, Spot)-float(Arg3);
      Spot.z = DestHeight;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
      break;
    case CEILEV_RaiseByValue:
      DestHeight = GetPlanePointZ(ref Sector->ceiling, Spot)+float(Arg3);
      Spot.z = DestHeight;
      TopDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = 1;
      break;
    case CEILEV_LowerByValueTimes8:
      DestHeight = GetPlanePointZ(ref Sector->ceiling, Spot)-float(Arg3)*8.0;
      Spot.z = DestHeight;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
      break;
    case CEILEV_RaiseByValueTimes8:
      DestHeight = GetPlanePointZ(ref Sector->ceiling, Spot)+float(Arg3)*8.0;
      Spot.z = DestHeight;
      TopDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = 1;
      break;
    case CEILEV_LowerTimes8Instant:
      DestHeight = GetPlanePointZ(ref Sector->ceiling, Spot)-float(Arg3)*8.0;
      Spot.z = DestHeight;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
      Speed = 35.0*2000.0;
      break;
    case CEILEV_RaiseTimes8Instant:
      DestHeight = GetPlanePointZ(ref Sector->ceiling, Spot)+float(Arg3)*8.0;
      Spot.z = DestHeight;
      TopDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = 1;
      Speed = 35.0*2000.0;
      break;
    case CEILEV_MoveToValue:
    case CEILEV_MoveToValueTimes8:
      DestHeight = float(Arg3);
      if (Type == CEILEV_MoveToValueTimes8) DestHeight *= 8.0;
      if (Arg4) DestHeight = -DestHeight;
      Spot.z = DestHeight;
      if (GetPlanePointZ(ref Sector->ceiling, Spot) <= DestHeight) {
        Direction = 1;
        TopDist = DotProduct(Sector->ceiling.normal, Spot);
      } else {
        Direction = -1;
        BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      }
      break;
    case CEILEV_LowerAndCrush:
      Crush = Arg3; // args[2] = crushing value
      DestHeight = Level.FindHighestFloorPoint(Sector, &Spot);
      Spot.z = DestHeight+8.0;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
           if (Arg4 == 1) bStopOnCrush = false;
      else if (Arg4 == 2) bStopOnCrush = true;
      break;
    case CEILEV_CrushAndRaise:
    case CEILEV_CrushRaiseAndStay:
      Crush = Arg3; // args[2] = crushing value
      TopDist = Sector->ceiling.dist;
      DestHeight = Level.FindHighestFloorPoint(Sector, &Spot);
      Spot.z = DestHeight+8.0;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
           if (Arg4 == 1) bStopOnCrush = false;
      else if (Arg4 == 2) bStopOnCrush = true;
      break;
    case CEILEV_CrushAndRaiseSilA:
    case CEILEV_CrushRaiseAndStaySilA:
      SeqName = 'CeilingSemiSilent';
      goto case; //k8: is it right???
    case CEILEV_CrushAndRaiseA:
    case CEILEV_CrushRaiseAndStayA:
      Crush = Arg4; // args[3] = crushing value
      TopDist = Sector->ceiling.dist;
      DestHeight = Level.FindHighestFloorPoint(Sector, &Spot);
      Spot.z = DestHeight+8.0;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
      DnSpeed = float(Arg2)*35.0/8.0;
      UpSpeed = float(Arg3)*35.0/8.0;
           if (Arg5 == 1) bStopOnCrush = false;
      else if (Arg5 == 2) bStopOnCrush = true;
      break;
    case CEILEV_Generic:
      Crush = (Arg5&16 ? 20 : 0);
      Direction = (Arg5&8 ? 1 : -1);
      // target heights
      switch (Arg4) {
        case 1: DestHeight = Level.FindHighestCeilingSurrounding(Sector, &Spot); break;
        case 2: DestHeight = Level.FindLowestCeilingSurrounding(Sector, &Spot); break;
        case 3:
          if (Arg5&8) {
            DestHeight = Level.FindNextHighestCeiling(Sector, &Spot);
          } else {
            DestHeight = Level.FindNextLowestCeiling(Sector, &Spot);
          }
          break;
        case 4: DestHeight = Level.FindHighestFloorSurrounding(Sector, &Spot); break;
        case 5: DestHeight = Level.FindHighestFloorPoint(Sector, &Spot); break;
        case 6:
          DestHeight = GetPlanePointZ(ref Sector->ceiling, Spot)+float(Direction)*Level.FindShortestUpperAround(Sector);
          break;
        default:
          DestHeight = GetPlanePointZ(ref Sector->ceiling, Spot)+float(Direction*Arg3);
          break;
      }
      Spot.z = DestHeight;
      if (Direction == 1) {
        TopDist = DotProduct(Sector->ceiling.normal, Spot);
      } else {
        BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      }

      // set texture/type change properties
      if (Arg5&3) {
        // if a texture change is indicated
        if (Arg5&4) {
          // if a numeric model change
          //jff 5/23/98 find model with floor at target height if target
          //is a floor type
          ModelSec = (Arg4 == 4 || Arg4 == 5) ?
            Level.FindModelFloorSector(Sector, DestHeight) :
            Level.FindModelCeilingSector(Sector, DestHeight);
          if (ModelSec) {
            Texture = ModelSec->ceiling.pic;
            switch (Arg5&3) {
              case 1: // type is zeroed
                NewSpecial = 0;
                Type = CEILEV_GenericChange0;
                break;
              case 2: // type is copied
                NewSpecial = Sector->special;
                Type = CEILEV_GenericChangeT;
                break;
              case 3: // type is left alone
                Type = CEILEV_GenericChange;
                break;
            }
          }
        } else if (Line) {
          // else if a trigger model change
          Texture = Line->frontsector->ceiling.pic;
          switch (Arg5&3) {
            case 1: // type is zeroed
              NewSpecial = 0;
              Type = CEILEV_GenericChange0;
              break;
            case 2: // type is copied
              NewSpecial = Line->frontsector->special;
              Type = CEILEV_GenericChangeT;
              break;
            case 3: // type is left alone
              Type = CEILEV_GenericChange;
              break;
          }
        }
      }
      break;
    case CEILEV_GenericCrush:
    case CEILEV_GenericCrush2:
      Type = Arg4 ? CEILEV_CrushAndRaiseSilA : CEILEV_CrushAndRaiseA;
      Crush = Arg5; // args[4] = crushing value
      TopDist = Sector->ceiling.dist;
      DestHeight = Level.FindHighestFloorPoint(Sector, &Spot);
      Spot.z = DestHeight+8.0;
      BottomDist = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
      DnSpeed = float(Arg2)*35.0/8.0;
      UpSpeed = float(Arg3)*35.0/8.0;
      if (Arg4) SeqName = 'CeilingSemiSilent';
      bStopOnCrush = Type == CEILEV_GenericCrush2;
      break;
  }
  StartCeilingSound();
}


//==========================================================================
//
//  CrushStop
//
//  Stop a ceiling from crushing!
//
//==========================================================================
bool CrushStop (int InTag) {
  if (Tag == InTag && Direction != 0) {
    SectorStopSequence(Sector);
    OldDirection = Direction;
    Direction = 0; // in-stasis
    return true;
  }
  return false;
}


//==========================================================================
//
//  ActivateInStasis
//
//  Restart a ceiling that's in-stasis
//
//==========================================================================
void ActivateInStasis (int InTag) {
  if (Tag == InTag && Direction == 0) {
    Direction = OldDirection;
    StartCeilingSound();
  }
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float deltaTime) {
  int res;

  switch (Direction) {
    case 0: // in stasis
      break;
    case 1: // up; `-1` for `crush` means "ignore stuck mobj"
      res = MovePlane(sector:Sector, amount:Speed*deltaTime, dest:TopDist, crush:-1, floorOrCeiling:MOVE_PLANE_CEILING, direction:Direction, stopOnCrush:bStopOnCrush);
      if (res == RES_PASTDEST) {
        SectorStopSequence(Sector);
        switch (Type) {
          case CEILEV_CrushAndRaise:
            Direction = -1;
            Speed = Speed*2.0;
            StartCeilingSound();
            break;
          case CEILEV_CrushAndRaiseSilA:
          case CEILEV_CrushAndRaiseA:
            Direction = -1;
            Speed = DnSpeed;
            StartCeilingSound();
            break;
          // movers with texture change, change the texture then get removed
          case CEILEV_GenericChangeT:
          case CEILEV_GenericChange0:
            Sector->special = NewSpecial;
            goto case; //k8: is it right???
          case CEILEV_GenericChange:
            Sector->ceiling.pic = Texture;
            goto default; //k8: is it right???
          default:
            Finished();
            break;
        }
      }
      break;
    case -1: // down
      res = MovePlane(sector:Sector, amount:Speed*deltaTime, dest:BottomDist, crush:Crush, floorOrCeiling:MOVE_PLANE_CEILING, direction:Direction, stopOnCrush:bStopOnCrush);
      if (res == RES_PASTDEST) {
        SectorStopSequence(Sector);
        switch (Type) {
          case CEILEV_CrushAndRaise:
          case CEILEV_CrushRaiseAndStay:
            Speed = Speed/2.0;
            Direction = 1;
            StartCeilingSound();
            break;
          case CEILEV_CrushAndRaiseSilA:
          case CEILEV_CrushRaiseAndStaySilA:
          case CEILEV_CrushAndRaiseA:
          case CEILEV_CrushRaiseAndStayA:
            Speed = UpSpeed;
            Direction = 1;
            StartCeilingSound();
            break;
          // in the case of ceiling mover/changer, change the texture
          // then remove the active ceiling
          case CEILEV_GenericChangeT:
          case CEILEV_GenericChange0:
            Sector->special = NewSpecial;
            goto case; //k8: is it right???
          case CEILEV_GenericChange:
            Sector->ceiling.pic = Texture;
            goto default; //k8: is it right???
          default:
            Finished();
            break;
        }
      } else if (res == RES_CRUSHED) {
        switch (Type) {
          case CEILEV_LowerAndCrush:
          case CEILEV_CrushAndRaiseA:
          case CEILEV_CrushAndRaiseSilA:
          case CEILEV_CrushRaiseAndStayA:
          case CEILEV_CrushRaiseAndStaySilA:
            if (DnSpeed == 35.0 && UpSpeed == 35.0) Speed = 35.0/8.0;
            break;
        }
      }
      break;
  }
}


//==========================================================================
//
//  StartCeilingSound
//
//==========================================================================
void StartCeilingSound () {
  if (Sector->seqType >= 0) {
    SectorStartSequence(Sector, GetSeqTrans(Sector->seqType, SEQ_Platform), 0);
  } else {
    SectorStartSequence(Sector, SeqName, 0);
  }
}


defaultproperties {
}
