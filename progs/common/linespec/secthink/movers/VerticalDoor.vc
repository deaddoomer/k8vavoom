//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//
//  Door animation code (opening/closing)
//
//**************************************************************************
class VerticalDoor : SectorMover;

enum {
  DOOREV_Close,
  DOOREV_Open,
  DOOREV_Raise,
  DOOREV_RaiseLocked,
  DOOREV_CloseWaitOpen,
  DOOREV_RaiseIn5Mins,
};

int Type;
float TopHeight;
float Speed;
int Direction; // 1 = up, 0 = waiting, -1 = down
float TopWait; // time to wait at the top
float TopTime; // (keep in case a door going down is reset) when it reaches 0, start going down

float BotDist;
float OldFloorDist;

TVec BotSpot;

int LightTag;


//==========================================================================
//
//  Init
//
//==========================================================================
void Init (sector_t *InSector, int Arg1, int Arg2, int Arg3, int Arg4, int Arg5, int InType, optional bool delayOctics) {
  float Height;
  TVec Spot;

  Sector = InSector;
  Sector->CeilingData = self;

  Type = InType;
  Speed = float(Arg2)*35.0/8.0;
  TopWait = float(Arg3)/(delayOctics ? 8.0 : 35.0);
  switch (Type) {
    case DOOREV_Close:
      if (Sector.lines.length == 0) break;
      Height = Level.FindLowestCeilingSurrounding(Sector, &Spot);
      Spot.z = Height-4.0;
      TopHeight = DotProduct(Sector->ceiling.normal, Spot);
      Direction = -1;
      StartDoorSound(false);
      break;
    case DOOREV_CloseWaitOpen:
      LightTag = Arg4;
      TopHeight = Sector->ceiling.dist;
      TopWait *= 4.0;
      Direction = -1;
      StartDoorSound(false);
      break;
    case DOOREV_Raise:
    case DOOREV_RaiseLocked:
    case DOOREV_Open:
      // get light tag depending on type
           if (Type == DOOREV_Open) LightTag = Arg3;
      else if (Type == DOOREV_Raise) LightTag = Arg4;
      else { LightTag = Arg5; /*Type = DOOREV_Raise;*/ }

      //HACK delay 0 means open
      if ((Type == DOOREV_Raise || Type == DOOREV_RaiseLocked) && !Arg3) Type = DOOREV_Open;

      if (Sector.lines.length == 0) break;
      Height = Level.FindLowestCeilingSurrounding(Sector, &Spot);
      Spot.z = Height-4.0;
      TopHeight = DotProduct(Sector->ceiling.normal, Spot);
      Direction = 1;
      if (TopHeight != Sector->ceiling.dist) StartDoorSound(true);
      break;
    case DOOREV_RaiseIn5Mins:
      if (Sector.lines.length == 0) break;
      Direction = 2;
      Height = Level.FindLowestCeilingSurrounding(Sector, &Spot);
      Spot.z = Height-4.0;
      TopHeight = DotProduct(Sector->ceiling.normal, Spot);
      TopTime = 5.0*60.0;
      break;
  }

  if (Level.CompatNoDoorLight) LightTag = 0;

  if (Sector.lines.length == 0) { Direction = 0; return; }
  Height = Level.FindHighestFloorPoint(Sector, &BotSpot);
  BotDist = DotProduct(vector(BotSpot.x, BotSpot.y, Height), Sector->ceiling.normal);
  OldFloorDist = Sector->floor.dist;
}


//==========================================================================
//
//  InitCloseIn30
//
//  Spawn a door that closes after 30 seconds
//
//==========================================================================
void InitCloseIn30 (sector_t *InSector) {
  float Height;

  Sector = InSector;
  Sector->CeilingData = self;

  Direction = 0;
  Type = DOOREV_Raise;
  Speed = 70.0;
  TopTime = 30.0;
  if (Sector.lines.length == 0) return;
  Height = Level.FindHighestFloorPoint(Sector, &BotSpot);
  BotDist = DotProduct(vector(BotSpot.x, BotSpot.y, Height), Sector->ceiling.normal);
  OldFloorDist = Sector->floor.dist;
  TopHeight = Sector->ceiling.dist;
  LightTag = 0;
}


//==========================================================================
//
//  ReUse
//
//==========================================================================
bool ReUse (int InType, line_t *Line, Entity Thing) {
  if ((InType == DOOREV_RaiseLocked && Type == DOOREV_RaiseLocked) ||
      (InType == DOOREV_Raise && Type == DOOREV_Raise))
  {
    // only for "raise" doors, not "open"s
    if (Direction == -1) {
      // go back up
      Direction = 1;
      return true;
    } else if (!(Line->SpacFlags&(SPAC_Push|SPAC_MPush))) {
      // activate push doors don't go back down when you run into them
      // (otherwise opening them would be a real pain)
      if (!Thing || !Thing.bIsPlayer || Thing.Player.bIsBot) return false; // monsters never close doors
      // start going down immediately
      Direction = -1;
      return true;
    }
  }
  return false;
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float deltaTime) {
  int res;

  if (Sector->floor.dist != OldFloorDist) {
    if (!Sector->FloorData || !Platform(Sector->FloorData) || !Platform(Sector->FloorData).IsLift()) {
      OldFloorDist = Sector->floor.dist;
      BotDist = DotProduct(Sector->ceiling.normal, vector(BotSpot.x, BotSpot.y, GetPlanePointZ(ref Sector->floor, BotSpot)));
    }
  }

  switch (Direction) {
    case 0:
      // waiting
      TopTime -= deltaTime;
      if (TopTime <= 0.0) {
        TopTime = 0.0;
        switch (Type) {
          case DOOREV_Raise:
          case DOOREV_RaiseLocked:
            Direction = -1; // time to go back down
            StartDoorSound(false);
            break;
          case DOOREV_CloseWaitOpen:
            Direction = 1;
            StartDoorSound(true);
            break;
          default:
            break;
        }
      }
      break;
    case 2:
      // initial wait
      TopTime -= deltaTime;
      if (TopTime <= 0.0) {
        TopTime = 0.0;
        switch (Type) {
          case DOOREV_RaiseIn5Mins:
            Direction = 1;
            Type = DOOREV_Raise;
            StartDoorSound(true);
            break;
        }
      }
      break;
    case -1:
      // down
      res = MovePlane(Sector, Speed*deltaTime, BotDist, crush:false, floorOrCeiling:MOVE_PLANE_CEILING, direction:Direction, stopOnCrush:false);

      // killough 10/98: implement gradual lighting effects
      if (LightTag && TopHeight != -Sector->floor.dist) {
        auto dvr = (TopHeight+Sector->floor.dist);
        if (!dvr || !dvr.isfinite) dvr = 1;
        EV_LightTurnOnPartway(LightTag, (Sector->ceiling.dist+Sector->floor.dist)/dvr);
      }

      if (res == RES_PASTDEST) {
        SectorStopSequence(Sector);
        switch (Type) {
          case DOOREV_Raise:
          case DOOREV_RaiseLocked:
          case DOOREV_Close:
            Finished(); // unlink and free
            break;
          case DOOREV_CloseWaitOpen:
            Direction = 0;
            TopTime = TopWait;
            break;
          default:
            break;
        }
      } else if (res == RES_CRUSHED) {
        switch (Type)
          {
          case DOOREV_Close: // don't go back up!
            break;
          default:
            Direction = 1;
            StartDoorSound(true);
            break;
        }
      }
      break;
    case 1:
      // up; `-1` for `crush` means "ignore stuck mobj"
      res = MovePlane(Sector, Speed*deltaTime, TopHeight, crush:-1, floorOrCeiling:MOVE_PLANE_CEILING, direction:Direction, stopOnCrush:false);

      // killough 10/98: implement gradual lighting effects
      if (LightTag && TopHeight != -Sector->floor.dist) {
        auto dvr = (TopHeight+Sector->floor.dist);
        if (!dvr || !dvr.isfinite) dvr = 1;
        EV_LightTurnOnPartway(LightTag, (Sector->ceiling.dist+Sector->floor.dist)/dvr);
      }

      if (res == RES_PASTDEST) {
        SectorStopSequence(Sector);
        switch (Type) {
          case DOOREV_Raise:
          case DOOREV_RaiseLocked:
            Direction = 0; // wait at top
            TopTime = TopWait;
            break;
          case DOOREV_Open:
          case DOOREV_CloseWaitOpen:
            Finished(); // unlink and free
            break;
          default:
            break;
        }
      }
      break;
  }
}


//==========================================================================
//
//  EV_LightTurnOnPartway
//
//  killough 10/98
//
//  Turn sectors tagged to line lights on to specified or max neighbor level
//
//  Passed the tag of sector(s) to light and a light level fraction between
//  0 and 1. Sets the light to min on 0, max on 1, and interpolates
//  in-between. Used for doors with gradual lighting effects.
//
//==========================================================================
void EV_LightTurnOnPartway (int Tag, float Frac) {
  Frac = fclamp(Frac, 0, 1);
  // search all sectors for ones with same tag as activating line
  sector_t *sec;
  for (int hidx = XLevel.FindSectorFromTag(out sec, Tag); hidx >= 0; hidx = XLevel.FindSectorFromTag(out sec, Tag, hidx)) {
    int bright = 0;
    int min = sec->params.lightlevel;
    foreach (auto j; 0..sec.lines.length) {
      sector_t *temp = Level.getNextSector(sec->lines[j], sec);
      if (temp) {
        if (temp->params.lightlevel > bright) bright = temp->params.lightlevel;
        if (temp->params.lightlevel < min) min = temp->params.lightlevel;
      }
    }
    sec->params.lightlevel = int(Frac*float(bright)+(1.0-Frac)*float(min));
  }
}


//==========================================================================
//
//  StartDoorSound
//
//==========================================================================
void StartDoorSound (bool bOpen) {
  name SeqName = LineSpecialLevelInfo(Level).GetDefaultDoorSound(Sector);
  if (!SeqName || Sector->seqType >= 0) SeqName = GetSeqTrans(Sector->seqType, SEQ_Door);
  if (bOpen) {
    SectorStartSequence(Sector, SeqName, (Speed >= 256.0 ? 2 : 0));
  } else {
    SectorStartSequence(Sector, SeqName, (Speed >= 256.0 ? 3 : 1));
  }
}


defaultproperties {
}
