//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class StairStepMover : SectorMover;

enum {
  STAIRSEV_DownNormal,
  STAIRSEV_UpNormal,
  STAIRSEV_DownSync,
  STAIRSEV_UpSync,
};

float Speed;
int Direction;
int Crush;
float FloorDestDist;
float DelayTime;
float DelayTotal;
float StairsDelayDist;
float StairsDelayDistDelta;
float ResetDist;
float ResetDelay;
float ResetDelayTime;

// variables that were stored in stair queue array
int QueueType;
float QueueHeight;
StairStepMover QueueNext;

// these were global variables, used only during initialisation
int StairsType;
float StairStepDelta;
float StairSpeed;
int StairTexture;
float StairStartHeight;


//==========================================================================
//
//  Init
//
//==========================================================================
void Init (sector_t *InSector, int Arg1, int Arg2, int Arg3, int Arg4, int Arg5, int InStairsType) {
  int Dir = (InStairsType == STAIRSEV_DownNormal || InStairsType == STAIRSEV_DownSync ? -1 : 1);

  float Height = GetPlanePointZ(ref InSector->floor, vector(0.0, 0.0, 0.0));
  switch (InStairsType) {
    case STAIRSEV_DownNormal:
    case STAIRSEV_UpNormal:
      QueueInit(InSector,
        (InSector->special&SECSPEC_BASE_MASK) == SECSPEC_StairsSpecial1,
        Height,
        InStairsType,
        float(Dir*Arg3),
        Dir,
        float(Arg2)*35.0/8.0,
        InSector->floor.pic,
        Height,
        float(Arg4)/35.0,
        float(Arg5)/35.0);
      break;
    case STAIRSEV_DownSync:
    case STAIRSEV_UpSync:
      QueueInit(InSector,
        (InSector->special&SECSPEC_BASE_MASK) == SECSPEC_StairsSpecial1,
        Height,
        InStairsType,
        float(Dir*Arg3),
        Dir,
        float(Arg2)*35.0/8.0,
        InSector->floor.pic,
        Height,
        0.0,
        float(Arg4)/35.0);
      break;
  }
}


//==========================================================================
//
//  QueueInit
//
//  New stairStep thinker
//
//==========================================================================
void QueueInit (sector_t *InSector, int InType, float InHeight, int InStairsType,
  float InStairStepDelta, int InDirection, float InStairSpeed,
  int InStairTexture, float InStairStartHeight,
  float InDelay, float InResetDelay)
{
  TVec Spot;

  Sector = InSector;
  Sector->FloorData = self;

  QueueType = InType;
  QueueHeight = InHeight;

  StairsType = InStairsType;
  StairStepDelta = InStairStepDelta;
  StairSpeed = InStairSpeed;
  StairTexture = InStairTexture;
  StairStartHeight = InStairStartHeight;

  Direction = InDirection;

  QueueHeight += StairStepDelta;

  Spot = vector(0.0, 0.0, QueueHeight);
  FloorDestDist = DotProduct(Sector->floor.normal, Spot);

  DelayTotal = InDelay;
  if (DelayTotal) {
    Spot.z = GetPlanePointZ(ref Sector->floor, Spot)+StairStepDelta;
    StairsDelayDist = DotProduct(Sector->floor.normal, Spot);
    StairsDelayDistDelta = StairStepDelta;
  }
  ResetDelay = InResetDelay;
  ResetDelayTime = ResetDelay;
  ResetDist = Sector->floor.dist;

  switch (StairsType) {
    case STAIRSEV_DownNormal:
    case STAIRSEV_UpNormal:
      Speed = StairSpeed;
      break;
    case STAIRSEV_DownSync:
    case STAIRSEV_UpSync:
      Speed = StairSpeed*(QueueHeight-StairStartHeight)/StairStepDelta;
      break;
  }
  StartFloorSound();
}


//==========================================================================
//
//  QueueStairSector
//
//==========================================================================
void QueueStairSector (sector_t *sec, float height) {
  StairStepMover Other = SpawnThinker(StairStepMover);
  Other.QueueInit(sec, QueueType^1, height, StairsType,
    StairStepDelta, Direction, StairSpeed, StairTexture,
    StairStartHeight, DelayTotal, ResetDelay);
  AppendToQueue(Other);
}


//==========================================================================
//
//  AppendToQueue
//
//==========================================================================
void AppendToQueue (StairStepMover Other) {
  StairStepMover Tail = self;
  while (Tail.QueueNext) Tail = Tail.QueueNext;
  Tail.QueueNext = Other;
}


//==========================================================================
//
//  ProcessStairSector
//
//==========================================================================
void ProcessStairSector () {
  sector_t *tsec;
  line_t *line;

  // find next sector to raise
  // find nearby sector with sector special equal to type
  foreach (auto i; 0..Sector.lines.length) {
    line = Sector->lines[i];
    if (!(line->flags&ML_TWOSIDED)) continue;
    tsec = line->frontsector;
    if ((tsec->special&SECSPEC_BASE_MASK) == QueueType+SECSPEC_StairsSpecial1 &&
        !tsec->FloorData && tsec->floor.pic == StairTexture)
    {
      QueueStairSector(tsec, QueueHeight);
    }
    tsec = line->backsector;
    if ((tsec->special&SECSPEC_BASE_MASK) == QueueType+SECSPEC_StairsSpecial1 &&
        !tsec->FloorData && tsec->floor.pic == StairTexture)
    {
      QueueStairSector(tsec, QueueHeight);
    }
  }
}


//==========================================================================
//
//  Tick
//
//  move a floor to its destination (up or down)
//
//==========================================================================
override void Tick (float deltaTime) {
  if (ResetDelayTime) {
    ResetDelayTime -= deltaTime;
    if (ResetDelayTime <= 0.0) {
      ResetDelayTime = 0.0;
      FloorDestDist = ResetDist;
      Direction = -Direction;
      ResetDelay = 0.0;
      DelayTime = 0.0;
      DelayTotal = 0.0;
    }
  }

  if (DelayTime) {
    DelayTime -= deltaTime;
    if (DelayTime <= 0.0) DelayTime = 0.0;
    return;
  }

  // don't block lowering floor with stuck monster
  int res = MovePlane(sec:Sector, amount:Speed*deltaTime, dest:FloorDestDist, crush:Crush, floorOrCeiling:MOVE_PLANE_FLOOR, direction:Direction, stopOnCrush:true, smartCrush:true);

  if ((Direction == 1 && Sector->floor.dist >= StairsDelayDist) ||
      (Direction == -1 && Sector->floor.dist <= StairsDelayDist))
  {
    DelayTime = DelayTotal;
    StairsDelayDist += StairsDelayDistDelta;
  }

  if (res == RES_PASTDEST) {
    SectorStopSequence(Sector);
    if (DelayTotal) DelayTotal = 0.0;
    if (ResetDelay) {
      //ResetDelayTime = ResetDelay;
      //ResetDelay = 0.0;
      return;
    }
    Finished();
  }
}


//==========================================================================
//
//  StartFloorSound
//
//==========================================================================
void StartFloorSound () {
  if (!LineSpecialLevelInfo(Level).DefaultStairStepSound || Sector->seqType >= 0) {
    SectorStartSequence(Sector, GetSeqTrans(Sector->seqType, SEQ_Platform), 0);
  } else {
    SectorStartSequence(Sector, LineSpecialLevelInfo(Level).DefaultStairStepSound, 0);
  }
}


defaultproperties {
}
