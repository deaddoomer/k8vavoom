//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class SectorThinker : Thinker;

sector_t *Sector;
SectorThinker NextAffector;


//==========================================================================
//
//  GetNextAffector
//
//  used by the engine to iterate sector affectors
//
//==========================================================================
override Thinker GetNextAffector () {
  return NextAffector;
}


//==========================================================================
//
//  AddAffector
//
//==========================================================================
void AddAffector () {
  if (!Sector->AffectorData) {
    Sector->AffectorData = self;
  } else {
    SectorThinker Tmp = SectorThinker(Sector->AffectorData);
    while (Tmp.NextAffector) Tmp = Tmp.NextAffector;
    Tmp.NextAffector = self;
  }
  NextAffector = none;
}


//==========================================================================
//
//  RemoveAffector
//
//==========================================================================
void RemoveAffector () {
  if (Sector->AffectorData == self) {
    Sector->AffectorData = NextAffector;
  } else {
    SectorThinker Tmp = SectorThinker(Sector->AffectorData);
    while (Tmp && Tmp.NextAffector != self) Tmp = Tmp.NextAffector;
    if (Tmp && Tmp.NextAffector == self) Tmp.NextAffector = NextAffector;
  }
  NextAffector = none;
}


//==========================================================================
//
//  SectorStartSequence
//
//==========================================================================
final void SectorStartSequence (sector_t *sector, name sequence, int ModeNum) {
  Level.SectorStartSequence(sector, sequence, ModeNum);
}


//==========================================================================
//
//  SectorStopSequence
//
//==========================================================================
final void SectorStopSequence (sector_t *sector) {
  Level.SectorStopSequence(sector);
}


defaultproperties {
}
