//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Coin : Inventory
  game(GAME_Strife)
  __mobjinfo__(93);


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
override bool HandlePickup (Inventory Item) {
  if (Coin(Item)) {
    if (Amount < MaxAmount) {
      Amount += Item.Amount;
      if (Amount > MaxAmount) Amount = MaxAmount;
      Item.bPickupGood = true;
    }
    return true;
  }

  if (Inventory) return Inventory.HandlePickup(Item);
  return false;
}


//==========================================================================
//
//  CreateCopy
//
//==========================================================================
override Inventory CreateCopy (EntityEx Toucher) {
  if (Class == Coin) {
    return ::CreateCopy(Toucher);
  } else {
    Inventory Copy = SpawnEntityChecked(class!Inventory, Coin, default, default, default, AllowReplace:false);
    assert(Copy);
    Copy.Amount = Amount;
    GoAwayAndDie();
    return Copy;
  }
}


//==========================================================================
//
//  DropCoinInternal
//
//==========================================================================
Inventory DropCoinInternal (class!Inventory ctype) {
  assert(ctype);
  Inventory Copy = SpawnEntityChecked(class!Inventory, ctype, default, default, default, AllowReplace:false);
  if (Copy) {
    Copy.DropTime = 1.0;
    Copy.bSpecial = false;
    Copy.bSolid = false;
  }
  return Copy;
}


//==========================================================================
//
//  CreateTossable
//
//==========================================================================
override Inventory CreateTossable (optional int DropAmount) {
  Inventory Copy;

  if (bUndroppable || !Owner || Amount <= 0) return none;

  if (!specified_DropAmount || DropAmount < 0) {
    //k8: this is quite special, i guess
    //DropAmount = 50+25+10+1; // this is what the old code could drop at max, and i believe that it is a bug
    DropAmount = Amount;
  }
  DropAmount = clamp(DropAmount, 1, Amount);
  assert(DropAmount > 0);

  // gold is dropped with maximal throwable amount
  while (DropAmount >= 50) {
    assert(Amount >= 50);
    DropAmount -= 50;
    Amount -= 50;
    Copy = DropCoinInternal(Gold50);
  }

  while (DropAmount >= 25) {
    assert(Amount >= 25);
    DropAmount -= 25;
    Amount -= 25;
    Copy = DropCoinInternal(Gold25);
  }

  while (DropAmount >= 10) {
    assert(Amount >= 10);
    DropAmount -= 10;
    Amount -= 10;
    Copy = DropCoinInternal(Gold10);
  }

  while (DropAmount >= 1) {
    assert(Amount >= 1);
    DropAmount -= 1;
    Amount -= 1;
    Copy = DropCoinInternal(Coin);
  }

  assert(Amount >= 0);

  // remove from inventory if everything was dropped out
  if (!Amount && !bKeepDepleted) Destroy();

  return Copy;
}


states
{
Spawn:
  COIN A -1
  Stop
}


defaultproperties {
  ConversationID = 168;
  PickupMessage = "$txt_coin";
  //Amount = 0; //k8: default number of coins (this is invalid, though)
  MaxAmount = 0x7fffffff;
  IconName = 'i_coin';
  bDropped = true;
  bNoDeathmatch = true;
  bFloorClip = true;
  bInvBar = true;
}
