//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class TeleporterBeacon : Inventory
  game(GAME_Strife)
  __mobjinfo__(10);

bool      bRebelSpawned;

//==========================================================================
//
//  TryPickup
//
//==========================================================================

override bool TryPickup(EntityEx Toucher)
{
  //  Can't pick it up if already started to spawn rebels.
  if (bRebelSpawned)
  {
    return false;
  }
  return ::TryPickup(Toucher);
}

//==========================================================================
//
//  Use
//
//==========================================================================

override bool Use(bool Pickup)
{
  //  Increase item count because ItemThrow also decreases it.
  Amount++;
  EntityEx A = PlayerEx(Owner.Player).InventoryThrow();
  if (A)
  {
    A.SetState(A.SeeState);
    A.Target = EntityEx(Owner);
    Amount--;
    return true;
  }
  else
  {
    Amount--;
  }
  return false;
}

//==========================================================================
//
//  A_SummonRebel
//
//==========================================================================

[decorate] final void A_SummonRebel()
{
  EntityEx  A;

  A = Spawn(Rebel1, Origin + vector((Random() - 0.5) * 64.0,
    (Random() - 0.5) * 64.0, 0.0));
  if (!A.TryMove(A.Origin, AllowDropOff:false))
  {
    A.Destroy();
    return;
  }
  //  Once the rebels start teleporting in, you can't pick up the beacon
  // anymore.
  bRebelSpawned = true;
  EntityEx Owner = self.Target;

  // Set up the new rebel.
  if (Owner)
  {
    A.CopyTranslations(Owner);
    A.FriendPlayer = Owner.bIsPlayer ? Owner.Player.GetPlayerNum() + 1 : 0;
  }
  A.Threshold = 100;
  A.bFriendly = true;
  A.bInCombat = true;
  A.LastHeard = Owner;  //  Make sure rebels look for targets.
  if (Level.Game.deathmatch)
  {
    A.Health *= 2;
  }
  if (Owner)
  {
    // Rebels are the same color as their owner
    A.CopyTranslations(Owner);
    // Set the rebel's target to whatever last hurt the player, so long as it's not
    // one of the player's other rebels.
    if (Owner.Target && !A.IsFriend(Owner.Target))
    {
      A.Target = Owner.Target;
    }
  }
  A.SetState(A.SeeState);
  A.Angles = Angles;

  Spawn(TeleportFog, A.Origin);

  Health--;
  if (Health < 0)
  {
    Destroy();
  }
}

states
{
Spawn:
  BEAC A -1
  Stop
See:
  BEAC A 30
  BEAC A 160 A_SummonRebel
  Loop
}

defaultproperties
{
  ConversationID = 166;
  PickupMessage = "$txt_beacon";
  Health = 5;
  Radius = 16.0;
  Height = 8.0;
  Mass = 3.0;
  MaxAmount = 1;
  IconName = 'i_beac';
  bDropped = true;
  bFloorClip = true;
  bInvBar = true;
}
