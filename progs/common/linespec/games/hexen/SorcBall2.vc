//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class SorcBall2 : SorcBall;

//============================================================================
//
//  A_CastSorcererSpell
//
//  Defensive
//
//============================================================================

override void A_CastSorcererSpell()
{
  // Put sorcerer into throw spell animation
  if (Target.Health > 0) {
    auto st = Target.FindState('Attack2');
    if (st) Target.SetState(st);
  }

  float z = Target.Origin.z - Target.FloorClip + SORC_DEFENSE_HEIGHT;
  EntityEx mo = Spawn(SorcFX2, vector(Origin.x, Origin.y, z));

  Actor(Target).bInvulnerable = true;
  Actor(Target).bReflective = true;
  Target.Args[0] = SORC_DEFENSE_TIME;
  if (mo) mo.Target = Target;

  Target.Args[3] = SORC_STOPPED;
}

states
{
Spawn:
  SBMB ABCDEFGHIJKLMNOP 2 A_SorcBallOrbit
  Loop
Pain:
  SBMB A 5 A_SorcBallPop
  SBMB B 2 A_BounceCheck
  Wait
Death:
  SBS3 D 5 A_Explode
  SBS3 E 5
  SBS3 FGH 6
  Stop
}

defaultproperties
{
  BallAngleOffset = 120.0;
}
