//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PhosphorousFire : Actor;


//==========================================================================
//
//  TakeSpecialDamage
//
//==========================================================================
override int DoSpecialDamage(EntityEx victim, EntityEx source, int damage) {
  if (victim.bNoBlood) return damage/2;
  return ::DoSpecialDamage(victim, source, damage);
}


//==========================================================================
//
//  A_Burnination
//
//==========================================================================
[decorate] final void A_Burnination () {
  Velocity.z -= 8.0*35.0;
  Velocity.x += (Random()-Random())*4.0*35.0;
  Velocity.y += (Random()-Random())*4.0*35.0;
  PlaySound('world/largefire', CHAN_VOICE);

  // only the main fire spawns more
  if (!bDropped) {
    float xofs = (Random()-0.5)*40.0;
    float yofs = (Random()-0.5)*40.0;

    if (xofs < 0.0) xofs -= 12.0; else xofs += 12.0;
    if (yofs < 0.0) yofs -= 12.0; else yofs += 12.0;

    EntityEx drop = Spawn(PhosphorousFire, Origin+vector(xofs, yofs, 4.0));
    if (drop) {
      drop.Velocity.x = Velocity.x+(Random()-Random())*8.0*35.0;
      drop.Velocity.y = Velocity.y+(Random()-Random())*8.0*35.0;
      drop.Velocity.z = Velocity.z-1.0*35.0;
      drop.ReactionCount = (P_Random()&3)+2;
      drop.bDropped = true;
      drop.Target = Target;
    }
  }
}


//???k8: first spawn state is a noop; dunno if this is intended; put "NoDelay" there?
states {
Spawn:
  BNG3 B 2 Bright A_Explode
  BNG3 C 2 Bright A_Countdown
  FLBE A 2 Bright A_Burnination
  FLBE B 2 Bright A_Countdown
  FLBE C 2 Bright A_Explode
  FLBE D 3 Bright A_Countdown
  FLBE E 3 Bright A_Explode
  FLBE F 3 Bright A_Countdown
  FLBE G 3 Bright A_Burnination
  Goto Spawn+5
Death:
  FLBE H 2 Bright
  FLBE I 2 Bright A_Burnination
  FLBE JK 2 Bright
  Stop
}


defaultproperties {
  RenderStyle = STYLE_Add;
  ReactionCount = 120;
  bNoBlockmap = true;
  DamageType = 'Fire';
}
