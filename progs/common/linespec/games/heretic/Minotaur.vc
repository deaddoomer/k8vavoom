//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Minotaur : Actor game(GAME_Heretic) __mobjinfo__(9);


//==========================================================================
//
//  IsServant
//
//==========================================================================
override bool IsServant () {
  return bSummonedMonster;
}


//============================================================================
//
//  IsNotAttackingMaster
//
//============================================================================
override bool IsNotAttackingMaster (EntityEx Other) {
  return bSummonedMonster && Other.bSummonedMonster && Other.Target != Tracer;
}


//==========================================================================
//
//  IsMaster
//
//==========================================================================
override bool IsMaster (EntityEx Other) {
  return (bSummonedMonster && Tracer == Other);
}


//==========================================================================
//
//  Slam
//
//==========================================================================
override bool Slam (EntityEx Other) {
  // slamming minotaurs shouldn't move non-creatures
  if (!Other.bMonster && !Other.bIsPlayer) return false;
  return ::Slam(Other);
}


//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================
override int DoSpecialDamage (EntityEx victim, EntityEx source, int damage) {
  damage = ::DoSpecialDamage(victim, source, damage);
  if (damage != -1 && bSkullFly) {
    // slam only when in charge mode
    MinotaurSlam(Actor(victim));
    return -1;
  }
  return damage;
}


//==========================================================================
//
//  MinotaurSlam
//
//==========================================================================
final void MinotaurSlam (Actor Other) {
  float angle = atan2(Other.Origin.y-Origin.y, Other.Origin.x-Origin.x);
  float thrust = 16.0+Random()*4.0;
  float s, c;
  sincos(angle, out s, out c);
  Other.Velocity.x += thrust*c*35.0;
  Other.Velocity.y += thrust*s*35.0;
  Other.Damage(none, self, HITDICE(6), spawnBlood:true);
  if (Other.Player) Other.ReactionTime = 0.4+Random()*0.2;
  Special1 = 0; // stop charging
}


//==========================================================================
//
//  ActiveMinotaur
//
//  Search thinker list for minotaur
//
//==========================================================================
final Actor ActiveMinotaur () {
  Minotaur mo;
  foreach AllThinkers(Minotaur, mo) {
    if (!mo.bSummonedMonster) continue;
    if (mo.Health <= 0) continue;
    if (!mo.bMonster) continue; // for morphed minotaurs
    if (mo.bCorpse) continue;
    if ((XLevel.Time-mo.StartTime) >= PowerMinotaur.default.EffectTime) continue;
    if (mo.Tracer == Tracer) return mo;
  }
  return none;
}


//==========================================================================
//
//  MonsterMorphed
//
//==========================================================================
override void MonsterMorphed () {
  // check for turning off minotaur power for active icon
  if (bSummonedMonster && Tracer && Tracer.Health > 0) {
    Inventory Power = Tracer.FindInventory(PowerMinotaur);
    if (!ActiveMinotaur() && Power) Power.Destroy();
  }
}


//==========================================================================
//
//  A_MinotaurFade0
//
//==========================================================================
[decorate] final void A_MinotaurFade0 () {
  RenderStyle = STYLE_Translucent;
  Alpha = 0.333;
}


//==========================================================================
//
//  A_MinotaurFade1
//
//==========================================================================
[decorate] final void A_MinotaurFade1 () {
  // second level of transparency
  RenderStyle = STYLE_Translucent;
  Alpha = 0.666;
}


//==========================================================================
//
//  A_MinotaurFade2
//
//==========================================================================
[decorate] final void A_MinotaurFade2 () {
  // make fully visible
  RenderStyle = STYLE_Normal;
  Alpha = 1.0;
}


//==========================================================================
//
//  A_SmokePuffExit
//
//==========================================================================
[decorate] final void A_SmokePuffExit () {
  Spawn(MinotaurSmokeExit, Origin);
}


states {
Spawn:
Look:
  MNTR AB 10 A_MinotaurLook
  Loop
See:
  MNTR ABCD 5 A_MinotaurChase
  Loop
SeeNF:
  MNTR A 5
  Goto See+1
Roam:
  MNTR ABCD 5 A_MinotaurRoam
  Loop
RoamNF:
  MNTR A 5
  Goto Roam+1
Melee:
  MNTR V 10 A_FaceTarget
  MNTR W 7 A_FaceTarget
  MNTR X 4 A_MinotaurAtk1
  Goto See
Missile:
  MNTR V 10 A_MinotaurDecide
  MNTR Y 4 A_FaceTarget
  MNTR Z 9 A_MinotaurAtk2
  Goto See
Hammer:
  MNTR V 10 A_FaceTarget
  MNTR W 7 A_FaceTarget
  MNTR X 12 A_MinotaurAtk3
  Goto See
HammerLoop:
  MNTR X 12
  Goto Hammer
Charge:
  MNTR U 2
  MNTR U 2 A_MinotaurCharge
  Wait
Pain:
  MNTR E 3
  MNTR E 6 A_Pain
  Goto See
Death:
  MNTR F 6
  MNTR G 5
  MNTR H 6 A_Scream
  MNTR I 5
  MNTR J 6
  MNTR K 5
  MNTR L 6
  MNTR M 5 A_NoBlocking
  MNTR N 6
  MNTR O 5
  MNTR P 6
  MNTR Q 5
  MNTR R 6
  MNTR S 5
  MNTR T -1 A_BossDeath
  Stop
}


defaultproperties {
  Health = 3000;
  Radius = 28.0;
  Height = 100.0;
  Mass = 800.0;
  Speed = 16.0*35.0;
  PainChance = 0.09765625;
  MissileDamage = 7;
  bSolid = true;
  bShootable = true;
  bCountKill = true;
  bMonster = true;
  bActivateMCross = true;
  bActivatePushWall = true;
  bPassMobj = true;
  bCanUseWalls = true;
  bDropOff = true;
  bFloorClip = true;
  bBoss = true;
  bNoRadiusDamage = true;
  bNoMorph = true;
  bNeverTarget = true;
  bBossDeath = true;
  bSkullFlyInvulnerable = true;
  SightSound = 'minotaur/sight';
  ActiveSound = 'minotaur/active';
  AttackSound = 'minotaur/attack1';
  PainSound = 'minotaur/pain';
  DeathSound = 'minotaur/death';
  DropItemList.length = 2;
  DropItemList[0].Type = ArtiSuperHealth; DropItemList[0].Amount = 0; DropItemList[0].Chance = 0.19921875;
  DropItemList[1].Type = PhoenixRodAmmo; DropItemList[1].Amount = 10; DropItemList[1].Chance = 0.328125;
}
