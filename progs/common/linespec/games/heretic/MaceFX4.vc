//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class MaceFX4 : Actor game(GAME_Heretic) __scriptid__(153);


//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================
override int DoSpecialDamage (EntityEx victim, EntityEx source, int damage) {
  if (victim.bBoss || victim.bDontSquash) {
    // don't allow cheap boss kills
  } else if (victim.bIsPlayer) {
    // player specific checks
    if (victim.bInvulnerable) {
      // can't hurt invulnerable players
    } else if (AutoUseChaosDevice(victim)) {
      // player was saved using chaos device
      return -1;
    } else {
      damage = 10000; // something's gonna die
    }
  } else {
    damage = 10000; // something's gonna die
  }
  return ::DoSpecialDamage(victim, source, damage);
}


//==========================================================================
//
//  AutoUseChaosDevice
//
//==========================================================================
final bool AutoUseChaosDevice (EntityEx Victim) {
  Inventory Item = Victim.FindInventory(ArtiTeleport);
  if (Item) {
    Victim.UseInventory(Item);
    Victim.Health = (Victim.Health+1)/2;
    Victim.Player.Health = Victim.Health;
    return true;
  }
  return false;
}


//===========================================================================
//
//  A_DeathBallImpact
//
//===========================================================================
[decorate] final void A_DeathBallImpact () {
  if (Origin.z <= FloorZ && HitFloorType()) {
    // landed in some sort of liquid
    Destroy();
    return;
  }

  if (Origin.z <= FloorZ && Velocity.z) {
    // bounce
    float angle;
    bool newAngle = false;
    if (Tracer) {
      if (!Tracer.bShootable) {
        // target died
        Tracer = none;
      } else {
        // seek
        angle = atan2(Tracer.Origin.y-Origin.y, Tracer.Origin.x-Origin.x);
        newAngle = true;
      }
    } else {
      // find new target
      TAVec angs;
      angs.pitch = 0.0;
      angs.yaw = 0.0;
      angs.roll = 0.0;
      foreach (int i; 0..16) {
        TVec Dir;
        EntityEx AimTarget = AimLineAttack(Dir, angs, 10.0*64.0);
        if (AimTarget && Target != AimTarget) {
          Tracer = AimTarget;
          angle = atan2(AimTarget.Origin.y-Origin.y, AimTarget.Origin.x-Origin.x);
          newAngle = true;
          break;
        }
        angs.yaw = AngleMod360(angs.yaw+45.0/2.0);
      }
    }

    if (newAngle) {
      Angles.yaw = angle;
      Velocity.x = Speed*cos(angle);
      Velocity.y = Speed*sin(angle);
    }

    PlaySound('weapons/macestop', CHAN_VOICE);
    SetState(IdleState);
  } else {
    // explode
    bNoGravity = true;
    Gravity = 1.0;
    SendExplosion(RGB(255, 128, 0), 86.0, Origin);
    PlaySound('weapons/maceexplode', CHAN_VOICE);
  }
}


states {
Spawn:
  FX02 E 99
  Loop
Death:
  FX02 C 4 Bright A_DeathBallImpact
  FX02 GHIJ 4 Bright
  Stop
}


defaultproperties {
  Radius = 8.0;
  Height = 6.0;
  Speed = 7.0*35.0;
  Gravity = 0.125;
  MissileDamage = 18;
  BounceType = BOUNCE_Heretic;
  bMissile = true;
  bDropOff = true;
  bNoBlockmap = true;
  bActivatePCross = true;
  bActivateImpact = true;
  bBloodSplatter = true;
  bThruGhost = true;
  bTelestomp = true;
}
