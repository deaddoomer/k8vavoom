//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class BlasterFX1 : FastProjectile;

//===========================================================================
//
//  SpawnBlasterEffects
//
//===========================================================================

override void SpawnBlasterEffects()
{
  TVec org;

  if (P_Random() < 64)
  {
    org = Origin;
    org.z = Origin.z - 8.0;
    if (org.z < FloorZ)
    {
      org.z = FloorZ;
    }
    Spawn(BlasterSmoke, org);
  }
}

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

override int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
  if (victim.Class == Ironlich)
  {
    // Less damage to Ironlich bosses
    damage = P_Random() & 1;
    if (!damage)
    {
      return -1;
    }
  }
  return ::DoSpecialDamage(victim, source, damage);
}

//===========================================================================
//
//  A_SpawnRippers
//
//===========================================================================

[decorate] final void A_SpawnRippers()
{
  foreach (int i; 0..8) {
    EntityEx ripper = Spawn(Ripper, Origin);
    if (ripper) {
      float angle = float(i) * 45.0;
      ripper.Target = Target;
      ripper.Angles.yaw = angle;
      ripper.Velocity.x = ripper.Speed * cos(angle);
      ripper.Velocity.y = ripper.Speed * sin(angle);
      ripper.CheckMissileSpawn();
    }
  }
}

states
{
Spawn:
  ACLO E 200
  Loop
Death:
  FX18 A 3 Bright A_SpawnRippers
  FX18 B 3 Bright
  FX18 CDEFG 4 Bright
  Stop
}

defaultproperties
{
  Radius = 12.0;
  Height = 8.0;
  Speed = 6440.0;
  MissileDamage = 2;
  bSpawnSoundSource = true;
  SightSound = 'weapons/blastershoot';
  DeathSound = 'weapons/blasterhit';
}
