//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class HornRodFX2 : Actor;

int RainColor;


//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================
override int DoSpecialDamage (EntityEx victim, EntityEx source, int damage) {
  if ((victim.Class isa Sorcerer2) && P_Random() < 96) { //k8: was '=='
    // D'Sparil teleports away
    Sorcerer2(victim).DSparilTeleport();
    return -1;
  }
  return ::DoSpecialDamage(victim, source, damage);
}


//===========================================================================
//
//  A_SkullRodPL2Seek
//
//===========================================================================
[decorate] final void A_SkullRodPL2Seek () {
  SeekerMissile(10.0, 30.0);
}


//===========================================================================
//
//  A_AddPlayerRain
//
//===========================================================================
[decorate] final void A_AddPlayerRain () {
  PlayerEx plr = PlayerEx(Target.Player);
  if (!plr || !plr.bActive) return; // player left the game
  if (plr.Health <= 0) return; // player is dead
  if (plr.Rain1 && plr.Rain2) {
    // terminate an active rain
    if (plr.Rain1.Health < plr.Rain2.Health) {
      if (plr.Rain1.Health > 16) plr.Rain1.Health = 16;
      plr.Rain1 = none;
    } else {
      if (plr.Rain2.Health > 16) plr.Rain2.Health = 16;
      plr.Rain2 = none;
    }
  }
  // add rain mobj to list
  if (plr.Rain1) plr.Rain2 = self; else plr.Rain1 = self;
}


//===========================================================================
//
//  A_HideInCeiling
//
//===========================================================================
[decorate] final void A_HideInCeiling () {
  Origin.z = CeilingZ+4.0;
}


//===========================================================================
//
//  A_SkullRodStorm
//
//===========================================================================
[decorate] final void A_SkullRodStorm () {
  PlayerEx plr;
  class!Actor rain_type;

  if ((Health--) == 0) {
    SetState(none);
    plr = PlayerEx(Target.Player);
    if (!plr || !plr.bActive) return; // player left the game
    if (plr.Health <= 0) return; // player is dead
         if (plr.Rain1 == self) plr.Rain1 = none;
    else if (plr.Rain2 == self) plr.Rain2 = none;
    return;
  }
  if (Random() < 0.1) return; // fudge rain frequency

  float x = Origin.x+Random()*128.0-64.0;
  float y = Origin.y+Random()*128.0-64.0;
  switch (RainColor) {
    case 0: rain_type = RainPillar; break;
    case 1: rain_type = RainPlayer2; break;
    case 2: rain_type = RainPlayer3; break;
    case 3: rain_type = RainPlayer4; break;
  }

  Actor A = SpawnEntityChecked(class!Actor, rain_type, vector(x, y, ONCEILINGZ));
  if (A) {
    if (Sector->bHasExtrafloors && Origin.z <= CeilingZ) A.Origin.z = CeilingZ-A.Height;
    A.Target = Target;
    A.Velocity.x = 0.00001; // force collision detection
    A.Velocity.z = -A.Speed;
    A.CheckMissileSpawn();
  }
  if (!(Special1&31)) PlaySound('weapons/hornrodpowrain', CHAN_VOICE);
  ++Special1;
}


states {
Spawn:
  FX00 C 3 Bright
  FX00 D 3 Bright A_SkullRodPL2Seek
  FX00 E 3 Bright
  FX00 F 3 Bright A_SkullRodPL2Seek
  Loop
Death:
  FX00 H 5 Bright A_AddPlayerRain
  FX00 I 5 Bright
  FX00 J 4 Bright
  FX00 KLM 3 Bright
  FX00 G 1 A_HideInCeiling
  FX00 G 1 A_SkullRodStorm
  Wait
}


defaultproperties {
  Health = 140;
  Radius = 12.0;
  Height = 8.0;
  Speed = 770.0;
  MissileDamage = 10;
  RenderStyle = STYLE_Add;
  bMissile = true;
  bNoBlockmap = true;
  bNoGravity = true;
  bDropOff = true;
  bNoTeleport = true;
  bActivatePCross = true;
  bActivateImpact = true;
  bBloodSplatter = true;
  SightSound = 'weapons/hornrodshoot';
  DeathSound = 'weapons/hornrodpowhit';
}
