//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class HornRodFX2 : Actor;

int RainColor;

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

override int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
  if (victim.Class == Sorcerer2 && P_Random() < 96)
  {
    // D'Sparil teleports away
    Sorcerer2(victim).DSparilTeleport();
    return -1;
  }
  return ::DoSpecialDamage(victim, source, damage);
}

//===========================================================================
//
//  A_SkullRodPL2Seek
//
//===========================================================================

[decorate] final void A_SkullRodPL2Seek()
{
  SeekerMissile(10.0, 30.0);
}

//===========================================================================
//
//  A_AddPlayerRain
//
//===========================================================================

[decorate] final void A_AddPlayerRain()
{
  PlayerEx player;

  player = PlayerEx(Target.Player);
  if (!player || !player.bActive)
  {
    // Player left the game
    return;
  }
  if (player.Health <= 0)
  {
    // Player is dead
    return;
  }
  if (player.Rain1 && player.Rain2)
  {
    // Terminate an active rain
    if (player.Rain1.Health < player.Rain2.Health)
    {
      if (player.Rain1.Health > 16)
      {
        player.Rain1.Health = 16;
      }
      player.Rain1 = none;
    }
    else
    {
      if (player.Rain2.Health > 16)
      {
        player.Rain2.Health = 16;
      }
      player.Rain2 = none;
    }
  }
  // Add rain mobj to list
  if (player.Rain1)
  {
    player.Rain2 = self;
  }
  else
  {
    player.Rain1 = self;
  }
}

//===========================================================================
//
//  A_HideInCeiling
//
//===========================================================================

[decorate] final void A_HideInCeiling()
{
  Origin.z = CeilingZ + 4.0;
}


//===========================================================================
//
//  A_SkullRodStorm
//
//===========================================================================
[decorate] final void A_SkullRodStorm() {
  PlayerEx player;
  class!Actor rain_type;

  if (Health-- == 0) {
    SetState(none);
    player = PlayerEx(Target.Player);
    if (!player || !player.bActive) return; // player left the game
    if (player.Health <= 0) return; // player is dead
         if (player.Rain1 == self) player.Rain1 = none;
    else if (player.Rain2 == self) player.Rain2 = none;
    return;
  }
  if (Random() < 0.1) return; // fudge rain frequency

  float x = Origin.x + Random() * 128.0 - 64.0;
  float y = Origin.y + Random() * 128.0 - 64.0;
  switch (RainColor) {
    case 0: rain_type = RainPillar; break;
    case 1: rain_type = RainPlayer2; break;
    case 2: rain_type = RainPlayer3; break;
    case 3: rain_type = RainPlayer4; break;
  }

  Actor A = SpawnEntityChecked(class!Actor, rain_type, vector(x, y, ONCEILINGZ));
  if (A) {
    if (Sector->bHasExtrafloors && Origin.z <= CeilingZ) A.Origin.z = CeilingZ - A.Height;
    A.Target = Target;
    A.Velocity.x = 0.00001; // Force collision detection
    A.Velocity.z = -A.Speed;
    A.CheckMissileSpawn();
  }
  if (!(Special1 & 31)) PlaySound('weapons/hornrodpowrain', CHAN_VOICE);
  Special1++;
}

states
{
Spawn:
  FX00 C 3 Bright
  FX00 D 3 Bright A_SkullRodPL2Seek
  FX00 E 3 Bright
  FX00 F 3 Bright A_SkullRodPL2Seek
  Loop
Death:
  FX00 H 5 Bright A_AddPlayerRain
  FX00 I 5 Bright
  FX00 J 4 Bright
  FX00 KLM 3 Bright
  FX00 G 1 A_HideInCeiling
  FX00 G 1 A_SkullRodStorm
  Wait
}

defaultproperties
{
  Health = 140;
  Radius = 12.0;
  Height = 8.0;
  Speed = 770.0;
  MissileDamage = 10;
  RenderStyle = STYLE_Add;
  bMissile = true;
  bNoBlockmap = true;
  bNoGravity = true;
  bDropOff = true;
  bNoTeleport = true;
  bActivatePCross = true;
  bActivateImpact = true;
  bBloodSplatter = true;
  SightSound = 'weapons/hornrodshoot';
  DeathSound = 'weapons/hornrodpowhit';
}
