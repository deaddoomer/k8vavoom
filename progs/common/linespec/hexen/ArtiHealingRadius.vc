//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ArtiHealingRadius : Inventory
  game(GAME_Hexen)
  __mobjinfo__(10120);

const float HEAL_RADIUS_DIST  = 255.0;

//==========================================================================
//
//  Use
//
//  Do class specific effect for everyone in radius
//
//==========================================================================

override bool Use(bool Pickup)
{
  PlayerPawn P;
  float dist;
  int effective = false;
  int amount;
  bool GaveArmor;

  foreach AllThinkers(PlayerPawn, P)
  {
    if (!P.bIsPlayer) continue;
    if (P.Health <= 0) continue;
    dist = Owner.DistTo(P);
    if (dist > HEAL_RADIUS_DIST)
    {
      // Out of range
      continue;
    }

    if (nameicmp(PlayerPawn(Owner).HealRadiusType, 'Armor') == 0)
    {
      // Radius armor boost
      GaveArmor = false;
      foreach (int i; 0..4) {
        HexenArmor Armor = SpawnEntityChecked(class!HexenArmor, HexenArmor, default, default, default, AllowReplace:false);
        if (Armor) {
          Armor.Health = i;
          Armor.Amount = 1;
          if (Armor.TryPickup(P)) {
            GaveArmor = true;
          } else {
            Armor.Destroy();
          }
        }
      }
      if (GaveArmor)
      {
        effective = true;
        P.PlaySound('MysticIncant', CHAN_ITEM);
      }
    }
    else if (nameicmp(PlayerPawn(Owner).HealRadiusType, 'Mana') == 0)
    {
      // Radius mana boost
      amount = 50 + (P_Random() % 50);
      if ((PlayerEx(P.Player).GiveAmmo(Mana1, amount)) ||
        (PlayerEx(P.Player).GiveAmmo(Mana2, amount)))
      {
        effective = true;
        P.PlaySound('MysticIncant', CHAN_ITEM);
      }
    }
    else
    {
      // Radius heal
      amount = 50 + (P_Random() % 50);
      if (P.GiveBody(amount))
      {
        effective = true;
        P.PlaySound('MysticIncant', CHAN_ITEM);
      }
    }
  }
  return effective;
}

states
{
Spawn:
  HRAD ABCDEFGHIJKLMNOP 4 Bright
  Loop
}

defaultproperties
{
  MaxAmount = DefMaxAmount;
  PickupSound = 'PickupArtifact';
  PickupMessage = "$txt_artihealingradius";
  IconName = 'artihrad';
  bFloatBob = true;
  PickupFlashType = PickupFlash;
  bInvBar = true;
}
