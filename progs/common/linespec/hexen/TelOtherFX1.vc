//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class TelOtherFX1 : Actor;

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

override int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
   if ((victim.bMonster || victim.bIsPlayer) && !victim.bBoss && !victim.bNoTeleOther)
  {
    TeleportOther(Actor(victim));
  }
  return -1;
}

//==========================================================================
//
//  TeleportOther
//
//==========================================================================

final void TeleportOther(Actor victim)
{
  if (victim.bIsPlayer)
  {
    if (Level.Game.deathmatch)
    {
      TeleportToDeathmatchStarts(victim);
    }
    else
    {
      TeleportToPlayerStarts(victim);
    }
  }
  else
  {
    // If death action, run it upon teleport
    if (victim.bMonster && victim.Special)
    {
      victim.SetTID(0);
      Level.ExecuteActionSpecial(victim.Special, victim.Args[0],
        victim.Args[1], victim.Args[2], victim.Args[3],
        victim.Args[4], nullptr, 0, Level.bActivateOwnSpecial ? victim :
        Target);
      victim.Special = 0;
    }

    // Send all monsters to deathmatch spots
    TeleportToDeathmatchStarts(victim);
  }
}

//==========================================================================
//
//  TeleportToDeathmatchStarts
//
//==========================================================================

final void TeleportToDeathmatchStarts(Actor victim)
{
  int i;
  float destX;
  float destY;
  float destAngle;

  if (Level.DeathmatchStarts.Num)
  {
    i = P_Random() % Level.DeathmatchStarts.Num;
    destX = Level.DeathmatchStarts[i].x;
    destY = Level.DeathmatchStarts[i].y;
    destAngle = float(45 * (Level.DeathmatchStarts[i].angle / 45));
    victim.Teleport(vector(destX, destY, ONFLOORZ), destAngle, true,
      true, false);
  }
  else
  {
    TeleportToPlayerStarts(victim);
  }
}

//==========================================================================
//
//  TeleportToPlayerStarts
//
//==========================================================================

final void TeleportToPlayerStarts(Actor victim)
{
  int i;
  int selections = 0;
  float destX;
  float destY;
  float destAngle;

  for (i = 0; i < MAXPLAYERS; i++) {
    if (!Level.Game.Players[i]) continue;
    ++selections;
  }
  if (selections == 0) Error("no players in game; wtf?!");
  //FIXME: this logic is flawed!
  i = P_Random()%selections;
  while (selections--) {
    auto sp = Level.GetPlayerStart(i, 0, failIfNotFound:false);
    if (sp) {
      destX = sp->x;
      destY = sp->y;
      destAngle = 45.0*sp->angle/45.0;
      victim.Teleport(vector(destX, destY, ONFLOORZ), destAngle, true, true, false);
      return;
    }
    i = (i+1)%MAXPLAYERS;
  }
  Error("no player spawn spots in game; wtf?!");
}

//==========================================================================
//
//  A_TeloSpawnA
//
//==========================================================================

[decorate] final void A_TeloSpawnA()
{
  EntityEx A = Spawn(TelOtherFX2, Origin);
  if (A)
  {
    A.Angles.yaw = Angles.yaw;
    A.Target = Target;
    A.Velocity = Velocity / 2.0;
    A.Special1 = 1; // Lifetime countdown
  }
}

//==========================================================================
//
//  A_TeloSpawnB
//
//==========================================================================

[decorate] final void A_TeloSpawnB()
{
  EntityEx A = Spawn(TelOtherFX3, Origin);
  if (A)
  {
    A.Angles.yaw = Angles.yaw;
    A.Target = Target;
    A.Velocity = Velocity / 2.0;
    A.Special1 = 1; // Lifetime countdown
  }
}

//==========================================================================
//
//  A_TeloSpawnC
//
//==========================================================================

[decorate] final void A_TeloSpawnC()
{
  EntityEx A = Spawn(TelOtherFX4, Origin);
  if (A)
  {
    A.Angles.yaw = Angles.yaw;
    A.Target = Target;
    A.Velocity = Velocity / 2.0;
    A.Special1 = 1; // Lifetime countdown
  }
}

//==========================================================================
//
//  A_TeloSpawnD
//
//==========================================================================

[decorate] final void A_TeloSpawnD()
{
  EntityEx A = Spawn(TelOtherFX5, Origin);
  if (A)
  {
    A.Angles.yaw = Angles.yaw;
    A.Target = Target;
    A.Velocity = Velocity / 2.0;
    A.Special1 = 1; // Lifetime countdown
  }
}

//==========================================================================
//
//  A_CheckTeleRing
//
//==========================================================================

[decorate] final void A_CheckTeleRing()
{
  if (Special1-- <= 0)
  {
    SetState(FindState('Death'));
  }
}

states
{
Spawn:
  TRNG E 5 Bright
  TRNG D 4 Bright
  TRNG C 3 Bright A_TeloSpawnC
  TRNG B 3 Bright A_TeloSpawnB
  TRNG A 3 Bright A_TeloSpawnA
  TRNG B 3 Bright A_TeloSpawnB
  TRNG C 3 Bright A_TeloSpawnC
  TRNG D 3 Bright A_TeloSpawnD
  Goto Spawn+2
Death:
  TRNG E 3 Bright
  Stop
}

defaultproperties
{
  Radius = 16.0;
  Speed = 700.0;
  MissileDamage = 10001;
  RenderStyle = STYLE_Add;
  bMissile = true;
  bNoBlockmap = true;
  bDropOff = true;
  bNoGravity = true;
  bNoTeleport = true;
  bBloodlessImpact = true;
  bBloodSplatter = true;
}
