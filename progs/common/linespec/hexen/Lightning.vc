//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Lightning : Actor
  abstract;

Lightning LightningLink;
int ZigZagCount;  // Only for floor
float ZagSpeed;

//==========================================================================
//
//  Touch
//
//==========================================================================

override bool Touch(Entity InOther)
{
  int damage;
  EntityEx Other;

  if (!bMissile)
  {
    return false;
  }

  Other = EntityEx(InOther);
  // Check for a non-shootable mobj
  if (!Other.bShootable || Other.bNonShootable)
  {
    return true;
  }

  // Check for blasted thing running into another
  if (bBlasted && Other.bShootable)
  {
    if (!Other.bBoss && Other.bMonster)
    {
      Other.Velocity.x += Velocity.x;
      Other.Velocity.y += Velocity.y;
      if ((Other.Velocity.x + Other.Velocity.y) > 3.0 * 35.0)
      {
        damage = (int(fmax(0, Mass)) / 100) + 1;
        Other.Damage(self, self, damage, spawnBlood:true);
        damage = (int(fmax(0, Other.Mass)) / 100) + 1;
        Damage(Other, Other, damage >> 2);
      }
      return false;
    }
  }

  if (Other == Target)
  {
    return true;
  }

  if (Other.Mass != 99999.0)
  {
    Other.Velocity.x += Velocity.x / 16.0;
    Other.Velocity.y += Velocity.y / 16.0;
  }
  if ((!Other.bIsPlayer && !Other.bBoss) || !(XLevel.TicTime & 1))
  {
    if (Other.IsA('Centaur'))
    {
      // Lightning does more damage to centaurs
      Other.Damage(self, Target, 9, spawnBlood:true);
    }
    else
    {
      Other.Damage(self, Target, 3, spawnBlood:true);
    }
    if (!(GetSoundPlayingInfo(self, GetSoundID('MageLightningZap'))))
    {
      PlaySound('MageLightningZap', CHAN_VOICE);
    }
    if (Other.HowlSound && Other.bMonster && P_Random() < 64 &&
      !GetSoundPlayingInfo(Other, GetSoundID(Other.HowlSound)))
    {
      Other.PlaySound(Other.HowlSound, CHAN_VOICE);
    }
  }
  Health--;
  if (Health <= 0 || Other.Health <= 0)
  {
    return false;
  }
  if (Class == GetClassReplacement(LightningFloor))
  {
    if (LightningLink && !LightningLink.Tracer)
    {
      LightningLink.Tracer = Other;
    }
  }
  else if (!Tracer)
  {
    Tracer = Other;
  }
  return true;  // lightning zaps through all sprites
}

//==========================================================================
//
//  A_LightningClip
//
//==========================================================================

[decorate] final void A_LightningClip()
{
  EntityEx targ;
  int zigZag;

  if (Class == GetClassReplacement(LightningFloor))
  {
    if (Sector->bHasExtrafloors && LightningLink && Target.Origin.z >= LightningLink.FloorZ) {
      Origin.z = LightningLink.FloorZ;
    } else {
      Origin.z = FloorZ;
    }
    if (LightningLink) {
      targ = LightningLink.Tracer;
    } else {
      targ = none;
    }
  }
  else if (Class == GetClassReplacement(LightningCeiling))
  {
    if (Sector->bHasExtrafloors && LightningLink && Target.Origin.z <= LightningLink.CeilingZ) {
      Origin.z = LightningLink.CeilingZ - Height;
    } else {
      Origin.z = CeilingZ - Height;
    }
    targ = Tracer;
  }
  if (Class == GetClassReplacement(LightningFloor))
  {
    // floor lightning zig-zags, and forces the ceiling lightning to mimic
    zigZag = P_Random();
    if ((zigZag > 128 && ZigZagCount < 2) || ZigZagCount < -2)
    {
      Thrust(Angles.yaw + 90.0, ZagSpeed);
      if (LightningLink)
      {
        LightningLink.Thrust(Angles.yaw + 90.0, ZagSpeed);
      }
      ZigZagCount++;
    }
    else
    {
      Thrust(Angles.yaw - 90.0, ZagSpeed);
      if (LightningLink)
      {
        LightningLink.Thrust(Angles.yaw - 90.0, ZagSpeed);
      }
      ZigZagCount--;
    }
  }
  if (targ)
  {
    if (targ.Health <= 0)
    {
      ExplodeMissile(targ);
    }
    else
    {
      Angles.yaw = atan2(targ.Origin.y - Origin.y,
        targ.Origin.x - Origin.x);
      Velocity.x = 0.0;
      Velocity.y = 0.0;
      Thrust(Angles.yaw, Speed * Level.Game.frametime / 2.0);
    }
  }
}

//==========================================================================
//
//  A_LightningZap
//
//==========================================================================

[decorate] final void A_LightningZap()
{
  LightningZap Zap;
  float deltaZ;

  A_LightningClip();

  Health -= 8;
  if (Health <= 0)
  {
    SetState(FindState('Death'));
    return;
  }
  if (Class == GetClassReplacement(LightningFloor))
  {
    deltaZ = 10.0;
  }
  else
  {
    deltaZ = -10.0;
  }
  Zap = LightningZap(Spawn(LightningZap,
    Origin + vector((Random() - 0.5) * Radius,
    (Random() - 0.5) * Radius, deltaZ)));
  if (Zap)
  {
    Zap.LightningOwner = self;
    Zap.Velocity.x = Velocity.x;
    Zap.Velocity.y = Velocity.y;
    Zap.Target = Target;
    if (Class == GetClassReplacement(LightningFloor))
    {
      Zap.Velocity.z = 20.0 * 35.0;
    }
    else
    {
      Zap.Velocity.z = -20.0 * 35.0;
    }
  }
  if (Class == GetClassReplacement(LightningFloor) && P_Random() < 160)
  {
    PlaySound('MageLightningContinuous', CHAN_VOICE);
  }
}

//==========================================================================
//
//  A_LightningRemove
//
//==========================================================================

[decorate] final void A_LightningRemove()
{
  if (LightningLink)
  {
    LightningLink.LightningLink = none;
    LightningLink.ExplodeMissile(none);
  }
}

//==========================================================================
//
//  A_LastZap
//
//==========================================================================

[decorate] final void A_LastZap()
{
  EntityEx A = Spawn(LightningZap, Origin);
  if (A)
  {
    A.Velocity.z = 40.0 * 35.0;
    A.SetState(A.FindState('LastZap'));
  }
}

defaultproperties
{
  ZagSpeed = 1.0;
  bLightning = true;
}
