//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**  Based on code from ZDoom with following notice:
//**
//** Copyright 1998-2006 Randy Heit
//** All rights reserved.
//**
//** Redistribution and use in source and binary forms, with or without
//** modification, are permitted provided that the following conditions
//** are met:
//**
//** 1. Redistributions of source code must retain the above copyright
//**    notice, this list of conditions and the following disclaimer.
//** 2. Redistributions in binary form must reproduce the above copyright
//**    notice, this list of conditions and the following disclaimer in the
//**    documentation and/or other materials provided with the distribution.
//** 3. The name of the author may not be used to endorse or promote products
//**    derived from this software without specific prior written permission.
//**
//** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//**
//**************************************************************************
//**
//**  InterpolationPoint: node along a camera's path
//**
//**  args[0] = pitch
//**  args[1] = time (in octics) to get here from previous node
//**  args[2] = time (in octics) to stay here before moving to next node
//**  args[3] = low byte of next node's tid
//**  args[4] = high byte of next node's tid
//**
//**************************************************************************

class InterpolationPoint : Actor
  __mobjinfo__(9070);

InterpolationPoint NextPoint;

//==========================================================================
//
//  FormChain
//
//==========================================================================

void FormChain()
{
  InterpolationPoint A;

  if (bAmbush)
    return;

  bAmbush = true;

  foreach AllThinkers(InterpolationPoint, A)
  {
    if (A.TID != Args[3] + 256 * Args[4])
      continue;
    if (A == self)  // Don't link to self
      continue;
    NextPoint = A;
    break;
  }

  if (NextPoint == none && (Args[3] | Args[4]))
    print("Can't find target for camera node %d", TID);

  Angles.pitch = itof(Args[0]);
  if (Angles.pitch <= -90.0)
    Angles.pitch = -89.0;
  else if (Angles.pitch >= 90.0)
    Angles.pitch = 89.0;

  if (NextPoint != none)
    NextPoint.FormChain();
}

//==========================================================================
//
//  ScanForLoop
//
//  Return the node (if any) where a path loops, relative to this one.
//
//==========================================================================

InterpolationPoint ScanForLoop()
{
  InterpolationPoint node = self;
  while (node.NextPoint && node.NextPoint != self && node.Special1 == 0)
  {
    node.Special1 = 1;
    node = node.NextPoint;
  }
  return node.NextPoint ? node : none;
}

defaultproperties
{
  bNoBlockmap = true;
  bNoGravity = true;
  bNoSplash = true;
  RenderStyle = STYLE_None;
}
