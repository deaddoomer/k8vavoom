//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ScriptedMarine : Actor game(GAME_Doom) __mobjinfo__(9100) __scriptid__(151);

enum {
  WEAPON_Dummy,
  WEAPON_Fist,
  WEAPON_BerserkFist,
  WEAPON_Chainsaw,
  WEAPON_Pistol,
  WEAPON_Shotgun,
  WEAPON_SuperShotgun,
  WEAPON_Chaingun,
  WEAPON_RocketLauncher,
  WEAPON_PlasmaRifle,
  WEAPON_Railgun,
  WEAPON_BFG,
};

int PrevTicks;


//==========================================================================
//
//  BeginPlay
//
//==========================================================================
override void BeginPlay () {
  ::BeginPlay();
  // copy standard player's scaling
  ScaleX = DoomPlayer.default.ScaleX;
  ScaleY = DoomPlayer.default.ScaleY;
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float DeltaTime) {
  ::Tick(DeltaTime);

  if (Level.bFrozen && ((!bIsPlayer && !bNoTimeFreeze) ||
      (bIsPlayer && !(PlayerEx(Player).Cheats&PlayerEx::CF_TIMEFREEZE))))
  {
    return;
  }

  if (Special1f) {
    if (MissileState == FindState('Missile', 'SSG', true)) {
      // super shotgun sounds
      int Ticks = int((XLevel.Time-Special1f)*35.0);
      if (Ticks < 47) {
        if (Ticks != PrevTicks) {
          switch (Ticks) {
            case 14:
              PlaySound('weapons/sshoto', CHAN_WEAPON);
              break;
            case 28:
              PlaySound('weapons/sshotl', CHAN_WEAPON);
              break;
            case 41:
              PlaySound('weapons/sshotc', CHAN_WEAPON);
              break;
          }
        }
        PrevTicks = Ticks;
      } else {
        Special1f = 0.0;
      }
    } else {
      // wait for a refire time
      if (XLevel.Time >= Special1f) {
        Special1f = 0.0;
      } else {
        bJustAttacked = true;
      }
    }
  }
}


//==========================================================================
//
//  SetWeapon
//
//==========================================================================
final void SetWeapon (int WpnNum) {
  MeleeState = none;
  MissileState = none;

  switch (WpnNum) {
    default:
    case WEAPON_Dummy: MissileState = FindState('Missile', 'None', true); break;
    case WEAPON_Fist: MeleeState = FindState('Melee', 'Fist', true); break;
    case WEAPON_BerserkFist: MeleeState = FindState('Melee', 'Berserker', true); break;
    case WEAPON_Chainsaw: MeleeState = FindState('Melee', 'Chainsaw', true); break;
    case WEAPON_Pistol: MissileState = FindState('Missile', 'Pistol', true); break;
    case WEAPON_Shotgun: MissileState = FindState('Missile', 'Shotgun', true); break;
    case WEAPON_SuperShotgun: MissileState = FindState('Missile', 'SSG', true); break;
    case WEAPON_Chaingun: MissileState = FindState('Missile', 'Chaingun', true); break;
    case WEAPON_RocketLauncher: MissileState = FindState('Missile', 'Rocket', true); break;
    case WEAPON_PlasmaRifle: MissileState = FindState('Missile', 'Plasma', true); break;
    case WEAPON_Railgun: MissileState = FindState('Missile', 'Railgun', true); break;
    case WEAPON_BFG: MissileState = FindState('Missile', 'Bfg', true); break;
  }

  //printdebug("%C: SetWeapon(%s): state=%s", self, WpnNum, MissileState);
}


//==========================================================================
//
//  SetSprite
//
//==========================================================================
final void SetSprite (class!EntityEx SrcClass) {
  if (SrcClass) {
    FixedSpriteName = GetStateSpriteName(FindClassState(SrcClass, 'Spawn'));
    ScaleX = SrcClass.default.ScaleX;
    ScaleY = SrcClass.default.ScaleY;
  } else {
    // set back to default sprite
    FixedSpriteName = '';
    ScaleX = DoomPlayer.default.ScaleX;
    ScaleY = DoomPlayer.default.ScaleY;
  }
}


//==========================================================================
//
//  A_MarineLook
//
//==========================================================================
[decorate] final void A_MarineLook () {
  A_MarineNoise();
  A_Look();
}


//============================================================================
//
//  A_MarineNoise
//
//============================================================================
[decorate] final void A_MarineNoise () {
  if (MeleeState == FindState('Melee', 'Chainsaw', true)) {
    PlaySound('weapons/sawidle', CHAN_WEAPON);
  }
}


//==========================================================================
//
//  A_MarineChase
//
//==========================================================================
[decorate] final void A_MarineChase () {
  A_MarineNoise();
  A_Chase();
}


//===========================================================================
//
//  A_M_SawRefire
//
//===========================================================================
[decorate] final void A_M_SawRefire () {
  // check if target is lost or dead
  if (!Target || Target.Health <= 0) {
    SetState(GetStatePlus(State, 1));
    return;
  }
  // check if target went out of the range
  if (!CheckMeleeRange()) {
    SetState(GetStatePlus(State, 1));
  }
}


//===========================================================================
//
//  A_M_Punch
//
//===========================================================================
[decorate] final void A_M_Punch () {
  decorate_A_M_Punch();
}


//===========================================================================
//
//  decorate_A_M_Punch
//
//===========================================================================
[decorate] final void decorate_A_M_Punch (optional int force) {
  TVec dir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;
  if (!specified_force) force = 1;

  int damage = ((P_Random()%10+1)<<1)*force;

  A_FaceTarget();
  TAVec aimAngles = Angles;
  aimAngles.yaw = AngleMod360(aimAngles.yaw+(Random()-Random())*45.0/8.0);
  EntityEx AimTarget = AimLineAttack(dir, aimAngles, DEFAULT_MELEERANGE);
  LineAttack(dir, DEFAULT_MELEERANGE, damage, BulletPuff, DmgType:'Fist');

  // turn to face target
  if (AimTarget) {
    PlaySound('*fist', CHAN_WEAPON);
    Angles.yaw = atan2(AimTarget.Origin.y-Origin.y,
                       AimTarget.Origin.x-Origin.x);
  }
}


//===========================================================================
//
//  A_M_BerserkPunch
//
//===========================================================================
[decorate] final void A_M_BerserkPunch () {
  TVec dir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  int damage = ((P_Random()%10+1)<<1)*10;

  A_FaceTarget();
  TAVec aimAngles = Angles;
  aimAngles.yaw = AngleMod360(aimAngles.yaw+(Random()-Random())*45.0/8.0);
  EntityEx AimTarget = AimLineAttack(dir, aimAngles, DEFAULT_MELEERANGE);
  LineAttack(dir, DEFAULT_MELEERANGE, damage, BulletPuff, DmgType:'BerserkFist');

  // turn to face target
  if (AimTarget) {
    PlaySound('*fist', CHAN_WEAPON);
    Angles.yaw = atan2(AimTarget.Origin.y-Origin.y,
                       AimTarget.Origin.x-Origin.x);
  }
}


//===========================================================================
//
//  A_M_Refire
//
//===========================================================================
[decorate] final void A_M_Refire () {
  decorate_A_M_Refire();
}


//===========================================================================
//
//  decorate_A_M_Refire
//
//===========================================================================
[decorate] final void decorate_A_M_Refire (optional bool ignoreMissile) {
  //printdebug("%C:REFIRE! (ignoreMissile=%B)", self, ignoreMissile);
  bool hasMissileState = (ignoreMissile ? false : !!MissileState);
  // check if target is lost or dead
  if (!Target || Target.Health <= 0) {
    if (hasMissileState && Random() < 0.625) {
      // look for a new target
      if (LookForPlayers(360) && CheckMissileRange()) return; // got one, continue shooting
    }
    SetState(GetStatePlus(State, 1));
    return;
  }
  // check if target went out of the range or sight, with small chance to
  // stop shooting even if target is not dead.
  if ((!hasMissileState && !CheckMeleeRange()) || !CanSee(Target, disableBetterSight:true) || P_Random() < 4) {
    //printdebug("%C:  refire plus1 (state=%s)", self, State);
    state newState = GetStatePlus(State, 1);
    //printdebug("%C:  newState=%s", self, newState);
    SetState(newState);
  }
}


//===========================================================================
//
//  A_M_FirePistol
//
//===========================================================================
[decorate] final void A_M_FirePistol () {
  TVec dir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_FaceTarget();
  PlaySound('weapons/pistol', CHAN_WEAPON);

  Aim(dir, 16.0*64.0);
  GunShot(accurate:true, dir, 'Bullet', secondary:false);
}


//===========================================================================
//
//  decorate_A_M_FirePistol
//
//===========================================================================
[decorate] final void decorate_A_M_FirePistol (optional bool accurate) {
  TVec dir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  if (!specified_accurate) accurate = true;

  A_FaceTarget();
  PlaySound('weapons/pistol', CHAN_WEAPON);

  Aim(dir, 16.0*64.0);
  GunShot(accurate, dir, 'Bullet', secondary:false);
}


//===========================================================================
//
//  A_M_FirePistolInaccurate
//
//===========================================================================
[decorate] final void A_M_FirePistolInaccurate () {
  TVec dir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_FaceTarget();
  PlaySound('weapons/pistol', CHAN_WEAPON);

  Aim(dir, 16.0*64.0);
  GunShot(accurate:false, dir, 'Bullet', secondary:false);
}


//===========================================================================
//
//  A_M_FireShotgun
//
//===========================================================================
[decorate] final void A_M_FireShotgun () {
  TVec dir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_FaceTarget();
  PlaySound('weapons/shotgf', CHAN_WEAPON);

  Aim(dir, 16.0*64.0);
  foreach (auto i; 0..7) GunShot(accurate:false, dir, 'Shell', secondary:(i != 0));
  Special1f = XLevel.Time+27.0/35.0;
}


//===========================================================================
//
//  A_M_CheckAttack
//
//===========================================================================
[decorate] final void A_M_CheckAttack () {
  if (Special1f || !Target) {
    SetState(FindState('SkipAttack'));
  } else {
    A_FaceTarget();
  }
}


//===========================================================================
//
//  A_M_FireShotgun2
//
//===========================================================================
[decorate] final void A_M_FireShotgun2 () {
  TAVec rot;
  TVec aimDir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_FaceTarget();
  PlaySound('weapons/sshotf', CHAN_WEAPON);

  Aim(aimDir, 16.0*64.0);
  foreach (auto i; 0..20) {
    rot.pitch = (Random()-Random())*45.0/8.0;
    rot.yaw = (Random()-Random())*45.0/4.0;
    rot.roll = 0.0;
    TVec dir = RotateDirectionVector(aimDir, rot);
    int damage = 5*(P_Random()%3+1);
    LineAttack(dir, Actor::MISSILERANGE, damage, BulletPuff, DmgType:'Shell', secondary:(i != 0));
  }
  Special1f = XLevel.Time;
}


//===========================================================================
//
//  A_M_FireCGunAccurate
//
//===========================================================================
[decorate] final void A_M_FireCGunAccurate () {
  TVec dir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_FaceTarget();
  PlaySound('weapons/chngun', CHAN_WEAPON);

  Aim(dir, 16.0*64.0);
  GunShot(accurate:true, dir, 'Bullet', secondary:false);
}


//===========================================================================
//
//  A_M_FireCGun
//
//===========================================================================
[decorate] final void A_M_FireCGun () {
  TVec dir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_FaceTarget();
  PlaySound('weapons/chngun', CHAN_WEAPON);

  Aim(dir, 16.0*64.0);
  GunShot(accurate:false, dir, 'Bullet', secondary:false);
}


//===========================================================================
//
//  decorate_A_M_FireCGun
//
//===========================================================================
[decorate] final void decorate_A_M_FireCGun (optional bool accurate) {
  TVec dir;

  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_FaceTarget();
  PlaySound('weapons/chngun', CHAN_WEAPON);

  Aim(dir, 16.0*64.0);
  GunShot(accurate:accurate, dir, 'Bullet', secondary:false);
}


//===========================================================================
//
//  A_M_FireMissile
//
//===========================================================================
[decorate] final void A_M_FireMissile () {
  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  if (CheckMeleeRange()) {
    // if too close, punch it
    A_M_Punch();
  } else {
    A_FaceTarget();
    SpawnMissile(Target, Rocket);
  }
}


//===========================================================================
//
//  A_M_FireRailgun
//
//===========================================================================
[decorate] final void A_M_FireRailgun () {
  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_MonsterRail();
  Special1f = XLevel.Time+50.0/35.0;
}


//===========================================================================
//
//  A_M_FirePlasma
//
//===========================================================================
[decorate] final void A_M_FirePlasma () {
  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_FaceTarget();
  SpawnMissile(Target, PlasmaBall);
  Special1f = XLevel.Time+20.0/35.0;
}


//===========================================================================
//
//  A_M_BFGsound
//
//===========================================================================
[decorate] final void A_M_BFGsound () {
  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  if (Special1f) {
    SetState(SeeState);
  } else {
    A_FaceTarget();
    PlaySound('weapons/bfgf', CHAN_WEAPON);
    // don't interrupt the firing sequence
    PainChance = 0.0;
  }
}


//===========================================================================
//
//  A_M_FireBFG
//
//===========================================================================
[decorate] final void A_M_FireBFG () {
  if (Role != ROLE_Authority) return; // for simulated proxies
  if (!Target) return;

  A_FaceTarget();
  SpawnMissile(Target, BFGBall);
  Special1f = XLevel.Time+30.0/35.0;
  PainChance = default.PainChance;
}


states {
Spawn:
  PLAY A 4 A_MarineLook
  PLAY A 4 A_MarineNoise
  Loop
Idle:
  PLAY A 4 A_MarineLook
  PLAY A 4 A_MarineNoise
  PLAY A 4 A_MarineLook
  PLAY B 4 A_MarineNoise
  PLAY B 4 A_MarineLook
  PLAY B 4 A_MarineNoise
  Loop
See:
  PLAY ABCD 4 A_MarineChase
  Loop
Melee.Fist:
  PLAY E 4 A_FaceTarget
  PLAY F 4 A_M_Punch
  PLAY A 9
  PLAY A 0 A_M_Refire
  Loop
  PLAY A 5 A_FaceTarget
  Goto See
Melee.Berserk:
  PLAY E 4 A_FaceTarget
  PLAY F 4 A_M_BerserkPunch
  PLAY A 9
  PLAY A 0 A_M_Refire
  Loop
  PLAY A 5 A_FaceTarget
  Goto See
Melee.Chainsaw:
  PLAY E 4 A_MarineNoise
  PLAY F 4 Bright A_M_Saw
  PLAY F 0 Bright A_M_SawRefire
  Goto Melee.Chainsaw+1
  PLAY A 0
  Goto See
Missile:
Missile.None:
  PLAY E 12 A_FaceTarget
  Goto Spawn+2
  PLAY F 6 Bright
  Goto Missile
Missile.Pistol:
  PLAY E 4 A_FaceTarget
  PLAY F 6 Bright A_M_FirePistol
  PLAY A 4 A_FaceTarget
  PLAY A 0 A_M_Refire
  Goto Missile.Pistol+5
  PLAY A 5
  Goto See
Fireloop.Pistol:
  PLAY F 6 Bright A_M_FirePistolInaccurate
  PLAY A 4 A_FaceTarget
  PLAY A 0 A_M_Refire
  Goto Fireloop.Pistol
  PLAY A 5 A_FaceTarget
  Goto See
Missile.Shotgun:
  PLAY E 3 A_M_CheckAttack
  PLAY F 7 Bright A_M_FireShotgun
  Goto See
Missile.SSG:
  PLAY E 3 A_M_CheckAttack
  PLAY F 7 Bright A_M_FireShotgun2
  Goto See
Missile.Chaingun:
  PLAY E 4 A_FaceTarget
  PLAY FF 4 Bright A_M_FireCGunAccurate
  PLAY FF 4 Bright A_M_FireCGun
  PLAY A 0 A_M_Refire
  Goto Missile.Chaingun+3
  PLAY A 0
  Goto See
Missile.Rocket:
  PLAY E 8 A_FaceTarget
  PLAY F 6 Bright A_M_FireMissile
  PLAY A 0 A_M_Refire
  Loop
  PLAY A 0
  Goto See
Missile.Plasma:
  PLAY E 2 A_FaceTarget
  PLAY F 3 Bright A_M_FirePlasma
  PLAY A 0 A_M_Refire
  Goto Missile.Plasma+1
  PLAY A 0
  Goto See
Missile.Railgun:
  PLAY E 4 A_M_CheckAttack
  PLAY F 6 Bright A_M_FireRailgun
  Goto See
Missile.Bfg:
  PLAY E 5 A_M_BFGsound
  PLAY EEEEE 5 A_FaceTarget
  PLAY F 6 Bright A_M_FireBFG
  PLAY A 4 A_FaceTarget
  PLAY A 0 A_M_Refire
  Loop
  PLAY A 0
  Goto See
SkipAttack:
  PLAY A 1
  Goto See
Pain:
  PLAY G 4
  PLAY G 4 A_Pain
  Goto Spawn+2
Death:
  PLAY H 10
  PLAY I 10 A_Scream
  PLAY J 10 A_NoBlocking
  PLAY KLM 10
  PLAY N -1
  Stop
XDeath:
  PLAY O 5
  PLAY P 5 A_XScream
  PLAY Q 5 A_NoBlocking
  PLAY RSTUV 5
  PLAY W -1
  Stop
Raise:
  PLAY MLKJIH 5
  Goto See
}


defaultproperties {
  Health = 100;
  GibsHealth = -100;
  Radius = 16.0;
  Height = 56.0;
  Mass = 100.0;
  PainChance = 0.625;
  Speed = 8.0*35.0;
  Translation = (TRANSL_Standard<<TRANSL_TYPE_SHIFT)+0;
  // marines are very deadly missiles
  MissileDamage = 100;
  bSolid = true;
  bShootable = true;
  bActivateMCross = true;
  bActivatePushWall = true;
  bFloorClip = true;
  bMonster = true;
  bPassMobj = true;
  bCanUseWalls = true;
  bAlwaysTick = true;
  PainSound = '*pain50';
  DeathSound = '*death';
}
