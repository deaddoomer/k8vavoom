//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ScriptedMarine : Actor
  game(GAME_Doom)
  __mobjinfo__(9100)
  __scriptid__(151);

enum
{
  WEAPON_Dummy,
  WEAPON_Fist,
  WEAPON_BerserkFist,
  WEAPON_Chainsaw,
  WEAPON_Pistol,
  WEAPON_Shotgun,
  WEAPON_SuperShotgun,
  WEAPON_Chaingun,
  WEAPON_RocketLauncher,
  WEAPON_PlasmaRifle,
  WEAPON_Railgun,
  WEAPON_BFG
};

int     PrevTicks;

//==========================================================================
//
//  BeginPlay
//
//==========================================================================

void BeginPlay()
{
  ::BeginPlay();

  //  Copy standard player's scaling
  ScaleX = DoomPlayer.default.ScaleX;
  ScaleY = DoomPlayer.default.ScaleY;
}

//==========================================================================
//
//  Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
  ::Tick(DeltaTime);

  if (Special1f)
  {
    if (MissileState == FindState('Missile', 'SSG', true))
    {
      //  Super shotgun sounds.
      int Ticks = ftoi((XLevel.Time - Special1f) * 35.0);
      if (Ticks < 47)
      {
        if (Ticks != PrevTicks)
        {
          switch (Ticks)
          {
          case 14:
            PlaySound('weapons/sshoto', CHAN_WEAPON);
            break;
          case 28:
            PlaySound('weapons/sshotl', CHAN_WEAPON);
            break;
          case 41:
            PlaySound('weapons/sshotc', CHAN_WEAPON);
            break;
          }
        }
        PrevTicks = Ticks;
      }
      else
      {
        Special1f = 0.0;
      }
    }
    else
    {
      //  Wait for a refire time
      if (XLevel.Time >= Special1f)
      {
        Special1f = 0.0;
      }
      else
      {
        bJustAttacked = true;
      }
    }
  }
}

//==========================================================================
//
//  SetWeapon
//
//==========================================================================

final void SetWeapon(int WpnNum)
{
  MeleeState = none;
  MissileState = none;

  switch (WpnNum)
  {
  default:
  case WEAPON_Dummy:
    MissileState = FindState('Missile', 'None', true);
    break;

  case WEAPON_Fist:
    MeleeState = FindState('Melee', 'Fist', true);
    break;

  case WEAPON_BerserkFist:
    MeleeState = FindState('Melee', 'Berserker', true);
    break;

  case WEAPON_Chainsaw:
    MeleeState = FindState('Melee', 'Chainsaw', true);
    break;

  case WEAPON_Pistol:
    MissileState = FindState('Missile', 'Pistol', true);
    break;

  case WEAPON_Shotgun:
    MissileState = FindState('Missile', 'Shotgun', true);
    break;

  case WEAPON_SuperShotgun:
    MissileState = FindState('Missile', 'SSG', true);
    break;

  case WEAPON_Chaingun:
    MissileState = FindState('Missile', 'Chaingun', true);
    break;

  case WEAPON_RocketLauncher:
    MissileState = FindState('Missile', 'Rocket', true);
    break;

  case WEAPON_PlasmaRifle:
    MissileState = FindState('Missile', 'Plasma', true);
    break;

  case WEAPON_Railgun:
    MissileState = FindState('Missile', 'Railgun', true);
    break;

  case WEAPON_BFG:
    MissileState = FindState('Missile', 'Bfg', true);
    break;
  }
}

//==========================================================================
//
//  SetSprite
//
//==========================================================================

final void SetSprite(class<EntityEx> SrcClass)
{
  if (SrcClass)
  {
    FixedSpriteName = GetStateSpriteName(FindClassState(SrcClass,
      'Spawn'));
    ScaleX = SrcClass.default.ScaleX;
    ScaleY = SrcClass.default.ScaleY;
  }
  else
  {
    //  Set back to default sprite.
    FixedSpriteName = '';
    ScaleX = DoomPlayer.default.ScaleX;
    ScaleY = DoomPlayer.default.ScaleY;
  }
}

//==========================================================================
//
//  A_MarineLook
//
//==========================================================================

final void A_MarineLook()
{
  A_MarineNoise();
  A_Look();
}

//============================================================================
//
//  A_MarineNoise
//
//============================================================================

final void A_MarineNoise()
{
  if (MeleeState == FindState('Melee', 'Chainsaw', true))
  {
    PlaySound('weapons/sawidle', CHAN_WEAPON);
  }
}

//==========================================================================
//
//  A_MarineChase
//
//==========================================================================

final void A_MarineChase()
{
  A_MarineNoise();
  A_Chase();
}

//===========================================================================
//
//  A_M_SawRefire
//
//===========================================================================

final void A_M_SawRefire()
{
  //  Check if target is lost or dead.
  if (!Target || Target.Health <= 0)
  {
    SetState(GetStatePlus(State, 1));
    return;
  }
  //  Check if target went out of the range.
  if (!CheckMeleeRange())
  {
    SetState(GetStatePlus(State, 1));
  }
}

//===========================================================================
//
//  A_M_Punch
//
//===========================================================================

final void A_M_Punch()
{
  int     damage;
  TAVec   aimAngles;
  TVec    dir;
  EntityEx  AimTarget;

  if (!Target)
  {
    return;
  }

  damage = (P_Random() % 10 + 1) << 1;

  A_FaceTarget();
  aimAngles = Angles;
  aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
    Random()) * 45.0 / 8.0);
  AimTarget = AimLineAttack(dir, aimAngles, MELEERANGE);
  LineAttack(dir, MELEERANGE, damage, BulletPuff,,,'Fist');

  // turn to face target
  if (AimTarget)
  {
    PlaySound('*fist', CHAN_WEAPON);
    Angles.yaw = atan2(
      AimTarget.Origin.y - Origin.y,
      AimTarget.Origin.x - Origin.x);
  }
}

//===========================================================================
//
//  A_M_BerserkPunch
//
//===========================================================================

final void A_M_BerserkPunch()
{
  int     damage;
  TAVec   aimAngles;
  TVec    dir;
  EntityEx  AimTarget;

  if (!Target)
  {
    return;
  }

  damage = ((P_Random() % 10 + 1) << 1) * 10;

  A_FaceTarget();
  aimAngles = Angles;
  aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
    Random()) * 45.0 / 8.0);
  AimTarget = AimLineAttack(dir, aimAngles, MELEERANGE);
  LineAttack(dir, MELEERANGE, damage, BulletPuff,,,'BerserkFist');

  // turn to face target
  if (AimTarget)
  {
    PlaySound('*fist', CHAN_WEAPON);
    Angles.yaw = atan2(
      AimTarget.Origin.y - Origin.y,
      AimTarget.Origin.x - Origin.x);
  }
}

//===========================================================================
//
//  A_M_Refire
//
//===========================================================================

final void A_M_Refire()
{
  //  Check if target is lost or dead.
  if (!Target || Target.Health <= 0)
  {
    if (MissileState && Random() < 0.625)
    {
      //  Look for a new target
      if (LookForPlayers(true) && CheckMissileRange())
      {
        //  Got one, continue shooting.
        return;
      }
    }
    SetState(GetStatePlus(State, 1));
    return;
  }
  //  Check if target went out of the range or sight, with small chance to
  // stop shooting even if target is not dead.
  if ((!MissileState && !CheckMeleeRange()) ||
    !CanSee(Target) || P_Random() < 4)
  {
    SetState(GetStatePlus(State, 1));
  }
}

//===========================================================================
//
//  A_M_FirePistol
//
//===========================================================================

final void A_M_FirePistol()
{
  TVec dir;

  if (!Target)
  {
    return;
  }

  A_FaceTarget();
  PlaySound('weapons/pistol', CHAN_WEAPON);

  Aim(dir, 16.0 * 64.0);
  GunShot(true, dir, 'Bullet', false);
}

//===========================================================================
//
//  A_M_FirePistolInaccurate
//
//===========================================================================

final void A_M_FirePistolInaccurate()
{
  TVec dir;

  if (!Target)
  {
    return;
  }

  A_FaceTarget();
  PlaySound('weapons/pistol', CHAN_WEAPON);

  Aim(dir, 16.0 * 64.0);
  GunShot(false, dir, 'Bullet', false);
}

//===========================================================================
//
//  A_M_FireShotgun
//
//===========================================================================

final void A_M_FireShotgun()
{
  int i;
  TVec dir;

  if (!Target)
  {
    return;
  }

  A_FaceTarget();
  PlaySound('weapons/shotgf', CHAN_WEAPON);

  Aim(dir, 16.0 * 64.0);
  for (i = 0; i < 7; i++)
  {
    GunShot(false, dir, 'Shell', (i != 0));
  }
  Special1f = XLevel.Time + 27.0 / 35.0;
}

//===========================================================================
//
//  A_M_CheckAttack
//
//===========================================================================

final void A_M_CheckAttack()
{
  if (Special1f || !Target)
  {
    SetState(FindState('SkipAttack'));
  }
  else
  {
    A_FaceTarget();
  }
}

//===========================================================================
//
//  A_M_FireShotgun2
//
//===========================================================================

final void A_M_FireShotgun2()
{
  int i;
  int damage;
  TAVec rot;
  TVec aimDir;
  TVec dir;

  if (!Target)
  {
    return;
  }

  A_FaceTarget();
  PlaySound('weapons/sshotf', CHAN_WEAPON);

  Aim(aimDir, 16.0 * 64.0);
  for (i = 0; i < 20; i++)
  {
    rot.pitch = (Random() - Random()) * 45.0 / 8.0;
    rot.yaw = (Random() - Random()) * 45.0 / 4.0;
    rot.roll = 0.0;
    dir = RotateDirectionVector(aimDir, rot);
    damage = 5 * (P_Random() % 3 + 1);
    LineAttack(dir, Actor::MISSILERANGE, damage, BulletPuff,,,'Shell', (i != 0));
  }
  Special1f = XLevel.Time;
}

//===========================================================================
//
//  A_M_FireCGunAccurate
//
//===========================================================================

final void A_M_FireCGunAccurate()
{
  TVec dir;

  if (!Target)
  {
    return;
  }

  A_FaceTarget();
  PlaySound('weapons/chngun', CHAN_WEAPON);

  Aim(dir, 16.0 * 64.0);
  GunShot(true, dir, 'Bullet', false);
}

//===========================================================================
//
//  A_M_FireCGun
//
//===========================================================================

final void A_M_FireCGun()
{
  TVec dir;

  if (!Target)
  {
    return;
  }

  A_FaceTarget();
  PlaySound('weapons/chngun', CHAN_WEAPON);

  Aim(dir, 16.0 * 64.0);
  GunShot(false, dir, 'Bullet', false);
}

//===========================================================================
//
//  A_M_FireMissile
//
//===========================================================================

final void A_M_FireMissile()
{
  if (!Target)
  {
    return;
  }

  if (CheckMeleeRange())
  {
    //  If too close, punch it.
    A_M_Punch();
  }
  else
  {
    A_FaceTarget();
    SpawnMissile(Target, Rocket);
  }
}

//===========================================================================
//
//  A_M_FireRailgun
//
//===========================================================================

final void A_M_FireRailgun()
{
  if (!Target)
  {
    return;
  }

  A_MonsterRail();
  Special1f = XLevel.Time + 50.0 / 35.0;
}

//===========================================================================
//
//  A_M_FirePlasma
//
//===========================================================================

final void A_M_FirePlasma()
{
  if (!Target)
  {
    return;
  }
  A_FaceTarget();
  SpawnMissile(Target, PlasmaBall);
  Special1f = XLevel.Time + 20.0 / 35.0;
}

//===========================================================================
//
//  A_M_BFGsound
//
//===========================================================================

final void A_M_BFGsound()
{
  if (!Target)
  {
    return;
  }

  if (Special1f)
  {
    SetState(SeeState);
  }
  else
  {
    A_FaceTarget();
    PlaySound('weapons/bfgf', CHAN_WEAPON);
    //  Don't interrupt the firing sequence
    PainChance = 0.0;
  }
}

//===========================================================================
//
//  A_M_FireBFG
//
//===========================================================================

final void A_M_FireBFG()
{
  if (!Target)
  {
    return;
  }

  A_FaceTarget();
  SpawnMissile(Target, BFGBall);
  Special1f = XLevel.Time + 30.0 / 35.0;
  PainChance = default.PainChance;
}

states
{
Spawn:
  PLAY A 4 A_MarineLook
  PLAY A 4 A_MarineNoise
  Loop
Idle:
  PLAY A 4 A_MarineLook
  PLAY A 4 A_MarineNoise
  PLAY A 4 A_MarineLook
  PLAY B 4 A_MarineNoise
  PLAY B 4 A_MarineLook
  PLAY B 4 A_MarineNoise
  Loop
See:
  PLAY ABCD 4 A_MarineChase
  Loop
Melee.Fist:
  PLAY E 4 A_FaceTarget
  PLAY F 4 A_M_Punch
  PLAY A 9
  PLAY A 0 A_M_Refire
  Loop
  PLAY A 5 A_FaceTarget
  Goto See
Melee.Berserk:
  PLAY E 4 A_FaceTarget
  PLAY F 4 A_M_BerserkPunch
  PLAY A 9
  PLAY A 0 A_M_Refire
  Loop
  PLAY A 5 A_FaceTarget
  Goto See
Melee.Chainsaw:
  PLAY E 4 A_MarineNoise
  PLAY F 4 Bright A_M_Saw
  PLAY F 0 Bright A_M_SawRefire
  Goto Melee.Chainsaw+1
  PLAY A 0
  Goto See
Missile:
Missile.None:
  PLAY E 12 A_FaceTarget
  Goto Spawn+2
  PLAY F 6 Bright
  Goto Missile
Missile.Pistol:
  PLAY E 4 A_FaceTarget
  PLAY F 6 Bright A_M_FirePistol
  PLAY A 4 A_FaceTarget
  PLAY A 0 A_M_Refire
  Goto Missile.Pistol+5
  PLAY A 5
  Goto See
Fireloop.Pistol:
  PLAY F 6 Bright A_M_FirePistolInaccurate
  PLAY A 4 A_FaceTarget
  PLAY A 0 A_M_Refire
  Goto Fireloop.Pistol
  PLAY A 5 A_FaceTarget
  Goto See
Missile.Shotgun:
  PLAY E 3 A_M_CheckAttack
  PLAY F 7 Bright A_M_FireShotgun
  Goto See
Missile.SSG:
  PLAY E 3 A_M_CheckAttack
  PLAY F 7 Bright A_M_FireShotgun2
  Goto See
Missile.Chaingun:
  PLAY E 4 A_FaceTarget
  PLAY FF 4 Bright A_M_FireCGunAccurate
  PLAY FF 4 Bright A_M_FireCGun
  PLAY A 0 A_M_Refire
  Goto Missile.Chaingun + 3
  PLAY A 0
  Goto See
Missile.Rocket:
  PLAY E 8 A_FaceTarget
  PLAY F 6 Bright A_M_FireMissile
  PLAY A 0 A_M_Refire
  Loop
  PLAY A 0
  Goto See
Missile.Plasma:
  PLAY E 2 A_FaceTarget
  PLAY F 3 Bright A_M_FirePlasma
  PLAY A 0 A_M_Refire
  Goto Missile.Plasma+1
  PLAY A 0
  Goto See
Missile.Railgun:
  PLAY E 4 A_M_CheckAttack
  PLAY F 6 Bright A_M_FireRailgun
  Goto See
Missile.Bfg:
  PLAY E 5 A_M_BFGsound
  PLAY EEEEE 5 A_FaceTarget
  PLAY F 6 Bright A_M_FireBFG
  PLAY A 4 A_FaceTarget
  PLAY A 0 A_M_Refire
  Loop
  PLAY A 0
  Goto See
SkipAttack:
  PLAY A 1
  Goto See
Pain:
  PLAY G 4
  PLAY G 4 A_Pain
  Goto Spawn+2
Death:
  PLAY H 10
  PLAY I 10 A_Scream
  PLAY J 10 A_NoBlocking
  PLAY KLM 10
  PLAY N -1
  Stop
XDeath:
  PLAY O 5
  PLAY P 5 A_XScream
  PLAY Q 5 A_NoBlocking
  PLAY RSTUV 5
  PLAY W -1
  Stop
Raise:
  PLAY MLKJIH 5
  Goto See
}

defaultproperties
{
  Health = 100;
  GibsHealth = -100;
  Radius = 16.0;
  Height = 56.0;
  Mass = 100.0;
  PainChance = 0.625;
  Speed = 8.0 * 35.0;
  Translation = (TRANSL_Standard << TRANSL_TYPE_SHIFT) + 0;
  //  Marines are very deadly missiles.
  MissileDamage = 100;
  bSolid = true;
  bShootable = true;
  bActivateMCross = true;
  bActivatePushWall = true;
  bFloorClip = true;
  bMonster = true;
  bPassMobj = true;
  bCanUseWalls = true;
  PainSound = '*pain50';
  DeathSound = '*death';
}
