//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class BasicArmor : Armor;

float SavePercent;
class!Inventory ArmorClass; // last armor pickup name

replication {
  reliable if (Role == ROLE_Authority && bNetOwner)
    SavePercent;
}


//==========================================================================
//
//  QS_Save
//
//==========================================================================
override void QS_Save () {
  ::QS_Save(); // inventory (armor)
  QS_PutFloat("SavePercent", SavePercent);
  if (ArmorClass) {
    QS_PutName("ArmorClass", GetClassName(ArmorClass));
  } else {
    QS_PutName("ArmorClass", '');
  }
}


//==========================================================================
//
//  QS_Load
//
//==========================================================================
override void QS_Load () {
  ::QS_Load(); // inventory (armor)
  SavePercent = QS_GetFloat("SavePercent");
  name acname = QS_GetName("ArmorClass");
  ArmorClass = none;
  if (!acname) return;
  class!Inventory ic = class!Inventory(FindClass(acname));
  if (!ic) return;
  ArmorClass = ic;
  ic = class!Inventory(GetClassReplacement(ic));
  if (ic) ArmorClass = ic;
}


//==========================================================================
//
//  CreateCopy
//
//==========================================================================
override Inventory CreateCopy (EntityEx Toucher) {
  // I don't see why we need this, but for compatibility purposes it's here
  BasicArmor Copy = SpawnEntityChecked(class!BasicArmor, BasicArmor, default, default, default, AllowReplace:false);
  assert(Copy);
  Copy.Amount = Amount;
  Copy.MaxAmount = MaxAmount;
  Copy.SavePercent = (SavePercent ? SavePercent : 1.0/3.0);
  Copy.IconName = IconName;
  Copy.ArmorClass = ArmorClass;
  GoAwayAndDie();
  return Copy;
}


//==========================================================================
//
//  CreateTossable
//
//  You can't drop it, ever.
//
//==========================================================================
override Inventory CreateTossable (optional int DropAmount) {
  return none;
}


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
name GetArmorName () {
  if (Amount < 1 || !ArmorClass) return 'None';
  return GetClassName(ArmorClass);
}


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
override bool HandlePickup (Inventory Item) {
  if (Item.Class == Class) return true; // you shouldn't be picking up BasicArmor anyway
  if (Inventory) return Inventory.HandlePickup(Item);
  return false;
}


//==========================================================================
//
//  AbsorbDamage
//
//==========================================================================
override int AbsorbDamage (EntityEx source, EntityEx inflictor, int damage, name DmgType, int origDamage) {
  if (nameicmp(DmgType, 'Drowning') != 0) {
    int saved = min(Amount, int(float(damage)*SavePercent));
    Amount -= saved;
    damage = max(0, damage-saved);
    if (Amount == 0) {
      // armor is used up
      SavePercent = 0.0;
      ArmorClass = none;
      // try to use some inventory armor
      EntityEx(Owner).AutoUseArmor();
    }
  }
  return damage;
}


defaultproperties {
  bKeepDepleted = true;
}
