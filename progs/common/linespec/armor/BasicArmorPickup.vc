//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class BasicArmorPickup : Armor abstract;

int SaveAmount;
float SavePercent;


//==========================================================================
//
//  CreateCopy
//
//==========================================================================
override Inventory CreateCopy (EntityEx Toucher) {
  BasicArmorPickup Copy = BasicArmorPickup(::CreateCopy(Toucher));
  if (Copy) {
    Copy.SaveAmount = SaveAmount;
    Copy.SavePercent = SavePercent;
  }
  return Copy;
}


//==========================================================================
//
//  Use
//
//==========================================================================
override bool Use (bool Pickup) {
  BasicArmor Armor = BasicArmor(EntityEx(Owner).FindInventory(BasicArmor, disableReplacement:true));
  if (!Armor) {
    Armor = SpawnEntityChecked(class!BasicArmor, BasicArmor, default, default, default, AllowReplace:false);
    assert(Armor);
    Armor.AttachToOwner(EntityEx(Owner));
  } else {
    // can't use it if owner has more armor that is given by this one
    if (Armor.Amount >= SaveAmount) return false;
    // don't use if you are picking it up and already have some
    if (Pickup && Armor.Amount > 0 && MaxAmount > 0) return false;
  }
  Armor.ArmorClass = class!Inventory(Class);
  Armor.SavePercent = SavePercent;
  Armor.Amount = SaveAmount;
  return true;
}


defaultproperties {
  MaxAmount = 0;
  bAutoActivate = true;
}
