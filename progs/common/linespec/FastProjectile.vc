//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class FastProjectile : Actor;


//==========================================================================
//
//  Tick
//
//  Thinker for the ultra-fast blaster PL2 ripper-spawning missile.
//
//==========================================================================
override void Tick (float DeltaTime) {
  if (Level.bFrozen && ((!bIsPlayer && !bNoTimeFreeze) ||
      (bIsPlayer && !(PlayerEx(Player).Cheats&PlayerEx::CF_TIMEFREEZE))))
  {
    return;
  }

  int Count = 8;

  //print("%C: velocity=%s", self, Velocity);
  // clamp some values (done by C++ code)
  /*
  Velocity = vclamp(Velocity, -8191*2, 8191*2);
  Origin = vclamp(Origin, -100000, 100000);
  */
  //Speed = fclamp(Speed, -4095, 4095);

  float velxDT = Velocity.x*DeltaTime;
  float velyDT = Velocity.y*DeltaTime;

  if (Radius > 0.0) {
    //print("  0count=%s", Count);
    bool xbad = (velxDT/float(Count) > Radius);
    bool ybad = (velyDT/float(Count) > Radius);
    if (xbad || ybad) {
      // must take smaller steps
      for (;;) {
        // multiply
        int newCount = Count*2;
        bool newxbad = (xbad ? (velxDT/float(newCount) > Radius) : false);
        bool newybad = (ybad ? (velyDT/float(newCount) > Radius) : false);
        if (newxbad || newybad) {
          xbad = newxbad;
          ybad = newybad;
          Count = newCount;
        } else {
          break;
        }
      }
      // several step sizes
      int currStep = Count;
      while (currStep > 1) {
        for (;;) {
          int newCount = Count+currStep;
          bool newxbad = (xbad ? (velxDT/float(newCount) > Radius) : false);
          bool newybad = (ybad ? (velyDT/float(newCount) > Radius) : false);
          if (newxbad || newybad) {
            xbad = newxbad;
            ybad = newybad;
            Count = newCount;
          } else {
            break;
          }
        }
        if (currStep > 3) {
          //print(" NCS: %s (%s); count=%s", currStep, currStep-currStep/3, Count);
          currStep -= currStep/3;
        } else {
          //print(" NCS: %s (%s); count=%s", currStep, currStep-1, Count);
          --currStep;
        }
      }
      // and final one
      while (xbad || ybad) {
        ++Count;
        if (xbad) xbad = (velxDT/float(Count) > Radius);
        if (ybad) ybad = (velyDT/float(Count) > Radius);
      }
      // just a check
      if (velxDT/float(Count) > Radius || velyDT/float(Count) > Radius) FatalError("FastProjectile::Tick step calculation failed");
    }
    //print("  1count=%s", Count);
  }

  // handle movement
  if (Velocity || Origin.z != FloorZ) {
    tmtrace_t tmtrace;
    float xfrac = velxDT/float(Count);
    float yfrac = velyDT/float(Count);
    float zfrac = Velocity.z*DeltaTime/float(Count);
    bool changexy = xfrac || yfrac;
    foreach (auto i; 0..Count) {
      if (changexy) {
        if (!TryMoveEx(out tmtrace, vector(Origin.x+xfrac, Origin.y+yfrac, Origin.z), AllowDropOff:true)) {
          // blocked move
          if (tmtrace.BlockingMobj) {
            BlasterHitMobj(tmtrace.BlockingMobj);
          } else {
            // hit the wall
            ExplodeMissile(Victim:none, line:tmtrace.BlockingLine);
          }
          return;
        }
      }
      Origin.z += zfrac;
      if (Origin.z <= FloorZ) {
        // hit the floor
        Origin.z = FloorZ;
        HitFloorType();
        //!print("FLOOR HIT! '%C'", Class);
        ExplodeMissile(Victim:none);
        return;
      }
      if (Origin.z+Height > CeilingZ) {
        // hit the ceiling
        Origin.z = CeilingZ-Height;
        ExplodeMissile(Victim:none);
        return;
      }
      if (changexy) SpawnBlasterEffects();
    }
  }

  // cycle through states, calling action functions at transitions
  AdvanceState(DeltaTime);
}


//==========================================================================
//
//  BlasterHitMobj
//
//==========================================================================
bool BlasterHitMobj (Entity Other) {
  return ExplodeMissile(EntityEx(Other));
}


//==========================================================================
//
//  SpawnBlasterEffects
//
//==========================================================================
void SpawnBlasterEffects () {
}


defaultproperties {
  bMissile = true;
  bNoBlockmap = true;
  bDropOff = true;
  bNoGravity = true;
  bNoTeleport = true;
  bActivateImpact = true;
  bActivatePCross = true;
  bBloodSplatter = true;
}
