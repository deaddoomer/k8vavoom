//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class FastProjectile : Actor;


//==========================================================================
//
//  Tick
//
//  Thinker for the ultra-fast blaster PL2 ripper-spawning missile.
//
//==========================================================================
override void Tick (float DeltaTime) {
  float Count = 8.0;

  // clamp some values
  Velocity = vclamp(Velocity, -8191, 8191);
  Origin = vclamp(Origin, -100000, 100000);
  Speed = fclamp(Speed, -4095, 4095);

  if (Radius > 0.0) {
    while (Velocity.x*DeltaTime/Count > Radius || Velocity.y*DeltaTime/Count > Radius) {
      // must take smaller steps
      Count *= 2.0;
    }
  }

  // handle movement
  if (Velocity || Origin.z != FloorZ) {
    tmtrace_t tmtrace;
    float xfrac = Velocity.x*DeltaTime/Count;
    float yfrac = Velocity.y*DeltaTime/Count;
    float zfrac = Velocity.z*DeltaTime/Count;
    bool changexy = xfrac || yfrac;
    foreach (auto i; 0..8) {
      if (changexy) {
        if (!TryMoveEx(&tmtrace, vector(Origin.x+xfrac, Origin.y+yfrac, Origin.z), true)) {
          // blocked move
          if (tmtrace.BlockingMobj) {
            BlasterHitMobj(tmtrace.BlockingMobj);
          } else {
            // hit the wall
            ExplodeMissile(Victim:none, tmtrace.BlockingLine);
          }
          return;
        }
      }
      Origin.z += zfrac;
      if (Origin.z <= FloorZ) {
        // hit the floor
        Origin.z = FloorZ;
        HitFloorType();
        //!print("FLOOR HIT! '%s'", NameToStr(GetClassName(Class)));
        ExplodeMissile(Victim:none);
        return;
      }
      if (Origin.z+Height > CeilingZ) {
        // hit the ceiling
        Origin.z = CeilingZ-Height;
        ExplodeMissile(Victim:none);
        return;
      }
      if (changexy) SpawnBlasterEffects();
    }
  }

  // cycle through states, calling action functions at transitions
  AdvanceState(DeltaTime);
}


//==========================================================================
//
//  BlasterHitMobj
//
//==========================================================================
bool BlasterHitMobj (Entity Other) {
  return ExplodeMissile(EntityEx(Other));
}


//==========================================================================
//
//  SpawnBlasterEffects
//
//==========================================================================
void SpawnBlasterEffects () {
}


defaultproperties {
  bMissile = true;
  bNoBlockmap = true;
  bDropOff = true;
  bNoGravity = true;
  bNoTeleport = true;
  bActivateImpact = true;
  bActivatePCross = true;
  bBloodSplatter = true;
}
