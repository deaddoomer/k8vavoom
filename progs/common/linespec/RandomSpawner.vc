//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class RandomSpawner : Actor abstract;


//==========================================================================
//
//  BeginPlay
//
//==========================================================================
override void BeginPlay () {
  int n = 0, i = 0;
  bool IsBoss = false;

  ::BeginPlay();

  if (DropItemList.length) {
    bool error;

    class!EntityEx spwcls = ChooseFromDropItemList(/*Actor, */class!EntityEx(self.Class), AllowReplace:true, out error:error);
    // skip unknowns (this is done in `ChooseFromDropItemList()` now)
    /+
    foreach (; 0..32) {
      if (!spwcls) break;
      if (GetClassName(spwcls) != 'Unknown') break;
      spwcls = ChooseFromDropItemList(/*Actor, */class!EntityEx(self.Class), AllowReplace:true, out error:error);
    }
    +/

    if (spwcls) {
      spwcls = class!Actor(spwcls);
      if (!spwcls) error = true;
    }

    if (error) {
      printwarn("RandomSpawner `%C` replaced with error object", self);
      // show that there's a problem
      BeginPlayResult = Spawn(Unknown, Origin, default, default/*, false*/, AllowReplace:false); // override `Thinker.Spawn()` result
      Destroy();
      return;
    }

    if (spwcls) {
      printdebug("RandomSpawner `%C` choose `%C`", self, spwcls);
    } else {
      printdebug("RandomSpawner `%C` choose `none`", self);
    }

    EntityEx NewEntity;
    if (spwcls) {
      if (bMissile && Target && Target.Target) {
        // attempting to spawn a missile
        if (!Tracer && bSeekerMissile) Tracer = Target;
        NewEntity = SpawnMissileXYZ(Origin, Target, spwcls);
      } else {
        NewEntity = Spawn(spwcls, Origin, default, default, AllowReplace:false); // no need to replace, we already did it
      }

      if (NewEntity) {
        BeginPlayResult = NewEntity; // override `Thinker.Spawn()` result
        // copy everything that is relevant
        NewEntity.Angles = Angles;
        NewEntity.Origin = Origin;
        NewEntity.Special = Special;
        NewEntity.Args[0] = Args[0];
        NewEntity.Args[1] = Args[1];
        NewEntity.Args[2] = Args[2];
        NewEntity.Args[3] = Args[3];
        NewEntity.Args[4] = Args[4];
        NewEntity.Special1 = Special1;
        NewEntity.Special2 = Special2;
        NewEntity.SetTID(TID);
        NewEntity.Master = Master;
        NewEntity.Target = Target;
        NewEntity.Tracer = Tracer;
        NewEntity.Species = Species;
        NewEntity.CopyFriendliness(self, false);

        // copy map spawn flags
        NewEntity.bAmbush = bAmbush;
        NewEntity.bStanding = bStanding;
        if (bDormant) NewEntity.Deactivate(none);
        if (bShadow && RenderStyle == STYLE_Translucent && Alpha == 0.25) {
          NewEntity.bShadow = true;
          NewEntity.RenderStyle = STYLE_Translucent;
          NewEntity.Alpha = 0.25;
        }
        if (RenderStyle == STYLE_None) NewEntity.RenderStyle = STYLE_None;

        // copy translations too, why not?
        NewEntity.CopyTranslations(self);

        // this handles things such as projectiles with the MF4_SPECTRAL flag that have
        // a health set to -2 after spawning, for internal reasons
        if (Health != default.Health) NewEntity.Health = Health;
        if (NewEntity.IsA('Inventory')) {
          NewEntity.bDropped = bDropped;
        } else {
          NewEntity.bDropped = false;
        }
        // handle special altitude flags
             if (NewEntity.bSpawnCeiling) NewEntity.Origin.z = NewEntity.CeilingZ-NewEntity.Height;
        else if (NewEntity.bSpawnFloat) NewEntity.Origin.z = FLOATRANDZ;
        if (NewEntity.bMissile) NewEntity.CheckMissileSpawn();

        // bouncecount is used to count how many recursions we're in
        //if (NewEntity.IsA('RandomSpawner')) RandomSpawner(NewEntity).BounceCount = ++BounceCount;

        // if the spawned actor has either of those flags, it's a boss
        if (NewEntity.bBossDeath || NewEntity.bBoss) IsBoss = true;
      }
    }

    if (NewEntity && IsBoss) {
      Tracer = NewEntity;
    } else {
      // "else" because a boss-replacing spawner must wait until it can call A_BossDeath.
      Destroy();
    }
  }
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float deltaTime) {
  ::Tick(deltaTime);

  if (!Tracer || Tracer.Health <= 0) {
    A_BossDeath();
    Destroy();
  }
}


defaultproperties {
  BounceCount = 0;
}
