//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class RandomSpawner : Actor abstract;

const int MAX_RANDOMSPAWNERS_RECURSION = 32; // Should be largely more than enough...

//!int BounceCount;


//==========================================================================
//
//  BeginPlay
//
//==========================================================================
override void BeginPlay () {
  int n = 0, i = 0;
  bool IsBoss = false;
  Entity NewEntity;

  ::BeginPlay();
  if (DropItemList.length) {
    while (i < DropItemList.length) {
      if (DropItemList[i].Type) {
        if (DropItemList[i].Amount <= 0) {
          // default value is negative, we need a positive value.
          DropItemList[i].Amount = 1;
        }
        // this is how we can weight the list.
        n += DropItemList[i].Amount;
        ++i;
      } else {
        // send a warning that this class can't be found and continue the loop
        print("WARNING: RandomSpawner type definition is incorrect at element %i", DropItemList.length-i);
        // show that there's a problem.
        Spawn(Unknown, Origin, default, default, false);
        Destroy();
        return;
      }
    }
    // then we reset the iterator to the start position...
    i = 0;
    // take a random number...
    n = P_Random()%n;
    // and iterate in the array up to the random number chosen
    while (n > -1) {
      if (DropItemList[i].Type) {
        n -= DropItemList[i].Amount;
        if (i+1 < DropItemList.length && n > -1) {
          ++i;
        } else {
          n = -1;
        }
      }
    }
    // ...and we can spawn the dropped item...

    // prevent infinite recursions
    if (BounceCount >= MAX_RANDOMSPAWNERS_RECURSION) {
      // show that there's a problem
      Spawn(Unknown, Origin, default, default, false);
      Destroy();
      return;
    } else if (Random() <= DropItemList[i].Chance) {
      class!EntityEx cls = class!EntityEx(FindClass(GetClassName(GetClassReplacement(DropItemList[i].Type))));

      if (!cls) {
        // show that there's a problem
        Spawn(Unknown, Origin, default, default, false);
        Destroy();
        return;
      }

      if (bMissile && Target && Target.Target) {
        // attempting to spawn a missile
        if (!Tracer && bSeekerMissile) Tracer = Target;
        NewEntity = SpawnMissileXYZ(Origin, Target, cls);
      } else {
        NewEntity = Spawn(cls, Origin, default, default, false);
      }

      if (NewEntity) {
        // copy everything that is relevant
        NewEntity.Angles = Angles;
        NewEntity.Origin = Origin;
        NewEntity.Special = Special;
        NewEntity.Args[0] = Args[0];
        NewEntity.Args[1] = Args[1];
        NewEntity.Args[2] = Args[2];
        NewEntity.Args[3] = Args[3];
        NewEntity.Args[4] = Args[4];
        EntityEx(NewEntity).Special1 = Special1;
        EntityEx(NewEntity).Special2 = Special2;
        NewEntity.SetTID(TID);
        EntityEx(NewEntity).Master = Master;
        EntityEx(NewEntity).Target = Target;
        EntityEx(NewEntity).Tracer = Tracer;
        EntityEx(NewEntity).Species = Species;
        EntityEx(NewEntity).CopyFriendliness(self, false);

        // copy map spawn flags
        EntityEx(NewEntity).bAmbush = bAmbush;
        EntityEx(NewEntity).bStanding = bStanding;
        if (bDormant) EntityEx(NewEntity).Deactivate(none);
        if (bShadow && RenderStyle == STYLE_Translucent && Alpha == 0.25) {
          EntityEx(NewEntity).bShadow = true;
          EntityEx(NewEntity).RenderStyle = STYLE_Translucent;
          EntityEx(NewEntity).Alpha = 0.25;
        }
        if (RenderStyle == STYLE_None) EntityEx(NewEntity).RenderStyle = STYLE_None;

        // this handles things such as projectiles with the MF4_SPECTRAL flag that have
        // a health set to -2 after spawning, for internal reasons
        if (Health != default.Health) NewEntity.Health = Health;
        if (NewEntity.IsA('Inventory')) {
          EntityEx(NewEntity).bDropped = bDropped;
        } else {
          EntityEx(NewEntity).bDropped = false;
        }
        // handle special altitude flags
             if (EntityEx(NewEntity).bSpawnCeiling) NewEntity.Origin.z = NewEntity.CeilingZ-NewEntity.Height;
        else if (EntityEx(NewEntity).bSpawnFloat) NewEntity.Origin.z = FLOATRANDZ;
        if (EntityEx(NewEntity).bMissile) EntityEx(NewEntity).CheckMissileSpawn();

        // bouncecount is used to count how many recursions we're in
        if (NewEntity.IsA('RandomSpawner')) RandomSpawner(NewEntity).BounceCount = ++BounceCount;

        // if the spawned actor has either of those flags, it's a boss
        if (EntityEx(NewEntity).bBossDeath || EntityEx(NewEntity).bBoss) IsBoss = true;
      }
    }
    if (NewEntity && IsBoss) {
      Tracer = EntityEx(NewEntity);
    } else {
      // "else" because a boss-replacing spawner must wait until it can call A_BossDeath.
      Destroy();
    }
  }
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float deltaTime) {
  ::Tick(deltaTime);

  if (!Tracer || Tracer.Health <= 0) {
    A_BossDeath();
    Destroy();
  }
}


defaultproperties {
  BounceCount = 0;
}
