//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PolyobjThinker : Thinker abstract;

int polyobj;
float thrust_force;
PolyobjThinker NextAction;
bool nolink;


//==========================================================================
//
//  Destroy
//
//==========================================================================
override void Destroy () {
  //printdebug("removing pobj thinker `%C`(%s) from pobj #%d", self, UniqueId, polyobj);
  RemoveFromThinkerChain();
  ::Destroy();
}


//==========================================================================
//
//  ClearPolyobjThinkers
//
//==========================================================================
static final void ClearPolyobjThinkers (polyobj_t *po) {
  if (!po) return;
  while (po.SpecialData) {
    PolyobjThinker curr = PolyobjThinker(po.SpecialData);
    assert(curr);
    delete curr;
  }
}


//==========================================================================
//
//  IsPolyobjBusy
//
//==========================================================================
static final bool IsPolyobjBusy (polyobj_t *po) {
  if (!po) return false;
  while (po.SpecialData) {
    PolyobjThinker curr = PolyobjThinker(po.SpecialData);
    assert(curr);
    if (!curr.isDestroyed) return true;
    curr = curr.NextAction;
  }
  return false;
}


//==========================================================================
//
//  GetSpeedVector
//
//==========================================================================
TVec GetSpeedVector () {
  return vector(0, 0);
}


//==========================================================================
//
//  CalcSpeedVector
//
//  used to calculate current polyobject speed
//  this is so jumped player will retain the impulse
//
//==========================================================================
static final TVec CalcSpeedVector (polyobj_t *po) {
  while (po) {
    PolyobjThinker curr = PolyobjThinker(po.SpecialData);
    while (curr) {
      if (!curr.isDestroyed) {
        TVec res = curr.GetSpeedVector();
        //FIXME: there can be more than one mover, but meh...
        if (res) return res;
      }
      curr = curr.NextAction;
    }
    po = po.polinkprev;
  }
  return vector(0, 0);
}


//==========================================================================
//
//  Accumulate
//
//  returns `true` if `other` was accumulated (but won't destroy it)
//
//==========================================================================
bool Accumulate (PolyobjThinker other) {
  return false;
}


//==========================================================================
//
//  AppendTo
//
//==========================================================================
void AppendTo (polyobj_t *po) {
  if (!po) { Destroy(); return; }
  assert(polyobj == default.polyobj);
  //printdebug("adding pobj thinker `%C`(%s) from pobj #%d", self, UniqueId, po.tag);
  if (po.SpecialData) assert(PolyobjThinker(po.SpecialData));
  // check for additive
  int count = 0;
  for (PolyobjThinker curr = PolyobjThinker(po.SpecialData); curr; curr = curr.NextAction) {
    if (curr.IsDestroyed) continue; // just in case
    if (curr.Accumulate(self)) { Destroy(); return; }
    ++count;
  }
  // protection from morons
  if (count > 64) {
    printerror("pobj #%d has %s action thinkers, this is too much. penalizing for bad behavior.", po.tag, count);
    ClearPolyobjThinkers(po);
  }
  // insert into list
  polyobj = po.tag;
  NextAction = PolyobjThinker(po.SpecialData);
  po.SpecialData = self;
}


//==========================================================================
//
//  RemoveFromThinkerChain
//
//==========================================================================
void RemoveFromThinkerChain () {
  polyobj_t *po = XLevel.GetPolyobj(polyobj);
  if (!po) return;
  assert(po.tag == polyobj);
  if (po.SpecialData) assert(PolyobjThinker(po.SpecialData));
  PolyobjThinker prev = none;
  PolyobjThinker curr = PolyobjThinker(po.SpecialData);
  while (curr && curr != self) {
    prev = curr;
    curr = curr.NextAction;
  }
  if (!curr) {
    printerror("cannot remove pobj thinker `%C`(%s) from pobj #%d (not in chain)", self, UniqueId, po.tag);
  } else {
    if (prev) prev.NextAction = NextAction; else po.SpecialData = NextAction;
    //printdebug("removed pobj thinker `%C`(%s) from pobj #%d", self, UniqueId, po.tag);
  }
  polyobj = default.polyobj;
  NextAction = none;
}


//==========================================================================
//
//  PolyobjStartSequence
//
//==========================================================================
void PolyobjStartSequence (polyobj_t *mobj, name sequence, int ModeNum) {
  Level.PolyobjStartSequence(mobj, sequence, ModeNum);
}


//==========================================================================
//
//  PolyobjStopSequence
//
//==========================================================================
void PolyobjStopSequence (polyobj_t *mobj) {
  Level.PolyobjStopSequence(mobj);
}


defaultproperties {
  polyobj = 0x7fff_ffff;
}
