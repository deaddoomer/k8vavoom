//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PolyobjRotator : PolyobjThinker;

float dist;
float speed;


//==========================================================================
//
//  Accumulate
//
//==========================================================================
override bool Accumulate (PolyobjThinker other) {
  PolyobjRotator t = PolyobjRotator(other);
  if (!t) return false;
  if (dist < 0.0 && t.dist < 0.0) {
    // both are perpetual
    //speed = fclamp(speed+t.speed, -10000, +10000);
    speed += t.speed;
    while (speed <= -10000) speed += 10000;
    while (speed >= +10000) speed -= 10000;
    return true;
  }
  // same speed?
  if (speed == t.speed) {
    if (dist >= 0.0 && t.dist >= 0.0) {
      dist = fmax(dist, t.dist);
    } else {
      dist = -1.0;
    }
    return true;
  }
  // cannot merge, override previous mover
  dist = t.dist;
  speed = t.speed;
  return true;
}


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float deltaTime) {
  if (!speed) {
    polyobj_t *poly = XLevel.GetPolyobj(polyobj);
    if (poly) PolyobjStopSequence(poly);
    Destroy();
    return;
  }

  float move = speed*deltaTime;
  float absMove = fabs(move);
  if (dist >= 0.0 && dist < absMove) move = dist*(speed < 0.0 ? -1.0 : 1.0);
  if (XLevel.RotatePolyobj(polyobj, move, (nolink ? VLevel::POFLAG_NOLINK : 0))) {
    if (dist < 0.0) return; // perpetual polyobj
    dist -= absMove;
    if (dist <= 0.0) {
      polyobj_t *poly = XLevel.GetPolyobj(polyobj);
      if (poly) PolyobjStopSequence(poly);
      Destroy();
      return;
    }
  }
}


defaultproperties {
}
