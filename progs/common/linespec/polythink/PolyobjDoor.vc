//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class PolyobjDoor : PolyobjThinker;

enum {
  PODOOR_NONE,
  PODOOR_SLIDE,
  PODOOR_SWING,
};

int type;
float speed;
float dist;
float xSpeed; // for sliding walls
float ySpeed;
float totalDist;
float time;
float waitTime;
bool bClose;


//==========================================================================
//
//  Tick
//
//==========================================================================
override void Tick (float deltaTime) {
  polyobj_t *poly;
  float move;

  if (time) {
    time -= deltaTime;
    if (time <= 0.0) {
      time = 0.0;
      poly = XLevel.GetPolyobj(polyobj);
      PolyobjStartSequence(poly, GetSeqTrans(poly->seqType, SEQ_Door), 0);
    }
    return;
  }

  switch (type) {
    case PODOOR_SLIDE:
      move = speed*deltaTime;
      if (fabs(move) > dist) move = (move < 0.0 ? -1.0 : 1.0)*dist;
      if (XLevel.MovePolyobj(polyobj, move*xSpeed, move*ySpeed)) {
        dist -= fabs(move);
        if (dist <= 0.0) {
          poly = XLevel.GetPolyobj(polyobj);
          PolyobjStopSequence(poly);
          if (!bClose) {
            dist = totalDist;
            bClose = true;
            time = waitTime;
            xSpeed = -xSpeed;
            ySpeed = -ySpeed;
          } else {
            Destroy();
          }
        }
      } else {
        poly = XLevel.GetPolyobj(polyobj);
        if (poly->bCrush || !bClose) {
          // continue moving if the poly is a crusher, or is opening
          return;
        }
        // open back up
        dist = totalDist-dist;
        xSpeed = -xSpeed;
        ySpeed = -ySpeed;
        bClose = false;
        PolyobjStartSequence(poly, GetSeqTrans(poly->seqType, SEQ_Door), 0);
      }
      break;
    case PODOOR_SWING:
      move = speed*deltaTime;
      if (fabs(move) > dist) move = (move < 0.0 ? -1.0 : 1.0)*dist;
      if (XLevel.RotatePolyobj(polyobj, move)) {
        dist -= fabs(move);
        if (dist <= 0.0) {
          poly = XLevel.GetPolyobj(polyobj);
          PolyobjStopSequence(poly);
          if (!bClose) {
            dist = totalDist;
            bClose = true;
            time = waitTime;
            speed = -speed;
          } else {
            Destroy();
          }
        }
      } else {
        poly = XLevel.GetPolyobj(polyobj);
        if (poly->bCrush || !bClose) {
          // continue moving if the poly is a crusher, or is opening
          return;
        }
        // open back up and rewait
        dist = totalDist-dist;
        speed = -speed;
        bClose = false;
        PolyobjStartSequence(poly, GetSeqTrans(poly->seqType, SEQ_Door), 0);
      }
      break;
    default:
      break;
  }
}


defaultproperties {
}
