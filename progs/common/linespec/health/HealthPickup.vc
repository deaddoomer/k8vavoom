//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class HealthPickup : Inventory abstract;

int AutoUseMode;


//==========================================================================
//
//  CreateCopy
//
//==========================================================================
override Inventory CreateCopy (EntityEx Toucher) {
  Inventory Copy = ::CreateCopy(Toucher);
  Copy.Health = Health;
  return Copy;
}


//==========================================================================
//
//  CreateTossable
//
//==========================================================================
override Inventory CreateTossable () {
  Inventory Copy = ::CreateTossable();
  if (Copy) Copy.Health = Health;
  return Copy;
}


//==========================================================================
//
//  HandlePickup
//
//==========================================================================
override bool HandlePickup (Inventory Item) {
  // health pickups of the same type but with different health amount are considered different items
  if (Item.Health == Health) return ::HandlePickup(Item);
  if (Inventory) return Inventory.HandlePickup(Item);
  return false;
}


//==========================================================================
//
//  Use
//
//==========================================================================
override bool Use (bool Pickup) {
  return EntityEx(Owner).GiveBody(Health);
}


defaultproperties {
  MaxAmount = DefMaxAmount;
  bInvBar = true;
  AutoUseMode = 0;
}
