//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Health : Inventory;

int PrevHealth;
int LowHealth;
string LowHealthMessage;


//==========================================================================
//
//  TryPickup
//
//==========================================================================
override bool TryPickup (EntityEx Toucher) {
  if (Toucher.bIsPlayer) {
    PlayerEx pex = PlayerEx(Toucher.Player);
    PrevHealth = Toucher.Health;
    if (pex) {
      // `doHealthAccumHealthPickup()` does all health math
      if (!pex.doHealthAccumHealthPickup(self, Toucher)) {
        if (!bAlwaysPickup) return false;
      }
      if (bTransferInventory) TransferInventoryTo(Toucher);
      GoAwayAndDie();
      return true;
    } else {
      // old code
      int max = MaxAmount;
      if (!max && pex) max = pex.GetMaxHealth();
      if (Toucher.Player.Health >= max) {
        // you should be able to pick up health bonuses even at full health
        if (bAlwaysPickup) {
          if (bTransferInventory) TransferInventoryTo(Toucher);
          GoAwayAndDie();
          return true;
        }
        return false; // old code
      }
      Toucher.Player.Health += Amount;
      if (Toucher.Player.Health > max) Toucher.Player.Health = max;
      Toucher.Health = Toucher.Player.Health;
      if (bTransferInventory) TransferInventoryTo(Toucher);
      GoAwayAndDie();
      return true;
    }
  } else {
    PrevHealth = 0x7fffffff;
    if (Toucher.GiveBody(Amount) || bAlwaysPickup) {
      if (bTransferInventory) TransferInventoryTo(Toucher);
      GoAwayAndDie();
      return true;
    }
    return false;
  }
}


//==========================================================================
//
//  GetPickupMessage
//
//==========================================================================
override string GetPickupMessage () {
  if (PrevHealth < LowHealth && LowHealthMessage) return LowHealthMessage;
  return ::GetPickupMessage();
}


defaultproperties {
  Amount = 1;
  MaxAmount = 0;
  PickupSound = 'misc/health_pkup';
}
