//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class FourthWeaponPiece : WeaponPiece abstract;

const int
  WPIECE1 = 1,
  WPIECE2 = 2,
  WPIECE3 = 4;

class!Actor PieceClass;

bool gaveWeapon;


//==========================================================================
//
//  TryPickup
//
//==========================================================================
override bool TryPickup (EntityEx Toucher) {
  int GaveAmmo;
  Inventory Inv;

  bool checkAssembled = true;
  gaveWeapon = false;
  if (!ClassIsChildOf(Toucher.Class, GetClassReplacement(PieceClass))) {
    // wrong class, but try to pick up for mana
    if (ShouldStay()) return false; // can't pick up wrong-class weapons in coop netplay
    checkAssembled = false;
    GaveAmmo = PlayerEx(Toucher.Player).GiveAmmo(WeaponType.default.AmmoType1,
      WeaponType.default.AmmoGive1)|PlayerEx(Toucher.Player).GiveAmmo(WeaponType.default.AmmoType2,
      WeaponType.default.AmmoGive2);
    if (!GaveAmmo) return false; // didn't need the mana, so don't pick it up
    GoAwayAndDie();
    return true;
  }

  FourthWeaponHolder Hold = FourthWeaponHolder(Toucher.FindInventory(FourthWeaponHolder));
  if (!Hold) {
    Hold = Spawn(FourthWeaponHolder, default, default, default/*, false*/);
    Hold.AttachToOwner(Toucher);
    Hold.PieceMask = 0;
  }

  if (ShouldStay() && (Hold.PieceMask&PieceValue)) return false; // already has the piece

  GaveAmmo = PlayerEx(Toucher.Player).GiveAmmo(WeaponType.default.AmmoType1,
    WeaponType.default.AmmoGive1) |
    PlayerEx(Toucher.Player).GiveAmmo(WeaponType.default.AmmoType2,
    WeaponType.default.AmmoGive2);
  if (ShouldStay()) PieceValue = GetPieceValueTrans(PieceValue);

  if ((Hold.PieceMask&PieceValue) == PieceValue) {
    // already has the piece, check if mana needed
    if (!GaveAmmo) return false; // didn't need the mana, so don't pick it up
  }

  // pick up the weapon piece

  // check if fourth weapon assembled
  Hold.PieceMask |= PieceValue;
  if (Hold.PieceMask == (WPIECE1|WPIECE2|WPIECE3)) {
    // give the weapon if we don't already have it
    if (!Weapon(Toucher.FindInventory(WeaponType))) {
      Weapon Wpn = Level.Spawn(WeaponType);
      if (!Wpn.TryPickup(Toucher)) {
        Wpn.Destroy();
      } else {
        gaveWeapon = true;
        PlayerEx(Toucher.Player).PendingWeapon = Wpn;
        GivenWeapon = Wpn;
      }
    }
  }
  GoAwayAndDie();
  return true;
}


//==========================================================================
//
//  GetPickupMessage
//
//==========================================================================
override string GetPickupMessage () {
  if (gaveWeapon) return Inventory(GivenWeapon).PickupMessage;
  return ::GetPickupMessage();
}


//==========================================================================
//
//  PlayPickupSound
//
//==========================================================================
override void PlayPickupSound (EntityEx Toucher) {
  if (gaveWeapon) {
    // play the build-sound full volume for all players
    Toucher.PlaySound('WeaponBuild', /*CHAN_BODY*/CHAN_AUTO, 1.0, ATTN_NONE);
  } else {
    ::PlayPickupSound(Toucher);
  }
}


//==========================================================================
//
//  ShouldStay
//
//==========================================================================
override bool ShouldStay () {
  return (Level.Game.netgame && !Level.Game.deathmatch);
}


//==========================================================================
//
//  GetPieceValueTrans
//
//==========================================================================
final int GetPieceValueTrans (int Val) {
  switch (Val) {
    case WPIECE1: return WPIECE1|WPIECE2|WPIECE3;
    case WPIECE2: return WPIECE2|WPIECE3;
    case WPIECE3: return WPIECE3;
  }
  // should not happen
  return 0;
}


defaultproperties {
  Height = 32.0;
  bFullVolPickupSound = true;
  PickupSound = 'PickupWeapon';
}
