//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class WeaponPiece : Inventory abstract;

int PieceValue;
class!Weapon WeaponType;
Weapon GivenWeapon;


//==========================================================================
//
//  TryPickup
//
//==========================================================================
override bool TryPickup (EntityEx Toucher) {
  GivenWeapon = none;

  WeaponHolder Hold = none;
  for (Inventory Inv = Toucher.Inventory; Inv; Inv = Inv.Inventory) {
    if (WeaponHolder(Inv) && WeaponHolder(Inv).WeaponType == WeaponType) {
      Hold = WeaponHolder(Inv);
      break;
    }
  }
  if (!Hold) {
    Hold = Spawn(WeaponHolder, default, default, default, false);
    Hold.AttachToOwner(Toucher);
    Hold.WeaponType = WeaponType;
    Hold.PieceMask = 0;
  }

  if (ShouldStay()) {
    if (Hold.PieceMask&PieceValue) return false; // already has the piece
    PlayerEx(Toucher.Player).GiveAmmo(WeaponType.default.AmmoType1, WeaponType.default.AmmoGive1);
    PlayerEx(Toucher.Player).GiveAmmo(WeaponType.default.AmmoType2, WeaponType.default.AmmoGive2);
  } else {
    int GaveAmmo = PlayerEx(Toucher.Player).GiveAmmo(WeaponType.default.AmmoType1,
      WeaponType.default.AmmoGive1)|PlayerEx(Toucher.Player).GiveAmmo(WeaponType.default.AmmoType2,
      WeaponType.default.AmmoGive2);
    if (Hold.PieceMask&PieceValue) {
      // already has the piece, check if ammo needed
      if (!GaveAmmo) return false; // didn't need the ammo, so don't pick it up
      GiveQuest(Toucher);
      GoAwayAndDie();
      return true;
    }
  }

  // pick up the weapon piece

  // check if fourth weapon assembled
  Hold.PieceMask |= PieceValue;
  if (Hold.PieceMask == (1<<WeaponType.default.Health)-1) {
    if (!Toucher.FindInventory(WeaponType)) {
      GivenWeapon = Level.Spawn(WeaponType);
      // given weapon should not give any more ammo to the player
      GivenWeapon.AmmoGive1 = 0;
      GivenWeapon.AmmoGive2 = 0;
      GivenWeapon.AttachToOwner(Toucher);
      GivenWeapon.AmmoGive1 = GivenWeapon.default.AmmoGive1;
      GivenWeapon.AmmoGive2 = GivenWeapon.default.AmmoGive2;
    }
  }
  GiveQuest(Toucher);
  GoAwayAndDie();
  return true;
}


//==========================================================================
//
//  ShouldStay
//
//==========================================================================
override bool ShouldStay () {
  return LineSpecialGameInfo(Level.Game).bWeaponsStay;
}


//==========================================================================
//
//  GetPickupMessage
//
//==========================================================================
override string GetPickupMessage () {
  if (GivenWeapon) return GivenWeapon.PickupMessage;
  return ::GetPickupMessage();
}


//==========================================================================
//
//  PlayPickupSound
//
//==========================================================================
override void PlayPickupSound (EntityEx Toucher) {
  if (GivenWeapon) {
    GivenWeapon.PlayPickupSound(Toucher);
  } else {
    ::PlayPickupSound(Toucher);
  }
}


defaultproperties {
}
