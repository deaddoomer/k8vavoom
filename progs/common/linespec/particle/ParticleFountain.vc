//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//**
//**  Based on code from ZDoom with following notice:
//**
//** Copyright 1998-2006 Randy Heit
//** All rights reserved.
//**
//** Redistribution and use in source and binary forms, with or without
//** modification, are permitted provided that the following conditions
//** are met:
//**
//** 1. Redistributions of source code must retain the above copyright
//**    notice, this list of conditions and the following disclaimer.
//** 2. Redistributions in binary form must reproduce the above copyright
//**    notice, this list of conditions and the following disclaimer in the
//**    documentation and/or other materials provided with the distribution.
//** 3. The name of the author may not be used to endorse or promote products
//**    derived from this software without specific prior written permission.
//**
//** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//**
//**************************************************************************
class ParticleFountain : Actor;

bool bFountain;
float GenDelay;

replication {
  reliable if (Role == ROLE_Authority) bFountain;
}


//==========================================================================
//
//  Activate
//
//==========================================================================
override bool Activate (EntityEx Activator) {
  if (::Activate(Activator)) {
    bFountain = true;
    return true;
  }
  return false;
}


//==========================================================================
//
//  Deactivate
//
//==========================================================================
override bool Deactivate (EntityEx Activator) {
  if (::Deactivate(Activator)) {
    bFountain = false;
    return true;
  }
  return false;
}


//==========================================================================
//
//  BeginPlay
//
//==========================================================================
override void BeginPlay () {
  ::BeginPlay();
  if (!bDormant) bFountain = true;
}


//==========================================================================
//
//  ClientTick
//
//==========================================================================
override void ClientTick (float deltaTime) {
  ::ClientTick(deltaTime);
  if (!bFountain) return;

  GenDelay -= deltaTime;
  if (GenDelay > 0.0) return;
  GenDelay += 2.0/35.0;

  int EffectColor;
  int EffectColor2;
  switch (Health) {
    case 1:
      EffectColor = RGB(255, 0, 0);
      EffectColor2 = RGB(255, 127, 127);
      break;
    case 2:
      EffectColor = RGB(0, 200, 0);
      EffectColor2 = RGB(127, 255, 127);
      break;
    case 3:
      EffectColor = RGB(0,   0,   255);
      EffectColor2 = RGB(127, 127, 255);
      break;
    case 4:
      EffectColor = RGB(255, 255, 0);
      EffectColor2 = RGB(255, 255, 180);
      break;
    case 5:
      EffectColor = RGB(120, 0,   160);
      EffectColor2 = RGB(200, 30,  255);
      break;
    case 6:
      EffectColor = RGB(0, 0, 0);
      EffectColor2 = RGB(50, 50, 50);
      break;
    case 7:
      EffectColor = RGB(210, 210, 210);
      EffectColor2 = RGB(255, 255, 255);
      break;
  }

  float An = Random()*360.0;
  float Out = Radius*Random();

  TVec porg;
  float psin, pcos;
  sincos(An, out psin, out pcos);
  porg.x = Origin.x+Out*pcos;
  porg.y = Origin.y+Out*psin;
  porg.z = Origin.z+Height+1.0;

  particle_t *p = Level.NewParticle(porg);
  if (p) {
    if (P_Random() < 30) {
      p->Size = 1.0;
      p->color = EffectColor2;
    } else {
      p->Size = 1.5;
      p->color = EffectColor;
    }

    // set initial velocities
    p->vel.x = (1.0/4096.0)*(float(P_Random())-128.0)*35.0;
    p->vel.y = (1.0/4096.0)*(float(P_Random())-128.0)*35.0;
    p->vel.z = (1.0/4096.0)*(float(P_Random())-128.0)*35.0;

    // set initial accelerations
    p->accel.x = (1.0/16384.0)*(float(P_Random())-128.0)*35.0*35.0;
    p->accel.y = (1.0/16384.0)*(float(P_Random())-128.0)*35.0*35.0;
    p->accel.z = (1.0/16384.0)*(float(P_Random())-128.0)*35.0*35.0;

    if (Out < Radius/8.0) {
      p->vel.z += 10.0/3.0*35.0;
    } else {
      p->vel.z += 3.0*35.0;
    }
    p->accel.z -= 1.0/11.0*35.0*35.0;

    p->die = Level.XLevel.Time+51.0/35.0;
    p->type = LineSpecialLevelInfo::pt_fountain;
  }
}


defaultproperties {
  Height = 0.0;
  bNoBlockmap = true;
  bInvisible = true;
  bNoGravity = true;
}
