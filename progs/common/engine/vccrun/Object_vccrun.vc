//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    Copyright (C) 2018 Ketmar Dark
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//
//  vccrun things
//
//==========================================================================

native static final bool GC_ImmediateDelete { get; set; }

//==========================================================================
//
//              MISC BUILTINS
//
//==========================================================================

// ////////////////////////////////////////////////////////////////////////// //
// timer API

// returns new timer id
// if interval is < 1, returns with error and won't create timer
native static final int CreateTimer (int intervalms, optional bool oneshot);
// creates timer with the given id, or returns `false` if id is n/a
native static final bool CreateTimerWithId (int id, int intervalms, optional bool oneshot);
native static final bool DeleteTimer (int id); // `true`: deleted, `false`: no such timer
native static final bool IsTimerExists (int id);
native static final bool IsTimerOneShot (int id); // `false`: no timer, or not oneshot
native static final int GetTimerInterval (int id); // 0: no such timer
// returns success flag; won't do anything if interval is < 1
native static final bool SetTimerInterval (int id, int intervalms);

// in seconds, from app start
native static final float GetTickCount ();


//==========================================================================
//
//              FILESYSTEM BUILTINS
//
//==========================================================================
// append disk directory to the list of archives
//native static final void fsysAppendDir (string path);

enum fsysAnyPak = -666;

native static final int fsysAppendDir (string path, optional string pfx);

// append archive to the list of archives
// it will be searched in the current dir, and then in `fsysBaseDir`
// returns pack id or 0
native static final int fsysAppendPak (string fname, optional int pakid);

// this will take ownership of `strm` (or kill it on error)
// returns pack id or 0
//native static final int fsysAppendPak (VStream *strm, string apfx=VStr());

// remove given pack from pack list
native static final void fsysRemovePak (int pakid);

// remove all packs from pakid and later
native static final void fsysRemovePaksFrom (int pakid);

// return pack file path for the given pack id (or empty string)
native static final string fsysGetPakPath (int pakid);

// return pack prefix for the given pack id (or empty string)
native static final string fsysGetPakPrefix (int pakid);

// 0: no such pack
native static final int fsysFindPakByPrefix (string pfx);

native static final bool fsysFileExists (string fname, optional int pakid);

// find file with any extension
native static final string fsysFileFindAnyExt (string fname, optional int pakid);

native static final int fsysGetLastPakId ();

native static final bool fsysKillCommonZipPrefix { get; set; }

//void fsysCreatePath (const VStr &path);

// open file for reading, relative to basedir, and look into archives too
//native static final VStream *fsysOpenFile (string fname);

// open file for reading, relative to basedir, and look into archives too
//native static final VStream *fsysOpenFileAnyExt (string fname);

// open file for reading, NOT relative to basedir
//native static final VStream *fsysOpenDiskFileWrite (string fname);
//native static final VStream *fsysOpenDiskFile (string fname);


//==========================================================================
//
//               OPTIONS (OBJECT) I/O
//
//==========================================================================
// set application name -- it will be used to determine options and saves storage
native final static void appSetName (string appname);
// save options: this will save all non-trainsient POD object fields
native final static bool appSaveOptions (Object optobj, optional string optfile, optional bool packit);
// load options: this will load all non-trainsient POD object fields
// returns `true` if options was succesfully loaded
native final static spawner Object appLoadOptions (class cls, optional string optfile);


//==========================================================================
//
//             console command buffer functions
//
//==========================================================================
native static final void ccmdClearText (); // clear command buffer
native static final void ccmdClearCommand (); // clear current command (only)

// parse one command
enum CCResult {
  Empty = -1, // no more commands (nothing was parsed)
  Normal = 0, // one command parsed, line is not complete
  EOL = 1, // no command parsed, line is complete
};

// this skips empty lines without notice
native static final CCResult ccmdParseOne ();

native static final int ccmdGetArgc (); // 0: nothing was parsed
native static final string ccmdGetArgv (int idx); // 0: command; other: args, parsed and unquoted

// return number of unparsed bytes left
native static final int ccmdTextSize ();

native static final void ccmdPrepend (string str); // use `va()` for formatting
native static final void ccmdPrependQuoted (string str); // use `va()` for formatting

native static final void ccmdAppend (string str); // use `va()` for formatting
native static final void ccmdAppendQuoted (string str); // use `va()` for formatting


//==========================================================================
//
//              SOCKET LIBRARY
//
//==========================================================================
enum SockIOCTL {
  RecvTimeout, // in msecs
  SendTimeout, // in msecs
  ConnectTimeout, // in msecs
  Type, // tcp or udp
  RecvQLength, // number of received data in queue
  SendQLength, // number of unsent data in queue
  RecvQMax, // default: 1MB
  SendQMax, // default: 1MB
  IsValidId, // is this socket id valid?
  IsAlive, // is this socket alive and operational? errored/closed sockets retains id for some time, but they are not "alive"
  Port,
  Address,
}

enum SockType {
  UDP,
  TCP,
}

struct SocketOptions {
  int RecvTimeout; // in msecs (0: default -- 30 seconds)
  int SendTimeout; // in msecs (0: default -- 30 seconds)
  int ConnectTimeout; // in msecs (0: default -- 30 seconds)
}


// create socket, initiate connection
// if some timeout is zero, default timeout will be returned in opts
// returns 0 on error, or positive socket id
native static final int SocketConnectUDP (string host, int port, optional ref SocketOptions opts);
native static final int SocketConnectTCP (string host, int port, optional ref SocketOptions opts);
native static final int SocketConnectTLS (string host, int port, optional ref SocketOptions opts);

// returns `false` if sockid is invalid or if socket is already errored/disconnected
// note that sockid will be destroyed after dispatching `ev_socket` event
// immediate disconnect means "don't do shutdown, use SO_LIGER 0"
native static final bool SocketDisconnect (int sockid, optional bool immediate);

// for most queries, returns -1 for invalid sockid
native static final int SocketGetIOCTL (int sockid, SockIOCTL opcode);
native static final bool SocketSetIOCTL (int sockid, SockIOCTL opcode, optional int arg);

// on error, socket will be automatically closed
// note that sockid will be destroyed after dispatching `ev_socket` event
native static final bool SocketSendStr (int sockid, string data);
native static final bool SocketSendBuf (int sockid, const ref array!ubyte data, optional int ofs, optional int len);

// can return empty string if there is noting in recv queue (or on error)
// you can check for errors using `IsAlive` IOCTL request
native static final string SocketRecvStr (int sockid, optional int maxlen);
// append data to buffer; returns number of appended bytes or 0 on error/empty queue
native static final int SocketRecvBuf (int sockid, ref array!ubyte data, optional int maxlen);
