//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ScriptsParser : Object native;

struct ScriptSavedPos {
  int Line;
  int TokLine;
  string String;
  name Name8;
  name Name;
  int Number;
  float Float;

  readonly void *ScriptPtr;
  readonly void *TokStartPtr;
  int TokStartLine;

  bool CMode;
  bool Escape;
  bool AllowNumSign;

  bool End;
  bool Crossed;
  bool QuotedString;
}

native private readonly void *Internal;

native string String { get; }
native int Number { get; }
native float Float { get; }
native bool Crossed { get; }
native bool Quoted { get; }

#ifndef VCC_STANDALONE_EXECUTOR
native void OpenLumpName (name Name);
native void OpenLumpIndex (int lump);
#endif
native void OpenLumpFullName (string Name);
native void OpenString (name Name, string s);
native bool IsText ();
native bool IsAtEol ();
native bool IsCMode ();
native bool IsAllowNumSign ();
native void SetAllowNumSign (bool On);
native void SetCMode (bool On);
native void SetEscape (bool On);
native bool AtEnd ();
native bool GetString ();
native void ExpectLoneChar ();
#ifndef VCC_STANDALONE_EXECUTOR
native int ExpectColor ();
#endif
native void ExpectString ();
native bool Check (string Text);
native bool CheckStartsWith (string Text);
native void Expect (string Text);
native bool CheckIdentifier ();
native void ExpectIdentifier ();
native bool CheckNumber (optional bool withSign); // default: false
native void ExpectNumber (optional bool withSign); // default: false
native bool CheckFloat (optional bool withSign); // default: false
native void ExpectFloat (optional bool withSign); // default: false
native void ResetQuoted ();
native void ResetCrossed ();
native void SkipBracketed (optional bool bracketEaten); // default is `false`
native void SkipLine ();
native void UnGet ();
native string FileName ();
native int CurrLine ();
native void ScriptError (string Text, ...) [printf,1];
native void ScriptMessage (string Text, ...) [printf,1];

native void SavePos (out ScriptSavedPos pos);
native void RestorePos (const ref ScriptSavedPos pos);


defaultproperties {
}
