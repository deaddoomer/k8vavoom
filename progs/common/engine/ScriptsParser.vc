//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class ScriptsParser : Object native;

/*
 defaults:
   CMode: false
   Escape: true
   AllowNumSign: true

  `AllowNumSign` has any effect only for c-mode, non-c mode doesn't differentiate between numbers and ids

  if `CMode` is `false`:
    ';' marks single-line comment
    allowed newlines in quoted string
    identifiers can include single-quote char (but cannot start or end with it, and no double SQ),
    and other special chars except and ` {}|=,;" ` (excluding back quotes)

  if `CMode` is `true`:
    identifiers cannot include `@`, `.`, and other non-alpha chars (including `$`), but
    can include single-quote char (yet cannot start or end with it, and no double SQ).
    special non-alpha identifiers includes c-like tokens, a-la `==` or `>>>`

  `Escape` allows escape processing inside quoted strings.
  non-c escape set is very limited:
    \r
    \n
    \c (color escape)
  in c mode, some more escapes are allowed, including:
    \e (\x1b)
    \xNN -- hex char code, 0 will be converted to space
*/

struct ScriptSavedPos {
  int Line;
  int TokLine;
  string String;
  name Name8;
  name Name;
  int Number;
  float Float;

  readonly void *ScriptPtr;
  readonly void *TokStartPtr;
  int TokStartLine;

  bool CMode;
  bool Escape;
  bool AllowNumSign;
  bool EDGEMode;
  bool SemiComments;
  bool HashComments;

  bool End;
  bool Crossed;
  bool QuotedString;
}

native private readonly void *Internal;

native final string String { get; }
native final int Number { get; }
native final float Float { get; }
native final bool Crossed { get; } // set if `GetString()` moved to the new line, reset otherwise
native final bool Quoted { get; } // set if `GetString()` got quoted string
native final bool EndOfText { get; } // set if `GetString()` reached EOT without reading anything
native final int SourceLump { get; set; }

native final bool Escape { get; set; } // process escapes in quoted strings?
native final bool CMode { get; set; }
native final bool AllowNumSign { get; set; } // has meaning only for c-mode
native final bool EDGEMode { get; set; }
native final bool SemicolonComments { get; set; } // has meaning only for c-mode
native final bool HashComments { get; set; }

#ifndef VCC_STANDALONE_EXECUTOR
native final void OpenLumpName (name Name);
native final void OpenLumpIndex (int lump);
#endif
native final void OpenLumpFullName (string Name);
native final void OpenString (name Name, string s);
native final bool IsText ();
native final bool IsAtEol ();
native final bool IsCMode ();
native final bool IsEscape ();
native final bool IsAllowNumSign ();
native final void SetAllowNumSign (bool On);
native final void SetCMode (bool On);
native final void SetEscape (bool On);
native final bool AtEnd ();
native final bool GetString ();
native final void ExpectLoneChar ();
#ifndef VCC_STANDALONE_EXECUTOR
native final int ExpectColor ();
#endif
native final void ExpectString ();
native final bool Check (string Text);
native final bool CheckStartsWith (string Text);
native final void Expect (string Text);
native final bool CheckIdentifier ();
native final void ExpectIdentifier ();
native final bool CheckNumber (optional bool withSign/*=false*/);
native final void ExpectNumber (optional bool withSign/*=false*/);
native final bool CheckFloat (optional bool withSign/*=false*/);
native final void ExpectFloat (optional bool withSign/*=false*/);
native final void ResetQuoted ();
native final void ResetCrossed ();
native final void SkipBracketed (optional bool bracketEaten/*=false*/);
native final void SkipLine ();
native final void UnGet ();
native final string FileName ();

native final int TokenLine ();
native final int CurrLine ();

// at the token line
native final void ScriptError (string Text, ...) [printf,1];
native final void ScriptMessage (string Text, ...) [printf,1];

native final void SavePos (out ScriptSavedPos pos);
native final void RestorePos (const ref ScriptSavedPos pos);

#ifndef VCC_STANDALONE_EXECUTOR
// the following will try to find an include in the same file as `srclump`
// negative result means "file not found"
// worker
static native final int FindRelativeIncludeLump (int srclump, string fname);
// main API
static native final int FindIncludeLump (int srclump, string fname);
#endif


defaultproperties {
}
