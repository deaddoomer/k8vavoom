//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
// worldinfo object is spawned for each map, and created on server start
// this class is subclassed with `WorldInfoEx`
// if you need to create your own in your VavoomC mod, do it like this:
//   class MyMod_WorldInfo : replaces(lastchild of WorldInfo);
// this way it will be compatible with other VavoomC mods
//
class WorldInfo : GameObject native abstract;

native private readonly void *Acs; // VAcsGlobal

readonly ubyte GameSkill;
readonly float SkillAmmoFactor; // 1.0
readonly float SkillDoubleAmmoFactor; // unused
readonly float SkillDamageFactor; // 1.0
readonly float SkillRespawnTime;
readonly int SkillRespawnLimit;
readonly float SkillAggressiveness; // 1.0
readonly int SkillSpawnFilter;
readonly int SkillAcsReturn;
readonly float SkillHealthFactor; // 1.0
readonly float SkillMonsterHealth; // 1.0

readonly bool bSkillFastMonsters;
readonly bool bSkillDisableCheats;
readonly bool bSkillEasyBossBrain;
readonly bool bSkillAutoUseHealth;
readonly bool bSkillSlowMonsters;
readonly bool bSkillSpawnMulti;

array!SkillMonsterReplacement SkillReplacements;

native final void SetSkill (int Skill);

native final string GetACSGlobalStr (void *acslevel, int index);

native final int GetACSGlobalInt (int index);
native final float GetACSGlobalFloat (int index);
native final void SetACSGlobalInt (int index, int value);
native final void SetACSGlobalFloat (int index, float value);

native final int GetACSWorldInt (int index);
native final float GetACSWorldFloat (int index);
native final void SetACSWorldInt (int index, int value);
native final void SetACSWorldFloat (int index, float value);


final float GetAmmoFactor () { float v = GetCvarF('g_skill_ammo_factor_override'); return (v > 0 ? v : SkillAmmoFactor); }
//final float GetDoubleAmmoFactor () { return SkillDoubleAmmoFactor; } // unused
final float GetDamageFactor () { float v = GetCvarF('g_skill_damage_factor_override'); return (v > 0 ? v : SkillDamageFactor); }
final int GetRespawnLimit () { int v = GetCvarI('g_skill_respawn_limit_override'); return (v > 0 ? v : v < 0 ? 0 : SkillRespawnLimit); }
final float GetAggressiveness () { float v = GetCvarF('g_skill_aggressiveness_override'); return (v > 0 ? v : SkillAggressiveness); }
final int GetSpawnFilter () { int v = GetCvarI('g_skill_spawn_filter_override'); return (v > 0 ? v : v < 0 ? 0 : SkillSpawnFilter); }
final bool GetSpawnMulti () { int v = GetCvarI('g_skill_spawn_multi_override'); return (v > 0 ? true : v < 0 ? false : bSkillSpawnMulti); }
final float GetHealthFactor () { return SkillHealthFactor; }
final float GetMonsterHealth () { return SkillMonsterHealth; }


defaultproperties {
}
