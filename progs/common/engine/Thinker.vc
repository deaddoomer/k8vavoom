//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Thinker : GameObject native abstract;

enum {
  ROLE_None,
  ROLE_DumbProxy,
  ROLE_Authority,
};

enum {
  SNDTYPE_World,
  SNDTYPE_Point,
  SNDTYPE_Surround,
  SNDTYPE_OriginMask = 0x03,

  SNDTYPE_Continuous = 4,
  SNDTYPE_Random = 8,
  SNDTYPE_Periodic = 12,
  SNDTYPE_PlaybackMask = 0x0c
};


struct FAmbientSound {
  int Type; // type of ambient sound
  float PeriodMin; // # of tics between repeats
  float PeriodMax; // max # of tics for random ambients
  float Volume; // relative volume of sound
  float Attenuation;
  name Sound; // logical name of sound to play
};


readonly Level XLevel; // level object (i.e. actual map)
readonly LevelInfo Level; // level info object

native readonly private Thinker Prev;
native readonly private Thinker Next;

// `Spawn()` function sets this to game time
// this can be used to remove various old items and such
float SpawnTime;

// network roles
ubyte Role;
ubyte RemoteRole;

// flags
bool bAlwaysRelevant; // always updated
readonly bool bNetInitial; // initial update
readonly bool bNetOwner; // is owned by current player


replication {
  reliable if (Role == ROLE_Authority)
    Role, RemoteRole;
}


// ////////////////////////////////////////////////////////////////////////// //
// alas, RandomSpawner can return various shit here, so we need to double-check it
// WARNING! this can return any object, so caller MUST check result type!
native final spawner Thinker SpawnThinker (class!Thinker Type, optional TVec AOrigin,
                                               optional TAVec AAngles, optional mthing_t *mthing,
                                               optional bool AllowReplace/*=true*/);

// alas, RandomSpawner can return various shit here, so we need to double-check it
// WARNING! this can return any object, so caller MUST check result type!
native final spawner EntityEx SpawnNoTypeCheck (class!EntityEx Type, optional TVec AOrigin,
                                                optional TAVec AAngles, optional mthing_t *mthing,
                                                optional bool AllowReplace/*=true*/);

// alas, RandomSpawner can return various shit here, so we need to double-check it
// this has to be native, becase `EntityEx` is not yet defined here
// if spawned object is not of `Type` type, it will be immediately destroyed, and `none` will be returned
native final spawner EntityEx SpawnEntityChecked (class!EntityEx desiredClass, class!EntityEx Type, optional TVec AOrigin,
                                                  optional TAVec AAngles, optional mthing_t *mthing,
                                                  optional bool AllowReplace/*=true*/);

// alas, RandomSpawner can return various shit here, so we need to double-check it
// this can return *ONLY* `EntityEx` and descentdants
// if spawned object is not of `EntityEx` type, it will be immediately destroyed, and `none` will be returned
native final /*spawner*/ EntityEx Spawn (class!EntityEx Type, optional TVec AOrigin,
                                         optional TAVec AAngles, optional mthing_t *mthing,
                                         optional bool AllowReplace/*=true*/);

override native void Destroy (); // this just marks thinker to be deleted on a next tick

// broadcast message (print to all clients)
native final void bprint (string format, ...) [printf,1];

// WARNING! don't store returned dlight pointer, it may become invalid
//          after next call to `AllocDlight()`!
native final dlight_t *AllocDlight (Thinker Owner, TVec origin, /*optional*/ float radius, optional int lightid); // can return `nullptr`
// returns `true` if dlight was found
native final bool ShiftDlightHeight (int lightid, float zdelta);
native final particle_t *NewParticle (TVec origin); // can return `nullptr`
native static final FAmbientSound *GetAmbientSound (int Idx); // can return `nullptr`

// iterators
native final iterator AllThinkers (class!Thinker Class, out Thinker Thinker);
native final iterator AllActivePlayers (out BasePlayer Player);
native final iterator PathTraverse (out intercept_t *In, float x1, float y1, float x2, float y2, int flags);
native final iterator RadiusThings (out Entity Ent, TVec Org, float Radius);


//==========================================================================
//
//  Tick
//
//==========================================================================
void Tick (float deltaTime) {
}


//==========================================================================
//
//  ClientTick
//
//==========================================================================
void ClientTick (float DeltaTime) {
}


defaultproperties {
  Role = ROLE_Authority;
  RemoteRole = ROLE_DumbProxy;
}


//==========================================================================
//
//  Button (switch, actually) class
//
//==========================================================================
class ThinkButton : Thinker native;
readonly int Side;
readonly ubyte Where;
readonly int SwitchDef;
readonly int Frame;
readonly float Timer;
// these two weren't saved, why?
readonly name DefaultSound;
readonly ubyte UseAgain;
readonly int tbversion; // v1 stores more data
readonly int SwitchDefTexture;
