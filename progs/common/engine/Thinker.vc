//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2022 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class Thinker : GameObject native abstract;

enum {
  // no role assigned yet
  ROLE_None,
  // this is dumb proxy: it does no physics, no animation, and updates only
  // when the server sends an update.
  // this situation is only seen in network clients, never for network servers or SP games
  ROLE_DumbProxy,
  // this is simulated proxy: the client should simulate physics and perform animation, but
  // the server is still the authority.
  // this situation is only seen in network clients, never for network servers or SP games
  ROLE_SimulatedProxy,
  // this is local player (not implemented yet)
  // used to perform client-side predictions
  // this situation is only seen in network clients, never for network servers or SP games
  ROLE_AutonomousProxy,
  // this machine has absolute, authoritative control over the actor.
  // this is the case for all actors on a network server or in SP game.
  // on a client, this is the case for actors that were locally spawned by the client,
  // such as gratuitous special effects which are done client-side in order to reduce bandwidth usage.
  ROLE_Authority,
};

enum {
  SNDTYPE_World,
  SNDTYPE_Point,
  SNDTYPE_Surround,
  SNDTYPE_OriginMask = 0x03,

  SNDTYPE_Continuous = 4,
  SNDTYPE_Random = 8,
  SNDTYPE_Periodic = 12,
  SNDTYPE_PlaybackMask = 0x0c
};


struct FAmbientSound {
  int Type; // type of ambient sound
  float PeriodMin; // # of tics between repeats
  float PeriodMax; // max # of tics for random ambients
  float Volume; // relative volume of sound
  float Attenuation;
  name Sound; // logical name of sound to play
};


readonly VLevel XLevel; // level object (i.e. actual map)
readonly LevelInfo Level; // level info object

native readonly private Thinker Prev;
native readonly private Thinker Next;

// `Spawn()` function sets this to game time
// this can be used to remove various old items and such
float SpawnTime;
native transient int ValidCount; // moved to VThinker

// network roles
ubyte Role;
ubyte RemoteRole;

// this is object UId as it appears on the server
// used to mark static lights and such
// no need to save it, and it set to UniqieId automatically
transient int ServerUId;

// flags
bool bAlwaysRelevant; // always updated
// there is no reason to write those flags even when i'll implement network savegames
// network code manipulates 'em right in channel updater
transient readonly bool bNetInitial; // initial update
transient readonly bool bNetOwner; // is owned by current player
transient bool bServerSideOnly; // if set, this thinker will never be sent to clients (but `AlwaysRelevant` has priority)
// see C++ code for explanations (but explanations here takes the priority)
// this flag is set by the server when simulated proxy is updated after it became simulated for the first time
// this flag is set by the client when it got closing message for fully detached entity, or when simulated got its first packet
transient bool bDetachComplete;
// this is set in decorate, see C++ code
// basically, the server immediately turns this entity to simulated proxy
transient bool bDetachSimulated;


replication {
  //k8: transfer some flags to client, so we can take a note
  reliable if (Role == ROLE_Authority)
    Role, RemoteRole, bAlwaysRelevant, bNetInitial;
}


// ////////////////////////////////////////////////////////////////////////// //
// alas, RandomSpawner can return various shit here, so we need to double-check it
// WARNING! this can return any object, so caller MUST check result type!
native /*final*/ spawner Thinker SpawnThinker (class!Thinker Type, optional TVec AOrigin,
                                               optional TAVec AAngles, optional mthing_t *mthing,
                                               optional bool AllowReplace/*=true*/);

// alas, RandomSpawner can return various shit here, so we need to double-check it
// WARNING! this can return any object, so caller MUST check result type!
native /*final*/ spawner EntityEx SpawnNoTypeCheck (class!EntityEx Type, optional TVec AOrigin,
                                                    optional TAVec AAngles, optional mthing_t *mthing,
                                                    optional bool AllowReplace/*=true*/);

// alas, RandomSpawner can return various shit here, so we need to double-check it
// this has to be native, becase `EntityEx` is not yet defined here
// if spawned object is not of `Type` type, it will be immediately destroyed, and `none` will be returned
native /*final*/ spawner EntityEx SpawnEntityChecked (class!EntityEx desiredClass, class!EntityEx Type, optional TVec AOrigin,
                                                      optional TAVec AAngles, optional mthing_t *mthing,
                                                      optional bool AllowReplace/*=true*/);

// alas, RandomSpawner can return various shit here, so we need to double-check it
// this can return *ONLY* `EntityEx` and descentdants
// if spawned object is not of `EntityEx` type, it will be immediately destroyed, and `none` will be returned
native /*final*/ /*spawner*/ EntityEx Spawn (class!EntityEx Type, optional TVec AOrigin,
                                             optional TAVec AAngles, optional mthing_t *mthing,
                                             optional bool AllowReplace/*=true*/);

override native void Destroy (); // this just marks thinker to be deleted on a next tick

// broadcast message (print to all clients)
native final void bprint (string format, ...) [printf,1];

// WARNING! don't store returned dlight pointer, it may become invalid
//          after next call to `AllocDlight()`!
native final dlight_t *AllocDlight (Thinker Owner, TVec origin, /*optional*/ float radius, optional int lightid); // can return `nullptr`
// returns `true` if dlight was found
native final bool ShiftDlightHeight (int lightid, float zdelta);
native final particle_t *NewParticle (TVec origin); // can return `nullptr`
native static final FAmbientSound *GetAmbientSound (int Idx); // can return `nullptr`

// iterators
native final iterator AllThinkers (class!Thinker Class, out Thinker Thinker);
native final iterator AllActivePlayers (out BasePlayer Player);
// z coords are used when we need to add things, to check slopes/3d floors
native final iterator PathTraverse (out intercept_t In, TVec p0, TVec p1, int flags,
                                    optional int planeflags/*=SPF_NOBLOCKING|SPF_NOBLOCKSHOOT*/,
                                    optional int lineflags/*=ML_BLOCKEVERYTHING|ML_BLOCKHITSCAN*/);
native final iterator RadiusThings (out Entity Ent, TVec Org, float Radius);

// WARNING! even with a radius, this loops over ALL monsters on the map!
native final iterator AllMonsters (class!Actor Class, out Actor Thinker,
                                   optional bool onlyVisible, optional bool allowPlayers,
                                   optional bool allowSelf, optional float radius);


//==========================================================================
//
//  OnDetachedFromServer
//
//  called from network code when detach is complete
//  don't do anything complex here!
//  also called for simulated proxies
//
//==========================================================================
void OnDetachedFromServer () {
}


//==========================================================================
//
//  GetNextAffector
//
//  used by the engine to iterate sector affectors
//
//==========================================================================
Thinker GetNextAffector () {
  return none;
}


//==========================================================================
//
//  Tick
//
//==========================================================================
void Tick (float deltaTime) {
}


//==========================================================================
//
//  ClientTick
//
//  delta time can be zero for "interframe" ticks
//
//==========================================================================
void ClientTick (float DeltaTime) {
}


defaultproperties {
  Role = ROLE_Authority;
  RemoteRole = ROLE_DumbProxy;
}


//==========================================================================
//
//  Button (switch, actually) class
//
//==========================================================================
class ThinkButton : Thinker native;
readonly int Side;
readonly ubyte Where;
readonly int SwitchDef;
readonly int Frame;
readonly float Timer;
// these two weren't saved, why?
readonly name DefaultSound;
readonly ubyte UseAgain;
readonly int tbversion; // v1 stores more data
readonly int SwitchDefTexture;
readonly TVec ActivateSoundOrg; // if `x` is finite, this is the origin of activation sound
readonly bool bSoundOrgSet;
