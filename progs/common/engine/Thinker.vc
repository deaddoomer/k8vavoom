//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class Thinker : GameObject native abstract;

enum {
  ROLE_None,
  ROLE_DumbProxy,
  ROLE_Authority,
};

enum {
  SNDTYPE_World,
  SNDTYPE_Point,
  SNDTYPE_Surround,
  SNDTYPE_OriginMask = 0x03,

  SNDTYPE_Continuous = 4,
  SNDTYPE_Random = 8,
  SNDTYPE_Periodic = 12,
  SNDTYPE_PlaybackMask = 0x0c
};

const int SPF_FORCECLAMP = 0x01;
const int SPF_INTERPOLATE = 0x00; //FIXME

// Pointer constants, bitfield-enabled
//enum EPointerFlags
const int AAPTR_DEFAULT = 0;
const int AAPTR_NULL = 0x1;
const int AAPTR_TARGET = 0x2;
const int AAPTR_MASTER = 0x4;
const int AAPTR_TRACER = 0x8;

const int AAPTR_PLAYER_GETTARGET = 0x10;
const int AAPTR_PLAYER_GETCONVERSATION = 0x20;

const int AAPTR_PLAYER1 = 0x40;
const int AAPTR_PLAYER2 = 0x80;
const int AAPTR_PLAYER3 = 0x100;
const int AAPTR_PLAYER4 = 0x200;
const int AAPTR_PLAYER5 = 0x400;
const int AAPTR_PLAYER6 = 0x800;
const int AAPTR_PLAYER7 = 0x1000;
const int AAPTR_PLAYER8 = 0x2000;
const int AAPTR_FRIENDPLAYER = 0x4000;
const int AAPTR_LINETARGET = 0x8000;


struct FAmbientSound {
  int Type; // type of ambient sound
  float PeriodMin; // # of tics between repeats
  float PeriodMax; // max # of tics for random ambients
  float Volume; // relative volume of sound
  float Attenuation;
  name Sound; // logical name of sound to play
};


readonly Level XLevel; // level object (i.e. actual map)
readonly LevelInfo Level; // level info object

native readonly private Thinker Prev;
native readonly private Thinker Next;

// `Spawn()` function sets this to game time
// this can be used to remove various old items and such
float SpawnTime;

// network roles
ubyte Role;
ubyte RemoteRole;

// flags
bool bAlwaysRelevant; // always updated
readonly bool bNetInitial; // initial update
readonly bool bNetOwner; // is owned by current player


replication {
  reliable if (Role == ROLE_Authority)
    Role, RemoteRole;
}


// ////////////////////////////////////////////////////////////////////////// //
native final spawner Thinker Spawn (class!Thinker Type, optional TVec AOrigin,
                                    optional TAVec AAngles, optional mthing_t *mthing,
                                    optional bool AllowReplace);
override native void Destroy (); // this just marks thinker to be deleted on a next tick

// broadcast message (print to all clients)
native final void bprint (string format, ...) [printf,1];

native final dlight_t *AllocDlight (Thinker Owner, TVec origin, optional float radius); // can return `nullptr`
native final particle_t *NewParticle (); // can return `nullptr`
native static final FAmbientSound *GetAmbientSound (int Idx); // can return `nullptr`

// iterators
native final iterator AllThinkers (class!Thinker Class, out Thinker Thinker);
native final iterator AllActivePlayers (out BasePlayer Player);
native final iterator PathTraverse (out intercept_t *In, float x1, float y1, float x2, float y2, int flags);
native final iterator RadiusThings (out Entity Ent, TVec Org, float Radius);


//==========================================================================
//
//  Tick
//
//==========================================================================
void Tick (float deltaTime) {
}


//==========================================================================
//
//  ClientTick
//
//==========================================================================
void ClientTick (float DeltaTime) {
}


defaultproperties {
  Role = ROLE_Authority;
  RemoteRole = ROLE_DumbProxy;
}


//==========================================================================
//
//  Hidden Acs class
//
//==========================================================================
/+
class Acs : Thinker native abstract;

transient private Entity Activator;
transient native private line_t *line;
transient private int side;
transient private int number;
transient native private /*VAcsInfo*/void *info;
transient private ubyte State;
//transient private float DelayTime;
transient private int DelayActivationTick;
transient private int WaitValue;
transient native private int *LocalVars;
transient native private ubyte *InstructionPointer;
transient native private /*VAcsObject*/void *ActiveObject;
transient private int HudWidth;
transient private int HudHeight;
transient private name Font;
+/


//==========================================================================
//
//  Hidden Button class
//
//==========================================================================
/+
class Button : Thinker native abstract;
transient private int Side;
transient private ubyte Where;
transient private int SwitchDef;
transient private int Frame;
transient private float Timer;
transient private name DefaultSound;
transient private /*bool*/int UseAgain;
+/
