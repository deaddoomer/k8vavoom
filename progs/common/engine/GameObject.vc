//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class GameObject : Object
	native
	abstract;

const int TICRATE				= 35;

enum
{
	//  Generate the sprite's axes, with sprup straight up in worldspace,
	// and sprright parallel to the viewplane.
	SPR_VP_PARALLEL_UPRIGHT,
	//  Generate the sprite's axes, with sprup straight up in worldspace,
	// and sprright perpendicular to sprorigin.
	SPR_FACING_UPRIGHT,
	//  Generate the sprite's axes, completely parallel to the viewplane.
	SPR_VP_PARALLEL,
	//  Generate the sprite's axes, according to the sprite's world
	// orientation
	SPR_ORIENTED,
	//  Generate the sprite's axes, parallel to the viewplane, but
	// rotated in that plane around the centre according to the sprite
	// entity's roll angle. So sprforward stays the same, but sprright
	// and sprup rotate
	SPR_VP_PARALLEL_ORIENTED,
	//  Generate the sprite's axes, with sprup straight up in worldspace,
	// and sprright parallel to the viewplane and then rotated in that
	// plane around the centre according to the sprite entity's roll
	// angle. So sprforward stays the same, but sprright and sprup rotate
	SPR_VP_PARALLEL_UPRIGHT_ORIENTED
};

//
//  Frame flags:
//  handles maximum brightness (torches, muzzle flare, light sources)
//
enum
{
	FF_FULLBRIGHT	= 0x80,	// flag in thing->frame
	FF_FRAMEMASK	= 0x7f
};

enum
{
	ps_weapon,
	ps_flash,
	NUMPSPRITES
};

//
// Button/action code definitions.
//
enum
{
	BT_ATTACK		= 1,	// Press "Fire".
	BT_USE			= 2,	// Use button, to open doors, activate switches.
	BT_JUMP			= 4,
	BT_ALT_ATTACK	= 8
};

//
// Player states.
//
enum
{
	// Playing or camping.
	PST_LIVE,
	// Dead on the ground, view follows killer.
	PST_DEAD,
	// Ready to restart/respawn???
	PST_REBORN
};

enum
{
	DI_EAST,
	DI_NORTHEAST,
	DI_NORTH,
	DI_NORTHWEST,
	DI_WEST,
	DI_SOUTHWEST,
	DI_SOUTH,
	DI_SOUTHEAST,
	DI_NODIR,
	NUMDIRS
};

enum
{
	RES_OK,
	RES_CRUSHED,
	RES_PASTDEST
};

const float MAXRADIUS			= 32.0;

//
// LineDef attributes.
//
const int
	ML_BLOCKING				= 0x00000001,	// Solid, is an obstacle.
	ML_BLOCKMONSTERS		= 0x00000002,	// Blocks monsters only.
	ML_TWOSIDED				= 0x00000004,	// Backside will not be present at all
	ML_DONTPEGTOP			= 0x00000008,	// upper texture unpegged
	ML_DONTPEGBOTTOM		= 0x00000010,	// lower texture unpegged
	ML_SECRET				= 0x00000020,	// don't map as two sided: IT'S A SECRET!
	ML_SOUNDBLOCK			= 0x00000040,	// don't let sound cross two of these
	ML_DONTDRAW				= 0x00000080,	// don't draw on the automap
	ML_MAPPED				= 0x00000100,	// set if already drawn in automap
	ML_REPEAT_SPECIAL		= 0x00000200,	// special is repeatable
	ML_ADDITIVE				= 0x00000400,	//	Additive translucency.
	ML_MONSTERSCANACTIVATE	= 0x00002000,	//	Monsters (as well as players) can activate the line
	ML_BLOCKPLAYERS			= 0x00004000,	//	Blocks players only.
	ML_BLOCKEVERYTHING		= 0x00008000,	//	Line blocks everything.
	ML_ZONEBOUNDARY			= 0x00010000,	//	Boundary of reverb zones.
	ML_RAILING				= 0x00020000,
	ML_BLOCK_FLOATERS		= 0x00040000,
	ML_CLIP_MIDTEX			= 0x00080000,	// Automatic for every Strife line
	ML_WRAP_MIDTEX			= 0x00100000,
	ML_FIRSTSIDEONLY		= 0x00800000,	// Actiavte only when crossed from front side.
	ML_KEEPDATA				= 0x01000000;	// Keep FloorData or CeilingData after activating them.
											// Used to simulate original Heretic behaviour.

//	These will be converted.
const int 
	ML_PASSUSE_BOOM				= 0x0200,	//	Boom's ML_PASSUSE flag (conflicts with ML_REPEAT_SPECIAL)
	ML_RAILING_STRIFE			= 0x0200,
	ML_BLOCK_FLOATERS_STRIFE	= 0x0400,
	ML_UNKNOWN2_STRIFE			= 0x0800,
	ML_TRANSLUCENT_STRIFE		= 0x1000;

//
// Special activation types
//
enum
{
	SPAC_Cross		= 0x0001,	// when player crosses line
	SPAC_Use		= 0x0002,	// when player uses line
	SPAC_MCross		= 0x0004,	// when monster crosses line
	SPAC_Impact		= 0x0008,	// when projectile hits line
	SPAC_Push		= 0x0010,	// when player pushes line
	SPAC_PCross		= 0x0020,	// when projectile crosses line
	SPAC_UseThrough	= 0x0040,	// SPAC_USE, but passes it through
	//	SPAC_PTouch is remapped as SPAC_Impact | SPAC_PCross
	SPAC_AnyCross	= 0x0080,
	SPAC_MUse		= 0x0100,	// when monster uses line
	SPAC_MPush		= 0x0200	// when monster pushes line
};

//
//  SECTOR PLANE FLAGS
//
enum
{
	SPF_NOBLOCKING		= 1,
	SPF_NOBLOCKSIGHT	= 2,
	SPF_NOBLOCKSHOOT	= 4,
	SPF_ADDITIVE		= 8
};

const int SKY_FROM_SIDE	= 0x8000;

//
//	Sidedef flags.
//
const int
	SDF_ABSLIGHT		= 0x0001;	//	Light is absolute value.

const float ATTN_NONE		= 0.0;
const float ATTN_NORMAL		= 1.0;
const float ATTN_IDLE		= 2.0;
const float ATTN_STATIC		= 3.0;

enum
{
	PT_ADDLINES		= 1,
	PT_ADDTHINGS	= 2,
	PT_EARLYOUT		= 4
};

const float DEFAULT_GRAVITY			= 1225.0;

enum
{
	SEQ_Door,
	SEQ_Platform,
	SEQ_Environment
};

enum
{
	SECSPEC_None,
	SECSPEC_LightPhased,
	SECSPEC_LightSequenceStart,
	SECSPEC_LightSequence,
	SECSPEC_LightSequenceAlt,

	SECSPEC_StairsSpecial1 = 26,
	SECSPEC_StairsSpecial2,

	SECSPEC_WindEastSlow = 40,//40
	SECSPEC_WindEastMedium,
	SECSPEC_WindEastFast,
	SECSPEC_WindNorthSlow,
	SECSPEC_WindNorthMedium,
	SECSPEC_WindNorthFast,
	SECSPEC_WindSouthSlow,
	SECSPEC_WindSouthMedium,
	SECSPEC_WindSouthFast,
	SECSPEC_WindWestSlow,
	SECSPEC_WindWestMedium,//50
	SECSPEC_WindWestFast,

	SECSPEC_LightFlicker = 65,
	SECSPEC_LightStrobeFast,
	SECSPEC_LightStrobeSlow,
	SECSPEC_LightStrobeFastDamage,
	SECSPEC_DamageHellslime,
	SECSPEC_DamageSludge,//70
	SECSPEC_DamageNukage,
	SECSPEC_LightGlow,

	SECSPEC_DoorCloseIn30 = 74,
	SECSPEC_DamageSuperHellslimeExit,
	SECSPEC_LightSyncStrobeSlow,
	SECSPEC_LightSyncStrobeFast,
	SECSPEC_DoorRaiseIn5Minutes,
	SECSPEC_FrictionLow,
	SECSPEC_DamageSuperHellslime,// 80
	SECSPEC_LightFireFlicker,
	SECSPEC_DamageLavaWimpy,
	SECSPEC_DamageLavaHefty,
	SECSPEC_ScrollEastLavaDamage,

	SECSPEC_DamageHazard = 105,

	SECSPEC_DamageInstantDeath = 115,
	SECSPEC_DamageSuperHazard,

	SECSPEC_ScrollCurrent = 118,

	//	These are handled by the engine.
	SECSPEC_LightningOutdoor = 197,
	SECSPEC_LightningIndoor1,
	SECSPEC_Lightningindoor2,
	SECSPEC_Sky2,//200
	SECSPEC_ScrollNorthSlow,
	SECSPEC_ScrollNorthMedium,
	SECSPEC_ScrollNorthFast,
	SECSPEC_ScrollEastSlow,
	SECSPEC_ScrollEastMedium,
	SECSPEC_ScrollEastFast,
	SECSPEC_ScrollSouthSlow,
	SECSPEC_ScrollSouthMedium,
	SECSPEC_ScrollSouthFast,
	SECSPEC_ScrollWestSlow,//210
	SECSPEC_ScrollWestMedium,
	SECSPEC_ScrollWestFast,
	SECSPEC_ScrollNorthWestSlow,
	SECSPEC_ScrollNorthWestMedium,
	SECSPEC_ScrollNorthWestFast,
	SECSPEC_ScrollNorthEastSlow,
	SECSPEC_ScrollNorthEastMedium,
	SECSPEC_ScrollNorthEastFast,
	SECSPEC_ScrollSouthEastSlow,
	SECSPEC_ScrollSouthEastMedium,//220
	SECSPEC_ScrollSouthEastFast,
	SECSPEC_ScrollSouthWestSlow,
	SECSPEC_ScrollSouthWestMedium,
	SECSPEC_ScrollSouthWestFast,
	SECSPEC_ScrollEast5,
	SECSPEC_ScrollEast10,
	SECSPEC_ScrollEast25,
	SECSPEC_ScrollEast30,
	SECSPEC_ScrollEast35,
	SECSPEC_ScrollNorth5,//230
	SECSPEC_ScrollNorth10,
	SECSPEC_ScrollNorth25,
	SECSPEC_ScrollNorth30,
	SECSPEC_ScrollNorth35,
	SECSPEC_ScrollSouth5,
	SECSPEC_ScrollSouth10,
	SECSPEC_ScrollSouth25,
	SECSPEC_ScrollSouth30,
	SECSPEC_ScrollSouth35,
	SECSPEC_ScrollWest5,//240
	SECSPEC_ScrollWest10,
	SECSPEC_ScrollWest25,
	SECSPEC_ScrollWest30,
	SECSPEC_ScrollWest35,

	SECSPEC_Max
};

enum
{
	SECSPEC_BASE_MASK		= 0x00ff,
	SECSPEC_DAMAGE_MASK		= 0x0300,
	SECSPEC_SECRET_MASK		= 0x0400,
	SECSPEC_FRICTION_MASK	= 0x0800,
	SECSPEC_PUSH_MASK		= 0x1000
};

enum
{
	LNSPEC_None,
	LNSPEC_PolyStartLine,
	LNSPEC_PolyRotateLeft,
	LNSPEC_PolyRotateRight,
	LNSPEC_PolyMove,
	LNSPEC_PolyExplicitLine,
	LNSPEC_PolyMoveTimes8,
	LNSPEC_PolyDoorSwing,
	LNSPEC_PolyDoorSlide,
	LNSPEC_LineHorizon,
	LNSPEC_DoorClose,// 10
	LNSPEC_DoorOpen,
	LNSPEC_DoorRaise,
	LNSPEC_DoorLockedRaise,
	LNSPEC_DoorAnimated,
	LNSPEC_Autosave,
	LNSPEC_TransferWallLight,
	LNSPEC_ThingRaise,
	LNSPEC_StartConversation,
	LNSPEC_ThingStop,
	LNSPEC_FloorLowerByValue,// 20
	LNSPEC_FloorLowerToLowest,
	LNSPEC_FloorLowerToNearest,
	LNSPEC_FloorRaiseByValue,
	LNSPEC_FloorRaiseToHighest,
	LNSPEC_FloorRaiseToNearest,
	LNSPEC_StairsBuildDownNormal,
	LNSPEC_StairsBuildUpNormal,
	LNSPEC_FloorRaiseAndCrush,
	LNSPEC_PillarBuild,
	LNSPEC_PillarOpen,// 30
	LNSPEC_StairsBuildDownSync,
	LNSPEC_StairsBuildUpSync,
	LNSPEC_ForceField,
	LNSPEC_ClearForceField,
	LNSPEC_FloorRaiseByValueTimes8,
	LNSPEC_FloorLowerByValueTimes8,
	LNSPEC_FloorMoveToValue,
	LNSPEC_CeilingWaggle,
	LNSPEC_TeleportZombieChanger,
	LNSPEC_CeilingLowerByValue,// 40
	LNSPEC_CeilingRaiseByValue,
	LNSPEC_CeilingCrushAndRaise,
	LNSPEC_CeilingLowerAndCrush,
	LNSPEC_CeilingCrushStop,
	LNSPEC_CeilingCrushRaiseAndStay,
	LNSPEC_FloorCrushStop,
	LNSPEC_CeilingMoveToValue,

	LNSPEC_GlassBreak = 49,

	LNSPEC_ScrollWall = 52,
	LNSPEC_LineSetTextureOffset,
	LNSPEC_SectorChangeFlags,

	LNSPEC_PlatPerpetualRaise = 60,
	LNSPEC_PlatStop,
	LNSPEC_PlatDownWaitUpStay,
	LNSPEC_PlatDownByValueWaitUpStay,
	LNSPEC_PlatUpWaitDownStay,
	LNSPEC_PlatUpByValueWaitDownStay,
	LNSPEC_FloorLowerTimes8Instant,
	LNSPEC_FloorRaiseTimes8Instant,
	LNSPEC_FloorMoveToValueTimes8,
	LNSPEC_CeilingMoveToValueTimes8,
	LNSPEC_Teleport,// 70
	LNSPEC_TeleportNoFog,
	LNSPEC_ThrustThing,
	LNSPEC_DamageThing,
	LNSPEC_TeleportNewMap,
	LNSPEC_TeleportEndGame,
	LNSPEC_TeleportOther,
	LNSPEC_TeleportGroup,
	LNSPEC_TeleportSector,

	LNSPEC_ACSExecute = 80,// 80
	LNSPEC_ACSSuspend,
	LNSPEC_ACSTerminate,
	LNSPEC_ACSLockedExecute,
	LNSPEC_ACSExecuteWithResult,
	LNSPEC_ACSLockedExecuteDoor,

	LNSPEC_PolyRotateLeftOverride = 90,// 90
	LNSPEC_PolyRotateRightOverride,
	LNSPEC_PolyMoveOverride,
	LNSPEC_PolyMoveTimes8Override,
	LNSPEC_PillarBuildCrush,
	LNSPEC_FloorAndCeilingLowerByValue,
	LNSPEC_FloorAndCeilingRaiseByValue,

	LNSPEC_ScrollTextureLeft = 100,// 100
	LNSPEC_ScrollTextureRight,
	LNSPEC_ScrollTextureUp,
	LNSPEC_ScrollTextureDown,

	LNSPEC_LightForceLightning = 109,
	LNSPEC_LightRaiseByValue,// 110
	LNSPEC_LightLowerByValue,
	LNSPEC_LightChangeToValue,
	LNSPEC_LightFade,
	LNSPEC_LightGlow,
	LNSPEC_LightFlicker,
	LNSPEC_LightStrobe,
	LNSPEC_LightStop,

	LNSPEC_ThingDamage = 119,
	LNSPEC_QuakeTremor,// 120
	LNSPEC_LineSetIdentification,

	LNSPEC_ThingMove = 125,

	LNSPEC_ThingSetSpecial = 127,
	LNSPEC_ThrustThingZ,

	LNSPEC_UsePuzzleItem = 129,
	LNSPEC_ThingActivate,// 130
	LNSPEC_ThingDeactivate,
	LNSPEC_ThingRemove,
	LNSPEC_ThingDestroy,
	LNSPEC_ThingProjectile,
	LNSPEC_ThingSpawn,
	LNSPEC_ThingProjectileGravity,
	LNSPEC_ThingSpawnNoFog,
	LNSPEC_FloorWaggle,
	LNSPEC_ThingSpawnFacing,
	LNSPEC_SectorSoundChange,// 140

	LNSPEC_SectorSetPlaneReflection = 159,
	LNSPEC_SectorSet3dFloor,// 160
	LNSPEC_Contents,

	LNSPEC_CeilingGenericCrush2 = 169,
	LNSPEC_SectorSetCeilingScale2,// 170
	LNSPEC_SectorSetFloorScale2,
	LNSPEC_PlaneUpNearestWaitDownStay,
	LNSPEC_NoiseAlert,
	LNSPEC_SendToCommunicator,
	LNSPEC_ThingProjectileIntercept,
	LNSPEC_ThingChangeTID,
	LNSPEC_ThingHate,
	LNSPEC_ThingProjectileAimed,
	LNSPEC_ChangeSkill,
	LNSPEC_ThingSetTranslation,// 180
	LNSPEC_PlaneAlign,
	LNSPEC_LineMirror,
	LNSPEC_LineAlignCeiling,
	LNSPEC_LineAlignFloor,
	LNSPEC_SectorSetRotation,
	LNSPEC_SectorSetCeilingPanning,
	LNSPEC_SectorSetFloorPanning,
	LNSPEC_SectorSetCeilingScale,
	LNSPEC_SectorSetFloorScale,
	LNSPEC_StaticInit,// 190
	LNSPEC_SetPlayerProperty,
	LNSPEC_CeilingLowerToHighestFloor,
	LNSPEC_CeilingLowerInstant,
	LNSPEC_CeilingRaiseInstant,
	LNSPEC_CeilingCrushRaiseAndStayA,
	LNSPEC_CeilingCrushAndRaiseA,
	LNSPEC_CeilingCrushAndRaiseSilentA,
	LNSPEC_CeilingRaiseByValueTimes8,
	LNSPEC_CeilingLowerByValueTimes8,
	LNSPEC_FloorGeneric,// 200
	LNSPEC_CeilingGeneric,
	LNSPEC_DoorGeneric,
	LNSPEC_PlatGeneric,
	LNSPEC_StairsGeneric,
	LNSPEC_CeilingGenericCrush,
	LNSPEC_PlatDownWaitUpStayLip,
	LNSPEC_PlatPerpetualRaiseLip,
	LNSPEC_LineTranslucent,
	LNSPEC_TransferHeights,
	LNSPEC_TransferFloorLight,// 210
	LNSPEC_TransferCeilingLight,
	LNSPEC_SectorSetColour,
	LNSPEC_SectorSetFade,
	LNSPEC_SectorSetDamage,
	LNSPEC_TeleportLine,
	LNSPEC_SectorSetGravity,
	LNSPEC_StairsBuildUpDoom,
	LNSPEC_SectorSetWind,
	LNSPEC_SectorSetFriction,
	LNSPEC_SectorSetCurrent,// 220
	LNSPEC_ScrollTextureBoth,
	LNSPEC_ScrollTextureModel,
	LNSPEC_ScrollFloor,
	LNSPEC_ScrollCeiling,
	LNSPEC_ScrollTextureOffsets,
	LNSPEC_ACSExecuteAlways,
	LNSPEC_PointPushSetForce,
	LNSPEC_FloorRaiseToNearestChange,
	LNSPEC_ThingSetGoal,
	LNSPEC_FloorRaiseByValueChangeTex,// 230
	LNSPEC_PlatToggle,
	LNSPEC_LightStrobeDoom,
	LNSPEC_LightMinNeighbor,
	LNSPEC_LightMaxNeighbor,
	LNSPEC_FloorTransferTrigger,
	LNSPEC_FloorTransferNumeric,
	LNSPEC_ChangeCamera,
	LNSPEC_FloorRaiseToLowestCeiling,
	LNSPEC_FloorRaiseByValueChange,
	LNSPEC_FloorRaiseByTexture,// 240
	LNSPEC_FloorLowerToLowestChange,
	LNSPEC_FloorLowerToHighest,
	LNSPEC_ExitNormal,
	LNSPEC_ExitSecret,
	LNSPEC_ElevatorRaiseToNearest,
	LNSPEC_ElevatorMoveToFloor,
	LNSPEC_ElevatorLowerToNearest,
	LNSPEC_HealThing,
	LNSPEC_DoorCloseWaitOpen,
	LNSPEC_FloorDonut,// 250
	LNSPEC_FloorAndCeilingLowerRaise,
	LNSPEC_CeilingRaiseToNearest,
	LNSPEC_CeilingLowerToLowest,
	LNSPEC_CeilingLowerToFloor,
	LNSPEC_CeilingCrushRaiseAndStaySilentA,

	LNSPEC_Max
};

//==========================================================================
//
//  Level
//
//==========================================================================

//
// LineDef
//
struct line_t : TPlane
{
	// Vertices, from v1 to v2.
	TVec *v1;
	TVec *v2;

	// Precalculated v2 - v1 for side checking.
	TVec __dir;

	// Animation related.
	int			flags;
	int			SpacFlags;

	// Visual appearance: SideDefs.
	//  sidenum[1] will be -1 if one sided
	int sidenum[2];

	// Neat. Another bounding box, for the extent
	//  of the LineDef.
	float bbox[4];

	// To aid move clipping.
	int __slopetype;

	// Front and back sector.
	// Note: redundant? Can be retrieved from SideDefs.
	sector_t *frontsector;
	sector_t *backsector;

	// if == validcount, already checked
	int validcount;

	float alpha;

	int special;
	int arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;

	int			LineTag;
	int			HashFirst;
	int			HashNext;
};

//
// The SideDef.
//
struct side_t
{
	//	Add this to the calculated texture column
	float		TopTextureOffset;
	float		BotTextureOffset;
	float		MidTextureOffset;

	//	Add this to the calculated texture top
	float		TopRowOffset;
	float		BotRowOffset;
	float		MidRowOffset;

	//	Texture indices. We do not maintain names here.
	int			TopTexture;
	int			BottomTexture;
	int			MidTexture;

	//	Sector the SideDef is facing.
	sector_t*	Sector;

	int			LineNum;

	int			Flags;

	int			Light;
};

struct sec_plane_t : TPlane
{
	float		minz;
	float		maxz;

	//	Use for wall texture mapping.
	float		TexZ;

	int			pic;

	float		xoffs;
	float		yoffs;

	float		XScale;
	float		YScale;

	float		Angle;

	float		BaseAngle;
	float		BaseYOffs;

	int			flags;
	float		Alpha;
	float		MirrorAlpha;

	int			LightSourceSector;

	Entity		SkyBox;
};

struct sec_params_t
{
	int			lightlevel;
	int			LightColour;
	int			Fade;
	int			contents;
};

struct sec_region_t
{
	//  Linked list of regions in bottom to top order
	sec_region_t*	prev;
	sec_region_t*	next;

	//  Planes
	sec_plane_t*	floor;
	sec_plane_t*	ceiling;

	sec_params_t*	params;
	line_t*			extraline;
};

//
// phares 3/14/98
//
// Sector list node showing all sectors an object appears in.
//
// There are two threads that flow through these nodes. The first thread
// starts at TouchingThingList in a sector_t and flows through the SNext
// links to find all mobjs that are entirely or partially in the sector.
// The second thread starts at TouchingSectorList in a VEntity and flows
// through the TNext links to find all sectors a thing touches. This is
// useful when applying friction or push effects to sectors. These effects
// can be done as thinkers that act upon all objects touching their sectors.
// As an mobj moves through the world, these nodes are created and
// destroyed, with the links changed appropriately.
//
// For the links, NULL means top or end of list.
//
struct msecnode_t
{
	sector_t*		Sector;	// a sector containing this object
	Entity			Thing;	// this object
	msecnode_t*		TPrev;	// prev msecnode_t for this thing
	msecnode_t*		TNext;	// next msecnode_t for this thing
	msecnode_t*		SPrev;	// prev msecnode_t for this sector
	msecnode_t*		SNext;	// next msecnode_t for this sector
};

//
//  The SECTORS record, at runtime.
//  Stores things/mobjs.
//
struct sector_t
{
	sec_plane_t		floor;
	sec_plane_t		ceiling;
	sec_params_t	params;

	sec_region_t*	topregion;	//  Highest region
	sec_region_t*	botregion;	//  Lowest region

	sector_t	*deepref; // deep water hack

	int				special;
	int				tag;
	int				HashFirst;
	int 			HashNext;

	float			skyheight;

	// stone, metal, heavy, etc...
	int				seqType;

	// mapblock bounding box for height changes
	int				blockbox[4];

	// origin for any sounds played by the sector
	TVec			soundorg;

	// if == validcount, already checked
	int				validcount;

	// list of subsectors in sector
	// used to check if client can see this sector (it needs to be updated)
	void*			__subsectors;

	//	List of things in sector.
	Entity			ThingList;
	msecnode_t*		TouchingThingList;

	int				linecount;
	line_t**		lines;	// [linecount] size

	//	Boom's fake floors.
	sector_t*		heightsec;
	void*			fakefloorinfo;		//	Info for rendering.

	//	Flags.
	bool			bHasExtrafloors;	//	This sector has extrafloors.
	bool			bExtrafloorSource;	//	This sector is a source of an extrafloor.
	bool			bTransferSource;	//	Source of an heightsec or transfer light.
	bool			bFakeFloorOnly;		//	When used as heightsec in R_FakeFlat, only copies floor
	bool			bClipFakePlanes;	//	As a heightsec, clip planes to target sector's planes
	bool			bNoFakeLight;		//	heightsec does not change lighting
	bool			bIgnoreHeightSec;	//	heightsec is only for triggering sector actions
	bool			bUnderWater;		//	Sector is underwater
	bool			bSilent;			//	Actors don't make noise in this sector.
	bool			bNoFallingDamage;	//	No falling damage in this sector.
	bool			bFakeCeilingOnly;		//	When used as heightsec in R_FakeFlat, only copies ceiling

	// 0 = untraversed, 1,2 = sndlines -1
	int				soundtraversed;

	// thing that made a sound (or null)
	Entity			SoundTarget;

	// Thinker for reversable actions
	Thinker			FloorData;
	Thinker			CeilingData;
	Thinker			LightingData;
	Thinker			AffectorData;

	//	Sector action triggers.
	Entity			ActionList;

	int				Damage;

	float			Friction;
	float			MoveFactor;
	float			Gravity;

	int				Sky;

	int				Zone;
};

//
//  Polyobj data
//
struct polyobj_t
{
	int				__numsegs;
	void*			__segs;
	TVec			startSpot;
	void*			__originalPts;	// used as the base for the rotations
	void*			__prevPts;		// use to restore the old point values
	float			angle;
	int				tag;			// reference tag assigned in HereticEd
	int				__bbox[4];
	int				validcount;
	bool			bCrush;			// should the polyobj attempt to crush mobjs?
	bool			bHurtOnTouch;
	int				seqType;
	subsector_t*	__subsector;
	Thinker			SpecialData;	// pointer a thinker, if the poly is moving
};

//
//  A SubSector.
//  References a Sector. Basically, this is a list of LineSegs, indicating
// the visible walls that define (all or some) sides of a convex BSP leaf.
//
struct subsector_t
{
	sector_t*	sector;
	void*		__seclink;
	int			__numlines;
	int			__firstline;
	polyobj_t*	__poly;

	void*		__parent;
	int			__VisFrame;
	int			__SkyVisFrame;

	sector_t* __deepref;

	int			__dlightbits;
	int				__dlightframe;

	void*		__regions;
};

//
// Map thing definition with initialised fields for global use.
//
struct mthing_t
{
	int			tid;
	float		x;
	float		y;
	float		height;
	int			angle;
	int			type;
	int			options;
	int			SkillClassFilter;
	int			special;
	int			arg1;
	int			arg2;
	int			arg3;
	int			arg4;
	int			arg5;
};

//
//	Strife conversation scripts
//

struct RogueConChoice
{
	int		GiveItem;	//	Item given on success
	int		NeedItem1;	//	Required item 1
	int		NeedItem2;	//	Required item 2
	int		NeedItem3;	//	Required item 3
	int		NeedAmount1;//	Amount of item 1
	int		NeedAmount2;//	Amount of item 2
	int		NeedAmount3;//	Amount of item 3
	string	Text;		//	Text of the answer
	string	TextOK;		//	Message displayed on success
	int		Next;		//	Dialog to go on success, negative values to go
						// here immediately
	int		Objectives;	//	Mission objectives, LOGxxxx lump
	string	TextNo;		//	Message displayed on failure (player doesn't
						// have needed thing, it haves enough health/ammo,
						// item is not ready, quest is not completed)
};

struct RogueConSpeech
{
	int		SpeakerID;	//	Type of the object (MT_xxx)
	int		DropItem;	//	Item dropped when killed
	int		CheckItem1;	//	Item 1 to check for jump
	int		CheckItem2;	//	Item 2 to check for jump
	int		CheckItem3;	//	Item 3 to check for jump
	int		JumpToConv;	//	Jump to conversation if have certain item(s)
	string	Name;		//	Name of the character
	name	Voice;		//	Voice to play
	name	BackPic;	//	Picture of the speaker
	string	Text;		//	Message
	RogueConChoice Choices[5];	//	Choices
};

//==========================================================================
//
//  Other stuff
//
//==========================================================================

struct opening_t
{
	float			top;
	float			bottom;
	float			range;
	float			lowfloor;
	float			highceiling;
	sec_plane_t*	floor;
	sec_plane_t*	ceiling;
	sec_plane_t*	lowfloorplane;
	sec_plane_t*	highceilingplane;
	opening_t*		next;
};

struct intercept_t
{
	float			frac;	// along trace line
	bool			bIsALine;
	Entity			Thing;
	line_t*			line;
};

struct VAnimDoorDef
{
	int			Texture;
	name		OpenSound;
	name		CloseSound;
	int			NumFrames;
	int*		Frames;
};

struct VSplashInfo
{
	name		Name;

	class		SmallClass;
	float		SmallClip;
	name		SmallSound;

	class		BaseClass;
	class		ChunkClass;
	float		ChunkXVelMul;
	float		ChunkYVelMul;
	float		ChunkZVelMul;
	float		ChunkBaseZVel;
	name		Sound;
	bool		bNoAlert;
};

struct VTerrainInfo
{
	name		Name;
	name		Splash;
	bool		bLiquid;
	bool		bAllowProtection;
	float		FootClip;
	int			DamageTimeMask;
	int			DamageAmount;
	name		DamageType;
	float		Friction;
	float		MoveFactor;
	float		StepVolume;
	float		WalkingStepTime;
	float		RunningStepTime;
	name		LeftStepSounds;
	name		RightStepSounds;
};

struct LockGroup
{
	array<class>		AnyKeyList;
};

struct LockDef
{
	array<LockGroup>	Locks;
	string				Message;
	string				RemoteMessage;
	int					MapColour;
	name				LockedSound;
};

struct dlight_t
{
	TVec		origin;
	float		radius;
	float		die;		// stop lighting after this time
	float		decay;		// drop this each second
	float		minlight;	// don't add when contributing less
	int			key;
	int			colour;
};

struct particle_t
{
	TVec		org;
	int			colour;
	float		Size;
	particle_t*	next;
	TVec		vel;
	TVec		accel;
	float		die;
	int			type;
	float		ramp;
	float		gravity;
};

defaultproperties
{
}
