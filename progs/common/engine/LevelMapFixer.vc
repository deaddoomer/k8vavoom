// texture use types
enum {
  TEXTYPE_Any,
  TEXTYPE_WallPatch,
  TEXTYPE_Wall,
  TEXTYPE_Flat,
  TEXTYPE_Overload,
  TEXTYPE_Sprite,
  TEXTYPE_SkyMap,
  TEXTYPE_Skin,
  TEXTYPE_Pic,
  TEXTYPE_Autopage,
  TEXTYPE_Null,
  TEXTYPE_FontChar,
};


//==========================================================================
//
//  LdrSectorOffsetFloor
//
//==========================================================================
private static final void LdrSectorOffsetFloor (sector_t *sec, float ofs) {
  if (!sec) return;
  sec->floor.TexZ += ofs;
  sec->floor.minz += ofs;
  sec->floor.maxz += ofs;
}


//==========================================================================
//
//  LdrSectorOffsetCeiling
//
//==========================================================================
private static final void LdrSectorOffsetCeiling (sector_t *sec, float ofs) {
  if (!sec) return;
  sec->ceiling.TexZ += ofs;
  sec->ceiling.minz += ofs;
  sec->ceiling.maxz += ofs;
}


//==========================================================================
//
//  KnownMapBugFixer
//
//  based on GZDoom code; tnx!
//
//==========================================================================
void KnownMapBugFixer () {
  // Doom: E1M4
  if (MapHashMD5 == "5b26545ff21b051ca06d389ce535684c") {
    // missing textures
    Sides[Lines[693].sidenum[1]].TopTexture = LdrTexNumForName("BROWN1", TEXTYPE_Wall);
    // fix HOM errors with sectors too low
    LdrSectorOffsetFloor(&Sectors[9], 8);
    LdrSectorOffsetFloor(&Sectors[105], 8);
    LdrSectorOffsetFloor(&Sectors[132], 8);
    LdrSectorOffsetFloor(&Sectors[137], 8);
    printwarn("MAPFIX: Doom: E1M4 detected and fixed");
    return;
  }

  // Doom: E2M2
  if (MapHashMD5 == "a24fe135d5b6fd427fe27bef89717a65") {
    // missing textures
    Sides[Lines[947].sidenum[1]].TopTexture = LdrTexNumForName("BROWN1", TEXTYPE_Wall);
    Sides[Lines[1596].sidenum[1]].TopTexture = LdrTexNumForName("WOOD1", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom: E2M2 detected and fixed");
    return;
  }

  // Doom: E2M4
  if (MapHashMD5 == "1bc04d646b32d3a3e411daf3c1a38ff8") {
    // missing textures
    Sides[Lines[551].sidenum[1]].TopTexture = LdrTexNumForName("PIPE4", TEXTYPE_Wall);
    Sides[Lines[865].sidenum[1]].BottomTexture = LdrTexNumForName("STEP5", TEXTYPE_Wall);
    Sides[Lines[1062].sidenum[0]].TopTexture = LdrTexNumForName("GSTVINE1", TEXTYPE_Wall);
    Sides[Lines[1071].sidenum[0]].TopTexture = LdrTexNumForName("MARBLE1", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom: E2M4 detected and fixed");
    return;
  }

  // Doom: E2M5
  if (MapHashMD5 == "99c580ad8fabe923cab485cb7f3c5e5d") {
    // missing textures
    Sides[Lines[590].sidenum[1]].TopTexture = LdrTexNumForName("GRAYBIG", TEXTYPE_Wall);
    Sides[Lines[590].sidenum[0]].BottomTexture = LdrTexNumForName("BROWN1", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom: E2M5 detected and fixed");
    return;
  }

  // Doom: E2M6
  if (MapHashMD5 == "3838ab29292587a7ee3ca71e7040868d") {
    // missing textures
    Sides[Lines[1091].sidenum[1]].TopTexture = LdrTexNumForName("COMPSPAN", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom: E2M6 detected and fixed");
    return;
  }

  // Doom: E2M7
  if (MapHashMD5 == "8590f489879870c098cd7029c3187159") {
    // missing textures
    Sides[Lines[1286].sidenum[0]].BottomTexture = LdrTexNumForName("SHAWN2", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom: E2M7 detected and fixed");
    return;
  }

  // Doom: E2M9
  if (MapHashMD5 == "8a6399faaa2e68649d4e4b16642074be") {
    // missing textures
    Sides[Lines[121].sidenum[1]].TopTexture = LdrTexNumForName("SW1LION", TEXTYPE_Wall);
    Sides[Lines[123].sidenum[1]].TopTexture = LdrTexNumForName("GSTONE1", TEXTYPE_Wall);
    Sides[Lines[140].sidenum[1]].TopTexture = LdrTexNumForName("GSTONE1", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom: E2M9 detected and fixed");
    return;
  }

  // Doom: E3M7
  if (MapHashMD5 == "5ac51ca9f1b57d4538049422a5e37291") {
    // missing textures
    Sides[Lines[971].sidenum[1]].TopTexture = LdrTexNumForName("SP_HOT1", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom: E3M7 detected and fixed");
    return;
  }

  // Doom: E4M1
  if (MapHashMD5 == "da0c8281ac70eec31127c228bcd7fe2c") {
    // missing textures
    Sides[Lines[470].sidenum[0]].TopTexture = LdrTexNumForName("GSTONE1", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom: E4M1 detected and fixed");
    return;
  }

  // Doom: E4M4
  if (MapHashMD5 == "aaecadd4d97970aff702d86fafac7d17") {
    // missing textures
    Sides[Lines[427].sidenum[1]].TopTexture = LdrTexNumForName("BROWNHUG", TEXTYPE_Wall);
    Sides[Lines[558].sidenum[1]].TopTexture = LdrTexNumForName("BROWNHUG", TEXTYPE_Wall);
    Sides[Lines[567].sidenum[0]].TopTexture = LdrTexNumForName("BROWNHUG", TEXTYPE_Wall);
    Sides[Lines[572].sidenum[0]].TopTexture = LdrTexNumForName("BROWNHUG", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom: E4M4 detected and fixed");
    return;
  }

  // Doom II: MAP02 (normal and BFG edition)
  if (MapHashMD5 == "ab24ae6e2cb13cbdd04600a4d37f9189" || MapHashMD5 == "1ec0af1e3985650f0c9000319c599d0c") {
    // missing textures
    Sides[Lines[327].sidenum[0]].BottomTexture = LdrTexNumForName("STONE4", TEXTYPE_Wall);
    Sides[Lines[328].sidenum[0]].BottomTexture = LdrTexNumForName("STONE4", TEXTYPE_Wall);
    Sides[Lines[338].sidenum[0]].BottomTexture = LdrTexNumForName("STONE4", TEXTYPE_Wall);
    Sides[Lines[339].sidenum[0]].BottomTexture = LdrTexNumForName("STONE4", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom II: MAP02 detected and fixed");
    return;
  }

  // Doom II: MAP04
  if (MapHashMD5 == "cec791136a83eec4b91d39718bdf9d82") {
    // missing textures
    Sides[Lines[456].sidenum[1]].TopTexture = LdrTexNumForName("SUPPORT3", TEXTYPE_Wall);
    Sides[Lines[108].sidenum[0]].TopTexture = LdrTexNumForName("STONE", TEXTYPE_Wall);
    Sides[Lines[109].sidenum[0]].TopTexture = LdrTexNumForName("STONE", TEXTYPE_Wall);
    Sides[Lines[110].sidenum[0]].TopTexture = LdrTexNumForName("STONE", TEXTYPE_Wall);
    Sides[Lines[111].sidenum[0]].TopTexture = LdrTexNumForName("STONE", TEXTYPE_Wall);
    Sides[Lines[127].sidenum[0]].TopTexture = LdrTexNumForName("STONE", TEXTYPE_Wall);
    Sides[Lines[128].sidenum[0]].TopTexture = LdrTexNumForName("STONE", TEXTYPE_Wall);
    // remove erroneous blue keycard pickup ambush sector tags (nearby viewing windows, and the lights)
    Sectors[19].tag = 0;
    Sectors[20].tag = 0;
    Sectors[23].tag = 0;
    Sectors[28].tag = 0;
    Sectors[33].tag = 0;
    Sectors[34].tag = 0;
    Sectors[83].tag = 0;
    Sectors[85].tag = 0;
    printwarn("MAPFIX: Doom II: MAP04 detected and fixed");
    return;
  }

  // Doom II: MAP05
  if (MapHashMD5 == "9e061ad7fbcd7fad968c976cb4aa3b9d") {
    // fix bug with opening westmost door in door hallway - incorrect sector tagging - see doomwiki.org for more info
    Sectors[4].tag = 0;
    Sectors[153].tag = 0;
    printwarn("MAPFIX: Doom II: MAP05 detected and fixed");
    return;
  }

  // Doom II: MAP08
  if (MapHashMD5 == "66c46385eb1a23d60839d1532522076b") {
    // missing texture
    Sides[Lines[101].sidenum[1]].TopTexture = LdrTexNumForName("BRICK7", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom II: MAP08 detected and fixed");
    return;
  }

  // Doom II: MAP14
  if (MapHashMD5 == "5bda34da60c0530794cc1ea2da017976") {
    // missing texture
    Sides[Lines[1259].sidenum[1]].TopTexture = LdrTexNumForName("BSTONE2", TEXTYPE_Wall);
    Sides[Lines[1305].sidenum[1]].TopTexture = LdrTexNumForName("BSTONE2", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom II: MAP14 detected and fixed");
    return;
  }

  // Doom II: MAP15
  if (MapHashMD5 == "1a540ba717bf9ec85f8522594c352f2a") {
    Sectors[147].special = 0; // this secret is possible, but meh...
    printwarn("MAPFIX: Doom II: MAP15 detected and fixed");
    return;
  }

  // Doom II: MAP18
  if (MapHashMD5 == "0d491365c1b88b7d1b603890100dd03e") {
    // missing texture
    Sides[Lines[451].sidenum[0]].MidTexture = LdrTexNumForName("METAL", TEXTYPE_Wall);
    Sides[Lines[459].sidenum[0]].MidTexture = LdrTexNumForName("METAL", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom II: MAP18 detected and fixed");
    return;
  }

  // Doom II: MAP19
  if (MapHashMD5 == "b5506b1e8f2fc272ad0c77b9e0df5491") {
    // missing texture
    Sides[Lines[355].sidenum[1]].TopTexture = LdrTexNumForName("STONE2", TEXTYPE_Wall);
    Sides[Lines[736].sidenum[0]].TopTexture = LdrTexNumForName("SLADWALL", TEXTYPE_Wall);
    printwarn("MAPFIX: Doom II: MAP19 detected and fixed");
    return;
  }

  // Doom II: MAP21
  if (MapHashMD5 == "ebdac00e9d25d884b2c8f4b1f0390539") {
    // push ceiling down in glitchy sectors above the stair switches
    LdrSectorOffsetCeiling(&Sectors[50], -56);
    LdrSectorOffsetCeiling(&Sectors[54], -56);
    printwarn("MAPFIX: Doom II: MAP21 detected and fixed");
    return;
  }

  // Doom II: MAP27
  if (MapHashMD5 == "110f84de041052b59307faf0293e6bc0") {
    // missing texture
    Sides[Lines[582].sidenum[1]].TopTexture = LdrTexNumForName("ZIMMER3", TEXTYPE_Wall);
    Sectors[93].special = 0; // this secret is possible, but meh...
    printwarn("MAPFIX: Doom II: MAP27 detected and fixed");
    return;
  }

  // Doom II: MAP29
  if (MapHashMD5 == "20251eda21b2f2ecf6ff5b8bbc00b26c") {
    // missing textures on teleporters
    for (int i = 0; i < 4; ++i) {
      Sides[Lines[405+i].sidenum[1]].BottomTexture = LdrTexNumForName("SUPPORT3", TEXTYPE_Wall);
      Sides[Lines[516+i].sidenum[1]].BottomTexture = LdrTexNumForName("SUPPORT3", TEXTYPE_Wall);
      Sides[Lines[524+i].sidenum[1]].BottomTexture = LdrTexNumForName("SUPPORT3", TEXTYPE_Wall);
      Sides[Lines[1146+i].sidenum[1]].BottomTexture = LdrTexNumForName("SUPPORT3", TEXTYPE_Wall);
      Sides[Lines[1138+i].sidenum[1]].BottomTexture = LdrTexNumForName("SUPPORT3", TEXTYPE_Wall);
    }
    printwarn("MAPFIX: Doom II: MAP29 detected and fixed");
    return;
  }

  // TNT:Evilution: MAP15
  if (MapHashMD5 == "dfc18b92bf3e8142b8684ecd8bd2ef06") {
    // raise up sector with its counterpart so 100% kills becomes possible
    Sectors[330].tag = 11;
    printwarn("MAPFIX: TNT:Evilution: MAP15 detected and fixed");
    return;
  }

  // TNT:Evilution: MAP29
  if (MapHashMD5 == "2c4a3356c5eb3526d2c72a4aa4b18a36") {
    // remove mancubus who always gets stuck in teleport tunnel, preventing 100% kills on HMP
    Things[405].options = 0;
    Things[17].SkillClassFilter &= ~(0x03|0x04|0x18);
    printwarn("MAPFIX: TNT:Evilution: MAP29 detected and fixed");
    return;
  }

  // TNT:Evilution: MAP31
  if (MapHashMD5 == "a53ae580a4af2b5d0b0893f86914781e") {
    // the famous missing yellow key...
    Things[470].options |= 0x07;
    Things[470].SkillClassFilter |= 0x03|0x04|0x18;
    printwarn("MAPFIX: TNT:Evilution: MAP31 detected and fixed");
    return;
  }

  // Plutonia: MAP26
  if (MapHashMD5 == "abc4eb5a1535eccd0061ad14f3547908") {
    Sectors[156].special = 0;
    printwarn("MAPFIX: Plutonia: MAP26 detected and fixed");
    return;
  }

  // Nerve: MAP04
  if (MapHashMD5 == "ff635fb9a2f076566299910f8c78f707") {
    Sectors[868].special = 0;
    printwarn("MAPFIX: Nerve: MAP04 detected and fixed");
    return;
  }

  // Heretic: E1M2
  if (MapHashMD5 == "d94587625ba779644d58151a87897cf1") {
    // missing textures
    Sides[Lines[477].sidenum[1]].TopTexture = LdrTexNumForName("MOSSRCK1", TEXTYPE_Wall);
    Sides[Lines[478].sidenum[1]].TopTexture = LdrTexNumForName("MOSSRCK1", TEXTYPE_Wall);
    Sides[Lines[479].sidenum[1]].TopTexture = LdrTexNumForName("MOSSRCK1", TEXTYPE_Wall);
    Sides[Lines[1057].sidenum[0]].TopTexture = LdrTexNumForName("MOSSRCK1", TEXTYPE_Wall);
    printwarn("MAPFIX: Heretic: E1M2 detected and fixed");
    return;
  }

  // Heretic: E1M3
  if (MapHashMD5 == "add0fac41afb0b3c9b9f3c0006f93805") {
    // Broken door between the hallway that leads to a Torch
    // and the passage that has a Bag of Holding at its end
    LdrSectorOffsetFloor(&Sectors[86], -128);
    LdrSectorOffsetCeiling(&Sectors[86], -128);
    printwarn("MAPFIX: Heretic: E1M3 detected and fixed");
    return;
  }

  // Heretic: E1M4
  if (MapHashMD5 == "916318d8b06dac2d83424b23e4b66531") {
    // wrong sector offsets
    LdrSectorOffsetCeiling(&Sectors[0], 8);
    LdrSectorOffsetCeiling(&Sectors[1], 8);
    LdrSectorOffsetCeiling(&Sectors[2], 8);
    LdrSectorOffsetCeiling(&Sectors[3], 8);
    LdrSectorOffsetCeiling(&Sectors[4], 8);
    LdrSectorOffsetCeiling(&Sectors[6], 8);
    LdrSectorOffsetFloor(&Sectors[6], 8);
    LdrSectorOffsetCeiling(&Sectors[17], 8);
    // yellow key door
    LdrSectorOffsetFloor(&Sectors[284], -8);
    LdrSectorOffsetCeiling(&Sectors[284], -8);
    // missing textures
    Sides[Lines[490].sidenum[1]].BottomTexture = LdrTexNumForName("GRSTNPB", TEXTYPE_Wall);
    Sides[Lines[722].sidenum[0]].BottomTexture = LdrTexNumForName("WOODWL", TEXTYPE_Wall);
    Sides[Lines[911].sidenum[0]].BottomTexture = LdrTexNumForName("WOODWL", TEXTYPE_Wall);
    Sides[Lines[1296].sidenum[0]].BottomTexture = LdrTexNumForName("WOODWL", TEXTYPE_Wall);
    printwarn("MAPFIX: Heretic: E1M4 detected and fixed");
    return;
  }

  // Heretic: E2M2
  if (MapHashMD5 == "397a0e17a39542e4e8294e156fab0502") {
    // missing green door statues on easy and hard difficulties
    Things[17].options |= 0x07;
    Things[17].SkillClassFilter |= 0x03|0x04|0x18;
    Things[18].options |= 0x07;
    Things[18].SkillClassFilter |= 0x03|0x04|0x18;
    printwarn("MAPFIX: Heretic: E2M2 detected and fixed");
    return;
  }

  // Heretic: E3M6
  if (MapHashMD5 == "ca3773ed313e8899311f3dd0ca195a68") {
    // quartz flask outside of map
    Things[373].options = 0;
    Things[373].SkillClassFilter &= ~(0x03|0x04|0x18);
    // missing wall torch on hard difficulty
    Things[448].options |= 0x07;
    Things[448].SkillClassFilter |= 0x03|0x04|0x18;
    // missing textures
    Sides[Lines[343].sidenum[0]].TopTexture = LdrTexNumForName("MOSSRCK1", TEXTYPE_Wall);
    Sides[Lines[370].sidenum[0]].TopTexture = LdrTexNumForName("MOSSRCK1", TEXTYPE_Wall);
    printwarn("MAPFIX: Heretic: E2M2 detected and fixed");
    return;
  }

  // Heretic: E4M7
  if (MapHashMD5 == "5e3fcfde78310bb89f92b1626a47d0ad") {
    // missing textures
    Sides[Lines[1274].sidenum[0]].TopTexture = LdrTexNumForName("CSTLRCK", TEXTYPE_Wall);
    Sides[Lines[1277].sidenum[1]].TopTexture = LdrTexNumForName("CSTLRCK", TEXTYPE_Wall);
    Sides[Lines[1278].sidenum[0]].TopTexture = LdrTexNumForName("CSTLRCK", TEXTYPE_Wall);
    printwarn("MAPFIX: Heretic: E4M7 detected and fixed");
    return;
  }


  // Winter's Fury
  if (MapHashMD5 == "369034113c5315b17cadfb11f730a571" ||
      MapHashMD5 == "355695fadf065955f62ea993e942c35d" ||
      MapHashMD5 == "253c286d243fdd6fae882b657b9ffc99" ||
      MapHashMD5 == "2842ece024c5c7905f637c616fefc36e" ||
      MapHashMD5 == "c3cd90a4d470b5413849e6341f245737")
  {
//#ifdef CLIENT
    SetCvar('r_max_portal_depth', 1);
//#endif
    bForceAllowSeveralPObjInSubsector = true;
    printwarn("MAPFIX: Winter's Fury: reduced portals to 1, enabled pobj hack");
    return;
  }

  // Skulldash EE first map and credits map, too many static lights, don't precalc
  if (MapHashMD5 == "42389d0173031f6ffc8df2919d34fe16" ||
      MapHashMD5 == "a8d2a336f0b8e77a84be9460743be70d") {
//#ifdef CLIENT
    if (MapHashMD5 == "42389d0173031f6ffc8df2919d34fe16") {
      // hub map
      bForceNoTexturePrecache = true;
      bForceNoPrecalcStaticLights = true;
    }
    //ldr_extrasamples_override = 0;
//#endif
    printwarn("MAPFIX: SkullDash EE: disabled precalculated static lightmaps and texture precaching");
    return;
  }

  // dmp2017 hub map
  if (MapHashMD5 == "1c5f5371b392663e70c8c7b94ceeb82b") {
    bForceNoTexturePrecache = true;
    bForceNoPrecalcStaticLights = true;
  }
  //ldr_extrasamples_override = 0;

  // Discharge! map04
  // k8: actually, is looks better with dynamic lights:
  //     there is a bug in static lightmap calculation that leaves unlit regions, and
  //     for some mysterious reason dynamic lighting doesn't have it.
  //     it would be event better when i'll do proper dynlight caching system
  /*
  if (MapHashMD5 == "d28e3374cd4d2a17a00bfe49fb6d48d8")
  {
    bConvertSectorLightsToStatic = true;
    printwarn("MAPFIX: Discharge MAP04: made sector lights static");
    return;
  }
  */

  // DTWID: E1M2
  if (MapHashMD5 == "27927a9ee6c29c38cd8fb42f54f16efa") {
    // missing textures
    Sides[Lines[82].sidenum[1]].TopTexture = LdrTexNumForName("STARTAN3", TEXTYPE_Wall);
    printwarn("MAPFIX: DTWID: E1M2 detected and fixed");
    return;
  }

  // Decade
  if (MapHashMD5 == "77d1fc9f463239d3f117767854303241") {
    // missing textures
    Sides[Lines[9420].sidenum[1]].BottomTexture = LdrTexNumForName("SILVER1", TEXTYPE_Wall);
    printwarn("MAPFIX: Decade detected and fixed");
    return;
  }

  // Grove
  if (MapHashMD5 == "076a4ff1c79459308886560338743eab") {
    bForceNoDeepwaterFix = true;
    //bForceNoFloorFloodfillFix = true;
    //bForceNoCeilingFloodfillFix = true;
    printwarn("MAPFIX: Grove detected and fixed");
    return;
  }

  // Grove alt
  if (MapHashMD5 == "b5733f760836dfc2e7c9745f80f90e79") {
    bForceNoDeepwaterFix = true;
    //bForceNoFloorFloodfillFix = true;
    //bForceNoCeilingFloodfillFix = true;
    printwarn("MAPFIX: Grove Alt detected and fixed");
    return;
  }

  // Hell Revealed MAP23
  // https://forum.zdoom.org/viewtopic.php?t=60181&p=1101976#p1101976
  if (MapHashMD5 == "16E621E46F87418F6F8DB71D68433AE0") {
    // Arachnotrons near beginning sometimes don't spawn if imps block
    // their one-time teleport. Make these teleports repeatable to ensure
    // maxkills are always possible.
    Lines[2036].flags |= ML_REPEAT_SPECIAL;
    Lines[2038].flags |= ML_REPEAT_SPECIAL;
    Lines[2039].flags |= ML_REPEAT_SPECIAL;
    Lines[2040].flags |= ML_REPEAT_SPECIAL;
    printwarn("MAPFIX: Hell Revealed MAP23 detected and fixed");
  }
}
