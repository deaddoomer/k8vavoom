//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
class VLevel : GameObject native;

const int MAX_LEVEL_TRANSLATIONS = 0xffff;
const int MAX_BODY_QUEUE_TRANSLATIONS = 0xff;

// script types
const int
  SCRIPT_Closed      = 0,
  SCRIPT_Open        = 1,
  SCRIPT_Respawn     = 2,
  SCRIPT_Death       = 3,
  SCRIPT_Enter       = 4,
  SCRIPT_Pickup      = 5,
  SCRIPT_BlueReturn  = 6,
  SCRIPT_RedReturn   = 7,
  SCRIPT_WhiteReturn = 8,
  SCRIPT_Lightning   = 12,
  SCRIPT_Unloading   = 13,
  SCRIPT_Disconnect  = 14,
  SCRIPT_Return      = 15,
  SCRIPT_Event       = 16, // not implemented
  SCRIPT_Kill        = 17,
  SCRIPT_Reopen      = 18; // not implemented

struct StateCall {
  Entity Item;
  state State;
  ubyte Result; // `0` means "don't change"; non-zero means "succeed"
};

struct SectorLink {
  int index;
  int mts; // bit 30: set if ceiling; low byte: movetype
  int next; // index, or -1
};

struct rep_light_t {
  TVec Origin;
  float Radius;
  int Color;
  int OwnerUId;
  TVec ConeDir;
  float ConeAngle;
  sector_t *LevelSector;
  float LevelScale;
  //int NextUIdIndex; // -1 or next light for this OwnerUId
  bool bLightChanged;
  bool bLightActive;
};


native readonly name MapName;
native readonly string MapHash; // lowercase
native readonly string MapHashMD5; // lowercase
native readonly int LSSHash; // xxHash32 of linedefs, sidedefs, sectors (in this order)
native readonly int SegHash; // xxHash32 of segs

// flags
native readonly private bool bForServer; // true if this level belongs to the server
native readonly bool bExtended; // true if level was in Hexen format (or extended namespace for UDMF)
native readonly private bool bGLNodesV5; // true if using version 5 GL nodes (used only in loader)
native readonly bool bTextMap; // UDMF format map
// used in map fixer
native transient bool bForceRebuildNodes;
native transient bool bForceAllowSeveralPObjInSubsector; // this is not used anymore, but kept for compatibility
native transient bool bForceNoTexturePrecache;
native transient bool bForceNoPrecalcStaticLights;
native transient bool bForceNoDeepwaterFix;
native transient bool bForceNoFloorFloodfillFix;
native transient bool bForceNoCeilingFloodfillFix;
// used only in VavoomC
native transient bool bConvertSectorLightsToStatic;
// set by pobj spawner
native transient bool bHas3DPolyObjects;

native transient name UDMFNamespace; // locased

// map-related data
native TVec[] Vertexes;
native sector_t[] Sectors;
native side_t[] Sides;
native line_t[] Lines;
native readonly seg_t[] Segs;
native readonly subsector_t[] Subsectors;
native readonly private node_t[] Nodes;

// !!! Used only during level loading
native mthing_t[] Things;

native readonly private int BlockMapLumpSize;
native readonly private int *BlockMapLump;
native readonly private int *BlockMap;
native readonly private int BlockMapWidth;
native readonly private int BlockMapHeight;
native readonly private float BlockMapOrgX;
native readonly private float BlockMapOrgY;
native readonly private /*VEntity** */void *BlockLinks;
native readonly private /*polyblock_t** */void *PolyBlockMap;

native readonly private ubyte *RejectMatrix;
native readonly private int RejectMatrixSize;

// strife conversations
native FRogueConSpeech[] GenericSpeeches;
native FRogueConSpeech[] LevelSpeeches;

// list of all poly-objects on the level
native readonly private /*int*/void *[] PolyObjs;
native readonly private /*int*/void *[] PolyAnchorPoints; // this is not `void *`, but meh...
native readonly private /*TMapNC<int, int>*/ void *PolyTagMap; // key: tag; value: index in PolyObjs

// sound environments for sector zones
native int[] Zones;

native readonly private Thinker ThinkerHead;
native readonly private Thinker ThinkerTail;

native readonly LevelInfo LevelInfo;
native readonly WorldInfo WorldInfo;

native readonly void *Acs; // VAcsLevel

native readonly private void *Renderer;
native readonly private void *NetContext;

native readonly private void *BaseLines;
native readonly private void *BaseSides;
native readonly private void *BaseSectors;
native readonly private void *BasePolyObjs;

native readonly array!rep_light_t StaticLights;
native readonly private void *StaticLightsMap; // internal dictionary

// not really array of ints, and properly cleared by C++ code
native readonly private array!int ActiveSequences;
native readonly private array!int CameraTextures;

native readonly float NextTime; // current game time, in seconds (set *BEFORE* all tickers called)
readonly float Time; // current game time, in seconds (incremented *AFTER* all tickers called)
readonly int TicTime; // game time, in tics (35 per second)

native readonly private msecnode_t *SectorList;
native readonly private msecnode_t *HeadSecNode;

// not really array of void pointers, and properly cleared by C++ code
native readonly private array!(void *) Translations;
native readonly private array!(void *) BodyQueueTransl;

native readonly state CallingState;
native readonly StateCall *StateCall;

native readonly private int NextSoundOriginID;

native readonly private void *__decanimlist;
native readonly private int __decanimuid;

native readonly private void *__lineTags;
native readonly private void *__sectorTags;


// don't mark as native, so serializer will do the work for us
/*native*/ array!int sectorlinkStart; // can be less than sectors; indexed by sector index
/*native*/ array!SectorLink sectorlinks;

// not really array of void pointers, and properly cleared by C++ code
native transient array!(/*VLevelScriptThinker*/void *) scriptThinkers;

native transient private int csTouchCount;
native transient private int *csTouched; // for ChangeSector; Z_Malloc'ed, NumSectors elements

native transient private array!int FakeFCSectors;
//native transient private array!int TaggedSectors;

// this is used to keep control->dest 3d floor links
// [0..NumSectors) is entry point, then follow next index (-1 means 'end')
// order is undefined
struct Ctl2DestLink {
  int src; // sector number, just in case
  int dest; // sector number
  int next; // index in `ControlLinks` or -1
};

native transient private array!Ctl2DestLink ControlLinks;

// array of cached subsector centers
native transient array!TVec ssCenters;

native transient private int tsVisitedCount;

native transient private string cacheFileBase;
native transient private bool cacheIgnore;

protected array!MapMarkerInfo MapMarkers;

// UDMF user keys
private native transient /*VCustomKeyInfo*/void *UserLineKeyInfo;
private native transient /*VCustomKeyInfo*/void *UserThingKeyInfo;
private native transient /*VCustomKeyInfo*/void *UserSectorKeyInfo;
private native transient /*VCustomKeyInfo*/void *UserSideKeyInfo0;
private native transient /*VCustomKeyInfo*/void *UserSideKeyInfo1;
private native transient /*VCustomKeyInfo*/void *UserLineIdxKeyInfo;
private native transient /*VCustomKeyInfo*/void *UserSideIdxKeyInfo;

//private native transient TVec*[] polyPrevPts;
private native transient TVec *polyPrevPts;
private native transient int polyPrevPtsAlloted;

// temporaries for `VPathTraverse`
private native transient int *processedBMCells; // used in thing collector, contains validcount; size is `BlockMapWidth*BlockMapHeight`
private native transient int processedBMCellsSize;

// common path interception pool, managed by C++ code
private native transient intercept_t *pathIntercepts;
private native transient int pathInterceptsAlloted;
private native transient int pathInterceptsUsed;

private native transient intercept_t *tempPathIntercepts;
private native transient int tempPathInterceptsAlloted;
private native transient int tempPathInterceptsUsed;


// ////////////////////////////////////////////////////////////////////////// //
// natives
native final int GetLineIndex (line_t *line);

// "user_" must be included in key name!
native final bool GetUDMFLineInt (int id, name keyname, out int res);
native final bool GetUDMFLineFloat (int id, name keyname, out float res);
native final bool GetUDMFThingInt (int id, name keyname, out int res);
native final bool GetUDMFThingFloat (int id, name keyname, out float res);
native final bool GetUDMFSectorInt (int id, name keyname, out int res);
native final bool GetUDMFSectorFloat (int id, name keyname, out float res);
native final bool GetUDMFSideInt (int sidenum, int id, name keyname, out int res);
native final bool GetUDMFSideFloat (int sidenum, int id, name keyname, out float res);


struct linetrace_t {
  TVec Start;
  TVec End;
  TVec Delta;
  TVec LineStart;
  TVec LineEnd;
  int PlaneNoBlockFlags; // SPF_XXX
  // the following will be calculated from `PlaneNoBlockFlags`
  int LineBlockFlags;
  // subsector we ended in (can be arbitrary if trace doesn't end in map boundaries)
  // valid only for `BSPTraceLine()` call (i.e. BSP trace)
  subsector_t *EndSubsector;
  // the following fields are valid only if trace was failed
  TVec HitPlaneNormal;
  TPlane HitPlane;
  line_t *HitLine; // can be `nullptr` if we hit a floor/ceiling
  bool SightEarlyOut; // set if hit line is not two-sided
  private readonly TPlane LinePlane; // vertical plane for (Start,End), used only for line checks; may be undefined
};

// use BSP to find sector where the given point lies
// uses vanilla faulty algo
native final subsector_t *PointInSubsector (const TVec Point);
native final sector_t *PointInSector (const TVec Point);
// use BSP to find sector where the given point lies
// uses bugfixed algo
native final subsector_t *PointInSubsectorRender (const TVec Point);
native final sector_t *PointInSectorRender (const TVec Point);
alias PointInSubsector_Buggy = PointInSubsectorRender;
alias PointInSector_Buggy = PointInSectorRender;
// BSP trace; returns `false` if something was hit (and then `HitNormal` is valid)
native final bool BSPTraceLine (const TVec start, const TVec end, out TVec HitPoint, out TVec HitNormal, optional int noBlockFlags/*=SPF_NOBLOCKING*/);
native final bool BSPTraceLineEx (const TVec start, const TVec end, out linetrace_t trace, optional int noBlockFlags/*=SPF_NOBLOCKING*/);
native final bool CastLightRay (bool textureCheck, const TVec org, const TVec dest, optional subsector_t *startSubSector, optional subsector_t *endSubSector);

// call this after sector height changed, to notify things
// crunch means "crush actors" (otherwise first unfitting actor will stop notifying)
// `-1` for `crunch` means "ignore stuck mobj"
// returns `false` if there was any unfitting actor
native final bool ChangeSector (sector_t *sector, int crunch);
// resets all caches and such; used to "fake open" doors and move lifts in bot pathfinder
// doesn't move things (so you *HAVE* to restore sector heights)
native final void ChangeOneSectorInternal (sector_t *sector);
// this is used to create ROR and various 3d structures
native final void AddExtraFloor (line_t *line, sector_t *dst);
// swap sector's floor and ceiling, it's used by level converter to support EDGE and Legacy 3D floors
native final void SwapPlanes (sector_t *s);

native final void SetFloorLightSector (sector_t *Sector, sector_t *SrcSector);
native final void SetCeilingLightSector (sector_t *Sector, sector_t *SrcSector);
native final void SetHeightSector (sector_t *Sector, sector_t *SrcSector, int Flags);

// returns `-1` on end
native final int FindSectorFromTag (out sector_t *Sector, int tag, optional int start);
native final line_t *FindLine (int lineTag, int *searchPosition);

// support for linked sectors
native final void SectorSetLink (int controltag, int tag, int surface, int movetype);

// used to mark `msecnode_t`
native final int GetNextVisitedCount ();


// ////////////////////////////////////////////////////////////////////////// //
// exposed here in case i'll need it later
native static final float CD_SweepLinedefAABB (const line_t *ld, TVec vstart, TVec vend, TVec bmin, TVec bmax,
                                               optional out TPlane hitPlane, optional out TVec contactPoint,
                                               optional out CD_HitType hitType, optional out int hitplanenum);


// ////////////////////////////////////////////////////////////////////////// //
// polyobj functions
native final void SpawnPolyobj (mthing_t *thing, float x, float y, float height, int tag, bool crush, bool hurt);
native final void AddPolyAnchorPoint (mthing_t *thing, float x, float y, float height, int tag);
native final polyobj_t *GetPolyobj (int polyNum);
native final int GetPolyobjMirror (int poly);
native final bool MovePolyobj (int num, float x, float y, optional float z, optional bool forced);
native final bool RotatePolyobj (int num, float angle);

// returns hit time
// negative means "no hit"
native final float CheckPObjPlanesPoint (const TVec linestart, const TVec lineend,
                                         optional out TVec outHitPoint, optional out TVec outHitNormal);


// ////////////////////////////////////////////////////////////////////////// //
// ACS functions
native final int StartACS (int number, int map, int arg1, int arg2, int arg3,
                           Entity activator, line_t *line, int side, bool Always, bool WantResult);
native final bool SuspendACS (int number, int map);
native final bool TerminateACS (int number, int map);
native final void StartTypedACScripts (int Type, int Arg1, int Arg2, int Arg3,
                                       Entity Activator, bool Always, bool RunNow);

native final bool RunACS (Entity activator, int script, int map, int s_arg1, int s_arg2, int s_arg3, int s_arg4);
native final bool RunACSAlways (Entity activator, int script, int map, int s_arg1, int s_arg2, int s_arg3, int s_arg4);
native final int RunACSWithResult (Entity activator, int script, int s_arg1, int s_arg2, int s_arg3, int s_arg4);

native final bool RunNamedACS (Entity activator, string script, int map, int s_arg1, int s_arg2, int s_arg3, int s_arg4);
native final bool RunNamedACSAlways (Entity activator, string script, int map, int s_arg1, int s_arg2, int s_arg3, int s_arg4);
native final int RunNamedACSWithResult (Entity activator, string script, int s_arg1, int s_arg2, int s_arg3, int s_arg4);

native final int SetBodyQueueTrans (int Slot, int Transl);


// ////////////////////////////////////////////////////////////////////////// //
// decal functions
native final void AddDecal (TVec org, name dectype, int side, line_t *li, optional int translation);
native final void AddDecalById (TVec org, int id, int side, line_t *li, optional int translation);


// ////////////////////////////////////////////////////////////////////////// //
// iterators
native final iterator AllThinkers (class!Thinker Class, out Thinker Thinker);
native final static iterator AllActivePlayers (out BasePlayer Player);


// ////////////////////////////////////////////////////////////////////////// //
// this moved to C++ code to make sound propagation on huge maps faster
native void doRecursiveSound (ref array!Entity elist, sector_t *sec, Entity soundtarget, float maxdist, const TVec sndorigin);

// debug function
final int calcSecIdx (sector_t *sec) {
  if (!sec) return -1;
  return sec-&Sectors[0];
}


// ////////////////////////////////////////////////////////////////////////// //
// called by the engine before each world tick
void UpdateCachedCVars () {
  int dh = GetCvarI('dbg_perfect_hatred');
  if (dh != LevelInfo.PerfectHatredMode) {
    LevelInfo.PerfectHatredMode = dh;
    if (!dh) {
      printdebug("Perfect Hatred Mode: disabled");
    } else {
      string s;
      if (LevelInfo.PerfectHatredMode&LevelInfo::PHM_HUNT_MONSTERS) s ~= "monsters,";
      if (LevelInfo.PerfectHatredMode&LevelInfo::PHM_HUNT_PLAYERS) s ~= "players,";
      if (LevelInfo.PerfectHatredMode&LevelInfo::PHM_WANDER) s ~= "wander,";
      if (LevelInfo.PerfectHatredMode&LevelInfo::PHM_INFIGHTING) s ~= "infighting,";
      if (!s) {
        SetCvarI('dbg_perfect_hatred', 0);
        printdebug("Perfect Hatred Mode: disabled");
        LevelInfo.PerfectHatredMode = 0;
      } else {
        s = s[0..$-1];
        printdebug("Perfect Hatred Mode: %s", s);
      }
    }
  }
}


// ////////////////////////////////////////////////////////////////////////// //
// called after level was loaded (no entities spawned yet)
void AfterLevelLoaded () {}

void BeforeWorldTick (float DeltaTime) { /*print("BEFORE: %s", DeltaTime);*/ }
void AfterWorldTick (float DeltaTime) { /*print("AFTER: %s", DeltaTime);*/ }

// called after `OnMapSpawn()`, `ent` is never `none`
void OnEntitySpawned (Entity ent) {}

// called after missile was spawned, `ent` is never `none`, `originator` may be `none`
// WARNING! THIS API MAY BE CHANGED LATER!
void OnMissileSpawned (Entity ent /*, Entity originator*/) {}

// called after entity was removed from lists, and marked for deletion; `ent` is never `none`
void OnEntityDying (Entity ent) {}

// this is called after LevelInfo handler when the game is loaded (hub or savegame)
void AfterUnarchiveThinkers () {
  if (!GetCvarB('r_flip_corpses')) return;
  EntityEx ee;
  foreach AllThinkers(EntityEx, out ee) {
    if (ee.bCorpse && (ee.bMonster || ee.bIsPlayer)) {
      ee.bCorpseFlipped = (P_Random() >= 128);
      //if (ee.bCorpseFlipped) printdebug("%C: corpse flipped", ee);
    }
  }
}

// return `false` to prevent spawning
// you can set `spw.Chooser` here too
bool OnRandomSpawner (RandomSpawner spw) { return true; }


native int LdrTexNumForName (string texname, int Type, optional bool CMap);

#include "LevelMapFixer.vc"


// ////////////////////////////////////////////////////////////////////////// //
// useful for variuos limiters
final void k8LimiterCleanup (class!Entity thc, int allowed, ref int counter, ref int deathCounter, optional bool debugmsg) {
  if (!thc) return;
  if (counter > allowed) {
    // remove old blood
    array!Entity elist;
    Entity e;
    foreach AllThinkers(thc, out e) elist[$] = e;
    if (elist.length < 1) return;
    if (allowed < 1) {
      if (debugmsg) print("REMOVING ALL blood entities out of %s (%s allowed)", elist.length, allowed);
      counter -= elist.length;
      deathCounter += elist.length;
      foreach (auto i; 0..elist.length) {
        //print("    KILLING %C (spawn time is %s)", elist[i], elist[i].SpawnTime);
        elist[i].Destroy();
      }
      return;
    }
    //print("  %s blood entities found", elist.length);
    if (elist.length > allowed) {
      elist.sort(delegate int (Entity a, Entity b) { float d = (a.SpawnTime-b.SpawnTime); return (d < 0 ? -1 : d > 0 ? 1 : 0); });
      // destroy half of list, from older
      int toremove = (elist.length-allowed);
      toremove += allowed/3;
      if (toremove <= 0) toremove = elist.length-allowed;
      toremove = min(toremove, elist.length); // just in case
      if (debugmsg) print("REMOVING %s entities %C out of %s (%s allowed, %s left)", toremove, thc, elist.length, allowed, elist.length-toremove);
      counter -= toremove;
      deathCounter += toremove;
      foreach (auto i; 0..toremove) {
        //print("    KILLING %C (spawn time is %s)", elist[i], elist[i].SpawnTime);
        elist[i].Destroy();
      }
      if (debugmsg) print("%s entities %C removed out of %s", deathCounter, thc, elist.length);
    }
  }
}


final void k8LimiterUnarchiveThinkers (class!Entity thc, int allowed, ref int counter, ref int deathCounter, optional bool debugmsg) {
  int oldcounter = counter;
  counter = 0;
  Entity e;
  array!Entity elist;
  foreach AllThinkers(thc, out e) {
    //print("* FOUND %C", e);
    elist[$] = e;
  }
  counter = elist.length;
  if (debugmsg) print("*** LOADED (%C): counter=%s; skip=%s; counted=%s", thc, oldcounter, deathCounter, counter);
  deathCounter = 0;
  if (elist.length > allowed) {
    elist.sort(delegate int (Entity a, Entity b) { float d = (a.SpawnTime-b.SpawnTime); return (d < 0 ? -1 : d > 0 ? 1 : 0); });
    int toremove = elist.length-allowed;
    counter -= toremove;
    deathCounter += toremove;
    foreach (auto i; 0..toremove) {
      elist[i].Destroy();
    }
  }
}


//==========================================================================
//
//  GetSubsectorCenter
//
//==========================================================================
final TVec GetSubsectorCenter (const subsector_t *sub) {
  if (!sub) Error("wut?!");
  if (ssCenters.length != Subsectors.length) {
    // clean it up
    ssCenters.length = Subsectors.length;
    foreach (ref TVec ssc; ssCenters) ssc = vector(float.max, float.max, float.max); // impossibiru
  }
  int ssnum = sub-&Subsectors[0];
  TVec res = ssCenters[ssnum];
  if (res.x != float.max) return res;
  // calculate it
  if (sub.numlines == 0) Error("wut?!");
  res = vector(0, 0, 0);
  foreach (auto lidx; sub.firstline..sub.firstline+sub.numlines) {
    res += *Segs[lidx].v1;
  }
  res = res/float(sub.numlines);
  res.z = GetSectorFloorPointZ(sub.sector, res); // arbitrary
  ssCenters[ssnum] = res;
  return res;
}


// ////////////////////////////////////////////////////////////////////////// //
MapMarkerInfo *MapMarkerWithId (int markerid) {
  return (markerid > 0 && markerid <= MapMarkers.length ? &MapMarkers[markerid-1] : nullptr);
}


// map markers
// >0: success, id
int AddMapMarker () {
  MapMarkerInfo *nmk = nullptr;
  foreach (auto idx, ref MapMarkerInfo mk; MapMarkers) {
    if (mk.id == -1) {
      nmk = &MapMarkers[idx];
      nmk.id = idx+1;
      break;
    }
  }
  if (!nmk) {
    int idx = MapMarkers.length;
    nmk = MapMarkers.alloc();
    nmk.id = idx+1;
  }
  nmk.x = 0;
  nmk.y = 0;
  nmk.sector = nullptr;
  nmk.thingTid = 0;
  nmk.bVisible; // if false, layer didn't seen marker sector
  nmk.bActive; // if false, the marker is not active
  return nmk.id;
}


void RemoveMapMarker (int markerid) {
  if (markerid > 0 && markerid <= MapMarkers.length) {
    MapMarkers[markerid-1].id = -1; // special flag
  }
}


// ////////////////////////////////////////////////////////////////////////// //
struct SectorTagIterationInfo {
  int tag;
  int index;
}

final bool SectorsByTag_opIterInit (out SectorTagIterationInfo it, int tag) {
  it.tag = tag;
  it.index = -1;
  return true;
}

final bool SectorsByTag_opIterNext (ref SectorTagIterationInfo it, out sector_t *sec) {
  it.index = FindSectorFromTag(out sec, it.tag, it.index);
  return (it.index >= 0);
}


// ////////////////////////////////////////////////////////////////////////// //
defaultproperties {
}
