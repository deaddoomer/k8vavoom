//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Level : GameObject
  native;

const int MAX_LEVEL_TRANSLATIONS = 0xffff;
const int MAX_BODY_QUEUE_TRANSLATIONS = 0xff;

//  Script types
const int
  SCRIPT_Closed   = 0,
  SCRIPT_Open     = 1,
  SCRIPT_Respawn    = 2,
  SCRIPT_Death    = 3,
  SCRIPT_Enter    = 4,
  SCRIPT_Pickup   = 5,
  SCRIPT_BlueReturn = 6,
  SCRIPT_RedReturn  = 7,
  SCRIPT_WhiteReturn  = 8,
  SCRIPT_Lightning  = 12,
  SCRIPT_Unloading  = 13,
  SCRIPT_Disconnect = 14,
  SCRIPT_Return   = 15;

struct StateCall
{
  Entity    Item;
  state   State;
  ubyte    Result;
};

native readonly name MapName;

//  Flags.
native readonly private bool bForServer; // true if this level belongs to the server
native readonly bool bExtended;  // true if level was in Hexen format
native readonly private bool bGLNodesV5; // true if using version 5 GL nodes
native readonly bool bTextMap; // UDMF format map

//  MAP related Lookup tables.
//  Store VERTEXES, LINEDEFS, SIDEDEFS, etc.

native /*readonly*/ TVec[] Vertexes;
//native readonly TVec *Vertexes;
//native readonly int NumVertexes;

native /*readonly*/ sector_t[] Sectors;
//native readonly sector_t *Sectors;
//native readonly int NumSectors;

native /*readonly*/ side_t[] Sides;
//native readonly side_t *Sides;
//native readonly int NumSides;

native /*readonly*/ line_t[] Lines;
//native readonly line_t *Lines;
//native readonly int NumLines;

native readonly seg_t[] Segs;
//native readonly seg_t *Segs;
//native readonly int NumSegs;

native readonly subsector_t[] Subsectors;
//native readonly subsector_t *Subsectors;
//native readonly int NumSubsectors;

native readonly private int/*node_t*/[] Nodes;
//native readonly private void/*node_t*/* Nodes;
//native readonly private int NumNodes;

native readonly private void *VisData;
native readonly private void *NoVis;

// !!! Used only during level loading
native /*readonly*/ mthing_t[] Things;
//native readonly mthing_t *Things;
//native readonly int NumThings;

native readonly private int BlockMapLumpSize;
native readonly private void *BlockMapLump;
native readonly private void *BlockMap;
native readonly private int BlockMapWidth;
native readonly private int BlockMapHeight;
native readonly private float BlockMapOrgX;
native readonly private float BlockMapOrgY;
native readonly private void *BlockLinks;
native readonly private void *PolyBlockMap;

native readonly private void *RejectMatrix;
native readonly private int RejectMatrixSize;

//  Strife conversations.
native /*readonly*/ RogueConSpeech[] GenericSpeeches;
//native readonly RogueConSpeech *GenericSpeeches;
//native readonly int NumGenericSpeeches;

native /*readonly*/ RogueConSpeech[] LevelSpeeches;
//native readonly RogueConSpeech *LevelSpeeches;
//native readonly int NumLevelSpeeches;

//  List of all poly-objects on the level.
native readonly private int[] PolyObjs;
//native readonly private void *PolyObjs;
//native readonly private int NumPolyObjs;

native readonly private int[] PolyAnchorPoints;
//native readonly private void *PolyAnchorPoints;
//native readonly private int NumPolyAnchorPoints;

//  Sound environments for sector zones.
native /*readonly*/ int[] Zones;
//native readonly int *Zones;
//native readonly int NumZones;

native readonly private Thinker ThinkerHead;
native readonly private Thinker ThinkerTail;

native readonly LevelInfo LevelInfo;
native readonly WorldInfo WorldInfo;

native readonly private void *Acs;

native readonly private void *RenderData;
native readonly private void *NetContext;

native readonly private void *BaseLines;
native readonly private void *BaseSides;
native readonly private void *BaseSectors;
native readonly private void *BasePolyObjs;

native readonly private int[] StaticLights;
//native readonly private void *StaticLights;
//native readonly private int NumStaticLights;

native readonly private array!int ActiveSequences;

native readonly private array!int CameraTextures;

native readonly float Time;
native readonly int TicTime;

native readonly private void *SectorList;
native readonly private void *HeadSecNode;

native readonly private array!(void *) Translations;
native readonly private array!(void *) BodyQueueTransl;

native readonly state CallingState;
native readonly StateCall *StateCall;

native readonly private int NextSoundOriginID;

native readonly private void *__decanimlist;
native readonly private int __decanimuid;

//
//  Natives
//

native final int GetLineIndex (line_t *line);

native final sector_t *PointInSector(TVec Point);
native final bool TraceLine(TVec start, TVec end, out TVec HitPoint,
  out TVec HitNormal);
native final bool ChangeSector(sector_t *sector, int crunch);
native final sec_region_t *AddExtraFloor(line_t *line, sector_t *dst);
//  Swap sector's floor and ceiling, it's used by level converter to support
// EDGE and Legacy 3D floors.
native final void SwapPlanes(sector_t *s);

native final void SetFloorLightSector(sector_t *Sector, sector_t *SrcSector);
native final void SetCeilingLightSector(sector_t *Sector, sector_t *SrcSector);
native final void SetHeightSector(sector_t *Sector, sector_t *SrcSector, int Flags);

//  Return next sector # that line tag refers to
native final int FindSectorFromTag(int tag, int start);
native final line_t *FindLine(int lineTag, int *searchPosition);

//
//  Polyobj functions
//

native final void SpawnPolyobj(float x, float y, int tag, bool crush,
  bool hurt);
native final void AddPolyAnchorPoint(float x, float y, int tag);
native final polyobj_t *GetPolyobj(int polyNum);
native final int GetPolyobjMirror(int poly);
native final bool RotatePolyobj(int num, float angle);
native final bool MovePolyobj(int num, float x, float y);

//
//  ACS functions
//

native final bool StartACS(int number, int map, int arg1, int arg2, int arg3,
  Entity activator, line_t *line, int side, bool Always, bool WantResult);
native final bool SuspendACS(int number, int map);
native final bool TerminateACS(int number, int map);
native final void StartTypedACScripts(int Type, int Arg1, int Arg2, int Arg3,
  Entity Activator, bool Always, bool RunNow);

native final int SetBodyQueueTrans(int Slot, int Transl);

//
//  Decal functions
//

native final void AddDecal (TVec org, name dectype, int side, line_t *li);


defaultproperties
{
}
