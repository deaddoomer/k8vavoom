//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//
//  Base class of all classes
//
//==========================================================================

class Object
  native
  abstract;

#ifndef VCC_STANDALONE_EXECUTOR
enum {
  CVAR_ARCHIVE    = 1,  // Set to cause it to be saved to vavoom.cfg
  CVAR_USERINFO   = 2,  // Added to userinfo  when changed
  CVAR_SERVERINFO = 4,  // Added to serverinfo when changed
  CVAR_INIT       = 8,  // Don't allow change from console at all,
                        // but can be set from the command line
  CVAR_LATCH      = 16, // Save changes until server restart
  CVAR_ROM        = 32, // Display only, cannot be set by user at all
  CVAR_CHEAT      = 64, // Can not be changed if cheats are disabled
  CVAR_MODIFIED   = 128 // Set each time the cvar is changed
};
#endif

const int MININT = 0x80000000;
const int MAXINT = 0x7fffffff;

#ifndef VCC_STANDALONE_EXECUTOR
const int MAXPLAYERS = 8;
#endif


//**************************************************************************
//**
//**    CLIENT DEFINES
//**
//**************************************************************************

//
// Horisontal text alignement
//
enum {
  hleft,   //Left
  hcentre, //Centred
  hright   //Right
};

//
// Vertical text alignement
//
enum {
  vtop,    //Top
  vcentre, //Centre
  vbottom  //Bottom
};

// Text colours.
enum {
  CR_UNDEFINED = -1,
  CR_BRICK,
  CR_TAN,
  CR_GRAY,
  CR_GREEN,
  CR_BROWN,
  CR_GOLD,
  CR_RED,
  CR_BLUE,
  CR_ORANGE,
  CR_WHITE,
  CR_YELLOW,
  CR_UNTRANSLATED,
  CR_BLACK,
  CR_LIGHTBLUE,
  CR_CREAM,
  CR_OLIVE,
  CR_DARKGREEN,
  CR_DARKRED,
  CR_DARKBROWN,
  CR_PURPLE,
  CR_DARKGRAY,
  NUM_TEXT_COLOURS
};

//
// STATUS BAR VIEW TYPE
//
enum {
  SB_VIEW_NORMAL,
  SB_VIEW_AUTOMAP,
  SB_VIEW_FULLSCREEN
};


//==========================================================================
//
//  3D math - vectors and planes
//
//==========================================================================
vector TVec {
  float x;
  float y;
  float z;
};

vector TAVec {
  float pitch;
  float yaw;
  float roll;
};

struct TPlane {
  TVec normal;
  float dist;
  int __type;
  int __signbits;
  int __reserved1;
  int __reserved2;
};


#ifndef VCC_STANDALONE_EXECUTOR
//**************************************************************************
//
//  Client types
//
//**************************************************************************

//
//  Server list
//

enum { HOSTCACHESIZE = 8 };

struct hostcache_t {
  string Name;
  string Map;
  string CName;
  string WadFiles[20];
  int Users;
  int MaxUsers;
};

struct slist_t {
  bool bInProgress;
  int Count;
  hostcache_t *Cache;
  string ReturnReason;
};

struct im_t {
  name LeaveMap;
  int LeaveCluster;
  string LeaveName;
  name LeaveTitlePatch;
  name ExitPic;

  name EnterMap;
  int  EnterCluster;
  string EnterName;
  name EnterTitlePatch;
  name EnterPic;

  name InterMusic;

  string Text;
  name TextFlat;
  name TextPic;
  name TextMusic;
  int TextCDTrack;
  int TextCDId;

  bool bTextIsLump;
};

struct picinfo_t {
  int width;
  int height;
  int xoffset;
  int yoffset;
};

struct EpisodeDef {
  name Name;
  name TeaserName;
  string Text;
  name PicName;
  bool bLookupText;
  bool bNoSkillMenu;
  bool bOptional;
  string Key;
};

struct SkillPlayerClassName {
  string ClassName;
  string MenuName;
};

struct SkillDef {
  string Name;
  float AmmoFactor;
  float DoubleAmmoFactor;
  float DamageFactor;
  float RespawnTime;
  int RespawnLimit;
  float Aggressiveness;
  int SpawnFilter;
  int AcsReturn;
  string MenuName;
  array<SkillPlayerClassName> PlayerClassNames;
  string ConfirmationText;
  string Key;
  string TextColour;
  bool bFastMonsters;
  bool bDisableCheats;
  bool bEasyBossBrain;
  bool bAutoUseHealth;
  bool bMenuNameIsPic;
  bool bMustConfirm;
};
#endif


//**************************************************************************

// Keys and buttons
enum {
  K_SPACE = 32,

  K_a = 97,
  K_b,
  K_c,
  K_d,
  K_e,
  K_f,
  K_g,
  K_h,
  K_i,
  K_j,
  K_k,
  K_l,
  K_m,
  K_n,
  K_o,
  K_p,
  K_q,
  K_r,
  K_s,
  K_t,
  K_u,
  K_v,
  K_w,
  K_x,
  K_y,
  K_z,

  K_UPARROW = 0x80,
  K_LEFTARROW,
  K_RIGHTARROW,
  K_DOWNARROW,
  K_INSERT,
  K_DELETE,
  K_HOME,
  K_END,
  K_PAGEUP,
  K_PAGEDOWN,

  K_PAD0,
  K_PAD1,
  K_PAD2,
  K_PAD3,
  K_PAD4,
  K_PAD5,
  K_PAD6,
  K_PAD7,
  K_PAD8,
  K_PAD9,

  K_NUMLOCK,
  K_PADDIVIDE,
  K_PADMULTIPLE,
  K_PADMINUS,
  K_PADPLUS,
  K_PADENTER,
  K_PADDOT,

  K_ESCAPE,
  K_ENTER,
  K_TAB,
  K_BACKSPACE,
  K_CAPSLOCK,

  K_F1,
  K_F2,
  K_F3,
  K_F4,
  K_F5,
  K_F6,
  K_F7,
  K_F8,
  K_F9,
  K_F10,
  K_F11,
  K_F12,

  K_LSHIFT,
  K_RSHIFT,
  K_LCTRL,
  K_RCTRL,
  K_LALT,
  K_RALT,

  K_LWIN,
  K_RWIN,
  K_MENU,

  K_PRINTSCRN,
  K_SCROLLLOCK,
  K_PAUSE,

  K_ABNT_C1,
  K_YEN,
  K_KANA,
  K_CONVERT,
  K_NOCONVERT,
  K_AT,
  K_CIRCUMFLEX,
  K_COLON2,
  K_KANJI,

  K_MOUSE1,
  K_MOUSE2,
  K_MOUSE3,

  K_MOUSED1,
  K_MOUSED2,
  K_MOUSED3,

  K_MWHEELUP,
  K_MWHEELDOWN,

  K_JOY1,
  K_JOY2,
  K_JOY3,
  K_JOY4,
  K_JOY5,
  K_JOY6,
  K_JOY7,
  K_JOY8,
  K_JOY9,
  K_JOY10,
  K_JOY11,
  K_JOY12,
  K_JOY13,
  K_JOY14,
  K_JOY15,
  K_JOY16,

  KEY_COUNT,

  SCANCODECOUNT = KEY_COUNT - 0x80
};

// [Input] event types.
enum {
  ev_keydown,
  ev_keyup,
  ev_mouse, // for vcc_run: data2/data3 are coords, otherwise deltas
  ev_joystick,
  // extended events for vcc_run
#ifdef VCC_STANDALONE_EXECUTOR
  ev_winfocus, // data1: focused
  ev_timer, // data1: timer id
  ev_closequery,
#endif
};

// Event structure.
struct event_t {
  int type;  // event type
  int data1; // keys / mouse / joystick buttons
  int data2; // mouse / joystick x move
  int data3; // mouse / joystick y move
};

native readonly private void *CxxVTable;
native readonly private void *VTable;
native readonly private int ObjectIndex;
native readonly private int ObjectFlags;
native readonly class Class;

native void Destroy ();
native final bool IsA (name CheckName);
native final bool IsDestroyed ();


//==========================================================================
//
//              COMMON BUILTINS
//
//==========================================================================

//
//  Error functions
//

//  Shut down client and server, go to title
native static final void Error (string format, ...);
//  Exit programm with error
native static final void FatalError (string format, ...);


#ifndef VCC_STANDALONE_EXECUTOR
//
//  Cvar functions
//

//  Is cvar exists?
native static final bool CvarExists(name Name);
//  Create a new cvar
native static final void CreateCvar(name Name, string default_value, string help_text, int flags);
//  Read value
native static final int GetCvar(name Name);
//  Set cvar value
native static final void SetCvar(name Name, int value);
//  Read float value
native static final float GetCvarF(name Name);
//  Set cvar float value
native static final void SetCvarF(name Name, float value);
//  Read string value
native static final string GetCvarS(name Name);
//  Set cvar string value
native static final void SetCvarS(name Name, string value);
//  Read boolean value (k8 TODO: this is more reliable than `GetCvar()`; i should fix codebase to use this)
native static final bool GetCvarB(name Name);

//  "doom", "doom2", "tnt", "plutonia" -- you got the idea
final string GameName { get { return GetCvarS('game_name'); } }

final bool IsDoom { get { return (GetCvarS('game_name') == "doom"); } }
final bool IsDoom2 { get { return (GetCvarS('game_name') == "doom2"); } }
final bool IsAnyDoom2 { get { return (GetCvarS('game_name') != "doom"); } } // FIXME: invalid for heretic/hexen/strife
final bool IsPlutonia { get { return (GetCvarS('game_name') == "plutonia"); } }
final bool IsTnt { get { return (GetCvarS('game_name') == "tnt"); } }
final bool IsNerve { get { return (GetCvarS('game_name') == "nerve"); } }
#endif


//
//  Math functions
//

//  Normalises angle in range 0..360
native static final float AngleMod360 (float angle);
//  Normalises angle in range -180..180
native static final float AngleMod180 (float angle);
//  degrees --> radians
native static final float deg2rad (float angle);
//  radians -> degrees
native static final float rad2deg (float angle);
//  Absolute value
native static final int abs (int val);
//  Absolute value
native static final float fabs (float val);
//  Minimal value
native static final int Min (int v1, int v2);
native static final int min (int v1, int v2);
//  Minimal value
native static final float FMin (float v1, float v2);
native static final float fmin (float v1, float v2);
//  Maximal value
native static final int Max (int v1, int v2);
native static final int max (int v1, int v2);
//  Maximal value
native static final float FMax (float v1, float v2);
native static final float fmax (float v1, float v2);
//  Clamped value
native static final int Clamp (int Val, int Min, int Max);
native static final int clamp (int Val, int Min, int Max);
//  Clamped value
native static final float FClamp (float Val, float Min, float Max);
native static final float fclamp (float Val, float Min, float Max);
//  Sine
native static final float sin (float angle);
//  Cosine
native static final float cos (float angle);
//  Tangent
native static final float tan (float angle);
//  Arcsine
native static final float asin (float x);
//  Arccosine
native static final float acos (float x);
//  Arctangent
native static final float atan (float slope);
//  Arctangent
native static final float atan2 (float y, float x);
//  Square root
native static final float sqrt (float x);
//  Vector length
native static final float Length (TVec vec);
//  Vector length
native static final float length (TVec vec);
//  Vector length without z component
native static final float Length2D (TVec vec);
//  Vector length without z component
native static final float length2D (TVec vec);
//  Normalises vector
native static final TVec Normalise (TVec vec);
//  Normalises vector
native static final TVec normalise (TVec vec);
//  Dot product
native static final float DotProduct (TVec v1, TVec v2);
//  Dot product
native static final float dot (TVec v1, TVec v2);
//  Cross product (perpendicular vector)
native static final TVec CrossProduct (TVec v1, TVec v2);
//  Cross product (perpendicular vector)
native static final TVec cross (TVec v1, TVec v2);
//  Creates vectors for given angle vector
native static final void AngleVectors (TAVec *angles, TVec *forward, TVec *right, TVec *up);
//  Simplified version of AngleVectors, creates only forward vector
native static final void AngleVector (TAVec *angles, TVec *forward);
//  Create angle vector for a vector
native static final void VectorAngles (TVec *vec, TAVec *angles);
//  Get z of point with given x and y coords
// Don't try to use it on a vertical plane
native static final float GetPlanePointZ (TPlane *plane, TVec point);
//  Returns side 0 (front) or 1 (back).
native static final int PointOnPlaneSide (TVec point, TPlane *plane);
//  Rotates a direction vector
native static final TVec RotateDirectionVector (TVec vec, TAVec rot);
//  Rotates vector around Z axis
native static final void VectorRotateAroundZ (TVec *vec, float angle);
//  Rotates vector around another vector
native static final TVec RotateVectorAroundVector (TVec Vector, TVec Axis, float angle);

//
//  Random numbers
//

//  Floating random number 0.0 ... 0.999999
native static final float Random ();
//  Integer random number 1 .. 255
native static final int P_Random ();

//
//  String functions
//

//  String length
native static final int strlen (string s);
//  Compare strings
native static final int strcmp (string s1, string s2);
//  Compare strings ingnoring case
native static final int stricmp (string s1, string s2);
//  Append string to string
native static final string strcat (string s1, string s2);
//  Convert string to lowercase
native static final string strlwr (string s);
//  Convert string to uppercase
native static final string strupr (string s);
//  Gets a substring
native static final string substr (string Str, int Start, int Len);
//  Does varargs print into a temporary buffer
native static final string va (string format, ...);
//  Converts string to integer
native static final int atoi (string str);
//  Converts string to float
native static final float atof (string str);
//  Checks if string starts with given string
native static final bool StrStartsWith (string Str, string Check);
//  Checks if string ends with given string
native static final bool StrEndsWith (string Str, string Check);
//  Replaces substrings with another string
native static final string StrReplace (string Str, string Search, string Replacement);

//
//  Printing to console
//

//  Print to console
native static final void print (string format, ...);
//  Print to console only when developer == 1
native static final void dprint (string format, ...);


#ifndef VCC_STANDALONE_EXECUTOR
//
//  Texture / flat number retrieval
//
native static final int CheckTextureNumForName (name Name);
native static final int TextureNumForName (name Name);
native static final int CheckFlatNumForName (name Name);
native static final int FlatNumForName (name Name);
native static final float TextureHeight (int pic);
native static final name GetTextureName (int Handle);
#endif


//
//  Type conversions
//

//  float -> int
native static final int ftoi (float f);
//  int -> float
native static final float itof (int f);
//  Converts string to name
native static final name StrToName (string Str);
//  Converts name to string
native static final string NameToStr (name Name);


#ifndef VCC_STANDALONE_EXECUTOR
//
//  Console command functions
//
native static final int Cmd_CheckParm (string str);
native static final int Cmd_GetArgC ();
native static final string Cmd_GetArgV (int idx);
//  Adds text to command buffer, same as typing it in console
native static final void CmdBuf_AddText (string format, ...);
#endif


//
//  Class methods
//

native static final class FindClass (name Name);
native static final class FindClassLowerCase (name Name);
native static final bool ClassIsChildOf (class SomeClass, class BaseClass);
native static final name GetClassName (class C);
native static final class GetClassParent (class C);
native static final class GetClassReplacement (class C);
native static final class GetClassReplacee (class C);
native static final state FindClassState (class C, name StateName);
native static final int GetClassNumOwnedStates (class C);
native static final state GetClassFirstState (class C);

//
//  State methods
//

native static final bool StateIsInRange (state State, state Start, state End, int MaxDepth);
native static final bool StateIsInSequence (state State, state Start);
native static final name GetStateSpriteName (state State);
native static final float GetStateDuration (state State);
native static final state GetStatePlus (state S, int Offset, optional bool IgnoreJump);
#ifndef VCC_STANDALONE_EXECUTOR
native static final bool AreStateSpritesPresent (state State);
#endif

//
//  Iterators
//

native static final iterator AllObjects (class BaseClass, out Object Obj);
native static final iterator AllClasses (class BaseClass, out class Class);

//
//  Misc
//

native static final Object SpawnObject (class cid);
native static final int RGB (byte r, byte g, byte b);
native static final int RGBA (byte r, byte g, byte b, byte a);

#ifndef VCC_STANDALONE_EXECUTOR
//  Reads key value from info string (userinfo or serverinfo)
native static final string Info_ValueForKey (string info, string key);
//  Checks if WAD lump is present, used to check for shareware/extended WADs
native static final bool WadLumpPresent (name Name);
native static final GameObject::VAnimDoorDef *FindAnimDoor (int BaseTex);
native static final string GetLangString (name Id);
native static final GameObject::LockDef *GetLockDef (int Lock);
native static final int ParseColour (string Name);
native static final string TextColourString (int Colour);
native static final bool StartTitleMap ();
native static final void LoadBinaryLump (name LumpName, out array<byte> Array);
native static final bool IsMapPresent (name MapName);

native static final int P_GetMapIndexByLevelNum (int map);
native static final int P_GetNumMaps ();

native static final bool HasDecal (name aname);
#endif


#ifndef VCC_STANDALONE_EXECUTOR
struct VMapSpecialAction {
  name TypeName;
  int Special;
  int Args[5];
};

struct mapInfo_t {
  name LumpName;
  string Name;     // Name of map
  int LevelNum;   // Level number for action specials
  int Cluster;    // Defines what cluster level belongs to
  int WarpTrans;    // Actual map number in case maps are not sequential
  name NextMap;    // Map to teleport to upon exit of timed deathmatch
  name SecretMap;    // Map to teleport upon secret exit
  name SongLump;   // Background music (MUS or MIDI)
  int CDTrack;    // CD track to play during level
  int Sky1Texture;  // Default sky texture
  int Sky2Texture;  // Alternate sky displayed in Sky2 sectors
  float Sky1ScrollDelta;// Default sky texture speed
  float Sky2ScrollDelta;// Alternate sky texture speed
  name SkyBox;     // Sky box
  name FadeTable;    // Fade table {fogmap}
  int Fade; // unsigned
  int OutsideFog; // unsigned
  float Gravity;    // Map gravity
  float AirControl;   // Air control in this map.
  int Flags;// unsigned
  int Flags2;// unsigned
  name TitlePatch;
  int ParTime;
  int SuckTime;
  byte HorizWallShade;
  byte VertWallShade;
  byte Infighting;
  array!VMapSpecialAction SpecialActions;
  name RedirectType;
  name RedirectMap;
  name ExitPic;
  name EnterPic;
  name InterMusic;
};

native static final mapInfo_t *P_GetMapInfo (int map);
#endif


#ifndef VCC_STANDALONE_EXECUTOR
//==========================================================================
//
//              CLIENT BUILTINS
//
//==========================================================================

//
//  Graphics
//

native static final void SetVirtualScreen (int Width, int Height);
//  Registers a graphic, returns handle
native static final int R_RegisterPic (name Name);
//  Registers a graphic with custom palette, returns handle
native static final int R_RegisterPicPal (name Name, name palname);
//  Retrieves pic info
native static final void R_GetPicInfo (int handle, picinfo_t *info);
//  Draws a pic
native static final void R_DrawPic (int x, int y, int handle);
//  Installs a sprite model
native static final void R_InstallSprite (string Name, int index);
//  Draws a sprite
native static final void R_DrawSpritePatch (int x, int y, int sprite,
  int frame, int rot, int TranslStart, int TranslEnd, int Colour);
//  Installs model
native static final void *InstallModel (string Name);
//  Draws a model
native static final void R_DrawModelFrame (TVec origin, float angle,
  void *model, int frame, int nextframe, string skin, int TranslStart,
  int TranslEnd, int Colour);
//  Draws a coloured rectangle
native static final void R_FillRect (int x, int y, int w, int h, int colour);

//
//  Client sound stuff
//

//  Plays a sound
native static final void LocalSound (name Name);
//  Checks if sound is still playing.
native static final bool IsLocalSoundPlaying (name Name);
//  Stops all local sounds.
native static final void StopLocalSounds ();

//  Handle shift+key
native static final string TranslateKey (int c);
native static final string P_GetMapName (int map);
native static final name P_GetMapLumpName (int map);
native static final name P_TranslateMap (int map);
native static final int P_GetNumEpisodes ();
native static final EpisodeDef *P_GetEpisodeDef (int i);
native static final int P_GetNumSkills ();
native static final SkillDef *P_GetSkillDef (int i);
native static final bool SV_GetSaveString (int i, string *buf);
native static final void StartSearch (bool Master);
native static final slist_t *GetSlist ();
native static final string KeyNameForNum (int KeyNr);
native static final void IN_GetBindingKeys (string cmd, int *key1, int *key2);
native static final void IN_SetBinding (int key, string ondown, string onup);
native static final string LoadTextLump (name Name);

//==========================================================================
//
//              SERVER BUILTINS
//
//==========================================================================

//
//  Map utilites
//

native static final GameObject::opening_t *LineOpenings (GameObject::line_t *linedef, TVec point);
// Returns 0 - front, 1 - back, -1 - on
native static final int P_BoxOnLineSide (float *tmbox, GameObject::line_t *ld);
// Find the best gap that the thing could fit in, given a certain Z
// position (z1 is foot, z2 is head).
native static final GameObject::sec_region_t *FindThingGap (GameObject::sec_region_t *gaps, TVec point, float z1, float z2);
//  Find the best opening
native static final GameObject::opening_t *FindOpening (GameObject::opening_t *gaps, float z1, float z2);
//  Find best region in sector for a given point
native static final GameObject::sec_region_t *PointInRegion (GameObject::sector_t *sector, TVec p);
// Given a point (x,y), returns the point (ox,oy) on the sector's defining
// lines that is nearest to (x,y).
// Ignores `z`.
native static final TVec SectorClosestPoint (GameObject::sector_t *sec, TVec in);

//
//  Sound functions
//

native static final bool GetSoundPlayingInfo (Entity mobj, int sound_id);
native static final int GetSoundID (name Name);
native static final void SetSeqTrans (name Name, int Num, int SeqType);
native static final name GetSeqTrans (int Num, int SeqType);
native static final name GetSeqSlot (name Sequence);
native static final void StopAllSounds ();

native static final GameObject::VTerrainInfo *TerrainType (int pic);
native static final GameObject::VSplashInfo *GetSplashInfo (name Name);
native static final GameObject::VTerrainInfo *GetTerrainInfo (name Name);
native static final void SB_Start ();
native static final class FindClassFromEditorId (int Id, int GameFilter);
native static final class FindClassFromScriptId (int Id, int GameFilter);
#endif


#ifdef VCC_STANDALONE_EXECUTOR
//==========================================================================
//
//              MISC BUILTINS
//
//==========================================================================
// returns new timer id
// if interval is < 1, returns with error and won't create timer
native static final int CreateTimer (int intervalms, optional bool oneshot);
// creates timer with the given id, or returns `false` if id is n/a
native static final bool CreateTimerWithId (int id, int intervalms, optional bool oneshot);
native static final bool DeleteTimer (int id); // `true`: deleted, `false`: no such timer
native static final bool IsTimerExists (int id);
native static final bool IsTimerOneShot (int id); // `false`: no timer, or not oneshot
native static final int GetTimerInterval (int id); // 0: no such timer
// returns success flag; won't do anything if interval is < 1
native static final bool SetTimerInterval (int id, int intervalms);

native static final float GetTickCount ();
#endif


defaultproperties
{
}
