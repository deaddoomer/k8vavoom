//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2019 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, either version 3 of the License, or
//**  (at your option) any later version.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//
//  RTTI (unimplemented yet)
//
//==========================================================================

/*
//==========================================================================
//
//  RTTI
//
//==========================================================================
enum RTTIBaseType {
  Void,
  Int,
  Byte,
  Bool,
  Float,
  Name,
  String,
  Pointer,
  Reference,
  Class,
  State,
  Delegate,
  Struct,
  Vector,
  Array,
  DynamicArray,
  SliceArray,
  Dictionary,
};

struct RTTIType {
  private ubyte Type;
  private ubyte InnerType;
  private ubyte ArrayInnerType;
  private ubyte KeyInnerType;
  private ubyte ValueInnerType;
  private ubyte PtrLevel;
  private void *union0;
  private void *union1;
};

static native final RTTIBaseType rttiGetBaseType (const ref RTTIType atype);
static native final void rttiGetPointerInnerType (const ref RTTIType atype, out RTTIType restype);
static native final void rttiGetArrayInnerType (const ref RTTIType atype, out RTTIType restype);
static native final void rttiGetDictKeyType (const ref RTTIType atype, out RTTIType restype);
static native final void rttiGetDictValueType (const ref RTTIType atype, out RTTIType restype);
static native final int rttiGetPointerLevel (const ref RTTIType atype);
static native final class rttiGetTypeClass (const ref RTTIType atype); // for class/reference
static native final name rttiGetTypeClassName (const ref RTTIType atype);
static native final name rttiGetTypeStructName (const ref RTTIType atype);
static native final name rttiGetTypeMethodName (const ref RTTIType atype);

static native final bool rttiFindClassField (name className, name fldname, optional out RTTIType type);
static native final bool rttiFindStructField (name structName, name fldname, optional out RTTIType type);

/+
native final bool HasFieldByName (name fldname);
native final int GetIntFieldByName (name fldname, optional bool default_value);
+/
*/
