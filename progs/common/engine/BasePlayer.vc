//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//
//  Extended player object info
//
//**************************************************************************
class BasePlayer : GameObject native abstract;

// constants for FixedColormap
enum {
  NUMCOLORMAPS    = 32,
  INVERSECOLORMAP = 32,
  GOLDCOLORMAP    = 33,
  REDCOLORMAP     = 34,
  GREENCOLORMAP   = 35,
  MONOCOLORMAP    = 36,
  BEREDCOLORMAP   = 37,
  BLUECOLORMAP    = 38,
  INVERSXCOLORMAP = 39,
};

const float TOCENTRE = -128.0;

struct VViewState {
  state State; // `none` state means not active
  float StateTime;
  int DispSpriteFrame;
  name DispSpriteName;
  float OvlOfsX, OvlOfsY;
  // transient fields
  transient int WatchCat;
  transient state NewState;
};

// for overlays (when i'll implement them)
struct VViewStateOverlay {
  Entity Owner; // inventory item or player entity can own an overlay
  int Priority;
  int RenderStyle;
  float Alpha;
};

struct VPlrAngleInterp {
  float StartTime;
  float Duration;
  float Prev;
};

struct VAttackerInfo {
  Entity ent; // to properly replace the attacker
  TVec Origin; // attack origin
  float Damage; // damage dealt
  name DamageType; // damage type
  float GameTime; // attack time
};


readonly LevelInfo Level;

readonly bool bActive;
readonly bool bSpawned;
readonly bool bIsBot;
transient bool bFixAngle;
transient bool bAttackDown; // `true` if button was down last tic
transient bool bUseDown;
transient bool bDidSecret; // `true` if secret level has been done
readonly private bool bCentering;
transient readonly bool bIsClient; // player on client side
bool bAutomapRevealed;
bool bAutomapShowThings;
// this flag is set for client games if the player is using prediction engine (not yet)
transient bool bAutonomousProxy;
transient bool bExitedViaSecret; // set/reset in C++ code

native readonly private void *Net;

// weapon action flags
native transient bool bWeaponWasWeaponReady;
native transient bool bWeaponAllowSwitch;
native transient bool bWeaponAllowPrimaryFire;
native transient bool bWeaponAllowAltFire;
native transient bool bWeaponAllowReload;
native transient bool bWeaponAllowZoom;
native transient bool bWeaponAllowUser1;
native transient bool bWeaponAllowUser2;
native transient bool bWeaponAllowUser3;
native transient bool bWeaponAllowUser4;

string UserInfo;

string PlayerName;
ubyte BaseClass;
ubyte PClass; // player class type
ubyte TranslStart;
ubyte TranslEnd;
int Color;

float ClientForwardMove; // *2048 for move
float ClientSideMove; // *2048 for move
float ForwardMove; // *2048 for move
float SideMove; // *2048 for move
float FlyMove; // fly up/down/centering
/*ubyte*/transient int Buttons; // fire, use
/*ubyte*/transient int Impulse; // weapon changes, inventory, etc
// for ACS, see C++ code
transient int AcsCurrButtonsPressed;
transient int AcsCurrButtons;
transient int AcsButtons;
transient int OldButtons;
transient float AcsNextButtonUpdate;
transient float AcsPrevMouseX, AcsPrevMouseY; // previous ACS mouse movement
transient float AcsMouseX, AcsMouseY; // current ACS mouse movement

Entity MO;
Entity Camera;
int PlayerState;

// determine POV, including viewpoint bobbing during movement
// focal origin above r.z
TVec ViewOrg;
TAVec ViewAngles;

transient native VPlrAngleInterp ViewPitchInterp;
transient native VPlrAngleInterp ViewYawInterp;
transient native VPlrAngleInterp ViewRollInterp;

// this is only used between levels,
// mo->health is used during levels.
int Health;

// frags, kills of other players
int Frags;
int Deaths;

// for intermission stats
int KillCount;
int ItemCount;
int SecretCount;

// so gun flashes light up areas
ubyte ExtraLight;

// for lite-amp and invulnarability powers
ubyte FixedColormap;

// color shifts for damage, powerups and content types
int CShift;

// overlay view sprites (gun, etc)
VViewState[NUMPSPRITES] ViewStates;
int Crosshair; // 0: default; >0: custom from decorate
float ViewStateSX, ViewStateSY;
float ViewStateOfsX, ViewStateOfsY;
float ViewStateBobOfsX, ViewStateBobOfsY;
float PSpriteSY;
float PSpriteWeaponLowerPrev;
float PSpriteWeaponLoweringStartTime;
float PSpriteWeaponLoweringDuration;
// extra overlays (not implemented yet)
array!VViewState ViewOverlayState;
array!VViewStateOverlay ViewOverlayView;

// server-side data (sent to client)
float WorldTimer; // total time the player's been playing (calculated by summing deltas)
transient float GameTime; // set in `PlayerTick`, already advanced; for client, read from the server
transient float LastDeltaTime; // set in `PlayerTick`

// client-side data, used in predictor
// on the client, `ClCurrGameTime` will be reset on each new player update packet, and will start ticking from that
transient float ClLastGameTime; // updated in C++; last `GameTime` got from the server
transient float ClCurrGameTime; // updated in C++; current client `GameTime`, advanced by delta

native readonly ubyte ClientNum;

int SoundEnvironment;

native readonly ClientGameBase ClGame; // valid only on client side

PlayerReplicationInfo playerReplicationInfo;

private native transient Object LastViewObject;

// this can be used in HUD to draw attack directions
// it is updated in `EntityEx.Damage()`
// also, `ClientTick()` will remove items after 3 seconds of game time
native transient array!VAttackerInfo Attackers;


replication {
  reliable if (!bIsClient)
    Health, Frags, Deaths, ExtraLight, FixedColormap, CShift,
    PSpriteSY, KillCount, ItemCount, SecretCount,
    ViewStates, /*DispSpriteFrame, DispSpriteName,*/
    ClientNum, MO, Camera, SoundEnvironment,
    bAutomapRevealed, bAutomapShowThings, bAttackDown,
    WorldTimer, GameTime, LastDeltaTime;

  // methods server can execute on client
  unreliable if (!bIsClient)
    ClientStartSound, ClientStopSound;

  // methods server can execute on client (we don't need this for predicted player)
  //FIXME: but we need this for different camera
  unreliable if (!bIsClient && (!bAutonomousProxy || Camera != MO))
    ClientSetViewOrg;

  // client know better (for now), so it informs the server
  // the server maintains all prediction data in any case
  reliable if (bIsClient)
    ClientSetAutonomousProxy;

  // methods server can execute on client
  reliable if (!bIsClient)
    ClientStartSequence, ClientAddSequenceChoice, ClientStopSequence,
    ClientChatPrint, ClientPrint, ClientCenterPrint, ClientSetAngles, ClientIntermission,
    ClientPause, ClientSkipIntermission, ClientFinale, ClientChangeMusic,
    ClientSetServerInfo, ClientHudMessage, ClientFOV;

  // client movement variables
  reliable if (bIsClient)
    ViewAngles, ClientForwardMove, ClientSideMove, FlyMove, Buttons,
    // client sends this back to the server
    ClLastGameTime, ClCurrGameTime;

  // methods client can execute on server
  reliable if (bIsClient)
    ServerImpulse, ServerSetUserInfo;
}


native static final bool IsCheckpointSpawn { get; }

native final bool IsRunEnabled ();
native final bool IsMLookEnabled ();
native final bool IsCrouchEnabled ();
native final bool IsJumpEnabled ();

// print to client
native final void cprint (string format, ...) [printf,1];
// client's center message
native final void centerprint (string format, ...) [printf,1];
native final int GetPlayerNum ();
native final void ClearPlayer ();
native final void ResetWeaponActionFlags ();

native final void SetViewObject (Object vobj);
native final void SetViewObjectIfNone (Object vobj);
native final void SetViewState (int position, state stnum);
native final bool AdvanceViewStates (float deltaTime);
native final bool WillAdvanceWeaponState (float deltaTime);
native final void DisconnectBot ();

// for networking
// OriginId==-666: local (use player's SoundOriginID)
native void ClientStartSound (int SoundId, TVec Org, int OriginId,
                              int Channel, float Volume, float Attenuation, bool Loop);
native void ClientStopSound (int OriginId, int Channel);
native void ClientStartSequence (TVec Origin, int OriginId, name Name, int ModeNum);
native void ClientAddSequenceChoice (int OriginId, name Choice);
native void ClientStopSequence (int OriginId);
native void ClientPrint (string Str);
native void ClientChatPrint (string nick, string str);
native void ClientCenterPrint (string Str);
native void ClientSetAngles (TAVec Angles);
native void ClientIntermission (name NextMap);
native void ClientPause (bool Paused);
native void ClientSkipIntermission ();
native void ClientFinale (string Type);
native void ClientChangeMusic (name Song);
native void ClientSetServerInfo (string Key, string Value);
native void ClientHudMessage (string Message, name Font, int Type, int Id,
                              int Color, string ColorName, float x, float y,
                              int HudWidth, int HudHeight, float HoldTime,
                              float Time1, float Time2, float Alpha);

native void ClientFOV (float fov);

native void ServerSetUserInfo (string Info);


//==========================================================================
//
//  SetViewStateOffsets
//
//==========================================================================
final void SetViewStateOffsets (float newsx, float newsy, optional bool delta) {
  if (delta) {
    ViewStateSX += newsx;
    ViewStateSY += newsy;
  } else {
    ViewStateSX = newsx;
    ViewStateSY = newsy;
  }
}


//==========================================================================
//
//  InitWeaponSlots
//
//  used by dumb client to setup weapon slots
//
//==========================================================================
void InitWeaponSlots () {
}


//==========================================================================
//
//  PutClientIntoServer
//
//==========================================================================
void PutClientIntoServer () {
}


//==========================================================================
//
//  SpawnClient
//
//==========================================================================
void SpawnClient () {
}


//==========================================================================
//
//  NetGameReborn
//
//==========================================================================
void NetGameReborn () {
}


//==========================================================================
//
//  DisconnectClient
//
//==========================================================================
void DisconnectClient () {
}


//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================
void UserinfoChanged () {
}


//==========================================================================
//
//  PlayerBeforeExitMap
//
//==========================================================================
void PlayerBeforeExitMap () {
}


//==========================================================================
//
//  PlayerExitMap
//
//==========================================================================
void PlayerExitMap (bool clusterChange) {
}


//==========================================================================
//
//  PlayerTick
//
//==========================================================================
void PlayerTick (float deltaTime) {
}


//==========================================================================
//
//  ClientTick
//
//  delta time can be zero for "interframe" ticks
//
//==========================================================================
void ClientTick (float deltaTime) {
  CleanupAttackers();
}


//==========================================================================
//
//  SetViewPos
//
//==========================================================================
void SetViewPos () {
}


//==========================================================================
//
//  PreTravel
//
//==========================================================================
void PreTravel () {
}


//==========================================================================
//
//  ResetInventory
//
//==========================================================================
void ResetInventory () {
}


//==========================================================================
//
//  RemoveKeysVerbose
//
//==========================================================================
void RemoveKeysVerbose (optional bool verbose) {
}


//==========================================================================
//
//  RemoveKeys
//
//==========================================================================
void RemoveKeys () {
  RemoveKeysVerbose(verbose:false);
}


//==========================================================================
//
//  ResetHealth
//
//==========================================================================
void ResetHealth () {
}


//==========================================================================
//
//  PreraiseWeapon
//
//==========================================================================
void PreraiseWeapon () {
}


//==========================================================================
//
//  UseInventory
//
//==========================================================================
void UseInventory (string Inv) {
}


//==========================================================================
//
//  CheckDoubleFiringSpeed
//
//==========================================================================
bool CheckDoubleFiringSpeed () {
  return false;
}


//==========================================================================
//
//  ServerImpulse
//
//==========================================================================
void ServerImpulse (int AImpulse) {
  Impulse = AImpulse;
}


//==========================================================================
//
//  ClientSetAutonomousProxy
//
//==========================================================================
void ClientSetAutonomousProxy (bool value) {
  printdebug("%C: setting autonomous proxy! value=%B", self, value);
  bAutonomousProxy = value;
}


//==========================================================================
//
//  ClientSetViewOrg
//
//==========================================================================
void ClientSetViewOrg (TVec neworg) {
  //if (!bAutonomousProxy) printdebug("%C: setting view origin! value=%s : %s", self, ViewOrg, neworg);
  ViewOrg = neworg;
}


//==========================================================================
//
//  PostfixViewHeight
//
//  after player thinker was called, player can be moved by lift,
//  for example. we have to "postfix" view origin to get rid of
//  "sinking into lift" effect
//
//==========================================================================
void PostfixViewHeight () {
}


//==========================================================================
//
//  eventGetReadyWeapon
//
//==========================================================================
Entity eventGetReadyWeapon () {
  return none;
}


//==========================================================================
//
//  eventFindInventoryWeapon
//
//==========================================================================
Entity eventFindInventoryWeapon (string classname, bool allowReplace) {
  return none;
}


//==========================================================================
//
//  eventIsReadyWeaponByName
//
//==========================================================================
bool eventIsReadyWeaponByName (string classname, bool allowReplace) {
  return false;
}


//==========================================================================
//
//  eventSetPendingWeapon
//
//==========================================================================
bool eventSetPendingWeapon (Entity ent) {
  return false;
}


//==========================================================================
//
//  IsCheckpointPossible
//
//  this should check player's inventory (and maybe some other things), and
//  return `true` if simple checkpoint-style save is possible
//  (i.e. loader can simply recreate player inventory and health)
//
//  for now, there is no way to inject custom data in checkpoints, so if
//  you have any, return `false` here
//
//==========================================================================
bool IsCheckpointPossible () {
  return true;
}


//==========================================================================
//
//  eventSetReadyWeapon
//
//==========================================================================
void eventSetReadyWeapon (Entity ent, bool instant) {}


//==========================================================================
//
//  ResetToDefaults
//
//  this is called on save loading, etc.
//  reset every important field to default
//
//==========================================================================
void ResetToDefaults () {
  ResetWeaponActionFlags();
}


//==========================================================================
//
//  eventOnSaveLoaded
//
//  this is called after savegame was loaded
//
//==========================================================================
void eventOnSaveLoaded () {
}


//==========================================================================
//
//  eventOnBeforeSave
//
//  this is called before game will be saved
//
//  note that `isCheckpoint` is "advisory",
//  the game may decide to do a full save anyway
//
//==========================================================================
void eventOnBeforeSave (bool isAutosave, bool isCheckpoint) {
}


//==========================================================================
//
//  eventOnAfterSave
//
//  this is called after game was saved
//
//  `isCheckpoint` indicates if we really saved a checkpoint
//
//==========================================================================
void eventOnAfterSave (bool isAutosave, bool isCheckpoint) {
}


//==========================================================================
//
//  eventAfterUnarchiveThinkers
//
//==========================================================================
void eventAfterUnarchiveThinkers () {
}


//==========================================================================
//
//  QS_Save
//
//==========================================================================
void QS_Save () {}


//==========================================================================
//
//  QS_Load
//
//==========================================================================
void QS_Load () {}


// ////////////////////////////////////////////////////////////////////////// //
// this is hack used for quicksaves
native final void QS_PutInt (string fieldname, int value);
native final void QS_PutName (string fieldname, name value);
native final void QS_PutStr (string fieldname, string value);
native final void QS_PutFloat (string fieldname, float value);

native final int QS_GetInt (string fieldname, optional int defvalue);
native final name QS_GetName (string fieldname, optional name defvalue);
native final string QS_GetStr (string fieldname, optional string defvalue);
native final float QS_GetFloat (string fieldname, optional float defvalue);


// ////////////////////////////////////////////////////////////////////////// //
string GetCurrentArmorClassName () { return "None"; }
int GetCurrentArmorSaveAmount () { return 0; }
float GetCurrentArmorSavePercent () { return 0; }
int GetCurrentArmorMaxAbsorb () { return 0; }
int GetCurrentArmorFullAbsorb () { return 0; }
int GetCurrentArmorActualSaveAmount () { return 0; }


Entity EngineHelperGetSavedInventory () { return none; }


// ////////////////////////////////////////////////////////////////////////// //
// <=0 is "none"
void ConsoleGiveInventory (string itemName, int amount) {}
// -1 is "max", 0 is "none"
void ConsoleTakeInventory (string itemName, int amount) {}


// ////////////////////////////////////////////////////////////////////////// //
// various cheat commands
// if commands starts with `Cheat_`, is void, and has no args, it is console command
// if commands starts with `Cheat_`, ends with '_AC', is void, and is
//   (const ref array!string args, bool newArg, out array!string aclist)
// this is autocompleter
//   it is always at least one argument -- command name
//   `newArg==true` means "want to autocomplete next arg in the list"
//   `newArg==false` means "want to autocomplete last arg in the list"

//==========================================================================
//
//  CheatHelperCheckOnOff
//
//  returns -1 if no toggle was found, or 0/1
//
//==========================================================================
int CheatHelperCheckOnOff () {
  int res = -1;
  foreach (auto i; 1..Cmd_GetArgC()) {
    string s = Cmd_GetArgV(i);
         if (s.strEquCI("on") || s.strEquCI("true") || s.strEquCI("tan")) res = 1;
    else if (s.strEquCI("off") || s.strEquCI("false") || s.strEquCI("ona")) res = 0;
  }
  return res;
}


//==========================================================================
//
//  GetIsNoclipActive
//
//==========================================================================
bool GetIsNoclipActive () { return false; }


//==========================================================================
//
//  CleanupAttackers
//
//==========================================================================
void CleanupAttackers () {
  int idx = 0;
  while (idx < Attackers.length) {
    if (Attackers[idx].GameTime+3 <= GameTime) {
      Attackers.remove(idx);
    } else {
      ++idx;
    }
  }
}


//==========================================================================
//
//  RememberAttacker
//
//==========================================================================
void RememberAttacker (Entity ent, TVec aOrigin, float aDamage, name aDamageType) {
  printdebug("attack from `%C`(%s): org=%s; dmg=%s; type=%s", ent, ent.UniqueId, aOrigin, aDamage, aDamageType);
  // check for the same origin, if there is any
  foreach (auto ref atk; Attackers) {
    if (ent && atk.ent == ent) {
      // replace it
      atk.ent = ent;
      atk.Origin = aOrigin; // just in case
      atk.Damage = aDamage;
      atk.DamageType = aDamageType;
      atk.GameTime = GameTime;
      return;
    }
    if (!ent && !atk.ent && (aOrigin-atk.Origin).lengthSquared <= 4*4) {
      // yeah, close enough, check the damage
      if (atk.Damage <= aDamage) {
        // replace it
        atk.ent = ent;
        atk.Origin = aOrigin; // just in case
        atk.Damage = aDamage;
        atk.DamageType = aDamageType;
        atk.GameTime = GameTime;
      }
      // do nothing
      return;
    }
  }
  // append new attacker
  VAttackerInfo *natk = Attackers.alloc();
  natk.ent = ent;
  natk.Origin = aOrigin; // just in case
  natk.Damage = aDamage;
  natk.DamageType = aDamageType;
  natk.GameTime = GameTime;
}


/*
void Cheat_Resurrect () {}
void Cheat_God () {}
void Cheat_Buddha () {}
void Cheat_Summon () {}
void Cheat_NoClip () {}
void Cheat_Gimme () {}
void Cheat_KillAll () {}
void Cheat_Morph () {}
void Cheat_NoWeapons () {}
void Cheat_Class () {}
void Cheat_Fly () {}
void Cheat_NoTarget () {}
void Cheat_Anubis () {}
void Cheat_Freeze () {}
void Cheat_Jumper () {}
void Cheat_ShooterKing () {}
void Cheat_Regeneration () {}
void Cheat_DumpInventory () {}
*/
//void Cheat_VScriptCommand (ref array!string args) {}


defaultproperties {
  ViewStateSY = Weapon::WEAPONTOP;
}
