//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
// clientgame object is global, and created on client start
// this class is subclassed for each game, with `ClientGame` name
// if you need to create your own in your VavoomC mod, do it like this:
//   class MyMod_ClientGame : replaces(lastchild of ClientGameBase);
// this way it will be compatible with other VavoomC mods
//
class ClientGameBase : Object abstract native;

bool bLocalServer;
// used to accelerate or skip a stage
bool bSkipIntermission;

readonly GameInfo Game;
readonly BasePlayer cl;
readonly VLevel GLevel;

readonly IntermissionInfo im;

readonly RootWidget GRoot;

int sb_height;

int maxclients;
int deathmatch;

string serverinfo;

enum IM_Phase {
  None, // not in intermission
  Leave,
  Enter,
  Finale,
}

IM_Phase intermissionPhase;


// returns true if client is signed on (i.e. level info received in MP)
// note that it doesn't mean that player MO is ready!
native final bool IsSignedOn ();

// signed on, and have player MObj?
native final bool IsPlayerMObjReady ();

native final bool IsRecordingDemo ();
native final bool IsPlayingDemo ();


//==========================================================================
//
//  RootWindowCreated
//
//==========================================================================
void RootWindowCreated () {
}


//==========================================================================
//
//  Connected
//
//==========================================================================
void Connected () {
}


//==========================================================================
//
//  Disconnected
//
//==========================================================================
void Disconnected () {
}


//==========================================================================
//
//  DemoPlaybackStarted
//
//==========================================================================
void DemoPlaybackStarted () {
}


//==========================================================================
//
//  DemoPlaybackStopped
//
//==========================================================================
void DemoPlaybackStopped () {
}


//==========================================================================
//
//  OnHostEndGame
//
//==========================================================================
void OnHostEndGame () {
}


//==========================================================================
//
//  OnHostError
//
//==========================================================================
void OnHostError () {
}


//==========================================================================
//
//  StatusBarStartMap
//
//==========================================================================
void StatusBarStartMap () {
}


//==========================================================================
//
//  StatusBarDrawer
//
//==========================================================================
void StatusBarDrawer (int sb_view) {
}


//==========================================================================
//
//  StatusBarResponder
//
//  can be used to drive some mod UI
//  won't be called if not in game, no player MO, or in demo
//
//==========================================================================
bool StatusBarResponder (event_t *evt) {
  return false;
}


//==========================================================================
//
//  StatusBarUpdateWidgets
//
//==========================================================================
void StatusBarUpdateWidgets (float DeltaTime) {
}


//==========================================================================
//
//  StatusBarUpdateWidgetsNotInGame
//
//  called when not in game
//  DON'T do any UI work here, this should be used to deactivate some flags!
//
//==========================================================================
void StatusBarUpdateWidgetsNotInGame (float DeltaTime) {
}


//==========================================================================
//
//  IntermissionStart
//
//==========================================================================
void IntermissionStart () {
}


//==========================================================================
//
//  StartFinale
//
//==========================================================================
void StartFinale (name FinaleType) {
}


//===========================================================================
//
//  FinaleResponder
//
//===========================================================================
bool FinaleResponder (event_t *event) {
  return false;
}


//==========================================================================
//
//  DeactivateMenu
//
//==========================================================================
void DeactivateMenu () {
}


//==========================================================================
//
//  MenuResponder
//
//==========================================================================
bool MenuResponder (event_t *event) {
  return false;
}


//==========================================================================
//
//  MenuActive
//
//==========================================================================
bool MenuActive () {
  return false;
}


//==========================================================================
//
//  SetMenu
//
//==========================================================================
void SetMenu (string Name) {
}


//==========================================================================
//
//  MessageBoxShowWarning
//
//==========================================================================
void MessageBoxShowWarning (string text) {
}


//==========================================================================
//
//  MessageBoxDrawer
//
//==========================================================================
void MessageBoxDrawer () {
}


//==========================================================================
//
//  MessageBoxResponder
//
//==========================================================================
bool MessageBoxResponder (event_t *event) {
  return false;
}


//==========================================================================
//
//  MessageBoxActive
//
//==========================================================================
bool MessageBoxActive () {
  return false;
}


//==========================================================================
//
//  DrawViewBorder
//
//==========================================================================
void DrawViewBorder (int x, int y, int w, int h) {
}


//==========================================================================
//
//  AddNotifyMessage
//
//==========================================================================
void AddNotifyMessage (string Str) {
}


//==========================================================================
//
//  AddChatMessage
//
//==========================================================================
void AddChatMessage (string nick, string text) {
}


//==========================================================================
//
//  AddCenterMessage
//
//==========================================================================
void AddCenterMessage (string Msg) {
}


//==========================================================================
//
//  AddHudMessage
//
//==========================================================================
void AddHudMessage (string Message, name Font, int Type, int Id, int Color,
                    string ColorName, float x, float y, int HudWidth, int HudHeight,
                    float HoldTime, float Time1, float Time2, float Alpha)
{
}


defaultproperties {
  bLocalServer = true;
}
