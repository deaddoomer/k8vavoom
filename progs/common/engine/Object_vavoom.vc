//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
//
//  VaVoom-specific things
//
//==========================================================================
native static final bool IsIWadClass (class C) [property(class) IWad];


const int MAXPLAYERS = 8;

// some defines for ACS (and other) flags
const int MF_SPECIAL = 0x00000001;
const int MF_SOLID = 0x00000002;
const int MF_SHOOTABLE = 0x00000004;
const int MF_NOSECTOR = 0x00000008;
const int MF_NOBLOCKMAP = 0x00000010;
const int MF_AMBUSH = 0x00000020;
const int MF_JUSTHIT = 0x00000040;
const int MF_JUSTATTACKED = 0x00000080;
const int MF_SPAWNCEILING = 0x00000100;
const int MF_NOGRAVITY = 0x00000200;
const int MF_DROPOFF = 0x00000400;
const int MF_PICKUP = 0x00000800;
const int MF_NOCLIP = 0x00001000;
const int MF_INCHASE = 0x00002000;
const int MF_FLOAT = 0x00004000;
const int MF_TELEPORT = 0x00008000;
const int MF_MISSILE = 0x00010000;
const int MF_DROPPED = 0x00020000;
const int MF_SHADOW = 0x00040000;
const int MF_NOBLOOD = 0x00080000;
const int MF_CORPSE = 0x00100000;
const int MF_INFLOAT = 0x00200000;
const int MF_INBOUNCE = 0x00200000;
const int MF_COUNTKILL = 0x00400000;
const int MF_COUNTITEM = 0x00800000;
const int MF_SKULLFLY = 0x01000000;
const int MF_NOTDMATCH = 0x02000000;
const int MF_SPAWNSOUNDSOURCE = 0x04000000;
const int MF_FRIENDLY = 0x08000000;
const int MF_UNMORPHED = 0x10000000;
const int MF_NOLIFTDROP = 0x20000000;
const int MF_STEALTH = 0x40000000;
const int MF_ICECORPSE = 0x80000000;


//**************************************************************************
//**
//**    CLIENT DEFINES
//**
//**************************************************************************

// horisontal text alignement
enum {
  hleft,
  hcenter,
  hright,
};

// vertical text alignement
enum {
  vtop,
  vcenter,
  vbottom,
};

enum {
  HUDMSG_PLAIN,
  HUDMSG_FADEOUT,
  HUDMSG_TYPEON,
  HUDMSG_FADEINOUT,
  // flags
  HUDMSG_LOG         = 0x80000000,
  HUDMSG_COLORSTRING = 0x40000000,
  // more gozzo flags
  HUDMSG_ADDBLEND    = 0x20000000,
  HUDMSG_ALPHA       = 0x10000000,
  HUDMSG_NOWRAP      = 0x08000000,
}

enum HUDMsgType {
  Plain,
  FadeOut,
  TypeOn,
  FadeInOut,
}

// flags
enum HUDMsgFlag {
  Log          = 0x80000000,
  ColorString  = 0x40000000,
}

// text colors
enum {
  //CR_UNDEFINED = -1,
  //
  CR_BRICK, //A
  CR_TAN, //B
  CR_GRAY, //C
  CR_GREEN, //D
  CR_BROWN, //E
  CR_GOLD, //F
  CR_RED, //G
  CR_BLUE, //H
  CR_ORANGE, //I
  CR_WHITE, //J
  CR_YELLOW, //K
  CR_UNTRANSLATED, //L
  CR_BLACK, //M
  CR_LIGHTBLUE, //N
  CR_CREAM, //O
  CR_OLIVE, //P
  CR_DARKGREEN, //Q
  CR_DARKRED, //R
  CR_DARKBROWN, //S
  CR_PURPLE, //T
  CR_DARKGRAY, //U
  CR_CYAN, //V
  CR_ICE, //W
  CR_FIRE, //X
  CR_SAPPHIRE, //Y
  CR_TEAL, //Z
  // special
  CR_RED_ERROR,
  CR_WARNING_YELLOW,
  CR_DEBUG_GREEN,
  CR_DEBUG_CYAN,
  CR_INIT_CYAN,
  CR_SLIDER_HI_KNOB,
  // no more
  NUM_TEXT_COLORS,
  //
  CR_UNDEFINED = 0x00_ad_f0_0d,
};

// status bar view type
enum {
  SB_VIEW_NORMAL,
  SB_VIEW_AUTOMAP,
  SB_VIEW_FULLSCREEN
};


//**************************************************************************
//
//  Client types
//
//**************************************************************************

// server list

enum { HOSTCACHESIZE = 32 };

struct hostcache_t {
  string Name;
  string Map;
  string CName;
  array!string WadFiles;
  int Users;
  int MaxUsers;
  int DeathMatch; // dm mode
  bool bGoodProtocol;
  bool bGoodWadList;
  bool bPasswordProtected;
};

struct slist_t {
  bool bInProgress;
  hostcache_t[] Cache;
  //hostcache_t *Cache;
  //int Count;
  string ReturnReason;
};

struct IntermissionText {
  string Text;
  name TextFlat;
  name TextPic;
  name TextMusic;
  bool bTextIsLump;
};

struct IntermissionInfo {
  name LeaveMap;
  int LeaveCluster;
  string LeaveName;
  name LeaveTitlePatch;
  name ExitPic;

  name EnterMap;
  int EnterCluster;
  string EnterName;
  name EnterTitlePatch;
  name EnterPic;

  name InterMusic;

  IntermissionText LeaveText;
  IntermissionText EnterText;
};

struct picinfo_t {
  int width;
  int height;
  int xoffset;
  int yoffset;
  float xscale;
  float yscale;
  int widthNonScaled;
  int heightNonScaled;
  int xoffsetNonScaled;
  int yoffsetNonScaled;
};

struct EpisodeDef {
  name Name;
  name TeaserName;
  string Text;
  name PicName;
  bool bLookupText;
  bool bNoSkillMenu;
  bool bOptional;
  string Key;
  int MapinfoSourceLump;
};

struct SkillPlayerClassName {
  string ClassName;
  string MenuName;
};

// it is guaranteed to be `EntityEx` by the engine
struct SkillMonsterReplacement {
  class!EntityEx oldClass;
  class!EntityEx newClass; // note that this can be `none`!
};

struct SkillDef {
  string Name;
  float AmmoFactor;
  float DoubleAmmoFactor;
  float DamageFactor;
  float RespawnTime;
  int RespawnLimit;
  float Aggressiveness;
  int SpawnFilter;
  int AcsReturn;
  string MenuName;
  array!SkillPlayerClassName PlayerClassNames;
  string ConfirmationText;
  string Key;
  string TextColor;
  bool bFastMonsters;
  bool bDisableCheats;
  bool bEasyBossBrain;
  bool bAutoUseHealth;
  bool bMenuNameIsPic;
  bool bMustConfirm;
  bool bSlowMonsters;
  // monster replacements for each skill
  // WARNING! currently it works only for predefined map spawns!
  array!SkillMonsterReplacement Replacements;
};


struct DamageFactor {
  name DamageType;
  float Factor;
  bool replaceFactor;
  bool skipArmor;
};


//==========================================================================
//
//              COMMON BUILTINS
//
//==========================================================================

// "doom", "doom2", "tnt", "plutonia" -- you got the idea
static final string GameName { get { return GetCvarS('game_name'); } }

static final bool IsDoom {
  get {
    string gn = GetCvarS('game_name');
    return
      stricmp(gn, "doom") == 0 ||
      stricmp(gn, "freedoom") == 0 ||
      stricmp(gn, "chex") == 0 ||
      stricmp(gn, "chex2") == 0;
  }
}

static final bool IsDoom2 {
  get {
    string gn = GetCvarS('game_name');
    return
      stricmp(gn, "doom2") == 0 ||
      stricmp(gn, "freedoom2") == 0;
  }
}

static final bool IsAnyDoom2 {
  get {
    string gn = GetCvarS('game_name');
    return
      stricmp(gn, "doom") != 0 &&
      stricmp(gn, "heretic") != 0 &&
      stricmp(gn, "hexen") != 0 &&
      stricmp(gn, "strife") != 0 &&
      stricmp(gn, "chex") != 0 &&
      stricmp(gn, "freedoom") != 0 &&
      // DiD
      stricmp(gn, "chex2") != 0 &&
      stricmp(gn, "chex3") != 0;
  }
}

static final bool IsPlutonia { get { return (stricmp(GetCvarS('game_name'), "plutonia") == 0); } }
static final bool IsTnt { get { return (stricmp(GetCvarS('game_name'), "tnt") == 0); } }
static final bool IsNerve { get { return (stricmp(GetCvarS('game_name'), "nerve") == 0); } }
static final bool IsStrife { get { return (stricmp(GetCvarS('game_name'), "strife") == 0); } }

static final bool IsReleaseMode { get { return GetCvarB('release_mode'); } }
//static final bool IsDeveloperVersion { get { return GetCvarB('k8vavoom_developer_version'); } }
#ifdef K8_DEVELOPER
const int IsDeveloperVersion = true;
#else
const int IsDeveloperVersion = false;
#endif


// ////////////////////////////////////////////////////////////////////////// //
// texture / flat number retrieval

native static final int CheckTextureNumForName (name Name);
native static final int TextureNumForName (name Name);
native static final int CheckFlatNumForName (name Name);
native static final int FlatNumForName (name Name);
native static final float TextureHeight (int pic);
native static final name GetTextureName (int Handle);


// ////////////////////////////////////////////////////////////////////////// //
native static final float GetLightMaxDist ();
native static final float GetDynLightMaxDist ();
native static final float GetLightMaxDistDef (float defval);

native static final bool CheckViewOrgDistance (const TVec org, const float dist);
native static final bool CheckViewOrgDistance2D (const TVec org, const float dist);


// ////////////////////////////////////////////////////////////////////////// //
// console command functions

native static final int Cmd_CheckParm (string str);
native static final int Cmd_GetArgC ();
native static final string Cmd_GetArgV (int idx);
// adds text to command buffer, same as typing it in console
native static final void CmdBuf_AddText (string format, ...) [printf,1];


// ////////////////////////////////////////////////////////////////////////// //
// keyboard cheats

native static final void KBCheatClearAll ();
native static final void KBCheatAppend (string keys, string concmd);


// ////////////////////////////////////////////////////////////////////////// //
// state methods

native static final bool AreStateSpritesPresent (state State);


// ////////////////////////////////////////////////////////////////////////// //
// misc

// reads key value from info string (userinfo or serverinfo)
native static final string Info_ValueForKey (string info, string key);
// checks if WAD lump is present, used to check for shareware/extended WADs
native static final bool WadLumpPresent (name Name);
native static final GameObject::VAnimDoorDef *FindAnimDoor (int BaseTex);
native static final bool IsAnimatedTexture (int Tex);
native static final bool HasLangString (string Id); // without leading '$'
native static final string GetLangString (string Id); // without leading '$'
native static final string TranslateString (string Id); // *WITH* leading '$'
native static final GameObject::LockDef *GetLockDef (int Lock);
// this returns color with high byte set to `0xff` (and black color for unknown names)
// but when `retZeroIfInvalid` is `true`, it returns `0` for unknown color
native static final int ParseColor (string Name, optional bool retZeroIfInvalid/*=false*/, optional bool showError/*=true*/);
native static final string TextColorString (int Color);
native static final bool StartTitleMap ();
native static final bool IsAutoloadingMapFromCLI ();
native static final void LoadBinaryLump (name LumpName, out array!ubyte Array);

native static final bool HasDecal (name aname);


struct VMapSpecialAction {
  name TypeName;
  int Special;
  int Args[5];
};


struct MapInfo {
  name LumpName;
  string Name; // name of map
  int LevelNum; // level number for action specials
  int Cluster; // defines what cluster level belongs to
  int WarpTrans; // actual map number in case maps are not sequential
  name NextMap; // map to teleport to upon exit of timed deathmatch
  name SecretMap; // map to teleport upon secret exit
  name SongLump; // background music (MUS or MIDI)
  int Sky1Texture; // default sky texture
  int Sky2Texture; // alternate sky displayed in Sky2 sectors
  float Sky1ScrollDelta; // Default sky texture speed
  float Sky2ScrollDelta; // Alternate sky texture speed
  name SkyBox; // sky box
  name FadeTable; // fade table {fogmap}
  int Fade; // unsigned
  int OutsideFog; // unsigned
  float Gravity; // Map gravity
  float AirControl; // Air control in this map.
  int Flags; // unsigned
  int Flags2; // unsigned
  name EnterTitlePatch;
  name ExitTitlePatch; // if empty, `EnterTitlePatch` will be used
  int ParTime;
  int SuckTime;
  ubyte HorizWallShade;
  ubyte VertWallShade;
  ubyte Infighting;
  array!VMapSpecialAction SpecialActions;
  name RedirectType;
  name RedirectMap;
  name ExitPic;
  name EnterPic;
  name InterMusic;
  int MapinfoSourceLump;
  int FakeContrast; // 0: vanilla; <0: disabled; 1: even; 2: smooth
  // exit texts will override cluster exit texts
  string ExitText;
  string SecretExitText;
  name InterBackdrop; // used only when we have map exit text
};

// by lump name; checks for the actual lump presence, ignoring known map list
native static final bool IsMapPresent (name MapName);

// by `LevelNum`
native static final int P_GetMapIndexByLevelNum (int map);

native static final int P_GetNumMaps ();
// by index; [0..P_GetNumMaps)
native static final MapInfo *P_GetMapInfo (int map);


//==========================================================================
//
//              CLIENT BUILTINS
//
//==========================================================================

// ////////////////////////////////////////////////////////////////////////// //
// graphics

native static final void SetVirtualScreen (int Width, int Height);
native static final int GetVirtualWidth ();
native static final int GetVirtualHeight ();
native static final int GetRealScreenWidth ();
native static final int GetRealScreenHeight ();

// returns screen size in "blocks"
// [3..12] (or [10..12])
// 10 is "vanilla size with statusbar"
// 11 is "fullscreen with vanilla statusbar, but without rocky fill"
// 12 is "fullscreen with fullscreen stats"
// 13 is "no statusbar/stats at all"
enum {
  R_SCREEN_BLOCKS_FS_STATUSBAR = 11,
  R_SCREEN_BLOCKS_FS_STATS = 12,
  R_SCREEN_BLOCKS_NO_STATUSBAR = 13,
}
native static final int R_GetScreenBlocks ();

// registers a graphic, returns handle
native static final int R_RegisterPic (name Name);
// registers a graphic with custom palette, returns handle
native static final int R_RegisterPicPal (name Name, name palname);
// registers a graphic with a full path, returns handle
native static final int R_RegisterPicPath (name path);
// retrieves pic info
native static final void R_GetPicInfo (int handle, picinfo_t *info);
// WARNING! this is slow for the first time, and loads image into memory
native static final void R_GetPicRealDimensions (int handle, out int x0, out int y0, out int width, out int height, optional bool unscaled);
// draws a pic
native static final void R_DrawPic (int x, int y, int handle, optional float alpha);
native static final void R_DrawPicFloat (float x, float y, int handle, optional float alpha);
// draws a pic
// pwdt and phgt are in [0..1]
native static final void R_DrawPicPart (int x, int y, float pwdt, float phgt, int handle, optional float alpha);
native static final void R_DrawPicFloatPart (float x, float y, float pwdt, float phgt, int handle, optional float alpha);
native static final void R_DrawPicPartEx (int x, int y, float tx0, float ty0, float tx1, float ty1, int handle, optional float alpha);
native static final void R_DrawPicFloatPartEx (float x, float y, float tx0, float ty0, float tx1, float ty1, int handle, optional float alpha);
// installs a sprite model
native static final void R_InstallSprite (string Name, int index);
// call this to free temporary memory allocated by `R_InstallSprite()`
// it is not a bug to not call this, tho
native static final void R_InstallSpriteComplete ();
// draws a sprite
native static final void R_DrawSpritePatch (float x, float y, int sprite,
  optional int frame, optional int rot, optional int TranslStart, optional int TranslEnd,
  optional int Color, optional float scale/*=1*/);
// installs model
native static final void *InstallModel (string Name);
// draws a model
native static final void R_DrawModelFrame (TVec origin, float angle,
  void *model, int frame, int nextframe, string skin, int TranslStart,
  int TranslEnd, int Color);

// draws a colored rectangle
native static final void R_FillRect (float x, float y, float w, float h, int color, optional float alpha/*=1.0*/);
native static final void R_ShadeRect (float x, float y, float w, float h, float shade);
// the last point will not be drawn
native static final void R_DrawLine (float x0, float y0, float x1, float y1, int color, optional float alpha/*=1.0*/);
native static final void R_DrawRect (float x, float y, float w, float h, int color, optional float alpha/*=1.0*/);

native static void R_FillRectWithFlat (float x, float y, float width, float height, name Name);
native static void R_FillRectWithFlatRepeat (float x, float y, float width, float height, name Name);

// calculated with regards to screen size
native static float R_GetAspectRatio ();
// calculated without regards to screen size (i.e. 4.0/3.0, for example)
native static float R_GetAspectRatioValue ();

// known aspect ratios list
native static final int R_GetAspectRatioCount ();
native static final int R_GetAspectRatioHoriz (int idx);
native static final int R_GetAspectRatioVert (int idx);
native static final string R_GetAspectRatioDsc (int idx);

// check if advrender can be used (for use in menu system only!)
native static final bool R_SupportsShadowVolumeRendering ();
native static final bool R_SupportsShadowMapRendering ();

// returns 0 if no translation found
native static final int R_GetBloodTranslation (int color, optional bool allowadd/*=false*/);
native static final int R_FindNamedTranslation (string trname);

// returns 0 if translation cannot be created
native static final int R_CreateDesaturatedTranslation (int AStart, int AEnd, float rs, float gs, float bs, float re, float ge, float be);
native static final int R_CreateBlendedTranslation (int AStart, int AEnd, int r, int g, int b);
native static final int R_CreateTintedTranslation (int AStart, int AEnd, int r, int g, int b, int amount);

// [0..255]; a=0 is fully transparent, a=255 is fully opaque
struct ColorRGBA {
  int r, g, b, a;
}

// will resize array if necessary
native static final void R_GetGamePalette (ref array!ColorRGBA pal);
native static final void R_GetTranslatedPalette (int transnum, ref array!ColorRGBA pal);
//  color 0 *WILL* be translated too!
native static final int R_CreateColorTranslation (const ref array!ColorRGBA pal);

// some colors (we don't have special "color" cvar type yet)
enum SBTextColor {
  Ammo = 0,
  Ammo1 = 0,
  Ammo2,
  Armor,
  Health,
  HealthAccum,
  Frags,
  // small numbers
  SmallAmmo,
  SmallMaxAmmo,
  ItemAmount,
  // smaller ammo counters
  WeaponAmmoFull,
  WeaponAmmoNormal,
  WeaponAmmoLower,
  WeaponAmmoLow,
  WeaponAmmoVeryLow,
  //
  WeaponName,
  // automap stats
  AutomapMapName,
  AutomapMapCluster,
  AutomapKills,
  AutomapItems,
  AutomapSecrets,
  AutomapGameTotalTime,
}

native static final int SB_GetTextColor (SBTextColor type, optional int defval);


// ////////////////////////////////////////////////////////////////////////// //
// client sound stuff

// plays a sound
native static final void LocalSound (name Name);
// checks if sound is still playing
native static final bool IsLocalSoundPlaying (name Name);
// stops all local sounds
native static final void StopLocalSounds ();

native static final bool MUS_IsMusicAvailable ();
native static final bool MUS_IsMusicPlaying ();
native static final void MUS_ResetMusicLoopCounter ();
native static final int MUS_GetMusicLoopCounter ();
native static final void MUS_IncMusicLoopCounter ();

// get list of sound resamplers
native static final int SND_GetResamplerCount ();
native static final string SND_GetResamplerName (int idx);
native static final int SND_GetDefaultResampler ();


// ////////////////////////////////////////////////////////////////////////// //
// soundfont list

// get number of known soundfonts
native static final int SF2_GetCount ();

// get full soundfont name (to use with "snd_sf2_file")
native static final string SF2_GetName (int idx);
// get short soundfont name (to use in menu)
native static final string SF2_GetShortName (int idx);

// get soundfount hash to use with `FS_*()` API
native static final string SF2_GetHash (int idx);


// ////////////////////////////////////////////////////////////////////////// //
// misc stuff
native static final string P_GetMapName (int map);
native static final name P_GetMapLumpName (int map);
native static final name P_TranslateMap (int map);
native static final int P_GetNumEpisodes ();
native static final EpisodeDef *P_GetEpisodeDef (int i);
native static final int P_GetNumSkills ();
native static final SkillDef *P_GetSkillDef (int i);
native static final bool SV_GetSaveString (int i, out string buf);
native static final void SV_GetSaveDateString (int i, out string buf);
native static final string SV_GetSaveHash ();
native static final void StartSearch (bool Master);
native static final slist_t *GetSlist ();

native static final string TranslateKey (int c); // handle shift+key
native static final string KeyNameForNum (int KeyNr);

native static final void IN_GetBindingKeys (string cmd, int *key1, int *key2, int strifemode, string modSection, out int isActive);
native static final void IN_GetDefaultModBindingKeysEx (string cmd, ref array!int keylist, string modSection);
native static final void IN_GetBindingKeysEx (string cmd, ref array!int keylist, int strifemode, string modSection);

// strifemode: <0: only for non-strife; >0: only for strife; 0: for all
native static final void IN_SetBinding (int key, string ondown, string onup, int strifemode, string modSection);

native static final string LoadTextLump (name Name);

native static bool IsLineTagEqual (const GameObject::line_t *line, int tag);
native static bool IsSectorTagEqual (const GameObject::sector_t *sector, int tag);


//==========================================================================
//
//              SERVER BUILTINS
//
//==========================================================================

// ////////////////////////////////////////////////////////////////////////// //
// map utilites

// given a point (x,y), returns the point (ox,oy) on the sector's defining
// lines that is nearest to (x,y).
// ignores `z`.
native static final TVec SectorClosestPoint (const GameObject::sector_t *sec, const TVec in);

// can return `nullptr` for empty sectors
native static final GameObject::line_t *SectorClosestLine (const GameObject::sector_t *sec, const TVec in);


// ////////////////////////////////////////////////////////////////////////// //
// sound functions

native static final bool GetSoundPlayingInfo (Entity mobj, int sound_id);
native static final int GetSoundID (name Name);
native static final void SetSeqTrans (name Name, int Num, int SeqType);
native static final name GetSeqTrans (int Num, int SeqType);
native static final name GetSeqSlot (name Sequence);
native static final void StopAllSounds (optional bool keepLastSwitch);

native static final GameObject::VTerrainInfo *TerrainType (int pic, bool asPlayer); // never returns `nullptr`
native static final GameObject::VTerrainBootprint *TerrainBootprint (int pic); // can return `nullptr`
native static final GameObject::VSplashInfo *GetSplashInfo (name Name); // can return `nullptr`
native static final GameObject::VTerrainInfo *GetTerrainInfo (name Name); // can return `nullptr`

// returns 0 if not found
// can return `nullptr`
native static final int FindLineSpecialByName (string s, optional out GameObject::VLineSpecInfo info);
// returns empty string if not found
native static final string FindLineSpecialNameByNumber (int num, optional out GameObject::VLineSpecInfo info);
// get info by index
native static final bool GetLineSpecialInfoByNumber (int num, optional out GameObject::VLineSpecInfo info);
// return 0 if not found
native static final int FindScriptLineSpecialByName (string s);


// ////////////////////////////////////////////////////////////////////////// //

// called in `SpawnPlayer()` and player class changes, to awake the statusbar
// this, in turn, simply calls `StatusBarStartMap()`
native static final void SB_Start ();

native static final class FindClassFromEditorId (int Id, int GameFilter);
native static final class FindClassFromScriptId (int Id, int GameFilter);


// ////////////////////////////////////////////////////////////////////////// //
// returns `false` if there is no player
native static final bool AM_GetPlayerPos (out float xc, out float yc, out float angle);
native static final void AM_DrawAtWidget (Widget w, float xc, float yc, float scale, float angle, float plrangle, float alpha);


// ////////////////////////////////////////////////////////////////////////// //
// wad lump iteration
// boom namespaces
enum EWadNamespace {
  Global,
  Sprites,
  Flats,
  ColorMaps,
  ACSLibrary,
  NewTextures,
  Voices,
  HiResTextures,

  // special namespaces for zip files, in wad file they will be searched in global namespace
  ZipSpecial,
  Patches,
  Graphics,
  Sounds,
  Music,
};

native static final int W_IterateNS (int Prev, EWadNamespace NS);
native static final int W_IterateFile (int Prev, string Name);
native static final int W_IterateDirectory (int Prev, string Name, optional bool allowSubdirs/*=true*/);

//WARNING! UNSAFE!
// only use lump number from iterator here!
native static final int W_LumpLength (int lump);
native static final name W_LumpName (int lump); // max 8 chars
native static final string W_RealLumpName (int lump); // full name with path, but without archive name
native static final string W_FullLumpName (int lump); // full name with path, and with archive name
native static final int W_LumpFile (int lump);

native static final bool W_IsIWADLump (int lump);
native static final bool W_IsIWADFile (int file);

// not pk3, not disk
native static final bool W_IsWADLump (int lump);
native static final bool W_IsWADFile (int file);

// added with "-file"?
native static final bool W_IsPWADLump (int lump);
native static final bool W_IsPWADFile (int file);

native static final int W_CheckNumForName (name Name, optional EWadNamespace NS /*= WADNS_Global*/);
native static final int W_GetNumForName (name Name, optional EWadNamespace NS /*= WADNS_Global*/);

// you can use result of `W_LumpFile()` with the following
native static final int W_CheckNumForNameInFile (name Name, int File, optional EWadNamespace NS /*= WADNS_Global*/);

// in userdata dir
native static final bool FS_FileExists (string fname);
native static final string FS_ReadFileContents (string fname); // returns empty string on error/no file
native static final bool FS_WriteFileContents (string fname, string contents);


//==========================================================================
//
//  `foreach` Lump iteration
//
//==========================================================================
struct WadLumpIteratorInfoNS {
  EWadNamespace ns;
  int curr;
}

static final bool WadIterateNS_opIterInit (out WadLumpIteratorInfoNS it, EWadNamespace ns) {
  it.ns = ns;
  it.curr = W_IterateNS(-1, ns);
  return (it.curr >= 0);
}

static final bool WadIterateNS_opIterNext (ref WadLumpIteratorInfoNS it, out int lumpnum) {
  if (it.curr < 0) return false; // done
  lumpnum = it.curr;
  it.curr = W_IterateNS(it.curr, it.ns);
  return true;
}


// ////////////////////////////////////////////////////////////////////////// //
struct WadLumpIteratorInfoName {
  string fname;
  int curr;
}

static final bool WadIterateFile_opIterInit (out WadLumpIteratorInfoName it, string fname) {
  it.fname = fname;
  it.curr = W_IterateFile(-1, fname);
  return (it.curr >= 0);
}

static final bool WadIterateFile_opIterNext (ref WadLumpIteratorInfoName it, out int lumpnum) {
  if (it.curr < 0) return false; // done
  lumpnum = it.curr;
  it.curr = W_IterateFile(it.curr, it.fname);
  return true;
}


// ////////////////////////////////////////////////////////////////////////// //
struct WadDirIteratorInfoName {
  string dirname;
  int curr;
  bool allowSubdirs;
}

static final bool WadIterateDirectory_opIterInit (out WadDirIteratorInfoName it, string dirname, optional bool allowSubdirs/*=true*/) {
  if (!specified_allowSubdirs) allowSubdirs = true;
  it.dirname = dirname;
  it.allowSubdirs = allowSubdirs;
  it.curr = W_IterateDirectory(-1, dirname, allowSubdirs);
  return (it.curr >= 0);
}

static final bool WadIterateDirectory_opIterNext (ref WadDirIteratorInfoName it, out int lumpnum) {
  if (it.curr < 0) return false; // done
  lumpnum = it.curr;
  it.curr = W_IterateDirectory(it.curr, it.dirname, it.allowSubdirs);
  return true;
}
