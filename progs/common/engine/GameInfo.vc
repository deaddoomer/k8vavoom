//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2023 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
// gameinfo object is global, and created on server start
// this class is subclassed with `LineSpecialGameInfo`, and
// then "LSGI" subclassed for each game with `MainGameInfo`
// if you need to create your own in your VavoomC mod, do it like this:
//   class MyMod_GameInfo : replaces(lastchild of GameInfo);
// this way it will be compatible with other VavoomC mods
//
class GameInfo : GameObject native abstract;

// network mode
enum {
  NM_None, // not running a game
  NM_TitleMap, // playing a titlemap
  NM_Standalone, // standalone single player game
  NM_DedicatedServer, // dedicated server, no local client
  NM_ListenServer, // server with local client
  NM_Client, // client only, no local server
};

enum {
  FastModeNormal = 0,
  FastModeFast = 1,
  FastModeSlow = 2,
  // this makes only states marked with "fast" faster
  FastModeFastStates = 3,
  // make every state faster
  FastModeFastEveryState = 4,
}

name AcsHelper;
name GenericConScript;

readonly ubyte NetMode;
readonly ubyte deathmatch;
ubyte respawn;
ubyte nomonsters;
ubyte fastparm; // 0:normal; 1:fast; 2:slow
// the following flags are valid only for `NM_Client`
readonly bool bRunDisabled;
readonly bool bMouseLookDisabled;
readonly bool bCrouchDisabled;
readonly bool bJumpDisabled;

//readonly int *validcount;
readonly int skyflatnum;

readonly WorldInfo WorldInfo;

readonly BasePlayer Players[MAXPLAYERS]; // bookkeeping on players (state)

int RebornPosition;

readonly float frametime;

float FloatBobOffsets[64];
int PhaseTable[64];

class!LevelInfo LevelInfoClass;
class!PlayerReplicationInfo PlayerReplicationInfoClass;

int GameFilterFlag;

array!class PlayerClasses;

bool bDefaultLaxMonsterActivation;
bool bDefaultBloodSplatter;
readonly bool bPaused;
bool bForceKillScripts;

// from decorate
array!DamageFactor CustomDamageFactors;

final bool netgame { get { return NetMode > NM_Standalone; } }

final bool IsAuthority { get { return (NetMode != NM_Client); } }
final bool IsNetServer { get { return (NetMode == NM_DedicatedServer || NetMode == NM_ListenServer); } }
final bool IsDedicatedServer { get { return (NetMode == NM_DedicatedServer); } }
final bool IsListenServer { get { return (NetMode == NM_ListenServer); } }
final bool IsNetClient { get { return (NetMode == NM_ListenServer || NetMode == NM_Client); } }
final bool IsDumbClient { get { return (NetMode == NM_Client); } }

// this is way more reliable than `bPaused`
// game may be paused when menu active or something
// and `bPaused` only says that player pressed "pause" key
final native bool isPaused { get; }
final native bool isInWipe { get; }


//==========================================================================
//
//  ParseCVarInfo
//
//==========================================================================
void ParseCVarInfo () {
  foreach (int lump; WadIterateNS(EWadNamespace.Global)) {
    if (W_LumpName(lump) == 'cvarinfo') {
      //print("CVARINFO: found in '%s'", W_FullLumpName(lump));
      auto par = SpawnObject(ScriptsParser);
      scope(exit) delete par;
      par.OpenLumpIndex(lump);
      par.SetCMode(true);
      par.SetEscape(true);
      string help;
      for (;;) {
        int flags = CVAR_FROMMOD|CVAR_ARCHIVE;
        if (par.Check("server")) {
          //writeln("*** CVAR: SERVER");
          if (GetCvarB('mod_allow_server_cvars')) flags |= CVAR_SERVERINFO;
        } else if (par.Check("user")) {
          //writeln("*** CVAR: USER");
        } else {
          if (!par.GetString()) break;
          par.ScriptError("CVARINFO ERROR: unknown command '%s'", par.String);
        }
        // flags and options
        help = "";
        for (;;) {
               if (par.Check("noarchive")) flags &= ~CVAR_ARCHIVE;
          else if (par.Check("cheat")) flags |= CVAR_CHEAT;
          else if (par.Check("latch")) flags |= CVAR_LATCH;
          else if (par.Check("acs")) flags |= CVAR_ACS;
          else break;
        }
        // value
        float fval = 0;
        string sval = "";
        bool isint = false;
        bool isfloat = false;
        bool isstr = false;
        bool isbool = false;
        bool iscolor = false;
        // type
             if (par.Check("int")) isint = true;
        else if (par.Check("float")) isfloat = true;
        else if (par.Check("bool")) isbool = true;
        else if (par.Check("string")) isstr = true;
        else if (par.Check("color")) { iscolor = true; sval = "00 00 00"; }
        else par.ScriptError("CVARINFO ERROR: unknown cvar type '%s'", par.String);
        // name
        if (!isint && !isfloat && !isstr && !isbool && !iscolor) isint = true;
        par.ExpectIdentifier();
        name vname = name(par.String);
        // default value
        if (par.Check("=")) {
          //writeln("*** <", vname, "> ***");
          if (isfloat || isint) {
            par.ExpectFloat(withSign:true);
            fval = par.Float;
          } else if (isstr || iscolor) {
            par.ExpectString();
            sval = par.String;
          } else if (isbool) {
                 if (par.Check("true")) fval = 1;
            else if (par.Check("false")) fval = 0;
            else par.ScriptError("CVARINFO ERROR: invalid boolean value '%s'", par.String);
          } else {
            par.ScriptError("CVARINFO ERROR: cvar type?");
          }
        }
        if (par.Check(":")) {
          // help
          if (par.Check("k8_helptext")) {
            par.Expect("=");
            par.ExpectString();
            help = par.String;
          }
        }
        par.Expect(";");
        //print("CVAR: '%s'; fval=%s; sval=%s", vname, fval, sval);
        int oldcvflags = CvarGetFlags(vname);
        if (oldcvflags == -1 /*|| (oldcvflags&CVAR_FROMMOD) != 0*/) {
          //print("NEW CVAR: '%s'", vname);
          if (isstr || iscolor) {
            CreateCvarStr(vname, sval, (help ? help : "cvarinfo string variable"), flags);
          } else if (isbool) {
            CreateCvarBool(vname, !!fval, (help ? help : "cvarinfo bool variable"), flags);
          } else if (isfloat) {
            CreateCvarFloat(vname, fval, (help ? help : "cvarinfo float variable"), flags);
          } else {
            CreateCvarInt(vname, int(fval), (help ? help : "cvarinfo int variable"), flags);
          }
        }
      }
    }
  }
}


//==========================================================================
//
//  Init
//
//  called right after creation of this object
//  no decorate loaded yet, no sprites loaded, basically nothing is ready yet
//  use this to register you cvars and such
//
//==========================================================================
void Init () {
  ParseCVarInfo();
}


//==========================================================================
//
//  PostDecorateInit
//
//  this is called after parsing and compiling DECORATE code
//  at this stage, all known classes (actors and others) are loaded and ready
//  MAPINFO is not parsed yet, gfx and other things aren't loaded too
//
//==========================================================================
void PostDecorateInit () {
  foreach (auto idx; 0..PlayerClasses.length) {
    class/*!PlayerPawn*/ realplrclass = /*class!PlayerPawn*/(GetClassReplacement(PlayerClasses[idx]));
    if (realplrclass && realplrclass != PlayerClasses[idx]) {
      //print("replacement player class for '%C' is '%C' (ignored for now)", PlayerClasses[idx], realplrclass);
      printmsg(PMSG.Init, "replacement player class for '%C' is '%C'", PlayerClasses[idx], realplrclass);
      PlayerClasses[idx] = realplrclass;
    }
  }
}


//==========================================================================
//
//  PostPlayerClassInit
//
//  this is called after almost everything is loaded
//  MAPINFO already parsed, player classes are set, gfx is loaded
//  i.e. the engine is ready to go
//
//==========================================================================
void PostPlayerClassInit () {
}


//==========================================================================
//
//  CreateWorldInfo
//
//  this is called to create `WorldInfo` object on server spawn
//  ("server spawn" roughly means "loading a new map")
//  overriden in `LineSpecialGameInfo`
//  you usually don't need to override this
//
//==========================================================================
WorldInfo CreateWorldInfo () {
  return none;
}


//==========================================================================
//
//  InitNewGame
//
//  this is called after `WorldInfo.SetSkill()` is called
//  the argument is taken from WorldInfo object
//  (i.e. it can modify the skill)
//
//==========================================================================
void InitNewGame (int skill) {
}


//==========================================================================
//
//  InitTranslationTables
//
//  prepares various translation tables
//  called from `LineSpecialGameInfo::Init()`
//
//==========================================================================
void InitTranslationTables () {
}


//==========================================================================
//
//  TranslateLine
//
//  front sector is not set yet
//
//==========================================================================
void TranslateLine (VLevel InLevel, line_t *line) {
}


//==========================================================================
//
//  TranslateSector
//
//==========================================================================
void TranslateSector (VLevel InLevel, sector_t *sector) {
}


//==========================================================================
//
//  TranslateThing
//
//==========================================================================
void TranslateThing (VLevel InLevel, mthing_t *mthing) {
}


//==========================================================================
//
//  TranslateSpecialActions
//
//  called on map spawning
//  `Level`, `Game`, `World` are already set
//
//==========================================================================
void TranslateSpecialActions (VLevel InLevel, LevelInfo Level) {
}


//==========================================================================
//
//  TranslateLevel
//
//  called before `SpawnWorld()`
//
//==========================================================================
void TranslateLevel (VLevel InLevel) {
  foreach (auto i; 0..InLevel.Lines.length) TranslateLine(InLevel, cast([unsafe])(&InLevel.Lines[i]));
  foreach (auto i; 0..InLevel.Sectors.length) TranslateSector(InLevel, cast([unsafe])(&InLevel.Sectors[i]));
  foreach (auto i; 0..InLevel.Things.length) TranslateThing(InLevel, cast([unsafe])(&InLevel.Things[i]));
}


//==========================================================================
//
//  SpawnWorld
//
//  called after loading the map and performing translation, but
//  before any working map data is set
//  i.e. only barebones lines/sector info is ready, no lists are built
//  (lines for sectors, tags, etc.)
//
//==========================================================================
void SpawnWorld (VLevel InLevel) {
}


//==========================================================================
//
//  GetConScriptName
//
//==========================================================================
name GetConScriptName (name LevelName) {
  return '';
}


//==========================================================================
//
//  CmdWeaponSection
//
//==========================================================================
void CmdWeaponSection (string Section) {
}


//==========================================================================
//
//  CmdSetSlot
//
//==========================================================================
void CmdSetSlot (ref array!string Args, bool asKeyconf) {
}


//==========================================================================
//
//  CmdAddSlotDefault
//
//==========================================================================
void CmdAddSlotDefault (ref array!string Args, bool asKeyconf) {
}


defaultproperties {
  /*
  FloatBobOffsets[0] = 0.0; FloatBobOffsets[1] = 0.7841339111; FloatBobOffsets[2] = 1.560714722; FloatBobOffsets[3] = 2.322265625;
  FloatBobOffsets[4] = 3.061462402; FloatBobOffsets[5] = 3.77116394; FloatBobOffsets[6] = 4.444549561; FloatBobOffsets[7] = 5.075134277;
  FloatBobOffsets[8] = 5.656845093; FloatBobOffsets[9] = 6.184082031; FloatBobOffsets[10] = 6.651748657; FloatBobOffsets[11] = 7.055358887;
  FloatBobOffsets[12] = 7.391021729; FloatBobOffsets[13] = 7.655517578; FloatBobOffsets[14] = 7.8462677; FloatBobOffsets[15] = 7.961471558;
  FloatBobOffsets[16] = 7.999984741; FloatBobOffsets[17] = 7.961471558; FloatBobOffsets[18] = 7.8462677; FloatBobOffsets[19] = 7.655517578;
  FloatBobOffsets[20] = 7.391021729; FloatBobOffsets[21] = 7.055358887; FloatBobOffsets[22] = 6.651748657; FloatBobOffsets[23] = 6.184082031;
  FloatBobOffsets[24] = 5.656845093; FloatBobOffsets[25] = 5.075134277; FloatBobOffsets[26] = 4.444549561; FloatBobOffsets[27] = 3.77116394;
  FloatBobOffsets[28] = 3.061462402; FloatBobOffsets[29] = 2.322265625; FloatBobOffsets[30] = 1.560714722; FloatBobOffsets[31] = 0.7841339111;
  FloatBobOffsets[32] = -0.0000152587; FloatBobOffsets[33] = -0.7841491699; FloatBobOffsets[34] = -1.56072998; FloatBobOffsets[35] = -2.322280884;
  FloatBobOffsets[36] = -3.061477661; FloatBobOffsets[37] = -3.771179199; FloatBobOffsets[38] = -4.444564819; FloatBobOffsets[39] = -5.075149536;
  FloatBobOffsets[40] = -5.656860352; FloatBobOffsets[41] = -6.18409729; FloatBobOffsets[42] = -6.651763916; FloatBobOffsets[43] = -7.055374146;
  FloatBobOffsets[44] = -7.391052246; FloatBobOffsets[45] = -7.655532837; FloatBobOffsets[46] = -7.846298218; FloatBobOffsets[47] = -7.961486816;
  FloatBobOffsets[48] = -8.0; FloatBobOffsets[49] = -7.961486816; FloatBobOffsets[50] = -7.846298218; FloatBobOffsets[51] = -7.655532837;
  FloatBobOffsets[52] = -7.391052246; FloatBobOffsets[53] = -7.055374146; FloatBobOffsets[54] = -6.651763916; FloatBobOffsets[55] = -6.18409729;
  FloatBobOffsets[56] = -5.656860352; FloatBobOffsets[57] = -5.075149536; FloatBobOffsets[58] = -4.444564819; FloatBobOffsets[59] = -3.771179199;
  FloatBobOffsets[60] = -3.061477661; FloatBobOffsets[61] = -2.322280884; FloatBobOffsets[62] = -1.56072998; FloatBobOffsets[63] = -0.7841339111;
  */
  // this is sin table, multiplied by 8
  foreach (int phase; 0..64) FloatBobOffsets[phase] = sin(float(phase)*(360.0/64.0))*8;

  PhaseTable[0] = 128; PhaseTable[1] = 112; PhaseTable[2] = 96; PhaseTable[3] = 80; PhaseTable[4] = 64; PhaseTable[5] = 48; PhaseTable[6] = 32; PhaseTable[7] = 32;
  PhaseTable[8] = 16; PhaseTable[9] = 16; PhaseTable[10] = 16; //0, 0, 0, 0, 0,
  //0, 0, 0, 0, 0, 0, 0, 0,
  //0, 0, 0, 0, 0, 0, 0, 0,
  //0, 0, 0, 0, 0, 0, 0, 0,
  //0, 0, 0, 0, 0, 0, 0, 0,
  /*0, 0, 0, 0, 0,*/ PhaseTable[53] = 16; PhaseTable[54] = 16; PhaseTable[55] = 16;
  PhaseTable[56] = 32; PhaseTable[57] = 32; PhaseTable[58] = 48; PhaseTable[59] = 64; PhaseTable[60] = 80; PhaseTable[61] = 96; PhaseTable[62] = 112; PhaseTable[63] = 128;

  LevelInfoClass = LevelInfo;
  PlayerReplicationInfoClass = PlayerReplicationInfo;
}
