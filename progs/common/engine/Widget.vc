//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2020 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
#define VC_USE_PROPER_SCALING

class Widget : Object native;

struct VClipRect {
  // origin of the widget, in absolote coords
  float OriginX;
  float OriginY;

  // accomulative scale
  float ScaleX;
  float ScaleY;

  // clipping rectangle, in absolute coordinates
  float ClipX1;
  float ClipY1;
  float ClipX2;
  float ClipY2;
}


// VSplitLine
struct SplitLine {
  string Text;
  int Width;
}


// parent container widget
private readonly Widget ParentWidget;
// linked list of child widgets
private readonly Widget FirstChildWidget;
private readonly Widget LastChildWidget;
// links in the linked list of widgets
private readonly Widget PrevWidget;
private readonly Widget NextWidget;

// position of the widget in the parent widget
private int PosX;
private int PosY;
// offset for children
private int OfsX;
private int OfsY;
// size of the child area of the widget
private int SizeWidth;
private int SizeHeight;
// scaling of the widget
private float SizeScaleX;
private float SizeScaleY;

private readonly VClipRect ClipRect;

// currently focused child widget
private readonly Widget CurrentFocusChild;

private readonly void *Font;

// text alignements
private readonly ubyte HAlign;
private readonly ubyte VAlign;

// text cursor
private readonly int LastX;
private readonly int LastY;

// is this widget visible?
private bool bIsVisible;
// a flag that enables or disables Tick event
bool bTickEnabled;
// is this widget enabled and can receive input?
private bool bIsEnabled;
// can this widget be focused?
private bool bIsFocusable;
// mouse button state for click events
private readonly bool bLMouseDown;
private readonly bool bMMouseDown;
private readonly bool bRMouseDown;
// shadowed text
private readonly bool bTextShadowed;


// ////////////////////////////////////////////////////////////////////////// //
final Widget Parent { get { return ParentWidget; } }
final Widget FirstChild { get { return FirstChildWidget; } }
final Widget LastChild { get { return LastChildWidget; } }
final Widget Prev { get { return PrevWidget; } }
final Widget Next { get { return NextWidget; } }
final int X { get { return PosX; } set { SetX(value); } default PosX; }
final int Y { get { return PosY; } set { SetY(value); } default PosY; }
final int ChildrenOfsX { get { return OfsX; } set { SetOfsX(value); } default OfsX; }
final int ChildrenOfsY { get { return OfsY; } set { SetOfsY(value); } default OfsY; }
final int Width { get { return SizeWidth; } set { SetWidth(value); } default SizeWidth; }
final int Height { get { return SizeHeight; } set { SetHeight(value); } default SizeHeight; }
final float ScaleX { get { return SizeScaleX; } set { SetScale(value, SizeScaleY); } default SizeScaleX; }
final float ScaleY { get { return SizeScaleY; } set { SetScale(SizeScaleX, value); } default SizeScaleY; }
final bool Visible { get { return IsVisible(); } set { SetVisibility(value); } default bIsVisible; }
final bool Enabled { get { return IsEnabled(); } set { SetEnabled(value); } default bIsEnabled; }
final bool Focusable { get { return IsFocusable(); } set { SetFocusable(value); } default bIsFocusable; }

final int OldOriginX { get { return int(ClipRect.OriginX/ClipRect.ScaleX); } }
final int OldOriginY { get { return int(ClipRect.OriginY/ClipRect.ScaleY); } }

final void dumpClipRect (optional string msg) {
  print("CR: %s%ssize=(%d,%d); orig=(%f,%f); scale=(%f,%f); cr=(%f,%f)-(%f,%f)",
    msg, (msg ? "; " : ""),
    SizeWidth, SizeHeight,
    ClipRect.OriginX, ClipRect.OriginY, ClipRect.ScaleX, ClipRect.ScaleY,
    ClipRect.ClipX1, ClipRect.ClipY1, ClipRect.ClipX2, ClipRect.ClipY2);
}


// ////////////////////////////////////////////////////////////////////////// //
delegate void FocusLost (Object Sender);
delegate void FocusReceived (Object Sender);

delegate bool KeyDown (Object Sender, int Key);
delegate bool KeyUp (Object Sender, int Key);


// ////////////////////////////////////////////////////////////////////////// //
//  Creation and destruction of widgets.
native final spawner Widget NewChild (class!Widget ChildClass);
override native final void Destroy ();
native final void MarkDead ();
native final void DestroyAllChildren ();

native final RootWidget GetRootWidget ();

// methods to move widget on top or bottom
native final void Lower ();
native final void Raise ();
native final void MoveBefore (Widget Other);
native final void MoveAfter (Widget Other);

// methods to set position, size and scale
native final void SetPos (int NewX, int NewY);
native final void SetX (int NewX);
native final void SetY (int NewY);
native final void SetOfsX (int NewX);
native final void SetOfsY (int NewY);
native final void SetSize (int NewWidth, int NewHeight);
native final void SetWidth (int NewWidth);
native final void SetHeight (int NewHeight);
native final void SetScale (float NewScaleX, float NewScaleY);
native final void SetConfiguration (int NewX, int NewY, int NewWidth,
  int NewHeight, optional float NewScaleX, optional float NewScaleY);

// visibility methods
native final void SetVisibility (bool bNewVisibility);
native final void Show ();
native final void Hide ();
native final bool IsVisible (optional bool Recurse);

// enable state methods
native final void SetEnabled (bool bNewEnable);
native final void Enable ();
native final void Disable ();
native final bool IsEnabled (optional bool Recurse);

// focusable state methods
native final void SetFocusable (bool bNewFocusable);
native final bool IsFocusable ();

// focus methods
native final void SetCurrentFocusChild (Widget NewFocus);
native final Widget GetCurrentFocus ();
native final bool IsFocus (optional bool Recurse);
native final void SetFocus ();

native final void DrawPicScaledIgnoreOffset (int X, int Y, int Handle, optional float scaleX/*=1.0f*/, optional float scaleY/*=1.0f*/, optional float Alpha/*=1.0f*/, optional int Trans/*=0*/);

native final void DrawPic (int X, int Y, int Handle, optional float Alpha, optional int Translation);
native final void DrawPicScaled (int X, int Y, int Handle, float scaleX, float scaleY, optional float Alpha, optional int Translation);
native final void DrawShadowedPic (int X, int Y, int Handle);
native final void FillRectWithFlat (int x, int y, int width, int height, name Name);
native final void FillRectWithFlatRepeat (int x, int y, int width, int height, name Name);
native final void FillRect (int x, int y, int width, int height, int color, optional float alpha/*=1.0*/);
// the last point will not be drawn
native final void DrawLine (int x0, int y0, int x1, int y1, int color, optional float alpha/*=1.0*/);
native final void DrawRect (int x, int y, int width, int height, int color, optional float alpha/*=1.0*/);
// darkens a screen region
native final void ShadeRect (int x, int y, int w, int h, float shade);

// returns active font name
native final name GetFont ();
// selects active font
native final void SetFont (name font);
// changes text alignement
native final void SetTextAlign (int halign, int valign);
// enable/disable text shadow
native final void SetTextShadow (bool on);
// returns text bounds with respect to the current text align
// this ignores trailing newlines by default
native final void TextBounds (int x, int y, string text, out int x0, out int y0, out int width, out int height, optional bool trimTrailNL/*=true*/);
// calculates text width (correctly processes '\n')
native final int TextWidth (string text);
// calculates string width (no '\n' processing)
native final int StringWidth (string text);
// calculates text height
native final int TextHeight (string text);
// return current font height
native final int FontHeight ();
// splits text into lines that fit in specified width (trimRight default is true)
native final int SplitText (string Text, out array!SplitLine Lines, int Maxwidth, optional bool trimRight);
// splits text into lines that fit in specified width by inserting newlines (trimRight default is true)
native final string SplitTextWithNewlines (string Text, int Maxwidth, optional bool trimRight);
// draws text
native final void DrawText (int X, int Y, string Text, optional int Color, optional int BoldColor, optional float Alpha);
// draws a cursor at the end of last drawn string
native final void DrawCursor ();
// doesn't change current cursor position
native final void DrawCursorAt (int cx, int cy);
native final void SetCursorPos (int cx, int cy);
native final int CursorX { get; set; }
native final int CursorY { get; set; }
// returns color ID for specified name
native static final int FindTextColor (string Name);

/*
final int X2Virtual (float x) { return int(ClipRect.ScaleX*x+ClipRect.OriginX); }
final int Y2Virtual (float y) { return int(ClipRect.ScaleY*y+ClipRect.OriginY); }
*/

native final void TranslateXY (ref float x, ref float y);

final int X2Virtual (float x) { float tmp = 0; TranslateXY(x, tmp); return int(x); }
final int Y2Virtual (float y) { float tmp = 0; TranslateXY(tmp, y); return int(y); }

final void XY2Virtual (optional ref float x, optional ref float y) { TranslateXY(x, y); }


//==========================================================================
//
//  OnCreate
//
//  Called when widget has been just created.
//
//==========================================================================
void OnCreate () {}


//==========================================================================
//
//  OnDestroy
//
//  Called when widget is about to be destroyed.
//
//==========================================================================
void OnDestroy () {}


//==========================================================================
//
//  OnChildAdded
//
//  Called when a child widget is added.
//
//==========================================================================
void OnChildAdded (Widget Child) {}


//==========================================================================
//
//  OnChildRemoved
//
//  Called when a child widget is removed.
//
//==========================================================================
void OnChildRemoved (Widget Child) {}


//==========================================================================
//
//  OnConfigurationChanged
//
//  Called when position or size has been changed.
//
//==========================================================================
void OnConfigurationChanged () {}


//==========================================================================
//
//  OnVisibilityChanged
//
//  Called when this widget is shown or hidden.
//
//==========================================================================
void OnVisibilityChanged (bool bNewVisibility) {}


//==========================================================================
//
//  OnEnableChanged
//
//  Called when this widget is enabled or disabled.
//
//==========================================================================
void OnEnableChanged (bool bNewEnable) {}


//==========================================================================
//
//  OnFocusableChanged
//
//  Called when focusable flag of this widget is changed.
//
//==========================================================================
void OnFocusableChanged (bool bNewFocusable) {}


//==========================================================================
//
//  OnFocusReceived
//
//  Called when focus enters this widget.
//
//==========================================================================
void OnFocusReceived () { if (FocusReceived) FocusReceived(self); }


//==========================================================================
//
//  OnFocusLost
//
//  Called when focus leaves this widget.
//
//==========================================================================
void OnFocusLost () { if (FocusLost) FocusLost(self); }


//==========================================================================
//
//  OnDraw
//
//  Draws the window.
//
//==========================================================================
void OnDraw () {}


//==========================================================================
//
//  OnPostDraw
//
//  Draws the window (AFTER all children are drawn).
//
//==========================================================================
void OnPostDraw () {}


//==========================================================================
//
//  Tick
//
//  Called periodicly, but only when bTickEnabled is true.
//
//==========================================================================
void Tick (float DeltaTime) {}


//==========================================================================
//
//  SentEventToChildren
//
//  call this in `OnEvent()`
//  return `true` to prevent other handlers from being called.
//
//==========================================================================
bool SentEventToChildren (ref event_t evt) {
  // sent to all children
  Widget cw = FirstChildWidget;
  while (cw) {
    Widget w = cw;
    cw = cw.NextWidget;
    if (w.OnEvent(evt)) return true;
  }
  return false;
}


//==========================================================================
//
//  OnEvent
//
//  this is called before any other specific handler.
//  return `true` to prevent other handlers from being called.
//
//==========================================================================
bool OnEvent (ref event_t evt) {
  //if (evt.type == ev_resolution) printdebug("%C: *** RESOLUTION ***", self);
  return SentEventToChildren(evt);
}


//==========================================================================
//
//  OnKeyDown
//
//  Called for focused widget and it's parents when a key is pressed.
//
//==========================================================================
bool OnKeyDown (int Key) { return (KeyDown ? KeyDown(self, Key) : false); }


//==========================================================================
//
//  OnKeyUp
//
//  Called for focused widget and it's parents when a key is released.
//
//==========================================================================
bool OnKeyUp (int Key) { return (KeyUp ? KeyUp(self, Key) : false); }


//==========================================================================
//
//  OnMouseMove
//
//  Called when mouse moves over this widget.
//
//==========================================================================
bool OnMouseMove (int OldX, int OldY, int NewX, int NewY) { return false; }


//==========================================================================
//
//  OnMouseEnter
//
//  Called when mouse enters this widget.
//
//==========================================================================
void OnMouseEnter () {}


//==========================================================================
//
//  OnMouseLeave
//
//  Called when mouse leaves this widget.
//
//==========================================================================
void OnMouseLeave () {}


//==========================================================================
//
//  OnMouseDown
//
//  Called when mouse button is pressed.
//
//==========================================================================
bool OnMouseDown (int X, int Y, int Button) { return false; }


//==========================================================================
//
//  OnMouseUp
//
//  Called when mouse button is released.
//
//==========================================================================
bool OnMouseUp (int X, int Y, int Button) { return false; }


//==========================================================================
//
//  OnMouseClick
//
//  Callec when left mouse button is clicked on this widget.
//
//==========================================================================
void OnMouseClick (int X, int Y) {}


//==========================================================================
//
//  OnMMouseClick
//
//  Callec when middle mouse button is clicked on this widget.
//
//==========================================================================
void OnMMouseClick (int X, int Y) {}


//==========================================================================
//
//  OnRMouseClick
//
//  Callec when right mouse button is clicked on this widget.
//
//==========================================================================
void OnRMouseClick (int X, int Y) {}


//==========================================================================
//
//  SetOrigin
//
//  Sets origin of the widget. Some widget classes will adjust the position.
//
//==========================================================================
void SetOrigin (int x, int y) { SetPos(x, y); }


//==========================================================================
//
//  SetDefaultVirtualScreenSize
//
//  sets virtual screen size for UI
//  k8: this should be moved elsewhere, but meh...
//
//==========================================================================
static final void SetDefaultVirtualScreenSize () {
  int rw = GetRealScreenWidth();
  int rh = GetRealScreenHeight();
  int vw = (rw >= 1280 ? rw/2 : 640);
  int vh = (rh >= 960 ? rh/2 : 480);
  if (rw/3 >= 640 && rh/3 >= 480) {
    vw = rw/3;
    vh = rh/3;
  }
  if (rh > 480 && rh < 960) vh = rh/2;
  SetVirtualScreen(vw, vh);
}


//==========================================================================
//
//  DrawEmptyScreen
//
//  called when there is no title pic (not yet)
//
//==========================================================================
static final void DrawEmptyScreen () {
  //SetVirtualScreen(320, 200);
  //R_FillRect(0, 0, 320, 200, 0xff_303030);
  auto ovw = GetVirtualWidth();
  auto ovh = GetVirtualHeight();
  R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_202020);
}


//==========================================================================
//
//  DrawFullScreenPic
//
//==========================================================================
static final void DrawFullScreenPic (int Handle, optional bool dontRestoreVScreen, optional out int xofs, optional out int yofs, optional out float scale, optional bool dontClearScreen) {
  picinfo_t pinf;
  R_GetPicInfo(Handle, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
    xofs = 0;
    yofs = 0;
  } else {
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) if (!dontRestoreVScreen) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
#ifdef VC_USE_PROPER_SCALING
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pinf.width);
    float scaleY = float(rh/R_GetAspectRatio())/float(pinf.height);
    scale = (scaleX <= scaleY ? scaleX : scaleY);
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    //print("scaleX=%s; scaleY=%s; vsize=(%s,%s); psize=(%s,%s); ratio=%s", scaleX, scaleY, GetVirtualWidth(), GetVirtualHeight(), pinf.width, pinf.height, R_GetAspectRatio());
    xofs = (GetVirtualWidth()-pinf.width)/2;
    yofs = (GetVirtualHeight()-pinf.height)/2;
    R_DrawPic(xofs, yofs, Handle);
#else
    if (pinf.width >= 320 && pinf.height >= 200) {
      SetVirtualScreen(pinf.width, pinf.height);
    } else {
      SetVirtualScreen(320, 200);
    }
    R_DrawPic(0, 0, Handle);
#endif
  }
}


//==========================================================================
//
//  DrawFullScreenPicFinale
//
//==========================================================================
static final void DrawFullScreenPicFinale (int Handle, optional bool dontClearScreen) {
#ifndef VC_USE_PROPER_SCALING
  DrawFullScreenPic(Handle, dontClearScreen:dontClearScreen!optional);
  //if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
  //DrawPicFS320(xofs320, yofs200, Handle);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pinf.width);
    float scaleY = float(rh/R_GetAspectRatio())/float(pinf.height);
    float scale = (scaleX >= scaleY ? scaleX : scaleY);
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    //print("scaleX=%s; scaleY=%s; vsize=(%s,%s); psize=(%s,%s); ratio=%s", scaleX, scaleY, GetVirtualWidth(), GetVirtualHeight(), pinf.width, pinf.height, R_GetAspectRatio());
    float xofs = (GetVirtualWidth()-pinf.width)/2.0;
    float yofs = (GetVirtualHeight()-pinf.height);
    //yofs = (GetVirtualHeight()-pinf.height)/2;
    //print("ofs=(%s,%s)", xofs, yofs);
    R_DrawPicFloat(xofs, yofs, Handle);
  }
#endif
}


//==========================================================================
//
//  DrawFullScreenPicFinale320
//
//==========================================================================
static final void DrawFullScreenPicFinale320 (float xofs320, float yofs200, int Handle, optional bool dontClearScreen, optional bool scaleOffsets) {
#ifndef VC_USE_PROPER_SCALING
  //DrawFullScreenPic(Handle, dontClearScreen:dontClearScreen!optional);
  if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
  DrawPicFS320(xofs320, yofs200, Handle);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    int pwidth = 320; //pinf.width;
    int pheight = 200; //pinf.height;
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pwidth);
    float scaleY = float(rh/R_GetAspectRatio())/float(pheight);
    float scale = (scaleX >= scaleY ? scaleX : scaleY);
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    //print("scaleX=%s; scaleY=%s; vsize=(%s,%s); psize=(%s,%s); ratio=%s", scaleX, scaleY, GetVirtualWidth(), GetVirtualHeight(), pinf.width, pinf.height, R_GetAspectRatio());
    float xofs = (GetVirtualWidth()-pwidth)/2.0;
    float yofs = (GetVirtualHeight()-pheight);
    //yofs = (GetVirtualHeight()-pheight)/2;
    //print("ofs=(%s,%s)", xofs, yofs);
    if (scaleOffsets) {
      xofs320 *= GetVirtualWidth()/320.0;
      yofs200 *= GetVirtualHeight()/200.0;
    }
    R_DrawPicFloat(xofs+xofs320, yofs+yofs200, Handle);
  }
#endif
}


//==========================================================================
//
//  DrawFullScreenPicFinale320Ofs
//
//==========================================================================
static final void DrawFullScreenPicFinale320Ofs (float xofs320, float yofs200, int Handle) {
#ifndef VC_USE_PROPER_SCALING
  //DrawFullScreenPic(Handle, dontClearScreen:dontClearScreen!optional);
  DrawPicFS320(xofs320, yofs200, Handle);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    int pwidth = 320; //pinf.width;
    int pheight = 200; //pinf.height;
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pwidth);
    float scaleY = float(rh/R_GetAspectRatio())/float(pheight);
    float scale = (scaleX <= scaleY ? scaleX : scaleY);
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    //print("scaleX=%s; scaleY=%s; vsize=(%s,%s); psize=(%s,%s); ratio=%s", scaleX, scaleY, GetVirtualWidth(), GetVirtualHeight(), pinf.width, pinf.height, R_GetAspectRatio());
    float xofs = (GetVirtualWidth()-pwidth)/2.0;
    float yofs = (GetVirtualHeight()-pheight)/2.0;
    //yofs = (GetVirtualHeight()-pheight)/2;
    //print("ofs=(%s,%s)", xofs, yofs);
    xofs320 *= GetVirtualWidth()/320.0;
    yofs200 *= GetVirtualHeight()/200.0;
    R_DrawPicFloat(xofs+xofs320, yofs+yofs200, Handle);
  }
#endif
}


#ifndef VC_USE_PROPER_SCALING
//==========================================================================
//
//  DrawPicFS320
//
//==========================================================================
static final void DrawPicFS320 (float X, float Y, int Handle, optional float alpha) {
  auto ovw = GetVirtualWidth();
  auto ovh = GetVirtualHeight();
  scope(exit) SetVirtualScreen(ovw, ovh);
  SetVirtualScreen(320, 200);
  R_DrawPicFloat(X, Y, Handle, alpha!optional);
  //DrawPic(X, Y, Handle);
}
#endif

//==========================================================================
//
//  DrawPicFS320HScroll2
//
//==========================================================================
static final void DrawPicFS320HScroll2 (float fracofs, int Handle1, int Handle2, optional float alpha) {
#ifndef VC_USE_PROPER_SCALING
  float scrolled = (1.0-fclamp(fracofs, 0, 1))*320.0;
  DrawPicFS320(scrolled, 0, Handle2, alpha!optional);
  DrawPicFS320(scrolled-320, 0, Handle1, alpha!optional);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle1, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    // nope, this is scroller
    //R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pinf.width);
    float scaleY = float(rh/R_GetAspectRatio())/float(pinf.height);
    float scale = scaleY;
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    float yofs = (GetVirtualHeight()-pinf.height);
    float picwdt = pinf.width*2-GetVirtualWidth(); // offset limit
    float xofs0 = -picwdt*fclamp(fracofs, 0, 1);
    R_DrawPicFloat(xofs0, yofs, Handle1, alpha!optional);
    R_DrawPicFloat(xofs0+pinf.width, yofs, Handle2, alpha!optional);
  }
#endif
}


//==========================================================================
//
//  DrawPicFS200VScroll2
//
//==========================================================================
static final void DrawPicFS200VScroll2 (float fracofs, int Handle1, int Handle2, optional float alpha) {
#ifndef VC_USE_PROPER_SCALING
  float scrolled = (1.0-fclamp(fracofs, 0, 1))*200.0;
  DrawPicFS320(0, scrolled, Handle2, alpha!optional);
  DrawPicFS320(0, scrolled-200, Handle1, alpha!optional);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle1, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    // nope, this is scroller
    //R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pinf.width);
    float scaleY = float(rh/R_GetAspectRatio())/float(pinf.height);
    float scale = scaleX;
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    float xofs = (GetVirtualWidth()-pinf.width)/2;
    float pichgt = pinf.height*2-GetVirtualHeight(); // offset limit
    float yofs0 = -pichgt*fclamp(fracofs, 0, 1);
    R_DrawPicFloat(xofs, yofs0, Handle1, alpha!optional);
    R_DrawPicFloat(xofs, yofs0+pinf.height, Handle2, alpha!optional);
  }
#endif
}


#ifdef VCC_STANDALONE_EXECUTOR
#else
static final void wgGetBindingKeys (string cmd, int *key1, int *key2) {
  int isActive;
  IN_GetBindingKeys(cmd, key1, key2, 0, "", out isActive);
}


static final int ConvertBoundKey (int key) {
  if (key <= 0) return key;

  int key1, key2;

  wgGetBindingKeys("+Forward", &key1, &key2);
  if (key == key1 || key == key2) return K_UPARROW;

  wgGetBindingKeys("+Backward", &key1, &key2);
  if (key == key1 || key == key2) return K_DOWNARROW;

  wgGetBindingKeys("+Left", &key1, &key2);
  if (key == key1 || key == key2) return K_LEFTARROW;

  wgGetBindingKeys("+MoveLeft", &key1, &key2);
  if (key == key1 || key == key2) return K_LEFTARROW;

  wgGetBindingKeys("+Right", &key1, &key2);
  if (key == key1 || key == key2) return K_RIGHTARROW;

  wgGetBindingKeys("+MoveRight", &key1, &key2);
  if (key == key1 || key == key2) return K_RIGHTARROW;

  wgGetBindingKeys("+Attack", &key1, &key2);
  if (key == key1 || key == key2) return K_ENTER;

  wgGetBindingKeys("+Use", &key1, &key2);
  if (key == key1 || key == key2) return K_ENTER;

  wgGetBindingKeys("+Strafe", &key1, &key2);
  if (key == key1 || key == key2) return K_ESCAPE;

  // convert numpad arrows
  switch (key) {
    case K_PAD1: return K_END;
    case K_PAD2: return K_DOWNARROW;
    case K_PAD3: return K_PAGEDOWN;
    case K_PAD4: return K_LEFTARROW;
    case K_PAD6: return K_RIGHTARROW;
    case K_PAD7: return K_HOME;
    case K_PAD8: return K_UPARROW;
    case K_PAD9: return K_PAGEUP;
    case K_PADENTER: return K_ENTER;
  }

  return key;
}
#endif


defaultproperties {
  ScaleX = 1.0;
  ScaleY = 1.0;
  Visible = true;
  Enabled = true;
}
