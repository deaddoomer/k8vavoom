//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
class Widget : Object native;

struct ClipRect {
  // origin of the widget, in absolote coords
  float OriginX;
  float OriginY;

  // accomulative scale
  float ScaleX;
  float ScaleY;

  // clipping rectangle, in absolute coordinates
  float ClipX1;
  float ClipY1;
  float ClipX2;
  float ClipY2;
}


// VSplitLine
struct SplitLine {
  string Text;
  int Width;
}


// parent container widget
private readonly Widget ParentWidget;
// linked list of child widgets
private readonly Widget FirstChildWidget;
private readonly Widget LastChildWidget;
// links in the linked list of widgets
private readonly Widget PrevWidget;
private readonly Widget NextWidget;

// position of the widget in the parent widget
private int PosX;
private int PosY;
// offset for children
private int OfsX;
private int OfsY;
// size of the child area of the widget
private int SizeWidth;
private int SizeHeight;
// scaling of the widget
private float SizeScaleX;
private float SizeScaleY;

private readonly ClipRect ClipRect;

// currently focused child widget
private readonly Widget CurrentFocusChild;

private readonly void *Font;

// text alignements
private readonly ubyte HAlign;
private readonly ubyte VAlign;

// text cursor
private readonly int LastX;
private readonly int LastY;

// is this widget visible?
private bool bIsVisible;
// a flag that enables or disables Tick event
bool bTickEnabled;
// is this widget enabled and can receive input?
private bool bIsEnabled;
// can this widget be focused?
private bool bIsFocusable;
// mouse button state for click events
private readonly bool bLMouseDown;
private readonly bool bMMouseDown;
private readonly bool bRMouseDown;
// shadowed text
private readonly bool bTextShadowed;


// ////////////////////////////////////////////////////////////////////////// //
final Widget Parent { get { return ParentWidget; } }
final Widget FirstChild { get { return FirstChildWidget; } }
final Widget LastChild { get { return LastChildWidget; } }
final Widget Prev { get { return PrevWidget; } }
final Widget Next { get { return NextWidget; } }
final int X { get { return PosX; } set { SetX(value); } default PosX; }
final int Y { get { return PosY; } set { SetY(value); } default PosY; }
final int ChildrenOfsX { get { return OfsX; } set { SetOfsX(value); } default OfsX; }
final int ChildrenOfsY { get { return OfsY; } set { SetOfsY(value); } default OfsY; }
final int Width { get { return SizeWidth; } set { SetWidth(value); } default SizeWidth; }
final int Height { get { return SizeHeight; } set { SetHeight(value); } default SizeHeight; }
final float ScaleX { get { return SizeScaleX; } set { SetScale(value, SizeScaleY); } default SizeScaleX; }
final float ScaleY { get { return SizeScaleY; } set { SetScale(SizeScaleX, value); } default SizeScaleY; }
final bool Visible { get { return IsVisible(); } set { SetVisibility(value); } default bIsVisible; }
final bool Enabled { get { return IsEnabled(); } set { SetEnabled(value); } default bIsEnabled; }
final bool Focusable { get { return IsFocusable(); } set { SetFocusable(value); } default bIsFocusable; }

final int OldOriginX { get { return int(ClipRect.OriginX/ClipRect.ScaleX); } }
final int OldOriginY { get { return int(ClipRect.OriginY / ClipRect.ScaleY); } }


// ////////////////////////////////////////////////////////////////////////// //
delegate void FocusLost (Object Sender);
delegate void FocusReceived (Object Sender);

delegate bool KeyDown (Object Sender, int Key);
delegate bool KeyUp (Object Sender, int Key);


// ////////////////////////////////////////////////////////////////////////// //
//  Creation and destruction of widgets.
native final spawner Widget NewChild (class!Widget ChildClass);
override native final void Destroy ();
native final void MarkDead ();
native final void DestroyAllChildren ();

native final RootWidget GetRootWidget ();

// methods to move widget on top or bottom
native final void Lower ();
native final void Raise ();
native final void MoveBefore (Widget Other);
native final void MoveAfter (Widget Other);

// methods to set position, size and scale
native final void SetPos (int NewX, int NewY);
native final void SetX (int NewX);
native final void SetY (int NewY);
native final void SetOfsX (int NewX);
native final void SetOfsY (int NewY);
native final void SetSize (int NewWidth, int NewHeight);
native final void SetWidth (int NewWidth);
native final void SetHeight (int NewHeight);
native final void SetScale (float NewScaleX, float NewScaleY);
native final void SetConfiguration (int NewX, int NewY, int NewWidth,
  int NewHeight, optional float NewScaleX, optional float NewScaleY);

// visibility methods
native final void SetVisibility (bool bNewVisibility);
native final void Show ();
native final void Hide ();
native final bool IsVisible (optional bool Recurse);

// enable state methods
native final void SetEnabled (bool bNewEnable);
native final void Enable ();
native final void Disable ();
native final bool IsEnabled (optional bool Recurse);

// focusable state methods
native final void SetFocusable (bool bNewFocusable);
native final bool IsFocusable ();

// focus methods
native final void SetCurrentFocusChild (Widget NewFocus);
native final Widget GetCurrentFocus ();
native final bool IsFocus (optional bool Recurse);
native final void SetFocus ();

native final void DrawPic (int X, int Y, int Handle, optional float Alpha, optional int Translation);
native final void DrawShadowedPic (int X, int Y, int Handle);
native final void FillRectWithFlat (int x, int y, int width, int height, name Name);
native final void FillRect (int x, int y, int width, int height, int color);
// darkens a screen region
native final void ShadeRect (int x, int y, int w, int h, float shade);

// selects active font
native final void SetFont (name font);
// changes text alignement
native final void SetTextAlign (int halign, int valign);
// enable/disable text shadow
native final void SetTextShadow (bool on);
// calculates text width
native final int TextWidth (string text);
// calculates text height
native final int TextHeight (string text);
// splits text into lines that fit in specified width
native final int SplitText (string Text, out array!SplitLine Lines, int Maxwidth);
// splits text into lines that fit in specified width by inserting newlines
native final string SplitTextWithNewlines (string Text, int Maxwidth);
// draws text
native final void DrawText (int X, int Y, string Text, optional int Colour,
  optional int BoldColour, optional float Alpha);
// draws a cursor at the end of last drawn string
native final void DrawCursor ();
// returns colour ID for specified name
native static final int FindTextColour (string Name);

/*
final int X2Virtual (float x) { return int(ClipRect.ScaleX*x+ClipRect.OriginX); }
final int Y2Virtual (float y) { return int(ClipRect.ScaleY*y+ClipRect.OriginY); }
*/

native final void TranslateXY (ref float x, ref float y);

final int X2Virtual (float x) { float tmp = 0; TranslateXY(x, tmp); return int(x); }
final int Y2Virtual (float y) { float tmp = 0; TranslateXY(tmp, y); return int(y); }

final void XY2Virtual (optional ref float x, optional ref float y) { TranslateXY(x, y); }


//==========================================================================
//
//  OnCreate
//
//  Called when widget has been just created.
//
//==========================================================================
void OnCreate () {}


//==========================================================================
//
//  OnDestroy
//
//  Called when widget is about to be destroyed.
//
//==========================================================================
void OnDestroy () {}


//==========================================================================
//
//  OnChildAdded
//
//  Called when a child widget is added.
//
//==========================================================================
void OnChildAdded (Widget Child) {}


//==========================================================================
//
//  OnChildRemoved
//
//  Called when a child widget is removed.
//
//==========================================================================
void OnChildRemoved (Widget Child) {}


//==========================================================================
//
//  OnConfigurationChanged
//
//  Called when position or size has been changed.
//
//==========================================================================
void OnConfigurationChanged () {}


//==========================================================================
//
//  OnVisibilityChanged
//
//  Called when this widget is shown or hidden.
//
//==========================================================================
void OnVisibilityChanged (bool bNewVisibility) {}


//==========================================================================
//
//  OnEnableChanged
//
//  Called when this widget is enabled or disabled.
//
//==========================================================================
void OnEnableChanged (bool bNewEnable) {}


//==========================================================================
//
//  OnFocusableChanged
//
//  Called when focusable flag of this widget is changed.
//
//==========================================================================
void OnFocusableChanged (bool bNewFocusable) {}


//==========================================================================
//
//  OnFocusReceived
//
//  Called when focus enters this widget.
//
//==========================================================================
void OnFocusReceived () { if (FocusReceived) FocusReceived(self); }


//==========================================================================
//
//  OnFocusLost
//
//  Called when focus leaves this widget.
//
//==========================================================================
void OnFocusLost () { if (FocusLost) FocusLost(self); }


//==========================================================================
//
//  OnDraw
//
//  Draws the window.
//
//==========================================================================
void OnDraw () {}


//==========================================================================
//
//  OnPostDraw
//
//  Draws the window (AFTER all children are drawn).
//
//==========================================================================
void OnPostDraw () {}


//==========================================================================
//
//  Tick
//
//  Called periodicly, but only when bTickEnabled is true.
//
//==========================================================================
void Tick (float DeltaTime) {}


//==========================================================================
//
//  OnKeyDown
//
//  Called for focused widget and it's parents when a key is pressed.
//
//==========================================================================
bool OnKeyDown (int Key) { return (KeyDown ? KeyDown(self, Key) : false); }


//==========================================================================
//
//  OnKeyUp
//
//  Called for focused widget and it's parents when a key is released.
//
//==========================================================================
bool OnKeyUp (int Key) { return (KeyUp ? KeyUp(self, Key) : false); }


//==========================================================================
//
//  OnMouseMove
//
//  Called when mouse moves over this widget.
//
//==========================================================================
bool OnMouseMove (int OldX, int OldY, int NewX, int NewY) { return false; }


//==========================================================================
//
//  OnMouseEnter
//
//  Called when mouse enters this widget.
//
//==========================================================================
void OnMouseEnter () {}


//==========================================================================
//
//  OnMouseLeave
//
//  Called when mouse leaves this widget.
//
//==========================================================================
void OnMouseLeave () {}


//==========================================================================
//
//  OnMouseDown
//
//  Called when mouse button is pressed.
//
//==========================================================================
bool OnMouseDown (int X, int Y, int Button) { return false; }


//==========================================================================
//
//  OnMouseUp
//
//  Called when mouse button is released.
//
//==========================================================================
bool OnMouseUp (int X, int Y, int Button) { return false; }


//==========================================================================
//
//  OnMouseClick
//
//  Callec when left mouse button is clicked on this widget.
//
//==========================================================================
void OnMouseClick (int X, int Y) {}


//==========================================================================
//
//  OnMMouseClick
//
//  Callec when middle mouse button is clicked on this widget.
//
//==========================================================================
void OnMMouseClick (int X, int Y) {}


//==========================================================================
//
//  OnRMouseClick
//
//  Callec when right mouse button is clicked on this widget.
//
//==========================================================================
void OnRMouseClick (int X, int Y) {}


//==========================================================================
//
//  SetOrigin
//
//  Sets origin of the widget. Some widget classes will adjust the position.
//
//==========================================================================
void SetOrigin (int x, int y) { SetPos(x, y); }


//==========================================================================
//
//  SetDefaultVirtualScreenSize
//
//  sets virtual screen size for UI
//  k8: this should be moved elsewhere, but meh...
//
//==========================================================================
void SetDefaultVirtualScreenSize () {
  /*
  int rw = GetRealWidth();
  int rh = GetRealHeight();
  if (rw < 640 || rh < 480) {
    SetVirtualScreen(640, 480);
  } else {
    float scalex = 1.0-((rw%640)/640.0);
    float scaley = 1.0-((rh%480)/480.0);
    int nw = int(640*scalex);
    int nh = int(480*scaley);
    nh = 596;
    print("dims:(%d,%d); scale:(%f,%f); new:(%d,%d)", GetRealWidth(), GetRealHeight(), scalex, scaley, nw, nh);
    //SetVirtualScreen(640, 480);
    SetVirtualScreen(rw/2, rh/2);
  }
  */
  SetVirtualScreen(640, 480);
}


//==========================================================================
//
//  DrawEmptyScreen
//
//  called when there is no title pic (not yet)
//
//==========================================================================
void DrawEmptyScreen () {
 SetVirtualScreen(320, 200);
 R_FillRect(0, 0, 320, 200, 0xff_303030);
}


//==========================================================================
//
//  DrawFullScreenPic
//
//==========================================================================
void DrawFullScreenPic (int Handle) {
  picinfo_t pinf;
  R_GetPicInfo(Handle, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    if (pinf.width <= 320 && pinf.height <= 200) {
      SetVirtualScreen(pinf.width, pinf.height);
    } else {
      SetVirtualScreen(320, 200);
      R_FillRect(0, 0, 320, 200, 0xff_000000);
      if (pinf.width >= pinf.height) {
        SetVirtualScreen(pinf.width, pinf.height/200*200);
      } else {
        SetVirtualScreen(pinf.width/320*320, pinf.height);
      }
      //print("title pic: %dx%d", pinf.width, pinf.height);
      //SetVirtualScreen(pinf.width, pinf.height);
    }
    R_DrawPic(0, 0, Handle);
  }
  SetDefaultVirtualScreenSize();
}


defaultproperties {
  ScaleX = 1.0;
  ScaleY = 1.0;
  Visible = true;
  Enabled = true;
}
