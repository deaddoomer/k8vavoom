//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**  Copyright (C) 1999-2006 Jānis Legzdiņš
//**  Copyright (C) 2018-2021 Ketmar Dark
//**
//**  This program is free software: you can redistribute it and/or modify
//**  it under the terms of the GNU General Public License as published by
//**  the Free Software Foundation, version 3 of the License ONLY.
//**
//**  This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**  You should have received a copy of the GNU General Public License
//**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//**
//**************************************************************************
#define VC_USE_PROPER_SCALING

class Widget : Object native;

struct VClipRect {
  // origin of the widget, in absolote coords
  float OriginX;
  float OriginY;

  // accomulative scale
  float ScaleX;
  float ScaleY;

  // clipping rectangle, in absolute coordinates
  float ClipX1;
  float ClipY1;
  float ClipX2;
  float ClipY2;
}


// VSplitLine
struct SplitLine {
  string Text;
  int Width;
}


struct VMouseDownInfo {
  float time; // mouse down time (0 means "isn't down")
  int x, y; // where it was "downed" (global coords)
  float localx, localy; // local to widget
}


// parent container widget
private readonly Widget ParentWidget;
// linked list of child widgets
private readonly Widget FirstChildWidget;
private readonly Widget LastChildWidget;
// links in the linked list of widgets
private readonly Widget PrevWidget;
private readonly Widget NextWidget;

// position of the widget in the parent widget
readonly int PosX;
readonly int PosY;
// offset for children
readonly int OfsX;
readonly int OfsY;
// size of the child area of the widget
readonly int SizeWidth;
readonly int SizeHeight;
// scaling of the widget
readonly float SizeScaleX;
readonly float SizeScaleY;

readonly VClipRect ClipRect;

// currently focused child widget
private readonly Widget CurrentFocusChild;

private readonly void *Font;

// text alignements
private readonly ubyte HAlign;
private readonly ubyte VAlign;

// text cursor
private readonly int LastX;
private readonly int LastY;

private bool bIsVisible; // is this widget visible?
bool bTickEnabled; // a flag that enables or disables Tick event
private bool bIsEnabled; // is this widget enabled and can receive input?
private bool bIsFocusable; // can this widget be focused?
private bool bCloseOnBlur; // should this widget be closed if it loses focus?
private bool bIsModal; // is this widget "modal" (i.e. can't lose focus)? (not implemented yet)
private bool bOnTop; // should this widget be "always on top"?
private readonly bool bTextShadowed; // shadowed text
bool UseScissor;
bool WantMouseInput; // set if this widget want mouse input (mouse will be stolen unconditionally)

// mouse down time (0 means "isn't down")
native VMouseDownInfo MouseDownState[9]; // K_MOUSE1..K_MOUSE9

int CursorChar;


// ////////////////////////////////////////////////////////////////////////// //
final Widget Parent { get { return ParentWidget; } }
final Widget FirstChild { get { return FirstChildWidget; } }
final Widget LastChild { get { return LastChildWidget; } }
final Widget Prev { get { return PrevWidget; } }
final Widget Next { get { return NextWidget; } }
final int X { get { return PosX; } set { SetX(value); } default PosX; }
final int Y { get { return PosY; } set { SetY(value); } default PosY; }
final int ChildrenOfsX { get { return OfsX; } set { SetOfsX(value); } default OfsX; }
final int ChildrenOfsY { get { return OfsY; } set { SetOfsY(value); } default OfsY; }
final int Width { get { return SizeWidth; } set { SetWidth(value); } default SizeWidth; }
final int Height { get { return SizeHeight; } set { SetHeight(value); } default SizeHeight; }
final float ScaleX { get { return SizeScaleX; } set { SetScale(value, SizeScaleY); } default SizeScaleX; }
final float ScaleY { get { return SizeScaleY; } set { SetScale(SizeScaleX, value); } default SizeScaleY; }
final bool Visible { get { return IsVisible(); } set { SetVisibility(value); } default bIsVisible; }
final bool Enabled { get { return IsEnabled(); } set { SetEnabled(value); } default bIsEnabled; }
final bool Focusable { get { return IsFocusable(); } set { SetFocusable(value); } default bIsFocusable; }
final bool Focused { get { return IsFocused(); } }
final bool Modal { get { return IsModal(); } }
final bool OnTop { get { return IsOnTop(); } set { SetOnTop(value); } default bOnTop; }
final bool CloseOnBlur { get { return IsCloseOnBlur(); } set { SetCloseOnBlur(value); } default bCloseOnBlur; }

final int OldOriginX { get { return int(ClipRect.OriginX/ClipRect.ScaleX); } }
final int OldOriginY { get { return int(ClipRect.OriginY/ClipRect.ScaleY); } }

final void dumpClipRect (optional string msg) {
  print("CR: %s%ssize=(%d,%d); orig=(%s,%s); scale=(%s,%s); cr=(%s,%s)-(%s,%s); ssc=(%s,%s); ssz=(%s,%s)",
    msg, (msg ? "; " : ""),
    SizeWidth, SizeHeight,
    ClipRect.OriginX, ClipRect.OriginY, ClipRect.ScaleX, ClipRect.ScaleY,
    ClipRect.ClipX1, ClipRect.ClipY1, ClipRect.ClipX2, ClipRect.ClipY2,
    SizeScaleX, SizeScaleY, SizeWidth, SizeHeight);
}


final spawner Widget FindParentWithClass (class!Widget wclass) {
  for (Widget w = Parent; w; w = w.Parent) {
    if (wclass(w)) return wclass(w);
  }
  return none;
}


// fix scale so pixel size of this widget will be equal to real pixels
final void SetScaleOneToOne () {
  SetScale(1.0/ClipRect.ScaleX, 1.0/ClipRect.ScaleY);
}


// sets size and scale of this widget so it will fill the whole parent
// adjusts scale if necessary
// returns `true` if something was changed
final bool SetFullScaledSize (int mywdt, int myhgt, optional bool proportional/*=true*/, optional float aspect) {
  auto par = ParentWidget;
  if (!par) return false;
  if (mywdt < 1 || myhgt < 1) return false;
  if (!specified_aspect) aspect = 1.0f;
  if (!specified_proportional) proportional = true;
  if (!proportional) aspect = 1.0f;
  //aspect = 1.0f;
  float scaleX = float(par.Width)/float(mywdt);
  float scaleY = float(par.Height)/float(myhgt);
  if (proportional || !specified_proportional) {
    //float scale = fmin(scaleX, scaleY);
    //printdebug("*** before scales=(%s,%s)", scaleX, scaleY);
    // use vertical scale as base
    //scaleX *= 1.0/scaleY;
    scaleX = scaleY/aspect;
    /*
    if (scaleX > scaleY) {
      // use vertical scale as base
      scaleX = scaleY/aspect;
    } else {
      // use horizontal scale as base
      scaleY = scaleX*aspect;
    }
    */
  }
  int xofs = int((par.Width-mywdt*scaleX)/2);
  int yofs = int((par.Height-myhgt*scaleY)/2);
  bool res = SetConfiguration(xofs, yofs, mywdt, myhgt, scaleX, scaleY);
  //if (res) printdebug("*** setting full scaled size (%sx%s); par is (%sx%s); scales=(%s,%s); ofs=(%s,%s); sz=(%sx%s)", mywdt*scaleX, myhgt*scaleY, par.Width, par.Height, scaleX, scaleY, xofs, yofs, mywdt, myhgt);
  return res;
}


// ////////////////////////////////////////////////////////////////////////// //
//delegate void FocusLost (Object Sender);
//delegate void FocusReceived (Object Sender);


// ////////////////////////////////////////////////////////////////////////// //
//  Creation and destruction of widgets.
native final spawner Widget NewChild (class!Widget ChildClass);
override native /*final*/ void Destroy ();
// do not call this! ;-)
native final void DestroyAllChildren ();

native final RootWidget GetRootWidget ();

// methods to move widget on top or bottom
native final void Lower ();
native final void Raise ();
native final void MoveBefore (Widget Other);
native final void MoveAfter (Widget Other);

// methods to set position, size and scale
native final void SetPos (int NewX, int NewY);
native final void SetX (int NewX);
native final void SetY (int NewY);
native final void SetOfsX (int NewX);
native final void SetOfsY (int NewY);
native final void SetOffset (int NewX, int NewY);
native final void SetSize (int NewWidth, int NewHeight);
native final void SetWidth (int NewWidth);
native final void SetHeight (int NewHeight);
native final void SetScale (float NewScaleX, float NewScaleY);
// returns `true` if something was changed
// doesn't change scale if scale is not specified
native final bool SetConfiguration (int NewX, int NewY, int NewWidth, int NewHeight,
                                    optional float NewScaleX, optional float NewScaleY);

// visibility methods
native final void SetVisibility (bool bNewVisibility);
native final void Show ();
native final void Hide ();
native final bool IsVisible (optional bool Recurse/*=true*/);

// "on top" methods
native final void SetOnTop (bool v);
native final bool IsOnTop ();

// "close on defocus" methods
native final void SetCloseOnBlur (bool v);
native final bool IsCloseOnBlur ();

// modality check
native final bool IsModal ();

// enable state methods
native final void SetEnabled (bool bNewEnable);
native final void Enable ();
native final void Disable ();
native final bool IsEnabled (optional bool Recurse/*=true*/);

// focusable state methods
native final void SetFocusable (bool bNewFocusable);
native final bool IsFocusable ();

// focus methods
native final void SetCurrentFocusChild (Widget NewFocus);
native final Widget GetCurrentFocus ();
native final bool IsFocused (optional bool Recurse/*=true*/);
native final void SetFocus (optional bool onlyInParent/*=false*/);

native final void DrawPicScaledIgnoreOffset (int X, int Y, int Handle, optional float scaleX/*=1.0f*/, optional float scaleY/*=1.0f*/, optional float Alpha/*=1.0f*/, optional int Trans/*=0*/);

// draws a pic
// pwdt and phgt are in [0..1]
native final void DrawPicPart (float x, float y, float pwdt, float phgt, int handle, optional float alpha);
native final void DrawPicPartEx (float x, float y, float tx0, float ty0, float tx1, float ty1, int handle, optional float alpha);

native final void DrawPic (int X, int Y, int Handle, optional float Alpha, optional int Translation);
native final void DrawPicScaled (int X, int Y, int Handle, float scaleX, float scaleY, optional float Alpha, optional int Translation);
native final void DrawShadowedPic (int X, int Y, int Handle, optional float scaleX, optional float scaleY, optional bool ignoreOffset);

native final void FillRectWithFlat (int x, int y, int width, int height, name Name);
native final void FillRectWithFlatHandle (int x, int y, int width, int height, int handle);
native final void FillRectWithFlatRepeat (int x, int y, int width, int height, name Name);
native final void FillRectWithFlatRepeatHandle (int x, int y, int width, int height, int handle);
native final void FillRect (int x, int y, int width, int height, int color, optional float alpha/*=1.0*/);

// the last point will not be drawn
native final void DrawLine (int x0, int y0, int x1, int y1, int color, optional float alpha/*=1.0*/);
native final void DrawRect (int x, int y, int width, int height, int color, optional float alpha/*=1.0*/);

// darkens a screen region
native final void ShadeRect (int x, int y, int w, int h, float shade);

// returns active font name
native final name GetFont ();
// selects active font
native final void SetFont (name font);
// changes text alignement
native final void SetTextAlign (int halign, int valign);
// enable/disable text shadow
native final void SetTextShadow (bool on);
// returns text bounds with respect to the current text align
// this ignores trailing newlines by default
native final void TextBounds (int x, int y, string text, out int x0, out int y0, out int width, out int height, optional bool trimTrailNL/*=true*/);
// calculates text width (correctly processes '\n')
native final int TextWidth (string text);
// calculates string width (no '\n' processing)
native final int StringWidth (string text);
// calculates text height
native final int TextHeight (string text);
// return current font height
native final int FontHeight ();
// splits text into lines that fit in specified width (trimRight default is true)
native final int SplitText (string Text, out array!SplitLine Lines, int Maxwidth, optional bool trimRight);
// splits text into lines that fit in specified width by inserting newlines (trimRight default is true)
native final string SplitTextWithNewlines (string Text, int Maxwidth, optional bool trimRight);
// draws text
native final void DrawText (int X, int Y, string Text, optional int Color, optional int BoldColor, optional float Alpha);
// get cursor width
native final int CursorWidth ();
// draws a cursor at the end of last drawn string
native final void DrawCursor (optional int colorTrans/*=CR_UNTRANSLATED*/);
// doesn't change current cursor position
native final void DrawCursorAt (int cx, int cy, optional int colorTrans/*=CR_UNTRANSLATED*/);
native final void SetCursorPos (int cx, int cy);
native final int CursorX { get; set; }
native final int CursorY { get; set; }

// returns color ID for specified name
native static final int FindTextColor (string Name);

// "hex hive" for color selector
native final float CalcHexHeight (float h);
native final void DrawHex (float x0, float y0, float w, float h, int color, optional float alpha/*=1.0f*/);
native final void FillHex (float x0, float y0, float w, float h, int color, optional float alpha/*=1.0f*/);
native final void ShadeHex (float x0, float y0, float w, float h, float darkening);

native final bool IsPointInsideHex (float x, float y, float x0, float y0, float w, float h);
// cannot move diagonally yet
native final void MoveHexCoords (ref int hpx, ref int hpy, int dx, int dy, int radius);

native final float CalcHexColorPatternWidth (int radius, float cellW, float cellH);
native final float CalcHexColorPatternHeight (int radius, float cellW, float cellH);
// returns `true` if the given "internal" hex pattern coordinates are valid
native final bool IsValidHexColorPatternCoords (int hpx, int hpy, int radius);
// calcs "internal" hex pattern coordinates, returns `false` if passed coords are outside any hex
native final bool CalcHexColorPatternCoords (out int hpx, out int hpy, float x, float y, float x0, float y0, int radius, float cellW, float cellH);
// calcs coordinates of the individual hex; returns `false` if the given "internal" hex pattern coordinates are not valid
// those coords can be used in `*Hex()` methods
native final bool CalcHexColorPatternHexCoordsAt (out float hx, out float hy, int hpx, int hpy, float x0, float y0, int radius, float cellW, float cellH);
// returns opaque color at the given "internal" hex pattern coordinates (with high byte set), or 0
native final int GetHexColorPatternColorAt (int hpx, int hpy, int radius);
// draws hex pattern (WARNING: no clipping!)
native final void DrawHexColorPattern (float x0, float y0, int radius, float cellW, float cellH);

native final bool FindHexColorCoords (out int hpx, out int hpy, int radius, float h, float s);

native final void TranslateXY (ref float x, ref float y);

final int X2Virtual (float x) { float tmp = 0; TranslateXY(x, tmp); return int(x); }
final int Y2Virtual (float y) { float tmp = 0; TranslateXY(tmp, y); return int(y); }

final void XY2Virtual (optional ref float x, optional ref float y) { TranslateXY(x, y); }


final int LocalXToRoot (float v) {
  float sc = ClipRect.ScaleX*v+ClipRect.OriginX; // to screen
  auto root = GetRootWidget();
  return int((sc-root.ClipRect.OriginX)/ClipRect.ScaleX); // to root
}

final int LocalYToRoot (float v) {
  float sc = ClipRect.ScaleY*v+ClipRect.OriginY; // to screen
  auto root = GetRootWidget();
  return int((sc-root.ClipRect.OriginY)/ClipRect.ScaleY); // to root
}

final void LocalXYToRoot (out int rx, out int ry, float lx, float ly) {
  // to screen
  float scx = ClipRect.ScaleX*lx+ClipRect.OriginX;
  float scy = ClipRect.ScaleY*ly+ClipRect.OriginY;
  // to root
  auto root = GetRootWidget();
  rx = int((scx-root.ClipRect.OriginX)/ClipRect.ScaleX);
  ry = int((scy-root.ClipRect.OriginY)/ClipRect.ScaleY);
}


// can return `none` if coords are out of any widget, including this one
native final Widget GetWidgetAt (float x, float y, optional bool allowDisabled/*=false*/);


//==========================================================================
//
//  OnCreate
//
//  Called when widget has been just created.
//
//==========================================================================
void OnCreate () {}


//==========================================================================
//
//  OnDestroy
//
//  Called when widget is about to be destroyed.
//
//==========================================================================
void OnDestroy () {}


//==========================================================================
//
//  OnClose
//
//  Called when widget is about to be closed.
//
//==========================================================================
void OnClose () {}


//==========================================================================
//
//  OnChildAdded
//
//  Called when a child widget is added.
//
//==========================================================================
void OnChildAdded (Widget Child) {}


//==========================================================================
//
//  OnChildRemoved
//
//  Called when a child widget is removed.
//
//==========================================================================
void OnChildRemoved (Widget Child) {}


//==========================================================================
//
//  OnConfigurationChanged
//
//  Called when position or size has been changed.
//
//==========================================================================
void OnConfigurationChanged () {}


//==========================================================================
//
//  OnVisibilityChanged
//
//  Called when this widget is shown or hidden.
//
//==========================================================================
void OnVisibilityChanged (bool bNewVisibility) {}


//==========================================================================
//
//  OnEnableChanged
//
//  Called when this widget is enabled or disabled.
//
//==========================================================================
void OnEnableChanged (bool bNewEnable) {}


//==========================================================================
//
//  OnFocusableChanged
//
//  Called when focusable flag of this widget is changed.
//
//==========================================================================
void OnFocusableChanged (bool bNewFocusable) {}


//==========================================================================
//
//  OnFocusReceived
//
//  Called when focus enters this widget.
//
//==========================================================================
void OnFocusReceived () {}


//==========================================================================
//
//  OnFocusLost
//
//  Called when focus leaves this widget.
//
//==========================================================================
void OnFocusLost () {}


//==========================================================================
//
//  OnDraw
//
//  Draws the window.
//
//==========================================================================
void OnDraw () {}


//==========================================================================
//
//  OnPostDraw
//
//  Draws the window (AFTER all children are drawn).
//
//==========================================================================
void OnPostDraw () {}


//==========================================================================
//
//  Tick
//
//  Called periodicly, but only when bTickEnabled is true.
//
//==========================================================================
void Tick (float DeltaTime) {}


//==========================================================================
//
//  OnEvent
//
//  this is called before any other specific handler.
//  return `true` to prevent other handlers from being called
//  (i.e. to "eat" the event).
//  if `evt.bubbling` is set, we're in bubble phase.
//  deepest child (destination) will have `evt.bubbling` set too.
//  also, `evt.dest` is usually the deepest child.
//
//==========================================================================
bool OnEvent (ref event_t evt) { return false; }


//==========================================================================
//
//  SetOrigin
//
//  Sets origin of the widget. Some widget classes will adjust the position.
//
//==========================================================================
void SetOrigin (int x, int y) { SetPos(x, y); }


//==========================================================================
//
//  SetDefaultVirtualScreenSize
//
//  sets virtual screen size for UI
//  k8: this should be moved elsewhere, but meh...
//
//==========================================================================
static final void SetDefaultVirtualScreenSize () {
  int rw = GetRealScreenWidth();
  int rh = GetRealScreenHeight();
  int vw = (rw >= 1280 ? rw/2 : 640);
  int vh = (rh >= 960 ? rh/2 : 480);
  if (rw/3 >= 640 && rh/3 >= 480) {
    vw = rw/3;
    vh = rh/3;
  }
  if (rh > 480 && rh < 960) vh = rh/2;
  SetVirtualScreen(vw, vh);
}


//==========================================================================
//
//  DrawEmptyScreen
//
//  called when there is no title pic (not yet)
//
//==========================================================================
static final void DrawEmptyScreen () {
  //SetVirtualScreen(320, 200);
  //R_FillRect(0, 0, 320, 200, 0xff_303030);
  //auto ovw = GetVirtualWidth();
  //auto ovh = GetVirtualHeight();
  R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_202020);
}


//==========================================================================
//
//  DrawFullScreenPic
//
//==========================================================================
static final void DrawFullScreenPic (int Handle, optional bool dontRestoreVScreen, optional out int xofs, optional out int yofs, optional out float scale, optional bool dontClearScreen) {
  picinfo_t pinf;
  R_GetPicInfo(Handle, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
    xofs = 0;
    yofs = 0;
  } else {
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) if (!dontRestoreVScreen) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
#ifdef VC_USE_PROPER_SCALING
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pinf.width);
    float scaleY = float(rh/R_GetAspectRatio())/float(pinf.height);
    scale = (scaleX <= scaleY ? scaleX : scaleY);
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    //print("scaleX=%s; scaleY=%s; vsize=(%s,%s); psize=(%s,%s); ratio=%s", scaleX, scaleY, GetVirtualWidth(), GetVirtualHeight(), pinf.width, pinf.height, R_GetAspectRatio());
    xofs = (GetVirtualWidth()-pinf.width)/2;
    yofs = (GetVirtualHeight()-pinf.height)/2;
    xofs += pinf.xoffset;
    yofs += pinf.yoffset;
    R_DrawPic(xofs, yofs, Handle);
#else
    if (pinf.width >= 320 && pinf.height >= 200) {
      SetVirtualScreen(pinf.width, pinf.height);
    } else {
      SetVirtualScreen(320, 200);
    }
    R_DrawPic(0, 0, Handle);
#endif
  }
}


//==========================================================================
//
//  DrawFullScreenPicFinale
//
//==========================================================================
static final void DrawFullScreenPicFinale (int Handle, optional bool dontClearScreen) {
#ifndef VC_USE_PROPER_SCALING
  DrawFullScreenPic(Handle, dontClearScreen:dontClearScreen!optional);
  //if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
  //DrawPicFS320(xofs320, yofs200, Handle);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pinf.width);
    float scaleY = float(rh/R_GetAspectRatio())/float(pinf.height);
    float scale = (scaleX >= scaleY ? scaleX : scaleY);
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    //print("scaleX=%s; scaleY=%s; vsize=(%s,%s); psize=(%s,%s); ratio=%s", scaleX, scaleY, GetVirtualWidth(), GetVirtualHeight(), pinf.width, pinf.height, R_GetAspectRatio());
    float xofs = (GetVirtualWidth()-pinf.width)/2.0;
    float yofs = (GetVirtualHeight()-pinf.height);
    //yofs = (GetVirtualHeight()-pinf.height)/2;
    //print("ofs=(%s,%s)", xofs, yofs);
    R_DrawPicFloat(xofs, yofs, Handle);
  }
#endif
}


//==========================================================================
//
//  DrawFullScreenPicFinale320
//
//==========================================================================
static final void DrawFullScreenPicFinale320 (float xofs320, float yofs200, int Handle, optional bool dontClearScreen, optional bool scaleOffsets) {
#ifndef VC_USE_PROPER_SCALING
  //DrawFullScreenPic(Handle, dontClearScreen:dontClearScreen!optional);
  if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
  DrawPicFS320(xofs320, yofs200, Handle);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    int pwidth = 320; //pinf.width;
    int pheight = 200; //pinf.height;
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    if (!dontClearScreen) R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pwidth);
    float scaleY = float(rh/R_GetAspectRatio())/float(pheight);
    float scale = (scaleX >= scaleY ? scaleX : scaleY);
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    //print("scaleX=%s; scaleY=%s; vsize=(%s,%s); psize=(%s,%s); ratio=%s", scaleX, scaleY, GetVirtualWidth(), GetVirtualHeight(), pinf.width, pinf.height, R_GetAspectRatio());
    float xofs = (GetVirtualWidth()-pwidth)/2.0;
    float yofs = (GetVirtualHeight()-pheight);
    //yofs = (GetVirtualHeight()-pheight)/2;
    //print("ofs=(%s,%s)", xofs, yofs);
    if (scaleOffsets) {
      xofs320 *= GetVirtualWidth()/320.0;
      yofs200 *= GetVirtualHeight()/200.0;
    }
    R_DrawPicFloat(xofs+xofs320, yofs+yofs200, Handle);
  }
#endif
}


//==========================================================================
//
//  DrawFullScreenPicFinale320Ofs
//
//==========================================================================
static final void DrawFullScreenPicFinale320Ofs (float xofs320, float yofs200, int Handle) {
#ifndef VC_USE_PROPER_SCALING
  //DrawFullScreenPic(Handle, dontClearScreen:dontClearScreen!optional);
  DrawPicFS320(xofs320, yofs200, Handle);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    int pwidth = 320; //pinf.width;
    int pheight = 200; //pinf.height;
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pwidth);
    float scaleY = float(rh/R_GetAspectRatio())/float(pheight);
    float scale = (scaleX <= scaleY ? scaleX : scaleY);
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    //print("scaleX=%s; scaleY=%s; vsize=(%s,%s); psize=(%s,%s); ratio=%s", scaleX, scaleY, GetVirtualWidth(), GetVirtualHeight(), pinf.width, pinf.height, R_GetAspectRatio());
    float xofs = (GetVirtualWidth()-pwidth)/2.0;
    float yofs = (GetVirtualHeight()-pheight)/2.0;
    //yofs = (GetVirtualHeight()-pheight)/2;
    //print("ofs=(%s,%s)", xofs, yofs);
    xofs320 *= GetVirtualWidth()/320.0;
    yofs200 *= GetVirtualHeight()/200.0;
    R_DrawPicFloat(xofs+xofs320, yofs+yofs200, Handle);
  }
#endif
}


#ifndef VC_USE_PROPER_SCALING
//==========================================================================
//
//  DrawPicFS320
//
//==========================================================================
static final void DrawPicFS320 (float X, float Y, int Handle, optional float alpha) {
  auto ovw = GetVirtualWidth();
  auto ovh = GetVirtualHeight();
  scope(exit) SetVirtualScreen(ovw, ovh);
  SetVirtualScreen(320, 200);
  R_DrawPicFloat(X, Y, Handle, alpha!optional);
  //DrawPic(X, Y, Handle);
}
#endif

//==========================================================================
//
//  DrawPicFS320HScroll2
//
//==========================================================================
static final void DrawPicFS320HScroll2 (float fracofs, int Handle1, int Handle2, optional float alpha) {
#ifndef VC_USE_PROPER_SCALING
  float scrolled = (1.0-fclamp(fracofs, 0, 1))*320.0;
  DrawPicFS320(scrolled, 0, Handle2, alpha!optional);
  DrawPicFS320(scrolled-320, 0, Handle1, alpha!optional);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle1, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    // nope, this is scroller
    //R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    //float scaleX = float(rw)/float(pinf.width);
    float scaleY = float(rh/R_GetAspectRatio())/float(pinf.height);
    float scale = scaleY;
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    float yofs = (GetVirtualHeight()-pinf.height);
    float picwdt = pinf.width*2-GetVirtualWidth(); // offset limit
    float xofs0 = -picwdt*fclamp(fracofs, 0, 1);
    R_DrawPicFloat(xofs0, yofs, Handle1, alpha!optional);
    R_DrawPicFloat(xofs0+pinf.width, yofs, Handle2, alpha!optional);
  }
#endif
}


//==========================================================================
//
//  DrawPicFS200VScroll2
//
//==========================================================================
static final void DrawPicFS200VScroll2 (float fracofs, int Handle1, int Handle2, optional float alpha) {
#ifndef VC_USE_PROPER_SCALING
  float scrolled = (1.0-fclamp(fracofs, 0, 1))*200.0;
  DrawPicFS320(0, scrolled, Handle2, alpha!optional);
  DrawPicFS320(0, scrolled-200, Handle1, alpha!optional);
#else
  picinfo_t pinf;
  R_GetPicInfo(Handle1, &pinf);
  if (pinf.width < 1 || pinf.height < 1) {
    DrawEmptyScreen();
  } else {
    auto ovw = GetVirtualWidth();
    auto ovh = GetVirtualHeight();
    scope(exit) SetVirtualScreen(ovw, ovh);
    // in case our picture has strange size
    // nope, this is scroller
    //R_FillRect(0, 0, GetVirtualWidth(), GetVirtualHeight(), 0xff_000000);
    int rw = GetRealScreenWidth();
    int rh = GetRealScreenHeight();
    float scaleX = float(rw)/float(pinf.width);
    //float scaleY = float(rh/R_GetAspectRatio())/float(pinf.height);
    float scale = scaleX;
    SetVirtualScreen(int(rw/scale), int((rh/R_GetAspectRatio())/scale));
    float xofs = (GetVirtualWidth()-pinf.width)/2;
    float pichgt = pinf.height*2-GetVirtualHeight(); // offset limit
    float yofs0 = -pichgt*fclamp(fracofs, 0, 1);
    R_DrawPicFloat(xofs, yofs0, Handle1, alpha!optional);
    R_DrawPicFloat(xofs, yofs0+pinf.height, Handle2, alpha!optional);
  }
#endif
}


#ifdef VCC_STANDALONE_EXECUTOR
#else
static final void wgGetBindingKeys (string cmd, int *key1, int *key2) {
  int isActive;
  IN_GetBindingKeys(cmd, key1, key2, 0, "", out isActive);
}


static final int ConvertBoundKey (int key, optional bool useBindings/*=true*/) {
  if (key <= 0) return key;
  if (key >= K_MOUSE1 && key <= K_MWHEELDOWN) return key;

  // convert numpad arrows and controller dpad
  switch (key) {
    case K_PAD1: case K_END: return K_END;
    case K_PAD2: case K_BUTTON_DPAD_DOWN: return K_DOWNARROW;
    case K_PAD3: case K_PAGEDOWN: return K_PAGEDOWN;
    case K_PAD4: case K_BUTTON_DPAD_LEFT: case K_LEFTARROW: return K_LEFTARROW;
    case K_PAD6: case K_BUTTON_DPAD_RIGHT: case K_RIGHTARROW: return K_RIGHTARROW;
    case K_PAD7: case K_HOME: return K_HOME;
    case K_PAD8: case K_BUTTON_DPAD_UP: case K_UPARROW: return K_UPARROW;
    case K_PAD9: case K_PAGEUP: return K_PAGEUP;
    case K_PADENTER: case K_SPACE: case K_BUTTON_START: case K_ENTER: return K_ENTER;
    case K_BUTTON_BACK: case K_ESCAPE: return K_ESCAPE;
    case K_BUTTON_A: K_BUTTON_X: return K_ENTER;
    case K_BUTTON_B: K_BUTTON_Y: return K_ESCAPE;
    case K_PAD0: case K_INSERT: return K_INSERT;
    case K_PADDOT: case K_DELETE: return K_DELETE;
  }

  int key1, key2;

  if (!specified_useBindings || useBindings) {
    wgGetBindingKeys("+Forward", &key1, &key2);
    if (key == key1 || key == key2) return K_UPARROW;

    wgGetBindingKeys("+Backward", &key1, &key2);
    if (key == key1 || key == key2) return K_DOWNARROW;

    wgGetBindingKeys("+Left", &key1, &key2);
    if (key == key1 || key == key2) return K_LEFTARROW;

    wgGetBindingKeys("+MoveLeft", &key1, &key2);
    if (key == key1 || key == key2) return K_LEFTARROW;

    wgGetBindingKeys("+Right", &key1, &key2);
    if (key == key1 || key == key2) return K_RIGHTARROW;

    wgGetBindingKeys("+MoveRight", &key1, &key2);
    if (key == key1 || key == key2) return K_RIGHTARROW;

    wgGetBindingKeys("+Attack", &key1, &key2);
    if (key == key1 || key == key2) return K_ENTER;

    wgGetBindingKeys("+Use", &key1, &key2);
    if (key == key1 || key == key2) return K_ENTER;

    //wgGetBindingKeys("+Strafe", &key1, &key2);
    wgGetBindingKeys("+AltAttack", &key1, &key2);
    if (key == key1 || key == key2) return K_ESCAPE;
  }

  return key;
}
#endif


defaultproperties {
  ScaleX = 1.0;
  ScaleY = 1.0;
  Visible = true;
  Enabled = true;
  CursorChar = 95; // '_'
}


// ////////////////////////////////////////////////////////////////////////// //
class RootWidget : Widget native;

// true if mouse cursor is currently enabled
readonly bool bMouseEnabled;
readonly bool bMouseForced;

// current mouse cursor position
readonly int MouseX;
readonly int MouseY;

// current mouse cursor graphic
int MouseCursorPic;

private native readonly array!(void *) EventPath;


native final void SetMouse (bool MouseOn);

// can return `none` if coords are out of any widget
native final Widget GetWidgetAtScreenXY (int x, int y, optional bool allowDisabled/*=false*/);


defaultproperties {
  CursorChar = 95; // '_'
}
