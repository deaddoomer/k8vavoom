// ////////////////////////////////////////////////////////////////////////// //
//   if a shader has all variables in set, use literal code provided by set
//   intstead of generating simple accessors.
//   there is no "best fit", preprocessor will use first matched set.
// ////////////////////////////////////////////////////////////////////////// //

Set PureLightmapSTSet {
  forbidden uniform float TexIW;
  forbidden uniform float TexIH;

  uniform vec3 SAxis;
  uniform vec3 TAxis;
  uniform float SOffs;
  uniform float TOffs;
  uniform float TexMinS;
  uniform float TexMinT;
  uniform float CacheS;
  uniform float CacheT;

  code [[
    inline void SetLMapOnly (const texinfo_t *textr, const surface_t *surf, const surfcache_t *cache) {
      curr_SAxis = textr->saxis;
      curr_SOffs = textr->soffs;
      curr_TAxis = textr->taxis;
      curr_TOffs = textr->toffs;
      curr_TexMinS = surf->texturemins[0];
      curr_TexMinT = surf->texturemins[1];
      curr_CacheS = cache->s;
      curr_CacheT = cache->t;
    }
  ]]
}


Set TextureSTSet {
  uniform vec3 SAxis;
  uniform vec3 TAxis;
  uniform float SOffs;
  uniform float TOffs;
  uniform float TexIW;
  uniform float TexIH;

  code [[
    inline void SetTex (const texinfo_t *textr) {
      curr_SAxis = textr->saxis;
      curr_SOffs = textr->soffs;
      curr_TexIW = owner->tex_iw;
      curr_TAxis = textr->taxis;
      curr_TOffs = textr->toffs;
      curr_TexIH = owner->tex_ih;
    }
  ]]
}


Set TextureSTSetNoSize {
  forbidden set PureLightmapSTSet;

  forbidden uniform float TexIW;
  forbidden uniform float TexIH;

  uniform vec3 SAxis;
  uniform vec3 TAxis;
  uniform float SOffs;
  uniform float TOffs;

  code [[
    inline void SetTexNoSize (const texinfo_t *textr) {
      curr_SAxis = textr->saxis;
      curr_SOffs = textr->soffs;
      curr_TAxis = textr->taxis;
      curr_TOffs = textr->toffs;
    }
  ]]
}


Set LightmapSTSet {
  forbidden set PureLightmapSTSet;

  uniform float TexMinS;
  uniform float TexMinT;
  uniform float CacheS;
  uniform float CacheT;

  code [[
    inline void SetLMap (const surface_t *surf, const surfcache_t *cache) {
      curr_TexMinS = surf->texturemins[0];
      curr_TexMinT = surf->texturemins[1];
      curr_CacheS = cache->s;
      curr_CacheT = cache->t;
    }
  ]]
}


Set FogSet {
  uniform bool FogEnabled;
  uniform vec4 FogColor;
  uniform float FogStart;
  uniform float FogEnd;

  code [[
    inline void SetFogFade (vuint32 Fade, float Alpha) {
      if (Fade) {
        curr_FogEnabled = true;
        curr_FogColor[0] = ((Fade>>16)&255)/255.0f;
        curr_FogColor[1] = ((Fade>>8)&255)/255.0f;
        curr_FogColor[2] = (Fade&255)/255.0f;
        curr_FogColor[3] = Alpha;
        curr_FogStart = (Fade == FADE_LIGHT ? 1.0f : r_fog_start);
        curr_FogEnd = (Fade == FADE_LIGHT ? 1024.0f*r_fade_factor : r_fog_end);
      } else {
        curr_FogEnabled = false;
      }
    }
  ]]
}


Set SimpleFogSet {
  forbidden uniform bool FogEnabled;

  uniform vec4 FogColor;
  uniform float FogStart;
  uniform float FogEnd;

  code [[
    inline void SetFogFade (vuint32 Fade, float Alpha) {
      curr_FogColor[0] = ((Fade>>16)&255)/255.0f;
      curr_FogColor[1] = ((Fade>>8)&255)/255.0f;
      curr_FogColor[2] = (Fade&255)/255.0f;
      curr_FogColor[3] = Alpha;
      curr_FogStart = (Fade == FADE_LIGHT ? 1.0f : r_fog_start);
      curr_FogEnd = (Fade == FADE_LIGHT ? 1024.0f*r_fade_factor : r_fog_end);
    }
  ]]
}


// ////////////////////////////////////////////////////////////////////////// //
ShaderList basedir="basev/common/glshaders" pakdir="glshaders" {
  Shader DrawFixedCol both="draw/draw_fixed_col";
  Shader DrawSimple both="draw/draw_simple";
  Shader DrawSimpleLight both="draw/draw_simple" { define "LIGHTING"; }
  Shader DrawShadow vertex="draw/draw_simple" fragment="draw/draw_shadow";
  Shader DrawAutomap both="draw/draw_automap";

  Shader SurfZBuf both="surf_zbuf";

  Shader SurfDecalNoLMap both="decal/surf_decal_nolmap";
  Shader SurfDecalLMap both="decal/surf_decal_lmap";
  Shader SurfAdvDecal both="decal/surf_decal_adv";

  Shader SurfSimple both="lightmap/surf_simple";
  Shader SurfSimpleMasked both="lightmap/surf_simple" { define "VV_SIMPLE_MASKED"; }
  Shader SurfSimpleBrightmap both="lightmap/surf_simple" { define "VV_SIMPLE_BRIGHTMAP"; }

  Shader SurfLightmap both="lightmap/surf_lightmap";
  Shader SurfLightmapMasked both="lightmap/surf_lightmap" { define "VV_SIMPLE_MASKED"; }
  Shader SurfLightmapBrightmap both="lightmap/surf_lightmap" { define "VV_LIGHTMAP_BRIGHTMAP"; }

  Shader SurfSky both="sky/surf_sky";
  Shader SurfDSky both="sky/surf_dsky";

  Shader SurfMasked both="masked/surf_masked";
  Shader SurfMaskedBrightmap both="masked/surf_masked" { define "VV_MASKED_BRIGHTMAP"; }
  Shader SurfMaskedGlow both="masked/surf_masked" { define "VV_MASKED_GLOW"; }
  Shader SurfMaskedBrightmapGlow both="masked/surf_masked" { defines { "VV_MASKED_BRIGHTMAP", "VV_MASKED_GLOW" } }
  Shader SurfMaskedFakeShadow vertex="masked/surf_masked" fragment="masked/surf_masked_fakeshadow";

  Shader SurfPartSq vertex="particle/particle" fragment="particle/particle_sq";
  Shader SurfPartSm vertex="particle/particle" fragment="particle/particle_sm";

  Shader [advanced] SurfShadowVolume both="shadowvol/surf_svol";

  Shader [advanced] ShadowsAmbient both="shadowvol/surf/shadows_surf_ambient";
  Shader [advanced] ShadowsAmbientMasked both="shadowvol/surf/shadows_surf_ambient" { define "VV_AMBIENT_MASKED_WALL"; }
  Shader [advanced] ShadowsAmbientBrightmap both="shadowvol/surf/shadows_surf_ambient" { define "VV_AMBIENT_BRIGHTMAP_WALL"; }
  Shader [advanced] ShadowsSurfTransDecals both="shadowvol/surf/shadows_surf_transdecals";
  Shader [advanced] ShadowsTexture both="shadowvol/surf/shadows_surf_texture";
  Shader [advanced] ShadowsTextureMasked both="shadowvol/surf/shadows_surf_texture" { define "VV_TEXTURED_MASKED_WALL"; }
  Shader [advanced] ShadowsFog both="shadowvol/surf/shadows_surf_fog";
  Shader [advanced] ShadowsFogMasked both="shadowvol/surf/shadows_surf_fog" { defines { "VV_MASKED_FOG" } }
  Shader [advanced] ShadowsLight both="shadowvol/surf/shadows_surf_light";
  Shader [advanced] ShadowsLightSpot both="shadowvol/surf/shadows_surf_light" { define "VV_SPOTLIGHT"; }
  Shader [advanced] ShadowsLightDbg both="shadowvol/surf/shadows_surf_light" { define "VV_DEBUG_LIGHT"; }
  Shader [advanced] ShadowsLightSpotDbg both="shadowvol/surf/shadows_surf_light" { defines { "VV_DEBUG_LIGHT", "VV_SPOTLIGHT" } }

  Shader SurfModel both="lightmap/surf_model";

  Shader [advanced] ShadowsModelAmbient both="shadowvol/model/shadows_model_ambient";
  Shader [advanced] ShadowsModelTextures both="shadowvol/model/shadows_model_textures";
  Shader [advanced] ShadowsModelLight both="shadowvol/model/shadows_model_light";
  Shader [advanced] ShadowsModelLightSpot both="shadowvol/model/shadows_model_light" { define "VV_SPOTLIGHT"; }
  Shader [advanced] ShadowsModelShadow both="shadowvol/model/shadows_model_shadow";
  Shader [advanced] ShadowsModelFog both="shadowvol/model/shadows_model_fog";

  // wipe
  Shader DrawWipeType0 both="wipe/draw_wipe_type0";

  // bloom
  Shader BloomColorExp both="bloom/colorexp";
  Shader BloomColorScale both="bloom/colorscale";
  Shader BloomKawase both="bloom/kawase";
}
