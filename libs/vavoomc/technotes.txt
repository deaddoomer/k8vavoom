notes about `Define()`, `Emit()`, `PostLoad()`
==============================================

to get executable VM code, the compiler basically does this (see `VPackage::LoadSourceObject()`):

  1. parses code to AST.
  2. calls `Emit()` for package.
    2.0. package emitter does this:
      2.0.1. calls loader for imported, but not yet loaded packages.
      2.0.2. calls `Define()` for all package constants.
      2.0.3. calls `Define()` for all package structs.
      2.0.4. calls `Define()` for all package classes.
      2.0.5. calls `Define()` for all package decorate pseudo-classes.
      2.0.6. calls `DefineMembers()` for all package structs.
      2.0.7. calls `DefineMembers()` for all package classes.
      2.0.8. calls `PostLoad()` for all package structs (to calculate their sizes)
      2.0.9. calls `Emit()` for all package classes.
        2.0.10. each package class calls `Emit()` for all class structs.
    2.1. calls `PostLoad()` for all package members, in arbirary order (excluding struct members)

note that struct `PostLoad()` will not call struct methods postloaders, "2.1" will
take care of that.



notes about the compiler itself
===============================

VC compiler is the classic multipass one.

first, the source code is parsed to AST, with only basic syntax checking.
at this stage, AST is highly abstract, and almost 1:1 identical to the source text.
(almost) all types are presented with AST nodes too, not with `VFieldType`.

next, `VMethod::Define()` resolves return type, and argument types, filling out
respective `VFieldType` fields.

then, `VMethod::Emit()` resolves statements, emits IR code, and optimises it.

and finally, `VMethod::PostLoad()` generates VM bytecode from IR code.

`Type.GetStackSize()` returns the size in "stack slots". stack slot size in
bytes doesn't matter, VM can choose that on its own. the only requirement is
that one stack slot should be big enough to keep float and pointer types.
(note: on x86 it is usually 4 bytes, on x86_64 it is usually 8 bytes).
WARNING! do not use this value to calculate real structure size!
NOTE: vector type always uses 3 stack slots for now.



notes about expressions
=======================

basic AST node for expression is `VExpression` (what a concidence, indeed!).

it has some interesting public fields:
  VFieldType Type;
    expression type. note that taking expression address for internal
    compiler needs doesn't change the type to pointer, there is a special
    flag field for that.

  VFieldType RealType;
    this is mostly used in assign operations. i will document it later
    (when i'll fully understand it, lol ;-).

  int Flags;
    here, only `FIELD_ReadOnly` has any sense. it means that this expression
    represents `read-only` one (i.e. you can take pointer to it, but cannot
    perform assign on that pointer).
    (there can be other flags, tho, so use bitops! or even better, accessors.)

  TLocation Loc;
    source code location.


some interesting methods:
  virtual VExpression *SyntaxCopy () = 0;
    to create a copy of this expression, use `SyntaxCopy()`.
    it must be called on an unresolved node, otherwise the result is undefined.

  virtual VExpression *DoResolve (VEmitContext &ec) = 0;
    this is our general "resolver". it resolves operands, determines expression
    type, and such.
    if called on an already resolved node, the result is undefined.
    variuous node types overloads this.

  virtual VTypeExpr *ResolveAsType (VEmitContext &ec);
    this resolves a node as a type expression.

  virtual VExpression *ResolveAssignmentTarget (VEmitContext &ec);
    this resolves a node as assignment target. most of the time it
    does normal resolve, and then calls `RequestAddressOf()`.

  virtual VExpression *ResolveAssignmentValue (VEmitContext &ec);
    this resolves a node as an assignment value. most of the time it
    simply calls the normal resolver.

  virtual VExpression *ResolveIterator (VEmitContext &ec);
    this is called to resolve an iterator method for `foreach Method(args)`.

  virtual VExpression *ResolveCompleteAssign (VEmitContext &ec, VExpression *val, bool &resolved);
    this is a gross hack i (k8) introduced because i am dumb.
    this will be called before the actual assign resolving.
    return `nullptr` to indicate some error, or consume `val` and set `resolved` to `true` if resolved.
    if `nullptr` is returned, both `this` and `val` should be destroyed.
    this is called for `op1 = op2` cases, like this (from `VAssignment::DoResolve()`):
      res = op1->ResolveCompleteAssign(ec, op2, resolved);
      if (resolved) {
        VExpression *e = op1;
        op1 = nullptr;
        op2 = nullptr;
        delete this;
        return e;
      }
    note that you cannot process `mathop=` in this way (for now).

  virtual void RequestAddressOf ();
    this is used to set "address requested" flag, which in turn is used in the codegen.


  VExpression *Resolve (VEmitContext &ec);
    this performs some checks, and calls `DoResolve()`.

  VExpression *ResolveBoolean (VEmitContext &ec);
    this resolves a value, and coerces that resolved value to boolean.

  VExpression *ResolveFloat (VEmitContext &ec); // actually, *TO* float
    this resolves a value, and coerces that resolved value to float.

  VExpression *CoerceToBool (VEmitContext &ec);
    call this on an already resolved node to coerce it to a boolean.

  VExpression *CoerceToFloat (VEmitContext &ec);
    call this on an already resolved node to coerce it to a float.

  static void CoerceTypes (VEmitContext &ec, VExpression *&op1, VExpression *&op2, bool coerceNoneDelegate); // expressions *MUST* be already resolved
    this coerces ints to floats, and fixes `none`/`nullptr` type.


  virtual VExpression *AddDropResult ();
    called on an resolved node, to notify it that its result is not needed.
    used in increments/decrements, to optimise use cases when their results
    are not needed (i.e. when user wrote something like `var++;`).


  WARNING! emitters should not change/destroy any node internal state, because
           the compiler may call them several times (when generating finalizer
           code for breaks/returns, for example)!

  virtual void Emit (VEmitContext &ec) = 0;
    generate IR code for a node.

  virtual void EmitBranchable (VEmitContext &ec, VLabel Lbl, bool OnTrue);
    this is used to emit boolean conditions. splitted to separate method, so
    compiler can emit special code for short-circuiting booleans.

  void EmitPushPointedCode (VFieldType type, VEmitContext &ec); // yeah, non-virtual
    called to emit address of a node (requested earlier with `RequestAddressOf()`.



notes about statements
======================

statemets are basic building blocks of the program. statement can be simple (as expression
statement, for example), or compound (like loop), that may contain list of "inner" statements.

as some VavoomC types (like string) require destruction (and options construction for structs),
each statement emits code in several stages (done in `Emit()`):

first, `EmitCtor()` is called, to emit any required constructors.

second, `DoEmit()` is called to emit statement body.

then, `EmitDtor()` is called, with "proper leaving" flag, to emit destructors.

and finally, `EmitFinalizer()` is called, with "proper leaving" flag, to emit post-scope finalizing.

we need to differentiate between "in-scope destructors" and "scope finalizing", because `foreach`
iterations, for example, creates hidden iterator objects that should not be destructed on each loop
iteration, but only after the iteration is complete.

"proper leaving" flag is used in `break`, `continue`, `return`, and other such statements which
alters the normal control flow. such statements calls dtor/finalizer emitters with "abnormal leaving"
flag.

resolving/codegen also keeps a linked list of "upscopes". it is done automatically in `Resolve()` and
`Emit()`. you can use `UpScope` field to traverse that list (but NEVER change that field manually!).

please, note that technically, destructors can be called several times, because "break" inserts jump
to break label, which is often put before calls to "proper" dtors, but it calls dtors for all
upscope blocks, and for the main block too, with "improper leaving" flag. i.e. the code may look like
this:

    ctors
  loopstart:
    body
  loopbreak:
    dtors
    finalizers

and `break` in "body" will jump to "loopbreak". this is a questionable design on my side, and may be
changed later. for now, it works because destructors will "clear" the corresponding locals, i.e. will
set them to the state where it is safe to call the destructor again.

but note that structs can define explicit destructors, and such destructors can be called on already
cleared struct, so it's better to check for this case.

most of the time it doesn't matter, though, because it is currently not possible to create a new local
in a loop expression, and things like:

  for (int a = 4...) ...

will be rewritten by the parser to:

  {
    int a = 4;
    for (...) ...
  }

i.e. new locals can be created only with new compounds.
