project('fluidsynth-lite', 'c', version : '1.1.6', meson_version : '>=0.46.0', default_options : 'c_std=gnu11')

cc = meson.get_compiler('c')

thread_dep = dependency('threads')
m_dep = cc.find_library('m', required : false)

conf_data = configuration_data()
conf_data.set('VERSION',            meson.project_version())
conf_data.set('DEFAULT_SOUNDFONT',  '""')
conf_data.set10('HAVE_DLFCN_H',     cc.has_header('dlfcn.h'))
conf_data.set10('HAVE_ERRNO_H',     cc.has_header('errno.h'))
conf_data.set10('HAVE_FCNTL_H',     cc.has_header('fcntl.h'))
conf_data.set10('HAVE_INTTYPES_H',  cc.has_header('inttypes.h'))
conf_data.set10('HAVE_LIBPTHREAD',  cc.has_header('pthread.h'))
conf_data.set10('HAVE_PTHREAD_H',   cc.has_header('pthread.h'))
conf_data.set10('HAVE_LIMITS_H',    cc.has_header('limits.h'))
conf_data.set10('HAVE_MATH_H',      cc.has_header('math.h'))
conf_data.set10('HAVE_SIGNAL_H',    cc.has_header('signal.h'))
conf_data.set10('HAVE_STDARG_H',    cc.has_header('stdarg.h'))
conf_data.set10('HAVE_STDINT_H',    cc.has_header('stdint.h'))
conf_data.set10('HAVE_STDBOOL_H',   cc.has_header('stdbool.h'))
conf_data.set10('HAVE_STDATOMIC_H', cc.has_header('stdatomic.h'))
conf_data.set10('HAVE_STDIO_H',     cc.has_header('stdio.h'))
conf_data.set10('HAVE_STDLIB_H',    cc.has_header('stdlib.h'))
conf_data.set10('HAVE_STRINGS_H',   cc.has_header('strings.h'))
conf_data.set10('HAVE_SYS_STAT_H',  cc.has_header('sys/stat.h'))
conf_data.set10('HAVE_THREADS_H',   cc.has_header('threads.h'))
conf_data.set10('HAVE_STRING_H',    cc.has_header('string.h'))
conf_data.set10('HAVE_UNISTD_H',    cc.has_header('unistd.h'))
conf_data.set10('SUPPORTS_VLA',     cc.compiles('int main(int c, char **v){int a[c]; return a[0];}'))
conf_data.set10('WORDS_BIGENDIAN',  target_machine.endian() == 'big')

configure_file(configuration : conf_data, input : 'src/config.meson.in', output : 'config.h')

subdir('include/fluidsynth')
subdir('src')
