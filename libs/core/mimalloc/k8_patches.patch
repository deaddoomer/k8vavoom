diff -puEZBbw -r _new/alloc-posix.c _pt/alloc-posix.c
--- _new/alloc-posix.c	2019-10-13 08:38:59.000000000 +0300
+++ _pt/alloc-posix.c	2019-10-13 08:56:13.000000000 +0300
@@ -107,7 +107,7 @@ unsigned char* mi_mbsdup(const unsigned
 int mi_dupenv_s(char** buf, size_t* size, const char* name) mi_attr_noexcept {
   if (buf==NULL || name==NULL) return EINVAL;
   if (size != NULL) *size = 0;
-  #pragma warning(suppress:4996)
+  //k8:fuck you, m$vc:#pragma warning(suppress:4996)
   char* p = getenv(name);
   if (p==NULL) {
     *buf = NULL;
@@ -128,7 +128,7 @@ int mi_wdupenv_s(unsigned short** buf, s
   *buf = NULL;
   return EINVAL;
 #else
-  #pragma warning(suppress:4996)
+  //k8:fuck you, m$vc:#pragma warning(suppress:4996)
   unsigned short* p = (unsigned short*)_wgetenv((const wchar_t*)name);
   if (p==NULL) {
     *buf = NULL;
diff -puEZBbw -r _new/alloc.c _pt/alloc.c
--- _new/alloc.c	2019-10-13 08:38:59.000000000 +0300
+++ _pt/alloc.c	2019-10-13 08:42:49.000000000 +0300
@@ -11,9 +11,11 @@ terms of the MIT license. A copy of the
 #include <string.h>  // memset, memcpy, strlen
 #include <stdlib.h>  // malloc, exit
 
+/*k8: no overrides
 #define MI_IN_ALLOC_C
 #include "alloc-override.c"
 #undef MI_IN_ALLOC_C
+*/
 
 // ------------------------------------------------------
 // Allocation
diff -puEZBbw -r _new/init.c _pt/init.c
--- _new/init.c	2019-10-13 08:38:59.000000000 +0300
+++ _pt/init.c	2019-10-13 08:52:13.000000000 +0300
@@ -293,10 +293,12 @@ static bool _mi_heap_done(void) {
   // use thread local storage keys to detect thread ending
   #include <windows.h>
   #include <fibersapi.h>
+  #if defined(MI_USE_FLS) && (MI_USE_FLS != 0)
   static DWORD mi_fls_key;
   static void NTAPI mi_fls_done(PVOID value) {
     if (value!=NULL) mi_thread_done();
   }
+  #endif
 #elif defined(MI_USE_PTHREADS)
   // use pthread locol storage keys to detect thread ending
   #include <pthread.h>
@@ -318,7 +320,9 @@ static void mi_process_setup_auto_thread
   #if defined(_WIN32) && defined(MI_SHARED_LIB)
     // nothing to do as it is done in DllMain
   #elif defined(_WIN32) && !defined(MI_SHARED_LIB)
+    #if defined(MI_USE_FLS) && (MI_USE_FLS != 0)
     mi_fls_key = FlsAlloc(&mi_fls_done);
+    #endif
   #elif defined(MI_USE_PTHREADS)
     pthread_key_create(&mi_pthread_key, &mi_pthread_done);
   #endif
@@ -347,7 +351,9 @@ void mi_thread_init(void) mi_attr_noexce
   #if defined(_WIN32) && defined(MI_SHARED_LIB)
     // nothing to do as it is done in DllMain
   #elif defined(_WIN32) && !defined(MI_SHARED_LIB)
+    #if defined(MI_USE_FLS) && (MI_USE_FLS != 0)
     FlsSetValue(mi_fls_key, (void*)(_mi_thread_id()|1)); // set to a dummy value so that `mi_fls_done` is called
+    #endif
   #elif defined(MI_USE_PTHREADS)
     pthread_setspecific(mi_pthread_key, (void*)(_mi_thread_id()|1)); // set to a dummy value so that `mi_pthread_done` is called
   #endif
@@ -506,6 +512,12 @@ static void mi_process_done(void) {
     return TRUE;
   }
 
+#elif defined(__GNUC__) || defined(__clang__)
+  // GCC,Clang: use the constructor attribute
+  static void __attribute__((constructor)) _mi_process_init(void) {
+    mi_process_load();
+  }
+
 #elif defined(__cplusplus)
   // C++: use static initialization to detect process start
   static bool _mi_process_init(void) {
@@ -514,12 +526,6 @@ static void mi_process_done(void) {
   }
   static bool mi_initialized = _mi_process_init();
 
-#elif defined(__GNUC__) || defined(__clang__)
-  // GCC,Clang: use the constructor attribute
-  static void __attribute__((constructor)) _mi_process_init(void) {
-    mi_process_load();
-  }
-
 #elif defined(_MSC_VER)
   // MSVC: use data section magic for static libraries
   // See <https://www.codeguru.com/cpp/misc/misc/applicationcontrol/article.php/c6945/Running-Code-Before-and-After-Main.htm>
diff -puEZBbw -r _new/mimalloc-types.h _pt/mimalloc-types.h
--- _new/mimalloc-types.h	2019-10-13 08:38:59.000000000 +0300
+++ _pt/mimalloc-types.h	2019-10-13 08:55:38.000000000 +0300
@@ -10,7 +10,7 @@ terms of the MIT license. A copy of the
 
 #include <stddef.h>   // ptrdiff_t
 #include <stdint.h>   // uintptr_t, uint16_t, etc
-#include <mimalloc-atomic.h>  // _Atomic
+#include "mimalloc-atomic.h"  // _Atomic
 
 // ------------------------------------------------------
 // Variants
diff -puEZBbw -r _new/mimalloc.h _pt/mimalloc.h
--- _new/mimalloc.h	2019-10-13 08:38:59.000000000 +0300
+++ _pt/mimalloc.h	2019-10-13 08:42:49.000000000 +0300
@@ -10,6 +10,21 @@ terms of the MIT license. A copy of the
 
 #define MI_MALLOC_VERSION 110   // major + 2 digits minor
 
+#if defined(_MSC_VER)
+# error "k8: m$vc support in mi-malloc is intentionally broken."
+#endif
+
+//k8: defaults
+// just in case, it is not used
+#define MI_STATIC_LIB
+#ifdef MI_SHARED_LIB
+# error "don't do this!"
+#endif
+
+#if defined(MI_SECURE) || (MI_SECURE != 0)
+# error "don't do this!"
+#endif
+
 // ------------------------------------------------------
 // Compiler specific attributes
 // ------------------------------------------------------
diff -puEZBbw -r _new/options.c _pt/options.c
--- _new/options.c	2019-10-13 08:38:59.000000000 +0300
+++ _pt/options.c	2019-10-13 08:46:31.000000000 +0300
@@ -54,7 +54,8 @@ static mi_option_desc_t options[_mi_opti
   // the following options are experimental and not all combinations make sense.
   { 1, UNINIT, MI_OPTION(eager_commit) },        // note: needs to be on when eager_region_commit is enabled
   #ifdef _WIN32   // and BSD?
-  { 0, UNINIT, MI_OPTION(eager_region_commit) }, // don't commit too eagerly on windows (just for looks...)
+  //k8: fuck off, i don't care how it looks in shitdows shitmanager
+  { 1, UNINIT, MI_OPTION(eager_region_commit) }, // don't commit too eagerly on windows (just for looks...)
   #else
   { 1, UNINIT, MI_OPTION(eager_region_commit) },
   #endif
@@ -146,7 +147,7 @@ static void mi_out_stderr(const char* ms
 
 // Should be atomic but gives errors on many platforms as generally we cannot cast a function pointer to a uintptr_t.
 // For now, don't register output from multiple threads.
-#pragma warning(suppress:4180)
+//k8:fuck you, m$vc:#pragma warning(suppress:4180)
 static mi_output_fun* volatile mi_out_default; // = NULL
 
 static mi_output_fun* mi_out_get_default(void) {
@@ -248,13 +249,13 @@ void _mi_assert_fail(const char* asserti
 
 static void mi_strlcpy(char* dest, const char* src, size_t dest_size) {
   dest[0] = 0;
-  #pragma warning(suppress:4996)
+  //k8:fuck you, m$vc:#pragma warning(suppress:4996)
   strncpy(dest, src, dest_size - 1);
   dest[dest_size - 1] = 0;
 }
 
 static void mi_strlcat(char* dest, const char* src, size_t dest_size) {
-  #pragma warning(suppress:4996)
+  //k8:fuck you, m$vc:#pragma warning(suppress:4996)
   strncat(dest, src, dest_size - 1);
   dest[dest_size - 1] = 0;
 }
diff -puEZBbw -r _new/os.c _pt/os.c
--- _new/os.c	2019-10-13 08:38:59.000000000 +0300
+++ _pt/os.c	2019-10-13 09:00:06.000000000 +0300
@@ -55,7 +55,7 @@ static void* mi_align_down_ptr(void* p,
 static size_t os_page_size = 4096;
 
 // minimal allocation granularity
-static size_t os_alloc_granularity = 4096;
+static __attribute__((unused)) size_t os_alloc_granularity = 4096;
 
 // if non-zero, use large page allocation
 static size_t large_os_page_size = 0;
@@ -141,6 +141,7 @@ void _mi_os_init(void) {
   if (si.dwPageSize > 0) os_page_size = si.dwPageSize;
   if (si.dwAllocationGranularity > 0) os_alloc_granularity = si.dwAllocationGranularity;
   // get the VirtualAlloc2 function
+  /*k8:fuck you, m$vc:
   HINSTANCE  hDll;
   hDll = LoadLibrary(TEXT("kernelbase.dll"));
   if (hDll != NULL) {
@@ -157,6 +158,7 @@ void _mi_os_init(void) {
   if (mi_option_is_enabled(mi_option_large_os_pages) || mi_option_is_enabled(mi_option_reserve_huge_os_pages)) {
     mi_win_enable_large_os_pages();
   }
+  */
 }
 #elif defined(__wasi__)
 void _mi_os_init() {
@@ -196,7 +198,7 @@ static bool mi_os_mem_free(void* addr, s
   if (was_committed) _mi_stat_decrease(&stats->committed, size); 
   _mi_stat_decrease(&stats->reserved, size);
   if (err) {
-#pragma warning(suppress:4996)
+//k8:fuck you, m$vc:#pragma warning(suppress:4996)
     _mi_warning_message("munmap failed: %s, addr 0x%8li, size %lu\n", strerror(errno), (size_t)addr, size);
     return false;
   }
@@ -441,7 +443,7 @@ static void* mi_os_get_aligned_hint(size
   return (void*)hint;
 }
 #else
-static void* mi_os_get_aligned_hint(size_t try_alignment, size_t size) {
+static __attribute__((unused)) void* mi_os_get_aligned_hint(size_t try_alignment, size_t size) {
   UNUSED(try_alignment); UNUSED(size);
   return NULL;
 }
diff -puEZBbw -r _new/stats.c _pt/stats.c
--- _new/stats.c	2019-10-13 08:38:59.000000000 +0300
+++ _pt/stats.c	2019-10-13 08:42:49.000000000 +0300
@@ -380,7 +380,7 @@ double _mi_clock_end(double start) {
 #if defined(_WIN32)
 #include <windows.h>
 #include <psapi.h>
-#pragma comment(lib,"psapi.lib")
+/*k8:fuck you, m$vc:#pragma comment(lib,"psapi.lib")
 
 static double filetime_secs(const FILETIME* ftime) {
   ULARGE_INTEGER i;
@@ -389,7 +389,9 @@ static double filetime_secs(const FILETI
   double secs = (double)(i.QuadPart) * 1.0e-7; // FILETIME is in 100 nano seconds
   return secs;
 }
+*/
 static void mi_process_info(double* utime, double* stime, size_t* peak_rss, size_t* page_faults, size_t* page_reclaim, size_t* peak_commit) {
+/*k8:fuck you, m$vc:
   FILETIME ct;
   FILETIME ut;
   FILETIME st;
@@ -404,6 +406,13 @@ static void mi_process_info(double* utim
   *page_faults = (size_t)info.PageFaultCount;
   *peak_commit = (size_t)info.PeakPagefileUsage;
   *page_reclaim = 0;
+*/
+  *utime = 0;
+  *stime = 0;
+  *peak_rss = 0;
+  *page_faults = 0;
+  *peak_commit = 0;
+  *page_reclaim = 0;
 }
 
 #elif defined(__unix__) || defined(__unix) || defined(unix) || (defined(__APPLE__) && defined(__MACH__))
