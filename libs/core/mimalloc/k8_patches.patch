diff --git a/include/mimalloc-new-delete.h b/include/mimalloc-new-delete.h
index ba208f0..a09690a 100644
--- a/include/mimalloc-new-delete.h
+++ b/include/mimalloc-new-delete.h
@@ -20,7 +20,7 @@ terms of the MIT license. A copy of the license can be found in the file
 // ---------------------------------------------------------------------------
 #if defined(__cplusplus)
   #include <new>
-  #include <mimalloc.h>
+  #include "mimalloc.h"
 
   void operator delete(void* p) noexcept              { mi_free(p); };
   void operator delete[](void* p) noexcept            { mi_free(p); };
diff --git a/include/mimalloc-override.h b/include/mimalloc-override.h
index 7d9f3e7..50022db 100644
--- a/include/mimalloc-override.h
+++ b/include/mimalloc-override.h
@@ -15,7 +15,7 @@ each source file in a project (but be careful when using external code to
 not accidentally mix pointers from different allocators).
 -----------------------------------------------------------------------------*/
 
-#include <mimalloc.h>
+#include "mimalloc.h"
 
 // Standard C allocation
 #define malloc(n)               mi_malloc(n)
diff --git a/include/mimalloc.h b/include/mimalloc.h
index fe5aa8f..3cec483 100644
--- a/include/mimalloc.h
+++ b/include/mimalloc.h
@@ -10,6 +10,34 @@ terms of the MIT license. A copy of the license can be found in the file
 
 #define MI_MALLOC_VERSION 171   // major + 2 digits minor
 
+
+//k8: defaults
+// just in case, it is not used
+#define MI_STATIC_LIB
+#ifdef MI_SHARED_LIB
+# error "don't do this!"
+#endif
+
+#if defined(MI_SECURE) || (MI_SECURE != 0)
+# error "don't do this!"
+#endif
+
+#ifdef MI_DEBUG
+# undef MI_DEBUG
+#endif
+#define MI_DEBUG 0
+
+#ifdef MI_MALLOC_OVERRIDE
+# undef MI_MALLOC_OVERRIDE
+#endif
+
+// just in case
+#ifdef MI_STAT
+# undef MI_STAT
+# define MI_STAT 0
+#endif
+
+
 // ------------------------------------------------------
 // Compiler specific attributes
 // ------------------------------------------------------
diff --git a/src/alloc-override.c b/src/alloc-override.c
index 6a87e7b..99f87e5 100644
--- a/src/alloc-override.c
+++ b/src/alloc-override.c
@@ -4,6 +4,8 @@ This is free software; you can redistribute it and/or modify it under the
 terms of the MIT license. A copy of the license can be found in the file
 "LICENSE" at the root of this distribution.
 -----------------------------------------------------------------------------*/
+/*k8*/
+#if defined(MI_MALLOC_OVERRIDE) && MI_MALLOC_OVERRIDE
 
 #if !defined(MI_IN_ALLOC_C)
 #error "this file should be included from 'alloc.c' (so aliases can work)"
@@ -220,3 +222,6 @@ void* aligned_alloc(size_t alignment, size_t size)   { return mi_aligned_alloc(a
 #endif
 
 #endif // MI_MALLOC_OVERRIDE && !_WIN32
+
+/*k8*/
+#endif
diff --git a/src/alloc.c b/src/alloc.c
index 8acff78..892ef1f 100644
--- a/src/alloc.c
+++ b/src/alloc.c
@@ -788,6 +788,9 @@ use a C compiler we cannot throw a `bad_alloc` exception
 but we call `exit` instead (i.e. not returning).
 -------------------------------------------------------*/
 
+//k8: get lost, i'm not using overrides
+#if defined(MI_MALLOC_OVERRIDE) && MI_MALLOC_OVERRIDE
+
 #ifdef __cplusplus
 #include <new>
 static bool mi_try_new_handler(bool nothrow) {
@@ -903,3 +906,6 @@ void* mi_new_reallocn(void* p, size_t newcount, size_t size) {
     return mi_new_realloc(p, total);
   }
 }
+
+#endif
+//k8: get lost, i'm not using overrides
diff --git a/src/init.c b/src/init.c
index c0f09b5..2db2923 100644
--- a/src/init.c
+++ b/src/init.c
@@ -138,6 +138,15 @@ bool _mi_process_is_initialized = false;  // set to `true` in `mi_process_init`.
 mi_stats_t _mi_stats_main = { MI_STATS_NULL };
 
 
+//k8:mingw fix
+#if defined(_WIN32) && !defined(MI_SHARED_LIB)
+__declspec(dllimport) DWORD WINAPI FlsAlloc (PFLS_CALLBACK_FUNCTION lpCallback);
+//__declspec(dllimport) PVOID WINAPI FlsGetValue (DWORD dwFlsIndex);
+__declspec(dllimport) WINBOOL WINAPI FlsSetValue (DWORD dwFlsIndex, PVOID lpFlsData);
+//__declspec(dllimport) WINBOOL WINAPI FlsFree (DWORD dwFlsIndex);
+#endif
+
+
 static void mi_heap_main_init(void) {
   if (_mi_heap_main.cookie == 0) {
     _mi_heap_main.thread_id = _mi_thread_id();
@@ -547,6 +556,12 @@ static void mi_process_done(void) {
     return TRUE;
   }
 
+#elif defined(__GNUC__) || defined(__clang__)
+  // GCC,Clang: use the constructor attribute
+  static void __attribute__((constructor)) _mi_process_init(void) {
+    mi_process_load();
+  }
+
 #elif defined(__cplusplus)
   // C++: use static initialization to detect process start
   static bool _mi_process_init(void) {
@@ -555,12 +570,6 @@ static void mi_process_done(void) {
   }
   static bool mi_initialized = _mi_process_init();
 
-#elif defined(__GNUC__) || defined(__clang__)
-  // GCC,Clang: use the constructor attribute
-  static void __attribute__((constructor)) _mi_process_init(void) {
-    mi_process_load();
-  }
-
 #elif defined(_MSC_VER)
   // MSVC: use data section magic for static libraries
   // See <https://www.codeguru.com/cpp/misc/misc/applicationcontrol/article.php/c6945/Running-Code-Before-and-After-Main.htm>
diff --git a/src/os.c b/src/os.c
index 8541523..96475f6 100644
--- a/src/os.c
+++ b/src/os.c
@@ -144,6 +144,7 @@ static bool mi_win_enable_large_os_pages()
 {
   if (large_os_page_size > 0) return true;
 
+/*k8: get lost
   // Try to see if large OS pages are supported
   // To use large pages on Windows, we first need access permission
   // Set "Lock pages in memory" permission in the group policy editor
@@ -173,6 +174,8 @@ static bool mi_win_enable_large_os_pages()
     _mi_warning_message("cannot enable large OS page support, error %lu\n", err);
   }
   return (ok!=0);
+*/
+  return false;
 }
 
 void _mi_os_init(void) {
@@ -507,7 +510,7 @@ static void* mi_os_get_aligned_hint(size_t try_alignment, size_t size)
   return (void*)hint;
 }
 #else
-static void* mi_os_get_aligned_hint(size_t try_alignment, size_t size) {
+static __attribute__((unused)) void* mi_os_get_aligned_hint(size_t try_alignment, size_t size) {
   UNUSED(try_alignment); UNUSED(size);
   return NULL;
 }
@@ -1125,6 +1128,7 @@ Support NUMA aware allocation
 -----------------------------------------------------------------------------*/
 #ifdef _WIN32  
 static size_t mi_os_numa_nodex() {
+/*k8: fuck off
   USHORT numa_node = 0;
   if (pGetCurrentProcessorNumberEx != NULL && pGetNumaProcessorNodeEx != NULL) {
     // Extended API is supported
@@ -1142,9 +1146,12 @@ static size_t mi_os_numa_nodex() {
     if (ok) numa_node = nnode;    
   }
   return numa_node;
+*/
+  return 0;
 }
 
 static size_t mi_os_numa_node_countx(void) {
+/*k8: fuck off
   ULONG numa_max = 0;
   GetNumaHighestNodeNumber(&numa_max);
   // find the highest node number that has actual processors assigned to it. Issue #282
@@ -1167,6 +1174,8 @@ static size_t mi_os_numa_node_countx(void) {
     numa_max--;
   }
   return ((size_t)numa_max + 1);
+*/
+  return 1;
 }
 #elif defined(__linux__)
 #include <sys/syscall.h>  // getcpu
diff --git a/src/random.c b/src/random.c
index 255bede..33e3a0b 100644
--- a/src/random.c
+++ b/src/random.c
@@ -164,12 +164,18 @@ If we cannot get good randomness, we fall back to weak randomness based on a tim
 #if defined(_WIN32)
 
 #if !defined(MI_USE_RTLGENRANDOM)
+/*k8: fuck off
 // We prefer BCryptGenRandom over RtlGenRandom
 #pragma comment (lib,"bcrypt.lib")
 #include <bcrypt.h>
 static bool os_random_buf(void* buf, size_t buf_len) {
   return (BCryptGenRandom(NULL, (PUCHAR)buf, (ULONG)buf_len, BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0);
 }
+*/
+static bool os_random_buf(void* buf, size_t buf_len) {
+  // this will fall back to "weak random"
+  return false;
+}
 #else
 // Use (unofficial) RtlGenRandom
 #pragma comment (lib,"advapi32.lib")
diff --git a/src/stats.c b/src/stats.c
index c94fbde..43b41b1 100644
--- a/src/stats.c
+++ b/src/stats.c
@@ -449,6 +449,7 @@ mi_msecs_t _mi_clock_end(mi_msecs_t start) {
 
 #if defined(_WIN32)
 #include <windows.h>
+/*k8: fuck off
 #include <psapi.h>
 #pragma comment(lib,"psapi.lib")
 
@@ -459,9 +460,10 @@ static mi_msecs_t filetime_msecs(const FILETIME* ftime) {
   mi_msecs_t msecs = (i.QuadPart / 10000); // FILETIME is in 100 nano seconds
   return msecs;
 }
-
+*/
 static void mi_stat_process_info(mi_msecs_t* elapsed, mi_msecs_t* utime, mi_msecs_t* stime, size_t* current_rss, size_t* peak_rss, size_t* current_commit, size_t* peak_commit, size_t* page_faults) 
 {
+/*k8: fuck off
   *elapsed = _mi_clock_end(mi_process_start);
   FILETIME ct;
   FILETIME ut;
@@ -477,6 +479,15 @@ static void mi_stat_process_info(mi_msecs_t* elapsed, mi_msecs_t* utime, mi_msec
   *current_commit = (size_t)info.PagefileUsage;
   *peak_commit    = (size_t)info.PeakPagefileUsage;
   *page_faults    = (size_t)info.PageFaultCount;  
+*/
+  *elapsed = 0;
+  *utime = 0;
+  *stime = 0;
+  *current_rss    = 0;
+  *peak_rss       = 0;
+  *current_commit = 0;
+  *peak_commit    = 0;
+  *page_faults    = 0;
 }
 
 #elif defined(__unix__) || defined(__unix) || defined(unix) || defined(__APPLE__) || defined(__HAIKU__)
