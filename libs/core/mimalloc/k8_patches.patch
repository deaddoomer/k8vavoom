diff -puEZBbw -r _pt/alloc-posix.c _curr/alloc-posix.c
--- _pt/alloc-posix.c	2020-04-11 14:38:24.000000000 +0300
+++ _curr/alloc-posix.c	2020-04-11 14:50:22.000000000 +0300
@@ -111,7 +111,7 @@ mi_decl_restrict unsigned char* mi_mbsdu
 int mi_dupenv_s(char** buf, size_t* size, const char* name) mi_attr_noexcept {
   if (buf==NULL || name==NULL) return EINVAL;
   if (size != NULL) *size = 0;
-  #pragma warning(suppress:4996)
+  //k8:fuck you, m$vc:#pragma warning(suppress:4996)
   char* p = getenv(name);
   if (p==NULL) {
     *buf = NULL;
@@ -132,7 +132,7 @@ int mi_wdupenv_s(unsigned short** buf, s
   *buf = NULL;
   return EINVAL;
 #else
-  #pragma warning(suppress:4996)
+  //k8:fuck you, m$vc:#pragma warning(suppress:4996)
   unsigned short* p = (unsigned short*)_wgetenv((const wchar_t*)name);
   if (p==NULL) {
     *buf = NULL;
diff -puEZBbw -r _pt/alloc.c _curr/alloc.c
--- _pt/alloc.c	2020-04-11 14:49:18.000000000 +0300
+++ _curr/alloc.c	2020-04-11 14:51:19.000000000 +0300
@@ -11,9 +11,11 @@ terms of the MIT license. A copy of the
 #include <string.h>  // memset, memcpy, strlen
 #include <stdlib.h>  // malloc, exit
 
+/*k8: no overrides
 #define MI_IN_ALLOC_C
 #include "alloc-override.c"
 #undef MI_IN_ALLOC_C
+*/
 
 // ------------------------------------------------------
 // Allocation
@@ -723,6 +725,8 @@ use a C compiler we cannot throw a `bad_
 but we call `exit` instead (i.e. not returning).
 -------------------------------------------------------*/
 
+#if 0
+//k8: get lost, i'm not using overrides
 #ifdef __cplusplus
 #include <new>
 static bool mi_try_new_handler(bool nothrow) {
@@ -833,3 +837,4 @@ void* mi_new_reallocn(void* p, size_t ne
     return mi_new_realloc(p, total);
   }
 }
+#endif
diff -puEZBbw -r _pt/init.c _curr/init.c
--- _pt/init.c	2020-04-11 14:38:24.000000000 +0300
+++ _curr/init.c	2020-04-11 15:22:00.000000000 +0300
@@ -300,6 +300,14 @@ static void _mi_thread_done(mi_heap_t* d
   #pragma message("define a way to call mi_thread_done when a thread is done")
 #endif
 
+//k8:mingw fix
+#if defined(_WIN32) && !defined(MI_SHARED_LIB)
+__declspec(dllimport) DWORD WINAPI FlsAlloc (PFLS_CALLBACK_FUNCTION lpCallback);
+//__declspec(dllimport) PVOID WINAPI FlsGetValue (DWORD dwFlsIndex);
+__declspec(dllimport) WINBOOL WINAPI FlsSetValue (DWORD dwFlsIndex, PVOID lpFlsData);
+//__declspec(dllimport) WINBOOL WINAPI FlsFree (DWORD dwFlsIndex);
+#endif
+
 // Set up handlers so `mi_thread_done` is called automatically
 static void mi_process_setup_auto_thread_done(void) {
   static bool tls_initialized = false; // fine if it races
@@ -511,6 +519,12 @@ static void mi_process_done(void) {
     return TRUE;
   }
 
+#elif defined(__GNUC__) || defined(__clang__)
+  // GCC,Clang: use the constructor attribute
+  static void __attribute__((constructor)) _mi_process_init(void) {
+    mi_process_load();
+  }
+
 #elif defined(__cplusplus)
   // C++: use static initialization to detect process start
   static bool _mi_process_init(void) {
@@ -519,12 +533,6 @@ static void mi_process_done(void) {
   }
   static bool mi_initialized = _mi_process_init();
 
-#elif defined(__GNUC__) || defined(__clang__)
-  // GCC,Clang: use the constructor attribute
-  static void __attribute__((constructor)) _mi_process_init(void) {
-    mi_process_load();
-  }
-
 #elif defined(_MSC_VER)
   // MSVC: use data section magic for static libraries
   // See <https://www.codeguru.com/cpp/misc/misc/applicationcontrol/article.php/c6945/Running-Code-Before-and-After-Main.htm>
diff -puEZBbw -r _pt/mimalloc-internal.h _curr/mimalloc-internal.h
--- _pt/mimalloc-internal.h	2020-04-11 14:38:24.000000000 +0300
+++ _curr/mimalloc-internal.h	2020-04-11 14:50:16.000000000 +0300
@@ -18,7 +18,7 @@ terms of the MIT license. A copy of the
 
 #define MI_CACHE_LINE          64
 #if defined(_MSC_VER)
-#pragma warning(disable:4127)   // suppress constant conditional warning (due to MI_SECURE paths)
+//k8:fuck you, m$vc:#pragma warning(disable:4127)   // suppress constant conditional warning (due to MI_SECURE paths)
 #define mi_decl_noinline        __declspec(noinline)
 #define mi_decl_thread          __declspec(thread)
 #define mi_decl_cache_align     __declspec(align(MI_CACHE_LINE))
diff -puEZBbw -r _pt/mimalloc-types.h _curr/mimalloc-types.h
--- _pt/mimalloc-types.h	2020-04-11 14:38:24.000000000 +0300
+++ _curr/mimalloc-types.h	2020-04-11 15:07:16.000000000 +0300
@@ -10,7 +10,7 @@ terms of the MIT license. A copy of the
 
 #include <stddef.h>   // ptrdiff_t
 #include <stdint.h>   // uintptr_t, uint16_t, etc
-#include <mimalloc-atomic.h>  // _Atomic
+#include "mimalloc-atomic.h"  // _Atomic
 
 // Minimal alignment necessary. On most platforms 16 bytes are needed
 // due to SSE registers for example. This must be at least `MI_INTPTR_SIZE`
@@ -22,6 +22,9 @@ terms of the MIT license. A copy of the
 
 // Define NDEBUG in the release version to disable assertions.
 // #define NDEBUG
+#ifndef NDEBUG
+# define NDEBUG
+#endif
 
 // Define MI_STAT as 1 to maintain statistics; set it to 2 to have detailed statistics (but costs some performance).
 // #define MI_STAT 1
diff -puEZBbw -r _pt/mimalloc.h _curr/mimalloc.h
--- _pt/mimalloc.h	2020-04-11 14:38:24.000000000 +0300
+++ _curr/mimalloc.h	2020-04-11 14:53:36.000000000 +0300
@@ -10,6 +10,26 @@ terms of the MIT license. A copy of the
 
 #define MI_MALLOC_VERSION 161   // major + 2 digits minor
 
+#if defined(_MSC_VER)
+# error "k8: m$vc support in mi-malloc is intentionally broken."
+#endif
+
+//k8: defaults
+// just in case, it is not used
+#define MI_STATIC_LIB
+#ifdef MI_SHARED_LIB
+# error "don't do this!"
+#endif
+
+#if defined(MI_SECURE) || (MI_SECURE != 0)
+# error "don't do this!"
+#endif
+
+#ifdef MI_DEBUG
+# undef MI_DEBUG
+#endif
+#define MI_DEBUG 0
+
 // ------------------------------------------------------
 // Compiler specific attributes
 // ------------------------------------------------------
diff -puEZBbw -r _pt/options.c _curr/options.c
--- _pt/options.c	2020-04-11 14:38:24.000000000 +0300
+++ _curr/options.c	2020-04-11 15:01:52.000000000 +0300
@@ -57,7 +57,9 @@ static mi_option_desc_t options[_mi_opti
 
   // the following options are experimental and not all combinations make sense.
   { 1, UNINIT, MI_OPTION(eager_commit) },        // commit on demand
-  #if defined(_WIN32) || (MI_INTPTR_SIZE <= 4)   // and other OS's without overcommit?
+  //k8: we're not "long-running", and we want it to be fast
+  //#if defined(_WIN32) || (MI_INTPTR_SIZE <= 4)   // and other OS's without overcommit?
+  #if 0
   { 0, UNINIT, MI_OPTION(eager_region_commit) },
   { 1, UNINIT, MI_OPTION(reset_decommits) },     // reset decommits memory
   #else
@@ -75,7 +77,9 @@ static mi_option_desc_t options[_mi_opti
 #else
   { 1, UNINIT, MI_OPTION(eager_commit_delay) },  // the first N segments per thread are not eagerly committed
 #endif
-  { 100, UNINIT, MI_OPTION(reset_delay) },       // reset delay in milli-seconds
+  //k8: bigger delay, why not?
+  //{ 100, UNINIT, MI_OPTION(reset_delay) },       // reset delay in milli-seconds
+  { 3600, UNINIT, MI_OPTION(reset_delay) },       // reset delay in milli-seconds
   { 0,   UNINIT, MI_OPTION(use_numa_nodes) },    // 0 = use available numa nodes, otherwise use at most N nodes.
   { 100, UNINIT, MI_OPTION(os_tag) },            // only apple specific for now but might serve more or less related purpose
   { 16,  UNINIT, MI_OPTION(max_errors) }         // maximum errors that are output
@@ -211,7 +215,7 @@ static void mi_out_buf_stderr(const char
 
 // Should be atomic but gives errors on many platforms as generally we cannot cast a function pointer to a uintptr_t.
 // For now, don't register output from multiple threads.
-#pragma warning(suppress:4180)
+//k8:fuck you, m$vc:#pragma warning(suppress:4180)
 static mi_output_fun* volatile mi_out_default; // = NULL
 static volatile _Atomic(void*) mi_out_arg; // = NULL
 
@@ -376,13 +380,13 @@ void _mi_error_message(int err, const ch
 
 static void mi_strlcpy(char* dest, const char* src, size_t dest_size) {
   dest[0] = 0;
-  #pragma warning(suppress:4996)
+  //k8:fuck you, m$vc:#pragma warning(suppress:4996)
   strncpy(dest, src, dest_size - 1);
   dest[dest_size - 1] = 0;
 }
 
 static void mi_strlcat(char* dest, const char* src, size_t dest_size) {
-  #pragma warning(suppress:4996)
+  //k8:fuck you, m$vc:#pragma warning(suppress:4996)
   strncat(dest, src, dest_size - 1);
   dest[dest_size - 1] = 0;
 }
diff -puEZBbw -r _pt/os.c _curr/os.c
--- _pt/os.c	2020-04-11 14:38:24.000000000 +0300
+++ _curr/os.c	2020-04-11 15:22:15.000000000 +0300
@@ -53,7 +53,7 @@ static void* mi_align_down_ptr(void* p,
 static size_t os_page_size = 4096;
 
 // minimal allocation granularity
-static size_t os_alloc_granularity = 4096;
+static __attribute__((unused)) size_t os_alloc_granularity = 4096;
 
 // if non-zero, use large page allocation
 static size_t large_os_page_size = 0;
@@ -94,6 +94,7 @@ size_t _mi_os_good_alloc_size(size_t siz
 #include <winternl.h>
 typedef PVOID    (__stdcall *PVirtualAlloc2)(HANDLE, PVOID, SIZE_T, ULONG, ULONG, /* MEM_EXTENDED_PARAMETER* */ void*, ULONG);
 typedef NTSTATUS (__stdcall *PNtAllocateVirtualMemoryEx)(HANDLE, PVOID*, SIZE_T*, ULONG, ULONG, /* MEM_EXTENDED_PARAMETER* */ PVOID, ULONG);
+/*k8:fuck you, shitdoze!
 static PVirtualAlloc2 pVirtualAlloc2 = NULL;
 static PNtAllocateVirtualMemoryEx pNtAllocateVirtualMemoryEx = NULL;
 
@@ -131,6 +132,7 @@ static bool mi_win_enable_large_os_pages
   }
   return (ok!=0);
 }
+*/
 
 void _mi_os_init(void) {
   // get the page size
@@ -139,6 +141,7 @@ void _mi_os_init(void) {
   if (si.dwPageSize > 0) os_page_size = si.dwPageSize;
   if (si.dwAllocationGranularity > 0) os_alloc_granularity = si.dwAllocationGranularity;
   // get the VirtualAlloc2 function
+/*k8:fuck you, shitdoze!
   HINSTANCE  hDll;
   hDll = LoadLibrary(TEXT("kernelbase.dll"));
   if (hDll != NULL) {
@@ -155,6 +158,7 @@ void _mi_os_init(void) {
   if (mi_option_is_enabled(mi_option_large_os_pages) || mi_option_is_enabled(mi_option_reserve_huge_os_pages)) {
     mi_win_enable_large_os_pages();
   }
+*/
 }
 #elif defined(__wasi__)
 void _mi_os_init() {
@@ -192,7 +196,7 @@ static bool mi_os_mem_free(void* addr, s
   if (was_committed) _mi_stat_decrease(&stats->committed, size);
   _mi_stat_decrease(&stats->reserved, size);
   if (err) {
-    #pragma warning(suppress:4996)
+    //k8:fuck you, m$vc:#pragma warning(suppress:4996)
     _mi_warning_message("munmap failed: %s, addr 0x%8li, size %lu\n", strerror(errno), (size_t)addr, size);
     return false;
   }
@@ -201,7 +205,7 @@ static bool mi_os_mem_free(void* addr, s
   }
 }
 
-static void* mi_os_get_aligned_hint(size_t try_alignment, size_t size);
+static __attribute__((unused)) void* mi_os_get_aligned_hint(size_t try_alignment, size_t size);
 
 #ifdef _WIN32
 static void* mi_win_virtual_allocx(void* addr, size_t size, size_t try_alignment, DWORD flags) {
@@ -1009,17 +1013,23 @@ Support NUMA aware allocation
 -----------------------------------------------------------------------------*/
 #ifdef WIN32
 static size_t mi_os_numa_nodex() {
+/*k8: fuck off
   PROCESSOR_NUMBER pnum;
   USHORT numa_node = 0;
   GetCurrentProcessorNumberEx(&pnum);
   GetNumaProcessorNodeEx(&pnum,&numa_node);
   return numa_node;
+*/
+  return 0;
 }
 
 static size_t mi_os_numa_node_countx(void) {
+/*k8: fuck off
   ULONG numa_max = 0;
   GetNumaHighestNodeNumber(&numa_max);
   return (numa_max + 1);
+*/
+  return 1;
 }
 #elif defined(__linux__)
 #include <sys/syscall.h>  // getcpu
diff -puEZBbw -r _pt/random.c _curr/random.c
--- _pt/random.c	2020-04-11 14:38:24.000000000 +0300
+++ _curr/random.c	2020-04-11 15:19:59.000000000 +0300
@@ -162,11 +162,95 @@ If we cannot get good randomness, we fal
 -----------------------------------------------------------------------------*/
 
 #if defined(_WIN32)
+/*k8: fuck off
 #pragma comment (lib,"bcrypt.lib")
 #include <bcrypt.h>
 static bool os_random_buf(void* buf, size_t buf_len) {
   return (BCryptGenRandom(NULL, (PUCHAR)buf, (ULONG)buf_len, BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0);
 }
+*/
+// SplitMix; mostly used to generate 64-bit seeds
+static inline uint64_t splitmix64_next (uint64_t *state) {
+  uint64_t result = *state;
+  *state = result+(uint64_t)0x9E3779B97f4A7C15ULL;
+  result = (result^(result>>30))*(uint64_t)0xBF58476D1CE4E5B9ULL;
+  result = (result^(result>>27))*(uint64_t)0x94D049BB133111EBULL;
+  return result^(result>>31);
+}
+
+static inline void splitmix64_seedU64 (uint64_t *state, uint32_t seed0, uint32_t seed1) {
+  // hashU32
+  uint32_t res = seed0;
+  res -= (res<<6);
+  res ^= (res>>17);
+  res -= (res<<9);
+  res ^= (res<<4);
+  res -= (res<<3);
+  res ^= (res<<10);
+  res ^= (res>>15);
+  uint64_t n = res;
+  n <<= 32;
+  // hashU32
+  res = seed1;
+  res -= (res<<6);
+  res ^= (res>>17);
+  res -= (res<<9);
+  res ^= (res<<4);
+  res -= (res<<3);
+  res ^= (res<<10);
+  res ^= (res>>15);
+  n |= res;
+  *state = n;
+}
+
+typedef BOOLEAN WINAPI (*RtlGenRandomFn) (PVOID RandomBuffer,ULONG RandomBufferLength);
+static void RtlGenRandomX (PVOID RandomBuffer, ULONG RandomBufferLength) {
+  if (RandomBufferLength <= 0) return;
+  RtlGenRandomFn RtlGenRandomXX = NULL;
+  HMODULE libh = LoadLibraryA("advapi32.dll");
+  if (libh) {
+    RtlGenRandomXX = (RtlGenRandomFn)(void *)GetProcAddress(libh, "SystemFunction036");
+    //if (!RtlGenRandomXX) fprintf(stderr, "WARNING: `RtlGenRandom()` is not found!\n");
+    //else fprintf(stderr, "MESSAGE: `RtlGenRandom()` found!\n");
+    if (RtlGenRandomXX) {
+      if (RtlGenRandomXX(RandomBuffer, RandomBufferLength)) return;
+      //fprintf(stderr, "WARNING: `RtlGenRandom()` fallback for %u bytes!\n", (unsigned)RandomBufferLength);
+    }
+  }
+  // initialise isaacp with some shit
+  uint32_t smxseed0 = 0;
+  uint32_t smxseed1 = (uint32_t)GetCurrentProcessId();
+  SYSTEMTIME st;
+  FILETIME ft;
+  GetLocalTime(&st);
+  if (!SystemTimeToFileTime(&st, &ft)) {
+    //fprintf(stderr, "SHIT: `SystemTimeToFileTime()` failed!\n");
+    smxseed0 = (uint32_t)(GetTickCount());
+  } else {
+    smxseed0 = (uint32_t)(ft.dwLowDateTime);
+  }
+  uint64_t smx;
+  splitmix64_seedU64(&smx, smxseed0, smxseed1);
+  uint8_t *dest = (uint8_t *)RandomBuffer;
+  while (RandomBufferLength >= 8) {
+    *(uint64_t *)dest = splitmix64_next(&smx);
+    dest += 8;
+    RandomBufferLength -= 8;
+  }
+  if (RandomBufferLength > 0) {
+    uint64_t v = splitmix64_next(&smx);
+    const uint8_t *src = (const uint8_t *)&v;
+    while (RandomBufferLength > 0) {
+      *dest++ = *src++;
+      --RandomBufferLength;
+    }
+  }
+}
+
+static bool os_random_buf(void* buf, size_t buf_len) {
+  RtlGenRandomX(buf, (ULONG)buf_len);
+  return true;
+}
 /*
 #define SystemFunction036 NTAPI SystemFunction036
 #include <NTSecAPI.h>
diff -puEZBbw -r _pt/stats.c _curr/stats.c
--- _pt/stats.c	2020-04-11 14:38:24.000000000 +0300
+++ _curr/stats.c	2020-04-11 15:06:33.000000000 +0300
@@ -397,7 +397,7 @@ mi_msecs_t _mi_clock_end(mi_msecs_t star
 #if defined(_WIN32)
 #include <windows.h>
 #include <psapi.h>
-#pragma comment(lib,"psapi.lib")
+/*k8:fuck you, m$vc:#pragma comment(lib,"psapi.lib")
 
 static mi_msecs_t filetime_msecs(const FILETIME* ftime) {
   ULARGE_INTEGER i;
@@ -406,7 +406,9 @@ static mi_msecs_t filetime_msecs(const F
   mi_msecs_t msecs = (i.QuadPart / 10000); // FILETIME is in 100 nano seconds
   return msecs;
 }
+*/
 static void mi_process_info(mi_msecs_t* utime, mi_msecs_t* stime, size_t* peak_rss, size_t* page_faults, size_t* page_reclaim, size_t* peak_commit) {
+/*k8:fuck you, m$vc:
   FILETIME ct;
   FILETIME ut;
   FILETIME st;
@@ -421,6 +423,13 @@ static void mi_process_info(mi_msecs_t*
   *page_faults = (size_t)info.PageFaultCount;
   *peak_commit = (size_t)info.PeakPagefileUsage;
   *page_reclaim = 0;
+*/
+  *utime = 0;
+  *stime = 0;
+  *peak_rss = (size_t)0;
+  *page_faults = (size_t)0;
+  *page_reclaim = 0;
+  *peak_commit = (size_t)0;
 }
 
 #elif defined(__unix__) || defined(__unix) || defined(unix) || (defined(__APPLE__) && defined(__MACH__))
