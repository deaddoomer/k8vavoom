//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StatusBarScreen : Window;

const int BAR_X = 160;
const int BAR_Y = 438;

ClientGameBase ClGame;

Player cl;

// Chain
int HealthMarker;
int ChainWiggle;

bool hitCentreFrame;

// Graphics
int pic_barback;
int pic_god1;
int pic_god2;
int pic_barltop;
int pic_barrtop;
int pic_chain;
int pic_lifegem;
int pic_ltface;
int pic_rtface;
int pic_mainbar;
int pic_innum[10];
int pic_smallinnum[10];
int pic_minus;
int pic_lame;
int pic_bignum[10];
int bignumwidth[10];
int pic_ykey;
int pic_gkey;
int pic_bkey;
int pic_artiflash[4];
int pic_arti[10];
int pic_artibox;
int pic_invbar;
int pic_selectbox;
int pic_flight[16];
int pic_book[16];
int pic_invgeml[2];
int pic_invgemr[2];
int pic_paused;
// For the Fullscreen stuff
int pic_health;
int pic_armor2;

//==========================================================================
//
//  StartMap
//
//==========================================================================

void StartMap()
{
	int i;
	picinfo_t info;

	pic_barback = R_RegisterPic('barback');
	pic_god1 = R_RegisterPic('god1');
	pic_god2 = R_RegisterPic('god2');
	pic_barltop = R_RegisterPic('ltfctop');
	pic_barrtop = R_RegisterPic('rtfctop');
	pic_chain = R_RegisterPic('chain');
	if (ClGame.maxclients == 1)
	{
		// single player game uses red life gem
		pic_lifegem = R_RegisterPic('lifegem2');
	}
	else
	{
		pic_lifegem = R_RegisterPic(StrToName(va("lifegem%d", cl.ClientNum)));
	}
	pic_ltface = R_RegisterPic('ltface');
	pic_rtface = R_RegisterPic('rtface');

	if (ClGame.deathmatch)
	{
		pic_mainbar = R_RegisterPic('statbar');
	}
	else
	{
		pic_mainbar = R_RegisterPic('lifebar');
	}
	for (i = 0; i < 10; i++)
	{
		pic_innum[i] = R_RegisterPic(StrToName(va("in%d", i)));
		pic_smallinnum[i] = R_RegisterPic(StrToName(va("smallin%d", i)));
		pic_bignum[i] = R_RegisterPic(StrToName(va("fontb%d", 16 + i)));
		R_GetPicInfo(pic_bignum[i], &info);
		bignumwidth[i] = info.width;
	}
	pic_minus = R_RegisterPic('negnum');
	pic_lame = R_RegisterPic('lame');
	pic_ykey = R_RegisterPic('ykeyicon');
	pic_gkey = R_RegisterPic('gkeyicon');
	pic_bkey = R_RegisterPic('bkeyicon');

	pic_artiflash[0] = R_RegisterPic('useartia');
	pic_artiflash[1] = R_RegisterPic('useartib');
	pic_artiflash[2] = R_RegisterPic('useartic');
	pic_artiflash[3] = R_RegisterPic('useartid');
	pic_arti[0] = R_RegisterPic('artiinvu');	// invulnerability
	pic_arti[1] = R_RegisterPic('artiinvs');	// invisibility
	pic_arti[2] = R_RegisterPic('artiptn2');	// health
	pic_arti[3] = R_RegisterPic('artisphl');	// superhealth
	pic_arti[4] = R_RegisterPic('artipwbk');	// tomeofpower
	pic_arti[5] = R_RegisterPic('artitrch');	// torch
	pic_arti[6] = R_RegisterPic('artifbmb');	// firebomb
	pic_arti[7] = R_RegisterPic('artieggc');	// egg
	pic_arti[8] = R_RegisterPic('artisoar');	// fly
	pic_arti[9] = R_RegisterPic('artiatlp');	// teleport
	pic_artibox = R_RegisterPic('artibox');
	pic_invbar = R_RegisterPic('invbar');
	pic_selectbox = R_RegisterPic('selectbo');
	pic_invgeml[0] = R_RegisterPic('invgeml1');
	pic_invgeml[1] = R_RegisterPic('invgeml2');
	pic_invgemr[0] = R_RegisterPic('invgemr1');
	pic_invgemr[1] = R_RegisterPic('invgemr2');

	for (i = 0; i < 16; i++)
	{
		pic_flight[i] = R_RegisterPic(StrToName(va("spfly%d", i)));
		pic_book[i] = R_RegisterPic(StrToName(va("spinbk%d", i)));
	}

	pic_paused = R_RegisterPic('paused');

	//  FULLSCREEN ICONS FOR HEALTH AND ARMOR
	pic_health = R_RegisterPic('ptn1a0');
	pic_armor2 = R_RegisterPic('shd2a0');
}

//==========================================================================
//
//	SB_DrawNumber9
//
//==========================================================================

void SB_DrawNumber9(int x, int y, int num)
{
	int w = 9;
	int neg = num < 0;

	if (num < -9)
	{
		//	Lame message
		R_DrawPic(x + 1, y + 1, pic_lame);
		return;
	}
	if (neg)
	{
		num = -num;
	}

	x = x + 27;

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic(x - w, y, pic_innum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic(x, y, pic_innum[num % 10]);
		num /= 10;
	}

	// draw a minus sign if necessary
	if (neg)
	{
		R_DrawPic(x - 8, y, pic_minus);
	}
}

//==========================================================================
//
//	SB_DrawNumber12
//
//==========================================================================

void SB_DrawNumber12(int x, int y, int num)
{
	x = x + 36;

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawShadowedPic(x - bignumwidth[0], y, pic_bignum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= bignumwidth[num % 10];
		R_DrawShadowedPic(x, y, pic_bignum[num % 10]);
		num /= 10;
		x -= 3;
	}
}

//==========================================================================
//
//	SB_DrawINumber
//
//==========================================================================

void SB_DrawINumber(int x, int y, int num)
{
	if (num > 1)
	{
		x = x + 8;

		// draw the new number
		while (num)
		{
			x -= 4;
			R_DrawPic(x, y, pic_smallinnum[num % 10]);
			num /= 10;
		}
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar()
{
	int chainY;
	int healthPos;
	int i;
	int health;

	// draw something in the blank spaces
	R_FillRectWithFlat(0, 438, 640, 42,
		!WadLumpPresent('e2m1') ? 'floor04' : 'flat513');

	//  Background
	R_DrawPic(BAR_X, BAR_Y, pic_barback);

	if (cl.SBFlags & HereticDefs::SBF_GOD_MODE)
	{
		//  God mode
		R_DrawPic(BAR_X + 16, BAR_Y + 9, pic_god1);
		R_DrawPic(BAR_X + 287, BAR_Y + 9, pic_god2);
	}

	//  Top
	R_DrawPic(BAR_X + 0, BAR_Y - 10, pic_barltop);
	R_DrawPic(BAR_X + 290, BAR_Y - 10, pic_barrtop);

	//  Healtn and chain
	health = HealthMarker;
	if (health < 0)
	{
		health = 0;
	}
	else if (health > 100)
	{
		health = 100;
	}
	healthPos = (health * 256) / 100;
	chainY = (HealthMarker == cl.Health) ? 33 : 33 + ChainWiggle;

	//  Chain
	R_DrawPic(BAR_X + 2 + (healthPos % 17), BAR_Y + chainY, pic_chain);
	R_DrawPic(BAR_X + 17 + healthPos, BAR_Y + chainY, pic_lifegem);
	R_DrawPic(BAR_X + 0, BAR_Y + 32, pic_ltface);
	R_DrawPic(BAR_X + 276, BAR_Y + 32, pic_rtface);
	for (i = 0; i < 16; i++)
	{
		R_ShadeRect(BAR_X + 277 + i, BAR_Y + 32, 1, 10, itof(9 + i) / 32.0);
		R_ShadeRect(BAR_X + 19 + i, BAR_Y + 32, 1, 10, itof(9 + 15 - i) / 32.0);
	}

	if (!(cl.SBFlags & HereticDefs::SBF_INVENTORY_OPEN))
	{
		//  Main interface
		R_DrawPic(BAR_X + 34, BAR_Y + 2, pic_mainbar);

		//  Frags / Health
		if (ClGame.deathmatch)
		{
			SB_DrawNumber9(BAR_X + 61, BAR_Y + 12, cl.Frags);
		}
		else
		{
			SB_DrawNumber9(BAR_X + 61, BAR_Y + 12, health);
		}

		if (cl.ReadyWeapon.Ammo1)
		{
			//  Ammo
			SB_DrawNumber9(BAR_X + 109, BAR_Y + 4, cl.ReadyWeapon.Ammo1.Amount);
			R_DrawPic(BAR_X + 111, BAR_Y + 14, R_RegisterPic(cl.ReadyWeapon.Ammo1.IconName));
		}

		//  Ready artifact
		if (cl.ArtifactFlash)
		{
			R_DrawPic(BAR_X + 182, BAR_Y + 3, pic_artiflash[cl.ArtifactFlash - 1]);
		}
		else if (cl.Inventory[cl.InvPtr])
		{
			R_DrawPic(BAR_X + 179, BAR_Y + 2, pic_arti[cl.Inventory[cl.InvPtr].ArtifactType - 1]);
			SB_DrawINumber(BAR_X + 201, BAR_Y + 24, cl.Inventory[cl.InvPtr].Amount);
		}

		//  Keys
		if (cl.SBFlags & HereticDefs::SBF_KEY_YELLOW)
		{
			R_DrawPic(BAR_X + 153, BAR_Y + 6, pic_ykey);
		}
		if (cl.SBFlags & HereticDefs::SBF_KEY_GREEN)
		{
			R_DrawPic(BAR_X + 153, BAR_Y + 14, pic_gkey);
		}
		if (cl.SBFlags & HereticDefs::SBF_KEY_BLUE)
		{
			R_DrawPic(BAR_X + 153, BAR_Y + 22, pic_bkey);
		}

		//  Armor
		SB_DrawNumber9(BAR_X + 228, BAR_Y + 12, cl.ArmorPoints);
	}
	else
	{
		int x;

		//  Inventory
		R_DrawPic(BAR_X + 34, BAR_Y + 2, pic_invbar);
		x = cl.InvPtr - cl.InvCurPos;
		for (i = 0; i < 7; i++)
		{
			if (cl.InventorySlotNum > x + i && cl.Inventory[x + i])
			{
				R_DrawPic(BAR_X + 50 + i * 31, BAR_Y + 2,
					pic_arti[cl.Inventory[x + i].ArtifactType - 1]);
				SB_DrawINumber(BAR_X + 69 + i * 31, BAR_Y + 24, cl.Inventory[x + i].Amount);
			}
		}
		R_DrawPic(BAR_X + 50 + cl.InvCurPos * 31, BAR_Y + 31, pic_selectbox);
		if (x != 0)
		{
			R_DrawPic(BAR_X + 38, BAR_Y + 1, pic_invgeml[!(ClGame.GLevel.TicTime & 4) ? 0 : 1]);
		}
		if ((cl.InventorySlotNum - x > 7))
		{
			R_DrawPic(BAR_X + 269, BAR_Y + 1, pic_invgemr[!(ClGame.GLevel.TicTime & 4) ? 0 : 1]);
		}
	}
}

//==========================================================================
//
//	SB_DrawFullscreenStats
//
//==========================================================================

void SB_DrawFullscreenStats()
{
	int i;
	int x;

	//  Health
	SB_DrawNumber12(50, 450, cl.Health);
	R_DrawPic(30, 494, pic_health);

	//  Armorpoints
	SB_DrawNumber12(140, 450, cl.ArmorPoints);
	R_DrawPic(120, 490, pic_armor2);

	//  Frags
	if (ClGame.deathmatch)
	{
		SB_DrawNumber9(200, 450, cl.Frags);
	}

	//  Ammo
	if (cl.ReadyWeapon.Ammo1)
	{
		SB_DrawNumber9(610, 456, cl.ReadyWeapon.Ammo1.Amount);
		R_DrawPic(590, 454, R_RegisterPic(cl.ReadyWeapon.Ammo1.IconName));
	}

	//  Keys
	if (cl.SBFlags & HereticDefs::SBF_KEY_YELLOW)
	{
		R_DrawPic(580, 444, pic_ykey);
	}
	if (cl.SBFlags & HereticDefs::SBF_KEY_GREEN)
	{
		R_DrawPic(580, 452, pic_gkey);
	}
	if (cl.SBFlags & HereticDefs::SBF_KEY_BLUE)
	{
		R_DrawPic(580, 460, pic_bkey);
	}

	if (cl.SBFlags & HereticDefs::SBF_INVENTORY_OPEN)
	{
		//  Inventory
		x = cl.InvPtr - cl.InvCurPos;
		for (i = 0; i < 7; i++)
		{
			R_DrawPic2(210 + i * 31, 448, pic_artibox, 0.6);
			if (cl.InventorySlotNum > x + i &&
				cl.Inventory[x + i])
			{
				R_DrawPic(210 + i * 31, 448,
					pic_arti[cl.Inventory[x + i].ArtifactType - 1]);
				SB_DrawINumber(229 + i * 31, 470, cl.Inventory[x + i].Amount);
			}
		}
		R_DrawPic(210 + cl.InvCurPos * 31, 477, pic_selectbox);
		if (x != 0)
		{
			R_DrawPic(198, 447, pic_invgeml[!(ClGame.GLevel.TicTime & 4) ? 0 : 1]);
		}
		if (cl.InventorySlotNum - x > 7)
		{
			R_DrawPic(429, 447, pic_invgemr[!(ClGame.GLevel.TicTime & 4) ? 0 : 1]);
		}
	}
	else if (cl.Inventory[cl.InvPtr])
	{
		//  Ready artifact
		R_DrawPic2(546, 440, pic_artibox, 0.6);
		R_DrawPic(546, 440, pic_arti[cl.Inventory[cl.InvPtr].ArtifactType - 1]);
		SB_DrawINumber(567, 462, cl.Inventory[cl.InvPtr].Amount);
	}
}

//==========================================================================
//
//	SB_DrawIcons
//
//==========================================================================

void SB_DrawIcons()
{
	int frame;

	//  Artifact rotating icons
	if (cl.SBFlags & HereticDefs::SBF_POWER_FLIGHT)
	{
		frame = (ClGame.GLevel.TicTime / 3) & 15;
		if (cl.SBFlags & HereticDefs::SBF_IN_FLIGHT)
		{
			if (hitCentreFrame && frame != 15 && frame != 0)
			{
				frame = 15;
			}
			else
			{
				hitCentreFrame = false;
			}
		}
		else
		{
			if (hitCentreFrame || frame == 15 || frame == 0)
			{
				frame = 15;
				hitCentreFrame = true;
			}
		}
		R_DrawPic(20, 17, pic_flight[frame]);
	}

	if (cl.SBFlags & HereticDefs::SBF_POWER_BOOK)
	{
		R_DrawPic(620, 17, pic_book[(ClGame.GLevel.TicTime / 3) & 15]);
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause()
{
	if (ClGame.bPaused && GetCvar('draw_pause'))
	{
		R_DrawPic(320, ClGame.maxclients > 1 ? 140 : 40, pic_paused);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	if (sb_view == SB_VIEW_FULLSCREEN)
	{
		SB_DrawFullscreenStats();
	}
	else
	{
		SB_DrawMainBar();
	}
	SB_DrawIcons();
	SB_DrawPause();
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets()
{
	int i;
	int delta;
	int curHealth;

	if (ClGame.GLevel.TicTime & 1)
	{
		ChainWiggle = P_Random() & 1;
	}

	curHealth = cl.Health;
	if (curHealth < 0)
	{
		curHealth = 0;
	}
	if (curHealth < HealthMarker)
	{
		delta = (HealthMarker - curHealth) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 8)
		{
			delta = 8;
		}
		HealthMarker -= delta;
	}
	else if (curHealth > HealthMarker)
	{
		delta = (curHealth - HealthMarker) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 8)
		{
			delta = 8;
		}
		HealthMarker += delta;
	}
}

//==========================================================================
//
//	VisibilityChanged
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 640;
	Height = 480;
}
