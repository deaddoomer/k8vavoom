//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class IntermissionScreen : Window;

ClientGameBase ClGame;

struct yahpt_t
{
	int x;
	int y;
};

// specifies current state
int interstate;
float intertime;

int im_episode;
int im_map;
int im_nextepisode;
int im_nextmap;

// background (map of levels).
int patchINTERPIC;

int hours;
int minutes;
int seconds;

int killPercent[MAXPLAYERS];
int bonusPercent[MAXPLAYERS];
int secretPercent[MAXPLAYERS];

int patchFaceOkay[4];
int patchFaceDead[4];

int totalFrags[MAXPLAYERS];
float dSlideX[MAXPLAYERS];
float dSlideY[MAXPLAYERS];

int slaughterboy;	// in DM, the player with the most kills

int oldinterstate;
float oldintertime;

int patchBEENTHERE;
int patchGOINGTHERE;

int im_sounds;

// used for general timing
float cnt;

yahpt_t YAHspot[3 * 9];

//==========================================================================
//
//  Start
//
//==========================================================================

void Start()
{
	FindEpisodeAndMap(ClGame.im->LeaveMap, &im_episode, &im_map);
	FindEpisodeAndMap(ClGame.im->EnterMap, &im_nextepisode, &im_nextmap);
	IM_LoadPics();
	IM_InitStats();
	interstate = 0;
	ClGame.skipintermission = false;
	intertime = 0.0;
	if (im_episode > 3)
	{
		oldintertime = 35.0;
	}
	else
	{
		oldintertime = 10.0;
	}
	im_sounds = 0;
#ifdef FIXME
	S_StartSong("MUS_INTR", P_GetCDIntermissionTrack(), true);
#else
	CmdBuf_AddText("music loop MUS_INTR\n");
#endif
}

//==========================================================================
//
//  FindEpisodeAndMap
//
//==========================================================================

void FindEpisodeAndMap(name Name, int *epi, int *map)
{
	int e;
	int m;

	for (e = 1; e <= 5; e++)
	{
		for (m = 1; m <= 9; m++)
		{
			if (Name == StrToName(va("e%dm%d", e, m)))
			{
				*epi = e;
				*map = m;
				return;
			}
		}
	}
	*epi = 4;
	*map = 1;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	if (interstate == 3)
	{
		if (cnt > 0.0)
		{
			cnt -= DeltaTime;
			if (cnt <= 0.0)
			{
				IM_UnloadPics();
				CmdBuf_AddText("TeleportNewMap\n");
			}
		}
		return;
	}
	intertime += DeltaTime;
	if (oldintertime < intertime)
	{
		interstate++;
		if (im_episode > 3 && interstate >= 1)
		{
			// Extended Wad levels:  skip directly to the next level
			interstate = 3;
		}
		switch (interstate)
		{
		case 0:
			oldintertime = intertime + 10.0;
			if (im_episode > 3)
			{
				oldintertime = intertime + 35.0;
			}
			break;
		case 1:
			oldintertime = intertime + 6.0;
			break;
		case 2:
			oldintertime = 99999.0;
			break;
		case 3:
			cnt = 0.3;
			break;
		default:
			break;
		}
	}
	if (ClGame.skipintermission)
	{
		if (interstate == 0 && intertime < 5.0)
		{
			intertime = 5.0;
			ClGame.skipintermission = false;
			return;
		}
		else if (interstate < 2 && im_episode < 4)
		{
			interstate = 2;
			ClGame.skipintermission = false;
			LocalSound('DoorClose');
			return;
		}
		interstate = 3;
		cnt = 0.3;
		ClGame.skipintermission = false;
		LocalSound('DoorClose');
	}
}

//==========================================================================
//
//  DrawWindow
//
//==========================================================================

void DrawWindow(GC gc)
{
	if (interstate == 3)
	{
		return;
	}
	if (oldinterstate != 2 && interstate == 2)
	{
		LocalSound('plats/pt1_stop');
	}
	oldinterstate = interstate;

	IM_DrawBackground();

	switch (interstate)
	{
	case 0:	// draw stats
		if (ClGame.cl.maxclients == 1)
			IM_DrawSingleStats();
		else if (!ClGame.cl.deathmatch)
			IM_DrawCoopStats();
		else
			IM_DrawDMStats();
		break;
	case 1:	// leaving old level
		if (im_episode < 4)
		{
			IM_DrawOldLevel();
		}
		break;
	case 2:	// going to the next level
		if (im_episode < 4)
		{
			IM_DrawYAH();
		}
		break;
	case 3:	// waiting before going to the next level
		break;
	}
}

//========================================================================
//
//  IM_LoadPics
//
//========================================================================

void IM_LoadPics()
{
	switch (im_episode)
	{
	case 1:
		patchINTERPIC = R_RegisterPic('mape1');
		break;
	case 2:
		patchINTERPIC = R_RegisterPic('mape2');
		break;
	case 3:
		patchINTERPIC = R_RegisterPic('mape3');
		break;
	default:
		patchINTERPIC = 0;
		break;
	}
	patchBEENTHERE = R_RegisterPic('in_x');
	patchGOINGTHERE = R_RegisterPic('in_yah');

	patchFaceOkay[0] = R_RegisterPic('facea0');
	patchFaceOkay[1] = R_RegisterPic('facea1');
	patchFaceOkay[2] = R_RegisterPic('facea2');
	patchFaceOkay[3] = R_RegisterPic('facea3');
	patchFaceDead[0] = R_RegisterPic('faceb0');
	patchFaceDead[1] = R_RegisterPic('faceb1');
	patchFaceDead[2] = R_RegisterPic('faceb2');
	patchFaceDead[3] = R_RegisterPic('faceb3');
}

//========================================================================
//
//  IM_UnloadPics
//
//========================================================================

void IM_UnloadPics()
{
}

//==========================================================================
//
//  IM_DrawBackground
//
//==========================================================================

void IM_DrawBackground()
{
	if (interstate == 0)
	{
		R_FillRectWithFlat(0, 0, 320, 200, 'floor16');
	}
	else if (im_episode < 4)
	{
		R_DrawPic(0, 0, patchINTERPIC);
	}
}

//========================================================================
//
//  IM_InitStats
//
//========================================================================

void IM_InitStats()
{
	int i;
	int j;
	int slaughterfrags;
	int posnum;
	int slaughtercount;
	int playercount;
	int time;

	if (ClGame.cl.maxclients == 1)
	{
		time = ftoi(ClGame.im->time);
		hours = time / 3600;
		time -= hours * 3600;
		minutes = time / 60;
		time -= minutes * 60;
		seconds = time;
	}
	else if (!ClGame.cl.deathmatch)
	{
		for (i = 0; i < MAXPLAYERS; i++)
		{
			killPercent[i] = 0;
			bonusPercent[i] = 0;
			secretPercent[i] = 0;
			if (ClGame.scores[i].bActive)
			{
				if (ClGame.im->totalkills)
				{
					killPercent[i] =
						ClGame.scores[i].killcount * 100 / ClGame.im->totalkills;
				}
				if (ClGame.im->totalitems)
				{
					bonusPercent[i] =
						ClGame.scores[i].itemcount * 100 / ClGame.im->totalitems;
				}
				if (ClGame.im->totalsecret)
				{
					secretPercent[i] =
						ClGame.scores[i].secretcount * 100 / ClGame.im->totalsecret;
				}
			}
		}
	}
	else
	{
		slaughterboy = 0;
		slaughterfrags = -9999;
		posnum = 0;
		playercount = 0;
		slaughtercount = 0;
		for (i = 0; i < MAXPLAYERS; i++)
		{
			totalFrags[i] = 0;
			if (ClGame.scores[i].bActive)
			{
				playercount++;
				for (j = 0; j < MAXPLAYERS; j++)
				{
					if (ClGame.scores[j].bActive)
					{
						totalFrags[i] += ClGame.scores[i].frags[j];
					}
				}
				dSlideX[i] = (43.0 * itof(posnum)) / 20.0;
				dSlideY[i] = (36.0 * itof(posnum)) / 20.0;
				posnum++;
			}
			if (totalFrags[i] > slaughterfrags)
			{
				slaughterboy = 1 << i;
				slaughterfrags = totalFrags[i];
				slaughtercount = 1;
			}
			else if (totalFrags[i] == slaughterfrags)
			{
				slaughterboy |= 1 << i;
				slaughtercount++;
			}
		}
		if (playercount == slaughtercount)
		{
			// don't do the slaughter stuff if everyone is equal
			slaughterboy = 0;
		}
	}
}

//========================================================================
//
//  IM_DrawSingleStats
//
//========================================================================

void IM_DrawSingleStats()
{
	T_SetShadow(true);
	T_SetFont(font_big);
	T_SetAlign(hleft, vtop);
	T_DrawText(50, 65, "KILLS");
	T_DrawText(50, 90, "ITEMS");
	T_DrawText(50, 115, "SECRETS");
	T_SetAlign(hcenter, vtop);
	T_DrawText(160, 3, ARR2STR(ClGame.im->leave_name));
	T_SetShadow(false);

	T_SetFont(font_small);
	T_DrawText(160, 25, "FINISHED");

	if (intertime < 1.0)
	{
		return;
	}
	if (im_sounds < 1 && intertime >= 1.0)
	{
		LocalSound('DoorClose');
		im_sounds++;
	}
	T_SetShadow(true);
	T_SetFont(font_big);
	T_SetAlign(hleft, vtop);
	T_SetDist(1, 1);
	T_DrawText(202, 65, va("%d", ClGame.scores[0].killcount));
	T_DrawText(237, 65, "/");
	T_DrawText(250, 65, va("%d", ClGame.im->totalkills));
	T_SetDist(-1, 1);
	T_SetShadow(false);
	if (intertime < 2.0)
	{
		return;
	}
	if (im_sounds < 2 && intertime >= 2.0)
	{
		LocalSound('DoorClose');
		im_sounds++;
	}
	T_SetShadow(true);
	T_SetFont(font_big);
	T_SetAlign(hleft, vtop);
	T_SetDist(1, 1);
	T_DrawText(202, 90, va("%d", ClGame.scores[0].itemcount));
	T_DrawText(237, 90, "/");
	T_DrawText(250, 90, va("%d", ClGame.im->totalitems));
	T_SetDist(-1, 1);
	T_SetShadow(false);
	if (intertime < 3.0)
	{
		return;
	}
	if (im_sounds < 3 && intertime >= 3.0)
	{
		LocalSound('DoorClose');
		im_sounds++;
	}
	T_SetShadow(true);
	T_SetFont(font_big);
	T_SetAlign(hleft, vtop);
	T_SetDist(1, 1);
	T_DrawText(202, 115, va("%d", ClGame.scores[0].secretcount));
	T_DrawText(237, 115, "/");
	T_DrawText(250, 115, va("%d", ClGame.im->totalsecret));
	T_SetDist(-1, 1);
	T_SetShadow(false);
	if (intertime < 5.0)
	{
		return;
	}
	if (im_sounds < 4 && intertime >= 5.0)
	{
		LocalSound('DoorClose');
		im_sounds++;
	}

	if (!WadLumpPresent('extended') || im_episode < 4)
	{
		T_SetShadow(true);
		T_SetFont(font_big);
		T_SetAlign(hleft, vtop);
		T_DrawText(85, 160, "TIME");
		T_SetDist(1, 1);
		T_DrawText(155, 160, va("%d%d:%d%d:%d%d", hours / 10, hours % 10,
				minutes / 10, minutes % 10, seconds / 10, seconds % 10));
		T_SetDist(-1, 1);
		T_SetShadow(false);
	}
	else
	{
		T_SetFont(font_small);
		T_SetAlign(hcenter, vtop);
		T_DrawText(160, 160, "NOW ENTERING:");
		T_SetShadow(true);
		T_SetFont(font_big);
		T_DrawText(160, 170, ARR2STR(ClGame.im->enter_name));
		T_SetShadow(false);
		ClGame.skipintermission = false;
	}
}

//========================================================================
//
//  IM_DrawCoopStats
//
//========================================================================

void IM_DrawCoopStats()
{
	int i;
	int ypos;

	T_SetShadow(true);
	T_SetFont(font_big);
	T_SetAlign(hleft, vtop);
	T_DrawText(95, 35, "KILLS");
	T_DrawText(155, 35, "BONUS");
	T_DrawText(232, 35, "SECRET");

	T_SetAlign(hcenter, vtop);
	T_DrawText(160, 3, ARR2STR(ClGame.im->leave_name));
	T_SetShadow(false);
	T_SetFont(font_small);
	T_DrawText(160, 25, "FINISHED");

	T_SetShadow(true);
	T_SetFont(font_big);
	T_SetAlign(hleft, vtop);
	T_SetDist(1, 1);
	ypos = 50;
//  for (i = 0; i < MAXPLAYERS; i++)
	for (i = 0; i < 4; i++)
	{
		if (ClGame.scores[i].bActive)
		{
			R_DrawShadowedPic(25, ypos, patchFaceOkay[i]);
			if (intertime < 1.25)
			{
				ypos += 37;
				continue;
			}
			else if (intertime >= 1.25 && im_sounds < 1)
			{
				LocalSound('DoorClose');
				im_sounds++;
			}
			T_DrawText(87, ypos + 10, va("%d", killPercent[i]));
			T_DrawText(121, ypos + 10, "%");
			T_DrawText(162, ypos + 10, va("%d", bonusPercent[i]));
			T_DrawText(196, ypos + 10, "%");
			T_DrawText(239, ypos + 10, va("%d", secretPercent[i]));
			T_DrawText(273, ypos + 10, "%");
			ypos += 37;
		}
	}
	T_SetDist(-1, 1);
	T_SetShadow(false);
}

//========================================================================
//
//  IM_DrawDMStats
//
//========================================================================

void IM_DrawDMStats()
{
	int i;
	int j;
	int ypos;
	int xpos;
	int kpos;

	xpos = 90;
	ypos = 55;

	T_SetShadow(true);
	T_SetFont(font_big);
	T_SetAlign(hleft, vtop);
	T_DrawText(265, 30, "TOTAL");
	T_SetShadow(false);

	T_SetFont(font_small);
	T_DrawText(140, 8, "VICTIMS");
	T_DrawText(10, 80, "K\nI\nL\nL\nE\nR\nS");
	if (intertime < 0.625)
	{
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (ClGame.scores[i].bActive)
			{
				R_DrawShadowedPic(40,
					ypos + ftoi(dSlideY[i] * 35.0 * intertime),
					patchFaceOkay[i]);
				R_DrawShadowedPic(xpos + ftoi(dSlideX[i] * 35.0 * intertime),
					18, patchFaceDead[i]);
			}
		}
		return;
	}
	if (intertime >= 0.625 && im_sounds < 1)
	{
		LocalSound('DoorClose');
		im_sounds++;
	}
	if (intertime >= 3.0 && slaughterboy && im_sounds < 2)
	{
		LocalSound('*evillaugh');
		im_sounds++;
	}
	T_SetShadow(true);
	T_SetFont(font_big);
	T_SetAlign(hleft, vtop);
	T_SetDist(1, 1);
//  for (i = 0; i < MAXPLAYERS; i++)
	for (i = 0; i < 4; i++)
	{
		if (ClGame.scores[i].bActive)
		{
			if (intertime < 3.0 || i == ClGame.cl.clientnum)
			{
				R_DrawShadowedPic(40, ypos, patchFaceOkay[i]);
				R_DrawShadowedPic(xpos, 18, patchFaceDead[i]);
			}
			else
			{
				R_DrawPic2(40, ypos, patchFaceOkay[i], 60);
				R_DrawPic2(xpos, 18, patchFaceDead[i], 60);
			}
			kpos = 86;
//          for (j = 0; j < MAXPLAYERS; j++)
			for (j = 0; j < 4; j++)
			{
				if (ClGame.scores[j].bActive)
				{
					T_DrawText(kpos, ypos + 10, va("%d", ClGame.scores[i].frags[j]));
					kpos += 43;
				}
			}
			if (slaughterboy & (1 << i))
			{
				if (!(ftoi(32.0 * intertime) & 16))
				{
					T_DrawText(263, ypos + 10, va("%d", totalFrags[i]));
				}
			}
			else
			{
				T_DrawText(263, ypos + 10, va("%d", totalFrags[i]));
			}
			ypos += 36;
			xpos += 43;
		}
	}
	T_SetDist(-1, 1);
	T_SetShadow(false);
}

//========================================================================
//
//  IM_DrawOldLevel
//
//========================================================================

void IM_DrawOldLevel()
{
	int i;

	T_SetAlign(hcenter, vtop);

	T_SetShadow(true);
	T_SetFont(font_big);
	T_DrawText(160, 3, ARR2STR(ClGame.im->leave_name));
	T_SetShadow(false);

	T_SetFont(font_small);
	T_DrawText(160, 25, "FINISHED");

	if (im_map == 9)
	{
		for (i = 0; i < im_nextmap - 1; i++)
		{
			R_DrawPic(YAHspot[(im_episode - 1) * 9 + i].x,
				YAHspot[(im_episode - 1) * 9 + i].y, patchBEENTHERE);
		}
		if (!(ftoi(32.0 * intertime) & 16))
		{
			R_DrawPic(YAHspot[(im_episode - 1) * 9 + 8].x,
				YAHspot[(im_episode - 1) * 9 + 8].y, patchBEENTHERE);
		}
	}
	else
	{
		for (i = 0; i < im_map - 1; i++)
		{
			R_DrawPic(YAHspot[(im_episode - 1) * 9 + i].x,
				YAHspot[(im_episode - 1) * 9 + i].y, patchBEENTHERE);
		}
		if (ClGame.cl.bDidSecret)
		{
			R_DrawPic(YAHspot[(im_episode - 1) * 9 + 8].x,
				YAHspot[(im_episode - 1) * 9 + 8].y, patchBEENTHERE);
		}
		if (!(ftoi(32.0 * intertime) & 16))
		{
			R_DrawPic(YAHspot[(im_episode - 1) * 9 + im_map - 1].x,
				YAHspot[(im_episode - 1) * 9 + im_map - 1].y, patchBEENTHERE);
		}
	}
}

//========================================================================
//
//  IM_DrawYAH
//
//========================================================================

void IM_DrawYAH()
{
	int i;

	T_SetAlign(hcenter, vtop);

	T_SetFont(font_small);
	T_DrawText(160, 10, "NOW ENTERING:");

	T_SetShadow(true);
	T_SetFont(font_big);
	T_DrawText(160, 20, ARR2STR(ClGame.im->enter_name));
	T_SetShadow(false);

	if (im_map == 9)
	{
		im_map = im_nextmap - 1;
	}
	for (i = 0; i < im_map; i++)
	{
		R_DrawPic(YAHspot[(im_episode - 1) * 9 + i].x, YAHspot[(im_episode - 1) * 9 + i].y,
			patchBEENTHERE);
	}
	if (ClGame.cl.bDidSecret)
	{
		R_DrawPic(YAHspot[(im_episode - 1) * 9 + 8].x, YAHspot[(im_episode - 1) * 9 + 8].y,
			patchBEENTHERE);
	}
	if (!(ftoi(32.0 * intertime) & 16) || interstate == 3)
	{
		// draw the destination 'X'
		R_DrawPic(YAHspot[(im_nextepisode - 1) * 9 + im_nextmap - 1].x,
			YAHspot[(im_nextepisode - 1) * 9 + im_nextmap - 1].y, patchGOINGTHERE);
	}
}

//==========================================================================
//
//	VisibilityChanged
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 320;
	Height = 200;
	YAHspot[0 * 9 + 0].x = 172;	YAHspot[0 * 9 + 0].y = 78;
	YAHspot[0 * 9 + 1].x = 86;	YAHspot[0 * 9 + 1].y = 90;
	YAHspot[0 * 9 + 2].x = 73;	YAHspot[0 * 9 + 2].y = 66;
	YAHspot[0 * 9 + 3].x = 159;	YAHspot[0 * 9 + 3].y = 95;
	YAHspot[0 * 9 + 4].x = 148;	YAHspot[0 * 9 + 4].y = 126;
	YAHspot[0 * 9 + 5].x = 132;	YAHspot[0 * 9 + 5].y = 54;
	YAHspot[0 * 9 + 6].x = 131;	YAHspot[0 * 9 + 6].y = 74;
	YAHspot[0 * 9 + 7].x = 208;	YAHspot[0 * 9 + 7].y = 138;
	YAHspot[0 * 9 + 8].x = 52;	YAHspot[0 * 9 + 8].y = 101;

	YAHspot[1 * 9 + 0].x = 218;	YAHspot[1 * 9 + 0].y = 57;
	YAHspot[1 * 9 + 1].x = 137;	YAHspot[1 * 9 + 1].y = 81;
	YAHspot[1 * 9 + 2].x = 155;	YAHspot[1 * 9 + 2].y = 124;
	YAHspot[1 * 9 + 3].x = 171;	YAHspot[1 * 9 + 3].y = 68;
	YAHspot[1 * 9 + 4].x = 250;	YAHspot[1 * 9 + 4].y = 86;
	YAHspot[1 * 9 + 5].x = 136;	YAHspot[1 * 9 + 5].y = 98;
	YAHspot[1 * 9 + 6].x = 203;	YAHspot[1 * 9 + 6].y = 90;
	YAHspot[1 * 9 + 7].x = 220;	YAHspot[1 * 9 + 7].y = 140;
	YAHspot[1 * 9 + 8].x = 279;	YAHspot[1 * 9 + 8].y = 106;

	YAHspot[2 * 9 + 0].x = 86;	YAHspot[2 * 9 + 0].y = 99;
	YAHspot[2 * 9 + 1].x = 124;	YAHspot[2 * 9 + 1].y = 103;
	YAHspot[2 * 9 + 2].x = 154;	YAHspot[2 * 9 + 2].y = 79;
	YAHspot[2 * 9 + 3].x = 202;	YAHspot[2 * 9 + 3].y = 83;
	YAHspot[2 * 9 + 4].x = 178;	YAHspot[2 * 9 + 4].y = 59;
	YAHspot[2 * 9 + 5].x = 142;	YAHspot[2 * 9 + 5].y = 58;
	YAHspot[2 * 9 + 6].x = 219;	YAHspot[2 * 9 + 6].y = 66;
	YAHspot[2 * 9 + 7].x = 247;	YAHspot[2 * 9 + 7].y = 57;
	YAHspot[2 * 9 + 8].x = 107;	YAHspot[2 * 9 + 8].y = 80;
}
