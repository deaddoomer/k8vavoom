//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	VolcanoTBlast
//
//**************************************************************************

class VolcanoTBlast:Projectile
{

__states__
{
	S_VOLCANOTBALL1('VTFB', 0, 4.0 / 35.0, S_VOLCANOTBALL2) { }
	S_VOLCANOTBALL2('VTFB', 1, 4.0 / 35.0, S_VOLCANOTBALL1) { }
	S_VOLCANOTBALLX1('SFFI', 2, 4.0 / 35.0, S_VOLCANOTBALLX2) { }
	S_VOLCANOTBALLX2('SFFI', 1, 4.0 / 35.0, S_VOLCANOTBALLX3) { }
	S_VOLCANOTBALLX3('SFFI', 0, 4.0 / 35.0, S_VOLCANOTBALLX4) { }
	S_VOLCANOTBALLX4('SFFI', 1, 4.0 / 35.0, S_VOLCANOTBALLX5) { }
	S_VOLCANOTBALLX5('SFFI', 2, 4.0 / 35.0, S_VOLCANOTBALLX6) { }
	S_VOLCANOTBALLX6('SFFI', 3, 4.0 / 35.0, S_VOLCANOTBALLX7) { }
	S_VOLCANOTBALLX7('SFFI', 4, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 8.0;
	Height = 6.0;
	Speed = 70.0;
	MissileDamage = 1;
	bFireDamage = true;
	bNoGravity = false;
	IdleState = S_VOLCANOTBALL1;
	DeathState = S_VOLCANOTBALLX1;
	Effects = EF_DL_RED;
}

}

//**************************************************************************
//
//	VolcanoBlast
//
//**************************************************************************

class VolcanoBlast:Projectile
{

//==========================================================================
//
//  A_BeastPuff
//
//==========================================================================

void A_BeastPuff(void)
{
	TVec org;

	if (P_Random() > 64)
	{
		org.x = Origin.x + (Random() - Random()) * 4.0;
		org.y = Origin.y + (Random() - Random()) * 4.0;
		org.z = Origin.z + (Random() - Random()) * 4.0;
		Spawn(Puffy, org);
	}
}

//==========================================================================
//
//  A_VolcBallImpact
//
//==========================================================================

void A_VolcBallImpact(void)
{
	int i;
	Actor tiny;
	float angle;

	if (Origin.z <= FloorZ)
	{
		bNoGravity = true;
		Origin.z += 28.0;
	}
	RadiusAttack(25, 0, 0);
	for (i = 0; i < 4; i++)
	{
		tiny = Spawn(VolcanoTBlast, Origin);
		tiny.Instigator = self;
		angle = itof(i) * 90.0;
		tiny.Angles.yaw = angle;
		tiny.Velocity.x = 0.7 * cos(angle) * 35.0;
		tiny.Velocity.y = 0.7 * sin(angle) * 35.0;
		tiny.Velocity.z = (1.0 + Random() * 2.0) * 35.0;
		tiny.CheckMissileSpawn();
	}
}

__states__
{
	S_VOLCANOBALL1('VFBL', 0, 4.0 / 35.0, S_VOLCANOBALL2) { A_BeastPuff(); }
	S_VOLCANOBALL2('VFBL', 1, 4.0 / 35.0, S_VOLCANOBALL1) { A_BeastPuff(); }
	S_VOLCANOBALLX1('XPL1', 0, 4.0 / 35.0, S_VOLCANOBALLX2) { A_VolcBallImpact(); }
	S_VOLCANOBALLX2('XPL1', 1, 4.0 / 35.0, S_VOLCANOBALLX3) { }
	S_VOLCANOBALLX3('XPL1', 2, 4.0 / 35.0, S_VOLCANOBALLX4) { }
	S_VOLCANOBALLX4('XPL1', 3, 4.0 / 35.0, S_VOLCANOBALLX5) { }
	S_VOLCANOBALLX5('XPL1', 4, 4.0 / 35.0, S_VOLCANOBALLX6) { }
	S_VOLCANOBALLX6('XPL1', 5, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 8.0;
	Height = 8.0;
	Speed = 70.0;
	MissileDamage = 2;
	bFireDamage = true;
	bNoGravity = false;
	IdleState = S_VOLCANOBALL1;
	DeathState = S_VOLCANOBALLX1;
	DeathSound = 'VolcanoHit';
	Effects = EF_DL_RED;
}

}

//**************************************************************************
//
//	Volcano
//
//**************************************************************************

class Volcano:Decoration
	__mobjinfo__(87)
{

//==========================================================================
//
//  A_VolcanoSet
//
//==========================================================================

void A_VolcanoSet(void)
{
	StateTime = 3.0 + Random() * 3.5;
}

//==========================================================================
//
//  A_VolcanoBlast
//
//==========================================================================

void A_VolcanoBlast(void)
{
	int i;
	int count;
	Actor blast;
	float angle;

	count = 1 + (P_Random() % 3);
	for (i = 0; i < count; i++)
	{
		blast = Spawn(VolcanoBlast, Origin + vector(0.0, 0.0, 44.0));
		blast.Instigator = self;
		angle = Random() * 360.0;
		blast.Angles.yaw = angle;
		blast.Velocity.x = cos(angle) * 35.0;
		blast.Velocity.y = sin(angle) * 35.0;
		blast.Velocity.z = (2.5 + Random() * 4.0) * 35.0;
		blast.PlaySound('VolcanoBlast', CHAN_VOICE);
		blast.CheckMissileSpawn();
	}
}

__states__
{
	S_VOLCANO1('VLCO', 0, 350.0 / 35.0, S_VOLCANO2) { }
	S_VOLCANO2('VLCO', 0, 35.0 / 35.0, S_VOLCANO3) { A_VolcanoSet(); }
	S_VOLCANO3('VLCO', 1, 3.0 / 35.0, S_VOLCANO4) { }
	S_VOLCANO4('VLCO', 2, 3.0 / 35.0, S_VOLCANO5) { }
	S_VOLCANO5('VLCO', 3, 3.0 / 35.0, S_VOLCANO6) { }
	S_VOLCANO6('VLCO', 1, 3.0 / 35.0, S_VOLCANO7) { }
	S_VOLCANO7('VLCO', 2, 3.0 / 35.0, S_VOLCANO8) { }
	S_VOLCANO8('VLCO', 3, 3.0 / 35.0, S_VOLCANO9) { }
	S_VOLCANO9('VLCO', 4, 10.0 / 35.0, S_VOLCANO2) { A_VolcanoBlast(); }
}

defaultproperties
{
	Radius = 12.0;
	Height = 20.0;
	bSolid = true;
	IdleState = S_VOLCANO1;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.19  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.18  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.17  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.16  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.15  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.14  2002/02/22 18:00:19  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.13  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.12  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.11  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.10  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
