//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	PodGoo
//
//**************************************************************************

class PodGoo:ProjEffect
{

__states__
{
	S_PODGOO1('PPOD', 6, 8.0 / 35.0, S_PODGOO2) { }
	S_PODGOO2('PPOD', 7, 8.0 / 35.0, S_PODGOO1) { }
	S_PODGOOX('PPOD', 6, 10.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 2.0;
	Height = 4.0;
	bCannotPush = true;
	bNoGravity = false;
	IdleState = S_PODGOO1;
	DeathState = S_PODGOOX;
}

}

//**************************************************************************
//
//	Pod
//
//**************************************************************************

class Pod:Decoration
	__mobjinfo__(2035)
{

Actor Generator;

//==========================================================================
//
//  A_PodPain
//
//==========================================================================

void A_PodPain(void)
{
	int i;
	int count;
	int chance;
	Actor goo;

	chance = P_Random();
	if (chance < 128)
	{
		return;
	}
	count = chance > 240 ? 2 : 1;
	for (i = 0; i < count; i++)
	{
		goo = Spawn(PodGoo, Origin + vector(0.0, 0.0, 48.0));
		goo.Instigator = self;
		goo.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
		goo.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
		goo.Velocity.z = (0.5 + Random() * 2.0) * 35.0;
	}
}

//==========================================================================
//
//  A_RemovePod
//
//==========================================================================

void A_RemovePod(void)
{
	if (Generator && Generator.Special1 > 0)
	{
		Generator.Special1--;
	}
}

__states__
{
	S_POD_WAIT1('PPOD', 0, 10.0 / 35.0, S_POD_WAIT1) { }
	S_POD_PAIN1('PPOD', 1, 14.0 / 35.0, S_POD_WAIT1) { A_PodPain(); }
	S_POD_DIE1('PPOD', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_POD_DIE2) { A_RemovePod(); }
	S_POD_DIE2('PPOD', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_POD_DIE3) { A_Scream(); }
	S_POD_DIE3('PPOD', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_POD_DIE4) { A_Explode(); }
	S_POD_DIE4('PPOD', 5 | FF_FULLBRIGHT, 10.0 / 35.0, S_FREETARGMOBJ) { }
	S_POD_GROW1('PPOD', 8, 3.0 / 35.0, S_POD_GROW2) { }
	S_POD_GROW2('PPOD', 9, 3.0 / 35.0, S_POD_GROW3) { }
	S_POD_GROW3('PPOD', 10, 3.0 / 35.0, S_POD_GROW4) { }
	S_POD_GROW4('PPOD', 11, 3.0 / 35.0, S_POD_GROW5) { }
	S_POD_GROW5('PPOD', 12, 3.0 / 35.0, S_POD_GROW6) { }
	S_POD_GROW6('PPOD', 13, 3.0 / 35.0, S_POD_GROW7) { }
	S_POD_GROW7('PPOD', 14, 3.0 / 35.0, S_POD_GROW8) { }
	S_POD_GROW8('PPOD', 15, 3.0 / 35.0, S_POD_WAIT1) { }
}

defaultproperties
{
	Health = 45;
	Radius = 16.0;
	Height = 54.0;
	PainChance = 1.0;
	bSolid = true;
	bShootable = true;
	bDropOff = true;
	bNoBlood = true;
	bWindThrust = true;
	bPushable = true;
	bSlide = true;
	bTelestomp = true;
	bNoPassMobj = false;
	IdleState = S_POD_WAIT1;
	PainState = S_POD_PAIN1;
	DeathState = S_POD_DIE1;
	DeathSound = 'PodExplode';
}

}

//**************************************************************************
//
//	PodGenerator
//
//**************************************************************************

class PodGenerator:Actor
	__mobjinfo__(43)
{

//==========================================================================
//
//  A_MakePod
//
//==========================================================================

void A_MakePod(void)
{
	Actor A;
	float x;
	float y;
	float z;

	if (Special1 == 16)
	{
		// Too many generated pods
		return;
	}
	x = Origin.x;
	y = Origin.y;
	z = Origin.z;
	A = Spawn(Pod, vector(x, y, ONFLOORZ));
	if (!A.CheckPosition(A.Origin))
	{
		// Didn't fit
		A.Remove();
		return;
	}
	A.SetState(S_POD_GROW1);
	A.Thrust(Random() * 360.0, 4.5);
	A.PlaySound('PodNew', CHAN_VOICE);
	Special1++;	// Increment generated pod count
	Pod(A).Generator = self;	// Link the generator to the pod
}

__states__
{
	S_PODGENERATOR('AMG1', 0, 35.0 / 35.0, S_PODGENERATOR) { A_MakePod(); }
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	ReactionCount = 8;
	bHidden = true;
	bNoBlockmap = true;
	bNoPassMobj = true;
	IdleState = S_PODGENERATOR;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.19  2002/06/22 07:16:00  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.18  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.17  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.16  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.15  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.14  2002/02/22 18:00:18  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.13  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.12  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.11  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.10  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.9  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
