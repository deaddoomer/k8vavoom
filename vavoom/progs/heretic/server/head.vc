//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::A_HeadAttack
//
//==========================================================================

void Actor::A_HeadAttack(void)
{
	int i;
	mobj_t *fire;
	mobj_t *baseFire;
	mobj_t *mo;
	int randAttack;
	int dist;

	// Ice ball     (close 20% : far 60%)
	// Fire column  (close 40% : far 20%)
	// Whirlwind    (close 40% : far 20%)
	// Distance threshold = 8 cells

	if (!target)
	{
		return;
	}
	A_FaceTarget();
	if (P_CheckMeleeRange(this))
	{
		target->Damage(this, this, HITDICE(6));
		return;
	}
	dist = MobjDist2(this, target) > 8.0 * 64.0;
	randAttack = P_Random();
	if (randAttack < (dist ? 150 : 50))
	{
		// Ice ball
		SpawnMissile(this, target, MT_HEADFX1);
		StartSoundName(this, 'HeadAttack2', CHAN_WEAPON);
	}
	else if (randAttack < (dist ? 200 : 150))
	{
		// Fire column
		baseFire = SpawnMissile(this, target, MT_HEADFX3);
		if (baseFire != NULL)
		{
			SetMobjState(baseFire, S_HEADFX3_4);	// Don't grow
			for (i = 0; i < 5; i++)
			{
				fire = P_SpawnMobj(baseFire->origin.x, baseFire->origin.y,
					baseFire->origin.z, MT_HEADFX3);
				if (i == 0)
				{
					StartSoundName(this, 'HeadAttack1', CHAN_WEAPON);
				}
				fire->target = baseFire->target;
				fire->angles.yaw = baseFire->angles.yaw;
				fire->velocity = baseFire->velocity;
				fire->damage = 0;
				fire->health = (i + 1) * 2;
				CheckMissileSpawn(fire);
			}
		}
	}
	else
	{
		// Whirlwind
		mo = SpawnMissile(this, target, MT_WHIRLWIND);
		if (mo != NULL)
		{
			mo->origin.z -= 32.0;
			mo->specialmobj1 = target;
			mo->special2 = 50;	// Timer for active sound
			mo->health = 20 * TICRATE;	// Duration
			StartSoundName(this, 'HeadAttack3', CHAN_WEAPON);
		}
	}
}

//==========================================================================
//
//  Actor::A_HeadIceImpact
//
//==========================================================================

void Actor::A_HeadIceImpact(void)
{
	int i;
	float angle;
	mobj_t *shard;

	for (i = 0; i < 8; i++)
	{
		shard = P_SpawnMobj(origin.x, origin.y, origin.z, MT_HEADFX2);
		angle = itof(i) * 45.0;
		shard->target = target;
		shard->angles.yaw = angle;
		shard->velocity.x = shard->speed * cos(angle);
		shard->velocity.y = shard->speed * sin(angle);
		shard->velocity.z = -0.6 * 35.0;
		CheckMissileSpawn(shard);
	}
}

//==========================================================================
//
//  Actor::A_HeadFireGrow
//
//==========================================================================

void Actor::A_HeadFireGrow(void)
{
	health--;
	origin.z += 9.0;
	if (health == 0)
	{
		SetMobjState(this, S_HEADFX3_4);
	}
}

//==========================================================================
//
//  Actor::A_WhirlwindSeek
//
//==========================================================================

void Actor::A_WhirlwindSeek(void)
{
	health -= 3;
	if (health < 0)
	{
		velocity = vector(0.0, 0.0, 0.0);
		SetMobjState(this, deathstate);
		flags &= ~MF_MISSILE;
		return;
	}
	if ((special2 -= 3) < 0)
	{
		special2 = 58 + (P_Random() & 31);
		StartSoundName(this, 'HeadAttack3', CHAN_WEAPON);
	}
	if (specialmobj1 && specialmobj1->translucency)
	{
		return;
	}
	P_SeekerMissile(this, 10.0, 30.0);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.9  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
