//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	HeadMissile2
//
//**************************************************************************

class HeadMissile2:Projectile
{

__states__
{
	S_HEADFX2_1('FX05', 7, 6.0 / 35.0, S_HEADFX2_2) { }
	S_HEADFX2_2('FX05', 8, 6.0 / 35.0, S_HEADFX2_3) { }
	S_HEADFX2_3('FX05', 9, 6.0 / 35.0, S_HEADFX2_1) { }
	S_HEADFXI2_1('FX05', 3, 5.0 / 35.0, S_HEADFXI2_2) { }
	S_HEADFXI2_2('FX05', 4, 5.0 / 35.0, S_HEADFXI2_3) { }
	S_HEADFXI2_3('FX05', 5, 5.0 / 35.0, S_HEADFXI2_4) { }
	S_HEADFXI2_4('FX05', 6, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 12.0;
	Height = 6.0;
	Speed = 280.0;
	MissileDamage = 3;
	IdleState = S_HEADFX2_1;
	DeathState = S_HEADFXI2_1;
	Effects = EF_DL_BLUE;
}

}

//**************************************************************************
//
//	HeadMissile1
//
//**************************************************************************

class HeadMissile1:Projectile
{

//==========================================================================
//
//  A_HeadIceImpact
//
//==========================================================================

void A_HeadIceImpact(void)
{
	int i;
	float angle;
	Actor shard;

	for (i = 0; i < 8; i++)
	{
		shard = Spawn(HeadMissile2, Origin);
		angle = itof(i) * 45.0;
		shard.Instigator = Instigator;
		shard.Angles.yaw = angle;
		shard.Velocity.x = shard.Speed * cos(angle);
		shard.Velocity.y = shard.Speed * sin(angle);
		shard.Velocity.z = -0.6 * 35.0;
		shard.CheckMissileSpawn();
	}
}

__states__
{
	S_HEADFX1_1('FX05', 0, 6.0 / 35.0, S_HEADFX1_2) { }
	S_HEADFX1_2('FX05', 1, 6.0 / 35.0, S_HEADFX1_3) { }
	S_HEADFX1_3('FX05', 2, 6.0 / 35.0, S_HEADFX1_1) { }
	S_HEADFXI1_1('FX05', 3, 5.0 / 35.0, S_HEADFXI1_2) { A_HeadIceImpact(); }
	S_HEADFXI1_2('FX05', 4, 5.0 / 35.0, S_HEADFXI1_3) { }
	S_HEADFXI1_3('FX05', 5, 5.0 / 35.0, S_HEADFXI1_4) { }
	S_HEADFXI1_4('FX05', 6, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 12.0;
	Height = 6.0;
	Speed = 455.0;
	MissileDamage = 1;
	bThruGhost = true;
	IdleState = S_HEADFX1_1;
	DeathState = S_HEADFXI1_1;
	Effects = EF_DL_BLUE;
}

}

//**************************************************************************
//
//	HeadMissile3
//
//**************************************************************************

class HeadMissile3:Projectile
{

int GrownState;

//==========================================================================
//
//  A_HeadFireGrow
//
//==========================================================================

void A_HeadFireGrow(void)
{
	Health--;
	Origin.z += 9.0;
	if (Health == 0)
	{
		SetState(GrownState);
	}
}

__states__
{
	S_HEADFX3_1('FX06', 0, 4.0 / 35.0, S_HEADFX3_2) { A_HeadFireGrow(); }
	S_HEADFX3_2('FX06', 1, 4.0 / 35.0, S_HEADFX3_3) { A_HeadFireGrow(); }
	S_HEADFX3_3('FX06', 2, 4.0 / 35.0, S_HEADFX3_1) { A_HeadFireGrow(); }
	S_HEADFX3_4('FX06', 0, 5.0 / 35.0, S_HEADFX3_5) { }
	S_HEADFX3_5('FX06', 1, 5.0 / 35.0, S_HEADFX3_6) { }
	S_HEADFX3_6('FX06', 2, 5.0 / 35.0, S_HEADFX3_4) { }
	S_HEADFXI3_1('FX06', 3, 5.0 / 35.0, S_HEADFXI3_2) { }
	S_HEADFXI3_2('FX06', 4, 5.0 / 35.0, S_HEADFXI3_3) { }
	S_HEADFXI3_3('FX06', 5, 5.0 / 35.0, S_HEADFXI3_4) { }
	S_HEADFXI3_4('FX06', 6, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 14.0;
	Height = 12.0;
	Speed = 350.0;
	MissileDamage = 5;
	bWindThrust = true;
	IdleState = S_HEADFX3_1;
	GrownState = S_HEADFX3_4;
	DeathState = S_HEADFXI3_1;
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	WhirlWind
//
//**************************************************************************

class WhirlWind:Projectile
{

float SoundTimer;		// Timer for active sound

//===========================================================================
//
//  ExplodeMissile
//
//===========================================================================

void ExplodeMissile(void)
{
	SoundTimer += 1.0 / 35.0;
	if (SoundTimer < 60.0 / 35.0)
	{
		return;
	}
	::ExplodeMissile();
}

//==========================================================================
//
//  A_WhirlwindSeek
//
//==========================================================================

void A_WhirlwindSeek(void)
{
	Health -= 3;
	if (Health < 0)
	{
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(DeathState);
		bMissile = false;
		return;
	}
	SoundTimer -= 3.0 / 35.0;
	if (SoundTimer < 0.0)
	{
		SoundTimer = 58.0 / 35.0 + Random() * 31.0 / 35.0;
		PlaySound('HeadAttack3', CHAN_WEAPON);
	}
	if (Enemy && Enemy.Translucency)
	{
		return;
	}
	SeekerMissile(10.0, 30.0);
}

__states__
{
	S_HEADFX4_1('FX07', 3, 3.0 / 35.0, S_HEADFX4_2) { }
	S_HEADFX4_2('FX07', 4, 3.0 / 35.0, S_HEADFX4_3) { }
	S_HEADFX4_3('FX07', 5, 3.0 / 35.0, S_HEADFX4_4) { }
	S_HEADFX4_4('FX07', 6, 3.0 / 35.0, S_HEADFX4_5) { }
	S_HEADFX4_5('FX07', 0, 3.0 / 35.0, S_HEADFX4_6) { A_WhirlwindSeek(); }
	S_HEADFX4_6('FX07', 1, 3.0 / 35.0, S_HEADFX4_7) { A_WhirlwindSeek(); }
	S_HEADFX4_7('FX07', 2, 3.0 / 35.0, S_HEADFX4_5) { A_WhirlwindSeek(); }
	S_HEADFXI4_1('FX07', 6, 4.0 / 35.0, S_HEADFXI4_2) { }
	S_HEADFXI4_2('FX07', 5, 4.0 / 35.0, S_HEADFXI4_3) { }
	S_HEADFXI4_3('FX07', 4, 4.0 / 35.0, S_HEADFXI4_4) { }
	S_HEADFXI4_4('FX07', 3, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 16.0;
	Height = 74.0;
	Speed = 350.0;
	MissileDamage = 1;
	Translucency = 33;
	IdleState = S_HEADFX4_1;
	DeathState = S_HEADFXI4_1;
	SoundTimer = 50.0 / 35.0;
}

}

//**************************************************************************
//
//	Head
//
//**************************************************************************

class Head:Pawn
	__mobjinfo__(6)
{

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff(void)
{
	DropItem(ItemAmmoBlasterWimpy, 10, 0.328125);
	DropItem(ArtifactEgg, 0, 0.19921875);
}

//==========================================================================
//
//  A_HeadAttack
//
//==========================================================================

void A_HeadAttack(void)
{
	int i;
	Actor fire;
	Actor baseFire;
	Actor A;
	int randAttack;
	int dist;

	// Ice ball     (close 20% : far 60%)
	// Fire column  (close 40% : far 20%)
	// Whirlwind    (close 40% : far 20%)
	// Distance threshold = 8 cells

	if (!Enemy)
	{
		return;
	}
	A_FaceTarget();
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(6));
		return;
	}
	dist = MobjDist2(self, Enemy) > 8.0 * 64.0;
	randAttack = P_Random();
	if (randAttack < (dist ? 150 : 50))
	{
		// Ice ball
		SpawnMissile(Enemy, HeadMissile1);
		PlaySound('HeadAttack2', CHAN_WEAPON);
	}
	else if (randAttack < (dist ? 200 : 150))
	{
		// Fire column
		baseFire = SpawnMissile(Enemy, HeadMissile3);
		if (baseFire != none)
		{
			baseFire.SetState(S_HEADFX3_4);	// Don't grow
			for (i = 0; i < 5; i++)
			{
				fire = Spawn(HeadMissile3, baseFire.Origin);
				if (i == 0)
				{
					PlaySound('HeadAttack1', CHAN_WEAPON);
				}
				fire.Instigator = baseFire.Instigator;
				fire.Angles.yaw = baseFire.Angles.yaw;
				fire.Velocity = baseFire.Velocity;
				fire.MissileDamage = 0;
				fire.Health = (i + 1) * 2;
				fire.CheckMissileSpawn();
			}
		}
	}
	else
	{
		// Whirlwind
		A = SpawnMissile(Enemy, WhirlWind);
		if (A != none)
		{
			A.Origin.z -= 32.0;
			A.Enemy = Enemy;
			A.Health = 20 * TICRATE;	// Duration
			PlaySound('HeadAttack3', CHAN_WEAPON);
		}
	}
}

__states__
{
	S_HEAD_LOOK('HEAD', 0, 'monsters/head.md2', 0, 10.0 / 35.0, S_HEAD_LOOK) { A_Look(); }
	S_HEAD_FLOAT('HEAD', 0, 'monsters/head.md2', 0, 4.0 / 35.0, S_HEAD_FLOAT) { A_Chase(); }
	S_HEAD_ATK1('HEAD', 0, 'monsters/head.md2', 8, 5.0 / 35.0, S_HEAD_ATK2) { A_FaceTarget(); }
	S_HEAD_ATK2('HEAD', 1, 'monsters/head.md2', 9, 20.0 / 35.0, S_HEAD_FLOAT) { A_HeadAttack(); }
	S_HEAD_PAIN1('HEAD', 0, 'monsters/head.md2', 10, 4.0 / 35.0, S_HEAD_PAIN2) { }
	S_HEAD_PAIN2('HEAD', 0, 'monsters/head.md2', 11, 4.0 / 35.0, S_HEAD_FLOAT) { A_Pain(); }
	S_HEAD_DIE1('HEAD', 2, 7.0 / 35.0, S_HEAD_DIE2) { }
	S_HEAD_DIE2('HEAD', 3, 7.0 / 35.0, S_HEAD_DIE3) { A_Scream(); }
	S_HEAD_DIE3('HEAD', 4, 7.0 / 35.0, S_HEAD_DIE4) { }
	S_HEAD_DIE4('HEAD', 5, 7.0 / 35.0, S_HEAD_DIE5) { }
	S_HEAD_DIE5('HEAD', 6, 7.0 / 35.0, S_HEAD_DIE6) { A_NoBlocking(); }
	S_HEAD_DIE6('HEAD', 7, 7.0 / 35.0, S_HEAD_DIE7) { }
	S_HEAD_DIE7('HEAD', 8, -1.0, S_NULL) { A_BossDeath(); }
}

defaultproperties
{
	Health = 700;
	Radius = 40.0;
	Height = 72.0;
	Mass = 325.0;
	StepSpeed = 6.0;
	PainChance = 0.125;
	bNoBlood = true;
	bFloorClip = false;
	IdleState = S_HEAD_LOOK;
	SeeState = S_HEAD_FLOAT;
	MissileState = S_HEAD_ATK1;
	PainState = S_HEAD_PAIN1;
	DeathState = S_HEAD_DIE1;
	SightSound = 'HeadSight';
	ActiveSound = 'HeadActive';
	AttackSound = 'HeadAttack1';
	PainSound = 'HeadPain';
	DeathSound = 'HeadDeath';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.26  2002/07/13 07:58:51  dj_jl
//  Added new models, updated existing ones.
//
//  Revision 1.25  2002/06/22 07:16:00  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.24  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.23  2002/04/11 16:52:14  dj_jl
//  Made TryMove native.
//
//  Revision 1.22  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.21  2002/03/16 17:45:12  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.20  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.19  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.18  2002/02/22 18:00:16  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.17  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.15  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.14  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.12  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
