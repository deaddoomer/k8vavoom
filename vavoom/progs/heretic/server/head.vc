//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	$Id$
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**	$Log$
//**	Revision 1.2  2001/07/27 14:27:52  dj_jl
//**	Update with Id-s and Log-s, some fixes
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	A_HeadAttack
//
//==========================================================================

void A_HeadAttack(mobj_t* actor)
{
	int		i;
	mobj_t*	fire;
	mobj_t*	baseFire;
	mobj_t*	mo;
	mobj_t*	target;
	int		randAttack;
	int		dist;

	// Ice ball		(close 20% : far 60%)
	// Fire column	(close 40% : far 20%)
	// Whirlwind	(close 40% : far 20%)
	// Distance threshold = 8 cells

	target = actor->target;
	if (!target)
	{
		return;
	}
	A_FaceTarget(actor);
	if (P_CheckMeleeRange(actor))
	{
		DamageMobj(target, actor, actor, HITDICE(6));
		return;
	}
	dist = MobjDist2(actor, target) > 8.0 * 64.0;
	randAttack = P_Random();
	if (randAttack < (dist ? 150 : 50))
	{
		// Ice ball
		SpawnMissile(actor, target, MT_HEADFX1);
		StartSoundName(actor, "HeadAttack2");
	}
	else if (randAttack < (dist ? 200 : 150))
	{
		// Fire column
		baseFire = SpawnMissile(actor, target, MT_HEADFX3);
		if (baseFire != NULL)
		{
			SetMobjState(baseFire, S_HEADFX3_4); // Don't grow
			for (i = 0; i < 5; i++)
			{
				fire = P_SpawnMobj(baseFire->origin.x, baseFire->origin.y,
					baseFire->origin.z, MT_HEADFX3);
				if (i == 0)
				{
					StartSoundName(actor, "HeadAttack1");
				}
				fire->target = baseFire->target;
				fire->angles.yaw = baseFire->angles.yaw;
				fire->velocity.x = baseFire->velocity.x;
				fire->velocity.y = baseFire->velocity.y;
				fire->velocity.z = baseFire->velocity.z;
				fire->damage = 0;
				fire->health = (i + 1) * 2;
				CheckMissileSpawn(fire);
			}
		}
	}
	else
	{
		// Whirlwind
		mo = SpawnMissile(actor, target, MT_WHIRLWIND);
		if (mo != NULL)
		{
			mo->origin.z -= 32.0;
			mo->specialmobj1 = target;
			mo->special2 = 50; // Timer for active sound
			mo->health = 20 * TICRATE; // Duration
			StartSoundName(actor, "HeadAttack3");
		}
	}
}

//==========================================================================
//
//	A_HeadIceImpact
//
//==========================================================================

void A_HeadIceImpact(mobj_t* ice)
{
	int		i;
	angle_t	angle;
	mobj_t*	shard;

	for (i = 0; i < 8; i++)
	{
		shard = P_SpawnMobj(ice->origin.x, ice->origin.y, ice->origin.z, MT_HEADFX2);
		angle = i * ANG45;
		shard->target = ice->target;
		shard->angles.yaw = angle;
		shard->velocity.x = shard->speed * cos(angle);
		shard->velocity.y = shard->speed * sin(angle);
		shard->velocity.z = -0.6 * 35.0;
		CheckMissileSpawn(shard);
	}
}

//==========================================================================
//
//	A_HeadFireGrow
//
//==========================================================================

void A_HeadFireGrow(mobj_t* fire)
{
	fire->health--;
	fire->origin.z += 9.0;
	if (fire->health == 0)
	{
		SetMobjState(fire, S_HEADFX3_4);
	}
}

//==========================================================================
//
//	A_WhirlwindSeek
//
//==========================================================================

void A_WhirlwindSeek(mobj_t* actor)
{
	actor->health -= 3;
	if (actor->health < 0)
	{
		actor->velocity.x = actor->velocity.y = actor->velocity.z = 0.0;
		SetMobjState(actor, actor->deathstate);
		actor->flags &= ~MF_MISSILE;
		return;
	}
	if ((actor->special2 -= 3) < 0)
	{
		actor->special2 = 58 + (P_Random() & 31);
		StartSoundName(actor, "HeadAttack3");
	}
	if (actor->specialmobj1 && actor->specialmobj1->translucency)
	{
		return;
	}
	P_SeekerMissile(actor, ANGLE_1 * 10, ANGLE_1 * 30);
}

