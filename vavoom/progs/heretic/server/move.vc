//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//===========================================================================
//
//  P_TestMobjLocation
//
//  Returns true if the mobj is not blocked by anything at its current
// location, otherwise returns false.
//
//===========================================================================

boolean P_TestMobjLocation(mobj_t * mobj)
{
	if (mobj->bNoClip)
		return true;

	if (CheckPosition(*mobj, mobj->Origin))
	{
		// XY is ok, now check Z
		if ((mobj->Origin.z < mobj->FloorZ) ||
			(mobj->Origin.z + mobj->Height > mobj->CeilingZ))
		{
			// Bad Z
			return false;
		}
		return true;
	}
	return false;
}

//==========================================================================
//
//	Actor::Touch
//
//==========================================================================

boolean	Actor::Touch(MapObject InOther)
{
	boolean solid;
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// check for skulls slamming into things
	if (bSkullFly)
	{
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(SeeState);
		return false;
	}

	// missiles can hit other things
	if (bMissile)
	{
		// Check for passing through a ghost
		if (Other.Translucency && bThruGhost)
		{
			return true;
		}

		if (Owner && Owner.Class == Other.Class)
		{
			// Don't hit same species as originator
			if (Other == Owner)
			{
				// Don't missile self
				return true;
			}
			if (Other.Class != PlayerPawn)
			{
				// Hit same species as originator, explode, no damage
				return false;
			}
		}

		if (!Other.bShootable)
		{
			// didn't do any damage
			return !Other.bSolid;
		}

		if (bRip)
		{
			if (!Other.bNoBlood)
			{
				// Ok to spawn some blood
				SpawnRipperBlood();
			}
			PlaySound('RipSlop', CHAN_VOICE);
			damage = ((P_Random() & 3) + 2) * MissileDamage;
			Other.Damage(self, Owner, damage);
			if (Other.bPushable && !bCannotPush)
			{
				// Push	thing
				Other.Velocity.x += Velocity.x / 4.0;
				Other.Velocity.y += Velocity.y / 4.0;
			}
//WTAT A FUCK IS THIS???????			numspechit = 0;
			return true;
		}
		// Do damage
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		if (damage)
		{
			if (!Other.bNoBlood && P_Random() < 192)
			{
				Other.SpawnBloodSplatter(Origin);
			}
			Other.Damage(self, Owner, damage);
		}
		// don't traverse any more
		return false;
	}

	if (Other.bPushable && !bCannotPush)
	{
		// Push thing
		Other.Velocity.x += Velocity.x / 4.0;
		Other.Velocity.y += Velocity.y / 4.0;
	}

	// check for special pickup
	if (Other.bSpecial)
	{
		solid = Other.bSolid;
		Other.TouchSpecial(self);
		return !solid;
	}

	return !Other.bSolid;
}

boolean floatok;	// if true, move would be ok if
					// within tmtrace.FloorZ - tmtrace.CeilingZ
float saved_tmfloorz;

//==========================================================================
//
//  PushLine
//
//==========================================================================

void PushLine(mobj_t * thing)
{
	if (tmtrace.NumSpecHit && thing->bMissile &&
		thing->Owner && thing->Owner.bIsPlayer)
	{
		int i;

		for (i = tmtrace.NumSpecHit - 1; i >= 0; i--)
		{
			P_ActivateLine(tmtrace.SpecHit[i], &thing->Owner, 0, SPAC_IMPACT);
		}
	}
}

//==========================================================================
//
//  P_TryMove
//
//  Attempt to move to a new position, crossing special lines unless
// MF_TELEPORT is set.
//
//==========================================================================

boolean P_TryMove(mobj_t * thing, float x, float y)
{
	boolean check;
	TVec oldorg;
	int side;
	int oldside;
	line_t *ld;

	check = P_CheckRelPosition(thing, x, y);
	floatok = false;
	saved_tmfloorz = tmtrace.FloorZ;
	if (!check)
	{
		PushLine(thing);
		return false;
	}

	if (!thing->bNoClip)
	{
		if (tmtrace.CeilingZ - tmtrace.FloorZ < thing->Height)
		{
			// Doesn't fit
			PushLine(thing);
			return false;
		}

		floatok = true;

		if (!thing->bTeleport &&
			tmtrace.CeilingZ - thing->Origin.z < thing->Height && !thing->bFly)
		{
			// mobj must lower itself to fit
			PushLine(thing);
			return false;
		}
		if (thing->bFly)
		{
			if (thing->Origin.z + thing->Height > tmtrace.CeilingZ)
			{
				thing->Velocity.z = -8.0 * 35.0;
				return false;
			}
			else if (thing->Origin.z < tmtrace.FloorZ &&
				tmtrace.FloorZ - tmtrace.DropOffZ > 24.0)
			{
				thing->Velocity.z = 8.0 * 35.0;
				return false;
			}
		}
		if (!thing->bTeleport &&
			// The Minotaur floor fire can step up any amount
			thing->Class != MinotaurFloorFire &&
			tmtrace.FloorZ - thing->Origin.z > 24.0)
		{
			// Too big a step up
			PushLine(thing);
			return false;
		}
		if (thing->bMissile && tmtrace.FloorZ > thing->Origin.z)
		{
			PushLine(thing);
		}
		if (!thing->bDropOff && !thing->bFloat &&
			tmtrace.FloorZ - tmtrace.DropOffZ > 24.0)
		{
			// Can't move over a dropoff
			return false;
		}
	}

	// the move is ok,
	// so link the thing into its new position
	P_UnsetThingPosition(*thing);

	oldorg = thing->Origin;
	thing->Origin.x = x;
	thing->Origin.y = y;

	P_SetThingPosition(*thing);
	thing->Floor = tmtrace.Floor;
	thing->Ceiling = tmtrace.Ceiling;
	thing->FloorZ = tmtrace.FloorZ;
	thing->CeilingZ = tmtrace.CeilingZ;

	if (thing->bFootClip && thing->GetFloorType() != FLOOR_SOLID)
	{
		thing->FloorClip = FOOTCLIPSIZE;
	}
	else
	{
		thing->FloorClip = 0.0;
	}

	//
	// if any special lines were hit, do the effect
	//
	if (!thing->bNoClip && !thing->bTeleport)
	{
		while (tmtrace.NumSpecHit > 0)
		{
			tmtrace.NumSpecHit--;
			// see if the line was crossed
			ld = tmtrace.SpecHit[tmtrace.NumSpecHit];
			side = PointOnPlaneSide(thing->Origin, ld);
			oldside = PointOnPlaneSide(oldorg, ld);
			if (side != oldside)
			{
				if (ld->special)
				{
					if (thing->bIsPlayer)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_CROSS);
					}
					else if (thing->bActivateMCross)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_MCROSS);
					}
					else if (thing->bActivatePCross)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_PCROSS);
					}
					else if (ld->special == 70)
					{
						//	Teleport hack
						P_ActivateLine(ld, thing, oldside, SPAC_MCROSS);
					}
				}
			}
		}
	}

	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.22  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.21  2002/02/22 18:00:17  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/09 18:13:46  dj_jl
//  Added flags that determines what line blocking flags to check
//
//  Revision 1.18  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.17  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/29 18:10:31  dj_jl
//  Added MCROSS and PCROSS flags
//
//  Revision 1.14  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.12  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.8  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.5  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
