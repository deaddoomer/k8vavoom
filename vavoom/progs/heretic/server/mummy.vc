//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	MummySoul
//
//**************************************************************************

class MummySoul:Effect
{

__states__
{
	S_MUMMY_SOUL1('MUMM', 16, 'monsters/mummy/soul.md2', 0, 5.0 / 35.0, S_MUMMY_SOUL2) { }
	S_MUMMY_SOUL2('MUMM', 17, 'monsters/mummy/soul.md2', 1, 5.0 / 35.0, S_MUMMY_SOUL3) { }
	S_MUMMY_SOUL3('MUMM', 18, 'monsters/mummy/soul.md2', 2, 5.0 / 35.0, S_MUMMY_SOUL4) { }
	S_MUMMY_SOUL4('MUMM', 19, 'monsters/mummy/soul.md2', 3, 5.0 / 35.0, S_MUMMY_SOUL5) { }
	S_MUMMY_SOUL5('MUMM', 19, 'monsters/mummy/soul.md2', 4, 4.0 / 35.0, S_MUMMY_SOUL6) { }
	S_MUMMY_SOUL6('MUMM', 20, 'monsters/mummy/soul.md2', 5, 5.0 / 35.0, S_MUMMY_SOUL7) { }
	S_MUMMY_SOUL7('MUMM', 21, 'monsters/mummy/soul.md2', 6, 5.0 / 35.0, S_MUMMY_SOUL8) { }
	S_MUMMY_SOUL8('MUMM', 22, 'monsters/mummy/soul.md2', 7, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_MUMMY_SOUL1;
}

}

//**************************************************************************
//
//	Mummy
//
//**************************************************************************

class Mummy:Pawn
	__mobjinfo__(68)
{

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff(void)
{
	DropItem(ItemAmmoGoldWandWimpy, 3, 0.328125);
}

//==========================================================================
//
//  A_MummyAttack
//
//==========================================================================

void A_MummyAttack(void)
{
	if (!Enemy)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(2));
		PlaySound('MumyAttack2', CHAN_WEAPON);
		return;
	}
	PlaySound('MumyAttack1', CHAN_WEAPON);
}

//==========================================================================
//
//  A_MummySoul
//
//==========================================================================

void A_MummySoul(void)
{
	Actor mo;

	mo = Spawn(MummySoul, Origin + vector(0.0, 0.0, 10.0));
	mo.Velocity.z = 1.0 * 35.0;
}

__states__
{
	S_MUMMY_LOOK1('MUMM', 0, 'monsters/mummy/base.md2', 0, 2.5 / 35.0, S_MUMMY_LOOK2) { A_Look(); }
	S_MUMMY_LOOK2('MUMM', 0, 'monsters/mummy/base.md2', 1, 2.5 / 35.0, S_MUMMY_LOOK3) { }
	S_MUMMY_LOOK3('MUMM', 0, 'monsters/mummy/base.md2', 2, 2.5 / 35.0, S_MUMMY_LOOK4) { }
	S_MUMMY_LOOK4('MUMM', 0, 'monsters/mummy/base.md2', 3, 2.5 / 35.0, S_MUMMY_LOOK5) { }
	S_MUMMY_LOOK5('MUMM', 1, 'monsters/mummy/base.md2', 4, 2.5 / 35.0, S_MUMMY_LOOK6) { A_Look(); }
	S_MUMMY_LOOK6('MUMM', 1, 'monsters/mummy/base.md2', 5, 2.5 / 35.0, S_MUMMY_LOOK7) { }
	S_MUMMY_LOOK7('MUMM', 1, 'monsters/mummy/base.md2', 6, 2.5 / 35.0, S_MUMMY_LOOK8) { }
	S_MUMMY_LOOK8('MUMM', 1, 'monsters/mummy/base.md2', 7, 2.5 / 35.0, S_MUMMY_LOOK1) { }
	S_MUMMY_WALK1('MUMM', 0, 'monsters/mummy/base.md2', 8, 2.0 / 35.0, S_MUMMY_WALK2) { A_Chase(); }
	S_MUMMY_WALK2('MUMM', 0, 'monsters/mummy/base.md2', 9, 2.0 / 35.0, S_MUMMY_WALK3) { }
	S_MUMMY_WALK3('MUMM', 1, 'monsters/mummy/base.md2', 10, 2.0 / 35.0, S_MUMMY_WALK4) { A_Chase(); }
	S_MUMMY_WALK4('MUMM', 1, 'monsters/mummy/base.md2', 11, 2.0 / 35.0, S_MUMMY_WALK5) { }
	S_MUMMY_WALK5('MUMM', 2, 'monsters/mummy/base.md2', 12, 2.0 / 35.0, S_MUMMY_WALK6) { A_Chase(); }
	S_MUMMY_WALK6('MUMM', 2, 'monsters/mummy/base.md2', 13, 2.0 / 35.0, S_MUMMY_WALK7) { }
	S_MUMMY_WALK7('MUMM', 3, 'monsters/mummy/base.md2', 14, 2.0 / 35.0, S_MUMMY_WALK8) { A_Chase(); }
	S_MUMMY_WALK8('MUMM', 3, 'monsters/mummy/base.md2', 15, 2.0 / 35.0, S_MUMMY_WALK1) { }
	S_MUMMY_ATK1('MUMM', 4, 'monsters/mummy/base.md2', 16, 2.0 / 35.0, S_MUMMY_ATK2) { A_FaceTarget(); }
	S_MUMMY_ATK2('MUMM', 4, 'monsters/mummy/base.md2', 17, 2.0 / 35.0, S_MUMMY_ATK3) { }
	S_MUMMY_ATK3('MUMM', 4, 'monsters/mummy/base.md2', 18, 2.0 / 35.0, S_MUMMY_ATK4) { }
	S_MUMMY_ATK4('MUMM', 5, 'monsters/mummy/base.md2', 19, 2.0 / 35.0, S_MUMMY_ATK5) { A_MummyAttack(); }
	S_MUMMY_ATK5('MUMM', 5, 'monsters/mummy/base.md2', 20, 2.0 / 35.0, S_MUMMY_ATK6) { }
	S_MUMMY_ATK6('MUMM', 5, 'monsters/mummy/base.md2', 21, 2.0 / 35.0, S_MUMMY_ATK7) { }
	S_MUMMY_ATK7('MUMM', 6, 'monsters/mummy/base.md2', 22, 3.0 / 35.0, S_MUMMY_ATK8) { A_FaceTarget(); }
	S_MUMMY_ATK8('MUMM', 6, 'monsters/mummy/base.md2', 23, 3.0 / 35.0, S_MUMMY_WALK1) { }
	S_MUMMY_PAIN1('MUMM', 7, 'monsters/mummy/base.md2', 32, 4.0 / 35.0, S_MUMMY_PAIN2) { }
	S_MUMMY_PAIN2('MUMM', 7, 'monsters/mummy/base.md2', 33, 4.0 / 35.0, S_MUMMY_WALK1) { A_Pain(); }
	S_MUMMY_DIE1('MUMM', 8, 'monsters/mummy/death.md2', 0, 5.0 / 35.0, S_MUMMY_DIE2) { }
	S_MUMMY_DIE2('MUMM', 9, 'monsters/mummy/death.md2', 1, 5.0 / 35.0, S_MUMMY_DIE3) { A_Scream(); }
	S_MUMMY_DIE3('MUMM', 10, 'monsters/mummy/death.md2', 2, 5.0 / 35.0, S_MUMMY_DIE4) { A_MummySoul(); }
	S_MUMMY_DIE4('MUMM', 11, 'monsters/mummy/death.md2', 3, 5.0 / 35.0, S_MUMMY_DIE5) { }
	S_MUMMY_DIE5('MUMM', 12, 'monsters/mummy/death.md2', 4, 5.0 / 35.0, S_MUMMY_DIE6) { A_NoBlocking(); }
	S_MUMMY_DIE6('MUMM', 13, 'monsters/mummy/death.md2', 5, 5.0 / 35.0, S_MUMMY_DIE7) { }
	S_MUMMY_DIE7('MUMM', 14, 'monsters/mummy/death.md2', 6, 5.0 / 35.0, S_MUMMY_DIE8) { }
	S_MUMMY_DIE8('MUMM', 15, 'monsters/mummy/death.md2', 7, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 80;
	Radius = 22.0;
	Height = 62.0;
	Mass = 75.0;
	StepSpeed = 12.0;
	PainChance = 0.5;
	IdleState = S_MUMMY_LOOK1;
	SeeState = S_MUMMY_WALK1;
	MeleeState = S_MUMMY_ATK1;
	PainState = S_MUMMY_PAIN1;
	DeathState = S_MUMMY_DIE1;
	SightSound = 'MumySight';
	ActiveSound = 'MumyActive';
	AttackSound = 'MumyAttack1';
	PainSound = 'MumyPain';
	DeathSound = 'MumyDeath';
}

}

//**************************************************************************
//
//	MummyMissile
//
//**************************************************************************

class MummyMissile:Projectile
{

//==========================================================================
//
//  A_ContMobjSound
//
//==========================================================================

void A_ContMobjSound(void)
{
	PlaySound('MumyHeadExplode', CHAN_VOICE);
}

//==========================================================================
//
//	A_MummyFX1Seek
//
//==========================================================================

void A_MummyFX1Seek(void)
{
	SeekerMissile(10.0, 20.0);
}

__states__
{
	S_MUMMYFX1_1('FX15', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_MUMMYFX1_2) { A_ContMobjSound(); }
	S_MUMMYFX1_2('FX15', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_MUMMYFX1_3) { A_MummyFX1Seek(); }
	S_MUMMYFX1_3('FX15', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_MUMMYFX1_4) { }
	S_MUMMYFX1_4('FX15', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_MUMMYFX1_1) { A_MummyFX1Seek(); }
	S_MUMMYFXI1_1('FX15', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_MUMMYFXI1_2) { }
	S_MUMMYFXI1_2('FX15', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_MUMMYFXI1_3) { }
	S_MUMMYFXI1_3('FX15', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_MUMMYFXI1_4) { }
	S_MUMMYFXI1_4('FX15', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 8.0;
	Height = 14.0;
	Speed = 315.0;
	MissileDamage = 4;
	IdleState = S_MUMMYFX1_1;
	DeathState = S_MUMMYFXI1_1;
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	MummyLeader
//
//**************************************************************************

class MummyLeader:Mummy
	__mobjinfo__(45)
{

//==========================================================================
//
//  A_MummyAttack2
//
//  Mummy leader missile attack.
//
//==========================================================================

void A_MummyAttack2(void)
{
	Actor A;

	if (!Enemy)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(2));
		return;
	}
	A = SpawnMissile(Enemy, MummyMissile);
	if (A)
	{
		A.Enemy = Enemy;
	}
}

__states__
{
	S_MUMMYL_ATK1('MUMM', 23, 'monsters/mummy/base.md2', 24, 5.0 / 35.0, S_MUMMYL_ATK2) { A_FaceTarget(); }
	S_MUMMYL_ATK2('MUMM', 24 | FF_FULLBRIGHT, 'monsters/mummy/base.md2', 25, 5.0 / 35.0, S_MUMMYL_ATK3) { A_FaceTarget(); }
	S_MUMMYL_ATK3('MUMM', 23, 'monsters/mummy/base.md2', 26, 5.0 / 35.0, S_MUMMYL_ATK4) { A_FaceTarget(); }
	S_MUMMYL_ATK4('MUMM', 24 | FF_FULLBRIGHT, 'monsters/mummy/base.md2', 27, 5.0 / 35.0, S_MUMMYL_ATK5) { A_FaceTarget(); }
	S_MUMMYL_ATK5('MUMM', 23, 'monsters/mummy/base.md2', 28, 5.0 / 35.0, S_MUMMYL_ATK6) { A_FaceTarget(); }
	S_MUMMYL_ATK6('MUMM', 24 | FF_FULLBRIGHT, 'monsters/mummy/base.md2', 29, 5.0 / 35.0, S_MUMMY_ATK7) { A_MummyAttack2(); }
	S_MUMMYL_ATK7('MUMM', 24 | FF_FULLBRIGHT, 'monsters/mummy/base.md2', 30, 5.0 / 35.0, S_MUMMY_ATK8) { }
	S_MUMMYL_ATK8('MUMM', 24 | FF_FULLBRIGHT, 'monsters/mummy/base.md2', 31, 5.0 / 35.0, S_MUMMY_WALK1) { }
}

defaultproperties
{
	Health = 100;
	PainChance = 0.25;
	MissileState = S_MUMMYL_ATK1;
}

}

//**************************************************************************
//
//	MummyGhost
//
//**************************************************************************

class MummyGhost:Mummy
	__mobjinfo__(69)
{

defaultproperties
{
	Translucency = 33;
}

}

//**************************************************************************
//
//	MummyLeaderGhost
//
//**************************************************************************

class MummyLeaderGhost:MummyLeader
	__mobjinfo__(46)
{

defaultproperties
{
	Translucency = 33;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.25  2002/08/05 17:17:21  dj_jl
//  Working on models.
//
//  Revision 1.24  2002/07/20 14:45:44  dj_jl
//  Fixed soul model name.
//
//  Revision 1.23  2002/07/13 07:58:51  dj_jl
//  Added new models, updated existing ones.
//
//  Revision 1.22  2002/06/22 07:16:00  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.21  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.20  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.19  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.18  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.17  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.16  2002/02/22 18:00:17  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.15  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.14  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.13  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.12  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.11  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
