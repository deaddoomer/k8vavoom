//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//  Actor::A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

void Actor::A_Look(void)
{
	mobj_t *targ;

	threshold = 0;	// any shot will wake up
	targ = subsector->sector->soundtarget;

	if (targ && targ->flags & MF_SHOOTABLE)
	{
		target = targ;

		if (flags & MF_AMBUSH)
		{
			if (!P_CheckSight(this, target))
			{
				if (!P_LookForPlayers(this, false))
					return;
			}
		}
	}
	else
	{
		if (!P_LookForPlayers(this, false))
			return;
	}

	// go into chase state
	if (sound_sight)
	{
		if (flags2 & MF2_BOSS)
		{	// Full volume
			StartSound(NULL, sound_sight, CHAN_VOICE);
		}
		else
		{
			StartSound(this, sound_sight, CHAN_VOICE);
		}
	}

	SetMobjState(this, seestate);
}

//==========================================================================
//
//  Actor::A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void Actor::A_Chase(void)
{
	float delta;

	if (reactiontime)
	{
		reactiontime--;
	}

	// modify target threshold
	if (threshold)
	{
		if (!target || target->health <= 0)
		{
			threshold = 0;
		}
		else
		{
			threshold--;
		}
	}

	if (fastparm)
	{
		// Monsters move faster in nightmare mode
		time *= 0.5;
		if (time < 0.1)
		{
			time = 0.1;
		}
	}

	// turn towards movement direction if not there yet
	if (movedir < 8)
	{
		angles.yaw = itof(ftoi(angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(angles.yaw - itof(movedir) * 45.0);

		if (delta > 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw + 45.0);
		}
	}

	if (!target || !(target->flags & MF_SHOOTABLE))
	{
		// look for a new target
		if (P_LookForPlayers(this, true))
		{
			return;	// got a new target
		}
		SetMobjState(this, spawnstate);
		return;
	}

	// do not attack twice in a row
	if (flags & MF_JUSTATTACKED)
	{
		flags &= ~MF_JUSTATTACKED;
		if (!fastparm)
		{
			P_NewChaseDir(this);
		}
		return;
	}

	// check for melee attack
	if (meleestate && P_CheckMeleeRange(this))
	{
		if (sound_attack)
		{
			StartSound(this, sound_attack, CHAN_WEAPON);
		}
		SetMobjState(this, meleestate);
		return;
	}

	// check for missile attack
	if (missilestate)
	{
		if (fastparm || !movecount)
		{
			if (P_CheckMissileRange(this))
			{
				SetMobjState(this, missilestate);
				flags |= MF_JUSTATTACKED;
				return;
			}
		}
	}

	// possibly choose another target
	if (netgame && !threshold)
	{
		if (!P_CheckSight(this, target))
		{
			if (P_LookForPlayers(this, true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--movecount < 0 || !P_Move(this))
	{
		P_NewChaseDir(this);
	}

	// make active sound
	if (sound_active && P_Random() < 3)
	{
		if (Class == MT_WIZARD && P_Random() < 128)
		{
			StartSound(this, sound_sight, CHAN_VOICE);
		}
		else if (Class == MT_SORCERER2)
		{
			StartSound(NULL, sound_active, CHAN_VOICE);
		}
		else
		{
			StartSound(this, sound_active, CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  Actor::A_FaceTarget
//
//==========================================================================

void Actor::A_FaceTarget(void)
{
	if (!target)
		return;

	flags &= ~MF_AMBUSH;

	angles.yaw = atan2(target->origin.y - origin.y,
		target->origin.x - origin.x);

	if (target->translucency)
	{
		angles.yaw = AngleMod360(angles.yaw + (Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//  Actor::A_Pain
//
//==========================================================================

void Actor::A_Pain(void)
{
	if (sound_pain)
	{
		StartSound(this, sound_pain, CHAN_VOICE);
	}
}

//==========================================================================
//
//  Actor::A_FreeTargMobj
//
//==========================================================================

void Actor::A_FreeTargMobj(void)
{
	velocity = vector(0.0, 0.0, 0.0);
	origin.z = ceilingz + 4.0;
	flags &= ~(MF_SHOOTABLE | MF_FLOAT | MF_SKULLFLY | MF_SOLID);
	flags |= MF_CORPSE | MF_DROPOFF | MF_NOGRAVITY;
	flags2 &= ~(MF2_PASSMOBJ | MF2_LOGRAV);
	player = NULL;
}

//==========================================================================
//
//  Actor::A_Scream
//
//==========================================================================

void Actor::A_Scream(void)
{
	switch (Class)
	{
	case MT_CHICPLAYER:
	case MT_SORCERER1:
	case MT_MINOTAUR:
		// Make boss death sounds full volume
		StartSound(NULL, sound_death, CHAN_VOICE);
		break;
	case MT_PLAYER:
		// Handle the different player death screams
		if (special1 < 10)
		{	// Wimpy death sound
			StartSoundName(this, "PlayerWimpyDeath", CHAN_VOICE);
		}
		else if (health > -50)
		{	// Normal death sound
			StartSound(this, sound_death, CHAN_VOICE);
		}
		else if (health > -100)
		{	// Crazy death sound
			StartSoundName(this, "PlayerCrazyDeath", CHAN_VOICE);
		}
		else
		{	// Extreme death sound
			StartSoundName(this, "PlayerExtremeDeath", CHAN_VOICE);
		}
		break;
	default:
		StartSound(this, sound_death, CHAN_VOICE);
		break;
	}
}

//==========================================================================
//
//  Actor::A_Explode
//
//  Handles a bunch of exploding things.
//
//==========================================================================

void Actor::A_Explode(void)
{
	int damage;

	damage = 128;
	switch (Class)
	{
	case MT_FIREBOMB:	// Time Bombs
		origin.z += 32.0;
		translucency = 0;
		break;
	case MT_MNTRFX2:	// Minotaur floor fire
		damage = 24;
		break;
	case MT_SOR2FX1:	// D'Sparil missile
		damage = 80 + (P_Random() & 31);
		break;
	default:
		break;
	}
	P_RadiusAttack(this, target, damage, 0, 0);
	P_HitFloor(this);
	if (Class == MT_FIREBOMB)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion);
		MSG_WriteByte(EF_DL_WHITE);
		MSG_WriteShort(ftoi(origin.x));
		MSG_WriteShort(ftoi(origin.y));
		MSG_WriteShort(ftoi(origin.z));
	}
	if (Class == MT_POD)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion);
		MSG_WriteByte(EF_DL_GREEN);
		MSG_WriteShort(ftoi(origin.x));
		MSG_WriteShort(ftoi(origin.y));
		MSG_WriteShort(ftoi(origin.z));
	}
}

//==========================================================================
//
//  P_DropItem
//
//==========================================================================

void P_DropItem(mobj_t * source, classid type, int special, int chance)
{
	mobj_t *mo;

	if (P_Random() > chance)
	{
		return;
	}
	mo = P_SpawnMobj(source->origin.x, source->origin.y,
		source->origin.z + source->height / 2.0, type);
	mo->velocity.x = (Random() - Random()) * 35.0;
	mo->velocity.y = (Random() - Random()) * 35.0;
	mo->velocity.z = (5.0 + Random() * 4.0) * 35.0;
	mo->flags |= MF_DROPPED;
	mo->health = special;
}

//==========================================================================
//
//  Actor::A_NoBlocking
//
//==========================================================================

void Actor::A_NoBlocking(void)
{
	flags &= ~MF_SOLID;
	// Check for monsters dropping things
	switch (Class)
	{
	case MT_MUMMY:
	case MT_MUMMYLEADER:
	case MT_MUMMYGHOST:
	case MT_MUMMYLEADERGHOST:
		P_DropItem(this, MT_AMGWNDWIMPY, 3, 84);
		break;
	case MT_KNIGHT:
	case MT_KNIGHTGHOST:
		P_DropItem(this, MT_AMCBOWWIMPY, 5, 84);
		break;
	case MT_WIZARD:
		P_DropItem(this, MT_AMBLSRWIMPY, 10, 84);
		P_DropItem(this, MT_ARTITOMEOFPOWER, 0, 4);
		break;
	case MT_HEAD:
		P_DropItem(this, MT_AMBLSRWIMPY, 10, 84);
		P_DropItem(this, MT_ARTIEGG, 0, 51);
		break;
	case MT_BEAST:
		P_DropItem(this, MT_AMCBOWWIMPY, 10, 84);
		break;
	case MT_CLINK:
		P_DropItem(this, MT_AMSKRDWIMPY, 20, 84);
		break;
	case MT_SNAKE:
		P_DropItem(this, MT_AMPHRDWIMPY, 5, 84);
		break;
	case MT_MINOTAUR:
		P_DropItem(this, MT_ARTISUPERHEAL, 0, 51);
		P_DropItem(this, MT_AMPHRDWIMPY, 10, 84);
		break;
	default:
		break;
	}
}

//==========================================================================
//
//	Actor::A_AddPlayerCorpse
//
//==========================================================================

#define BODYQUESIZE		32
mobj_t *bodyque[BODYQUESIZE];
int bodyqueslot;

void Actor::A_AddPlayerCorpse(void)
{
	if (bodyqueslot >= BODYQUESIZE)
	{
		// Too many player corpses - remove an old one
		P_RemoveMobj(bodyque[bodyqueslot % BODYQUESIZE]);
	}
	bodyque[bodyqueslot % BODYQUESIZE] = this;
	bodyqueslot++;
}

//==========================================================================
//
//  Actor::A_SkullPop
//
//==========================================================================

void Actor::A_SkullPop(void)
{
	mobj_t *mo;

	flags &= ~MF_SOLID;
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 48.0, MT_BLOODYSKULL);
	mo->velocity.x = (Random() - Random()) * 2.0 * 35.0;
	mo->velocity.y = (Random() - Random()) * 2.0 * 35.0;
	mo->velocity.z = (2.0 + Random() / 4.0) * 35.0;
	// Attach player mobj to bloody skull
	mo->player = player;
	player = NULL;
	mo->health = health;
	mo->angles.yaw = angles.yaw;
	mo->player->mo = mo;
	mo->player->damagecount = 32;
}

//==========================================================================
//
//	Actor::A_FlameSnd
//
//==========================================================================

void Actor::A_FlameSnd(void)
{
	StartSoundName(this, "HeadAttack1", CHAN_WEAPON);	// Burn sound
}

//==========================================================================
//
//  Actor::A_CheckBurnGone
//
//==========================================================================

void Actor::A_CheckBurnGone(void)
{
	if (special2 == 666)
	{
		SetMobjState(this, S_PLAY_FDTH20);
	}
}

//==========================================================================
//
//	Actor::A_CheckSkullFloor
//
//==========================================================================

void Actor::A_CheckSkullFloor(void)
{
	if (origin.z <= floorz)
	{
		SetMobjState(this, S_BLOODYSKULLX1);
	}
}

//==========================================================================
//
//	Actor::A_CheckSkullDone
//
//==========================================================================

void Actor::A_CheckSkullDone(void)
{
	if (special2 == 666)
	{
		SetMobjState(this, S_BLOODYSKULLX2);
	}
}

//==========================================================================
//
//  Actor::A_BossDeath
//
//  Trigger special effects if all bosses are dead.
//
//==========================================================================

void Actor::A_BossDeath(void)
{
	string mapname;
	mobj_t *mo;
	int args[5];

	mapname = ptrtos(&level->mapname[0]);

	if (!strcmp(mapname, "E1M8"))
	{
		if (Class != MT_HEAD)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else if (!strcmp(mapname, "E2M8"))
	{
		if (Class != MT_MINOTAUR)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else if (!strcmp(mapname, "E3M8"))
	{
		if (Class != MT_SORCERER2)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else if (!strcmp(mapname, "E4M8"))
	{
		if (Class != MT_HEAD)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else if (!strcmp(mapname, "E5M8"))
	{
		if (Class != MT_MINOTAUR)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else
	{
		//  Not a boss level
		return;
	}

	// Make sure all bosses are dead
	for (mo = NextMobj(NULL); mo; mo = NextMobj(mo))
	{
		if ((mo != this) && (mo->Class == Class) && (mo->health > 0))
		{
			// Found a living boss
			return;
		}
	}
	if (strcmp(mapname, "E1M8"))
	{
		// Kill any remaining monsters
		P_Massacre();
	}
	args[0] = 666;
	args[1] = 8;
	EV_DoFloor(NULL, &args[0], FLEV_LOWERFLOOR);
}

//==========================================================================
//
//  Actor::A_ContMobjSound
//
//==========================================================================

void Actor::A_ContMobjSound(void)
{
	switch (Class)
	{
	case MT_KNIGHTAXE:
		StartSoundName(this, "KnightAttack1", CHAN_VOICE);
		break;
	case MT_MUMMYFX1:
		StartSoundName(this, "MumyHeadExplode", CHAN_VOICE);
		break;
	default:
		break;
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.9  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/12/01 18:14:09  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
