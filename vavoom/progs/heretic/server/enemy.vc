//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//  Actor::A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

void Actor::A_Look(void)
{
	Actor targ;

	Threshold = 0;	// any shot will wake up
	targ = Actor(Sector->SoundTarget);

	if (targ && targ.bShootable)
	{
		Target = targ;

		if (bAmbush)
		{
			if (!P_CheckSight(self, Target))
			{
				if (!LookForPlayers(false))
					return;
			}
		}
	}
	else
	{
		if (!LookForPlayers(false))
			return;
	}

	// go into chase state
	if (SightSound)
	{
		if (bBoss)
		{
			// Full volume
			PlayFullVolumeSound(SightSound, CHAN_VOICE);
		}
		else
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
	}

	SetState(SeeState);
}

//==========================================================================
//
//  Actor::A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void Actor::A_Chase(void)
{
	float delta;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	// modify target threshold
	if (Threshold)
	{
		if (!Target || Target.Health <= 0)
		{
			Threshold = 0;
		}
		else
		{
			Threshold--;
		}
	}

	if (fastparm)
	{
		// Monsters move faster in nightmare mode
		StateTime *= 0.5;
		if (StateTime < 0.1)
		{
			StateTime = 0.1;
		}
	}

	// turn towards movement direction if not there yet
	if (MoveDir < 8)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);

		if (delta > 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw + 45.0);
		}
	}

	if (!Target || !Target.bShootable)
	{
		// look for a new target
		if (LookForPlayers(true))
		{
			return;	// got a new target
		}
		SetState(SpawnState);
		return;
	}

	// do not attack twice in a row
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (!fastparm)
		{
			NewChaseDir();
		}
		return;
	}

	// check for melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// check for missile attack
	if (MissileState)
	{
		if (fastparm || !MoveCount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				bJustAttacked = true;
				return;
			}
		}
	}

	// possibly choose another target
	if (netgame && !Threshold)
	{
		if (!P_CheckSight(self, Target))
		{
			if (LookForPlayers(true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--MoveCount < 0 || !StepMove())
	{
		NewChaseDir();
	}

	// make active sound
	if (ActiveSound && P_Random() < 3)
	{
		if (Class == Wizard && P_Random() < 128)
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
		else if (Class == Sorcerer2)
		{
			PlayFullVolumeSound(ActiveSound, CHAN_VOICE);
		}
		else
		{
			PlaySound(ActiveSound, CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  Actor::A_FaceTarget
//
//==========================================================================

void Actor::A_FaceTarget(void)
{
	if (!Target)
		return;

	bAmbush = false;

	Angles.yaw = atan2(Target.Origin.y - Origin.y, Target.Origin.x - Origin.x);

	if (Target.Translucency)
	{
		Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//  Actor::A_Pain
//
//==========================================================================

void Actor::A_Pain(void)
{
	if (PainSound)
	{
		PlaySound(PainSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  Actor::A_FreeTargMobj
//
//==========================================================================

void Actor::A_FreeTargMobj(void)
{
	Velocity = vector(0.0, 0.0, 0.0);
	Origin.z = CeilingZ + 4.0;
	bSolid = false;
	bShootable = false;
	bFloat = false;
	bSkullFly = false;
	bNoGravity = true;
	bDropOff = true;
	bCorpse = true;
	bNoPassMobj = true;
	Player = NULL;
	bIsPlayer = false;
}

//==========================================================================
//
//  Actor::A_Scream
//
//==========================================================================

void Actor::A_Scream(void)
{
	switch (Class)
	{
	case ChickenPlayer:
	case Sorcerer1:
	case Minotaur:
		// Make boss death sounds full volume
		PlayFullVolumeSound(DeathSound, CHAN_VOICE);
		break;
	case PlayerPawn:
		// Handle the different player death screams
		if (Special1 < 10)
		{	// Wimpy death sound
			PlaySound('PlayerWimpyDeath', CHAN_VOICE);
		}
		else if (Health > -50)
		{	// Normal death sound
			PlaySound(DeathSound, CHAN_VOICE);
		}
		else if (Health > -100)
		{	// Crazy death sound
			PlaySound('PlayerCrazyDeath', CHAN_VOICE);
		}
		else
		{	// Extreme death sound
			PlaySound('PlayerExtremeDeath', CHAN_VOICE);
		}
		break;
	default:
		PlaySound(DeathSound, CHAN_VOICE);
		break;
	}
}

//==========================================================================
//
//  Actor::A_Explode
//
//  Handles a bunch of exploding things.
//
//==========================================================================

void Actor::A_Explode(void)
{
	int damage;

	damage = 128;
	switch (Class)
	{
	case FireBomb:	// Time Bombs
		Origin.z += 32.0;
		Translucency = 0;
		break;
	case MinotaurFloorFire:	// Minotaur floor fire
		damage = 24;
		break;
	case Sorcerer2Missile1:	// D'Sparil missile
		damage = 80 + (P_Random() & 31);
		break;
	default:
		break;
	}
	P_RadiusAttack(this, &Owner, damage, 0, 0);
	HitFloorEffect();
	if (Class == FireBomb)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion);
		MSG_WriteByte(EF_DL_WHITE);
		MSG_WriteShort(ftoi(Origin.x));
		MSG_WriteShort(ftoi(Origin.y));
		MSG_WriteShort(ftoi(Origin.z));
	}
	if (Class == Pod)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion);
		MSG_WriteByte(EF_DL_GREEN);
		MSG_WriteShort(ftoi(Origin.x));
		MSG_WriteShort(ftoi(Origin.y));
		MSG_WriteShort(ftoi(Origin.z));
	}
}

//==========================================================================
//
//  Actor::DropItem
//
//==========================================================================

void Actor::DropItem(classid type, int amount, int chance)
{
	mobj_t *mo;

	if (P_Random() > chance)
	{
		return;
	}
	mo = P_SpawnMobj(Origin.x, Origin.y, Origin.z + Height / 2.0, type);
	mo->Velocity.x = (Random() - Random()) * 35.0;
	mo->Velocity.y = (Random() - Random()) * 35.0;
	mo->Velocity.z = (5.0 + Random() * 4.0) * 35.0;
	mo->bDropped = true;
	mo->Health = amount;
}

//==========================================================================
//
//  Actor::A_NoBlocking
//
//==========================================================================

void Actor::A_NoBlocking(void)
{
	bSolid = false;
	// Check for monsters dropping things
	switch (Class)
	{
	case Mummy:
	case MummyLeader:
	case MummyGhost:
	case MummyLeaderGhost:
		DropItem(ItemAmmoGoldWandWimpy, 3, 84);
		break;
	case Knight:
	case KnightGhost:
		DropItem(ItemAmmoCrossbowWimpy, 5, 84);
		break;
	case Wizard:
		DropItem(ItemAmmoBlasterWimpy, 10, 84);
		DropItem(ArtifactTomeOfPower, 0, 4);
		break;
	case Head:
		DropItem(ItemAmmoBlasterWimpy, 10, 84);
		DropItem(ArtifactEgg, 0, 51);
		break;
	case Beast:
		DropItem(ItemAmmoCrossbowWimpy, 10, 84);
		break;
	case Clink:
		DropItem(ItemAmmoSkullRodWimpy, 20, 84);
		break;
	case Snake:
		DropItem(ItemAmmoPhoenixWimpy, 5, 84);
		break;
	case Minotaur:
		DropItem(ArtifactSuperHeal, 0, 51);
		DropItem(ItemAmmoPhoenixWimpy, 10, 84);
		break;
	}
}

//==========================================================================
//
//	Actor::A_AddPlayerCorpse
//
//==========================================================================

#define BODYQUESIZE		32
mobj_t *bodyque[BODYQUESIZE];
int bodyqueslot;

void Actor::A_AddPlayerCorpse(void)
{
	if (bodyqueslot >= BODYQUESIZE)
	{
		// Too many player corpses - remove an old one
		P_RemoveMobj(bodyque[bodyqueslot % BODYQUESIZE]);
	}
	bodyque[bodyqueslot % BODYQUESIZE] = this;
	bodyqueslot++;
}

//==========================================================================
//
//  Actor::A_SkullPop
//
//==========================================================================

void Actor::A_SkullPop(void)
{
	mobj_t *mo;

	bSolid = false;
	mo = P_SpawnMobj(Origin.x, Origin.y, Origin.z + 48.0, BloodySkull);
	mo->Velocity.x = (Random() - Random()) * 2.0 * 35.0;
	mo->Velocity.y = (Random() - Random()) * 2.0 * 35.0;
	mo->Velocity.z = (2.0 + Random() / 4.0) * 35.0;
	// Attach player mobj to bloody skull
	mo->Player = Player;
	mo->bIsPlayer = true;
	Player = NULL;
	bIsPlayer = false;
	mo->Health = Health;
	mo->Angles.yaw = Angles.yaw;
	mo->Player->mo = mo;
	mo->Player->DamageCount = 32;
}

//==========================================================================
//
//	Actor::A_FlameSnd
//
//==========================================================================

void Actor::A_FlameSnd(void)
{
	PlaySound('HeadAttack1', CHAN_WEAPON);	// Burn sound
}

//==========================================================================
//
//  Actor::A_CheckBurnGone
//
//==========================================================================

void Actor::A_CheckBurnGone(void)
{
	if (Special2 == 666)
	{
		SetState(S_PLAY_FDTH20);
	}
}

//==========================================================================
//
//	Actor::A_CheckSkullFloor
//
//==========================================================================

void Actor::A_CheckSkullFloor(void)
{
	if (Origin.z <= FloorZ)
	{
		SetState(S_BLOODYSKULLX1);
	}
}

//==========================================================================
//
//	Actor::A_CheckSkullDone
//
//==========================================================================

void Actor::A_CheckSkullDone(void)
{
	if (Special2 == 666)
	{
		SetState(S_BLOODYSKULLX2);
	}
}

//==========================================================================
//
//  Actor::A_BossDeath
//
//  Trigger special effects if all bosses are dead.
//
//==========================================================================

void Actor::A_BossDeath(void)
{
	string mapname;
	Actor mo;
	int args[5];

	mapname = ptrtos(&level->mapname[0]);

	if (!strcmp(mapname, "E1M8"))
	{
		if (Class != Head)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else if (!strcmp(mapname, "E2M8"))
	{
		if (Class != Minotaur)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else if (!strcmp(mapname, "E3M8"))
	{
		if (Class != Sorcerer2)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else if (!strcmp(mapname, "E4M8"))
	{
		if (Class != Head)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else if (!strcmp(mapname, "E5M8"))
	{
		if (Class != Minotaur)
		{
			// Not considered a boss in this episode
			return;
		}
	}
	else
	{
		//  Not a boss level
		return;
	}

	// Make sure all bosses are dead
	FOREACH(Actor, mo)
	{
		if ((mo != self) && (mo.Class == Class) && (mo.Health > 0))
		{
			// Found a living boss
			return;
		}
	}
	if (strcmp(mapname, "E1M8"))
	{
		// Kill any remaining monsters
		P_Massacre();
	}
	args[0] = 666;
	args[1] = 8;
	EV_DoFloor(NULL, &args[0], FLEV_LOWERFLOOR);
}

//==========================================================================
//
//  Actor::A_ContMobjSound
//
//==========================================================================

void Actor::A_ContMobjSound(void)
{
	switch (Class)
	{
	case KnightAxe:
		PlaySound('KnightAttack1', CHAN_VOICE);
		break;
	case MummyMissile:
		PlaySound('MumyHeadExplode', CHAN_VOICE);
		break;
	default:
		break;
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.23  2002/03/09 17:57:01  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.22  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.21  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.20  2002/02/22 18:00:16  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.19  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.18  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.17  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/12/01 18:14:09  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
