//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	PLAT_Up,
	PLAT_Down,
	PLAT_Waiting,
	PLAT_InStasis
};

enum
{
	PLATEV_PerpetualRaise,
	PLATEV_PerpetualRaiseLip,
	PLATEV_DownWaitUpStay,
	PLATEV_DownWaitUpStayLip,
	PLATEV_DownNearestWaitUpStay,
	PLATEV_DownLowestCeilingWaitUpStay,
	PLATEV_DownByValueWaitUpStay,
	PLATEV_UpWaitDownStay,
	PLATEV_UpNearestWaitDownStay,
	PLATEV_UpByValueWaitDownStay,
	PLATEV_Toggle,
	PLATEV_Generic
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	EV_DoPlat
//
//	Do Platforms
//  "amount" is only used for SOME platforms.
//
//==========================================================================

int EV_DoPlat(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5, int Type,
	line_t* Line)
{
	Platform	Plat;
	int			SecNum;
	int			Rtn;
	sector_t*	Sec;

	Rtn = false;

	if (!Arg1)
	{
		if (!Line || !Line->backsector)
			return false;

		//  Activate all <type> plats that are in stasis.
		if ((Type == PLATEV_PerpetualRaise ||
			Type == PLATEV_PerpetualRaiseLip ||
			Type == PLATEV_Toggle) && Platform(Line->backsector->FloorData))
		{
			//  Activate in stasis
			Platform(Line->backsector->FloorData).ActivateInStasis(Arg1);
			if (Type == PLATEV_Toggle)
			{
				Rtn = true;
			}
		}

		if (!Line->backsector->FloorData)
		{
			// Find lowest & highest floors around sector
			Rtn = 1;
			Plat = NewSpecialThinker(Platform);
			Plat.Init(Line->backsector, Arg1, Arg2, Arg3, Arg4, Arg5, Type);
		}
	}
	else
	{
		//  Activate all <type> plats that are in stasis.
		if (Type == PLATEV_PerpetualRaise ||
			Type == PLATEV_PerpetualRaiseLip ||
			Type == PLATEV_Toggle)
		{
			//  Activate in stasis
			FOREACH(Platform, Plat)
			{
				Plat.ActivateInStasis(Arg1);
			}
			if (Type == PLATEV_Toggle)
			{
				Rtn = true;
			}
		}

		for (SecNum = FindSectorFromTag(Arg1, -1); SecNum >= 0;
			SecNum = FindSectorFromTag(Arg1, SecNum))
		{
			Sec = &GLevel.Sectors[SecNum];
			if (Sec->FloorData)
				continue;

			// Find lowest & highest floors around sector
			Rtn = 1;
			Plat = NewSpecialThinker(Platform);
			Plat.Init(Sec, Arg1, Arg2, Arg3, Arg4, Arg5, Type);
		}
	}
	return Rtn;
}

//==========================================================================
//
//  EV_StopPlat
//
//==========================================================================

int EV_StopPlat(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5)
{
	Platform	Plat;

	FOREACH(Platform, Plat)
	{
		Plat.StopPlat(Arg1);
	}
	return 1;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.17  2005/03/28 07:43:30  dj_jl
//  Some Boom line specials and other improvements.
//
//  Revision 1.16  2005/03/01 14:39:32  dj_jl
//  Big update of line specials.
//
//  Revision 1.15  2005/01/25 17:45:15  dj_jl
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.14  2002/10/26 16:32:24  dj_jl
//  New style of defining classes.
//
//  Revision 1.13  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.12  2002/04/11 16:48:10  dj_jl
//  New base classes for sector thinkers, Tick function.
//
//  Revision 1.11  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.10  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.9  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/18 18:29:22  dj_jl
//  Added Hexen action specials
//
//  Revision 1.6  2001/09/25 17:13:50  dj_jl
//  Beautification
//
//  Revision 1.5  2001/09/24 17:16:18  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
