//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	PLAT_UP,
	PLAT_DOWN,
	PLAT_WAITING,
	PLAT_IN_STASIS
};

enum
{
	PLAT_PERPETUALRAISELIP,
	PLAT_DOWNWAITUPSTAYLIP,
	// Hexen specials
	PLAT_PERPETUALRAISE,
	PLAT_DOWNWAITUPSTAY,
	PLAT_DOWNBYVALUEWAITUPSTAY,
	PLAT_UPWAITDOWNSTAY,
	PLAT_UPBYVALUEWAITDOWNSTAY
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  P_ActivateInStasis
//
//==========================================================================

void P_ActivateInStasis(int tag)
{
	Platform Plat;

	FOREACH(Platform, Plat)
	{
		if ((Plat.tag == tag) && (Plat.status == PLAT_IN_STASIS))
		{
			Plat.status = Plat.oldstatus;
		}
	}
}

//==========================================================================
//
//  Do Platforms
//  "amount" is only used for SOME platforms.
//
//==========================================================================

int EV_DoPlat(line_t * line, int *args, int type)
{
	Platform Plat;
	int secnum;
	int rtn;
	sector_t *sec;

	secnum = -1;
	rtn = 0;

	//
	//  Activate all <type> plats that are   PLAT_IN_STASIS
	//
	if (type == PLAT_PERPETUALRAISELIP)
	{
		P_ActivateInStasis(args[0]);
	}

	while ((secnum = FindSectorFromTag(args[0], secnum)) >= 0)
	{
		sec = &GLevel.Sectors[secnum];
		if (sec->SpecialData)
			continue;

		//
		// Find lowest & highest floors around sector
		//
		rtn = 1;
		Plat = NewSpecialThinker(Platform);

		Plat.type = type;
		Plat.sector = sec;
		Plat.sector->SpecialData = Plat;
		Plat.tag = args[0];
		Plat.speed = itof(args[1]) * 4.0;
		switch (type)
		{
		case PLAT_DOWNWAITUPSTAYLIP:
			Plat.low = FindLowestFloorSurrounding(sec) + itof(args[3]);
			if (Plat.low > sec->floorheight)
				Plat.low = sec->floorheight;
			Plat.high = sec->floorheight;
			Plat.wait = itof(args[2]) / 35.0;
			Plat.status = PLAT_DOWN;
			break;
		case PLAT_PERPETUALRAISELIP:
			Plat.low = FindLowestFloorSurrounding(sec) + itof(args[3]);
			if (Plat.low > sec->floorheight)
				Plat.low = sec->floorheight;
			Plat.high = FindHighestFloorSurrounding(sec);
			if (Plat.high < sec->floorheight)
				Plat.high = sec->floorheight;
			Plat.wait = itof(args[2]) / 35.0;
			Plat.status = P_Random() & 1;
			break;
		case PLAT_DOWNWAITUPSTAY:
			Plat.low = FindLowestFloorSurrounding(sec) + 8.0;
			if (Plat.low > sec->floorheight)
				Plat.low = sec->floorheight;
			Plat.high = sec->floorheight;
			Plat.wait = itof(args[2]) / 35.0;
			Plat.status = PLAT_DOWN;
			break;
		case PLAT_DOWNBYVALUEWAITUPSTAY:
			Plat.low = sec->floorheight - itof(args[3]) * 8.0;
			if (Plat.low > sec->floorheight)
				Plat.low = sec->floorheight;
			Plat.high = sec->floorheight;
			Plat.wait = itof(args[2]) / 35.0;
			Plat.status = PLAT_DOWN;
			break;
		case PLAT_UPWAITDOWNSTAY:
			Plat.high = FindHighestFloorSurrounding(sec);
			if (Plat.high < sec->floorheight)
				Plat.high = sec->floorheight;
			Plat.low = sec->floorheight;
			Plat.wait = itof(args[2]) / 35.0;
			Plat.status = PLAT_UP;
			break;
		case PLAT_UPBYVALUEWAITDOWNSTAY:
			Plat.high = sec->floorheight + itof(args[3]) * 8.0;
			if (Plat.high < sec->floorheight)
				Plat.high = sec->floorheight;
			Plat.low = sec->floorheight;
			Plat.wait = itof(args[2]) / 35.0;
			Plat.status = PLAT_UP;
			break;
		case PLAT_PERPETUALRAISE:
			Plat.low = FindLowestFloorSurrounding(sec) + 8.0;
			if (Plat.low > sec->floorheight)
				Plat.low = sec->floorheight;
			Plat.high = FindHighestFloorSurrounding(sec);
			if (Plat.high < sec->floorheight)
				Plat.high = sec->floorheight;
			Plat.wait = itof(args[2]) / 35.0;
			Plat.status = P_Random() & 1;
			break;
		}
		SectorStartSoundName(sec, 'PlatformStart', CHAN_VOICE);
	}
	return rtn;
}

//==========================================================================
//
//  EV_StopPlat
//
//==========================================================================

int EV_StopPlat(line_t * line, int *args)
{
	Platform Plat;

	FOREACH(Platform, Plat)
	{
#if 1
		if ((Plat.status != PLAT_IN_STASIS) && (Plat.tag == args[0]))
		{
			Plat.oldstatus = Plat.status;
			Plat.status = PLAT_IN_STASIS;
		}
#else
		// Hexen behavior
		if (Plat.tag = args[0])
		{
			Plat.sector->SpecialData = none;
			TagFinished(Plat.sector->tag);
			RemoveSpecialThinker(Plat);
			return;
		}
#endif
	}
	return 1;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/10/26 16:32:24  dj_jl
//  New style of defining classes.
//
//  Revision 1.13  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.12  2002/04/11 16:48:10  dj_jl
//  New base classes for sector thinkers, Tick function.
//
//  Revision 1.11  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.10  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.9  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/18 18:29:22  dj_jl
//  Added Hexen action specials
//
//  Revision 1.6  2001/09/25 17:13:50  dj_jl
//  Beautification
//
//  Revision 1.5  2001/09/24 17:16:18  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
