//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	MinotaurMissile
//
//**************************************************************************

class MinotaurMissile:Projectile
{

__states__
{
	S_MNTRFX1_1('FX12', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_MNTRFX1_2) { }
	S_MNTRFX1_2('FX12', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_MNTRFX1_1) { }
	S_MNTRFXI1_1('FX12', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_MNTRFXI1_2) { }
	S_MNTRFXI1_2('FX12', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_MNTRFXI1_3) { }
	S_MNTRFXI1_3('FX12', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_MNTRFXI1_4) { }
	S_MNTRFXI1_4('FX12', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_MNTRFXI1_5) { }
	S_MNTRFXI1_5('FX12', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_MNTRFXI1_6) { }
	S_MNTRFXI1_6('FX12', 7 | FF_FULLBRIGHT, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 6.0;
	Speed = 700.0;
	MissileDamage = 3;
	bFireDamage = true;
	IdleState = S_MNTRFX1_1;
	DeathState = S_MNTRFXI1_1;
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	MinotaurFloorFire2
//
//**************************************************************************

class MinotaurFloorFire2:Projectile
{

__states__
{
	S_MNTRFXI2_1('FX13', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_MNTRFXI2_2) { A_Explode(); }
	S_MNTRFXI2_2('FX13', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_MNTRFXI2_3) { }
	S_MNTRFXI2_3('FX13', 10 | FF_FULLBRIGHT, 4.0 / 35.0, S_MNTRFXI2_4) { }
	S_MNTRFXI2_4('FX13', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_MNTRFXI2_5) { }
	S_MNTRFXI2_5('FX13', 12 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
	S_MNTRFX3_1('FX13', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_MNTRFX3_2) { }
	S_MNTRFX3_2('FX13', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_MNTRFX3_3) { }
	S_MNTRFX3_3('FX13', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_MNTRFX3_4) { }
	S_MNTRFX3_4('FX13', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_MNTRFX3_5) { }
	S_MNTRFX3_5('FX13', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_MNTRFX3_6) { }
	S_MNTRFX3_6('FX13', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_MNTRFX3_7) { }
	S_MNTRFX3_7('FX13', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_MNTRFX3_8) { }
	S_MNTRFX3_8('FX13', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_MNTRFX3_9) { }
	S_MNTRFX3_9('FX13', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 8.0;
	Height = 16.0;
	MissileDamage = 4;
	bFireDamage = true;
	IdleState = S_MNTRFX3_1;
	DeathState = S_MNTRFXI2_1;
	DeathSound = 'PhoenixHit';
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	MinotaurFloorFire
//
//**************************************************************************

class MinotaurFloorFire:Projectile
{

//==========================================================================
//
//  A_MntrFloorFire
//
//==========================================================================

void A_MntrFloorFire(void)
{
	Actor mo;
	float i1;
	float i2;

	Origin.z = FloorZ;
	i1 = Origin.x + (Random() - Random()) * 4.0;
	i2 = Origin.y + (Random() - Random()) * 4.0;
	mo = Spawn(MinotaurFloorFire2, vector(i1, i2, ONFLOORZ));
	mo.Instigator = Instigator;
	mo.Velocity.x = 0.00001;	// Force block checking
	mo.CheckMissileSpawn();
}

__states__
{
	S_MNTRFX2_1('FX13', 0, 2.0 / 35.0, S_MNTRFX2_1) { A_MntrFloorFire(); }
}

defaultproperties
{
	Radius = 5.0;
	Height = 12.0;
	Speed = 490.0;
	MissileDamage = 4;
	bFireDamage = true;
	IdleState = S_MNTRFX2_1;
	DeathState = S_MNTRFXI2_1;
	DeathSound = 'PhoenixHit';
	Effects = EF_DL_WHITE;
	// The Minotaur floor fire can step up any amount
	MaxStepHeight = 99999.0;
}

}

//**************************************************************************
//
//	Minotaur
//
//**************************************************************************

class Minotaur:Pawn
	__mobjinfo__(9)
{

#define MNTR_CHARGE_SPEED	455.0

bool bFloorFireRefired;

int ChargeAttackState;
int FloorFireAttackState;
int FloorFireAttackState2;

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff(void)
{
	DropItem(ArtifactSuperHeal, 0, 0.19921875);
	DropItem(ItemAmmoPhoenixWimpy, 10, 0.328125);
}

//==========================================================================
//
//  A_MinotaurAtk1
//
//  Melee attack.
//
//==========================================================================

void A_MinotaurAtk1(void)
{
	if (!Enemy)
	{
		return;
	}
	PlaySound('StaffHit2', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(4));
		if (Enemy.bIsPlayer)
		{
			// Squish the player
			Enemy.Player->DeltaViewHeight = -16.0;
		}
	}
}

//==========================================================================
//
//  A_MinotaurDecide
//
//  Choose a missile attack.
//
//==========================================================================

void A_MinotaurDecide(void)
{
	float dist;

	if (!Enemy)
	{
		return;
	}
	PlaySound('MinotaurSight', CHAN_VOICE);
	dist = MobjDist(self, Enemy);
	if (Enemy.Origin.z + Enemy.Height > Origin.z &&
		Enemy.Origin.z + Enemy.Height < Origin.z + Height &&
		dist < 8.0 * 64.0 && dist > 1.0 * 64.0 && P_Random() < 150)
	{
		// Charge attack
		// Don't call the state function right away
		SetState(ChargeAttackState);
		bSkullFly = true;
		A_FaceTarget();
		Velocity = Normalize(Enemy.Origin - Origin) * MNTR_CHARGE_SPEED;
		Special1 = 35 / 2;	// Charge duration
	}
	else if (Enemy.Origin.z == Enemy.FloorZ &&
		dist < 9.0 * 64.0 && P_Random() < 220)
	{
		// Floor fire attack
		SetState(FloorFireAttackState);
		bFloorFireRefired = false;
	}
	else
	{
		// Swing attack
		A_FaceTarget();
		// Don't need to call SetState because the current state
		// falls through to the swing attack
	}
}

//==========================================================================
//
//  A_MinotaurAtk2
//
//  Swing attack.
//
//==========================================================================

void A_MinotaurAtk2(void)
{
	Actor A;
	float angle;
	TAVec ang;

	if (!Enemy)
	{
		return;
	}
	PlaySound('MinotaurAttack2', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(5));
		return;
	}
	A = SpawnMissile(Enemy, MinotaurMissile);
	if (A)
	{
		A.PlaySound('MinotaurAttack2', CHAN_WEAPON);
		VectorAngles(&A.Velocity, &ang);
		angle = A.Angles.yaw;
		SpawnMissileAngles(MinotaurMissile,
			AngleMod360(angle - (45.0 / 8.0)), ang.pitch);
		SpawnMissileAngles(MinotaurMissile,
			AngleMod360(angle + (45.0 / 8.0)), ang.pitch);
		SpawnMissileAngles(MinotaurMissile,
			AngleMod360(angle - (45.0 / 16.0)), ang.pitch);
		SpawnMissileAngles(MinotaurMissile,
			AngleMod360(angle + (45.0 / 16.0)), ang.pitch);
	}
}

//==========================================================================
//
//  A_MinotaurAtk3
//
//  Floor fire attack.
//
//==========================================================================

void A_MinotaurAtk3(void)
{
	Actor A;

	if (!Enemy)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(5));
		if (Enemy.Player)
		{
			// Squish the player
			Enemy.Player->DeltaViewHeight = -16.0;
		}
	}
	else
	{
		A = SpawnMissile(Enemy, MinotaurFloorFire);
		if (A != none)
		{
			A.PlaySound('MinotaurAttack1', CHAN_VOICE);
		}
	}
	if (Random() < 0.75 && !bFloorFireRefired)
	{
		SetState(FloorFireAttackState2);
		bFloorFireRefired = true;
	}
}

//==========================================================================
//
//  A_MinotaurCharge
//
//==========================================================================

void A_MinotaurCharge(void)
{
	Actor puff;

	if (Special1)
	{
		puff = Spawn(PhoenixPuff, Origin);
		puff.Velocity.z = 2.0 * 35.0;
		Special1--;
	}
	else
	{
		bSkullFly = false;
		SetState(SeeState);
	}
}

__states__
{
	S_MNTR_LOOK1('MNTR', 0, 'monsters/minotaur.md2', 0, 2.5 / 35.0, S_MNTR_LOOK2) { A_Look(); }
	S_MNTR_LOOK2('MNTR', 0, 'monsters/minotaur.md2', 1, 2.5 / 35.0, S_MNTR_LOOK3) { }
	S_MNTR_LOOK3('MNTR', 0, 'monsters/minotaur.md2', 2, 2.5 / 35.0, S_MNTR_LOOK4) { }
	S_MNTR_LOOK4('MNTR', 0, 'monsters/minotaur.md2', 3, 2.5 / 35.0, S_MNTR_LOOK5) { }
	S_MNTR_LOOK5('MNTR', 1, 'monsters/minotaur.md2', 4, 2.5 / 35.0, S_MNTR_LOOK6) { A_Look(); }
	S_MNTR_LOOK6('MNTR', 1, 'monsters/minotaur.md2', 5, 2.5 / 35.0, S_MNTR_LOOK7) { }
	S_MNTR_LOOK7('MNTR', 1, 'monsters/minotaur.md2', 6, 2.5 / 35.0, S_MNTR_LOOK8) { }
	S_MNTR_LOOK8('MNTR', 1, 'monsters/minotaur.md2', 7, 2.5 / 35.0, S_MNTR_LOOK1) { }
	S_MNTR_WALK1('MNTR', 0, 'monsters/minotaur.md2', 8, 2.5 / 35.0, S_MNTR_WALK2) { A_Chase(); }
	S_MNTR_WALK2('MNTR', 0, 'monsters/minotaur.md2', 9, 2.5 / 35.0, S_MNTR_WALK3) { }
	S_MNTR_WALK3('MNTR', 1, 'monsters/minotaur.md2', 10, 2.5 / 35.0, S_MNTR_WALK4) { A_Chase(); }
	S_MNTR_WALK4('MNTR', 1, 'monsters/minotaur.md2', 11, 2.5 / 35.0, S_MNTR_WALK5) { }
	S_MNTR_WALK5('MNTR', 2, 'monsters/minotaur.md2', 12, 2.5 / 35.0, S_MNTR_WALK6) { A_Chase(); }
	S_MNTR_WALK6('MNTR', 2, 'monsters/minotaur.md2', 13, 2.5 / 35.0, S_MNTR_WALK7) { }
	S_MNTR_WALK7('MNTR', 3, 'monsters/minotaur.md2', 14, 2.5 / 35.0, S_MNTR_WALK8) { A_Chase(); }
	S_MNTR_WALK8('MNTR', 3, 'monsters/minotaur.md2', 15, 2.5 / 35.0, S_MNTR_WALK9) { }
	S_MNTR_WALK9('MNTR', 0, 'monsters/minotaur.md2', 16, 2.5 / 35.0, S_MNTR_WALK10) { A_Chase(); }
	S_MNTR_WALK10('MNTR', 0, 'monsters/minotaur.md2', 17, 2.5 / 35.0, S_MNTR_WALK11) { }
	S_MNTR_WALK11('MNTR', 1, 'monsters/minotaur.md2', 18, 2.5 / 35.0, S_MNTR_WALK12) { A_Chase(); }
	S_MNTR_WALK12('MNTR', 1, 'monsters/minotaur.md2', 19, 2.5 / 35.0, S_MNTR_WALK13) { }
	S_MNTR_WALK13('MNTR', 2, 'monsters/minotaur.md2', 20, 2.5 / 35.0, S_MNTR_WALK14) { A_Chase(); }
	S_MNTR_WALK14('MNTR', 2, 'monsters/minotaur.md2', 21, 2.5 / 35.0, S_MNTR_WALK15) { }
	S_MNTR_WALK15('MNTR', 3, 'monsters/minotaur.md2', 22, 2.5 / 35.0, S_MNTR_WALK16) { A_Chase(); }
	S_MNTR_WALK16('MNTR', 3, 'monsters/minotaur.md2', 23, 2.5 / 35.0, S_MNTR_WALK1) { }
	S_MNTR_ATK1_1('MNTR', 21, 'monsters/minotaur.md2', 24, 4.0 / 35.0, S_MNTR_ATK1_2) { A_FaceTarget(); }
	S_MNTR_ATK1_2('MNTR', 21, 'monsters/minotaur.md2', 25, 3.0 / 35.0, S_MNTR_ATK1_3) { }
	S_MNTR_ATK1_3('MNTR', 21, 'monsters/minotaur.md2', 26, 3.0 / 35.0, S_MNTR_ATK1_4) { }
	S_MNTR_ATK1_4('MNTR', 22, 'monsters/minotaur.md2', 27, 3.0 / 35.0, S_MNTR_ATK1_5) { A_FaceTarget(); }
	S_MNTR_ATK1_5('MNTR', 22, 'monsters/minotaur.md2', 28, 4.0 / 35.0, S_MNTR_ATK1_6) { }
	S_MNTR_ATK1_6('MNTR', 23, 'monsters/minotaur.md2', 29, 4.0 / 35.0, S_MNTR_ATK1_7) { A_MinotaurAtk1(); }
	S_MNTR_ATK1_7('MNTR', 23, 'monsters/minotaur.md2', 30, 4.0 / 35.0, S_MNTR_ATK1_8) { }
	S_MNTR_ATK1_8('MNTR', 23, 'monsters/minotaur.md2', 31, 4.0 / 35.0, S_MNTR_WALK1) { }
	S_MNTR_ATK2_1('MNTR', 21, 'monsters/minotaur.md2', 32, 4.0 / 35.0, S_MNTR_ATK2_2) { A_MinotaurDecide(); }
	S_MNTR_ATK2_2('MNTR', 21, 'monsters/minotaur.md2', 33, 3.0 / 35.0, S_MNTR_ATK2_3) { }
	S_MNTR_ATK2_3('MNTR', 21, 'monsters/minotaur.md2', 34, 3.0 / 35.0, S_MNTR_ATK2_4) { }
	S_MNTR_ATK2_4('MNTR', 24, 'monsters/minotaur.md2', 35, 2.0 / 35.0, S_MNTR_ATK2_5) { A_FaceTarget(); }
	S_MNTR_ATK2_5('MNTR', 24, 'monsters/minotaur.md2', 36, 2.0 / 35.0, S_MNTR_ATK2_6) { }
	S_MNTR_ATK2_6('MNTR', 25, 'monsters/minotaur.md2', 37, 3.0 / 35.0, S_MNTR_ATK2_7) { A_MinotaurAtk2(); }
	S_MNTR_ATK2_7('MNTR', 25, 'monsters/minotaur.md2', 38, 3.0 / 35.0, S_MNTR_ATK2_8) { }
	S_MNTR_ATK2_8('MNTR', 25, 'monsters/minotaur.md2', 39, 3.0 / 35.0, S_MNTR_WALK1) { }
	S_MNTR_ATK3_1('MNTR', 21, 'monsters/minotaur.md2', 24, 4.0 / 35.0, S_MNTR_ATK3_2) { A_FaceTarget(); }
	S_MNTR_ATK3_2('MNTR', 21, 'monsters/minotaur.md2', 25, 3.0 / 35.0, S_MNTR_ATK3_3) { }
	S_MNTR_ATK3_3('MNTR', 21, 'monsters/minotaur.md2', 26, 3.0 / 35.0, S_MNTR_ATK3_4) { }
	S_MNTR_ATK3_4('MNTR', 22, 'monsters/minotaur.md2', 27, 3.0 / 35.0, S_MNTR_ATK3_5) { A_FaceTarget(); }
	S_MNTR_ATK3_5('MNTR', 22, 'monsters/minotaur.md2', 28, 4.0 / 35.0, S_MNTR_ATK3_6) { }
	S_MNTR_ATK3_6('MNTR', 23, 'monsters/minotaur.md2', 29, 4.0 / 35.0, S_MNTR_ATK3_7) { A_MinotaurAtk3(); }
	S_MNTR_ATK3_7('MNTR', 23, 'monsters/minotaur.md2', 30, 4.0 / 35.0, S_MNTR_ATK3_8) { }
	S_MNTR_ATK3_8('MNTR', 23, 'monsters/minotaur.md2', 31, 4.0 / 35.0, S_MNTR_WALK1) { }
	S_MNTR_ATK3_9('MNTR', 23, 'monsters/minotaur.md2', 29, 4.0 / 35.0, S_MNTR_ATK3_10) { }
	S_MNTR_ATK3_10('MNTR', 23, 'monsters/minotaur.md2', 30, 4.0 / 35.0, S_MNTR_ATK3_11) { }
	S_MNTR_ATK3_11('MNTR', 23, 'monsters/minotaur.md2', 31, 4.0 / 35.0, S_MNTR_ATK3_1) { }
	S_MNTR_ATK4_1('MNTR', 20, 'monsters/minotaur.md2', 40, 2.0 / 35.0, S_MNTR_ATK4_2) { }
	S_MNTR_ATK4_2('MNTR', 20, 'monsters/minotaur.md2', 40, 2.0 / 35.0, S_MNTR_ATK4_2) { A_MinotaurCharge(); }
	S_MNTR_PAIN1('MNTR', 4, 'monsters/minotaur.md2', 41, 3.0 / 35.0, S_MNTR_PAIN2) { }
	S_MNTR_PAIN2('MNTR', 4, 'monsters/minotaur.md2', 41, 6.0 / 35.0, S_MNTR_WALK1) { A_Pain(); }
	S_MNTR_DIE1('MNTR', 5, 'monsters/minotaur.md2', 42, 6.0 / 35.0, S_MNTR_DIE2) { }
	S_MNTR_DIE2('MNTR', 6, 'monsters/minotaur.md2', 43, 5.0 / 35.0, S_MNTR_DIE3) { }
	S_MNTR_DIE3('MNTR', 7, 'monsters/minotaur.md2', 44, 6.0 / 35.0, S_MNTR_DIE4) { A_Scream(); }
	S_MNTR_DIE4('MNTR', 8, 'monsters/minotaur.md2', 45, 5.0 / 35.0, S_MNTR_DIE5) { }
	S_MNTR_DIE5('MNTR', 9, 'monsters/minotaur.md2', 46, 6.0 / 35.0, S_MNTR_DIE6) { }
	S_MNTR_DIE6('MNTR', 10, 'monsters/minotaur.md2', 47, 5.0 / 35.0, S_MNTR_DIE7) { }
	S_MNTR_DIE7('MNTR', 11, 'monsters/minotaur.md2', 48, 6.0 / 35.0, S_MNTR_DIE8) { }
	S_MNTR_DIE8('MNTR', 12, 'monsters/minotaur.md2', 49, 5.0 / 35.0, S_MNTR_DIE9) { A_NoBlocking(); }
	S_MNTR_DIE9('MNTR', 13, 'monsters/minotaur.md2', 50, 6.0 / 35.0, S_MNTR_DIE10) { }
	S_MNTR_DIE10('MNTR', 14, 'monsters/minotaur.md2', 51, 5.0 / 35.0, S_MNTR_DIE11) { }
	S_MNTR_DIE11('MNTR', 15, 'monsters/minotaur.md2', 52, 6.0 / 35.0, S_MNTR_DIE12) { }
	S_MNTR_DIE12('MNTR', 16, 'monsters/minotaur.md2', 53, 5.0 / 35.0, S_MNTR_DIE13) { }
	S_MNTR_DIE13('MNTR', 17, 'monsters/minotaur.md2', 54, 6.0 / 35.0, S_MNTR_DIE14) { }
	S_MNTR_DIE14('MNTR', 18, 'monsters/minotaur.md2', 55, 5.0 / 35.0, S_MNTR_DIE15) { }
	S_MNTR_DIE15('MNTR', 19, 'monsters/minotaur.md2', 56, 5.0 / 35.0, S_MNTR_DIE16) { }
	S_MNTR_DIE16('MNTR', 19, 'monsters/minotaur.md2', 57, -1.0, S_NULL) { A_BossDeath(); }
}

defaultproperties
{
	Health = 3000;
	Radius = 28.0;
	Height = 100.0;
	Mass = 800.0;
	StepSpeed = 16.0;
	PainChance = 0.09765625;
	MissileDamage = 7;
	bDropOff = true;
	bBoss = true;
	IdleState = S_MNTR_LOOK1;
	SeeState = S_MNTR_WALK1;
	MeleeState = S_MNTR_ATK1_1;
	MissileState = S_MNTR_ATK2_1;
	ChargeAttackState = S_MNTR_ATK4_1;
	FloorFireAttackState = S_MNTR_ATK3_1;
	FloorFireAttackState2 = S_MNTR_ATK3_9;
	PainState = S_MNTR_PAIN1;
	DeathState = S_MNTR_DIE1;
	SightSound = 'MinotaurSight';
	ActiveSound = 'MinotaurActive';
	AttackSound = 'MinotaurAttack1';
	PainSound = 'MinotaurPain';
	DeathSound = 'MinotaurDeath';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.27  2002/07/13 07:58:51  dj_jl
//  Added new models, updated existing ones.
//
//  Revision 1.26  2002/06/22 07:16:00  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.25  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.24  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.23  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.22  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.21  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.20  2002/02/22 18:00:16  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.19  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.16  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.15  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.14  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.10  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.8  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
