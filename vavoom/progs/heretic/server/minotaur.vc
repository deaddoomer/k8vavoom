//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define MNTR_CHARGE_SPEED	455.0

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::A_MinotaurAtk1
//
//  Melee attack.
//
//==========================================================================

void Actor::A_MinotaurAtk1(void)
{
	if (!Target)
	{
		return;
	}
	PlaySound('StaffHit2', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
		if (Target.bIsPlayer)
		{
			// Squish the player
			Target.Player->DeltaViewHeight = -16.0;
		}
	}
}

//==========================================================================
//
//  Actor::A_MinotaurDecide
//
//  Choose a missile attack.
//
//==========================================================================

void Actor::A_MinotaurDecide(void)
{
	float dist;

	if (!Target)
	{
		return;
	}
	PlaySound('MinotaurSight', CHAN_VOICE);
	dist = MobjDist(self, Target);
	if (Target.Origin.z + Target.Height > Origin.z &&
		Target.Origin.z + Target.Height < Origin.z + Height &&
		dist < 8.0 * 64.0 && dist > 1.0 * 64.0 && P_Random() < 150)
	{
		// Charge attack
		// Don't call the state function right away
		SetStateNF(S_MNTR_ATK4_1);
		bSkullFly = true;
		A_FaceTarget();
		Velocity = Normalize(Target.Origin - Origin) * MNTR_CHARGE_SPEED;
		Special1 = 35 / 2;	// Charge duration
	}
	else if (Target.Origin.z == Target.FloorZ &&
		dist < 9.0 * 64.0 && P_Random() < 220)
	{
		// Floor fire attack
		SetState(S_MNTR_ATK3_1);
		Special2 = 0;
	}
	else
	{
		// Swing attack
		A_FaceTarget();
		// Don't need to call SetState because the current state
		// falls through to the swing attack
	}
}

//==========================================================================
//
//  Actor::A_MinotaurAtk2
//
//  Swing attack.
//
//==========================================================================

void Actor::A_MinotaurAtk2(void)
{
	mobj_t *mo;
	float angle;
	TAVec ang;

	if (!Target)
	{
		return;
	}
	PlaySound('MinotaurAttack2', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(5));
		return;
	}
	mo = SpawnMissile(this, &Target, MinotaurMissile);
	if (mo)
	{
		mo->PlaySound('MinotaurAttack2', CHAN_WEAPON);
		VectorAngles(&mo->Velocity, &ang);
		angle = mo->Angles.yaw;
		SpawnMissileAngles(this, MinotaurMissile,
			AngleMod360(angle - (45.0 / 8.0)), ang.pitch);
		SpawnMissileAngles(this, MinotaurMissile,
			AngleMod360(angle + (45.0 / 8.0)), ang.pitch);
		SpawnMissileAngles(this, MinotaurMissile,
			AngleMod360(angle - (45.0 / 16.0)), ang.pitch);
		SpawnMissileAngles(this, MinotaurMissile,
			AngleMod360(angle + (45.0 / 16.0)), ang.pitch);
	}
}

//==========================================================================
//
//  Actor::A_MinotaurAtk3
//
//  Floor fire attack.
//
//==========================================================================

void Actor::A_MinotaurAtk3(void)
{
	mobj_t *mo;

	if (!Target)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(5));
		if (Target.Player)
		{
			// Squish the player
			Target.Player->DeltaViewHeight = -16.0;
		}
	}
	else
	{
		mo = SpawnMissile(this, &Target, MinotaurFloorFire);
		if (mo != NULL)
		{
			mo->PlaySound('MinotaurAttack1', CHAN_VOICE);
		}
	}
	if (P_Random() < 192 && Special2 == 0)
	{
		SetState(S_MNTR_ATK3_4);
		Special2 = 1;
	}
}

//==========================================================================
//
//  Actor::A_MinotaurCharge
//
//==========================================================================

void Actor::A_MinotaurCharge(void)
{
	Actor puff;

	if (Special1)
	{
		puff = SpawnActor(Origin, PhoenixPuff);
		puff.Velocity.z = 2.0 * 35.0;
		Special1--;
	}
	else
	{
		bSkullFly = false;
		SetState(SeeState);
	}
}

//==========================================================================
//
//  Actor::A_MntrFloorFire
//
//==========================================================================

void Actor::A_MntrFloorFire(void)
{
	Actor mo;
	float i1;
	float i2;

	Origin.z = FloorZ;
	i1 = Origin.x + (Random() - Random()) * 4.0;
	i2 = Origin.y + (Random() - Random()) * 4.0;
	mo = SpawnActor(vector(i1, i2, ONFLOORZ), MinotaurFloorFire2);
	mo.Owner = Owner;
	mo.Velocity.x = 0.00001;	// Force block checking
	CheckMissileSpawn(&mo);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.22  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.21  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.20  2002/02/22 18:00:16  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.19  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.16  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.15  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.14  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.10  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.8  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
