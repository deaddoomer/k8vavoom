//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

float teleport_bbox[4];
mobj_t *teleport_thing;
float teleport_x;
float teleport_y;

//==========================================================================
//
//  PIT_StompThing
//
//==========================================================================

boolean PIT_StompThing(mobj_t * thing)
{
	float blockdist;

	if (!(thing->Flags & MF_SHOOTABLE))
	{
		return true;
	}

	blockdist = thing->Radius + teleport_thing->Radius;

	if (fabs(thing->origin.x - teleport_x) >= blockdist
		|| fabs(thing->origin.y - teleport_y) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (thing == teleport_thing)
	{
		return true;
	}

	//  Check if allowed to stomp things
	if (!(teleport_thing->Flags2 & MF2_TELESTOMP))
	{
		return false;
	}

	thing->Damage(teleport_thing, teleport_thing, 10000);

	return true;
}

//==========================================================================
//
//  P_TeleportMove
//
//==========================================================================

boolean P_TeleportMove(mobj_t * thing, float x, float y)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;

	// kill anything occupying the position
	teleport_thing = thing;

	teleport_x = x;
	teleport_y = y;

	// stomp on any things contacted
	xl = MapBlock(x - thing->Radius - level->bmaporgx - MAXRADIUS);
	xh = MapBlock(x + thing->Radius - level->bmaporgx + MAXRADIUS);
	yl = MapBlock(y - thing->Radius - level->bmaporgy - MAXRADIUS);
	yh = MapBlock(y + thing->Radius - level->bmaporgy + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockThingsIterator(bx, by, PIT_StompThing))
				return false;

	// the move is ok,
	// so link the thing into its new position
	P_UnsetThingPosition(thing);

	thing->origin.x = x;
	thing->origin.y = y;

	P_SetThingPosition(thing);

	return true;
}

//==========================================================================
//
//  P_Teleport
//
//==========================================================================

boolean P_Teleport(mobj_t * thing, float x, float y, float angle)
{
	float oldx;
	float oldy;
	float oldz;
	float aboveFloor;
	float fogDelta;
	player_t *player;
	mobj_t *fog;

	oldx = thing->origin.x;
	oldy = thing->origin.y;
	oldz = thing->origin.z;
	aboveFloor = thing->origin.z - thing->floorz;
	if (!P_TeleportMove(thing, x, y))
	{
		return false;
	}
	if (thing->player)
	{
		player = thing->player;
		if (player->powers[pw_flight] && aboveFloor)
		{
			thing->origin.z = thing->floorz + aboveFloor;
			if (thing->origin.z + thing->Height > thing->ceilingz)
			{
				thing->origin.z = thing->ceilingz - thing->Height;
			}
			player->vieworg.z = thing->origin.z + player->viewheight;
		}
		else
		{
			thing->origin.z = thing->floorz;
			player->vieworg.z = thing->origin.z + player->viewheight;
			thing->angles.pitch = 0.0;
		}
		player->fixangle = true;
	}
	else if (thing->Flags & MF_MISSILE)
	{
		thing->origin.z = thing->floorz + aboveFloor;
		if (thing->origin.z + thing->Height > thing->ceilingz)
		{
			thing->origin.z = thing->ceilingz - thing->Height;
		}
	}
	else
	{
		thing->origin.z = thing->floorz;
	}
	// Spawn teleport fog at source and destination
	fogDelta = thing->Flags & MF_MISSILE ? 0.0 : TELEFOGHEIGHT;
	fog = P_SpawnMobj(oldx, oldy, oldz + fogDelta, TeleportFog);
	StartSoundName(fog, 'Teleport', CHAN_VOICE);
	fog = P_SpawnMobj(x + 20.0 * cos(angle),
		y + 20.0 * sin(angle), thing->origin.z + fogDelta, TeleportFog);
	StartSoundName(fog, 'Teleport', CHAN_VOICE);
	if (thing->player && !thing->player->powers[pw_weaponlevel2])
	{
		// Freeze player for about .5 sec
		thing->ReactionTime = 0.5;
	}
	thing->angles.yaw = angle;
	if (thing->Flags2 & MF2_FOOTCLIP &&
		P_GetThingFloorType(thing) != FLOOR_SOLID)
	{
		thing->floorclip = FOOTCLIPSIZE;
	}
	else
	{
		thing->floorclip = 0.0;
	}
	if (thing->Flags & MF_MISSILE)
	{
		thing->velocity.x = thing->Speed * cos(angle);
		thing->velocity.y = thing->Speed * sin(angle);
	}
	else
	{
		thing->velocity.x = thing->velocity.y = thing->velocity.z = 0.0;
	}
	return (true);
}

//==========================================================================
//
//  EV_Teleport
//
//==========================================================================

boolean EV_Teleport(int tag, mobj_t * thing, boolean usefog)
{
	int i;
	mobj_t *m;

	if (thing->Flags2 & MF2_NOTELEPORT)
	{
		return false;
	}
	for (m = NextMobj(NULL); m; m = NextMobj(m))
	{
		if (m->Class != TeleportSpot)
		{
			// Not a teleportman
			continue;
		}
		if (m->tid != tag)
		{
			// Wrong sector
			continue;
		}
		return P_Teleport(thing, m->origin.x, m->origin.y, m->angles.yaw);
	}
	return false;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.11  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
