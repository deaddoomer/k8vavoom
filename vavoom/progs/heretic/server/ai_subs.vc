//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

int opposite[] = {
	DI_WEST, DI_SOUTHWEST, DI_SOUTH, DI_SOUTHEAST, DI_EAST, DI_NORTHEAST,
	DI_NORTH, DI_NORTHWEST, DI_NODIR
};

int diags[] = { DI_NORTHWEST, DI_NORTHEAST, DI_SOUTHWEST, DI_SOUTHEAST };

float xspeed[8] =
	{ 1.0, 0.7171630859, 0.0, -0.7171630859, -1.0, -0.7171630859, 0.0,
		0.7171630859 };
float yspeed[8] =
	{ 0.0, 0.7171630859, 1.0, 0.7171630859, 0.0, -0.7171630859, -1.0,
		-0.7171630859 };

//==========================================================================
//
//  Actor::CheckMeleeRange
//
//==========================================================================

boolean Actor::CheckMeleeRange(void)
{
	float dist;

	if (!Enemy)
	{
		return false;
	}
	dist = MobjDist(Enemy, self);
	if (dist >= MELEERANGE)
	{
		return false;
	}
	if (!CanSee(Enemy))
	{
		return false;
	}
	return true;
}

//==========================================================================
//
//  Actor::CheckMissileRange
//
//==========================================================================

boolean Actor::CheckMissileRange(void)
{
	float dist;

	if (!CanSee(Enemy))
	{
		return false;
	}
	if (bJustHit)
	{
		// The target just hit the enemy, so fight back!
		bJustHit = false;
		return true;
	}
	if (ReactionCount)
	{
		// Don't attack yet
		return false;
	}
	dist = MobjDist(self, Enemy) - 64.0;
	if (!MeleeState)
	{
		// No melee attack, so fire more frequently
		dist -= 128.0;
	}
	if (Class == Imp)
	{
		// Imp's fly attack from far away
		dist /= 2.0;
	}
	if (dist > 200.0)
	{
		dist = 200.0;
	}
	if (Random() * 256.0 < dist)
	{
		return false;
	}
	return true;
}

//==========================================================================
//
//  P_Massacre
//
//  Kills all monsters.
//
//==========================================================================

void P_Massacre(void)
{
	Actor mo;

	FOREACH(Actor, mo)
	{
		if (mo.bCountKill && mo.Health > 0)
		{
			mo.Damage(none, none, 10000);
		}
	}
}

//==========================================================================
//
//  Actor::LookForMonsters
//
//==========================================================================

#define MONS_LOOK_RANGE (20.0 * 64.0)
#define MONS_LOOK_LIMIT 64

boolean Actor::LookForMonsters(void)
{
	int count;
	Actor mo;

	if (!players[0].MO.CanSee(self))
	{
		// Player can't see monster
		return false;
	}
	count = 0;
	FOREACH(Actor, mo)
	{
		if (!mo.bCountKill || (mo == self) || (mo.Health <= 0))
		{
			// Not a valid monster
			continue;
		}
		if (MobjDist(self, mo) > MONS_LOOK_RANGE)
		{
			// Out of range
			continue;
		}
		if (P_Random() < 16)
		{
			// Skip
			continue;
		}
		if (count++ > MONS_LOOK_LIMIT)
		{
			// Stop searching
			return (false);
		}
		if (!CanSee(mo))
		{
			// Out of sight
			continue;
		}
		// Found a target monster
		Enemy = mo;
		return true;
	}
	return false;
}

//==========================================================================
//
//  Actor::LookForPlayers
//
//  If allaround is false, only look 180 degrees in front
//  returns true if a player is targeted
//
//==========================================================================

boolean Actor::LookForPlayers(boolean allaround)
{
	int c;
	int stop;
	player_t *P;
	float an;
	float dist;

	if (!netgame && players[0].bSpawned && players[0].Health <= 0)
	{
		// Single player game and player is dead, look for monsters
		return LookForMonsters();
	}
	c = 0;
	stop = (LastLook - 1) & 3;
	for (;; LastLook = (LastLook + 1) & (MAXPLAYERS - 1))
	{
		if (LastLook == stop)
			return false;	// done looking

		if (!players[LastLook].bActive)
			continue;

		if (c++ == 2)
			return false;	// done looking

		P = &players[LastLook];
		if (!P->bSpawned || !P->MO)
			continue;	// not spawned yet
		if (P->Health <= 0)
			continue;	// dead
		if (!CanSee(P->MO))
			continue;	// out of sight

		if (!allaround)
		{
			an = AngleMod360(atan2(P->MO.Origin.y - Origin.y,
				P->MO.Origin.x - Origin.x) - Angles.yaw);
			if (an > 90.0 && an < 270.0)
			{
				dist = MobjDist(P->MO, self);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}
		if (P->MO.Translucency)
		{
			// Player is invisible
			if ((MobjDist(P->MO, self) > 2.0 * MELEERANGE) &&
				Length(P->MO.Velocity) < 5.0 * 35.0)
			{
				// Player is sneaking - can't detect
				return false;
			}
			if (P_Random() < 225)
			{
				// Player isn't sneaking, but still didn't detect
				return false;
			}
		}
		Enemy = P->MO;
		return true;
	}
	return false;
}

//==========================================================================
//
//  Actor::StepMove
//
//  Move in the current direction, returns false if the move is blocked.
//
//==========================================================================

boolean Actor::StepMove(void)
{
	float tryx;
	float tryy;

	line_t *ld;
	boolean good;

	if (MoveDir == DI_NODIR)
		return false;

#ifdef RANGECHECK
	if (MoveDir >= 8 || MoveDir < 0)
		Error("Weird MoveDir!");
#endif

	tryx = Origin.x + StepSpeed * xspeed[MoveDir];
	tryy = Origin.y + StepSpeed * yspeed[MoveDir];

	if (!TryMove(vector(tryx, tryy, Origin.z)))
	{
		// open any specials
		if (bFloat && tmtrace->FloatOk)
		{
			// must adjust height
			if (Origin.z < tmtrace->FloorZ)
				Origin.z += FLOATSPEED * frametime;
			else
				Origin.z -= FLOATSPEED * frametime;

			bInFloat = true;
			return true;
		}

		if (!tmtrace->NumSpecHit)
			return false;

		MoveDir = DI_NODIR;
		good = false;
		while (tmtrace->NumSpecHit--)
		{
			ld = tmtrace->SpecHit[tmtrace->NumSpecHit];
			// if the special is not a door
			// that can be opened,
			// return false
			if (P_ActivateLine(ld, self, 0, SPAC_USE))
			{
				good = true;
			}
		}
		return good;
	}
	else
	{
		bInFloat = false;
	}

	if (!bFloat)
	{
		if (Origin.z > FloorZ)
		{
			HitFloorEffect();
		}
		Origin.z = FloorZ;
	}
	return true;
}

//==========================================================================
//
//  Actor::TryWalk
//
//  Attempts to move actor in its current (ob->moveangle) direction.
//  If blocked by either a wall or an actor returns FALSE.
//  If move is either clear of block only by a door, returns TRUE and sets.
//  If a door is in the way, an OpenDoor call is made to start it opening.
//
//==========================================================================

boolean Actor::TryWalk(void)
{
	if (!StepMove())
	{
		return false;
	}
	MoveCount = P_Random() & 15;
	return true;
}

//==========================================================================
//
//  Actor::NewChaseDir
//
//==========================================================================

void Actor::NewChaseDir(void)
{
	float deltax, deltay;
	int d[3];
	int tdir, olddir, turnaround;

	if (!Enemy)
		Error("NewChaseDir: called with no Enemy");

	olddir = MoveDir;
	turnaround = opposite[olddir];

	deltax = Enemy.Origin.x - Origin.x;
	deltay = Enemy.Origin.y - Origin.y;
	if (deltax > 10.0)
		d[1] = DI_EAST;
	else if (deltax < -10.0)
		d[1] = DI_WEST;
	else
		d[1] = DI_NODIR;
	if (deltay < -10.0)
		d[2] = DI_SOUTH;
	else if (deltay > 10.0)
		d[2] = DI_NORTH;
	else
		d[2] = DI_NODIR;

	// try direct route
	if (d[1] != DI_NODIR && d[2] != DI_NODIR)
	{
		MoveDir = diags[((deltay < 0.0) << 1) + (deltax > 0.0)];
		if (MoveDir != turnaround && TryWalk())
			return;
	}

	// try other directions
	if (P_Random() > 200 || fabs(deltay) > fabs(deltax))
	{
		tdir = d[1];
		d[1] = d[2];
		d[2] = tdir;
	}

	if (d[1] == turnaround)
		d[1] = DI_NODIR;
	if (d[2] == turnaround)
		d[2] = DI_NODIR;

	if (d[1] != DI_NODIR)
	{
		MoveDir = d[1];
		if (TryWalk())
			return;	/*either moved forward or attacked */
	}

	if (d[2] != DI_NODIR)
	{
		MoveDir = d[2];
		if (TryWalk())
			return;
	}

	/* there is no direct path to the player, so pick another direction */

	if (olddir != DI_NODIR)
	{
		MoveDir = olddir;
		if (TryWalk())
			return;
	}

	if (P_Random() & 1)	/*randomly determine direction of search */
	{
		for (tdir = DI_EAST; tdir <= DI_SOUTHEAST; tdir++)
		{
			if (tdir != turnaround)
			{
				MoveDir = tdir;
				if (TryWalk())
					return;
			}
		}
	}
	else
	{
		for (tdir = DI_SOUTHEAST; tdir >= DI_EAST; tdir--)
		{
			if (tdir != turnaround)
			{
				MoveDir = tdir;
				if (TryWalk())
					return;
			}
		}
	}

	if (turnaround != DI_NODIR)
	{
		MoveDir = turnaround;
		if (TryWalk())
			return;
	}

	MoveDir = DI_NODIR;	// can't move
}

//**************************************************************************
//
//  $Log$
//  Revision 1.26  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.25  2002/04/11 16:52:14  dj_jl
//  Made TryMove native.
//
//  Revision 1.24  2002/03/28 18:15:34  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.23  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.22  2002/03/09 17:57:01  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.21  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.20  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.19  2002/02/22 18:00:15  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.18  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.17  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:34  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
