//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	Copyright (C) 1999-2000 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**	
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	A_ImpMeAttack
//
//==========================================================================

void A_ImpMeAttack(mobj_t* actor)
{
	if (!actor->target)
	{
		return;
	}
	StartSound(actor, actor->sound_attack);
	if (P_CheckMeleeRange(actor))
	{
		DamageMobj(actor->target, actor, actor, 5 + (P_Random() & 7));
	}
}

//==========================================================================
//
//	A_ImpMsAttack
//
//==========================================================================

void A_ImpMsAttack(mobj_t* actor)
{
	mobj_t*	dest;
	angle_t	an;
	float	dist;

	if (!actor->target || P_Random() > 64)
	{
		SetMobjState(actor, actor->seestate);
		return;
	}
	dest = actor->target;
	actor->flags |= MF_SKULLFLY;
	StartSound(actor, actor->sound_attack);
	A_FaceTarget(actor);
	an = actor->angles.yaw;
	actor->velocity.x = 12.0 * cos(an) * 35.0;
	actor->velocity.y = 12.0 * sin(an) * 35.0;
	dist = MobjDist2(dest, actor);
	dist = dist / 12.0;
	if (dist < 1.0)
	{
		dist = 1.0;
	}
	actor->velocity.z = (dest->origin.z + dest->height / 2.0 - actor->origin.z) / dist * 35.0;
}

//==========================================================================
//
//	A_ImpMsAttack2
//
//	Fireball attack of the imp leader.
//
//==========================================================================

void A_ImpMsAttack2(mobj_t* actor)
{
	if (!actor->target)
	{
		return;
	}
	StartSound(actor, actor->sound_attack);
	if (P_CheckMeleeRange(actor))
	{
		DamageMobj(actor->target, actor, actor, 5 + (P_Random() & 7));
		return;
	}
	SpawnMissile(actor, actor->target, MT_IMPBALL);
}

//==========================================================================
//
//	A_ImpDeath
//
//==========================================================================

void A_ImpDeath(mobj_t* actor)
{
	actor->flags &= ~MF_SOLID;
	actor->flags2 |= MF2_FOOTCLIP;
	if (actor->origin.z <= actor->floorz)
	{
		SetMobjState(actor, S_IMP_CRASH1);
	}
}

//==========================================================================
//
//	A_ImpXDeath1
//
//==========================================================================

void A_ImpXDeath1(mobj_t* actor)
{
	actor->flags &= ~MF_SOLID;
	actor->flags |= MF_NOGRAVITY;
	actor->flags2 |= MF2_FOOTCLIP;
	actor->special1 = 666; // Flag the crash routine
}

//==========================================================================
//
//	A_ImpXDeath2
//
//==========================================================================

void A_ImpXDeath2(mobj_t* actor)
{
	actor->flags &= ~MF_NOGRAVITY;
	if (actor->origin.z <= actor->floorz)
	{
		SetMobjState(actor, S_IMP_CRASH1);
	}
}

//==========================================================================
//
//	A_ImpExplode
//
//==========================================================================

void A_ImpExplode(mobj_t* actor)
{
	mobj_t*	mo;

	mo = P_SpawnMobj(actor->origin.x, actor->origin.y, actor->origin.z, MT_IMPCHUNK1);
	mo->velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo->velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo->velocity.z = 9.0 * 35.0;
	mo = P_SpawnMobj(actor->origin.x, actor->origin.y, actor->origin.z, MT_IMPCHUNK2);
	mo->velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo->velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo->velocity.z = 9.0 * 35.0;
	if (actor->special1 == 666)
	{ // Extreme death crash
		SetMobjState(actor, S_IMP_XCRASH1);
	}
}

