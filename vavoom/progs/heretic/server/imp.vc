//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::A_ImpMeAttack
//
//==========================================================================

void Actor::A_ImpMeAttack(void)
{
	if (!target)
	{
		return;
	}
	StartSound(this, sound_attack, CHAN_WEAPON);
	if (P_CheckMeleeRange(this))
	{
		target->Damage(this, this, 5 + (P_Random() & 7));
	}
}

//==========================================================================
//
//  Actor::A_ImpMsAttack
//
//==========================================================================

void Actor::A_ImpMsAttack(void)
{
	mobj_t *dest;
	float an;
	float dist;

	if (!target || P_Random() > 64)
	{
		SetMobjState(this, SeeState);
		return;
	}
	dest = target;
	Flags |= MF_SKULLFLY;
	StartSound(this, sound_attack, CHAN_WEAPON);
	A_FaceTarget();
	an = angles.yaw;
	velocity.x = 12.0 * cos(an) * 35.0;
	velocity.y = 12.0 * sin(an) * 35.0;
	dist = MobjDist2(dest, this);
	dist = dist / 12.0;
	if (dist < 1.0)
	{
		dist = 1.0;
	}
	velocity.z = (dest->origin.z + dest->Height / 2.0 - origin.z) / dist;
}

//==========================================================================
//
//  Actor::A_ImpMsAttack2
//
//  Fireball attack of the imp leader.
//
//==========================================================================

void Actor::A_ImpMsAttack2(void)
{
	if (!target)
	{
		return;
	}
	StartSound(this, sound_attack, CHAN_WEAPON);
	if (P_CheckMeleeRange(this))
	{
		target->Damage(this, this, 5 + (P_Random() & 7));
		return;
	}
	SpawnMissile(this, target, ImpBall);
}

//==========================================================================
//
//  Actor::A_ImpDeath
//
//==========================================================================

void Actor::A_ImpDeath(void)
{
	Flags &= ~MF_SOLID;
	Flags2 |= MF2_FOOTCLIP;
	if (origin.z <= floorz)
	{
		SetMobjState(this, S_IMP_CRASH1);
	}
}

//==========================================================================
//
//  Actor::A_ImpXDeath1
//
//==========================================================================

void Actor::A_ImpXDeath1(void)
{
	Flags &= ~MF_SOLID;
	Flags |= MF_NOGRAVITY;
	Flags2 |= MF2_FOOTCLIP;
	special1 = 666;	// Flag the crash routine
}

//==========================================================================
//
//  Actor::A_ImpXDeath2
//
//==========================================================================

void Actor::A_ImpXDeath2(void)
{
	Flags &= ~MF_NOGRAVITY;
	if (origin.z <= floorz)
	{
		SetMobjState(this, S_IMP_CRASH1);
	}
}

//==========================================================================
//
//  Actor::A_ImpExplode
//
//==========================================================================

void Actor::A_ImpExplode(void)
{
	mobj_t *mo;

	mo = P_SpawnMobj(origin.x, origin.y, origin.z, ImpChunk1);
	mo->velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo->velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo->velocity.z = 9.0 * 35.0;
	mo = P_SpawnMobj(origin.x, origin.y, origin.z, ImpChunk2);
	mo->velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo->velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo->velocity.z = 9.0 * 35.0;
	if (special1 == 666)
	{
		// Extreme death crash
		SetMobjState(this, S_IMP_XCRASH1);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.10  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
