//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	TeleGlitter
//
//**************************************************************************

class TeleGlitter:ProjEffect
{

//==========================================================================
//
//  A_AccTeleGlitter
//
//==========================================================================

void A_AccTeleGlitter(void)
{
	if (++Health > 35)
	{
		Velocity.z += Velocity.z / 2.0;
	}
}

__states__
{
	S_TELEGLITTER1_1('TGLT', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER1_2) { }
	S_TELEGLITTER1_2('TGLT', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER1_3) { A_AccTeleGlitter(); }
	S_TELEGLITTER1_3('TGLT', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER1_4) { }
	S_TELEGLITTER1_4('TGLT', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER1_5) { A_AccTeleGlitter(); }
	S_TELEGLITTER1_5('TGLT', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER1_1) { }
}

defaultproperties
{
	Radius = 20.0;
	Height = 16.0;
	bDropOff = false;
	bNoTeleport = false;
	bActivatePCross = false;
	IdleState = S_TELEGLITTER1_1;
}

}

//**************************************************************************
//
//	TeleGlitGen
//
//**************************************************************************

class TeleGlitGen:Actor
	__mobjinfo__(74)
{

//==========================================================================
//
//  A_SpawnTeleGlitter
//
//==========================================================================

void A_SpawnTeleGlitter(void)
{
	Actor mo;

	mo = Spawn(TeleGlitter, vector(Origin.x + Random() * 32.0 - 16.0,
		Origin.y + Random() * 32.0 - 16.0, FloorZ));
	mo.Velocity.z = 0.25 * 35.0;
}

__states__
{
	S_TELEGLITGEN1('TGLT', 0, 8.0 / 35.0, S_TELEGLITGEN1) { A_SpawnTeleGlitter(); }
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	ReactionCount = 8;
	bHidden = true;
	bNoBlockmap = true;
	bNoGravity = true;
	bNoPassMobj = true;
	IdleState = S_TELEGLITGEN1;
}

}

//**************************************************************************
//
//	TeleGlitter2
//
//**************************************************************************

class TeleGlitter2:TeleGlitter
{

__states__
{
	S_TELEGLITTER2_1('TGLT', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER2_2) { }
	S_TELEGLITTER2_2('TGLT', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER2_3) { A_AccTeleGlitter(); }
	S_TELEGLITTER2_3('TGLT', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER2_4) { }
	S_TELEGLITTER2_4('TGLT', 8 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER2_5) { A_AccTeleGlitter(); }
	S_TELEGLITTER2_5('TGLT', 9 | FF_FULLBRIGHT, 2.0 / 35.0, S_TELEGLITTER2_1) { }
}

defaultproperties
{
	IdleState = S_TELEGLITTER2_1;
}

}

//**************************************************************************
//
//	TeleGlitGen2
//
//**************************************************************************

class TeleGlitGen2:Actor
	__mobjinfo__(52)
{

//==========================================================================
//
//  A_SpawnTeleGlitter2
//
//==========================================================================

void A_SpawnTeleGlitter2(void)
{
	Actor mo;

	mo = Spawn(TeleGlitter2, vector(Origin.x + Random() * 32.0 - 16.0,
		Origin.y + Random() * 32.0 - 16.0, FloorZ));
	mo.Velocity.z = 0.25 * 35.0;
}

__states__
{
	S_TELEGLITGEN2('TGLT', 5, 8.0 / 35.0, S_TELEGLITGEN2) { A_SpawnTeleGlitter2(); }
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	ReactionCount = 8;
	bHidden = true;
	bNoBlockmap = true;
	bNoGravity = true;
	bNoPassMobj = true;
	IdleState = S_TELEGLITGEN2;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.12  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.11  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.10  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.9  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.8  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.7  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.6  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
