//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int botskill = 2;

// CODE --------------------------------------------------------------------

/*

  This section contains the main bot AI. The
  main bot AI loop, B_Think, is called every tic.
  Also included are various bot decision-making
  procedures, such as B_CheckStuff and B_SetEnemy.

*/

//==========================================================================
//
//	IsDangerous
//
//	Checks if a sector is dangerous.
//
//==========================================================================

bool IsDangerous(sector_t *sec)
{
	switch (sec->special)
	{
	case 71:	// Damage_Sludge
	case 82:	// Damage_LavaWimpy
	case 83:	// Damage_LavaHefty
	case 84:	// Scroll_EastLavaDamage
		return true;
	}
	return false;
}

//==========================================================================
//
//	PTR_BotPathTraverse
//
//	[BC] For the bots
//
//==========================================================================

float bottracerange;
TVec bottracedir;

bool PTR_BotPathTraverse(intercept_t *in)
{
	Actor th;
	line_t *ld;
	BotPlayer bot;
	Actor botmo;
	TVec hit_point;

	bot = usething.Player.Bot;
	botmo = usething;

	if (in->bIsALine)
	{
		sector_t *back;
		sector_t *front;
		opening_t *open;
		float diffheight;

		ld = in->line;					// This linedef
		hit_point = botmo.Origin + (bottracerange * in->frac) * bottracedir;

		// Line is impassible
		if (!(ld->flags & ML_TWOSIDED) || (ld->flags & ML_BLOCKING))
			return false;

		// Line isn't two sided
		if (!ld->backsector)
			return false;

		if (!PointOnPlaneSide(botmo.Origin, ld))
		{
			back = ld->backsector;
			front = ld->frontsector;
		}
		else
		{
			back = ld->frontsector;
			front = ld->backsector;
		}

		// Sector is dangerous
		if (IsDangerous(back))
			return false;

		// crosses a two sided line
		open = LineOpenings(ld, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z + botmo.Height);
		// No valid openings
		if (!open)
		{
			return false;
		}

		// No cliff jumping unless we're going after something
		if ((front->floorheight - back->floorheight) > 32.0 && !bot.enemy)
		{
			return false;
		}

		diffheight = back->floorheight - front->floorheight;
		
		if (diffheight > 0.0)
		{
			if (diffheight > 48.0)
			{
/*				if (front->SSpecial == ThrustThingZ || front->springpadzone)
				{
					return true;
				}
				else*/
					return false;
			}
			else if (diffheight <= 48.0 && diffheight >= 24.0)
			{
				bot.player.Buttons |= BT_JUMP;
			}
		}

		return true;
	}

	th = Actor(in->Thing);

	if (th == botmo)
		return true;

	if (th.bSolid)
		return false;

/*	fixed_t diffheight = (th->z + th->Height) - shootthing->z;

	if (diffheight > 0)
	{
		if (diffheight <= 48*FRACUNIT && diffheight >= 24*FRACUNIT)
		{
			bot->player.cmd.ucmd.buttons |= BT_JUMP;
			return true;
		}
		else if (diffheight <= 24*FRACUNIT)
			return true;
		else
			return false;
				
	}
*/
	return true;
}

botinfo_t botinfo[NUMTOTALBOTS] =
{
	{
		"bot1",
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		"\\Name\\bot1\\color\\0\\class\\0\\model\\doomguy\\skin\\green.pcx"
	},
	{
		"bot2",
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		"\\Name\\bot2\\color\\1\\class\\0\\model\\doomguy\\skin\\bluef.pcx"
	},
	{
		"bot3",
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		"\\Name\\bot3\\color\\2\\class\\0\\model\\doomguy\\skin\\pinkf.pcx"
	},
	{
		"bot4",
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		"\\Name\\bot4\\color\\3\\class\\0\\model\\doomguy\\skin\\camo.pcx"
	},
	{
		"bot5",
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		"\\Name\\bot5\\color\\4\\class\\0\\model\\doomguy\\skin\\green.pcx"
	},
	{
		"bot6",
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		"\\Name\\bot6\\color\\5\\class\\0\\model\\doomguy\\skin\\bluef.pcx"
	},
	{
		"bot7",
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		"\\Name\\bot7\\color\\6\\class\\0\\model\\doomguy\\skin\\pinkf.pcx"
	},
	{
		"bot8",
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		bsk_medium,
		"\\Name\\bot8\\color\\7\\class\\0\\model\\doomguy\\skin\\camo.pcx"
	}
};

//**************************************************************************
//
//  $Log$
//  Revision 1.21  2003/11/12 16:49:44  dj_jl
//  Changed player structure into a class
//
//  Revision 1.20  2003/07/11 16:47:39  dj_jl
//  Made array of players with pointers
//
//  Revision 1.19  2002/10/26 16:32:23  dj_jl
//  New style of defining classes.
//
//  Revision 1.18  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.17  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.16  2002/04/11 16:49:50  dj_jl
//  Tick function.
//
//  Revision 1.15  2002/03/28 18:15:34  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.14  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.13  2002/03/09 17:57:01  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.12  2002/02/22 18:00:15  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.11  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.10  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.9  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.8  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.7  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.6  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.5  2002/01/11 08:03:12  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.4  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.3  2002/01/04 18:22:58  dj_jl
//  All posible skins and models
//
//  Revision 1.2  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.1  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//**************************************************************************
