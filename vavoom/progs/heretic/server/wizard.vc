//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	WizardMissile
//
//**************************************************************************

class WizardMissile:Projectile
{

__states__
{
	S_WIZFX1_1('FX11', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_WIZFX1_2) { }
	S_WIZFX1_2('FX11', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_WIZFX1_1) { }
	S_WIZFXI1_1('FX11', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_WIZFXI1_2) { }
	S_WIZFXI1_2('FX11', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_WIZFXI1_3) { }
	S_WIZFXI1_3('FX11', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_WIZFXI1_4) { }
	S_WIZFXI1_4('FX11', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_WIZFXI1_5) { }
	S_WIZFXI1_5('FX11', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 6.0;
	Speed = 630.0;
	MissileDamage = 3;
	IdleState = S_WIZFX1_1;
	DeathState = S_WIZFXI1_1;
	Effects = EF_DL_MAGENTA;
}

}

//**************************************************************************
//
//	Wizard
//
//**************************************************************************

class Wizard:Pawn
	__mobjinfo__(15)
{

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff(void)
{
	DropItem(ItemAmmoBlasterWimpy, 10, 0.328125);
	DropItem(ArtifactTomeOfPower, 0, 0.015625);
}

//==========================================================================
//
//  A_WizAtk1
//
//==========================================================================

void A_WizAtk1(void)
{
	A_FaceTarget();
	Translucency = 0;
}

//==========================================================================
//
//  A_WizAtk2
//
//==========================================================================

void A_WizAtk2(void)
{
	A_FaceTarget();
	Translucency = 33;
}

//==========================================================================
//
//  A_WizAtk3
//
//==========================================================================

void A_WizAtk3(void)
{
	Actor A;
	float angle;
	TAVec ang;

	Translucency = 0;
	if (!Enemy)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(4));
		return;
	}
	A = SpawnMissile(Enemy, WizardMissile);
	if (A)
	{
		VectorAngles(&A.Velocity, &ang);
		angle = A.Angles.yaw;
		SpawnMissileAngles(WizardMissile,
			AngleMod360(angle - (45.0 / 8.0)), ang.pitch);
		SpawnMissileAngles(WizardMissile,
			AngleMod360(angle + (45.0 / 8.0)), ang.pitch);
	}
}

//==========================================================================
//
//  A_GhostOff
//
//==========================================================================

void A_GhostOff(void)
{
	Translucency = 0;
}

__states__
{
	S_WIZARD_LOOK1('WZRD', 0, 'monsters/wizard.md2', 0, 10.0 / 35.0, S_WIZARD_LOOK2) { A_Look(); }
	S_WIZARD_LOOK2('WZRD', 1, 'monsters/wizard.md2', 1, 10.0 / 35.0, S_WIZARD_LOOK1) { A_Look(); }
	S_WIZARD_WALK1('WZRD', 0, 'monsters/wizard.md2', 2, 3.0 / 35.0, S_WIZARD_WALK2) { A_Chase(); }
	S_WIZARD_WALK2('WZRD', 0, 'monsters/wizard.md2', 3, 4.0 / 35.0, S_WIZARD_WALK3) { A_Chase(); }
	S_WIZARD_WALK3('WZRD', 0, 'monsters/wizard.md2', 4, 3.0 / 35.0, S_WIZARD_WALK4) { A_Chase(); }
	S_WIZARD_WALK4('WZRD', 0, 'monsters/wizard.md2', 5, 4.0 / 35.0, S_WIZARD_WALK5) { A_Chase(); }
	S_WIZARD_WALK5('WZRD', 1, 'monsters/wizard.md2', 6, 3.0 / 35.0, S_WIZARD_WALK6) { A_Chase(); }
	S_WIZARD_WALK6('WZRD', 1, 'monsters/wizard.md2', 7, 4.0 / 35.0, S_WIZARD_WALK7) { A_Chase(); }
	S_WIZARD_WALK7('WZRD', 1, 'monsters/wizard.md2', 8, 3.0 / 35.0, S_WIZARD_WALK8) { A_Chase(); }
	S_WIZARD_WALK8('WZRD', 1, 'monsters/wizard.md2', 9, 4.0 / 35.0, S_WIZARD_WALK1) { A_Chase(); }
	S_WIZARD_ATK1('WZRD', 2, 'monsters/wizard.md2', 10, 4.0 / 35.0, S_WIZARD_ATK2) { A_WizAtk1(); }
	S_WIZARD_ATK2('WZRD', 2, 'monsters/wizard.md2', 11, 4.0 / 35.0, S_WIZARD_ATK3) { A_WizAtk2(); }
	S_WIZARD_ATK3('WZRD', 2, 'monsters/wizard.md2', 12, 4.0 / 35.0, S_WIZARD_ATK4) { A_WizAtk1(); }
	S_WIZARD_ATK4('WZRD', 2, 'monsters/wizard.md2', 13, 4.0 / 35.0, S_WIZARD_ATK5) { A_WizAtk2(); }
	S_WIZARD_ATK5('WZRD', 2, 'monsters/wizard.md2', 14, 4.0 / 35.0, S_WIZARD_ATK6) { A_WizAtk1(); }
	S_WIZARD_ATK6('WZRD', 2, 'monsters/wizard.md2', 15, 4.0 / 35.0, S_WIZARD_ATK7) { A_WizAtk2(); }
	S_WIZARD_ATK7('WZRD', 2, 'monsters/wizard.md2', 16, 4.0 / 35.0, S_WIZARD_ATK8) { A_WizAtk1(); }
	S_WIZARD_ATK8('WZRD', 2, 'monsters/wizard.md2', 17, 4.0 / 35.0, S_WIZARD_ATK9) { A_WizAtk2(); }
	S_WIZARD_ATK9('WZRD', 3, 'monsters/wizard.md2', 18, 12.0 / 35.0, S_WIZARD_WALK1) { A_WizAtk3(); }
	S_WIZARD_PAIN1('WZRD', 4, 'monsters/wizard.md2', 19, 3.0 / 35.0, S_WIZARD_PAIN2) { A_GhostOff(); }
	S_WIZARD_PAIN2('WZRD', 4, 'monsters/wizard.md2', 20, 3.0 / 35.0, S_WIZARD_WALK1) { A_Pain(); }
	S_WIZARD_DIE1('WZRD', 5, 'monsters/wizard.md2', 21, 6.0 / 35.0, S_WIZARD_DIE2) { A_GhostOff(); }
	S_WIZARD_DIE2('WZRD', 6, 'monsters/wizard.md2', 22, 6.0 / 35.0, S_WIZARD_DIE3) { A_Scream(); }
	S_WIZARD_DIE3('WZRD', 7, 'monsters/wizard.md2', 23, 6.0 / 35.0, S_WIZARD_DIE4) { }
	S_WIZARD_DIE4('WZRD', 8, 'monsters/wizard.md2', 24, 6.0 / 35.0, S_WIZARD_DIE5) { }
	S_WIZARD_DIE5('WZRD', 9, 'monsters/wizard.md2', 25, 6.0 / 35.0, S_WIZARD_DIE6) { A_NoBlocking(); }
	S_WIZARD_DIE6('WZRD', 10, 'monsters/wizard.md2', 26, 6.0 / 35.0, S_WIZARD_DIE7) { }
	S_WIZARD_DIE7('WZRD', 11, 'monsters/wizard.md2', 27, 6.0 / 35.0, S_WIZARD_DIE8) { }
	S_WIZARD_DIE8('WZRD', 12, 'monsters/wizard.md2', 28, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 180;
	Radius = 16.0;
	Height = 68.0;
	Mass = 100.0;
	StepSpeed = 12.0;
	PainChance = 0.25;
	bNoGravity = true;
	bFloat = true;
	bFloorClip = false;
	IdleState = S_WIZARD_LOOK1;
	SeeState = S_WIZARD_WALK1;
	MissileState = S_WIZARD_ATK1;
	PainState = S_WIZARD_PAIN1;
	DeathState = S_WIZARD_DIE1;
	SightSound = 'WizardSight';
	ActiveSound = 'WizardActive';
	AttackSound = 'WizardAttack';
	PainSound = 'WizardPain';
	DeathSound = 'WizardDeath';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.24  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.23  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.22  2002/04/11 16:52:15  dj_jl
//  Made TryMove native.
//
//  Revision 1.21  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.20  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.19  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.18  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.17  2002/02/22 18:00:20  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.16  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.15  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.14  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.12  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
