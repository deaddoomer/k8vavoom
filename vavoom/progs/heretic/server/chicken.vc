//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::UpdateChicken
//
//  Returns true if the chicken morphs.
//
//==========================================================================

boolean Actor::UpdateChicken(int tics)
{
	mobj_t *fog;
	float x;
	float y;
	float z;
	classid moType;
	float angle;
	mobj_t *targ;
	mobj_t *mo;

	Special1 -= tics;
	if (Special1 > 0)
	{
		return false;
	}
	moType = SpecialCID;
	x = Origin.x;
	y = Origin.y;
	z = Origin.z;
	angle = Angles.yaw;
	targ = target;
	P_UnsetThingPosition(self);
	mo = P_SpawnMobj(x, y, z, moType);
	if (P_TestMobjLocation(mo) == false)
	{
		// Didn't fit
		P_RemoveMobj(mo);
		P_SetThingPosition(self);
		mo->Special1 = 5 * 35;	// Next try in 5 seconds
		return false;
	}
	SetState(S_FREETARGMOBJ);
	mo->Angles.yaw = angle;
	mo->target = targ;
	fog = P_SpawnMobj(x, y, z + TELEFOGHEIGHT, TeleportFog);
	fog->PlaySound('Teleport', CHAN_VOICE);
	return true;
}

//==========================================================================
//
//  Actor::A_ChicLook
//
//==========================================================================

void Actor::A_ChicLook(void)
{
	if (UpdateChicken(10))
	{
		return;
	}
	A_Look();
}

//==========================================================================
//
//  Actor::A_ChicChase
//
//==========================================================================

void Actor::A_ChicChase(void)
{
	if (UpdateChicken(3))
	{
		return;
	}
	A_Chase();
}

//==========================================================================
//
//  Actor::A_Feathers
//
//==========================================================================

void Actor::A_Feathers(void)
{
	int i;
	int count;
	mobj_t *mo;

	if (Health > 0)
	{
		// Pain
		count = P_Random() < 32 ? 2 : 1;
	}
	else
	{
		// Death
		count = 5 + (P_Random() & 3);
	}
	for (i = 0; i < count; i++)
	{
		mo = P_SpawnMobj(Origin.x, Origin.y, Origin.z + 20.0, Feather);
		mo->target = this;
		mo->Velocity.x = (Random() - Random()) * 35.0;
		mo->Velocity.y = (Random() - Random()) * 35.0;
		mo->Velocity.z = (1.0 + Random() * 2.0) * 35.0;
		mo->SetState(S_FEATHER1 + (P_Random() & 7));
	}
}

//==========================================================================
//
//  Actor::A_ChicAttack
//
//==========================================================================

void Actor::A_ChicAttack(void)
{
	if (UpdateChicken(18))
	{
		return;
	}
	if (!target)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		target->Damage(self, self, 1 + (P_Random() & 1));
	}
}

//==========================================================================
//
//  Actor::A_ChicPain
//
//==========================================================================

void Actor::A_ChicPain(void)
{
	if (UpdateChicken(10))
	{
		return;
	}
	PlaySound(PainSound, CHAN_VOICE);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.16  2002/02/22 18:00:15  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.15  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.14  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.13  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.12  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.10  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.9  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.7  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
