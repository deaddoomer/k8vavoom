//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ı
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	Feather
//
//**************************************************************************

class Feather:ProjEffect
{

__states__
{
	S_FEATHER1('CHKN', 12, 3.0 / 35.0, S_FEATHER2) { }
	S_FEATHER2('CHKN', 13, 3.0 / 35.0, S_FEATHER3) { }
	S_FEATHER3('CHKN', 14, 3.0 / 35.0, S_FEATHER4) { }
	S_FEATHER4('CHKN', 15, 3.0 / 35.0, S_FEATHER5) { }
	S_FEATHER5('CHKN', 16, 3.0 / 35.0, S_FEATHER6) { }
	S_FEATHER6('CHKN', 15, 3.0 / 35.0, S_FEATHER7) { }
	S_FEATHER7('CHKN', 14, 3.0 / 35.0, S_FEATHER8) { }
	S_FEATHER8('CHKN', 13, 3.0 / 35.0, S_FEATHER1) { }
	S_FEATHERX('CHKN', 13, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 2.0;
	Height = 4.0;
	Mass = 12.5;
	bWindThrust = true;
	bCannotPush = true;
	bNoGravity = false;
	IdleState = S_FEATHER1;
	DeathState = S_FEATHERX;
}

}

//**************************************************************************
//
//	Chicken
//
//**************************************************************************

class Chicken:Pawn
{

//==========================================================================
//
//  UpdateChicken
//
//  Returns true if the chicken morphs.
//
//==========================================================================

boolean UpdateChicken(int tics)
{
	Actor fog;
	classid moType;
	Actor A;

	Special1 -= tics;
	if (Special1 > 0)
	{
		return false;
	}
	moType = SpecialCID;
	UnlinkFromWorld();
	A = Spawn(moType, Origin);
	if (A.TestLocation() == false)
	{
		// Didn't fit
		A.Remove();
		LinkToWorld();
		Special1 = 5 * 35;	// Next try in 5 seconds
		return false;
	}
	LinkToWorld();
	A.Angles.yaw = Angles.yaw;
	A.Enemy = Enemy;
	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);
	SetState(S_FREETARGMOBJ);
	return true;
}

//==========================================================================
//
//  A_ChicLook
//
//==========================================================================

void A_ChicLook(void)
{
	if (UpdateChicken(10))
	{
		return;
	}
	A_Look();
}

//==========================================================================
//
//  A_ChicChase
//
//==========================================================================

void A_ChicChase(void)
{
	if (UpdateChicken(3))
	{
		return;
	}
	A_Chase();
}

//==========================================================================
//
//  A_ChicAttack
//
//==========================================================================

void A_ChicAttack(void)
{
	if (UpdateChicken(18))
	{
		return;
	}
	if (!Enemy)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, 1 + (P_Random() & 1));
	}
}

//==========================================================================
//
//  A_ChicPain
//
//==========================================================================

void A_ChicPain(void)
{
	if (UpdateChicken(10))
	{
		return;
	}
	PlaySound(PainSound, CHAN_VOICE);
}

__states__
{
	S_CHICKEN_LOOK1('CHKN', 0, 10.0 / 35.0, S_CHICKEN_LOOK2) { A_ChicLook(); }
	S_CHICKEN_LOOK2('CHKN', 1, 10.0 / 35.0, S_CHICKEN_LOOK1) { A_ChicLook(); }
	S_CHICKEN_WALK1('CHKN', 0, 3.0 / 35.0, S_CHICKEN_WALK2) { A_ChicChase(); }
	S_CHICKEN_WALK2('CHKN', 1, 3.0 / 35.0, S_CHICKEN_WALK1) { A_ChicChase(); }
	S_CHICKEN_PAIN1('CHKN', 3, 5.0 / 35.0, S_CHICKEN_PAIN2) { A_Feathers(); }
	S_CHICKEN_PAIN2('CHKN', 2, 5.0 / 35.0, S_CHICKEN_WALK1) { A_ChicPain(); }
	S_CHICKEN_ATK1('CHKN', 0, 8.0 / 35.0, S_CHICKEN_ATK2) { A_FaceTarget(); }
	S_CHICKEN_ATK2('CHKN', 2, 10.0 / 35.0, S_CHICKEN_WALK1) { A_ChicAttack(); }
	S_CHICKEN_DIE1('CHKN', 4, 6.0 / 35.0, S_CHICKEN_DIE2) { A_Scream(); }
	S_CHICKEN_DIE2('CHKN', 5, 6.0 / 35.0, S_CHICKEN_DIE3) { A_Feathers(); }
	S_CHICKEN_DIE3('CHKN', 6, 6.0 / 35.0, S_CHICKEN_DIE4) { }
	S_CHICKEN_DIE4('CHKN', 7, 6.0 / 35.0, S_CHICKEN_DIE5) { A_NoBlocking(); }
	S_CHICKEN_DIE5('CHKN', 8, 6.0 / 35.0, S_CHICKEN_DIE6) { }
	S_CHICKEN_DIE6('CHKN', 9, 6.0 / 35.0, S_CHICKEN_DIE7) { }
	S_CHICKEN_DIE7('CHKN', 10, 6.0 / 35.0, S_CHICKEN_DIE8) { }
	S_CHICKEN_DIE8('CHKN', 11, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 10;
	Radius = 9.0;
	Height = 22.0;
	Mass = 40.0;
	StepSpeed = 4.0;
	PainChance = 0.78125;
	bDropOff = true;
	bWindThrust = true;
	IdleState = S_CHICKEN_LOOK1;
	SeeState = S_CHICKEN_WALK1;
	MeleeState = S_CHICKEN_ATK1;
	PainState = S_CHICKEN_PAIN1;
	DeathState = S_CHICKEN_DIE1;
	SightSound = 'ChickenPain';
	ActiveSound = 'ChickenActive';
	AttackSound = 'ChickenAttack';
	PainSound = 'ChickenPain';
	DeathSound = 'ChickenDeath';
}

}

//**************************************************************************
//**************************************************************************

//==========================================================================
//
//  Pawn::A_Feathers
//
//==========================================================================

void Pawn::A_Feathers(void)
{
	int i;
	int count;
	Actor mo;

	if (Health > 0)
	{
		// Pain
		count = P_Random() < 32 ? 2 : 1;
	}
	else
	{
		// Death
		count = 5 + (P_Random() & 3);
	}
	for (i = 0; i < count; i++)
	{
		mo = Spawn(Feather, Origin + vector(0.0, 0.0, 20.0));
		mo.Instigator = self;
		mo.Velocity.x = (Random() - Random()) * 35.0;
		mo.Velocity.y = (Random() - Random()) * 35.0;
		mo.Velocity.z = (1.0 + Random() * 2.0) * 35.0;
		mo.SetState(S_FEATHER1 + (P_Random() & 7));
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.23  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.22  2002/06/22 07:16:00  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.21  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.20  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.19  2002/03/16 17:45:12  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.18  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.17  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.16  2002/02/22 18:00:15  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.15  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.14  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.13  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.12  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.10  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.9  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.7  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
