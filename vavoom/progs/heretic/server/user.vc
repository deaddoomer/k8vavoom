//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

float air_control = 1.0 / 256.0;

#define INVERSECOLORMAP		32

#define STARTREDPALS	1
#define STARTBONUSPALS	9
#define NUMREDPALS		8
#define NUMBONUSPALS	4

void SetWeapon(player_t *player, int NewWeapon);
void WeaponLevel2Fade(player_t * player);
void MovePsprites(player_t * player);

boolean G_CheckSpot(int playernum, mthing_t * mthing);
void P_SpawnPlayer(mthing_t * mthing);
void P_UseLines(player_t * player);

Actor LavaInflictor;

boolean onground;

boolean WeaponInShareware[9] = {
	true,	// Staff
	true,	// Gold wand
	true,	// Crossbow
	true,	// Blaster
	false,	// Skull rod
	false,	// Phoenix rod
	false,	// Mace
	true,	// Gauntlets
	true	// Beak
};

//==========================================================================
//
//  PlayerPawn::ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void PlayerPawn::ThrustPlayer(float angle, float move, float deltaTime)
{
	if (Player->Powers[pw_flight] && !(Origin.z <= FloorZ))
	{
		Velocity.x += move * cos(angle) * deltaTime;
		Velocity.y += move * sin(angle) * deltaTime;
	}
	else if (Sector->special == 15 + 64)	// Friction_Low
	{
		Velocity.x += move / 4.0 * cos(angle) * deltaTime;
		Velocity.y += move / 4.0 * sin(angle) * deltaTime;
	}
	else
	{
		Velocity.x += move * cos(angle) * deltaTime;
		Velocity.y += move * sin(angle) * deltaTime;
	}
}

//==========================================================================
//
//  PlayerPawn::CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void PlayerPawn::CalcHeight(float deltaTime)
{
	float angle;
	float bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	Player->Bob = (Velocity.x * Velocity.x + Velocity.y * Velocity.y)
		* deltaTime * deltaTime;

	Player->Bob /= 4.0;
	if (Player->Bob > MAXBOB)
		Player->Bob = MAXBOB;

	if (bFly && !onground)
	{
		Player->Bob = 0.5;
	}

	angle = 180.0 * 35.0 / 10.0 * level->time;
	bob = Player->Bob / 2.0 * sin(angle);

	// move viewheight
	if (Player->PlayerState == PST_LIVE)
	{
		Player->ViewHeight += Player->DeltaViewHeight;

		if (Player->ViewHeight > VIEWHEIGHT)
		{
			Player->ViewHeight = VIEWHEIGHT;
			Player->DeltaViewHeight = 0.0;
		}

		if (Player->ViewHeight < VIEWHEIGHT / 2.0)
		{
			Player->ViewHeight = VIEWHEIGHT / 2.0;
			if (Player->DeltaViewHeight <= 0.0)
				Player->DeltaViewHeight = 0.00001;
		}

		if (Player->DeltaViewHeight)
		{
			Player->DeltaViewHeight += 0.25;
			if (!Player->DeltaViewHeight)
				Player->DeltaViewHeight = 0.00001;
		}
	}
	if (Player->ChickenTics)
	{
		Player->ViewOrg.z = Origin.z + Player->ViewHeight - 20.0;
	}
	else
	{
		Player->ViewOrg.z = Origin.z + Player->ViewHeight + bob;
	}
	if (Player->PlayerState != PST_DEAD && Origin.z <= FloorZ)
	{
		Player->ViewOrg.z -= FloorClip;
	}
	if (Player->ViewOrg.z < FloorZ + 4.0)
		Player->ViewOrg.z = FloorZ + 4.0;

	if (Player->ViewOrg.z > CeilingZ - 4.0)
		Player->ViewOrg.z = CeilingZ - 4.0;
}

//==========================================================================
//
//  PlayerPawn::MovePlayer
//
//==========================================================================

void PlayerPawn::MovePlayer(float deltaTime)
{
	float forward;
	float side;
	float fly;

	// Do not let the player control movement
	//  if not onground.
	onground = (Origin.z <= FloorZ) || bOnMobj;

	forward = Player->ForwardMove * 5.0;
	side = Player->SideMove * 5.0;

	if (Player->ChickenTics)
	{
		// Chicken speed
		forward *= 1.2;
		side *= 1.2;
	}
	if (!(onground || bFly))
	{
		forward *= air_control;
		side *= air_control;
	}

	if (forward)
	{
		ThrustPlayer(Angles.yaw, forward, deltaTime);
	}
	if (side)
	{
		ThrustPlayer(AngleMod360(Angles.yaw - 90.0), side, deltaTime);
	}

	if (forward || side)
	{
		SetPlayerRunState();
	}

	fly = Player->FlyMove / 16.0;
	if (fly && Player->Powers[pw_flight])
	{
		if (Player->FlyMove != TOCENTER)
		{
			Player->FlyHeight = fly * 2.0;
			if (!bFly)
			{
				bFly = true;
				bNoGravity = true;
				if (Velocity.z <= -39.0 * 35.0)
				{
					// stop falling scream
					StopSound(CHAN_VOICE);
				}
			}
		}
		else
		{
			bFly = false;
			bNoGravity = false;
		}
	}
	else if (fly > 0.0)
	{
		PlayerUseArtifact(arti_fly);
	}
	if (bFly)
	{
		Velocity.z = Player->FlyHeight * 35.0;
		if (Player->FlyHeight)
		{
			Player->FlyHeight /= 2.0;
		}
	}

	if ((Player->Buttons & BT_JUMP) && onground && !Player->JumpTics)
	{
		if (Player->ChickenTics)
		{
			//  Smaller momentum because chicken haves smaller mass
			Velocity.z = 6.0 * 35.0;
		}
		else
		{
			Velocity.z = 9.0 * 35.0;
		}
		bOnMobj = false;
		Player->JumpTics = 18;
	}
}

//==========================================================================
//
//  PlayerPawn::CheckWaterJump
//
//==========================================================================

void PlayerPawn::CheckWaterJump(void)
{
	TVec start;
	TVec end;
	TVec vforward;

	// check for a jump-out-of-water
	AngleVector(&Angles, &vforward);
	start = Origin;
	start.z += Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalize(vforward);
	end = start + vforward * 24.0;
	if (!TraceLine(start, end))
	{
		// solid at waist
		start.z = Origin.z + Height;
		end = start + vforward * 24.0;
		Player->MoveDir = trace_plane_normal * -50.0;
		if (TraceLine(start, end))
		{
			// open at eye level
			bWaterJump = true;
			Velocity.z = 320.0;
			ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  PlayerPawn::WaterMove
//
//==========================================================================

void PlayerPawn::WaterMove(float deltaTime)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	// Do not let the player control movement
	//  if not onground.
	onground = (Origin.z <= FloorZ) || bOnMobj;

	AngleVectors(&Angles, &vforward, &vright, &vup);

	forward = Player->ForwardMove;
	side = Player->SideMove;
	if (Player->ChickenTics)
	{
		// Chicken speed
		forward *= 1.2;
		side *= 1.2;
	}

	wishvel = vforward * forward + vright * side;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  else
//      wishvel.z += cmd.upmove;

	Velocity += 3.5 * deltaTime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if (Player->Buttons & BT_JUMP)
	{
		if (WaterType == CONTENTS_WATER)
			Velocity.z = 100.0;
		else if (WaterType == CONTENTS_SLUDGE)
			Velocity.z = 80.0;
		else
			Velocity.z = 50.0;
	}
	CheckWaterJump();
}

//==========================================================================
//
//  PlayerPawn::WaterJump
//
//==========================================================================

void PlayerPawn::WaterJump(void)
{
	if (!ReactionTime || !WaterLevel)
	{
		bWaterJump = false;
		ReactionTime = 0.0;
	}
	Velocity.x = Player->MoveDir.x;
	Velocity.y = Player->MoveDir.y;
}

//==========================================================================
//
//  PlayerPawn::PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector.
//
//==========================================================================

float pushTab[5] = {
	5.0 * 35.0 * 35.0 / 32.0,
	10.0 * 35.0 * 35.0 / 32.0,
	25.0 * 35.0 * 35.0 / 32.0,
	30.0 * 35.0 * 35.0 / 32.0,
	35.0 * 35.0 * 35.0 / 32.0
};

void PlayerPawn::PlayerInSpecialSector(float deltaTime)
{
	if (Origin.z != Sector->floorheight)
	{
		// Player is not touching the floor
		return;
	}

	if (Sector->special & SECRET_MASK)
	{
		// SecretArea
		Player->SecretCount++;
		Sector->special &= ~SECRET_MASK;
		centerprint(Player, "You found a secret area");
	}

	switch (Sector->special)
	{
	case 7 + 64:	// Damage_Sludge
		if (!(level->tictime & 31))
		{
			Damage(none, none, 4);
		}
		break;
	case 82:	// Damage_LavaWimpy
		if (!(level->tictime & 15))
		{
			Damage(LavaInflictor, none, 5);
			HitFloorEffect();
		}
		break;
	case 83:	// Damage_LavaHefty
		if (!(level->tictime & 15))
		{
			Damage(LavaInflictor, none, 8);
			HitFloorEffect();
		}
		break;
	case 84:	// Scroll_EastLavaDamage
		ThrustPlayer(0.0, 1024.0, deltaTime);
		if (!(level->tictime & 15))
		{
			Damage(LavaInflictor, none, 5);
			HitFloorEffect();
		}
		break;

	case 20 + 205:
	case 21 + 205:
	case 22 + 205:
	case 23 + 205:
	case 24 + 205:	// Scroll_East
		ThrustPlayer(0.0, pushTab[Sector->special - (20 + 205)], deltaTime);
		break;
	case 25 + 205:
	case 26 + 205:
	case 27 + 205:
	case 28 + 205:
	case 29 + 205:	// Scroll_North
		ThrustPlayer(90.0, pushTab[Sector->special - (25 + 205)], deltaTime);
		break;
	case 30 + 205:
	case 31 + 205:
	case 32 + 205:
	case 33 + 205:
	case 34 + 205:	// Scroll_South
		ThrustPlayer(270.0, pushTab[Sector->special - (30 + 205)], deltaTime);
		break;
	case 35 + 205:
	case 36 + 205:
	case 37 + 205:
	case 38 + 205:
	case 39 + 205:	// Scroll_West
		ThrustPlayer(180.0, pushTab[Sector->special - (35 + 205)], deltaTime);
		break;

	case 40:
	case 41:
	case 42:
	case 43:
	case 44:
	case 45:
	case 46:
	case 47:
	case 48:
	case 49:
	case 50:
	case 51:
		// Wind specials are handled in (P_mobj):P_XYMovement
		break;

	case 15 + 64:	// Friction_Low
		// Only used in (P_mobj):P_XYMovement and (P_user):P_Thrust
		break;

//      default:
//          I_Error("PlayerInSpecialSector: "
//              "unknown special %i", sector->special);
	}
}

//==========================================================================
//
//  PlayerPawn::PlayerInContents
//
//==========================================================================

void PlayerPawn::PlayerInContents(void)
{
	if (!WaterLevel)
	{
		return;
	}
	switch (WaterType)
	{
	case CONTENTS_LAVA:
		if (!(level->tictime & 15))
		{
			Damage(LavaInflictor, none, 8);
		}
		break;

	case CONTENTS_SLUDGE:
		if (!(level->tictime & 31))
		{
			Damage(none, none, 4);
		}
		break;
	}
}

//==========================================================================
//
//  PlayerPawn::PlayerImpulse
//
//==========================================================================

void PlayerPawn::PlayerImpulse(void)
{
	int impulse;

	impulse = Player->Impulse;
	Player->Impulse = 0;
	Player->Arti = 0;

	if (impulse <= NUMWEAPONS)
	{
		int newweapon;

		// The actual changing of the weapon is done when the weapon
		// psprite can do it (A_WeaponReady), so it doesn't happen in
		// the middle of an attack.
		newweapon = impulse - 1;
		if (newweapon == wp_staff && Player->WeaponOwned[wp_gauntlets]
			&& !(Player->ReadyWeapon == wp_gauntlets))
		{
			newweapon = wp_gauntlets;
		}
		if (Player->WeaponOwned[newweapon] &&
			newweapon != Player->ReadyWeapon)
		{
			if (WeaponInShareware[newweapon] || !shareware)
			{
				Player->PendingWeapon = newweapon;
			}
		}
	}
	else if (impulse == 13)
	{
		InventoryLeft();
	}
	else if (impulse == 14)
	{
		InventoryRight();
	}
	else if (impulse == 15)
	{
		InventoryUse();
	}
	// Heretic artifact hot keys
	else if (impulse == 11)
	{
		if (!Player->Powers[pw_weaponlevel2])
		{
			Player->Arti = arti_tomeofpower;
		}
	}
	else if (impulse == 16)
	{
		Damage(none, none, 10000);
	}

	if (Player->Arti)
	{
		// Use an artifact
		PlayerUseArtifact(Player->Arti);
	}
}

//==========================================================================
//
//  PlayerPawn::PlayerTick
//
//==========================================================================

void PlayerPawn::PlayerTick(float deltaTime)
{
	int i;

	if (Player->bIsBot)
	{
		Player->Bot.BotTick(deltaTime);
	}

	// Copy view angles
	Angles = Player->ViewAngles;

	// fixme: do this in the cheat code
	if (Player->Cheats & CF_NOCLIP)
	{
		bColideWithThings = false;
		bColideWithWorld = false;
	}
	else
	{
		bColideWithThings = true;
		bColideWithWorld = true;
	}

	if (bJustAttacked)
	{
		Player->ForwardMove = 100.0;
		Player->SideMove = 0.0;
		bJustAttacked = false;
	}

	InventoryTick(deltaTime);

	if (Player->PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (Player->JumpTics)
	{
		Player->JumpTics--;
	}
	if (Player->ChickenTics)
	{
		ChickenPlayerThink();
	}

	// Move around.
	// ReactionTime is used to prevent movement
	//  for a bit after a teleport.
	if (ReactionTime)
	{
		ReactionTime -= deltaTime;
		if (ReactionTime <= 0.0)
			ReactionTime = 0.0;
		if (bWaterJump)
			WaterJump();
	}
	else
	{
		if (WaterLevel > 1)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
	}

	CalcHeight(deltaTime);

	if (Sector->special)
		PlayerInSpecialSector(deltaTime);
	PlayerInContents();

	// Check for weapon change.
	if (Player->Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Player->Buttons & BT_USE)
	{
		if (!Player->bUseDown)
		{
			P_UseLines(Player);
			Player->bUseDown = true;
		}
	}
	else
	{
		Player->bUseDown = false;
	}

	// Chicken counter
	if (Player->ChickenTics)
	{
		if (Player->ChickenPeck)
		{
			// Chicken attack counter
			Player->ChickenPeck -= 3;
		}
		if (!--Player->ChickenTics)
		{
			// Attempt to undo the chicken
			UndoPlayerChicken();
		}
	}

	// cycle psprites
	MovePsprites(Player);

	// Counters, time dependend power ups.

	if (Player->Powers[pw_invulnerability])
		Player->Powers[pw_invulnerability]--;

	if (Player->Powers[pw_invisibility])
		if (!--Player->Powers[pw_invisibility])
			Translucency = 0;

	if (Player->Powers[pw_infrared])
		Player->Powers[pw_infrared]--;

	if (Player->Powers[pw_flight])
	{
		if (!--Player->Powers[pw_flight])
		{
			if (Origin.z != FloorZ)
			{
//FIXME             player->centering = true;
			}

			bFly = false;
			bNoGravity = false;
		}
	}

	if (Player->Powers[pw_weaponlevel2])
	{
		if (!--Player->Powers[pw_weaponlevel2])
		{
			WeaponLevel2Fade(Player);
		}
	}

	if (Player->DamageCount)
		Player->DamageCount--;

	if (Player->BonusCount)
		Player->BonusCount--;

	// Handling colormaps.
	if (Player->Powers[pw_invulnerability])
	{
		if (Player->Powers[pw_invulnerability] > 4 * 32 ||
			(Player->Powers[pw_invulnerability] & 8))
			Player->FixedColormap = INVERSECOLORMAP;
		else
			Player->FixedColormap = 0;
	}
	else if (Player->Powers[pw_infrared])
	{
		if (Player->Powers[pw_infrared] <= ftoi(BLINKTHRESHOLD * 35.0))
		{
			if (Player->Powers[pw_infrared] & 8)
			{
				Player->FixedColormap = 0;
			}
			else
			{
				Player->FixedColormap = 1;
			}
		}
		else if (!(level->tictime & 16))
		{
			if (Player->NewTorch)
			{
				if (Player->FixedColormap + Player->NewTorchDelta > 7 ||
					Player->FixedColormap + Player->NewTorchDelta < 1 ||
					Player->FixedColormap == Player->NewTorch)
				{
					Player->NewTorch = 0;
				}
				else
				{
					Player->FixedColormap += Player->NewTorchDelta;
				}
			}
			else
			{
				Player->NewTorch = (P_Random() & 7) + 1;
				Player->NewTorchDelta =
					(Player->NewTorch == Player->FixedColormap) ? 0 :
					((Player->NewTorch > Player->FixedColormap) ? 1 : -1);
			}
		}
	}
	else
		Player->FixedColormap = 0;

	//	Need this for unmorphing
	if (!bIsPlayer)
	{
		Player = NULL;
	}
}

//==========================================================================
//
//  PlayerThink
//
//==========================================================================

void PlayerThink(player_t * player)
{
	PlayerPawn(player->MO).PlayerTick(frametime);
}

//==========================================================================
//
//  PlayerPawn::PaletteFlash
//
//  sets the new palette based upon current values of player->DamageCount
// and player->BonusCount
//
//==========================================================================

void PlayerPawn::PaletteFlash(void)
{
	Player->CShifts[CSHIFT_CONTENTS] = 0;
	if (WaterLevel == 3)
	{
		switch (WaterType)
		{
		case CONTENTS_WATER:
			Player->CShifts[CSHIFT_CONTENTS] = CSHIFT(130, 80, 50, 128);
			break;

		case CONTENTS_SLUDGE:
			Player->CShifts[CSHIFT_CONTENTS] = CSHIFT(128, 160, 128, 150);
			break;

		case CONTENTS_LAVA:
			Player->CShifts[CSHIFT_CONTENTS] = CSHIFT(255, 80, 0, 150);
			break;
		}
	}

	if (Player->DamageCount)
	{
		Player->Palette = (Player->DamageCount + 7) >> 3;
		if (Player->Palette >= NUMREDPALS)
		{
			Player->Palette = NUMREDPALS - 1;
		}
		Player->Palette += STARTREDPALS;
	}
	else if (Player->BonusCount)
	{
		Player->Palette = (Player->BonusCount + 7) >> 3;
		if (Player->Palette >= NUMBONUSPALS)
		{
			Player->Palette = NUMBONUSPALS - 1;
		}
		Player->Palette += STARTBONUSPALS;
	}
	else
	{
		Player->Palette = 0;
	}
}

//==========================================================================
//
//  PlayerPawn::SetViewPos
//
//==========================================================================

void PlayerPawn::SetViewPos(void)
{
	Player->ViewOrg.x = Origin.x;
	Player->ViewOrg.y = Origin.y;

	Player->ViewAngles = Angles;

	if (Player->ChickenTics && Player->ChickenPeck)
	{
		// Set chicken attack view position
		Player->ViewOrg.x += itof(Player->ChickenPeck) * cos(Angles.yaw);
		Player->ViewOrg.y += itof(Player->ChickenPeck) * sin(Angles.yaw);
	}

	PaletteFlash();

	Player->Stats.flags = Player->Keys;
	if (Player->Cheats & CF_GODMODE)
		Player->Stats.flags |= SBF_GOD_MODE;
	if (Player->Powers[pw_flight])
	{
		if (Player->Powers[pw_flight] > ftoi(BLINKTHRESHOLD * 35.0) ||
			!(Player->Powers[pw_flight] & 16))
		{
			Player->Stats.flags |= SBF_POWER_FLIGHT;
		}
	}
	if (Player->Powers[pw_weaponlevel2] && !Player->ChickenTics)
	{
		if (Player->Powers[pw_weaponlevel2] > ftoi(BLINKTHRESHOLD * 35.0) ||
			!(Player->Powers[pw_weaponlevel2] & 16))
		{
			Player->Stats.flags |= SBF_POWER_BOOK;
		}
	}
	if (bFly)
	{
		Player->Stats.flags |= SBF_IN_FLIGHT;
	}
	if (Player->InventoryTime)
	{
		Player->Stats.flags |= SBF_INVENTORY_OPEN;
	}

	if (Player->ReadyWeapon > 0 && Player->ReadyWeapon < 7)
		Player->Stats.readyammo = Player->Ammo[
			Weapon(Player->ViewEnts[ps_weapon]).Ammo];
	else
		Player->Stats.readyammo = 0;
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos(player_t * player)
{
	PlayerPawn(player->MO).SetViewPos();
}

//==========================================================================
//
//  PlayerPawn::UseArtiTele
//
//==========================================================================

void PlayerPawn::UseArtiTele(void)
{
	int i;
	int selections;
	float destX;
	float destY;
	float destAngle;

	if (deathmatch)
	{
		selections = level->numdeathmatchstarts;
		i = P_Random() % selections;
		destX = level->deathmatchstarts[i].x;
		destY = level->deathmatchstarts[i].y;
		destAngle = itof(45 * (level->deathmatchstarts[i].angle / 45));
	}
	else
	{
		destX = level->playerstarts[0].x;
		destY = level->playerstarts[0].y;
		destAngle = itof(45 * (level->playerstarts[0].angle / 45));
	}
	Teleport(destX, destY, destAngle);
	if (Player->ChickenTics)
	{
		// Teleporting away will undo any morph effects
		UndoPlayerChicken();
	}
}

//==========================================================================
//
//  PlayerPawn::UseArtifact
//
//  Returns true if the artifact was used.
//
//==========================================================================

boolean PlayerPawn::UseArtifact(int arti)
{
	switch (arti)
	{
	case arti_health:
		if (!GiveBody(25))
		{
			return false;
		}
		break;
	case arti_superhealth:
		if (!GiveBody(100))
		{
			return false;
		}
		break;
	case arti_invulnerability:
		if (!GivePower(pw_invulnerability))
		{
			return false;
		}
		break;
	case arti_torch:
		if (!GivePower(pw_infrared))
		{
			return false;
		}
		break;
	case arti_fly:
		if (!GivePower(pw_flight))
		{
			return false;
		}
		if (Velocity.z <= -35.0 * 35.0)
		{
			// stop falling scream
			StopSound(CHAN_VOICE);
		}
		break;
	case arti_teleport:
		UseArtiTele();
		break;
	case arti_egg:
		UseArtiEgg();
		break;
	case arti_invisibility:
		if (!GivePower(pw_invisibility))
		{
			return false;
		}
		break;
	case arti_tomeofpower:
		if (!UseArtiTomeOfPower())
		{
			return false;
		}
		break;
	case arti_firebomb:
		UseArtiFireBomb();
		break;
	default:
		return false;
	}
	return true;
}

//==========================================================================
//
//  PlayerPawn::PlayerUseArtifact
//
//==========================================================================

void PlayerPawn::PlayerUseArtifact(int arti)
{
	int i;

	for (i = 0; i < Player->InventorySlotNum; i++)
	{
		if (Player->Inventory[i].type == arti)
		{
			// Found match - try to use
			if (UseArtifact(arti))
			{
				// Artifact was used - remove it from inventory
				PlayerRemoveArtifact(i);
				PlaySound('UseArtifact', CHAN_ITEM);
				Player->ArtifactFlash = 4;
			}
			else
			{
				// Unable to use artifact, advance pointer
				PlayerNextArtifact();
			}
			break;
		}
	}
}

//==========================================================================
//
//  PlayerPawn::PlayerNextArtifact
//
//==========================================================================

void PlayerPawn::PlayerNextArtifact(void)
{
	Player->InvPtr--;
	if (Player->InvPtr < 6)
	{
		Player->InvCurPos--;
		if (Player->InvCurPos < 0)
		{
			Player->InvCurPos = 0;
		}
	}
	if (Player->InvPtr < 0)
	{
		Player->InvPtr = Player->InventorySlotNum - 1;
		if (Player->InvPtr < 6)
		{
			Player->InvCurPos = Player->InvPtr;
		}
		else
		{
			Player->InvCurPos = 6;
		}
	}
	Player->ReadyArtifact = Player->Inventory[Player->InvPtr].type;
}

//==========================================================================
//
//  PlayerPawn::PlayerRemoveArtifact
//
//==========================================================================

void PlayerPawn::PlayerRemoveArtifact(int slot)
{
	int i;

	Player->ArtifactCount--;
	if (!(--Player->Inventory[slot].count))
	{
		// Used last of a type - compact the artifact list
		Player->ReadyArtifact = arti_none;
		Player->Inventory[slot].type = arti_none;
		for (i = slot + 1; i < Player->InventorySlotNum; i++)
		{
			Player->Inventory[i - 1].type = Player->Inventory[i].type;
			Player->Inventory[i - 1].count = Player->Inventory[i].count;
		}
		Player->InventorySlotNum--;
		// Set position markers and get next ReadyArtifact
		Player->InvPtr--;
		if (Player->InvPtr < 6)
		{
			Player->InvCurPos--;
			if (Player->InvCurPos < 0)
			{
				Player->InvCurPos = 0;
			}
		}
		if (Player->InvPtr >= Player->InventorySlotNum)
		{
			Player->InvPtr = Player->InventorySlotNum - 1;
		}
		if (Player->InvPtr < 0)
		{
			Player->InvPtr = 0;
		}
		Player->ReadyArtifact = Player->Inventory[Player->InvPtr].type;
	}
}

//==========================================================================
//
//  G_PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialized
//
//==========================================================================

void G_PlayerReborn(int player)
{
	player_t *p;
	BotPlayer b;

	p = &players[player];

	b = p->Bot;
	ClearPlayer(p);
	p->Bot = b;

	p->bUseDown = true;	// don't do anything immediately
	p->bAttackDown = true;
	p->PlayerState = PST_LIVE;
	p->Health = MAXHEALTH;
	p->WeaponOwned[wp_staff] = true;
	p->WeaponOwned[wp_goldwand] = true;
	p->Ammo[am_goldwand] = 50;
	SetWeapon(p, wp_goldwand);

	p->InvPtr = 0;	// reset the inventory pointer
	p->InvCurPos = 0;
}

//==========================================================================
//
//  G_PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void G_PlayerExitMap(int player, boolean clusterChange)
{
	player_t *p;
	int i;

	p = &players[player];

	for (i = 0; i < NUMPOWERS; i++)
	{
		p->Powers[i] = 0;
	}
	if (clusterChange)
	{
		p->Keys = 0;
	}
	if (p->ChickenTics)
	{
		SetWeapon(p, p->MO.Special1);	// Restore weapon
		p->ChickenTics = 0;
	}
	p->Items = 0;
	p->MO.Angles.pitch = 0.0;
	p->MO.Translucency = 0;	// cancel invisibility
	p->ExtraLight = 0;	// cancel gun flashes
	p->FixedColormap = 0;	// cancel ir gogles
	p->DamageCount = 0;	// no palette changes 
	p->BonusCount = 0;
	p->Rain1 = NULL;
	p->Rain2 = NULL;

	for (i = 0; i < p->InventorySlotNum; i++)
	{
		p->Inventory[i].count = 1;
	}
	p->ArtifactCount = p->InventorySlotNum;

	if (!deathmatch)
	{
		for (i = 0; i < 16; i++)
		{
			PlayerPawn(p->MO).PlayerUseArtifact(arti_fly);
		}
	}
}

//==========================================================================
//
//  G_DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void G_DeathMatchSpawnPlayer(int playernum)
{
	int i;
	int j;

	// This check has been moved to p_setup.c:P_LoadThings()
//  if (selections < 4)
//      I_Error("Only %i deathmatch spots, 4 required", selections);

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % level->numdeathmatchstarts;
		if (G_CheckSpot(playernum, &level->deathmatchstarts[i]))
		{
			level->deathmatchstarts[i].type = playernum + 1;
			P_SpawnPlayer(&level->deathmatchstarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	P_SpawnPlayer(&level->playerstarts[playernum]);
}

//==========================================================================
//
//  G_DoReborn
//
//==========================================================================

void NetGameReborn(int playernum)
{
	int i;

	// respawn at the start

	// first dissasociate the corpse
	players[playernum].MO.Player = NULL;
	players[playernum].MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(playernum);
		return;
	}

	if (G_CheckSpot(playernum,
			&level->playerstarts[RebornPosition * MAXPLAYERS + playernum]))
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
				playernum]);
		return;
	}

	// try to spawn at one of the other players spots
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (G_CheckSpot(playernum,
				&level->playerstarts[RebornPosition * MAXPLAYERS + i]))
		{
			level->playerstarts[RebornPosition * MAXPLAYERS + i].type =
				playernum + 1;	// fake as other player
			P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
					i]);
			level->playerstarts[RebornPosition * MAXPLAYERS + i].type = i + 1;	// restore
			return;
		}
	}

	// he's going to be inside something.  Too bad.
	P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
			playernum]);
}

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer(player_t * player)
{
	player->ViewEnts[ps_weapon] = SpawnObject(Weapon, none);
	player->ViewEnts[ps_weapon].Player = player;
	player->ViewEnts[ps_flash] = SpawnObject(Weapon, none);
	player->ViewEnts[ps_flash].Player = player;
	if (player->bIsBot)
	{
		player->Bot = SpawnObject(BotPlayer, none);
		player->Bot.player = player;
		player->Bot.OnBeginPlay();
	}
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient(int i)
{
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(i);
	}
	else
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + i]);
	}
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient(player_t * player)
{
	int i;

	if (player->Bot != none)
	{
		player->Bot.Destroy();
		player->Bot = none;
	}
	if (player->MO)
	{
		player->MO.Player = NULL;
		player->MO.bIsPlayer = false;
		player->MO.Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (player->ViewEnts[i])
		{
			player->ViewEnts[i].Destroy();
			player->ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(player->Name));
	player->MO.PlayFullVolumeSound('Chat', CHAN_AUTO);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged(player_t * player)
{
	if (!player->bSpawned)
	{
		return;
	}
	player->MO.Translation = player->Color;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.33  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.32  2002/04/11 16:49:50  dj_jl
//  Tick function.
//
//  Revision 1.31  2002/03/28 18:15:34  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.30  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.29  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.28  2002/03/04 18:31:35  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.27  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.26  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.25  2002/02/22 18:00:19  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.24  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.23  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.22  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.21  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.20  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.19  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.18  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.17  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.16  2002/01/11 08:03:12  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.15  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.14  2002/01/03 18:31:57  dj_jl
//  Fixed view sprites
//
//  Revision 1.13  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.12  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//  Revision 1.11  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.10  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.9  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.8  2001/10/09 17:36:57  dj_jl
//  Added flags for status bar
//
//  Revision 1.7  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.6  2001/09/27 17:09:51  dj_jl
//  Changed LavaInflictor to pointer
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
