//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	KnightAxe
//
//**************************************************************************

class KnightAxe:Projectile
{

//==========================================================================
//
//  A_ContMobjSound
//
//==========================================================================

void A_ContMobjSound(void)
{
	PlaySound('KnightAttack1', CHAN_VOICE);
}

__states__
{
	S_SPINAXE1('SPAX', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPINAXE2) { A_ContMobjSound(); }
	S_SPINAXE2('SPAX', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPINAXE3) { }
	S_SPINAXE3('SPAX', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPINAXE1) { }
	S_SPINAXEX1('SPAX', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_SPINAXEX2) { }
	S_SPINAXEX2('SPAX', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_SPINAXEX3) { }
	S_SPINAXEX3('SPAX', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 8.0;
	Speed = 315.0;
	MissileDamage = 2;
	bWindThrust = true;
	bThruGhost = true;
	IdleState = S_SPINAXE1;
	DeathState = S_SPINAXEX1;
	DeathSound = 'SkullRodHit';
	Effects = EF_DL_GREEN;
}

}

//**************************************************************************
//
//	KnightRedAxe
//
//**************************************************************************

class KnightRedAxe:Projectile
{

//==========================================================================
//
//  A_DripBlood
//
//==========================================================================

void A_DripBlood(void)
{
	Actor mo;

	mo = Spawn(Blood, Origin + vector((Random() - Random()) * 8.0,
		(Random() - Random()) * 8.0, 0.0));
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.bNoGravity = false;
}

__states__
{
	S_REDAXE1('RAXE', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_REDAXE2) { A_DripBlood(); }
	S_REDAXE2('RAXE', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_REDAXE1) { A_DripBlood(); }
	S_REDAXEX1('RAXE', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_REDAXEX2) { }
	S_REDAXEX2('RAXE', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_REDAXEX3) { }
	S_REDAXEX3('RAXE', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 8.0;
	Speed = 315.0;
	MissileDamage = 7;
	bThruGhost = true;
	IdleState = S_REDAXE1;
	DeathState = S_REDAXEX1;
	DeathSound = 'SkullRodHit';
	Effects = EF_DL_RED;
}

}

//**************************************************************************
//
//	Knight
//
//**************************************************************************

class Knight:Pawn
	__mobjinfo__(64)
{

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff(void)
{
	DropItem(ItemAmmoCrossbowWimpy, 5, 0.328125);
}

//==========================================================================
//
//  A_KnightAttack
//
//==========================================================================

void A_KnightAttack(void)
{
	if (!Enemy)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(3));
		PlaySound('KnightAttack2', CHAN_WEAPON);
		return;
	}
	// Throw axe
	PlaySound(AttackSound, CHAN_WEAPON);
	if (Random() < 0.15625)
	{
		// Red axe
		SpawnMissile(Enemy, KnightRedAxe);
		return;
	}
	// Green axe
	SpawnMissile(Enemy, KnightAxe);
}

__states__
{
	S_KNIGHT_STND1('KNIG', 0, 'monsters/knight.md2', 0, 2.5 / 35.0, S_KNIGHT_STND2) { A_Look(); }
	S_KNIGHT_STND2('KNIG', 0, 'monsters/knight.md2', 1, 2.5 / 35.0, S_KNIGHT_STND3) { }
	S_KNIGHT_STND3('KNIG', 0, 'monsters/knight.md2', 2, 2.5 / 35.0, S_KNIGHT_STND4) { }
	S_KNIGHT_STND4('KNIG', 0, 'monsters/knight.md2', 3, 2.5 / 35.0, S_KNIGHT_STND5) { }
	S_KNIGHT_STND5('KNIG', 1, 'monsters/knight.md2', 4, 2.5 / 35.0, S_KNIGHT_STND6) { A_Look(); }
	S_KNIGHT_STND6('KNIG', 1, 'monsters/knight.md2', 5, 2.5 / 35.0, S_KNIGHT_STND7) { }
	S_KNIGHT_STND7('KNIG', 1, 'monsters/knight.md2', 6, 2.5 / 35.0, S_KNIGHT_STND8) { }
	S_KNIGHT_STND8('KNIG', 1, 'monsters/knight.md2', 7, 2.5 / 35.0, S_KNIGHT_STND1) { }
	S_KNIGHT_WALK1('KNIG', 0, 'monsters/knight.md2', 8, 2.0 / 35.0, S_KNIGHT_WALK2) { A_Chase(); }
	S_KNIGHT_WALK2('KNIG', 0, 'monsters/knight.md2', 9, 2.0 / 35.0, S_KNIGHT_WALK3) { }
	S_KNIGHT_WALK3('KNIG', 1, 'monsters/knight.md2', 10, 2.0 / 35.0, S_KNIGHT_WALK4) { A_Chase(); }
	S_KNIGHT_WALK4('KNIG', 1, 'monsters/knight.md2', 11, 2.0 / 35.0, S_KNIGHT_WALK5) { }
	S_KNIGHT_WALK5('KNIG', 2, 'monsters/knight.md2', 12, 2.0 / 35.0, S_KNIGHT_WALK6) { A_Chase(); }
	S_KNIGHT_WALK6('KNIG', 2, 'monsters/knight.md2', 13, 2.0 / 35.0, S_KNIGHT_WALK7) { }
	S_KNIGHT_WALK7('KNIG', 3, 'monsters/knight.md2', 14, 2.0 / 35.0, S_KNIGHT_WALK8) { A_Chase(); }
	S_KNIGHT_WALK8('KNIG', 3, 'monsters/knight.md2', 15, 2.0 / 35.0, S_KNIGHT_WALK1) { }
	S_KNIGHT_ATK1('KNIG', 4, 'monsters/knight.md2', 16, 1.0 / 35.0, S_KNIGHT_ATK2) { A_FaceTarget(); }
	S_KNIGHT_ATK2('KNIG', 4, 'monsters/knight.md2', 17, 3.0 / 35.0, S_KNIGHT_ATK3) { }
	S_KNIGHT_ATK3('KNIG', 4, 'monsters/knight.md2', 18, 3.0 / 35.0, S_KNIGHT_ATK4) { }
	S_KNIGHT_ATK4('KNIG', 4, 'monsters/knight.md2', 19, 3.0 / 35.0, S_KNIGHT_ATK5) { }
	S_KNIGHT_ATK5('KNIG', 5, 'monsters/knight.md2', 20, 4.0 / 35.0, S_KNIGHT_ATK6) { A_FaceTarget(); }
	S_KNIGHT_ATK6('KNIG', 5, 'monsters/knight.md2', 21, 4.0 / 35.0, S_KNIGHT_ATK7) { }
	S_KNIGHT_ATK7('KNIG', 6, 'monsters/knight.md2', 22, 4.0 / 35.0, S_KNIGHT_ATK8) { A_KnightAttack(); }
	S_KNIGHT_ATK8('KNIG', 6, 'monsters/knight.md2', 23, 4.0 / 35.0, S_KNIGHT_ATK9) { }
	S_KNIGHT_ATK9('KNIG', 4, 'monsters/knight.md2', 17, 4.0 / 35.0, S_KNIGHT_ATK10) { A_FaceTarget(); }
	S_KNIGHT_ATK10('KNIG', 4, 'monsters/knight.md2', 18, 3.0 / 35.0, S_KNIGHT_ATK11) { }
	S_KNIGHT_ATK11('KNIG', 4, 'monsters/knight.md2', 19, 3.0 / 35.0, S_KNIGHT_ATK12) { }
	S_KNIGHT_ATK12('KNIG', 5, 'monsters/knight.md2', 20, 4.0 / 35.0, S_KNIGHT_ATK13) { A_FaceTarget(); }
	S_KNIGHT_ATK13('KNIG', 5, 'monsters/knight.md2', 21, 4.0 / 35.0, S_KNIGHT_ATK14) { }
	S_KNIGHT_ATK14('KNIG', 6, 'monsters/knight.md2', 22, 4.0 / 35.0, S_KNIGHT_ATK15) { A_KnightAttack(); }
	S_KNIGHT_ATK15('KNIG', 6, 'monsters/knight.md2', 23, 4.0 / 35.0, S_KNIGHT_WALK1) { }
	S_KNIGHT_PAIN1('KNIG', 7, 'monsters/knight.md2', 24, 3.0 / 35.0, S_KNIGHT_PAIN2) { }
	S_KNIGHT_PAIN2('KNIG', 7, 'monsters/knight.md2', 25, 3.0 / 35.0, S_KNIGHT_WALK1) { A_Pain(); }
	S_KNIGHT_DIE1('KNIG', 8, 'monsters/knight.md2', 26, 6.0 / 35.0, S_KNIGHT_DIE2) { }
	S_KNIGHT_DIE2('KNIG', 9, 'monsters/knight.md2', 27, 6.0 / 35.0, S_KNIGHT_DIE3) { A_Scream(); }
	S_KNIGHT_DIE3('KNIG', 10, 'monsters/knight.md2', 28, 3.0 / 35.0, S_KNIGHT_DIE4) { }
	S_KNIGHT_DIE4('KNIG', 10, 'monsters/knight.md2', 29, 3.0 / 35.0, S_KNIGHT_DIE5) { }
	S_KNIGHT_DIE5('KNIG', 11, 'monsters/knight.md2', 30, 3.0 / 35.0, S_KNIGHT_DIE6) { A_NoBlocking(); }
	S_KNIGHT_DIE6('KNIG', 11, 'monsters/knight.md2', 31, 3.0 / 35.0, S_KNIGHT_DIE7) { }
	S_KNIGHT_DIE7('KNIG', 12, 'monsters/knight.md2', 32, 3.0 / 35.0, S_KNIGHT_DIE8) { }
	S_KNIGHT_DIE8('KNIG', 12, 'monsters/knight.md2', 33, 3.0 / 35.0, S_KNIGHT_DIE9) { }
	S_KNIGHT_DIE9('KNIG', 13, 'monsters/knight.md2', 34, 3.0 / 35.0, S_KNIGHT_DIE10) { }
	S_KNIGHT_DIE10('KNIG', 13, 'monsters/knight.md2', 35, 3.0 / 35.0, S_KNIGHT_DIE11) { }
	S_KNIGHT_DIE11('KNIG', 14, 'monsters/knight.md2', 36, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 200;
	Radius = 24.0;
	Height = 78.0;
	Mass = 150.0;
	StepSpeed = 12.0;
	PainChance = 0.390625;
	IdleState = S_KNIGHT_STND1;
	SeeState = S_KNIGHT_WALK1;
	MeleeState = S_KNIGHT_ATK1;
	MissileState = S_KNIGHT_ATK1;
	PainState = S_KNIGHT_PAIN1;
	DeathState = S_KNIGHT_DIE1;
	SightSound = 'KnightSight';
	ActiveSound = 'KnightActive';
	AttackSound = 'KnightAttack1';
	PainSound = 'KnightPain';
	DeathSound = 'KnightDeath';
}

}

//**************************************************************************
//
//	KnightGhost
//
//**************************************************************************

class KnightGhost:Knight
	__mobjinfo__(65)
{

//==========================================================================
//
//  A_KnightAttack
//
//==========================================================================

void A_KnightAttack(void)
{
	if (!Enemy)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(3));
		PlaySound('KnightAttack2', CHAN_WEAPON);
		return;
	}
	// Throw axe
	PlaySound(AttackSound, CHAN_WEAPON);
	SpawnMissile(Enemy, KnightRedAxe);
}

defaultproperties
{
	Translucency = 33;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.26  2002/07/13 07:58:51  dj_jl
//  Added new models, updated existing ones.
//
//  Revision 1.25  2002/06/22 07:16:00  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.24  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.23  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.22  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.21  2002/03/09 17:57:01  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.20  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.19  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.18  2002/02/22 18:00:16  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.17  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.16  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.15  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.14  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.12  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.6  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
