//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Thing line specials
//**
//**************************************************************************

classid TranslateThingType[] =
{
	MapSpot,	// T_NONE
	Clink,
	MummyLeader,
	Beast,
	Mummy,
	Imp,
	Knight,
	ImpLeader,
	MummyGhost,
	MummyLeaderGhost,

	ImpBall,	// 10
	ItemAmmoGoldWandWimpy,
	ItemAmmoGoldWandHefty,
	MapSpot,
	ArtifactEgg,
	ArtifactFly,
	MapSpot,
	MapSpot,
	ArtifactTeleport,
	Wizard,

	Head,	// 20
	MapSpot/*Bridge*/,
	MapSpot,
	ItemHealthPotion,
	ArtifactHealthFlask,
	ArtifactSuperHeal,
	MapSpot,
	ItemWeaponCrossbow,
	ItemWeaponBlaster,
	ItemWeaponPhoenixRod,

	ItemWeaponSkullRod,	// 30
	MapSpot,
	ItemWeaponGauntlets,
	ItemAmmoCrossbowWimpy,
	ItemAmmoCrossbowHefty,
	ItemAmmoMaceWimpy,
	ItemAmmoMaceHefty,
	ItemAmmoBlasterWimpy,
	ItemAmmoBlasterHefty,
	MapSpot,

	EggMissile,	// 40
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	MapSpot,	// 50
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	MapSpot,	// 60
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	ItemShield1,
	ItemShield2,

	MapSpot,	// 70
	MapSpot,
	ArtifactFireBomb/*FireBomb*/,
	ArtifactTorch,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	MapSpot,	// 80
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	ItemKeyBlue,
	ItemKeyGreen,
	ItemKeyYellow,
	MapSpot,
	MapSpot,

	MapSpot,	// 90
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	MapSpot,	// 100
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	SoundWind,	// 110
	SoundWaterfall,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	BeastBall,	// 120
	Feather,
	Chicken,
	VolcanoBlast,
	VolcanoTBlast,
	Pod,
	PodGenerator,
	KnightAxe,
	KnightRedAxe,
	KnightGhost,

	Blood,	// 130
	MummyMissile,
	Snake,
	ArtifactInvulnerability,
	ArtifactTomeOfPower,
	ArtifactInvisibility,
	ItemBagOfHolding,
	ItemMap,
	SnakeProjectileA,
	SnakeProjectileB,

	WizardMissile,	// 140
	MapSpot/*BossSpot*/,
	Sorcerer1,
	Sorcerer2,
	Sorcerer1Missile,
	Sorcerer2Missile1,
	Sorcerer2Missile2,
	CrossbowFX1,
	CrossbowFX2,
	CrossbowFX3,

	Volcano,	// 150
	GoldWandMissile1,
	GoldWandMissile2,
	MaceFX4,
	MaceFX1,
	MaceFX3,
	MaceFX2,
	Ripper,
	ItemAmmoSkullRodWimpy,
	ItemAmmoSkullRodHefty,

	HornRodMissile1,	// 160
	ItemAmmoPhoenixWimpy,
	ItemAmmoPhoenixHefty,
	PhoenixFX1,
	HeadMissile1,
	WhirlWind,
	TeleGlitter,
	TeleGlitter2
};

//==========================================================================
//
//	EV_ThingProjectile
//
//==========================================================================

bool EV_ThingProjectile(int *args, bool gravity, int newtid)
{
	int tid;
	float angle;
	float speed;
	float vspeed;
	classid moType;
	Actor A;
	Actor newA;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	tid = args[0];
	moType = TranslateThingType[args[1]];
	angle = itof(args[2]) * (360.0 / 256.0);
	speed = itof(args[3]) / 8.0;
	vspeed = itof(args[4]) / 8.0;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		newA = Spawn(moType, A.Origin);
		if (newA.SightSound)
		{
			newA.PlaySound(newA.SightSound, CHAN_VOICE);
		}
		newA.Instigator = A;	// Originator
		newA.Angles.yaw = angle;
		newA.Velocity.x = speed * cos(angle) * 35.0;
		newA.Velocity.y = speed * sin(angle) * 35.0;
		newA.Velocity.z = vspeed * 35.0;
		newA.bDropped = true;	// Don't respawn
		if (gravity)
		{
			newA.bNoGravity = false;
			newA.Mass = 12.5;
		}
		if (newtid)
			newA.InsertIntoTIDList(newtid);
		if (newA.CheckMissileSpawn())
		{
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	EV_ThingSpawn
//
//==========================================================================

bool EV_ThingSpawn(int *args, bool fog)
{
	int tid;
	float angle;
	Actor A;
	Actor newAct;
	Actor fogAct;
	classid moType;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	tid = args[0];
	moType = TranslateThingType[args[1]];
	angle = itof(args[2]) * 360.0 / 256.0;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		newAct = Spawn(moType, A.Origin);
		if (newAct.bFloatBob)
		{
			newAct.Origin.z = A.Origin.z - A.FloorZ;
			newAct.SetOrigin2(newAct.Origin);
		}
		if (newAct.TestLocation() == false)
		{
			// Didn't fit
			newAct.Remove();
		}
		else
		{
			newAct.Angles.yaw = angle;
			if (args[3])
				newAct.InsertIntoTIDList(args[3]);
			if (fog == true)
			{
				fogAct = Spawn(TeleportFog, A.Origin + vector(0.0, 0.0,
					TELEFOGHEIGHT));
				fogAct.PlaySound('misc/teleport', CHAN_VOICE);
			}
			newAct.bDropped = true;	// Don't respawn
			if (newAct.bFloatBob)
			{
				newAct.Special1f = newAct.Origin.z - newAct.FloorZ;
			}
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	EV_ThingActivate
//
//==========================================================================

bool EV_ThingActivate(int tid)
{
	Actor A;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		if (A.Activate())
		{
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	EV_ThingDeactivate
//
//==========================================================================

bool EV_ThingDeactivate(int tid)
{
	Actor A;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		if (A.Deactivate())
		{
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	EV_ThingRemove
//
//==========================================================================

bool EV_ThingRemove(int tid)
{
	Actor A;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		A.RemoveThing();
		success = true;
	}
	return success;
}

//==========================================================================
//
//	EV_ThingDestroy
//
//==========================================================================

bool EV_ThingDestroy(int tid)
{
	Actor A;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		if (A.bShootable)
		{
			A.Damage(none, none, 10000);
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	ThingCount
//
//==========================================================================

int ThingCount(int type, int tid)
{
	int count;
	int searcher;
	Actor Ent;
	classid moType;

	if (!(type + tid))
	{
		// Nothing to count
		return 0;
	}
	moType = TranslateThingType[type];
	count = 0;
	searcher = -1;
	if (tid)
	{
		// Count TID things
		for (Ent = Actor(FindMobjFromTID(tid, &searcher)); Ent != none;
			Ent = Actor(FindMobjFromTID(tid, &searcher)))
		{
			if (type == 0)
			{
				// Just count TIDs
				count++;
			}
			else if (moType == Ent.Class)
			{
				if (Ent.bCountKill && Ent.Health <= 0)
				{
					// Don't count dead monsters
					continue;
				}
				count++;
			}
		}
	}
	else
	{
		// Count only types
		FOREACH(Actor, Ent)
		{
			if (Ent.Class != moType)
			{
				// Doesn't match
				continue;
			}
			if (Ent.bCountKill && Ent.Health <= 0)
			{
				// Don't count dead monsters
				continue;
			}
			count++;
		}
	}
	return count;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.4  2005/11/18 23:36:50  dj_jl
//  Renamed sounds.
//
//  Revision 1.3  2005/03/16 15:04:22  dj_jl
//  More work on line specials.
//
//  Revision 1.2  2004/12/27 12:23:13  dj_jl
//  Multiple small changes for version 1.16
//
//  Revision 1.1  2004/11/01 07:38:22  dj_jl
//  Almost all Hexen line specials are available in all games.
//
//**************************************************************************
