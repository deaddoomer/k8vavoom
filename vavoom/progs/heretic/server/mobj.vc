//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

classid PuffType;

//==========================================================================
//
//  CopyMThing
//
//==========================================================================

void CopyMThing(mthing_t * from, mthing_t * to)
{
	to->tid = from->tid;
	to->x = from->x;
	to->y = from->y;
	to->height = from->height;
	to->angle = from->angle;
	to->type = from->type;
	to->options = from->options;
	to->special = from->special;
	to->arg1 = from->arg1;
	to->arg2 = from->arg2;
	to->arg3 = from->arg3;
	to->arg4 = from->arg4;
	to->arg5 = from->arg5;
}

//===========================================================================
//
//  Spawn
//
//===========================================================================

Actor Spawn(classid type, TVec AOrigin)
{
	Actor A;

	A = Actor(NewMobjThinker(type));

	A.Origin = AOrigin;
	A.OnMapSpawn(NULL);
	return A;
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(TVec org)
{
	Actor puff;

	org.z += (Random() - Random()) * 4.0;
	puff = Spawn(PuffType, org);
	if (puff.AttackSound)
	{
		puff.PlaySound(puff.AttackSound, CHAN_VOICE);
	}
	switch (PuffType)
	{
	case BeakPuff:
	case StaffPuff:
		puff.Velocity.z = 1.0 * 35.0;
		break;
	case GauntletPuff1:
	case GauntletPuff2:
		puff.Velocity.z = 0.8 * 35.0;
	default:
		break;
	}
	if (PuffType == GoldWandPuff1)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion);
		MSG_WriteByte(EF_DL_WHITE);
		MSG_WriteShort(ftoi(org.x));
		MSG_WriteShort(ftoi(org.y));
		MSG_WriteShort(ftoi(org.z));
	}
	if (PuffType == BlasterPuff1)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion);
		MSG_WriteByte(EF_DL_BLUE);
		MSG_WriteShort(ftoi(org.x));
		MSG_WriteShort(ftoi(org.y));
		MSG_WriteShort(ftoi(org.z));
	}
}

//==========================================================================
//
//  P_SpawnPlayer
//
//  Called when a player is spawned on the level
//  Most of the player structure stays unchanged between levels
//
//==========================================================================

void P_SpawnPlayer(mthing_t * mthing)
{
	Player p;
	float x, y, z;
	Actor A;

	p = svvars->Players[mthing->type - 1];

	if (!p)
		return;	// not playing

	if (p.PlayerState == PST_REBORN)
	{
		G_PlayerReborn(mthing->type - 1);
	}
	x = mthing->x;
	y = mthing->y;

	z = ONFLOORZ;
	A = Spawn(HereticPlayer, vector(x, y, z));
	// set color translations for player sprites
	A.Translation = p.Color;

	A.Angles.yaw = itof(45 * (mthing->angle / 45));
	A.Player = p;
	A.bIsPlayer = true;
	A.Health = p.Health;
	p.MO = A;
	p.PlayerState = PST_LIVE;
	p.Refire = 0;
	p.DamageFlash = 0.0;
	p.BonusFlash = 0.0;
	p.ChickenTime = 0.0;
	p.Rain1 = none;
	p.Rain2 = none;
	p.ExtraLight = 0;
	p.FixedColormap = 0;
	p.ViewHeight = VIEWHEIGHT;
	p.ViewAngles = A.Angles;
	p.bFixAngle = true;
	SetupPsprites(p);	// setup gun psprite
	if (deathmatch)
	{
		// Give all keys in death match mode
		p.Keys = 7;
	}
	if (p.bIsBot)
	{
		p.Bot.OnSpawn();
	}
}

//==========================================================================
//
//  P_SpawnMapThing
//
//==========================================================================

void P_SpawnMapThing(mthing_t * mthing, bool spawn_thinkers)
{
	int i;
	int bit;
	Actor A;
	int spawnMask;

	if (mthing->type <= 0)
	{
		return;
	}

	// count deathmatch start positions
	if (mthing->type == 11)
	{
		if (level->numdeathmatchstarts < MAXDEATHMATCHSTARTS)
		{
			CopyMThing(mthing,
				&level->deathmatchstarts[level->numdeathmatchstarts]);
			level->numdeathmatchstarts++;
		}
		return;
	}

	// check for players specially
	if (mthing->type <= 4)
	{
		// save spots for respawning in network games
		CopyMThing(mthing,
			&level->playerstarts[mthing->arg1 * MAXPLAYERS + mthing->type -
				1]);
		return;
	}

	// Ambient sound sequences
	if (mthing->type >= 1200 && mthing->type < 1300)
	{
		P_AddAmbientSfx(mthing->type - 1200);
		return;
	}

	// Check for boss spots
	if (mthing->type == 56)	// Monster_BossSpot
	{
		AddBossSpot(mthing->x, mthing->y, itof(45 * (mthing->angle / 45)));
		return;
	}

	if (mthing->type == PO_SPAWN_TYPE || mthing->type == PO_SPAWNCRUSH_TYPE)
	{
		// Polyobj StartSpot Pt.
		SpawnPolyobj(mthing->x, mthing->y, mthing->angle,
			(mthing->type == PO_SPAWNCRUSH_TYPE));
		return;
	}
	if (mthing->type == PO_ANCHOR_TYPE)
	{
		// Polyobj Anchor Pt.
		AddAnchorPoint(mthing->x, mthing->y, mthing->angle);
		return;
	}

	// Check current game type with spawn flags
	if (netgame == false)
	{
		spawnMask = MTF_GSINGLE;
	}
	else if (deathmatch)
	{
		spawnMask = MTF_GDEATHMATCH;
	}
	else
	{
		spawnMask = MTF_GCOOP;
	}
	if (!(mthing->options & spawnMask))
	{
		return;
	}

	// check for apropriate skill level
	if (gameskill == sk_baby)
		bit = 1;
	else if (gameskill == sk_nightmare)
		bit = 4;
	else
		bit = 1 << (gameskill - 1);
	if (!(mthing->options & bit))
		return;

	// find which type to spawn
	for (i = 0; i < num_mobj_types; i++)
		if (mthing->type == mobjinfo[i].doomednum)
			break;

	if (i == num_mobj_types)
	{
		dprint("P_SpawnMapThing: Unknown type %i at (%f, %f)",
			mthing->type, mthing->x, mthing->y);
		return;
	}

	// spawn it
	switch (mobjinfo[i].class_id)
	{
		// Special stuff
	case ItemWeaponSkullRod:
	case ItemWeaponPhoenixRod:
	case ItemAmmoSkullRodWimpy:
	case ItemAmmoSkullRodHefty:
	case ItemAmmoPhoenixWimpy:
	case ItemAmmoPhoenixHefty:
	case ItemAmmoMaceWimpy:
	case ItemAmmoMaceHefty:
	case ArtifactSuperHeal:
	case ArtifactTeleport:
	case ItemShield2:
		if (shareware)
		{
			// Don't place on map in shareware version
			return;
		}
		break;
	case ItemWeaponMace:
		if (!shareware)
		{
			// Put in the mace spot list
			AddMaceSpot(mthing->x, mthing->y);
			return;
		}
		return;
	default:
		break;
	}
	if (!spawn_thinkers)
	{
		return;
	}

	A = Actor(NewMobjThinker(mobjinfo[i].class_id));
	A.OnMapSpawn(mthing);
}

//**************************************************************************
//
//      NOISE ALERT
//
//**************************************************************************

Actor soundtarget;

//==========================================================================
//
//  P_RecursiveSound
//
//  Called by P_NoiseAlert. Recursively traverse adjacent sectors, sound
// blocking lines cut off traversal.
//
//==========================================================================

void P_RecursiveSound(sector_t * sec, int soundblocks)
{
	int i;
	line_t *check;
	sector_t *other;

	// wake up all monsters in this sector
	if (sec->validcount == *validcount &&
		sec->soundtraversed <= soundblocks + 1)
	{
		return;	// already flooded
	}

	sec->validcount = *validcount;
	sec->soundtraversed = soundblocks + 1;
	sec->SoundTarget = soundtarget;

	for (i = 0; i < sec->linecount; i++)
	{
		check = sec->lines[i];
		if (!(check->flags & ML_TWOSIDED))
			continue;

		if (!LineOpenings(check, *check->v1))
		{
			if (!LineOpenings(check, *check->v2))
				continue;	// closed door
		}

		if (GLevel.Sides[check->sidenum[0]].sector == sec)
			other = GLevel.Sides[check->sidenum[1]].sector;
		else
			other = GLevel.Sides[check->sidenum[0]].sector;

		if (check->flags & ML_SOUNDBLOCK)
		{
			if (!soundblocks)
				P_RecursiveSound(other, 1);
		}
		else
			P_RecursiveSound(other, soundblocks);
	}
}

//==========================================================================
//
//  P_NoiseAlert
//
//  If a monster yells at a player, it will alert other monsters to the
// player.
//
//==========================================================================

void P_NoiseAlert(Actor target, Actor emmiter)
{
	soundtarget = target;
	(*validcount)++;
	P_RecursiveSound(emmiter.Sector, 0);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.52  2003/11/12 16:49:44  dj_jl
//  Changed player structure into a class
//
//  Revision 1.51  2003/07/11 16:47:39  dj_jl
//  Made array of players with pointers
//
//  Revision 1.50  2003/03/08 12:34:46  dj_jl
//  Removing class pointers.
//
//  Revision 1.49  2002/10/26 16:32:24  dj_jl
//  New style of defining classes.
//
//  Revision 1.48  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.47  2002/07/23 16:31:44  dj_jl
//  Beautification.
//
//  Revision 1.46  2002/07/23 13:07:30  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.45  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.44  2002/06/29 15:58:14  dj_jl
//  Added total frags count.
//
//  Revision 1.43  2002/06/22 07:16:00  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.42  2002/06/14 15:47:53  dj_jl
//  Added state names to the states.
//
//  Revision 1.41  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.40  2002/04/11 16:52:14  dj_jl
//  Made TryMove native.
//
//  Revision 1.39  2002/03/28 18:15:34  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.38  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.37  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.36  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.35  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.34  2002/02/22 18:00:17  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.33  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.32  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.31  2002/02/09 18:13:46  dj_jl
//  Added flags that determines what line blocking flags to check
//
//  Revision 1.30  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.29  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.28  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.27  2002/01/29 18:11:23  dj_jl
//  Added dormant things
//
//  Revision 1.26  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.25  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.24  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.23  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.22  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.21  2002/01/15 08:10:57  dj_jl
//  Added P_CheckRelPosition
//
//  Revision 1.20  2002/01/12 18:00:47  dj_jl
//  Sound names initialized as names
//
//  Revision 1.19  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.18  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.17  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.16  2001/12/18 18:35:26  dj_jl
//  Added polyobjs
//
//  Revision 1.15  2001/12/12 18:57:41  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.14  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//  Revision 1.13  2001/12/01 18:14:09  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.12  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.11  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.10  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.9  2001/10/09 17:41:17  dj_jl
//  Beautification
//
//  Revision 1.8  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.7  2001/09/27 17:08:19  dj_jl
//  Removed spawn functions, added mobj classes
//
//  Revision 1.6  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.5  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.4  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.3  2001/07/31 16:59:30  dj_jl
//  Set model when spawning object
//
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
