//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define MAXCHICKENHEALTH 30
#define VIEWHEIGHT		41.0

#define BLINKTHRESHOLD 	4.0

#define INVULNTIME		30.0
#define INVISTIME		60.0
#define INFRATIME		120.0
#define WPNLEV2TIME 	40.0
#define FLIGHTTIME 		60.0
#define CHICKENTIME 	40.0

#define FOOTCLIPSIZE	10.0
#define TELEFOGHEIGHT 	32.0

#define BASETHRESHOLD	100	// follow a player exlusively for 3 seconds

#define	MTF_EASY		0x0001	// Skill flags.
#define	MTF_NORMAL		0x0002
#define	MTF_HARD		0x0004
#define	MTF_AMBUSH		0x0008	// Deaf monsters/do not react to sound.
#define MTF_DORMANT		0x0010	// The thing is dormant
#define MTF_FIGHTER		0x0020	// Thing appearing in player classes
#define MTF_CLERIC		0x0040
#define MTF_MAGE		0x0080
#define MTF_GSINGLE		0x0100	// Appearing in game modes
#define MTF_GCOOP		0x0200
#define MTF_GDEATHMATCH	0x0400

#define ONFLOORZ		-99999.0
#define ONCEILINGZ		99999.0
#define FLOATRANDZ		99998.0

//
// Player internal flags, for cheats and debug.
//
#define CF_NOCLIP		1	// No clipping, walk through barriers.
#define CF_GODMODE		2	// No damage, no health loss.

#define MELEERANGE		64.0
#define MISSILERANGE	(32.0 * 64.0)

#define LOWERSPEED		6.0
#define RAISESPEED		6.0

#define WEAPONBOTTOM	128.0
#define WEAPONTOP		32.0

// 16 pixels of bob
#define MAXBOB			16.0

#define MAXHEALTH		100

enum
{
	PO_ANCHOR_TYPE = 3000,
	PO_SPAWN_TYPE,
	PO_SPAWNCRUSH_TYPE
};

//#define POLY_SEQ_NAME(num)		va("Sequence%d", num)
#define POLY_SEQ_NAME(num)		'Sequence0'

#define SECRET_MASK		0x0400

//
// -------- Inter -----------------
//

#define BONUSADD				0.2

// Keys

#define TXT_GOTBLUEKEY			"BLUE KEY"
#define TXT_GOTYELLOWKEY		"YELLOW KEY"
#define TXT_GOTGREENKEY			"GREEN KEY"

// Artifacts

#define TXT_ARTIHEALTH			"QUARTZ FLASK"
#define TXT_ARTIFLY				"WINGS OF WRATH"
#define TXT_ARTIINVULNERABILITY	"RING OF INVINCIBILITY"
#define TXT_ARTITOMEOFPOWER		"TOME OF POWER"
#define TXT_ARTIINVISIBILITY	"SHADOWSPHERE"
#define TXT_ARTIEGG				"MORPH OVUM"
#define TXT_ARTISUPERHEALTH		"MYSTIC URN"
#define TXT_ARTITORCH			"TORCH"
#define TXT_ARTIFIREBOMB		"TIME BOMB OF THE ANCIENTS"
#define TXT_ARTITELEPORT		"CHAOS DEVICE"

// Items

#define TXT_ITEMHEALTH			"CRYSTAL VIAL"
#define TXT_ITEMBAGOFHOLDING	"BAG OF HOLDING"
#define TXT_ITEMSHIELD1			"SILVER SHIELD"
#define TXT_ITEMSHIELD2			"ENCHANTED SHIELD"
#define TXT_ITEMSUPERMAP		"MAP SCROLL"

// Ammo

#define TXT_AMMOGOLDWAND1		"WAND CRYSTAL"
#define TXT_AMMOGOLDWAND2		"CRYSTAL GEODE"
#define TXT_AMMOMACE1			"MACE SPHERES"
#define TXT_AMMOMACE2			"PILE OF MACE SPHERES"
#define TXT_AMMOCROSSBOW1		"ETHEREAL ARROWS"
#define TXT_AMMOCROSSBOW2		"QUIVER OF ETHEREAL ARROWS"
#define TXT_AMMOBLASTER1		"CLAW ORB"
#define TXT_AMMOBLASTER2		"ENERGY ORB"
#define TXT_AMMOSKULLROD1		"LESSER RUNES"
#define TXT_AMMOSKULLROD2		"GREATER RUNES"
#define TXT_AMMOPHOENIXROD1		"FLAME ORB"
#define TXT_AMMOPHOENIXROD2		"INFERNO ORB"

// Weapons

#define TXT_WPNMACE				"FIREMACE"
#define TXT_WPNCROSSBOW			"ETHEREAL CROSSBOW"
#define TXT_WPNBLASTER			"DRAGON CLAW"
#define TXT_WPNSKULLROD			"HELLSTAFF"
#define TXT_WPNPHOENIXROD		"PHOENIX ROD"
#define TXT_WPNGAUNTLETS		"GAUNTLETS OF THE NECROMANCER"

#define AMMO_GWND_WIMPY 		10
#define AMMO_GWND_HEFTY 		50
#define AMMO_CBOW_WIMPY 		5
#define AMMO_CBOW_HEFTY 		20
#define AMMO_BLSR_WIMPY 		10
#define AMMO_BLSR_HEFTY 		25
#define AMMO_SKRD_WIMPY 		20
#define AMMO_SKRD_HEFTY 		100
#define AMMO_PHRD_WIMPY 		1
#define AMMO_PHRD_HEFTY 		10
#define AMMO_MACE_WIMPY 		20
#define AMMO_MACE_HEFTY 		100

//
// ------------ User ------------------
//

#define INVERSECOLORMAP		32

#define STARTREDPALS	1
#define STARTBONUSPALS	9
#define NUMREDPALS		8
#define NUMBONUSPALS	4

//
// ----------- Physics ----------------
//

#define	FLOATSPEED		140.0

#define	MAXMOVE			1050.0
#define STOPSPEED		2.1875

#define FRICTION_NORMAL	3.28125
#define FRICTION_LOW	0.95703125
#define FRICTION_FLY	2.87109375
#define FRICTION_WATER	3.0

//
// -------------- Weapons --------------
//

#define USE_GWND_AMMO_1	1
#define USE_GWND_AMMO_2 1
#define USE_CBOW_AMMO_1 1
#define USE_CBOW_AMMO_2 1
#define USE_BLSR_AMMO_1 1
#define USE_BLSR_AMMO_2 5
#define USE_SKRD_AMMO_1 1
#define USE_SKRD_AMMO_2 5
#define USE_PHRD_AMMO_1 1
#define USE_PHRD_AMMO_2 1
#define USE_MACE_AMMO_1 1
#define USE_MACE_AMMO_2 5

#define MAX_MACE_SPOTS	8

//
// -------------- Enemy ---------------
//

#define BODYQUESIZE		32

#define MONS_LOOK_RANGE (20.0 * 64.0)
#define MONS_LOOK_LIMIT 64

#define USERANGE	64.0

// CONSTANTS ---------------------------------------------------------------

enum
{
	FLOOR_SOLID,
	FLOOR_WATER,
	FLOOR_LAVA,
	FLOOR_SLUDGE
};

enum
{
	CONTENTS_EMPTY,
	CONTENTS_WATER,
	CONTENTS_LAVA,
	CONTENTS_SLUDGE,

	CONTENTS_SOLID = -1
};

enum
{
	CSHIFT_CONTENTS
};

enum
{
	wp_staff,
	wp_goldwand,
	wp_crossbow,
	wp_blaster,
	wp_skullrod,
	wp_phoenixrod,
	wp_mace,
	wp_gauntlets,
	wp_beak,

	NUMWEAPONS,

	// No pending weapon change.
	wp_nochange
};

// Ammunition types defined.
enum
{
	am_goldwand,
	am_crossbow,
	am_blaster,
	am_skullrod,
	am_phoenixrod,
	am_mace,

	NUMAMMO,

	am_noammo	// staff, gauntlets
};

enum
{
	key_yellow,
	key_green,
	key_blue,
	NUMKEYS
};

// Power up artifacts.
enum
{
	pw_invulnerability,
	pw_invisibility,
	pw_infrared,
	pw_weaponlevel2,
	pw_flight,
	NUMPOWERS
};

enum
{
	CHAN_AUTO,
	CHAN_VOICE,
	CHAN_WEAPON,
	CHAN_ITEM,
	CHAN_BODY
};

#define MAX_TAGGED_LINES	64

enum
{
	DOOREV_Close,
	DOOREV_Open,
	DOOREV_Raise,
	DOOREV_RaiseLocked,
	DOOREV_CloseWaitOpen,
	DOOREV_RaiseIn5Mins
};

enum
{
	FLOOREV_LowerToHighest,
	FLOOREV_RaiseToHighest,
	FLOOREV_LowerToLowest,
	FLOOREV_LowerToNearest,
	FLOOREV_RaiseToNearest,
	FLOOREV_RaiseToLowestCeiling,
	FLOOREV_LowerByValue,
	FLOOREV_RaiseByValue,
	FLOOREV_LowerByValueTimes8,
	FLOOREV_RaiseByValueTimes8,
	FLOOREV_LowerTimes8Instant,
	FLOOREV_RaiseTimes8Instant,
	FLOOREV_MoveToValueTimes8,
	FLOOREV_RaiseByTexture,
	FLOOREV_LowerToLowestChange,
	FLOOREV_RaiseToNearestChange,
	FLOOREV_RaiseByValueChange,
	FLOOREV_RaiseByValueChange2,
	FLOOREV_RaiseAndCrush,
	FLOOREV_RaiseBuildStep,
	FLOOREV_Generic,
	FLOOREV_GenericChange0,
	FLOOREV_GenericChangeT,
	FLOOREV_GenericChange,
	FLOOREV_Donut
};

enum
{
	ELEVEV_Down,
	ELEVEV_Up,
	ELEVEV_Current,
	ELEVEV_Raise,
	ELEVEV_Lower
};

enum
{
	STAIRSEV_DownNormal,
	STAIRSEV_UpNormal,
	STAIRSEV_DownSync,
	STAIRSEV_UpSync
};

enum
{
	WGLSTATE_EXPAND,
	WGLSTATE_STABLE,
	WGLSTATE_REDUCE
};

enum
{
	CEILEV_LowerToFloor,
	CEILEV_LowerToHighestFloor,
	CEILEV_LowerToLowest,
	CEILEV_RaiseToHighest,
	CEILEV_RaiseToNearest,
	CEILEV_LowerByValue,
	CEILEV_RaiseByValue,
	CEILEV_LowerByValueTimes8,
	CEILEV_RaiseByValueTimes8,
	CEILEV_LowerTimes8Instant,
	CEILEV_RaiseTimes8Instant,
	CEILEV_MoveToValueTimes8,
	CEILEV_LowerAndCrush,
	CEILEV_CrushAndRaise,
	CEILEV_CrushRaiseAndStay,
	CEILEV_CrushAndRaiseA,
	CEILEV_CrushAndRaiseSilA,
	CEILEV_CrushRaiseAndStayA,
	CEILEV_CrushRaiseAndStaySilA,
	CEILEV_Generic,
	CEILEV_GenericChange0,
	CEILEV_GenericChangeT,
	CEILEV_GenericChange,
	CEILEV_GenericCrush
};

enum
{
	PLAT_Up,
	PLAT_Down,
	PLAT_Waiting,
	PLAT_InStasis
};

enum
{
	PLATEV_PerpetualRaise,
	PLATEV_PerpetualRaiseLip,
	PLATEV_DownWaitUpStay,
	PLATEV_DownWaitUpStayLip,
	PLATEV_DownNearestWaitUpStay,
	PLATEV_DownLowestCeilingWaitUpStay,
	PLATEV_DownByValueWaitUpStay,
	PLATEV_UpWaitDownStay,
	PLATEV_UpNearestWaitDownStay,
	PLATEV_UpByValueWaitDownStay,
	PLATEV_Toggle,
	PLATEV_Generic
};

#define	STROBEBRIGHT	5
#define	FASTDARK		15
#define	SLOWDARK		35

enum
{
	LIGHTEV_Fade,
	LIGHTEV_Glow,
	LIGHTEV_Flicker,
	LIGHTEV_Strobe
};

enum
{
	SCROLLEV_Side,
	SCROLLEV_Floor,
	SCROLLEV_Ceiling,
	SCROLLEV_Carry
};

enum
{
	PUSHER_Push,
	PUSHER_Pull,
	PUSHER_Wind,
	PUSHER_Current
};

enum
{
	PODOOR_NONE,
	PODOOR_SLIDE,
	PODOOR_SWING
};

// TYPES -------------------------------------------------------------------

class PolyobjThinker;

addfields polyobj_t
{
	PolyobjThinker SpecialData;	// pointer a thinker, if the poly is moving
};

struct tagged_line_t
{
	line_t *line;
	int lineTag;
};

/*

  Class definitions for botinfo, chatinfo, and
  other various bot information thingamabobers.
*/

enum
{
	bsk_verypoor,
	bsk_poor,
	bsk_low,
	bsk_medium,
	bsk_high,
	bsk_excellent,
	bsk_supreme
};

struct botinfo_t
{
	string Name;		// Bot's name*/
	int accuracy;		// Accuracy with "instant" weapons (this includes "leading")
	int intelect;		// Accuracy with "missile" weapons (rocket launcher, etc.)
	int evade;			// Ability to dodge incoming missiles
	int anticip;		// Ability to anticipate "instant" shots
	int reaction;		// Overall reaction time (lower is "better")
/*	int pisschance;		// Chance the bot will get pissed when his threshold is reached
	int threshold;		// How much it takes to frustrate/piss off the bot
	int dangerlevel;	// When health is below this, we need some health
	int wpfav;			// Favorite weapon
	int chatinfo;		// Bot's chat strings
	int chattime;		// How long it takes us to type a line
	int chatty;			// How talkative the bot is
	char *color;		// Color (in form of a string)
	char *gender;		// Male/female/it :)
	char *skin;			// Skin
	int railcolor;		// Railgun trail color
	bool revealed;		// Hidden bots must be revealed*/
	string userinfo;
};

/*struct chatline_t
{
	char		*string;
	chattype_t  bot;
	chatline_t	*line;
};

struct chatinfo_t
{
	chatline_t		intro[5];
	chatline_t		inter[5];
	chatline_t		rare[5];
	chatline_t		frag[15];
	chatline_t		died[10];
	chatline_t		roam[10];
	chatline_t		pissed[5];
	chatline_t		frustrated[5];
	chatline_t		special[20];
} chatinfo_t;*/

/*

  The bot class, prototypes and definitions be here!

*/

#define FORWARDWALK		200.0
#define FORWARDRUN		400.0
#define SIDEWALK		192.0
#define SIDERUN			320.0

/*#define MAX_TRAVERSE_DIST			(1024*FRACUNIT)	//10 meters, used within b_func.c*/
#define AVOID_DIST					512.0	//Try avoid incoming missiles once they reached this close
#define SAFE_SELF_MISDIST			128.0	//Distance from self to target where it's safe to pull a rocket.
/*#define FRIEND_DIST					(128*FRACUNIT)	//To friend.
#define DARK_DIST					(256*FRACUNIT)	//Distance that bot can see enemies in the dark from.
#define WHATS_DARK					64				//light value thats classed as dark.
#define MAX_MONSTER_TARGET_DIST		(1024*FRACUNIT)	//Too high can slow down the performance, see P_mobj.c*/
#define ENEMY_SCAN_FOV				120.0
/*#define MAXMOVEHEIGHT				(32*FRACUNIT)	//MAXSTEPMOVE but with jumping counted in.
#define GETINCOMBAT					(512*FRACUNIT)	//Max distance to item. if it's due to be icked up in a combat situation.*/
#define SHOOTFOV					60.0
/*#define MAXROAM						(5*TICRATE)		//When this time is elapsed the bot will roam after something else.*/

// The things the bot knows about their enemy
//struct enemyinfo_t
//{
//	int				health;
//	weapontype_t	weap;
//};

//
// Bot states
//
enum
{
	// Deciding what to do
	BST_NOTHING,
	// Bot is "fetching" something (skull, whatever)
	BST_OFFENSE,
	// Bot is defending something
	BST_DEFENSE,
	// Bot is heading to scoring place
	BST_RETURN
};

class BotPlayer;

#define NUMTOTALBOTS	8
#define	NUMBOTTYPES		8

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int num_stats = NUM_STATS + 7 + 2 * NUMARTIFACTS;

float FloatBobOffsets[64] = {
	0.0, 0.7841339111, 1.560714722, 2.322265625,
	3.061462402, 3.77116394, 4.444549561, 5.075134277,
	5.656845093, 6.184082031, 6.651748657, 7.055358887,
	7.391021729, 7.655517578, 7.8462677, 7.961471558,
	7.999984741, 7.961471558, 7.8462677, 7.655517578,
	7.391021729, 7.055358887, 6.651748657, 6.184082031,
	5.656845093, 5.075134277, 4.444549561, 3.77116394,
	3.061462402, 2.322265625, 1.560714722, 0.7841339111,
	-0.0000152587, -0.7841491699, -1.56072998, -2.322280884,
	-3.061477661, -3.771179199, -4.444564819, -5.075149536,
	-5.656860352, -6.18409729, -6.651763916, -7.055374146,
	-7.391052246, -7.655532837, -7.846298218, -7.961486816,
	-8.0, -7.961486816, -7.846298218, -7.655532837,
	-7.391052246, -7.055374146, -6.651763916, -6.18409729,
	-5.656860352, -5.075149536, -4.444564819, -3.771179199,
	-3.061477661, -2.322280884, -1.56072998, -0.7841339111
};

tagged_line_t TaggedLines[MAX_TAGGED_LINES];
int TaggedLineCount;

string keymsg[] = {
	"YOU NEED A YELLOW KEY TO OPEN THIS DOOR",
	"YOU NEED A GREEN KEY TO OPEN THIS DOOR",
	"YOU NEED A BLUE KEY TO OPEN THIS DOOR"
};

int PhaseTable[64] = {
	128, 112, 96, 80, 64, 48, 32, 32,
	16, 16, 16, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 16, 16, 16,
	32, 32, 48, 64, 80, 96, 112, 128
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//
//
//==========================================================================

//**************************************************************************
//
//  $Log$
//  Revision 1.40  2005/12/27 22:22:28  dj_jl
//  Created level info class, moved action special handling to it.
//
//  Revision 1.39  2005/12/11 21:31:40  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.38  2003/11/12 16:49:44  dj_jl
//  Changed player structure into a class
//
//  Revision 1.37  2003/03/08 12:34:46  dj_jl
//  Removing class pointers.
//
//  Revision 1.36  2002/10/26 16:32:24  dj_jl
//  New style of defining classes.
//
//  Revision 1.35  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.34  2002/08/28 16:36:39  dj_jl
//  Merged MapObject with Entity, some natives, beautification.
//
//  Revision 1.33  2002/07/23 13:07:30  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.32  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.31  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.30  2002/04/11 16:50:53  dj_jl
//  Made TryMove native, Tick function.
//
//  Revision 1.29  2002/03/28 18:31:13  dj_jl
//  Translated sector specials.
//
//  Revision 1.28  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.27  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.26  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.25  2002/03/04 18:31:35  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.24  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.23  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.22  2002/02/22 18:00:19  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.21  2002/02/16 16:27:44  dj_jl
//  Added bool variables
//
//  Revision 1.20  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.18  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/01/29 18:10:31  dj_jl
//  Added MCROSS and PCROSS flags
//
//  Revision 1.16  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.15  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.13  2002/01/12 18:00:47  dj_jl
//  Sound names initialized as names
//
//  Revision 1.12  2002/01/11 18:16:34  dj_jl
//  Moved here Actor and Weapon class declarations
//
//  Revision 1.11  2002/01/11 08:03:12  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.10  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.8  2001/12/18 18:29:22  dj_jl
//  Added Hexen action specials
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//  Revision 1.5  2001/12/01 18:08:53  dj_jl
//  Physics functions as methods, started to use class references
//
//  Revision 1.4  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.3  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.2  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.1  2001/10/09 17:35:46  dj_jl
//  Split server defines into seperate file
//
//**************************************************************************
