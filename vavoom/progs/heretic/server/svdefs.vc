//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define MAXCHICKENHEALTH 30
#define VIEWHEIGHT		41.0

#define BLINKTHRESHOLD 	4.0

#define INVULNTIME		30.0
#define INVISTIME		60.0
#define INFRATIME		120.0
#define WPNLEV2TIME 	40.0
#define FLIGHTTIME 		60.0
#define CHICKENTIME 	40.0

#define FLAME_THROWER_TIME	10.0
#define MAGIC_JUNK			1234

#define FOOTCLIPSIZE	10.0
#define TELEFOGHEIGHT 	32.0

#define BASETHRESHOLD	100	// follow a player exlusively for 3 seconds

#define	MTF_EASY		0x0001	// Skill flags.
#define	MTF_NORMAL		0x0002
#define	MTF_HARD		0x0004
#define	MTF_AMBUSH		0x0008	// Deaf monsters/do not react to sound.
#define MTF_DORMANT		0x0010	// The thing is dormant
#define MTF_FIGHTER		0x0020	// Thing appearing in player classes
#define MTF_CLERIC		0x0040
#define MTF_MAGE		0x0080
#define MTF_GSINGLE		0x0100	// Appearing in game modes
#define MTF_GCOOP		0x0200
#define MTF_GDEATHMATCH	0x0400

#define ONFLOORZ		-99999.0
#define ONCEILINGZ		99999.0
#define FLOATRANDZ		99998.0

//
// Player internal flags, for cheats and debug.
//
#define CF_NOCLIP		1	// No clipping, walk through barriers.
#define CF_GODMODE		2	// No damage, no health loss.

#define MELEERANGE		64.0
#define MISSILERANGE	(32.0 * 64.0)

#define LOWERSPEED		6.0
#define RAISESPEED		6.0

#define WEAPONBOTTOM	128.0
#define WEAPONTOP		32.0

// 16 pixels of bob
#define MAXBOB			16.0

#define MAXHEALTH		100

enum
{
	PO_ANCHOR_TYPE = 3000,
	PO_SPAWN_TYPE,
	PO_SPAWNCRUSH_TYPE
};

//#define POLY_SEQ_NAME(num)		va("Sequence%d", num)
#define POLY_SEQ_NAME(num)		'Sequence0'

// CONSTANTS ---------------------------------------------------------------

enum
{
	FLOOR_SOLID,
	FLOOR_WATER,
	FLOOR_LAVA,
	FLOOR_SLUDGE
};

enum
{
	CONTENTS_EMPTY,
	CONTENTS_WATER,
	CONTENTS_LAVA,
	CONTENTS_SLUDGE,

	CONTENTS_SOLID = -1
};

enum
{
	CSHIFT_CONTENTS
};

enum
{
	wp_staff,
	wp_goldwand,
	wp_crossbow,
	wp_blaster,
	wp_skullrod,
	wp_phoenixrod,
	wp_mace,
	wp_gauntlets,
	wp_beak,

	NUMWEAPONS,

	// No pending weapon change.
	wp_nochange
};

// Ammunition types defined.
enum
{
	am_goldwand,
	am_crossbow,
	am_blaster,
	am_skullrod,
	am_phoenixrod,
	am_mace,

	NUMAMMO,

	am_noammo	// staff, gauntlets
};

enum
{
	key_yellow,
	key_green,
	key_blue,
	NUMKEYS
};

// Power up artifacts.
enum
{
	pw_invulnerability,
	pw_invisibility,
	pw_infrared,
	pw_weaponlevel2,
	pw_flight,
	NUMPOWERS
};

enum
{
	CHAN_AUTO,
	CHAN_VOICE,
	CHAN_WEAPON,
	CHAN_ITEM,
	CHAN_BODY
};

// TYPES -------------------------------------------------------------------

class Actor:Entity
{
	//  States
	int SpawnState;
	int SeeState;
	int PainState;
	int MeleeState;
	int MissileState;
	int CrashState;
	int DeathState;
	int GibsDeathState;

	//  Sounds
	name SightSound;
	name ActiveSound;
	name AttackSound;
	name PainSound;
	name DeathSound;

	//	Flags
	bool bSpecial;		// call P_SpecialThing when touched
	bool bShootable;	// Can be hit.
	bool bAmbush;		// Ambush
	bool bJustHit;		// try to attack right back
	bool bJustAttacked;	// take at least one step before attacking
	bool bSpawnCeiling;	// hang from ceiling instead of floor
	bool bNoGravity;	// don't apply gravity every tic
	// movement flags
	bool bDropOff;		// allow jumps from high places
	bool bPickUp;		// for players to pick up items
	bool bFloat;		// allow moves to any height, no gravity
	bool bTeleport;		// don't cross lines or look at heights
	bool bMissile;		// don't hit same species, explode on block
	bool bDropped;		// dropped by a demon, not level spawned
	bool bNoBlood;		// don't bleed when shot (use puff)
	bool bCorpse;		// don't stop moving halfway off a step
	bool bInFloat;		// floating to a height for a move, don't
						// auto float to target's height
	bool bCountKill;	// count towards intermission kill total
	bool bCountItem;	// count towards intermission item total
	bool bLowGravity;	// alternate gravity setting
	bool bWindThrust;	// gets pushed around by the wind specials
	bool bFloorBounce;	// bounces off the floor
	bool bThruGhost;	// missile will pass through ghosts
	bool bFly;			// fly mode is active
	bool bFootClip;		// if feet are allowed to be clipped
	bool bSpawnFloat;	// spawn random float z
	bool bNoTeleport;	// does not teleport
	bool bRip;			// missile rips through solid targets
	bool bPushable;		// can be pushed by other moving mobjs
	bool bSlide;		// slides against walls
	bool bOnMobj;		// mobj is resting on top of another mobj
	bool bCannotPush;	// cannot push other pushable mobjs
	bool bBoss;			// mobj is a major boss
	bool bFireDamage;	// does fire damage
	bool bNoDamageThrust;	// does not thrust target when damaging
	bool bTelestomp;	// mobj can stomp another
	bool bFloatBob;		// use float bobbing z movement
	bool bActivateMCross;	// can activate monster cross lines
	bool bActivatePCross;	// can activate projectile cross lines
	bool bDormant;		// thing is dormant
	bool bWaterJump;
	bool bBlaster;

	//  Params
	float Mass;
	float Speed;
	float StepSpeed;
	int PainChance;
	int SpawnHealth;
	int GibsHealth;

	// Thing being chased/attacked (or NULL).
	Actor Enemy;
	// The originator for missiles.
	Actor Owner;

	int Special1;	// Special info
	int Special2;	// Special info
	mobj_t *SpecialMobj1;
	mobj_t *SpecialMobj2;
	classid SpecialCID;

	int MissileDamage;	// For missiles

	// Player number last looked for.
	int LastLook;

	// For nightmare respawn.
	mthing_t SpawnSpot;

	// Reaction time: if non 0, don't attack yet.
	int ReactionCount;
	// Used by player to freeze a bit after teleporting.
	float ReactionTime;

	// If >0, the target will be chased
	// no matter what (even if shot)
	int Threshold;

	// Movement direction, movement generation (zig-zagging).
	int MoveDir;	// 0-7
	int MoveCount;	// when 0, select a new dir

	//  Water
	int WaterLevel;
	int WaterType;

	boolean GiveAmmo(int ammo, int count);
	boolean GiveWeapon(int weapon);
	boolean GiveBody(int num);
	boolean GiveArmor(int armortype);
	boolean GiveKey(int key);
	boolean GivePower(int power);
	boolean GiveItem(int item);
	boolean GiveArtifact(int arti, Actor mo);
	void TouchSpecial(Actor Toucher);

	boolean	Touch(MapObject Other);

	void Think(void);
	void Archive(void);
	void Unarchive(void);

	int GetFloorType(void);
	void SetOrigin2(TVec origin);
	void OnMapSpawn(mthing_t *mthing);
	int FaceActor(Actor target, float * delta);
	void ExplodeMissile(void);
	void Kill(Actor source);
	void MinotaurSlam(Actor Other);
	void TouchWhirlwind(Actor Other);
	boolean ChickenMorphPlayer(void);
	boolean ChickenMorph(void);
	boolean AutoUseChaosDevice(void);
	void AutoUseHealth(int saveHealth);
	void Damage(Actor inflictor, Actor source, int damage);
	void SpawnBloodSplatter(TVec org);
	void SpawnRipperBlood(void);
	int HitFloorEffect(void);
	void FloorBounceMissile(void);
	void Thrust(float angle, float move);
	void NightmareRespawn(void);

	// Physics
	void SlideMove(void);
#if 0
	void BounceWall(void);
#endif
	boolean CheckWater(void);
	void UpdateVelocity(void);
	void XYMovement(void);
	void FakeZMovement(void);
	boolean Iter_CheckOnmobjZ(Actor thing);
	Actor CheckOnmobj(void);
	void ZMovement(void);
	boolean BlasterPhysics(void);
	boolean Physics(void);

	boolean CheckMeleeRange(void);
	boolean CheckMissileRange(void);
	boolean LookForMonsters(void);
	boolean LookForPlayers(boolean allaround);
	boolean StepMove(void);
	boolean TryWalk(void);
	void NewChaseDir(void);

	boolean UpdateChicken(int tics);
	void DropItem(classid type, int special, int chance);
	void DSparilTeleport(void);

	// Action functions
	void A_FreeTargMobj(void);
	void A_RestoreSpecialThing1(void);
	void A_RestoreSpecialThing2(void);
	void A_HideThing(void);
	void A_UnHideThing(void);
	void A_RestoreArtifact(void);
	void A_Scream(void);
	void A_Explode(void);
	void A_PodPain(void);
	void A_RemovePod(void);
	void A_MakePod(void);
	void A_InitKeyGizmo(void);
	void A_VolcanoSet(void);
	void A_VolcanoBlast(void);
	void A_BeastPuff(void);
	void A_VolcBallImpact(void);
	void A_SpawnTeleGlitter(void);
	void A_SpawnTeleGlitter2(void);
	void A_AccTeleGlitter(void);
	void A_SpawnRippers(void);
	void A_MacePL1Check(void);
	void A_MaceBallImpact(void);
	void A_MaceBallImpact2(void);
	void A_DeathBallImpact(void);
	void A_SkullRodPL2Seek(void);
	void A_AddPlayerRain(void);
	void A_HideInCeiling(void);
	void A_SkullRodStorm(void);
	void A_RainImpact(void);
	void A_PhoenixPuff(void);
	void A_FlameEnd(void);
	void A_FloatPuff(void);
	void A_BoltSpark(void);
	void A_Pain(void);
	void A_NoBlocking(void);
	void A_AddPlayerCorpse(void);
	void A_SkullPop(void);
	void A_FlameSnd(void);
	void A_CheckBurnGone(void);
	void A_CheckSkullFloor(void);
	void A_CheckSkullDone(void);
	void A_Feathers(void);
	void A_ChicLook(void);
	void A_ChicChase(void);
	void A_ChicPain(void);
	void A_FaceTarget(void);
	void A_ChicAttack(void);
	void A_Look(void);
	void A_Chase(void);
	void A_MummyAttack(void);
	void A_MummyAttack2(void);
	void A_MummySoul(void);
	void A_ContMobjSound(void);
	void A_MummyFX1Seek(void);
	void A_BeastAttack(void);
	void A_SnakeAttack(void);
	void A_SnakeAttack2(void);
	void A_HeadAttack(void);
	void A_BossDeath(void);
	void A_HeadIceImpact(void);
	void A_HeadFireGrow(void);
	void A_WhirlwindSeek(void);
	void A_ClinkAttack(void);
	void A_WizAtk1(void);
	void A_WizAtk2(void);
	void A_WizAtk3(void);
	void A_GhostOff(void);
	void A_ImpMeAttack(void);
	void A_ImpMsAttack(void);
	void A_ImpMsAttack2(void);
	void A_ImpDeath(void);
	void A_ImpXDeath1(void);
	void A_ImpXDeath2(void);
	void A_ImpExplode(void);
	void A_KnightAttack(void);
	void A_DripBlood(void);
	void A_Sor1Chase(void);
	void A_Sor1Pain(void);
	void A_Srcr1Attack(void);
	void A_SorZap(void);
	void A_SorcererRise(void);
	void A_SorRise(void);
	void A_SorSightSnd(void);
	void A_Srcr2Decide(void);
	void A_Srcr2Attack(void);
	void A_Sor2DthInit(void);
	void A_SorDSph(void);
	void A_Sor2DthLoop(void);
	void A_SorDExp(void);
	void A_SorDBon(void);
	void A_BlueSpark(void);
	void A_GenWizard(void);
	void A_MinotaurAtk1(void);
	void A_MinotaurDecide(void);
	void A_MinotaurAtk2(void);
	void A_MinotaurAtk3(void);
	void A_MinotaurCharge(void);
	void A_MntrFloorFire(void);
	void A_ESound(void);
}

class Weapon:ViewEntity
{
	void A_Light0(void);
	void A_WeaponReady(void);
	void A_Lower(void);
	void A_Raise(void);
	void A_StaffAttackPL1(void);
	void A_ReFire(void);
	void A_StaffAttackPL2(void);
	void A_BeakReady(void);
	void A_BeakRaise(void);
	void A_BeakAttackPL1(void);
	void A_BeakAttackPL2(void);
	void A_GauntletAttack(void);
	void A_FireBlasterPL1(void);
	void A_FireBlasterPL2(void);
	void A_FireMacePL1(void);
	void A_FireMacePL2(void);
	void A_FireSkullRodPL1(void);
	void A_FireSkullRodPL2(void);
	void A_FireGoldWandPL1(void);
	void A_FireGoldWandPL2(void);
	void A_FirePhoenixPL1(void);
	void A_InitPhoenixPL2(void);
	void A_FirePhoenixPL2(void);
	void A_ShutdownPhoenixPL2(void);
	void A_FireCrossbowPL1(void);
	void A_FireCrossbowPL2(void);
}

/*

  Class definitions for botinfo, chatinfo, and
  other various bot information thingamabobers.
*/

enum
{
	bsk_verypoor,
	bsk_poor,
	bsk_low,
	bsk_medium,
	bsk_high,
	bsk_excellent,
	bsk_supreme
};

struct botinfo_t
{
	string Name;		// Bot's name*/
	int accuracy;		// Accuracy with "instant" weapons (this includes "leading")
	int intelect;		// Accuracy with "missile" weapons (rocket launcher, etc.)
	int evade;			// Ability to dodge incoming missiles
	int anticip;		// Ability to anticipate "instant" shots
	int reaction;		// Overall reaction time (lower is "better")
/*	int pisschance;		// Chance the bot will get pissed when his threshold is reached
	int threshold;		// How much it takes to frustrate/piss off the bot
	int dangerlevel;	// When health is below this, we need some health
	int wpfav;			// Favorite weapon
	int chatinfo;		// Bot's chat strings
	int chattime;		// How long it takes us to type a line
	int chatty;			// How talkative the bot is
	char *color;		// Color (in form of a string)
	char *gender;		// Male/female/it :)
	char *skin;			// Skin
	int railcolor;		// Railgun trail color
	bool revealed;		// Hidden bots must be revealed*/
	string userinfo;
};

/*struct chatline_t
{
	char		*string;
	chattype_t  bot;
	chatline_t	*line;
};

struct chatinfo_t
{
	chatline_t		intro[5];
	chatline_t		inter[5];
	chatline_t		rare[5];
	chatline_t		frag[15];
	chatline_t		died[10];
	chatline_t		roam[10];
	chatline_t		pissed[5];
	chatline_t		frustrated[5];
	chatline_t		special[20];
} chatinfo_t;*/

/*

  The bot class, prototypes and definitions be here!

*/

#define FORWARDWALK		200.0
#define FORWARDRUN		400.0
#define SIDEWALK		192.0
#define SIDERUN			320.0

/*#define MAX_TRAVERSE_DIST			(1024*FRACUNIT)	//10 meters, used within b_func.c*/
#define AVOID_DIST					512.0	//Try avoid incoming missiles once they reached this close
#define SAFE_SELF_MISDIST			128.0	//Distance from self to target where it's safe to pull a rocket.
/*#define FRIEND_DIST					(128*FRACUNIT)	//To friend.
#define DARK_DIST					(256*FRACUNIT)	//Distance that bot can see enemies in the dark from.
#define WHATS_DARK					64				//light value thats classed as dark.
#define MAX_MONSTER_TARGET_DIST		(1024*FRACUNIT)	//Too high can slow down the performance, see P_mobj.c*/
#define ENEMY_SCAN_FOV				120.0
/*#define MAXMOVEHEIGHT				(32*FRACUNIT)	//MAXSTEPMOVE but with jumping counted in.
#define GETINCOMBAT					(512*FRACUNIT)	//Max distance to item. if it's due to be icked up in a combat situation.*/
#define SHOOTFOV					60.0
/*#define MAXROAM						(5*TICRATE)		//When this time is elapsed the bot will roam after something else.*/

// The things the bot knows about their enemy
//struct enemyinfo_t
//{
//	int				health;
//	weapontype_t	weap;
//};

//
// Bot states
//
enum
{
	// Deciding what to do
	BST_NOTHING,
	// Bot is "fetching" something (skull, whatever)
	BST_OFFENSE,
	// Bot is defending something
	BST_DEFENSE,
	// Bot is heading to scoring place
	BST_RETURN
};

// Main bot class
class BotPlayer:Object
{
	player_t *player;		// Points to reference player
	Actor botmo;

	// Destinations
	Actor item;			// Item (roam towards weapon, etc)
	boolean itemIsWeapon;
	boolean itemIsPowerup;
	Actor goal;			// Teamgame goal spot
	Actor node;			// Node we're heading towards
	Actor prev;			// Previous node we were at
	TVec posdest;			// Position of our destination (doesn't have to be an actor)
	boolean posdest_valid;
	Actor enemy;			// The dead meat.
	TVec lastpos;			// Last place we saw our enemy
	boolean lastpos_valid;
	Actor missile;			// A threathing missile that got to be avoided.

	Actor ally;			// Ally to tag along with
/*	AActor		*last_mate;	// If bots mate dissapeared (not if died) that mate is
							// pointed to by this. Allows bot to roam to it if
							// necessary.

	enemyinfo_t	enemyinfo;	// Things we know about our enemy

	botstate_t	state;		// What we're doing in teamgame mode

	fixed_t		lastx;		// Last known x location of bot's enemy (go there if enemy goes out of sight)
	fixed_t		lasty;		// Last known y location of bot's enemy

	// Tickers

	float t_respawn;*/
	float t_strafe;
	float t_react;
/*	float t_fight;
	float t_rocket;
	float t_turn;
	float t_pissed;
	float t_frust;*/
	float t_fire;			// Tics left until our gun will actually fire again
	float t_anticip;
/*	float t_chat;			// Tics left until bots completes "typing" in what he's saying.
							// Bot also doesn't do anything during this time.*/

	float forwardmove;	// For building ucmd
	float sidemove;

	// Misc booleans
	boolean allround;
	boolean newItemIsWeapon;
	boolean newItemIsPowerup;

/*	chatline_t	*chatline;	// For when t_chat expires

	bottype_t	bottype;	// Bot type*/
	botinfo_t info;			// Aiming, name, perfection, yadda yadda

/*	fixed_t		oldx;
	fixed_t		oldy;

	int			thingnum;*/
	int angerlevel;

/*	AActor		*things[NUMMOBJTYPES];*/
	float combatdist[NUMWEAPONS + 1]; //different for each weapon.

	float angle;			// The wanted angle that the bot tries to get every tic.

/*	void LinkToPlayer (int playernum);*/

	void OnBeginPlay(void);
	void OnSpawn(void);
	void Think(void);
	boolean CheckTo(TVec pos);
	void CheckStuff(void);
	float GetAngle(void);
	boolean CheckPath(float ang, float dist);
	void SetEnemy(void);
	Actor FindEnemy(void);
	boolean Check_LOS(Actor to, float vangle);
	boolean CheckItem(Actor item);
	void Scan(void);
	int WeapFromItem(Actor item);
	int AmmoFromItem(Actor item);
	void Move(void);
	void SetAngle(float an);
	void Roam(void);
	float AngleTo(TVec dest);
	void Attack(void);
	void Turn(void);
	void BotAim(void);
	void Pitch(void);
	int SkillLower(int skill, int num);
	void Killed(Actor victim);
	void Died(Actor killer);
}

addfields player_t
{
	//
	//  FIRST FIELDS ARE STATS THAT ARE SENT TO CLIENT FOR STATUS BAR
	//

	sb_stats_t Stats;

	int InventoryTics;

	int ArtifactFlash;
	int InvPtr;
	int InvCurPos;

	int ArmorPoints;

	int ReadyArtifact;
	inventory_t Inventory[NUMARTIFACTS];
	int InventorySlotNum;

	int ReadyWeapon;

	//
	//  ----------
	//

	int Ammo[NUMAMMO];

	int ChickenTics;	// player is a chicken if > 0

	// Power ups. invinc and invis are tic counters.
	int Powers[NUMPOWERS];

	int Keys;

	int Arti;	// artitype_t to use

	// Base height above floor for viewz.
	float ViewHeight;
	// Bob/squat speed.
	float DeltaViewHeight;
	// bounded/scaled total momentum.
	float Bob;

	float FlyHeight;

	int ArtifactCount;

	// Refired shots are less accurate.
	int Refire;

	boolean Backpack;

	// Bit flags, for cheats and debug.
	// See cheat_t, above.
	int Cheats;

	// Is wp_nochange if not changing.
	int PendingWeapon;

	int w_Ammo;
	int w_UpState;
	int w_DownState;
	int w_ReadyState;
	int w_AttackState;
	int w_HoldAttackState;
	int w_FlashState;
	int w2_Ammo;
	int w2_UpState;
	int w2_DownState;
	int w2_ReadyState;
	int w2_AttackState;
	int w2_HoldAttackState;
	int w2_FlashState;

	boolean WeaponOwned[NUMWEAPONS];

	// Who did damage (NULL for floors/ceilings).
	mobj_t *Attacker;

	// For screen flashing (red or bright).
	int DamageCount;
	int BonusCount;

	int FlameCount;	// for flame thrower duration

	int JumpTics;

	// Armor type is 0-2.
	int ArmorType;

	int ChickenPeck;	// chicken peck countdown
	mobj_t *Rain1;	// active rain maker 1
	mobj_t *Rain2;	// active rain maker 2

	int NewTorch;	// used in the torch flicker effect.
	int NewTorchDelta;

	TVec MoveDir;

	BotPlayer Bot;
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int num_stats = NUM_STATS + 9 + 2 * NUMARTIFACTS;

float FloatBobOffsets[64] = {
	0.0, 0.7841339111, 1.560714722, 2.322265625,
	3.061462402, 3.77116394, 4.444549561, 5.075134277,
	5.656845093, 6.184082031, 6.651748657, 7.055358887,
	7.391021729, 7.655517578, 7.8462677, 7.961471558,
	7.999984741, 7.961471558, 7.8462677, 7.655517578,
	7.391021729, 7.055358887, 6.651748657, 6.184082031,
	5.656845093, 5.075134277, 4.444549561, 3.77116394,
	3.061462402, 2.322265625, 1.560714722, 0.7841339111,
	-0.0000152587, -0.7841491699, -1.56072998, -2.322280884,
	-3.061477661, -3.771179199, -4.444564819, -5.075149536,
	-5.656860352, -6.18409729, -6.651763916, -7.055374146,
	-7.391052246, -7.655532837, -7.846298218, -7.961486816,
	-8.0, -7.961486816, -7.846298218, -7.655532837,
	-7.391052246, -7.055374146, -6.651763916, -6.18409729,
	-5.656860352, -5.075149536, -4.444564819, -3.771179199,
	-3.061477661, -2.322280884, -1.56072998, -0.7841339111
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//
//
//==========================================================================

//**************************************************************************
//
//  $Log$
//  Revision 1.23  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.22  2002/02/22 18:00:19  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.21  2002/02/16 16:27:44  dj_jl
//  Added bool variables
//
//  Revision 1.20  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.18  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/01/29 18:10:31  dj_jl
//  Added MCROSS and PCROSS flags
//
//  Revision 1.16  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.15  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.13  2002/01/12 18:00:47  dj_jl
//  Sound names initialized as names
//
//  Revision 1.12  2002/01/11 18:16:34  dj_jl
//  Moved here Actor and Weapon class declarations
//
//  Revision 1.11  2002/01/11 08:03:12  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.10  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.8  2001/12/18 18:29:22  dj_jl
//  Added Hexen action specials
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//  Revision 1.5  2001/12/01 18:08:53  dj_jl
//  Physics functions as methods, started to use class references
//
//  Revision 1.4  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.3  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.2  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.1  2001/10/09 17:35:46  dj_jl
//  Split server defines into seperate file
//
//**************************************************************************
