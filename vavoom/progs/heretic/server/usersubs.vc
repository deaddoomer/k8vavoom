//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

void UpdateBeak(player_t * player, ViewEntity e);
void PostChickenWeapon(player_t * player, int weapon);
void SetPsprite(player_t * player, int position, int stnum);

class TLavaInflictor:Actor
{
	void Think(void)
	{
	}

	void Archive(void)
	{
	}

	void Unarchive(void)
	{
		LavaInflictor = this;
	}

	defaultproperties
	{
		bNoClient = true;
		bNoBlockmap = true;
		bFireDamage = true;
		bNoDamageThrust = true;
	}
}

//==========================================================================
//
//  InitLava
//
//==========================================================================

void InitLava(void)
{
	LavaInflictor = &TLavaInflictor(NewMobjThinker(TLavaInflictor));
//	LavaInflictor->type = MT_PHOENIXFX2;
}

//==========================================================================
//
//  ChickenPlayerThink
//
//==========================================================================

void ChickenPlayerThink(player_t * player)
{
	mobj_t *pmo;

	if (player->health > 0)
	{
		// Handle beak movement
		UpdateBeak(player, player->ViewEnts[ps_weapon]);
	}
	if (player->chickenTics & 15)
	{
		return;
	}
	pmo = player->mo;
	if (!(pmo->velocity.x + pmo->velocity.y) && P_Random() < 160)
	{
		// Twitch view angle
		pmo->angles.yaw = AngleMod360(pmo->angles.yaw +
			(Random() - Random()) * 45.0 / 4.0);
	}
	if ((pmo->origin.z <= pmo->floorz) && (P_Random() < 32))
	{
		// Jump and noise
		pmo->velocity.z += 1.0 * 35.0;
		pmo->SetState(S_CHICPLAY_PAIN);
		return;
	}
	if (P_Random() < 48)
	{
		// Just noise
		StartSoundName(*pmo, 'ChickenAttack', CHAN_VOICE);
	}
}

//==========================================================================
//
//  UndoPlayerChicken
//
//==========================================================================

boolean UndoPlayerChicken(player_t * player)
{
	mobj_t *fog;
	mobj_t *mo;
	mobj_t *pmo;
	float x;
	float y;
	float z;
	float angle;
	int weapon;
	boolean OldbFly;

	pmo = player->mo;
	P_UnsetThingPosition(*pmo);
	x = pmo->origin.x;
	y = pmo->origin.y;
	z = pmo->origin.z;
	angle = pmo->angles.yaw;
	weapon = pmo->special1;
	OldbFly = pmo->bFly;
	mo = P_SpawnMobj(x, y, z, PlayerEntity);
	if (!P_TestMobjLocation(mo))
	{
		// Didn't fit
		P_RemoveMobj(mo);
		P_SetThingPosition(*pmo);
		player->chickenTics = 2 * 35;
		return false;
	}
	pmo->SetState(S_FREETARGMOBJ);
	// Set color translation
	mo->Translation = player->color;
	mo->angles.yaw = angle;
	mo->player = player;
	mo->ReactionTime = 0.5;
	if (OldbFly)
	{
		mo->bFly = true;
		mo->bNoGravity = true;
	}
	player->chickenTics = 0;
	player->powers[pw_weaponlevel2] = 0;
	player->health = mo->Health = MAXHEALTH;
	player->mo = mo;
	fog = P_SpawnMobj(x + 20.0 * cos(angle), y + 20.0 * sin(angle),
		z + TELEFOGHEIGHT, TeleportFog);
	StartSoundName(*fog, 'Teleport', CHAN_VOICE);
	PostChickenWeapon(player, weapon);
	return true;
}

//==========================================================================
//
//  SetPlayerRunState
//
//==========================================================================

void SetPlayerRunState(player_t * player)
{
	if (player->chickenTics)
	{
		if (player->mo->statenum == S_CHICPLAY)
		{
			player->mo->SetState(S_CHICPLAY_RUN1);
		}
	}
	else
	{
		if (player->mo->statenum == S_PLAY)
		{
			player->mo->SetState(S_PLAY_RUN1);
		}
	}
}

//==========================================================================
//
//  DeathPlayerThink
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerThink(player_t * player)
{
	float angle;
	float delta;
	int lookDelta;

	MovePsprites(player);

	onground = (player->mo->origin.z <= player->mo->floorz);

	if (player->mo->Class == BloodySkull)
	{
		// Flying bloody skull
		player->viewheight = 6.0;
		player->deltaviewheight = 0.0;
		//player->damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (player->lookdir < 60)
			{
				lookDelta = (60 - player->lookdir) / 8;
				if (lookDelta < 1 && (level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				player->lookdir += lookDelta;
			}
#endif
		}
	}
	else
	{	// Fall to ground
		player->deltaviewheight = 0.0;
		if (player->viewheight > 6.0)
			player->viewheight -= 1.0;
		if (player->viewheight < 6.0)
			player->viewheight = 6.0;
#ifdef FIXME
		if (player->lookdir > 0)
		{
			player->lookdir -= 6;
		}
		else if (player->lookdir < 0)
		{
			player->lookdir += 6;
		}
		if (abs(player->lookdir) < 6)
		{
			player->lookdir = 0;
		}
#endif
	}
	CalcHeight(player);

	if (player->attacker && player->attacker != player->mo)
	{
		angle = atan2(player->attacker->origin.y - player->mo->origin.y,
			player->attacker->origin.x - player->mo->origin.x);
		delta = AngleMod180(angle - player->mo->angles.yaw);
		if (delta < 5.0 && delta > -5.0)
		{
			// Looking at killer, so fade damage flash down
			player->mo->angles.yaw = angle;
			if (player->damagecount)
			{
				player->damagecount--;
			}
		}
		else if (delta > 0.0)
			player->mo->angles.yaw += 5.0;
		else
			player->mo->angles.yaw -= 5.0;
	}
	else if (player->damagecount)
	{
		player->damagecount--;
	}

	if (player->buttons & BT_USE)
	{
		mobj_t *mo;

		player->newtorch = 0;
		player->newtorchdelta = 0;
		player->palette = 0;
		player->curpos = 0;
		player->inv_ptr = 0;
		player->playerstate = PST_REBORN;
		// Let the mobj know the player has entered the reborn state.  Some
		// mobjs need to know when it's ok to remove themselves.
		mo = player->mo;
		mo->special2 = 666;
	}
}

//==========================================================================
//
//  ArtiEgg
//
//==========================================================================

void ArtiEgg(mobj_t * mo)
{
	SpawnPlayerMissile(mo, EggMissile);
	SpawnPlayerMissileAngle(mo, EggMissile,
		AngleMod360(mo->angles.yaw - (45.0 / 6.0)));
	SpawnPlayerMissileAngle(mo, EggMissile,
		AngleMod360(mo->angles.yaw + (45.0 / 6.0)));
	SpawnPlayerMissileAngle(mo, EggMissile,
		AngleMod360(mo->angles.yaw - (45.0 / 3.0)));
	SpawnPlayerMissileAngle(mo, EggMissile,
		AngleMod360(mo->angles.yaw + (45.0 / 3.0)));
}

//==========================================================================
//
//  ArtiTomeOfPower
//
//==========================================================================

boolean ArtiTomeOfPower(player_t * player)
{
	if (player->chickenTics)
	{
		// Attempt to undo chicken
		if (UndoPlayerChicken(player) == false)
		{
			// Failed
			player->mo->Damage(none, none, 10000);
		}
		else
		{
			// Succeeded
			player->chickenTics = 0;
			StartSoundName(*player->mo, 'PickupWeapon', CHAN_ITEM);
		}
	}
	else
	{
		if (!player->mo->GivePower(pw_weaponlevel2))
		{
			return false;
		}
		if (player->readyweapon == wp_staff)
		{
			SetPsprite(player, ps_weapon, S_STAFFREADY2_1);
		}
		else if (player->readyweapon == wp_gauntlets)
		{
			SetPsprite(player, ps_weapon, S_GAUNTLETREADY2_1);
		}
	}
	return true;
}

//==========================================================================
//
//  ArtiFireBomb
//
//==========================================================================

void ArtiFireBomb(player_t * player)
{
	float angle = player->mo->angles.yaw;
	mobj_t *mo = P_SpawnMobj(player->mo->origin.x + 24.0 * cos(angle),
		player->mo->origin.y + 24.0 * sin(angle),
		player->mo->origin.z - player->mo->floorclip,
		FireBomb);

	mo->target = player->mo;
}

//==========================================================================
//
//  P_SetDormantArtifact
//
//  Removes the MF_SPECIAL flag, and initiates the artifact pickup animation.
//
//==========================================================================

void P_SetDormantArtifact(mobj_t * arti)
{
	arti->bSpecial = false;
	if (deathmatch && (arti->Class != ArtifactInvulnerability)
		&& (arti->Class != ArtifactInvisibility))
	{
		arti->SetState(S_DORMANTARTI1);
	}
	else
	{
		// Don't respawn
		arti->SetState(S_DEADARTI1);
	}
	StartSoundName(*arti, 'PickupArtifact', CHAN_ITEM);
}

//==========================================================================
//
//  P_HideSpecialThing
//
//==========================================================================

void P_HideSpecialThing(mobj_t * thing)
{
	thing->bSpecial = false;
	thing->Translucency += 100;
	thing->SetState(S_HIDESPECIAL1);
}

//==========================================================================
//
//  G_CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

boolean G_CheckSpot(int playernum, mthing_t * mthing)
{
	float x;
	float y;
	subsector_t *ss;
	float an;
	mobj_t *mo;
	int i;

	if (!players[playernum].mo)
	{
		// first spawn of level, before corpses
		for (i = 0; i < playernum; i++)
			if (players[i].mo->origin.x == mthing->x &&
				players[i].mo->origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	players[playernum].mo->bNoPassMobj = true;
	if (!P_CheckPosition(players[playernum].mo, x, y))
	{
		players[playernum].mo->bNoPassMobj = false;
		return false;
	}
	players[playernum].mo->bNoPassMobj = false;

	// spawn a teleport fog 
	ss = PointInSubsector(x, y);
	an = itof(45 * (mthing->angle / 45));

	mo = P_SpawnMobj(x + 20.0 * cos(an), y + 20.0 * sin(an),
		ss->sector->floorheight + TELEFOGHEIGHT, TeleportFog);
	StartSoundName(*mo, 'Teleport', CHAN_VOICE);

	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.18  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.16  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.15  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.13  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.10  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.9  2001/12/12 19:15:27  dj_jl
//  Some little changes for state methods
//
//  Revision 1.8  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.5  2001/09/27 17:09:51  dj_jl
//  Changed LavaInflictor to pointer
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
