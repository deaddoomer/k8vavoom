//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//  InitLava
//
//==========================================================================

void InitLava(void)
{
	GLavaInflictor = LavaInflictor(NewMobjThinker(LavaInflictor));
//	GLavaInflictor->type = MT_PHOENIXFX2;
}

//==========================================================================
//
//  G_CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool G_CheckSpot(int playernum, mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int i;

	if (!svvars->Players[playernum].MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < playernum; i++)
			if (svvars->Players[i] && svvars->Players[i].MO.Origin.x == mthing->x &&
				svvars->Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	svvars->Players[playernum].MO.bNoPassMobj = true;
	if (!svvars->Players[playernum].MO.CheckPosition(vector(x, y, ONFLOORZ)))
	{
		svvars->Players[playernum].MO.bNoPassMobj = false;
		return false;
	}
	svvars->Players[playernum].MO.bNoPassMobj = false;

	// spawn a teleport fog 
	sec = GLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight + TELEFOGHEIGHT));
	A.PlaySound('Teleport', CHAN_VOICE);

	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.35  2003/11/12 16:49:44  dj_jl
//  Changed player structure into a class
//
//  Revision 1.34  2003/07/11 16:47:39  dj_jl
//  Made array of players with pointers
//
//  Revision 1.33  2002/10/26 16:32:24  dj_jl
//  New style of defining classes.
//
//  Revision 1.32  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.31  2002/07/23 13:07:30  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.30  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.29  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.28  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.27  2002/04/11 16:49:50  dj_jl
//  Tick function.
//
//  Revision 1.26  2002/03/28 18:15:34  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.25  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.24  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.23  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.22  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.21  2002/02/22 18:00:19  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.18  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.16  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.15  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.13  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.10  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.9  2001/12/12 19:15:27  dj_jl
//  Some little changes for state methods
//
//  Revision 1.8  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.5  2001/09/27 17:09:51  dj_jl
//  Changed LavaInflictor to pointer
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
