//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    VERTICAL DOORS
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	vd_normal,
	DREV_CLOSEWAITOPEN,
	vd_close,
	vd_open,
	raiseIn5Mins
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

string keymsg[] = {
	"YOU NEED A YELLOW KEY TO OPEN THIS DOOR",
	"YOU NEED A GREEN KEY TO OPEN THIS DOOR",
	"YOU NEED A BLUE KEY TO OPEN THIS DOOR"
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  EV_DoDoor
//
//  Move a door up/down
//
//==========================================================================

int EV_DoDoor(line_t * line, int *args, int type)
{
	int secnum;
	int retcode;
	sector_t *sec;
	VerticalDoor Door;

	secnum = -1;
	retcode = 0;
	while ((secnum = FindSectorFromTag(line->arg1, secnum)) >= 0)
	{
		sec = &GLevel.Sectors[secnum];
		if (sec->SpecialData)
		{
			continue;
		}
		// Add new door thinker
		retcode = 1;
		Door = NewSpecialThinker(VerticalDoor);
		sec->SpecialData = Door;
		Door.sector = sec;
		Door.type = type;
		Door.speed = itof(args[1]) * 4.0;
		Door.topwait = itof(args[2]) / 35.0;
		switch (type)
		{
		case vd_close:
			Door.topheight = FindLowestCeilingSurrounding(sec);
			Door.topheight -= 4.0;
			Door.direction = -1;
			SectorStartSoundName(Door.sector, 'DoorOpen', CHAN_VOICE);
			break;
		case DREV_CLOSEWAITOPEN:
			Door.topheight = sec->ceilingheight;
			Door.topwait *= 4.0;
			Door.direction = -1;
			SectorStartSoundName(Door.sector, 'DoorOpen', CHAN_VOICE);
			break;
		case vd_normal:
		case vd_open:
			Door.direction = 1;
			Door.topheight = FindLowestCeilingSurrounding(sec);
			Door.topheight -= 4.0;
			if (Door.topheight != sec->ceilingheight)
			{
				SectorStartSoundName(Door.sector, 'DoorOpen', CHAN_VOICE);
			}
			break;
		default:
			break;
		}
	}
	return retcode;
}

//==========================================================================
//
//  CheckLockedDoor
//
//==========================================================================

bool CheckLockedDoor(Actor user, int lock)
{
	if (!user.bIsPlayer)
	{
		return false;
	}
	if (!lock)
	{
		return true;
	}
	if (!(user.Player->Keys & (1 << (lock - 1))))
	{
		centerprint(user.Player, keymsg[lock - 1]);
		user.PlaySound('PlayerLand', CHAN_VOICE);
		return false;
	}
	return true;
}

//==========================================================================
//
//  EV_VerticalDoor : open a door manually, no tag value
//
//==========================================================================

bool EV_VerticalDoor(line_t * line, Actor thing)
{
	sector_t *sec;
	VerticalDoor Door;
	int side;

	side = 0;	// only front sides can be used

	// if the sector has an active thinker, use it
	sec = GLevel.Sides[line->sidenum[side ^ 1]].sector;
	if (sec->SpecialData)
	{
		Door = VerticalDoor(sec->SpecialData);
		switch (line->special)
		{
		case 12:	// ONLY FOR "RAISE" DOORS, NOT "OPEN"s
		case 13:
			if (Door.direction == -1)
			{
				Door.direction = 1;	// go back up
			}
			else
			{
				if (!thing.bIsPlayer)
				{
					// Monsters don't close doors
					return false;
				}
				Door.direction = -1;	// start going down immediately
			}
			return true;
		}
	}

	SectorStartSoundName(sec, 'DoorOpen', CHAN_VOICE);

	//
	// new door thinker
	//
	Door = NewSpecialThinker(VerticalDoor);
	sec->SpecialData = Door;
	Door.sector = sec;
	Door.direction = 1;
	switch (line->special)
	{
	case 12:
		Door.type = vd_normal;
		break;
	case 11:
		Door.type = vd_open;
		break;
	case 13:
		Door.type = line->arg3 ? vd_normal : vd_open;
		break;
	}
	Door.speed = itof(line->arg2) * 4.0;
	Door.topwait = itof(line->arg3) / 35.0;

	//
	// find the top and bottom of the movement range
	//
	Door.topheight = FindLowestCeilingSurrounding(sec);
	Door.topheight -= 4.0;
	return true;
}

//==========================================================================
//
//  Spawn a door that closes after 30 seconds
//
//==========================================================================

void P_SpawnDoorCloseIn30(sector_t * sec)
{
	VerticalDoor Door;

	Door = NewSpecialThinker(VerticalDoor);
	sec->SpecialData = Door;
	sec->special = 0;
	Door.sector = sec;
	Door.direction = 0;
	Door.type = vd_normal;
	Door.speed = 2.0 * 35.0;
	Door.toptime = 30.0;
}

//==========================================================================
//
//  Spawn a door that opens after 5 minutes
//
//==========================================================================

void P_SpawnDoorRaiseIn5Mins(sector_t * sec, int secnum)
{
	VerticalDoor Door;

	Door = NewSpecialThinker(VerticalDoor);
	sec->SpecialData = Door;
	sec->special = 0;
	Door.sector = sec;
	Door.direction = 2;
	Door.type = raiseIn5Mins;
	Door.speed = 2.0 * 35.0;
	Door.topheight = FindLowestCeilingSurrounding(sec);
	Door.topheight -= 4.0;
	Door.topwait = 150.0 / 35.0;
	Door.toptime = 5.0 * 60.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.16  2002/10/26 16:32:23  dj_jl
//  New style of defining classes.
//
//  Revision 1.15  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.14  2002/04/11 16:48:10  dj_jl
//  New base classes for sector thinkers, Tick function.
//
//  Revision 1.13  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.12  2002/02/22 18:00:16  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.11  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.10  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.9  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.8  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/18 18:29:22  dj_jl
//  Added Hexen action specials
//
//  Revision 1.5  2001/09/24 17:15:39  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
