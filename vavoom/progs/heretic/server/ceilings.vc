//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    CEILINGS
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	CLEV_LOWERTOFLOOR,
	CLEV_RAISETOHIGHEST,
	CLEV_LOWERANDCRUSH,
	CLEV_CRUSHANDRAISE,
	// Heretic specials
	CLEV_CRUSHANDRAISEA,
	// Hexen specials
	CLEV_LOWERBYVALUE,
	CLEV_RAISEBYVALUE,
	CLEV_CRUSHRAISEANDSTAY,
	CLEV_MOVETOVALUETIMES8
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

class CeilingMover:SectorThinker
{
	int type;
	float bottomheight;
	float topheight;
	float speed;
	boolean crush;
	int direction;	// 1 = up, 0 = waiting, -1 = down
	int tag;	// ID
	int olddirection;
	float dnspeed;
	float upspeed;

//==========================================================================
//
//	Think
//
//==========================================================================

void Think(void)
{
	int res;

	switch (direction)
	{
	case 0:	// IN STASIS
		break;

	case 1:	// UP
		res = T_MovePlane(sector, speed * frametime,
			topheight, false, 1, direction);
		if (!(level->tictime & 7))
			SectorStartSoundName(sector, 'DoorMove', CHAN_VOICE);
		if (res == RES_PASTDEST)
			switch (type)
			{
			case CLEV_CRUSHANDRAISE:
				direction = -1;
				speed = speed * 2.0;
				break;
			case CLEV_CRUSHANDRAISEA:
				speed = dnspeed;
				direction = -1;
				break;
			default:
				sector->SpecialData = none;
				TagFinished(sector->tag);
				RemoveSpecialThinker(self);
				break;
			}
		break;

	case -1:	// DOWN
		res = T_MovePlane(sector, speed * frametime,
			bottomheight, crush, 1, direction);
		if (!(level->tictime & 7))
			SectorStartSoundName(sector, 'DoorMove', CHAN_VOICE);
		if (res == RES_PASTDEST)
			switch (type)
			{
			case CLEV_CRUSHANDRAISE:
			case CLEV_CRUSHRAISEANDSTAY:
				speed = speed / 2.0;
				direction = 1;
				break;
			case CLEV_CRUSHANDRAISEA:
				speed = upspeed;
				direction = 1;
				break;
			default:
				sector->SpecialData = none;
				TagFinished(sector->tag);
				RemoveSpecialThinker(self);
				break;
			}
		else if (res == RES_CRUSHED)
			switch (type)
			{
			case CLEV_CRUSHANDRAISEA:
			case CLEV_LOWERANDCRUSH:
				speed = 4.0;
				break;
			default:
				break;
			}
		break;
	}
}

}

//==========================================================================
//
//  P_ActivateInStasisCeiling
//
//  Restart a ceiling that's in-stasis
//
//==========================================================================

int P_ActivateInStasisCeiling(int *args)
{
	CeilingMover Ceiling;

	FOREACH(CeilingMover, Ceiling)
	{
		if ((Ceiling.tag == args[0]) && (Ceiling.direction == 0))
		{
			Ceiling.direction = Ceiling.olddirection;
		}
	}
	return 1;
}

//==========================================================================
//
//  EV_DoCeiling
//
//  Move a ceiling up/down and all around!
//
//==========================================================================

int EV_DoCeiling(line_t * line, int *args, int type)
{
	int secnum, rtn;
	sector_t *sec;
	CeilingMover Ceiling;
	float destHeight;

	secnum = -1;
	rtn = 0;

	//
	//  Reactivate in-stasis ceilings...for certain types.
	//
	switch (type)
	{
	case CLEV_CRUSHANDRAISEA:
		P_ActivateInStasisCeiling(args);
	default:
		break;
	}

	while ((secnum = FindSectorFromTag(args[0], secnum)) >= 0)
	{
		sec = &level->sectors[secnum];
		if (sec->SpecialData)
			continue;

		//
		// new door thinker
		//
		rtn = 1;
		Ceiling = NewSpecialThinker(CeilingMover);
		sec->SpecialData = Ceiling;
		Ceiling.sector = sec;
		Ceiling.crush = false;
		Ceiling.speed = itof(args[1]) * 4.0;
		switch (type)
		{
		case CLEV_LOWERTOFLOOR:
			Ceiling.bottomheight = sec->floorheight;
			Ceiling.direction = -1;
			break;

		case CLEV_RAISETOHIGHEST:
			Ceiling.topheight = FindHighestCeilingSurrounding(sec);
			Ceiling.direction = 1;
			break;

		case CLEV_LOWERANDCRUSH:
			Ceiling.crush = args[2];	// args[2] = crushing value
			Ceiling.bottomheight = sec->floorheight + 8.0;
			Ceiling.direction = -1;
			break;

		case CLEV_CRUSHANDRAISE:
			Ceiling.crush = args[2];	// args[2] = crushing value
			Ceiling.topheight = sec->ceilingheight;
			Ceiling.bottomheight = sec->floorheight + 8.0;
			Ceiling.direction = -1;
			break;

		case CLEV_CRUSHANDRAISEA:
			Ceiling.crush = args[3];	// args[3] = crushing value
			Ceiling.topheight = sec->ceilingheight;
			Ceiling.bottomheight = sec->floorheight + 8.0;
			Ceiling.direction = -1;
			Ceiling.dnspeed = itof(args[1]) * 4.0;
			Ceiling.upspeed = itof(args[2]) * 4.0;
			break;

		case CLEV_CRUSHRAISEANDSTAY:
			Ceiling.crush = args[2];	// args[2] = crushing value
			Ceiling.topheight = sec->ceilingheight;
			Ceiling.bottomheight = sec->floorheight + 8.0;
			Ceiling.direction = -1;
			break;

		case CLEV_LOWERBYVALUE:
			Ceiling.bottomheight = sec->ceilingheight - itof(args[2]);
			Ceiling.direction = -1;
			break;

		case CLEV_RAISEBYVALUE:
			Ceiling.topheight = sec->ceilingheight + itof(args[2]);
			Ceiling.direction = 1;
			break;

		case CLEV_MOVETOVALUETIMES8:
			destHeight = itof(args[2]) * 8.0;

			if (args[3])
			{
				destHeight = -destHeight;
			}
			if (sec->ceilingheight <= destHeight)
			{
				Ceiling.direction = 1;
				Ceiling.topheight = destHeight;
				if (sec->ceilingheight == destHeight)
				{
					rtn = 0;
				}
			}
			else if (sec->ceilingheight > destHeight)
			{
				Ceiling.direction = -1;
				Ceiling.bottomheight = destHeight;
			}
			break;
		}

		Ceiling.tag = sec->tag;
		Ceiling.type = type;
	}
	return rtn;
}

//==========================================================================
//
//  EV_CeilingCrushStop
//
//  Stop a ceiling from crushing!
//
//==========================================================================

int EV_CeilingCrushStop(line_t * line, int *args)
{
	int rtn;
	CeilingMover Ceiling;

	rtn = 0;
	FOREACH(CeilingMover, Ceiling)
	{
		if ((Ceiling.tag == args[0]) && (Ceiling.direction != 0))
		{
			Ceiling.olddirection = Ceiling.direction;
			Ceiling.direction = 0;	// in-stasis
			rtn = 1;
		}
	}

	return rtn;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.11  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.10  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.9  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/18 18:29:22  dj_jl
//  Added Hexen action specials
//
//  Revision 1.6  2001/09/25 17:13:50  dj_jl
//  Beautification
//
//  Revision 1.5  2001/09/24 17:15:39  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
