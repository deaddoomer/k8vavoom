//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define MAX_BOSS_SPOTS 8

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int BossSpotCount;
TVec BossSpot[MAX_BOSS_SPOTS];
float BossSpot_angle[MAX_BOSS_SPOTS];

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  InitMonsters
//
//  Called at level load.
//
//==========================================================================

void InitMonsters(void)
{
	BossSpotCount = 0;
}

//==========================================================================
//
//  P_AddBossSpot
//
//==========================================================================

void AddBossSpot(float x, float y, float angle)
{
	if (BossSpotCount == MAX_BOSS_SPOTS)
	{
		Error("Too many boss spots.");
	}
	BossSpot[BossSpotCount].x = x;
	BossSpot[BossSpotCount].y = y;
	BossSpot[BossSpotCount].z = 0.0;	//FIXME
	BossSpot_angle[BossSpotCount] = angle;
	BossSpotCount++;
}

//==========================================================================
//
//  Actor::A_Sor1Chase
//
//==========================================================================

void Actor::A_Sor1Chase(void)
{
	if (Special1)
	{
		Special1--;
		StateTime -= 0.1;
	}
	A_Chase();
}

//==========================================================================
//
//  Actor::A_Srcr1Attack
//
//  Sorcerer demon attack.
//
//==========================================================================

void Actor::A_Srcr1Attack(void)
{
	mobj_t *mo;
	TAVec ang;
	float angle;

	if (!Enemy)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(8));
		return;
	}
	if (Health > (SpawnHealth / 3) * 2)
	{
		// Spit one fireball
		SpawnMissile(this, &Enemy, Sorcerer1Missile);
	}
	else
	{
		// Spit three fireballs
		mo = SpawnMissile(this, &Enemy, Sorcerer1Missile);
		if (mo)
		{
			VectorAngles(&mo->Velocity, &ang);
			angle = mo->Angles.yaw;
			SpawnMissileAngles(this, Sorcerer1Missile,
				AngleMod360(angle - 3.0), ang.pitch);
			SpawnMissileAngles(this, Sorcerer1Missile,
				AngleMod360(angle + 3.0), ang.pitch);
		}
		if (Health < SpawnHealth / 3)
		{
			// Maybe attack again
			if (Special1)
			{
				// Just attacked, so don't attack again
				Special1 = 0;
			}
			else
			{
				// Set state to attack again
				Special1 = 1;
				SetState(S_SRCR1_ATK4);
			}
		}
	}
}

//==========================================================================
//
//  Actor::A_Sor1Pain
//
//==========================================================================

void Actor::A_Sor1Pain(void)
{
	Special1 = 20;	// Number of steps to walk fast
	A_Pain();
}

//==========================================================================
//
//  Actor::A_SorZap
//
//==========================================================================

void Actor::A_SorZap(void)
{
	PlayFullVolumeSound('SorcererZap', CHAN_BODY);
}

//==========================================================================
//
//  Actor::A_SorcererRise
//
//==========================================================================

void Actor::A_SorcererRise(void)
{
	Actor mo;

	bSolid = false;
	mo = SpawnActor(Origin, Sorcerer2);
	mo.SetState(S_SOR2_RISE1);
	mo.Angles.yaw = Angles.yaw;
	mo.Enemy = Enemy;
}

//==========================================================================
//
//  Actor::A_SorRise
//
//==========================================================================

void Actor::A_SorRise(void)
{
	PlayFullVolumeSound('SorcererRise', CHAN_VOICE);
}

//==========================================================================
//
//  Actor::A_SorSightSnd
//
//==========================================================================

void Actor::A_SorSightSnd(void)
{
	PlayFullVolumeSound('SorcererSight', CHAN_VOICE);
}

//==========================================================================
//
//  Actor::DSparilTeleport
//
//==========================================================================

void Actor::DSparilTeleport(void)
{
	int i;
	float x;
	float y;
	TVec PrevOrg;
	TVec dir;
	Actor fog;

	if (!BossSpotCount)
	{	// No spots
		return;
	}
	i = P_Random();
	do
	{
		i++;
		x = BossSpot[i % BossSpotCount].x;
		y = BossSpot[i % BossSpotCount].y;
		dir = BossSpot[i % BossSpotCount] - Origin;
	}
	while (Length(dir) < 128.0);
	PrevOrg = Origin;
	if (P_TeleportMove(this, x, y))
	{
		fog = SpawnActor(PrevOrg, Sorcerer2TeleFade);
		fog.PlaySound('Teleport', CHAN_VOICE);
		SetState(S_SOR2_TELE1);
		PlaySound('Teleport', CHAN_VOICE);
		Origin.z = FloorZ;
		Angles.yaw = BossSpot_angle[i % BossSpotCount];
		Velocity = vector(0.0, 0.0, 0.0);
	}
}

//==========================================================================
//
//  Actor::A_Srcr2Decide
//
//==========================================================================

void Actor::A_Srcr2Decide(void)
{
	int chance;

	if (!BossSpotCount)
	{
		// No spots
		return;
	}
	switch (Health / (SpawnHealth / 8))
	{
	case 0:
		chance = 192;
		break;
	case 1:
		chance = 120;
		break;
	case 2:
		chance = 120;
		break;
	case 3:
		chance = 120;
		break;
	case 4:
		chance = 64;
		break;
	case 5:
		chance = 64;
		break;
	case 6:
		chance = 32;
		break;
	case 7:
		chance = 16;
		break;
	case 8:
		chance = 0;
		break;
	}
	if (P_Random() < chance)
	{
		DSparilTeleport();
	}
}

//==========================================================================
//
//  Actor::A_Srcr2Attack
//
//==========================================================================

void Actor::A_Srcr2Attack(void)
{
	int chance;

	if (!Enemy)
	{
		return;
	}
	PlayFullVolumeSound(AttackSound, CHAN_AUTO);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(20));
		return;
	}
	chance = Health < SpawnHealth / 2 ? 96 : 48;
	if (P_Random() < chance)
	{
		// Wizard spawners
		SpawnMissileAngles(this, Sorcerer2Missile2,
			AngleMod360(Angles.yaw - 45.0), 30.0);
		SpawnMissileAngles(this, Sorcerer2Missile2,
			AngleMod360(Angles.yaw + 45.0), 30.0);
	}
	else
	{
		// Blue bolt
		SpawnMissile(this, &Enemy, Sorcerer2Missile1);
	}
}

//==========================================================================
//
//  Actor::A_Sor2DthInit
//
//==========================================================================

void Actor::A_Sor2DthInit(void)
{
	Special1 = 7;	// Animation loop counter
	P_Massacre();	// Kill monsters early
}

//==========================================================================
//
//  Actor::A_SorDSph
//
//==========================================================================

void Actor::A_SorDSph(void)
{
	PlayFullVolumeSound('SorcererDeath', CHAN_VOICE);
}

//==========================================================================
//
//  Actor::A_Sor2DthLoop
//
//==========================================================================

void Actor::A_Sor2DthLoop(void)
{
	if (--Special1)
	{
		// Need to loop
		SetState(S_SOR2_DIE4);
	}
}

//==========================================================================
//
//  Actor::A_SorDExp
//
//==========================================================================

void Actor::A_SorDExp(void)
{
	PlayFullVolumeSound('SorcererExplodes', CHAN_BODY);
}

//==========================================================================
//
//  Actor::A_SorDBon
//
//==========================================================================

void Actor::A_SorDBon(void)
{
	PlayFullVolumeSound('SorcererBones', CHAN_BODY);
}

//==========================================================================
//
//  Actor::A_BlueSpark
//
//==========================================================================

void Actor::A_BlueSpark(void)
{
	int i;
	Actor spark;

	for (i = 0; i < 2; i++)
	{
		spark = SpawnActor(Origin, Sorcerer2MissileSpark);
		spark.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
		spark.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
		spark.Velocity.z = (1.0 + Random()) * 35.0;
	}
}

//==========================================================================
//
//  Actor::A_GenWizard
//
//==========================================================================

void Actor::A_GenWizard(void)
{
	Actor mo;
	Actor fog;

	mo = SpawnActor(Origin, Wizard);
	mo.Origin.z = Origin.z - mo.Height / 2.0;
	if (!P_TestMobjLocation(&mo))
	{
		// Didn't fit
		P_RemoveMobj(&mo);
		return;
	}
	Velocity = vector(0.0, 0.0, 0.0);
	SetState(DeathState);
	bMissile = false;
	fog = SpawnActor(Origin, TeleportFog);
	fog.PlaySound('Teleport', CHAN_VOICE);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.20  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.19  2002/02/22 18:00:18  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.18  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.17  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.15  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
