//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#define MAX_BOSS_SPOTS 8

int BossSpotCount;
TVec BossSpot[MAX_BOSS_SPOTS];
float BossSpot_angle[MAX_BOSS_SPOTS];

//**************************************************************************
//**************************************************************************
//
//	Sorcerer1
//
//**************************************************************************
//**************************************************************************

class Sorcerer1:Pawn
	__mobjinfo__(7)
{

int ReAttackState;

//==========================================================================
//
//  A_Sor1Chase
//
//==========================================================================

void A_Sor1Chase(void)
{
	if (Special1)
	{
		Special1--;
		StateTime -= 0.1;
	}
	A_Chase();
}

//==========================================================================
//
//  A_Srcr1Attack
//
//  Sorcerer demon attack.
//
//==========================================================================

void A_Srcr1Attack(void)
{
	Actor A;
	TAVec ang;
	float angle;

	if (!Enemy)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(8));
		return;
	}
	if (Health > (SpawnHealth / 3) * 2)
	{
		// Spit one fireball
		SpawnMissile(Enemy, Sorcerer1Missile);
	}
	else
	{
		// Spit three fireballs
		A = SpawnMissile(Enemy, Sorcerer1Missile);
		if (A)
		{
			VectorAngles(&A.Velocity, &ang);
			angle = A.Angles.yaw;
			SpawnMissileAngles(Sorcerer1Missile,
				AngleMod360(angle - 3.0), ang.pitch);
			SpawnMissileAngles(Sorcerer1Missile,
				AngleMod360(angle + 3.0), ang.pitch);
		}
		if (Health < SpawnHealth / 3)
		{
			// Maybe attack again
			if (Special1)
			{
				// Just attacked, so don't attack again
				Special1 = 0;
			}
			else
			{
				// Set state to attack again
				Special1 = 1;
				SetState(ReAttackState);
			}
		}
	}
}

//==========================================================================
//
//  A_Sor1Pain
//
//==========================================================================

void A_Sor1Pain(void)
{
	Special1 = 20;	// Number of steps to walk fast
	A_Pain();
}

//==========================================================================
//
//  A_SorZap
//
//==========================================================================

void A_SorZap(void)
{
	PlayFullVolumeSound('SorcererZap', CHAN_BODY);
}

//==========================================================================
//
//  A_SorcererRise
//
//==========================================================================

void A_SorcererRise(void)
{
	Sorcerer2Base S2;

	bSolid = false;
	S2 = Sorcerer2Base(Spawn(Sorcerer2, Origin));
	S2.SetState(S2.RiseState);
	S2.Angles.yaw = Angles.yaw;
	S2.Enemy = Enemy;
}

__states__
{
	S_SRCR1_LOOK1('SRCR', 0, 10.0 / 35.0, S_SRCR1_LOOK2) { A_Look(); }
	S_SRCR1_LOOK2('SRCR', 1, 10.0 / 35.0, S_SRCR1_LOOK1) { A_Look(); }
	S_SRCR1_WALK1('SRCR', 0, 5.0 / 35.0, S_SRCR1_WALK2) { A_Sor1Chase(); }
	S_SRCR1_WALK2('SRCR', 1, 5.0 / 35.0, S_SRCR1_WALK3) { A_Sor1Chase(); }
	S_SRCR1_WALK3('SRCR', 2, 5.0 / 35.0, S_SRCR1_WALK4) { A_Sor1Chase(); }
	S_SRCR1_WALK4('SRCR', 3, 5.0 / 35.0, S_SRCR1_WALK1) { A_Sor1Chase(); }
	S_SRCR1_PAIN1('SRCR', 16, 6.0 / 35.0, S_SRCR1_WALK1) { A_Sor1Pain(); }
	S_SRCR1_ATK1('SRCR', 16, 7.0 / 35.0, S_SRCR1_ATK2) { A_FaceTarget(); }
	S_SRCR1_ATK2('SRCR', 17, 6.0 / 35.0, S_SRCR1_ATK3) { A_FaceTarget(); }
	S_SRCR1_ATK3('SRCR', 18, 10.0 / 35.0, S_SRCR1_WALK1) { A_Srcr1Attack(); }
	S_SRCR1_ATK4('SRCR', 18, 10.0 / 35.0, S_SRCR1_ATK5) { A_FaceTarget(); }
	S_SRCR1_ATK5('SRCR', 16, 7.0 / 35.0, S_SRCR1_ATK6) { A_FaceTarget(); }
	S_SRCR1_ATK6('SRCR', 17, 6.0 / 35.0, S_SRCR1_ATK7) { A_FaceTarget(); }
	S_SRCR1_ATK7('SRCR', 18, 10.0 / 35.0, S_SRCR1_WALK1) { A_Srcr1Attack(); }
	S_SRCR1_DIE1('SRCR', 4, 7.0 / 35.0, S_SRCR1_DIE2) { }
	S_SRCR1_DIE2('SRCR', 5, 7.0 / 35.0, S_SRCR1_DIE3) { A_Scream(); }
	S_SRCR1_DIE3('SRCR', 6, 7.0 / 35.0, S_SRCR1_DIE4) { }
	S_SRCR1_DIE4('SRCR', 7, 6.0 / 35.0, S_SRCR1_DIE5) { }
	S_SRCR1_DIE5('SRCR', 8, 6.0 / 35.0, S_SRCR1_DIE6) { }
	S_SRCR1_DIE6('SRCR', 9, 6.0 / 35.0, S_SRCR1_DIE7) { }
	S_SRCR1_DIE7('SRCR', 10, 6.0 / 35.0, S_SRCR1_DIE8) { }
	S_SRCR1_DIE8('SRCR', 11, 25.0 / 35.0, S_SRCR1_DIE9) { A_SorZap(); }
	S_SRCR1_DIE9('SRCR', 12, 5.0 / 35.0, S_SRCR1_DIE10) { }
	S_SRCR1_DIE10('SRCR', 13, 5.0 / 35.0, S_SRCR1_DIE11) { }
	S_SRCR1_DIE11('SRCR', 14, 4.0 / 35.0, S_SRCR1_DIE12) { }
	S_SRCR1_DIE12('SRCR', 11, 20.0 / 35.0, S_SRCR1_DIE13) { A_SorZap(); }
	S_SRCR1_DIE13('SRCR', 12, 5.0 / 35.0, S_SRCR1_DIE14) { }
	S_SRCR1_DIE14('SRCR', 13, 5.0 / 35.0, S_SRCR1_DIE15) { }
	S_SRCR1_DIE15('SRCR', 14, 4.0 / 35.0, S_SRCR1_DIE16) { }
	S_SRCR1_DIE16('SRCR', 11, 12.0 / 35.0, S_SRCR1_DIE17) { }
	S_SRCR1_DIE17('SRCR', 15, -1.0, S_NULL) { A_SorcererRise(); }
}

defaultproperties
{
	Health = 2000;
	Radius = 28.0;
	Height = 100.0;
	Mass = 800.0;
	StepSpeed = 16.0;
	PainChance = 56;
	bBoss = true;
	SpawnState = S_SRCR1_LOOK1;
	SeeState = S_SRCR1_WALK1;
	MissileState = S_SRCR1_ATK1;
	ReAttackState = S_SRCR1_ATK4;
	PainState = S_SRCR1_PAIN1;
	DeathState = S_SRCR1_DIE1;
	SightSound = 'SorcererDemonSight';
	ActiveSound = 'SorcererDemonActive';
	AttackSound = 'SorcererDemonAttack';
	PainSound = 'SorcererDemonPain';
	DeathSound = 'SorcererDemonDeath';
}

}

//**************************************************************************
//**************************************************************************
//
//	Sorcerer2
//
//**************************************************************************
//**************************************************************************

class Sorcerer2:Sorcerer2Base
{

int TeleportState;
int DeathLoopState;

//==========================================================================
//
//  A_SorRise
//
//==========================================================================

void A_SorRise(void)
{
	PlayFullVolumeSound('SorcererRise', CHAN_VOICE);
}

//==========================================================================
//
//  A_SorSightSnd
//
//==========================================================================

void A_SorSightSnd(void)
{
	PlayFullVolumeSound('SorcererSight', CHAN_VOICE);
}

//==========================================================================
//
//  DSparilTeleport
//
//==========================================================================

void DSparilTeleport(void)
{
	int i;
	float x;
	float y;
	TVec PrevOrg;
	TVec dir;
	Actor fog;

	if (!BossSpotCount)
	{	// No spots
		return;
	}
	i = P_Random();
	do
	{
		i++;
		x = BossSpot[i % BossSpotCount].x;
		y = BossSpot[i % BossSpotCount].y;
		dir = BossSpot[i % BossSpotCount] - Origin;
	}
	while (Length(dir) < 128.0);
	PrevOrg = Origin;
	if (TeleportMove(vector(x, y, Origin.z)))
	{
		fog = Spawn(Sorcerer2TeleFade, PrevOrg);
		fog.PlaySound('Teleport', CHAN_VOICE);
		SetState(TeleportState);
		PlaySound('Teleport', CHAN_VOICE);
		Origin.z = FloorZ;
		Angles.yaw = BossSpot_angle[i % BossSpotCount];
		Velocity = vector(0.0, 0.0, 0.0);
	}
}

//==========================================================================
//
//  A_Srcr2Decide
//
//==========================================================================

void A_Srcr2Decide(void)
{
	int chance;

	if (!BossSpotCount)
	{
		// No spots
		return;
	}
	switch (Health / (SpawnHealth / 8))
	{
	case 0:
		chance = 192;
		break;
	case 1:
		chance = 120;
		break;
	case 2:
		chance = 120;
		break;
	case 3:
		chance = 120;
		break;
	case 4:
		chance = 64;
		break;
	case 5:
		chance = 64;
		break;
	case 6:
		chance = 32;
		break;
	case 7:
		chance = 16;
		break;
	case 8:
		chance = 0;
		break;
	}
	if (P_Random() < chance)
	{
		DSparilTeleport();
	}
}

//==========================================================================
//
//  A_Srcr2Attack
//
//==========================================================================

void A_Srcr2Attack(void)
{
	int chance;

	if (!Enemy)
	{
		return;
	}
	PlayFullVolumeSound(AttackSound, CHAN_AUTO);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(20));
		return;
	}
	chance = Health < SpawnHealth / 2 ? 96 : 48;
	if (P_Random() < chance)
	{
		// Wizard spawners
		SpawnMissileAngles(Sorcerer2Missile2,
			AngleMod360(Angles.yaw - 45.0), 30.0);
		SpawnMissileAngles(Sorcerer2Missile2,
			AngleMod360(Angles.yaw + 45.0), 30.0);
	}
	else
	{
		// Blue bolt
		SpawnMissile(Enemy, Sorcerer2Missile1);
	}
}

//==========================================================================
//
//  A_Sor2DthInit
//
//==========================================================================

void A_Sor2DthInit(void)
{
	Special1 = 7;	// Animation loop counter
	P_Massacre();	// Kill monsters early
}

//==========================================================================
//
//  A_SorDSph
//
//==========================================================================

void A_SorDSph(void)
{
	PlayFullVolumeSound('SorcererDeath', CHAN_VOICE);
}

//==========================================================================
//
//  A_Sor2DthLoop
//
//==========================================================================

void A_Sor2DthLoop(void)
{
	if (--Special1)
	{
		// Need to loop
		SetState(DeathLoopState);
	}
}

//==========================================================================
//
//  A_SorDExp
//
//==========================================================================

void A_SorDExp(void)
{
	PlayFullVolumeSound('SorcererExplodes', CHAN_BODY);
}

//==========================================================================
//
//  A_SorDBon
//
//==========================================================================

void A_SorDBon(void)
{
	PlayFullVolumeSound('SorcererBones', CHAN_BODY);
}

__states__
{
	S_SOR2_RISE1('SOR2', 0, 4.0 / 35.0, S_SOR2_RISE2) { }
	S_SOR2_RISE2('SOR2', 1, 4.0 / 35.0, S_SOR2_RISE3) { }
	S_SOR2_RISE3('SOR2', 2, 4.0 / 35.0, S_SOR2_RISE4) { A_SorRise(); }
	S_SOR2_RISE4('SOR2', 3, 4.0 / 35.0, S_SOR2_RISE5) { }
	S_SOR2_RISE5('SOR2', 4, 4.0 / 35.0, S_SOR2_RISE6) { }
	S_SOR2_RISE6('SOR2', 5, 4.0 / 35.0, S_SOR2_RISE7) { }
	S_SOR2_RISE7('SOR2', 6, 12.0 / 35.0, S_SOR2_WALK1) { A_SorSightSnd(); }
	S_SOR2_LOOK1('SOR2', 12, 10.0 / 35.0, S_SOR2_LOOK2) { A_Look(); }
	S_SOR2_LOOK2('SOR2', 13, 10.0 / 35.0, S_SOR2_LOOK1) { A_Look(); }
	S_SOR2_WALK1('SOR2', 12, 4.0 / 35.0, S_SOR2_WALK2) { A_Chase(); }
	S_SOR2_WALK2('SOR2', 13, 4.0 / 35.0, S_SOR2_WALK3) { A_Chase(); }
	S_SOR2_WALK3('SOR2', 14, 4.0 / 35.0, S_SOR2_WALK4) { A_Chase(); }
	S_SOR2_WALK4('SOR2', 15, 4.0 / 35.0, S_SOR2_WALK1) { A_Chase(); }
	S_SOR2_PAIN1('SOR2', 16, 3.0 / 35.0, S_SOR2_PAIN2) { }
	S_SOR2_PAIN2('SOR2', 16, 6.0 / 35.0, S_SOR2_WALK1) { A_Pain(); }
	S_SOR2_ATK1('SOR2', 17, 9.0 / 35.0, S_SOR2_ATK2) { A_Srcr2Decide(); }
	S_SOR2_ATK2('SOR2', 18, 9.0 / 35.0, S_SOR2_ATK3) { A_FaceTarget(); }
	S_SOR2_ATK3('SOR2', 19, 20.0 / 35.0, S_SOR2_WALK1) { A_Srcr2Attack(); }
	S_SOR2_TELE1('SOR2', 11, 6.0 / 35.0, S_SOR2_TELE2) { }
	S_SOR2_TELE2('SOR2', 10, 6.0 / 35.0, S_SOR2_TELE3) { }
	S_SOR2_TELE3('SOR2', 9, 6.0 / 35.0, S_SOR2_TELE4) { }
	S_SOR2_TELE4('SOR2', 8, 6.0 / 35.0, S_SOR2_TELE5) { }
	S_SOR2_TELE5('SOR2', 7, 6.0 / 35.0, S_SOR2_TELE6) { }
	S_SOR2_TELE6('SOR2', 6, 6.0 / 35.0, S_SOR2_WALK1) { }
	S_SOR2_DIE1('SDTH', 0, 8.0 / 35.0, S_SOR2_DIE2) { A_Sor2DthInit(); }
	S_SOR2_DIE2('SDTH', 1, 8.0 / 35.0, S_SOR2_DIE3) { }
	S_SOR2_DIE3('SDTH', 2, 8.0 / 35.0, S_SOR2_DIE4) { A_SorDSph(); }
	S_SOR2_DIE4('SDTH', 3, 7.0 / 35.0, S_SOR2_DIE5) { }
	S_SOR2_DIE5('SDTH', 4, 7.0 / 35.0, S_SOR2_DIE6) { }
	S_SOR2_DIE6('SDTH', 5, 7.0 / 35.0, S_SOR2_DIE7) { A_Sor2DthLoop(); }
	S_SOR2_DIE7('SDTH', 6, 6.0 / 35.0, S_SOR2_DIE8) { A_SorDExp(); }
	S_SOR2_DIE8('SDTH', 7, 6.0 / 35.0, S_SOR2_DIE9) { }
	S_SOR2_DIE9('SDTH', 8, 18.0 / 35.0, S_SOR2_DIE10) { }
	S_SOR2_DIE10('SDTH', 9, 6.0 / 35.0, S_SOR2_DIE11) { A_NoBlocking(); }
	S_SOR2_DIE11('SDTH', 10, 6.0 / 35.0, S_SOR2_DIE12) { A_SorDBon(); }
	S_SOR2_DIE12('SDTH', 11, 6.0 / 35.0, S_SOR2_DIE13) { }
	S_SOR2_DIE13('SDTH', 12, 6.0 / 35.0, S_SOR2_DIE14) { }
	S_SOR2_DIE14('SDTH', 13, 6.0 / 35.0, S_SOR2_DIE15) { }
	S_SOR2_DIE15('SDTH', 14, -1.0, S_NULL) { A_BossDeath(); }
}

defaultproperties
{
	Health = 3500;
	Radius = 16.0;
	Height = 70.0;
	Mass = 300.0;
	StepSpeed = 14.0;
	PainChance = 32;
	bDropOff = true;
	bBoss = true;
	RiseState = S_SOR2_RISE1;
	SpawnState = S_SOR2_LOOK1;
	SeeState = S_SOR2_WALK1;
	TeleportState = S_SOR2_TELE1;
	MissileState = S_SOR2_ATK1;
	PainState = S_SOR2_PAIN1;
	DeathState = S_SOR2_DIE1;
	DeathLoopState = S_SOR2_DIE4;
	SightSound = 'SorcererSight';
	ActiveSound = 'SorcererActive';
	AttackSound = 'SorcererAttack';
	PainSound = 'SorcererPain';
}

}

//**************************************************************************
//**************************************************************************

//==========================================================================
//
//  InitMonsters
//
//  Called at level load.
//
//==========================================================================

void InitMonsters(void)
{
	BossSpotCount = 0;
}

//==========================================================================
//
//  P_AddBossSpot
//
//==========================================================================

void AddBossSpot(float x, float y, float angle)
{
	if (BossSpotCount == MAX_BOSS_SPOTS)
	{
		Error("Too many boss spots.");
	}
	BossSpot[BossSpotCount].x = x;
	BossSpot[BossSpotCount].y = y;
	BossSpot[BossSpotCount].z = 0.0;	//FIXME
	BossSpot_angle[BossSpotCount] = angle;
	BossSpotCount++;
}

//==========================================================================
//
//  Actor::A_BlueSpark
//
//==========================================================================

void Actor::A_BlueSpark(void)
{
	int i;
	Actor spark;

	for (i = 0; i < 2; i++)
	{
		spark = Spawn(Sorcerer2MissileSpark, Origin);
		spark.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
		spark.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
		spark.Velocity.z = (1.0 + Random()) * 35.0;
	}
}

//==========================================================================
//
//  Actor::A_GenWizard
//
//==========================================================================

void Actor::A_GenWizard(void)
{
	Actor A;
	Actor fog;

	A = Spawn(Wizard, Origin);
	A.Origin.z = Origin.z - A.Height / 2.0;
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Remove();
		return;
	}
	Velocity = vector(0.0, 0.0, 0.0);
	SetState(DeathState);
	bMissile = false;
	fog = Spawn(TeleportFog, Origin);
	fog.PlaySound('Teleport', CHAN_VOICE);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.23  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.22  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.21  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.20  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.19  2002/02/22 18:00:18  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.18  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.17  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.15  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
