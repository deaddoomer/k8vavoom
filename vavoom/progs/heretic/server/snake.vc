//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	SnakeProjectileA
//
//**************************************************************************

class SnakeProjectileA:Projectile
{

__states__
{
	S_SNAKEPRO_A1('SNFX', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_SNAKEPRO_A2) { }
	S_SNAKEPRO_A2('SNFX', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_SNAKEPRO_A3) { }
	S_SNAKEPRO_A3('SNFX', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_SNAKEPRO_A4) { }
	S_SNAKEPRO_A4('SNFX', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_SNAKEPRO_A1) { }
	S_SNAKEPRO_AX1('SNFX', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_SNAKEPRO_AX2) { }
	S_SNAKEPRO_AX2('SNFX', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_SNAKEPRO_AX3) { }
	S_SNAKEPRO_AX3('SNFX', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_SNAKEPRO_AX4) { }
	S_SNAKEPRO_AX4('SNFX', 7 | FF_FULLBRIGHT, 3.0 / 35.0, S_SNAKEPRO_AX5) { }
	S_SNAKEPRO_AX5('SNFX', 8 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 12.0;
	Height = 8.0;
	Speed = 490.0;
	MissileDamage = 1;
	bWindThrust = true;
	IdleState = S_SNAKEPRO_A1;
	DeathState = S_SNAKEPRO_AX1;
	Effects = EF_DL_MAGENTA;
}

}

//**************************************************************************
//
//	SnakeProjectileB
//
//**************************************************************************

class SnakeProjectileB:Projectile
{

__states__
{
	S_SNAKEPRO_B1('SNFX', 9 | FF_FULLBRIGHT, 6.0 / 35.0, S_SNAKEPRO_B2) { }
	S_SNAKEPRO_B2('SNFX', 10 | FF_FULLBRIGHT, 6.0 / 35.0, S_SNAKEPRO_B1) { }
	S_SNAKEPRO_BX1('SNFX', 11 | FF_FULLBRIGHT, 5.0 / 35.0, S_SNAKEPRO_BX2) { }
	S_SNAKEPRO_BX2('SNFX', 12 | FF_FULLBRIGHT, 5.0 / 35.0, S_SNAKEPRO_BX3) { }
	S_SNAKEPRO_BX3('SNFX', 13 | FF_FULLBRIGHT, 4.0 / 35.0, S_SNAKEPRO_BX4) { }
	S_SNAKEPRO_BX4('SNFX', 14 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 12.0;
	Height = 8.0;
	Speed = 490.0;
	MissileDamage = 3;
	IdleState = S_SNAKEPRO_B1;
	DeathState = S_SNAKEPRO_BX1;
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	Snake
//
//**************************************************************************

class Snake:Pawn
	__mobjinfo__(92)
{

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff(void)
{
	DropItem(ItemAmmoPhoenixWimpy, 5, 0.328125);
}

//==========================================================================
//
//  A_SnakeAttack
//
//==========================================================================

void A_SnakeAttack(void)
{
	if (!Enemy)
	{
		SetState(SeeState);
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	A_FaceTarget();
	SpawnMissile(Enemy, SnakeProjectileA);
}

//==========================================================================
//
//  A_SnakeAttack2
//
//==========================================================================

void A_SnakeAttack2(void)
{
	if (!Enemy)
	{
		SetState(SeeState);
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	A_FaceTarget();
	SpawnMissile(Enemy, SnakeProjectileB);
}

__states__
{
	S_SNAKE_LOOK1('SNKE', 0, 10.0 / 35.0, S_SNAKE_LOOK2) { A_Look(); }
	S_SNAKE_LOOK2('SNKE', 1, 10.0 / 35.0, S_SNAKE_LOOK1) { A_Look(); }
	S_SNAKE_WALK1('SNKE', 0, 4.0 / 35.0, S_SNAKE_WALK2) { A_Chase(); }
	S_SNAKE_WALK2('SNKE', 1, 4.0 / 35.0, S_SNAKE_WALK3) { A_Chase(); }
	S_SNAKE_WALK3('SNKE', 2, 4.0 / 35.0, S_SNAKE_WALK4) { A_Chase(); }
	S_SNAKE_WALK4('SNKE', 3, 4.0 / 35.0, S_SNAKE_WALK1) { A_Chase(); }
	S_SNAKE_ATK1('SNKE', 5, 5.0 / 35.0, S_SNAKE_ATK2) { A_FaceTarget(); }
	S_SNAKE_ATK2('SNKE', 5, 5.0 / 35.0, S_SNAKE_ATK3) { A_FaceTarget(); }
	S_SNAKE_ATK3('SNKE', 5, 4.0 / 35.0, S_SNAKE_ATK4) { A_SnakeAttack(); }
	S_SNAKE_ATK4('SNKE', 5, 4.0 / 35.0, S_SNAKE_ATK5) { A_SnakeAttack(); }
	S_SNAKE_ATK5('SNKE', 5, 4.0 / 35.0, S_SNAKE_ATK6) { A_SnakeAttack(); }
	S_SNAKE_ATK6('SNKE', 5, 5.0 / 35.0, S_SNAKE_ATK7) { A_FaceTarget(); }
	S_SNAKE_ATK7('SNKE', 5, 5.0 / 35.0, S_SNAKE_ATK8) { A_FaceTarget(); }
	S_SNAKE_ATK8('SNKE', 5, 5.0 / 35.0, S_SNAKE_ATK9) { A_FaceTarget(); }
	S_SNAKE_ATK9('SNKE', 5, 4.0 / 35.0, S_SNAKE_WALK1) { A_SnakeAttack2(); }
	S_SNAKE_PAIN1('SNKE', 4, 3.0 / 35.0, S_SNAKE_PAIN2) { }
	S_SNAKE_PAIN2('SNKE', 4, 3.0 / 35.0, S_SNAKE_WALK1) { A_Pain(); }
	S_SNAKE_DIE1('SNKE', 6, 5.0 / 35.0, S_SNAKE_DIE2) { }
	S_SNAKE_DIE2('SNKE', 7, 5.0 / 35.0, S_SNAKE_DIE3) { A_Scream(); }
	S_SNAKE_DIE3('SNKE', 8, 5.0 / 35.0, S_SNAKE_DIE4) { }
	S_SNAKE_DIE4('SNKE', 9, 5.0 / 35.0, S_SNAKE_DIE5) { }
	S_SNAKE_DIE5('SNKE', 10, 5.0 / 35.0, S_SNAKE_DIE6) { }
	S_SNAKE_DIE6('SNKE', 11, 5.0 / 35.0, S_SNAKE_DIE7) { }
	S_SNAKE_DIE7('SNKE', 12, 5.0 / 35.0, S_SNAKE_DIE8) { A_NoBlocking(); }
	S_SNAKE_DIE8('SNKE', 13, 5.0 / 35.0, S_SNAKE_DIE9) { }
	S_SNAKE_DIE9('SNKE', 14, 5.0 / 35.0, S_SNAKE_DIE10) { }
	S_SNAKE_DIE10('SNKE', 15, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 280;
	Radius = 22.0;
	Height = 70.0;
	Mass = 100.0;
	StepSpeed = 10.0;
	PainChance = 0.1875;
	IdleState = S_SNAKE_LOOK1;
	SeeState = S_SNAKE_WALK1;
	MissileState = S_SNAKE_ATK1;
	PainState = S_SNAKE_PAIN1;
	DeathState = S_SNAKE_DIE1;
	SightSound = 'SnakeSight';
	ActiveSound = 'SnakeActive';
	AttackSound = 'SnakeAttack';
	PainSound = 'SnakePain';
	DeathSound = 'SnakeDeath';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.17  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.16  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.15  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.14  2002/03/16 17:45:13  dj_jl
//  Added Pawn and PlayerPawn classes, beautification.
//
//  Revision 1.13  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.12  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.11  2002/02/22 18:00:18  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.10  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.9  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.8  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.7  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.6  2002/01/07 12:23:18  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
