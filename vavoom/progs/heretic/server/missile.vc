//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

Actor MissileMobj;

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::CheckMissileSpawn
//
//  Returns true if the missile is at a valid spawn point, otherwise
// explodes it and returns false.
//
//==========================================================================

boolean Actor::CheckMissileSpawn(void)
{
	// move a little forward so an angle can be computed if it
	// immediately explodes
	Origin += Velocity * 0.0142857143;
	if (!TryMove(Origin))
	{
		ExplodeMissile();
		return false;
	}
	return true;
}

//==========================================================================
//
//  Actor::SpawnMissile
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Actor reference to the missile.
//
//==========================================================================

Actor Actor::SpawnMissile(Actor dest, classid type)
{
	TVec org;
	Actor A;
	TVec dir;

	org = Origin;
	switch (type)
	{
	case MinotaurMissile:	// Minotaur swing attack missile
		org.z = Origin.z + 40.0;
		break;
	case MinotaurFloorFire:	// Minotaur floor fire missile
		org.z = ONFLOORZ + FloorClip;
		break;
	case Sorcerer1Missile:	// Sorcerer Demon fireball
		org.z = Origin.z + 48.0;
		break;
	case KnightAxe:	// Knight normal axe
	case KnightRedAxe:	// Knight red power axe
		org.z = Origin.z + 36.0;
		break;
	default:
		org.z = Origin.z + 32.0;
		break;
	}
	org.z -= FloorClip;
	A = Spawn(type, org);
	if (A.SightSound)
	{
		A.PlaySound(A.SightSound, CHAN_VOICE);
	}
	A.Instigator = self;	// Originator
	dir = dest.Origin - Origin;
	if (dest.Translucency)
	{
		// Invisible target
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0);
	}
	dir = Normalize(dir);
	A.Velocity = dir * A.Speed;
	VectorAngles(&dir, &A.Angles);
	return A.CheckMissileSpawn() ? A : none;
}

//==========================================================================
//
//  Actor::SpawnMissileAngles
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Actor reference to the missile.
//
//==========================================================================

Actor Actor::SpawnMissileAngles(classid type, float yaw, float pitch)
{
	TVec org;
	Actor A;
	TVec dir;

	org = Origin;
	switch (type)
	{
	case MinotaurMissile:	// Minotaur swing attack missile
		org.z = Origin.z + 40.0;
		break;
	case MinotaurFloorFire:	// Minotaur floor fire missile
		org.z = ONFLOORZ + FloorClip;
		break;
	case Sorcerer1Missile:	// Sorcerer Demon fireball
		org.z = Origin.z + 48.0;
		break;
	default:
		org.z = Origin.z + 32.0;
		break;
	}
	org.z -= FloorClip;
	A = Spawn(type, org);
	if (A.SightSound)
	{
		A.PlaySound(A.SightSound, CHAN_VOICE);
	}
	A.Instigator = self;	// Originator
	A.Angles.yaw = yaw;
	A.Angles.pitch = pitch;
	AngleVector(&A.Angles, &dir);
	A.Velocity = A.Speed * dir;
	return A.CheckMissileSpawn() ? A : none;
}

//==========================================================================
//
//  Actor::SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor Actor::SpawnPlayerMissile(classid type)
{
	TVec dir;
	TVec org;

	// Try to find a target
	dir = Aim(self, Angles.yaw, 16.0 * 64.0);
	org = Origin;
	org.z = Origin.z + 32.0 - tan(Angles.pitch);
	org.z -= FloorClip;
	MissileMobj = Spawn(type, org);
	if (MissileMobj.SightSound)
	{
		MissileMobj.PlaySound(MissileMobj.SightSound, CHAN_VOICE);
	}
	MissileMobj.Instigator = self;
	MissileMobj.Velocity = dir * MissileMobj.Speed;
	VectorAngles(&dir, &MissileMobj.Angles);
	if (MissileMobj.Class == BlasterFX1)
	{
		// Ultra-fast ripper spawning missile
		MissileMobj.Origin += MissileMobj.Velocity * 0.00357;
	}
	else
	{
		// Normal missile
		MissileMobj.Origin += MissileMobj.Velocity * 0.01429;
	}
	if (!MissileMobj.TryMove(MissileMobj.Origin))
	{
		// Exploded immediately
		MissileMobj.ExplodeMissile();
		return none;
	}
	return MissileMobj;
}

//==========================================================================
//
//  Actor::SpawnPlayerMissileAngle
//
//==========================================================================

Actor Actor::SpawnPlayerMissileAngle(classid type, float angle)
{
	Actor A;
	TVec dir;
	TVec org;

	dir = Aim(self, angle, 16.0 * 64.0);
	org = Origin;
	org.z = Origin.z + 4.0 * 8.0 - tan(Angles.pitch);
	org.z -= FloorClip;
	A = Spawn(type, org);
	if (A.SightSound)
	{
		A.PlaySound(A.SightSound, CHAN_VOICE);
	}
	A.Instigator = self;
	A.Velocity = dir * A.Speed;
	VectorAngles(&dir, &A.Angles);
	return A.CheckMissileSpawn() ? A : none;
}

//==========================================================================
//
//  Actor::SeekerMissile
//
//  The missile Enemy field must be Actor target. Returns true if
// target was tracked, false if not.
//
//==========================================================================

boolean Actor::SeekerMissile(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;

	if (!Enemy)
	{
		return false;
	}
	if (!Enemy.bShootable)
	{
		// Target died
		Enemy = none;
		return false;
	}
	dir = FaceActor(Enemy, &delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw = AngleMod360(Angles.yaw + delta);
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw = AngleMod360(Angles.yaw - delta);
	}
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);
	if (Origin.z + Height < Enemy.Origin.z ||
		Enemy.Origin.z + Enemy.Height < Origin.z)
	{
		// Need to seek vertically
		dist = MobjDist2(Enemy, self);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = (Enemy.Origin.z - Origin.z) / dist;
	}
	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.21  2002/04/11 16:52:14  dj_jl
//  Made TryMove native.
//
//  Revision 1.20  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.19  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.18  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.17  2002/02/22 18:00:17  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.16  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.15  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.14  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.13  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.12  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
