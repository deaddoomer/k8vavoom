//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  CheckMissileSpawn
//
//  Returns true if the missile is at a valid spawn point, otherwise
// explodes it and returns false.
//
//==========================================================================

int CheckMissileSpawn(mobj_t * missile)
{
	// move a little forward so an angle can be computed if it
	// immediately explodes
	missile->Origin += missile->Velocity * 0.0142857143;
	if (!P_TryMove(missile, missile->Origin.x, missile->Origin.y))
	{
		P_ExplodeMissile(missile);
		return false;
	}
	return true;
}

//==========================================================================
//
//  SpawnMissile
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a mobj_t pointer to the missile.
//
//==========================================================================

mobj_t *SpawnMissile(mobj_t * source, mobj_t * dest, classid type)
{
	float z;
	mobj_t *th;
	TVec dir;

	switch (type)
	{
	case MinotaurMissile:	// Minotaur swing attack missile
		z = source->Origin.z + 40.0;
		break;
	case MinotaurFloorFire:	// Minotaur floor fire missile
		z = ONFLOORZ;
		break;
	case Sorcerer1Missile:	// Sorcerer Demon fireball
		z = source->Origin.z + 48.0;
		break;
	case KnightAxe:	// Knight normal axe
	case KnightRedAxe:	// Knight red power axe
		z = source->Origin.z + 36.0;
		break;
	default:
		z = source->Origin.z + 32.0;
		break;
	}
	z -= source->FloorClip;
	th = P_SpawnMobj(source->Origin.x, source->Origin.y, z, type);
	if (th->sound_sight)
	{
		StartSound(*th, th->sound_sight, CHAN_VOICE);
	}
	th->target = source;	// Originator
	dir = dest->Origin - source->Origin;
	if (dest->Translucency)
	{
		// Invisible target
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0);
	}
	dir = Normalize(dir);
	th->Velocity = dir * th->Speed;
	VectorAngles(&dir, &th->Angles);
	return CheckMissileSpawn(th) ? th : NULL;
}

//==========================================================================
//
//  SpawnMissileAngles
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a mobj_t pointer to the missile.
//
//==========================================================================

mobj_t *SpawnMissileAngles(mobj_t * source, classid type, float yaw,
	float pitch)
{
	float z;
	mobj_t *mo;
	TVec dir;

	switch (type)
	{
	case MinotaurMissile:	// Minotaur swing attack missile
		z = source->Origin.z + 40.0;
		break;
	case MinotaurFloorFire:	// Minotaur floor fire missile
		z = ONFLOORZ;
		break;
	case Sorcerer1Missile:	// Sorcerer Demon fireball
		z = source->Origin.z + 48.0;
		break;
	default:
		z = source->Origin.z + 32.0;
		break;
	}
	z -= source->FloorClip;
	mo = P_SpawnMobj(source->Origin.x, source->Origin.y, z, type);
	if (mo->sound_sight)
	{
		StartSound(*mo, mo->sound_sight, CHAN_VOICE);
	}
	mo->target = source;	// Originator
	mo->Angles.yaw = yaw;
	mo->Angles.pitch = pitch;
	AngleVector(&mo->Angles, &dir);
	mo->Velocity = mo->Speed * dir;
	return (CheckMissileSpawn(mo) ? mo : NULL);
}

//==========================================================================
//
//  SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

mobj_t *SpawnPlayerMissile(mobj_t * source, classid type)
{
	TAVec angles;
	TVec vforward;
	float x, y, z;

	// Try to find a target
	avcpy(source->Angles, angles);
	AimLineAttack(source, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(source, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(source, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
			}
		}
	}

	x = source->Origin.x;
	y = source->Origin.y;
	z = source->Origin.z + 32.0 - tan(source->Angles.pitch);
	z -= source->FloorClip;
	MissileMobj = P_SpawnMobj(x, y, z, type);
	if (MissileMobj->sound_sight)
	{
		StartSound(*MissileMobj, MissileMobj->sound_sight, CHAN_VOICE);
	}
	MissileMobj->target = source;
	MissileMobj->Angles = angles;
	AngleVector(&angles, &vforward);
	MissileMobj->Velocity = vforward * MissileMobj->Speed;
	if (MissileMobj->Class == BlasterFX1)
	{
		// Ultra-fast ripper spawning missile
		MissileMobj->Origin += MissileMobj->Velocity * 0.00357;
	}
	else
	{
		// Normal missile
		MissileMobj->Origin += MissileMobj->Velocity * 0.01429;
	}
	if (!P_TryMove(MissileMobj, MissileMobj->Origin.x, MissileMobj->Origin.y))
	{
		// Exploded immediately
		P_ExplodeMissile(MissileMobj);
		return NULL;
	}
	return MissileMobj;
}

//==========================================================================
//
//  SpawnPlayerMissileAngle
//
//==========================================================================

mobj_t *SpawnPlayerMissileAngle(mobj_t * source, classid type, float angle)
{
	mobj_t *th;
	TAVec angles;
	TVec vforward;
	float x, y, z;

	//
	// see which target is to be aimed at
	//
	angles = source->Angles;
	angles.yaw = angle;
	AimLineAttack(source, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(source, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(source, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	x = source->Origin.x;
	y = source->Origin.y;
	z = source->Origin.z + 4.0 * 8.0 - tan(source->Angles.pitch);
	z -= source->FloorClip;
	th = P_SpawnMobj(x, y, z, type);
	if (th->sound_sight)
	{
		StartSound(*th, th->sound_sight, CHAN_VOICE);
	}
	th->target = source;
	th->Angles = angles;
	AngleVector(&angles, &vforward);
	th->Velocity = vforward * th->Speed;
	return (CheckMissileSpawn(th) ? th : NULL);
}

//==========================================================================
//
//  P_SeekerMissile
//
//  The missile specialmobj1 field must be mobj_t *target. Returns true if
// target was tracked, false if not.
//
//==========================================================================

boolean P_SeekerMissile(mobj_t * actor, float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;
	mobj_t *target;

	target = actor->specialmobj1;
	if (!target)
	{
		return false;
	}
	if (!target->bShootable)
	{
		// Target died
		actor->specialmobj1 = NULL;
		return false;
	}
	dir = P_FaceMobj(actor, target, &delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{	// Turn clockwise
		actor->Angles.yaw = AngleMod360(actor->Angles.yaw + delta);
	}
	else
	{	// Turn counter clockwise
		actor->Angles.yaw = AngleMod360(actor->Angles.yaw - delta);
	}
	angle = actor->Angles.yaw;
	actor->Velocity.x = actor->Speed * cos(angle);
	actor->Velocity.y = actor->Speed * sin(angle);
	if (actor->Origin.z + actor->Height < target->Origin.z ||
		target->Origin.z + target->Height < actor->Origin.z)
	{
		// Need to seek vertically
		dist = MobjDist2(*target, *actor);
		dist = dist / actor->Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		actor->Velocity.z = (target->Origin.z - actor->Origin.z) / dist;
	}
	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.15  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.14  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.13  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.12  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
