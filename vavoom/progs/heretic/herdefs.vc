//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#define MAXCHICKENHEALTH 30
#define VIEWHEIGHT		41.0

#define ANGLE_1			0x01000000
#define ANGLE_MAX		0xffffffff

#define BLINKTHRESHOLD 	4.0

#define INVULNTIME		30.0
#define INVISTIME		60.0
#define INFRATIME		120.0
#define WPNLEV2TIME 	40.0
#define FLIGHTTIME 		60.0
#define CHICKENTIME 	40.0

#define FLAME_THROWER_TIME	10.0
#define MAGIC_JUNK			1234

#define FOOTCLIPSIZE	10.0
#define TELEFOGHEIGHT 	32.0

#define BASETHRESHOLD	100	// follow a player exlusively for 3 seconds

#define	MTF_EASY		0x0001	// Skill flags.
#define	MTF_NORMAL		0x0002
#define	MTF_HARD		0x0004
#define	MTF_AMBUSH		0x0008	// Deaf monsters/do not react to sound.
#define MTF_DORMANT		0x0010	// The thing is dormant
#define MTF_FIGHTER		0x0020	// Thing appearing in player classes
#define MTF_CLERIC		0x0040
#define MTF_MAGE		0x0080
#define MTF_GSINGLE		0x0100	// Appearing in game modes
#define MTF_GCOOP		0x0200
#define MTF_GDEATHMATCH	0x0400

#define ONFLOORZ		-99999.0
#define ONCEILINGZ		99999.0
#define FLOATRANDZ		99998.0

// MAXRADIUS is for precalculated sector block boxes
// the spider demon is larger, but we don't have any moving sectors
// nearby
#define MAXRADIUS 		32.0

//
// Player internal flags, for cheats and debug.
//
#define CF_NOCLIP		1	// No clipping, walk through barriers.
#define CF_GODMODE		2	// No damage, no health loss.

#define MELEERANGE		64.0
#define MISSILERANGE	(32.0 * 64.0)

#define LOWERSPEED		6.0
#define RAISESPEED		6.0

#define WEAPONBOTTOM	128.0
#define WEAPONTOP		32.0

// 16 pixels of bob
#define MAXBOB			16.0
#define ANG5   			(ANG90 / 18)

#define MAXHEALTH		100

enum
{
	FLOOR_SOLID,
	FLOOR_WATER,
	FLOOR_LAVA,
	FLOOR_SLUDGE
};

enum
{
	CONTENTS_EMPTY,
	CONTENTS_WATER,
	CONTENTS_LAVA,
	CONTENTS_SLUDGE,

	CONTENTS_SOLID = -1
};

enum
{
	CSHIFT_CONTENTS
};

enum
{
	wp_staff,
	wp_goldwand,
	wp_crossbow,
	wp_blaster,
	wp_skullrod,
	wp_phoenixrod,
	wp_mace,
	wp_gauntlets,
	wp_beak,

	NUMWEAPONS,

	// No pending weapon change.
	wp_nochange
};

// Ammunition types defined.
enum
{
	am_goldwand,
	am_crossbow,
	am_blaster,
	am_skullrod,
	am_phoenixrod,
	am_mace,

	NUMAMMO,

	am_noammo	// staff, gauntlets
};

enum
{
	key_yellow,
	key_green,
	key_blue,
	NUMKEYS
};

// Power up artifacts.
enum
{
	pw_invulnerability,
	pw_invisibility,
	pw_infrared,
	pw_weaponlevel2,
	pw_flight,
	NUMPOWERS
};

enum
{
	arti_none,
	arti_invulnerability,
	arti_invisibility,
	arti_health,
	arti_superhealth,
	arti_tomeofpower,
	arti_torch,
	arti_firebomb,
	arti_egg,
	arti_fly,
	arti_teleport,
	NUMARTIFACTS
};

struct inventory_t
{
	int type;
	int count;
};

#ifdef SERVER

addfields mobj_t
{
	//  States
	int spawnstate;
	int seestate;
	int painstate;
	int meleestate;
	int missilestate;
	int crashstate;
	int deathstate;
	int xdeathstate;
	int raisestate;

	//  Sounds
	int sound_sight;
	int sound_active;
	int sound_attack;
	int sound_pain;
	int sound_death;

	//  Params
	float mass;
	float speed;
	int painchance;
	int spawnhealth;
	int gibshealth;

	float time;	// state tic counter
	int statenum;
	int nextstate;

	int special1;	// Special info
	int special2;	// Special info
	mobj_t *specialmobj1;
	mobj_t *specialmobj2;

	boolean blaster;

	// Player number last looked for.
	int lastlook;

	// For nightmare respawn.
	mthing_t spawnpoint;

	// Reaction time: if non 0, don't attack yet.
	// Used by player to freeze a bit after teleporting.
	int reactiontime;

	// If >0, the target will be chased
	// no matter what (even if shot)
	int threshold;

	// Movement direction, movement generation (zig-zagging).
	int movedir;	// 0-7
	int movecount;	// when 0, select a new dir

	//  Water
	int waterlevel;
	int watertype;
};

addfields player_t
{
	//
	//  FIRST FIELDS ARE STATS THAT ARE SENT TO CLIENT FOR STATUS BAR
	//

	//
	//  Long stats
	//

	//
	//  Short stats
	//

	int ammo[NUMAMMO];

	// Power ups. invinc and invis are tic counters.
	int powers[NUMPOWERS];

	int inventoryTics;
	int chickenTics;	// player is a chicken if > 0

	//
	//  Byte stats
	//

	int ArtifactFlash;
	int inv_ptr;
	int curpos;

	int armorpoints;

	// Bit flags, for cheats and debug.
	// See cheat_t, above.
	int cheats;

	int keys;

	int readyArtifact;
	inventory_t inventory[NUMARTIFACTS];
	int inventorySlotNum;

	int readyweapon;
	int readyammo;

	//
	//  ----------
	//

	int arti;	// artitype_t to use

	// Base height above floor for viewz.
	float viewheight;
	// Bob/squat speed.
	float deltaviewheight;
	// bounded/scaled total momentum.
	float bob;

	float flyheight;

	int artifactCount;

	// Refired shots are less accurate.
	int refire;

	boolean backpack;

	// Is wp_nochange if not changing.
	int pendingweapon;

	int w_ammo;
	int w_upstate;
	int w_downstate;
	int w_readystate;
	int w_atkstate;
	int w_holdatkstate;
	int w_flashstate;
	int w2_ammo;
	int w2_upstate;
	int w2_downstate;
	int w2_readystate;
	int w2_atkstate;
	int w2_holdatkstate;
	int w2_flashstate;

	boolean weaponowned[NUMWEAPONS];

	// Who did damage (NULL for floors/ceilings).
	mobj_t *attacker;

	// For screen flashing (red or bright).
	int damagecount;
	int bonuscount;

	int flamecount;	// for flame thrower duration

	int jumpTics;

	// Armor type is 0-2.
	int armortype;

	int chickenPeck;	// chicken peck countdown
	mobj_t *rain1;	// active rain maker 1
	mobj_t *rain2;	// active rain maker 2

	int newtorch;	// used in the torch flicker effect.
	int newtorchdelta;

	TVec movedir;
};

int long_stats = 0;
int short_stats = NUMAMMO + NUMPOWERS + 2;
int byte_stats = 10 + 2 * NUMARTIFACTS;

#endif

#ifdef CLIENT

addfields client_state_t
{
	//
	//  STATS FOR STATUS BAR
	//

	//
	//  Long stats
	//

	//
	//  Short stats
	//

	int ammo[NUMAMMO];

	// Power ups. invinc and invis are tic counters.
	int powers[NUMPOWERS];

	int inventoryTics;
	int chickenTics;	// player is a chicken if > 0

	//
	//  Byte stats
	//

	int ArtifactFlash;
	int inv_ptr;
	int curpos;

	int armorpoints;

	// Bit flags, for cheats and debug.
	// See cheat_t, above.
	int cheats;

	int keys;

	int readyArtifact;
	inventory_t inventory[NUMARTIFACTS];
	int inventorySlotNum;

	int readyweapon;
	int readyammo;
};

#endif

// --- mobj.flags ---

#define MF_SPECIAL		0x00000001	// call P_SpecialThing when touched
#define MF_SOLID		0x00000002	// Blocks.
#define MF_SHOOTABLE	0x00000004	// Can be hit.
#define MF_NOSECTOR		0x00000008	// don't use the sector links
									// (invisible but touchable)
#define MF_NOBLOCKMAP	0x00000010	// don't use the blocklinks
									// (inert but displayable)
#define MF_AMBUSH		0x00000020	// Ambush
#define MF_JUSTHIT		0x00000040	// try to attack right back
#define MF_JUSTATTACKED	0x00000080	// take at least one step before attacking
#define MF_SPAWNCEILING	0x00000100	// hang from ceiling instead of floor
#define MF_NOGRAVITY	0x00000200	// don't apply gravity every tic
// movement flags
#define MF_DROPOFF		0x00000400	// allow jumps from high places
#define MF_PICKUP		0x00000800	// for players to pick up items
#define MF_NOCLIP		0x00001000	// player cheat
#define MF_SLIDE		0x00002000	// keep info about sliding along walls
#define MF_FLOAT		0x00004000	// allow moves to any height, no gravity
#define MF_TELEPORT		0x00008000	// don't cross lines or look at heights
#define MF_MISSILE		0x00010000	// don't hit same species, explode on block
#define MF_DROPPED		0x00020000	// dropped by a demon, not level spawned
#define MF_NOBLOOD		0x00080000	// don't bleed when shot (use puff)
#define MF_CORPSE		0x00100000	// don't stop moving halfway off a step
#define MF_INFLOAT		0x00200000	// floating to a height for a move, don't
									// auto float to target's height
#define MF_COUNTKILL	0x00400000	// count towards intermission kill total
#define MF_COUNTITEM	0x00800000	// count towards intermission item total
#define MF_SKULLFLY		0x01000000	// skull in flight

#define MF_WATERJUMP	0x80000000

// --- mobj.flags2 ---

#define MF2_LOGRAV			0x00000001	// alternate gravity setting
#define MF2_WINDTHRUST		0x00000002	// gets pushed around by the wind
										// specials
#define MF2_FLOORBOUNCE		0x00000004	// bounces off the floor
#define MF2_THRUGHOST		0x00000008	// missile will pass through ghosts
#define MF2_FLY				0x00000010	// fly mode is active
#define MF2_FOOTCLIP		0x00000020	// if feet are allowed to be clipped
#define MF2_SPAWNFLOAT		0x00000040	// spawn random float z
#define MF2_NOTELEPORT		0x00000080	// does not teleport
#define MF2_RIP				0x00000100	// missile rips through solid
										// targets
#define MF2_PUSHABLE		0x00000200	// can be pushed by other moving
										// mobjs
#define MF2_SLIDE			0x00000400	// slides against walls
#define MF2_ONMOBJ			0x00000800	// mobj is resting on top of another
										// mobj
#define MF2_PASSMOBJ		0x00001000	// Enable z block checking.  If on,
										// this flag will allow the mobj to
										// pass over/under other mobjs.
#define MF2_CANNOTPUSH		0x00002000	// cannot push other pushable mobjs
#define MF2_BOSS			0x00008000	// mobj is a major boss
#define MF2_FIREDAMAGE		0x00010000	// does fire damage
#define MF2_NODMGTHRUST		0x00020000	// does not thrust target when
										// damaging
#define MF2_TELESTOMP		0x00040000	// mobj can stomp another
#define MF2_FLOATBOB		0x00080000	// use float bobbing z movement

enum
{
	svc_gun_shot = USER_PROTOCOL_START,
	svc_blood,
	svc_explosion
};

enum
{
	EF_DL_NONE,
	EF_DL_WHITE,
	EF_DL_RED,
	EF_DL_GREEN,
	EF_DL_BLUE,
	EF_DL_MAGENTA
};

#define EF_DLIGHT_MASK		7

enum
{
	CHAN_AUTO,
	CHAN_VOICE,
	CHAN_WEAPON,
	CHAN_ITEM,
	CHAN_BODY
};

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.5  2001/09/24 17:15:00  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
