//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponEx : Weapon
	abstract;

const float MELEERANGE		= 64.0;
const float MISSILERANGE	= (32.0 * 64.0);

const int
	USE_GWND_AMMO_1	= 1,
	USE_GWND_AMMO_2 = 1,
	USE_CBOW_AMMO_1 = 1,
	USE_CBOW_AMMO_2 = 1,
	USE_BLSR_AMMO_1 = 1,
	USE_BLSR_AMMO_2 = 5,
	USE_SKRD_AMMO_1 = 1,
	USE_SKRD_AMMO_2 = 5,
	USE_PHRD_AMMO_1 = 1,
	USE_PHRD_AMMO_2 = 1,
	USE_MACE_AMMO_1 = 1,
	USE_MACE_AMMO_2 = 5;

int AmmoUsePL2;

state UpState2;
state DownState2;
state ReadyState2;
state AttackState2;
state HoldAttackState2;

float PSpriteSY;
bool bInShareware;

void WeaponLevel2Init() { }
void WeaponLevel2Fade() { }

int WeaponType;

//==========================================================================
//
//  TryPickup
//
//  Returns true if the weapon or its ammo was accepted.
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	bool gaveAmmo;
	bool gaveWeapon;

	// Cooperative net-game
	if (ShouldStay() && !bDropped && Player(Toucher.Player).WeaponOwned[WeaponType])
	{
		return false;
	}

	gaveAmmo = Player(Toucher.Player).GiveAmmo(AmmoType1, AmmoGive1);
	if (Player(Toucher.Player).WeaponOwned[WeaponType])
	{
		gaveWeapon = false;
	}
	else
	{
		gaveWeapon = true;
		Player(Toucher.Player).WeaponOwned[WeaponType] =
			Spawn(MainGameInfo(Level.Game).WeaponClasses[WeaponType]);
		Player(Toucher.Player).WeaponOwned[WeaponType].AttachToOwner(Toucher);
		if (!Player(Toucher.Player).ReadyWeapon ||
			MainGameInfo(Level.Game).WeaponValue[WeaponType] >
			MainGameInfo(Level.Game).WeaponValue[Player(Toucher.Player).ReadyWeapon.WeaponType])
		{
			// Only switch to more powerful weapons
			Player(Toucher.Player).PendingWeapon = Player(Toucher.Player).WeaponOwned[WeaponType];
		}
	}
	if (gaveWeapon || gaveAmmo)
	{
		GoAwayAndDie();
	}
	return (gaveWeapon || gaveAmmo);
}

//==========================================================================
//
//	ShouldStay
//
//==========================================================================

bool ShouldStay()
{
	return Level.Game.netgame && !Level.Game.deathmatch;
}

//===========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough ammo to shoot.  If not, selects the
// next weapon to use.
//
//===========================================================================

bool CheckAmmo(bool AutoSwitch, optional bool RequireAmmo)
{
	int				count;

	if (Player(Owner.Player).Powers[pw_weaponlevel2] && !Level.Game.deathmatch)
	{
		count = AmmoUsePL2;
	}
	else
	{
		count = AmmoUse1;
	}

	if (!Ammo1 || Ammo1.Amount >= count)
	{
		return true;
	}
	if (!AutoSwitch)
	{
		return false;
	}

	// out of ammo, pick a weapon to change to
	WeaponEx Best = WeaponEx(Player(Owner.Player).BestWeapon());

	Player(Owner.Player).PendingWeapon = Best;
	if (Player(Owner.Player).Powers[pw_weaponlevel2])
	{
		Player(Owner.Player).SetViewState(ps_weapon, DownState2);
	}
	else
	{
		Player(Owner.Player).SetViewState(ps_weapon, DownState);
	}
	return false;
}

//==========================================================================
//
//	DecAmmo
//
//==========================================================================

void DecAmmo(int Count)
{
	if (Ammo1)
	{
		Ammo1.Amount -= Count;
	}
}

//==========================================================================
//
//  HITDICE
//
//  Most damage in HERETIC and HEXEN defined using HITDICE
//
//==========================================================================

final int HITDICE(int a)
{
	return (1 + (P_Random() & 7)) * a;
}

//===========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
//
//===========================================================================

final void A_WeaponReady()
{
	float angle;

	if (Player(Owner.Player).ChickenTime)
	{
		// Change to the chicken beak
		Player(Owner.Player).ActivateBeak();
		return;
	}
	// Change player from attack state
	if (Owner.State == Actor(Owner).MissileState ||
		Owner.State == PlayerPawn(Owner).Attack2State)
	{
		Owner.SetState(Actor(Owner).IdleState);
	}
	// Put the weapon away if the player has a pending weapon or has
	// died.
	if (Player(Owner.Player).PendingWeapon || !Owner.Player.Health)
	{
		if (Player(Owner.Player).Powers[pw_weaponlevel2])
		{
			Owner.Player.SetViewState(ps_weapon, DownState2);
		}
		else
		{
			Owner.Player.SetViewState(ps_weapon, DownState);
		}
		return;
	}

	// Check for fire.  The phoenix rod does not auto fire.
	if (Owner.Player.Buttons & BT_ATTACK)
	{
		if (!Owner.Player.bAttackDown ||
			(Player(Owner.Player).ReadyWeapon.WeaponType != wp_phoenixrod))
		{
			Owner.Player.bAttackDown = true;
			Player(Owner.Player).FireWeapon();
			return;
		}
	}
	else
	{
		Owner.Player.bAttackDown = false;
	}

	// Bob the weapon based on movement speed.
	angle = AngleMod360(180.0 * XLevel.Time);
	Owner.Player.ViewStates[ps_weapon].SX = 1.0 + Player(Owner.Player).Bob * cos(angle);
	if (angle >= 180.0)
	{
		angle -= 180.0;
	}
	Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP + Player(Owner.Player).Bob * sin(angle);
}

//===========================================================================
//
//  A_Lower
//
//===========================================================================

final void A_Lower()
{
	if (Player(Owner.Player).ChickenTime)
	{
		Owner.Player.ViewStates[ps_weapon].SY = WEAPONBOTTOM;
	}
	else
	{
		// FIXME!!
		if (Level.Game.frametime < 1.0 / 35.0)
			Owner.Player.ViewStates[ps_weapon].SY += LOWERSPEED;
		else
			Owner.Player.ViewStates[ps_weapon].SY += LOWERSPEED * 35.0 * Level.Game.frametime;
	}
	if (Owner.Player.ViewStates[ps_weapon].SY < WEAPONBOTTOM)
	{
		// Not lowered all the way yet
		return;
	}
	if (Owner.Player.PlayerState == PST_DEAD)
	{
		// Player is dead, so don't bring up a pending weapon
		Owner.Player.ViewStates[ps_weapon].SY = WEAPONBOTTOM;
		return;
	}
	if (!Owner.Player.Health)
	{
		// Player is dead, so keep the weapon off screen
		Owner.Player.SetViewState(ps_weapon, none);
		return;
	}
	Player(Owner.Player).ReadyWeapon = Player(Owner.Player).PendingWeapon;
	Player(Owner.Player).BringUpWeapon();
}

//===========================================================================
//
//  A_Raise
//
//===========================================================================

final void A_Raise()
{
	//	FIXME!!
	if (Level.Game.frametime < 1.0 / 35.0)
		Owner.Player.ViewStates[ps_weapon].SY -= RAISESPEED;
	else
		Owner.Player.ViewStates[ps_weapon].SY -= RAISESPEED * 35.0 * Level.Game.frametime;
	if (Owner.Player.ViewStates[ps_weapon].SY > WEAPONTOP)
	{
		// Not raised all the way yet
		return;
	}
	Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP;
	if (Player(Owner.Player).Powers[pw_weaponlevel2])
	{
		Owner.Player.SetViewState(ps_weapon, ReadyState2);
	}
	else
	{
		Owner.Player.SetViewState(ps_weapon, ReadyState);
	}
}

//===========================================================================
//
//  A_ReFire
//
//  The player can re fire the weapon without lowering it entirely.
//
//===========================================================================

final void A_ReFire()
{
	if ((Owner.Player.Buttons & BT_ATTACK) &&
		!Player(Owner.Player).PendingWeapon && Owner.Player.Health)
	{
		Player(Owner.Player).Refire++;
		Player(Owner.Player).FireWeapon();
	}
	else
	{
		Player(Owner.Player).Refire = 0;
		CheckAmmo(true);
	}
}

//===========================================================================
//
//  A_Light0
//
//===========================================================================

final void A_Light0()
{
	Owner.Player.ExtraLight = 0;
}

//
//	UNUSED
//
__states__
{
	S_LIGHTDONE('STFF', 0, 0.0 / 35.0, none) = A_Light0
}

defaultproperties
{
	Height = 32.0;
	PickupSound = 'misc/w_pkup';
	bInShareware = true;
}
