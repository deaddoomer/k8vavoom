//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Weapon : ViewEntity
	abstract;

const float MELEERANGE		= 64.0;
const float MISSILERANGE	= (32.0 * 64.0);

const float LOWERSPEED		= 6.0;
const float RAISESPEED		= 6.0;

const float WEAPONBOTTOM	= 128.0;
const float WEAPONTOP		= 32.0;

const int
	USE_GWND_AMMO_1	= 1,
	USE_GWND_AMMO_2 = 1,
	USE_CBOW_AMMO_1 = 1,
	USE_CBOW_AMMO_2 = 1,
	USE_BLSR_AMMO_1 = 1,
	USE_BLSR_AMMO_2 = 5,
	USE_SKRD_AMMO_1 = 1,
	USE_SKRD_AMMO_2 = 5,
	USE_PHRD_AMMO_1 = 1,
	USE_PHRD_AMMO_2 = 1,
	USE_MACE_AMMO_1 = 1,
	USE_MACE_AMMO_2 = 5;

int Ammo;
state UpState;
state DownState;
state ReadyState;
state AttackState;
state HoldAttackState;
state UpState2;
state DownState2;
state ReadyState2;
state AttackState2;
state HoldAttackState2;
float PSpriteSY;

void WeaponLevel2Init() { }
void WeaponLevel2Fade() { }

//==========================================================================
//
//  HITDICE
//
//  Most damage in HERETIC and HEXEN defined using HITDICE
//
//==========================================================================

int HITDICE(int a)
{
	return (1 + (P_Random() & 7)) * a;
}

//===========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
//
//===========================================================================

void A_WeaponReady()
{
	float angle;

	if (Player(Player).ChickenTime)
	{
		// Change to the chicken beak
		Player(Player).ActivateBeak();
		return;
	}
	// Change player from attack state
	if (Player.MO.State == Actor(Player.MO).MissileState ||
		Player.MO.State == PlayerPawn(Player.MO).Attack2State)
	{
		Player.MO.SetState(Actor(Player.MO).IdleState);
	}
	// Put the weapon away if the player has a pending weapon or has
	// died.
	if (Player(Player).PendingWeapon != wp_nochange || !Player.Health)
	{
		if (Player(Player).Powers[pw_weaponlevel2])
		{
			Player.SetViewState(ps_weapon, DownState2);
		}
		else
		{
			Player.SetViewState(ps_weapon, DownState);
		}
		return;
	}

	// Check for fire.  The phoenix rod does not auto fire.
	if (Player.Buttons & BT_ATTACK)
	{
		if (!Player.bAttackDown || (Player(Player).ReadyWeapon != wp_phoenixrod))
		{
			Player.bAttackDown = true;
			Player(Player).FireWeapon();
			return;
		}
	}
	else
	{
		Player.bAttackDown = false;
	}

	// Bob the weapon based on movement speed.
	angle = AngleMod360(180.0 * Player.Level.Game.level->time);
	SX = 1.0 + Player(Player).Bob * cos(angle);
	if (angle >= 180.0)
	{
		angle -= 180.0;
	}
	SY = WEAPONTOP + Player(Player).Bob * sin(angle);
}

//===========================================================================
//
//  A_Lower
//
//===========================================================================

void A_Lower()
{
	if (Player(Player).ChickenTime)
	{
		SY = WEAPONBOTTOM;
	}
	else
	{
		// FIXME!!
		if (Player.Level.Game.frametime < 1.0 / 35.0)
			SY += LOWERSPEED;
		else
			SY += LOWERSPEED * 35.0 * Player.Level.Game.frametime;
	}
	if (SY < WEAPONBOTTOM)
	{
		// Not lowered all the way yet
		return;
	}
	if (Player.PlayerState == PST_DEAD)
	{
		// Player is dead, so don't bring up a pending weapon
		SY = WEAPONBOTTOM;
		return;
	}
	if (!Player.Health)
	{
		// Player is dead, so keep the weapon off screen
		Player.SetViewState(ps_weapon, none);
		return;
	}
	Player(Player).ReadyWeapon = Player(Player).PendingWeapon;
	Player(Player).BringUpWeapon();
}

//===========================================================================
//
//  A_Raise
//
//===========================================================================

void A_Raise()
{
	//	FIXME!!
	if (Player.Level.Game.frametime < 1.0 / 35.0)
		SY -= RAISESPEED;
	else
		SY -= RAISESPEED * 35.0 * Player.Level.Game.frametime;
	if (SY > WEAPONTOP)
	{
		// Not raised all the way yet
		return;
	}
	SY = WEAPONTOP;
	if (Player(Player).Powers[pw_weaponlevel2])
	{
		Player.SetViewState(ps_weapon, ReadyState2);
	}
	else
	{
		Player.SetViewState(ps_weapon, ReadyState);
	}
}

//===========================================================================
//
//  A_ReFire
//
//  The player can re fire the weapon without lowering it entirely.
//
//===========================================================================

void A_ReFire()
{
	if ((Player.Buttons & BT_ATTACK)
		&& Player(Player).PendingWeapon == wp_nochange && Player.Health)
	{
		Player(Player).Refire++;
		Player(Player).FireWeapon();
	}
	else
	{
		Player(Player).Refire = 0;
		Player(Player).CheckAmmo();
	}
}

//===========================================================================
//
//  A_Light0
//
//===========================================================================

void A_Light0()
{
	Player.ExtraLight = 0;
}

//
//	UNUSED
//
__states__
{
	S_LIGHTDONE('STFF', 0, 0.0 / 35.0, none) { A_Light0(); }
}

defaultproperties
{
}
