//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PlayerPawn : Pawn
	abstract;

bool bSafeToRemove;

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return Player::VIEWHEIGHT;
}

//==========================================================================
//
//	ShouldDropItems
//
//==========================================================================

bool ShouldDropItems()
{
	return false;
}

//==========================================================================
//
//	AddInventory
//
//==========================================================================

void AddInventory(Inventory Item)
{
	::AddInventory(Item);
	if (bIsPlayer && Item.bInvBar && !Player(Player).InvPtr)
	{
		Player(Player).InvPtr = Item;
		Player(Player).InvFirst = Item;
	}
}

//==========================================================================
//
//	RemoveInventory
//
//==========================================================================

void RemoveInventory(Inventory Item)
{
	if (bIsPlayer)
	{
		if (Player(Player).InvPtr == Item)
		{
			Player(Player).InvPtr = Item.PrevInv();
			if (!Player(Player).InvPtr)
			{
				Player(Player).InvPtr = Item.NextInv();
			}
		}
		if (Player(Player).InvFirst == Item)
		{
			Player(Player).InvFirst = Item.PrevInv();
			if (!Player(Player).InvFirst)
			{
				Player(Player).InvFirst = Item.NextInv();
			}
		}
	}
	::RemoveInventory(Item);
	if (bIsPlayer && Item.bInvBar)
	{
		Player(Player).AdjustInvFirst();
	}
}

//==========================================================================
//
//  UseInventory
//
//==========================================================================

bool UseInventory(Inventory Item)
{
	//	Can't use anything while totally frozen
	if (Player(Player).bTotallyFrozen)
	{
		return false;
	}
	// Found match - try to use
	if (!::UseInventory(Item))
	{
		// Unable to use artifact, advance pointer
		Player(Player).PlayerNextArtifact();
		return false;
	}
	PlaySound(Item.UseSound, CHAN_ITEM);
	Player(Player).ArtifactFlash = 4;
	return true;
}

//==========================================================================
//
//	A_AddPlayerCorpse
//
//==========================================================================

final void A_AddPlayerCorpse()
{
	if (HereticLevelInfo(Level).bodyqueslot >= HereticLevelInfo::BODYQUESIZE)
	{
		// Too many player corpses - remove an old one
		HereticLevelInfo(Level).bodyque[HereticLevelInfo(Level).bodyqueslot % HereticLevelInfo::BODYQUESIZE].Destroy();
	}
	HereticLevelInfo(Level).bodyque[HereticLevelInfo(Level).bodyqueslot % HereticLevelInfo::BODYQUESIZE] = self;
	Translation = XLevel.SetBodyQueueTrans(
		HereticLevelInfo(Level).bodyqueslot % HereticLevelInfo::BODYQUESIZE,
		Translation);
	HereticLevelInfo(Level).bodyqueslot++;
}

defaultproperties
{
	bMonster = false;
	bCountKill = false;
	bActivateMCross = false;
	bDropOff = true;
	bOnmobjCopyVel = true;
	bNoBlockMonst = true;
}
