//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MaceSpawner : Actor
	__mobjinfo__(2002);

//==========================================================================
//
//	A_SpawnMace
//
//	This is implemented using state so that mace spots spawned by ACS
// scripts work properly. Uses Target to link them.
//
//==========================================================================

final void A_SpawnMace()
{
	EntityEx		Prev;
	EntityEx		Spot;
	EntityEx		First;
	int				SpotCount;
	Mace			M;

	if (Target)
	{
		//	Already done.
		return;
	}

	//	Link all mace spots.
	Prev = none;
	First = none;
	SpotCount = 0;
	foreach AllThinkers(MaceSpawner, Spot)
	{
		if (Prev)
		{
			Prev.Target = Spot;
		}
		else
		{
			First = Spot;
		}
		Prev = Spot;
		SpotCount++;
	}
	Prev.Target = First;

	if (!SpotCount)
	{
		// No maces placed
		return;
	}
	if (!Level.Game.deathmatch && P_Random() < 64)
	{
		// Sometimes doesn't show up if not in deathmatch
		return;
	}
	M = Spawn(Mace);
	M.SpotCount = SpotCount;
	M.FirstSpot = First;
	M.DoRespawn();
}

__states__
{
	S0('TNT1', 0, 0.03, S1) = none
	S1('TNT1', 0, -1.0, none) = A_SpawnMace
}

defaultproperties
{
	bHidden = true;
	bNoBlockmap = true;
	IdleState = S0;
}
