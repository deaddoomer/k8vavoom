//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : EntityEx
	abstract;

const float TELEFOGHEIGHT 	= 32.0;

const float BONUSADD		= 0.2;

class<Actor> SpecialCID;

//===========================================================================
//
//  IsTeleportSpot
//
//===========================================================================

bool IsTeleportSpot()
{
	return !!TeleportDest(self);
}

//===========================================================================
//
//  IsTeleportSpot2
//
//===========================================================================

bool IsTeleportSpot2()
{
	return !!TeleportDest2(self);
}

//===========================================================================
//
//  IsPointPusher
//
//===========================================================================

bool IsPointPusher()
{
	return !!PointPusher(self);
}

//===========================================================================
//
//  IsPointPuller
//
//===========================================================================

bool IsPointPuller()
{
	return !!PointPuller(self);
}

//==========================================================================
//
//  HITDICE
//
//  Most damage in HERETIC and HEXEN defined using HITDICE
//
//==========================================================================

int HITDICE(int a)
{
	return (1 + (P_Random() & 7)) * a;
}

//==========================================================================
//
//  DoMissileExplosionEffects
//
//==========================================================================

void DoMissileExplosionEffects()
{
	if (Effects & HereticDefs::EF_DLIGHT_MASK)
	{
		SendExplosion(Effects & HereticDefs::EF_DLIGHT_MASK, Origin);
		Effects &= ~HereticDefs::EF_DLIGHT_MASK;
	}
}

//==========================================================================
//
//  SendExplosion
//
//==========================================================================

final void SendExplosion(int etype, TVec org)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientExplosion(etype, org);
	}
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(EntityEx source)
{
	// Check for frag changes
	if (bIsPlayer)
	{
		if (source.Player.bIsBot)
		{
			Player(source.Player).Bot.Killed(self);
		}

		if (Player.bIsBot)
		{
			Player(Player).Bot.Died(Actor(source));
		}

		// Frag stuff
		if (self == source)
		{
			// Self-frag
			Player.FragsStats[Player.GetPlayerNum()]--;
			Player.Frags--;
		}
		else
		{
			source.Player.FragsStats[Player.GetPlayerNum()]++;
			source.Player.Frags++;
			source.PlaySound('misc/frag', CHAN_ITEM);
			if (Player(source.Player).ChickenTime)
			{
				// Make a super chicken
				Player(source.Player).GivePower(pw_weaponlevel2);
			}
		}
	}
}

//==========================================================================
//
//	PlayerKilled
//
//==========================================================================

void PlayerKilled(EntityEx source, EntityEx inflictor)
{
	// Count environment kills against you
	if (!source)
	{
		Player.FragsStats[Player.GetPlayerNum()]--;
		Player.Frags--;
	}
	Player(Player).Powers[pw_flight] = 0.0;
	Player(Player).Powers[pw_weaponlevel2] = 0.0;
}

//==========================================================================
//
//  MinotaurSlam
//
//==========================================================================

void MinotaurSlam(Actor Other)
{
	float angle;
	float thrust;

	angle = atan2(Other.Origin.y - Origin.y, Other.Origin.x - Origin.x);
	thrust = 16.0 + Random() * 4.0;
	Other.Velocity.x += thrust * cos(angle) * 35.0;
	Other.Velocity.y += thrust * sin(angle) * 35.0;
	Other.Damage(none, none, HITDICE(6));
	if (Other.Player)
	{
		Other.ReactionTime = 0.4 + Random() * 0.2;
	}
}

//==========================================================================
//
//  TouchWhirlwind
//
//==========================================================================

void TouchWhirlwind(Actor Other)
{
	float randVal;

	Other.Angles.yaw = AngleMod360(Other.Angles.yaw +
		(Random() - Random()) * 45.0 / 2.0);
	Other.Velocity.x += (Random() - Random()) * 4.0 * 35.0;
	Other.Velocity.y += (Random() - Random()) * 4.0 * 35.0;
	if (XLevel.TicTime & 16 && !Other.bBoss)
	{
		randVal = Random() * 4.0;
		if (randVal > 2.5)
		{
			randVal = 2.5;
		}
		Other.Velocity.z += randVal * 35.0;
		if (Other.Velocity.z > 12.0 * 35.0)
		{
			Other.Velocity.z = 12.0 * 35.0;
		}
	}
	if (!(XLevel.TicTime & 7))
	{
		Other.Damage(none, none, 3);
	}
}

//==========================================================================
//
//  ChickenMorphPlayer
//
//  Returns true if the player gets turned into a chicken.
//
//==========================================================================

bool ChickenMorphPlayer()
{
	Actor fog;
	Actor chicken;

	if (Player(Player).ChickenTime)
	{
		if ((Player(Player).ChickenTime < Player::CHICKENTIME - 1.0) &&
			!Player(Player).Powers[pw_weaponlevel2])
		{
			// Make a super chicken
			Player(Player).GivePower(pw_weaponlevel2);
		}
		return false;
	}
	if (Player(Player).Powers[pw_invulnerability])
	{
		// Immune when invulnerable
		return false;
	}

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('misc/teleport', CHAN_VOICE);

	chicken = Spawn(ChickenPlayer, Origin);
	chicken.Special1 = Player(Player).ReadyWeapon;
	chicken.Angles.yaw = Angles.yaw;
	chicken.Player = Player;
	chicken.bIsPlayer = true;
	chicken.Health = Player::MAXCHICKENHEALTH;
	Player.Health = chicken.Health;
	Player.MO = chicken;
	Player(Player).ArmorPoints = 0;
	Player(Player).ArmorType = 0;
	Player(Player).Powers[pw_invisibility] = 0.0;
	Player(Player).Powers[pw_weaponlevel2] = 0.0;
	chicken.bFly = bFly;
	Player(Player).ChickenTime = Player::CHICKENTIME;
	Player(Player).ActivateBeak();

	SetState(S_FREETARGMOBJ);

	return true;
}

//==========================================================================
//
//  ChickenMorph
//
//==========================================================================

bool ChickenMorph()
{
	Actor fog;
	Actor chicken;
	int i;

	if (bIsPlayer)
	{
		return false;
	}
	if (bNoMorph)
	{
		return false;
	}

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('misc/teleport', CHAN_VOICE);

	chicken = Spawn(Chicken, Origin);
	chicken.SpecialCID = class<Actor>(Class);
	chicken.Special1 = ftoi(Player::CHICKENTIME * 35.0) + P_Random();
	chicken.Alpha = Alpha;
	chicken.Target = Target;
	chicken.Angles.yaw = Angles.yaw;
	chicken.TID = TID;
	chicken.Special = Special;
	chicken.InsertIntoTIDList(TID);
	for (i = 0; i < 5; i++)
	{
		chicken.Args[i] = Args[i];
	}

	RemoveFromTIDList();

	SetState(S_FREETARGMOBJ);

	return true;
}

//==========================================================================
//
//  AutoUseChaosDevice
//
//==========================================================================

bool AutoUseChaosDevice()
{
	int i;

	for (i = 0; i < Player(Player).InventorySlotNum; i++)
	{
		if (Player(Player).Inventory[i].type == HereticDefs::arti_teleport)
		{
			Player(Player).PlayerUseArtifact(HereticDefs::arti_teleport);
			Health = (Health + 1) / 2;
			Player.Health = Health;
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  AutoUseHealth
//
//==========================================================================

void AutoUseHealth(int saveHealth)
{
	int i;
	int count;
	int normalCount;
	int normalSlot;
	int superCount;
	int superSlot;

	normalCount = 0;
	superCount = 0;
	for (i = 0; i < Player(Player).InventorySlotNum; i++)
	{
		if (Player(Player).Inventory[i].type == HereticDefs::arti_health)
		{
			normalSlot = i;
			normalCount = Player(Player).Inventory[i].count;
		}
		else if (Player(Player).Inventory[i].type == HereticDefs::arti_superhealth)
		{
			superSlot = i;
			superCount = Player(Player).Inventory[i].count;
		}
	}
	if ((Level.Game.gameskill == sk_baby) && (normalCount * 25 >= saveHealth))
	{
		// Use quartz flasks
		count = (saveHealth + 24) / 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			Player(Player).PlayerRemoveArtifact(normalSlot);
		}
	}
	else if (superCount * 100 >= saveHealth)
	{
		// Use mystic urns
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			Player(Player).PlayerRemoveArtifact(superSlot);
		}
	}
	else if ((Level.Game.gameskill == sk_baby)
		&& (superCount * 100 + normalCount * 25 >= saveHealth))
	{
		// Use mystic urns and quartz flasks
		count = (saveHealth + 24) / 25;
		saveHealth -= count * 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			Player(Player).PlayerRemoveArtifact(normalSlot);
		}
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			//  I found a bug. There must be used superSlot, not normalSlot.
			//  Also if player used all quartz flasks, superSlot may be
			// invalid, so it must be found again.
			Player(Player).PlayerRemoveArtifact(superSlot);
		}
	}
	Player.Health = Health;
}

//==========================================================================
//
//  SpawnBloodSplatter
//
//==========================================================================

void SpawnBloodSplatter(TVec org, int damage)
{
	Actor mo;
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientBlood(org,
			damage > 255 ? 255 : damage);
	}

	mo = Spawn(BloodSplatter, org);
	mo.Target = self;
	mo.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
	mo.Velocity.z = 2.0 * 35.0;
}

//==========================================================================
//
//  SpawnRipperBlood
//
//==========================================================================

void SpawnRipperBlood()
{
	Actor th;
	TVec org;

	org.x = Origin.x + (Random() - Random()) * 16.0;
	org.y = Origin.y + (Random() - Random()) * 16.0;
	org.z = Origin.z + (Random() - Random()) * 16.0;
	th = Spawn(Blood, org);
	th.bNoGravity = true;
	th.Velocity.x = Velocity.x / 2.0;
	th.Velocity.y = Velocity.y / 2.0;
	th.StateTime += Random() * 0.1;
}

//===========================================================================
//
//	SpawnBlasterEffects
//
//===========================================================================

void SpawnBlasterEffects()
{
	TVec org;

	if (P_Random() < 64)
	{
		org = Origin;
		org.z = Origin.z - 8.0;
		if (org.z < FloorZ)
		{
			org.z = FloorZ;
		}
		Spawn(BlasterSmoke, org);
	}
}

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return Player::VIEWHEIGHT;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	if (!Physics(deltaTime))
	{
		return;
	}

	//
	// cycle through states, calling action functions at transitions
	//
	if (StateTime != -1.0)
	{
		if (!AdvanceState(deltaTime))
		{
			// mobj was removed
			return;
		}
	}
	else
	{
		// Check for monster respawn
		if (!bMonster)
		{
			return;
		}
		if (!MainGameInfo(Level.Game).respawnmonsters)
		{
			return;
		}
		MoveCount++;
		if (MoveCount < 12 * 35)
		{
			return;
		}
		if (XLevel.TicTime & 31)
		{
			return;
		}
		if (P_Random() > 4)
		{
			return;
		}
		NightmareRespawn();
	}
}

//==========================================================================
//
//	SectorChanged
//
//==========================================================================

bool SectorChanged(int CrushChange)
{
	Actor A;

	if (HeightClip())
	{
		return true;
	}

	//	Crunch bodies to giblets
	if (Health <= 0)
	{
		bSolid = false;
		Height = 0.0;
		Radius = 0.0;
		return true;	//fit
	}

	//	Crunch dropped items
	if (bDropped)
	{
		Destroy();
		return true;	//fit
	}

	if (!bShootable)
	{
		//	Assume it is bloody gibs or something
		return true;	//fit
	}

	if (CrushChange && !(XLevel.TicTime & 3))
	{
		Damage(none, none, CrushChange);

		//	Spray blood in a random direction
		A = Spawn(Blood, Origin + vector(0.0, 0.0, Height / 2.0));
		A.Velocity.x = (Random() - Random()) * 16.0 * 35.0;
		A.Velocity.y = (Random() - Random()) * 16.0 * 35.0;
	}
	return false;	//don't fit
}

//==========================================================================
//
//  SeekerMissile
//
//  The missile Tracer field must be Actor target. Returns true if
// target was tracked, false if not.
//
//==========================================================================

bool SeekerMissile(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;

	if (!Tracer)
	{
		return false;
	}
	if (!Tracer.bShootable)
	{
		// Target died
		Tracer = none;
		return false;
	}
	dir = FaceActor(Actor(Tracer), delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw = AngleMod360(Angles.yaw + delta);
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw = AngleMod360(Angles.yaw - delta);
	}
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);
	if (Origin.z + Height < Tracer.Origin.z ||
		Tracer.Origin.z + Tracer.Height < Origin.z)
	{
		// Need to seek vertically
		dist = DistTo2(Tracer);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = (Tracer.Origin.z - Origin.z) / dist;
	}
	return true;
}

//==========================================================================
//
//  HaveFlightPower
//
//==========================================================================

bool HaveFlightPower()
{
	return !!Player(Player).Powers[pw_flight];
}

//==========================================================================
//
//  HaveWeaponLevel2Power
//
//==========================================================================

bool HaveWeaponLevel2Power()
{
	return !!Player(Player).Powers[pw_weaponlevel2];
}

//==========================================================================
//
//  A_FreeTargMobj
//
//==========================================================================

final void A_FreeTargMobj()
{
	Velocity = vector(0.0, 0.0, 0.0);
	Origin.z = CeilingZ + 4.0;
	Gravity = 1.0;
	bSolid = false;
	bShootable = false;
	bFloat = false;
	bSkullFly = false;
	bNoGravity = true;
	bDropOff = true;
	bCorpse = true;
	bNoPassMobj = true;
	Player = none;
	bIsPlayer = false;
}

//==========================================================================
//
//  A_Scream
//
//==========================================================================

final void A_Scream()
{
	if (bIsPlayer)
	{
		// Handle the different player death screams
		if (Special1 < 10)
		{
			// Wimpy death sound
			PlaySound('*wimpydeath', CHAN_VOICE);
		}
		else if (Health > -50)
		{
			// Normal death sound
			PlaySound(DeathSound, CHAN_VOICE);
		}
		else if (Health > -100)
		{
			// Crazy death sound
			PlaySound('*crazydeath', CHAN_VOICE);
		}
		else
		{
			// Extreme death sound
			PlaySound('*gibbed', CHAN_VOICE);
		}
	}
	else if (Class == ChickenPlayer || Class == Sorcerer1 || Class == Minotaur)
	{
		// Make boss death sounds full volume
		PlaySound(DeathSound, CHAN_VOICE, 1.0, ATTN_NONE);
	}
	else
	{
		PlaySound(DeathSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_Explode
//
//  Handles a bunch of exploding things.
//
//==========================================================================

final void A_Explode()
{
	int damage;

	damage = 128;
	if (Class == ActivatedTimeBomb)
	{
		// Time Bombs
		Origin.z += 32.0;
		Alpha = 1.0;
	}
	else if (Class == MinotaurFX2)
	{
		// Minotaur floor fire
		damage = 24;
	}
	else if (Class == Sorcerer2FX1)
	{
		// D'Sparil missile
		damage = 80 + (P_Random() & 31);
	}
	RadiusAttack(Target, damage, itof(damage), true);
	if (Origin.z <= FloorZ + itof(damage))
	{
		HitFloorType();
	}
	if (Class == ActivatedTimeBomb)
	{
		SendExplosion(HereticDefs::EF_DL_WHITE, Origin);
	}
	if (Class == Pod)
	{
		SendExplosion(HereticDefs::EF_DL_GREEN, Origin);
	}
	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(TVec org, float Range, class<EntityEx> PuffType, bool HitThing)
{
	EntityEx puff;

	if (PuffType == BlasterPuff1 && HitThing)
	{
		// Make blaster big puff
		Actor A;

		A = Spawn(BlasterPuff2, org);
		A.PlaySound('weapons/blastershoot', CHAN_VOICE);

		SendExplosion(HereticDefs::EF_DL_BLUE, org);
	}
	else
	{
		org.z += (Random() - Random()) * 4.0;
		puff = Spawn(PuffType, org);
		if (puff.AttackSound)
		{
			puff.PlaySound(puff.AttackSound, CHAN_VOICE);
		}
		if (PuffType == BeakPuff || PuffType == StaffPuff)
		{
			puff.Velocity.z = 1.0 * 35.0;
		}
		else if (PuffType == GauntletPuff1 || PuffType == GauntletPuff2)
		{
			puff.Velocity.z = 0.8 * 35.0;
		}
		if (PuffType == GoldWandPuff1)
		{
			SendExplosion(HereticDefs::EF_DL_WHITE, org);
		}
		if (PuffType == BlasterPuff1)
		{
			SendExplosion(HereticDefs::EF_DL_BLUE, org);
		}
	}
}

//==========================================================================
//
//	ClientTick
//
//==========================================================================

void ClientTick(float DeltaTime)
{
	dlight_t *dl;

	switch (Effects & HereticDefs::EF_DLIGHT_MASK)
	{
	case HereticDefs::EF_DL_NONE:
		break;

	case HereticDefs::EF_DL_WHITE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 255, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case HereticDefs::EF_DL_RED:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 0, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case HereticDefs::EF_DL_GREEN:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 255, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case HereticDefs::EF_DL_BLUE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 0, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case HereticDefs::EF_DL_MAGENTA:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 0, 255);
		dl->die = XLevel.Time + 0.1;
		break;
	}
}

__states__
{
	S_FREETARGMOBJ('ACLO', 4, 30.0, none) = A_FreeTargMobj
}

defaultproperties
{
	Health = 1000;
	GibsHealth = -1000;
	ReactionCount = 8;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	MaxStepHeight = 24.0;
	LightOffset = vector(0.0, 0.0, 0.0);
	LightColour = 0xffffffff;
	LightRadius = 128.0;
}
