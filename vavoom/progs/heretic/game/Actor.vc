//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : ScriptedEntity
	abstract;

const float TELEFOGHEIGHT 	= 32.0;

class<Actor> SpecialCID;

//==========================================================================
//
//  HITDICE
//
//  Most damage in HERETIC and HEXEN defined using HITDICE
//
//==========================================================================

int HITDICE(int a)
{
	return (1 + (P_Random() & 7)) * a;
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(EntityEx source)
{
	// Check for frag changes
	if (bIsPlayer)
	{
		if (source.Player.bIsBot)
		{
			Player(source.Player).Bot.Killed(self);
		}

		if (Player.bIsBot)
		{
			Player(Player).Bot.Died(Actor(source));
		}

		// Frag stuff
		if (self == source)
		{
			// Self-frag
			Player.FragsStats[Player.GetPlayerNum()]--;
			Player.Frags--;
		}
		else
		{
			source.Player.FragsStats[Player.GetPlayerNum()]++;
			source.Player.Frags++;
			source.PlaySound('misc/frag', CHAN_ITEM);
			if (Player(source.Player).ChickenTime)
			{
				// Make a super chicken
				source.GiveInventoryType(PowerWeaponLevel2);
			}
		}
	}
}

//==========================================================================
//
//	PlayerKilled
//
//==========================================================================

void PlayerKilled(EntityEx source, EntityEx inflictor)
{
	// Count environment kills against you
	if (!source)
	{
		Player.FragsStats[Player.GetPlayerNum()]--;
		Player.Frags--;
	}
}

//==========================================================================
//
//  MinotaurSlam
//
//==========================================================================

void MinotaurSlam(Actor Other)
{
	float angle;
	float thrust;

	angle = atan2(Other.Origin.y - Origin.y, Other.Origin.x - Origin.x);
	thrust = 16.0 + Random() * 4.0;
	Other.Velocity.x += thrust * cos(angle) * 35.0;
	Other.Velocity.y += thrust * sin(angle) * 35.0;
	Other.Damage(none, none, HITDICE(6));
	if (Other.Player)
	{
		Other.ReactionTime = 0.4 + Random() * 0.2;
	}
}

//==========================================================================
//
//  TouchWhirlwind
//
//==========================================================================

void TouchWhirlwind(Actor Other)
{
	float randVal;

	Other.Angles.yaw = AngleMod360(Other.Angles.yaw +
		(Random() - Random()) * 45.0 / 2.0);
	Other.Velocity.x += (Random() - Random()) * 4.0 * 35.0;
	Other.Velocity.y += (Random() - Random()) * 4.0 * 35.0;
	if (XLevel.TicTime & 16 && !Other.bBoss)
	{
		randVal = Random() * 4.0;
		if (randVal > 2.5)
		{
			randVal = 2.5;
		}
		Other.Velocity.z += randVal * 35.0;
		if (Other.Velocity.z > 12.0 * 35.0)
		{
			Other.Velocity.z = 12.0 * 35.0;
		}
	}
	if (!(XLevel.TicTime & 7))
	{
		Other.Damage(none, none, 3);
	}
}

//==========================================================================
//
//  ChickenMorphPlayer
//
//  Returns true if the player gets turned into a chicken.
//
//==========================================================================

bool ChickenMorphPlayer()
{
	Actor fog;
	Actor chicken;

	if (Player(Player).ChickenTime)
	{
		if ((Player(Player).ChickenTime < Player::CHICKENTIME - 1.0) &&
			!FindInventory(PowerWeaponLevel2))
		{
			// Make a super chicken
			GiveInventoryType(PowerWeaponLevel2);
		}
		return false;
	}
	if (bInvulnerable)
	{
		// Immune when invulnerable
		return false;
	}

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('misc/teleport', CHAN_VOICE);

	chicken = Spawn(ChickenPlayer, Origin);
	chicken.Tracer = Player(Player).ReadyWeapon;
	chicken.Angles.yaw = Angles.yaw;
	chicken.Player = Player;
	chicken.bIsPlayer = true;
	chicken.Health = Player::MAXCHICKENHEALTH;
	Player.Health = chicken.Health;
	Player.MO = chicken;
	BasicArmor Armor = BasicArmor(FindInventory(BasicArmor));
	Armor.Amount = 0;
	Armor.SavePercent = 0.0;
	Inventory Pw = FindInventory(PowerGhost);
	if (Pw)
	{
		Pw.Destroy();
	}
	Pw = FindInventory(PowerWeaponLevel2);
	if (Pw)
	{
		Pw.Destroy();
	}
	chicken.ObtainInventory(self);
	chicken.bFly = bFly;
	Player(Player).ChickenTime = Player::CHICKENTIME;
	Player(Player).ActivateBeak();

	SetState(FindState('FreeTargMobj'));

	return true;
}

//==========================================================================
//
//  ChickenMorph
//
//==========================================================================

bool ChickenMorph()
{
	Actor fog;
	Actor chicken;
	int i;

	if (bIsPlayer)
	{
		return false;
	}
	if (bNoMorph)
	{
		return false;
	}

	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('misc/teleport', CHAN_VOICE);

	chicken = Spawn(Chicken, Origin);
	chicken.SpecialCID = class<Actor>(Class);
	chicken.Special1 = ftoi(Player::CHICKENTIME * 35.0) + P_Random();
	chicken.Alpha = Alpha;
	chicken.Target = Target;
	chicken.Angles.yaw = Angles.yaw;
	chicken.TID = TID;
	chicken.Special = Special;
	chicken.InsertIntoTIDList(TID);
	for (i = 0; i < 5; i++)
	{
		chicken.Args[i] = Args[i];
	}

	RemoveFromTIDList();

	SetState(FindState('FreeTargMobj'));

	return true;
}

//==========================================================================
//
//  AutoUseChaosDevice
//
//==========================================================================

bool AutoUseChaosDevice()
{
	Inventory Item = FindInventory(ArtiTeleport);
	if (Item)
	{
		UseInventory(Item);
		Health = (Health + 1) / 2;
		Player.Health = Health;
		return true;
	}
	return false;
}

//==========================================================================
//
//  AutoUseHealth
//
//==========================================================================

void AutoUseHealth(int saveHealth)
{
	int i;
	int count;

	Inventory normal = FindInventory(ArtiHealth);
	Inventory super = FindInventory(ArtiSuperHealth);
	if ((Level.Game.gameskill == sk_baby) && (normal.Amount * 25 >= saveHealth))
	{
		// Use quartz flasks
		count = (saveHealth + 24) / 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			if (!(--normal.Amount))
			{
				normal.Destroy();
			}
		}
	}
	else if (super.Amount * 100 >= saveHealth)
	{
		// Use mystic urns
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			if (!(--super.Amount))
			{
				super.Destroy();
			}
		}
	}
	else if ((Level.Game.gameskill == sk_baby) &&
		(super.Amount * 100 + normal.Amount * 25 >= saveHealth))
	{
		// Use mystic urns and quartz flasks
		count = (saveHealth + 24) / 25;
		saveHealth -= count * 25;
		for (i = 0; i < count; i++)
		{
			Health += 25;
			if (!(--normal.Amount))
			{
				normal.Destroy();
			}
		}
		count = (saveHealth + 99) / 100;
		for (i = 0; i < count; i++)
		{
			Health += 100;
			//  I found a bug. There must be used superSlot, not normalSlot.
			//  Also if player used all quartz flasks, superSlot may be
			// invalid, so it must be found again.
			if (!(--super.Amount))
			{
				super.Destroy();
			}
		}
	}
	Player.Health = Health;
}

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return Player::VIEWHEIGHT;
}

//==========================================================================
//
//  A_PlayerScream
//
//==========================================================================

final void A_PlayerScream()
{
	// Handle the different player death screams
	if (Special1 < 10)
	{
		// Wimpy death sound
		PlaySound('*wimpydeath', CHAN_VOICE);
	}
	else if (Health > -50)
	{
		// Normal death sound
		PlaySound(DeathSound, CHAN_VOICE);
	}
	else if (Health > -100)
	{
		// Crazy death sound
		PlaySound('*crazydeath', CHAN_VOICE);
	}
	else
	{
		// Extreme death sound
		PlaySound('*gibbed', CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_Feathers
//
//==========================================================================

final void A_Feathers()
{
	int i;
	int count;
	Actor mo;

	if (Health > 0)
	{
		// Pain
		count = P_Random() < 32 ? 2 : 1;
	}
	else
	{
		// Death
		count = 5 + (P_Random() & 3);
	}
	for (i = 0; i < count; i++)
	{
		mo = Spawn(Feather, Origin + vector(0.0, 0.0, 20.0));
		mo.Target = self;
		mo.Velocity.x = (Random() - Random()) * 35.0;
		mo.Velocity.y = (Random() - Random()) * 35.0;
		mo.Velocity.z = (1.0 + Random() * 2.0) * 35.0;
		mo.SetState(GetStatePlus(mo.IdleState, P_Random() & 7));
	}
}

states
{
FreeTargMobj:
	ACLO E 1050 A_FreeTargMobj
	Stop
}

defaultproperties
{
}
