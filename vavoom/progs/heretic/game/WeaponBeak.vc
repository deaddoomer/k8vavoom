//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponBeak:Weapon;

//===========================================================================
//
//  A_BeakRaise
//
//===========================================================================

void A_BeakRaise(void)
{
	SY = WEAPONTOP;
	SetState(ReadyState);
}

//===========================================================================
//
//  A_BeakReady
//
//===========================================================================

void A_BeakReady(void)
{
	if (Player->Buttons & BT_ATTACK)
	{
		// Chicken beak attack
		Player->bAttackDown = true;
		Player->MO.SetState(Player->MO.MissileState);
		if (Player->Powers[pw_weaponlevel2])
		{
			SetState(AttackState2);
		}
		else
		{
			SetState(AttackState);
		}
		P_NoiseAlert(Player->MO, Player->MO);
	}
	else
	{
		if (Player->MO.StateNum == Player->MO.MissileState)
		{
			// Take out of attack state
			Player->MO.SetState(Player->MO.IdleState);
		}
		Player->bAttackDown = false;
	}
}

//===========================================================================
//
//  A_BeakAttackPL1
//
//===========================================================================

void A_BeakAttackPL1(void)
{
	int damage;
	TVec dir;
	name SoundName;

	damage = 1 + (P_Random() & 3);
	dir = AimLineAttack(Player->MO, Player->MO.Angles, MELEERANGE);
	PuffType = BeakPuff;
	LineAttack(Player->MO, dir, MELEERANGE, damage);
	if (linetarget)
	{
		Player->MO.Angles.yaw =
			atan2(linetarget.Origin.y - Player->MO.Origin.y,
			linetarget.Origin.x - Player->MO.Origin.x);
		Player->bFixAngle = true;
	}
	switch (P_Random() % 3)
	{
	case 0:
		SoundName = 'ChickenPeak1';
		break;
	case 1:
		SoundName = 'ChickenPeak2';
		break;
	case 2:
		SoundName = 'ChickenPeak3';
		break;
	}
	Player->MO.PlaySound(SoundName, CHAN_VOICE);
	Player->ChickenPeck = 12;
	StateTime -= Random() * 0.25;
}

//===========================================================================
//
//  A_BeakAttackPL2
//
//===========================================================================

void A_BeakAttackPL2(void)
{
	int damage;
	TVec dir;
	name SoundName;

	damage = HITDICE(4);
	dir = AimLineAttack(Player->MO, Player->MO.Angles, MELEERANGE);
	PuffType = BeakPuff;
	LineAttack(Player->MO, dir, MELEERANGE, damage);
	if (linetarget)
	{
		Player->MO.Angles.yaw =
			atan2(linetarget.Origin.y - Player->MO.Origin.y,
			linetarget.Origin.x - Player->MO.Origin.x);
		Player->bFixAngle = true;
	}
	switch (P_Random() % 3)
	{
	case 0:
		SoundName = 'ChickenPeak1';
		break;
	case 1:
		SoundName = 'ChickenPeak2';
		break;
	case 2:
		SoundName = 'ChickenPeak3';
		break;
	}
	Player->MO.PlaySound(SoundName, CHAN_VOICE);
	Player->ChickenPeck = 12;
	StateTime -= Random() * 0.125;
}

__states__
{
	S_BEAKREADY('BEAK', 0, 1.0 / 35.0, S_BEAKREADY) { A_BeakReady(); }
	S_BEAKDOWN('BEAK', 0, 1.0 / 35.0, S_BEAKDOWN) { A_Lower(); }
	S_BEAKUP('BEAK', 0, 1.0 / 35.0, S_BEAKUP) { A_BeakRaise(); }
	S_BEAKATK1_1('BEAK', 0, 18.0 / 35.0, S_BEAKREADY) { A_BeakAttackPL1(); }
	S_BEAKATK2_1('BEAK', 0, 12.0 / 35.0, S_BEAKREADY) { A_BeakAttackPL2(); }
}

defaultproperties
{
	Ammo = am_noammo;
	UpState = S_BEAKUP;
	DownState = S_BEAKDOWN;
	ReadyState = S_BEAKREADY;
	AttackState = S_BEAKATK1_1;
	HoldAttackState = S_BEAKATK1_1;
	UpState2 = S_BEAKUP;
	DownState2 = S_BEAKDOWN;
	ReadyState2 = S_BEAKREADY;
	AttackState2 = S_BEAKATK2_1;
	HoldAttackState2 = S_BEAKATK2_1;
	PSpriteSY = 15.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2003/03/08 12:42:31  dj_jl
//  Removed old macro.
//
//  Revision 1.1  2002/10/26 16:32:23  dj_jl
//  New style of defining classes.
//
//**************************************************************************
