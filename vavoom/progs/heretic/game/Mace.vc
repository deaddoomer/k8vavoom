//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Mace : HereticWeapon;

EntityEx		FirstSpot;
int				SpotCount;

//==========================================================================
//
//  DoRespawn
//
//  Chooses the next spot to place the mace.
//
//==========================================================================

bool DoRespawn()
{
	int				SpotIdx;
	EntityEx		Spot;

	// Do random mace placement
	if (SpotCount)
	{
		SpotIdx = P_Random() % SpotCount;
		for (Spot = FirstSpot; SpotIdx > 0; SpotIdx--)
		{
			Spot = Spot.Target;
		}

		UnlinkFromWorld();
		Origin = Spot.Origin;
		LinkToWorld();
	}
	return true;
}

//===========================================================================
//
//  A_FireMacePL1
//
//===========================================================================

final void A_FireMacePL1() self(Actor)
{
	EntityEx	ball;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (!Wpn.DepleteAmmo(Wpn.FireMode))
	{
		return;
	}

	if (P_Random() < 28)
	{
		float angle;

		ball = Spawn(MaceFX2, Origin + vector(0.0, 0.0, 28.0 - FloorClip));
		ball.Velocity.z = (2.0 + 173.0 * -tan(Angles.pitch) / 32.0) * 35.0;
		angle = Angles.yaw;
		ball.Target = self;
		ball.Angles.yaw = angle;
		ball.Origin.z += 173.0 * -tan(Angles.pitch) / 16.0;
		ball.Velocity.x = Velocity.x / 2.0 + ball.Speed * cos(angle);
		ball.Velocity.y = Velocity.y / 2.0 + ball.Speed * sin(angle);
		ball.PlaySound('weapons/maceshoot', CHAN_WEAPON);
		ball.CheckMissileSpawn();
		return;
	}

	Player.ViewStates[ps_weapon].SX = Random() * 4.0 - 2.0;
	Player.ViewStates[ps_weapon].SY = Weapon::WEAPONTOP + Random() * 4.0;
	ball = SpawnPlayerMissileAngle(MaceFX1,
		AngleMod360(Angles.yaw + (Random() - 0.5) * 45.0 / 4.0));
	if (ball)
	{
		Actor(ball).Special1 = 16;	// tics till dropoff
	}
}

//===========================================================================
//
//  A_FireMacePL2
//
//===========================================================================

final void A_FireMacePL2() self(Actor)
{
	EntityEx	A;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.DepleteAmmo(Wpn.FireMode);
	A = SpawnPlayerMissileEx(MaceFX4, false, AimTarget);
	if (A)
	{
		A.Velocity.x += Velocity.x;
		A.Velocity.y += Velocity.y;
		A.Velocity.z = (2.0 + 173.0 * -tan(Angles.pitch) / 32.0) * 35.0;
		if (AimTarget)
		{
			A.Tracer = AimTarget;
			A.bSeekerMissile = true;
		}
	}
	PlaySound('weapons/maceshoot', CHAN_WEAPON);
}

states
{
Ready:
	MACE A 1 A_WeaponReady
	Loop
Deselect:
	MACE A 1 A_Lower
	Loop
Select:
	MACE A 1 A_Raise
	Loop
Fire:
	MACE B 4
Hold:
	MACE CDEF 3 A_FireMacePL1
	MACE C 4 A_ReFire
	MACE DEFB 4
	Goto Ready
Spawn:
	WMCE A -1
	Stop
}

defaultproperties
{
	SelectionOrder = 1400;
	AmmoType1 = MaceAmmo;
	AmmoUse1 = 1;
	AmmoGive1 = 50;
	PSpriteSY = 15.0;
	PickupMessage = "$txt_wpnmace";
	SisterWeaponType = MacePowered;
	BotCombatDist = 384.0;
	bBotProjectile = true;
}
