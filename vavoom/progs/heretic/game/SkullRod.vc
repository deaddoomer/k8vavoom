//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SkullRod : HereticWeapon
	__mobjinfo__(2004)
	__scriptid__(30);

//===========================================================================
//
//  A_FireSkullRodPL1
//
//===========================================================================

final void A_FireSkullRodPL1()
{
	EntityEx	A;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	if (!Wpn.DepleteAmmo())
	{
		return;
	}
	A = SpawnPlayerMissile(HornRodFX1);
	// Randomize the first frame
	if (A && P_Random() > 128)
	{
		A.SetState(GetStatePlus(A.IdleState, 1));
	}
}

//===========================================================================
//
//  A_FireSkullRodPL2
//
//  The special2 field holds the player number that shot the rain missile.
// The specialmobj1 field is used for the seeking routines, special1 as a
// counter for the sound looping.
//
//===========================================================================

final void A_FireSkullRodPL2()
{
	HornRodFX2	A;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.DepleteAmmo();
	A = HornRodFX2(SpawnPlayerMissileEx(HornRodFX2, true, AimTarget));
	// Use MissileMobj instead of the return value from
	// SpawnPlayerMissile because we need to give info to the mobj
	// even if it exploded immediately.
	if (Level.Game.netgame)
	{
		// Multi-player game
		A.RainColour = Player.GetPlayerNum();
	}
	else
	{
		// Always use red missiles in single player games
		A.RainColour = 2;
	}
	if (AimTarget)
	{
		A.Tracer = AimTarget;
		A.bSeekerMissile = true;
	}
	A.PlaySound('weapons/hornrodpowshoot', CHAN_WEAPON);
}

states
{
Ready:
	HROD A 1 A_WeaponReady
	Loop
Deselect:
	HROD A 1 A_Lower
	Loop
Select:
	HROD A 1 A_Raise
	Loop
Fire:
	HROD AB 4 A_FireSkullRodPL1
	HROD B 0 A_ReFire
	Goto Ready
Spawn:
	WSKL A -1
	Stop
}

defaultproperties
{
	Slot = 5;
	SelectionOrder = 200;
	AmmoType1 = SkullRodAmmo;
	AmmoUse1 = 1;
	AmmoGive1 = 50;
	PSpriteSY = 15.0;
	PickupMessage = "$txt_wpnskullrod";
	SisterWeaponType = SkullRodPowered;
	BotCombatDist = 384.0;
	bBotProjectile = true;
}
