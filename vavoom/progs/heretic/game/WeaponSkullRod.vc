//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponSkullRod : Weapon;

//===========================================================================
//
//  A_FireSkullRodPL1
//
//===========================================================================

final void A_FireSkullRodPL1()
{
	Actor A;

	if (Player(Owner.Player).Ammo[am_skullrod] < USE_SKRD_AMMO_1)
	{
		return;
	}
	Player(Owner.Player).Ammo[am_skullrod] -= USE_SKRD_AMMO_1;
	A = Actor(Owner).SpawnPlayerMissile(HornRodMissile1);
	// Randomize the first frame
	if (A && P_Random() > 128)
	{
		A.SetState(HornRodMissile1::S_HRODFX1_2);
	}
}

//===========================================================================
//
//  A_FireSkullRodPL2
//
//  The special2 field holds the player number that shot the rain missile.
// The specialmobj1 field is used for the seeking routines, special1 as a
// counter for the sound looping.
//
//===========================================================================

final void A_FireSkullRodPL2()
{
	Player(Owner.Player).Ammo[am_skullrod] -=
		Level.Game.deathmatch ? USE_SKRD_AMMO_1 : USE_SKRD_AMMO_2;
	Actor(Owner).SpawnPlayerMissile(HornRodMissile2);
	// Use MissileMobj instead of the return value from
	// SpawnPlayerMissile because we need to give info to the mobj
	// even if it exploded immediately.
	if (Level.Game.netgame)
	{
		// Multi-player game
		HornRodMissile2(MainGameInfo(Level.Game).MissileMobj).RainColour = Owner.Player.GetPlayerNum();
	}
	else
	{
		// Always use red missiles in single player games
		HornRodMissile2(MainGameInfo(Level.Game).MissileMobj).RainColour = 2;
	}
	if (Actor(Owner).linetarget)
	{
		MainGameInfo(Level.Game).MissileMobj.Enemy = Actor(Owner).linetarget;
	}
	MainGameInfo(Level.Game).MissileMobj.PlaySound('weapons/hornrodpowshoot', CHAN_WEAPON);
}

__states__
{
	S_HORNRODREADY('HROD', 0, 1.0 / 35.0, S_HORNRODREADY) = A_WeaponReady
	S_HORNRODDOWN('HROD', 0, 1.0 / 35.0, S_HORNRODDOWN) = A_Lower
	S_HORNRODUP('HROD', 0, 1.0 / 35.0, S_HORNRODUP) = A_Raise
	S_HORNRODATK1_1('HROD', 0, 4.0 / 35.0, S_HORNRODATK1_2) = A_FireSkullRodPL1
	S_HORNRODATK1_2('HROD', 1, 4.0 / 35.0, S_HORNRODATK1_3) = A_FireSkullRodPL1
	S_HORNRODATK1_3('HROD', 1, 0.0 / 35.0, S_HORNRODREADY) = A_ReFire
	S_HORNRODATK2_1('HROD', 2, 2.0 / 35.0, S_HORNRODATK2_2) = none
	S_HORNRODATK2_2('HROD', 3, 3.0 / 35.0, S_HORNRODATK2_3) = none
	S_HORNRODATK2_3('HROD', 4, 2.0 / 35.0, S_HORNRODATK2_4) = none
	S_HORNRODATK2_4('HROD', 5, 3.0 / 35.0, S_HORNRODATK2_5) = none
	S_HORNRODATK2_5('HROD', 6, 4.0 / 35.0, S_HORNRODATK2_6) = A_FireSkullRodPL2
	S_HORNRODATK2_6('HROD', 5, 2.0 / 35.0, S_HORNRODATK2_7) = none
	S_HORNRODATK2_7('HROD', 4, 3.0 / 35.0, S_HORNRODATK2_8) = none
	S_HORNRODATK2_8('HROD', 3, 2.0 / 35.0, S_HORNRODATK2_9) = none
	S_HORNRODATK2_9('HROD', 2, 2.0 / 35.0, S_HORNRODREADY) = A_ReFire
}

defaultproperties
{
	Ammo = am_skullrod;
	GetAmmoCount = 50;
	AmmoUsePL1 = USE_SKRD_AMMO_1;
	AmmoUsePL2 = USE_SKRD_AMMO_2;
	UpState = S_HORNRODUP;
	DownState = S_HORNRODDOWN;
	ReadyState = S_HORNRODREADY;
	AttackState = S_HORNRODATK1_1;
	HoldAttackState = S_HORNRODATK1_1;
	UpState2 = S_HORNRODUP;
	DownState2 = S_HORNRODDOWN;
	ReadyState2 = S_HORNRODREADY;
	AttackState2 = S_HORNRODATK2_1;
	HoldAttackState2 = S_HORNRODATK2_1;
	PSpriteSY = 15.0;
	bInShareware = false;
}
