//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Sorcerer2 : Pawn
	__scriptid__(143);

state		RiseState;
state		TeleportState;
state		DeathLoopState;

int			BossSpotCount;
BossSpot	FirstBossSpot;

//==========================================================================
//
//	BeginPlay
//
//==========================================================================

void BeginPlay()
{
	BossSpot		Prev;
	BossSpot		Spot;

	::BeginPlay();

	BossSpotCount = 0;
	FirstBossSpot = none;
	Prev = none;
	foreach AllThinkers(BossSpot, Spot)
	{
		if (FirstBossSpot)
		{
			Prev.NextSpot = Spot;
		}
		else
		{
			FirstBossSpot = Spot;
		}
		Prev = Spot;
	}
}

//==========================================================================
//
//  OkayToSwitchTarget
//
//==========================================================================

bool OkayToSwitchTarget(EntityEx source)
{
	return ::OkayToSwitchTarget(source) && source.Class != Wizard;
}

//==========================================================================
//
//  A_SorRise
//
//==========================================================================

final void A_SorRise()
{
	PlaySound('dsparil/rise', CHAN_VOICE, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_SorSightSnd
//
//==========================================================================

final void A_SorSightSnd()
{
	PlaySound('dsparil/sight', CHAN_VOICE, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  DSparilTeleport
//
//==========================================================================

final void DSparilTeleport()
{
	int			i;
	TVec		PrevOrg;
	TVec		dir;
	BossSpot	Spot;
	BossSpot	Initial;
	Actor		fog;

	if (!BossSpotCount)
	{
		// No spots
		return;
	}
	i = P_Random() % BossSpotCount;
	for (Spot = FirstBossSpot; i > 0; i--)
	{
		Spot = Spot.NextSpot;
	}

	dir = Spot.Origin - Origin;
	dir.z = 0.0;
	Initial = Spot;
	while (Length(dir) < 128.0);
	{
		Spot = Spot.NextSpot;
		if (!Spot)
		{
			Spot = FirstBossSpot;
		}
		if (Spot == Initial)
		{
			//	Avoid infinite loop if all spots are too close.
			return;
		}
		dir = Spot.Origin - Origin;
		dir.z = 0.0;
	}

	PrevOrg = Origin;
	if (TeleportMove(Spot.Origin))
	{
		fog = Spawn(Sorcerer2Telefade, PrevOrg);
		fog.PlaySound('misc/teleport', CHAN_VOICE);
		SetState(TeleportState);
		PlaySound('misc/teleport', CHAN_VOICE);
		Origin.z = FloorZ;
		Angles.yaw = Spot.Angles.yaw;
		Velocity = vector(0.0, 0.0, 0.0);
	}
}

//==========================================================================
//
//  A_Srcr2Decide
//
//==========================================================================

final void A_Srcr2Decide()
{
	float chance;

	if (!BossSpotCount)
	{
		// No spots
		return;
	}
	switch (Health / (default.Health / 8))
	{
	case 0:
		chance = 0.75;
		break;
	case 1:
		chance = 0.46875;
		break;
	case 2:
		chance = 0.46875;
		break;
	case 3:
		chance = 0.46875;
		break;
	case 4:
		chance = 0.25;
		break;
	case 5:
		chance = 0.25;
		break;
	case 6:
		chance = 0.125;
		break;
	case 7:
		chance = 0.0625;
		break;
	case 8:
		chance = 0.0;
		break;
	}
	if (Random() < chance)
	{
		DSparilTeleport();
	}
}

//==========================================================================
//
//  A_Srcr2Attack
//
//==========================================================================

final void A_Srcr2Attack()
{
	int chance;

	if (!Target)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_AUTO, 1.0, ATTN_NONE);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(20));
		return;
	}
	chance = Health < default.Health / 2 ? 96 : 48;
	if (P_Random() < chance)
	{
		// Wizard spawners
		SpawnMissileAngles(Sorcerer2FX2,
			AngleMod360(Angles.yaw - 45.0), -30.0);
		SpawnMissileAngles(Sorcerer2FX2,
			AngleMod360(Angles.yaw + 45.0), -30.0);
	}
	else
	{
		// Blue bolt
		SpawnMissile(Target, Sorcerer2FX1);
	}
}

//==========================================================================
//
//  A_Sor2DthInit
//
//==========================================================================

final void A_Sor2DthInit()
{
	Special1 = 7;	// Animation loop counter
	HereticLevelInfo(Level).P_Massacre();	// Kill monsters early
}

//==========================================================================
//
//  A_SorDSph
//
//==========================================================================

final void A_SorDSph()
{
	PlaySound('dsparil/scream', CHAN_VOICE, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_Sor2DthLoop
//
//==========================================================================

final void A_Sor2DthLoop()
{
	if (--Special1)
	{
		// Need to loop
		SetState(DeathLoopState);
	}
}

//==========================================================================
//
//  A_SorDExp
//
//==========================================================================

final void A_SorDExp()
{
	PlaySound('dsparil/explode', CHAN_BODY, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_SorDBon
//
//==========================================================================

final void A_SorDBon()
{
	PlaySound('dsparil/bones', CHAN_BODY, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_BossDeath
//
//  Trigger special effects if all bosses are dead.
//
//==========================================================================

final void A_BossDeath()
{
	if (!Level.bDSparilSpecial)
	{
		//  Not a boss level
		return;
	}
	BossDeathSpecialAction();
}

__states__
{
	S_SOR2_RISE1('SOR2', 0, 4.0 / 35.0, S_SOR2_RISE2) = none
	S_SOR2_RISE2('SOR2', 1, 4.0 / 35.0, S_SOR2_RISE3) = none
	S_SOR2_RISE3('SOR2', 2, 4.0 / 35.0, S_SOR2_RISE4) = A_SorRise
	S_SOR2_RISE4('SOR2', 3, 4.0 / 35.0, S_SOR2_RISE5) = none
	S_SOR2_RISE5('SOR2', 4, 4.0 / 35.0, S_SOR2_RISE6) = none
	S_SOR2_RISE6('SOR2', 5, 4.0 / 35.0, S_SOR2_RISE7) = none
	S_SOR2_RISE7('SOR2', 6, 12.0 / 35.0, S_SOR2_WALK1) = A_SorSightSnd
	S_SOR2_LOOK1('SOR2', 12, 10.0 / 35.0, S_SOR2_LOOK2) = A_Look
	S_SOR2_LOOK2('SOR2', 13, 10.0 / 35.0, S_SOR2_LOOK1) = A_Look
	S_SOR2_WALK1('SOR2', 12, 4.0 / 35.0, S_SOR2_WALK2) = A_Chase
	S_SOR2_WALK2('SOR2', 13, 4.0 / 35.0, S_SOR2_WALK3) = A_Chase
	S_SOR2_WALK3('SOR2', 14, 4.0 / 35.0, S_SOR2_WALK4) = A_Chase
	S_SOR2_WALK4('SOR2', 15, 4.0 / 35.0, S_SOR2_WALK1) = A_Chase
	S_SOR2_PAIN1('SOR2', 16, 3.0 / 35.0, S_SOR2_PAIN2) = none
	S_SOR2_PAIN2('SOR2', 16, 6.0 / 35.0, S_SOR2_WALK1) = A_Pain
	S_SOR2_ATK1('SOR2', 17, 9.0 / 35.0, S_SOR2_ATK2) = A_Srcr2Decide
	S_SOR2_ATK2('SOR2', 18, 9.0 / 35.0, S_SOR2_ATK3) = A_FaceTarget
	S_SOR2_ATK3('SOR2', 19, 20.0 / 35.0, S_SOR2_WALK1) = A_Srcr2Attack
	S_SOR2_TELE1('SOR2', 11, 6.0 / 35.0, S_SOR2_TELE2) = none
	S_SOR2_TELE2('SOR2', 10, 6.0 / 35.0, S_SOR2_TELE3) = none
	S_SOR2_TELE3('SOR2', 9, 6.0 / 35.0, S_SOR2_TELE4) = none
	S_SOR2_TELE4('SOR2', 8, 6.0 / 35.0, S_SOR2_TELE5) = none
	S_SOR2_TELE5('SOR2', 7, 6.0 / 35.0, S_SOR2_TELE6) = none
	S_SOR2_TELE6('SOR2', 6, 6.0 / 35.0, S_SOR2_WALK1) = none
	S_SOR2_DIE1('SDTH', 0, 8.0 / 35.0, S_SOR2_DIE2) = A_Sor2DthInit
	S_SOR2_DIE2('SDTH', 1, 8.0 / 35.0, S_SOR2_DIE3) = none
	S_SOR2_DIE3('SDTH', 2, 8.0 / 35.0, S_SOR2_DIE4) = A_SorDSph
	S_SOR2_DIE4('SDTH', 3, 7.0 / 35.0, S_SOR2_DIE5) = none
	S_SOR2_DIE5('SDTH', 4, 7.0 / 35.0, S_SOR2_DIE6) = none
	S_SOR2_DIE6('SDTH', 5, 7.0 / 35.0, S_SOR2_DIE7) = A_Sor2DthLoop
	S_SOR2_DIE7('SDTH', 6, 6.0 / 35.0, S_SOR2_DIE8) = A_SorDExp
	S_SOR2_DIE8('SDTH', 7, 6.0 / 35.0, S_SOR2_DIE9) = none
	S_SOR2_DIE9('SDTH', 8, 18.0 / 35.0, S_SOR2_DIE10) = none
	S_SOR2_DIE10('SDTH', 9, 6.0 / 35.0, S_SOR2_DIE11) = A_NoBlocking
	S_SOR2_DIE11('SDTH', 10, 6.0 / 35.0, S_SOR2_DIE12) = A_SorDBon
	S_SOR2_DIE12('SDTH', 11, 6.0 / 35.0, S_SOR2_DIE13) = none
	S_SOR2_DIE13('SDTH', 12, 6.0 / 35.0, S_SOR2_DIE14) = none
	S_SOR2_DIE14('SDTH', 13, 6.0 / 35.0, S_SOR2_DIE15) = none
	S_SOR2_DIE15('SDTH', 14, -1.0, none) = A_BossDeath
}

defaultproperties
{
	Health = 3500;
	Radius = 16.0;
	Height = 70.0;
	Mass = 300.0;
	StepSpeed = 14.0;
	PainChance = 0.125;
	bDropOff = true;
	bBoss = true;
	bNoMorph = true;
	bNoRadiusDamage = true;
	bNeverTarget = true;
	bFullVolActive = true;
	RiseState = S_SOR2_RISE1;
	IdleState = S_SOR2_LOOK1;
	SeeState = S_SOR2_WALK1;
	TeleportState = S_SOR2_TELE1;
	MissileState = S_SOR2_ATK1;
	PainState = S_SOR2_PAIN1;
	DeathState = S_SOR2_DIE1;
	DeathLoopState = S_SOR2_DIE4;
	SightSound = 'dsparil/sight';
	ActiveSound = 'dsparil/active';
	AttackSound = 'dsparil/attack';
	PainSound = 'dsparil/pain';
}
