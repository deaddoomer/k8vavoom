//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Minotaur : Pawn
	__mobjinfo__(9);

float ChargeSpeed;
bool bFloorFireRefired;

state ChargeAttackState;
state FloorFireAttackState;
state FloorFireAttackState2;

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	if (bSkullFly)
	{
		// Slam only when in charge mode
		MinotaurSlam(Actor(victim));
		return -1;
	}
	return ::DoSpecialDamage(victim, source, damage);
}

//==========================================================================
//
//	NoBlockingSet
//
//==========================================================================

void NoBlockingSet()
{
	DropItem(ArtiSuperHealth, 0, 0.19921875);
	DropItem(PhoenixRodAmmo, 10, 0.328125);
}

//==========================================================================
//
//  A_MinotaurAtk1
//
//  Melee attack.
//
//==========================================================================

final void A_MinotaurAtk1()
{
	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/melee', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
		if (Target.bIsPlayer)
		{
			// Squish the player
			Player(Target.Player).DeltaViewHeight = -512.0;
		}
	}
}

//==========================================================================
//
//  A_MinotaurDecide
//
//  Choose a missile attack.
//
//==========================================================================

final void A_MinotaurDecide()
{
	float dist;

	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/sight', CHAN_VOICE);
	dist = DistTo(Target);
	if (Target.Origin.z + Target.Height > Origin.z &&
		Target.Origin.z + Target.Height < Origin.z + Height &&
		dist < 8.0 * 64.0 && dist > 1.0 * 64.0 && P_Random() < 150)
	{
		// Charge attack
		// Don't call the state function right away
		SetState(ChargeAttackState);
		bSkullFly = true;
		A_FaceTarget();
		Velocity = Normalise(Target.Origin - Origin) * ChargeSpeed;
		Special1 = 35 / 2;	// Charge duration
	}
	else if (Target.Origin.z == Target.FloorZ &&
		dist < 9.0 * 64.0 && P_Random() < 220)
	{
		// Floor fire attack
		SetState(FloorFireAttackState);
		bFloorFireRefired = false;
	}
	else
	{
		// Swing attack
		A_FaceTarget();
		// Don't need to call SetState because the current state
		// falls through to the swing attack
	}
}

//==========================================================================
//
//  A_MinotaurAtk2
//
//  Swing attack.
//
//==========================================================================

final void A_MinotaurAtk2()
{
	EntityEx A;
	float angle;
	TAVec ang;

	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/attack2', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(5));
		return;
	}
	A = SpawnMissile(Target, MinotaurFX1, 40.0);
	if (A)
	{
		A.PlaySound('minotaur/attack2', CHAN_WEAPON);
		VectorAngles(&A.Velocity, &ang);
		angle = A.Angles.yaw;
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle - (45.0 / 8.0)), ang.pitch, 40.0);
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle + (45.0 / 8.0)), ang.pitch, 40.0);
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle - (45.0 / 16.0)), ang.pitch, 40.0);
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle + (45.0 / 16.0)), ang.pitch, 40.0);
	}
}

//==========================================================================
//
//  A_MinotaurAtk3
//
//  Floor fire attack.
//
//==========================================================================

final void A_MinotaurAtk3()
{
	EntityEx A;

	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/attack3', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(5));
		if (Target.Player)
		{
			// Squish the player
			Player(Target.Player).DeltaViewHeight = -512.0;
		}
	}
	else
	{
		A = SpawnMissile(Target, MinotaurFX2);
		if (A != none)
		{
			A.PlaySound('minotaur/attack1', CHAN_VOICE);
		}
	}
	if (Random() < 0.75 && !bFloorFireRefired)
	{
		SetState(FloorFireAttackState2);
		bFloorFireRefired = true;
	}
}

//==========================================================================
//
//  A_MinotaurCharge
//
//==========================================================================

final void A_MinotaurCharge()
{
	Actor puff;

	if (Special1)
	{
		puff = Spawn(PhoenixPuff, Origin);
		puff.Velocity.z = 2.0 * 35.0;
		Special1--;
	}
	else
	{
		bSkullFly = false;
		SetState(SeeState);
	}
}

__states__
{
	S_MNTR_LOOK1('MNTR', 0, 10.0 / 35.0, S_MNTR_LOOK2) = A_Look
	S_MNTR_LOOK2('MNTR', 1, 10.0 / 35.0, S_MNTR_LOOK1) = A_Look
	S_MNTR_WALK1('MNTR', 0, 5.0 / 35.0, S_MNTR_WALK2) = A_Chase
	S_MNTR_WALK2('MNTR', 1, 5.0 / 35.0, S_MNTR_WALK3) = A_Chase
	S_MNTR_WALK3('MNTR', 2, 5.0 / 35.0, S_MNTR_WALK4) = A_Chase
	S_MNTR_WALK4('MNTR', 3, 5.0 / 35.0, S_MNTR_WALK1) = A_Chase
	S_MNTR_ATK1_1('MNTR', 21, 10.0 / 35.0, S_MNTR_ATK1_2) = A_FaceTarget
	S_MNTR_ATK1_2('MNTR', 22, 7.0 / 35.0, S_MNTR_ATK1_3) = A_FaceTarget
	S_MNTR_ATK1_3('MNTR', 23, 4.0 / 35.0, S_MNTR_WALK1) = A_MinotaurAtk1
	S_MNTR_ATK2_1('MNTR', 21, 10.0 / 35.0, S_MNTR_ATK2_2) = A_MinotaurDecide
	S_MNTR_ATK2_2('MNTR', 24, 4.0 / 35.0, S_MNTR_ATK2_3) = A_FaceTarget
	S_MNTR_ATK2_3('MNTR', 25, 9.0 / 35.0, S_MNTR_WALK1) = A_MinotaurAtk2
	S_MNTR_ATK3_1('MNTR', 21, 10.0 / 35.0, S_MNTR_ATK3_2) = A_FaceTarget
	S_MNTR_ATK3_2('MNTR', 22, 7.0 / 35.0, S_MNTR_ATK3_3) = A_FaceTarget
	S_MNTR_ATK3_3('MNTR', 23, 12.0 / 35.0, S_MNTR_WALK1) = A_MinotaurAtk3
	S_MNTR_ATK3_4('MNTR', 23, 12.0 / 35.0, S_MNTR_ATK3_1) = none
	S_MNTR_ATK4_1('MNTR', 20, 2.0 / 35.0, S_MNTR_ATK4_2) = none
	S_MNTR_ATK4_2('MNTR', 20, 2.0 / 35.0, S_MNTR_ATK4_2) = A_MinotaurCharge
	S_MNTR_PAIN1('MNTR', 4, 3.0 / 35.0, S_MNTR_PAIN2) = none
	S_MNTR_PAIN2('MNTR', 4, 6.0 / 35.0, S_MNTR_WALK1) = A_Pain
	S_MNTR_DIE1('MNTR', 5, 6.0 / 35.0, S_MNTR_DIE2) = none
	S_MNTR_DIE2('MNTR', 6, 5.0 / 35.0, S_MNTR_DIE3) = none
	S_MNTR_DIE3('MNTR', 7, 6.0 / 35.0, S_MNTR_DIE4) = A_Scream
	S_MNTR_DIE4('MNTR', 8, 5.0 / 35.0, S_MNTR_DIE5) = none
	S_MNTR_DIE5('MNTR', 9, 6.0 / 35.0, S_MNTR_DIE6) = none
	S_MNTR_DIE6('MNTR', 10, 5.0 / 35.0, S_MNTR_DIE7) = none
	S_MNTR_DIE7('MNTR', 11, 6.0 / 35.0, S_MNTR_DIE8) = none
	S_MNTR_DIE8('MNTR', 12, 5.0 / 35.0, S_MNTR_DIE9) = A_NoBlocking
	S_MNTR_DIE9('MNTR', 13, 6.0 / 35.0, S_MNTR_DIE10) = none
	S_MNTR_DIE10('MNTR', 14, 5.0 / 35.0, S_MNTR_DIE11) = none
	S_MNTR_DIE11('MNTR', 15, 6.0 / 35.0, S_MNTR_DIE12) = none
	S_MNTR_DIE12('MNTR', 16, 5.0 / 35.0, S_MNTR_DIE13) = none
	S_MNTR_DIE13('MNTR', 17, 6.0 / 35.0, S_MNTR_DIE14) = none
	S_MNTR_DIE14('MNTR', 18, 5.0 / 35.0, S_MNTR_DIE15) = none
	S_MNTR_DIE15('MNTR', 19, -1.0, none) = A_BossDeath
}

defaultproperties
{
	Health = 3000;
	Radius = 28.0;
	Height = 100.0;
	Mass = 800.0;
	StepSpeed = 16.0;
	PainChance = 0.09765625;
	MissileDamage = 7;
	ChargeSpeed	= 455.0;
	bDropOff = true;
	bBoss = true;
	bNoMorph = true;
	bNoRadiusDamage = true;
	bNeverTarget = true;
	bSkullFlyInvulnerable = true;
	IdleState = S_MNTR_LOOK1;
	SeeState = S_MNTR_WALK1;
	MeleeState = S_MNTR_ATK1_1;
	MissileState = S_MNTR_ATK2_1;
	ChargeAttackState = S_MNTR_ATK4_1;
	FloorFireAttackState = S_MNTR_ATK3_1;
	FloorFireAttackState2 = S_MNTR_ATK3_4;
	PainState = S_MNTR_PAIN1;
	DeathState = S_MNTR_DIE1;
	SightSound = 'minotaur/sight';
	ActiveSound = 'minotaur/active';
	AttackSound = 'minotaur/attack1';
	PainSound = 'minotaur/pain';
	DeathSound = 'minotaur/death';
}
