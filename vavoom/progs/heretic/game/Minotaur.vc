//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Minotaur : Actor
	__mobjinfo__(9);

float ChargeSpeed;
bool bFloorFireRefired;

//==========================================================================
//
//  MinotaurSlam
//
//==========================================================================

void MinotaurSlam(Actor Other)
{
	float angle;
	float thrust;

	angle = atan2(Other.Origin.y - Origin.y, Other.Origin.x - Origin.x);
	thrust = 16.0 + Random() * 4.0;
	Other.Velocity.x += thrust * cos(angle) * 35.0;
	Other.Velocity.y += thrust * sin(angle) * 35.0;
	Other.Damage(none, none, HITDICE(6));
	if (Other.Player)
	{
		Other.ReactionTime = 0.4 + Random() * 0.2;
	}
}

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	if (bSkullFly)
	{
		// Slam only when in charge mode
		MinotaurSlam(Actor(victim));
		return -1;
	}
	return ::DoSpecialDamage(victim, source, damage);
}

//==========================================================================
//
//  A_MinotaurAtk1
//
//  Melee attack.
//
//==========================================================================

final void A_MinotaurAtk1()
{
	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/melee', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
		if (Target.bIsPlayer)
		{
			// Squish the player
			Player(Target.Player).DeltaViewHeight = -512.0;
		}
	}
}

//==========================================================================
//
//  A_MinotaurDecide
//
//  Choose a missile attack.
//
//==========================================================================

final void A_MinotaurDecide()
{
	float dist;

	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/sight', CHAN_VOICE);
	dist = DistTo(Target);
	if (Target.Origin.z + Target.Height > Origin.z &&
		Target.Origin.z + Target.Height < Origin.z + Height &&
		dist < 8.0 * 64.0 && dist > 1.0 * 64.0 && P_Random() < 150)
	{
		// Charge attack
		// Don't call the state function right away
		SetState(FindState('ChargeAttack'));
		bSkullFly = true;
		A_FaceTarget();
		Velocity = Normalise(Target.Origin - Origin) * ChargeSpeed;
		Special1 = 35 / 2;	// Charge duration
	}
	else if (Target.Origin.z == Target.FloorZ &&
		dist < 9.0 * 64.0 && P_Random() < 220)
	{
		// Floor fire attack
		SetState(FindState('FloorFireAttack'));
		bFloorFireRefired = false;
	}
	else
	{
		// Swing attack
		A_FaceTarget();
		// Don't need to call SetState because the current state
		// falls through to the swing attack
	}
}

//==========================================================================
//
//  A_MinotaurAtk2
//
//  Swing attack.
//
//==========================================================================

final void A_MinotaurAtk2()
{
	EntityEx A;
	float angle;
	TAVec ang;

	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/attack2', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(5));
		return;
	}
	A = SpawnMissile(Target, MinotaurFX1, 40.0);
	if (A)
	{
		A.PlaySound('minotaur/attack2', CHAN_WEAPON);
		VectorAngles(&A.Velocity, &ang);
		angle = A.Angles.yaw;
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle - (45.0 / 8.0)), ang.pitch, 40.0);
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle + (45.0 / 8.0)), ang.pitch, 40.0);
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle - (45.0 / 16.0)), ang.pitch, 40.0);
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle + (45.0 / 16.0)), ang.pitch, 40.0);
	}
}

//==========================================================================
//
//  A_MinotaurAtk3
//
//  Floor fire attack.
//
//==========================================================================

final void A_MinotaurAtk3()
{
	EntityEx A;

	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/attack3', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(5));
		if (Target.Player)
		{
			// Squish the player
			Player(Target.Player).DeltaViewHeight = -512.0;
		}
	}
	else
	{
		A = SpawnMissile(Target, MinotaurFX2);
		if (A != none)
		{
			A.PlaySound('minotaur/attack1', CHAN_VOICE);
		}
	}
	if (Random() < 0.75 && !bFloorFireRefired)
	{
		SetState(FindState('FloorFireAttack2'));
		bFloorFireRefired = true;
	}
}

//==========================================================================
//
//  A_MinotaurCharge
//
//==========================================================================

final void A_MinotaurCharge()
{
	Actor puff;

	if (Special1)
	{
		puff = Spawn(PhoenixPuff, Origin);
		puff.Velocity.z = 2.0 * 35.0;
		Special1--;
	}
	else
	{
		bSkullFly = false;
		SetState(SeeState);
	}
}

states
{
Spawn:
	MNTR AB 10 A_Look
	Loop
See:
	MNTR ABCD 5 A_Chase
	Loop
Melee:
	MNTR V 10 A_FaceTarget
	MNTR W 7 A_FaceTarget
	MNTR X 4 A_MinotaurAtk1
	Goto See
Missile:
	MNTR V 10 A_MinotaurDecide
	MNTR Y 4 A_FaceTarget
	MNTR Z 9 A_MinotaurAtk2
	Goto See
FloorFireAttack:
	MNTR V 10 A_FaceTarget
	MNTR W 7 A_FaceTarget
	MNTR X 12 A_MinotaurAtk3
	Goto See
FloorFireAttack2:
	MNTR X 12
	Goto FloorFireAttack
ChargeAttack:
	MNTR U 2
	MNTR U 2 A_MinotaurCharge
	Wait
Pain:
	MNTR E 3
	MNTR E 6 A_Pain
	Goto See
Death:
	MNTR F 6
	MNTR G 5
	MNTR H 6 A_Scream
	MNTR I 5
	MNTR J 6
	MNTR K 5
	MNTR L 6
	MNTR M 5 A_NoBlocking
	MNTR N 6
	MNTR O 5
	MNTR P 6
	MNTR Q 5
	MNTR R 6
	MNTR S 5
	MNTR T -1 A_BossDeath
	Stop
}

defaultproperties
{
	Health = 3000;
	Radius = 28.0;
	Height = 100.0;
	Mass = 800.0;
	Speed = 16.0 * 35.0;
	PainChance = 0.09765625;
	MissileDamage = 7;
	ChargeSpeed	= 455.0;
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bFloorClip = true;
	bActivateMCross = true;
	bActivatePushWall = true;
	bPassMobj = true;
	bCanUseWalls = true;
	bDropOff = true;
	bBoss = true;
	bNoMorph = true;
	bNoRadiusDamage = true;
	bNeverTarget = true;
	bSkullFlyInvulnerable = true;
	SightSound = 'minotaur/sight';
	ActiveSound = 'minotaur/active';
	AttackSound = 'minotaur/attack1';
	PainSound = 'minotaur/pain';
	DeathSound = 'minotaur/death';
	DropItemList.Num = 2;
	DropItemList[0].Type = ArtiSuperHealth; DropItemList[0].Amount = 0; DropItemList[0].Chance = 0.19921875;
	DropItemList[1].Type = PhoenixRodAmmo; DropItemList[1].Amount = 10; DropItemList[1].Chance = 0.328125;
}
