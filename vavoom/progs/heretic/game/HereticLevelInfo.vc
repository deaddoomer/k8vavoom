//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HereticLevelInfo : LineSpecialLevelInfo;

const int MAX_MACE_SPOTS	= 8;

const int BODYQUESIZE		= 32;

Actor bodyque[BODYQUESIZE];
int bodyqueslot;

int MaceSpotCount;
float MaceSpot_x[MAX_MACE_SPOTS];
float MaceSpot_y[MAX_MACE_SPOTS];

//==========================================================================
//
//  SpawnSpecials
//
//==========================================================================

void SpawnSpecials()
{
	::SpawnSpecials();

	CloseWeapons();
}

//==========================================================================
//
//  ExecuteActionSpecial
//
//==========================================================================

bool ExecuteActionSpecial(int Special, int Arg1, int Arg2, int Arg3,
	int Arg4, int Arg5, line_t* Line, int Side, Entity E)
{
	bool buttonSuccess;

	buttonSuccess = false;
	switch (Special)
	{
	case LNSPEC_QuakeTremor:
		buttonSuccess = A_LocalQuake(Arg1, Arg2, Arg3, Arg4, Arg5);
		break;
/*	case LNSPEC_UsePuzzleItem:
		buttonSuccess = EV_LineSearchForPuzzleItem(Arg1, Arg2, Arg3, Arg4,
			Arg5, A);
		break;*/

	// Inert Line specials
	default:
		buttonSuccess = ::ExecuteActionSpecial(Special, Arg1, Arg2, Arg3,
			Arg4, Arg5, Line, Side, E);
		break;
	}
	return buttonSuccess;
}

//==========================================================================
//
//  CheckActivation
//
//==========================================================================

bool CheckActivation(int activationType, line_t * line, Actor A)
{
	int lineActivation;
	bool noway;

	noway = true;
	lineActivation = GET_SPAC(line->flags);
	if (lineActivation == SPAC_PTOUCH &&
		(activationType == SPAC_PCROSS || activationType == SPAC_IMPACT))
	{
		lineActivation = activationType;
	}
	else if (lineActivation == SPAC_USETHROUGH)
	{
		lineActivation = SPAC_USE;
	}
	else if (line->special == LNSPEC_Teleport &&
		lineActivation == SPAC_CROSS && activationType == SPAC_PCROSS &&
		A && A.bMissile)
	{
		// Let missiles use regular player teleports
		lineActivation = SPAC_PCROSS;
	}
	if (lineActivation != activationType &&
		!(activationType == SPAC_MCROSS && lineActivation == SPAC_CROSS))
	{
		return false;
	}
	if (!A.bIsPlayer && !A.bMissile)
	{
		if ((activationType == SPAC_USE || activationType == SPAC_PUSH)
			&& (line->flags & ML_SECRET))
			return false;	// never open secret doors

		switch (lineActivation)
		{
		case SPAC_IMPACT:
		case SPAC_PCROSS:
			// shouldn't really be here if not a missile
		case SPAC_MCROSS:
			noway = false;
			break;

		case SPAC_CROSS:
			switch (line->special)
			{
			case LNSPEC_DoorRaise:
			case LNSPEC_PlatDownWaitUpStay:
			case LNSPEC_Teleport:
			case LNSPEC_TeleportNoFog:
			case 206://Plat_DownWaitUpStayLip:
			case LNSPEC_TeleportLine:
				noway = false;
			}
			break;

		case SPAC_USE:
		case SPAC_PUSH:
			switch (line->special)
			{
			case LNSPEC_DoorRaise:
				if (line->arg1 == 0)
					noway = false;
				break;
			case LNSPEC_Teleport:
			case LNSPEC_TeleportNoFog:
				noway = false;
			}
			break;
		}
		if (noway)
			return false;
	}
	return true;
}

//==========================================================================
//
//  ActivateLine
//
//==========================================================================

bool ActivateLine(line_t* Line, EntityEx A, int Side, int ActivationType)
{
	int lineActivation;
	bool repeat;
	bool buttonSuccess;

	if (!CheckActivation(ActivationType, Line, Actor(A)))
	{
		return false;
	}

	lineActivation = GET_SPAC(Line->flags);
	if (lineActivation == SPAC_PTOUCH)
	{
		lineActivation = ActivationType;
	}
	repeat = Line->flags & ML_REPEAT_SPECIAL;
	buttonSuccess = ExecuteActionSpecial(Line->special, Line->arg1,
		Line->arg2, Line->arg3, Line->arg4, Line->arg5, Line, Side, A);

	if ((lineActivation == SPAC_USE || lineActivation == SPAC_IMPACT ||
		lineActivation == SPAC_USETHROUGH) && buttonSuccess)
	{
		ChangeSwitchTexture(Line, repeat,
			Line->special == LNSPEC_ExitNormal ||
			Line->special == LNSPEC_ExitSecret ||
			Line->special == LNSPEC_TeleportNewMap ||
			Line->special == LNSPEC_TeleportEndGame
			? 'switches/exitbutn' : 'switches/normbutn');
	}
	if (!repeat && buttonSuccess)
	{
		// clear the special on non-retriggerable lines
		Line->special = 0;
	}
	return true;
}

//==========================================================================
//
//  CheckLock
//
//==========================================================================

bool CheckLock(Entity user, int lock, bool door)
{
	if (!user.bIsPlayer)
	{
		return false;
	}
	if (!lock)
	{
		return true;
	}
	if (!(Player(user.Player).Keys & (1 << (lock - 1))))
	{
		user.Player.centreprint(MainGameInfo(Game).keymsg[lock - 1]);
		user.PlaySound('*usefail', CHAN_VOICE);
		return false;
	}
	return true;
}

//==========================================================================
//==========================================================================
//
//                              EVENTS
//
//  Events are operations triggered by using, crossing, or shooting special
// lines, or by timed thinkers
//
//==========================================================================
//==========================================================================

//===========================================================================
// Quake variables
//
//      Arg1     Intensity on richter scale (2..9)
//      Arg2     Duration in tics
//      Arg3     Radius for damage, in tile units (64 pixels)
//      Arg4     Radius for tremor in tile units (64 pixels)
//      Arg5     TID of map thing for focus of quake
//
//===========================================================================

//===========================================================================
//
//	A_LocalQuake
//
//===========================================================================

bool A_LocalQuake(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5)
{
	QuakeFocus focus;
	Actor target;
	int lastfound = 0;
	int success = false;

	// Find all quake foci
	do
	{
		target = Actor(FindMobjFromTID(Arg5, &lastfound));
		if (target)
		{
			focus = QuakeFocus(Spawn(QuakeFocus, target.Origin));
			if (focus)
			{
				focus.Richters = Arg1;
				focus.QuakeDuration = Arg2 >> 1;	// decremented every 2 tics
				focus.DamageRadius = itof(Arg3) * 64.0;
				focus.TremorRadius = itof(Arg4) * 64.0;
				success = true;
			}
		}
	}
	while (target);

	return success;
}

//==========================================================================
//
//	SpawnMapThing
//
//	The fields of the mapthing should already be in host byte order.
//
//==========================================================================

void SpawnMapThing(mthing_t * mthing)
{
	int				spawnMask;
	EntityEx		A;
	class<EntityEx>	moClass;

	if (mthing->type <= 0)
	{
		return;
	}

	// count deathmatch start positions
	if (mthing->type == 11)
	{
		if (NumDeathmatchStarts < MAXDEATHMATCHSTARTS)
		{
			CopyMThing(mthing, &DeathmatchStarts[NumDeathmatchStarts]);
			NumDeathmatchStarts++;
		}
		return;
	}

	// check for players specially
	if (mthing->type <= 4)
	{
		// save spots for respawning in network games
		CopyMThing(mthing, &PlayerStarts[mthing->arg1 * MAXPLAYERS +
			mthing->type - 1]);
		return;
	}

	if (mthing->type >= 1400 && mthing->type < 1410)
	{
		XLevel.PointInSector(vector(mthing->x,
			mthing->y, 0.0))->seqType = mthing->type - 1400;
		return;
	}

	// Check current game type with spawn flags
	if (Level.Game.netgame == false)
	{
		spawnMask = MTF_GSINGLE;
	}
	else if (Level.Game.deathmatch)
	{
		spawnMask = MTF_GDEATHMATCH;
	}
	else
	{
		spawnMask = MTF_GCOOP;
	}
	if (!(mthing->options & spawnMask))
	{
		return;
	}

	// check for apropriate skill level
	if (Game.gameskill == sk_baby)
		spawnMask = 1;
	else if (Game.gameskill == sk_nightmare)
		spawnMask = 4;
	else
		spawnMask = 1 << (Game.gameskill - 1);
	if (!(mthing->options & spawnMask))
		return;

	// find which type to spawn
	moClass = class<Actor>(FindClassFromEditorId(mthing->type));
	if (!moClass)
	{
		dprint("SpawnMapThing: Unknown type %i at (%f, %f)",
			mthing->type, mthing->x, mthing->y);
		return;
	}

	// spawn it
	if (MainGameInfo(Game).shareware)
	{
		// Special stuff
		if (moClass == SkullRod ||
			moClass == PhoenixRod ||
			moClass == SkullRodAmmo ||
			moClass == SkullRodHefty ||
			moClass == PhoenixRodAmmo ||
			moClass == PhoenixRodHefty ||
			moClass == MaceAmmo ||
			moClass == MaceHefty ||
			moClass == ArtiSuperHealth ||
			moClass == ArtiTeleport ||
			moClass == EnchantedShield ||
			moClass == Mace)
		{
			// Don't place on map in shareware version
			return;
		}
	}
	if (moClass == Mace)
	{
		// Put in the mace spot list
		AddMaceSpot(mthing->x, mthing->y);
		return;
	}
	if (Level.Game.nomonsters && moClass.default.bMonster)
	{
		return;
	}

	A = Spawn(moClass,,, mthing);
}

//===========================================================================
//
//  AddMaceSpot
//
//===========================================================================

void AddMaceSpot(float x, float y)
{
	if (MaceSpotCount == MAX_MACE_SPOTS)
	{
		Error("Too many mace spots.");
	}
	MaceSpot_x[MaceSpotCount] = x;
	MaceSpot_y[MaceSpotCount] = y;
	MaceSpotCount++;
}

//===========================================================================
//
//  CloseWeapons
//
//  Called at level load after things are loaded.
//
//===========================================================================

void CloseWeapons()
{
	int spot;

	if (!MaceSpotCount)
	{
		// No maces placed
		return;
	}
	if (!Level.Game.deathmatch && P_Random() < 64)
	{
		// Sometimes doesn't show up if not in deathmatch
		return;
	}
	spot = P_Random() % MaceSpotCount;
	Spawn(Mace, vector(MaceSpot_x[spot], MaceSpot_y[spot],
		Actor::ONFLOORZ));
}

//==========================================================================
//
//  P_Massacre
//
//  Kills all monsters.
//
//==========================================================================

void P_Massacre()
{
	Actor mo;

	foreach AllThinkers(Actor, mo)
	{
		if (mo.bMonster && mo.Health > 0)
		{
			mo.Damage(none, none, 10000);
		}
	}
}

defaultproperties
{
	DefaultDoorSound = 'HereticDoor';
	DefaultCeilingSound = 'CeilingNormal';
	DefaultSilentCeilingSound = 'CeilingSemiSilent';
	DefaultFloorSound = 'Floor';
	DefaultFloorAltSound = 'FloorAlt';
	DefaultStairStepSound = 'FloorStairStep';
	DefaultPlatformSound = 'Platform';
}
