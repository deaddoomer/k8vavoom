//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Clink : Pawn
	__mobjinfo__(90);

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff()
{
	DropItem(ItemAmmoSkullRodWimpy, 20, 0.328125);
}

//==========================================================================
//
//  A_ClinkAttack
//
//==========================================================================

void A_ClinkAttack()
{
	int damage;

	if (!Enemy)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		damage = ((P_Random() % 7) + 3);
		Enemy.Damage(self, self, damage);
	}
}

__states__
{
	//	Idle
	S_CLINK_LOOK1('CLNK', 0, 'monsters/clink/base.md2', 0, 0.1, S_CLINK_LOOK2) { A_Look(); }
	S_CLINK_LOOK2('CLNK', 0, 'monsters/clink/base.md2', 1, 0.1, S_CLINK_LOOK3) { }
	S_CLINK_LOOK3('CLNK', 1, 'monsters/clink/base.md2', 2, 0.1, S_CLINK_LOOK4) { A_Look(); }
	S_CLINK_LOOK4('CLNK', 1, 'monsters/clink/base.md2', 3, 0.1, S_CLINK_LOOK5) { }
	S_CLINK_LOOK5('CLNK', 0, 'monsters/clink/base.md2', 4, 0.1, S_CLINK_LOOK6) { A_Look(); }
	S_CLINK_LOOK6('CLNK', 0, 'monsters/clink/base.md2', 5, 0.1, S_CLINK_LOOK7) { }
	S_CLINK_LOOK7('CLNK', 1, 'monsters/clink/base.md2', 6, 0.1, S_CLINK_LOOK8) { A_Look(); }
	S_CLINK_LOOK8('CLNK', 1, 'monsters/clink/base.md2', 7, 0.1, S_CLINK_LOOK1) { }
	//	Running
	S_CLINK_WALK1('CLNK', 0, 'monsters/clink/base.md2', 8, 0.1, S_CLINK_WALK2) { A_Chase(); }
	S_CLINK_WALK2('CLNK', 1, 'monsters/clink/base.md2', 9, 0.1, S_CLINK_WALK3) { A_Chase(); }
	S_CLINK_WALK3('CLNK', 2, 'monsters/clink/base.md2', 10, 0.1, S_CLINK_WALK4) { A_Chase(); }
	S_CLINK_WALK4('CLNK', 3, 'monsters/clink/base.md2', 11, 0.1, S_CLINK_WALK5) { A_Chase(); }
	S_CLINK_WALK5('CLNK', 0, 'monsters/clink/base.md2', 12, 0.1, S_CLINK_WALK6) { A_Chase(); }
	S_CLINK_WALK6('CLNK', 1, 'monsters/clink/base.md2', 13, 0.1, S_CLINK_WALK7) { A_Chase(); }
	S_CLINK_WALK7('CLNK', 2, 'monsters/clink/base.md2', 14, 0.1, S_CLINK_WALK8) { A_Chase(); }
	S_CLINK_WALK8('CLNK', 3, 'monsters/clink/base.md2', 15, 0.1, S_CLINK_WALK9) { A_Chase(); }
	S_CLINK_WALK9('CLNK', 0, 'monsters/clink/base.md2', 16, 0.1, S_CLINK_WALK10) { A_Chase(); }
	S_CLINK_WALK10('CLNK', 1, 'monsters/clink/base.md2', 17, 0.1, S_CLINK_WALK11) { A_Chase(); }
	S_CLINK_WALK11('CLNK', 2, 'monsters/clink/base.md2', 18, 0.1, S_CLINK_WALK12) { A_Chase(); }
	S_CLINK_WALK12('CLNK', 3, 'monsters/clink/base.md2', 19, 0.1, S_CLINK_WALK13) { A_Chase(); }
	S_CLINK_WALK13('CLNK', 0, 'monsters/clink/base.md2', 20, 0.1, S_CLINK_WALK14) { A_Chase(); }
	S_CLINK_WALK14('CLNK', 1, 'monsters/clink/base.md2', 21, 0.1, S_CLINK_WALK15) { A_Chase(); }
	S_CLINK_WALK15('CLNK', 2, 'monsters/clink/base.md2', 22, 0.1, S_CLINK_WALK16) { A_Chase(); }
	S_CLINK_WALK16('CLNK', 3, 'monsters/clink/base.md2', 23, 0.1, S_CLINK_WALK1) { A_Chase(); }
	//	Attack
	S_CLINK_ATK1('CLNK', 4, 'monsters/clink/base.md2', 24, 0.05, S_CLINK_ATK2) { A_FaceTarget(); }
	S_CLINK_ATK2('CLNK', 4, 'monsters/clink/base.md2', 25, 0.05, S_CLINK_ATK3) { }
	S_CLINK_ATK3('CLNK', 4, 'monsters/clink/base.md2', 26, 0.05, S_CLINK_ATK4) { }
	S_CLINK_ATK4('CLNK', 5, 'monsters/clink/base.md2', 27, 0.05, S_CLINK_ATK5) { A_FaceTarget(); }
	S_CLINK_ATK5('CLNK', 5, 'monsters/clink/base.md2', 28, 0.05, S_CLINK_ATK6) { }
	S_CLINK_ATK6('CLNK', 6, 'monsters/clink/base.md2', 29, 0.05, S_CLINK_ATK7) { A_ClinkAttack(); }
	S_CLINK_ATK7('CLNK', 6, 'monsters/clink/base.md2', 30, 0.05, S_CLINK_ATK8) { }
	S_CLINK_ATK8('CLNK', 6, 'monsters/clink/base.md2', 31, 0.1, S_CLINK_WALK1) { }
	//	Pain
	S_CLINK_PAIN1('CLNK', 7, 'monsters/clink/base.md2', 32, 0.1, S_CLINK_PAIN2) { }
	S_CLINK_PAIN2('CLNK', 7, 'monsters/clink/base.md2', 33, 0.1, S_CLINK_WALK1) { A_Pain(); }
	//	Death
	S_CLINK_DIE1('CLNK', 8, 'monsters/clink/base.md2', 34, 0.1, S_CLINK_DIE2) { }
	S_CLINK_DIE2('CLNK', 8, 'monsters/clink/base.md2', 35, 0.1, S_CLINK_DIE3) { }
	S_CLINK_DIE3('CLNK', 9, 'monsters/clink/base.md2', 36, 0.1, S_CLINK_DIE4) { }
	S_CLINK_DIE4('CLNK', 9, 'monsters/clink/base.md2', 37, 0.1, S_CLINK_DIE5) { }
	S_CLINK_DIE5('CLNK', 10, 'monsters/clink/death.md2', 0, 0.1, S_CLINK_DIE6) { A_Scream(); }
	S_CLINK_DIE6('CLNK', 10, 'monsters/clink/death.md2', 1, 0.1, S_CLINK_DIE7) { }
	S_CLINK_DIE7('CLNK', 11, 'monsters/clink/death.md2', 2, 0.1, S_CLINK_DIE8) { A_NoBlocking(); }
	S_CLINK_DIE8('CLNK', 11, 'monsters/clink/death.md2', 3, 0.1, S_CLINK_DIE9) { }
	S_CLINK_DIE9('CLNK', 12, 'monsters/clink/death.md2', 4, 0.1, S_CLINK_DIE10) { }
	S_CLINK_DIE10('CLNK', 12, 'monsters/clink/death.md2', 5, 0.1, S_CLINK_DIE11) { }
	S_CLINK_DIE11('CLNK', 13, 'monsters/clink/death.md2', 6, 0.1, S_CLINK_DIE12) { }
	S_CLINK_DIE12('CLNK', 13, 'monsters/clink/death.md2', 7, 0.1, S_CLINK_DIE13) { }
	S_CLINK_DIE13('CLNK', 14, 'monsters/clink/death.md2', 8, 0.1, S_CLINK_DIE14) { }
	S_CLINK_DIE14('CLNK', 14, 'monsters/clink/death.md2', 9, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 150;
	Radius = 20.0;
	Height = 64.0;
	Mass = 75.0;
	StepSpeed = 14.0;
	PainChance = 0.125;
	bNoBlood = true;
	IdleState = S_CLINK_LOOK1;
	SeeState = S_CLINK_WALK1;
	MeleeState = S_CLINK_ATK1;
	PainState = S_CLINK_PAIN1;
	DeathState = S_CLINK_DIE1;
	SightSound = 'ClinkSight';
	ActiveSound = 'ClinkActive';
	AttackSound = 'ClinkAttack';
	PainSound = 'ClinkPain';
	DeathSound = 'ClinkDeath';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2005/06/16 17:46:38  dj_jl
//  Added model definitions.
//
//  Revision 1.1  2002/10/26 16:32:22  dj_jl
//  New style of defining classes.
//
//**************************************************************************
