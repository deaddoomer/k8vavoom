//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Clink : Pawn
	__mobjinfo__(90)
	__scriptid__(1);

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff()
{
	DropItem(SkullRodAmmo, 20, 0.328125);
}

//==========================================================================
//
//  A_ClinkAttack
//
//==========================================================================

final void A_ClinkAttack()
{
	int damage;

	if (!Target)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		damage = ((P_Random() % 7) + 3);
		Target.Damage(self, self, damage);
	}
}

__states__
{
	S_CLINK_LOOK1('CLNK', 0, 10.0 / 35.0, S_CLINK_LOOK2) = A_Look
	S_CLINK_LOOK2('CLNK', 1, 10.0 / 35.0, S_CLINK_LOOK1) = A_Look
	S_CLINK_WALK1('CLNK', 0, 3.0 / 35.0, S_CLINK_WALK2) = A_Chase
	S_CLINK_WALK2('CLNK', 1, 3.0 / 35.0, S_CLINK_WALK3) = A_Chase
	S_CLINK_WALK3('CLNK', 2, 3.0 / 35.0, S_CLINK_WALK4) = A_Chase
	S_CLINK_WALK4('CLNK', 3, 3.0 / 35.0, S_CLINK_WALK1) = A_Chase
	S_CLINK_ATK1('CLNK', 4, 5.0 / 35.0, S_CLINK_ATK2) = A_FaceTarget
	S_CLINK_ATK2('CLNK', 5, 4.0 / 35.0, S_CLINK_ATK3) = A_FaceTarget
	S_CLINK_ATK3('CLNK', 6, 7.0 / 35.0, S_CLINK_WALK1) = A_ClinkAttack
	S_CLINK_PAIN1('CLNK', 7, 3.0 / 35.0, S_CLINK_PAIN2) = none
	S_CLINK_PAIN2('CLNK', 7, 3.0 / 35.0, S_CLINK_WALK1) = A_Pain
	S_CLINK_DIE1('CLNK', 8, 6.0 / 35.0, S_CLINK_DIE2) = none
	S_CLINK_DIE2('CLNK', 9, 6.0 / 35.0, S_CLINK_DIE3) = none
	S_CLINK_DIE3('CLNK', 10, 5.0 / 35.0, S_CLINK_DIE4) = A_Scream
	S_CLINK_DIE4('CLNK', 11, 5.0 / 35.0, S_CLINK_DIE5) = A_NoBlocking
	S_CLINK_DIE5('CLNK', 12, 5.0 / 35.0, S_CLINK_DIE6) = none
	S_CLINK_DIE6('CLNK', 13, 5.0 / 35.0, S_CLINK_DIE7) = none
	S_CLINK_DIE7('CLNK', 14, -1.0, none) = none
}

defaultproperties
{
	Health = 150;
	Radius = 20.0;
	Height = 64.0;
	Mass = 75.0;
	StepSpeed = 14.0;
	PainChance = 0.125;
	bNoBlood = true;
	IdleState = S_CLINK_LOOK1;
	SeeState = S_CLINK_WALK1;
	MeleeState = S_CLINK_ATK1;
	PainState = S_CLINK_PAIN1;
	DeathState = S_CLINK_DIE1;
	SightSound = 'clink/sight';
	ActiveSound = 'clink/active';
	AttackSound = 'clink/attack';
	PainSound = 'clink/pain';
	DeathSound = 'clink/death';
}
