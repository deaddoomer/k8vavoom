//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Pawn : Actor
	abstract;

//==========================================================================
//
//	NoBlockingSet
//
//==========================================================================

void NoBlockingSet()
{
}

//==========================================================================
//
//  DropItem
//
//==========================================================================

void DropItem(class<Actor> type, int amount, float chance)
{
	Actor A;

	if (Random() > chance)
	{
		return;
	}
	A = Spawn(type, Origin + vector(0.0, 0.0, Height / 2.0));
	A.Velocity.x = (Random() - Random()) * 35.0;
	A.Velocity.y = (Random() - Random()) * 35.0;
	A.Velocity.z = (5.0 + Random() * 4.0) * 35.0;
	A.bDropped = true;
	if (Ammo(A))
	{
		Ammo(A).AmmoCount = amount;
	}
}

//==========================================================================
//
//  A_NoBlocking
//
//==========================================================================

final void A_NoBlocking()
{
	bSolid = false;
	// Check for monsters dropping things
	NoBlockingSet();
}

//==========================================================================
//
//  A_Feathers
//
//==========================================================================

final void A_Feathers()
{
	int i;
	int count;
	Actor mo;

	if (Health > 0)
	{
		// Pain
		count = P_Random() < 32 ? 2 : 1;
	}
	else
	{
		// Death
		count = 5 + (P_Random() & 3);
	}
	for (i = 0; i < count; i++)
	{
		mo = Spawn(Feather, Origin + vector(0.0, 0.0, 20.0));
		mo.Target = self;
		mo.Velocity.x = (Random() - Random()) * 35.0;
		mo.Velocity.y = (Random() - Random()) * 35.0;
		mo.Velocity.z = (1.0 + Random() * 2.0) * 35.0;
		switch (P_Random() & 7)
		{
		case 0: mo.SetState(Feather::S_FEATHER1); break;
		case 1: mo.SetState(Feather::S_FEATHER2); break;
		case 2: mo.SetState(Feather::S_FEATHER3); break;
		case 3: mo.SetState(Feather::S_FEATHER4); break;
		case 4: mo.SetState(Feather::S_FEATHER5); break;
		case 5: mo.SetState(Feather::S_FEATHER6); break;
		case 6: mo.SetState(Feather::S_FEATHER7); break;
		case 7: mo.SetState(Feather::S_FEATHER8); break;
		}
	}
}

//==========================================================================
//
//	BossDeathSpecialAction
//
//==========================================================================

void BossDeathSpecialAction()
{
	// make sure there is a player alive for victory
	int i;
	for (i = 0; i < MAXPLAYERS; i++)
		if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
			break;

	if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game

	// Make sure all bosses are dead
	Actor mo;
	foreach AllThinkers(Actor, mo)
	{
		if ((mo != self) && (mo.Class == Class) && (mo.Health > 0))
		{
			// Found a living boss
			return;
		}
	}

	if (Level.bSpecialActionKillMonsters)
	{
		// Kill any remaining monsters
		HereticLevelInfo(Level).P_Massacre();
	}

	if (Level.bSpecialActionOpenDoor)
	{
		Level.ExecuteActionSpecial(LNSPEC_DoorOpen, 666, 64, 150, 0, 0,
			NULL, 0, none);
	}
	else if (Level.bSpecialActionLowerFloor)
	{
		//NOTE Doom does loer to lowest.
		Level.ExecuteActionSpecial(LNSPEC_FloorLowerToNearest, 666, 8, 0, 0,
			0, NULL, 0, none);
	}
	else
	{
		Level.ExitLevel(0);
	}
}

defaultproperties
{
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bFloorClip = true;
	bActivateMCross = true;
	bActivatePushWall = true;
}
