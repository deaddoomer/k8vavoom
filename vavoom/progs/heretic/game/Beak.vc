//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Beak : HereticWeapon;

//===========================================================================
//
//  A_BeakRaise
//
//===========================================================================

final void A_BeakRaise()
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Player.ViewStates[ps_weapon].SY = WEAPONTOP;
	Player.SetViewState(ps_weapon, Wpn.GetReadyState());
}

//===========================================================================
//
//  A_BeakReady
//
//===========================================================================

final void A_BeakReady()
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	if (Player.Buttons & BT_ATTACK)
	{
		// Chicken beak attack
		Player.bAttackDown = true;
		SetState(MissileState);
		Player.SetViewState(ps_weapon, Wpn.GetAttackState(false));
		HereticLevelInfo(Level).NoiseAlert(self, self);
	}
	else
	{
		if (State == MissileState)
		{
			// Take out of attack state
			SetState(IdleState);
		}
		Player.bAttackDown = false;
	}
}

//===========================================================================
//
//  A_BeakAttackPL1
//
//===========================================================================

final void A_BeakAttackPL1()
{
	int			damage;
	TVec		dir;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	damage = 1 + (P_Random() & 3);
	AimTarget = AimLineAttack(dir, Angles, MELEERANGE);
	LineAttack(dir, MELEERANGE, damage, BeakPuff);
	if (AimTarget)
	{
		Angles.yaw = atan2(AimTarget.Origin.y - Origin.y,
			AimTarget.Origin.x - Origin.x);
		Player.bFixAngle = true;
	}
	PlaySound('chicken/peck', CHAN_VOICE);
	Player(Player).ChickenPeck = 12;
	Player.ViewStates[ps_weapon].StateTime -= Random() * 0.25;
}

//===========================================================================
//
//  A_BeakAttackPL2
//
//===========================================================================

final void A_BeakAttackPL2()
{
	int			damage;
	TVec		dir;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	damage = HITDICE(4);
	AimTarget = AimLineAttack(dir, Owner.Angles, MELEERANGE);
	LineAttack(dir, MELEERANGE, damage, BeakPuff);
	if (AimTarget)
	{
		Angles.yaw = atan2(AimTarget.Origin.y - Origin.y,
			AimTarget.Origin.x - Origin.x);
		Player.bFixAngle = true;
	}
	PlaySound('chicken/peck', CHAN_VOICE);
	Player(Player).ChickenPeck = 12;
	Player.ViewStates[ps_weapon].StateTime -= Random() * 0.125;
}

states
{
Ready:
	BEAK A 1 A_BeakReady
	Loop
Deselect:
	BEAK A 1 A_Lower
	Loop
Select:
	BEAK A 1 A_BeakRaise
	Loop
Fire:
	BEAK A 18 A_BeakAttackPL1
	Goto Ready
}

defaultproperties
{
	Slot = 1;
	SelectionOrder = 10000;
	PSpriteSY = 15.0;
	SisterWeaponType = BeakPowered;
	BotCombatDist = 1.0;
	bBotMelee = true;
}
