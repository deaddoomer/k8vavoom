//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Beak : WeaponEx;

//===========================================================================
//
//  A_BeakRaise
//
//===========================================================================

final void A_BeakRaise()
{
	Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP;
	Owner.Player.SetViewState(ps_weapon, ReadyState);
}

//===========================================================================
//
//  A_BeakReady
//
//===========================================================================

final void A_BeakReady()
{
	if (Owner.Player.Buttons & BT_ATTACK)
	{
		// Chicken beak attack
		Owner.Player.bAttackDown = true;
		Owner.SetState(Actor(Owner).MissileState);
		Owner.Player.SetViewState(ps_weapon, AttackState);
		HereticLevelInfo(Level).NoiseAlert(Actor(Owner), Actor(Owner));
	}
	else
	{
		if (Owner.State == Actor(Owner).MissileState)
		{
			// Take out of attack state
			Owner.SetState(Actor(Owner).IdleState);
		}
		Owner.Player.bAttackDown = false;
	}
}

//===========================================================================
//
//  A_BeakAttackPL1
//
//===========================================================================

final void A_BeakAttackPL1()
{
	int			damage;
	TVec		dir;
	EntityEx	AimTarget;

	damage = 1 + (P_Random() & 3);
	AimTarget = Actor(Owner).AimLineAttack(dir, Owner.Angles, MELEERANGE);
	Actor(Owner).LineAttack(dir, MELEERANGE, damage, BeakPuff);
	if (AimTarget)
	{
		Owner.Angles.yaw = atan2(AimTarget.Origin.y - Owner.Origin.y,
			AimTarget.Origin.x - Owner.Origin.x);
		Owner.Player.bFixAngle = true;
	}
	Owner.PlaySound('chicken/peck', CHAN_VOICE);
	Player(Owner.Player).ChickenPeck = 12;
	Owner.Player.ViewStates[ps_weapon].StateTime -= Random() * 0.25;
}

//===========================================================================
//
//  A_BeakAttackPL2
//
//===========================================================================

final void A_BeakAttackPL2()
{
	int			damage;
	TVec		dir;
	EntityEx	AimTarget;

	damage = HITDICE(4);
	AimTarget = Actor(Owner).AimLineAttack(dir, Owner.Angles, MELEERANGE);
	Actor(Owner).LineAttack(dir, MELEERANGE, damage, BeakPuff);
	if (AimTarget)
	{
		Owner.Angles.yaw = atan2(AimTarget.Origin.y - Owner.Origin.y,
			AimTarget.Origin.x - Owner.Origin.x);
		Owner.Player.bFixAngle = true;
	}
	Owner.PlaySound('chicken/peck', CHAN_VOICE);
	Player(Owner.Player).ChickenPeck = 12;
	Owner.Player.ViewStates[ps_weapon].StateTime -= Random() * 0.125;
}

__states__
{
	S_BEAKREADY('BEAK', 0, 1.0 / 35.0, S_BEAKREADY) = A_BeakReady
	S_BEAKDOWN('BEAK', 0, 1.0 / 35.0, S_BEAKDOWN) = A_Lower
	S_BEAKUP('BEAK', 0, 1.0 / 35.0, S_BEAKUP) = A_BeakRaise
	S_BEAKATK1_1('BEAK', 0, 18.0 / 35.0, S_BEAKREADY) = A_BeakAttackPL1
	S_BEAKATK2_1('BEAK', 0, 12.0 / 35.0, S_BEAKREADY) = A_BeakAttackPL2
}

defaultproperties
{
	Slot = 1;
	SelectionOrder = 10000;
	PSpriteSY = 15.0;
	SisterWeaponType = BeakPowered;
	UpState = S_BEAKUP;
	DownState = S_BEAKDOWN;
	ReadyState = S_BEAKREADY;
	AttackState = S_BEAKATK1_1;
	HoldAttackState = S_BEAKATK1_1;
}
