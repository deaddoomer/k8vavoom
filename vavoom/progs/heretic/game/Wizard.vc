//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Wizard : Pawn
	__mobjinfo__(15)
	__scriptid__(19);

//==========================================================================
//
//	NoBlockingSet
//
//==========================================================================

void NoBlockingSet()
{
	DropItem(BlasterAmmo, 10, 0.328125);
	DropItem(ArtiTomeOfPower, 0, 0.015625);
}

//==========================================================================
//
//  A_WizAtk1
//
//==========================================================================

final void A_WizAtk1()
{
	A_FaceTarget();
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;
}

//==========================================================================
//
//  A_WizAtk2
//
//==========================================================================

final void A_WizAtk2()
{
	A_FaceTarget();
	RenderStyle = STYLE_Translucent;
	Alpha = 0.666;
}

//==========================================================================
//
//  A_WizAtk3
//
//==========================================================================

final void A_WizAtk3()
{
	EntityEx A;
	float angle;
	TAVec ang;

	RenderStyle = STYLE_Normal;
	Alpha = 1.0;
	if (!Target)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
		return;
	}
	A = SpawnMissile(Target, WizardFX1);
	if (A)
	{
		VectorAngles(&A.Velocity, &ang);
		angle = A.Angles.yaw;
		SpawnMissileAngles(WizardFX1,
			AngleMod360(angle - (45.0 / 8.0)), ang.pitch);
		SpawnMissileAngles(WizardFX1,
			AngleMod360(angle + (45.0 / 8.0)), ang.pitch);
	}
}

//==========================================================================
//
//  A_GhostOff
//
//==========================================================================

final void A_GhostOff()
{
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;
}

//==========================================================================
//
//  A_Lights
//
//  Just spawn some dynamic light
//
//==========================================================================

final void A_Lights()
{
	SendExplosion(DLightColour, DLightRadius, Origin);
	bDynamicLight = false;
}

states
{
Spawn:
	WZRD AB 10 A_Look
	Loop
See:
	WZRD A 3 A_Chase
	WZRD A 4 A_Chase
	WZRD A 3 A_Chase
	WZRD A 4 A_Chase
	WZRD B 3 A_Chase
	WZRD B 4 A_Chase
	WZRD B 3 A_Chase
	WZRD B 4 A_Chase
	Loop
Missile:
	WZRD C 4 A_WizAtk1
	WZRD C 4 A_WizAtk2
	WZRD C 4 A_WizAtk1
	WZRD C 4 A_WizAtk2
	WZRD C 4 A_WizAtk1
	WZRD C 4 A_WizAtk2
	WZRD C 4 A_WizAtk1
	WZRD C 4 A_WizAtk2
	WZRD D 12 A_WizAtk3
	Goto See
Pain:
	WZRD E 3 A_GhostOff
	WZRD E 3 A_Pain
	Goto See
Death:
	WZRD F 6 { A_GhostOff(); A_Lights(); }
	WZRD G 6 A_Scream
	WZRD HI 6
	WZRD J 6 A_NoBlocking
	WZRD KL 6
	WZRD M -1
	Stop
}

defaultproperties
{
	Health = 180;
	Radius = 16.0;
	Height = 68.0;
	Speed = 12.0 * 35.0;
	PainChance = 0.25;
	bNoGravity = true;
	bFloat = true;
	bFloorClip = false;
	bDontOverlap = true;
	SightSound = 'wizard/sight';
	ActiveSound = 'wizard/active';
	AttackSound = 'wizard/attack';
	PainSound = 'wizard/pain';
	DeathSound = 'wizard/death';
	DLightColour = RGB(149, 16, 189);
	DLightRadius = 118.0;
}
