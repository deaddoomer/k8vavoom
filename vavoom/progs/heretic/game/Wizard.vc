//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Wizard : Pawn
	__mobjinfo__(15)
	__scriptid__(19);

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff()
{
	DropItem(BlasterAmmo, 10, 0.328125);
	DropItem(ArtiTomeOfPower, 0, 0.015625);
}

//==========================================================================
//
//  A_WizAtk1
//
//==========================================================================

final void A_WizAtk1()
{
	A_FaceTarget();
	Alpha = 1.0;
}

//==========================================================================
//
//  A_WizAtk2
//
//==========================================================================

final void A_WizAtk2()
{
	A_FaceTarget();
	Alpha = 0.666;
}

//==========================================================================
//
//  A_WizAtk3
//
//==========================================================================

final void A_WizAtk3()
{
	Actor A;
	float angle;
	TAVec ang;

	Alpha = 1.0;
	if (!Target)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
		return;
	}
	A = SpawnMissile(Target, WizardFX1);
	if (A)
	{
		VectorAngles(&A.Velocity, &ang);
		angle = A.Angles.yaw;
		SpawnMissileAngles(WizardFX1,
			AngleMod360(angle - (45.0 / 8.0)), ang.pitch);
		SpawnMissileAngles(WizardFX1,
			AngleMod360(angle + (45.0 / 8.0)), ang.pitch);
	}
}

//==========================================================================
//
//  A_GhostOff
//
//==========================================================================

final void A_GhostOff()
{
	Alpha = 1.0;
}

__states__
{
	S_WIZARD_LOOK1('WZRD', 0, 10.0 / 35.0, S_WIZARD_LOOK2) = A_Look
	S_WIZARD_LOOK2('WZRD', 1, 10.0 / 35.0, S_WIZARD_LOOK1) = A_Look
	S_WIZARD_WALK1('WZRD', 0, 3.0 / 35.0, S_WIZARD_WALK2) = A_Chase
	S_WIZARD_WALK2('WZRD', 0, 4.0 / 35.0, S_WIZARD_WALK3) = A_Chase
	S_WIZARD_WALK3('WZRD', 0, 3.0 / 35.0, S_WIZARD_WALK4) = A_Chase
	S_WIZARD_WALK4('WZRD', 0, 4.0 / 35.0, S_WIZARD_WALK5) = A_Chase
	S_WIZARD_WALK5('WZRD', 1, 3.0 / 35.0, S_WIZARD_WALK6) = A_Chase
	S_WIZARD_WALK6('WZRD', 1, 4.0 / 35.0, S_WIZARD_WALK7) = A_Chase
	S_WIZARD_WALK7('WZRD', 1, 3.0 / 35.0, S_WIZARD_WALK8) = A_Chase
	S_WIZARD_WALK8('WZRD', 1, 4.0 / 35.0, S_WIZARD_WALK1) = A_Chase
	S_WIZARD_ATK1('WZRD', 2, 4.0 / 35.0, S_WIZARD_ATK2) = A_WizAtk1
	S_WIZARD_ATK2('WZRD', 2, 4.0 / 35.0, S_WIZARD_ATK3) = A_WizAtk2
	S_WIZARD_ATK3('WZRD', 2, 4.0 / 35.0, S_WIZARD_ATK4) = A_WizAtk1
	S_WIZARD_ATK4('WZRD', 2, 4.0 / 35.0, S_WIZARD_ATK5) = A_WizAtk2
	S_WIZARD_ATK5('WZRD', 2, 4.0 / 35.0, S_WIZARD_ATK6) = A_WizAtk1
	S_WIZARD_ATK6('WZRD', 2, 4.0 / 35.0, S_WIZARD_ATK7) = A_WizAtk2
	S_WIZARD_ATK7('WZRD', 2, 4.0 / 35.0, S_WIZARD_ATK8) = A_WizAtk1
	S_WIZARD_ATK8('WZRD', 2, 4.0 / 35.0, S_WIZARD_ATK9) = A_WizAtk2
	S_WIZARD_ATK9('WZRD', 3, 12.0 / 35.0, S_WIZARD_WALK1) = A_WizAtk3
	S_WIZARD_PAIN1('WZRD', 4, 3.0 / 35.0, S_WIZARD_PAIN2) = A_GhostOff
	S_WIZARD_PAIN2('WZRD', 4, 3.0 / 35.0, S_WIZARD_WALK1) = A_Pain
	S_WIZARD_DIE1('WZRD', 5, 6.0 / 35.0, S_WIZARD_DIE2) = A_GhostOff
	S_WIZARD_DIE2('WZRD', 6, 6.0 / 35.0, S_WIZARD_DIE3) = A_Scream
	S_WIZARD_DIE3('WZRD', 7, 6.0 / 35.0, S_WIZARD_DIE4) = none
	S_WIZARD_DIE4('WZRD', 8, 6.0 / 35.0, S_WIZARD_DIE5) = none
	S_WIZARD_DIE5('WZRD', 9, 6.0 / 35.0, S_WIZARD_DIE6) = A_NoBlocking
	S_WIZARD_DIE6('WZRD', 10, 6.0 / 35.0, S_WIZARD_DIE7) = none
	S_WIZARD_DIE7('WZRD', 11, 6.0 / 35.0, S_WIZARD_DIE8) = none
	S_WIZARD_DIE8('WZRD', 12, -1.0, none) = none
}

defaultproperties
{
	Health = 180;
	Radius = 16.0;
	Height = 68.0;
	StepSpeed = 12.0;
	PainChance = 0.25;
	bNoGravity = true;
	bFloat = true;
	bFloorClip = false;
	IdleState = S_WIZARD_LOOK1;
	SeeState = S_WIZARD_WALK1;
	MissileState = S_WIZARD_ATK1;
	PainState = S_WIZARD_PAIN1;
	DeathState = S_WIZARD_DIE1;
	SightSound = 'wizard/sight';
	ActiveSound = 'wizard/active';
	AttackSound = 'wizard/attack';
	PainSound = 'wizard/pain';
	DeathSound = 'wizard/death';
}
