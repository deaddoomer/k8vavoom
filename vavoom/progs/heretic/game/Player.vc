//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

const int MAXCHICKENHEALTH	= 30;
const float VIEWHEIGHT		= 41.0;

const float BLINKTHRESHOLD	= 4.0;

const float
	INVULNTIME		= 30.0,
	INVISTIME		= 60.0,
	INFRATIME		= 120.0,
	WPNLEV2TIME 	= 40.0,
	FLIGHTTIME 		= 60.0,
	CHICKENTIME 	= 40.0;

// 16 pixels of bob
const float MAXBOB	= 16.0;

const int
	INVERSECOLOURMAP	= 32;

const int MAXHEALTH	= 100;

const float USERANGE	= 64.0;

struct inventory_t
{
	int type;
	int count;
};

int SBFlags;

int ArmorPoints;

float ChickenTime;	// player is a chicken if > 0

// Power ups. invinc and invis are timers.
float Powers[NUMPOWERS];

int Keys;

int ArtifactFlash;
int InvPtr;
int InvCurPos;
inventory_t Inventory[HereticDefs::NUMARTIFACTS];

int ReadyArtifact;
int InventorySlotNum;
int Arti;	// artitype_t to use

float FlyHeight;

float InventoryTime;
int ArtifactCount;

// Refired shots are less accurate.
int Refire;

// Is wp_nochange if not changing.
WeaponEx PendingWeapon;

WeaponEx ReadyWeapon;

// Armor type is 0-2.
int ArmorType;

int ChickenPeck;	// chicken peck countdown
Actor Rain1;	// active rain maker 1
Actor Rain2;	// active rain maker 2

int NewTorch;	// used in the torch flicker effect.
int NewTorchDelta;

BotPlayer Bot;
Inventory SavedInventory;

bool onground;

replication
{
	reliable if (!bIsClient)
		SBFlags, ArmorPoints, ArtifactFlash, InvPtr, InvCurPos,
		ReadyArtifact, InventorySlotNum, ReadyWeapon, Inventory;

	unreliable if (!bIsClient)
		ClientBlood, ClientExplosion;
}

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer()
{
	if (bIsBot)
	{
		Bot = BotPlayer(SpawnObject(BotPlayer));
		Bot.player = self;
		Bot.OnBeginPlay();
	}
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient()
{
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
	}
	else
	{
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
	}
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn()
{
	int i;

	// remove pitch and roll angles from corpse
	MO.Angles.pitch = 0.0;
	MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	MO.Player = none;
	MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
		return;
	}

	if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
		GetPlayerNum()]))
	{
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
		return;
	}

	// try to spawn at one of the other players spots
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]))
		{
			SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]);
			return;
		}
	}

	// he's going to be inside something.  Too bad.
	SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
		GetPlayerNum()]);
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient()
{
	int i;

	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
	if (MO)
	{
		MO.Player = none;
		MO.bIsPlayer = false;
		Actor(MO).Damage(none, none, 10000);
	}
	if (ViewEnt)
	{
		ViewEnt.Destroy();
		ViewEnt = none;
	}
	Level.bprint("%s left the game\n", PlayerName);
	MO.PlaySound('misc/chat', CHAN_AUTO, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged()
{
	if (!bSpawned)
	{
		return;
	}
	MO.Translation = Colour;
}

//==========================================================================
//
//  DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void DeathMatchSpawnPlayer()
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		if (CheckSpot(&Level.DeathmatchStarts[i]))
		{
			SpawnPlayer(&Level.DeathmatchStarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	SpawnPlayer(&Level.PlayerStarts[GetPlayerNum()]);
}

//==========================================================================
//
//  CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool CheckSpot(mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int i;

	if (!MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].MO &&
				Level.Game.Players[i].MO.Origin.x == mthing->x &&
				Level.Game.Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	MO.bNoPassMobj = true;
	if (!MO.CheckPosition(vector(x, y, Actor::ONFLOORZ)))
	{
		MO.bNoPassMobj = false;
		return false;
	}
	MO.bNoPassMobj = false;

	// spawn a teleport fog 
	sec = Level.XLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = HereticLevelInfo(Level).Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight + Actor::TELEFOGHEIGHT));
	A.PlaySound('misc/teleport', CHAN_VOICE);

	return true;
}

//==========================================================================
//
//  SpawnPlayer
//
//  Called when a player is spawned on the level
//  Most of the player structure stays unchanged between levels
//
//==========================================================================

void SpawnPlayer(mthing_t * mthing)
{
	float		x, y, z;
	PlayerPawn	A;
	bool		ResetInventory = false;
	int			i;
	Inventory	Item;
	WeaponEx	Wpn;

	if (PlayerState == PST_REBORN)
	{
		PlayerReborn();
		ResetInventory = true;
	}
	x = mthing->x;
	y = mthing->y;

	z = Actor::ONFLOORZ;
	A = HereticLevelInfo(Level).Spawn(HereticPlayer, vector(x, y, z));
	A.Origin.z += mthing->height;
	A.LinkToWorld();
	// set colour translations for player sprites
	A.Translation = Colour;

	A.Angles.yaw = itof(45 * (mthing->angle / 45));
	A.Player = self;
	A.bIsPlayer = true;
	A.Health = Health;
	MO = A;
	PlayerState = PST_LIVE;
	Refire = 0;
	DamageFlash = 0.0;
	BonusFlash = 0.0;
	ChickenTime = 0.0;
	Rain1 = none;
	Rain2 = none;
	ExtraLight = 0;
	FixedColourmap = 0;
	LastSectorDamageTime = 0.0;
	LastHazardTime = 0.0;
	ViewHeight = VIEWHEIGHT;
	ViewAngles = A.Angles;
	bFixAngle = true;

	A.Inventory = SavedInventory;
	for (Item = A.Inventory; Item; Item = Item.Inventory)
	{
		Item.Owner = MO;
	}

	if (ResetInventory)
	{
		while (A.Inventory)
		{
			A.Inventory.Destroy();
		}
		for (i = 0; i < A.InitialInventory.Num; i++)
		{
			Item = Level.Spawn(A.InitialInventory[i].Type);
			Item.Amount = A.InitialInventory[i].Amount;
			if (Weapon(Item))
			{
				//	For better control empty weapon's ammo.
				Weapon(Item).AmmoGive1 = 0;
				Weapon(Item).AmmoGive2 = 0;
			}
			if (!Item.TryPickup(A))
			{
				Item.Destroy();
			}
			else if (Weapon(Item) && Weapon(Item).CheckAmmo(false))
			{
				SetWeapon(WeaponEx(Item));
			}
		}
	}
	SetupPsprites();	// setup gun psprite
	if (Level.Game.deathmatch)
	{
		// Give all keys in death match mode
		Keys = 7;
	}
	if (bIsBot)
	{
		Bot.OnSpawn();
	}
}

//==========================================================================
//
//  PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialised
//
//==========================================================================

void PlayerReborn()
{
	BotPlayer b;

	b = Bot;
	ClearPlayer();
	Bot = b;

	bUseDown = true;	// don't do anything immediately
	bAttackDown = true;
	PlayerState = PST_LIVE;
	Health = MAXHEALTH;
	LocalQuakeHappening = 0;
}

//==========================================================================
//
//  PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void PlayerExitMap(bool clusterChange)
{
	int i;

	for (i = 0; i < InventorySlotNum; i++)
	{
		Inventory[i].count = 1;
	}
	ArtifactCount = InventorySlotNum;

	if (!Level.Game.deathmatch)
	{
		PlayerUseArtifact(HereticDefs::arti_fly);
	}

	for (i = 0; i < NUMPOWERS; i++)
	{
		Powers[i] = 0.0;
	}
	if (clusterChange)
	{
		Keys = 0;
	}
	if (ChickenTime)
	{
		SetWeapon(WeaponEx(Actor(MO).Tracer));	// Restore weapon
		ChickenTime = 0.0;
	}
	Items = 0;
	MO.Angles.pitch = 0.0;
	MO.Alpha = 1.0;	// cancel invisibility
	ExtraLight = 0;	// cancel gun flashes
	FixedColourmap = 0;	// cancel ir gogles
	DamageFlash = 0.0;	// no palette changes
	BonusFlash = 0.0;
	Rain1 = none;
	Rain2 = none;
	SavedInventory = EntityEx(MO).Inventory;
}

//==========================================================================
//
//  GiveAmmo
//
//  Returns true if the player accepted the ammo, false if it was refused.
//
//==========================================================================

bool GiveAmmo(class<Ammo> ammo, int count)
{
	int oldammo;

	if (!ammo)
	{
		return false;
	}

	Ammo AmmoItem = Ammo(EntityEx(MO).FindInventory(ammo));
	if (!AmmoItem)
	{
		AmmoItem = Level.Spawn(ammo);
		AmmoItem.AttachToOwner(EntityEx(MO));
		AmmoItem.Amount = 0;
	}
	if (!count)
	{
		return false;
	}
	if (AmmoItem.Amount == AmmoItem.MaxAmount)
	{
		return false;
	}

	if (Level.Game.gameskill == sk_baby ||
		(Level.Game.gameskill == sk_nightmare &&
		LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo))
	{
		// extra ammo in baby mode and nightmare mode
		if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
		{
			count <<= 1;
		}
		else
		{
			count += count >> 1;
		}
	}

	oldammo = AmmoItem.Amount;
	AmmoItem.Amount += count;
	if (AmmoItem.Amount > AmmoItem.MaxAmount)
	{
		AmmoItem.Amount = AmmoItem.MaxAmount;
	}

	if (oldammo <= 0)
	{
		GotAmmo(AmmoItem);
	}
	return true;
}

//==========================================================================
//
//	GotAmmo
//
//==========================================================================

void GotAmmo(Ammo NewAmmo)
{
	if (ReadyWeapon.bWimpyWeapon)
	{
		WeaponEx Best = WeaponEx(BestWeapon(class<Ammo>(NewAmmo.Class)));
		if (Best && Best.SelectionOrder < ReadyWeapon.SelectionOrder)
		{
			PendingWeapon = Best;
		}
	}
}

//==========================================================================
//
//  GiveBody
//
//  Returns false if the body isn't needed at all.
//
//==========================================================================

bool GiveBody(int num)
{
	int max;

	max = MAXHEALTH;
	if (ChickenTime)
	{
		max = MAXCHICKENHEALTH;
	}
	if (Health >= max)
	{
		return false;
	}
	Health += num;
	if (Health > max)
	{
		Health = max;
	}
	MO.Health = Health;
	return true;
}

//==========================================================================
//
//  GiveArmor
//
//  Returns false if the armor is worse than the current armor.
//
//==========================================================================

bool GiveArmor(int armortype)
{
	int hits;

	hits = armortype * 100;
	if (ArmorPoints >= hits)
	{
		return false;
	}
	ArmorType = armortype;
	ArmorPoints = hits;
	return true;
}

//==========================================================================
//
//  GiveKey
//
//==========================================================================

bool GiveKey(int key)
{
	if ((Keys & (1 << key)))
	{
		return false;
	}
	Keys |= 1 << key;
	return true;
}

//==========================================================================
//
//  GivePower
//
//  Returns true if power accepted.
//
//==========================================================================

bool GivePower(int power)
{
	if (power == pw_invulnerability)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INVULNTIME;
		return true;
	}
	if (power == pw_weaponlevel2)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = WPNLEV2TIME;
		return true;
	}
	if (power == pw_invisibility)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INVISTIME;
		MO.Alpha = 0.666;
		return true;
	}
	if (power == pw_flight)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = FLIGHTTIME;
		MO.bFly = true;
		MO.bNoGravity = true;
		if (MO.Origin.z <= MO.FloorZ)
		{
			FlyHeight = 10.0;	// thrust the player in the air a bit
		}
		return true;
	}
	if (power == pw_infrared)
	{
		if (Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Powers[power] = INFRATIME;
		return true;
	}
	if (Powers[power])
	{
		return false;	// already got it
	}
	Powers[power] = 1.0;
	return true;
}

//==========================================================================
//
//  GiveItem
//
//==========================================================================

bool GiveItem(int item)
{
	if (Items & item)
	{
		return false;	// already got it
	}
	Items |= item;
	return true;
}

//==========================================================================
//
//  GiveArtifact
//
//  Returns true if artifact accepted.
//
//==========================================================================

bool GiveArtifact(int arti)
{
	int i;

	i = 0;
	while (Inventory[i].type != arti && i < InventorySlotNum)
	{
		i++;
	}
	if (i == InventorySlotNum)
	{
		Inventory[i].count = 1;
		Inventory[i].type = arti;
		InventorySlotNum++;
	}
	else
	{
		if (Inventory[i].count >= 16)
		{
			// Player already has 16 of this item
			return false;
		}
		Inventory[i].count++;
	}
	if (ArtifactCount == 0)
	{
		ReadyArtifact = arti;
	}
	ArtifactCount++;
	return true;
}

//==========================================================================
//
//  InventoryLeft
//
//==========================================================================

void InventoryLeft()
{
	if (!InventoryTime)
	{
		InventoryTime = 5.0;
		return;
	}

	InventoryTime = 5.0;
	InvPtr--;
	if (InvPtr < 0)
	{
		InvPtr = 0;
	}
	else
	{
		InvCurPos--;
		if (InvCurPos < 0)
		{
			InvCurPos = 0;
		}
	}
}

//==========================================================================
//
//  InventoryRight
//
//==========================================================================

void InventoryRight()
{
	if (!InventoryTime)
	{
		InventoryTime = 5.0;
		return;
	}

	InventoryTime = 5.0;
	InvPtr++;
	if (InvPtr >= InventorySlotNum)
	{
		InvPtr--;
		if (InvPtr < 0)
			InvPtr = 0;
	}
	else
	{
		InvCurPos++;
		if (InvCurPos > 6)
		{
			InvCurPos = 6;
		}
	}
}

//==========================================================================
//
//  InventoryUse
//
//==========================================================================

void InventoryUse()
{
	ReadyArtifact = Inventory[InvPtr].type;
	// flag to denote that it's okay to use an artifact
	if (InventoryTime)
	{
		InventoryTime = 0.0;
	}
	else
	{
		Arti = ReadyArtifact;
	}
}

//==========================================================================
//
//  InventoryTick
//
//==========================================================================

void InventoryTick(float deltaTime)
{
	// turn inventory off after a certain amount of time
	if (InventoryTime)
	{
		InventoryTime -= deltaTime;
		if (InventoryTime <= 0.0)
		{
			InventoryTime = 0.0;
			ReadyArtifact = Inventory[InvPtr].type;
		}
	}
	if (ArtifactFlash)
	{
		ArtifactFlash--;
	}
}

//==========================================================================
//
//  ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void ThrustPlayer(float angle, float move, float deltaTime)
{
	if (Powers[pw_flight] && !(MO.Origin.z <= MO.FloorZ))
	{
		MO.Velocity.x += move * cos(angle) * deltaTime;
		MO.Velocity.y += move * sin(angle) * deltaTime;
	}
	else if ((MO.Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow)
	{
		MO.Velocity.x += move / 4.0 * cos(angle) * deltaTime;
		MO.Velocity.y += move / 4.0 * sin(angle) * deltaTime;
	}
	else
	{
		MO.Velocity.x += move * cos(angle) * deltaTime;
		MO.Velocity.y += move * sin(angle) * deltaTime;
	}
}

//==========================================================================
//
//  CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void CalcHeight(float deltaTime)
{
	float angle;
	float bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	Bob = MO.Velocity.x * MO.Velocity.x + MO.Velocity.y * MO.Velocity.y;
	Bob /= 4.0 * 35.0 * 35.0;
	if (Bob > MAXBOB)
		Bob = MAXBOB;

	if (MO.bFly && !onground)
	{
		Bob = 0.5;
	}

	angle = 180.0 * 35.0 / 10.0 * Level.XLevel.Time;
	bob = Bob / 2.0 * sin(angle);

	// move viewheight
	if (PlayerState == PST_LIVE)
	{
		ViewHeight += DeltaViewHeight * deltaTime;

		if (ViewHeight > VIEWHEIGHT)
		{
			ViewHeight = VIEWHEIGHT;
			DeltaViewHeight = 0.0;
		}

		if (ViewHeight < VIEWHEIGHT / 2.0)
		{
			ViewHeight = VIEWHEIGHT / 2.0;
			if (DeltaViewHeight <= 0.0)
				DeltaViewHeight = 0.00001;
		}

		if (DeltaViewHeight)
		{
			DeltaViewHeight += 256.0 * deltaTime;
			if (!DeltaViewHeight)
				DeltaViewHeight = 0.00001;
		}
	}
	if (ChickenTime)
	{
		ViewOrg.z = MO.Origin.z + ViewHeight - 20.0;
	}
	else
	{
		ViewOrg.z = MO.Origin.z + ViewHeight + bob;
	}
	if (PlayerState != PST_DEAD && MO.Origin.z <= MO.FloorZ)
	{
		ViewOrg.z -= MO.FloorClip;
	}
	if (ViewOrg.z < MO.FloorZ + 4.0)
		ViewOrg.z = MO.FloorZ + 4.0;

	if (ViewOrg.z > MO.CeilingZ - 4.0)
		ViewOrg.z = MO.CeilingZ - 4.0;
}

//==========================================================================
//
//  MovePlayer
//
//==========================================================================

void MovePlayer(float deltaTime)
{
	float forward;
	float side;
	float fly;

	// Do not let the player control movement
	//  if not onground.
	onground = (MO.Origin.z <= MO.FloorZ) || Actor(MO).bOnMobj;

	forward = ForwardMove * 5.0;
	side = SideMove * 5.0;

	if (ChickenTime)
	{
		// Chicken speed
		forward *= 1.2;
		side *= 1.2;
	}
	if (!(onground || MO.bFly))
	{
		forward *= MainGameInfo(Level.Game).air_control;
		side *= MainGameInfo(Level.Game).air_control;
	}

	if (forward)
	{
		ThrustPlayer(MO.Angles.yaw, forward, deltaTime);
	}
	if (side)
	{
		ThrustPlayer(AngleMod360(MO.Angles.yaw - 90.0), side, deltaTime);
	}

	if (forward || side)
	{
		SetPlayerRunState();
	}

	fly = FlyMove / 16.0;
	if (fly && Powers[pw_flight])
	{
		if (FlyMove != TOCENTRE)
		{
			FlyHeight = fly * 2.0;
			if (!MO.bFly)
			{
				MO.bFly = true;
				MO.bNoGravity = true;
				if (MO.Velocity.z <= -39.0 * 35.0)
				{
					// stop falling scream
					MO.StopSound(CHAN_VOICE);
				}
			}
		}
		else
		{
			MO.bFly = false;
			MO.bNoGravity = false;
		}
	}
	else if (fly > 0.0)
	{
		PlayerUseArtifact(HereticDefs::arti_fly);
	}
	if (MO.bFly)
	{
		MO.Velocity.z = FlyHeight * 35.0;
		if (FlyHeight)
		{
			FlyHeight /= 2.0;
		}
	}

	if ((Buttons & BT_JUMP) && onground && !JumpTime)
	{
		if (ChickenTime)
		{
			//  Smaller momentum because chicken haves smaller mass
			MO.Velocity.z = 6.0 * 35.0;
		}
		else
		{
			MO.Velocity.z = 9.0 * 35.0;
		}
		Actor(MO).bOnMobj = false;
		JumpTime = 0.5;
	}
}

//==========================================================================
//
//  CheckWaterJump
//
//==========================================================================

void CheckWaterJump()
{
	TVec start;
	TVec end;
	TVec vforward;
	TVec HitPoint;
	TVec HitNormal;

	// check for a jump-out-of-water
	AngleVector(&MO.Angles, &vforward);
	start = MO.Origin;
	start.z += MO.Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalise(vforward);
	end = start + vforward * 24.0;
	if (!Level.XLevel.TraceLine(start, end, HitPoint, HitNormal))
	{
		// solid at waist
		start.z = MO.Origin.z + MO.Height;
		end = start + vforward * 24.0;
		MoveDir = HitNormal * -50.0;
		if (Level.XLevel.TraceLine(start, end, HitPoint, HitNormal))
		{
			// open at eye level
			Actor(MO).bWaterJump = true;
			MO.Velocity.z = 320.0;
			Actor(MO).ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  WaterMove
//
//==========================================================================

void WaterMove(float deltaTime)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	// Do not let the player control movement
	//  if not onground.
	onground = (MO.Origin.z <= MO.FloorZ) || Actor(MO).bOnMobj;

	AngleVectors(&MO.Angles, &vforward, &vright, &vup);

	forward = ForwardMove;
	side = SideMove;
	if (ChickenTime)
	{
		// Chicken speed
		forward *= 1.2;
		side *= 1.2;
	}

	wishvel = vforward * forward + vright * side;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  else
//      wishvel.z += cmd.upmove;

	MO.Velocity += 3.5 * deltaTime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if (Buttons & BT_JUMP)
	{
		if (MO.WaterType == CONTENTS_WATER)
			MO.Velocity.z = 100.0;
		else if (MO.WaterType == CONTENTS_SLUDGE)
			MO.Velocity.z = 80.0;
		else
			MO.Velocity.z = 50.0;
	}
	CheckWaterJump();
}

//==========================================================================
//
//  WaterJump
//
//==========================================================================

void WaterJump()
{
	if (!Actor(MO).ReactionTime || !MO.WaterLevel)
	{
		Actor(MO).bWaterJump = false;
		Actor(MO).ReactionTime = 0.0;
	}
	MO.Velocity.x = MoveDir.x;
	MO.Velocity.y = MoveDir.y;
}

//==========================================================================
//
//  PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector.
//
//==========================================================================

void PlayerInSpecialSector(float deltaTime)
{
	float speed;
	float finean;

	if (MO.Origin.z != GetPlanePointZ(&MO.Sector->floor, MO.Origin))
	{
		// Player is not touching the floor
		return;
	}

	if (MO.Sector->special & SECSPEC_SECRET_MASK)
	{
		//	Secret area.
		SecretCount++;
		Level.CurrentSecret++;
		MO.Sector->special &= ~SECSPEC_SECRET_MASK;
		centreprint("You found a secret area");
	}

	if (MO.Sector->special >= SECSPEC_LightFlicker &&
		MO.Sector->special <= 255)
	{
		switch (MO.Sector->special)
		{
		case SECSPEC_DamageHellslime:
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 10);
			}
			break;
		case SECSPEC_DamageSludge:
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 4);
			}
			break;
		case SECSPEC_DamageNukage:
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 5);
			}
			break;
		case SECSPEC_LightStrobeFastDamage:
		case SECSPEC_DamageSuperHellslime:
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 20);
			}
			break;
		case SECSPEC_DamageSuperHellslimeExit:
			// EXIT SUPER DAMAGE! (for E1M8 finale)
			Cheats &= ~CF_GODMODE;
	
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 20);
			}
	
			if (Health <= 10)
			{
				Level.ExitLevel(0);
			}
			break;
		case SECSPEC_DamageLavaWimpy:
			if (Level.XLevel.Time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 5, 'Fire');
				Actor(MO).HitFloorType();
			}
			break;
		case SECSPEC_DamageLavaHefty:
			if (Level.XLevel.Time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 8, 'Fire');
				Actor(MO).HitFloorType();
			}
			break;
		case SECSPEC_ScrollEastLavaDamage:
			ThrustPlayer(0.0, 1024.0, deltaTime);
			if (Level.XLevel.Time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 5, 'Fire');
				Actor(MO).HitFloorType();
			}
			break;
		case SECSPEC_DamageHazard:
			HazardTime += 2.0 * deltaTime;
			break;
		case SECSPEC_DamageInstantDeath:
			Actor(MO).Damage(none, none, 999);
			break;
		case SECSPEC_DamageSuperHazard:
			HazardTime += 4.0 * deltaTime;
			break;
		}
	}
	else
	{
		//	Extended sector damage type.
		switch (MO.Sector->special & SECSPEC_DAMAGE_MASK)
		{
		case 0x0100:
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 5);
			}
			break;
		case 0x0200:
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 10);
			}
			break;
		case 0x0300:
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 20);
			}
			break;
		}
	}

	//	Apply any customizable damage
	if (MO.Sector->Damage)
	{
		if (MO.Sector->Damage < 20)
		{
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, MO.Sector->Damage);
			}
		}
		else if (MO.Sector->Damage < 50)
		{
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, MO.Sector->Damage);
			}
		}
		else if (Level.XLevel.Time - LastSectorDamageTime >= 1.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, MO.Sector->Damage);
		}
	}

	switch (MO.Sector->special & SECSPEC_BASE_MASK)
	{
	case SECSPEC_ScrollCurrent:
		speed = itof((MO.Sector->tag - 100) % 10) / 16.0 * 35.0;
		finean = itof((MO.Sector->tag - 100) / 10) * 45.0;
		MO.Velocity.x += speed * cos(finean);
		MO.Velocity.y += speed * sin(finean);
		break;
	case SECSPEC_ScrollNorthSlow:
	case SECSPEC_ScrollNorthMedium:
	case SECSPEC_ScrollNorthFast:
		ThrustPlayer(90.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthSlow], deltaTime);
		break;
	case SECSPEC_ScrollEastSlow:
	case SECSPEC_ScrollEastMedium:
	case SECSPEC_ScrollEastFast:
		ThrustPlayer(0.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthSlow:
	case SECSPEC_ScrollSouthMedium:
	case SECSPEC_ScrollSouthFast:
		ThrustPlayer(270.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthSlow], deltaTime);
		break;
	case SECSPEC_ScrollWestSlow:
	case SECSPEC_ScrollWestMedium:
	case SECSPEC_ScrollWestFast:
		ThrustPlayer(180.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthWestSlow:
	case SECSPEC_ScrollNorthWestMedium:
	case SECSPEC_ScrollNorthWestFast:
		ThrustPlayer(135.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthEastSlow:
	case SECSPEC_ScrollNorthEastMedium:
	case SECSPEC_ScrollNorthEastFast:
		ThrustPlayer(45.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthEastSlow:
	case SECSPEC_ScrollSouthEastMedium:
	case SECSPEC_ScrollSouthEastFast:
		ThrustPlayer(315.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthWestSlow:
	case SECSPEC_ScrollSouthWestMedium:
	case SECSPEC_ScrollSouthWestFast:
		ThrustPlayer(225.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollEast5:
	case SECSPEC_ScrollEast10:
	case SECSPEC_ScrollEast25:
	case SECSPEC_ScrollEast30:
	case SECSPEC_ScrollEast35:
		ThrustPlayer(0.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEast5], deltaTime);
		break;
	case SECSPEC_ScrollNorth5:
	case SECSPEC_ScrollNorth10:
	case SECSPEC_ScrollNorth25:
	case SECSPEC_ScrollNorth30:
	case SECSPEC_ScrollNorth35:
		ThrustPlayer(90.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorth5], deltaTime);
		break;
	case SECSPEC_ScrollSouth5:
	case SECSPEC_ScrollSouth10:
	case SECSPEC_ScrollSouth25:
	case SECSPEC_ScrollSouth30:
	case SECSPEC_ScrollSouth35:
		ThrustPlayer(270.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouth5], deltaTime);
		break;
	case SECSPEC_ScrollWest5:
	case SECSPEC_ScrollWest10:
	case SECSPEC_ScrollWest25:
	case SECSPEC_ScrollWest30:
	case SECSPEC_ScrollWest35:
		ThrustPlayer(180.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWest5], deltaTime);
		break;
	}
}

//==========================================================================
//
//  PlayerInContents
//
//==========================================================================

void PlayerInContents(float deltaTime)
{
	if (!MO.WaterLevel)
	{
		return;
	}
	switch (MO.WaterType)
	{
	case CONTENTS_LAVA:
		if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 10, 'Fire');
		}
		break;

	case CONTENTS_NUKAGE:
		if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
		break;

	case CONTENTS_SLIME:
		if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 10);
		}
		break;

	case CONTENTS_HELLSLIME:
		if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 20);
		}
		break;

	case CONTENTS_SLUDGE:
		if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 4);
		}
		break;

	case CONTENTS_HAZARD:
		HazardTime += 2.0 * deltaTime;
		break;
	}
}

//==========================================================================
//
//  PrevWeapon
//
//==========================================================================

void PrevWeapon()
{
	if (ChickenTime)
	{
		return;
	}
	WeaponEx Best = WeaponEx(GetPrevWeapon(ReadyWeapon, true));
	if (Best && Best != ReadyWeapon)
	{
		PendingWeapon = Best;
	}
}

//==========================================================================
//
//  NextWeapon
//
//==========================================================================

void NextWeapon()
{
	if (ChickenTime)
	{
		return;
	}
	WeaponEx Best = WeaponEx(GetNextWeapon(ReadyWeapon, true));
	if (Best && Best != ReadyWeapon)
	{
		PendingWeapon = Best;
	}
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;

	impulse = Impulse;
	Impulse = 0;
	Arti = 0;

	if (impulse <= 7)
	{
		// The actual changing of the weapon is done when the weapon
		// psprite can do it (A_WeaponReady), so it doesn't happen in
		// the middle of an attack.
		WeaponEx NewWpn = WeaponEx(GetSlotChangeWeapon(impulse, ReadyWeapon, false));
		if (NewWpn && NewWpn != ReadyWeapon && !ChickenTime)
		{
			PendingWeapon = NewWpn;
		}
	}
	else if (impulse == 13)
	{
		InventoryLeft();
	}
	else if (impulse == 14)
	{
		InventoryRight();
	}
	else if (impulse == 15)
	{
		InventoryUse();
	}
	// Heretic artifact hot keys
	else if (impulse == 11)
	{
		if (!Powers[pw_weaponlevel2])
		{
			Arti = HereticDefs::arti_tomeofpower;
		}
	}
	else if (impulse == 16)
	{
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == 17)
	{
		PrevWeapon();
	}
	else if (impulse == 18)
	{
		NextWeapon();
	}

	if (Arti)
	{
		// Use an artifact
		PlayerUseArtifact(Arti);
	}
}

//==========================================================================
//
//  ChickenPlayerThink
//
//==========================================================================

void ChickenPlayerThink()
{
	if (Health > 0)
	{
		// Handle beak movement
		UpdateBeak();
	}
	if (ftoi(32.0 * ChickenTime) & 15)
	{
		return;
	}
	if (!(MO.Velocity.x + MO.Velocity.y) && P_Random() < 160)
	{
		// Twitch view angle
		MO.Angles.yaw = AngleMod360(MO.Angles.yaw +
			(Random() - Random()) * 45.0 / 4.0);
		bFixAngle = true;
	}
	if ((MO.Origin.z <= MO.FloorZ) && (P_Random() < 32))
	{
		// Jump and noise
		MO.Velocity.z += 1.0 * 35.0;
		MO.SetState(Actor(MO).PainState);
		return;
	}
	if (P_Random() < 48)
	{
		// Just noise
		MO.PlaySound('chicken/attack', CHAN_VOICE);
	}
}

//==========================================================================
//
//  UndoPlayerChicken
//
//==========================================================================

bool UndoPlayerChicken()
{
	Actor fog;
	Actor A;

	MO.UnlinkFromWorld();
	A = HereticLevelInfo(Level).Spawn(HereticPlayer, MO.Origin);
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Destroy();
		MO.LinkToWorld();
		ChickenTime = 2.0;
		return false;
	}
	MO.LinkToWorld();
	// Set colour translation
	A.Translation = Colour;
	A.Angles.yaw = MO.Angles.yaw;
	A.Player = self;
	A.bIsPlayer = true;
	A.ReactionTime = 0.5;
	if (MO.bFly)
	{
		A.bFly = true;
		A.bNoGravity = true;
	}
	ChickenTime = 0.0;
	Powers[pw_weaponlevel2] = 0.0;
	A.Health = MAXHEALTH;
	Health = A.Health;
	PostChickenWeapon(WeaponEx(Actor(MO).Tracer));

	fog = HereticLevelInfo(Level).Spawn(TeleportFog, MO.Origin + vector(
		20.0 * cos(MO.Angles.yaw), 20.0 * sin(MO.Angles.yaw), Actor::TELEFOGHEIGHT));
	fog.PlaySound('misc/teleport', CHAN_VOICE);

	MO.SetState(Actor::S_FREETARGMOBJ);
	MO = A;

	return true;
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	float angle;
	float delta;
	int lookDelta;

	MovePsprites(deltaTime);

	onground = (MO.Origin.z <= MO.FloorZ);

	if (MO.Class == BloodySkull)
	{
		// Flying bloody skull
		ViewHeight = 6.0;
		DeltaViewHeight = 0.0;
		//player->damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (lookdir < 60)
			{
				lookDelta = (60 - lookdir) / 8;
				if (lookDelta < 1 && (level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				lookdir += lookDelta;
			}
#endif
		}
	}
	else
	{	// Fall to ground
		DeltaViewHeight = 0.0;
		if (ViewHeight > 6.0)
			ViewHeight -= 1.0;
		if (ViewHeight < 6.0)
			ViewHeight = 6.0;
#ifdef FIXME
		if (lookdir > 0)
		{
			lookdir -= 6;
		}
		else if (lookdir < 0)
		{
			lookdir += 6;
		}
		if (abs(lookdir) < 6)
		{
			lookdir = 0;
		}
#endif
	}
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		angle = atan2(Attacker.Origin.y - MO.Origin.y,
			Attacker.Origin.x - MO.Origin.x);
		delta = AngleMod180(angle - MO.Angles.yaw);
		if (delta < 5.0 && delta > -5.0)
		{
			// Looking at killer, so fade damage flash down
			MO.Angles.yaw = angle;
			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
		}
		else if (delta > 0.0)
			MO.Angles.yaw += 5.0;
		else
			MO.Angles.yaw -= 5.0;
	}
	else if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (Buttons & BT_USE)
	{
		NewTorch = 0;
		NewTorchDelta = 0;
		InvCurPos = 0;
		InvPtr = 0;
		PlayerState = PST_REBORN;
		// Let the mobj know the player has entered the reborn state.  Some
		// mobjs need to know when it's ok to remove themselves.
		PlayerPawn(MO).bSafeToRemove = true;
	}
}

//==========================================================================
//
//  SetPlayerRunState
//
//==========================================================================

void SetPlayerRunState()
{
	if (MO.State == Actor(MO).IdleState)
	{
		MO.SetState(Actor(MO).SeeState);
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	int i;

	if (bIsBot)
	{
		Bot.BotTick(deltaTime);
	}

	// Copy view angles
	MO.Angles = ViewAngles;

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (Actor(MO).bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		Actor(MO).bJustAttacked = false;
	}

	InventoryTick(deltaTime);

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime <= 0.0)
			JumpTime = 0.0;
	}
	if (ChickenTime)
	{
		ChickenPlayerThink();
	}

	// Move around.
	// ReactionTime is used to prevent movement
	//  for a bit after a teleport.
	if (Actor(MO).ReactionTime)
	{
		Actor(MO).ReactionTime -= deltaTime;
		if (Actor(MO).ReactionTime <= 0.0)
			Actor(MO).ReactionTime = 0.0;
		if (Actor(MO).bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.WaterLevel > 1)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special)
		PlayerInSpecialSector(deltaTime);
	PlayerInContents(deltaTime);

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			P_UseLines();
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	// Chicken counter
	if (ChickenTime)
	{
		if (ChickenPeck)
		{
			// Chicken attack counter
			ChickenPeck -= 3;
		}
		ChickenTime -= deltaTime;
		if (ChickenTime <= 0.0)
		{
			// Attempt to undo the chicken
			ChickenTime = 0.0;
			UndoPlayerChicken();
		}
	}

	// cycle psprites
	MovePsprites(deltaTime);

	// Counters, time dependend power ups.

	if (Powers[pw_invulnerability])
	{
		Powers[pw_invulnerability] -= deltaTime;
		if (Powers[pw_invulnerability] <= 0.0)
			Powers[pw_invulnerability] = 0.0;
	}

	if (Powers[pw_invisibility])
	{
		Powers[pw_invisibility] -= deltaTime;
		if (Powers[pw_invisibility] <= 0.0)
		{
			Powers[pw_invisibility] = 0.0;
			MO.Alpha = 1.0;
		}
	}

	if (Powers[pw_infrared])
	{
		Powers[pw_infrared] -= deltaTime;
		if (Powers[pw_infrared] <= 0.0)
			Powers[pw_infrared] = 0.0;
	}

	if (Powers[pw_flight])
	{
		Powers[pw_flight] -= deltaTime;
		if (Powers[pw_flight] <= 0.0)
		{
			Powers[pw_flight] = 0.0;
			if (MO.Origin.z != MO.FloorZ)
			{
//FIXME             player->centreing = true;
			}

			MO.bFly = false;
			MO.bNoGravity = false;
		}
	}

	if (Powers[pw_weaponlevel2])
	{
		Powers[pw_weaponlevel2] -= deltaTime;
		if (Powers[pw_weaponlevel2] <= 0.0)
		{
			Powers[pw_weaponlevel2] = 0.0;
			WeaponLevel2Fade();
		}
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (Level.XLevel.Time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
	}

	// Handling colourmaps.
	if (Powers[pw_invulnerability])
	{
		if (Powers[pw_invulnerability] > 4.0 ||
			(ftoi(4.0 * Powers[pw_invulnerability]) & 1))
			FixedColourmap = INVERSECOLOURMAP;
		else
			FixedColourmap = 0;
	}
	else if (Powers[pw_infrared])
	{
		if (Powers[pw_infrared] <= BLINKTHRESHOLD)
		{
			if (ftoi(4.0 * Powers[pw_infrared]) & 1)
			{
				FixedColourmap = 0;
			}
			else
			{
				FixedColourmap = 1;
			}
		}
		else if (!(ftoi(2.0 * Level.XLevel.Time) & 1))
		{
			if (NewTorch)
			{
				if (FixedColourmap + NewTorchDelta > 7 ||
					FixedColourmap + NewTorchDelta < 1 ||
					FixedColourmap == NewTorch)
				{
					NewTorch = 0;
				}
				else
				{
					FixedColourmap += NewTorchDelta;
				}
			}
			else
			{
				NewTorch = (P_Random() & 7) + 1;
				NewTorchDelta =
					(NewTorch == FixedColourmap) ? 0 :
					((NewTorch > FixedColourmap) ? 1 : -1);
			}
		}
	}
	else
		FixedColourmap = 0;
}

//==========================================================================
//
//  PaletteFlash
//
//  sets the new palette based upon current values of player->DamageFlash
// and player->BonusFlash
//
//==========================================================================

void PaletteFlash()
{
	CShifts[CSHIFT_Contents] = 0;
	if (MO.WaterLevel == 3)
	{
		switch (MO.WaterType)
		{
		case CONTENTS_WATER:
			CShifts[CSHIFT_Contents] = RGBA(130, 80, 50, 128);
			break;

		case CONTENTS_LAVA:
			CShifts[CSHIFT_Contents] = RGBA(255, 80, 0, 150);
			break;

		case CONTENTS_NUKAGE:
			CShifts[CSHIFT_Contents] = RGBA(50, 255, 50, 150);
			break;

		case CONTENTS_SLIME:
			CShifts[CSHIFT_Contents] = RGBA(0, 25, 5, 150);
			break;

		case CONTENTS_HELLSLIME:
			CShifts[CSHIFT_Contents] = RGBA(255, 80, 0, 150);
			break;

		case CONTENTS_BLOOD:
			CShifts[CSHIFT_Contents] = RGBA(160, 16, 16, 150);
			break;

		case CONTENTS_SLUDGE:
			CShifts[CSHIFT_Contents] = RGBA(128, 160, 128, 150);
			break;

		case CONTENTS_HAZARD:
			CShifts[CSHIFT_Contents] = RGBA(128, 160, 128, 128);
			break;
		}
	}

	CShifts[CSHIFT_Damage] = 0;
	if (DamageFlash)
	{
		int Amount = ftoi(114.0 * DamageFlash);
		if (Amount >= 228)
			Amount = 228;
		CShifts[CSHIFT_Damage] = RGBA(255, 0, 0, Amount);
	}

	CShifts[CSHIFT_Bonus] = 0;
	if (BonusFlash)
	{
		int Amount = ftoi(256.0 * BonusFlash);
		if (Amount >= 128)
			Amount = 128;
		CShifts[CSHIFT_Bonus] = RGBA(215, 186, 68, Amount);
	}
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	ViewOrg.x = MO.Origin.x;
	ViewOrg.y = MO.Origin.y;

	if (LocalQuakeHappening)
	{
		float intensity;

		intensity = itof(LocalQuakeHappening);
		ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
		ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
	}

	ViewAngles = MO.Angles;

	if (ChickenTime && ChickenPeck)
	{
		// Set chicken attack view position
		ViewOrg.x += itof(ChickenPeck) * cos(MO.Angles.yaw);
		ViewOrg.y += itof(ChickenPeck) * sin(MO.Angles.yaw);
	}

	PaletteFlash();

	SBFlags = Keys;
	if (Cheats & CF_GODMODE)
		SBFlags |= HereticDefs::SBF_GOD_MODE;
	if (Powers[pw_flight])
	{
		if (Powers[pw_flight] > BLINKTHRESHOLD ||
			!(ftoi(2.0 * Powers[pw_flight]) & 1))
		{
			SBFlags |= HereticDefs::SBF_POWER_FLIGHT;
		}
	}
	if (Powers[pw_weaponlevel2] && !ChickenTime)
	{
		if (Powers[pw_weaponlevel2] > BLINKTHRESHOLD ||
			!(ftoi(2.0 * Powers[pw_weaponlevel2]) & 1))
		{
			SBFlags |= HereticDefs::SBF_POWER_BOOK;
		}
	}
	if (MO.bFly)
	{
		SBFlags |= HereticDefs::SBF_IN_FLIGHT;
	}
	if (InventoryTime)
	{
		SBFlags |= HereticDefs::SBF_INVENTORY_OPEN;
	}

	ClientSetViewOrg(ViewOrg.x, ViewOrg.y, ViewOrg.z);
}

//==========================================================================
//
//  PlayerUseArtifact
//
//==========================================================================

void PlayerUseArtifact(int arti)
{
	int i;

	for (i = 0; i < InventorySlotNum; i++)
	{
		if (Inventory[i].type == arti)
		{
			// Found match - try to use
			if (UseArtifact(arti))
			{
				// Artifact was used - remove it from inventory
				PlayerRemoveArtifact(i);
				MO.PlaySound('misc/invuse', CHAN_ITEM);
				ArtifactFlash = 4;
			}
			else
			{
				// Unable to use artifact, advance pointer
				PlayerNextArtifact();
			}
			break;
		}
	}
}

//==========================================================================
//
//  PlayerNextArtifact
//
//==========================================================================

void PlayerNextArtifact()
{
	InvPtr--;
	if (InvPtr < 6)
	{
		InvCurPos--;
		if (InvCurPos < 0)
		{
			InvCurPos = 0;
		}
	}
	if (InvPtr < 0)
	{
		InvPtr = InventorySlotNum - 1;
		if (InvPtr < 6)
		{
			InvCurPos = InvPtr;
		}
		else
		{
			InvCurPos = 6;
		}
	}
	ReadyArtifact = Inventory[InvPtr].type;
}

//==========================================================================
//
//  PlayerRemoveArtifact
//
//==========================================================================

void PlayerRemoveArtifact(int slot)
{
	int i;

	ArtifactCount--;
	if (!(--Inventory[slot].count))
	{
		// Used last of a type - compact the artifact list
		ReadyArtifact = HereticDefs::arti_none;
		Inventory[slot].type = HereticDefs::arti_none;
		for (i = slot + 1; i < InventorySlotNum; i++)
		{
			Inventory[i - 1].type = Inventory[i].type;
			Inventory[i - 1].count = Inventory[i].count;
		}
		InventorySlotNum--;
		// Set position markers and get next ReadyArtifact
		InvPtr--;
		if (InvPtr < 6)
		{
			InvCurPos--;
			if (InvCurPos < 0)
			{
				InvCurPos = 0;
			}
		}
		if (InvPtr >= InventorySlotNum)
		{
			InvPtr = InventorySlotNum - 1;
		}
		if (InvPtr < 0)
		{
			InvPtr = 0;
		}
		ReadyArtifact = Inventory[InvPtr].type;
	}
}

//==========================================================================
//
//  UseArtifact
//
//  Returns true if the artifact was used.
//
//==========================================================================

bool UseArtifact(int arti)
{
	switch (arti)
	{
	case HereticDefs::arti_health:
		if (!GiveBody(25))
		{
			return false;
		}
		break;
	case HereticDefs::arti_superhealth:
		if (!GiveBody(100))
		{
			return false;
		}
		break;
	case HereticDefs::arti_invulnerability:
		if (!GivePower(pw_invulnerability))
		{
			return false;
		}
		break;
	case HereticDefs::arti_torch:
		if (!GivePower(pw_infrared))
		{
			return false;
		}
		break;
	case HereticDefs::arti_fly:
		if (!GivePower(pw_flight))
		{
			return false;
		}
		if (MO.Velocity.z <= -35.0 * 35.0)
		{
			// stop falling scream
			MO.StopSound(CHAN_VOICE);
		}
		break;
	case HereticDefs::arti_teleport:
		UseArtiTele();
		break;
	case HereticDefs::arti_egg:
		UseArtiEgg();
		break;
	case HereticDefs::arti_invisibility:
		if (!GivePower(pw_invisibility))
		{
			return false;
		}
		break;
	case HereticDefs::arti_tomeofpower:
		if (!UseArtiTomeOfPower())
		{
			return false;
		}
		break;
	case HereticDefs::arti_firebomb:
		UseArtiFireBomb();
		break;
	default:
		return false;
	}
	return true;
}

//==========================================================================
//
//  UseArtiTele
//
//==========================================================================

void UseArtiTele()
{
	int i;
	int selections;
	float destX;
	float destY;
	float destAngle;

	if (Level.Game.deathmatch)
	{
		selections = Level.NumDeathmatchStarts;
		i = P_Random() % selections;
		destX = Level.DeathmatchStarts[i].x;
		destY = Level.DeathmatchStarts[i].y;
		destAngle = itof(45 * (Level.DeathmatchStarts[i].angle / 45));
	}
	else
	{
		destX = Level.PlayerStarts[0].x;
		destY = Level.PlayerStarts[0].y;
		destAngle = itof(45 * (Level.PlayerStarts[0].angle / 45));
	}
	Actor(MO).Teleport(vector(destX, destY, Actor::ONFLOORZ), destAngle, true, true,
		false);
	if (ChickenTime)
	{
		// Teleporting away will undo any morph effects
		UndoPlayerChicken();
	}
}

//==========================================================================
//
//  UseArtiEgg
//
//==========================================================================

void UseArtiEgg()
{
	PlayerPawn(MO).SpawnPlayerMissile(EggFX);
	PlayerPawn(MO).SpawnPlayerMissileAngle(EggFX,
		AngleMod360(MO.Angles.yaw - 7.5));
	PlayerPawn(MO).SpawnPlayerMissileAngle(EggFX,
		AngleMod360(MO.Angles.yaw + 7.5));
	PlayerPawn(MO).SpawnPlayerMissileAngle(EggFX,
		AngleMod360(MO.Angles.yaw - 15.0));
	PlayerPawn(MO).SpawnPlayerMissileAngle(EggFX,
		AngleMod360(MO.Angles.yaw + 15.0));
}

//==========================================================================
//
//  UseArtiTomeOfPower
//
//==========================================================================

bool UseArtiTomeOfPower()
{
	if (ChickenTime)
	{
		// Attempt to undo chicken
		if (UndoPlayerChicken() == false)
		{
			// Failed
			Actor(MO).Damage(none, none, 10000);
		}
		else
		{
			// Succeeded
			ChickenTime = 0.0;
			MO.PlaySound('*evillaugh', CHAN_ITEM);
		}
	}
	else
	{
		if (!GivePower(pw_weaponlevel2))
		{
			return false;
		}
		WeaponEx Wpn = ReadyWeapon;
		WeaponEx Sist = WeaponEx(ReadyWeapon.SisterWeapon);
		if (Sist && Sist.bPoweredUp)
		{
			SetWeapon(Sist);
			if (Sist.ReadyState != Wpn.ReadyState)
			{
				SetViewState(ps_weapon, Sist.ReadyState);
			}
		}
	}
	return true;
}

//==========================================================================
//
//  UseArtiFireBomb
//
//==========================================================================

void UseArtiFireBomb()
{
	float angle = MO.Angles.yaw;
	Actor A = HereticLevelInfo(Level).Spawn(ActivatedTimeBomb,
		MO.Origin + vector(24.0 * cos(angle), 24.0 * sin(angle),
		-MO.FloorClip));

	A.Target = Actor(MO);
}

//****************************************************************************
//
//  WEAPON UTILITES
//
//****************************************************************************

//==========================================================================
//
//	SetWeapon
//
//==========================================================================

void SetWeapon(WeaponEx NewWeapon)
{
	ReadyWeapon = NewWeapon;
	PendingWeapon = none;

	ViewEnt = ReadyWeapon;
	PSpriteSY = WeaponEx(ViewEnt).PSpriteSY;
}

//===========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
//
//===========================================================================

void BringUpWeapon()
{
	SetWeapon(ReadyWeapon);
	if (ReadyWeapon.UpSound)
	{
		MO.PlaySound(ReadyWeapon.UpSound, CHAN_WEAPON);
	}
	ViewStates[ps_weapon].SY = WeaponEx::WEAPONBOTTOM;
	SetViewState(ps_weapon, WeaponEx(ViewEnt).UpState);
}

//===========================================================================
//
//  DropWeapon
//
//  The player died, so put the weapon away.
//
//===========================================================================

void DropWeapon()
{
	SetViewState(ps_weapon, WeaponEx(ViewEnt).DownState);
}

//===========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player
//
//===========================================================================

void SetupPsprites()
{
	int i;

	// Remove all ViewSprites
	for (i = 0; i < NUMPSPRITES; i++)
	{
		SetViewState(i, none);
	}
	// Spawn the ready weapon
	BringUpWeapon();
}

//===========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine
//
//===========================================================================

void MovePsprites(float deltaTime)
{
	AdvanceViewStates(deltaTime);
	ViewStates[ps_flash].SX = ViewStates[ps_weapon].SX;
	ViewStates[ps_flash].SY = ViewStates[ps_weapon].SY;
}

//===========================================================================
//
//  FireWeapon
//
//===========================================================================

void FireWeapon()
{
	state attackState;

	if (!ReadyWeapon.CheckAmmo(true))
	{
		return;
	}
	MO.SetState(PlayerPawn(MO).Attack2State);
	attackState = Refire ?
		WeaponEx(ViewEnt).HoldAttackState :
		WeaponEx(ViewEnt).AttackState;
	SetViewState(ps_weapon, attackState);
	HereticLevelInfo(Level).NoiseAlert(Actor(MO), Actor(MO));
}

//===========================================================================
//
//  ActivateBeak
//
//===========================================================================

void ActivateBeak()
{
	WeaponEx Wpn = Level.Spawn(Beak);
	if (!Wpn.TryPickup(EntityEx(MO)))
	{
		Wpn.Destroy();
	}
	SetWeapon(WeaponEx(EntityEx(MO).FindInventory(Beak)));
	ViewStates[ps_weapon].SY = WeaponEx::WEAPONTOP;
	SetViewState(ps_weapon, WeaponEx(ViewEnt).ReadyState);
}

//===========================================================================
//
//  PostChickenWeapon
//
//===========================================================================

void PostChickenWeapon(WeaponEx weapon)
{
	ReadyWeapon.Destroy();
	SetWeapon(weapon);
	ViewStates[ps_weapon].SY = WeaponEx::WEAPONBOTTOM;
	SetViewState(ps_weapon, WeaponEx(ViewEnt).UpState);
}

//===========================================================================
//
//  UpdateBeak
//
//===========================================================================

void UpdateBeak()
{
	ViewStates[ps_weapon].SY = WeaponEx::WEAPONTOP + itof(ChickenPeck) / 2.0;
}

//===========================================================================
//
//  WeaponLevel2Fade
//
//===========================================================================

void WeaponLevel2Fade()
{
	if (!ReadyWeapon.bPoweredUp)
	{
		return;
	}
	WeaponEx Wpn = ReadyWeapon;
	WeaponEx Sist = WeaponEx(ReadyWeapon.SisterWeapon);
	if (Sist)
	{
		SetWeapon(Sist);
		if (Sist.ReadyState != Wpn.ReadyState)
		{
			SetViewState(ps_weapon, Sist.ReadyState);
		}
	}
}

//==========================================================================
//
//  P_UseLines
//
//  Looks for special lines in front of the player to activate.
//
//==========================================================================

void P_UseLines()
{
	float x1;
	float y1;
	float x2;
	float y2;
	TVec useDir;
	intercept_t* in;

	AngleVector(&MO.Angles, &useDir);
	x1 = MO.Origin.x;
	y1 = MO.Origin.y;
	x2 = x1 + USERANGE * useDir.x;
	y2 = y1 + USERANGE * useDir.y;
	foreach MO.PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES)
	{
		if (!in->line->special || (Level.GET_SPAC(in->line->flags) != SPAC_USE &&
			Level.GET_SPAC(in->line->flags) != SPAC_USETHROUGH))
		{
			TVec hit_point;
			opening_t *open;

			hit_point = MO.Origin + (USERANGE * in->frac) * useDir;
			open = LineOpenings(in->line, hit_point);
			open = FindOpening(open, hit_point.z, hit_point.z + MO.Height);
			if (!open)
			{
				break;	// can't use through a wall
			}
			continue;	// not a special line, but keep checking
		}

		if (PointOnPlaneSide(MO.Origin, in->line) == 1)
		{
			//	Don't use back side unless it's a two-sided line.
			if (in->line->backsector != NULL)
				continue;
			break;
		}

		HereticLevelInfo(Level).ActivateLine(in->line, Actor(MO), 0, SPAC_USE);

		//WAS can't use more than one special line in a row
		//jff 3/21/98 NOW multiple use allowed with enabling line flag
		if (Level.GET_SPAC(in->line->flags) != SPAC_USETHROUGH)
		{
			break;
		}
	}
}

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= CF_GODMODE;
	if (Cheats & CF_GODMODE)
	{
		cprint("GOD MODE ON");
	}
	else
	{
		cprint("GOD MODE OFF");
	}
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= CF_NOCLIP;
	if (Cheats & CF_NOCLIP)
	{
		cprint("NO CLIPPING ON");
	}
	else
	{
		cprint("NO CLIPPING OFF");
	}
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	class<Inventory>	Cls;
	class<WeaponEx>		WpnCls;

	if (Cmd_CheckParm("weapons"))
	{
		int i;

		ArmorPoints = 200;
		ArmorType = 2;
		BagOfHolding Bag = Level.Spawn(BagOfHolding);
		Bag.bDropped = true;
		if (!Bag.TryPickup(EntityEx(MO)))
		{
			Bag.Destroy();
		}
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
			if (!AmmoItem)
			{
				AmmoItem = Level.Spawn(Cls);
				if (!AmmoItem.TryPickup(EntityEx(MO)))
				{
					AmmoItem.Destroy();
					AmmoItem = none;
				}
			}
			if (AmmoItem)
			{
				AmmoItem.Amount = AmmoItem.MaxAmount;
			}
		}
		foreach AllClasses(Weapon, WpnCls)
		{
			if (!WpnCls.default.ReadyState)
			{
				//	Abstract base class.
			}
			if (MainGameInfo(Level.Game).shareware &&
				!WpnCls.default.bInShareware)
			{
				continue;
			}
			WeaponEx Wpn = Level.Spawn(WpnCls);
			Wpn.AmmoGive1 = 0;
			Wpn.AmmoGive2 = 0;
			if (!Wpn.TryPickup(EntityEx(MO)))
			{
				Wpn.Destroy();
			}
		}
		cprint("ALL WEAPONS");
	}
	if (Cmd_CheckParm("power"))
	{
		if (Powers[pw_weaponlevel2])
		{
			Powers[pw_weaponlevel2] = 0.0;
			cprint("POWER OFF");
		}
		else
		{
			UseArtifact(HereticDefs::arti_tomeofpower);
			cprint("POWER ON");
		}
	}
	if (Cmd_CheckParm("health"))
	{
		if (ChickenTime)
		{
			MO.Health = MAXCHICKENHEALTH;
			Health = MO.Health;
		}
		else
		{
			MO.Health = MAXHEALTH;
			Health = MO.Health;
		}
		cprint("FULL HEALTH");
	}
	if (Cmd_CheckParm("keys"))
	{
		Keys = 7;
		cprint("ALL KEYS");
	}
	if (Cmd_CheckParm("artifacts"))
	{
		int i;
		int j;

		// All artifacts
		for (i = HereticDefs::arti_none + 1; i < HereticDefs::NUMARTIFACTS; i++)
		{
			if (MainGameInfo(Level.Game).shareware && (i == HereticDefs::arti_superhealth || i == HereticDefs::arti_teleport))
			{
				continue;
			}
			for (j = 0; j < 16; j++)
			{
				GiveArtifact(i);
			}
		}
		cprint("YOU GOT IT");
	}
/*	int i;
	int j;
	int type;
	int count;

	type = cheat->args[0] - 'a' + 1;
	count = cheat->args[1] - '0';
	if (type == 26 && count == 0)
	{ // All artifacts
		for (i = arti_none+1; i < NUMARTIFACTS; i++)
		{
			if (shareware && (i == arti_superhealth || i == arti_teleport))
			{
				continue;
			}
			for (j = 0; j < 16; j++)
			{
				P_GiveArtifact(player, i, NULL);
			}
		}
		P_SetMessage(player, "YOU GOT IT", false);
	}
	else if (type > arti_none && type < NUMARTIFACTS
		&& count > 0 && count < 10)
	{
		if (shareware && (type == arti_superhealth || type == arti_teleport))
		{
			P_SetMessage(player, "BAD INPUT", false);
			return;
		}
		for (i = 0; i < count; i++)
		{
			P_GiveArtifact(player, type, NULL);
		}
		P_SetMessage(player, "YOU GOT IT", false);
	}
	else
	{ // Bad input
		P_SetMessage(player, "BAD INPUT", false);
	}*/
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	HereticLevelInfo(Level).P_Massacre();
	cprint("MASSACRE");
}

//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
	if (ChickenTime)
	{
		if (UndoPlayerChicken())
		{
			cprint("CHICKEN OFF");
		}
	}
	else if (Actor(MO).ChickenMorphPlayer())
	{
		cprint("CHICKEN ON");
	}
}

//==========================================================================
//
//  Cheat_NoWeapons
//
//==========================================================================

void Cheat_NoWeapons()
{
	if (ChickenTime)
	{
		return;
	}
	//	Find weakest weapon.
	Inventory Item;
	WeaponEx Weakest = none;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		if (Weapon(Item) && (!Weakest ||
			Weakest.SelectionOrder < Weapon(Item).SelectionOrder))
		{
			Weakest = WeaponEx(Item);
		}
	}
	//	Removed all others.
	for (Item = EntityEx(MO).Inventory; Item; )
	{
		Inventory Next = Item.Inventory;
		if (Weapon(Item) && Item != Weakest)
		{
			Item.Destroy();
		}
		Item = Next;
	}
	SetWeapon(Weakest);
	PendingWeapon = Weakest;
	cprint("CHEATER - YOU DON'T DESERVE WEAPONS");
}

//==========================================================================
//
//  ClientBlood
//
//==========================================================================

void ClientBlood(TVec org, int damage)
{
	int i, j;
	particle_t *p;
	int c;

	for (i = 0; i < damage; i++)
	{
		p = Level.NewParticle();
		if (!p)
			return;

		p->org = org;
		c = P_Random() >> 1;
		p->colour = RGB(32 + c, c >> 4, c >> 4);
		p->die = Level.XLevel.Time + 0.5 * Random();
		p->vel.x = 32.0 * (Random() - 0.5);
		p->vel.y = 32.0 * (Random() - 0.5);
		p->vel.z = 32.0 * (Random() - 0.5);
	}
}

//==========================================================================
//
//  ClientExplosion
//
//==========================================================================

void ClientExplosion(int etype, TVec org)
{
	dlight_t *dl;

	dl = Level.AllocDlight(none);
	dl->origin = org;
	dl->radius = 350.0;
	dl->colour = HereticDefs.default.ecolours[etype];
	dl->die = Level.XLevel.Time + 0.5;
	dl->decay = 300.0;
}

//==========================================================================
//
//  GetWeaponKickBack
//
//==========================================================================

float GetWeaponKickBack()
{
	return ReadyWeapon.Kickback;
}

//==========================================================================
//
//  IsStaffLevel2
//
//==========================================================================

bool IsStaffLevel2()
{
	return ReadyWeapon.bStaff2Kickback;
}

//==========================================================================
//
//  HaveInvulnerabilityPower
//
//==========================================================================

bool HaveInvulnerabilityPower()
{
	return !!Powers[pw_invulnerability];
}

//==========================================================================
//
//  HaveTomeOfPower
//
//==========================================================================

bool HaveTomeOfPower()
{
	return !!Powers[pw_weaponlevel2];
}

//==========================================================================
//
//  ArmorAbsorbDamage
//
//==========================================================================

int ArmorAbsorbDamage(EntityEx inflictor, EntityEx source, int damage,
	name DmgType)
{
	int saved;

	if (ArmorType)
	{
		if (ArmorType == 1)
		{
			saved = damage >> 1;
		}
		else
		{
			saved = (damage >> 1) + (damage >> 2);
		}
		if (ArmorPoints <= saved)
		{
			// armor is used up
			saved = ArmorPoints;
			ArmorType = 0;
		}
		ArmorPoints -= saved;
		damage -= saved;
	}
	if (damage >= Health && ((Level.Game.gameskill == sk_baby) ||
		Level.Game.deathmatch) && !ChickenTime)
	{
		// Try to use some inventory health
		Actor(MO).AutoUseHealth(damage - Health + 1);
	}
	return damage;
}

defaultproperties
{
}
