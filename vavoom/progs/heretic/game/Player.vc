//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

const int MAXCHICKENHEALTH	= 30;

const int MAXHEALTH	= 100;

int ChickenPeck;	// chicken peck countdown
Actor Rain1;	// active rain maker 1
Actor Rain2;	// active rain maker 2

BotPlayer Bot;

//==========================================================================
//
//  CreateBot
//
//==========================================================================

void CreateBot()
{
	Bot = BotPlayer(SpawnObject(BotPlayer));
	Bot.player = self;
	Bot.OnBeginPlay();
}

//==========================================================================
//
//  DestroyBot
//
//==========================================================================

void DestroyBot()
{
	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
}

//==========================================================================
//
//  ResetPlayerOnSpawn
//
//==========================================================================

void ResetPlayerOnSpawn()
{
	::ResetPlayerOnSpawn();

	Rain1 = none;
	Rain2 = none;
}

//==========================================================================
//
//  BotOnSpawn
//
//==========================================================================

void BotOnSpawn()
{
	Bot.OnSpawn();
}

//==========================================================================
//
//  DoClearPlayer
//
//==========================================================================

void DoClearPlayer()
{
	BotPlayer b;

	b = Bot;
	::DoClearPlayer();
	Bot = b;
}

//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================

int GetRebornHealth()
{
	return MAXHEALTH;
}

//==========================================================================
//
//  PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void PlayerExitMap(bool clusterChange)
{
	::PlayerExitMap(clusterChange);
	Rain1 = none;
	Rain2 = none;
}

//==========================================================================
//
//	GotAmmo
//
//==========================================================================

void GotAmmo(Ammo NewAmmo)
{
	if (ReadyWeapon.bWimpyWeapon)
	{
		Weapon Best = BestWeapon(class<Ammo>(NewAmmo.Class));
		if (Best && Best.SelectionOrder < ReadyWeapon.SelectionOrder)
		{
			PendingWeapon = Best;
		}
	}
}

//==========================================================================
//
//	GetMaxHealth
//
//==========================================================================

int GetMaxHealth()
{
	if (MorphTime)
	{
		return MAXCHICKENHEALTH;
	}
	return MAXHEALTH;
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;

	impulse = Impulse;
	Impulse = 0;
	Inventory Arti = none;

	if (impulse <= 7)
	{
		ChangeWeapon(impulse);
	}
	else if (impulse == 13)
	{
		InventoryLeft();
	}
	else if (impulse == 14)
	{
		InventoryRight();
	}
	else if (impulse == 15)
	{
		InventoryUse();
	}
	// Heretic artifact hot keys
	else if (impulse == 11)
	{
		if (!EntityEx(MO).FindInventory(PowerWeaponLevel2))
		{
			Arti = EntityEx(MO).FindInventory(ArtiTomeOfPower);
		}
	}
	else if (impulse == 16)
	{
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == 17)
	{
		PrevWeapon();
	}
	else if (impulse == 18)
	{
		NextWeapon();
	}

	if (Arti)
	{
		// Use an artifact
		EntityEx(MO).UseInventory(Arti);
	}
}

//==========================================================================
//
//  ChickenPlayerThink
//
//==========================================================================

void ChickenPlayerThink()
{
	if (Health > 0)
	{
		// Handle beak movement
		UpdateBeak();
	}
	if (ftoi(32.0 * MorphTime) & 15)
	{
		return;
	}
	if (!(MO.Velocity.x + MO.Velocity.y) && P_Random() < 160)
	{
		// Twitch view angle
		MO.Angles.yaw = AngleMod360(MO.Angles.yaw +
			(Random() - Random()) * 45.0 / 4.0);
		bFixAngle = true;
	}
	if ((MO.Origin.z <= MO.FloorZ) && (P_Random() < 32))
	{
		// Jump and noise
		MO.Velocity.z += 1.0 * 35.0;
		MO.SetState(Actor(MO).FindState('Pain'));
		return;
	}
	if (P_Random() < 48)
	{
		// Just noise
		MO.PlaySound('chicken/attack', CHAN_VOICE);
	}
}

//==========================================================================
//
//  UndoPlayerChicken
//
//==========================================================================

bool UndoPlayerChicken()
{
	Actor fog;
	Actor A;

	MO.UnlinkFromWorld();
	if (BaseClass >= Level.Game.PlayerClasses.Num)
	{
		Error("Player::SpawnPlayer : Unknown class type");
	}
	A = Level.Spawn(class<PlayerPawn>(Level.Game.PlayerClasses[BaseClass]),
		MO.Origin,,, false);
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Destroy();
		MO.LinkToWorld();
		MorphTime = 2.0;
		return false;
	}
	MO.LinkToWorld();
	// Set colour translation
	A.Translation = (Entity::TRANSL_Player << Entity::TRANSL_TYPE_SHIFT) +
		GetPlayerNum();
	A.Angles.yaw = MO.Angles.yaw;
	A.Player = self;
	A.bIsPlayer = true;
	A.ReactionTime = 0.5;
	if (MO.bFly)
	{
		A.bFly = true;
		A.bNoGravity = true;
	}
	A.bShadow = EntityEx(MO).bShadow;
	A.bGhost = EntityEx(MO).bGhost;
	A.ObtainInventory(EntityEx(MO));
	MorphTime = 0.0;
	Inventory Pw = EntityEx(MO).FindInventory(PowerWeaponLevel2);
	if (Pw)
	{
		Pw.Destroy();
	}
	A.Health = MAXHEALTH;
	Health = A.Health;
	PostChickenWeapon(Weapon(Actor(MO).Tracer));

	fog = HereticLevelInfo(Level).Spawn(TeleportFog, MO.Origin + vector(
		20.0 * cos(MO.Angles.yaw), 20.0 * sin(MO.Angles.yaw),
		MainGameInfo::TELEFOGHEIGHT));
	fog.PlaySound('misc/teleport', CHAN_VOICE);

	MO.SetState(MO.FindState('FreeTargMobj'));
	MO = A;
	Camera = A;

	return true;
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	float angle;
	float delta;
	int lookDelta;

	MovePsprites(deltaTime);

	onground = (MO.Origin.z <= MO.FloorZ);

	if (PlayerChunk(MO))
	{
		// Flying bloody skull
		ViewHeight = 6.0;
		DeltaViewHeight = 0.0;
		//player->damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (lookdir < 60)
			{
				lookDelta = (60 - lookdir) / 8;
				if (lookDelta < 1 && (level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				lookdir += lookDelta;
			}
#endif
		}
	}
	else
	{	// Fall to ground
		DeltaViewHeight = 0.0;
		if (ViewHeight > 6.0)
			ViewHeight -= 1.0;
		if (ViewHeight < 6.0)
			ViewHeight = 6.0;
#ifdef FIXME
		if (lookdir > 0)
		{
			lookdir -= 6;
		}
		else if (lookdir < 0)
		{
			lookdir += 6;
		}
		if (abs(lookdir) < 6)
		{
			lookdir = 0;
		}
#endif
	}
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		angle = atan2(Attacker.Origin.y - MO.Origin.y,
			Attacker.Origin.x - MO.Origin.x);
		delta = AngleMod180(angle - MO.Angles.yaw);
		if (delta < 5.0 && delta > -5.0)
		{
			// Looking at killer, so fade damage flash down
			MO.Angles.yaw = angle;
			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
			if (PoisonCount)
			{
				PoisonCount--;
			}
		}
		else if (delta > 0.0)
			MO.Angles.yaw += 5.0;
		else
			MO.Angles.yaw -= 5.0;
	}
	else if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}
	else if (PoisonCount)
	{
		PoisonCount--;
	}

	if (Buttons & BT_USE)
	{
		InvFirst = none;
		InvPtr = none;
		PlayerState = PST_REBORN;
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	int i;

	if (bIsBot)
	{
		Bot.BotTick(deltaTime);
	}

	// Copy view angles
	if (MO == Camera)
	{
		MO.Angles = ViewAngles;
	}

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (Actor(MO).bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		Actor(MO).bJustAttacked = false;
	}

	if (bTotallyFrozen)
	{
		Buttons &= BT_USE;
		Impulse = 0;
		ViewAngles = MO.Angles;
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}
	else if (bFrozen)
	{
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}

	InventoryTick(deltaTime);

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime <= 0.0)
			JumpTime = 0.0;
	}
	if (MorphTime)
	{
		ChickenPlayerThink();
	}

	// Move around.
	// ReactionTime is used to prevent movement
	//  for a bit after a teleport.
	if (Actor(MO).ReactionTime)
	{
		Actor(MO).ReactionTime -= deltaTime;
		if (Actor(MO).ReactionTime <= 0.0)
			Actor(MO).ReactionTime = 0.0;
		if (Actor(MO).bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.WaterLevel > 1)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special || MO.Sector->Damage)
	{
		PlayerInSpecialSector(deltaTime);
	}
	PlayerInContents(deltaTime);

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			EntityEx(MO).UseLines(USERANGE, USETHINGRANGE, '*usefail');
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	// Chicken counter
	if (MorphTime)
	{
		if (ChickenPeck)
		{
			// Chicken attack counter
			ChickenPeck -= 3;
		}
		MorphTime -= deltaTime;
		if (MorphTime <= 0.0)
		{
			// Attempt to undo the chicken
			MorphTime = 0.0;
			UndoPlayerChicken();
		}
	}

	// cycle psprites
	MovePsprites(deltaTime);

	// Counters, time dependend power ups.

	if (PoisonCount && Level.XLevel.Time - LastPoisonTime >= 0.5)
	{
		PoisonCount -= 5;
		if (PoisonCount < 0)
		{
			PoisonCount = 0;
		}
		LastPoisonTime = Level.XLevel.Time;
		Actor(MO).PoisonDamage(Poisoner, Poisoner, 1, true);
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (Level.XLevel.Time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
	}
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	//	Just in a case camera entity has been destroyed
	if (!Camera)
	{
		Camera = MO;
	}

	if (MO != Camera)
	{
		ViewOrg = Camera.Origin;
		ViewOrg.z += EntityEx(Camera).CameraHeight;
		ViewAngles = Camera.Angles;
	}
	else
	{
		ViewOrg.x = MO.Origin.x;
		ViewOrg.y = MO.Origin.y;

		if (LocalQuakeHappening)
		{
			float intensity;

			intensity = itof(LocalQuakeHappening);
			ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
			ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
		}

		ViewAngles = MO.Angles;

		if (MorphTime && ChickenPeck)
		{
			// Set chicken attack view position
			ViewOrg.x += itof(ChickenPeck) * cos(MO.Angles.yaw);
			ViewOrg.y += itof(ChickenPeck) * sin(MO.Angles.yaw);
		}
	}

	PaletteFlash();

	ClientSetViewOrg(ViewOrg.x, ViewOrg.y, ViewOrg.z);

	SoundEnvironment = Level.XLevel.Zones[Camera.Sector->Zone];
	if (!SoundEnvironment)
	{
		if (Camera.WaterLevel >= 3)
		{
			//	Under water
			SoundEnvironment = 0x1600;
		}
		else
		{
			//	Generic
			SoundEnvironment = 1;
		}
	}
}

//===========================================================================
//
//  ActivateMorphWeapon
//
//===========================================================================

void ActivateMorphWeapon()
{
	Weapon Wpn = Level.Spawn(Beak);
	if (!Wpn.TryPickup(EntityEx(MO)))
	{
		Wpn.Destroy();
	}
	SetWeapon(Weapon(EntityEx(MO).FindInventory(Beak)));
	ViewStates[ps_weapon].SY = Weapon::WEAPONTOP;
	SetViewState(ps_weapon, ReadyWeapon.GetReadyState());
}

//===========================================================================
//
//  PostChickenWeapon
//
//===========================================================================

void PostChickenWeapon(Weapon weapon)
{
	ReadyWeapon.Destroy();
	SetWeapon(weapon);
	ViewStates[ps_weapon].SY = Weapon::WEAPONBOTTOM;
	SetViewState(ps_weapon, ReadyWeapon.GetUpState());
}

//===========================================================================
//
//  UpdateBeak
//
//===========================================================================

void UpdateBeak()
{
	ViewStates[ps_weapon].SY = Weapon::WEAPONTOP + itof(ChickenPeck) / 2.0;
}

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= CF_GODMODE;
	if (Cheats & CF_GODMODE)
	{
		cprint("GOD MODE ON");
	}
	else
	{
		cprint("GOD MODE OFF");
	}
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= CF_NOCLIP;
	if (Cheats & CF_NOCLIP)
	{
		cprint("NO CLIPPING ON");
	}
	else
	{
		cprint("NO CLIPPING OFF");
	}
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	class<Inventory>	Cls;
	class<Weapon>		WpnCls;

	if (Cmd_CheckParm("weapons"))
	{
		int i;

		EntityEx(MO).GiveInventoryType(EnchantedShield);
		EntityEx(MO).GiveInventoryType(BagOfHolding);
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
			if (!AmmoItem)
			{
				AmmoItem = Level.Spawn(Cls,,,, false);
				if (!AmmoItem.TryPickup(EntityEx(MO)))
				{
					AmmoItem.Destroy();
					AmmoItem = none;
				}
			}
			if (AmmoItem)
			{
				AmmoItem.Amount = AmmoItem.MaxAmount;
			}
		}
		foreach AllClasses(Weapon, WpnCls)
		{
			if (!FindClassState(WpnCls, 'Ready'))
			{
				//	Abstract base class.
			}
			if (!FindClassState(WpnCls, 'Spawn'))
			{
				//	Can't be picked up
				continue;
			}
			Weapon Wpn = Level.Spawn(WpnCls,,,, false);
			Wpn.AmmoGive1 = 0;
			Wpn.AmmoGive2 = 0;
			if (!Wpn.TryPickup(EntityEx(MO)))
			{
				Wpn.Destroy();
			}
		}
		cprint("ALL WEAPONS");
	}
	if (Cmd_CheckParm("power"))
	{
		Inventory Pw = EntityEx(MO).FindInventory(PowerWeaponLevel2);
		if (Pw)
		{
			Pw.Destroy();
			cprint("POWER OFF");
		}
		else
		{
			EntityEx(MO).GiveInventoryType(PowerWeaponLevel2);
			cprint("POWER ON");
		}
	}
	if (Cmd_CheckParm("health"))
	{
		if (MorphTime)
		{
			MO.Health = MAXCHICKENHEALTH;
			Health = MO.Health;
		}
		else
		{
			MO.Health = MAXHEALTH;
			Health = MO.Health;
		}
		cprint("FULL HEALTH");
	}
	if (Cmd_CheckParm("keys"))
	{
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
		cprint("ALL KEYS");
	}
	if (Cmd_CheckParm("artifacts"))
	{
		// All artifacts
		foreach AllClasses(Inventory, Cls)
		{
			if (!Cls.default.bInvBar || !Cls.default.MaxAmount)
			{
				//	Not an artifact
				continue;
			}
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class.
				continue;
			}
			if (ClassIsChildOf(Cls, PuzzleItem))
			{
				//	Not puzzle items.
				continue;
			}
			if (!AreStateSpritesPresent(FindClassState(Cls, 'Spawn')))
			{
				//	From other game or not available in shareware.
				continue;
			}
			Inventory Item = Level.Spawn(Cls,,,, false);
			Item.Amount = Item.MaxAmount;
			if (!Item.TryPickup(EntityEx(MO)))
			{
				Item.Destroy();
			}
		}
		cprint("ALL ARTIFACTS");
	}
/*	int i;
	int j;
	int type;
	int count;

	type = cheat->args[0] - 'a' + 1;
	count = cheat->args[1] - '0';
	if (type == 26 && count == 0)
	{ // All artifacts
		for (i = arti_none+1; i < NUMARTIFACTS; i++)
		{
			if (shareware && (i == arti_superhealth || i == arti_teleport))
			{
				continue;
			}
			for (j = 0; j < 16; j++)
			{
				P_GiveArtifact(player, i, NULL);
			}
		}
		P_SetMessage(player, "YOU GOT IT", false);
	}
	else if (type > arti_none && type < NUMARTIFACTS
		&& count > 0 && count < 10)
	{
		if (shareware && (type == arti_superhealth || type == arti_teleport))
		{
			P_SetMessage(player, "BAD INPUT", false);
			return;
		}
		for (i = 0; i < count; i++)
		{
			P_GiveArtifact(player, type, NULL);
		}
		P_SetMessage(player, "YOU GOT IT", false);
	}
	else
	{ // Bad input
		P_SetMessage(player, "BAD INPUT", false);
	}*/
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	HereticLevelInfo(Level).P_Massacre();
	cprint("MASSACRE");
}

//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph()
{
	if (MorphTime)
	{
		if (UndoPlayerChicken())
		{
			cprint("CHICKEN OFF");
		}
	}
	else
	{
		MorphProjectile Tmp = Level.Spawn(EggFX);
		if (Tmp.MorphPlayer(Actor(MO)))
		{
			cprint("CHICKEN ON");
		}
		Tmp.Destroy();
	}
}

//==========================================================================
//
//  Cheat_NoWeapons
//
//==========================================================================

void Cheat_NoWeapons()
{
	if (MorphTime)
	{
		return;
	}
	//	Find weakest weapon.
	Inventory Item;
	Weapon Weakest = none;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		if (Weapon(Item) && (!Weakest ||
			Weakest.SelectionOrder < Weapon(Item).SelectionOrder))
		{
			Weakest = Weapon(Item);
		}
	}
	//	Removed all others.
	for (Item = EntityEx(MO).Inventory; Item; )
	{
		Inventory Next = Item.Inventory;
		if (Weapon(Item) && Item != Weakest)
		{
			Item.Destroy();
		}
		Item = Next;
	}
	SetWeapon(Weakest);
	PendingWeapon = Weakest;
	cprint("CHEATER - YOU DON'T DESERVE WEAPONS");
}

//==========================================================================
//
//	KilledActor
//
//==========================================================================

void KilledActor(EntityEx Victim)
{
	// Check for frag changes
	if (Victim.bIsPlayer)
	{
		if (bIsBot)
		{
			Bot.Killed(Victim);
		}

		if (Victim.Player.bIsBot)
		{
			Player(Victim.Player).Bot.Died(EntityEx(MO));
		}

		// Frag stuff
		if (Victim == MO)
		{
			// Self-frag
			Frags--;
		}
		else
		{
			Frags++;
			MO.PlaySound('misc/frag', CHAN_ITEM);
			if (MorphTime)
			{
				// Make a super chicken
				EntityEx(MO).GiveInventoryType(PowerWeaponLevel2);
			}
		}
	}
}

defaultproperties
{
}
