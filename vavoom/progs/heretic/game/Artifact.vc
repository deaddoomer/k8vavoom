//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Artifact : Pickup
	abstract;

int ArtifactType;
bool bCanRespawn;

//==========================================================================
//
//  A_HideThing
//
//==========================================================================

final void A_HideThing()
{
	bHidden = true;
}

//==========================================================================
//
//  A_UnHideThing
//
//==========================================================================

final void A_UnHideThing()
{
	bHidden = false;
}

//==========================================================================
//
//  A_RestoreArtifact
//
//==========================================================================

final void A_RestoreArtifact()
{
	bSpecial = true;
	SetState(IdleState);
	PlaySound('misc/spawn', CHAN_VOICE);
}

__states__
{
	S_DORMANTARTI1('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI2) = none
	S_DORMANTARTI2('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3) = none
	S_DORMANTARTI3('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI4) = none
	S_DORMANTARTI4('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI5) = none
	S_DORMANTARTI5('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI6) = none
	S_DORMANTARTI6('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI7) = none
	S_DORMANTARTI7('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI8) = none
	S_DORMANTARTI8('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI9) = none
	S_DORMANTARTI9('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI10) = none
	S_DORMANTARTI10('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI11) = none
	S_DORMANTARTI11('ACLO', 0, 1400.0 / 35.0, S_DORMANTARTI12) = A_HideThing
	S_DORMANTARTI12('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI13) = A_UnHideThing
	S_DORMANTARTI13('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI14) = none
	S_DORMANTARTI14('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI15) = none
	S_DORMANTARTI15('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI16) = none
	S_DORMANTARTI16('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI17) = none
	S_DORMANTARTI17('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI18) = none
	S_DORMANTARTI18('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI19) = none
	S_DORMANTARTI19('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI20) = none
	S_DORMANTARTI20('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI21) = none
	S_DORMANTARTI21('ACLO', 3, 3.0 / 35.0, none) = A_RestoreArtifact

	S_DEADARTI1('ACLO', 3, 3.0 / 35.0, S_DEADARTI2) = none
	S_DEADARTI2('ACLO', 2, 3.0 / 35.0, S_DEADARTI3) = none
	S_DEADARTI3('ACLO', 3, 3.0 / 35.0, S_DEADARTI4) = none
	S_DEADARTI4('ACLO', 2, 3.0 / 35.0, S_DEADARTI5) = none
	S_DEADARTI5('ACLO', 1, 3.0 / 35.0, S_DEADARTI6) = none
	S_DEADARTI6('ACLO', 2, 3.0 / 35.0, S_DEADARTI7) = none
	S_DEADARTI7('ACLO', 1, 3.0 / 35.0, S_DEADARTI8) = none
	S_DEADARTI8('ACLO', 0, 3.0 / 35.0, S_DEADARTI9) = none
	S_DEADARTI9('ACLO', 1, 3.0 / 35.0, S_DEADARTI10) = none
	S_DEADARTI10('ACLO', 0, 3.0 / 35.0, none) = none
}

//==========================================================================
//
//  SetDormantArtifact
//
//  Removes the bSpecial flag, and initiates the artifact pickup animation.
//
//==========================================================================

void SetDormantArtifact()
{
	bSpecial = false;
	if (Level.Game.deathmatch && bCanRespawn)
	{
		SetState(S_DORMANTARTI1);
	}
	else
	{
		// Don't respawn
		SetState(S_DEADARTI1);
	}
	PlaySound('misc/p_pkup', CHAN_ITEM);
}

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================

void TouchSpecial(Actor Toucher)
{
	if (!Toucher.bPickUp)
	{
		// can't remove thing
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	if (Player(Toucher.Player).GiveArtifact(ArtifactType))
	{
		Toucher.Player.cprint(PickupMessage);
		if (Special)
		{
			Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2], Args[3],
				Args[4], NULL, 0, Toucher);
			Special = 0;
		}
		if (bCountItem)
		{
			Toucher.Player.ItemCount++;
		}
		SetDormantArtifact();
	}
}

defaultproperties
{
	bCountItem = true;
	bFloatBob = true;
	bCanRespawn = true;
}
