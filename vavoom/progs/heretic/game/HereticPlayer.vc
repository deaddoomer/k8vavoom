//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HereticPlayer : PlayerPawn;

//===========================================================================
//
//  StopMoving
//
//===========================================================================

void StopMoving()
{
	if (bIsPlayer)
	{
		if (State == S_PLAY_RUN1 || State == S_PLAY_RUN2 ||
			State == S_PLAY_RUN3 || State == S_PLAY_RUN4)
		{
			SetState(IdleState);
		}
	}
}

//==========================================================================
//
//  A_Scream
//
//==========================================================================

void A_Scream()
{
	// Handle the different player death screams
	if (Special1 < 10)
	{
		// Wimpy death sound
		PlaySound('*wimpydeath', CHAN_VOICE);
	}
	else if (Health > -50)
	{
		// Normal death sound
		PlaySound(DeathSound, CHAN_VOICE);
	}
	else if (Health > -100)
	{
		// Crazy death sound
		PlaySound('*crazydeath', CHAN_VOICE);
	}
	else
	{
		// Extreme death sound
		PlaySound('*gibbed', CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_SkullPop
//
//==========================================================================

void A_SkullPop()
{
	Actor A;

	if (!bIsPlayer)
	{
		//	Not a player anymore, i.e. already respawned or disconnected.
		return;
	}
	bSolid = false;
	A = Spawn(BloodySkull, Origin + vector(0.0, 0.0, 48.0));
	A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
	A.Velocity.z = (2.0 + Random() / 4.0) * 35.0;
	// Attach player mobj to bloody skull
	A.Player = Player;
	A.bIsPlayer = true;
	Player = none;
	bIsPlayer = false;
	A.Health = Health;
	A.Angles.yaw = Angles.yaw;
	A.Player.MO = A;
	Player(A.Player).DamageFlash = 1.0;
}

//==========================================================================
//
//	A_FlameSnd
//
//==========================================================================

void A_FlameSnd()
{
	PlaySound('misc/burn', CHAN_WEAPON);	// Burn sound
}

//==========================================================================
//
//  A_CheckBurnGone
//
//==========================================================================

void A_CheckBurnGone()
{
	if (bSafeToRemove)
	{
		SetState(S_PLAY_FDTH20);
	}
}

__states__
{
	S_PLAY('PLAY', 0, -1.0, none) { }
	S_PLAY_RUN1('PLAY', 0, 4.0 / 35.0, S_PLAY_RUN2) { }
	S_PLAY_RUN2('PLAY', 1, 4.0 / 35.0, S_PLAY_RUN3) { }
	S_PLAY_RUN3('PLAY', 2, 4.0 / 35.0, S_PLAY_RUN4) { }
	S_PLAY_RUN4('PLAY', 3, 4.0 / 35.0, S_PLAY_RUN1) { }
	S_PLAY_ATK1('PLAY', 4, 12.0 / 35.0, S_PLAY) { }
	S_PLAY_ATK2('PLAY', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_PLAY_ATK1) { }
	S_PLAY_PAIN('PLAY', 6, 4.0 / 35.0, S_PLAY_PAIN2) { }
	S_PLAY_PAIN2('PLAY', 6, 4.0 / 35.0, S_PLAY) { A_Pain(); }
	S_PLAY_DIE1('PLAY', 7, 6.0 / 35.0, S_PLAY_DIE2) { }
	S_PLAY_DIE2('PLAY', 8, 6.0 / 35.0, S_PLAY_DIE3) { A_Scream(); }
	S_PLAY_DIE3('PLAY', 9, 6.0 / 35.0, S_PLAY_DIE4) { }
	S_PLAY_DIE4('PLAY', 10, 6.0 / 35.0, S_PLAY_DIE5) { }
	S_PLAY_DIE5('PLAY', 11, 6.0 / 35.0, S_PLAY_DIE6) { A_NoBlocking(); }
	S_PLAY_DIE6('PLAY', 12, 6.0 / 35.0, S_PLAY_DIE7) { }
	S_PLAY_DIE7('PLAY', 13, 6.0 / 35.0, S_PLAY_DIE8) { }
	S_PLAY_DIE8('PLAY', 14, 6.0 / 35.0, S_PLAY_DIE9) { }
	S_PLAY_DIE9('PLAY', 15, -1.0, none) { A_AddPlayerCorpse(); }
	S_PLAY_XDIE1('PLAY', 16, 5.0 / 35.0, S_PLAY_XDIE2) { A_Scream(); }
	S_PLAY_XDIE2('PLAY', 17, 5.0 / 35.0, S_PLAY_XDIE3) { A_SkullPop(); }
	S_PLAY_XDIE3('PLAY', 18, 5.0 / 35.0, S_PLAY_XDIE4) { A_NoBlocking(); }
	S_PLAY_XDIE4('PLAY', 19, 5.0 / 35.0, S_PLAY_XDIE5) { }
	S_PLAY_XDIE5('PLAY', 20, 5.0 / 35.0, S_PLAY_XDIE6) { }
	S_PLAY_XDIE6('PLAY', 21, 5.0 / 35.0, S_PLAY_XDIE7) { }
	S_PLAY_XDIE7('PLAY', 22, 5.0 / 35.0, S_PLAY_XDIE8) { }
	S_PLAY_XDIE8('PLAY', 23, 5.0 / 35.0, S_PLAY_XDIE9) { }
	S_PLAY_XDIE9('PLAY', 24, -1.0, none) { A_AddPlayerCorpse(); }
	S_PLAY_FDTH1('FDTH', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH2) { A_FlameSnd(); }
	S_PLAY_FDTH2('FDTH', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH3) { }
	S_PLAY_FDTH3('FDTH', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH4) { }
	S_PLAY_FDTH4('FDTH', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH5) { A_Scream(); }
	S_PLAY_FDTH5('FDTH', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH6) { }
	S_PLAY_FDTH6('FDTH', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH7) { }
	S_PLAY_FDTH7('FDTH', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH8) { A_FlameSnd(); }
	S_PLAY_FDTH8('FDTH', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH9) { }
	S_PLAY_FDTH9('FDTH', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH10) { }
	S_PLAY_FDTH10('FDTH', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH11) { }
	S_PLAY_FDTH11('FDTH', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH12) { }
	S_PLAY_FDTH12('FDTH', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH13) { }
	S_PLAY_FDTH13('FDTH', 12 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH14) { }
	S_PLAY_FDTH14('FDTH', 13 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH15) { }
	S_PLAY_FDTH15('FDTH', 14 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH16) { A_NoBlocking(); }
	S_PLAY_FDTH16('FDTH', 15 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH17) { }
	S_PLAY_FDTH17('FDTH', 16 | FF_FULLBRIGHT, 5.0 / 35.0, S_PLAY_FDTH18) { }
	S_PLAY_FDTH18('FDTH', 17 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLAY_FDTH19) { }
	S_PLAY_FDTH19('ACLO', 4, 35.0 / 35.0, S_PLAY_FDTH19) { A_CheckBurnGone(); }
	S_PLAY_FDTH20('ACLO', 4, 8.0 / 35.0, none) { }
}

defaultproperties
{
	Health = 100;
	GibsHealth = -50;
	Radius = 16.0;
	Height = 56.0;
	Mass = 100.0;
	PainChance = 1.0;
	bPickUp = true;
	bWindThrust = true;
	bSlide = true;
	bTelestomp = true;
	IdleState = S_PLAY;
	SeeState = S_PLAY_RUN1;
	MissileState = S_PLAY_ATK1;
	Attack2State = S_PLAY_ATK2;
	PainState = S_PLAY_PAIN;
	DeathState = S_PLAY_DIE1;
	GibsDeathState = S_PLAY_XDIE1;
	FireDeathState = S_PLAY_FDTH1;
	PainSound = '*pain100';
	DeathSound = '*death';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.5  2006/03/12 19:56:46  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.4  2006/03/02 18:33:23  dj_jl
//  Don't use game specific classes in common.
//
//  Revision 1.3  2005/11/18 23:36:50  dj_jl
//  Renamed sounds.
//
//  Revision 1.2  2003/11/12 16:49:43  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:22  dj_jl
//  New style of defining classes.
//
//**************************************************************************
