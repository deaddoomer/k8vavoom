//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MainGameInfo : LineSpecialGameInfo;

const int NUM_SPECIALS		= 108;

const int NUMTOTALBOTS		= 8;
const int NUMBOTTYPES		= 8;

struct spec_trans_t
{
	int special;
	int arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;
	int spac;
	int repeat;
};

spec_trans_t spec_trans_tab[NUM_SPECIALS];

class<Weapon> WeaponClasses[NUMWEAPONS];
int weapon_ammo_type[NUMWEAPONS];
int WeaponOrder[NUMWEAPONS];

BotPlayer::botinfo_t botinfo[NUMTOTALBOTS];
int botskill;

int GetAmmoChange[NUMAMMO];
int GetWeaponAmmo[NUMWEAPONS];
int WeaponValue[NUMWEAPONS];
int maxammo[NUMAMMO];
bool WeaponInShareware[NUMWEAPONS];
int WeaponAmmoUsePL1[NUMWEAPONS];
int WeaponAmmoUsePL2[NUMWEAPONS];

string ArtifactText[HereticDefs::NUMARTIFACTS];
string WeaponText[NUMWEAPONS];
string KeyText[NUMKEYS];
string AmmoText[NUMAMMO * 2];
string keymsg[NUMKEYS];

float windTab[3];
float pushTab[5];

int opposite[9];
int diags[4];
float xspeed[8];
float yspeed[8];

float air_control;

Actor MissileMobj;

bool shareware;
bool respawnmonsters;

//==========================================================================
//
//	Init
//
//==========================================================================

void Init()
{
	shareware = !WadLumpPresent('e2m1');
	InitTranslationTables();
	InitBotTypes();
}

//==========================================================================
//
//  InitNewGame
//
//==========================================================================

void InitNewGame(int skill)
{
	respawnmonsters = GetCvar('RespawnMonsters');
	nomonsters = GetCvar('NoMonsters');
	fastparm = gameskill == sk_nightmare || GetCvar('Fast');
}

//==========================================================================
//
//  CreateLevelInfo
//
//==========================================================================

LevelInfo CreateLevelInfo()
{
	return LevelInfo(NewSpecialThinker(HereticLevelInfo));
}

//==========================================================================
//
//  InitBotTypes
//
//==========================================================================

void InitBotTypes()
{
	SetBotType(0,
		"bot1",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot1\\colour\\0\\class\\0\\model\\doomguy\\skin\\green.pcx"
	);
	SetBotType(1,
		"bot2",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot2\\colour\\1\\class\\0\\model\\doomguy\\skin\\bluef.pcx"
	);
	SetBotType(2,
		"bot3",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot3\\colour\\2\\class\\0\\model\\doomguy\\skin\\pinkf.pcx"
	);
	SetBotType(3,
		"bot4",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot4\\colour\\3\\class\\0\\model\\doomguy\\skin\\camo.pcx"
	);
	SetBotType(4,
		"bot5",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot5\\colour\\4\\class\\0\\model\\doomguy\\skin\\green.pcx"
	);
	SetBotType(5,
		"bot6",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot6\\colour\\5\\class\\0\\model\\doomguy\\skin\\bluef.pcx"
	);
	SetBotType(6,
		"bot7",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot7\\colour\\6\\class\\0\\model\\doomguy\\skin\\pinkf.pcx"
	);
	SetBotType(7,
		"bot8",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot8\\colour\\7\\class\\0\\model\\doomguy\\skin\\camo.pcx"
	);
}

//==========================================================================
//
//  SetBotType
//
//==========================================================================

void SetBotType(int i, string Name, int accuracy, int intelect, int evade,
	int anticip, int reaction, string userinfo)
{
	botinfo[i].Name = Name;
	botinfo[i].accuracy = accuracy;
	botinfo[i].intelect = intelect;
	botinfo[i].evade = evade;
	botinfo[i].anticip = anticip;
	botinfo[i].reaction = reaction;
	botinfo[i].userinfo = userinfo;
}

//==========================================================================
//
//	InitTranslationTables
//
//==========================================================================

void InitTranslationTables()
{
	//  0
	SetLineTrans(1, LNSPEC_DoorRaise, 0, 16, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(2, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(3, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(4, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_CROSS, false);
	SetLineTrans(5, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(6, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_CROSS, false);
	SetLineTrans(7, LNSPEC_StairsBuildUpDoom, -1, 8, 8, 0, 0, SPAC_USE, false);
	SetLineTrans(8, LNSPEC_StairsBuildUpDoom, -1, 8, 8, 0, 0, SPAC_CROSS, false);
	SetLineTrans(9, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_USE, false);

	SetLineTrans(10, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_CROSS, false);
	SetLineTrans(11, LNSPEC_ExitNormal, -1, 0, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(12, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(13, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(14, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_USE, false);
	SetLineTrans(15, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_USE, false);
	SetLineTrans(16, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_CROSS, false);
	SetLineTrans(17, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_CROSS, false);
	SetLineTrans(18, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(19, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_CROSS, false);

	SetLineTrans(20, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(21, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_USE, false);
	SetLineTrans(22, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(23, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(24, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_IMPACT, false);
	SetLineTrans(25, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_CROSS, false);
	SetLineTrans(26, LNSPEC_DoorLockedRaise, 0, 16, 150, key_blue + 1, 0, SPAC_USE, true);
	SetLineTrans(27, LNSPEC_DoorLockedRaise, 0, 16, 150, key_yellow + 1, 0, SPAC_USE, true);
	SetLineTrans(28, LNSPEC_DoorLockedRaise, 0, 16, 150, key_green + 1, 0, SPAC_USE, true);
	SetLineTrans(29, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_USE, false);

	SetLineTrans(30, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(31, LNSPEC_DoorOpen, 0, 16, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(32, LNSPEC_DoorLockedRaise, 0, 16, 0, key_blue + 1, 0, SPAC_USE, false);
	SetLineTrans(33, LNSPEC_DoorLockedRaise, 0, 16, 0, key_green + 1, 0, SPAC_USE, false);
	SetLineTrans(34, LNSPEC_DoorLockedRaise, 0, 16, 0, key_yellow + 1, 0, SPAC_USE, false);
	SetLineTrans(35, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(36, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_CROSS, false);
	SetLineTrans(37, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(38, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(39, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(40, LNSPEC_FloorAndCeilingLowerRaise, -1, 8, 8, 0, 0, SPAC_CROSS, false);
	SetLineTrans(41, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(42, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(43, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(44, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(45, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_USE, true);
	SetLineTrans(46, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_IMPACT, true);
	SetLineTrans(47, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_IMPACT, false);
	SetLineTrans(48, LNSPEC_ScrollTextureLeft, 64, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(49, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_USE, false);

	SetLineTrans(50, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(51, LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(52, LNSPEC_ExitNormal, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(53, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_CROSS, false);
	SetLineTrans(54, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(55, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_USE, false);
	SetLineTrans(56, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_CROSS, false);
	SetLineTrans(57, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(58, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_CROSS, false);
	SetLineTrans(59, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_CROSS, false);

	SetLineTrans(60, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(61, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(62, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_USE, true);
	SetLineTrans(63, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(64, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(65, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_USE, true);
	SetLineTrans(66, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_USE, true);
	SetLineTrans(67, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_USE, true);
	SetLineTrans(68, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(69, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_USE, true);

	SetLineTrans(70, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_USE, true);
	SetLineTrans(71, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_USE, false);
	SetLineTrans(72, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(73, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_CROSS, true);
	SetLineTrans(74, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(75, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(76, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_CROSS, true);
	SetLineTrans(77, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_CROSS, true);
	//  78
	SetLineTrans(79, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_CROSS, true);

	SetLineTrans(80, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(81, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(82, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(83, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_CROSS, true);
	SetLineTrans(84, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	//  85
	SetLineTrans(86, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(87, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_CROSS, true);
	SetLineTrans(88, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_CROSS, true);
	SetLineTrans(89, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_CROSS, true);

	SetLineTrans(90, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_CROSS, true);
	SetLineTrans(91, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(92, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_CROSS, true);
	SetLineTrans(93, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_CROSS, true);
	SetLineTrans(94, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_CROSS, true);
	SetLineTrans(95, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(96, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(97, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(98, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_CROSS, true);
	SetLineTrans(99, LNSPEC_ScrollTextureRight, 64, 0, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(100, LNSPEC_DoorRaise, -1, 48, 150, 0, 0, SPAC_CROSS, true);
	SetLineTrans(101, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(102, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_USE, false);
	SetLineTrans(103, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(104, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(105, LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(106, LNSPEC_StairsBuildUpDoom, -1, 8, 16, 0, 0, SPAC_CROSS, false);
	SetLineTrans(107, LNSPEC_StairsBuildUpDoom, -1, 8, 16, 0, 0, SPAC_USE, false);
}

//==========================================================================
//
//	SetLineTrans
//
//==========================================================================

void SetLineTrans(int i, int special, int arg1, int arg2, int arg3,
	int arg4, int arg5, int spac, int repeat)
{
	spec_trans_tab[i].special = special;
	spec_trans_tab[i].arg1 = arg1;
	spec_trans_tab[i].arg2 = arg2;
	spec_trans_tab[i].arg3 = arg3;
	spec_trans_tab[i].arg4 = arg4;
	spec_trans_tab[i].arg5 = arg5;
	spec_trans_tab[i].spac = spac;
	spec_trans_tab[i].repeat = repeat;
}

//==========================================================================
//
//  TranslateLine
//
//==========================================================================

void TranslateLine(line_t* line)
{
	int			OldSpec;
	int			OldTag;
	int			OldFlags;

	OldSpec = line->special;
	OldTag = line->arg1;
	OldFlags = line->flags;
	if (!line->special)
	{
		return;
	}

	if (line->special >= NUM_SPECIALS)
	{
		line->special = 0;
		line->arg1 = 0;
		return;
	}

	//	Special.
	line->special = spec_trans_tab[OldSpec].special;
	//	Arg 1.
	if (spec_trans_tab[OldSpec].arg1 == -1)
	{
		line->arg1 = OldTag;
	}
	else
	{
		line->arg1 = spec_trans_tab[OldSpec].arg1;
	}
	//	Arg 2.
	if (spec_trans_tab[OldSpec].arg2 == -1)
	{
		line->arg2 = OldTag;
	}
	else
	{
		line->arg2 = spec_trans_tab[OldSpec].arg2;
	}
	//	Arg 3.
	if (spec_trans_tab[OldSpec].arg3 == -1)
	{
		line->arg3 = OldTag;
	}
	else
	{
		line->arg3 = spec_trans_tab[OldSpec].arg3;
	}
	//	Arg 4.
	if (spec_trans_tab[OldSpec].arg4 == -1)
	{
		line->arg4 = OldTag;
	}
	else
	{
		line->arg4 = spec_trans_tab[OldSpec].arg4;
	}
	//	Arg 5.
	if (spec_trans_tab[OldSpec].arg5 == -1)
	{
		line->arg5 = OldTag;
	}
	else
	{
		line->arg5 = spec_trans_tab[OldSpec].arg5;
	}
	//	Activation flags.
	line->flags |= spec_trans_tab[OldSpec].spac << ML_SPAC_SHIFT;
	if (spec_trans_tab[OldSpec].repeat)
	{
		line->flags |= ML_REPEAT_SPECIAL;
	}
}

//==========================================================================
//
//	TranslateSector
//
//==========================================================================

void TranslateSector(sector_t* sector)
{
	int special;
	int high;

	special = sector->special;
	if (!special)
	{
		return;
	}
	if (special == 9)
	{
		sector->special = SECSPEC_SECRET_MASK;
		return;
	}

	high = (special & 0xfc0) << 3;
	special &= 0x3f;
	if (special == 5)
	{
		sector->special = high | SECSPEC_DamageLavaWimpy;
	}
	else if (special == 6)
	{
		sector->special = high | SECSPEC_DamageSludge;
	}
	else if (special == 16)
	{
		sector->special = high | SECSPEC_DamageLavaHefty;
	}
	else if (special == 4)
	{
		sector->special = high | SECSPEC_ScrollEastLavaDamage;
	}
	else if (special < 20)
	{
		sector->special = high | (special + 64);
	}
	else if (special < 40)
	{
		sector->special = high | (special + 205);
	}
	else
	{
		sector->special = high | special;
	}
}

//==========================================================================
//
//  TranslateThing
//
//==========================================================================

void TranslateThing(mthing_t* mthing)
{
	int flags;

	// translate the spawn flags to Hexen format.
	flags = mthing->options;
	mthing->options = (flags & 0xf) | 0x7e0;
	if (flags & 0x10)
		mthing->options &= ~HereticLevelInfo::MTF_GSINGLE;
}

//==========================================================================
//
//  TranslateLevel
//
//==========================================================================

void TranslateLevel(Level InLevel)
{
	int i;

	for (i = 0; i < InLevel.NumLines; i++)
	{
		TranslateLine(&InLevel.Lines[i]);
	}

	for (i = 0; i < InLevel.NumSectors; i++)
	{
		TranslateSector(&InLevel.Sectors[i]);
	}

	for (i = 0; i < InLevel.NumThings; i++)
	{
		TranslateThing(&InLevel.Things[i]);
	}
}

defaultproperties
{
	num_stats = 9 + 2 * HereticDefs::NUMARTIFACTS;
	bUseHexenPolyobjTypes = true;

	WeaponClasses[0] = WeaponStaff;
	WeaponClasses[1] = WeaponGoldWand;
	WeaponClasses[2] = WeaponCrossbow;
	WeaponClasses[3] = WeaponBlaster;
	WeaponClasses[4] = WeaponSkullRod;
	WeaponClasses[5] = WeaponPhoenixRod;
	WeaponClasses[6] = WeaponMace;
	WeaponClasses[7] = WeaponGauntlets;
	WeaponClasses[8] = WeaponBeak;

	weapon_ammo_type[0] = am_noammo;
	weapon_ammo_type[1] = am_goldwand;
	weapon_ammo_type[2] = am_crossbow;
	weapon_ammo_type[3] = am_blaster;
	weapon_ammo_type[4] = am_skullrod;
	weapon_ammo_type[5] = am_phoenixrod;
	weapon_ammo_type[6] = am_mace;
	weapon_ammo_type[7] = am_noammo;
	weapon_ammo_type[8] = am_noammo;

	WeaponOrder[0] = wp_staff;
	WeaponOrder[1] = wp_gauntlets;
	WeaponOrder[2] = wp_goldwand;
	WeaponOrder[3] = wp_crossbow;
	WeaponOrder[4] = wp_blaster;
	WeaponOrder[5] = wp_skullrod;
	WeaponOrder[6] = wp_phoenixrod;
	WeaponOrder[7] = wp_mace;
	WeaponOrder[8] = wp_beak;

	terrain_contents[0] = CONTENTS_EMPTY;
	terrain_contents[1] = CONTENTS_WATER;
	terrain_contents[2] = CONTENTS_SLUDGE;
	terrain_contents[3] = CONTENTS_LAVA;

	GetAmmoChange[0] = wp_goldwand;
	GetAmmoChange[1] = wp_crossbow;
	GetAmmoChange[2] = wp_blaster;
	GetAmmoChange[3] = wp_skullrod;
	GetAmmoChange[4] = wp_phoenixrod;
	GetAmmoChange[5] = wp_mace;

	GetWeaponAmmo[0] = 0;	// staff
	GetWeaponAmmo[1] = 25;	// gold wand
	GetWeaponAmmo[2] = 10;	// crossbow
	GetWeaponAmmo[3] = 30;	// blaster
	GetWeaponAmmo[4] = 50;	// skull rod
	GetWeaponAmmo[5] = 2;	// phoenix rod
	GetWeaponAmmo[6] = 50;	// mace
	GetWeaponAmmo[7] = 0;	// gauntlets
	GetWeaponAmmo[8] = 0;	// beak

	WeaponValue[0] = 1;	// staff
	WeaponValue[1] = 3;	// goldwand
	WeaponValue[2] = 4;	// crossbow
	WeaponValue[3] = 5;	// blaster
	WeaponValue[4] = 6;	// skullrod
	WeaponValue[5] = 7;	// phoenixrod
	WeaponValue[6] = 8;	// mace
	WeaponValue[7] = 2;	// gauntlets
	WeaponValue[8] = 0;	// beak

	maxammo[0] = 100;	// gold wand
	maxammo[1] = 50;	// crossbow
	maxammo[2] = 200;	// blaster
	maxammo[3] = 200;	// skull rod
	maxammo[4] = 20;	// phoenix rod
	maxammo[5] = 150;	// mace

	WeaponInShareware[0] = true;	// Staff
	WeaponInShareware[1] = true;	// Gold wand
	WeaponInShareware[2] = true;	// Crossbow
	WeaponInShareware[3] = true;	// Blaster
	WeaponInShareware[4] = false;	// Skull rod
	WeaponInShareware[5] = false;	// Phoenix rod
	WeaponInShareware[6] = false;	// Mace
	WeaponInShareware[7] = true;	// Gauntlets
	WeaponInShareware[8] = true;	// Beak

	WeaponAmmoUsePL1[0] = 0;	// staff
	WeaponAmmoUsePL1[1] = Weapon::USE_GWND_AMMO_1;	// gold wand
	WeaponAmmoUsePL1[2] = Weapon::USE_CBOW_AMMO_1;	// crossbow
	WeaponAmmoUsePL1[3] = Weapon::USE_BLSR_AMMO_1;	// blaster
	WeaponAmmoUsePL1[4] = Weapon::USE_SKRD_AMMO_1;	// skull rod
	WeaponAmmoUsePL1[5] = Weapon::USE_PHRD_AMMO_1;	// phoenix rod
	WeaponAmmoUsePL1[6] = Weapon::USE_MACE_AMMO_1;	// mace
	WeaponAmmoUsePL1[7] = 0;	// gauntlets
	WeaponAmmoUsePL1[8] = 0;	// beak

	WeaponAmmoUsePL2[0] = 0;	// staff
	WeaponAmmoUsePL2[1] = Weapon::USE_GWND_AMMO_2;	// gold wand
	WeaponAmmoUsePL2[2] = Weapon::USE_CBOW_AMMO_2;	// crossbow
	WeaponAmmoUsePL2[3] = Weapon::USE_BLSR_AMMO_2;	// blaster
	WeaponAmmoUsePL2[4] = Weapon::USE_SKRD_AMMO_2;	// skull rod
	WeaponAmmoUsePL2[5] = Weapon::USE_PHRD_AMMO_2;	// phoenix rod
	WeaponAmmoUsePL2[6] = Weapon::USE_MACE_AMMO_2;	// mace
	WeaponAmmoUsePL2[7] = 0;	// gauntlets
	WeaponAmmoUsePL2[8] = 0;	// beak

	ArtifactText[0] = "";
	ArtifactText[1] = "RING OF INVINCIBILITY";
	ArtifactText[2] = "SHADOWSPHERE";
	ArtifactText[3] = "QUARTZ FLASK";
	ArtifactText[4] = "MYSTIC URN";
	ArtifactText[5] = "TOME OF POWER";
	ArtifactText[6] = "TORCH";
	ArtifactText[7] = "TIME BOMB OF THE ANCIENTS";
	ArtifactText[8] = "MORPH OVUM";
	ArtifactText[9] = "WINGS OF WRATH";
	ArtifactText[10] = "CHAOS DEVICE";

	WeaponText[0] = "";
	WeaponText[1] = "";
	WeaponText[2] = "ETHEREAL CROSSBOW";
	WeaponText[3] = "DRAGON CLAW";
	WeaponText[4] = "HELLSTAFF";
	WeaponText[5] = "PHOENIX ROD";
	WeaponText[6] = "FIREMACE";
	WeaponText[7] = "GAUNTLETS OF THE NECROMANCER";

	KeyText[0] = "YELLOW KEY";
	KeyText[1] = "GREEN KEY";
	KeyText[2] = "BLUE KEY";

	AmmoText[0] = "WAND CRYSTAL";
	AmmoText[1] = "CRYSTAL GEODE";
	AmmoText[2] = "MACE SPHERES";
	AmmoText[3] = "PILE OF MACE SPHERES";
	AmmoText[4] = "ETHEREAL ARROWS";
	AmmoText[5] = "QUIVER OF ETHEREAL ARROWS";
	AmmoText[6] = "CLAW ORB";
	AmmoText[7] = "ENERGY ORB";
	AmmoText[8] = "LESSER RUNES";
	AmmoText[9] = "GREATER RUNES";
	AmmoText[10] = "FLAME ORB";
	AmmoText[11] = "INFERNO ORB";

	keymsg[0] = "YOU NEED A YELLOW KEY TO OPEN THIS DOOR";
	keymsg[1] = "YOU NEED A GREEN KEY TO OPEN THIS DOOR";
	keymsg[2] = "YOU NEED A BLUE KEY TO OPEN THIS DOOR";

	windTab[0] = 5.0 / 32.0;
	windTab[1] = 10.0 / 32.0;
	windTab[2] = 25.0 / 32.0;

	pushTab[0] = 5.0 * 35.0 * 35.0 / 32.0;
	pushTab[1] = 10.0 * 35.0 * 35.0 / 32.0;
	pushTab[2] = 25.0 * 35.0 * 35.0 / 32.0;
	pushTab[3] = 30.0 * 35.0 * 35.0 / 32.0;
	pushTab[4] = 35.0 * 35.0 * 35.0 / 32.0;

	opposite[0] = DI_WEST;
	opposite[1] = DI_SOUTHWEST;
	opposite[2] = DI_SOUTH;
	opposite[3] = DI_SOUTHEAST;
	opposite[4] = DI_EAST;
	opposite[5] = DI_NORTHEAST;
	opposite[6] = DI_NORTH;
	opposite[7] = DI_NORTHWEST;
	opposite[8] = DI_NODIR;

	diags[0] = DI_NORTHWEST;
	diags[1] = DI_NORTHEAST;
	diags[2] = DI_SOUTHWEST;
	diags[3] = DI_SOUTHEAST;

	xspeed[0] = 1.0;
	xspeed[1] = 0.7171630859;
	xspeed[2] = 0.0;
	xspeed[3] = -0.7171630859;
	xspeed[4] = -1.0;
	xspeed[5] = -0.7171630859;
	xspeed[6] = 0.0;
	xspeed[7] = 0.7171630859;

	yspeed[0] = 0.0;
	yspeed[1] = 0.7171630859;
	yspeed[2] = 1.0;
	yspeed[3] = 0.7171630859;
	yspeed[4] = 0.0;
	yspeed[5] = -0.7171630859;
	yspeed[6] = -1.0;
	yspeed[7] = -0.7171630859;

	air_control = 1.0 / 256.0;

	botskill = 2;
}
