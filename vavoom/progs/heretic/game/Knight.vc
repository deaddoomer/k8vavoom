//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Knight : Pawn
	__mobjinfo__(64)
	__scriptid__(6);

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff()
{
	DropItem(ItemAmmoCrossbowWimpy, 5, 0.328125);
}

//==========================================================================
//
//  A_KnightAttack
//
//==========================================================================

void A_KnightAttack()
{
	if (!Enemy)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(3));
		PlaySound('hknight/melee', CHAN_WEAPON);
		return;
	}
	// Throw axe
	PlaySound(AttackSound, CHAN_WEAPON);
	if (Random() < 0.15625)
	{
		// Red axe
		SpawnMissile(Enemy, KnightRedAxe);
		return;
	}
	// Green axe
	SpawnMissile(Enemy, KnightAxe);
}

__states__
{
	S_KNIGHT_STND1('KNIG', 0, 'monsters/knight/model.xml', 0, 10.0 / 35.0, S_KNIGHT_STND2) { A_Look(); }
	S_KNIGHT_STND2('KNIG', 1, 'monsters/knight/model.xml', 1, 10.0 / 35.0, S_KNIGHT_STND1) { A_Look(); }
	S_KNIGHT_WALK1('KNIG', 0, 'monsters/knight/model.xml', 2, 4.0 / 35.0, S_KNIGHT_WALK2) { A_Chase(); }
	S_KNIGHT_WALK2('KNIG', 1, 'monsters/knight/model.xml', 3, 4.0 / 35.0, S_KNIGHT_WALK3) { A_Chase(); }
	S_KNIGHT_WALK3('KNIG', 2, 'monsters/knight/model.xml', 4, 4.0 / 35.0, S_KNIGHT_WALK4) { A_Chase(); }
	S_KNIGHT_WALK4('KNIG', 3, 'monsters/knight/model.xml', 5, 4.0 / 35.0, S_KNIGHT_WALK1) { A_Chase(); }
	S_KNIGHT_ATK1('KNIG', 4, 'monsters/knight/model.xml', 6, 10.0 / 35.0, S_KNIGHT_ATK2) { A_FaceTarget(); }
	S_KNIGHT_ATK2('KNIG', 5, 'monsters/knight/model.xml', 7, 8.0 / 35.0, S_KNIGHT_ATK3) { A_FaceTarget(); }
	S_KNIGHT_ATK3('KNIG', 6, 'monsters/knight/model.xml', 8, 8.0 / 35.0, S_KNIGHT_ATK4) { A_KnightAttack(); }
	S_KNIGHT_ATK4('KNIG', 4, 'monsters/knight/model.xml', 9, 10.0 / 35.0, S_KNIGHT_ATK5) { A_FaceTarget(); }
	S_KNIGHT_ATK5('KNIG', 5, 'monsters/knight/model.xml', 10, 8.0 / 35.0, S_KNIGHT_ATK6) { A_FaceTarget(); }
	S_KNIGHT_ATK6('KNIG', 6, 'monsters/knight/model.xml', 11, 8.0 / 35.0, S_KNIGHT_WALK1) { A_KnightAttack(); }
	S_KNIGHT_PAIN1('KNIG', 7, 'monsters/knight/model.xml', 12, 3.0 / 35.0, S_KNIGHT_PAIN2) { }
	S_KNIGHT_PAIN2('KNIG', 7, 'monsters/knight/model.xml', 13, 3.0 / 35.0, S_KNIGHT_WALK1) { A_Pain(); }
	S_KNIGHT_DIE1('KNIG', 8, 'monsters/knight/model.xml', 14, 6.0 / 35.0, S_KNIGHT_DIE2) { }
	S_KNIGHT_DIE2('KNIG', 9, 'monsters/knight/model.xml', 15, 6.0 / 35.0, S_KNIGHT_DIE3) { A_Scream(); }
	S_KNIGHT_DIE3('KNIG', 10, 'monsters/knight/model.xml', 16, 6.0 / 35.0, S_KNIGHT_DIE4) { }
	S_KNIGHT_DIE4('KNIG', 11, 'monsters/knight/model.xml', 17, 6.0 / 35.0, S_KNIGHT_DIE5) { A_NoBlocking(); }
	S_KNIGHT_DIE5('KNIG', 12, 'monsters/knight/model.xml', 18, 6.0 / 35.0, S_KNIGHT_DIE6) { }
	S_KNIGHT_DIE6('KNIG', 13, 'monsters/knight/model.xml', 19, 6.0 / 35.0, S_KNIGHT_DIE7) { }
	S_KNIGHT_DIE7('KNIG', 14, 'monsters/knight/model.xml', 20, -1.0, none) { }
}

defaultproperties
{
	Health = 200;
	Radius = 24.0;
	Height = 78.0;
	Mass = 150.0;
	StepSpeed = 12.0;
	PainChance = 0.390625;
	IdleState = S_KNIGHT_STND1;
	SeeState = S_KNIGHT_WALK1;
	MeleeState = S_KNIGHT_ATK1;
	MissileState = S_KNIGHT_ATK1;
	PainState = S_KNIGHT_PAIN1;
	DeathState = S_KNIGHT_DIE1;
	SightSound = 'hknight/sight';
	ActiveSound = 'hknight/active';
	AttackSound = 'hknight/attack';
	PainSound = 'hknight/pain';
	DeathSound = 'hknight/death';
}
