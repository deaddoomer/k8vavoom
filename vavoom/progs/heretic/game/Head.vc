//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Head : Pawn
	__mobjinfo__(6)
	__scriptid__(20);

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff()
{
	DropItem(ItemAmmoBlasterWimpy, 10, 0.328125);
	DropItem(ArtifactEgg, 0, 0.19921875);
}

//==========================================================================
//
//  A_HeadAttack
//
//==========================================================================

void A_HeadAttack()
{
	int i;
	Actor fire;
	Actor baseFire;
	Actor A;
	int randAttack;
	int dist;

	// Ice ball     (close 20% : far 60%)
	// Fire column  (close 40% : far 20%)
	// Whirlwind    (close 40% : far 20%)
	// Distance threshold = 8 cells

	if (!Enemy)
	{
		return;
	}
	A_FaceTarget();
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(6));
		return;
	}
	dist = DistTo2(Enemy) > 8.0 * 64.0;
	randAttack = P_Random();
	if (randAttack < (dist ? 150 : 50))
	{
		// Ice ball
		SpawnMissile(Enemy, HeadMissile1);
		PlaySound('ironlich/attack2', CHAN_WEAPON);
	}
	else if (randAttack < (dist ? 200 : 150))
	{
		// Fire column
		baseFire = SpawnMissile(Enemy, HeadMissile3);
		if (baseFire != none)
		{
			baseFire.SetState(HeadMissile3::S_HEADFX3_4);	// Don't grow
			for (i = 0; i < 5; i++)
			{
				fire = Spawn(HeadMissile3, baseFire.Origin);
				if (i == 0)
				{
					PlaySound('ironlich/attack1', CHAN_WEAPON);
				}
				fire.Instigator = baseFire.Instigator;
				fire.Angles.yaw = baseFire.Angles.yaw;
				fire.Velocity = baseFire.Velocity;
				fire.MissileDamage = 0;
				fire.Health = (i + 1) * 2;
				fire.CheckMissileSpawn();
			}
		}
	}
	else
	{
		// Whirlwind
		A = SpawnMissile(Enemy, WhirlWind);
		if (A != none)
		{
			A.Origin.z -= 32.0;
			A.Enemy = Enemy;
			A.Health = 20 * TICRATE;	// Duration
			PlaySound('ironlich/attack3', CHAN_WEAPON);
		}
	}
}

__states__
{
	S_HEAD_LOOK('HEAD', 0, 'monsters/head/base.md2', 0, 10.0 / 35.0, S_HEAD_LOOK) { A_Look(); }
	S_HEAD_FLOAT('HEAD', 0, 'monsters/head/base.md2', 0, 4.0 / 35.0, S_HEAD_FLOAT) { A_Chase(); }
	S_HEAD_ATK1('HEAD', 0, 'monsters/head/base.md2', 1, 5.0 / 35.0, S_HEAD_ATK2) { A_FaceTarget(); }
	S_HEAD_ATK2('HEAD', 1, 'monsters/head/base.md2', 2, 20.0 / 35.0, S_HEAD_FLOAT) { A_HeadAttack(); }
	S_HEAD_PAIN1('HEAD', 0, 'monsters/head/base.md2', 3, 4.0 / 35.0, S_HEAD_PAIN2) { }
	S_HEAD_PAIN2('HEAD', 0, 'monsters/head/base.md2', 4, 4.0 / 35.0, S_HEAD_FLOAT) { A_Pain(); }
	S_HEAD_DIE1('HEAD', 2, 7.0 / 35.0, S_HEAD_DIE2) { }
	S_HEAD_DIE2('HEAD', 3, 7.0 / 35.0, S_HEAD_DIE3) { A_Scream(); }
	S_HEAD_DIE3('HEAD', 4, 7.0 / 35.0, S_HEAD_DIE4) { }
	S_HEAD_DIE4('HEAD', 5, 7.0 / 35.0, S_HEAD_DIE5) { }
	S_HEAD_DIE5('HEAD', 6, 7.0 / 35.0, S_HEAD_DIE6) { A_NoBlocking(); }
	S_HEAD_DIE6('HEAD', 7, 7.0 / 35.0, S_HEAD_DIE7) { }
	S_HEAD_DIE7('HEAD', 8, -1.0, none) { A_BossDeath(); }
}

defaultproperties
{
	Health = 700;
	Radius = 40.0;
	Height = 72.0;
	Mass = 325.0;
	StepSpeed = 6.0;
	PainChance = 0.125;
	bNoBlood = true;
	bFloorClip = false;
	bNoMorph = true;
	IdleState = S_HEAD_LOOK;
	SeeState = S_HEAD_FLOAT;
	MissileState = S_HEAD_ATK1;
	PainState = S_HEAD_PAIN1;
	DeathState = S_HEAD_DIE1;
	SightSound = 'ironlich/sight';
	ActiveSound = 'ironlich/active';
	AttackSound = 'ironlich/attack1';
	PainSound = 'ironlich/pain';
	DeathSound = 'ironlich/death';
}
