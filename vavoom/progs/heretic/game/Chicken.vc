//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Chicken:Pawn;

//==========================================================================
//
//  UpdateChicken
//
//  Returns true if the chicken morphs.
//
//==========================================================================

bool UpdateChicken(int tics)
{
	Actor fog;
	classid moType;
	Actor A;

	Special1 -= tics;
	if (Special1 > 0)
	{
		return false;
	}
	moType = SpecialCID;
	UnlinkFromWorld();
	A = Spawn(moType, Origin);
	if (A.TestLocation() == false)
	{
		// Didn't fit
		A.Remove();
		LinkToWorld();
		Special1 = 5 * 35;	// Next try in 5 seconds
		return false;
	}
	LinkToWorld();
	A.Angles.yaw = Angles.yaw;
	A.Enemy = Enemy;
	fog = Spawn(TeleportFog, Origin + vector(0.0, 0.0, TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);
	SetState(S_FREETARGMOBJ);
	return true;
}

//==========================================================================
//
//  A_ChicLook
//
//==========================================================================

void A_ChicLook(void)
{
	if (UpdateChicken(10))
	{
		return;
	}
	A_Look();
}

//==========================================================================
//
//  A_ChicChase
//
//==========================================================================

void A_ChicChase(void)
{
	if (UpdateChicken(3))
	{
		return;
	}
	A_Chase();
}

//==========================================================================
//
//  A_ChicAttack
//
//==========================================================================

void A_ChicAttack(void)
{
	if (UpdateChicken(18))
	{
		return;
	}
	if (!Enemy)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, 1 + (P_Random() & 1));
	}
}

//==========================================================================
//
//  A_ChicPain
//
//==========================================================================

void A_ChicPain(void)
{
	if (UpdateChicken(10))
	{
		return;
	}
	PlaySound(PainSound, CHAN_VOICE);
}

__states__
{
	S_CHICKEN_LOOK1('CHKN', 0, 10.0 / 35.0, S_CHICKEN_LOOK2) { A_ChicLook(); }
	S_CHICKEN_LOOK2('CHKN', 1, 10.0 / 35.0, S_CHICKEN_LOOK1) { A_ChicLook(); }
	S_CHICKEN_WALK1('CHKN', 0, 3.0 / 35.0, S_CHICKEN_WALK2) { A_ChicChase(); }
	S_CHICKEN_WALK2('CHKN', 1, 3.0 / 35.0, S_CHICKEN_WALK1) { A_ChicChase(); }
	S_CHICKEN_PAIN1('CHKN', 3, 5.0 / 35.0, S_CHICKEN_PAIN2) { A_Feathers(); }
	S_CHICKEN_PAIN2('CHKN', 2, 5.0 / 35.0, S_CHICKEN_WALK1) { A_ChicPain(); }
	S_CHICKEN_ATK1('CHKN', 0, 8.0 / 35.0, S_CHICKEN_ATK2) { A_FaceTarget(); }
	S_CHICKEN_ATK2('CHKN', 2, 10.0 / 35.0, S_CHICKEN_WALK1) { A_ChicAttack(); }
	S_CHICKEN_DIE1('CHKN', 4, 6.0 / 35.0, S_CHICKEN_DIE2) { A_Scream(); }
	S_CHICKEN_DIE2('CHKN', 5, 6.0 / 35.0, S_CHICKEN_DIE3) { A_Feathers(); }
	S_CHICKEN_DIE3('CHKN', 6, 6.0 / 35.0, S_CHICKEN_DIE4) { }
	S_CHICKEN_DIE4('CHKN', 7, 6.0 / 35.0, S_CHICKEN_DIE5) { A_NoBlocking(); }
	S_CHICKEN_DIE5('CHKN', 8, 6.0 / 35.0, S_CHICKEN_DIE6) { }
	S_CHICKEN_DIE6('CHKN', 9, 6.0 / 35.0, S_CHICKEN_DIE7) { }
	S_CHICKEN_DIE7('CHKN', 10, 6.0 / 35.0, S_CHICKEN_DIE8) { }
	S_CHICKEN_DIE8('CHKN', 11, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 10;
	Radius = 9.0;
	Height = 22.0;
	Mass = 40.0;
	StepSpeed = 4.0;
	PainChance = 0.78125;
	bDropOff = true;
	bWindThrust = true;
	IdleState = S_CHICKEN_LOOK1;
	SeeState = S_CHICKEN_WALK1;
	MeleeState = S_CHICKEN_ATK1;
	PainState = S_CHICKEN_PAIN1;
	DeathState = S_CHICKEN_DIE1;
	SightSound = 'ChickenPain';
	ActiveSound = 'ChickenActive';
	AttackSound = 'ChickenAttack';
	PainSound = 'ChickenPain';
	DeathSound = 'ChickenDeath';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2002/10/26 16:32:22  dj_jl
//  New style of defining classes.
//
//**************************************************************************
