//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Screen resolution menu
//**
//**************************************************************************

struct mode_t
{
	int width;
	int height;
};

mode_t modes[8] = {
	{320, 200},
	{320, 240},
	{640, 400},
	{640, 480},
	{800, 600},
	{1024, 768},
	{1152, 864},
	{1280, 1024}
};
int depths[4] = { 8, 16, 24, 32 };

class MenuChoice_ApplyVidMode;

//==========================================================================
//
//	MenuChoice_VideoMode
//
//==========================================================================

class MenuChoice_VideoMode:MenuChoiceEnum
{
	int GetInitialValue(void)
	{
		int w;
		int h;
		int mi;

		w = GetCvar("screen_width");
		h = GetCvar("screen_height");

		for (mi = 0; mi < 8; mi++)
		{
			if (modes[mi].width == w && modes[mi].height == h)
			{
				break;
			}
		}
		if (mi == 8)
		{
			mi = 0;
		}
		return mi;
	}

	bool SetNewValue(int newValue)
	{
		return true;
	}

	int GetModeWidth(void)
	{
		return modes[Value].width;
	}

	int GetModeHeight(void)
	{
		return modes[Value].height;
	}

	defaultproperties
	{
		Text = "Resolution";
		EnumNames[0] = "320x200";
		EnumNames[1] = "320x240";
		EnumNames[2] = "640x400";
		EnumNames[3] = "640x480";
		EnumNames[4] = "800x600";
		EnumNames[5] = "1024x768";
		EnumNames[6] = "1152x864";
		EnumNames[7] = "1280x1024";
	}
}

//==========================================================================
//
//	MenuChoice_BitDepth
//
//==========================================================================

class MenuChoice_BitDepth:MenuChoiceEnum
{
	int GetInitialValue(void)
	{
		int b;
		int bi;

		b = GetCvar("screen_bpp");

		for (bi = 0; bi < 4; bi++)
		{
			if (depths[bi] == b)
			{
				break;
			}
		}
		if (bi == 4)
		{
			bi = 0;
		}
		return bi;
	}

	bool SetNewValue(int newValue)
	{
		return true;
	}

	int GetDepth(void)
	{
		return depths[Value];
	}

	defaultproperties
	{
		Text = "Bit depth";
		EnumNames[0] = "8";
		EnumNames[1] = "16";
		EnumNames[2] = "24";
		EnumNames[3] = "32";
	}
}

//==========================================================================
//
//	MenuScreenScreenResolution
//
//==========================================================================

class MenuScreenScreenResolution:MenuScreen
{
	MenuChoice_VideoMode Mode;
	MenuChoice_BitDepth Depth;

	void CreateChoices(void)
	{
		Mode = MenuChoice_VideoMode(NewChild(MenuChoice_VideoMode));
		Mode.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += Mode.Height;

		Depth = MenuChoice_BitDepth(NewChild(MenuChoice_BitDepth));
		Depth.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += Depth.Height;

		::CreateChoices();
	}

	void SetMode(void)
	{
		CmdBuf_AddText("SetResolution %d %d %d\n", Mode.GetModeWidth(),
			Mode.GetModeHeight(), Depth.GetDepth());
	}

	defaultproperties
	{
		Choices[0] = MenuChoice_ApplyVidMode;
		ChoicesStartX = 120;
		ChoicesStartY = 26;
		SelectorType = MenuSelector_SmallRight;
		Title = "SCREEN RESOLUTION";
	}
}

//==========================================================================
//
//	MenuChoice_ApplyVidMode
//
//==========================================================================

class MenuChoice_ApplyVidMode:MenuSmallTextButton
{
	void ActivateEvent(void)
	{
		MenuScreenScreenResolution(Parent).SetMode();
	}

	defaultproperties
	{
		Text = "Set Resolution";
	}
}

void menu_resolution(void)
{
	PushMenuScreen(SpawnMenu(MenuScreenScreenResolution));
}

//**************************************************************************
//
//  $Log$
//  Revision 1.9  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.8  2002/05/29 16:50:26  dj_jl
//  Started a work on native Window classes.
//
//  Revision 1.7  2002/01/23 17:54:23  dj_jl
//  Object-oriented menus, got rid of C-style type casting.
//
//  Revision 1.6  2002/01/21 18:21:32  dj_jl
//  Working on object-oriented menus
//
//  Revision 1.5  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/23 17:38:15  dj_jl
//  Added video options menu
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
