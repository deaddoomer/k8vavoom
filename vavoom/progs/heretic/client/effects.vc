//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define PCOLOR(r, g, b)		(0xff000000 + ((r) << 16) + ((g) << 8) + (b))

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int		ecolors[8] =
{
	0,					// EF_DL_NONE
	RGB(255, 255, 255),	// EF_DL_WHITE
	RGB(255, 32, 32),	// EF_DL_RED
	RGB(32, 255, 32),	// EF_DL_GREEN
	RGB(16, 16, 255),	// EF_DL_BLUE
	RGB(255, 0, 255)	// EF_DL_MAGENTA
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	ParseGunShot
//
//==========================================================================

void ParseGunShot(void)
{
	TVec		org;
	int			i, j;
	particle_t	*p;
	int			c;

	org.x = itof(MSG_ReadShort());
	org.y = itof(MSG_ReadShort());
	org.z = itof(MSG_ReadShort());

	for (i = 0; i < 20; i++)
	{
		p = NewParticle();
		if (!p)
			return;

		p->org = org;
		c = P_Random() >> 1;
		p->color = PCOLOR(c, c, c);
		p->die = cl->time + 0.5 * Random();
		p->vel.x = 32.0 * (Random() - 0.5);
		p->vel.y = 32.0 * (Random() - 0.5);
		p->vel.z = 32.0 * (Random() - 0.5);
	}
}

//==========================================================================
//
//	ParseBlood
//
//==========================================================================

void ParseBlood(void)
{
	TVec		org;
	int			damage;
	int			i, j;
	particle_t	*p;
	int			c;

	org.x = itof(MSG_ReadShort());
	org.y = itof(MSG_ReadShort());
	org.z = itof(MSG_ReadShort());
	damage = MSG_ReadByte();

	for (i = 0; i < damage; i++)
	{
		p = NewParticle();
		if (!p)
			return;

		p->org = org;
		c = P_Random() >> 1;
		p->color = PCOLOR(32 + c, c >> 4, c >> 4);
		p->die = cl->time + 0.5 * Random();
		p->vel.x = 32.0 * (Random() - 0.5);
		p->vel.y = 32.0 * (Random() - 0.5);
		p->vel.z = 32.0 * (Random() - 0.5);
	}
}

//==========================================================================
//
//	ParseExplosion
//
//==========================================================================

void ParseExplosion(void)
{
	TVec		org;
	dlight_t	*dl;
	int			etype;

	etype = MSG_ReadByte();
	org.x = itof(MSG_ReadShort());
	org.y = itof(MSG_ReadShort());
	org.z = itof(MSG_ReadShort());

	dl = AllocDlight(0);
	dl->origin = org;
	dl->radius = 350.0;
	dl->color = ecolors[etype];
	dl->die = cl->time + 0.5;
	dl->decay = 300.0;
}

//==========================================================================
//
//	ParseServerCommand
//
//==========================================================================

boolean ParseServerCommand(int cmd_type)
{
	switch (cmd_type)
	{
	 case svc_gun_shot:
		ParseGunShot();
		break;

	 case svc_blood:
		ParseBlood();
		break;

	 case svc_explosion:
		ParseExplosion();
		break;

	 default:
		return false;
	}
	return true;
}

//==========================================================================
//
//	UpdateParticle
//
//==========================================================================

void UpdateParticle(particle_t *p)
{
}

//==========================================================================
//
//	CL_UpdateMobj
//
//==========================================================================

void CL_UpdateMobj(clmobj_t *mobj, int key)
{
	dlight_t	*dl;

	switch (mobj->effects & EF_DLIGHT_MASK)
	{
	 case EF_DL_NONE:
		break;

	 case EF_DL_WHITE:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->radius = 200.0;
		dl->color = RGB(255, 255, 255);
		dl->die = cl->time + 0.1;
		break;

	 case EF_DL_RED:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->radius = 200.0;
		dl->color = RGB(255, 0, 0);
		dl->die = cl->time + 0.1;
		break;

	 case EF_DL_GREEN:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->radius = 200.0;
		dl->color = RGB(0, 255, 0);
		dl->die = cl->time + 0.1;
		break;

	 case EF_DL_BLUE:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->radius = 200.0;
		dl->color = RGB(0, 0, 255);
		dl->die = cl->time + 0.1;
		break;

	 case EF_DL_MAGENTA:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->radius = 200.0;
		dl->color = RGB(255, 0, 255);
		dl->die = cl->time + 0.1;
		break;
	}
}

