//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	$Id$
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**	$Log$
//**	Revision 1.2  2001/07/27 14:27:52  dj_jl
//**	Update with Id-s and Log-s, some fixes
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	SBP_BARBACK,
    SBP_GOD1,
    SBP_GOD2,
	SBP_LTFCTOP,
	SBP_RTFCTOP,
    SBP_CHAIN,
	SBP_LIFEGEM0,
	SBP_LIFEGEM1,
	SBP_LIFEGEM2,
	SBP_LIFEGEM3,
	SBP_LTFACE,
	SBP_RTFACE,
	SBP_STATBAR,
	SBP_LIFEBAR,
	SBP_IN0,
	SBP_IN1,
	SBP_IN2,
	SBP_IN3,
	SBP_IN4,
	SBP_IN5,
	SBP_IN6,
	SBP_IN7,
	SBP_IN8,
	SBP_IN9,
	SBP_NEGNUM,
	SBP_LAME,
	SBP_INAMGLD,
	SBP_INAMBOW,
	SBP_INAMBST,
	SBP_INAMRAM,
	SBP_INAMPNX,
	SBP_INAMLOB,
	SBP_YKEYICON,
	SBP_GKEYICON,
	SBP_BKEYICON,
    SBP_USEARTIA,
    SBP_USEARTIB,
    SBP_USEARTIC,
    SBP_USEARTID,
	SBP_ARTIBOX,
	SBP_ARTIINVU,
	SBP_ARTIINVS,
	SBP_ARTIPTN2,
	SBP_ARTISPHL,
	SBP_ARTIPWBK,
	SBP_ARTITRCH,
	SBP_ARTIFBMB,
	SBP_ARTIEGGC,
	SBP_ARTISOAR,
	SBP_ARTIATLP,
	SBP_SMALLIN0,
	SBP_SMALLIN1,
	SBP_SMALLIN2,
	SBP_SMALLIN3,
	SBP_SMALLIN4,
	SBP_SMALLIN5,
	SBP_SMALLIN6,
	SBP_SMALLIN7,
	SBP_SMALLIN8,
	SBP_SMALLIN9,
	SBP_INVBAR,
	SBP_SELECTBO,
	SBP_INVGEML1,
	SBP_INVGEML2,
	SBP_INVGEMR1,
	SBP_INVGEMR2,
	SBP_FONTB16,
	SBP_FONTB17,
	SBP_FONTB18,
	SBP_FONTB19,
	SBP_FONTB20,
	SBP_FONTB21,
	SBP_FONTB22,
	SBP_FONTB23,
	SBP_FONTB24,
	SBP_FONTB25,
	SBP_SPFLY0,
	SBP_SPFLY1,
	SBP_SPFLY2,
	SBP_SPFLY3,
	SBP_SPFLY4,
	SBP_SPFLY5,
	SBP_SPFLY6,
	SBP_SPFLY7,
	SBP_SPFLY8,
	SBP_SPFLY9,
	SBP_SPFLY10,
	SBP_SPFLY11,
	SBP_SPFLY12,
	SBP_SPFLY13,
	SBP_SPFLY14,
	SBP_SPFLY15,
	SBP_SPINBK0,
	SBP_SPINBK1,
	SBP_SPINBK2,
	SBP_SPINBK3,
	SBP_SPINBK4,
	SBP_SPINBK5,
	SBP_SPINBK6,
	SBP_SPINBK7,
	SBP_SPINBK8,
	SBP_SPINBK9,
	SBP_SPINBK10,
	SBP_SPINBK11,
	SBP_SPINBK12,
	SBP_SPINBK13,
	SBP_SPINBK14,
	SBP_SPINBK15,

	NUM_SB_PATCHES
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

string	sb_patch_names[] =
{
	"BARBACK",
    "GOD1",
    "GOD2",
	"LTFCTOP",
	"RTFCTOP",
	"CHAIN",
	"LIFEGEM0",
	"LIFEGEM1",
	"LIFEGEM2",
	"LIFEGEM3",
	"LTFACE",
	"RTFACE",
	"STATBAR",
	"LIFEBAR",
	"IN0",
	"IN1",
	"IN2",
	"IN3",
	"IN4",
	"IN5",
	"IN6",
	"IN7",
	"IN8",
	"IN9",
	"NEGNUM",
	"LAME",
	"INAMGLD",
	"INAMBOW",
	"INAMBST",
	"INAMRAM",
	"INAMPNX",
	"INAMLOB",
	"YKEYICON",
	"GKEYICON",
	"BKEYICON",
    "USEARTIA",
    "USEARTIB",
    "USEARTIC",
    "USEARTID",
	"ARTIBOX",    // none
	"ARTIINVU",   // invulnerability
	"ARTIINVS",   // invisibility
	"ARTIPTN2",   // health
	"ARTISPHL",   // superhealth
	"ARTIPWBK",   // tomeofpower
	"ARTITRCH",   // torch
	"ARTIFBMB",   // firebomb
	"ARTIEGGC",   // egg
	"ARTISOAR",   // fly
	"ARTIATLP",   // teleport
	"SMALLIN0",
	"SMALLIN1",
	"SMALLIN2",
	"SMALLIN3",
	"SMALLIN4",
	"SMALLIN5",
	"SMALLIN6",
	"SMALLIN7",
	"SMALLIN8",
	"SMALLIN9",
	"INVBAR",
	"SELECTBO",
	"INVGEML1",
	"INVGEML2",
	"INVGEMR1",
	"INVGEMR2",
	"FONTB16",
	"FONTB17",
	"FONTB18",
	"FONTB19",
	"FONTB20",
	"FONTB21",
	"FONTB22",
	"FONTB23",
	"FONTB24",
	"FONTB25",
	"SPFLY0",
	"SPFLY1",
	"SPFLY2",
	"SPFLY3",
	"SPFLY4",
	"SPFLY5",
	"SPFLY6",
	"SPFLY7",
	"SPFLY8",
	"SPFLY9",
	"SPFLY10",
	"SPFLY11",
	"SPFLY12",
	"SPFLY13",
	"SPFLY14",
	"SPFLY15",
	"SPINBK0",
	"SPINBK1",
	"SPINBK2",
	"SPINBK3",
	"SPINBK4",
	"SPINBK5",
	"SPINBK6",
	"SPINBK7",
	"SPINBK8",
	"SPINBK9",
	"SPINBK10",
	"SPINBK11",
	"SPINBK12",
	"SPINBK13",
	"SPINBK14",
	"SPINBK15",
	""
};

int 			sb_height = 42;

int				sb_frags;
int				sb_health;
int				sb_ammo;
int				sb_readyarti;
int				sb_readyarticount;
int				sb_artitype[7];
int				sb_articount[7];
int				sb_invgeml;
int				sb_invgemr;
int				sb_flightframe;
int				sb_bookframe;

boolean			hitCenterFrame;

//
//	CHAIN
//

int 			HealthMarker;
int 			ChainWiggle;

//
//	WIDGETS
//

sb_widget_t		*w_chain;
sb_widget_t		*w_lifegem;
sb_widget_t		*w_selectbox1;
sb_widget_t		*w_selectbox2;

//
//	WIDGET VISIBILITY
//

boolean			sb_baron;
boolean			sb_godmodeon;
boolean			sb_mainbaron;
boolean			sb_ammoon;
boolean			sb_keyon[3];
boolean			sb_artiflash1on;
boolean			sb_readyarti1on;
boolean			sb_inventorybar1on;
boolean			sb_fullscreenon;
boolean			sb_ammo2on;
boolean			sb_readyarti2on;
boolean			sb_inventorybar2on;

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  SB_CreateWidgets
//
//==========================================================================

void SB_CreateWidgets(void)
{
	int 	i;

    //
    //	BAR BACKGROUND
    //

    //	Background
	SB_CreateWidget(SBW_PATCH, 0, 158, SBP_BARBACK, SB_STYLE_NORMAL, &sb_baron, 0, NULL);

	//	God mode
	SB_CreateWidget(SBW_PATCH, 16, 167, SBP_GOD1, SB_STYLE_NORMAL, &sb_godmodeon, 0, NULL);
	SB_CreateWidget(SBW_PATCH, 287, 167, SBP_GOD2, SB_STYLE_NORMAL, &sb_godmodeon, 0, NULL);

    //	Top
	SB_CreateWidget(SBW_PATCH, 0, 148, SBP_LTFCTOP, SB_STYLE_NORMAL, &sb_baron, 0, NULL);
	SB_CreateWidget(SBW_PATCH, 290, 148, SBP_RTFCTOP, SB_STYLE_NORMAL, &sb_baron, 0, NULL);

    //	Chain
	w_chain = SB_CreateWidget(SBW_PATCH, 2, 191, SBP_CHAIN, SB_STYLE_NORMAL, &sb_baron, 0, NULL);
	if (!netgame)
	{ // single player game uses red life gem
		w_lifegem = SB_CreateWidget(SBW_PATCH, 17, 191, SBP_LIFEGEM2, SB_STYLE_NORMAL, &sb_baron, 0, NULL);
	}
	else
	{
		w_lifegem = SB_CreateWidget(SBW_PATCHI, 17, 191, SBP_LIFEGEM0, SB_STYLE_NORMAL, &sb_baron, 0, &cl->clientnum);
	}
	SB_CreateWidget(SBW_PATCH, 0, 190, SBP_LTFACE, SB_STYLE_NORMAL, &sb_baron, 0, NULL);
	SB_CreateWidget(SBW_PATCH, 276, 190, SBP_RTFACE, SB_STYLE_NORMAL, &sb_baron, 0, NULL);
	for (i = 0; i < 16; i++)
	{
		SB_CreateWidget(SBW_SHADE, 277 + i, 190, 10, SB_STYLE_NORMAL, &sb_baron, i / 2, NULL);
		SB_CreateWidget(SBW_SHADE, 19 + i, 190, 10, SB_STYLE_NORMAL, &sb_baron, 7 - (i / 2), NULL);
	}

    //
    //	MAIN BAR
    //

	//	Main interface
	if (deathmatch)
	{
		SB_CreateWidget(SBW_PATCH, 34, 160, SBP_STATBAR, SB_STYLE_NORMAL, &sb_mainbaron, 0, NULL);
	}
	else
	{
		SB_CreateWidget(SBW_PATCH, 34, 160, SBP_LIFEBAR, SB_STYLE_NORMAL, &sb_mainbaron, 0, NULL);
	}

	//	Frags / Health
	if (deathmatch)
	{
		SB_CreateWidget(SBW_NUMBER9, 61, 170, SBP_IN0, SB_STYLE_NORMAL, &sb_mainbaron, 0, &sb_frags);
	}
	else
	{
		SB_CreateWidget(SBW_NUMBER9, 61, 170, SBP_IN0, SB_STYLE_NORMAL, &sb_mainbaron, 0, &sb_health);
	}

	//	Ammo
	SB_CreateWidget(SBW_NUMBER9, 109, 162, SBP_IN0, SB_STYLE_NORMAL, &sb_ammoon, 0, &sb_ammo);
	SB_CreateWidget(SBW_PATCHI, 111, 172, SBP_INAMGLD - 1, SB_STYLE_NORMAL, &sb_ammoon, 0, &cl->readyweapon);

	//	Keys
	SB_CreateWidget(SBW_PATCH, 153, 164, SBP_YKEYICON, SB_STYLE_NORMAL, &sb_keyon[0], 0, NULL);
	SB_CreateWidget(SBW_PATCH, 153, 172, SBP_GKEYICON, SB_STYLE_NORMAL, &sb_keyon[1], 0, NULL);
	SB_CreateWidget(SBW_PATCH, 153, 180, SBP_BKEYICON, SB_STYLE_NORMAL, &sb_keyon[2], 0, NULL);

    //	Ready artifact
    SB_CreateWidget(SBW_PATCHI, 182, 161, SBP_USEARTIA, SB_STYLE_NORMAL, &sb_artiflash1on, 0, &cl->ArtifactFlash);
    SB_CreateWidget(SBW_PATCHI, 179, 160, SBP_ARTIBOX, SB_STYLE_NORMAL, &sb_readyarti1on, 0, &sb_readyarti);
    SB_CreateWidget(SBW_INUMBER, 201, 182, SBP_SMALLIN0, SB_STYLE_NORMAL, &sb_readyarti1on, 0, &sb_readyarticount);

	//	Armor
	SB_CreateWidget(SBW_NUMBER9, 228, 170, SBP_IN0, SB_STYLE_NORMAL, &sb_mainbaron, 0, &cl->armorpoints);

	//	Inventory
	SB_CreateWidget(SBW_PATCH, 34, 160, SBP_INVBAR, SB_STYLE_NORMAL, &sb_inventorybar1on, 0, NULL);
	for (i = 0; i < 7; i++)
	{
		SB_CreateWidget(SBW_PATCHI, 50 + i * 31, 160, SBP_ARTIBOX, SB_STYLE_NORMAL, &sb_inventorybar1on, 0, &sb_artitype[i]);
		SB_CreateWidget(SBW_INUMBER, 69 + i * 31, 182, SBP_SMALLIN0, SB_STYLE_NORMAL, &sb_inventorybar1on, 0, &sb_articount[i]);
	}
	w_selectbox1 = SB_CreateWidget(SBW_PATCH, 50, 189, SBP_SELECTBO, SB_STYLE_NORMAL, &sb_inventorybar1on, 0, NULL);
	SB_CreateWidget(SBW_PATCHI, 38, 159, SBP_INVGEML1, SB_STYLE_NORMAL, &sb_inventorybar1on, 0, &sb_invgeml);
	SB_CreateWidget(SBW_PATCHI, 269, 159, SBP_INVGEMR1, SB_STYLE_NORMAL, &sb_inventorybar1on, 0, &sb_invgemr);

	//
    //	FULLSCREEN
    //

	//	Health
	SB_CreateWidget(SBW_NUMBER12, 5, 180, SBP_FONTB16, SB_STYLE_SHADOWED, &sb_fullscreenon, 0, &cl->health);

    //	Frags
	if(deathmatch)
	{
		SB_CreateWidget(SBW_NUMBER9, 45, 185, SBP_IN0, SB_STYLE_NORMAL, &sb_fullscreenon, 0, &sb_frags);
	}

	//	Ammo
	SB_CreateWidget(SBW_NUMBER9, 290, 186, SBP_IN0, SB_STYLE_NORMAL, &sb_ammo2on, 0, &sb_ammo);
	SB_CreateWidget(SBW_PATCHI, 270, 184, SBP_INAMGLD - 1, SB_STYLE_NORMAL, &sb_ammo2on, 0, &cl->readyweapon);

    //	Ready artifact
	SB_CreateWidget(SBW_PATCH, 286, 150, SBP_ARTIBOX, SB_STYLE_TRANSLUCENT, &sb_readyarti2on, 40, NULL);
    SB_CreateWidget(SBW_PATCHI, 286, 150, SBP_ARTIBOX, SB_STYLE_NORMAL, &sb_readyarti2on, 0, &sb_readyarti);
    SB_CreateWidget(SBW_INUMBER, 307, 172, SBP_SMALLIN0, SB_STYLE_NORMAL, &sb_readyarti2on, 0, &sb_readyarticount);

    //	Inventory
	for (i = 0; i < 7; i++)
	{
		SB_CreateWidget(SBW_PATCH, 50 + i * 31, 168, SBP_ARTIBOX, SB_STYLE_TRANSLUCENT, &sb_inventorybar2on, 40, NULL);
		SB_CreateWidget(SBW_PATCHI, 50 + i * 31, 168, SBP_ARTIBOX, SB_STYLE_NORMAL, &sb_inventorybar2on, 0, &sb_artitype[i]);
		SB_CreateWidget(SBW_INUMBER, 69 + i * 31, 190, SBP_SMALLIN0, SB_STYLE_NORMAL, &sb_inventorybar2on, 0, &sb_articount[i]);
	}
	w_selectbox2 = SB_CreateWidget(SBW_PATCH, 50, 197, SBP_SELECTBO, SB_STYLE_NORMAL, &sb_inventorybar2on, 0, NULL);
	SB_CreateWidget(SBW_PATCHI, 38, 167, SBP_INVGEML1, SB_STYLE_NORMAL, &sb_inventorybar2on, 0, &sb_invgeml);
	SB_CreateWidget(SBW_PATCHI, 269, 167, SBP_INVGEMR1, SB_STYLE_NORMAL, &sb_inventorybar2on, 0, &sb_invgemr);

    //
    //	ICONS
    //

	//	Artifact rotating icons
	SB_CreateWidget(SBW_PATCHI, 20, 17, SBP_SPFLY0, SB_STYLE_NORMAL, &cl->powers[pw_flight], 0, &sb_flightframe);
	SB_CreateWidget(SBW_PATCHI, 300, 17, SBP_SPINBK0, SB_STYLE_NORMAL, &cl->powers[pw_weaponlevel2], 0, &sb_bookframe);
}

//==========================================================================
//
//  SB_OnDraw
//
//==========================================================================

void SB_OnDraw(int sb_view)
{
	int 	chainY;
	int 	healthPos;
	int 	i;
	int 	x;

    //	Visibility
    sb_baron = sb_view != SB_VIEW_FULLSCREEN;
	sb_godmodeon = sb_baron && cl->cheats & CF_GODMODE;
    sb_mainbaron = sb_baron && !cl->inventoryTics;
	sb_ammoon = sb_mainbaron &&
		cl->readyweapon > 0 && cl->readyweapon < 7 &&
		cl->ammo[cl->readyammo];
	sb_keyon[0] = sb_mainbaron && (cl->keys & (1 << key_yellow));
	sb_keyon[1] = sb_mainbaron && (cl->keys & (1 << key_green));
	sb_keyon[2] = sb_mainbaron && (cl->keys & (1 << key_blue));
	sb_artiflash1on = sb_mainbaron && cl->ArtifactFlash;
	sb_readyarti1on = sb_mainbaron && !cl->ArtifactFlash && cl->readyArtifact > 0;
    sb_inventorybar1on = sb_baron && cl->inventoryTics;
	sb_fullscreenon = !sb_baron;
	sb_ammo2on = sb_fullscreenon &&
		cl->readyweapon > 0 && cl->readyweapon < 7 &&
		cl->ammo[cl->readyammo];
	sb_readyarti2on = sb_fullscreenon && cl->readyArtifact > 0 && !cl->inventoryTics;
    sb_inventorybar2on = !sb_baron && cl->inventoryTics;

	//	Healtn and chain
	sb_health = HealthMarker;
	if (sb_health < 0)
	{
		sb_health = 0;
	}
	else if (sb_health > 100)
	{
		sb_health = 100;
	}
	healthPos = (sb_health * 256) / 100;
	chainY = (HealthMarker == cl->health) ? 191 : 191 + ChainWiggle;
	w_chain->x = 2 + (healthPos % 17);
    w_chain->y = chainY;
    w_lifegem->x = 17 + healthPos;
    w_lifegem->y = chainY;

    //	Ammo
	if (sb_ammoon || sb_ammo2on)
		sb_ammo = cl->ammo[cl->readyammo];
	else
    	sb_ammo = 0;

	//	Ready artifact
	sb_readyarti = cl->readyArtifact;
	sb_readyarticount = cl->inventory[cl->inv_ptr].count;

    //	Inventory
    if (cl->inventoryTics)
    {
		x = cl->inv_ptr - cl->curpos;
		for (i = 0; i < 7; i++)
		{
			if (cl->inventorySlotNum > x + i
				&& cl->inventory[x + i].type != arti_none)
			{
                sb_artitype[i] = cl->inventory[x + i].type;
				sb_articount[i] = cl->inventory[x + i].count;
			}
            else
			{
                sb_artitype[i] = -1;
				sb_articount[i] = 0;
			}
		}
		w_selectbox1->x = 50 + cl->curpos * 31;
		w_selectbox2->x = 50 + cl->curpos * 31;
		sb_invgeml = (x != 0) ? !(level->tictime & 4) ? 0 : 1 : -1;
		sb_invgemr = (cl->inventorySlotNum - x > 7) ? !(level->tictime & 4) ? 0 : 1 : -1;
    }

	// Flight icons
    sb_flightframe = -1;
	if (cl->powers[pw_flight])
	{
		if (cl->powers[pw_flight] > ftoi(BLINKTHRESHOLD * 35.0)
			|| !(cl->powers[pw_flight] & 16))
		{		
			sb_flightframe = (level->tictime / 3) & 15;
#ifdef FIXME
			if (!cl->mo || cl->mo->flags2 & MF2_FLY)
#endif
			{
				if (hitCenterFrame && sb_flightframe != 15 && sb_flightframe != 0)
				{
					sb_flightframe = 15;
				}
				else
				{
					hitCenterFrame = false;
				}
			}
#ifdef FIXME
			else
			{
				if (hitCenterFrame || sb_flightframe == 15 || sb_flightframe == 0)
				{
					sb_flightframe = 15;
					hitCenterFrame = true;
				}
			}
#endif
		}
	}

    sb_bookframe = -1;
	if (cl->powers[pw_weaponlevel2] && !cl->chickenTics)
	{
		if (cl->powers[pw_weaponlevel2] > ftoi(BLINKTHRESHOLD * 35.0)
			|| !(cl->powers[pw_weaponlevel2] & 16))
		{
			sb_bookframe = (level->tictime / 3) & 15;
		}
	}
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets(void)
{
	int		i;
	int 	delta;
	int 	curHealth;

	if (level->tictime & 1)
	{
		ChainWiggle = P_Random() & 1;
	}
	sb_frags = 0;
	for (i = 0; i < MAXPLAYERS; i++)
	{
		sb_frags += cl->frags[i];
	}

	curHealth = cl->health;
	if (curHealth < 0)
	{
		curHealth = 0;
	}
	if (curHealth < HealthMarker)
	{
		delta = (HealthMarker - curHealth) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 8)
		{
			delta = 8;
		}
		HealthMarker -= delta;
	}
	else if (curHealth > HealthMarker)
	{
		delta = (curHealth - HealthMarker) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 8)
		{
			delta = 8;
		}
		HealthMarker += delta;
	}
}


