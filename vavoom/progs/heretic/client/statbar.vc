//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int sb_height = 42;

// Chain
int HealthMarker;
int ChainWiggle;

bool hitCenterFrame;

// Graphics
int pic_barback;
int pic_god1;
int pic_god2;
int pic_barltop;
int pic_barrtop;
int pic_chain;
int pic_lifegem;
int pic_ltface;
int pic_rtface;
int pic_mainbar;
int pic_innum[10];
int pic_smallinnum[10];
int pic_minus;
int pic_lame;
int pic_bignum[10];
int bignumwidth[10];
int pic_ammoicon[6];
int pic_ykey;
int pic_gkey;
int pic_bkey;
int pic_artiflash[4];
int pic_arti[10];
int pic_artibox;
int pic_invbar;
int pic_selectbox;
int pic_flight[16];
int pic_book[16];
int pic_invgeml[2];
int pic_invgemr[2];
int pic_paused;
// For the Fullscreen stuff
int pic_health;
int pic_armor2;


// CODE --------------------------------------------------------------------

//==========================================================================
//
//  SB_StartMap
//
//==========================================================================

void SB_StartMap(void)
{
	int i;
	int namebuf[3];
	string Name = ARR2STR(namebuf);
	picinfo_t info;

	pic_barback = R_RegisterPic("BARBACK", PIC_PATCH);
	pic_god1 = R_RegisterPic("GOD1", PIC_PATCH);
	pic_god2 = R_RegisterPic("GOD2", PIC_PATCH);
	pic_barltop = R_RegisterPic("LTFCTOP", PIC_PATCH);
	pic_barrtop = R_RegisterPic("RTFCTOP", PIC_PATCH);
	pic_chain = R_RegisterPic("CHAIN", PIC_PATCH);
	if (!netgame)
	{
		// single player game uses red life gem
		pic_lifegem = R_RegisterPic("LIFEGEM2", PIC_PATCH);
	}
	else
	{
		sprint(Name, "LIFEGEM%d", cl->clientnum);
		pic_lifegem = R_RegisterPic(Name, PIC_PATCH);
	}
	pic_ltface = R_RegisterPic("LTFACE", PIC_PATCH);
	pic_rtface = R_RegisterPic("RTFACE", PIC_PATCH);

	if (deathmatch)
	{
		pic_mainbar = R_RegisterPic("STATBAR", PIC_PATCH);
	}
	else
	{
		pic_mainbar = R_RegisterPic("LIFEBAR", PIC_PATCH);
	}
	for (i = 0; i < 10; i++)
	{
		sprint(Name, "IN%d", i);
		pic_innum[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "SMALLIN%d", i);
		pic_smallinnum[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "FONTB%d", 16 + i);
		pic_bignum[i] = R_RegisterPic(Name, PIC_PATCH);
		R_GetPicInfo(pic_bignum[i], &info);
		bignumwidth[i] = info.width;
	}
	pic_minus = R_RegisterPic("NEGNUM", PIC_PATCH);
	pic_lame = R_RegisterPic("LAME", PIC_PATCH);
	pic_ammoicon[0] = R_RegisterPic("INAMGLD", PIC_PATCH);
	pic_ammoicon[1] = R_RegisterPic("INAMBOW", PIC_PATCH);
	pic_ammoicon[2] = R_RegisterPic("INAMBST", PIC_PATCH);
	pic_ammoicon[3] = R_RegisterPic("INAMRAM", PIC_PATCH);
	pic_ammoicon[4] = R_RegisterPic("INAMPNX", PIC_PATCH);
	pic_ammoicon[5] = R_RegisterPic("INAMLOB", PIC_PATCH);
	pic_ykey = R_RegisterPic("YKEYICON", PIC_PATCH);
	pic_gkey = R_RegisterPic("GKEYICON", PIC_PATCH);
	pic_bkey = R_RegisterPic("BKEYICON", PIC_PATCH);

	pic_artiflash[0] = R_RegisterPic("USEARTIA", PIC_PATCH);
	pic_artiflash[1] = R_RegisterPic("USEARTIB", PIC_PATCH);
	pic_artiflash[2] = R_RegisterPic("USEARTIC", PIC_PATCH);
	pic_artiflash[3] = R_RegisterPic("USEARTID", PIC_PATCH);
	pic_arti[0] = R_RegisterPic("ARTIINVU", PIC_PATCH);	// invulnerability
	pic_arti[1] = R_RegisterPic("ARTIINVS", PIC_PATCH);	// invisibility
	pic_arti[2] = R_RegisterPic("ARTIPTN2", PIC_PATCH);	// health
	pic_arti[3] = R_RegisterPic("ARTISPHL", PIC_PATCH);	// superhealth
	pic_arti[4] = R_RegisterPic("ARTIPWBK", PIC_PATCH);	// tomeofpower
	pic_arti[5] = R_RegisterPic("ARTITRCH", PIC_PATCH);	// torch
	pic_arti[6] = R_RegisterPic("ARTIFBMB", PIC_PATCH);	// firebomb
	pic_arti[7] = R_RegisterPic("ARTIEGGC", PIC_PATCH);	// egg
	pic_arti[8] = R_RegisterPic("ARTISOAR", PIC_PATCH);	// fly
	pic_arti[9] = R_RegisterPic("ARTIATLP", PIC_PATCH);	// teleport
	pic_artibox = R_RegisterPic("ARTIBOX", PIC_PATCH);
	pic_invbar = R_RegisterPic("INVBAR", PIC_PATCH);
	pic_selectbox = R_RegisterPic("SELECTBO", PIC_PATCH);
	pic_invgeml[0] = R_RegisterPic("INVGEML1", PIC_PATCH);
	pic_invgeml[1] = R_RegisterPic("INVGEML2", PIC_PATCH);
	pic_invgemr[0] = R_RegisterPic("INVGEMR1", PIC_PATCH);
	pic_invgemr[1] = R_RegisterPic("INVGEMR2", PIC_PATCH);

	for (i = 0; i < 16; i++)
	{
		sprint(Name, "SPFLY%d", i);
		pic_flight[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "SPINBK%d", i);
		pic_book[i] = R_RegisterPic(Name, PIC_PATCH);
	}

	pic_paused = R_RegisterPic("PAUSED", PIC_PATCH);

	//  FULLSCREEN ICONS FOR HEALTH AND ARMOR
	pic_health = R_RegisterPic("PTN1A0", PIC_PATCH);
	pic_armor2 = R_RegisterPic("SHD2A0", PIC_PATCH);
}

//==========================================================================
//
//	SB_DrawNumber9
//
//==========================================================================

void SB_DrawNumber9(int x, int y, int num)
{
	int w = 9;
	int neg = num < 0;

	if (num < -9)
	{
		//	Lame message
		R_DrawPic(x + 1, y + 1, pic_lame);
		return;
	}
	if (neg)
	{
		num = -num;
	}

	x = x + 27;

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic(x - w, y, pic_innum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic(x, y, pic_innum[num % 10]);
		num /= 10;
	}

	// draw a minus sign if necessary
	if (neg)
	{
		R_DrawPic(x - 8, y, pic_minus);
	}
}

//==========================================================================
//
//	SB_DrawNumber12
//
//==========================================================================

void SB_DrawNumber12(int x, int y, int num)
{
	x = x + 36;
    
	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawShadowedPic(x - bignumwidth[0], y, pic_bignum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= bignumwidth[num % 10];
		R_DrawShadowedPic(x, y, pic_bignum[num % 10]);
		num /= 10;
		x -= 3;
	}
}

//==========================================================================
//
//	SB_DrawINumber
//
//==========================================================================

void SB_DrawINumber(int x, int y, int num)
{
	if (num > 1)
	{
		x = x + 8;
    
		// draw the new number
		while (num)
		{
			x -= 4;
			R_DrawPic(x, y, pic_smallinnum[num % 10]);
			num /= 10;
		}
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar(void)
{
	int chainY;
	int healthPos;
	int i;
	int health;

	//  Background
	R_DrawPic(0, 158, pic_barback);

	if (cl->stats.flags & SBF_GOD_MODE)
	{
		//  God mode
		R_DrawPic(16, 167, pic_god1);
		R_DrawPic(287, 167, pic_god2);
	}

	//  Top
	R_DrawPic(0, 148, pic_barltop);
	R_DrawPic(290, 148, pic_barrtop);

	//  Healtn and chain
	health = HealthMarker;
	if (health < 0)
	{
		health = 0;
	}
	else if (health > 100)
	{
		health = 100;
	}
	healthPos = (health * 256) / 100;
	chainY = (HealthMarker == cl->health) ? 191 : 191 + ChainWiggle;

	//  Chain
	R_DrawPic(2 + (healthPos % 17), chainY, pic_chain);
	R_DrawPic(17 + healthPos, chainY, pic_lifegem);
	R_DrawPic(0, 190, pic_ltface);
	R_DrawPic(276, 190, pic_rtface);
	for (i = 0; i < 16; i++)
	{
		R_ShadeRect(277 + i, 190, 1, 10, 9 + i);
		R_ShadeRect(19 + i, 190, 1, 10, 9 + 15 - i);
	}

	if (!(cl->stats.flags & SBF_INVENTORY_OPEN))
	{
		//  Main interface
		R_DrawPic(34, 160, pic_mainbar);

		//  Frags / Health
		if (deathmatch)
		{
			SB_DrawNumber9(61, 170, cl->Frags);
		}
		else
		{
			SB_DrawNumber9(61, 170, health);
		}

		if (cl->stats.readyammo)
		{
			//  Ammo
			SB_DrawNumber9(109, 162, cl->stats.readyammo);
			R_DrawPic(111, 172, pic_ammoicon[cl->readyweapon - 1]);
		}

		//  Ready artifact
		if (cl->ArtifactFlash)
		{
			R_DrawPic(182, 161, pic_artiflash[cl->ArtifactFlash - 1]);
		}
		else if (cl->readyArtifact > 0)
		{
			R_DrawPic(179, 160, pic_arti[cl->readyArtifact - 1]);
			SB_DrawINumber(201, 182, cl->inventory[cl->inv_ptr].count);
		}

		//  Keys
		if (cl->stats.flags & SBF_KEY_YELLOW)
		{
			R_DrawPic(153, 164, pic_ykey);
		}
		if (cl->stats.flags & SBF_KEY_GREEN)
		{
			R_DrawPic(153, 172, pic_gkey);
		}
		if (cl->stats.flags & SBF_KEY_BLUE)
		{
			R_DrawPic(153, 180, pic_bkey);
		}

		//  Armor
		SB_DrawNumber9(228, 170, cl->armorpoints);
	}
	else
	{
		int x;

		//  Inventory
		R_DrawPic(34, 160, pic_invbar);
		x = cl->inv_ptr - cl->curpos;
		for (i = 0; i < 7; i++)
		{
			if (cl->inventorySlotNum > x + i
				&& cl->inventory[x + i].type != arti_none)
			{
				R_DrawPic(50 + i * 31, 160,
					pic_arti[cl->inventory[x + i].type - 1]);
				SB_DrawINumber(69 + i * 31, 182, cl->inventory[x + i].count);
			}
		}
		R_DrawPic(50 + cl->curpos * 31, 189, pic_selectbox);
		if (x != 0)
		{
			R_DrawPic(38, 159, pic_invgeml[!(level->tictime & 4) ? 0 : 1]);
		}
		if ((cl->inventorySlotNum - x > 7))
		{
			R_DrawPic(269, 159, pic_invgemr[!(level->tictime & 4) ? 0 : 1]);
		}
	}
}

//==========================================================================
//
//	SB_DrawFullscreenStats
//
//==========================================================================

void SB_DrawFullscreenStats(void)
{
	int i;
	int x;

	//  Health
	SB_DrawNumber12(5, 180, cl->health);
	R_DrawPic(62, 224, pic_health);

	//  Armorpoints
	SB_DrawNumber12(5, 160, cl->armorpoints);
	R_DrawPic(62, 200, pic_armor2);

	//  Frags
	if (deathmatch)
	{
		SB_DrawNumber9(45, 185, cl->Frags);
	}

	//  Ammo
	if (cl->stats.readyammo)
	{
		SB_DrawNumber9(290, 186, cl->stats.readyammo);
		R_DrawPic(270, 184, pic_ammoicon[cl->readyweapon - 1]);
	}

	//  Keys
	if (cl->stats.flags & SBF_KEY_YELLOW)
	{
		R_DrawPic(270, 164, pic_ykey);
	}
	if (cl->stats.flags & SBF_KEY_GREEN)
	{
		R_DrawPic(270, 172, pic_gkey);
	}
	if (cl->stats.flags & SBF_KEY_BLUE)
	{
		R_DrawPic(270, 180, pic_bkey);
	}

	if (cl->stats.flags & SBF_INVENTORY_OPEN)
	{
		//  Inventory
		x = cl->inv_ptr - cl->curpos;
		for (i = 0; i < 7; i++)
		{
			R_DrawPic2(50 + i * 31, 168, pic_artibox, 40);
			if (cl->inventorySlotNum > x + i
				&& cl->inventory[x + i].type != arti_none)
			{
				R_DrawPic(50 + i * 31, 168,
					pic_arti[cl->inventory[x + i].type - 1]);
				SB_DrawINumber(69 + i * 31, 190, cl->inventory[x + i].count);
			}
		}
		R_DrawPic(50 + cl->curpos * 31, 197, pic_selectbox);
		if (x != 0)
		{
			R_DrawPic(38, 167, pic_invgeml[!(level->tictime & 4) ? 0 : 1]);
		}
		if (cl->inventorySlotNum - x > 7)
		{
			R_DrawPic(269, 167, pic_invgemr[!(level->tictime & 4) ? 0 : 1]);
		}
	}
	else if (cl->readyArtifact > 0)
	{
		//  Ready artifact
		R_DrawPic2(286, 150, pic_artibox, 40);
		R_DrawPic(286, 150, pic_arti[cl->readyArtifact - 1]);
		SB_DrawINumber(307, 172, cl->inventory[cl->inv_ptr].count);
	}
}

//==========================================================================
//
//	SB_DrawIcons
//
//==========================================================================

void SB_DrawIcons(void)
{
	int frame;

	//  Artifact rotating icons
	if (cl->stats.flags & SBF_POWER_FLIGHT)
	{
		frame = (level->tictime / 3) & 15;
		if (cl->stats.flags & SBF_IN_FLIGHT)
		{
			if (hitCenterFrame && frame != 15 && frame != 0)
			{
				frame = 15;
			}
			else
			{
				hitCenterFrame = false;
			}
		}
		else
		{
			if (hitCenterFrame || frame == 15 || frame == 0)
			{
				frame = 15;
				hitCenterFrame = true;
			}
		}
		R_DrawPic(20, 17, pic_flight[frame]);
	}

	if (cl->stats.flags & SBF_POWER_BOOK)
	{
		R_DrawPic(300, 17, pic_book[(level->tictime / 3) & 15]);
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause(void)
{
	if (cl->bPaused && GetCvar("draw_pause"))
	{
		R_DrawPic(160, netgame ? 70 : 20, pic_paused);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	if (sb_view == SB_VIEW_FULLSCREEN)
	{
		SB_DrawFullscreenStats();
	}
	else
	{
		SB_DrawMainBar();
	}
	SB_DrawIcons();
	SB_DrawPause();
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets(void)
{
	int i;
	int delta;
	int curHealth;

	if (level->tictime & 1)
	{
		ChainWiggle = P_Random() & 1;
	}

	curHealth = cl->health;
	if (curHealth < 0)
	{
		curHealth = 0;
	}
	if (curHealth < HealthMarker)
	{
		delta = (HealthMarker - curHealth) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 8)
		{
			delta = 8;
		}
		HealthMarker -= delta;
	}
	else if (curHealth > HealthMarker)
	{
		delta = (curHealth - HealthMarker) >> 2;
		if (delta < 1)
		{
			delta = 1;
		}
		else if (delta > 8)
		{
			delta = 8;
		}
		HealthMarker += delta;
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.13  2005/03/16 15:04:20  dj_jl
//  More work on line specials.
//
//  Revision 1.12  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.11  2002/06/29 15:58:14  dj_jl
//  Added total frags count.
//
//  Revision 1.10  2002/03/20 19:07:46  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.9  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/11 08:03:12  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.7  2002/01/07 12:23:17  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/10/09 17:36:57  dj_jl
//  Added flags for status bar
//
//  Revision 1.5  2001/10/02 17:37:19  dj_jl
//  Removed status bar widgets
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:46:25  dj_jl
//  Moved view border and message box to progs
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
