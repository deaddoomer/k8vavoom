//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define MAX_MENU_ITEMS		32

#define MAX_MENU_STACK		32

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

class MenuObject;
class MenuScreen;

// DATA DECLARATIONS -------------------------------------------------------

MenuScreen menu_stack[MAX_MENU_STACK];
int menu_sp;

MenuScreen CurrentMenuScreen;

// CODE --------------------------------------------------------------------

//**************************************************************************
//**
//**
//**
//**************************************************************************

//==========================================================================
//
//	InputLine_Init
//
//  Initializes input line
//
//==========================================================================

void InputLine_Init(TILine * iline)
{
    iline->len = 0;
    strsetchar(ARR2STR(iline->Data), 0, 0);
}

//==========================================================================
//
//	InputLine_Key
//
// 	Wrapper function for handling general keyed input.
//	Returns true if it ate the key
//
//==========================================================================

bool InputLine_Key(TILine * iline, int ch)
{
    if (ch >= 32 && ch < 128)
	{
  		ch = TranslateKey(ch);
	    if (iline->len < MAX_ILINE_LENGTH)
    	{
			strsetchar(ARR2STR(iline->Data), iline->len++, ch);
			strsetchar(ARR2STR(iline->Data), iline->len, 0);
    	}
	}
    else if (ch == K_BACKSPACE)
	{
	    if (iline->len)
		{
			strsetchar(ARR2STR(iline->Data), --iline->len, 0);
		}
	}
	else if (ch != K_ENTER && ch != K_PADENTER)
	{
		return false; // did not eat key
	}
    return true; // ate the key
}

//==========================================================================
//
//	InputLine_SetValue
//
//  Sets input line value
//
//==========================================================================

void InputLine_SetValue(TILine * iline, string text)
{
	strcpy(ARR2STR(iline->Data), text);
	iline->len = strlen(text);
}

//==========================================================================
//
//  SpawnMenu
//
//==========================================================================

MenuScreen SpawnMenu(classid CID)
{
	return MenuScreen(GRoot.NewChild(CID));
}

//**************************************************************************
//**
//**    Menu stack handling
//**
//**************************************************************************

//==========================================================================
//
//  PushMenuScreen
//
//==========================================================================

void PushMenuScreen(MenuScreen menu)
{
	int i;

	// avoid stacking menus invoked by hotkeys
	for (i = 0; i < menu_sp; i++)
	{
		if (menu_stack[i].Class == menu.Class)
		{
			int j;

			for (j = i; j < menu_sp; j++)
			{
				menu_stack[j].Destroy();
			}
			menu_sp = i;
			break;
		}
	}

	if (menu_sp >= MAX_MENU_STACK)
		FatalError("PushMenu: menu stack overflow");

	menu_stack[menu_sp++] = menu;

	if (!CurrentMenuScreen)
	{
/*		if (cl.paused)
		{
			S_ResumeSound();
		}
		C_ClearNotify();*/
		CmdBuf_AddText("HideConsole\n");
		LocalSound('MenuActivate');
	}
	else
	{
		CurrentMenuScreen.Hide();
	}

	CurrentMenuScreen = menu;
}

//==========================================================================
//
//  PopMenu
//
//==========================================================================

void PopMenu(void)
{
	menu_sp--;

	if (menu_sp < 0)
		FatalError("PopMenu: menu stack underflow");

	menu_stack[menu_sp].Destroy();
	if (menu_sp)
	{
		CurrentMenuScreen = menu_stack[menu_sp - 1];
		CurrentMenuScreen.Show();
		CurrentMenuScreen.Raise();
		LocalSound('MenuPrevious');
	}
	else
	{
		CurrentMenuScreen = none;
		LocalSound('MenuClose');
	}
}

//==========================================================================
//
//  ForceMenuOff
//
//==========================================================================

void ForceMenuOff(void)
{
	int i;

	for (i = 0; i < menu_sp; i++)
	{
		menu_stack[i].Destroy();
	}
	menu_sp = 0;
	CurrentMenuScreen = none;
}

//**************************************************************************
//**
//**    Slot for saves and input lines
//**
//**************************************************************************

int pic_M_LSLEFT;
int pic_M_LSCNTR;
int pic_M_LSRGHT;

//==========================================================================
//
//  DrawSlot
//
//==========================================================================

int DrawSlot(GC gc, int y, string text, bool entering)
{
	int xx;
	int j;

	gc.DrawIcon(2, y + 12, pic_M_LSLEFT);
	for (j = 0, xx = 10; j < 24; j++, xx += 8)
	{
		gc.DrawIcon(xx, y + 12, pic_M_LSCNTR);
	}
	gc.DrawIcon(xx, y + 12, pic_M_LSRGHT);

	T_SetFont(font_small);
	T_SetAlign(hleft, vtop);
	gc.DrawText(8, y + 5, text);
	if (entering)
	{
		T_DrawCursor();
	}
	return 16;
}

//==========================================================================
//
//  InitSlot
//
//==========================================================================

void InitSlot(void)
{
	pic_M_LSLEFT = R_RegisterPic("M_LSLEFT", PIC_PATCH);
	pic_M_LSCNTR = R_RegisterPic("M_LSCNTR", PIC_PATCH);
	pic_M_LSRGHT = R_RegisterPic("M_LSRGHT", PIC_PATCH);
}

#define SLOTTEXTLEN 		24

bool enteringText;
TILine slot_enter_text;

//**************************************************************************
//
//  $Log$
//  Revision 1.26  2002/11/02 08:20:56  dj_jl
//  New style classes.
//
//  Revision 1.25  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.24  2002/07/20 14:45:24  dj_jl
//  Fixed join game menu.
//
//  Revision 1.23  2002/06/14 15:46:45  dj_jl
//  Added modal window class.
//
//  Revision 1.22  2002/05/29 16:50:26  dj_jl
//  Started a work on native Window classes.
//
//  Revision 1.21  2002/03/09 17:52:52  dj_jl
//  Got rid of function pointers
//
//  Revision 1.20  2002/03/02 17:29:55  dj_jl
//  Renamed builtin Spawn to SpawnObject
//  Added suport for Pad-Enter, some fixes.
//
//  Revision 1.19  2002/02/26 17:46:50  dj_jl
//  Fixes for menus.
//
//  Revision 1.18  2002/02/06 17:22:18  dj_jl
//  Some fixes for the menus.
//
//  Revision 1.17  2002/01/28 18:46:20  dj_jl
//  Some fixes, beautification
//
//  Revision 1.16  2002/01/23 17:54:23  dj_jl
//  Object-oriented menus, got rid of C-style type casting.
//
//  Revision 1.15  2002/01/21 18:21:33  dj_jl
//  Working on object-oriented menus
//
//  Revision 1.14  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.13  2002/01/11 08:03:13  dj_jl
//  Renamed 'name' to 'Name'
//
//  Revision 1.12  2002/01/07 12:27:41  dj_jl
//  Changed copyright year
//
//  Revision 1.11  2002/01/03 18:32:28  dj_jl
//  Fixed menu
//
//  Revision 1.10  2001/12/12 19:14:11  dj_jl
//  Removed support for ASCII character constants
//
//  Revision 1.9  2001/12/04 18:22:08  dj_jl
//  Reworking menus
//
//  Revision 1.8  2001/12/01 18:04:24  dj_jl
//  Started reworking menus
//
//  Revision 1.7  2001/11/09 14:38:45  dj_jl
//  Moved input line to progs
//
//  Revision 1.6  2001/10/08 17:22:12  dj_jl
//  Changed slist to be returned by engine
//
//  Revision 1.5  2001/09/25 17:11:04  dj_jl
//  Seperated menu API
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:46:25  dj_jl
//  Moved view border and message box to progs
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
