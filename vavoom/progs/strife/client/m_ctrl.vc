//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Controls menus
//**
//**************************************************************************

//**************************************************************************
//**
//**	MenuControlKey
//**
//**************************************************************************

class MenuControlKey;

MenuControlKey CurrentCtl;
int ControlColumn;	// menu column for controls

class MenuControlKey:MenuChoice
{
	string Text;
	string CommandOn;
	string CommandOff;

	void DrawWindow(GC gc)
	{
		int key1;
		int key2;
		int name_buf[32 / 4];
		string Name = ARR2STR(name_buf);

		T_SetFont(font_small);
		T_SetAlign(hright, vtop);
		gc.DrawText(0, 0, Text);

		IN_GetBindingKeys(CommandOn, &key1, &key2);

		T_SetAlign(hleft, vtop);
		if (key1 >= 0)
		{
			KeyNameForNum(key1, Name);
			gc.DrawText(10, 0, Name);
		}
		else
		{
			gc.DrawText(10, 0, "---");
		}
		if (key2 >= 0)
		{
			KeyNameForNum(key2, Name);
			gc.DrawText(100, 0, Name);
		}
		else
		{
			gc.DrawText(100, 0, "---");
		}
	}

	bool Key(int key)
	{
		int key1;
		int key2;

		switch (key)
		{
		case K_LEFTARROW:
			ControlColumn = 0;
			MenuScreen(Parent).CursorMoved();
			return true;

		case K_RIGHTARROW:
			ControlColumn = 1;
			MenuScreen(Parent).CursorMoved();
			return true;

		case K_ENTER:
		case K_PADENTER:
		case K_MOUSE1:
			CurrentCtl = self;
			MB_StartMessage("Press new key\n\nESC to cancel",
				MB_Control, false);
			return true;

		case K_BACKSPACE:
			IN_GetBindingKeys(CommandOn, &key1, &key2);
			if (ControlColumn == 0)
				IN_SetBinding(key1, "", "");
			if (ControlColumn == 1)
				IN_SetBinding(key2, "", "");
			return true;
		}
		return false;
	}

	defaultproperties
	{
	}
}

//==========================================================================
//
//  ControlResponse
//
//==========================================================================

void ControlResponse(int key)
{
	string kb_down;
	string kb_up;
	int key1;
	int key2;

	if (key != K_ESCAPE)
	{
		kb_down = CurrentCtl.CommandOn;
		kb_up = CurrentCtl.CommandOff;
		IN_GetBindingKeys(kb_down, &key1, &key2);
		if (ControlColumn == 0)
		{
			IN_SetBinding(key1, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
		if (ControlColumn == 1)
		{
			IN_SetBinding(key2, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
	}
}

//==========================================================================
//
//	MenuScreenControls
//
//==========================================================================

class MenuScreenControls:MenuScreen
{
	MenuControlKey Controls[15];
	int NumControls;

	void AddControl(string Text, string CommandOn, string CommandOff)
	{
		MenuControlKey newCtl;

		newCtl = MenuControlKey(NewChild(MenuControlKey));
		newCtl.SetPos(ChoicesStartX, ChoicesStartY + NumControls * 10);
		newCtl.Text = Text;
		newCtl.CommandOn = CommandOn;
		newCtl.CommandOff = CommandOff;
		Controls[NumControls] = newCtl;
		NumControls++;
	}

	void CreateControlKeyChoices(void)
	{
		AddControl("Move foward", "+Forward", "-Forward");
		AddControl("Move backward", "+Backward", "-Backward");
		AddControl("Turn left", "+Left", "-Left");
		AddControl("Turn right", "+Right", "-Right");
		AddControl("Move left", "+MoveLeft", "-MoveLeft");
		AddControl("Move right", "+MoveRight", "-MoveRight");
		AddControl("Look up", "+LookUp", "-LookUp");
		AddControl("Look down", "+LookDown", "-LookDown");
		AddControl("Center look", "+LookCenter", "-LookCenter");
		AddControl("Jump", "+Jump", "-Jump");
		AddControl("Fire", "+Attack", "-Attack");
		AddControl("Use", "+Use", "-Use");
		AddControl("Strafe", "+Strafe", "-Strafe");
		AddControl("Run", "+Speed", "-Speed");
		AddControl("Mouse look", "+MouseLook", "-MouseLook");
	}

	void CreateChoices(void)
	{
		CreateControlKeyChoices();
	}

	void CursorMoved(void)
	{
		::CursorMoved();
		if (Selector)
		{
			Selector.SetPos(Items[CursorPos].X + ControlColumn * 90,
				Items[CursorPos].Y);
		}
	}

	defaultproperties
	{
		ChoicesStartX = 120;
		ChoicesStartY = 26;
		SelectorType = MenuSelector_SmallRight;
		Title = "SETUP CONTROLS";
	}
}

//==========================================================================
//
//	MenuScreenControls2
//
//==========================================================================

class MenuScreenControls2:MenuScreenControls
{
	void CreateControlKeyChoices(void)
	{
		AddControl("Fly up", "+FlyUp", "-FlyUp");
		AddControl("Fly down", "+FlyDown", "-FlyDown");
		AddControl("Center flight", "+FlyCenter", "-FlyCenter");
		AddControl("Inventory left", "Impulse 13", "");
		AddControl("Inventory right", "Impulse 14", "");
		AddControl("Inventory use", "Impulse 15", "");
		AddControl("Talk key", "ChatMode", "");
	}

	defaultproperties
	{
	}
}

void menu_controls(void)
{
	PushMenuScreen(SpawnMenu(MenuScreenControls));
}

void menu_controls2(void)
{
	PushMenuScreen(SpawnMenu(MenuScreenControls2));
}

//**************************************************************************
//
//  $Log$
//  Revision 1.11  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.10  2002/05/29 16:50:26  dj_jl
//  Started a work on native Window classes.
//
//  Revision 1.9  2002/03/09 17:52:52  dj_jl
//  Got rid of function pointers
//
//  Revision 1.8  2002/03/02 17:29:55  dj_jl
//  Renamed builtin Spawn to SpawnObject
//  Added suport for Pad-Enter, some fixes.
//
//  Revision 1.7  2002/02/06 17:22:18  dj_jl
//  Some fixes for the menus.
//
//  Revision 1.6  2002/01/23 17:54:23  dj_jl
//  Object-oriented menus, got rid of C-style type casting.
//
//  Revision 1.5  2002/01/21 18:21:33  dj_jl
//  Working on object-oriented menus
//
//  Revision 1.4  2002/01/07 12:27:41  dj_jl
//  Changed copyright year
//
//  Revision 1.3  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
