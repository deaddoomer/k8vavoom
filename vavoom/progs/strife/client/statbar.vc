//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int sb_height = 32;
bool bShowWeapons;
bool bShowKeys;
bool bShowObjectives;

int pic_invback;
int pic_invtop;
int pic_invpop;
int pic_invpop2;
int pic_invpbak;
int pic_invpbak2;
int pic_pause;
int pic_yellownum[11];
int pic_graynum[11];
int pic_inv[NUMINVITEMS];
int pic_invcurs;
int pic_crossbow;
int pic_riffle;
int pic_missile;
int pic_grenade;
int pic_flame;
int pic_blaster;
int pic_sigil[5];
int pic_i_comm;

int LoadedLog;
int LogText[1024 / 4];

int AmmoPosY[NUMAMMO] = { 75, 99, 91, 139, 131, 115, 123 };

string InventoryIconNames[NUMINVITEMS] =
{
	"I_STMP",
	"I_MDKT",
	"I_FULL",
	"I_XPRK",
	"I_ARM1",
	"I_ARM2",
	"I_SHD1",
	"I_MASK",
	"I_UNIF",
	"I_OFIC",
	"I_PMAP",
	"I_PMUP",
	"I_BEAC",
	"I_TARG",
	"I_COIN",
	"I_RING",
	"I_RELC",
	"I_EARS",
	"I_BFLM",
	"I_COUP",
	"I_TOKN",
	"I_TOKN",
	"I_HELT",
	"I_GUNT",
	"I_OTOK",
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  SB_StartMap
//
//==========================================================================

void SB_StartMap(void)
{
	int namebuf[3];
	string Name = ARR2STR(namebuf);
	int i;

	pic_invback = R_RegisterPic("INVBACK", PIC_PATCH);
	pic_invtop = R_RegisterPic("INVTOP", PIC_PATCH);
	pic_invpop = R_RegisterPic("INVPOP", PIC_PATCH);
	pic_invpop2 = R_RegisterPic("INVPOP2", PIC_PATCH);
	pic_invpbak = R_RegisterPic("INVPBAK", PIC_PATCH);
	pic_invpbak2 = R_RegisterPic("INVPBAK2", PIC_PATCH);

	for (i = 0; i < 10; i++)
	{
		sprint(Name, "INVFONY%d", i);
		pic_yellownum[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "INVFONG%d", i);
		pic_graynum[i] = R_RegisterPic(Name, PIC_PATCH);
	}
	pic_yellownum[10] = R_RegisterPic("INVFONY%", PIC_PATCH);
	pic_graynum[10] = R_RegisterPic("INVFONG%", PIC_PATCH);

	for (i = 0; i < NUMINVITEMS; i++)
	{
		pic_inv[i] = R_RegisterPic(InventoryIconNames[i], PIC_PATCH);
	}
	pic_invcurs = R_RegisterPic("INVCURS", PIC_PATCH);

	pic_crossbow = R_RegisterPic("CBOWA0", PIC_PATCH);
	pic_riffle = R_RegisterPic("RIFLA0", PIC_PATCH);
	pic_missile = R_RegisterPic("MMSLA0", PIC_PATCH);
	pic_grenade = R_RegisterPic("GRNDA0", PIC_PATCH);
	pic_flame = R_RegisterPic("FLAMA0", PIC_PATCH);
	pic_blaster = R_RegisterPic("TRPDA0", PIC_PATCH);
	pic_sigil[0] = R_RegisterPic("I_SGL1", PIC_PATCH);
	pic_sigil[1] = R_RegisterPic("I_SGL2", PIC_PATCH);
	pic_sigil[2] = R_RegisterPic("I_SGL3", PIC_PATCH);
	pic_sigil[3] = R_RegisterPic("I_SGL4", PIC_PATCH);
	pic_sigil[4] = R_RegisterPic("I_SGL5", PIC_PATCH);
	pic_i_comm = R_RegisterPic("I_COMM", PIC_PATCH);

	pic_pause = R_RegisterPic("M_PAUSE", PIC_PATCH);
}

//==========================================================================
//
//	SB_DrawSmallNum
//
//==========================================================================

void SB_DrawSmallNum(int x, int y, int num)
{
	int w;
	picinfo_t info;

	if (num < 0)
	{
		num = -num;
	}

	R_GetPicInfo(pic_yellownum[0], &info);
	w = info.width;

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic(x - w, y, pic_yellownum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic(x, y, pic_yellownum[num % 10]);
		num /= 10;
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar(void)
{
	int Idx;
	int i;
	int NumKeys;

	//  background
	R_DrawPic(0, 168, pic_invback);
	R_DrawPic(0, 160, pic_invtop);

	// health percentage
	SB_DrawSmallNum(76, 162, cl->health);

	Idx = 0;
	for (i = cl->InvFirst; Idx < 6 && i < NUMINVITEMS; i++)
	{
		if (cl->Inventory[i])
		{
			if (cl->InvCursor == i)
			{
				R_DrawPic(42 + 35 * Idx, 180, pic_invcurs);
			}
			R_DrawPic(48 + Idx * 35, 182, pic_inv[i]);
			SB_DrawSmallNum(76 + Idx * 35, 192, cl->Inventory[i]);
			Idx++;
		}
	}

	if (cl->WeaponOwned[wp_sigil])
	{
		R_DrawPic(253, 175, pic_sigil[cl->Sigil]);
	}

	if (cl->ReadyAmmo != 1994)
	{
		SB_DrawSmallNum(310, 162, cl->ReadyAmmo);
	}

	if (bShowWeapons)
	{
		R_DrawPic2(0, 56, pic_invpbak, 33);
		R_DrawPic(0, 56, pic_invpop);
		if (cl->WeaponOwned[wp_crossbow])
		{
			R_DrawPic(38, 86, pic_crossbow);
		}
		if (cl->WeaponOwned[wp_riffle])
		{
			R_DrawPic(40, 107, pic_riffle);
		}
		if (cl->WeaponOwned[wp_missile])
		{
			R_DrawPic(39, 131, pic_missile);
		}
		if (cl->WeaponOwned[wp_grenade])
		{
			R_DrawPic(78, 87, pic_grenade);
		}
		if (cl->WeaponOwned[wp_flame])
		{
			R_DrawPic(80, 117, pic_flame);
		}
		if (cl->WeaponOwned[wp_blaster])
		{
			R_DrawPic(75, 142, pic_blaster);
		}
		for (i = 0; i < NUMAMMO; i++)
		{
			SB_DrawSmallNum(205, AmmoPosY[i], cl->Ammo[i]);
			SB_DrawSmallNum(238, AmmoPosY[i], maxammo[i] * (cl->Backpack ? 2 : 1));
		}
		SB_DrawSmallNum(267, 84, cl->Accuracy);
		SB_DrawSmallNum(267, 108, cl->Stamina);
		NumKeys = 0;
		for (i = 0; i < NUMKEYS; i++)
		{
			if (cl->Keys & (1 << i))
			{
				NumKeys++;
			}
		}
		SB_DrawSmallNum(267, 132, NumKeys);
		if (cl->Communicator)
		{
			R_DrawPic(280, 130, pic_i_comm);
		}
	}
	else if (bShowKeys)
	{
		R_DrawPic2(0, 56, pic_invpbak2, 33);
		R_DrawPic(0, 56, pic_invpop2);
	}
	else if (bShowObjectives)
	{
		R_DrawPic2(0, 56, pic_invpbak2, 33);
		R_DrawPic(0, 56, pic_invpop2);
		if (cl->Objectives)
		{
			if (LoadedLog != cl->Objectives)
			{
				LoadTextLump(va("LOG%d", cl->Objectives), &LogText[0], 1024);
				LoadedLog = cl->Objectives;
			}
			T_SetFont(font_yellow);
			T_SetAlign(hleft, vtop);
			T_DrawTextW(20, 60, ARR2STR(LogText), 280);
		}
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause(void)
{
	if (cl->bPaused && GetCvar("draw_pause"))
	{
		//  Pause
		R_DrawPic(126, 4, pic_pause);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	if (sb_view != SB_VIEW_FULLSCREEN ||
		bShowWeapons || bShowKeys || bShowObjectives)
	{
		SB_DrawMainBar();
	}
	SB_DrawPause();
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets(void)
{
	bShowWeapons = GetCvar("sb_show_weapons");
	bShowKeys = GetCvar("sb_show_keys");
	bShowObjectives = GetCvar("sb_show_objectives");
}

//**************************************************************************
//
//  $Log$
//  Revision 1.11  2003/10/16 17:04:30  dj_jl
//  Status bar implementation
//
//  Revision 1.10  2003/10/02 18:04:39  dj_jl
//  Inventory system.
//
//  Revision 1.9  2003/09/15 16:42:25  dj_jl
//  Health indicator
//
//  Revision 1.8  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.7  2002/01/07 12:27:41  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/10/02 17:37:19  dj_jl
//  Removed status bar widgets
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/29 17:46:25  dj_jl
//  Moved view border and message box to progs
//  
//  Revision 1.3  2001/08/15 17:07:37  dj_jl
//  Fixed Strife status bar
//
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
