//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	$Id$
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**	$Log$
//**	Revision 1.2  2001/07/27 14:27:53  dj_jl
//**	Update with Id-s and Log-s, some fixes
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

//
//	Location of statistics, justified according to widget type.
//

#define ST_BGX				0
#define ST_BGY				168

// AMMO number pos.
#define ST_AMMOX			44
#define ST_AMMOY			171

// HEALTH number pos.
#define ST_HEALTHX			90
#define ST_HEALTHY			171

// Frags pos.
#define ST_FRAGSX			138
#define ST_FRAGSY			171	

// Weapon pos.
#define ST_ARMSBGX			104
#define ST_ARMSBGY			168
#define ST_ARMSX			111
#define ST_ARMSY			172
#define ST_ARMSXSPACE		12
#define ST_ARMSYSPACE		10

// Location of marine face
#define ST_FACESX			143
#define ST_FACESY			168

// ARMOR number pos.
#define ST_ARMORX			221
#define ST_ARMORY			171

// Key icon positions.
#define ST_KEY0X			239
#define ST_KEY0Y			171
#define ST_KEY1X			239
#define ST_KEY1Y			181
#define ST_KEY2X			239
#define ST_KEY2Y			191

// Ammunition counter.
#define ST_AMMO0X			288
#define ST_AMMO0Y			173
#define ST_AMMO1X			288
#define ST_AMMO1Y			179
#define ST_AMMO2X			288
#define ST_AMMO2Y			191
#define ST_AMMO3X			288
#define ST_AMMO3Y			185

// Indicate maximum ammunition.
// Only needed because backpack exists.
#define ST_MAXAMMO0X		314
#define ST_MAXAMMO0Y		173
#define ST_MAXAMMO1X		314
#define ST_MAXAMMO1Y		179
#define ST_MAXAMMO2X		314
#define ST_MAXAMMO2Y		191
#define ST_MAXAMMO3X		314
#define ST_MAXAMMO3Y		185

//	Fullscreen widgets
#define ST_TDHEALTHX	50
#define ST_TDHEALTHY	180

#define ST_TDARMORX		100
#define ST_TDARMORY		180

#define ST_TDAMMOX		315
#define ST_TDAMMOY		180

//
//	FACE WIDGET MACROS
//

// Number of status faces.
#define ST_NUMPAINFACES		5
#define ST_NUMSTRAIGHTFACES	3
#define ST_NUMTURNFACES		2
#define ST_NUMSPECIALFACES	3

#define ST_FACESTRIDE \
          (ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES + ST_NUMSPECIALFACES)

#define ST_NUMEXTRAFACES	2

#define ST_NUMFACES \
          (ST_FACESTRIDE*ST_NUMPAINFACES+ST_NUMEXTRAFACES)

#define ST_TURNOFFSET		(ST_NUMSTRAIGHTFACES)
#define ST_OUCHOFFSET		(ST_TURNOFFSET + ST_NUMTURNFACES)
#define ST_EVILGRINOFFSET	(ST_OUCHOFFSET + 1)
#define ST_RAMPAGEOFFSET	(ST_EVILGRINOFFSET + 1)
#define ST_GODFACE			(ST_NUMPAINFACES * ST_FACESTRIDE)
#define ST_DEADFACE			(ST_GODFACE + 1)

#define ST_STRAIGHTFACECOUNT	(TICRATE / 2)
#define ST_TURNCOUNT			(1 * TICRATE)
#define ST_EVILGRINCOUNT		(2 * TICRATE)
#define ST_RAMPAGEDELAY			(2 * TICRATE)

#define ST_MUCHPAIN			20

// CONSTANTS ---------------------------------------------------------------

enum
{
	SBP_BAR,
    SBP_ARMS,
    SBP_FB0,
    SBP_FB1,
    SBP_FB2,
    SBP_FB3,
    SBP_TNUM0,
    SBP_TNUM1,
    SBP_TNUM2,
    SBP_TNUM3,
    SBP_TNUM4,
    SBP_TNUM5,
    SBP_TNUM6,
    SBP_TNUM7,
    SBP_TNUM8,
    SBP_TNUM9,
    SBP_TMINUS,
    SBP_TPRCNT,
    SBP_YSNUM0,
    SBP_YSNUM1,
    SBP_YSNUM2,
    SBP_YSNUM3,
    SBP_YSNUM4,
    SBP_YSNUM5,
    SBP_YSNUM6,
    SBP_YSNUM7,
    SBP_YSNUM8,
    SBP_YSNUM9,
    SBP_GNUM2,
    SBP_YSNUM2_2,
    SBP_GNUM3,
    SBP_YSNUM3_2,
    SBP_GNUM4,
    SBP_YSNUM4_2,
    SBP_GNUM5,
    SBP_YSNUM5_2,
    SBP_GNUM6,
    SBP_YSNUM6_2,
    SBP_GNUM7,
    SBP_YSNUM7_2,
    SBP_KEYS0,
    SBP_KEYS1,
    SBP_KEYS2,
    SBP_KEYS3,
    SBP_KEYS4,
    SBP_KEYS5,
	SBP_FST00,
	SBP_FST01,
	SBP_FST02,
	SBP_FTR00,
	SBP_FTL00,
	SBP_FOUCH0,
	SBP_FEVL0,
	SBP_FKILL0,
	SBP_FST10,
	SBP_FST11,
	SBP_FST12,
	SBP_FTR10,
	SBP_FTL10,
	SBP_FOUCH1,
	SBP_FEVL1,
	SBP_FKILL1,
	SBP_FST20,
	SBP_FST21,
	SBP_FST22,
	SBP_FTR20,
	SBP_FTL20,
	SBP_FOUCH2,
	SBP_FEVL2,
	SBP_FKILL2,
	SBP_FST30,
	SBP_FST31,
	SBP_FST32,
	SBP_FTR30,
	SBP_FTL30,
	SBP_FOUCH3,
	SBP_FEVL3,
	SBP_FKILL3,
	SBP_FST40,
	SBP_FST41,
	SBP_FST42,
	SBP_FTR40,
	SBP_FTL40,
	SBP_FOUCH4,
	SBP_FEVL4,
	SBP_FKILL4,
    SBP_FGOD0,
    SBP_FDEAD0,

	NUM_SB_PATCHES
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

string		sb_patch_names[] =
{
    "STBAR",
    "STARMS",
    "STFB0",
    "STFB1",
    "STFB2",
    "STFB3",
	"STTNUM0",
	"STTNUM1",
	"STTNUM2",
	"STTNUM3",
	"STTNUM4",
	"STTNUM5",
	"STTNUM6",
	"STTNUM7",
	"STTNUM8",
	"STTNUM9",
    "STTMINUS",
    "STTPRCNT",
    "STYSNUM0",
    "STYSNUM1",
    "STYSNUM2",
    "STYSNUM3",
    "STYSNUM4",
    "STYSNUM5",
    "STYSNUM6",
    "STYSNUM7",
    "STYSNUM8",
    "STYSNUM9",
	"STGNUM2",
    "STYSNUM2",
	"STGNUM3",
    "STYSNUM3",
	"STGNUM4",
    "STYSNUM4",
	"STGNUM5",
    "STYSNUM5",
	"STGNUM6",
    "STYSNUM6",
	"STGNUM7",
    "STYSNUM7",
    "STKEYS0",
    "STKEYS1",
    "STKEYS2",
    "STKEYS3",
    "STKEYS4",
    "STKEYS5",
	"STFST00",
	"STFST01",
	"STFST02",
	"STFTR00",
	"STFTL00",
	"STFOUCH0",
	"STFEVL0",
	"STFKILL0",
	"STFST10",
	"STFST11",
	"STFST12",
	"STFTR10",
	"STFTL10",
	"STFOUCH1",
	"STFEVL1",
	"STFKILL1",
	"STFST20",
	"STFST21",
	"STFST22",
	"STFTR20",
	"STFTL20",
	"STFOUCH2",
	"STFEVL2",
	"STFKILL2",
	"STFST30",
	"STFST31",
	"STFST32",
	"STFTR30",
	"STFTL30",
	"STFOUCH3",
	"STFEVL3",
	"STFKILL3",
	"STFST40",
	"STFST41",
	"STFST42",
	"STFTR40",
	"STFTL40",
	"STFOUCH4",
	"STFEVL4",
	"STFKILL4",
    "STFGOD0",
    "STFDEAD0",
	""
};

int 		sb_height = 32;

//
//	WIDGET DATA
//

// number of frags so far in deathmatch
int			st_fragscount;

// current face index, used by w_faces
int			st_faceindex = 0;

// holds key-type for each key box on bar
int			keyboxes[3];

int			st_maxammo[4];

//
//	FACE WIDGET DATA
//

// count until face changes
int			st_facecount = 0;

// used for evil grin
boolean		oldweaponsowned[NUMWEAPONS];

// used to use appopriately pained face
int			st_oldhealth = -1;

int			sb_face_lastattackdown = -1;
int			sb_face_priority = 0;

int			sb_cpo_lastcalc;
int			sb_cpo_oldhealth = -1;

//
//	WIDGET VISIBILITY
//

// whether left-side main status bar is active
boolean		st_statusbaron;

// whether fullscreen statusbar is on
boolean		st_fullscreen;

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  SB_CreateWidgets
//
//==========================================================================

void SB_CreateWidgets(void)
{
    int 	i;

    st_faceindex = 0;
    st_oldhealth = -1;

    for (i=0;i<NUMWEAPONS;i++)
		oldweaponsowned[i] = cl->weaponowned[i];

    for (i=0;i<3;i++)
		keyboxes[i] = -1;

	//	background
	SB_CreateWidget(SBW_PATCH, ST_BGX, ST_BGY, SBP_BAR, SB_STYLE_NORMAL, &st_statusbaron, 0, NULL);

    // ready weapon ammo
	SB_CreateWidget(SBW_NUMBER, ST_AMMOX, ST_AMMOY, SBP_TNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &cl->ready_ammo);

    // health percentage
	SB_CreateWidget(SBW_NUMBER, ST_HEALTHX, ST_HEALTHY, SBP_TNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &cl->health);
	SB_CreateWidget(SBW_PATCH, ST_HEALTHX, ST_HEALTHY, SBP_TPRCNT, SB_STYLE_NORMAL, &st_statusbaron, 0, NULL);

	if (deathmatch)
    {
	    // frags sum
		SB_CreateWidget(SBW_NUMBER, ST_FRAGSX, ST_FRAGSY, SBP_TNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &st_fragscount);
	}
	else
    {
	    // weapons owned
		SB_CreateWidget(SBW_PATCH, ST_ARMSBGX, ST_ARMSBGY, SBP_ARMS, SB_STYLE_NORMAL, &st_statusbaron, 0, NULL);
	    for (i=0; i<6; i++)
	    {
			SB_CreateWidget(SBW_PATCHI, ST_ARMSX + (i % 3) * ST_ARMSXSPACE,
				ST_ARMSY + (i / 3) * ST_ARMSYSPACE, SBP_GNUM2 + i * 2,
	            SB_STYLE_NORMAL, &st_statusbaron, 0, &cl->weaponowned[i + 1]);
	    }
	}

    // faces
	if (netgame)
		SB_CreateWidget(SBW_PATCHI, ST_FACESX, ST_FACESY, SBP_FB0, SB_STYLE_NORMAL, &st_statusbaron, 0, &cl->clientnum);
	SB_CreateWidget(SBW_PATCHI, ST_FACESX, ST_FACESY, SBP_FST00, SB_STYLE_NORMAL, &st_statusbaron, 0, &st_faceindex);

    // armor percentage
	SB_CreateWidget(SBW_NUMBER, ST_ARMORX, ST_ARMORY, SBP_TNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &cl->armorpoints);
	SB_CreateWidget(SBW_PATCH, ST_ARMORX, ST_ARMORY, SBP_TPRCNT, SB_STYLE_NORMAL, &st_statusbaron, 0, NULL);

    // keyboxes 0-2
    SB_CreateWidget(SBW_PATCHI, ST_KEY0X, ST_KEY0Y, SBP_KEYS0, SB_STYLE_NORMAL, &st_statusbaron, 0, &keyboxes[0]);
    SB_CreateWidget(SBW_PATCHI, ST_KEY1X, ST_KEY1Y, SBP_KEYS0, SB_STYLE_NORMAL, &st_statusbaron, 0, &keyboxes[1]);
    SB_CreateWidget(SBW_PATCHI, ST_KEY2X, ST_KEY2Y, SBP_KEYS0, SB_STYLE_NORMAL, &st_statusbaron, 0, &keyboxes[2]);

    // ammo count (all four kinds)
	SB_CreateWidget(SBW_NUMBER, ST_AMMO0X, ST_AMMO0Y, SBP_YSNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &cl->ammo[0]);
	SB_CreateWidget(SBW_NUMBER, ST_AMMO1X, ST_AMMO1Y, SBP_YSNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &cl->ammo[1]);
	SB_CreateWidget(SBW_NUMBER, ST_AMMO2X, ST_AMMO2Y, SBP_YSNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &cl->ammo[2]);
	SB_CreateWidget(SBW_NUMBER, ST_AMMO3X, ST_AMMO3Y, SBP_YSNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &cl->ammo[3]);

    // max ammo count (all four kinds)
    SB_CreateWidget(SBW_NUMBER, ST_MAXAMMO0X, ST_MAXAMMO0Y, SBP_YSNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &st_maxammo[0]);
    SB_CreateWidget(SBW_NUMBER, ST_MAXAMMO1X, ST_MAXAMMO1Y, SBP_YSNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &st_maxammo[1]);
    SB_CreateWidget(SBW_NUMBER, ST_MAXAMMO2X, ST_MAXAMMO2Y, SBP_YSNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &st_maxammo[2]);
    SB_CreateWidget(SBW_NUMBER, ST_MAXAMMO3X, ST_MAXAMMO3Y, SBP_YSNUM0, SB_STYLE_NORMAL, &st_statusbaron, 0, &st_maxammo[3]);

    // fullscreen health
	SB_CreateWidget(SBW_NUMBER, ST_TDHEALTHX, ST_TDHEALTHY, SBP_TNUM0, SB_STYLE_TRANSLUCENT, &st_fullscreen, 40, &cl->health);

    // fullscreen armor
	SB_CreateWidget(SBW_NUMBER, ST_TDARMORX, ST_TDARMORY, SBP_TNUM0, SB_STYLE_TRANSLUCENT, &st_fullscreen, 40, &cl->armorpoints);

    // fullscreen ready weapon ammo
	SB_CreateWidget(SBW_NUMBER, ST_TDAMMOX, ST_TDAMMOY, SBP_TNUM0, SB_STYLE_TRANSLUCENT, &st_fullscreen, 40, &cl->ready_ammo);
	if (deathmatch)
    {
	    // frags sum
		SB_CreateWidget(SBW_NUMBER, 315, 5, SBP_TNUM0, SB_STYLE_TRANSLUCENT, &st_fullscreen, 40, &st_fragscount);
	}
}

//==========================================================================
//
//  SB_OnDraw
//
//==========================================================================

void SB_OnDraw(int sb_view)
{
	st_statusbaron = sb_view != SB_VIEW_FULLSCREEN;
    st_fullscreen = !st_statusbaron;
}

//==========================================================================
//
//  CalcPainOffset
//
//==========================================================================

int CalcPainOffset(void)
{
    int			health;
    
    health = cl->health > 100 ? 100 : cl->health;

    if (health != sb_cpo_oldhealth)
    {
		sb_cpo_lastcalc = ST_FACESTRIDE * (((100 - health) * ST_NUMPAINFACES) / 101);
		sb_cpo_oldhealth = health;
    }
    return sb_cpo_lastcalc;
}

//==========================================================================
//
//  UpdateFaceWidget
//
//	This is a not-very-pretty routine which handles the face states and
// their timing.
//	the precedence of expressions is:
//  dead > evil grin > turned head > straight ahead
//
//==========================================================================

void UpdateFaceWidget(void)
{
    int		i;
    angle_t	badguyangle;
    angle_t	diffang;
    boolean	doevilgrin;
	// a random number per tick
	int	st_randomnumber;

    st_randomnumber = P_Random();

    if (sb_face_priority < 10)
    {
		// dead
		if (!cl->health)
		{
		    sb_face_priority = 9;
		    st_faceindex = ST_DEADFACE;
		    st_facecount = 1;
		}
    }

    if (sb_face_priority < 9)
    {
		if (cl->bonuscount)
		{
		    // picking up bonus
		    doevilgrin = false;

		    for (i=0;i<NUMWEAPONS;i++)
		    {
				if (oldweaponsowned[i] != cl->weaponowned[i])
				{
				    doevilgrin = true;
				    oldweaponsowned[i] = cl->weaponowned[i];
				}
		    }
		    if (doevilgrin)
		    {
				// evil grin if just picked up weapon
				sb_face_priority = 8;
				st_facecount = ST_EVILGRINCOUNT;
				st_faceindex = CalcPainOffset() + ST_EVILGRINOFFSET;
		    }
		}
    }
  
#ifdef FIXME
    if (sb_face_priority < 8)
    {
		if (cl->damagecount
		    && cl->attacker
		    && cl->attacker != cl->mo)
		{
		    // being attacked
		    sb_face_priority = 7;
	    
		    if (cl->health - st_oldhealth > ST_MUCHPAIN)
		    {
				st_facecount = ST_TURNCOUNT;
				st_faceindex = CalcPainOffset() + ST_OUCHOFFSET;
		    }
		    else
		    {
				badguyangle = PointToAngle(cl->mo->x,
							      cl->mo->y,
							      cl->attacker->x,
							      cl->attacker->y);
		
				if (badguyangle > cl->mo->angle)
				{
				    // whether right or left
				    diffang = badguyangle - cl->mo->angle;
				    i = diffang > ANG180;
				}
				else
				{
				    // whether left or right
				    diffang = cl->mo->angle - badguyangle;
				    i = diffang <= ANG180;
				} // confusing, aint it?

				st_facecount = ST_TURNCOUNT;
				st_faceindex = CalcPainOffset();
		
				if (diffang < ANG45)
				{
				    // head-on
				    st_faceindex += ST_RAMPAGEOFFSET;
				}
				else if (i)
				{
				    // turn face right
				    st_faceindex += ST_TURNOFFSET;
				}
				else
				{
				    // turn face left
				    st_faceindex += ST_TURNOFFSET+1;
				}
		    }
		}
    }
#endif

    if (sb_face_priority < 7)
    {
		// getting hurt because of your own damn stupidity
		if (cl->damagecount)
		{
		    if (cl->health - st_oldhealth > ST_MUCHPAIN)
		    {
				sb_face_priority = 7;
				st_facecount = ST_TURNCOUNT;
				st_faceindex = CalcPainOffset() + ST_OUCHOFFSET;
		    }
		    else
		    {
				sb_face_priority = 6;
				st_facecount = ST_TURNCOUNT;
				st_faceindex = CalcPainOffset() + ST_RAMPAGEOFFSET;
		    }
		}
    }

#ifdef FIXME
    if (sb_face_priority < 6)
    {
		// rapid firing
		if (cl->attackdown)
		{
		    if (sb_face_lastattackdown==-1)
				sb_face_lastattackdown = ST_RAMPAGEDELAY;
		    else if (!--sb_face_lastattackdown)
		    {
				sb_face_priority = 5;
				st_faceindex = CalcPainOffset() + ST_RAMPAGEOFFSET;
				st_facecount = 1;
				sb_face_lastattackdown = 1;
		    }
		}
		else
		    sb_face_lastattackdown = -1;
	}
#endif

    if (sb_face_priority < 5)
    {
		// invulnerability
		if ((cl->cheats & CF_GODMODE)
		    || cl->powers[pw_invulnerability])
		{
		    sb_face_priority = 4;

		    st_faceindex = ST_GODFACE;
		    st_facecount = 1;
		}
    }

    // look left or look right if the facecount has timed out
    if (!st_facecount)
    {
		st_faceindex = CalcPainOffset() + (st_randomnumber % 3);
		st_facecount = ST_STRAIGHTFACECOUNT;
		sb_face_priority = 0;
    }

    st_facecount--;
    st_oldhealth = cl->health;
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets(void)
{
	int			i;

	//	Update widget data
    st_fragscount = 0;
    for (i=0 ; i<MAXPLAYERS ; i++)
    {
		if (i != cl->clientnum)
	    	st_fragscount += cl->frags[i];
		else
	    	st_fragscount -= cl->frags[i];
    }
    for (i=0; i<3; i++)
    {
		keyboxes[i] = cl->keys & (1 << i) ? i : -1;

		if (cl->keys & (1 << (i + 3)))
	    	keyboxes[i] = i + 3;
    }
	for (i=0; i<4; i++)
    {
		st_maxammo[i] = maxammo[i] * (cl->backpack ? 2 : 1);
	}
    UpdateFaceWidget();
}


