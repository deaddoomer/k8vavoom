//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define GRAVITY			1225.0
#define MAXMOVE			1050.0
#define STOPSPEED		2.1875
#define FRICTION		3.28125
#define FRICTION_WATER	3.0

#define BOUNCE_VAL		1.5

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  ClipVelocity
//
//  Slide off of the impacting object
//
//==========================================================================

TVec ClipVelocity(TVec in, TVec normal, float overbounce)
{
	return in - normal * (DotProduct(in, normal) * overbounce);
}

//**************************************************************************
//
//  SLIDE MOVE
//
//  Allows the player to slide along any angled walls.
//
//**************************************************************************

float bestslidefrac;
line_t *bestslideline;

Entity slidemo;
TVec slideorg;
TVec slidedir;

//==========================================================================
//
//  PTR_SlideTraverse
//
//==========================================================================

boolean PTR_SlideTraverse(intercept_t * in)
{
	line_t *li;
	TVec hit_point;

	if (!in->isaline)
		Error("PTR_SlideTraverse: not a line?");

	li = in->line;

	if (li->flags & ML_TWOSIDED)
	{
		opening_t *open;

		// set openrange, opentop, openbottom
		hit_point = slideorg + in->frac * slidedir;
		open = LineOpenings(li, hit_point);
		open =
			FindOpening(open, slidemo.origin.z,
			slidemo.origin.z + slidemo.height);

		if (open && (open->range >= slidemo.height) &&	//  fits
			(open->top - slidemo.origin.z >= slidemo.height) &&	// mobj is not too high
			(open->bottom - slidemo.origin.z <= 24.0))	// not too big a step up
		{
			// this line doesn't block movement
			return true;
		}
	}
	else
	{
		if (PointOnPlaneSide(slidemo.origin, li))
		{
			// don't hit the back side
			return true;
		}
	}

	// the line does block movement,
	// see if it is closer than best so far
	if (in->frac < bestslidefrac)
	{
		bestslidefrac = in->frac;
		bestslideline = li;
	}

	return false;	// stop
}

//==========================================================================
//
//  SlidePathTraverse
//
//==========================================================================

void SlidePathTraverse(float x, float y)
{
	slideorg = vector(x, y, slidemo.origin.z);
	slidedir = slidemo.velocity * frametime;
	P_PathTraverse(x, y, x + slidedir.x, y + slidedir.y,
		PT_ADDLINES, PTR_SlideTraverse);
}

//==========================================================================
//
//  Entity::SlideMove
//
//  The momx / momy move is bad, so try to slide along a wall.
//  Find the first line hit, move flush to it, and slide along it.
//  This is a kludgy mess.
//
//==========================================================================

void Entity::SlideMove(void)
{
	float leadx;
	float leady;
	float trailx;
	float traily;
	float newx;
	float newy;
	int hitcount;

	slidemo = self;
	hitcount = 0;

	do
	{
		if (++hitcount == 3)
		{
			// don't loop forever
			if (!P_TryMove(this, origin.x, origin.y + velocity.y * frametime))
				P_TryMove(this, origin.x + velocity.x * frametime, origin.y);
			return;
		}

		// trace along the three leading corners
		if (velocity.x > 0.0)
		{
			leadx = origin.x + radius;
			trailx = origin.x - radius;
		}
		else
		{
			leadx = origin.x - radius;
			trailx = origin.x + radius;
		}

		if (velocity.y > 0.0)
		{
			leady = origin.y + radius;
			traily = origin.y - radius;
		}
		else
		{
			leady = origin.y - radius;
			traily = origin.y + radius;
		}

		bestslidefrac = 1.00001;

		SlidePathTraverse(leadx, leady);
		SlidePathTraverse(trailx, leady);
		SlidePathTraverse(leadx, traily);

		// move up to the wall
		if (bestslidefrac == 1.00001)
		{
			// the move most have hit the middle, so stairstep
			if (!P_TryMove(this, origin.x, origin.y + velocity.y * frametime))
				P_TryMove(this, origin.x + velocity.x * frametime, origin.y);
			return;
		}

		// fudge a bit to make sure it doesn't hit
		bestslidefrac -= 0.03125;
		if (bestslidefrac > 0.0)
		{
			newx = velocity.x * frametime * bestslidefrac;
			newy = velocity.y * frametime * bestslidefrac;

			if (!P_TryMove(this, origin.x + newx, origin.y + newy))
			{
				if (!P_TryMove(this, origin.x,
						origin.y + velocity.y * frametime))
					P_TryMove(this, origin.x + velocity.x * frametime,
						origin.y);
				return;
			}
		}

		// Now continue along the wall.
		// First calculate remainder.
		bestslidefrac = 1.0 - (bestslidefrac + 0.03125);

		if (bestslidefrac > 1.0)
			bestslidefrac = 1.0;

		if (bestslidefrac <= 0.0)
			return;

		// clip the moves
		velocity = ClipVelocity(velocity * bestslidefrac,
			bestslideline->normal, 1.0);

	}
	while (!P_TryMove(this, origin.x + velocity.x * frametime,
			origin.y + velocity.y * frametime));
}

//**************************************************************************
//
//  BOUNCING
//
//  Bounce missile against walls
//
//**************************************************************************

#if 0

//============================================================================
//
//  PTR_BounceTraverse
//
//============================================================================

boolean PTR_BounceTraverse(intercept_t * in)
{
	line_t *li;
	TVec hit_point;
	opening_t *open;

	if (!in->isaline)
		Error("PTR_BounceTraverse: not a line?");

	li = in->line;
	if (li->flags & ML_TWOSIDED)
	{
		hit_point = slideorg + in->frac * slidedir;
		open = LineOpenings(li, hit_point);	// set openrange, opentop, openbottom
		open =
			FindOpening(open, slidemo.origin.z,
			slidemo.origin.z + slidemo.height);
		if (open && open->range >= slidemo.height &&	// fits
			open->top - slidemo.origin.z >= slidemo.height)	// mobj is not too high
		{
			return true;	// this line doesn't block movement
		}
	}
	else
	{
		if (PointOnPlaneSide(slidemo.origin, li))
		{
			return true;	// don't hit the back side
		}
	}

	bestslideline = li;
	return false;	// stop
}

//============================================================================
//
//  Entity::BounceWall
//
//============================================================================

void Entity::BounceWall(float overbounce)
{
	slidemo = self;
	if (velocity.x > 0.0)
	{
		slideorg.x = origin.x + radius;
	}
	else
	{
		slideorg.x = origin.x - radius;
	}
	if (velocity.y > 0.0)
	{
		slideorg.y = origin.y + radius;
	}
	else
	{
		slideorg.y = origin.y - radius;
	}
	slideorg.z = origin.z;
	slidedir = velocity * frametime;
	P_PathTraverse(slideorg.x, slideorg.y,
		slideorg.x + slidedir.x, slideorg.y + slidedir.y,
		PT_ADDLINES, PTR_BounceTraverse);
	velocity = ClipVelocity(velocity, bestslideline->normal, overbounce);
}

#endif

//**************************************************************************
//
//  OBJECT MOVEMENT
//
//**************************************************************************

//==========================================================================
//
//  Entity::CheckWater
//
//==========================================================================

boolean Entity::CheckWater(void)
{
	TVec point;
	int cont;

	point = origin;
	point.z += 1.0;

	waterlevel = 0;
	watertype = CONTENTS_EMPTY;
	cont = PointContents(subsector->sector, point);
	if (cont >= CONTENTS_WATER)
	{
		watertype = cont;
		waterlevel = 1;
		point.z = origin.z + height * 0.5;
		cont = PointContents(subsector->sector, point);
		if (cont >= CONTENTS_WATER)
		{
			waterlevel = 2;
			if (player)
			{
				point = player->vieworg;
				cont = PointContents(subsector->sector, point);
				if (cont >= CONTENTS_WATER)
					waterlevel = 3;
			}
		}
	}
	return waterlevel > 1;
}

//==========================================================================
//
//  Entity::XYMovement
//
//==========================================================================

boolean Entity::XYMovement(void)
{
	float ptryx;
	float ptryy;
	float xmove;
	float ymove;

	if (!velocity.x && !velocity.y)
	{
		if (flags & MF_SKULLFLY)
		{
			// the skull slammed into something
			flags &= ~MF_SKULLFLY;
			velocity.x = velocity.y = velocity.z = 0.0;

			if (!SetMobjState(this, spawnstate))
			{
				return false;
			}
		}
		return true;
	}

	if (velocity.x > MAXMOVE)
		velocity.x = MAXMOVE;
	else if (velocity.x < -MAXMOVE)
		velocity.x = -MAXMOVE;

	if (velocity.y > MAXMOVE)
		velocity.y = MAXMOVE;
	else if (velocity.y < -MAXMOVE)
		velocity.y = -MAXMOVE;

	xmove = velocity.x * frametime;
	ymove = velocity.y * frametime;

	do
	{
		if (xmove > MAXMOVE / (35.0 * 2.0) || ymove > MAXMOVE / (35.0 * 2.0))
		{
			ptryx = origin.x + xmove / 2.0;
			ptryy = origin.y + ymove / 2.0;
			xmove /= 2.0;
			ymove /= 2.0;
		}
		else
		{
			ptryx = origin.x + xmove;
			ptryy = origin.y + ymove;
			xmove = ymove = 0.0;
		}

		if (!P_TryMove(this, ptryx, ptryy))
		{
			// blocked move
			if (player)
			{
				// try to slide along it
				SlideMove();
			}
			else if (flags & MF_MISSILE)
			{
#if 0
				if (flags & MF_BOUNCE)
				{
					//  Bounce against walls and non-killable ofjects
					if (BlockingMobj)
					{
						if ((!BlockingMobj->player) &&
							(!(BlockingMobj->flags & MF_COUNTKILL)))
						{
							float speed;
							float angle;

							angle = AngleMod360(
								atan2(origin.y - BlockingMobj->origin.y,
								origin.x - BlockingMobj->origin.x) +
								(Random() * 16.0 - 8.0));
							speed = Length(velocity);
							speed = speed * 0.75;
							angles.yaw = angle;
							velocity.x = speed * cos(angle);
							velocity.y = speed * sin(angle);
							if (sound_pain)
							{
								StartSound(this, sound_pain, CHAN_VOICE);
							}
						}
						else
						{
							// Struck a player/creature
							P_ExplodeMissile(this);
						}
					}
					else
					{
						// Struck a wall
						BounceWall(BOUNCE_VAL);
						if (sound_pain)
						{
							StartSound(this, sound_pain, CHAN_VOICE);
						}
					}
					if (destroyed)
					{
						return false;	// mobj was removed
					}
					return true;
				}
#endif

				// explode a missile
				if (ceilingline &&
					ceilingline->backsector &&
					ceilingline->backsector->ceiling.pic == skyflatnum)
				{
					// Hack to prevent missiles exploding
					// against the sky.
					// Does not handle sky floors.
					P_RemoveMobj(this);
					return false;
				}
				P_ExplodeMissile(this);
			}
			else
			{
				velocity.x = velocity.y = 0.0;
			}
		}
	}
	while (xmove || ymove);
	if (destroyed)
	{
		return false;	// mobj was removed
	}
	return true;
}

//==========================================================================
//
//	Entity::ZMovement
//
//==========================================================================

void Entity::ZMovement(void)
{
	float dist;
	float delta;
	float vdot;

	// check for smooth step up
	if (player && origin.z < floorz)
	{
		player->viewheight -= floorz - origin.z;

		player->deltaviewheight
			= (VIEWHEIGHT - player->viewheight) / 8.0;
	}

	// adjust height
	origin.z += velocity.z * frametime;

	if (flags & MF_FLOAT && target)
	{
		// float down towards target if too close
		if (!(flags & MF_SKULLFLY) && !(flags & MF_INFLOAT))
		{
			dist = MobjDist2(this, target);

			delta = target->origin.z + height / 2.0 - origin.z;

			if (delta < 0.0 && dist < -(delta * 3.0))
				origin.z -= FLOATSPEED * frametime;
			else if (delta > 0.0 && dist < (delta * 3.0))
				origin.z += FLOATSPEED * frametime;
		}
	}

	// clip movement
	if (origin.z <= floorz + 0.1)
	{
		// hit the floor

		vdot = DotProduct(velocity, floor->normal);
		// Note (id):
		//  somebody left this after the setting momz to 0,
		//  kinda useless there.
		if (flags & MF_SKULLFLY)
		{
			// the skull slammed into something
			velocity.z = -velocity.z;
		}

		if (vdot < -0.1)
		{
			if (player && (vdot < -GRAVITY * 0.25))
			{
				// Squat down.
				// Decrease viewheight for a moment
				// after hitting the ground (hard),
				// and utter appropriate sound.
				player->deltaviewheight = vdot / 8.0 * frametime;
				StartSoundName(this, "PlayerLand", CHAN_VOICE);
			}
		}
		origin.z = floorz;

		if (flags & MF_MISSILE)
		{
//			if (!(flags & (MF_NOCLIP | MF_BOUNCE)))
			if (!(flags & MF_NOCLIP))
			{
				P_ExplodeMissile(this);
				return;
			}
#if 0
			if (flags & MF_BOUNCE && sound_pain && Length(velocity) > 256.0)
			{
				StartSound(this, sound_pain, CHAN_VOICE);
			}
#endif
		}
	}

	if (origin.z + height > ceilingz)
	{
		// hit the ceiling
		vdot = DotProduct(velocity, ceiling->normal);
		if (vdot < 0.0)
			velocity -= vdot * ceiling->normal;

		origin.z = ceilingz - height;

		if (flags & MF_SKULLFLY)
		{
			// the skull slammed into something
			velocity.z = -velocity.z;
		}

		if (flags & MF_MISSILE)
		{
//			if (!(flags & (MF_NOCLIP | MF_BOUNCE)))
			if (!(flags & MF_NOCLIP))
			{
				P_ExplodeMissile(this);
				return;
			}
#if 0
			if (flags & MF_BOUNCE && sound_pain && Length(velocity) > 256.0)
			{
				StartSound(this, sound_pain, CHAN_VOICE);
			}
#endif
		}
	}
}

//==========================================================================
//
//  Entity::UpdateVelocity
//
//==========================================================================

void Entity::UpdateVelocity(void)
{
	float dot;

	if (origin.z <= floorz && !velocity.x && !velocity.y &&
		!velocity.z && !(flags & MF_COUNTKILL) && !player)
	{
		//  No gravity for non-moving things on ground to prevent
		// static objects from sliding on slopes
		return;
	}

	if (!(flags & MF_NOGRAVITY) && (origin.z > floorz
		|| floor->normal.z < 0.7))
	{
		if (waterlevel < 2)
		{
			//  Add gravity
			velocity.z -= GRAVITY * frametime;
		}
		else if (!player)
		{
			//  Add gravity
			velocity.z = -60.0;
		}
	}

	// slow down

//	if (flags & (MF_MISSILE | MF_SKULLFLY) && !(flags & MF_BOUNCE))
	if (flags & (MF_MISSILE | MF_SKULLFLY))
		return;	// no friction for missiles ever

	if (origin.z > floorz && !(flags2 & MF2_ONMOBJ) && waterlevel < 2)
		return;	// no friction when airborne

	//  Clip velocity
	if (origin.z <= floorz)
	{
		dot = DotProduct(velocity, floor->normal);
		if (dot < 0.0)
		{
#if 0
			if (flags & MF_BOUNCE)
			{
				dot *= BOUNCE_VAL;
			}
#endif
			velocity -= dot * floor->normal;
		}
	}

	if (flags & MF_CORPSE)
	{
		// do not stop sliding if halfway off a step with some momentum
		if (velocity.x > 0.25 * 35.0 || velocity.x < -0.25 * 35.0 ||
			velocity.y > 0.25 * 35.0 || velocity.y < -0.25 * 35.0)
		{
			if (floorz != subsector->sector->floorheight)
				return;
		}
	}

	if (velocity.x > -STOPSPEED && velocity.x < STOPSPEED &&
		velocity.y > -STOPSPEED && velocity.y < STOPSPEED &&
		velocity.z > -STOPSPEED && velocity.z < STOPSPEED &&
		(!player || (!player->forwardmove && !player->sidemove)))
	{
		if (player)
		{
			int sn;

			// if in a walking frame, stop moving
			sn = statenum;
			if (sn >= S_PLAY_RUN1 && sn <= S_PLAY_RUN4)
				SetMobjState(this, S_PLAY);
		}
		velocity = vector(0.0, 0.0, 0.0);
	}
	else
	{
		if (waterlevel > 1)
		{
			velocity -= velocity * (FRICTION_WATER * frametime);
		}
		else
		{
			velocity -= velocity * (FRICTION * frametime);
		}
	}
}

//==========================================================================
//
//  TEST ON MOBJ
//
//==========================================================================

Entity tzmthing;
TVec tzorg;
Entity onmobj;	//generic global onmobj...used for landing on pods/players

//==========================================================================
//
//  Entity::Iter_CheckOnmobjZ
//
//==========================================================================

boolean Entity::Iter_CheckOnmobjZ(Entity thing)
{
	float blockdist;

	if (!(thing.flags & (MF_SOLID | MF_SPECIAL | MF_SHOOTABLE)))
	{
		// Can't hit thing
		return true;
	}
	blockdist = thing.radius + radius;
	if (fabs(thing.origin.x - tzorg.x) >= blockdist
		|| fabs(thing.origin.y - tzorg.y) >= blockdist)
	{
		// Didn't hit thing
		return true;
	}
	if (thing == self)
	{
		// Don't clip against self
		return true;
	}
	if (tzorg.z > thing.origin.z + thing.height)
	{
		return true;
	}
	else if (tzorg.z + height < thing.origin.z)
	{
		// under thing
		return true;
	}
	if (thing.flags & MF_SOLID)
	{
		onmobj = thing;
	}
	return (!(thing.flags & MF_SOLID));
}

//==========================================================================
//
//  PIT_CheckOnmobjZ
//
//==========================================================================

boolean PIT_CheckOnmobjZ(mobj_t * thing)
{
	return tzmthing.Iter_CheckOnmobjZ(*thing);
}

//=============================================================================
//
//  Entity::FakeZMovement
//
//  Fake the zmovement so that we can check if a move is legal
//
//=============================================================================

void Entity::FakeZMovement(void)
{
	float dist;
	float delta;

	//
	//  adjust height
	//
	tzorg.z += velocity.z * frametime;
	if (flags & MF_FLOAT && target)
	{
		// float down towards target if too close
		if (!(flags & MF_SKULLFLY) && !(flags & MF_INFLOAT))
		{
			dist = MobjDist2(this, target);
			delta = target->origin.z + height / 2.0 - tzorg.z;
			if (delta < 0.0 && dist < -(delta * 3.0))
				tzorg.z -= FLOATSPEED * frametime;
			else if (delta > 0.0 && dist < (delta * 3.0))
				tzorg.z += FLOATSPEED * frametime;
		}
	}

	//
	//  clip movement
	//
	if (tzorg.z <= floorz)
	{
		// Hit the floor
		tzorg.z = floorz;
	}
	if (tzorg.z + height > ceilingz)
	{
		// hit the ceiling
		tzorg.z = ceilingz - height;
	}
}

//=============================================================================
//
//  Entity::CheckOnmobj
//
//  Checks if the new Z position is legal
//
//=============================================================================

Entity Entity::CheckOnmobj(void)
{
	int xl, xh, yl, yh, bx, by;

	if (flags & MF_NOCLIP)
		return none;

	tzmthing = self;
	tzorg = origin;
	FakeZMovement();

	//
	// check things first, possibly picking things up
	// the bounding box is extended by MAXRADIUS because mobj_ts are grouped
	// into mapblocks based on their origin point, and can overlap into adjacent
	// blocks by up to MAXRADIUS units
	//
	xl = MapBlock(origin.x - radius - level->bmaporgx - MAXRADIUS);
	xh = MapBlock(origin.x + radius - level->bmaporgx + MAXRADIUS);
	yl = MapBlock(origin.y - radius - level->bmaporgy - MAXRADIUS);
	yh = MapBlock(origin.y + radius - level->bmaporgy + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
	{
		for (by = yl; by <= yh; by++)
		{
			if (!P_BlockThingsIterator(bx, by, PIT_CheckOnmobjZ))
			{
				return onmobj;
			}
		}
	}
	return none;
}

//===========================================================================
//
//  Entity::PlayerLandedOnThing
//
//===========================================================================

void Entity::PlayerLandedOnThing(void)
{
	player->deltaviewheight = velocity.z * frametime / 8.0;
	if (velocity.z < -GRAVITY * 0.375)
	{
		StartSoundName(this, "PlayerLand", CHAN_VOICE);
	}
}

//==========================================================================
//
//	Entity::Physics
//
//==========================================================================

boolean Entity::Physics(void)
{
	Entity onmo;

	CheckWater();
	UpdateVelocity();

	// momentum movement
	if (velocity.x || velocity.y || (flags & MF_SKULLFLY))
	{
		if (!XYMovement())
		{
			return false;
		}
	}
	if ((origin.z != floorz) || velocity.z || BlockingMobj)
	{
		// Handle Z momentum and gravity
		if (!(onmo = CheckOnmobj()))
		{
			ZMovement();
			if (player && flags & MF2_ONMOBJ)
			{
				flags2 &= ~MF2_ONMOBJ;
			}
		}
		else
		{
			if (player)
			{
				if (velocity.z < -GRAVITY * 0.25)
				{
					PlayerLandedOnThing();
				}
				if (onmo.origin.z + onmo.height - origin.z <= 24.0)
				{
					player->viewheight -= onmo.origin.z + onmo.height
						- origin.z;
					player->deltaviewheight =
						(VIEWHEIGHT - player->viewheight) / 8.0;
					origin.z = onmo.origin.z + onmo.height;
					flags2 |= MF2_ONMOBJ;
					velocity.z = 0.0;
				}
				else
				{
					// hit the bottom of the blocking actor
					velocity.z = 0.0;
				}
			}
		}
		if (destroyed)
		{
			return false;	// entity was removed
		}
	}
	return true;
}

//==========================================================================
//
//	Entity::Think
//
//==========================================================================

void Entity::Think(void)
{
	//  In my deathmatch mode remove dropped weapons after 30 seconds
	// because otherwise they are spawned fastar than player(s) can pick 
	// them up and the game is going slower and slower and slower ...
	if ((flags & MF_DROPPED) && (deathmatch == 3))
	{
		movecount++;
		if (movecount >= 30 * 35)
		{
			P_RemoveMobj(this);
			return;
		}
	}

	if (!Physics())
	{
		return;
	}

	// cycle through states,
	// calling action functions at transitions
	if (time != -1.0)
	{
		time -= frametime;

		// you can cycle through multiple states in a tic
		if (time <= 0.0)
		{
			time = 0.0;
			if (!SetMobjState(this, nextstate))
				return;	// freed itself
		}
	}
	else
	{
		// check for nightmare respawn
		if (!(flags & MF_COUNTKILL))
			return;

		//  In my deathmatch mode monstars respawns very fast
		if (deathmatch == 3)
		{
			if (level->tictime & 31)
				return;

			if (P_Random() > 32)
				return;

			P_NightmareRespawn(this);
		}
		else
		{
			if (!respawnmonsters)
				return;

			movecount++;

			if (movecount < 12 * 35)
				return;

			if (level->tictime & 31)
				return;

			if (P_Random() > 4)
				return;

			P_NightmareRespawn(this);
		}
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2001/12/01 18:08:53  dj_jl
//  Physics functions as methods, started to use class references
//
//  Revision 1.7  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.6  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
