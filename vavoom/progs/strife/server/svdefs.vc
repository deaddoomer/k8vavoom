//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

//
// Map things flags
//
#define	MTF_EASY		0x0001	// Skill flags.
#define	MTF_NORMAL		0x0002
#define	MTF_HARD		0x0004
#define	MTF_AMBUSH		0x0008	// Deaf monsters/do not react to sound.
#define MTF_DORMANT		0x0010	// The thing is dormant
#define MTF_FIGHTER		0x0020	// Thing appearing in player classes
#define MTF_CLERIC		0x0040
#define MTF_MAGE		0x0080
#define MTF_GSINGLE		0x0100	// Appearing in game modes
#define MTF_GCOOP		0x0200
#define MTF_GDEATHMATCH	0x0400

#define VIEWHEIGHT		41.0

#define BLINKTHRESHOLD 	4.0

#define INVULNTIME		30.0
#define INVISTIME		60.0
#define INFRATIME		120.0
#define IRONTIME		60.0

// follow a player exlusively for 3 seconds
#define	BASETHRESHOLD	100

#define ONFLOORZ		-99999.0
#define ONCEILINGZ		99999.0

#define MAXRADIUS		32.0

//
// Player internal flags, for cheats and debug.
//
#define CF_NOCLIP		1	// No clipping, walk through barriers.
#define CF_GODMODE		2	// No damage, no health loss.

#define MELEERANGE		64.0
#define MISSILERANGE	(32.0 * 64.0)

#define LOWERSPEED		6.0
#define RAISESPEED		6.0

#define WEAPONBOTTOM	128.0
#define WEAPONTOP		32.0

// 16 pixels of bob
#define MAXBOB			16.0

#define MAXHEALTH		100

// --- mobj.flags ---

#define MF_SPECIAL		0x00000001	// call P_SpecialThing when touched
#define MF_SOLID		0x00000002	// Blocks.
#define MF_SHOOTABLE	0x00000004	// Can be hit.
#define MF_NOSECTOR		0x00000008	// don't use the sector links
																		// (invisible but touchable)
#define MF_NOBLOCKMAP	0x00000010	// don't use the blocklinks
																		// (inert but displayable)
#define MF_AMBUSH		0x00000020
#define MF_JUSTHIT		0x00000040	// try to attack right back
#define MF_JUSTATTACKED	0x00000080	// take at least one step before attacking
#define MF_SPAWNCEILING	0x00000100	// hang from ceiling instead of floor
#define MF_NOGRAVITY	0x00000200	// don't apply gravity every tic

// movement flags
#define MF_DROPOFF		0x00000400	// allow jumps from high places
#define MF_PICKUP		0x00000800	// for players to pick up items
#define MF_NOCLIP		0x00001000	// player cheat
#define MF_SLIDE		0x00002000	// keep info about sliding along walls
#define MF_FLOAT		0x00004000	// allow moves to any height, no gravity
#define MF_TELEPORT		0x00008000	// don't cross lines or look at heights
#define MF_MISSILE		0x00010000	// don't hit same species, explode on block

#define MF_DROPPED		0x00020000	// dropped by a demon, not level spawned
#define MF_NOBLOOD		0x00080000	// don't bleed when shot (use puff)
#define MF_CORPSE		0x00100000	// don't stop moving halfway off a step
#define MF_INFLOAT		0x00200000	// floating to a height for a move, don't
																		// auto float to target's height

#define MF_COUNTKILL	0x00400000	// count towards intermission kill total
#define MF_COUNTITEM	0x00800000	// count towards intermission item total

#define MF_SKULLFLY		0x01000000	// skull in flight
#define MF_TRANSLATION1	0x04000000
#define MF_TRANSLATION2	0x08000000

#define MF_UNUSED4		0x80000000

#define MF_WATERJUMP	0x40000000

#define INITIAL_HEALTH		100
#define INITIAL_AMMO		50
#define BFGCELLS			40
#define SOULSPHERE_MAX		200
#define SOULSPHERE_HEALTH	100
#define MEGASPHERE_HEALTH	200
#define GOD_HEALTH			100

// [RH] Equivalents for BOOM's generalized sector types

#define DAMAGE_MASK		0x0300
#define SECRET_MASK		0x0400
#define FRICTION_MASK	0x0800
#define PUSH_MASK		0x1000

#define PD_BLUEO		"You need a blue key to activate this object"
#define PD_REDO		"You need a red key to activate this object"
#define PD_YELLOWO		"You need a yellow key to activate this object"
#define PD_BLUEK		"You need a blue key to open this door"
#define PD_REDK		"You need a red key to open this door"
#define PD_YELLOWK		"You need a yellow key to open this door"
#define GOTARMOR		"Picked up the armor."
#define GOTMEGA		"Picked up the MegaArmor!"
#define GOTHTHBONUS		"Picked up a health bonus."
#define GOTARMBONUS		"Picked up an armor bonus."
#define GOTSTIM		"Picked up a stimpack."
#define GOTMEDINEED		"Picked up a medikit that you REALLY need!"
#define GOTMEDIKIT		"Picked up a medikit."
#define GOTSUPER		"Supercharge!"
#define GOTBLUECARD		"Picked up a blue keycard."
#define GOTYELWCARD		"Picked up a yellow keycard."
#define GOTREDCARD		"Picked up a red keycard."
#define GOTBLUESKUL		"Picked up a blue skull key."
#define GOTYELWSKUL		"Picked up a yellow skull key."
#define GOTREDSKULL		"Picked up a red skull key."
#define GOTINVUL		"Invulnerability!"
#define GOTBERSERK		"Berserk!"
#define GOTINVIS		"Partial Invisibility"
#define GOTSUIT		"Radiation Shielding Suit"
#define GOTMAP		"Computer Area Map"
#define GOTVISOR		"Light Amplification Visor"
#define GOTMSPHERE		"MegaSphere!"
#define GOTCLIP		"Picked up a clip."
#define GOTCLIPBOX		"Picked up a box of bullets."
#define GOTROCKET		"Picked up a rocket."
#define GOTROCKBOX		"Picked up a box of rockets."
#define GOTCELL		"Picked up an energy cell."
#define GOTCELLBOX		"Picked up an energy cell pack."
#define GOTSHELLS		"Picked up 4 shotgun shells."
#define GOTSHELLBOX		"Picked up a box of shotgun shells."
#define GOTBACKPACK		"Picked up a backpack full of ammo!"
#define GOTBFG9000		"You got the BFG9000!  Oh, yes."
#define GOTCHAINGUN		"You got the chaingun!"
#define GOTCHAINSAW		"A chainsaw!  Find some meat!"
#define GOTLAUNCHER		"You got the rocket launcher!"
#define GOTPLASMA		"You got the plasma gun!"
#define GOTSHOTGUN		"You got the shotgun!"
#define GOTSHOTGUN2		"You got the super shotgun!"

// CONSTANTS ---------------------------------------------------------------

enum
{
	wp_fist,
	wp_crossbow,
	wp_riffle,
	wp_missile,
	wp_grenade,
	wp_flame,
	wp_blaster,
	wp_sigil,

	NUMWEAPONS,

	// No pending weapon change.
	wp_nochange
};

// Ammunition types defined.
enum
{
	am_clip,
	am_electric_arrow,
	am_poison_arrow,
	am_cell,
	am_misl,
	am_grenade1,
	am_grenade2,

	NUMAMMO,

	am_noammo	// Unlimited for chainsaw / fist.
};

enum
{
	it_bluecard,
	it_yellowcard,
	it_redcard,
	it_blueskull,
	it_yellowskull,
	it_redskull,

	NUMCARDS
};

// Power up artifacts.
enum
{
	pw_invulnerability,
	pw_strength,
	pw_invisibility,
	pw_ironfeet,
	pw_infrared,
	NUMPOWERS
};

enum
{
	FLOOR_SOLID,
	FLOOR_WATER,
	FLOOR_SLUDGE,
	FLOOR_LAVA
};

enum
{
	CONTENTS_EMPTY,
	CONTENTS_WATER,
	CONTENTS_SLUDGE,
	CONTENTS_LAVA,

	CONTENTS_SOLID = -1
};

enum
{
	CSHIFT_CONTENTS
};

enum
{
	CHAN_AUTO,
	CHAN_VOICE,
	CHAN_WEAPON,
	CHAN_ITEM,
	CHAN_BODY
};

// TYPES -------------------------------------------------------------------

class mobj_t:base_mobj_t
{
	//  States
	int spawnstate;
	int seestate;
	int painstate;
	int meleestate;
	int missilestate;
	int crashstate;
	int deathstate;
	int xdeathstate;
	int raisestate;

	//  Sounds
	int sound_sight;
	int sound_active;
	int sound_attack;
	int sound_pain;
	int sound_death;

	//  Params
	float mass;
	float speed;
	int painchance;
	int spawnhealth;
	int gibshealth;
	string classname;

	float time;	// state tic counter
	int statenum;
	int nextstate;

	// Thing being chased/attacked (or NULL),
	// also the originator for missiles.
	mobj_t *target;

	// Thing being chased/attacked for tracers.
	mobj_t *tracer;

	classid type;

	int damage;	// For missiles

	// Player number last looked for.
	int lastlook;

	// For nightmare respawn.
	mthing_t spawnpoint;

	// Reaction time: if non 0, don't attack yet.
	// Used by player to freeze a bit after teleporting.
	int reactiontime;

	// If >0, the target will be chased
	// no matter what (even if shot)
	int threshold;

	// Movement direction, movement generation (zig-zagging).
	int movedir;	// 0-7
	int movecount;	// when 0, select a new dir

	//  Water
	int waterlevel;
	int watertype;

	void Think(void);
	void Archive(void);
	void Unarchive(void);
	void OnMapSpawn(mthing_t *mthing);
};

class Actor:mobj_t
{
}

class Missile:mobj_t
{
}

addfields player_t
{
	int ammo[NUMAMMO];
	int ready_ammo;

	boolean weaponowned[NUMWEAPONS];

	int armorpoints;

	int keys;

	boolean backpack;

	int readyweapon;

	// For screen flashing (red or bright).
	int damagecount;
	int bonuscount;

	// Bit flags, for cheats and debug.
	// See cheat_t, above.
	int cheats;

	// Power ups. invinc and invis are tic counters.
	int powers[NUMPOWERS];

	// Base height above floor for viewz.
	float viewheight;
	// Bob/squat speed.
	float deltaviewheight;
	// bounded/scaled total momentum.
	float bob;

	// Refired shots are less accurate.
	int refire;

	// Is wp_nochange if not changing.
	int pendingweapon;

	int w_ammo;
	int w_upstate;
	int w_downstate;
	int w_readystate;
	int w_atkstate;
	int w_holdatkstate;
	int w_flashstate;

	// Who did damage (NULL for floors/ceilings).
	mobj_t *attacker;

	int jumpTics;

	// Armor type is 0-2.
	int armortype;

	TVec movedir;
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int num_stats = 0;
boolean respawnmonsters;

// CODE --------------------------------------------------------------------

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.2  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.1  2001/10/09 17:35:46  dj_jl
//  Split server defines into seperate file
//
//**************************************************************************
