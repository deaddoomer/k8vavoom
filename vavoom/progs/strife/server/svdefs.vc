//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

//
// Map things flags
//
#define	MTF_EASY		0x0001	// Skill flags.
#define	MTF_NORMAL		0x0002
#define	MTF_HARD		0x0004
#define	MTF_AMBUSH		0x0008	// Deaf monsters/do not react to sound.
#define MTF_DORMANT		0x0010	// The thing is dormant
#define MTF_FIGHTER		0x0020	// Thing appearing in player classes
#define MTF_CLERIC		0x0040
#define MTF_MAGE		0x0080
#define MTF_GSINGLE		0x0100	// Appearing in game modes
#define MTF_GCOOP		0x0200
#define MTF_GDEATHMATCH	0x0400

#define VIEWHEIGHT		41.0

#define BLINKTHRESHOLD 	4.0

#define INVULNTIME		30.0
#define INVISTIME		60.0
#define INFRATIME		120.0
#define IRONTIME		60.0

// follow a player exlusively for 3 seconds
#define	BASETHRESHOLD	100

#define ONFLOORZ		-99999.0
#define ONCEILINGZ		99999.0

//
// Player internal flags, for cheats and debug.
//
#define CF_NOCLIP		1	// No clipping, walk through barriers.
#define CF_GODMODE		2	// No damage, no health loss.

#define MELEERANGE		64.0
#define MISSILERANGE	(32.0 * 64.0)

#define LOWERSPEED		6.0
#define RAISESPEED		6.0

#define WEAPONBOTTOM	128.0
#define WEAPONTOP		32.0

// 16 pixels of bob
#define MAXBOB			16.0

#define MAXHEALTH		100

#define INITIAL_HEALTH		100
#define INITIAL_AMMO		50
#define GOD_HEALTH			100

// [RH] Equivalents for BOOM's generalized sector types

#define DAMAGE_MASK		0x0300
#define SECRET_MASK		0x0400
#define FRICTION_MASK	0x0800
#define PUSH_MASK		0x1000

enum
{
	PO_ANCHOR_TYPE = 9300,
	PO_SPAWN_TYPE,
	PO_SPAWNCRUSH_TYPE
};

//#define POLY_SEQ_NAME(num)		va("Sequence%d", num)
#define POLY_SEQ_NAME(num)		'Sequence0'

// CONSTANTS ---------------------------------------------------------------

enum
{
	wp_fist,
	wp_crossbow,
	wp_riffle,
	wp_missile,
	wp_grenade,
	wp_flame,
	wp_blaster,
	wp_sigil,

	NUMWEAPONS,

	// No pending weapon change.
	wp_nochange
};

// Ammunition types defined.
enum
{
	am_clip,
	am_electric_arrow,
	am_poison_arrow,
	am_cell,
	am_misl,
	am_grenade1,
	am_grenade2,

	NUMAMMO,

	am_noammo	// Unlimited for chainsaw / fist.
};

enum
{
	KEY_BaseKey,
	KEY_GovsKey,
	KEY_Passcard,
	KEY_IDBadge,
	KEY_PrisonKey,
	KEY_SeveredHand,
	KEY_Power1Key,
	KEY_Power2Key,
	KEY_GoldKey,
	KEY_Power3Key,
	KEY_IDCard,
	KEY_SilverKey,
	KEY_OracleKey,
	KEY_MilitaryID,
	KEY_OrderKey,
	KEY_WarehouseKey,
	KEY_BrassKey,
	KEY_RedCrystalKey,
	KEY_BlueCrystalKey,
	KEY_ChapelKey,
	KEY_CatacombKey,
	KEY_SecurityKey,
	KEY_CoreKey,
	KEY_MaulerKey,
	KEY_FactoryKey,
	KEY_MineKey,
	KEY_NewKey5,

	NUMKEYS
};

// Power up artifacts.
enum
{
	pw_invulnerability,
	pw_strength,
	pw_invisibility,
	pw_ironfeet,
	pw_infrared,
	NUMPOWERS
};

enum
{
	FLOOR_SOLID,
	FLOOR_WATER,
	FLOOR_SLUDGE,
	FLOOR_LAVA
};

enum
{
	CONTENTS_EMPTY,
	CONTENTS_WATER,
	CONTENTS_SLUDGE,
	CONTENTS_LAVA,

	CONTENTS_SOLID = -1
};

enum
{
	CSHIFT_CONTENTS
};

enum
{
	CHAN_AUTO,
	CHAN_VOICE,
	CHAN_WEAPON,
	CHAN_ITEM,
	CHAN_BODY
};

// TYPES -------------------------------------------------------------------

class Actor:Entity
	abstract
{
	//  States
	int IdleState;
	int SeeState;
	int MeleeState;
	int MissileState;
	int PainState;
	int DyingState;
	int DeathState;
	int GibsDeathState;

	//  Sounds
	name SightSound;
	name ActiveSound;
	name AttackSound;
	name PainSound;
	name DeathSound;

	//	Flags
	bool bSpecial;			// call P_SpecialThing when touched
	bool bShootable;		// Can be hit.
	bool bAmbush;
	bool bJustHit;			// try to attack right back
	bool bJustAttacked;		// take at least one step before attacking
	bool bSpawnCeiling;		// hang from ceiling instead of floor
	// movement flags
	bool bUnknown6;
	bool bUnknown5;
	bool bSlide;			// keep info about sliding along walls
	bool bUnknown4;
	bool bMissile;			// don't hit same species, explode on block
	bool bDropped;			// dropped by a demon, not level spawned
	bool bNoBlood;			// don't bleed when shot (use puff)
	bool bCorpse;			// don't stop moving halfway off a step
	bool bInFloat;			// floating to a height for a move, don't
							// auto float to target's height
	bool bSkullFly;			// skull in flight
	bool bCountKill;		// count towards intermission kill total
	bool bUnknown1;
	bool bUnknown2;
	bool bUnknown3;
	bool bOnMobj;
	bool bActivateMCross;	// can activate monster cross lines
	bool bActivatePCross;	// can activate projectile cross lines
	bool bDormant;			// thing is dormant
	bool bWaterJump;
	bool bNoDeathmatch;

	//  Params
	float Speed;
	float StepSpeed;
	float PainChance;
	int SpawnHealth;
	int GibsHealth;
	name ClassName;

	// Thing being chased/attacked (or NULL),
	Actor Enemy;
	// also the originator for missiles.
	Actor Instigator;

	int MissileDamage;	// For missiles

	// Player number last looked for.
	int LastLook;

	// For nightmare respawn.
	mthing_t SpawnSpot;

	// Reaction time: if non 0, don't attack yet.
	int ReactionCount;
	// Used by player to freeze a bit after teleporting.
	float ReactionTime;

	// If >0, the target will be chased
	// no matter what (even if shot)
	int Threshold;

	// Movement direction, movement generation (zig-zagging).
	int MoveDir;	// 0-7
	int MoveCount;	// when 0, select a new dir

	// Identifier in conversation scripts, originaly index into mobjinfo.
	int ConversationID;

	void HideSpecial(void);
	void TouchSpecial(Actor Toucher);

	boolean Touch(MapObject Other);
	void CrossSpecialLine(line_t *ld, int side);

	void Tick(float deltaTime);
	void OnMapSpawn(mthing_t *mthing);

	void SetOrigin2(TVec origin);
	void ExplodeMissile(void);
	void CheckMissileSpawn(void);
	Actor SpawnMissile(Actor dest, classid type);
	void Died(Actor source);
	void Damage(Actor inflictor, Actor source, int damage);
	void NightmareRespawn(void);

	boolean TeleportMove(TVec org);
	int Teleport(float x, float y, float angle);

	void Thrust(float angle, float move);

	// Physics
	void XYMovement(void);
	void ZMovement(void);
	void ApplyFriction(void);
	void PlayerLandedOnThing(void);
	boolean Physics(void);

	boolean HeightClip(void);
	void RadiusAttack(int damage, int distance, boolean damageSource);

	int CheckMeleeRange(void);
	int CheckMissileRange(void);
	boolean LookForMonsters(boolean allaround);
	boolean LookForPlayers(boolean allaround);
	boolean StepMove(void);
	boolean TryWalk(void);
	void NewChaseDir(void);

	// Action functions
	void A_Unknown24(void);
	void A_Unknown25(void);
	void A_DecReactionCount(void);
	void A_Unknown27(void);
	void A_FireGrenadeExplode(void);
#ifdef TEASER
	void A_GasGrenadeExplode(void);
#endif
	void A_Explode2(void);
	void A_Unknown30(void);
	void A_Unknown31(void);
	void A_Unknown32(void);
#ifndef TEASER
	void A_RocketTrail(void);
#endif
	void A_Unknown34(void);
	void A_ActiveSound(void);
	void A_MaulerTorpedoExplode(void);
	void A_Explode(void);
	void A_Pain(void);
	void A_PlayerScream(void);
	void A_Fall(void);
	void A_XDying(void);
	void A_XScream(void);
	void A_Stand(void);
	void A_Scream(void);
	void A_Burn(void);
	void A_Walk(void);
	void A_Dying(void);
	void A_FaceTarget(void);
	void A_ResetHealth(void);
	void A_Unknown54(void);
	void A_Unknown55(void);
	void A_Unknown56(void);
	void A_Look(void);
	void A_Chase(void);
	void A_CheckRefire(void);
	void A_RiffleAttack(void);
	void A_RobotMelee(void);
	void A_RobotMissile(void);
	void A_Unknown64(void);
	void A_Unknown72(void);
	void A_FlightChase(void);
	void A_SpecterMelee(void);
	void A_SpecterAttack(void);
	void A_SpecterDying(void);
#ifndef TEASER
	void A_SpecterDeath(void);
#endif
	void A_Specter2Attack(void);
	void A_Specter3Attack(void);
	void A_Specter4Attack(void);
	void A_Specter5Attack(void);
	void A_Unknown90(void);
	void A_Unknown91(void);
	void A_Unknown92(void);
	void A_FlameFXExplode(void);
	void A_CheckAlarm(void);
	void A_AlarmActive(void);
	void A_Unknown110(void);
	void A_SpawnPuff(void);
	void A_Unknown112(void);
	void A_Unknown113(void);
	void A_Unknown114(void);
	void A_SummonRebel(void);

	defaultproperties
	{
		Health = 1000;
		Radius = 20.0;
		Height = 16.0;
		Mass = 100.0;
		MaxStepHeight = 16.0;
		ReactionCount = 8;
	}
}

class Pawn:Actor
	abstract
{
	bool bCkeckNoMonsters;

	void OnMapSpawn(mthing_t *mthing);

	defaultproperties
	{
		Health = 0;
		Radius = 0.0;
		Height = 0.0;
		Mass = 0.0;
		bSolid = true;
		bShootable = true;
		bCountKill = true;
		bCkeckNoMonsters = true;
		bActivateMCross = true;
	}
}

class PlayerPawn:Pawn
	abstract
{
	boolean GiveAmmo(int ammo, int num);
	boolean GiveWeapon(int weapon, boolean dropped);
	boolean GiveBody(int num);
	boolean GiveArmor(int armortype);
	boolean GiveKey(int key);
	boolean GiveItem(int item);
	boolean GivePower(int power);

	void ThrustPlayer(float angle, float move, float deltaTime);
	void CalcHeight(float deltaTime);
	void MovePlayer(float deltaTime);
	void CheckWaterJump(void);
	void WaterMove(float deltaTime);
	void WaterJump(void);
	void PlayerInSpecialSector(void);
	void PlayerInContents(void);
	void DeathPlayerTick(float deltaTime);
	void PlayerImpulse(void);
	void PlayerTick(float deltaTime);
	void PaletteFlash(void);
	void SetViewPos(void);

	void SetPlayerRunState(void);
	Actor SpawnPlayerMissile(classid type);

	defaultproperties
	{
		ReactionCount = 0;
		bCountKill = false;
		bCkeckNoMonsters = false;
		bActivateMCross = false;
	}
}

class Pickup:Actor
	abstract
{
	name PickupSound;
	string PickupString;

	boolean ValidTouch(Actor Toucher);
	boolean HandlePickup(Actor Toucher);
	void HideSpecial(void);
	void TouchSpecial(Actor Toucher);

	defaultproperties
	{
		Height = 8.0;
		bSpecial = true;
		PickupSound = 'PickupItem';
		PickupString = "Item";
	}
}

class Projectile:Actor
	abstract
{
	defaultproperties
	{
		bMissile = true;
		bNoBlockmap = true;
		bNoGravity = true;
		bDropOff = true;
		bActivateMCross = true;
	}
}

class Effect:Actor
{
	defaultproperties
	{
		bNoBlockmap = true;
		bNoGravity = true;
	}
}

class Decoration:Actor
	abstract
{
	defaultproperties
	{
	}
}

class Weapon:ViewEntity
{
	int Ammo;
	int UpState;
	int DownState;
	int ReadyState;
	int AttackState;
	int HoldAttackState;
	int FlashState;

	void A_GunFlash(void);

	void A_Light0(void);
	void A_WeaponReady(void);
	void A_Lower(void);
	void A_Raise(void);
	void A_ReFire(void);
	void A_7(void);
	void A_CheckReload(void);
	void A_Light1(void);
	void A_Light2(void);

	defaultproperties
	{
	}
}

addfields player_t
{
	int Ammo[NUMAMMO];
	int ReadyAmmo;

	boolean WeaponOwned[NUMWEAPONS];

	int ArmorPoints;

	int Keys;

	boolean Backpack;

	int ReadyWeapon;

	// For screen flashing (red or bright).
	int DamageCount;
	int BonusCount;

	// Bit flags, for cheats and debug.
	// See cheat_t, above.
	int Cheats;

	// Power ups. invinc and invis are tic counters.
	int Powers[NUMPOWERS];

	// Base height above floor for viewz.
	float ViewHeight;
	// Bob/squat speed.
	float DeltaViewHeight;
	// bounded/scaled total momentum.
	float Bob;

	// Refired shots are less accurate.
	int Refire;

	// Is wp_nochange if not changing.
	int PendingWeapon;

	// Who did damage (NULL for floors/ceilings).
	Actor *Attacker;

	int JumpTics;

	// Armor type is 0-2.
	int ArmorType;

	TVec MoveDir;
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int num_stats = 0;
boolean respawnmonsters;

float FloatBobOffsets[64] = {
	0.0, 0.7841339111, 1.560714722, 2.322265625,
	3.061462402, 3.77116394, 4.444549561, 5.075134277,
	5.656845093, 6.184082031, 6.651748657, 7.055358887,
	7.391021729, 7.655517578, 7.8462677, 7.961471558,
	7.999984741, 7.961471558, 7.8462677, 7.655517578,
	7.391021729, 7.055358887, 6.651748657, 6.184082031,
	5.656845093, 5.075134277, 4.444549561, 3.77116394,
	3.061462402, 2.322265625, 1.560714722, 0.7841339111,
	-0.0000152587, -0.7841491699, -1.56072998, -2.322280884,
	-3.061477661, -3.771179199, -4.444564819, -5.075149536,
	-5.656860352, -6.18409729, -6.651763916, -7.055374146,
	-7.391052246, -7.655532837, -7.846298218, -7.961486816,
	-8.0, -7.961486816, -7.846298218, -7.655532837,
	-7.391052246, -7.055374146, -6.651763916, -6.18409729,
	-5.656860352, -5.075149536, -4.444564819, -3.771179199,
	-3.061477661, -2.322280884, -1.56072998, -0.7841339111
};

// CODE --------------------------------------------------------------------

//**************************************************************************
//
//  $Log$
//  Revision 1.36  2002/07/13 07:56:42  dj_jl
//  Huge work on Strife: splitting, merging, implementing stuff, etc.
//
//  Revision 1.35  2002/06/29 15:59:26  dj_jl
//  Split out items, projectiles and decorations.
//
//  Revision 1.34  2002/06/22 07:18:44  dj_jl
//  Seperated all pickup items.
//
//  Revision 1.33  2002/05/18 17:00:04  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.32  2002/05/03 17:17:32  dj_jl
//  Started work on weapons and items.
//
//  Revision 1.31  2002/04/27 17:04:55  dj_jl
//  Merged all creatures.
//
//  Revision 1.30  2002/04/22 17:22:32  dj_jl
//  Retail Strife data.
//
//  Revision 1.29  2002/04/11 16:50:54  dj_jl
//  Made TryMove native, Tick function.
//
//  Revision 1.28  2002/03/28 18:11:24  dj_jl
//  Changed hiding of specials like in Raven games.
//
//  Revision 1.27  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.26  2002/03/16 17:48:58  dj_jl
//  Added PlayerPawn class, beautifucation.
//
//  Revision 1.25  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.24  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.23  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.22  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.21  2002/02/22 18:00:26  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/16 16:27:44  dj_jl
//  Added bool variables
//
//  Revision 1.19  2002/02/14 19:21:00  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/07 18:50:09  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.17  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/01/29 18:10:32  dj_jl
//  Added MCROSS and PCROSS flags
//
//  Revision 1.15  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.14  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:01  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/12 18:00:48  dj_jl
//  Sound names initialized as names
//
//  Revision 1.10  2002/01/11 18:16:34  dj_jl
//  Moved here Actor and Weapon class declarations
//
//  Revision 1.9  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/18 18:29:22  dj_jl
//  Added Hexen action specials
//
//  Revision 1.6  2001/12/12 18:57:43  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/12/01 18:08:53  dj_jl
//  Physics functions as methods, started to use class references
//
//  Revision 1.4  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.3  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.2  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.1  2001/10/09 17:35:46  dj_jl
//  Split server defines into seperate file
//
//**************************************************************************
