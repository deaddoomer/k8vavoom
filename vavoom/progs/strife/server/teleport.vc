//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    TELEPORTATION
//**
//**************************************************************************

float teleport_bbox[4];
mobj_t *teleport_thing;
float teleport_x;
float teleport_y;

//==========================================================================
//
//  PIT_StompThing
//
//==========================================================================

boolean PIT_StompThing(mobj_t * thing)
{
	float blockdist;

	if (!(thing->Flags & MF_SHOOTABLE))
		return true;

	blockdist = thing->Radius + teleport_thing->Radius;

	if (fabs(thing->origin.x - teleport_x) >= blockdist
		|| fabs(thing->origin.y - teleport_y) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (thing == teleport_thing)
		return true;

#ifdef DOOM2
	// monsters don't stomp things except on boss level
	if (!(teleport_thing->player
			|| !strcmp(ptrtos(&level->mapname[0]), "MAP30")))
#else
	if (!(teleport_thing->player != NULL))
#endif
	{
		return false;
	}

	thing->Damage(*teleport_thing, *teleport_thing, 10000);

	return true;
}

//==========================================================================
//
//  P_TeleportMove
//
//==========================================================================

boolean P_TeleportMove(mobj_t * thing, float x, float y)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;

	// kill anything occupying the position
	teleport_thing = thing;

	teleport_x = x;
	teleport_y = y;

	// stomp on any things contacted
	xl = MapBlock(x - thing->Radius - level->bmaporgx - MAXRADIUS);
	xh = MapBlock(x + thing->Radius - level->bmaporgx + MAXRADIUS);
	yl = MapBlock(y - thing->Radius - level->bmaporgy - MAXRADIUS);
	yh = MapBlock(y + thing->Radius - level->bmaporgy + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockThingsIterator(bx, by, PIT_StompThing))
				return false;

	// the move is ok,
	// so link the thing into its new position
	P_UnsetThingPosition(*thing);

	thing->origin.x = x;
	thing->origin.y = y;

	P_SetThingPosition(*thing);

	return true;
}

//==========================================================================
//
//  P_Teleport
//
//==========================================================================

int P_Teleport(mobj_t * thing, float x, float y, float angle)
{
	float oldx;
	float oldy;
	float oldz;
	mobj_t *fog;

	oldx = thing->origin.x;
	oldy = thing->origin.y;
	oldz = thing->origin.z;

	if (!P_TeleportMove(thing, x, y))
		return 0;

	thing->origin.z = thing->floorz;	//fixme: not needed?
	if (thing->player)
		thing->player->vieworg.z =
			thing->origin.z + thing->player->viewheight;

	// spawn teleport fog at source and destination
	fog = P_SpawnMobj(oldx, oldy, oldz, TeleportFog);
	StartSoundName(*fog, 'Teleport', CHAN_VOICE);

	fog = P_SpawnMobj(x + 20.0 * cos(angle),
		y + 20.0 * sin(angle), thing->origin.z, TeleportFog);

	// emit sound, where?
	StartSoundName(*fog, 'Teleport', CHAN_VOICE);

	// don't move for a bit
	if (thing->player)
	{
		thing->ReactionTime = 0.5;
		thing->player->fixangle = true;
	}

	thing->angles.yaw = angle;
	thing->velocity.x = thing->velocity.y = thing->velocity.z = 0.0;
	return 1;
}

//==========================================================================
//
//  EV_Teleport
//
//==========================================================================

int EV_Teleport(int tag, mobj_t * thing, boolean usefog)
{
	int i;
	Actor m;
	sector_t *sector;

	// don't teleport missiles
	if (thing->Flags & MF_MISSILE)
		return 0;

	FOREACH(Actor, m)
	{
		// not a teleportman
		if (m.Class != TeleportSpot)
			continue;

		// wrong sector
		if (m.tid != tag)
			continue;

		return P_Teleport(thing, m.origin.x, m.origin.y, m.angles.yaw);
	}
	return 0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:01  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:43  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/09/25 17:12:09  dj_jl
//  Switched to Hexen map format, special thinker classes
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
