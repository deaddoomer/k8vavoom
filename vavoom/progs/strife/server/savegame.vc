//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	$Id$
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**	$Log$
//**	Revision 1.2  2001/07/27 14:27:53  dj_jl
//**	Update with Id-s and Log-s, some fixes
//**
//**************************************************************************

//==========================================================================
//
//	ArchivePlayer
//
//==========================================================================

void ArchivePlayer(player_t *player)
{
}

//==========================================================================
//
//	UnarchivePlayer
//
//==========================================================================

void UnarchivePlayer(player_t *player)
{
	player->attacker = NULL;
}

//==========================================================================
//
//	ArchiveMobj
//
//==========================================================================

void ArchiveMobj(mobj_t *mobj)
{
	mobj->tracer = MobjToNum(mobj->tracer);
	mobj->target = MobjToNum(mobj->target);
}

//==========================================================================
//
//	UnarchiveMobj
//
//==========================================================================

void UnarchiveMobj(mobj_t *mobj)
{
	mobj->tracer = NumToMobj(mobj->tracer);
	mobj->target = NumToMobj(mobj->target);
}

//==========================================================================
//
//  ArchiveSpecial
//
//==========================================================================

void ArchiveSpecial(special_t *spec)
{
	spec->sector = SectorToNum(spec->sector);
}

//==========================================================================
//
//  UnarchiveSpecial
//
//==========================================================================

void UnarchiveSpecial(special_t *spec)
{
	spec->sector = NumToSector(spec->sector);

	//	Set sector's specialdata
    if (spec->function == T_MoveCeiling ||
    	spec->function == T_VerticalDoor ||
        spec->function == T_MoveFloor ||
    	spec->function == T_PlatRaise)
    {
	    spec->sector->specialdata = spec;
	}

	//	Add ceiling to active ceilings
    if (spec->function == T_MoveCeiling)
    {
    	P_AddActiveCeiling(spec);
    }

	//	Add plat to activaplats
	if (spec->function == T_PlatRaise)
    {
	    P_AddActivePlat(spec);
	}
}

//==========================================================================
//
//
//
//==========================================================================
//==========================================================================
//
//
//
//==========================================================================
//==========================================================================
//
//
//
//==========================================================================
