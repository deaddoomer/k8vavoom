//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	$Id$
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//	ArchivePlayer
//
//==========================================================================

void ArchivePlayer(player_t *player)
{
}

//==========================================================================
//
//	UnarchivePlayer
//
//==========================================================================

void UnarchivePlayer(player_t *player)
{
	player->attacker = NULL;
}

//==========================================================================
//
//	mobj_t::Archive
//
//==========================================================================

void mobj_t::Archive(void)
{
	tracer = MobjToNum(tracer);
	target = MobjToNum(target);
}

//==========================================================================
//
//	mobj_t::Unarchive
//
//==========================================================================

void mobj_t::Unarchive(void)
{
	tracer = NumToMobj(tracer);
	target = NumToMobj(target);
}

//==========================================================================
//
//  special_t::Archive
//
//==========================================================================

void special_t::Archive(void)
{
	sector = SectorToNum(sector);
}

//==========================================================================
//
//  special_t::Unarchive
//
//==========================================================================

void special_t::Unarchive(void)
{
	sector = NumToSector(sector);

	//	Set sector's specialdata
    if (function == T_MoveCeiling ||
    	function == T_VerticalDoor ||
        function == T_MoveFloor ||
    	function == T_PlatRaise)
    {
	    sector->specialdata = this;
	}

	//	Add ceiling to active ceilings
    if (function == T_MoveCeiling)
    {
    	P_AddActiveCeiling(this);
    }

	//	Add plat to activaplats
	if (function == T_PlatRaise)
    {
	    P_AddActivePlat(this);
	}
}

//**************************************************************************
//
//	$Log$
//	Revision 1.3  2001/09/20 16:20:00  dj_jl
//	Start using object-oriented stuff, beautification
//
//	Revision 1.2  2001/07/27 14:27:53  dj_jl
//	Update with Id-s and Log-s, some fixes
//
//**************************************************************************
