//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	AcolyteBase
//
//**************************************************************************

class AcolyteBase:Pawn
	abstract
{

#ifndef TEASER
void A_AcolyteDeath(void)
{
}
#endif

__states__
{
	S_ACOLYTE_XDIE1('GIBS', 0, 5.0 / 35.0, S_ACOLYTE_XDIE2) { A_Fall(); }
	S_ACOLYTE_XDIE2('GIBS', 1, 5.0 / 35.0, S_ACOLYTE_XDIE3) { A_XDying(); }
	S_ACOLYTE_XDIE3('GIBS', 2, 5.0 / 35.0, S_ACOLYTE_XDIE4) { A_XDying(); }
	S_ACOLYTE_XDIE4('GIBS', 3, 4.0 / 35.0, S_ACOLYTE_XDIE5) { A_XDying(); }
	S_ACOLYTE_XDIE5('GIBS', 4, 4.0 / 35.0, S_ACOLYTE_XDIE6) { A_XScream(); }
	S_ACOLYTE_XDIE6('GIBS', 5, 4.0 / 35.0, S_ACOLYTE_XDIE7) { A_XDying(); }
	S_ACOLYTE_XDIE7('GIBS', 6, 4.0 / 35.0, S_ACOLYTE_XDIE8) { }
	S_ACOLYTE_XDIE8('GIBS', 7, 4.0 / 35.0, S_ACOLYTE_XDIE9) { }
	S_ACOLYTE_XDIE9('GIBS', 8, 5.0 / 35.0, S_ACOLYTE_XDIE10) { }
#ifdef TEASER
	S_ACOLYTE_XDIE10('GIBS', 9, 5.0 / 35.0, S_ACOLYTE_XDIE11) { }
#else
	S_ACOLYTE_XDIE10('GIBS', 9, 5.0 / 35.0, S_ACOLYTE_XDIE11) { A_AcolyteDeath(); }
#endif
	S_ACOLYTE_XDIE11('GIBS', 10, 5.0 / 35.0, S_ACOLYTE_XDIE12) { }
	S_ACOLYTE_XDIE12('GIBS', 11, 1400.0 / 35.0, S_NULL) { }
}

defaultproperties
{
}

}

//**************************************************************************
//
//	Acolyte
//
//**************************************************************************

class Acolyte:AcolyteBase
	__mobjinfo__(3002)
{

void A_AcolyteChase(void)
{
}

__states__
{
	S_ACOLYTE_STAND('AGRD', 0, 5.0 / 35.0, S_ACOLYTE_STAND) { A_Stand(); }
	S_ACOLYTE_STAND_R('AGRD', 1, 8.0 / 35.0, S_ACOLYTE_STAND) { A_Unknown56(); }
	S_ACOLYTE_STAND_L('AGRD', 3, 8.0 / 35.0, S_ACOLYTE_STAND) { }
	S_ACOLYTE_WALK1('AGRD', 0, 5.0 / 35.0, S_ACOLYTE_WALK2) { A_Walk(); }
	S_ACOLYTE_WALK2('AGRD', 1, 5.0 / 35.0, S_ACOLYTE_WALK3) { A_Walk(); }
	S_ACOLYTE_WALK3('AGRD', 2, 5.0 / 35.0, S_ACOLYTE_WALK4) { A_Walk(); }
	S_ACOLYTE_WALK4('AGRD', 3, 5.0 / 35.0, S_ACOLYTE_WALK5) { A_Walk(); }
	S_ACOLYTE_WALK5('AGRD', 0, 5.0 / 35.0, S_ACOLYTE_WALK6) { A_Walk(); }
	S_ACOLYTE_WALK6('AGRD', 1, 5.0 / 35.0, S_ACOLYTE_WALK7) { A_Walk(); }
	S_ACOLYTE_WALK7('AGRD', 2, 5.0 / 35.0, S_ACOLYTE_WALK8) { A_Walk(); }
	S_ACOLYTE_WALK8('AGRD', 3, 5.0 / 35.0, S_ACOLYTE_STAND) { A_Walk(); }
	S_ACOLYTE_RUN1('AGRD', 0, 6.0 / 35.0, S_ACOLYTE_RUN2) { A_AcolyteChase(); }
	S_ACOLYTE_RUN2('AGRD', 1, 6.0 / 35.0, S_ACOLYTE_RUN3) { A_Chase(); }
	S_ACOLYTE_RUN3('AGRD', 2, 6.0 / 35.0, S_ACOLYTE_RUN4) { A_Chase(); }
	S_ACOLYTE_RUN4('AGRD', 3, 6.0 / 35.0, S_ACOLYTE_RUN1) { A_Chase(); }
	S_ACOLYTE_ATK1('AGRD', 4, 8.0 / 35.0, S_ACOLYTE_ATK2) { A_FaceTarget(); }
	S_ACOLYTE_ATK2('AGRD', 5, 4.0 / 35.0, S_ACOLYTE_ATK3) { A_RiffleAttack(); }
	S_ACOLYTE_ATK3('AGRD', 4, 4.0 / 35.0, S_ACOLYTE_ATK4) { A_RiffleAttack(); }
	S_ACOLYTE_ATK4('AGRD', 5, 6.0 / 35.0, S_ACOLYTE_RUN1) { A_RiffleAttack(); }
	S_ACOLYTE_PAIN('AGRD', 14, 8.0 / 35.0, S_ACOLYTE_RUN1) { A_Pain(); }
	S_ACOLYTE_DIE1('AGRD', 6, 4.0 / 35.0, S_ACOLYTE_DIE2) { }
	S_ACOLYTE_DIE2('AGRD', 7, 4.0 / 35.0, S_ACOLYTE_DIE3) { A_Scream(); }
	S_ACOLYTE_DIE3('AGRD', 8, 4.0 / 35.0, S_ACOLYTE_DIE4) { }
	S_ACOLYTE_DIE4('AGRD', 9, 3.0 / 35.0, S_ACOLYTE_DIE5) { }
	S_ACOLYTE_DIE5('AGRD', 10, 3.0 / 35.0, S_ACOLYTE_DIE6) { A_Fall(); }
	S_ACOLYTE_DIE6('AGRD', 11, 3.0 / 35.0, S_ACOLYTE_DIE7) { }
#ifdef TEASER
	S_ACOLYTE_DIE7('AGRD', 12, 3.0 / 35.0, S_ACOLYTE_DIE8) { }
#else
	S_ACOLYTE_DIE7('AGRD', 12, 3.0 / 35.0, S_ACOLYTE_DIE8) { A_AcolyteDeath(); }
#endif
	S_ACOLYTE_DIE8('AGRD', 13, 1400.0 / 35.0, S_ACOLYTE_XDIE11) { }
}

defaultproperties
{
	ConversationID = 53;
	ClassName = 'ACOLYTE';
	Health = 70;
	GibsHealth = -35;
	Radius = 24.0;
	Height = 64.0;
	Mass = 400.0;
	StepSpeed = 7.0;
	PainChance = 0.5859375;
	IdleState = S_ACOLYTE_STAND;
	SeeState = S_ACOLYTE_RUN1;
	MissileState = S_ACOLYTE_ATK1;
	PainState = S_ACOLYTE_PAIN;
	DeathState = S_ACOLYTE_DIE1;
	GibsDeathState = S_ACOLYTE_XDIE1;
	SightSound = 'AcolyteSight';
	ActiveSound = 'AcolyteActive1';
	AttackSound = 'AssaultGunFire';
	PainSound = 'AcolytePain';
	DeathSound = 'AcolyteDeath';
}

}

//**************************************************************************
//
//	Acolyte2
//
//**************************************************************************

class Acolyte2:Acolyte
	__mobjinfo__(142)
{

defaultproperties
{
	ConversationID = 54;
	Translation = 1;
	ActiveSound = 'AcolyteActive2';
}

}

//**************************************************************************
//
//	Acolyte3
//
//**************************************************************************

class Acolyte3:Acolyte
	__mobjinfo__(143)
{

defaultproperties
{
	ConversationID = 55;
	Translation = 2;
	ActiveSound = 'AcolyteActive3';
}

}

//**************************************************************************
//
//	Acolyte4
//
//**************************************************************************

class Acolyte4:Acolyte
	__mobjinfo__(146)
{

defaultproperties
{
	ConversationID = 56;
	Translation = 3;
}

}

//**************************************************************************
//
//	Acolyte5
//
//**************************************************************************

class Acolyte5:Acolyte
	__mobjinfo__(147)
{

defaultproperties
{
	ConversationID = 57;
	Translation = 4;
	ActiveSound = 'AcolyteActive2';
}

}

//**************************************************************************
//
//	Acolyte6
//
//**************************************************************************

class Acolyte6:Acolyte
	__mobjinfo__(148)
{

defaultproperties
{
	ConversationID = 58;
	Translation = 5;
	ActiveSound = 'AcolyteActive3';
}

}

#ifndef TEASER
//**************************************************************************
//
//	Acolyte7
//
//**************************************************************************

class Acolyte7:Acolyte
	__mobjinfo__(232)
{

defaultproperties
{
	ConversationID = 59;
	Health = 60;
	GibsHealth = -30;
	Translation = 6;
	ActiveSound = 'AcolyteActive3';
}

}

//**************************************************************************
//
//	Acolyte8
//
//**************************************************************************

class Acolyte8:Acolyte
	__mobjinfo__(231)
{

defaultproperties
{
	ConversationID = 60;
	Health = 60;
	GibsHealth = -30;
	Translation = 7;
	ActiveSound = 'AcolyteActive3';
}

}
#endif

//**************************************************************************
//
//	AcolyteShadow
//
//**************************************************************************

class AcolyteShadow:Acolyte
	__mobjinfo__(58)
{

__states__
{
	S_ACOLYTE_RUN_B('AGRD', 0, 6.0 / 35.0, S_ACOLYTE_RUN2) { A_Unknown64(); }
	S_ACOLYTE_PAIN_B1('AGRD', 14, 0.0 / 35.0, S_ACOLYTE_PAIN_B2) { A_Unknown55(); }
	S_ACOLYTE_PAIN_B2('AGRD', 14, 8.0 / 35.0, S_ACOLYTE_RUN_B) { A_Pain(); }
}

defaultproperties
{
#ifdef TEASER
	ConversationID = 59;
#else
	ConversationID = 61;
#endif
	SeeState = S_ACOLYTE_RUN_B;
	PainState = S_ACOLYTE_PAIN_B1;
	ActiveSound = 'AcolyteActive2';
}

}

//**************************************************************************
//
//	AcolyteArmor
//
//**************************************************************************

class AcolyteArmor:AcolyteBase
	__mobjinfo__(201)
{

void A_AcolyteArmorPain(void)
{
}

__states__
{
	S_ACOLYTEARM_STAND('ARMR', 0, -1.0, S_NULL) { }
	S_ACOLYTEARM_PAIN('ARMR', 0, -1.0, S_NULL) { A_AcolyteArmorPain(); }
}

defaultproperties
{
	Health = 61;
	Radius = 20.0;
	Height = 56.0;
	Mass = 100.0;
	PainChance = 1.0;
	IdleState = S_ACOLYTEARM_STAND;
	PainState = S_ACOLYTEARM_PAIN;
	DeathState = S_ACOLYTE_XDIE1;
	DeathSound = 'PeasantDeath';
}

}

//**************************************************************************
//
//	AcolyteCarcass
//
//**************************************************************************

class AcolyteCarcass:Decoration
	__mobjinfo__(21)
{

__states__
{
	S_DEAD_ACOLYTE('AGRD', 13, 1400.0 / 35.0, S_DEAD_ACOLYTE_2) { }
	S_DEAD_ACOLYTE_2('GIBS', 10, 5.0 / 35.0, S_DEAD_ACOLYTE_3) { }
	S_DEAD_ACOLYTE_3('GIBS', 11, 1400.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_DEAD_ACOLYTE;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.5  2002/07/13 07:56:42  dj_jl
//  Huge work on Strife: splitting, merging, implementing stuff, etc.
//
//  Revision 1.4  2002/06/29 15:54:35  dj_jl
//  Floatized PainChance.
//
//  Revision 1.3  2002/06/22 07:17:45  dj_jl
//  Beautification.
//
//  Revision 1.2  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.1  2002/04/27 17:04:54  dj_jl
//  Merged all creatures.
//
//**************************************************************************
