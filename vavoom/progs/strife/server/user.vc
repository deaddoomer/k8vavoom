//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

float air_control = 1.0 / 256.0;

bool onground;

//==========================================================================
//
//  PlayerThink
//
//==========================================================================

void PlayerThink(Player player)
{
	player.PlayerTick(frametime);
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos(Player player)
{
	player.SetViewPos();
}

//==========================================================================
//
//  G_PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialized
//
//==========================================================================

void G_PlayerReborn(int player)
{
	Player p;

	p = svvars->Players[player];

	//  Clear player struct
	ClearPlayer(p);

	//  Set initial data
	p.bUseDown = true;	// don't do anything immediately
	p.bAttackDown = true;
	p.PlayerState = PST_LIVE;
	p.Health = INITIAL_HEALTH;
	p.WeaponOwned[wp_fist] = true;
	p.SetWeapon(wp_fist);
}

//==========================================================================
//
//  G_PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void G_PlayerExitMap(int player, bool clusterChange)
{
	Player p;
	int i;

	p = svvars->Players[player];

	for (i = 0; i < NUMPOWERS; i++)
	{
		p.Powers[i] = 0.0;
	}
	if (clusterChange)
	{
		p.Keys = 0;
	}

	p.Items = 0;
	p.MO.Angles.pitch = 0.0;
	p.MO.Translucency = 0;	// cancel invisibility
	p.ExtraLight = 0;	// cancel gun flashes
	p.FixedColormap = 0;	// cancel ir gogles
	p.DamageFlash = 0.0;	// no palette changes
	p.BonusFlash = 0.0;
}

//==========================================================================
//
//  G_DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void G_DeathMatchSpawnPlayer(int playernum)
{
	int i;
	int j;

	// This check has been moved to p_setup.c:P_LoadThings()
//  if (selections < 4)
//      I_Error("Only %i deathmatch spots, 4 required", selections);

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % level->numdeathmatchstarts;
		if (G_CheckSpot(playernum, &level->deathmatchstarts[i]))
		{
			level->deathmatchstarts[i].type = playernum + 1;
			P_SpawnPlayer(&level->deathmatchstarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	P_SpawnPlayer(&level->playerstarts[playernum]);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn(int playernum)
{
	int i;
	Player player;

	// respawn at the start
	player = svvars->Players[playernum];

	// remove pitch and roll angles from corpse
	player.MO.Angles.pitch = 0.0;
	player.MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	player.MO.Player = none;
	player.MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(playernum);
		return;
	}

	if (G_CheckSpot(playernum, &level->playerstarts[RebornPosition * MAXPLAYERS + playernum]))
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + playernum]);
		return;
	}

	// try to spawn at one of the other players spots
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (G_CheckSpot(playernum, &level->playerstarts[RebornPosition * MAXPLAYERS + i]))
		{
			level->playerstarts[RebornPosition * MAXPLAYERS + i].type = playernum + 1;	// fake as other player
			P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + i]);
			level->playerstarts[RebornPosition * MAXPLAYERS + i].type = i + 1;	// restore
			return;
		}
		// he's going to be inside something.  Too bad.
	}
	P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + playernum]);
}

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer(Player player)
{
	player.ViewEnts[ps_weapon] = SpawnObject(Weapon, none);
	player.ViewEnts[ps_weapon].Player = player;
	player.ViewEnts[ps_flash] = SpawnObject(Weapon, none);
	player.ViewEnts[ps_flash].Player = player;
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient(int i)
{
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(i);
	}
	else
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + i]);
	}
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient(Player player)
{
	int i;

	if (player.MO)
	{
		player.MO.Player = none;
		player.MO.bIsPlayer = false;
		player.MO.Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (player.ViewEnts[i])
		{
			player.ViewEnts[i].Destroy();
			player.ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(player.PlayerName));
	player.MO.PlayFullVolumeSound('Chat', CHAN_AUTO);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged(Player player)
{
	if (!player.bSpawned)
	{
		return;
	}
	player.MO.Translation = player.Color;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.32  2004/08/23 19:24:02  dj_jl
//  Moved weapon utilites to player class.
//
//  Revision 1.31  2004/08/22 19:23:27  dj_jl
//  Moved many functions to player class.
//
//  Revision 1.30  2003/11/12 16:51:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.29  2003/09/11 17:24:18  dj_jl
//  Map teleport positions, keep keys
//
//  Revision 1.28  2003/07/11 16:47:39  dj_jl
//  Made array of players with pointers
//
//  Revision 1.27  2002/11/02 08:22:38  dj_jl
//  New style classes.
//
//  Revision 1.26  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.25  2002/07/27 18:08:12  dj_jl
//  Implementing Strife conversations.
//
//  Revision 1.24  2002/07/23 13:07:32  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.23  2002/05/03 17:17:32  dj_jl
//  Started work on weapons and items.
//
//  Revision 1.22  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.21  2002/03/16 17:48:58  dj_jl
//  Added PlayerPawn class, beautifucation.
//
//  Revision 1.20  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.19  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.18  2002/02/22 18:00:26  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.17  2002/02/14 19:21:00  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/06 17:28:54  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.15  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/15 18:27:01  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/11 18:19:43  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/11 08:03:13  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.10  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2002/01/03 18:31:57  dj_jl
//  Fixed view sprites
//
//  Revision 1.8  2001/12/12 18:57:43  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
