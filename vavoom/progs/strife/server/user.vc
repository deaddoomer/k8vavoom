//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

float air_control = 1.0 / 256.0;

#define INVERSECOLORMAP		32

//
//  PALETTE MACROS
//

// Palette indices.
// For damage/bonus red-/gold-shifts
#define STARTREDPALS		1
#define STARTBONUSPALS		9
#define NUMREDPALS			8
#define NUMBONUSPALS		4
// Radiation suit, green shift.
#define RADIATIONPAL		13

void SetWeapon(player_t * player, int NewWeapon);
void MovePsprites(player_t * player);
void ChangeWeapon(player_t * player, int newweapon);
boolean G_CheckSpot(int playernum, mthing_t * mthing);
void P_SpawnPlayer(mthing_t * mthing);
void P_UseLines(player_t * player);

boolean onground;

//==========================================================================
//
//  PlayerPawn::ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void PlayerPawn::ThrustPlayer(float angle, float move, float deltaTime)
{
	Velocity.x += move * cos(angle) * deltaTime;
	Velocity.y += move * sin(angle) * deltaTime;
}

//==========================================================================
//
//  PlayerPawn::CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void PlayerPawn::CalcHeight(float deltaTime)
{
	float angle;
	float Bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	Player->Bob = (Velocity.x * Velocity.x + Velocity.y * Velocity.y)
		* deltaTime * deltaTime;

	Player->Bob /= 4.0;
	if (Player->Bob > MAXBOB)
		Player->Bob = MAXBOB;

	angle = 180.0 * 35.0 / 10.0 * level->time;
	Bob = Player->Bob / 2.0 * sin(angle);

	// move viewheight
	if (Player->PlayerState == PST_LIVE)
	{
		Player->ViewHeight += Player->DeltaViewHeight;

		if (Player->ViewHeight > VIEWHEIGHT)
		{
			Player->ViewHeight = VIEWHEIGHT;
			Player->DeltaViewHeight = 0.0;
		}

		if (Player->ViewHeight < VIEWHEIGHT / 2.0)
		{
			Player->ViewHeight = VIEWHEIGHT / 2.0;
			if (Player->DeltaViewHeight <= 0.0)
				Player->DeltaViewHeight = 0.00001;
		}

		if (Player->DeltaViewHeight)
		{
			Player->DeltaViewHeight += 0.25;
			if (!Player->DeltaViewHeight)
				Player->DeltaViewHeight = 0.00001;
		}
	}
	Player->ViewOrg.z = Origin.z + Player->ViewHeight + Bob;

	if (Player->ViewOrg.z > CeilingZ - 4.0)
		Player->ViewOrg.z = CeilingZ - 4.0;
}

//==========================================================================
//
//  PlayerPawn::MovePlayer
//
//==========================================================================

void PlayerPawn::MovePlayer(float deltaTime)
{
	float forward;
	float side;

	// Do not let the player control movement
	//  if not onground.
	onground = Origin.z <= FloorZ || bOnMobj;

	forward = Player->ForwardMove * 5.0;
	side = Player->SideMove * 5.0;

	if (!onground)
	{
		forward *= air_control;
		side *= air_control;
	}

	if (forward)
	{
		ThrustPlayer(Angles.yaw, forward, deltaTime);
	}
	if (side)
	{
		ThrustPlayer(AngleMod360(Angles.yaw - 90.0), side, deltaTime);
	}

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if ((Player->Buttons & BT_JUMP) && onground && !Player->JumpTics)
	{
		//  Jump
		Velocity.z = 9.0 * 35.0;
		Player->JumpTics = 18;
	}
}

//==========================================================================
//
//  PlayerPawn::CheckWaterJump
//
//==========================================================================

void PlayerPawn::CheckWaterJump(void)
{
	TVec start;
	TVec end;
	TVec vforward;

	// check for a jump-out-of-water
	AngleVector(&Angles, &vforward);
	start = Origin;
	start.z += Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalize(vforward);
	end = start + vforward * 24.0;
	if (!TraceLine(start, end))
	{
		// solid at waist
		start.z = Origin.z + Height;
		end = start + vforward * 24.0;
		Player->MoveDir = trace_plane_normal * -50.0;
		if (TraceLine(start, end))
		{
			// open at eye level
			bWaterJump = true;
			Velocity.z = 320.0;
			ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  PlayerPawn::WaterMove
//
//==========================================================================

void PlayerPawn::WaterMove(float deltaTime)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	// Do not let the player control movement
	//  if not onground.
	onground = Origin.z <= FloorZ || bOnMobj;

	AngleVectors(&Angles, &vforward, &vright, &vup);

	forward = Player->ForwardMove;
	side = Player->SideMove;

	wishvel = forward * vforward + side * vright;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  else
//      wishvel.z += cmd.upmove;

	Velocity += 3.5 * deltaTime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if (Player->Buttons & BT_JUMP)
	{
		if (WaterType == CONTENTS_WATER)
			Velocity.z = 100.0;
		else if (WaterType == CONTENTS_SLUDGE)
			Velocity.z = 80.0;
		else
			Velocity.z = 50.0;
	}
	CheckWaterJump();
}

//==========================================================================
//
//  PlayerPawn::WaterJump
//
//==========================================================================

void PlayerPawn::WaterJump(void)
{
	if (!ReactionTime || !WaterLevel)
	{
		bWaterJump = false;
		ReactionTime = 0.0;
	}
	Velocity.x = Player->MoveDir.x;
	Velocity.y = Player->MoveDir.y;
}

//==========================================================================
//
//  PlayerPawn::PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector
//
//==========================================================================

void PlayerPawn::PlayerInSpecialSector(void)
{
	// Falling, not all the way down yet?
	if (Origin.z != Sector->floorheight)
		return;

	// Has hitten ground.
	switch (Sector->special)
	{
	case 5:
		// HELLSLIME DAMAGE
		if (!Player->Powers[pw_ironfeet])
			if (!(level->tictime & 0x1f))
				Damage(none, none, 10);
		break;

	case 7:
		// NUKAGE DAMAGE
		if (!Player->Powers[pw_ironfeet])
			if (!(level->tictime & 0x1f))
				Damage(none, none, 5);
		break;

	case 16:
		// SUPER HELLSLIME DAMAGE
	case 4:
		// STROBE HURT
		if (!Player->Powers[pw_ironfeet] || (P_Random() < 5))
		{
			if (!(level->tictime & 0x1f))
				Damage(none, none, 20);
		}
		break;

	case 9:
		// SECRET SECTOR
		Player->SecretCount++;
		Sector->special = 0;
		break;

	case 11:
		// EXIT SUPER DAMAGE! (for E1M8 finale)
		Player->Cheats &= ~CF_GODMODE;

		if (!(level->tictime & 0x1f))
			Damage(none, none, 20);

		if (Player->Health <= 10)
			G_ExitLevel();
		break;

	default:
		break;
	};
}

//==========================================================================
//
//  PlayerPawn::PlayerInContents
//
//==========================================================================

void PlayerPawn::PlayerInContents(void)
{
	if (!WaterLevel)
	{
		return;
	}
	switch (WaterType)
	{
	case CONTENTS_SLUDGE:
		if (!Player->Powers[pw_ironfeet])
			if (!(level->tictime & 0x1f))
				Damage(none, none, 10);
		break;

	case CONTENTS_LAVA:
		if (!Player->Powers[pw_ironfeet] || (P_Random() < 5))
		{
			if (!(level->tictime & 0x1f))
				Damage(none, none, 20);
		}
		break;
	}
}

//==========================================================================
//
//  PlayerPawn::DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void PlayerPawn::DeathPlayerTick(float deltaTime)
{
	float angle;
	float delta;

	MovePsprites(Player);

	onground = Origin.z <= FloorZ || bOnMobj;

	// fall to the ground
	if (Player->ViewHeight > 6.0)
		Player->ViewHeight -= 1.0;

	if (Player->ViewHeight < 6.0)
		Player->ViewHeight = 6.0;

	Player->DeltaViewHeight = 0.0;
	CalcHeight(deltaTime);

	if (Player->Attacker && Player->Attacker != this)
	{
		angle = atan2(Player->Attacker->Origin.y - Origin.y,
			Player->Attacker->Origin.x - Origin.x);

		delta = AngleMod180(angle - Angles.yaw);

		if (delta < 5.0 && delta > -5.0)
		{
			// Looking at killer,
			//  so fade damage flash down.
			Angles.yaw = angle;

			if (Player->DamageCount)
				Player->DamageCount--;
		}
		else if (delta > 0.0)
			Angles.yaw += 5.0;
		else
			Angles.yaw -= 5.0;
	}
	else if (Player->DamageCount)
		Player->DamageCount--;

	if (Player->Buttons & BT_USE)
		Player->PlayerState = PST_REBORN;
}

//==========================================================================
//
//  PlayerPawn::PlayerImpulse
//
//==========================================================================

void PlayerPawn::PlayerImpulse(void)
{
	int impulse;

	impulse = Player->Impulse;
	Player->Impulse = 0;

	if (impulse <= 7)
	{
		ChangeWeapon(Player, impulse - 1);
	}
	else if (impulse == 16)
	{
		//  Suicide
		Damage(none, none, 10000);
	}
}

//==========================================================================
//
//  PlayerPawn::PlayerTick
//
//==========================================================================

void PlayerPawn::PlayerTick(float deltaTime)
{
	// Copy view angles
	Angles = Player->ViewAngles;

	// fixme: do this in the cheat code
	if (Player->Cheats & CF_NOCLIP)
	{
		bColideWithThings = false;
		bColideWithWorld = false;
	}
	else
	{
		bColideWithThings = true;
		bColideWithWorld = true;
	}

	if (bJustAttacked)
	{
		Player->ForwardMove = 100.0;
		Player->SideMove = 0.0;
		bJustAttacked = false;
	}

	if (Player->PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (Player->JumpTics)
	{
		Player->JumpTics--;
	}

	// Move around.
	// Reactiontime is used to prevent movement
	//  for a bit after a teleport.
	if (ReactionTime)
	{
		ReactionTime -= deltaTime;
		if (ReactionTime <= 0.0)
			ReactionTime = 0.0;
		if (bWaterJump)
			WaterJump();
	}
	else
	{
		if (WaterLevel > 1)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
	}

	CalcHeight(deltaTime);

	if (Sector->special)
		PlayerInSpecialSector();
	PlayerInContents();

	// Check for weapon change.
	if (Player->Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Player->Buttons & BT_USE)
	{
		if (!Player->bUseDown)
		{
			P_UseLines(Player);
			Player->bUseDown = true;
		}
	}
	else
	{
		Player->bUseDown = false;
	}

	//  cycle psprites
	MovePsprites(Player);

	//  Counters, time dependend power ups.

	//  Strength counts up to diminish fade.
	if (Player->Powers[pw_strength])
		Player->Powers[pw_strength]++;

	if (Player->Powers[pw_invulnerability])
		Player->Powers[pw_invulnerability]--;

	if (Player->Powers[pw_invisibility])
		if (!--Player->Powers[pw_invisibility])
			Translucency = 0;

	if (Player->Powers[pw_infrared])
		Player->Powers[pw_infrared]--;

	if (Player->Powers[pw_ironfeet])
		Player->Powers[pw_ironfeet]--;

	if (Player->DamageCount)
		Player->DamageCount--;

	if (Player->BonusCount)
		Player->BonusCount--;

	// Handling colormaps.
	if (Player->Powers[pw_invulnerability])
	{
		if (Player->Powers[pw_invulnerability] > 4 * 32 ||
			(Player->Powers[pw_invulnerability] & 8))
			Player->FixedColormap = INVERSECOLORMAP;
		else
			Player->FixedColormap = 0;
	}
	else if (Player->Powers[pw_infrared])
	{
		if (Player->Powers[pw_infrared] > 4 * 32 ||
			(Player->Powers[pw_infrared] & 8))
		{
			// almost full bright
			Player->FixedColormap = 1;
		}
		else
			Player->FixedColormap = 0;
	}
	else
		Player->FixedColormap = 0;
}

//==========================================================================
//
//  PlayerThink
//
//==========================================================================

void PlayerThink(player_t * player)
{
	PlayerPawn(player->MO).PlayerTick(frametime);
}

//==========================================================================
//
//  PlayerPawn::PaletteFlash
//
//  Do red-/gold-shifts from damage/items
//
//==========================================================================

void PlayerPawn::PaletteFlash(void)
{
	int cnt;
	int bzc;

	Player->CShifts[CSHIFT_CONTENTS] = 0;
	if (WaterLevel == 3)
	{
		switch (WaterType)
		{
		case CONTENTS_WATER:
			Player->CShifts[CSHIFT_CONTENTS] = CSHIFT(130, 80, 50, 128);
			break;

		case CONTENTS_SLUDGE:
			Player->CShifts[CSHIFT_CONTENTS] = CSHIFT(128, 160, 128, 150);
			break;

		case CONTENTS_LAVA:
			Player->CShifts[CSHIFT_CONTENTS] = CSHIFT(255, 80, 0, 150);
			break;
		}
	}

	cnt = Player->DamageCount;

	if (Player->Powers[pw_strength])
	{
		// slowly fade the berzerk out
		bzc = 12 - (Player->Powers[pw_strength] >> 6);

		if (bzc > cnt)
			cnt = bzc;
	}

	if (cnt)
	{
		Player->Palette = (cnt + 7) >> 3;

		if (Player->Palette >= NUMREDPALS)
			Player->Palette = NUMREDPALS - 1;

		Player->Palette += STARTREDPALS;
	}
	else if (Player->BonusCount)
	{
		Player->Palette = (Player->BonusCount + 7) >> 3;

		if (Player->Palette >= NUMBONUSPALS)
			Player->Palette = NUMBONUSPALS - 1;

		Player->Palette += STARTBONUSPALS;
	}
	else if (Player->Powers[pw_ironfeet] > 4 * 32 ||
		Player->Powers[pw_ironfeet] & 8)
		Player->Palette = RADIATIONPAL;
	else
		Player->Palette = 0;
}

//==========================================================================
//
//  PlayerPawn::SetViewPos
//
//==========================================================================

void PlayerPawn::SetViewPos(void)
{
	Player->ViewOrg.x = Origin.x;
	Player->ViewOrg.y = Origin.y;

	Player->ViewAngles = Angles;

	PaletteFlash();

	if (Weapon(Player->ViewEnts[ps_weapon]).Ammo == am_noammo)
		Player->ReadyAmmo = 1994;	// means "n/a"
	else
		Player->ReadyAmmo = Player->Ammo[
			Weapon(Player->ViewEnts[ps_weapon]).Ammo];
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos(player_t * player)
{
	PlayerPawn(player->MO).SetViewPos();
}

//==========================================================================
//
//  G_PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialized
//
//==========================================================================

void G_PlayerReborn(int player)
{
	player_t *p;

	p = &players[player];

	//  Clear player struct
	ClearPlayer(p);

	//  Set initial data
	p->bUseDown = true;	// don't do anything immediately
	p->bAttackDown = true;
	p->PlayerState = PST_LIVE;
	p->Health = INITIAL_HEALTH;
	p->WeaponOwned[wp_fist] = true;
	SetWeapon(p, wp_fist);
}

//==========================================================================
//
//  G_PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void G_PlayerExitMap(int player, boolean clusterChange)
{
	player_t *p;
	int i;

	p = &players[player];

	for (i = 0; i < NUMPOWERS; i++)
	{
		p->Powers[i] = 0;
	}
	p->Keys = 0;

	p->Items = 0;
	p->MO.Angles.pitch = 0.0;
	p->MO.Translucency = 0;	// cancel invisibility
	p->ExtraLight = 0;	// cancel gun flashes
	p->FixedColormap = 0;	// cancel ir gogles
	p->DamageCount = 0;	// no palette changes 
	p->BonusCount = 0;
}

//==========================================================================
//
//  G_DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void G_DeathMatchSpawnPlayer(int playernum)
{
	int i;
	int j;

	// This check has been moved to p_setup.c:P_LoadThings()
//  if (selections < 4)
//      I_Error("Only %i deathmatch spots, 4 required", selections);

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % level->numdeathmatchstarts;
		if (G_CheckSpot(playernum, &level->deathmatchstarts[i]))
		{
			level->deathmatchstarts[i].type = playernum + 1;
			P_SpawnPlayer(&level->deathmatchstarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	P_SpawnPlayer(&level->playerstarts[playernum]);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn(int playernum)
{
	int i;

	// respawn at the start

	// first dissasociate the corpse
	players[playernum].MO.Player = NULL;
	players[playernum].MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(playernum);
		return;
	}

	if (G_CheckSpot(playernum, &level->playerstarts[playernum]))
	{
		P_SpawnPlayer(&level->playerstarts[playernum]);
		return;
	}

	// try to spawn at one of the other players spots
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (G_CheckSpot(playernum, &level->playerstarts[i]))
		{
			level->playerstarts[i].type = playernum + 1;	// fake as other player
			P_SpawnPlayer(&level->playerstarts[i]);
			level->playerstarts[i].type = i + 1;	// restore
			return;
		}
		// he's going to be inside something.  Too bad.
	}
	P_SpawnPlayer(&level->playerstarts[playernum]);
}

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer(player_t * player)
{
	player->ViewEnts[ps_weapon] = SpawnObject(Weapon, none);
	player->ViewEnts[ps_weapon].Player = player;
	player->ViewEnts[ps_flash] = SpawnObject(Weapon, none);
	player->ViewEnts[ps_flash].Player = player;
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient(int i)
{
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(i);
	}
	else
	{
		P_SpawnPlayer(&level->playerstarts[i]);
	}
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient(player_t * player)
{
	int i;

	if (player->MO)
	{
		player->MO.Player = NULL;
		player->MO.bIsPlayer = false;
		player->MO.Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (player->ViewEnts[i])
		{
			player->ViewEnts[i].Destroy();
			player->ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(player->Name));
	player->MO.PlayFullVolumeSound('Chat', CHAN_AUTO);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged(player_t * player)
{
	if (!player->bSpawned)
	{
		return;
	}
	player->MO.Translation = player->Color;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.22  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.21  2002/03/16 17:48:58  dj_jl
//  Added PlayerPawn class, beautifucation.
//
//  Revision 1.20  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.19  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.18  2002/02/22 18:00:26  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.17  2002/02/14 19:21:00  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/06 17:28:54  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.15  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/15 18:27:01  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/11 18:19:43  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/11 08:03:13  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.10  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2002/01/03 18:31:57  dj_jl
//  Fixed view sprites
//
//  Revision 1.8  2001/12/12 18:57:43  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
