//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//  Actor::A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

void Actor::A_Look(void)
{
	Actor targ;
	int sound;

	Threshold = 0;	// any shot will wake up
	targ = Actor(Sector->SoundTarget);

	if (targ && targ.bShootable)
	{
		Enemy = targ;

		if (bAmbush)
		{
			if (!P_CheckSight(self, Enemy))
			{
				if (!LookForPlayers(false))
					return;
			}
		}
	}
	else
	{
		if (!LookForPlayers(false))
			return;
	}

	// go into chase state
	if (SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}

	SetState(SeeState);
}

//==========================================================================
//
//  Actor::A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void Actor::A_Chase(void)
{
	float delta;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	// modify target threshold
	if (Threshold)
	{
		if (!Enemy || Enemy.Health <= 0)
		{
			Threshold = 0;
		}
		else
		{
			Threshold--;
		}
	}

	// turn towards movement direction if not there yet
	if (MoveDir < 8)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);

		if (delta > 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw + 45.0);
		}
	}

	if (!Enemy || !Enemy.bShootable)
	{
		// look for a new target
		if (LookForPlayers(true))
		{
			return;	// got a new target
		}
		SetState(IdleState);
		return;
	}

	// do not attack twice in a row
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (!fastparm)
		{
			NewChaseDir();
		}
		return;
	}

	// check for melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// check for missile attack
	if (MissileState)
	{
		if (fastparm || !MoveCount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				bJustAttacked = true;
				return;
			}
		}
	}

	// possibly choose another target
	if (netgame && !Threshold)
	{
		if (!P_CheckSight(self, Enemy))
		{
			if (LookForPlayers(true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--MoveCount < 0 || !StepMove())
	{
		NewChaseDir();
	}

	// make active sound
	if (ActiveSound && P_Random() < 3)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  Actor::A_FaceTarget
//
//==========================================================================

void Actor::A_FaceTarget(void)
{
	if (!Enemy)
		return;

	bAmbush = false;

	Angles.yaw = atan2(Enemy.Origin.y - Origin.y,
		Enemy.Origin.x - Origin.x);

	if (Enemy.Translucency)
	{
		Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//	Actor::A_ActiveSound
//
//==========================================================================

void Actor::A_ActiveSound(void)
{
	if (ActiveSound)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  Actor::A_Pain
//
//==========================================================================

void Actor::A_Pain(void)
{
	if (PainSound)
	{
		PlaySound(PainSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  Actor::A_Explode
//
//  Rocket and barrel explosion.
//
//==========================================================================

void Actor::A_Explode(void)
{
	RadiusAttack(64, 0, 0);
}

//==========================================================================
//
//  Actor::A_Explode2
//
//  Rocket and barrel explosion.
//
//==========================================================================

void Actor::A_Explode2(void)
{
	RadiusAttack(128, 0, 0);
}

//==========================================================================
//
//  Actor::A_Scream
//
//  Death sound.
//
//==========================================================================

void Actor::A_Scream(void)
{
	if (DeathSound)
	{
		PlaySound(DeathSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  Actor::A_XScream
//
//  Explode death sound.
//
//==========================================================================

void Actor::A_XScream(void)
{
	PlaySound('Slop', CHAN_VOICE);
}

//==========================================================================
//
//  Actor::A_Fall
//
//  Unset blocking.
//
//==========================================================================

void Actor::A_Fall(void)
{
	// actor is on ground, it can be walked over
	bSolid = false;
}

//==========================================================================
//
//  Actor::A_PlayerScream
//
//  Player death sound
//
//==========================================================================

void Actor::A_PlayerScream(void)
{
	// Default death sound.
	name sound = 'PlayerDeath';

	if (Health < -50)
	{
		// IF THE PLAYER DIES
		// LESS THAN -50% WITHOUT GIBBING
		sound = 'PlayerExtremeDeath';
	}

	PlaySound(sound, CHAN_VOICE);
}

//==========================================================================
//
//	Actor::A_RiffleAttack
//
//==========================================================================

void Actor::A_RiffleAttack(void)
{
	int damage;
	TVec dir;

	if (!Enemy)
		return;

	PlaySound('AssaultGunFire', CHAN_WEAPON);
	A_FaceTarget();
	dir = AimLineAttack(self, Angles, MISSILERANGE);
	VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
	damage = ((P_Random() % 5) + 1) * 3;
	LineAttack(self, dir, MISSILERANGE, damage);
}

//==========================================================================
//
//	Actor::A_CheckRefire
//
//==========================================================================

void Actor::A_CheckRefire(void)
{
	// keep firing unless target got out of sight
	A_FaceTarget();

	if (P_Random() < 40)
		return;

	if (!Enemy || Enemy.Health <= 0 || !P_CheckSight(self, Enemy))
	{
		SetState(SeeState);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.23  2002/06/29 15:59:26  dj_jl
//  Split out items, projectiles and decorations.
//
//  Revision 1.22  2002/05/18 17:00:01  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.21  2002/05/03 17:14:33  dj_jl
//  Added rifle attack and refire.
//
//  Revision 1.20  2002/04/27 17:04:54  dj_jl
//  Merged all creatures.
//
//  Revision 1.19  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.18  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.17  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.16  2002/02/22 18:00:25  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.15  2002/02/16 16:26:56  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.14  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.13  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.12  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.11  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.10  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.9  2002/01/15 18:27:01  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
