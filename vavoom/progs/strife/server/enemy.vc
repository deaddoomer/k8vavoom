//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//  A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

void A_Look(mobj_t * actor)
{
	Actor targ;
	int sound;

	actor->threshold = 0;	// any shot will wake up
	targ = Actor(actor->subsector->sector->SoundTarget);

	if (targ && targ.Flags & MF_SHOOTABLE)
	{
		actor->target = &targ;

		if (actor->Flags & MF_AMBUSH)
		{
			if (!P_CheckSight(*actor, *actor->target))
			{
				if (!P_LookForPlayers(actor, false))
					return;
			}
		}
	}
	else
	{
		if (!P_LookForPlayers(actor, false))
			return;
	}

	// go into chase state
	if (actor->sound_sight)
	{
		StartSound(*actor, actor->sound_sight, CHAN_VOICE);
	}

	actor->SetState(actor->SeeState);
}

//==========================================================================
//
//  A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void A_Chase(mobj_t * actor)
{
	float delta;

	if (actor->ReactionCount)
	{
		actor->ReactionCount--;
	}

	// modify target threshold
	if (actor->threshold)
	{
		if (!actor->target || actor->target->Health <= 0)
		{
			actor->threshold = 0;
		}
		else
		{
			actor->threshold--;
		}
	}

/*	if (fastparm)
	{ // Monsters move faster in nightmare mode
		actor->tics -= actor->tics / 2;
		if (actor->tics < 3)
		{
			actor->tics = 3;
		}
	}
*/
	// turn towards movement direction if not there yet
	if (actor->movedir < 8)
	{
		actor->angles.yaw = itof(ftoi(actor->angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(actor->angles.yaw - itof(actor->movedir) * 45.0);

		if (delta > 0.0)
		{
			actor->angles.yaw = AngleMod360(actor->angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			actor->angles.yaw = AngleMod360(actor->angles.yaw + 45.0);
		}
	}

	if (!actor->target || !(actor->target->Flags & MF_SHOOTABLE))
	{
		// look for a new target
		if (P_LookForPlayers(actor, true))
		{
			return;	// got a new target
		}
		actor->SetState(actor->SpawnState);
		return;
	}

	// do not attack twice in a row
	if (actor->Flags & MF_JUSTATTACKED)
	{
		actor->Flags &= ~MF_JUSTATTACKED;
		if (!fastparm)
		{
			P_NewChaseDir(actor);
		}
		return;
	}

	// check for melee attack
	if (actor->MeleeState && P_CheckMeleeRange(actor))
	{
		if (actor->sound_attack)
		{
			StartSound(*actor, actor->sound_attack, CHAN_WEAPON);
		}
		actor->SetState(actor->MeleeState);
		return;
	}

	// check for missile attack
	if (actor->MissileState)
	{
		if (fastparm || !actor->movecount)
		{
			if (P_CheckMissileRange(actor))
			{
				actor->SetState(actor->MissileState);
				actor->Flags |= MF_JUSTATTACKED;
				return;
			}
		}
	}

	// possibly choose another target
	if (netgame && !actor->threshold)
	{
		if (!P_CheckSight(*actor, *actor->target))
		{
			if (P_LookForPlayers(actor, true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--actor->movecount < 0 || !P_Move(actor))
	{
		P_NewChaseDir(actor);
	}

	// make active sound
	if (actor->sound_active && P_Random() < 3)
	{
		StartSound(*actor, actor->sound_active, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_FaceTarget
//
//==========================================================================

void A_FaceTarget(mobj_t * actor)
{
	if (!actor->target)
		return;

	actor->Flags &= ~MF_AMBUSH;

	actor->angles.yaw = atan2(actor->target->origin.y - actor->origin.y,
		actor->target->origin.x - actor->origin.x);

	if (actor->target->Translucency)
	{
		actor->angles.yaw = AngleMod360(actor->angles.yaw +
			(Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//  Actor::A_Pain
//
//==========================================================================

void Actor::A_Pain(void)
{
	if (sound_pain)
	{
		StartSound(self, sound_pain, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_Explode
//
//  Rocket and barrel explosion.
//
//==========================================================================

void A_Explode(mobj_t * thingy)
{
	thingy->Translucency = 50;
	P_RadiusAttack(thingy, thingy->target, 128, 0, 0);
}

//==========================================================================
//
//  Actor::A_Scream
//
//  Death sound.
//
//==========================================================================

void Actor::A_Scream(void)
{
	if (sound_death)
	{
		StartSound(self, sound_death, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_XScream
//
//  Explode death sound.
//
//==========================================================================

void A_XScream(mobj_t * actor)
{
	StartSoundName(*actor, 'Slop', CHAN_VOICE);
}

//==========================================================================
//
//  Actor::A_Fall
//
//  Unset blocking.
//
//==========================================================================

void Actor::A_Fall(void)
{
	// actor is on ground, it can be walked over
	Flags &= ~MF_SOLID;

	// So change this if corpse objects
	// are meant to be obstacles.
}

//==========================================================================
//
//  Actor::A_PlayerScream
//
//  Player death sound
//
//==========================================================================

void Actor::A_PlayerScream(void)
{
	// Default death sound.
	name sound = 'PlayerDeath';

	if (Health < -50)
	{
		// IF THE PLAYER DIES
		// LESS THAN -50% WITHOUT GIBBING
		sound = 'PlayerExtremeDeath';
	}

	StartSoundName(self, sound, CHAN_VOICE);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.12  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.11  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.10  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.9  2002/01/15 18:27:01  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
