//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	WeaponPunch
//
//**************************************************************************

class WeaponPunch:Weapon
{

//===========================================================================
//
//  A_Punch
//
//===========================================================================

void A_Punch(void)
{
	int damage;
	TAVec angles;
	TVec dir;

	damage = (P_Random() % 10 + 1) << 1;

	if (Player->Powers[pw_strength])
		damage *= 10;

	avcpy(Player->MO.Angles, angles);
	angles.yaw = AngleMod360(angles.yaw +
		(Random() - Random()) * 45.0 / 8.0);
	dir = AimLineAttack(Player->MO, angles, MELEERANGE);
	LineAttack(Player->MO, dir, MELEERANGE, damage);

	// turn to face target
	if (linetarget)
	{
		if (linetarget.bNoBlood)
		{
			Player->MO.PlaySound('PunchHitMetal', CHAN_WEAPON);
		}
		else
		{
			Player->MO.PlaySound('PunchHitMeat', CHAN_WEAPON);
		}
		Player->MO.Angles.yaw =
			atan2(linetarget.Origin.y - Player->MO.Origin.y,
			linetarget.Origin.x - Player->MO.Origin.x);
		Player->bFixAngle = true;
	}
	else
	{
		Player->MO.PlaySound('PunchMiss', CHAN_WEAPON);
	}
}

__states__
{
	S_PUNCH('PNCH', 0, 1.0 / 35.0, S_PUNCH) { A_WeaponReady(); }
	S_PUNCHDOWN('PNCH', 0, 1.0 / 35.0, S_PUNCHDOWN) { A_Lower(); }
	S_PUNCHUP('PNCH', 0, 1.0 / 35.0, S_PUNCHUP) { A_Raise(); }
	S_PUNCH1('PNCH', 1, 4.0 / 35.0, S_PUNCH2) { }
	S_PUNCH2('PNCH', 2, 4.0 / 35.0, S_PUNCH3) { A_Punch(); }
	S_PUNCH3('PNCH', 3, 5.0 / 35.0, S_PUNCH4) { }
	S_PUNCH4('PNCH', 2, 4.0 / 35.0, S_PUNCH5) { }
	S_PUNCH5('PNCH', 1, 5.0 / 35.0, S_PUNCH) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_noammo;
	UpState = S_PUNCHUP;
	DownState = S_PUNCHDOWN;
	ReadyState = S_PUNCH;
	AttackState = S_PUNCH1;
	FlashState = S_LIGHTDONE;
}

}

//**************************************************************************
//
//	ElectricArrow
//
//**************************************************************************

class ElectricArrow:Projectile
{

__states__
{
	S_ARROW1('AROW', 0, 10.0 / 35.0, S_ARROW1) { A_ActiveSound(); }
}

defaultproperties
{
	Radius = 10.0;
	Height = 10.0;
	Speed = 1050.0;
	MissileDamage = 10;
	IdleState = S_ARROW1;
	DeathState = S_ZAP1_0;
	SightSound = 'PunchMiss';
	ActiveSound = 'PunchMiss';
	DeathSound = 'ElectricArrowExplode';
}

}

//**************************************************************************
//
//	PoisonArrow
//
//**************************************************************************

class PoisonArrow:Projectile
{

__states__
{
	S_ARROW2('ARWP', 0, 10.0 / 35.0, S_ARROW2) { A_ActiveSound(); }
	S_ARROW2_X('AROW', 0, 1.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 10.0;
	Speed = 1050.0;
	MissileDamage = 500;
	IdleState = S_ARROW2;
	DeathState = S_ARROW2_X;
	SightSound = 'PunchMiss';
	ActiveSound = 'PunchMiss';
}

}

//**************************************************************************
//
//	WeaponCrossbow
//
//**************************************************************************

class WeaponCrossbow:Weapon
{

//==========================================================================
//
//	A_FireElectricArrow
//
//==========================================================================

void A_FireElectricArrow(void)
{
	Player->Ammo[Ammo]--;
	PlayerPawn(Player->MO).SpawnPlayerMissile(ElectricArrow);
}

//==========================================================================
//
//	A_FirePoisonArrow
//
//==========================================================================

void A_FirePoisonArrow(void)
{
	Player->Ammo[Ammo]--;//FIXME
	PlayerPawn(Player->MO).SpawnPlayerMissile(PoisonArrow);
}

__states__
{
	S_XBOW('XBOW', 0, 1.0 / 35.0, S_XBOW) { A_WeaponReady(); }
	S_XBOWDOWN('XBOW', 0, 1.0 / 35.0, S_XBOWDOWN) { A_Lower(); }
	S_XBOWUP('XBOW', 0, 1.0 / 35.0, S_XBOWUP) { A_Raise(); }
	S_XBOW1('XBOW', 0, 3.0 / 35.0, S_XBOW2) { A_7(); }
	S_XBOW2('XBOW', 1, 6.0 / 35.0, S_XBOW3) { A_FireElectricArrow(); }
	S_XBOW3('XBOW', 2, 4.0 / 35.0, S_XBOW4) { }
	S_XBOW4('XBOW', 3, 6.0 / 35.0, S_XBOW5) { }
	S_XBOW5('XBOW', 4, 3.0 / 35.0, S_XBOW6) { }
	S_XBOW6('XBOW', 5, 5.0 / 35.0, S_XBOW7) { }
	S_XBOW7('XBOW', 6, 5.0 / 35.0, S_XBOW) { A_CheckReload(); }
	S_XBOWFLASH1('XBOW', 10, 5.0 / 35.0, S_XBOWFLASH2) { }
	S_XBOWFLASH2('XBOW', 11, 5.0 / 35.0, S_XBOWFLASH3) { }
	S_XBOWFLASH3('XBOW', 12, 5.0 / 35.0, S_XBOWFLASH1) { }
	S_XBOWPOISON('XBOW', 7, 1.0 / 35.0, S_XBOWPOISON) { A_WeaponReady(); }
	S_XBOWPOISONDOWN('XBOW', 7, 1.0 / 35.0, S_XBOWPOISONDOWN) { A_Lower(); }
	S_XBOWPOISONUP('XBOW', 7, 1.0 / 35.0, S_XBOWPOISONUP) { A_Raise(); }
	S_XBOWPOISON1('XBOW', 7, 3.0 / 35.0, S_XBOWPOISON2) { }
	S_XBOWPOISON2('XBOW', 1, 6.0 / 35.0, S_XBOWPOISON3) { A_FirePoisonArrow(); }
	S_XBOWPOISON3('XBOW', 2, 4.0 / 35.0, S_XBOWPOISON4) { }
	S_XBOWPOISON4('XBOW', 3, 6.0 / 35.0, S_XBOWPOISON5) { }
	S_XBOWPOISON5('XBOW', 4, 3.0 / 35.0, S_XBOWPOISON6) { }
	S_XBOWPOISON6('XBOW', 8, 5.0 / 35.0, S_XBOWPOISON7) { }
	S_XBOWPOISON7('XBOW', 9, 5.0 / 35.0, S_XBOWPOISON) { A_CheckReload(); }
}

defaultproperties
{
	Ammo = am_electric_arrow;
	UpState = S_XBOWUP;
	DownState = S_XBOWDOWN;
	ReadyState = S_XBOW;
	AttackState = S_XBOW1;
	FlashState = S_LIGHTDONE;
}

}

//**************************************************************************
//
//	WeaponAssaultGun
//
//**************************************************************************

class WeaponAssaultGun:Weapon
{

//==========================================================================
//
//	A_FireRiffle
//
//==========================================================================

void A_FireRiffle(void)
{
	TVec dir;
	int damage;

	Player->MO.PlaySound('AssaultGunFire', CHAN_WEAPON);

	if (!Player->Ammo[Ammo])
		return;

	Player->MO.SetState(Player->MO.MissileState);
	Player->Ammo[Ammo]--;

	dir = Aim(Player->MO, 16.0 * 64.0);
	if (Player->Refire)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}
	damage = 5 * (P_Random() % 3 + 1);
	LineAttack(Player->MO, dir, MISSILERANGE, damage);
	//Player->MO.Effects |= EF_DL_MUZZLEFLASH;
}

__states__
{
	S_RIFFLE('RIFG', 0, 1.0 / 35.0, S_RIFFLE) { A_WeaponReady(); }
	S_RIFFLEDOWN('RIFG', 1, 1.0 / 35.0, S_RIFFLEDOWN) { A_Lower(); }
	S_RIFFLEUP('RIFG', 0, 1.0 / 35.0, S_RIFFLEUP) { A_Raise(); }
	S_RIFFLE1('RIFF', 0, 3.0 / 35.0, S_RIFFLE2) { A_FireRiffle(); }
	S_RIFFLE2('RIFF', 1, 3.0 / 35.0, S_RIFFLE3) { A_FireRiffle(); }
	S_RIFFLE3('RIFG', 3, 3.0 / 35.0, S_RIFFLE4) { A_FireRiffle(); }
	S_RIFFLE4('RIFG', 2, 0.0 / 35.0, S_RIFFLE5) { A_ReFire(); }
	S_RIFFLE5('RIFG', 1, 2.0 / 35.0, S_RIFFLE) { }
}

defaultproperties
{
	Ammo = am_clip;
	UpState = S_RIFFLEUP;
	DownState = S_RIFFLEDOWN;
	ReadyState = S_RIFFLE;
	AttackState = S_RIFFLE1;
	FlashState = S_LIGHTDONE;
}

}

//**************************************************************************
//
//	MiniMissile
//
//**************************************************************************

class MiniMissile:Projectile
{

__states__
{
	S_MINI_MISSILE('MICR', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_MINI_MISSILE) { A_SpawnPuff(); }
	S_MISSILE_X1('MISL', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_MISSILE_X2) { A_Explode(); }
	S_MISSILE_X2('MISL', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_MISSILE_X3) { }
	S_MISSILE_X3('MISL', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_MISSILE_X4) { }
	S_MISSILE_X4('MISL', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_MISSILE_X5) { }
	S_MISSILE_X5('MISL', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_MISSILE_X6) { }
	S_MISSILE_X6('MISL', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_MISSILE_X7) { }
	S_MISSILE_X7('MISL', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 14.0;
	Speed = 700.0;
	MissileDamage = 10;
	IdleState = S_MINI_MISSILE;
	DeathState = S_MISSILE_X1;

	SightSound = 'FireMissile';
	DeathSound = 'MissileExplode';
}

}

//**************************************************************************
//
//	WeaponMissileLauncher
//
//**************************************************************************

class WeaponMissileLauncher:Weapon
{

//==========================================================================
//
//	A_FireMissile
//
//==========================================================================

void A_FireMissile(void)
{
	Player->Ammo[Ammo]--;
	PlayerPawn(Player->MO).SpawnPlayerMissile(MiniMissile);
}

__states__
{
	S_MISSILE('MMIS', 0, 1.0 / 35.0, S_MISSILE) { A_WeaponReady(); }
	S_MISSILEDOWN('MMIS', 0, 1.0 / 35.0, S_MISSILEDOWN) { A_Lower(); }
	S_MISSILEUP('MMIS', 0, 1.0 / 35.0, S_MISSILEUP) { A_Raise(); }
	S_MISSILE1('MMIS', 0, 4.0 / 35.0, S_MISSILE2) { A_FireMissile(); }
	S_MISSILE2('MMIS', 1, 4.0 / 35.0, S_MISSILE3) { A_Light1(); }
	S_MISSILE3('MMIS', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_MISSILE4) { }
	S_MISSILE4('MMIS', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_MISSILE5) { A_Light2(); }
	S_MISSILE5('MMIS', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_MISSILE6) { }
	S_MISSILE6('MMIS', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_MISSILE7) { A_Light0(); }
	S_MISSILE7('MMIS', 5, 0.0 / 35.0, S_MISSILE) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_misl;
	UpState = S_MISSILEUP;
	DownState = S_MISSILEDOWN;
	ReadyState = S_MISSILE;
	AttackState = S_MISSILE1;
}

}

//**************************************************************************
//
//	HEGrenade
//
//**************************************************************************

class HEGrenade:Projectile
{

__states__
{
	S_GRENADE_HE_1('GRAP', 0, 3.0 / 35.0, S_GRENADE_HE_2) { A_DecReactionCount(); }
	S_GRENADE_HE_2('GRAP', 1, 3.0 / 35.0, S_GRENADE_HE_1) { A_DecReactionCount(); }
	S_GRENADE_HE_X1('BNG4', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_GRENADE_HE_X2) { A_Unknown27(); }
	S_GRENADE_HE_X2('BNG4', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X3) { }
	S_GRENADE_HE_X3('BNG4', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X4) { }
	S_GRENADE_HE_X4('BNG4', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X5) { }
	S_GRENADE_HE_X5('BNG4', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X6) { }
	S_GRENADE_HE_X6('BNG4', 5 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X7) { }
	S_GRENADE_HE_X7('BNG4', 6 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X8) { }
	S_GRENADE_HE_X8('BNG4', 7 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X9) { }
	S_GRENADE_HE_X9('BNG4', 8 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X10) { }
	S_GRENADE_HE_X10('BNG4', 9 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X11) { }
	S_GRENADE_HE_X11('BNG4', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X12) { }
	S_GRENADE_HE_X12('BNG4', 11 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X13) { }
	S_GRENADE_HE_X13('BNG4', 12 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_HE_X14) { }
	S_GRENADE_HE_X14('BNG4', 13 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 13.0;
	Height = 13.0;
	Mass = 20.0;
	Speed = 525.0;
	ReactionCount = 30;
	MissileDamage = 1;
	bNoGravity = false;
	IdleState = S_GRENADE_HE_1;
	DeathState = S_GRENADE_HE_X1;
	SightSound = 'FireGrenade';
	DeathSound = 'Explode';
}

}

//**************************************************************************
//
//	GrenadeFlame
//
//**************************************************************************

class GrenadeFlame:Effect
{

__states__
{
	S_GRENADE_FLAME_1('BNG3', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_GRENADE_FLAME_2) { A_Explode2(); }
	S_GRENADE_FLAME_2('BNG3', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_GRENADE_FLAME_3) { A_DecReactionCount(); }
	S_GRENADE_FLAME_3('FLBE', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_GRENADE_FLAME_4) { A_Unknown30(); }
	S_GRENADE_FLAME_4('FLBE', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_GRENADE_FLAME_5) { A_DecReactionCount(); }
	S_GRENADE_FLAME_5('FLBE', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_GRENADE_FLAME_6) { A_Explode2(); }
	S_GRENADE_FLAME_6('FLBE', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_FLAME_7) { A_DecReactionCount(); }
	S_GRENADE_FLAME_7('FLBE', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_FLAME_8) { A_Explode2(); }
	S_GRENADE_FLAME_8('FLBE', 5 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_FLAME_9) { A_DecReactionCount(); }
	S_GRENADE_FLAME_9('FLBE', 6 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENADE_FLAME_6) { A_Unknown30(); }
	S_GRENADE_FLAME_X1('FLBE', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_GRENADE_FLAME_X2) { }
	S_GRENADE_FLAME_X2('FLBE', 8 | FF_FULLBRIGHT, 2.0 / 35.0, S_GRENADE_FLAME_X3) { A_Unknown30(); }
	S_GRENADE_FLAME_X3('FLBE', 9 | FF_FULLBRIGHT, 2.0 / 35.0, S_GRENADE_FLAME_X4) { }
	S_GRENADE_FLAME_X4('FLBE', 10 | FF_FULLBRIGHT, 2.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	ReactionCount = 120;
	bNoGravity = false;
	IdleState = S_GRENADE_FLAME_1;
	DeathState = S_GRENADE_FLAME_X1;
}

}

//**************************************************************************
//
//	FireGrenade
//
//**************************************************************************

class FireGrenade:Projectile
{

__states__
{
	S_GRENADE_FIRE_1('GRIN', 0, 3.0 / 35.0, S_GRENADE_FIRE_2) { A_DecReactionCount(); }
	S_GRENADE_FIRE_2('GRIN', 1, 3.0 / 35.0, S_GRENADE_FIRE_1) { A_DecReactionCount(); }
	S_GRENADE_FIRE_X1('BNG3', 0, 1.0 / 35.0, S_NULL) { A_FireGrenadeExplode(); }
}

defaultproperties
{
	Radius = 13.0;
	Height = 13.0;
	Mass = 20.0;
	Speed = 525.0;
	ReactionCount = 40;
	MissileDamage = 1;
	bNoGravity = false;
	IdleState = S_GRENADE_FIRE_1;
	DeathState = S_GRENADE_FIRE_X1;
	SightSound = 'FireGrenade';
	DeathSound = 'Explode';
}

}

#ifdef TEASER
//**************************************************************************
//
//	GasCloud
//
//**************************************************************************

class GasCloud:Effect
{

__states__
{
	S_GAS_CLOUD_1('GASC', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAS_CLOUD_2) { }
	S_GAS_CLOUD_2('GASC', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAS_CLOUD_3) { }
	S_GAS_CLOUD_3('GASC', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAS_CLOUD_4) { }
	S_GAS_CLOUD_4('GASC', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAS_CLOUD_5) { }
	S_GAS_CLOUD_5('GASC', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAS_CLOUD_6) { A_Unknown24(); }
	S_GAS_CLOUD_6('GASC', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAS_CLOUD_7) { A_DecReactionCount(); }
	S_GAS_CLOUD_7('GASC', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAS_CLOUD_8) { A_DecReactionCount(); }
	S_GAS_CLOUD_8('GASC', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_GAS_CLOUD_5) { A_DecReactionCount(); }
}

defaultproperties
{
	ReactionCount = 80;
	Translucency = 66;
	bUnknown2 = true;
	IdleState = S_GAS_CLOUD_1;
}

}

//**************************************************************************
//
//	GasGrenade
//
//**************************************************************************

class GasGrenade:Projectile
{

__states__
{
	S_GRENADE_GAS_1('GASG', 1, 3.0 / 35.0, S_GRENADE_GAS_2) { A_DecReactionCount(); }
	S_GRENADE_GAS_2('GASG', 2, 3.0 / 35.0, S_GRENADE_GAS_1) { A_DecReactionCount(); }
	S_GRENADE_GAS_X1('GASS', 0, 1.0 / 35.0, S_NULL) { A_GasGrenadeExplode(); }
}

defaultproperties
{
	Radius = 13.0;
	Height = 13.0;
	Mass = 20.0;
	Speed = 525.0;
	ReactionCount = 40;
	MissileDamage = 1;
	bNoGravity = false;
	IdleState = S_GRENADE_GAS_1;
	DeathState = S_GRENADE_GAS_X1;
	SightSound = 'FireGrenade';
	DeathSound = 'Explode';
}

}
#endif

//**************************************************************************
//
//	WeaponGrenadeLauncher
//
//**************************************************************************

class WeaponGrenadeLauncher:Weapon
{

//==========================================================================
//
//	A_FireGrenade
//
//==========================================================================

void A_FireGrenade(void)
{
	// FIXME absolutely wrong
	Player->Ammo[Ammo]--;
	PlayerPawn(Player->MO).SpawnPlayerMissile(HEGrenade);
}

__states__
{
	S_GRENADE('GREN', 0, 1.0 / 35.0, S_GRENADE) { A_WeaponReady(); }
	S_GRENADEDOWN('GREN', 0, 1.0 / 35.0, S_GRENADEDOWN) { A_Lower(); }
	S_GRENADEUP('GREN', 0, 1.0 / 35.0, S_GRENADEUP) { A_Raise(); }
	S_GRENADE1('GREN', 0, 5.0 / 35.0, S_GRENADE2) { A_FireGrenade(); }
	S_GRENADE2('GREN', 1, 10.0 / 35.0, S_GRENADE3) { }
	S_GRENADE3('GREN', 0, 5.0 / 35.0, S_GRENADE4) { A_FireGrenade(); }
	S_GRENADE4('GREN', 2, 10.0 / 35.0, S_GRENADE5) { }
	S_GRENADE5('GREN', 0, 0.0 / 35.0, S_GRENADE) { A_ReFire(); }
	S_GRENADEFLASH1('GREF', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
	S_GRENADEFLASH2('GREF', 0, 10.0 / 35.0, S_LIGHTDONE) { A_Light0(); }
	S_GRENADEFLASH3('GREF', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
	S_GRENADEHIGH('GREN', 3, 1.0 / 35.0, S_GRENADEHIGH) { A_WeaponReady(); }
	S_GRENADEHIGHDOWN('GREN', 3, 1.0 / 35.0, S_GRENADEHIGHDOWN) { A_Lower(); }
	S_GRENADEHIGHUP('GREN', 3, 1.0 / 35.0, S_GRENADEHIGHUP) { A_Raise(); }
	S_GRENADEHIGH1('GREN', 3, 5.0 / 35.0, S_GRENADEHIGH2) { A_FireGrenade(); }
	S_GRENADEHIGH2('GREN', 4, 10.0 / 35.0, S_GRENADEHIGH3) { }
	S_GRENADEHIGH3('GREN', 3, 5.0 / 35.0, S_GRENADEHIGH4) { A_FireGrenade(); }
	S_GRENADEHIGH4('GREN', 5, 10.0 / 35.0, S_GRENADEHIGH5) { }
	S_GRENADEHIGH5('GREN', 0, 0.0 / 35.0, S_GRENADEHIGH) { A_ReFire(); }
	S_GRENADEHIGHFLASH1('GREF', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
	S_GRENADEHIGHFLASH2('GREF', 2, 10.0 / 35.0, S_LIGHTDONE) { A_Light0(); }
	S_GRENADEHIGHFLASH3('GREF', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
}

defaultproperties
{
	Ammo = am_grenade1;
	UpState = S_GRENADEUP;
	DownState = S_GRENADEDOWN;
	ReadyState = S_GRENADE;
	AttackState = S_GRENADE1;
	HoldAttackState = S_GRENADEFLASH1;
}

}

//**************************************************************************
//
//	FlameFX1
//
//**************************************************************************

class FlameFX1:Projectile
{

__states__
{
	S_FLAMEFX_1('FRBL', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_FLAMEFX_2) { }
#ifdef TEASER
	S_FLAMEFX_2('FRBL', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_FLAMEFX_1) { A_DecReactionCount(); }
	S_FLAMEFX_X1('FRBL', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X2) { A_FlameFXExplode(); }
	S_FLAMEFX_X2('FRBL', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X3) { }
	S_FLAMEFX_X3('FRBL', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X4) { }
	S_FLAMEFX_X4('FRBL', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X5) { }
	S_FLAMEFX_X5('FRBL', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X6) { }
	S_FLAMEFX_X6('FRBL', 7 | FF_FULLBRIGHT, 5.0 / 35.0, S_NULL) { }
#else
	S_FLAMEFX_2('FRBL', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_FLAMEFX_3) { }
	S_FLAMEFX_3('FRBL', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_FLAMEFX_1) { A_DecReactionCount(); }
	S_FLAMEFX_X1('FRBL', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X2) { A_FlameFXExplode(); }
	S_FLAMEFX_X2('FRBL', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X3) { }
	S_FLAMEFX_X3('FRBL', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X4) { }
	S_FLAMEFX_X4('FRBL', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X5) { }
	S_FLAMEFX_X5('FRBL', 7 | FF_FULLBRIGHT, 5.0 / 35.0, S_FLAMEFX_X6) { }
	S_FLAMEFX_X6('FRBL', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_NULL) { }
#endif
}

defaultproperties
{
	Radius = 8.0;
	Height = 11.0;
	Mass = 10.0;
	Speed = 525.0;
#ifdef TEASER
	MissileDamage = 3;
#else
	MissileDamage = 4;
#endif
	bNoGravity = false;
	IdleState = S_FLAMEFX_1;
	DeathState = S_FLAMEFX_X1;
	SightSound = 'FlameThrowerFire';
}

}

//**************************************************************************
//
//	WeaponFlamethrower
//
//**************************************************************************

class WeaponFlamethrower:Weapon
{

//==========================================================================
//
//	A_FireFlamethrower
//
//==========================================================================

void A_FireFlamethrower(void)
{
	Player->Ammo[Ammo]--;
	PlayerPawn(Player->MO).SpawnPlayerMissile(FlameFX1);
}

__states__
{
	S_FLAME('FLMT', 0, 3.0 / 35.0, S_FLAME01) { A_WeaponReady(); }
	S_FLAME01('FLMT', 1, 3.0 / 35.0, S_FLAME) { A_WeaponReady(); }
	S_FLAMEDOWN('FLMT', 0, 1.0 / 35.0, S_FLAMEDOWN) { A_Lower(); }
	S_FLAMEUP('FLMT', 0, 1.0 / 35.0, S_FLAMEUP) { A_Raise(); }
	S_FLAME1('FLMF', 0, 2.0 / 35.0, S_FLAME2) { A_FireFlamethrower(); }
	S_FLAME2('FLMF', 1, 3.0 / 35.0, S_FLAME) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_cell;
	UpState = S_FLAMEUP;
	DownState = S_FLAMEDOWN;
	ReadyState = S_FLAME;
	AttackState = S_FLAME1;
	FlashState = S_LIGHTDONE;
}

}

//**************************************************************************
//
//	MaulerPuff
//
//**************************************************************************

class MaulerPuff:Effect
{

__states__
{
	S_MAULER_FX_1('SHT2', 0, 5.0 / 35.0, S_MAULER_FX_2) { }
	S_MAULER_FX_2('SHT2', 1, 5.0 / 35.0, S_POW1_1) { }
	S_POW1_1('POW1', 0, 4.0 / 35.0, S_POW1_2) { }
	S_POW1_2('POW1', 1, 4.0 / 35.0, S_POW1_3) { }
	S_POW1_3('POW1', 2, 4.0 / 35.0, S_POW1_4) { }
	S_POW1_4('POW1', 3, 4.0 / 35.0, S_POW1_5) { }
	S_POW1_5('POW1', 4, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_MAULER_FX_1;
}

}

//**************************************************************************
//
//	MaulerTorpedoWav
//
//**************************************************************************

class MaulerTorpedoWav:Projectile
{

__states__
{
	S_TORPEDO_WAV1('TWAV', 0 | FF_FULLBRIGHT, 9.0 / 35.0, S_TORPEDO_WAV2) { }
	S_TORPEDO_WAV2('TWAV', 1 | FF_FULLBRIGHT, 9.0 / 35.0, S_TORPEDO_WAV3) { }
	S_TORPEDO_WAV3('TWAV', 2 | FF_FULLBRIGHT, 9.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 13.0;
	Height = 13.0;
	Speed = 1225.0;
	MissileDamage = 10;
	IdleState = S_TORPEDO_WAV1;
	DeathState = S_TORPEDO_WAV3;
}

}

//**************************************************************************
//
//	MaulerTorpedoMissile
//
//**************************************************************************

class MaulerTorpedoMissile:Projectile
{

__states__
{
	S_TORPEDO_1('TORP', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_TORPEDO_2) { }
	S_TORPEDO_2('TORP', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_TORPEDO_3) { }
	S_TORPEDO_3('TORP', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_TORPEDO_4) { }
	S_TORPEDO_4('TORP', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_TORPEDO_1) { }
	S_TORPEDO_X1('THIT', 0 | FF_FULLBRIGHT, 8.0 / 35.0, S_TORPEDO_X2) { }
	S_TORPEDO_X2('THIT', 1 | FF_FULLBRIGHT, 8.0 / 35.0, S_TORPEDO_X3) { }
	S_TORPEDO_X3('THIT', 2 | FF_FULLBRIGHT, 8.0 / 35.0, S_TORPEDO_X4) { A_MaulerTorpedoExplode(); }
	S_TORPEDO_X4('THIT', 3 | FF_FULLBRIGHT, 8.0 / 35.0, S_TORPEDO_X5) { }
	S_TORPEDO_X5('THIT', 4 | FF_FULLBRIGHT, 8.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 13.0;
	Height = 8.0;
	Speed = 700.0;
	MissileDamage = 1;
	IdleState = S_TORPEDO_1;
	DeathState = S_TORPEDO_X1;
	SightSound = 'MaulerTorpedoFire';
	DeathSound = 'Explode';
}

}

//**************************************************************************
//
//	WeaponMauler
//
//**************************************************************************

class WeaponMauler:Weapon
{

void A_FireBlaster1(void)
{
}

void A_FireBlasterSound(void)
{
}

void A_FireBlaster2(void)
{
	Player->Ammo[Ammo]--;
	PlayerPawn(Player->MO).SpawnPlayerMissile(MaulerTorpedoMissile);
}

__states__
{
	S_BLASTER('BLST', 5, 6.0 / 35.0, S_BLASTER01) { A_WeaponReady(); }
	S_BLASTER01('BLST', 6, 6.0 / 35.0, S_BLASTER02) { A_WeaponReady(); }
	S_BLASTER02('BLST', 7, 6.0 / 35.0, S_BLASTER03) { A_WeaponReady(); }
	S_BLASTER03('BLST', 0, 6.0 / 35.0, S_BLASTER) { A_WeaponReady(); }
	S_BLASTERDOWN('BLST', 0, 1.0 / 35.0, S_BLASTERDOWN) { A_Lower(); }
	S_BLASTERUP('BLST', 0, 1.0 / 35.0, S_BLASTERUP) { A_Raise(); }
	S_BLASTER1('BLSF', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_BLASTER2) { A_FireBlaster1(); }
	S_BLASTER2('BLST', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_BLASTER3) { A_Light1(); }
	S_BLASTER3('BLST', 2, 2.0 / 35.0, S_BLASTER4) { A_Light2(); }
	S_BLASTER4('BLST', 3, 2.0 / 35.0, S_BLASTER5) { }
	S_BLASTER5('BLST', 4, 2.0 / 35.0, S_BLASTER6) { }
	S_BLASTER6('BLST', 0, 7.0 / 35.0, S_BLASTER7) { A_Light0(); }
	S_BLASTER7('BLST', 7, 7.0 / 35.0, S_BLASTER8) { }
	S_BLASTER8('BLST', 6, 7.0 / 35.0, S_BLASTER) { A_CheckReload(); }
	S_BLASTERTORPEDO('BLST', 8, 7.0 / 35.0, S_BLASTERTORPEDO01) { A_WeaponReady(); }
	S_BLASTERTORPEDO01('BLST', 9, 7.0 / 35.0, S_BLASTERTORPEDO02) { A_WeaponReady(); }
	S_BLASTERTORPEDO02('BLST', 10, 7.0 / 35.0, S_BLASTERTORPEDO03) { A_WeaponReady(); }
	S_BLASTERTORPEDO03('BLST', 11, 7.0 / 35.0, S_BLASTERTORPEDO) { A_WeaponReady(); }
	S_BLASTERTORPEDODOWN('BLST', 8, 1.0 / 35.0, S_BLASTERTORPEDODOWN) { A_Lower(); }
	S_BLASTERTORPEDOUP('BLST', 8, 1.0 / 35.0, S_BLASTERTORPEDOUP) { A_Raise(); }
	S_BLASTERTORPEDO1('BLST', 8, 20.0 / 35.0, S_BLASTERTORPEDO2) { A_FireBlasterSound(); }
	S_BLASTERTORPEDO2('BLST', 9, 10.0 / 35.0, S_BLASTERTORPEDO3) { A_Light1(); }
	S_BLASTERTORPEDO3('BLSF', 0 | FF_FULLBRIGHT, 10.0 / 35.0, S_BLASTERTORPEDO4) { A_FireBlaster2(); }
	S_BLASTERTORPEDO4('BLST', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_BLASTERTORPEDO5) { A_Light2(); }
	S_BLASTERTORPEDO5('BLST', 2, 2.0 / 35.0, S_BLASTERTORPEDO6) { }
	S_BLASTERTORPEDO6('BLST', 3, 2.0 / 35.0, S_BLASTERTORPEDO7) { A_Light0(); }
	S_BLASTERTORPEDO7('BLST', 4, 2.0 / 35.0, S_BLASTERTORPEDO) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_cell;
	UpState = S_BLASTERUP;
	DownState = S_BLASTERDOWN;
	ReadyState = S_BLASTER;
	AttackState = S_BLASTER1;
}

}

//**************************************************************************
//
//	SigilFX1
//
//**************************************************************************

class SigilFX1:Projectile
{

__states__
{
	S_SIGIL_FX1_1('ZAP6', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX1_2) { }
	S_SIGIL_FX1_2('ZAP6', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX1_3) { A_Unknown90(); }
	S_SIGIL_FX1_3('ZAP6', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX1_1) { A_Unknown90(); }
}

defaultproperties
{
	Radius = 8.0;
	Height = 16.0;
	Speed = 1050.0;
	MissileDamage = 70;
	bUnknown3 = true;
	IdleState = S_SIGIL_FX1_1;
#ifdef TEASER
	DeathState = S_ZAP1_2;
#else
	DeathState = S_ZAP1_1;
#endif
	SightSound = 'SigilFire';
	DeathSound = 'SigilHit';
}

}

//**************************************************************************
//
//	SigilFX2
//
//**************************************************************************

class SigilFX2:Projectile
{

__states__
{
	S_SIGIL_FX2_1('ZOT3', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX2_2) { }
	S_SIGIL_FX2_2('ZOT3', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX2_3) { }
	S_SIGIL_FX2_3('ZOT3', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX2_4) { }
	S_SIGIL_FX2_4('ZOT3', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX2_5) { }
	S_SIGIL_FX2_5('ZOT3', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX2_1) { }
}

defaultproperties
{
	Radius = 8.0;
	Height = 16.0;
	Speed = 1050.0;
	MissileDamage = 70;
	bUnknown3 = true;
	IdleState = S_SIGIL_FX2_1;
#ifdef TEASER
	DeathState = S_ZAP1_2;
#else
	DeathState = S_ZAP1_1;
#endif
	SightSound = 'SigilFire';
	DeathSound = 'SigilHit';
}

}

//**************************************************************************
//
//	SigilFX3
//
//**************************************************************************

class SigilFX3:Projectile
{

__states__
{
	S_SIGIL_FX3_1('ZAP7', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX3_2) { A_Unknown91(); }
	S_SIGIL_FX3_2('ZAP7', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX3_3) { A_Unknown91(); }
	S_SIGIL_FX3_3('ZAP7', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX3_4) { A_Unknown91(); }
	S_SIGIL_FX3_4('ZAP7', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX3_5) { A_Unknown91(); }
	S_SIGIL_FX3_5('ZAP7', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX3_1) { A_Unknown91(); }
}

defaultproperties
{
	Radius = 20.0;
	Height = 40.0;
	Speed = 630.0;
	MissileDamage = 130;
	bUnknown3 = true;
	IdleState = S_SIGIL_FX3_1;
	DeathState = S_ZAP1_2;
	SightSound = 'SigilFire';
	DeathSound = 'SigilHit';
}

}

//**************************************************************************
//
//	SigilFX4
//
//**************************************************************************

class SigilFX4:Projectile
{

__states__
{
	S_SIGIL_FX4_1('ZOT1', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX4_2) { }
	S_SIGIL_FX4_2('ZOT1', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX4_3) { }
	S_SIGIL_FX4_3('ZOT1', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX4_4) { }
	S_SIGIL_FX4_4('ZOT1', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX4_5) { }
	S_SIGIL_FX4_5('ZOT1', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX4_1) { }
}

defaultproperties
{
	Radius = 8.0;
	Height = 24.0;
	Speed = 770.0;
	MissileDamage = 100;
	bUnknown3 = true;
	IdleState = S_SIGIL_FX4_1;
	DeathState = S_ZAP1_6;
	SightSound = 'SigilFire';
	DeathSound = 'SigilHit';
}

}

//**************************************************************************
//
//	SigilFX5
//
//**************************************************************************

class SigilFX5:Projectile
{

__states__
{
	S_SIGIL_FX5_1('ZOT2', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX5_2) { A_Unknown34(); }
	S_SIGIL_FX5_2('ZOT2', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX5_3) { A_Unknown34(); }
	S_SIGIL_FX5_3('ZOT2', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX5_4) { A_Unknown34(); }
	S_SIGIL_FX5_4('ZOT2', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX5_5) { A_Unknown34(); }
	S_SIGIL_FX5_5('ZOT2', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_SIGIL_FX5_1) { A_Unknown34(); }
}

defaultproperties
{
	Radius = 8.0;
	Height = 16.0;
	Speed = 980.0;
	MissileDamage = 120;
	bUnknown3 = true;
	IdleState = S_SIGIL_FX5_1;
	DeathState = S_ZAP1_0;
	SightSound = 'SigilFire';
	DeathSound = 'SigilHit';
}

}

//**************************************************************************
//
//	SigilZap
//
//**************************************************************************

class SigilZap:Effect
{

__states__
{
	S_ZAP6_1('ZAP6', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_ZAP6_2) { }
	S_ZAP6_2('ZAP6', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_ZAP6_3) { }
	S_ZAP6_3('ZAP6', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	bDropOff = true;
	IdleState = S_ZAP6_1;
}

}

//**************************************************************************
//
//	SigilFloor
//
//**************************************************************************

class SigilFloor:Effect
{

__states__
{
	S_SIGIL_FLOOR_1('ZAP5', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FLOOR_2) { A_DecReactionCount(); }
	S_SIGIL_FLOOR_2('ZAP5', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FLOOR_3) { A_Unknown92(); }
	S_SIGIL_FLOOR_3('ZAP5', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FLOOR_4) { A_DecReactionCount(); }
	S_SIGIL_FLOOR_4('ZAP5', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FLOOR_1) { A_DecReactionCount(); }
}

defaultproperties
{
	Speed = 630.0;
#ifdef TEASER
	ReactionCount = 90;
#else
	ReactionCount = 70;
#endif
	Translucency = 66;
	bNoGravity = false;
	IdleState = S_SIGIL_FLOOR_1;
	DeathState = S_ZAP1_0;
}

}

//**************************************************************************
//
//	WeaponSigil
//
//**************************************************************************

class WeaponSigil:Weapon
{

void A_FireSigil1(void)
{
}

void A_FireSigil2(void)
{
}

void A_FireSigil3(void)
{
}

void A_SigilFlash(void)
{
}

__states__
{
	S_SIGIL('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGIL) { A_WeaponReady(); }
	S_SIGIL01('SIGH', 1 | FF_FULLBRIGHT, -1.0, S_NULL) { }
	S_SIGIL02('SIGH', 2 | FF_FULLBRIGHT, -1.0, S_NULL) { }
	S_SIGIL03('SIGH', 3 | FF_FULLBRIGHT, -1.0, S_NULL) { }
	S_SIGIL04('SIGH', 4 | FF_FULLBRIGHT, -1.0, S_NULL) { }
	S_SIGILDOWN('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGILDOWN) { A_Lower(); }
	S_SIGILUP('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGILUP) { A_Raise(); }
	S_SIGIL1('SIGH', 0 | FF_FULLBRIGHT, 18.0 / 35.0, S_SIGIL2) { A_FireSigil1(); }
	S_SIGIL2('SIGH', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_SIGIL3) { A_FireSigil2(); }
	S_SIGIL3('SIGH', 0, 10.0 / 35.0, S_SIGIL4) { A_FireSigil3(); }
	S_SIGIL4('SIGH', 0, 5.0 / 35.0, S_SIGIL) { A_7(); }
	S_SIGILFLASH1('SIGF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGILFLASH2) { A_Light2(); }
	S_SIGILFLASH2('SIGF', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGILFLASH3) { A_SigilFlash(); }
	S_SIGILFLASH3('SIGF', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
}

defaultproperties
{
	Ammo = am_noammo;
	UpState = S_SIGILUP;
	DownState = S_SIGILDOWN;
	ReadyState = S_SIGIL;
	AttackState = S_SIGIL1;
	HoldAttackState = S_SIGILFLASH1;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.24  2002/07/13 07:56:42  dj_jl
//  Huge work on Strife: splitting, merging, implementing stuff, etc.
//
//  Revision 1.23  2002/06/29 15:59:28  dj_jl
//  Split out items, projectiles and decorations.
//
//  Revision 1.22  2002/06/14 15:48:49  dj_jl
//  Beautification.
//
//  Revision 1.21  2002/05/18 17:00:05  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.20  2002/05/03 17:17:32  dj_jl
//  Started work on weapons and items.
//
//  Revision 1.19  2002/04/27 17:04:55  dj_jl
//  Merged all creatures.
//
//  Revision 1.18  2002/04/22 17:22:33  dj_jl
//  Retail Strife data.
//
//  Revision 1.17  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.16  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.15  2002/03/02 17:35:56  dj_jl
//  Weapon classes
//
//  Revision 1.14  2002/02/22 18:00:26  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.13  2002/02/14 19:21:00  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.12  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/11 18:19:43  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:43  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:11  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
