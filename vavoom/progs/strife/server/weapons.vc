//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//***************************************************************************
//
//  WEAPON UTILITES
//
//***************************************************************************

//===========================================================================
//
//  SetPsprite
//
//===========================================================================

void SetPsprite(player_t * player, int position, int stnum)
{
	ViewEntity e;
	state_t *state;

	e = player->ViewEnts[position];
	do
	{
		if (!stnum)
		{
			// Object removed itself.
			e.statenum = 0;
			break;
		}
		state = &states[stnum];
		e.time = state->time;	// could be 0
		e.sprite = state->sprite;
		e.frame = state->frame;
		e.model_index = state->model_index;
		e.alias_frame = state->model_frame;
		e.statenum = state->statenum;
		e.nextstate = state->nextstate;
		// In Strife states doesn't have misc fields
		if (state->misc1)
		{
			// Set coordinates.
			e.sx = state->misc1;
			e.sy = state->misc2;
		}
		if (state->function)
		{
			// Call action routine.
			state->function(e);
			if (!e.statenum)
			{
				break;
			}
		}
		stnum = e.nextstate;
	}
	while (!e.time);	// An initial state of 0 could cycle through.
}

//===========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
// Uses player
//
//===========================================================================

void BringUpWeapon(player_t * player)
{
	player->pendingweapon = wp_nochange;
	player->ViewEnts[ps_weapon].sy = WEAPONBOTTOM;

	SetPsprite(player, ps_weapon, player->w_upstate);
}

//==========================================================================
//
//  ChangeWeapon
//
//  The actual changing of the weapon is done when the weapon psprite can
// do it (read: not in the middle of an attack).
//
//==========================================================================

void ChangeWeapon(player_t * player, int newweapon)
{
	if (player->weaponowned[newweapon] && newweapon != player->readyweapon)
	{
		// Do not go to ??? in shareware, even if cheated.
//FIXME     if ((newweapon != wp_plasma && newweapon != wp_bfg) || !shareware)
		{
			player->pendingweapon = newweapon;
		}
	}
}

//===========================================================================
//
//  DropWeapon
//
//  Player died, so put the weapon away.
//
//===========================================================================

void DropWeapon(player_t * player)
{
	SetPsprite(player, ps_weapon, player->w_downstate);
}

//===========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player.
//
//===========================================================================

void SetupPsprites(player_t * player)
{
	int i;

	// remove all  ViewEnts
	for (i = 0; i < NUMPSPRITES; i++)
	{
		player->ViewEnts[i].statenum = 0;
	}

	// spawn the gun
	BringUpWeapon(player);
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine.
//
//==========================================================================

void MovePsprites(player_t * player)
{
	int i;
	ViewEntity e;

	for (i = 0; i < NUMPSPRITES; i++)
	{
		e = player->ViewEnts[i];
		// a null state means not active
		if (e.statenum)
		{
			// drop tic count and possibly change state

			// a -1 tic count never changes
			if (e.time != -1.0)
			{
				e.time -= frametime;
				if (e.time <= 0.0)
				{
					e.time = 0.0;
					SetPsprite(player, i, e.nextstate);
				}
			}
		}
	}

	player->ViewEnts[ps_flash].sx = player->ViewEnts[ps_weapon].sx;
	player->ViewEnts[ps_flash].sy = player->ViewEnts[ps_weapon].sy;
}

//==========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough ammo to shoot.
// If not, selects the next weapon to use.
//
//==========================================================================

int CheckAmmo(player_t * player)
{
	int ammo;
	int count;

	ammo = player->w_ammo;

	// Minimal amount for one shot varies.
#ifdef FIXME
	if (player->readyweapon == wp_bfg)
		count = BFGCELLS;
	else
#endif
		count = 1;	// Regular.

	// Some do not need ammunition anyway.
	// Return if current ammunition sufficient.
	if (ammo == am_noammo || player->ammo[ammo] >= count)
		return true;

	// Out of ammo, pick a weapon to change to.
	// Preferences are set here.
	do
	{
		if (player->weaponowned[wp_flame] && player->ammo[am_cell])
		{
			player->pendingweapon = wp_flame;
		}
		else if (player->weaponowned[wp_riffle] && player->ammo[am_clip])
		{
			player->pendingweapon = wp_riffle;
		}
		else if (player->weaponowned[wp_crossbow]
			&& player->ammo[am_electric_arrow])
		{
			player->pendingweapon = wp_crossbow;
		}
		else if (player->weaponowned[wp_missile] && player->ammo[am_misl])
		{
			player->pendingweapon = wp_missile;
		}
		else
		{
			// If everything fails.
			player->pendingweapon = wp_fist;
		}
	}
	while (player->pendingweapon == wp_nochange);

	// Now set appropriate weapon overlay.
	SetPsprite(player, ps_weapon, player->w_downstate);

	return false;
}

//===========================================================================
//
//  BulletSlope
//
//  Sets a slope so a near miss is at aproximately the height of the
// intended target
//
//===========================================================================

void BulletSlope(mobj_t * mo, TAVec * angles)
{
	// see which target is to be aimed at
	angles->pitch = mo->angles.pitch;
	angles->yaw = mo->angles.yaw;
	angles->roll = mo->angles.roll;

	AimLineAttack(mo, angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles->yaw = AngleMod360(angles->yaw + 45.0 / 8.0);
		AimLineAttack(mo, angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles->yaw = AngleMod360(angles->yaw - 45.0 / 4.0);
			AimLineAttack(mo, angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles->yaw = AngleMod360(angles->yaw + 45.0 / 8.0);
			}
		}
	}
}

//===========================================================================
//
//  FireWeapon
//
//===========================================================================

void FireWeapon(player_t * player)
{
	if (!CheckAmmo(player))
	{
		return;
	}

	player->mo->SetState(S_PLAY_ATK1);
	SetPsprite(player, ps_weapon, player->w_atkstate);
	P_NoiseAlert(player->mo, player->mo);
}

//***************************************************************************
//
//  WEAPON ACTIONS
//
//***************************************************************************

//===========================================================================
//
//  Weapon::A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
// Follows after getting weapon up, or after previous attack/fire sequence.
//
//===========================================================================

void Weapon::A_WeaponReady(void)
{
	float angle;

	// get out of attack state
	if (player->mo->statenum == S_PLAY_ATK1
		|| player->mo->statenum == S_PLAY_ATK2)
	{
		player->mo->SetState(S_PLAY);
	}

/*    if (player->readyweapon == wp_chainsaw && statenum == S_SAW)
    {
		StartSoundName(player->mo, "ChainsawIdle");
    }*/

	// check for change
	//  if player is dead, put the weapon away
	if (player->pendingweapon != wp_nochange || !player->health)
	{
		// change weapon
		//  (pending weapon should allready be validated)
		SetPsprite(player, ps_weapon, player->w_downstate);
		return;
	}

	// check for fire
	//  the missile launcher and bfg do not auto fire
	if (player->buttons & BT_ATTACK)
	{
		if (!player->attackdown || (player->readyweapon != wp_missile))
		{
			player->attackdown = true;
			FireWeapon(player);
			return;
		}
	}
	else
		player->attackdown = false;

	// bob the weapon based on movement speed
	angle = AngleMod360(180.0 * level->time);
	sx = 1.0 + player->bob * cos(angle);
	if (angle >= 180.0)
	{
		angle -= 180.0;
	}
	sy = WEAPONTOP + player->bob * sin(angle);
}

//===========================================================================
//
//  Weapon::A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//===========================================================================

void Weapon::A_Lower(void)
{
	sy += LOWERSPEED;

	// Is already down.
	if (sy < WEAPONBOTTOM)
		return;

	// Player is dead.
	if (player->playerstate == PST_DEAD)
	{
		sy = WEAPONBOTTOM;

		// don't bring weapon back up
		return;
	}

	// The old weapon has been lowered off the screen,
	// so change the weapon and start raising it
	if (!player->health)
	{
		// Player is dead, so keep the weapon off screen.
		SetPsprite(player, ps_weapon, S_NULL);
		return;
	}

	player->readyweapon = player->pendingweapon;
	weaponinfo[player->readyweapon] (player);

	BringUpWeapon(player);
}

//===========================================================================
//
//  Weapon::A_Raise
//
//===========================================================================

void Weapon::A_Raise(void)
{
	sy -= RAISESPEED;

	if (sy > WEAPONTOP)
	{
		return;
	}

	sy = WEAPONTOP;

	// The weapon has been raised all the way,
	//  so change to the ready state.
	SetPsprite(player, ps_weapon, player->w_readystate);
}

//===========================================================================
//
//  Weapon::A_ReFire
//
//  The player can re-fire the weapon without lowering it entirely.
//
//===========================================================================

void Weapon::A_ReFire(void)
{
	// check for fire
	//  (if a weaponchange is pending, let it go through instead)
	if ((player->buttons & BT_ATTACK)
		&& player->pendingweapon == wp_nochange && player->health)
	{
		player->refire++;
		FireWeapon(player);
	}
	else
	{
		player->refire = 0;
		CheckAmmo(player);
	}
}

//===========================================================================
//
//  A_CheckReload
//
//===========================================================================

void A_CheckReload(mobj_t * actor)
{
	player_t *player = actor->player;

	CheckAmmo(player);
}

//===========================================================================
//
//  A_GunFlash
//
//===========================================================================

void A_GunFlash(mobj_t * actor)
{
	player_t *player = actor->player;

	player->mo->SetState(S_PLAY_ATK2);
	SetPsprite(player, ps_flash, player->w_flashstate);
}

//===========================================================================
//
//  Weapon::A_Light0
//
//===========================================================================

void Weapon::A_Light0(void)
{
	player->extralight = 0;
}

//===========================================================================
//
//  A_Light1
//
//===========================================================================

void A_Light1(mobj_t * actor)
{
	player_t *player = actor->player;

	player->extralight = 1;
}

//===========================================================================
//
//  A_Light2
//
//===========================================================================

void A_Light2(mobj_t * actor)
{
	player_t *player = actor->player;

	player->extralight = 2;
}

//***************************************************************************
//
//  WEAPON ATTACKS
//
//***************************************************************************

//===========================================================================
//
//  Weapon::A_Punch
//
//===========================================================================

void Weapon::A_Punch(void)
{
	int damage;
	TAVec angles;
	TVec vforward;

	damage = (P_Random() % 10 + 1) << 1;

	if (player->powers[pw_strength])
		damage *= 10;

	avcpy(player->mo->angles, angles);
	angles.yaw = AngleMod360(angles.yaw +
		(Random() - Random()) * 45.0 / 8.0);
	AimLineAttack(player->mo, &angles, MELEERANGE);
	AngleVector(&angles, &vforward);
	LineAttack(player->mo, &vforward, MELEERANGE, damage);

	// turn to face target
	if (linetarget)
	{
		StartSoundName(*player->mo, 'Punch', CHAN_WEAPON);
		player->mo->angles.yaw =
			atan2(linetarget->origin.y - player->mo->origin.y,
			linetarget->origin.x - player->mo->origin.x);
		player->fixangle = 1;
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.12  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/11 18:19:43  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:43  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:11  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
