//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//***************************************************************************
//
//  WEAPON UTILITES
//
//***************************************************************************

//==========================================================================
//
//	SetWeapon
//
//==========================================================================

void SetWeapon(player_t * player, int NewWeapon)
{
	player->ReadyWeapon = NewWeapon;
	player->PendingWeapon = wp_nochange;
	if (player->ViewEnts[ps_weapon])
	{
		player->ViewEnts[ps_weapon].Destroy();
	}
	player->ViewEnts[ps_weapon] = SpawnObject(WeaponClasses[NewWeapon], none);
	player->ViewEnts[ps_weapon].Player = player;
}

//===========================================================================
//
//  SetPsprite
//
//===========================================================================

void SetPsprite(player_t * player, int position, int stnum)
{
	player->ViewEnts[position].SetState(stnum);
}

//===========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
// Uses player
//
//===========================================================================

void BringUpWeapon(player_t * player)
{
	player->PendingWeapon = wp_nochange;
	player->ViewEnts[ps_weapon].SY = WEAPONBOTTOM;

	SetPsprite(player, ps_weapon, Weapon(player->ViewEnts[ps_weapon]).UpState);
}

//==========================================================================
//
//  ChangeWeapon
//
//  The actual changing of the weapon is done when the weapon psprite can
// do it (read: not in the middle of an attack).
//
//==========================================================================

void ChangeWeapon(player_t * player, int newweapon)
{
	if (player->WeaponOwned[newweapon] && newweapon != player->ReadyWeapon)
	{
		// Do not go to ??? in shareware, even if cheated.
//FIXME     if ((newweapon != wp_plasma && newweapon != wp_bfg) || !shareware)
		{
			player->PendingWeapon = newweapon;
		}
	}
}

//===========================================================================
//
//  DropWeapon
//
//  Player died, so put the weapon away.
//
//===========================================================================

void DropWeapon(player_t * player)
{
	SetPsprite(player, ps_weapon, Weapon(player->ViewEnts[ps_weapon]).DownState);
}

//===========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player.
//
//===========================================================================

void SetupPsprites(player_t * player)
{
	int i;

	// remove all  ViewEnts
	for (i = 0; i < NUMPSPRITES; i++)
	{
		player->ViewEnts[i].StateNum = 0;
	}

	// spawn the gun
	BringUpWeapon(player);
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine.
//
//==========================================================================

void MovePsprites(player_t * player)
{
	int i;
	ViewEntity e;

	for (i = 0; i < NUMPSPRITES; i++)
	{
		e = player->ViewEnts[i];
		// a null state means not active
		if (e.StateNum)
		{
			// drop tic count and possibly change state

			// a -1 tic count never changes
			if (e.StateTime != -1.0)
			{
				e.StateTime -= frametime;
				if (e.StateTime <= 0.0)
				{
					e.StateTime = 0.0;
					SetPsprite(player, i, e.NextState);
				}
			}
		}
	}

	player->ViewEnts[ps_flash].SX = player->ViewEnts[ps_weapon].SX;
	player->ViewEnts[ps_flash].SY = player->ViewEnts[ps_weapon].SY;
}

//==========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough ammo to shoot.
// If not, selects the next weapon to use.
//
//==========================================================================

int CheckAmmo(player_t * player)
{
	int ammo;
	int count;

	ammo = Weapon(player->ViewEnts[ps_weapon]).Ammo;

	// Minimal amount for one shot varies.
#ifdef FIXME
	if (player->ReadyWeapon == wp_bfg)
		count = BFGCELLS;
	else
#endif
		count = 1;	// Regular.

	// Some do not need ammunition anyway.
	// Return if current ammunition sufficient.
	if (ammo == am_noammo || player->Ammo[ammo] >= count)
		return true;

	// Out of ammo, pick a weapon to change to.
	// Preferences are set here.
	do
	{
		if (player->WeaponOwned[wp_flame] && player->Ammo[am_cell])
		{
			player->PendingWeapon = wp_flame;
		}
		else if (player->WeaponOwned[wp_riffle] && player->Ammo[am_clip])
		{
			player->PendingWeapon = wp_riffle;
		}
		else if (player->WeaponOwned[wp_crossbow]
			&& player->Ammo[am_electric_arrow])
		{
			player->PendingWeapon = wp_crossbow;
		}
		else if (player->WeaponOwned[wp_missile] && player->Ammo[am_misl])
		{
			player->PendingWeapon = wp_missile;
		}
		else
		{
			// If everything fails.
			player->PendingWeapon = wp_fist;
		}
	}
	while (player->PendingWeapon == wp_nochange);

	// Now set appropriate weapon overlay.
	SetPsprite(player, ps_weapon, Weapon(player->ViewEnts[ps_weapon]).DownState);

	return false;
}

//===========================================================================
//
//  FireWeapon
//
//===========================================================================

void FireWeapon(player_t * player)
{
	if (!CheckAmmo(player))
	{
		return;
	}

	player->MO.SetState(player->MO.MissileState);
	SetPsprite(player, ps_weapon, Weapon(player->ViewEnts[ps_weapon]).AttackState);
	P_NoiseAlert(player->MO, player->MO);
}

//***************************************************************************
//
//  WEAPON ACTIONS
//
//***************************************************************************

//===========================================================================
//
//  Weapon::A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
// Follows after getting weapon up, or after previous attack/fire sequence.
//
//===========================================================================

void Weapon::A_WeaponReady(void)
{
	float angle;

	// get out of attack state
	if (Player->MO.StateNum == Player->MO.MissileState ||
		Player->MO.StateNum == PlayerPawn(Player->MO).Attack2State)
	{
		Player->MO.SetState(Player->MO.IdleState);
	}

/*	if (Player->ReadyWeapon == wp_chainsaw && StateNum == S_SAW)
	{
		StartSoundName(Player->mo, "ChainsawIdle");
	}*/

	// check for change
	//  if player is dead, put the weapon away
	if (Player->PendingWeapon != wp_nochange || !Player->Health)
	{
		// change weapon
		//  (pending weapon should allready be validated)
		SetPsprite(Player, ps_weapon, DownState);
		return;
	}

	// check for fire
	//  the missile launcher and bfg do not auto fire
	if (Player->Buttons & BT_ATTACK)
	{
		if (!Player->bAttackDown || (Player->ReadyWeapon != wp_missile))
		{
			Player->bAttackDown = true;
			FireWeapon(Player);
			return;
		}
	}
	else
		Player->bAttackDown = false;

	// bob the weapon based on movement speed
	angle = AngleMod360(180.0 * level->time);
	SX = 1.0 + Player->Bob * cos(angle);
	if (angle >= 180.0)
	{
		angle -= 180.0;
	}
	SY = WEAPONTOP + Player->Bob * sin(angle);
}

//===========================================================================
//
//  Weapon::A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//===========================================================================

void Weapon::A_Lower(void)
{
	SY += LOWERSPEED;

	// Is already down.
	if (SY < WEAPONBOTTOM)
		return;

	// Player is dead.
	if (Player->PlayerState == PST_DEAD)
	{
		SY = WEAPONBOTTOM;

		// don't bring weapon back up
		return;
	}

	// The old weapon has been lowered off the screen,
	// so change the weapon and start raising it
	if (!Player->Health)
	{
		// Player is dead, so keep the weapon off screen.
		SetPsprite(Player, ps_weapon, S_NULL);
		return;
	}

	SetWeapon(Player, Player->PendingWeapon);

	BringUpWeapon(Player);
}

//===========================================================================
//
//  Weapon::A_Raise
//
//===========================================================================

void Weapon::A_Raise(void)
{
	SY -= RAISESPEED;

	if (SY > WEAPONTOP)
	{
		return;
	}

	SY = WEAPONTOP;

	// The weapon has been raised all the way,
	//  so change to the ready state.
	SetPsprite(Player, ps_weapon, ReadyState);
}

//===========================================================================
//
//  Weapon::A_ReFire
//
//  The player can re-fire the weapon without lowering it entirely.
//
//===========================================================================

void Weapon::A_ReFire(void)
{
	// check for fire
	//  (if a weaponchange is pending, let it go through instead)
	if ((Player->Buttons & BT_ATTACK)
		&& Player->PendingWeapon == wp_nochange && Player->Health)
	{
		Player->Refire++;
		FireWeapon(Player);
	}
	else
	{
		Player->Refire = 0;
		CheckAmmo(Player);
	}
}

//===========================================================================
//
//  Weapon::A_CheckReload
//
//===========================================================================

void Weapon::A_CheckReload(void)
{
	CheckAmmo(Player);
}

//===========================================================================
//
//  Weapon::A_GunFlash
//
//===========================================================================

void Weapon::A_GunFlash(void)
{
	Player->MO.SetState(PlayerPawn(Player->MO).Attack2State);
	SetPsprite(Player, ps_flash, Weapon(Player->ViewEnts[ps_weapon]).FlashState);
}

//===========================================================================
//
//  Weapon::A_Light0
//
//===========================================================================

void Weapon::A_Light0(void)
{
	Player->ExtraLight = 0;
}

//===========================================================================
//
//  Weapon::A_Light1
//
//===========================================================================

void Weapon::A_Light1(void)
{
	Player->ExtraLight = 1;
}

//===========================================================================
//
//  Weapon::A_Light2
//
//===========================================================================

void Weapon::A_Light2(void)
{
	Player->ExtraLight = 2;
}

void Weapon::A_7(void)
{
}

//**************************************************************************
//**************************************************************************
//
//	WeaponPunch
//
//**************************************************************************
//**************************************************************************

class WeaponPunch:Weapon
{

//===========================================================================
//
//  A_Punch
//
//===========================================================================

void A_Punch(void)
{
	int damage;
	TAVec angles;
	TVec dir;

	damage = (P_Random() % 10 + 1) << 1;

	if (Player->Powers[pw_strength])
		damage *= 10;

	avcpy(Player->MO.Angles, angles);
	angles.yaw = AngleMod360(angles.yaw +
		(Random() - Random()) * 45.0 / 8.0);
	dir = AimLineAttack(Player->MO, angles, MELEERANGE);
	LineAttack(Player->MO, dir, MELEERANGE, damage);

	// turn to face target
	if (linetarget)
	{
		if (linetarget.bNoBlood)
		{
			Player->MO.PlaySound('PunchHitMetal', CHAN_WEAPON);
		}
		else
		{
			Player->MO.PlaySound('PunchHitMeat', CHAN_WEAPON);
		}
		Player->MO.Angles.yaw =
			atan2(linetarget.Origin.y - Player->MO.Origin.y,
			linetarget.Origin.x - Player->MO.Origin.x);
		Player->bFixAngle = true;
	}
	else
	{
		Player->MO.PlaySound('PunchMiss', CHAN_WEAPON);
	}
}

__states__
{
	S_PUNCH('PNCH', 0, 1.0 / 35.0, S_PUNCH) { A_WeaponReady(); }
	S_PUNCHDOWN('PNCH', 0, 1.0 / 35.0, S_PUNCHDOWN) { A_Lower(); }
	S_PUNCHUP('PNCH', 0, 1.0 / 35.0, S_PUNCHUP) { A_Raise(); }
	S_PUNCH1('PNCH', 1, 4.0 / 35.0, S_PUNCH2) { }
	S_PUNCH2('PNCH', 2, 4.0 / 35.0, S_PUNCH3) { A_Punch(); }
	S_PUNCH3('PNCH', 3, 5.0 / 35.0, S_PUNCH4) { }
	S_PUNCH4('PNCH', 2, 4.0 / 35.0, S_PUNCH5) { }
	S_PUNCH5('PNCH', 1, 5.0 / 35.0, S_PUNCH) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_noammo;
	UpState = S_PUNCHUP;
	DownState = S_PUNCHDOWN;
	ReadyState = S_PUNCH;
	AttackState = S_PUNCH1;
	FlashState = S_LIGHTDONE;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponCrossbow
//
//**************************************************************************
//**************************************************************************

class WeaponCrossbow:Weapon
{

void A_FireElectricArrow(void)
{
//	Player->Ammo[Ammo]--;
//	PlayerPawn(Player->MO).SpawnPlayerMissile(ElectricArrow);
}

void A_FirePoisonArrow(void)
{
}

__states__
{
	S_XBOW('XBOW', 0, 1.0 / 35.0, S_XBOW) { A_WeaponReady(); }
	S_XBOWDOWN('XBOW', 0, 1.0 / 35.0, S_XBOWDOWN) { A_Lower(); }
	S_XBOWUP('XBOW', 0, 1.0 / 35.0, S_XBOWUP) { A_Raise(); }
	S_XBOW1('XBOW', 0, 3.0 / 35.0, S_XBOW2) { A_7(); }
	S_XBOW2('XBOW', 1, 6.0 / 35.0, S_XBOW3) { A_FireElectricArrow(); }
	S_XBOW3('XBOW', 2, 4.0 / 35.0, S_XBOW4) { }
	S_XBOW4('XBOW', 3, 6.0 / 35.0, S_XBOW5) { }
	S_XBOW5('XBOW', 4, 3.0 / 35.0, S_XBOW6) { }
	S_XBOW6('XBOW', 5, 5.0 / 35.0, S_XBOW7) { }
	S_XBOW7('XBOW', 6, 5.0 / 35.0, S_XBOW) { A_CheckReload(); }
	S_XBOWFLASH1('XBOW', 10, 5.0 / 35.0, S_XBOWFLASH2) { }
	S_XBOWFLASH2('XBOW', 11, 5.0 / 35.0, S_XBOWFLASH3) { }
	S_XBOWFLASH3('XBOW', 12, 5.0 / 35.0, S_XBOWFLASH1) { }
	S_XBOWPOISON('XBOW', 7, 1.0 / 35.0, S_XBOWPOISON) { A_WeaponReady(); }
	S_XBOWPOISONDOWN('XBOW', 7, 1.0 / 35.0, S_XBOWPOISONDOWN) { A_Lower(); }
	S_XBOWPOISONUP('XBOW', 7, 1.0 / 35.0, S_XBOWPOISONUP) { A_Raise(); }
	S_XBOWPOISON1('XBOW', 7, 3.0 / 35.0, S_XBOWPOISON2) { }
	S_XBOWPOISON2('XBOW', 1, 6.0 / 35.0, S_XBOWPOISON3) { A_FirePoisonArrow(); }
	S_XBOWPOISON3('XBOW', 2, 4.0 / 35.0, S_XBOWPOISON4) { }
	S_XBOWPOISON4('XBOW', 3, 6.0 / 35.0, S_XBOWPOISON5) { }
	S_XBOWPOISON5('XBOW', 4, 3.0 / 35.0, S_XBOWPOISON6) { }
	S_XBOWPOISON6('XBOW', 8, 5.0 / 35.0, S_XBOWPOISON7) { }
	S_XBOWPOISON7('XBOW', 9, 5.0 / 35.0, S_XBOWPOISON) { A_CheckReload(); }
}

defaultproperties
{
	Ammo = am_electric_arrow;
	UpState = S_XBOWUP;
	DownState = S_XBOWDOWN;
	ReadyState = S_XBOW;
	AttackState = S_XBOW1;
	FlashState = S_LIGHTDONE;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponAssaultGun
//
//**************************************************************************
//**************************************************************************

class WeaponAssaultGun:Weapon
{

void A_FireRiffle(void)
{
}

__states__
{
	S_RIFFLE('RIFG', 0, 1.0 / 35.0, S_RIFFLE) { A_WeaponReady(); }
	S_RIFFLEDOWN('RIFG', 1, 1.0 / 35.0, S_RIFFLEDOWN) { A_Lower(); }
	S_RIFFLEUP('RIFG', 0, 1.0 / 35.0, S_RIFFLEUP) { A_Raise(); }
	S_RIFFLE1('RIFF', 0, 3.0 / 35.0, S_RIFFLE2) { A_FireRiffle(); }
	S_RIFFLE2('RIFF', 1, 3.0 / 35.0, S_RIFFLE3) { A_FireRiffle(); }
	S_RIFFLE3('RIFG', 3, 3.0 / 35.0, S_RIFFLE4) { A_FireRiffle(); }
	S_RIFFLE4('RIFG', 2, 0.0 / 35.0, S_RIFFLE5) { A_ReFire(); }
	S_RIFFLE5('RIFG', 1, 2.0 / 35.0, S_RIFFLE) { }
}

defaultproperties
{
	Ammo = am_clip;
	UpState = S_RIFFLEUP;
	DownState = S_RIFFLEDOWN;
	ReadyState = S_RIFFLE;
	AttackState = S_RIFFLE1;
	FlashState = S_LIGHTDONE;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponMissileLauncher
//
//**************************************************************************
//**************************************************************************

class WeaponMissileLauncher:Weapon
{

void A_FireMissile(void)
{
}

__states__
{
	S_MISSILE('MMIS', 0, 1.0 / 35.0, S_MISSILE) { A_WeaponReady(); }
	S_MISSILEDOWN('MMIS', 0, 1.0 / 35.0, S_MISSILEDOWN) { A_Lower(); }
	S_MISSILEUP('MMIS', 0, 1.0 / 35.0, S_MISSILEUP) { A_Raise(); }
	S_MISSILE1('MMIS', 0, 4.0 / 35.0, S_MISSILE2) { A_FireMissile(); }
	S_MISSILE2('MMIS', 1, 4.0 / 35.0, S_MISSILE3) { A_Light1(); }
	S_MISSILE3('MMIS', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_MISSILE4) { }
	S_MISSILE4('MMIS', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_MISSILE5) { A_Light2(); }
	S_MISSILE5('MMIS', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_MISSILE6) { }
	S_MISSILE6('MMIS', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_MISSILE7) { A_Light0(); }
	S_MISSILE7('MMIS', 5, 0.0 / 35.0, S_MISSILE) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_misl;
	UpState = S_MISSILEUP;
	DownState = S_MISSILEDOWN;
	ReadyState = S_MISSILE;
	AttackState = S_MISSILE1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponGrenadeLauncher
//
//**************************************************************************
//**************************************************************************

class WeaponGrenadeLauncher:Weapon
{

void A_FireGrenade(void)
{
}

__states__
{
	S_GRENADE('GREN', 0, 1.0 / 35.0, S_GRENADE) { A_WeaponReady(); }
	S_GRENADEDOWN('GREN', 0, 1.0 / 35.0, S_GRENADEDOWN) { A_Lower(); }
	S_GRENADEUP('GREN', 0, 1.0 / 35.0, S_GRENADEUP) { A_Raise(); }
	S_GRENADE1('GREN', 0, 5.0 / 35.0, S_GRENADE2) { A_FireGrenade(); }
	S_GRENADE2('GREN', 1, 10.0 / 35.0, S_GRENADE3) { }
	S_GRENADE3('GREN', 0, 5.0 / 35.0, S_GRENADE4) { A_FireGrenade(); }
	S_GRENADE4('GREN', 2, 10.0 / 35.0, S_GRENADE5) { }
	S_GRENADE5('GREN', 0, 0.0 / 35.0, S_GRENADE) { A_ReFire(); }
	S_GRENADEFLASH1('GREF', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
	S_GRENADEFLASH2('GREF', 0, 10.0 / 35.0, S_LIGHTDONE) { A_Light0(); }
	S_GRENADEFLASH3('GREF', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
	S_GRENADEHIGH('GREN', 3, 1.0 / 35.0, S_GRENADEHIGH) { A_WeaponReady(); }
	S_GRENADEHIGHDOWN('GREN', 3, 1.0 / 35.0, S_GRENADEHIGHDOWN) { A_Lower(); }
	S_GRENADEHIGHUP('GREN', 3, 1.0 / 35.0, S_GRENADEHIGHUP) { A_Raise(); }
	S_GRENADEHIGH1('GREN', 3, 5.0 / 35.0, S_GRENADEHIGH2) { A_FireGrenade(); }
	S_GRENADEHIGH2('GREN', 4, 10.0 / 35.0, S_GRENADEHIGH3) { }
	S_GRENADEHIGH3('GREN', 3, 5.0 / 35.0, S_GRENADEHIGH4) { A_FireGrenade(); }
	S_GRENADEHIGH4('GREN', 5, 10.0 / 35.0, S_GRENADEHIGH5) { }
	S_GRENADEHIGH5('GREN', 0, 0.0 / 35.0, S_GRENADEHIGH) { A_ReFire(); }
	S_GRENADEHIGHFLASH1('GREF', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
	S_GRENADEHIGHFLASH2('GREF', 2, 10.0 / 35.0, S_LIGHTDONE) { A_Light0(); }
	S_GRENADEHIGHFLASH3('GREF', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
}

defaultproperties
{
	Ammo = am_grenade1;
	UpState = S_GRENADEUP;
	DownState = S_GRENADEDOWN;
	ReadyState = S_GRENADE;
	AttackState = S_GRENADE1;
	HoldAttackState = S_GRENADEFLASH1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponFlamethrower
//
//**************************************************************************
//**************************************************************************

class WeaponFlamethrower:Weapon
{

void A_FireFlamethrower(void)
{
}

__states__
{
	S_FLAME('FLMT', 0, 3.0 / 35.0, S_FLAME01) { A_WeaponReady(); }
	S_FLAME01('FLMT', 1, 3.0 / 35.0, S_FLAME) { A_WeaponReady(); }
	S_FLAMEDOWN('FLMT', 0, 1.0 / 35.0, S_FLAMEDOWN) { A_Lower(); }
	S_FLAMEUP('FLMT', 0, 1.0 / 35.0, S_FLAMEUP) { A_Raise(); }
	S_FLAME1('FLMF', 0, 2.0 / 35.0, S_FLAME2) { A_FireFlamethrower(); }
	S_FLAME2('FLMF', 1, 3.0 / 35.0, S_FLAME) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_cell;
	UpState = S_FLAMEUP;
	DownState = S_FLAMEDOWN;
	ReadyState = S_FLAME;
	AttackState = S_FLAME1;
	FlashState = S_LIGHTDONE;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponMauler
//
//**************************************************************************
//**************************************************************************

class WeaponMauler:Weapon
{

void A_FireBlaster1(void)
{
}

void A_FireBlasterSound(void)
{
}

void A_FireBlaster2(void)
{
}

__states__
{
	S_BLASTER('BLST', 5, 6.0 / 35.0, S_BLASTER01) { A_WeaponReady(); }
	S_BLASTER01('BLST', 6, 6.0 / 35.0, S_BLASTER02) { A_WeaponReady(); }
	S_BLASTER02('BLST', 7, 6.0 / 35.0, S_BLASTER03) { A_WeaponReady(); }
	S_BLASTER03('BLST', 0, 6.0 / 35.0, S_BLASTER) { A_WeaponReady(); }
	S_BLASTERDOWN('BLST', 0, 1.0 / 35.0, S_BLASTERDOWN) { A_Lower(); }
	S_BLASTERUP('BLST', 0, 1.0 / 35.0, S_BLASTERUP) { A_Raise(); }
	S_BLASTER1('BLSF', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_BLASTER2) { A_FireBlaster1(); }
	S_BLASTER2('BLST', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_BLASTER3) { A_Light1(); }
	S_BLASTER3('BLST', 2, 2.0 / 35.0, S_BLASTER4) { A_Light2(); }
	S_BLASTER4('BLST', 3, 2.0 / 35.0, S_BLASTER5) { }
	S_BLASTER5('BLST', 4, 2.0 / 35.0, S_BLASTER6) { }
	S_BLASTER6('BLST', 0, 7.0 / 35.0, S_BLASTER7) { A_Light0(); }
	S_BLASTER7('BLST', 7, 7.0 / 35.0, S_BLASTER8) { }
	S_BLASTER8('BLST', 6, 7.0 / 35.0, S_BLASTER) { A_CheckReload(); }
	S_BLASTERTORPEDO('BLST', 8, 7.0 / 35.0, S_BLASTERTORPEDO01) { A_WeaponReady(); }
	S_BLASTERTORPEDO01('BLST', 9, 7.0 / 35.0, S_BLASTERTORPEDO02) { A_WeaponReady(); }
	S_BLASTERTORPEDO02('BLST', 10, 7.0 / 35.0, S_BLASTERTORPEDO03) { A_WeaponReady(); }
	S_BLASTERTORPEDO03('BLST', 11, 7.0 / 35.0, S_BLASTERTORPEDO) { A_WeaponReady(); }
	S_BLASTERTORPEDODOWN('BLST', 8, 1.0 / 35.0, S_BLASTERTORPEDODOWN) { A_Lower(); }
	S_BLASTERTORPEDOUP('BLST', 8, 1.0 / 35.0, S_BLASTERTORPEDOUP) { A_Raise(); }
	S_BLASTERTORPEDO1('BLST', 8, 20.0 / 35.0, S_BLASTERTORPEDO2) { A_FireBlasterSound(); }
	S_BLASTERTORPEDO2('BLST', 9, 10.0 / 35.0, S_BLASTERTORPEDO3) { A_Light1(); }
	S_BLASTERTORPEDO3('BLSF', 0 | FF_FULLBRIGHT, 10.0 / 35.0, S_BLASTERTORPEDO4) { A_FireBlaster2(); }
	S_BLASTERTORPEDO4('BLST', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_BLASTERTORPEDO5) { A_Light2(); }
	S_BLASTERTORPEDO5('BLST', 2, 2.0 / 35.0, S_BLASTERTORPEDO6) { }
	S_BLASTERTORPEDO6('BLST', 3, 2.0 / 35.0, S_BLASTERTORPEDO7) { A_Light0(); }
	S_BLASTERTORPEDO7('BLST', 4, 2.0 / 35.0, S_BLASTERTORPEDO) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_cell;
	UpState = S_BLASTERUP;
	DownState = S_BLASTERDOWN;
	ReadyState = S_BLASTER;
	AttackState = S_BLASTER1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponSigil
//
//**************************************************************************
//**************************************************************************

class WeaponSigil:Weapon
{

void A_FireSigil1(void)
{
}

void A_FireSigil2(void)
{
}

void A_FireSigil3(void)
{
}

void A_SigilFlash(void)
{
}

__states__
{
	S_SIGIL('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGIL) { A_WeaponReady(); }
	S_SIGIL01('SIGH', 1 | FF_FULLBRIGHT, -1.0, S_NULL) { }
	S_SIGIL02('SIGH', 2 | FF_FULLBRIGHT, -1.0, S_NULL) { }
	S_SIGIL03('SIGH', 3 | FF_FULLBRIGHT, -1.0, S_NULL) { }
	S_SIGIL04('SIGH', 4 | FF_FULLBRIGHT, -1.0, S_NULL) { }
	S_SIGILDOWN('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGILDOWN) { A_Lower(); }
	S_SIGILUP('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGILUP) { A_Raise(); }
	S_SIGIL1('SIGH', 0 | FF_FULLBRIGHT, 18.0 / 35.0, S_SIGIL2) { A_FireSigil1(); }
	S_SIGIL2('SIGH', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_SIGIL3) { A_FireSigil2(); }
	S_SIGIL3('SIGH', 0, 10.0 / 35.0, S_SIGIL4) { A_FireSigil3(); }
	S_SIGIL4('SIGH', 0, 5.0 / 35.0, S_SIGIL) { A_7(); }
	S_SIGILFLASH1('SIGF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGILFLASH2) { A_Light2(); }
	S_SIGILFLASH2('SIGF', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGILFLASH3) { A_SigilFlash(); }
	S_SIGILFLASH3('SIGF', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
}

defaultproperties
{
	Ammo = am_noammo;
	UpState = S_SIGILUP;
	DownState = S_SIGILDOWN;
	ReadyState = S_SIGIL;
	AttackState = S_SIGIL1;
	HoldAttackState = S_SIGILFLASH1;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.22  2002/06/14 15:48:49  dj_jl
//  Beautification.
//
//  Revision 1.21  2002/05/18 17:00:05  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.20  2002/05/03 17:17:32  dj_jl
//  Started work on weapons and items.
//
//  Revision 1.19  2002/04/27 17:04:55  dj_jl
//  Merged all creatures.
//
//  Revision 1.18  2002/04/22 17:22:33  dj_jl
//  Retail Strife data.
//
//  Revision 1.17  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.16  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.15  2002/03/02 17:35:56  dj_jl
//  Weapon classes
//
//  Revision 1.14  2002/02/22 18:00:26  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.13  2002/02/14 19:21:00  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.12  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/11 18:19:43  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:43  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:11  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
