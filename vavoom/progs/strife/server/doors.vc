//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Door animation code (opening/closing)
//**    
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	doorRaise,
	DREV_CLOSEWAITOPEN,
	doorClose,
	doorOpen,
	raiseIn5Mins
};

// TYPES -------------------------------------------------------------------

class TDoor:SectorThinker
{
	int type;
	float topheight;
	float speed;
	int direction;		// 1 = up, 0 = waiting, -1 = down
	float topwait;		// time to wait at the top
	float toptime;		// (keep in case a door going down is reset)
						// when it reaches 0, start going down

	void Think(void);
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	TDoor::Think
//
//==========================================================================

void TDoor::Think(void)
{
	int res;

	switch (direction)
	{
	case 0:
		// WAITING
		toptime -= frametime;
		if (toptime <= 0.0)
		{
			toptime = 0.0;
			switch (type)
			{
			case doorRaise:
				direction = -1;	// time to go back down
				if (speed >= 256.0)
				{
					SectorStartSoundName(sector, 'BlazeDoorClose',
						CHAN_VOICE);
				}
				else
				{
					SectorStartSoundName(sector, 'DoorClose', CHAN_VOICE);
				}
				break;

			case DREV_CLOSEWAITOPEN:
				direction = 1;
				SectorStartSoundName(sector, 'DoorOpen', CHAN_VOICE);
				break;
			default:
				break;
			}
		}
		break;

	case 2:
		//  INITIAL WAIT
		toptime -= frametime;
		if (toptime <= 0.0)
		{
			toptime = 0.0;
			switch (type)
			{
			case raiseIn5Mins:
				direction = 1;
				type = doorRaise;
				SectorStartSoundName(sector, 'DoorOpen', CHAN_VOICE);
				break;

			default:
				break;
			}
		}
		break;

	case -1:
		// DOWN
		res = T_MovePlane(sector, speed * frametime,
			sector->floorheight, false, 1, direction);
		if (res == RES_PASTDEST)
		{
			switch (type)
			{
			case doorRaise:
			case doorClose:
				sector->specialdata = NULL;
				if (speed >= 256.0)
				{
					SectorStartSoundName(sector, 'BlazeDoorClose',
						CHAN_VOICE);
				}
				RemoveSpecialThinker(this);	// unlink and free
				break;

			case DREV_CLOSEWAITOPEN:
				direction = 0;
				toptime = topwait;
				break;
			default:
				break;
			}
		}
		else if (res == RES_CRUSHED)
		{
			switch (type)
			{
			case doorClose:	// DO NOT GO BACK UP!
				break;

			default:
				direction = 1;
				SectorStartSoundName(sector, 'DoorOpen', CHAN_VOICE);
				break;
			}
		}
		break;

	case 1:
		// UP
		res = T_MovePlane(sector, speed * frametime, topheight,
			false, 1, direction);

		if (res == RES_PASTDEST)
		{
			switch (type)
			{
			case doorRaise:
				direction = 0;	// wait at top
				toptime = topwait;
				break;

			case DREV_CLOSEWAITOPEN:
			case doorOpen:
				sector->specialdata = NULL;
				RemoveSpecialThinker(this);	// unlink and free
				break;

			default:
				break;
			}
		}
		break;
	}
}

//==========================================================================
//
//  EV_DoDoor
//
//==========================================================================

int EV_DoDoor(line_t * line, int *args, int type)
{
	int secnum;
	int rtn;
	sector_t *sec;
	TDoor *door;
	float speed;

	speed = itof(args[1]) * 4.0;

	secnum = -1;
	rtn = 0;

	//HACK delay 0 means open
	if (type == doorRaise && !args[2])
	{
		type = doorOpen;
	}

	while ((secnum = FindSectorFromTag(args[0], secnum)) >= 0)
	{
		sec = &level->sectors[secnum];
		if (sec->specialdata)
			continue;

		// new door thinker
		rtn = 1;
		door = NewSpecialThinker(TDoor);
		sec->specialdata = door;

		door->sector = sec;
		door->type = type;
		door->topwait = itof(args[2]) / 35.0;
		door->speed = speed;

		switch (type)
		{
		case doorClose:
			door->topheight = FindLowestCeilingSurrounding(sec);
			door->topheight -= 4.0;
			door->direction = -1;
			if (speed >= 256.0)
			{
				SectorStartSoundName(door->sector, 'BlazeDoorClose',
					CHAN_VOICE);
			}
			else
			{
				SectorStartSoundName(door->sector, 'DoorClose', CHAN_VOICE);
			}
			break;

		case DREV_CLOSEWAITOPEN:
			door->topheight = sec->ceilingheight;
			door->topwait *= 4.0;
			door->direction = -1;
			if (speed >= 256.0)
			{
				SectorStartSoundName(door->sector, 'BlazeDoorClose',
					CHAN_VOICE);
			}
			else
			{
				SectorStartSoundName(door->sector, 'DoorClose', CHAN_VOICE);
			}
			break;

		case doorRaise:
		case doorOpen:
			door->direction = 1;
			door->topheight = FindLowestCeilingSurrounding(sec);
			door->topheight -= 4.0;
			if (door->topheight != sec->ceilingheight)
			{
				if (speed >= 256.0)
				{
					SectorStartSoundName(door->sector, 'BlazeDoorOpen',
						CHAN_VOICE);
				}
				else
				{
					SectorStartSoundName(door->sector, 'DoorOpen',
						CHAN_VOICE);
				}
			}
			break;
		}

	}
	return rtn;
}

//==========================================================================
//
//  EV_VerticalDoor : open a door manually, no tag value
//
//  int return value?
//
//==========================================================================

int EV_VerticalDoor(line_t * line, mobj_t * thing)
{
	sector_t *sec;
	TDoor *door;
	int side;
	float speed;
	int type;

	side = 0;	// only front sides can be used

	switch (line->special)
	{
	case 11:
		type = doorOpen;
		break;

	case 12:
		type = doorRaise;
		break;

	case 13:
		type = line->arg3 ? doorRaise : doorOpen;
		break;
	}
	speed = itof(line->arg2) * 4.0;

	// if the sector has an active thinker, use it
	sec = level->sides[line->sidenum[side ^ 1]].sector;

	if (sec->specialdata)
	{
		door = (TDoor *)sec->specialdata;
		if (type == doorRaise)
		{
			// ONLY FOR "RAISE" DOORS, NOT "OPEN"s
			if (door->direction == -1)
			{
				door->direction = 1;	// go back up
			}
			else
			{
				if (!thing->player)
					return 0;	// JDC: bad guys never close doors
				door->direction = -1;	// start going down immediately
			}
			return 1;
		}
	}

	// for proper sound
	if (speed >= 256.0)
	{
		// BLAZING DOOR
		SectorStartSoundName(sec, 'BlazeDoorOpen', CHAN_VOICE);
	}
	else
	{
		// NORMAL DOOR SOUND
		SectorStartSoundName(sec, 'DoorOpen', CHAN_VOICE);
	}

	// new door thinker
	door = NewSpecialThinker(TDoor);
	sec->specialdata = door;
	door->sector = sec;
	door->direction = 1;
	door->speed = speed;
	door->topwait = itof(line->arg3) / 35.0;
	door->type = type;

	// find the top and bottom of the movement range
	door->topheight = FindLowestCeilingSurrounding(sec);
	door->topheight -= 4.0;
	return 1;
}

//==========================================================================
//
//  P_SpawnDoorCloseIn30
//
//  Spawn a door that closes after 30 seconds
//
//==========================================================================

void P_SpawnDoorCloseIn30(sector_t * sec)
{
	TDoor *door;

	door = NewSpecialThinker(TDoor);

	sec->specialdata = door;
	sec->special = 0;

	door->sector = sec;
	door->direction = 0;
	door->type = doorRaise;
	door->speed = 70.0;
	door->toptime = 30.0;
}

//==========================================================================
//
//  P_SpawnDoorRaiseIn5Mins
//
//  Spawn a door that opens after 5 minutes
//
//==========================================================================

void P_SpawnDoorRaiseIn5Mins(sector_t * sec)
{
	TDoor *door;

	door = NewSpecialThinker(TDoor);

	sec->specialdata = door;
	sec->special = 0;

	door->sector = sec;
	door->direction = 2;
	door->type = raiseIn5Mins;
	door->speed = 70.0;
	door->topheight = FindLowestCeilingSurrounding(sec);
	door->topheight -= 4.0;
	door->topwait = 150.0 / 35.0;
	door->toptime = 5.0 * 60.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.9  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/18 18:29:22  dj_jl
//  Added Hexen action specials
//
//  Revision 1.5  2001/09/24 17:13:25  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
