//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Door animation code (opening/closing)
//**    
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	DOOREV_Close,
	DOOREV_Open,
	DOOREV_Raise,
	DOOREV_RaiseLocked,
	DOOREV_CloseWaitOpen,
	DOOREV_RaiseIn5Mins
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  EV_DoDoor
//
//  Move a door up/down
//
//==========================================================================

int EV_DoDoor(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5, int Type,
	line_t* Line, Actor Thing)
{
	int				SecNum;
	int				RetCode;
	sector_t*		Sec;
	VerticalDoor	Door;

	RetCode = 0;
	if (!Arg1)
	{
		if (!Line)
			return false;
	
		//	Make sure it's a two-sided line.
		if (Line->sidenum[1] < 0)
			return false;
	
		// if the sector has an active thinker, use it
		Sec = GLevel.Sides[Line->sidenum[1]].sector;
	
		if (Sec->CeilingData)
		{
			Door = VerticalDoor(Sec->CeilingData);
			if (Door)
			{
				return Door.ReUse(Type, Line, Thing);
			}
			return false;
		}
	
		// new door thinker
		Door = NewSpecialThinker(VerticalDoor);
		Door.Init(Sec, Arg1, Arg2, Arg3, Arg4, Arg5, Type);
		RetCode = true;
	}
	else
	{
		for (SecNum = FindSectorFromTag(Arg1, -1); SecNum >= 0;
			SecNum = FindSectorFromTag(Arg1, SecNum))
		{
			Sec = &GLevel.Sectors[SecNum];
			if (Sec->CeilingData)
			{
				continue;
			}
			// Add new door thinker
			RetCode = true;
			Door = NewSpecialThinker(VerticalDoor);
			Door.Init(Sec, Arg1, Arg2, Arg3, Arg4, Arg5, Type);
		}
	}
	return RetCode;
}

//==========================================================================
//
//  EV_GenericDoor
//
//	Boom's generic doors.
//
//==========================================================================

int EV_GenericDoor(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5,
	line_t* Line, Actor Thing)
{
	int			Tag;
	int			LightTag;

	//	Check for locked door.
	if (Arg5 && !CheckLock(Thing, Arg5))
	{
		return false;
	}

	//	Check for Boom's local door light special.
	if (Arg3 & 128)
	{
		Tag = 0;
		LightTag = Arg1;
	}
	else
	{
		Tag = Arg1;
		LightTag = 0;
	}

	switch (Arg3 & 127)
	{
	case 0:
		return EV_DoDoor(Tag, Arg2, Arg4, LightTag, 0, DOOREV_Raise,
			Line, Thing);
	case 1:
		return EV_DoDoor(Tag, Arg2, LightTag, 0, 0, DOOREV_Open,
			Line, Thing);
	case 2:
		return EV_DoDoor(Tag, Arg2, Arg4, LightTag, 0, DOOREV_CloseWaitOpen,
			Line, Thing);
	case 3:
		return EV_DoDoor(Tag, Arg2, LightTag, 0, 0, DOOREV_Close,
			Line, Thing);
	}
	return false;
}

//==========================================================================
//
//  EV_TextureChangeDoor
//
//==========================================================================

int EV_TextureChangeDoor(line_t* line, int* args)
{
	int secnum;
	int rtn;
	sector_t* sec;
	TextureChangeDoor Door;

	secnum = -1;
	rtn = 0;

	while ((secnum = FindSectorFromTag(args[0], secnum)) >= 0)
	{
		sec = &GLevel.Sectors[secnum];
		if (sec->CeilingData)
			continue;

		// new door thinker
		rtn = 1;
		Door = NewSpecialThinker(TextureChangeDoor);
		sec->CeilingData = Door;

		Door.Sector = sec;
		Door.topwait = itof(args[2]) / 35.0;
		Door.speed = 99999.0;//itof(args[1]) * 4.0
		Door.line = line;

		Door.direction = 1;
		Door.topheight = FindLowestCeilingSurrounding(sec, NULL);
		Door.StartAnim();
	}
	return rtn;
}

//==========================================================================
//
//  EV_ManualTextureChangeDoor : open a door manually, no tag value
//
//  int return value?
//
//==========================================================================

int EV_ManualTextureChangeDoor(line_t * line, int* args, Actor thing)
{
	sector_t *sec;
	TextureChangeDoor Door;
	int side;
	float speed;
	int type;

	side = 0;	// only front sides can be used

	speed = itof(args[1]) * 4.0;

	// if the sector has an active thinker, use it
	sec = GLevel.Sides[line->sidenum[side ^ 1]].sector;

	if (sec->CeilingData)
	{
		return 1;
	}

	// new door thinker
	Door = NewSpecialThinker(TextureChangeDoor);
	sec->CeilingData = Door;
	Door.Sector = sec;
	Door.line = line;
	Door.direction = 1;
	Door.speed = 99999.0;//speed;
	Door.topwait = itof(args[2]) / 35.0;

	// find the top and bottom of the movement range
	Door.topheight = FindLowestCeilingSurrounding(sec, NULL);
	Door.StartAnim();
	return 1;
}

//==========================================================================
//
//  P_SpawnDoorCloseIn30
//
//  Spawn a door that closes after 30 seconds
//
//==========================================================================

void P_SpawnDoorCloseIn30(sector_t * sec)
{
	VerticalDoor	Door;

	Door = NewSpecialThinker(VerticalDoor);
	Door.InitDoorCloseIn30(sec);
	sec->special = 0;
}

//==========================================================================
//
//  P_SpawnDoorRaiseIn5Mins
//
//  Spawn a door that opens after 5 minutes
//
//==========================================================================

void P_SpawnDoorRaiseIn5Mins(sector_t * sec)
{
	VerticalDoor Door;

	sec->special = 0;
	Door = NewSpecialThinker(VerticalDoor);
	Door.Init(sec, 0, 16, 150, 0, 0, DOOREV_RaiseIn5Mins);
}

//==========================================================================
//
//  EV_LightTurnOnPartway
//
//==========================================================================

void EV_LightTurnOnPartway(int LightTag, float Delta)
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.19  2005/03/01 14:39:33  dj_jl
//  Big update of line specials.
//
//  Revision 1.18  2005/01/25 17:45:18  dj_jl
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.17  2004/12/22 07:56:48  dj_jl
//  Fully working Strife support.
//
//  Revision 1.16  2004/10/13 06:41:14  dj_jl
//  Implemented animated doors.
//
//  Revision 1.15  2002/11/02 08:22:37  dj_jl
//  New style classes.
//
//  Revision 1.14  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.13  2002/04/11 16:48:10  dj_jl
//  New base classes for sector thinkers, Tick function.
//
//  Revision 1.12  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.11  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.10  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.9  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/18 18:29:22  dj_jl
//  Added Hexen action specials
//
//  Revision 1.5  2001/09/24 17:13:25  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
