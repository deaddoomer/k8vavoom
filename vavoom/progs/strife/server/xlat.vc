//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define NUM_SPECIALS	236

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

struct spec_trans_t
{
	int special;
	int arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;
	int spac;
	int repeat;
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

spec_trans_t spec_trans_tab[] = {
	{0, 0, 0, 0, 0, 0, 0, 0},	//  0
	{LNSPEC_DoorRaise, 0, 16, 150, 0, 0, SPAC_USE, true},	//  1
	{LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_CROSS, false},	//  2
	{LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_CROSS, false},	//  3
	{LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_CROSS, false},	//  4
	{LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  5
	{LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_CROSS, false},	//  6
	{217, -1, 2, 8, 0, 0, SPAC_USE, false},	//  7
	{217, -1, 2, 8, 0, 0, SPAC_CROSS, false},	//  8
	{LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_USE, false},	//  9

	{LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_CROSS, false},	//  10
	{LNSPEC_ExitNormal, -1, 0, 0, 0, 0, SPAC_USE, false},	//  11 --
	{LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  12
	{LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_CROSS, false},	//  13
	{LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_USE, false},	//  14
	{LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_USE, false},	//  15
	{LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_CROSS, false},	//  16
	{LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_CROSS, false},	//  17
	{LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_USE, false},	//  18
	{LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_CROSS, false},	//  19

	{LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_USE, false},	//  20
	{LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_USE, false},	//  21
	{LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_CROSS, false},	//  22
	{LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, false},	//  23
	{LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_IMPACT, false},	//  24
	{LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_CROSS, false},	//  25
	{LNSPEC_DoorLockedRaise, 0, 16, 150, 4, 0, SPAC_USE, true},	//  26
	{LNSPEC_DoorLockedRaise, 0, 16, 150, 3, 0, SPAC_USE, true},	//  27
	{LNSPEC_DoorLockedRaise, 0, 16, 150, 11, 0, SPAC_USE, true},	//  28
	{LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_USE, false},	//  29

	{LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  30
	{LNSPEC_DoorOpen, 0, 16, 0, 0, 0, SPAC_USE, false},	//  31
	{LNSPEC_DoorLockedRaise, 0, 16, 0, 4, 0, SPAC_USE, false},	//  32
	{LNSPEC_DoorLockedRaise, 0, 16, 0, 11, 0, SPAC_USE, false},	//  33
	{LNSPEC_DoorLockedRaise, 0, 16, 0, 3, 0, SPAC_USE, false},	//  34
	{LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_CROSS, false},	//  35
	{LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_CROSS, false},	//  36
	{LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  37
	{LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  38
	{LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_CROSS, false},	//  39

	{LNSPEC_ACSExecuteWithResult, 0, 40, -1, 0, 0, SPAC_USE, false},	//  40
	{LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_USE, false},	//  41
	{LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_USE, true},	//  42
	{LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_USE, true},	//  43
	{LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  44
	{LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_USE, true},	//  45
	{LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_IMPACT, true},	//  46
	{LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_IMPACT, false},	//  47
	{LNSPEC_ScrollTextureLeft, 64, 0, 0, 0, 0, SPAC_CROSS, false},	//  48
	{LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_USE, false},	//  49

	{LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_USE, false},	//  50
	{LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_USE, false},	//  51 S1 EndLevelSecret
	{LNSPEC_ACSExecuteWithResult, 0, 52, -1, 0, 0, SPAC_CROSS, false},	//  52
	{LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_CROSS, false},	//  53
	{LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  54
	{LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_USE, false},	//  55
	{LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_CROSS, false},	//  56
	{LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  57
	{LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_CROSS, false},	//  58
	{LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_CROSS, false},	//  59

	{LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, true},	//  60
	{LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_USE, true},	//  61
	{LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_USE, true},	//  62
	{LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_USE, true},	//  63
	{LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_USE, true},	//  64
	{LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_USE, true},	//  65
	{LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_USE, true},	//  66
	{LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_USE, true},	//  67
	{LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_USE, true},	//  68
	{LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_USE, true},	//  69

	{LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_USE, true},	//  70
	{LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_USE, false},	//  71
	{LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  72
	{LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_CROSS, true},	//  73
	{LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_CROSS, true},	//  74
	{LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_CROSS, true},	//  75
	{LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_CROSS, true},	//  76
	{LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_CROSS, true},	//  77
	{0, 0, 0, 0, 0, 0, 0, 0},	//  78
	{LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_CROSS, true},	//  79

	{LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, true},	//  80
	{LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_CROSS, true},	//  81
	{LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  82
	{LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_CROSS, true},	//  83
	{LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  84
	{0, 0, 0, 0, 0, 0, 0, 0},	//  85
	{LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_CROSS, true},	//  86
	{LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_CROSS, true},	//  87
	{LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_CROSS, true},	//  88
	{LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_CROSS, true},	//  89

	{LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_CROSS, true},	//  90
	{LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  91
	{LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_CROSS, true},	//  92
	{LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_CROSS, true},	//  93
	{LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_CROSS, true},	//  94
	{LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_CROSS, true},	//  95
	{LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  96
	{LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_CROSS, true},	//  97
	{LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_CROSS, true},	//  98
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 4, 0, SPAC_USE, true},	//  99

	{217, -1, 32, 16, 0, 0, SPAC_CROSS, false},	//  100
	{LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_USE, false},	//  101
	{LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_USE, false},	//  102
	{LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_USE, false},	//  103
	{LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  104
	{LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_CROSS, true},	//  105
	{LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_CROSS, true},	//  106
	{LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_CROSS, true},	//  107
	{LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_CROSS, false},	//  108
	{LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_CROSS, false},	//  109

	{LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_CROSS, false},	//  110
	{LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_USE, false},	//  111
	{LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_USE, false},	//  112
	{LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_USE, false},	//  113
	{LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_USE, true},	//  114
	{LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_USE, true},	//  115
	{LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_USE, true},	//  116
	{LNSPEC_DoorRaise, 0, 64, 150, 0, 0, SPAC_USE, true},	//  117
	{LNSPEC_DoorOpen, 0, 64, 0, 0, 0, SPAC_USE, false},	//  118
	{LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  119

	{LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_CROSS, true},	//  120
	{LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_CROSS, false},	//  121
	{LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_USE, false},	//  122
	{LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_USE, true},	//  123
	{LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  124 W1 EndLevelSecret UNUSED
	{LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCROSS, false},	//  125
	{LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCROSS, true},	//  126
	{217, -1, 32, 16, 0, 0, SPAC_USE, false},	//  127
	{LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  128
	{LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, true},	//  129

	{LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, false},	//  130
	{LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_USE, false},	//  131
	{LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_USE, true},	//  132
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 4, 0, SPAC_USE, false},	//  133
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 11, 0, SPAC_USE, true},	//  134
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 11, 0, SPAC_USE, false},	//  135
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 3, 0, SPAC_USE, true},	//  136
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 3, 0, SPAC_USE, false},	//  137
	{LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_USE, true},	//  138
	{LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_USE, true},	//  139

	{LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_USE, false},	//  140
	{197, -1, 8, 8, 10, 0, SPAC_CROSS, false},	//  141
	{LNSPEC_ScrollTextureUp, 64, 0, 0, 0, 0, SPAC_CROSS, false},	//  142
	{LNSPEC_ScrollTextureDown, 64, 0, 0, 0, 0, SPAC_CROSS, false},	//  143
	{14, -1, 4, 105, 0, 0, SPAC_USE, true},	//  144
	{LNSPEC_ACSExecuteWithResult, 0, 145, -1, 0, 0, SPAC_CROSS, true},	//  145
	{217, -1, 4, 128 + 16, 0, 0, SPAC_USE, false},	//  146
	{34, -1, 0, 0, 0, 0, SPAC_USE, false},	//  147
	{33, -1, 0, 0, 0, 0, SPAC_USE, true},	//  148
	{0, 0, 0, 0, 0, 0, 0, 0},	//  149 UNUSED

	{173, 0, 0, 0, 0, 0, SPAC_CROSS, true},	//  150
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 9, 0, SPAC_USE, true},	//  151
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 17, 0, SPAC_USE, true},	//  152
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 12, 0, SPAC_USE, true},	//  153
	{LNSPEC_ACSLockedExecute, 0, 0, 154, -1, 1 + KEY_GoldKey, SPAC_USE, true},	//  154
	{LNSPEC_PlatUpWaitDownStay, -1, 32, 105, 0, 0, SPAC_USE, true},	//  155
	{LNSPEC_DoorLockedRaise, 0, 16, 0, 17, 0, SPAC_USE, false},	//  156
	{LNSPEC_DoorLockedRaise, 0, 16, 0, 12, 0, SPAC_USE, false},	//  157
	{LNSPEC_DoorLockedRaise, 0, 16, 0, 9, 0, SPAC_USE, false},	//  158
	{LNSPEC_DoorLockedRaise, 0, 16, 150, 9, 0, SPAC_USE, true},	//  159

	{LNSPEC_DoorLockedRaise, 0, 16, 150, 12, 0, SPAC_USE, true},	//  160
	{0, 0, 0, 0, 0, 0, 0, 0},	//  161 (Teaser governor's room)
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 17, 0, SPAC_USE, false},	//  162
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 12, 0, SPAC_USE, false},	//  163
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 9, 0, SPAC_USE, false},	//  164
	{LNSPEC_DoorLockedRaise, 0, 0, 0, 102, 0, SPAC_USE, true},	//  165
	{LNSPEC_DoorLockedRaise, 0, 16, 150, 6, 0, SPAC_USE, true},	//  166
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 6, 0, SPAC_USE, false},	//  167
	{LNSPEC_DoorLockedRaise, -1, 64, 0, 6, 0, SPAC_USE, true},	//  168
	{LNSPEC_DoorLockedRaise, 0, 16, 0, 1, 0, SPAC_USE, false},	//  169

	{LNSPEC_DoorLockedRaise, 0, 16, 150, 2, 0, SPAC_USE, true},	//  170
	{LNSPEC_DoorLockedRaise, -1, 16, 0, 5, 0, SPAC_USE, false},	//  171
	{LNSPEC_DoorLockedRaise, -1, 16, 0, 7, 0, SPAC_USE, true},	//  172
	{LNSPEC_DoorLockedRaise, -1, 16, 0, 8, 0, SPAC_USE, true},	//  173
	{LNSPEC_ACSExecuteWithResult, 0, 174, -1, 0, 0, SPAC_CROSS, false},	//  174
	{LNSPEC_ACSExecuteWithResult, 0, 175, -1, 0, 0, SPAC_CROSS, true},	//  175
	{LNSPEC_DoorLockedRaise, -1, 16, 0, 10, 0, SPAC_USE, true},	//  176
	{LNSPEC_ACSLockedExecute, 0, 0, 177, -1, 1 + KEY_Power3Key, SPAC_USE, true},	//  177
	{217, -1, 4, 128 + 16, 0, 0, SPAC_CROSS, false},	//  178
	{LNSPEC_CeilingLowerAndCrush, -1, 8, 1, 0, 0, SPAC_CROSS, false},	//  179

	{LNSPEC_ACSExecuteWithResult, 0, 180, -1, 0, 0, SPAC_IMPACT, false},	//  180
	{LNSPEC_ACSExecuteWithResult, 0, 181, -1, 0, 0, SPAC_USE, false},	//  181
	{49, -1, 255, 0, 0, 0, SPAC_IMPACT, false},	//  182
	{LNSPEC_ACSExecuteWithResult, 0, 183, -1, 0, 0, SPAC_CROSS, false},	//  183
	{LNSPEC_ACSExecuteWithResult, 0, 184, -1, 0, 0, SPAC_CROSS, true},	//  184 SR?
	{LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_CROSS, true},	//  185
	{LNSPEC_ACSExecuteWithResult, 0, 186, -1, 0, 0, SPAC_CROSS, true},	//  186
	{LNSPEC_ACSExecuteWithResult, 0, 187, -1, 0, 0, SPAC_CROSS, true},	//  187
	{LNSPEC_ACSExecuteWithResult, 0, 188, -1, 0, 0, SPAC_CROSS, true},	//  188
	{LNSPEC_ACSLockedExecute, 0, 0, 189, -1, 1 + KEY_OracleKey, SPAC_USE, false},	//  189

	{LNSPEC_DoorLockedRaise, 0, 16, 150, 1 + KEY_MilitaryID, 0, SPAC_USE, true},	//  190
	{LNSPEC_DoorLockedRaise, -1, 16, 0, 1 + KEY_MilitaryID, 0, SPAC_USE, true},	//  191
	{LNSPEC_DoorLockedRaise, -1, 16, 0, 1 + KEY_WarehouseKey, 0, SPAC_USE, false},	//  192
	{LNSPEC_ACSExecuteWithResult, 0, 193, -1, 0, 0, SPAC_CROSS, true},	//  193
	{LNSPEC_ACSExecuteWithResult, 0, 194, -1, 0, 0, SPAC_USE, false},	//  194
	{39, -1, 0, 0, 0, 0, SPAC_MCROSS, true},	//  195
	{LNSPEC_ACSExecuteWithResult, 0, 196, -1, 0, 0, SPAC_CROSS, true},	//  196 TRIGGER? UNUSED
	{LNSPEC_ACSExecuteWithResult, 0, 197, -1, 0, 0, SPAC_CROSS, true},	//  197
	{LNSPEC_ACSExecuteWithResult, 0, 198, -1, 0, 0, SPAC_CROSS, true},	//  198
	{LNSPEC_ACSExecuteWithResult, 0, 199, -1, 0, 0, SPAC_USE, false},	//  199

	{LNSPEC_ACSExecuteWithResult, 0, 200, -1, 0, 0, SPAC_CROSS, true},	//  200
	{0, 0, 0, 0, 0, 0, 0, 0},	//  201 SR PlaySound UNUSED
	{174, -1, 0, 1, 0, 0, SPAC_CROSS, false},	//  202
	{LNSPEC_ACSExecuteWithResult, 0, 203, -1, 0, 0, SPAC_USE, true},	//  203
	{LNSPEC_ACSExecuteWithResult, 0, 204, -1, 0, 0, SPAC_USE, false},	//  204
	{LNSPEC_DoorLockedRaise, 0, 0, 0, 103, 0, SPAC_USE, true},	//  205
	{LNSPEC_ACSExecuteWithResult, 0, 206, -1, 0, 0, SPAC_CROSS, true},	//  206
	{14, -1, 4, 105, 0, 0, SPAC_USE, true},	//  207
	{LNSPEC_ACSExecuteWithResult, 0, 208, -1, 0, 0, SPAC_CROSS, true},	//  208
	{LNSPEC_ACSExecuteWithResult, 0, 209, -1, 0, 0, SPAC_USE, false},	//  209

	{174, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  210
	{0, 0, 0, 0, 0, 0, 0, 0},	//  211 S1 PlaySound UNUSED
	{LNSPEC_ACSExecuteWithResult, 0, 212, -1, 0, 0, SPAC_CROSS, true},	//  212
	{LNSPEC_ACSExecuteWithResult, 0, 213, -1, 0, 0, SPAC_USE, true},	//  213
	{LNSPEC_ACSExecuteWithResult, 0, 214, -1, 0, 0, SPAC_USE, true},	//  214
	{LNSPEC_ACSExecuteWithResult, 0, 215, -1, 0, 0, SPAC_CROSS, true},	//  215
	{LNSPEC_ACSExecuteWithResult, 0, 216, -1, 0, 0, SPAC_CROSS, true},	//  216
	{LNSPEC_DoorLockedRaise, 0, 16, 150, 23, 0, SPAC_USE, true},	//  217
	{0, 0, 0, 0, 0, 0, 0, 0},	//  218 W1 Clear NonBlock Quest UNUSED
	{LNSPEC_ACSLockedExecute, 0, 0, 219, -1, 1 + KEY_RedCrystalKey, SPAC_USE, false},	//  219

	{LNSPEC_ACSLockedExecute, 0, 0, 220, -1, 1 + KEY_BlueCrystalKey, SPAC_USE, false},	//  220
	{LNSPEC_DoorLockedRaise, 0, 16, 150, 24, 0, SPAC_USE, true},	//  221
	{LNSPEC_DoorLockedRaise, -1, 16, 0, 25, 0, SPAC_USE, false},	//  222 ??? Realy a key?
	{LNSPEC_DoorLockedRaise, -1, 16, 0, 26, 0, SPAC_USE, true},	//  223
	{LNSPEC_DoorLockedRaise, 0, 16, 0, 20, 0, SPAC_USE, false},	//  224
	{LNSPEC_DoorLockedRaise, 0, 16, 0, 21, 0, SPAC_USE, false},	//  225
	{LNSPEC_ACSExecuteWithResult, 0, 226, -1, 0, 0, SPAC_USE, false},	//  226
	{LNSPEC_ACSExecuteWithResult, 0, 227, -1, 0, 0, SPAC_CROSS, true},	//  227
	{LNSPEC_ACSExecuteWithResult, 0, 228, -1, 0, 0, SPAC_CROSS, true},	//  228
	{LNSPEC_ACSExecuteWithResult, 0, 229, -1, 0, 0, SPAC_USE, true},	//  229

	{LNSPEC_ACSExecuteWithResult, 0, 230, -1, 0, 0, SPAC_CROSS, true},	//  230
	{LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCROSS, true},	//  231 ??? (InSou)
	{LNSPEC_ACSExecuteWithResult, 0, 232, -1, 0, 0, SPAC_USE, true},	//  232
	{LNSPEC_ACSExecuteWithResult, 0, 233, -1, 0, 0, SPAC_USE, false},	//  233
	{LNSPEC_ACSExecuteWithResult, 0, 234, -1, 0, 0, SPAC_USE, true},	//  234
	{LNSPEC_ACSExecuteWithResult, 0, 235, -1, 0, 0, SPAC_USE, false},	//  235
	{0, -1, 0, 0, 0, 0, 0, 0},	//  236
	{0, -1, 0, 0, 0, 0, 0, 0},	//  237
	{0, -1, 0, 0, 0, 0, 0, 0},	//  238
	{0, -1, 0, 0, 0, 0, 0, 0},	//  239
/*
	{$0, -1, 0, 0, 0, 0, 0, 0},	//  $0
	{$1, -1, 0, 0, 0, 0, 0, 0},	//  $1
	{$2, -1, 0, 0, 0, 0, 0, 0},	//  $2
	{$3, -1, 0, 0, 0, 0, 0, 0},	//  $3
	{$4, -1, 0, 0, 0, 0, 0, 0},	//  $4
	{$5, -1, 0, 0, 0, 0, 0, 0},	//  $5
	{$6, -1, 0, 0, 0, 0, 0, 0},	//  $6
	{$7, -1, 0, 0, 0, 0, 0, 0},	//  $7
	{$8, -1, 0, 0, 0, 0, 0, 0},	//  $8
	{$9, -1, 0, 0, 0, 0, 0, 0},	//  $9
*/
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  TranslateLine
//
//==========================================================================

void TranslateLine(line_t* line)
{
	int			OldSpec;
	int			OldTag;
	int			OldFlags;

	OldSpec = line->special;
	OldTag = line->arg1;
	OldFlags = line->flags;

	line->flags &= 0x01ff;
	if (OldFlags & ML_RAILING_STRIFE)
	{
		line->flags |= ML_RAILING;
	}
	if (OldFlags & ML_BLOCK_FLOATERS_STRIFE)
	{
		line->flags |= ML_BLOCK_FLOATERS;
	}

	if (!line->special)
	{
		if (OldFlags & ML_TRANSLUCENT_STRIFE)
		{
			line->special = LNSPEC_LineTranslucent;
			line->arg2 = 170;
		}
		return;
	}

	if (line->special >= NUM_SPECIALS)
	{
		line->special = 0;
		line->arg1 = 0;
		return;
	}

	//	Special.
	line->special = spec_trans_tab[OldSpec].special;
	//	Arg 1.
	if (spec_trans_tab[OldSpec].arg1 == -1)
	{
		line->arg1 = OldTag;
	}
	else
	{
		line->arg1 = spec_trans_tab[OldSpec].arg1;
	}
	//	Arg 2.
	if (spec_trans_tab[OldSpec].arg2 == -1)
	{
		line->arg2 = OldTag;
	}
	else
	{
		line->arg2 = spec_trans_tab[OldSpec].arg2;
	}
	//	Arg 3.
	if (spec_trans_tab[OldSpec].arg3 == -1)
	{
		line->arg3 = OldTag;
	}
	else
	{
		line->arg3 = spec_trans_tab[OldSpec].arg3;
	}
	//	Arg 4.
	if (spec_trans_tab[OldSpec].arg4 == -1)
	{
		line->arg4 = OldTag;
	}
	else
	{
		line->arg4 = spec_trans_tab[OldSpec].arg4;
	}
	//	Arg 5.
	if (spec_trans_tab[OldSpec].arg5 == -1)
	{
		line->arg5 = OldTag;
	}
	else
	{
		line->arg5 = spec_trans_tab[OldSpec].arg5;
	}
	//	Activation flags.
	line->flags |= spec_trans_tab[OldSpec].spac << ML_SPAC_SHIFT;
	if (spec_trans_tab[OldSpec].repeat)
	{
		line->flags |= ML_REPEAT_SPECIAL;
	}

	if (OldFlags & ML_TRANSLUCENT_STRIFE)
	{
		if (line->special == 49)
		{
			line->arg2 = 170;
		}
		else
		{
			print("Translucent flag not compatible with line special");
		}
	}
}

//==========================================================================
//
//  TranslateSector
//
//==========================================================================

void TranslateSector(sector_t* sector)
{
	int special;
	int high;

	special = sector->special;
	if (!special)
	{
		return;
	}
	if (special == 9)
	{
		sector->special = SECSPEC_SECRET_MASK;
		return;
	}

	//	This supports phased lighting with specials 21-24 and wind specials
	// 40-51.
	high = (sector->special & 0xfe0) << 3;
	special &= 0x01f;
	if (special == 5 || special == 15 || special == 16 || special == 18)
	{
		sector->special = high | (special + 100);
	}
	else if (special < 21)
	{
		sector->special = high | (special + 64);
	}
	else if (special < 40)
	{
		sector->special = high | (special - 20);
	}
	else
	{
		sector->special = high | special;
	}
}

//==========================================================================
//
//  TranslateThing
//
//==========================================================================

void TranslateThing(mthing_t* mthing)
{
	int flags;

	// translate the spawn flags to Hexen format.
	flags = mthing->options;
	mthing->options = (flags & 0xf) | 0x7e0;
	if (flags & 0x10)
		mthing->options &= ~MTF_GSINGLE;
	if (mthing->type >= 118 && mthing->type <= 127)
	{
		//	Map start spots, i.e. player starts.
		mthing->arg1 = mthing->type - 117;
		mthing->type = 1;
	}
}

//==========================================================================
//
//  TranslateLevel
//
//==========================================================================

void TranslateLevel()
{
	int i;

	for (i = 0; i < GLevel.NumLines; i++)
	{
		TranslateLine(&GLevel.Lines[i]);
	}

	for (i = 0; i < GLevel.NumSectors; i++)
	{
		TranslateSector(&GLevel.Sectors[i]);
	}

	for (i = 0; i < GLevel.NumThings; i++)
	{
		TranslateThing(&GLevel.Things[i]);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.17  2005/03/16 15:04:43  dj_jl
//  More work on line specials.
//
//  Revision 1.16  2005/03/01 14:39:33  dj_jl
//  Big update of line specials.
//
//  Revision 1.15  2005/01/25 17:45:18  dj_jl
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.14  2004/12/27 12:23:15  dj_jl
//  Multiple small changes for version 1.16
//
//  Revision 1.13  2004/12/22 07:56:48  dj_jl
//  Fully working Strife support.
//
//  Revision 1.12  2004/11/22 07:36:29  dj_jl
//  Implemented all sector specials in all games.
//
//  Revision 1.11  2004/10/18 06:36:11  dj_jl
//  Beautification.
//
//  Revision 1.10  2004/10/13 06:41:14  dj_jl
//  Implemented animated doors.
//
//  Revision 1.9  2004/10/12 06:39:08  dj_jl
//  Various improvements.
//
//  Revision 1.8  2004/02/16 07:12:48  dj_jl
//  Many more specials now work
//
//  Revision 1.7  2004/01/20 07:13:28  dj_jl
//  Communicator voices
//
//  Revision 1.6  2003/12/29 08:45:26  dj_jl
//  Some fixes, commnets
//
//  Revision 1.5  2003/11/12 16:51:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.4  2003/09/12 16:47:11  dj_jl
//  Translating most of the line specials
//
//  Revision 1.3  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.2  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.1  2001/09/25 17:12:09  dj_jl
//  Switched to Hexen map format, special thinker classes
//
//  Revision 1.3  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
