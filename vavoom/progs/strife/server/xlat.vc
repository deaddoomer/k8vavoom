//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define NUM_SPECIALS	236

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

struct spec_trans_t
{
	int special;
	int arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;
	int spac;
	int repeat;
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

spec_trans_t spec_trans_tab[] = {
	{0, 0, 0, 0, 0, 0, 0, 0},	//  0
	{12, 0, 16, 150, 0, 0, SPAC_USE, true},	//  1
	{11, -1, 16, 0, 0, 0, SPAC_CROSS, false},	//  2
	{10, -1, 16, 0, 0, 0, SPAC_CROSS, false},	//  3
	{12, -1, 16, 150, 0, 0, SPAC_CROSS, false},	//  4
	{238, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  5
	{196, -1, 16, 16, 10, 0, SPAC_CROSS, false},	//  6
	{217, -1, 2, 8, 0, 0, SPAC_USE, false},	//  7
	{217, -1, 2, 8, 0, 0, SPAC_CROSS, false},	//  8
	{250, -1, 4, 4, 0, 0, SPAC_USE, false},	//  9

	{206, -1, 32, 105, 0, 0, SPAC_CROSS, false},	//  10
	{243, -1, 0, 0, 0, 0, SPAC_USE, false},	//  11
	{234, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  12
	{112, -1, 255, 0, 0, 0, SPAC_CROSS, false},	//  13
	{230, -1, 4, 4, 0, 0, SPAC_USE, false},	//  14
	{230, -1, 4, 3, 0, 0, SPAC_USE, false},	//  15
	{249, -1, 16, 240, 0, 0, SPAC_CROSS, false},	//  16
	{232, -1, 5, 35, 0, 0, SPAC_CROSS, false},	//  17
	{25, -1, 8, 0, 0, 0, SPAC_USE, false},	//  18
	{242, -1, 8, 128, 0, 0, SPAC_CROSS, false},	//  19

	{228, -1, 4, 0, 0, 0, SPAC_USE, false},	//  20
	{206, -1, 32, 105, 0, 0, SPAC_USE, false},	//  21
	{228, -1, 4, 0, 0, 0, SPAC_CROSS, false},	//  22
	{21, -1, 8, 0, 0, 0, SPAC_USE, false},	//  23
	{238, -1, 8, 0, 0, 0, SPAC_IMPACT, false},	//  24
	{196, -1, 8, 8, 10, 0, SPAC_CROSS, false},	//  25
	{13, 0, 16, 150, 4, 0, SPAC_USE, true},	//  26
	{13, 0, 16, 150, 3, 0, SPAC_USE, true},	//  27
	{13, 0, 16, 150, 11, 0, SPAC_USE, true},	//  28
	{12, -1, 16, 150, 0, 0, SPAC_USE, false},	//  29

	{240, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  30
	{11, 0, 16, 0, 0, 0, SPAC_USE, false},	//  31
	{13, 0, 16, 0, 4, 0, SPAC_USE, false},	//  32
	{13, 0, 16, 0, 11, 0, SPAC_USE, false},	//  33
	{13, 0, 16, 0, 3, 0, SPAC_USE, false},	//  34
	{112, -1, 35, 0, 0, 0, SPAC_CROSS, false},	//  35
	{242, -1, 32, 136, 0, 0, SPAC_CROSS, false},	//  36
	{241, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  37
	{21, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  38
	{70, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  39

	{251, -1, 8, 0, 0, 0, SPAC_USE, false},	//  40
	{254, -1, 8, 0, 0, 0, SPAC_USE, false},	//  41
	{10, -1, 16, 0, 0, 0, SPAC_USE, true},	//  42
	{254, -1, 8, 0, 0, 0, SPAC_USE, true},	//  43
	{43, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  44
	{242, -1, 8, 128, 0, 0, SPAC_USE, true},	//  45
	{11, -1, 16, 0, 0, 0, SPAC_IMPACT, true},	//  46
	{228, -1, 4, 0, 0, 0, SPAC_IMPACT, false},	//  47
	{100, 64, 0, 0, 0, 0, SPAC_CROSS, false},	//  48
	{196, -1, 8, 8, 10, 0, SPAC_USE, false},	//  49

	{10, -1, 16, 0, 0, 0, SPAC_USE, false},	//  50
	{244, -1, 0, 0, 0, 0, SPAC_USE, false},	//  51
	{243, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  52
	{207, -1, 8, 105, 0, 0, SPAC_CROSS, false},	//  53
	{61, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  54
	{28, -1, 8, 10, 0, 0, SPAC_USE, false},	//  55
	{28, -1, 8, 10, 0, 0, SPAC_CROSS, false},	//  56
	{44, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  57
	{23, -1, 8, 24, 0, 0, SPAC_CROSS, false},	//  58
	{239, -1, 8, 24, 0, 0, SPAC_CROSS, false},	//  59

	{21, -1, 8, 0, 0, 0, SPAC_USE, true},	//  60
	{11, -1, 16, 0, 0, 0, SPAC_USE, true},	//  61
	{206, -1, 32, 105, 0, 0, SPAC_USE, true},	//  62
	{12, -1, 16, 150, 0, 0, SPAC_USE, true},	//  63
	{238, -1, 8, 0, 0, 0, SPAC_USE, true},	//  64
	{28, -1, 8, 10, 0, 0, SPAC_USE, true},	//  65
	{230, -1, 4, 3, 0, 0, SPAC_USE, true},	//  66
	{230, -1, 4, 4, 0, 0, SPAC_USE, true},	//  67
	{228, -1, 4, 0, 0, 0, SPAC_USE, true},	//  68
	{25, -1, 8, 0, 0, 0, SPAC_USE, true},	//  69

	{242, -1, 32, 136, 0, 0, SPAC_USE, true},	//  70
	{242, -1, 32, 136, 0, 0, SPAC_USE, false},	//  71
	{43, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  72
	{196, -1, 8, 8, 10, 0, SPAC_CROSS, true},	//  73
	{44, -1, 0, 0, 0, 0, SPAC_CROSS, true},	//  74
	{10, -1, 16, 0, 0, 0, SPAC_CROSS, true},	//  75
	{249, -1, 16, 240, 0, 0, SPAC_CROSS, true},	//  76
	{196, -1, 16, 16, 10, 0, SPAC_CROSS, true},	//  77
	{78, -1, 0, 0, 0, 0, 0, 0},	//  78
	{112, -1, 35, 0, 0, 0, SPAC_CROSS, true},	//  79

	{234, -1, 0, 0, 0, 0, SPAC_CROSS, true},	//  80
	{112, -1, 255, 0, 0, 0, SPAC_CROSS, true},	//  81
	{21, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  82
	{242, -1, 8, 128, 0, 0, SPAC_CROSS, true},	//  83
	{241, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  84
	{85, -1, 0, 0, 0, 0, 0, 0},	//  85
	{11, -1, 16, 0, 0, 0, SPAC_CROSS, true},	//  86
	{207, -1, 8, 105, 0, 0, SPAC_CROSS, true},	//  87
	{206, -1, 32, 105, 0, 0, SPAC_CROSS, true},	//  88
	{61, -1, 0, 0, 0, 0, SPAC_CROSS, true},	//  89

	{12, -1, 16, 150, 0, 0, SPAC_CROSS, true},	//  90
	{238, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  91
	{23, -1, 8, 24, 0, 0, SPAC_CROSS, true},	//  92
	{239, -1, 8, 24, 0, 0, SPAC_CROSS, true},	//  93
	{28, -1, 8, 10, 0, 0, SPAC_CROSS, true},	//  94
	{228, -1, 4, 0, 0, 0, SPAC_CROSS, true},	//  95
	{240, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  96
	{70, -1, 0, 0, 0, 0, SPAC_CROSS, true},	//  97
	{242, -1, 32, 136, 0, 0, SPAC_CROSS, true},	//  98
	{13, -1, 64, 0, 4, 0, SPAC_USE, true},	//  99

	{217, -1, 32, 16, 0, 0, SPAC_CROSS, false},	//  100
	{238, -1, 8, 0, 0, 0, SPAC_USE, false},	//  101
	{242, -1, 8, 128, 0, 0, SPAC_USE, false},	//  102
	{11, -1, 16, 0, 0, 0, SPAC_USE, false},	//  103
	{233, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  104
	{12, -1, 64, 150, 0, 0, SPAC_CROSS, true},	//  105
	{11, -1, 64, 0, 0, 0, SPAC_CROSS, true},	//  106
	{10, -1, 64, 0, 0, 0, SPAC_CROSS, true},	//  107
	{12, -1, 64, 150, 0, 0, SPAC_CROSS, false},	//  108
	{11, -1, 64, 0, 0, 0, SPAC_CROSS, false},	//  109

	{10, -1, 64, 0, 0, 0, SPAC_CROSS, false},	//  110
	{12, -1, 64, 150, 0, 0, SPAC_USE, false},	//  111
	{11, -1, 64, 0, 0, 0, SPAC_USE, false},	//  112
	{10, -1, 64, 0, 0, 0, SPAC_USE, false},	//  113
	{12, -1, 64, 150, 0, 0, SPAC_USE, true},	//  114
	{11, -1, 64, 0, 0, 0, SPAC_USE, true},	//  115
	{10, -1, 64, 0, 0, 0, SPAC_USE, true},	//  116
	{12, 0, 64, 150, 0, 0, SPAC_USE, true},	//  117
	{11, 0, 64, 0, 0, 0, SPAC_USE, false},	//  118
	{25, -1, 8, 0, 0, 0, SPAC_CROSS, false},	//  119

	{206, -1, 64, 105, 0, 0, SPAC_CROSS, true},	//  120
	{206, -1, 64, 105, 0, 0, SPAC_CROSS, false},	//  121
	{206, -1, 64, 105, 0, 0, SPAC_USE, false},	//  122
	{206, -1, 64, 105, 0, 0, SPAC_USE, true},	//  123
	{244, -1, 0, 0, 0, 0, SPAC_CROSS, false},	//  124
	{70, -1, 0, 0, 0, 0, SPAC_MCROSS, false},	//  125
	{70, -1, 0, 0, 0, 0, SPAC_MCROSS, true},	//  126
	{217, -1, 32, 16, 0, 0, SPAC_USE, false},	//  127
	{25, -1, 8, 0, 0, 0, SPAC_CROSS, true},	//  128
	{25, -1, 32, 0, 0, 0, SPAC_CROSS, true},	//  129

	{25, -1, 32, 0, 0, 0, SPAC_CROSS, false},	//  130
	{25, -1, 32, 0, 0, 0, SPAC_USE, false},	//  131
	{25, -1, 32, 0, 0, 0, SPAC_USE, true},	//  132
	{13, -1, 64, 0, 4, 0, SPAC_USE, false},	//  133
	{13, -1, 64, 0, 11, 0, SPAC_USE, true},	//  134
	{13, -1, 64, 0, 11, 0, SPAC_USE, false},	//  135
	{13, -1, 64, 0, 3, 0, SPAC_USE, true},	//  136
	{13, -1, 64, 0, 3, 0, SPAC_USE, false},	//  137
	{112, -1, 255, 0, 0, 0, SPAC_USE, true},	//  138
	{112, -1, 35, 0, 0, 0, SPAC_USE, true},	//  139

	{35, -1, 8, 64, 0, 0, SPAC_USE, false},	//  140
	{197, -1, 8, 8, 10, 0, SPAC_CROSS, false},	//  141
	{0, -1, 0, 0, 0, 0, 0, 0},	//  142
	{0, -1, 0, 0, 0, 0, 0, 0},	//  143
	{0, -1, 0, 0, 0, 0, 0, 0},	//  144
	{74, -1, 0, 0, 0, 0, SPAC_CROSS, true},	//  145
	{217, -1, 2, 128 + 16, 0, 0, SPAC_USE, false},	//  146
	{0, -1, 0, 0, 0, 0, 0, 0},	//  147
	{0, -1, 0, 0, 0, 0, 0, 0},	//  148
	{0, -1, 0, 0, 0, 0, 0, 0},	//  149

	{256, 0, 0, 0, 0, 0, SPAC_CROSS, true},	//  150
	{13, -1, 64, 0, 9, 0, SPAC_USE, true},	//  151
	{13, -1, 64, 0, 17, 0, SPAC_USE, true},	//  152
	{13, -1, 64, 0, 12, 0, SPAC_USE, true},	//  153
	{0, -1, 0, 0, 0, 0, 0, 0},	//  154
	{0, -1, 0, 0, 0, 0, 0, 0},	//  155
	{13, 0, 16, 0, 17, 0, SPAC_USE, false},	//  156
	{13, 0, 16, 0, 12, 0, SPAC_USE, false},	//  157
	{13, 0, 16, 0, 9, 0, SPAC_USE, false},	//  158
	{13, 0, 16, 150, 9, 0, SPAC_USE, true},	//  159

	{13, 0, 16, 150, 12, 0, SPAC_USE, true},	//  160
	{0, -1, 0, 0, 0, 0, 0, 0},	//  161
	{13, -1, 64, 0, 17, 0, SPAC_USE, false},	//  162
	{13, -1, 64, 0, 12, 0, SPAC_USE, false},	//  163
	{13, -1, 64, 0, 9, 0, SPAC_USE, false},	//  164
	{13, 0, 0, 0, 255, 0, SPAC_USE, true},	//  165
	{13, 0, 16, 150, 6, 0, SPAC_USE, true},	//  166
	{13, -1, 64, 0, 6, 0, SPAC_USE, false},	//  167
	{13, -1, 64, 0, 6, 0, SPAC_USE, true},	//  168
	{13, 0, 16, 0, 1, 0, SPAC_USE, false},	//  169

	{13, 0, 16, 150, 1, 0, SPAC_USE, true},	//  170
	{13, -1, 16, 0, 5, 0, SPAC_USE, false},	//  171
	{13, -1, 16, 0, 7, 0, SPAC_USE, true},	//  172
	{13, -1, 16, 0, 8, 0, SPAC_USE, true},	//  173
	{0, -1, 0, 0, 0, 0, 0, 0},	//  174
	{256, 1, 16, 0, 0, 0, SPAC_CROSS, false},	//  175
	{13, -1, 16, 0, 10, 0, SPAC_USE, true},	//  176
	{0, -1, 0, 0, 0, 0, 0, 0},	//  177
	{217, -1, 2, 128 + 16, 0, 0, SPAC_CROSS, false},	//  178
	{0, -1, 0, 0, 0, 0, 0, 0},	//  179

	{230, -1, 4, 64, 0, 0, SPAC_IMPACT, false},	//  180
	{230, -1, 4, 64, 0, 0, SPAC_USE, false},	//  181
	{0, -1, 0, 0, 0, 0, 0, 0},	//  182
	{0, -1, 0, 0, 0, 0, 0, 0},	//  183
	{0, -1, 0, 0, 0, 0, 0, 0},	//  184
	{0, -1, 0, 0, 0, 0, 0, 0},	//  185
	{74, -1, 0, 0, 0, 0, SPAC_CROSS, true},	//  186
	{0, -1, 0, 0, 0, 0, 0, 0},	//  187
	{13, -1, 16, 0, 129, 0, SPAC_CROSS, false},	//  188
	{0, -1, 0, 0, 0, 0, 0, 0},	//  189

	{13, 0, 16, 150, 14, 0, SPAC_USE, true},	//  190
	{13, -1, 16, 0, 14, 0, SPAC_USE, true},	//  191
	{13, -1, 16, 0, 16, 0, SPAC_USE, false},	//  192
	{11, -1, 16, 0, 0, 0, SPAC_USE, false},	//  193
	{0, -1, 0, 0, 0, 0, 0, 0},	//  194
	{0, -1, 0, 0, 0, 0, 0, 0},	//  195
	{0, -1, 0, 0, 0, 0, 0, 0},	//  196
	{10, -1, 64, 0, 0, 0, 0, 0},	//  197
	{256, 3, 0, 0, 0, 0, 0, 0},	//  198
	{0, -1, 0, 0, 0, 0, 0, 0},	//  199

	{11, -1, 16, 0, 0, 0, SPAC_CROSS, false},	//  200
	{0, -1, 0, 0, 0, 0, 0, 0},	//  201
	{0, -1, 0, 0, 0, 0, 0, 0},	//  202
	{0, -1, 0, 0, 0, 0, 0, 0},	//  203
	{0, -1, 0, 0, 0, 0, 0, 0},	//  204
	{13, 0, 0, 0, 254, 0, SPAC_USE, true},	//  205
	{256, 2, 0, 0, 0, 0, SPAC_CROSS, false},	//  206
	{0, -1, 0, 0, 0, 0, 0, 0},	//  207
	{256, 2, 0, 0, 0, 0, SPAC_CROSS, false},	//  208
	{0, -1, 0, 0, 0, 0, 0, 0},	//  209

	{0, -1, 0, 0, 0, 0, 0, 0},	//  210
	{0, -1, 0, 0, 0, 0, 0, 0},	//  211
	{0, -1, 0, 0, 0, 0, 0, 0},	//  212
	{13, 0, 16, 150, 130, 0, SPAC_USE, true},	//  213
	{0, -1, 0, 0, 0, 0, 0, 0},	//  214
	{0, -1, 0, 0, 0, 0, 0, 0},	//  215
	{12, -1, 16, 150, 0, 0, SPAC_CROSS, true},	//  216
	{13, 0, 16, 150, 23, 0, SPAC_USE, true},	//  217
	{0, -1, 0, 0, 0, 0, 0, 0},	//  218
	{0, -1, 0, 0, 0, 0, 0, 0},	//  219

	{0, -1, 0, 0, 0, 0, 0, 0},	//  220
	{13, 0, 16, 150, 24, 0, SPAC_USE, true},	//  221
	{13, -1, 16, 0, 25, 0, SPAC_USE, false},	//  222
	{13, -1, 16, 0, 26, 0, SPAC_USE, true},	//  223
	{13, 0, 16, 0, 20, 0, SPAC_USE, false},	//  224
	{13, 0, 16, 0, 21, 0, SPAC_USE, false},	//  225
	{0, -1, 0, 0, 0, 0, 0, 0},	//  226
	{10, -1, 16, 0, 0, 0, SPAC_CROSS, false},	//  227
	{0, -1, 0, 0, 0, 0, 0, 0},	//  228
	{0, -1, 0, 0, 0, 0, 0, 0},	//  229

	{11, -1, 16, 0, 0, 0, SPAC_CROSS, false},	//  230
	{0, -1, 0, 0, 0, 0, 0, 0},	//  231
	{13, 0, 16, 150, 13, 0, SPAC_USE, true},	//  232
	{0, -1, 0, 0, 0, 0, 0, 0},	//  233
	{11, -1, 16, 0, 0, 0, SPAC_USE, true},	//  234
	{0, -1, 0, 0, 0, 0, 0, 0},	//  235
	{0, -1, 0, 0, 0, 0, 0, 0},	//  236
	{0, -1, 0, 0, 0, 0, 0, 0},	//  237
	{0, -1, 0, 0, 0, 0, 0, 0},	//  238
	{0, -1, 0, 0, 0, 0, 0, 0},	//  239
/*
	{$0, -1, 0, 0, 0, 0, 0, 0},	//  $0
	{$1, -1, 0, 0, 0, 0, 0, 0},	//  $1
	{$2, -1, 0, 0, 0, 0, 0, 0},	//  $2
	{$3, -1, 0, 0, 0, 0, 0, 0},	//  $3
	{$4, -1, 0, 0, 0, 0, 0, 0},	//  $4
	{$5, -1, 0, 0, 0, 0, 0, 0},	//  $5
	{$6, -1, 0, 0, 0, 0, 0, 0},	//  $6
	{$7, -1, 0, 0, 0, 0, 0, 0},	//  $7
	{$8, -1, 0, 0, 0, 0, 0, 0},	//  $8
	{$9, -1, 0, 0, 0, 0, 0, 0},	//  $9
*/
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  TranslateLine
//
//==========================================================================

void TranslateLine(line_t * line)
{
	int oldspec;

	oldspec = line->special;
	if (!line->special)
	{
		return;
	}

	if (line->special >= NUM_SPECIALS)
	{
		line->special = 0;
		line->arg1 = 0;
		return;
	}

	line->special = spec_trans_tab[oldspec].special;
	if (oldspec == 145 || oldspec == 186)
	{
		//	Split map teleport tag.
		line->arg2 = line->arg1 % 100;	//	Spot.
		line->arg1 = line->arg1 / 100;	//	Map.
	}
	else
	{
		if (spec_trans_tab[oldspec].arg1 != -1)
			line->arg1 = spec_trans_tab[oldspec].arg1;
		line->arg2 = spec_trans_tab[oldspec].arg2;
	}
	line->arg3 = spec_trans_tab[oldspec].arg3;
	line->arg4 = spec_trans_tab[oldspec].arg4;
	line->arg5 = spec_trans_tab[oldspec].arg5;
	line->flags |= spec_trans_tab[oldspec].spac << ML_SPAC_SHIFT;
	if (spec_trans_tab[oldspec].repeat)
		line->flags |= ML_REPEAT_SPECIAL;
}

//==========================================================================
//
//  TranslateSector
//
//==========================================================================

void TranslateSector(sector_t * sector)
{
	if (sector->special)
	{
		sector->special =
			(sector->special == 9) ? SECRET_MASK :
			((sector->special & 0xfe0) << 3) |
			((sector->special & 0x01f) + (((sector->special & 0x1f) <
					21) ? 64 : -20));
	}
}

//==========================================================================
//
//  TranslateThing
//
//==========================================================================

void TranslateThing(mthing_t * mthing)
{
	int flags;

	// translate the spawn flags to Hexen format.
	flags = mthing->options;
	mthing->options = (flags & 0xf) | 0x7e0;
	if (flags & 0x10)
		mthing->options &= ~MTF_GSINGLE;
	if (mthing->type == 14)
	{
		mthing->tid =
			GLevel.PointInSector(vector(mthing->x, mthing->y, 0.0))->tag;
	}
	if (mthing->type >= 118 && mthing->type <= 127)
	{
		//	Map start spots, i.e. player starts.
		mthing->arg1 = mthing->type - 117;
		mthing->type = 1;
	}
}

//==========================================================================
//
//  TranslateLevel
//
//==========================================================================

void TranslateLevel(void)
{
	int i;

	for (i = 0; i < GLevel.NumLines; i++)
	{
		TranslateLine(&GLevel.Lines[i]);
	}

	for (i = 0; i < GLevel.NumSectors; i++)
	{
		TranslateSector(&GLevel.Sectors[i]);
	}

	for (i = 0; i < GLevel.NumThings; i++)
	{
		TranslateThing(&GLevel.Things[i]);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.4  2003/09/12 16:47:11  dj_jl
//  Translating most of the line specials
//
//  Revision 1.3  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.2  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.1  2001/09/25 17:12:09  dj_jl
//  Switched to Hexen map format, special thinker classes
//
//  Revision 1.3  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
