//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	InquisitorGrenade
//
//**************************************************************************

class InquisitorGrenade:Projectile
{

__states__
{
	S_INQUISITOR_GRENADE_1('UBAM', 0, 3.0 / 35.0, S_INQUISITOR_GRENADE_2) { A_DecReactionCount(); }
	S_INQUISITOR_GRENADE_2('UBAM', 1, 3.0 / 35.0, S_INQUISITOR_GRENADE_1) { A_DecReactionCount(); }
	S_INQUISITOR_GRENADE_X1('BNG2', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_GRENADE_X2) { A_Unknown27(); }
	S_INQUISITOR_GRENADE_X2('BNG2', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_GRENADE_X3) { }
	S_INQUISITOR_GRENADE_X3('BNG2', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_GRENADE_X4) { }
	S_INQUISITOR_GRENADE_X4('BNG2', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_GRENADE_X5) { }
	S_INQUISITOR_GRENADE_X5('BNG2', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_GRENADE_X6) { }
	S_INQUISITOR_GRENADE_X6('BNG2', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_GRENADE_X7) { }
	S_INQUISITOR_GRENADE_X7('BNG2', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_GRENADE_X8) { }
	S_INQUISITOR_GRENADE_X8('BNG2', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_GRENADE_X9) { }
	S_INQUISITOR_GRENADE_X9('BNG2', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 13.0;
	Height = 13.0;
	Mass = 15.0;
	Speed = 875.0;
	ReactionCount = 15;
	bNoGravity = false;
	IdleState = S_INQUISITOR_GRENADE_1;
	DeathState = S_INQUISITOR_GRENADE_X1;
	SightSound = 'FireGrenade';
	DeathSound = 'Explode';
}

}

#ifndef TEASER
//**************************************************************************
//
//	InquisitorArm
//
//**************************************************************************

class InquisitorArm:Effect
{

__states__
{
	S_INQUISITOR_ARM_1('RBB3', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_INQUISITOR_ARM_2) { }
	S_INQUISITOR_ARM_2('RBB3', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_INQUISITOR_ARM_3) { }
	S_INQUISITOR_ARM_3('RBB3', 7, -1.0, S_NULL) { }
}

defaultproperties
{
	StepSpeed = 25.0;
	bNoGravity = false;
	bColideWithThings = false;
	bColideWithWorld = false;
	bNoBlood = true;
	IdleState = S_INQUISITOR_ARM_1;
}

}
#endif

//**************************************************************************
//
//	Inquisitor
//
//**************************************************************************

class Inquisitor:Pawn
	__mobjinfo__(16)
{

void A_InquisitorChase(void)
{
}
void A_InquisitorChase2(void)
{
}
void A_InquisitorAttack2(void)
{
}
void A_InquisitorInitJump(void)
{
}
void A_InquisitorJump(void)
{
}
#ifndef TEASER
void A_InquisitorDropArms(void)
{
}
#endif

__states__
{
	S_INQUISITOR_LOOK1('ROB3', 0, 10.0 / 35.0, S_INQUISITOR_LOOK2) { A_Look(); }
	S_INQUISITOR_LOOK2('ROB3', 1, 10.0 / 35.0, S_INQUISITOR_LOOK1) { A_Look(); }
	S_INQUISITOR_RUN1('ROB3', 1, 3.0 / 35.0, S_INQUISITOR_RUN2) { A_InquisitorChase(); }
	S_INQUISITOR_RUN2('ROB3', 1, 3.0 / 35.0, S_INQUISITOR_RUN3) { A_Chase(); }
	S_INQUISITOR_RUN3('ROB3', 2, 4.0 / 35.0, S_INQUISITOR_RUN4) { A_Chase(); }
	S_INQUISITOR_RUN4('ROB3', 2, 4.0 / 35.0, S_INQUISITOR_RUN5) { A_Chase(); }
	S_INQUISITOR_RUN5('ROB3', 3, 4.0 / 35.0, S_INQUISITOR_RUN6) { A_Chase(); }
	S_INQUISITOR_RUN6('ROB3', 3, 4.0 / 35.0, S_INQUISITOR_RUN7) { A_Chase(); }
	S_INQUISITOR_RUN7('ROB3', 4, 3.0 / 35.0, S_INQUISITOR_RUN8) { A_InquisitorChase(); }
	S_INQUISITOR_RUN8('ROB3', 4, 3.0 / 35.0, S_INQUISITOR_RUN1) { A_InquisitorChase2(); }
	S_INQUISITOR_ATK1_1('ROB3', 0, 2.0 / 35.0, S_INQUISITOR_ATK1_2) { A_InquisitorChase2(); }
	S_INQUISITOR_ATK1_2('ROB3', 5, 6.0 / 35.0, S_INQUISITOR_ATK1_3) { A_FaceTarget(); }
	S_INQUISITOR_ATK1_3('ROB3', 6 | FF_FULLBRIGHT, 8.0 / 35.0, S_INQUISITOR_ATK1_4) { A_RobotMissile(); }
	S_INQUISITOR_ATK1_4('ROB3', 6, 8.0 / 35.0, S_INQUISITOR_RUN1) { A_RobotMissile(); }
	S_INQUISITOR_ATK2_1('ROB3', 10, 12.0 / 35.0, S_INQUISITOR_ATK2_2) { A_FaceTarget(); }
	S_INQUISITOR_ATK2_2('ROB3', 9 | FF_FULLBRIGHT, 6.0 / 35.0, S_INQUISITOR_ATK2_3) { A_InquisitorAttack2(); }
	S_INQUISITOR_ATK2_3('ROB3', 10, 12.0 / 35.0, S_INQUISITOR_RUN1) { }
	S_INQUISITOR_JUMP1('ROB3', 7 | FF_FULLBRIGHT, 8.0 / 35.0, S_INQUISITOR_JUMP2) { A_InquisitorInitJump(); }
	S_INQUISITOR_JUMP2('ROB3', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_JUMP3) { A_InquisitorJump(); }
	S_INQUISITOR_JUMP3('ROB3', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_JUMP2) { A_InquisitorJump(); }
	S_INQUISITOR_DIE1('ROB3', 11, 4.0 / 35.0, S_INQUISITOR_DIE2) { A_XDying(); }
	S_INQUISITOR_DIE2('ROB3', 12, 4.0 / 35.0, S_INQUISITOR_DIE3) { A_Scream(); }
	S_INQUISITOR_DIE3('ROB3', 13, 4.0 / 35.0, S_INQUISITOR_DIE4) { A_XDying(); }
#ifdef TEASER
	S_INQUISITOR_DIE4('ROB3', 14, 4.0 / 35.0, S_INQUISITOR_DIE5) { A_XDying(); }
	S_INQUISITOR_DIE5('ROB3', 15, 4.0 / 35.0, S_INQUISITOR_DIE6) { A_XDying(); }
	S_INQUISITOR_DIE6('ROB3', 16, 4.0 / 35.0, S_INQUISITOR_DIE7) { A_Fall(); }
#else
	S_INQUISITOR_DIE4('ROB3', 14 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE5) { A_Explode2(); }
	S_INQUISITOR_DIE5('ROB3', 15 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE6) { A_XDying(); }
	S_INQUISITOR_DIE6('ROB3', 16 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE7) { A_Fall(); }
#endif
	S_INQUISITOR_DIE7('ROB3', 17, 4.0 / 35.0, S_INQUISITOR_DIE8) { A_XDying(); }
	S_INQUISITOR_DIE8('ROB3', 18, 4.0 / 35.0, S_INQUISITOR_DIE9) { A_XDying(); }
	S_INQUISITOR_DIE9('ROB3', 19, 4.0 / 35.0, S_INQUISITOR_DIE10) { A_XDying(); }
	S_INQUISITOR_DIE10('ROB3', 20, 4.0 / 35.0, S_INQUISITOR_DIE11) { A_XDying(); }
	S_INQUISITOR_DIE11('ROB3', 21, 4.0 / 35.0, S_INQUISITOR_DIE12) { A_XDying(); }
#ifdef TEASER
	S_INQUISITOR_DIE12('ROB3', 22, 4.0 / 35.0, S_INQUISITOR_DIE13) { A_XDying(); }
	S_INQUISITOR_DIE13('ROB3', 23, 4.0 / 35.0, S_INQUISITOR_DIE14) { A_XDying(); }
	S_INQUISITOR_DIE14('ROB3', 24, 4.0 / 35.0, S_INQUISITOR_DIE15) { A_XDying(); }
#else
	S_INQUISITOR_DIE12('ROB3', 22 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE13) { A_Explode2(); }
	S_INQUISITOR_DIE13('ROB3', 23 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE14) { A_XDying(); }
	S_INQUISITOR_DIE14('ROB3', 24 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE15) { A_XDying(); }
#endif
	S_INQUISITOR_DIE15('ROB3', 25, 4.0 / 35.0, S_INQUISITOR_DIE16) { A_XDying(); }
	S_INQUISITOR_DIE16('ROB3', 26, 4.0 / 35.0, S_INQUISITOR_DIE17) { A_XDying(); }
	S_INQUISITOR_DIE17('ROB3', 27, 3.0 / 35.0, S_INQUISITOR_DIE18) { A_XDying(); }
#ifdef TEASER
	S_INQUISITOR_DIE18('ROB3', 28, 3.0 / 35.0, S_INQUISITOR_DIE19) { A_XDying(); }
	S_INQUISITOR_DIE19('RBB3', 0, 3.0 / 35.0, S_INQUISITOR_DIE20) { A_XDying(); }
	S_INQUISITOR_DIE20('RBB3', 1, 3.0 / 35.0, S_INQUISITOR_DIE21) { A_XDying(); }
	S_INQUISITOR_DIE21('RBB3', 2, -1.0, S_NULL) { A_Unknown72(); }
#else
	S_INQUISITOR_DIE18('ROB3', 28 | FF_FULLBRIGHT, 3.0 / 35.0, S_INQUISITOR_DIE19) { A_Explode2(); }
	S_INQUISITOR_DIE19('RBB3', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_INQUISITOR_DIE20) { A_InquisitorDropArms(); }
	S_INQUISITOR_DIE20('RBB3', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_INQUISITOR_DIE21) { A_XDying(); }
	S_INQUISITOR_DIE21('RBB3', 2, 3.0 / 35.0, S_INQUISITOR_DIE22) { A_XDying(); }
	S_INQUISITOR_DIE22('RBB3', 3, 3.0 / 35.0, S_INQUISITOR_DIE23) { A_XDying(); }
	S_INQUISITOR_DIE23('RBB3', 4, -1.0, S_NULL) { A_Unknown72(); }
#endif
}

defaultproperties
{
	Health = 1000;
	Radius = 40.0;
	Height = 110.0;
	Mass = 1000.0;
	StepSpeed = 12.0;
	bDropOff = true;
	bNoBlood = true;
	IdleState = S_INQUISITOR_LOOK1;
	SeeState = S_INQUISITOR_RUN1;
	MissileState = S_INQUISITOR_ATK1_1;
	DeathState = S_INQUISITOR_DIE1;
	SightSound = 'InquisitorSight';
	ActiveSound = 'InquisitorActive';
	DeathSound = 'InquisitorDeath';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.4  2002/07/13 07:56:42  dj_jl
//  Huge work on Strife: splitting, merging, implementing stuff, etc.
//
//  Revision 1.3  2002/06/22 07:17:45  dj_jl
//  Beautification.
//
//  Revision 1.2  2002/05/18 17:00:01  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.1  2002/04/27 17:04:54  dj_jl
//  Merged all creatures.
//
//**************************************************************************
