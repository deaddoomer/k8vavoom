//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#define	BODYQUESIZE				32

Actor bodyque[BODYQUESIZE];
int bodyqueslot;

//==========================================================================
//
//  PlayerPawn::SetPlayerRunState
//
//==========================================================================

void PlayerPawn::SetPlayerRunState(void)
{
	if (StateNum == S_PLAY)
	{
		SetState(S_PLAY_RUN1);
	}
}

//==========================================================================
//
//  G_CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

boolean G_CheckSpot(int playernum, mthing_t * mthing)
{
	float x;
	float y;
	subsector_t *ss;
	float an;
	Actor A;
	int mtnum;
	int sfxnum;
	int i;

	if (!players[playernum].mo)
	{
		// first spawn of level, before corpses
		for (i = 0; i < playernum; i++)
			if (players[i].mo->Origin.x == mthing->x &&
				players[i].mo->Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	if (!players[playernum].mo->CheckPosition(vector(x, y, ONFLOORZ)))
	{
		return false;
	}

	// flush an old corpse if needed 
	if (bodyqueslot >= BODYQUESIZE)
		bodyque[bodyqueslot % BODYQUESIZE].Remove();
	bodyque[bodyqueslot % BODYQUESIZE] = *players[playernum].mo;
	bodyqueslot++;

	// spawn a teleport fog 
	ss = PointInSubsector(x, y);
	an = itof(45 * (mthing->angle / 45));

	A = Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		ss->sector->floorheight));
	A.PlaySound('Teleport', CHAN_VOICE);	// don't start sound on first frame

	return true;
}

//==========================================================================
//
//  P_SpawnPlayer
//
//  Called when a player is spawned on the level. Most of the player
// structure stays unchanged between levels.
//
//==========================================================================

void P_SpawnPlayer(mthing_t * mthing)
{
	player_t *p;
	float x;
	float y;
	float z;

	Actor A;

	p = &players[mthing->type - 1];

	// not playing?
	if (!p->bActive)
		return;

	if (p->PlayerState == PST_REBORN)
		G_PlayerReborn(mthing->type - 1);

	x = mthing->x;
	y = mthing->y;
	z = ONFLOORZ;
	A = Spawn(StrifePlayer, vector(x, y, z));

	// set color translations for player sprites
	A.Translation = p->Color;

	A.Angles.yaw = itof(45 * (mthing->angle / 45));
	A.Player = p;
	A.bIsPlayer = true;
	A.Health = p->Health;

	p->mo = &A;
	p->PlayerState = PST_LIVE;
	p->Refire = 0;
	p->DamageCount = 0;
	p->BonusCount = 0;
	p->ExtraLight = 0;
	p->FixedColormap = 0;
	p->ViewHeight = VIEWHEIGHT;
	p->ViewAngles = A.Angles;
	p->bFixAngle = true;

	// setup gun psprite
	SetupPsprites(p);

	// give all cards in death match mode
	if (deathmatch)
	{
		p->Keys = 0x3f;
	}

	// wake up the status bar
	SB_Start();
}

//==========================================================================
//
//  PlayerPawn::SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor PlayerPawn::SpawnPlayerMissile(classid type)
{
	Actor A;
	TVec dir;

	// see which target is to be aimed at
	dir = Aim(self, 16.0 * 64.0);

	A = Spawn(type, Origin + vector(0.0, 0.0, 32.0));

	if (A.SightSound)
		A.PlaySound(A.SightSound, CHAN_VOICE);

	A.Instigator = self;
	A.Velocity = dir * A.Speed;
	VectorAngles(&dir, &A.Angles);

	A.CheckMissileSpawn();

	return A;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.23  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.22  2002/03/16 17:48:58  dj_jl
//  Added PlayerPawn class, beautifucation.
//
//  Revision 1.21  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.20  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.19  2002/02/22 18:00:26  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.18  2002/02/16 16:26:56  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.17  2002/02/14 19:21:00  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/07 18:50:09  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.15  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:01  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/11 18:19:43  dj_jl
//  Started to use names in progs
//
//  Revision 1.10  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/04 18:40:22  dj_jl
//  Some fixes
//
//  Revision 1.8  2001/12/01 18:14:09  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.7  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
