//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	$Id$
//**
//**	Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**	States table
//**
//**	Generated by makeinfo.
//**
//**************************************************************************

__states__(Weapon)
{
	S_LIGHTDONE('', 0, 0.0 / 35.0, S_NULL) { A_Light0(); }
	S_WAVE1('WAVE', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_WAVE2) { }
	S_WAVE2('WAVE', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_WAVE3) { }
	S_WAVE3('WAVE', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_WAVE4) { }
	S_WAVE4('WAVE', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_WAVE1) { }
	S_RBPY_1('RBPY', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_RBPY_2) { }
	S_RBPY_2('RBPY', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_RBPY_3) { }
	S_RBPY_3('RBPY', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_RBPY_4) { }
	S_RBPY_4('RBPY', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_RBPY_1) { }
	S_TARGETER1('TRGT', 0, -1.0, S_NULL) { }
	S_TARGETER2('TRGT', 1, -1.0, S_NULL) { }
	S_TARGETER3('TRGT', 2, -1.0, S_NULL) { }
}

__states__(Actor)
{
	S_PUNCH_PUFF_1('POW2', 0, 4.0 / 35.0, S_PUNCH_PUFF_2) { }
	S_PUNCH_PUFF_2('POW2', 1, 4.0 / 35.0, S_PUNCH_PUFF_3) { }
	S_PUNCH_PUFF_3('POW2', 2, 4.0 / 35.0, S_PUNCH_PUFF_4) { }
	S_PUNCH_PUFF_4('POW2', 3, 4.0 / 35.0, S_NULL) { }

#ifndef TEASER
	S_ZAP1_1('ZAP1', 1, 3.0 / 35.0, S_ZAP1_2) { A_Unknown24(); }
#endif
	S_ZAP1_0('ZAP1', 0, 3.0 / 35.0, S_ZAP1_2) { A_Unknown25(); }
	S_ZAP1_2('ZAP1', 1, 3.0 / 35.0, S_ZAP1_3) { }
	S_ZAP1_3('ZAP1', 2, 3.0 / 35.0, S_ZAP1_4) { }
	S_ZAP1_4('ZAP1', 3, 3.0 / 35.0, S_ZAP1_5) { }
	S_ZAP1_5('ZAP1', 4, 3.0 / 35.0, S_ZAP1_6) { }
	S_ZAP1_6('ZAP1', 5, 3.0 / 35.0, S_ZAP1_7) { }
	S_ZAP1_7('ZAP1', 4, 3.0 / 35.0, S_ZAP1_8) { }
	S_ZAP1_8('ZAP1', 3, 2.0 / 35.0, S_ZAP1_9) { }
	S_ZAP1_9('ZAP1', 2, 2.0 / 35.0, S_ZAP1_10) { }
	S_ZAP1_10('ZAP1', 1, 2.0 / 35.0, S_ZAP1_11) { }
	S_ZAP1_11('ZAP1', 0, 1.0 / 35.0, S_NULL) { }

	S_BLOOD1('BLOD', 2, 8.0 / 35.0, S_BLOOD2) { }
	S_BLOOD2('BLOD', 1, 8.0 / 35.0, S_BLOOD3) { }
	S_BLOOD3('BLOD', 0, 8.0 / 35.0, S_NULL) { }

	S_SHARD_1('SHRD', 0, 128.0 / 35.0, S_NULL) { }
	S_SHARD_2('SHRD', 1, 128.0 / 35.0, S_NULL) { }
	S_SHARD_3('SHRD', 2, 128.0 / 35.0, S_NULL) { }
#ifndef TEASER
	S_SHARD_4('SHRD', 3, 128.0 / 35.0, S_NULL) { }
	S_SHARD_5('SHRD', 4, 128.0 / 35.0, S_NULL) { }
	S_SHARD_6('SHRD', 5, 128.0 / 35.0, S_NULL) { }
#endif

	S_MINI_MISSILE2_1('MICR', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_MINI_MISSILE2_2) { A_Unknown34(); }
	S_MINI_MISSILE2_2('MICR', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_MINI_MISSILE2_1) { A_Unknown34(); }

	S_TOKENS('TOKN', 0, -1.0, S_NULL) { }

	S_GIBS('DIE1', 0, -1.0, S_NULL) { }

#ifndef TEASER
	S_ANKH('ANKH', 0, -1.0, S_NULL) { }
#endif
}

__states__(Pawn)
{
	S_BURN1('BURN', 0, 3.0 / 35.0, S_BURN2) { A_Scream(); }
	S_BURN2('BURN', 1, 3.0 / 35.0, S_BURN3) { A_Burn(); }
	S_BURN3('BURN', 2, 3.0 / 35.0, S_BURN4) { A_Walk(); }
	S_BURN4('BURN', 3, 3.0 / 35.0, S_BURN5) { A_Fall(); }
	S_BURN5('BURN', 4, 5.0 / 35.0, S_BURN6) { A_Burn(); }
	S_BURN6('BURN', 5, 5.0 / 35.0, S_BURN7) { A_Walk(); }
	S_BURN7('BURN', 6, 5.0 / 35.0, S_BURN8) { A_Walk(); }
	S_BURN8('BURN', 7, 5.0 / 35.0, S_BURN9) { A_Walk(); }
	S_BURN9('BURN', 8, 5.0 / 35.0, S_BURN10) { A_Burn(); }
	S_BURN10('BURN', 9, 5.0 / 35.0, S_BURN11) { A_Walk(); }
	S_BURN11('BURN', 10, 5.0 / 35.0, S_BURN12) { A_Walk(); }
	S_BURN12('BURN', 11, 5.0 / 35.0, S_BURN13) { A_Walk(); }
	S_BURN13('BURN', 12, 3.0 / 35.0, S_BURN14) { A_Burn(); }
	S_BURN14('BURN', 13, 3.0 / 35.0, S_BURN15) { }
	S_BURN15('BURN', 14, 5.0 / 35.0, S_BURN16) { }
	S_BURN16('BURN', 15, 5.0 / 35.0, S_BURN17) { }
	S_BURN17('BURN', 16, 5.0 / 35.0, S_BURN18) { }
	S_BURN18('BURN', 15, 5.0 / 35.0, S_BURN19) { }
	S_BURN19('BURN', 16, 5.0 / 35.0, S_BURN20) { }
	S_BURN20('BURN', 17, 7.0 / 35.0, S_BURN21) { }
	S_BURN21('BURN', 18, 7.0 / 35.0, S_BURN22) { }
	S_BURN22('BURN', 19, 7.0 / 35.0, S_BURN23) { }
	S_BURN23('BURN', 20, 7.0 / 35.0, S_BURN24) { }
	S_BURN24('BURN', 21, 700.0 / 35.0, S_NULL) { A_Dying(); }

#ifdef TEASER
	S_DISRUPT1('DISR', 0, 5.0 / 35.0, S_DISRUPT2) { A_Scream(); }
#else
	S_DISRUPT1('DISR', 0, 5.0 / 35.0, S_DISRUPT2) { }
#endif
	S_DISRUPT2('DISR', 1, 5.0 / 35.0, S_DISRUPT3) { }
	S_DISRUPT3('DISR', 2, 5.0 / 35.0, S_DISRUPT4) { }
	S_DISRUPT4('DISR', 3, 5.0 / 35.0, S_DISRUPT5) { A_Fall(); }
	S_DISRUPT5('DISR', 4, 5.0 / 35.0, S_DISRUPT6) { }
	S_DISRUPT6('DISR', 5, 5.0 / 35.0, S_DISRUPT7) { }
	S_DISRUPT7('DISR', 6, 4.0 / 35.0, S_DISRUPT8) { }
	S_DISRUPT8('DISR', 7, 4.0 / 35.0, S_DISRUPT9) { }
	S_DISRUPT9('DISR', 8, 4.0 / 35.0, S_DISRUPT10) { }
	S_DISRUPT10('DISR', 9, 4.0 / 35.0, S_DISRUPT11) { }
	S_DISRUPT11('MEAT', 3, 700.0 / 35.0, S_NULL) { }
}

//**************************************************************************
//
//	$Log$
//	Revision 1.14  2002/07/13 07:56:42  dj_jl
//	Huge work on Strife: splitting, merging, implementing stuff, etc.
//
//	Revision 1.13  2002/06/29 15:59:26  dj_jl
//	Split out items, projectiles and decorations.
//	
//	Revision 1.12  2002/06/22 07:18:44  dj_jl
//	Seperated all pickup items.
//	
//	Revision 1.11  2002/05/03 17:12:52  dj_jl
//	S_NULL defined in Entity.
//	
//	Revision 1.10  2002/04/27 17:04:55  dj_jl
//	Merged all creatures.
//	
//	Revision 1.9  2002/04/22 17:22:32  dj_jl
//	Retail Strife data.
//	
//	Revision 1.8  2002/03/02 17:37:22  dj_jl
//	Weapon classes
//	
//	Revision 1.7  2002/01/12 17:58:05  dj_jl
//	New style state functions
//	
//	Revision 1.6  2002/01/11 18:19:43  dj_jl
//	Started to use names in progs
//	
//	Revision 1.5  2002/01/07 12:27:42  dj_jl
//	Changed copyright year
//	
//	Revision 1.4  2001/12/12 18:57:43  dj_jl
//	State functions now are methods of Actor and Weapon classes
//	
//	Revision 1.3  2001/09/20 16:20:00  dj_jl
//	Start using object-oriented stuff, beautification
//	
//	Revision 1.2  2001/07/27 14:27:53  dj_jl
//	Update with Id-s and Log-s, some fixes
//
//**************************************************************************
