//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	Templar
//
//**************************************************************************

class Templar:Pawn
	__mobjinfo__(3003)
{

void A_TemplarAttack(void)
{
}

__states__
{
	S_TEMPLAR_STAND('PGRD', 0, 5.0 / 35.0, S_TEMPLAR_STAND) { A_Stand(); }
	S_TEMPLAR_STAND_R('PGRD', 1, 10.0 / 35.0, S_TEMPLAR_STAND) { }
	S_TEMPLAR_STAND_L('PGRD', 2, 10.0 / 35.0, S_TEMPLAR_STAND) { }
	S_TEMPLAR_WALK('PGRD', 1, 10.0 / 35.0, S_TEMPLAR_STAND) { A_Walk(); }
	S_TEMPLAR_RUN1('PGRD', 0, 3.0 / 35.0, S_TEMPLAR_RUN2) { A_Chase(); }
	S_TEMPLAR_RUN2('PGRD', 0, 3.0 / 35.0, S_TEMPLAR_RUN3) { A_Chase(); }
	S_TEMPLAR_RUN3('PGRD', 1, 3.0 / 35.0, S_TEMPLAR_RUN4) { A_Chase(); }
	S_TEMPLAR_RUN4('PGRD', 1, 3.0 / 35.0, S_TEMPLAR_RUN5) { A_Chase(); }
	S_TEMPLAR_RUN5('PGRD', 2, 3.0 / 35.0, S_TEMPLAR_RUN6) { A_Chase(); }
	S_TEMPLAR_RUN6('PGRD', 2, 3.0 / 35.0, S_TEMPLAR_RUN7) { A_Chase(); }
	S_TEMPLAR_RUN7('PGRD', 3, 3.0 / 35.0, S_TEMPLAR_RUN8) { A_Chase(); }
	S_TEMPLAR_RUN8('PGRD', 3, 3.0 / 35.0, S_TEMPLAR_RUN1) { A_Chase(); }
	S_TEMPLAR_ATK1_1('PGRD', 4, 8.0 / 35.0, S_TEMPLAR_ATK1_2) { A_FaceTarget(); }
	S_TEMPLAR_ATK1_2('PGRD', 5, 8.0 / 35.0, S_TEMPLAR_RUN1) { A_RobotMelee(); }
	S_TEMPLAR_ATK2_1('PGRD', 6 | FF_FULLBRIGHT, 8.0 / 35.0, S_TEMPLAR_ATK2_2) { A_FaceTarget(); }
	S_TEMPLAR_ATK2_2('PGRD', 7 | FF_FULLBRIGHT, 8.0 / 35.0, S_TEMPLAR_RUN1) { A_TemplarAttack(); }
	S_TEMPLAR_PAIN1('PGRD', 0, 2.0 / 35.0, S_TEMPLAR_PAIN2) { }
	S_TEMPLAR_PAIN2('PGRD', 0, 2.0 / 35.0, S_TEMPLAR_RUN1) { A_Pain(); }
	S_TEMPLAR_DIE1('PGRD', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_TEMPLAR_DIE2) { A_XDying(); }
	S_TEMPLAR_DIE2('PGRD', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_TEMPLAR_DIE3) { A_Scream(); }
	S_TEMPLAR_DIE3('PGRD', 10 | FF_FULLBRIGHT, 4.0 / 35.0, S_TEMPLAR_DIE4) { A_XDying(); }
	S_TEMPLAR_DIE4('PGRD', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_TEMPLAR_DIE5) { A_Fall(); }
	S_TEMPLAR_DIE5('PGRD', 12 | FF_FULLBRIGHT, 4.0 / 35.0, S_TEMPLAR_DIE6) { }
	S_TEMPLAR_DIE6('PGRD', 13 | FF_FULLBRIGHT, 4.0 / 35.0, S_TEMPLAR_DIE7) { }
	S_TEMPLAR_DIE7('PGRD', 14, 4.0 / 35.0, S_TEMPLAR_DIE8) { A_XDying(); }
	S_TEMPLAR_DIE8('PGRD', 15, 4.0 / 35.0, S_TEMPLAR_DIE9) { }
	S_TEMPLAR_DIE9('PGRD', 16, 4.0 / 35.0, S_TEMPLAR_DIE10) { }
	S_TEMPLAR_DIE10('PGRD', 17, 4.0 / 35.0, S_TEMPLAR_DIE11) { }
	S_TEMPLAR_DIE11('PGRD', 18, 3.0 / 35.0, S_TEMPLAR_DIE12) { }
	S_TEMPLAR_DIE12('PGRD', 19, 3.0 / 35.0, S_TEMPLAR_DIE13) { }
	S_TEMPLAR_DIE13('PGRD', 20, 3.0 / 35.0, S_TEMPLAR_DIE14) { }
	S_TEMPLAR_DIE14('PGRD', 21, 3.0 / 35.0, S_TEMPLAR_DIE15) { }
	S_TEMPLAR_DIE15('PGRD', 22, 3.0 / 35.0, S_TEMPLAR_DIE16) { }
	S_TEMPLAR_DIE16('PGRD', 23, 3.0 / 35.0, S_TEMPLAR_DIE17) { }
	S_TEMPLAR_DIE17('PGRD', 24, 3.0 / 35.0, S_TEMPLAR_DIE18) { }
	S_TEMPLAR_DIE18('PGRD', 25, 3.0 / 35.0, S_TEMPLAR_DIE19) { }
	S_TEMPLAR_DIE19('PGRD', 26, 3.0 / 35.0, S_TEMPLAR_DIE20) { }
	S_TEMPLAR_DIE20('PGRD', 27, -1.0, S_NULL) { }
}

defaultproperties
{
	ConversationID = 62;
#ifdef TEASER
	ClassName = 'Enforcer';
#else
	ClassName = 'TEMPLAR';
#endif
	Health = 300;
	Radius = 20.0;
	Height = 60.0;
	Mass = 500.0;
	StepSpeed = 8.0;
	PainChance = 0.390625;
#ifdef TEASER
	bUnknown4 = true;
#endif
	bNoBlood = true;
	IdleState = S_TEMPLAR_STAND;
	SeeState = S_TEMPLAR_RUN1;
	MeleeState = S_TEMPLAR_ATK1_1;
	MissileState = S_TEMPLAR_ATK2_1;
	PainState = S_TEMPLAR_PAIN1;
	DeathState = S_TEMPLAR_DIE1;
	SightSound = 'TemplarSight';
	ActiveSound = 'TemplarActive';
	PainSound = 'TemplarPain';
	DeathSound = 'TemplarDeath';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.5  2002/07/13 07:56:42  dj_jl
//  Huge work on Strife: splitting, merging, implementing stuff, etc.
//
//  Revision 1.4  2002/06/29 15:54:35  dj_jl
//  Floatized PainChance.
//
//  Revision 1.3  2002/06/22 07:17:45  dj_jl
//  Beautification.
//
//  Revision 1.2  2002/05/18 17:00:05  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.1  2002/04/27 17:04:55  dj_jl
//  Merged all creatures.
//
//**************************************************************************
