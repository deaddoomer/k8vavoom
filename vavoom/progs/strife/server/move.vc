//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	Actor::Touch
//
//==========================================================================

boolean Actor::Touch(MapObject InOther)
{
	boolean solid;
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// check for skulls slamming into things
	if (bSkullFly)
	{
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(IdleState);
		return false;	// stop moving
	}

	// missiles can hit other things
	if (bMissile)
	{
		if (Instigator && (Instigator.Class == Other.Class))
		{
			// Don't hit same species as originator.
			if (Other == Instigator)
				return true;

			if (Other.Class != StrifePlayer)
			{
				// Explode, but do no damage.
				// Let players missile other players.
				return false;
			}
		}

		if (!Other.bShootable)
		{
			// didn't do any damage
			return !Other.bSolid;
		}

		// damage / explode
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, Instigator, damage);
		// don't traverse any more
		return false;
	}

	// check for special pickup
	if (Other.bSpecial)
	{
		solid = Other.bSolid;
		Other.TouchSpecial(self);
		return !solid;
	}

	//return !Other.bSolid || Other.bNoClip;
	return !Other.bSolid;
}

//==========================================================================
//
//	Actor::CrossSpecialLine
//
//==========================================================================

void Actor::CrossSpecialLine(line_t *ld, int side)
{
	if (bIsPlayer)
	{
		P_ActivateLine(ld, self, side, SPAC_CROSS);
	}
	else if (bActivateMCross)
	{
		P_ActivateLine(ld, self, side, SPAC_MCROSS);
	}
	else if (bActivatePCross)
	{
		P_ActivateLine(ld, self, side, SPAC_PCROSS);
	}
	else if (ld->special == 70)
	{
		//	Teleport hack
		P_ActivateLine(ld, self, side, SPAC_MCROSS);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.29  2002/05/18 17:00:04  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.28  2002/04/11 16:52:17  dj_jl
//  Made TryMove native.
//
//  Revision 1.27  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.26  2002/03/16 17:48:58  dj_jl
//  Added PlayerPawn class, beautifucation.
//
//  Revision 1.25  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.24  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.23  2002/03/02 17:41:13  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.22  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.21  2002/02/22 18:00:26  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/16 16:26:56  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.19  2002/02/14 19:21:00  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/09 18:13:46  dj_jl
//  Added flags that determines what line blocking flags to check
//
//  Revision 1.17  2002/02/07 18:50:09  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.16  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.15  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.14  2002/01/29 18:10:32  dj_jl
//  Added MCROSS and PCROSS flags
//
//  Revision 1.13  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.12  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.11  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/15 18:27:01  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/15 08:10:57  dj_jl
//  Added P_CheckRelPosition
//
//  Revision 1.7  2002/01/07 12:27:42  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.5  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.4  2001/09/25 17:12:09  dj_jl
//  Switched to Hexen map format, special thinker classes
//
//  Revision 1.3  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
