//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponMauler : Weapon;

//==========================================================================
//
//	A_FireBlaster1
//
//==========================================================================

final void A_FireBlaster1()
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	Owner.PlaySound('weapons/mauler1', CHAN_WEAPON);

	Player(Owner.Player).Ammo[Ammo] -= 20;

	Actor(Owner).Aim(aimDir, 16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		Actor(Owner).LineAttack(dir, MAULERRANGE, damage, MaulerPuff,,,
			'Disintegrate');
	}
	Owner.Effects |= StrifeDefs::EF_DL_MUZZLEFLASH;
}

//==========================================================================
//
//	A_FireBlasterSound
//
//==========================================================================

final void A_FireBlasterSound()
{
	Owner.PlaySound('weapons/mauler2charge', CHAN_WEAPON);
	Owner.Player.ViewStates[ps_weapon].SX += (Random() - Random()) * 4.0;
	Owner.Player.ViewStates[ps_weapon].SY += (Random() - Random()) * 4.0;
}

//==========================================================================
//
//	A_FireBlaster2
//
//==========================================================================

final void A_FireBlaster2()
{
	Owner.SetState(Actor(Owner).MissileState);
	Player(Owner.Player).Ammo[Ammo] -= 30;
	Actor(Owner).SpawnPlayerMissile(MaulerTorpedo);
	Actor(Owner).Damage(none, Actor(Owner), 20);
	Actor(Owner).Thrust(Owner.Angles.yaw + 180.0, 125.0 / 16.0);
}

__states__
{
	S_BLASTER('BLST', 5, 6.0 / 35.0, S_BLASTER01) = A_WeaponReady
	S_BLASTER01('BLST', 6, 6.0 / 35.0, S_BLASTER02) = A_WeaponReady
	S_BLASTER02('BLST', 7, 6.0 / 35.0, S_BLASTER03) = A_WeaponReady
	S_BLASTER03('BLST', 0, 6.0 / 35.0, S_BLASTER) = A_WeaponReady
	S_BLASTERDOWN('BLST', 0, 1.0 / 35.0, S_BLASTERDOWN) = A_Lower
	S_BLASTERUP('BLST', 0, 1.0 / 35.0, S_BLASTERUP) = A_Raise
	S_BLASTER1('BLSF', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_BLASTER2) = A_FireBlaster1
	S_BLASTER2('BLST', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_BLASTER3) = A_Light1
	S_BLASTER3('BLST', 2, 2.0 / 35.0, S_BLASTER4) = A_Light2
	S_BLASTER4('BLST', 3, 2.0 / 35.0, S_BLASTER5) = none
	S_BLASTER5('BLST', 4, 2.0 / 35.0, S_BLASTER6) = none
	S_BLASTER6('BLST', 0, 7.0 / 35.0, S_BLASTER7) = A_Light0
	S_BLASTER7('BLST', 7, 7.0 / 35.0, S_BLASTER8) = none
	S_BLASTER8('BLST', 6, 7.0 / 35.0, S_BLASTER) = A_CheckReload
	S_BLASTERTORPEDO('BLST', 8, 7.0 / 35.0, S_BLASTERTORPEDO01) = A_WeaponReady
	S_BLASTERTORPEDO01('BLST', 9, 7.0 / 35.0, S_BLASTERTORPEDO02) = A_WeaponReady
	S_BLASTERTORPEDO02('BLST', 10, 7.0 / 35.0, S_BLASTERTORPEDO03) = A_WeaponReady
	S_BLASTERTORPEDO03('BLST', 11, 7.0 / 35.0, S_BLASTERTORPEDO) = A_WeaponReady
	S_BLASTERTORPEDODOWN('BLST', 8, 1.0 / 35.0, S_BLASTERTORPEDODOWN) = A_Lower
	S_BLASTERTORPEDOUP('BLST', 8, 1.0 / 35.0, S_BLASTERTORPEDOUP) = A_Raise
	S_BLASTERTORPEDO1('BLST', 8, 20.0 / 35.0, S_BLASTERTORPEDO2) = A_FireBlasterSound
	S_BLASTERTORPEDO2('BLST', 9, 10.0 / 35.0, S_BLASTERTORPEDO3) = A_Light1
	S_BLASTERTORPEDO3('BLSF', 0 | FF_FULLBRIGHT, 10.0 / 35.0, S_BLASTERTORPEDO4) = A_FireBlaster2
	S_BLASTERTORPEDO4('BLST', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_BLASTERTORPEDO5) = A_Light2
	S_BLASTERTORPEDO5('BLST', 2, 2.0 / 35.0, S_BLASTERTORPEDO6) = none
	S_BLASTERTORPEDO6('BLST', 3, 2.0 / 35.0, S_BLASTERTORPEDO7) = A_Light0
	S_BLASTERTORPEDO7('BLST', 4, 2.0 / 35.0, S_BLASTERTORPEDO) = A_ReFire
}

defaultproperties
{
	Ammo = StrifeDefs::am_cell;
	UpState = S_BLASTERUP;
	DownState = S_BLASTERDOWN;
	ReadyState = S_BLASTER;
	AttackState = S_BLASTER1;
}

class WeaponMauler2 : WeaponMauler;

defaultproperties
{
	UpState = S_BLASTERTORPEDOUP;
	DownState = S_BLASTERTORPEDODOWN;
	ReadyState = S_BLASTERTORPEDO;
	AttackState = S_BLASTERTORPEDO1;
}
