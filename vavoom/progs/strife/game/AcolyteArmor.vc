//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class AcolyteArmor : AcolyteBase
	__mobjinfo__(201);

//============================================================================
//
// A_HideDecepticon
//
// Hide the Acolyte-to-be							->
// Hide the guy transforming into an Acolyte		->
// Hide the transformer								->
// Transformers are Autobots and Decepticons, and
// Decepticons are the bad guys, so...				->
//
// Hide the Decepticon!
//
//============================================================================

void A_HideDecepticon()
{
	StrifeLevelInfo(Level).EV_DoDoor(999, 64, 0, 0, 0, DOOREV_Close, NULL, none);
	if (Enemy && Enemy.bIsPlayer)
	{
		StrifeLevelInfo(Level).NoiseAlert(Enemy, self);
	}
}

__states__
{
	S_ACOLYTEARM_STAND('ARMR', 0, -1.0, none) { }
	S_ACOLYTEARM_PAIN('ARMR', 0, -1.0, none) { A_HideDecepticon(); }
}

defaultproperties
{
	Health = 61;
	Radius = 20.0;
	Height = 56.0;
	Mass = 100.0;
	PainChance = 1.0;
	IdleState = S_ACOLYTEARM_STAND;
	PainState = S_ACOLYTEARM_PAIN;
	DeathState = S_ACOLYTE_XDIE1;
	DeathSound = 'becoming/death';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2006/03/12 20:01:24  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.6  2006/02/13 18:30:17  dj_jl
//  Moved all server progs global functions to classes.
//
//  Revision 1.5  2005/12/27 22:22:28  dj_jl
//  Created level info class, moved action special handling to it.
//
//  Revision 1.4  2005/11/19 13:43:50  dj_jl
//  Renamed sounds.
//
//  Revision 1.3  2005/01/25 17:45:17  dj_jl
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.2  2004/02/04 07:32:58  dj_jl
//  Implemented many action functions
//
//  Revision 1.1  2002/11/02 08:20:56  dj_jl
//  New style classes.
//
//**************************************************************************
