//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponAssaultGun : Weapon;

//==========================================================================
//
//	A_FireRiffle
//
//==========================================================================

void A_FireRiffle()
{
	TVec dir;
	TAVec angles;
	int damage;

	Player.MO.PlaySound('weapons/assaultgun', CHAN_WEAPON);

	if (!Player(Player).Ammo[Ammo])
		return;

	Player.MO.SetState(Actor(Player.MO).MissileState);
	Player(Player).Ammo[Ammo]--;

	dir = Actor(Player.MO).Aim(16.0 * 64.0);
	if (Player(Player).Refire)
	{
		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 2.0 / itof(1 << (Player(Player).Accuracy * 5 / 100)));
		AngleVector(&angles, &dir);
	}
	damage = 4 * (P_Random() % 3 + 1);
	Actor(Player.MO).LineAttack(dir, MISSILERANGE, damage, Puff);
	Player.MO.Effects |= StrifeDefs::EF_DL_MUZZLEFLASH;
}

__states__
{
	S_RIFFLE('RIFG', 0, 1.0 / 35.0, S_RIFFLE) { A_WeaponReady(); }
	S_RIFFLEDOWN('RIFG', 1, 1.0 / 35.0, S_RIFFLEDOWN) { A_Lower(); }
	S_RIFFLEUP('RIFG', 0, 1.0 / 35.0, S_RIFFLEUP) { A_Raise(); }
	S_RIFFLE1('RIFF', 0, 3.0 / 35.0, S_RIFFLE2) { A_FireRiffle(); }
	S_RIFFLE2('RIFF', 1, 3.0 / 35.0, S_RIFFLE3) { A_FireRiffle(); }
	S_RIFFLE3('RIFG', 3, 3.0 / 35.0, S_RIFFLE4) { A_FireRiffle(); }
	S_RIFFLE4('RIFG', 2, 0.0 / 35.0, S_RIFFLE5) { A_ReFire(); }
	S_RIFFLE5('RIFG', 1, 2.0 / 35.0, S_RIFFLE) { A_Light0(); }
}

defaultproperties
{
	Ammo = StrifeDefs::am_clip;
	UpState = S_RIFFLEUP;
	DownState = S_RIFFLEDOWN;
	ReadyState = S_RIFFLE;
	AttackState = S_RIFFLE1;
	FlashState = S_LIGHTDONE;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.9  2006/04/09 15:34:39  dj_jl
//  Added static lights and other lighting effects.
//
//  Revision 1.8  2006/03/02 18:36:30  dj_jl
//  Don't use game specific classes in common.
//
//  Revision 1.7  2006/02/17 19:06:53  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.6  2006/01/10 19:54:01  dj_jl
//  Many bug fixes.
//
//  Revision 1.5  2005/12/11 21:31:40  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.4  2005/11/19 13:43:51  dj_jl
//  Renamed sounds.
//
//  Revision 1.3  2004/01/30 17:39:34  dj_jl
//  Implemented many action functions.
//
//  Revision 1.2  2003/11/12 16:51:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/11/02 08:20:57  dj_jl
//  New style classes.
//
//**************************************************************************
