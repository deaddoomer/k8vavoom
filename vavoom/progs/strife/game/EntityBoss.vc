//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class EntityBoss : Pawn
	__mobjinfo__(128);

TVec BossSpawnPos;

//==========================================================================
//
//	A_EntityAttack
//
//==========================================================================

void A_EntityAttack()
{
	float r;

	if (!Enemy)
		return;

	A_FaceTarget();

	r = Random();
	if (r < 0.25)
		A_Specter3Attack();
	else if (r < 0.375)
		A_SpecterAttack();
	else if (r < 0.5)
		A_Specter4Attack();
	else if (r < 0.625)
		A_Specter5Attack();
	else
		A_Specter2Attack();
}

//==========================================================================
//
//	A_EntityDeath
//
//==========================================================================

void A_EntityDeath()
{
	//	Of course this isn't 100% accurate, but it does its job		-kaiser
	Spawn(SubEntity, BossSpawnPos + vector(-240.0, -itof(P_Random() & 192), 0.0));
	Spawn(SubEntity, BossSpawnPos + vector(-itof(P_Random() & 192), 240.0, 0.0));
	Spawn(SubEntity, BossSpawnPos + vector(itof(P_Random() & 192), -240.0, 0.0));
}

__states__
{
	S_ENTITY_RAISE1('MNAM', 0, 100.0 / 35.0, S_ENTITY_RAISE2) { A_FlightChase(); }
	S_ENTITY_RAISE2('MNAM', 1 | FF_FULLBRIGHT, 60.0 / 35.0, S_ENTITY_RAISE3) { A_FlightChase(); }
	S_ENTITY_RAISE3('MNAM', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RAISE4) { A_FlightChase(); }
	S_ENTITY_RAISE4('MNAM', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RAISE5) { A_FlightChase(); }
	S_ENTITY_RAISE5('MNAM', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RAISE6) { A_FlightChase(); }
	S_ENTITY_RAISE6('MNAM', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RAISE7) { A_FlightChase(); }
	S_ENTITY_RAISE7('MNAM', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RAISE8) { A_FlightChase(); }
	S_ENTITY_RAISE8('MNAM', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RAISE9) { A_FlightChase(); }
	S_ENTITY_RAISE9('MNAM', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RAISE10) { A_FlightChase(); }
	S_ENTITY_RAISE10('MNAM', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RAISE11) { A_FlightChase(); }
	S_ENTITY_RAISE11('MNAM', 10 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RAISE12) { A_FlightChase(); }
	S_ENTITY_RAISE12('MNAM', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_LOOK1) { A_FlightChase(); }
	S_ENTITY_LOOK1('MNAL', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_LOOK2) { A_Look(); }
	S_ENTITY_LOOK2('MNAL', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_LOOK1) { A_FlightChase(); }
	S_ENTITY_RUN1('MNAL', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN2) { A_Chase(); }
	S_ENTITY_RUN2('MNAL', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN3) { A_Chase(); }
	S_ENTITY_RUN3('MNAL', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN4) { A_FlightChase(); }
	S_ENTITY_RUN4('MNAL', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN5) { A_Chase(); }
	S_ENTITY_RUN5('MNAL', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN6) { A_Chase(); }
	S_ENTITY_RUN6('MNAL', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN7) { A_Chase(); }
	S_ENTITY_RUN7('MNAL', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN8) { A_FlightChase(); }
	S_ENTITY_RUN8('MNAL', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN9) { A_Chase(); }
	S_ENTITY_RUN9('MNAL', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN10) { A_Chase(); }
	S_ENTITY_RUN10('MNAL', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN11) { A_Chase(); }
	S_ENTITY_RUN11('MNAL', 10 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN1) { A_FlightChase(); }
	S_ENTITY_MELEE1('MNAL', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_MELEE2) { A_FaceTarget(); }
	S_ENTITY_MELEE2('MNAL', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_MELEE3) { A_SpecterMelee(); }
	S_ENTITY_MELEE3('MNAL', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN3) { }
	S_ENTITY_ATK1('MNAL', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_ATK2) { A_FaceTarget(); }
	S_ENTITY_ATK2('MNAL', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_ATK3) { A_EntityAttack(); }
	S_ENTITY_ATK3('MNAL', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ENTITY_RUN11) { }
	S_ENTITY_PAIN('MNAL', 9 | FF_FULLBRIGHT, 2.0 / 35.0, S_ENTITY_RUN7) { A_Pain(); }
	S_ENTITY_DIE1('MNAL', 11 | FF_FULLBRIGHT, 7.0 / 35.0, S_ENTITY_DIE2) { A_SpecterTossChunk(); }
	S_ENTITY_DIE2('MNAL', 12 | FF_FULLBRIGHT, 7.0 / 35.0, S_ENTITY_DIE3) { A_Scream(); }
	S_ENTITY_DIE3('MNAL', 13 | FF_FULLBRIGHT, 7.0 / 35.0, S_ENTITY_DIE4) { A_SpecterTossChunk(); }
	S_ENTITY_DIE4('MNAL', 14 | FF_FULLBRIGHT, 7.0 / 35.0, S_ENTITY_DIE5) { A_SpecterTossChunk(); }
	S_ENTITY_DIE5('MNAL', 15 | FF_FULLBRIGHT, 7.0 / 35.0, S_ENTITY_DIE6) { A_SpecterTossHead(); }
	S_ENTITY_DIE6('MNAL', 16 | FF_FULLBRIGHT, 64.0 / 35.0, S_ENTITY_DIE7) { A_SpecterTossChunk(); }
	S_ENTITY_DIE7('MNAL', 16 | FF_FULLBRIGHT, 6.0 / 35.0, S_NULL) { A_EntityDeath(); }
}

defaultproperties
{
	Health = 2500;
	Radius = 130.0;
	Height = 8.0;
	Mass = 1000.0;
	StepSpeed = 13.0;
	PainChance = 1.0;
	Translucency = 66;
	bSpecial = true;
	bNoGravity = true;
	bUnknown5 = true;
	bFloat = true;
	bUnknown4 = true;
	bUnknown2 = true;
	bUnknown3 = true;
	bNoDeathmatch = true;
	IdleState = S_ENTITY_RAISE1;
	SeeState = S_ENTITY_RUN1;
	MeleeState = S_ENTITY_MELEE1;
	MissileState = S_ENTITY_ATK1;
	PainState = S_ENTITY_PAIN;
	DeathState = S_ENTITY_DIE1;
	SightSound = 'EntitySight';
	ActiveSound = 'SpecterActive';
	AttackSound = 'ReaverBlade';
	PainSound = 'SpecterPain';
	DeathSound = 'EntityDeath';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2004/10/18 06:35:21  dj_jl
//  Implemented many monsters, sigil and some more.
//
//  Revision 1.1  2002/11/02 08:20:56  dj_jl
//  New style classes.
//
//**************************************************************************
