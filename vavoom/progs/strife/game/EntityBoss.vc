//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class EntityBoss : Pawn
	__mobjinfo__(128);

TVec BossSpawnPos;

//==========================================================================
//
//	A_EntityAttack
//
//==========================================================================

final void A_EntityAttack()
{
	float r;

	if (!Target)
		return;

	A_FaceTarget();

	r = Random();
	if (r < 0.25)
		A_Specter3Attack();
	else if (r < 0.375)
		A_SpecterAttack();
	else if (r < 0.5)
		A_Specter4Attack();
	else if (r < 0.625)
		A_Specter5Attack();
	else
		A_Specter2Attack();
}

//==========================================================================
//
//	A_EntityDeath
//
//==========================================================================

final void A_EntityDeath()
{
	//	Of course this isn't 100% accurate, but it does its job		-kaiser
	Spawn(EntitySecond, BossSpawnPos + vector(-240.0, -itof(P_Random() & 192), 0.0));
	Spawn(EntitySecond, BossSpawnPos + vector(-itof(P_Random() & 192), 240.0, 0.0));
	Spawn(EntitySecond, BossSpawnPos + vector(itof(P_Random() & 192), -240.0, 0.0));
}

states
{
Spawn:
	MNAM A 100 A_SentinelBob
	MNAM B 60 Bright A_SentinelBob
	MNAM CDEFGHIJKL 4 Bright A_SentinelBob
	MNAL A 4 Bright A_Look
	MNAL B 4 Bright A_SentinelBob
	Goto Spawn+12
See:
	MNAL AB 4 Bright A_Chase
	MNAL C 4 Bright A_SentinelBob
	MNAL DEF 4 Bright A_Chase
	MNAL G 4 Bright A_SentinelBob
	MNAL HIJ 4 Bright A_Chase
	MNAL K 4 Bright A_SentinelBob
	Loop
Melee:
	MNAL J 4 Bright A_FaceTarget
	MNAL I 4 Bright A_SpecterMelee
	MNAL C 4 Bright
	Goto See+2
Missile:
	MNAL F 4 Bright A_FaceTarget
	MNAL I 4 Bright A_EntityAttack
	MNAL E 4 Bright
	Goto See+10
Pain:
	MNAL J 2 Bright A_Pain
	Goto See+6
Death:
	MNAL L 7 Bright A_SpecterTossChunk
	MNAL M 7 Bright A_Scream
	MNAL NO 7 Bright A_SpecterTossChunk
	MNAL P 7 Bright A_SpecterTossHead
	MNAL Q 64 Bright A_SpecterTossChunk
	MNAL Q 6 Bright A_EntityDeath
	Stop
}

defaultproperties
{
	Health = 2500;
	Radius = 130.0;
	Height = 8.0;
	Mass = 1000.0;
	Speed = 13.0 * 35.0;
	FloatSpeed = 175.0;
	PainChance = 1.0;
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
	bShadow = true;
	bSpecial = true;
	bNoGravity = true;
	bLookAllAround = true;
	bFloat = true;
	bInCombat = true;
	bUnknown2 = true;
	bSpectral = true;
	bNoDeathmatch = true;
	bNoBlockMonst = true;
	SightSound = 'entity/sight';
	ActiveSound = 'entity/active';
	AttackSound = 'entity/melee';
	PainSound = 'entity/pain';
	DeathSound = 'entity/death';
	Obituary = "$ob_entity";
}
