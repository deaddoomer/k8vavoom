//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Crusader : Pawn
	__mobjinfo__(3005);

//==========================================================================
//
//	EnemyCloseEnough
//
//==========================================================================

final bool EnemyCloseEnough()
{
	if (CanSee(Target) && ReactionCount == 0)
	{
		return DistTo2(Target) < 264.0;
	}
	return false;
}

//==========================================================================
//
//	NoBlockingSet
//
//==========================================================================

void NoBlockingSet()
{
	DropItem(EnergyPod, 20, 1.0);
}

//==========================================================================
//
//	GetExplodeParms
//
//==========================================================================

void GetExplodeParms(out int damage, out float distance, out byte damageSelf)
{
	damage = 64;
	distance = 64.0;
}

//==========================================================================
//
//	A_CrusaderChoose
//
//==========================================================================

final void A_CrusaderChoose()
{
	if (!Target)
		return;

	if (EnemyCloseEnough())
	{
		A_FaceTarget();
		Angles.yaw = AngleMod360(Angles.yaw - 45.0 / 4.0);
		SpawnMissileZAimed(40.0, Target, FastFlameMissile);
	}
	else
	{
		if (CheckMissileRange())
		{
			A_FaceTarget();
			SpawnMissileZAimed(56.0, Target, CrusaderMissile);
			Angles.yaw -= 45.0 / 32.0;
			SpawnMissileZAimed(40.0, Target, CrusaderMissile);
			Angles.yaw += 45.0 / 16.0;
			SpawnMissileZAimed(40.0, Target, CrusaderMissile);
			Angles.yaw -= 45.0 / 16.0;
			ReactionCount += 15;
		}
		SetState(SeeState);
	}
}

//==========================================================================
//
//	A_CrusaderSweepLeft
//
//==========================================================================

final void A_CrusaderSweepLeft()
{
	EntityEx misl;

	Angles.yaw = AngleMod360(Angles.yaw + 45.0 / 8.0);
	misl = SpawnMissileZAimed(48.0, Target, FastFlameMissile);
	if (misl)
	{
		misl.Velocity.z = 1.0 * 35.0;
	}
}

//==========================================================================
//
//	A_CrusaderSweepRight
//
//==========================================================================

final void A_CrusaderSweepRight()
{
	EntityEx misl;

	Angles.yaw = AngleMod360(Angles.yaw - 45.0 / 8.0);
	misl = SpawnMissileZAimed(48.0, Target, FastFlameMissile);
	if (misl)
	{
		misl.Velocity.z = 1.0 * 35.0;
	}
}

//==========================================================================
//
//	A_CrusaderRefire
//
//==========================================================================

final void A_CrusaderRefire()
{
	if (!Target || Target.Health <= 0 || !CanSee(Target))
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//	A_CrusaderDeath
//
//==========================================================================

final void A_CrusaderDeath()
{
	if (!CheckBossDeath())
	{
		return;
	}
	StrifeLevelInfo(Level).EV_DoFloor(667, 8, 0, 0, 0,
		FloorMover::FLOOREV_LowerToLowest, NULL);
}

states
{
Spawn:
	ROB2 Q 10 A_Look
	Loop
See:
	ROB2 AABBCCDD 3 A_Chase
	Loop
Missile:
	ROB2 E 3 A_FaceTarget
	ROB2 F 2 Bright A_CrusaderChoose
	ROB2 E 2 Bright A_CrusaderSweepLeft
	ROB2 F 3 Bright A_CrusaderSweepLeft
	ROB2 E 2 Bright A_CrusaderSweepLeft
	ROB2 F 2 Bright A_CrusaderSweepLeft
	ROB2 E 2 Bright A_CrusaderSweepRight
	ROB2 F 2 Bright A_CrusaderSweepRight
	ROB2 E 2 Bright A_CrusaderSweepRight
	ROB2 F 2 A_CrusaderRefire
	Loop
Pain:
	ROB2 D 1 A_Pain
	Goto See
Death:
	ROB2 G 3 A_Scream
	ROB2 H 5 A_XDying
	ROB2 I 4 Bright A_XDying
	ROB2 J 4 Bright A_ExplodeAndAlert
	ROB2 K 4 Bright A_Fall
	ROB2 L 4 A_ExplodeAndAlert
	ROB2 MN 4 A_XDying
	ROB2 O 4 A_ExplodeAndAlert
	ROB2 P -1 A_CrusaderDeath
	Stop
}

defaultproperties
{
	Health = 400;
	Radius = 40.0;
	Height = 56.0;
	Mass = 400.0;
	StepSpeed = 8.0;
	PainChance = 0.5;
	bInCombat = true;
	bNoBlood = true;
	bExplodeParticles = true;
	SightSound = 'crusader/sight';
	ActiveSound = 'crusader/active';
	PainSound = 'crusader/pain';
	DeathSound = 'crusader/death';
	ExplodeEffect = RGB(187, 59, 0);
	DLightRadius = 118.0;
}
