//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Acolyte : Pawn
	abstract;

//==========================================================================
//
//	A_AcolyteBits
//
//==========================================================================

final void A_AcolyteBits()
{
	if (bSpawnFlag8)
	{
		Alpha = 0.333;
	}
	if (bSpawnFlag9)
	{
		bUnknown2 = true;
	}
}

//==========================================================================
//
//	A_AcolyteDeath
//
//==========================================================================

final void A_AcolyteDeath()
{
	int i;
	Actor Other;

	//	Remove any shadowy effects on the Acolyte.
	Alpha = 1.0;

	//	Only the Blue Acolyte does extra stuff on death.
	if (Class != AcolyteBlue)
		return;

	//	Make sure there is a player alive for victory.
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
		{
			break;
		}
	}
	if (i == MAXPLAYERS)
		return;

	//	Make sure all the other blue acolytes are dead.
	foreach AllThinkers(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			//	Found a living one.
			return;
		}
	}

	EntityEx(Level.Game.Players[0].MO).GiveInventoryType(QuestItem7);
	Player(Level.Game.Players[0]).SetObjectives(14);
	Player(Level.Game.Players[0]).ClientVoice(14);
}

__states__
{
	S_ACOLYTE_STAND('AGRD', 0, 5.0 / 35.0, S_ACOLYTE_STAND) = A_Stand
	S_ACOLYTE_STAND_R('AGRD', 1, 8.0 / 35.0, S_ACOLYTE_STAND) = A_ClearShadow
	S_ACOLYTE_STAND_L('AGRD', 3, 8.0 / 35.0, S_ACOLYTE_STAND) = none
	S_ACOLYTE_WALK1('AGRD', 0, 5.0 / 35.0, S_ACOLYTE_WALK2) = A_Walk
	S_ACOLYTE_WALK2('AGRD', 1, 5.0 / 35.0, S_ACOLYTE_WALK3) = A_Walk
	S_ACOLYTE_WALK3('AGRD', 2, 5.0 / 35.0, S_ACOLYTE_WALK4) = A_Walk
	S_ACOLYTE_WALK4('AGRD', 3, 5.0 / 35.0, S_ACOLYTE_WALK5) = A_Walk
	S_ACOLYTE_WALK5('AGRD', 0, 5.0 / 35.0, S_ACOLYTE_WALK6) = A_Walk
	S_ACOLYTE_WALK6('AGRD', 1, 5.0 / 35.0, S_ACOLYTE_WALK7) = A_Walk
	S_ACOLYTE_WALK7('AGRD', 2, 5.0 / 35.0, S_ACOLYTE_WALK8) = A_Walk
	S_ACOLYTE_WALK8('AGRD', 3, 5.0 / 35.0, S_ACOLYTE_STAND) = A_Walk
	S_ACOLYTE_RUN1('AGRD', 0, 6.0 / 35.0, S_ACOLYTE_RUN2) = A_AcolyteBits
	S_ACOLYTE_RUN2('AGRD', 1, 6.0 / 35.0, S_ACOLYTE_RUN3) = A_Chase
	S_ACOLYTE_RUN3('AGRD', 2, 6.0 / 35.0, S_ACOLYTE_RUN4) = A_Chase
	S_ACOLYTE_RUN4('AGRD', 3, 6.0 / 35.0, S_ACOLYTE_RUN1) = A_Chase
	S_ACOLYTE_ATK1('AGRD', 4, 8.0 / 35.0, S_ACOLYTE_ATK2) = A_FaceTarget
	S_ACOLYTE_ATK2('AGRD', 5, 4.0 / 35.0, S_ACOLYTE_ATK3) = A_RiffleAttack
	S_ACOLYTE_ATK3('AGRD', 4, 4.0 / 35.0, S_ACOLYTE_ATK4) = A_RiffleAttack
	S_ACOLYTE_ATK4('AGRD', 5, 6.0 / 35.0, S_ACOLYTE_RUN1) = A_RiffleAttack
	S_ACOLYTE_PAIN('AGRD', 14, 8.0 / 35.0, S_ACOLYTE_RUN1) = A_Pain
	S_ACOLYTE_DIE1('AGRD', 6, 4.0 / 35.0, S_ACOLYTE_DIE2) = none
	S_ACOLYTE_DIE2('AGRD', 7, 4.0 / 35.0, S_ACOLYTE_DIE3) = A_Scream
	S_ACOLYTE_DIE3('AGRD', 8, 4.0 / 35.0, S_ACOLYTE_DIE4) = none
	S_ACOLYTE_DIE4('AGRD', 9, 3.0 / 35.0, S_ACOLYTE_DIE5) = none
	S_ACOLYTE_DIE5('AGRD', 10, 3.0 / 35.0, S_ACOLYTE_DIE6) = A_Fall
	S_ACOLYTE_DIE6('AGRD', 11, 3.0 / 35.0, S_ACOLYTE_DIE7) = none
	S_ACOLYTE_DIE7('AGRD', 12, 3.0 / 35.0, S_ACOLYTE_DIE8) = A_AcolyteDeath
	S_ACOLYTE_DIE8('AGRD', 13, 1400.0 / 35.0, S_ACOLYTE_XDIE11) = none
	S_ACOLYTE_XDIE1('GIBS', 0, 5.0 / 35.0, S_ACOLYTE_XDIE2) = A_Fall
	S_ACOLYTE_XDIE2('GIBS', 1, 5.0 / 35.0, S_ACOLYTE_XDIE3) = A_XDying
	S_ACOLYTE_XDIE3('GIBS', 2, 5.0 / 35.0, S_ACOLYTE_XDIE4) = A_XDying
	S_ACOLYTE_XDIE4('GIBS', 3, 4.0 / 35.0, S_ACOLYTE_XDIE5) = A_XDying
	S_ACOLYTE_XDIE5('GIBS', 4, 4.0 / 35.0, S_ACOLYTE_XDIE6) = A_XScream
	S_ACOLYTE_XDIE6('GIBS', 5, 4.0 / 35.0, S_ACOLYTE_XDIE7) = A_XDying
	S_ACOLYTE_XDIE7('GIBS', 6, 4.0 / 35.0, S_ACOLYTE_XDIE8) = none
	S_ACOLYTE_XDIE8('GIBS', 7, 4.0 / 35.0, S_ACOLYTE_XDIE9) = none
	S_ACOLYTE_XDIE9('GIBS', 8, 5.0 / 35.0, S_ACOLYTE_XDIE10) = none
	S_ACOLYTE_XDIE10('GIBS', 9, 5.0 / 35.0, S_ACOLYTE_XDIE11) = A_AcolyteDeath
	S_ACOLYTE_XDIE11('GIBS', 10, 5.0 / 35.0, S_ACOLYTE_XDIE12) = none
	S_ACOLYTE_XDIE12('GIBS', 11, 1400.0 / 35.0, none) = none
}

defaultproperties
{
	ClassName = 'ACOLYTE';
	Health = 70;
	GibsHealth = -35;
	Radius = 24.0;
	Height = 64.0;
	Mass = 400.0;
	StepSpeed = 7.0;
	PainChance = 0.5859375;
	IdleState = S_ACOLYTE_STAND;
	IdleRightState = S_ACOLYTE_STAND_R;
	IdleLeftState = S_ACOLYTE_STAND_L;
	WalkState = S_ACOLYTE_WALK1;
	SeeState = S_ACOLYTE_RUN1;
	MissileState = S_ACOLYTE_ATK1;
	PainState = S_ACOLYTE_PAIN;
	DeathState = S_ACOLYTE_DIE1;
	GibsDeathState = S_ACOLYTE_XDIE1;
	FireDeathState = S_BURN1;
	DisruptDeathState = S_DISRUPT1;
	SightSound = 'acolyte/sight';
	ActiveSound = 'acolyte/active';
	AttackSound = 'acolyte/rifle';
	PainSound = 'acolyte/pain';
	DeathSound = 'acolyte/death';
	DLightColour = RGB(203, 111, 0);
}
