//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Acolyte : StrifeHumanoid
	abstract;

//==========================================================================
//
//	A_AcolyteBits
//
//==========================================================================

final void A_AcolyteBits()
{
	if (bSpawnFlag8)
	{
		RenderStyle = STYLE_Translucent;
		Alpha = 0.333;
		bShadow = true;
	}
	if (bSpawnFlag9)
	{
		bUnknown2 = true;
	}
}

//==========================================================================
//
//	A_AcolyteDeath
//
//==========================================================================

final void A_AcolyteDeath()
{
	int i;
	Actor Other;

	//	Remove any shadowy effects on the Acolyte.
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;

	//	Only the Blue Acolyte does extra stuff on death.
	if (Class != AcolyteBlue)
		return;

	//	Make sure there is a player alive for victory.
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
		{
			break;
		}
	}
	if (i == MAXPLAYERS)
		return;

	//	Make sure all the other blue acolytes are dead.
	foreach AllThinkers(EntityEx, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			//	Found a living one.
			return;
		}
	}

	EntityEx(Level.Game.Players[0].MO).GiveInventoryType(QuestItem7);
	Player(Level.Game.Players[0]).SetObjectives(14);
	Player(Level.Game.Players[0]).ClientVoice(14);
}

states
{
Spawn:
	AGRD A 5 A_Look2
	Loop
LookRight:
	AGRD B 8 A_ClearShadow
	Goto Spawn
LookLeft:
	AGRD D 8
	Goto Spawn
Walk:
	AGRD ABCDABCD 5 A_Wander
	Loop
See:
	AGRD A 6 A_AcolyteBits
	AGRD BCD 6 A_Chase
	Loop
Missile:
	AGRD E 8 A_FaceTarget
	AGRD FE 4 A_RiffleAttack
	AGRD F 6 A_RiffleAttack
	Goto See
Pain:
	AGRD O 8 A_Pain
	Goto See
Death:
	AGRD G 4
	AGRD H 4 A_Scream
	AGRD I 4
	AGRD J 3
	AGRD K 3 A_Fall
	AGRD L 3
	AGRD M 3 A_AcolyteDeath
	AGRD N 1400
	Goto XDeath+10
XDeath:
	GIBS A 5 A_Fall
	GIBS BC 5 A_XDying
	GIBS D 4 A_XDying
	GIBS E 4 A_XScream
	GIBS F 4 A_XDying
	GIBS GH 4
	GIBS I 5
	GIBS J 5 A_AcolyteDeath
	GIBS K 5
	GIBS L 1400
	Stop
}

defaultproperties
{
	StrifeName = "ACOLYTE";
	Health = 70;
	GibsHealth = -35;
	Radius = 24.0;
	Height = 64.0;
	Mass = 400.0;
	Speed = 7.0 * 35.0;
	PainChance = 0.5859375;
	SightSound = 'acolyte/sight';
	ActiveSound = 'acolyte/active';
	AttackSound = 'acolyte/rifle';
	PainSound = 'acolyte/pain';
	DeathSound = 'acolyte/death';
	DLightColour = RGB(203, 111, 0);
	DLightRadius = 118.0;
	Obituary = "$ob_acolyte";
}
