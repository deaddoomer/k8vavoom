//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponSigil : Weapon;

//==========================================================================
//
//	A_SigilSound
//
//==========================================================================

void A_SigilSound()
{
	Player.MO.PlaySound('weapons/sigil', CHAN_WEAPON);
	SpriteFrame = Player(Player).Sigil;
}

//==========================================================================
//
//	A_SigilShowFlash
//
//==========================================================================

void A_SigilShowFlash()
{
	Player(Player).SetPsprite(ps_flash, FlashState);
	SpriteFrame = Player(Player).Sigil;
}

//==========================================================================
//
//	A_FireSigil
//
//==========================================================================

void A_FireSigil()
{
	Actor sigil;
	float angle;
	Actor sigilspread;
	int i;

	Actor(Player.MO).Damage(none, Actor(Player.MO), (Player(Player).Sigil + 1) * 4);
	angle = Player.MO.Angles.yaw + 180.0;
	Player.MO.Velocity.x += 4.0 * 35.0 * cos(angle);
	Player.MO.Velocity.y += 4.0 * 35.0 * sin(angle);
	StrifeLevelInfo(Player.MO.Level).NoiseAlert(Actor(Player.MO), Actor(Player.MO));

	if (Player(Player).Sigil == 4)
	{
		Player(Player).SpawnPlayerMissile(SigilFX3);
	}
	else if (Player(Player).Sigil == 3)
	{
		Player(Player).SpawnPlayerMissile(SigilFX5);
	}
	else if (Player(Player).Sigil == 2)
	{
		for (i = 0; i < 20; i++)
		{
			sigilspread = Player(Player).SpawnPlayerMissileAngle(SigilFX2,
				Player.MO.Angles.yaw - 90.0 + itof(i) * (45.0 / 4.0));
			angle = sigilspread.Angles.yaw;
			sigilspread.Velocity.x = sigilspread.Speed * cos(angle);
			sigilspread.Velocity.y = sigilspread.Speed * sin(angle);
		}
	}
	else if (Player(Player).Sigil == 1)
	{
		Player(Player).SpawnPlayerMissile(SigilFX1);
	}
	else
	{
		sigil = StrifeLevelInfo(Player.Level).Spawn(SigilFloor, Player.MO.Origin + vector(0.0, 0.0, 32.0));

		if (sigil.SightSound)
			sigil.PlaySound(sigil.SightSound, CHAN_VOICE);

		sigil.Instigator = Actor(Player.MO);
		sigil.Origin.z = sigil.FloorZ;
		Actor(Player.MO).Aim(16.0 * 64.0);
		if (!Actor(Player.MO).linetarget)
		{
			sigil.Origin.x = Player.MO.Origin.x;
			sigil.Origin.y = Player.MO.Origin.y;
		}
		else
		{
			sigil.Origin.x = Actor(Player.MO).linetarget.Origin.x;
			sigil.Origin.y = Actor(Player.MO).linetarget.Origin.y;
		}
	}
	SpriteFrame = Player(Player).Sigil;
}

//==========================================================================
//
//	A_SigilFlash
//
//==========================================================================

void A_SigilFlash()
{
	//Player.MiscTime = 10;
	Actor(Player.MO).Damage(none, none, 5);
	Player.FixedColormap = Player::INVERSECOLORMAP;
}

__states__
{
	S_SIGIL('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGIL)
	{
		A_WeaponReady();
		SpriteFrame = Player(Player).Sigil;
	}
	S_SIGIL01('SIGH', 1 | FF_FULLBRIGHT, -1.0, none) { }
	S_SIGIL02('SIGH', 2 | FF_FULLBRIGHT, -1.0, none) { }
	S_SIGIL03('SIGH', 3 | FF_FULLBRIGHT, -1.0, none) { }
	S_SIGIL04('SIGH', 4 | FF_FULLBRIGHT, -1.0, none) { }
	S_SIGILDOWN('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGILDOWN)
	{
		A_Lower();
		SpriteFrame = Player(Player).Sigil;
	}
	S_SIGILUP('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGILUP)
	{
		A_Raise();
		SpriteFrame = Player(Player).Sigil;
	}
	S_SIGIL1('SIGH', 0 | FF_FULLBRIGHT, 18.0 / 35.0, S_SIGIL2) { A_SigilSound(); }
	S_SIGIL2('SIGH', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_SIGIL3) { A_SigilShowFlash(); }
	S_SIGIL3('SIGH', 0, 10.0 / 35.0, S_SIGIL4) { A_FireSigil(); }
	S_SIGIL4('SIGH', 0, 5.0 / 35.0, S_SIGIL)
	{
		A_ClearFlash();
		SpriteFrame = Player(Player).Sigil;
	}
	S_SIGILFLASH1('SIGF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGILFLASH2) { A_Light2(); }
	S_SIGILFLASH2('SIGF', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGILFLASH3)
	{
		WeaponSigil(Player.ViewEnts[ps_weapon]).A_SigilFlash();
	}
	S_SIGILFLASH3('SIGF', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE)
	{
		A_Light1(); 
		Player.FixedColormap = 0;
	}
}

defaultproperties
{
	Ammo = StrifeDefs::am_noammo;
	UpState = S_SIGILUP;
	DownState = S_SIGILDOWN;
	ReadyState = S_SIGIL;
	AttackState = S_SIGIL1;
	FlashState = S_SIGILFLASH1;
}
