//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponSigil : Weapon;

//==========================================================================
//
//	SetSigilSprite
//
//==========================================================================

void SetSigilSprite()
{
	switch (Player(Owner.Player).Sigil)
	{
	case 1:
		Owner.Player.SetViewState(ps_flash, S_SIGIL01);
		break;
	case 2:
		Owner.Player.SetViewState(ps_flash, S_SIGIL02);
		break;
	case 3:
		Owner.Player.SetViewState(ps_flash, S_SIGIL03);
		break;
	case 4:
		Owner.Player.SetViewState(ps_flash, S_SIGIL04);
		break;
	}
}

//==========================================================================
//
//	A_SigilSound
//
//==========================================================================

final void A_SigilSound()
{
	Owner.PlaySound('weapons/sigil', CHAN_WEAPON);
	SetSigilSprite();
}

//==========================================================================
//
//	A_SigilShowFlash
//
//==========================================================================

final void A_SigilShowFlash()
{
	Owner.Player.SetViewState(ps_flash, FlashState);
}

//==========================================================================
//
//	A_FireSigil
//
//==========================================================================

final void A_FireSigil()
{
	Actor		sigil;
	float		angle;
	Actor		sigilspread;
	int			i;
	TVec		dir;
	EntityEx	AimTarget;

	Actor(Owner).Damage(none, Actor(Owner), (Player(Owner.Player).Sigil + 1) * 4);
	angle = Owner.Angles.yaw + 180.0;
	Owner.Velocity.x += 4.0 * 35.0 * cos(angle);
	Owner.Velocity.y += 4.0 * 35.0 * sin(angle);
	StrifeLevelInfo(Level).NoiseAlert(Actor(Owner), Actor(Owner));

	if (Player(Owner.Player).Sigil == 4)
	{
		Player(Owner.Player).SpawnPlayerMissile(SpectralLightningBigBall1);
	}
	else if (Player(Owner.Player).Sigil == 3)
	{
		Player(Owner.Player).SpawnPlayerMissile(SpectralLightningBigV1);
	}
	else if (Player(Owner.Player).Sigil == 2)
	{
		for (i = 0; i < 20; i++)
		{
			sigilspread = Player(Owner.Player).SpawnPlayerMissileAngle(
				SpectralLightningBall1,
				Owner.Angles.yaw - 90.0 + itof(i) * (45.0 / 4.0));
			angle = sigilspread.Angles.yaw;
			sigilspread.Velocity.x = sigilspread.Speed * cos(angle);
			sigilspread.Velocity.y = sigilspread.Speed * sin(angle);
		}
	}
	else if (Player(Owner.Player).Sigil == 1)
	{
		Player(Owner.Player).SpawnPlayerMissile(SpectralLightningH1);
	}
	else
	{
		sigil = StrifeLevelInfo(Level).Spawn(SpectralLightningSpot,
			Owner.Origin + vector(0.0, 0.0, 32.0));

		if (sigil.SightSound)
			sigil.PlaySound(sigil.SightSound, CHAN_VOICE);

		sigil.Target = Actor(Owner);
		sigil.Origin.z = sigil.FloorZ;
		AimTarget = Actor(Owner).Aim(dir, 16.0 * 64.0);
		if (!AimTarget)
		{
			sigil.Origin.x = Owner.Origin.x;
			sigil.Origin.y = Owner.Origin.y;
		}
		else
		{
			sigil.Origin.x = AimTarget.Origin.x;
			sigil.Origin.y = AimTarget.Origin.y;
		}
	}
}

//==========================================================================
//
//	A_SigilFlash
//
//==========================================================================

final void A_SigilFlash()
{
	//Player.MiscTime = 10;
	Actor(Owner).Damage(none, none, 5);
	Owner.Player.FixedColourmap = Player::INVERSECOLOURMAP;
}

__states__
{
	S_SIGIL('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGIL)
	{
		A_WeaponReady();
		SetSigilSprite();
	}
	S_SIGIL01('SIGH', 1 | FF_FULLBRIGHT, -1.0, none) = none
	S_SIGIL02('SIGH', 2 | FF_FULLBRIGHT, -1.0, none) = none
	S_SIGIL03('SIGH', 3 | FF_FULLBRIGHT, -1.0, none) = none
	S_SIGIL04('SIGH', 4 | FF_FULLBRIGHT, -1.0, none) = none
	S_SIGILDOWN('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGILDOWN)
	{
		SetSigilSprite();
		A_Lower();
	}
	S_SIGILUP('SIGH', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_SIGILUP)
	{
		A_Raise();
		SetSigilSprite();
	}
	S_SIGIL1('SIGH', 0 | FF_FULLBRIGHT, 18.0 / 35.0, S_SIGIL2) = A_SigilSound
	S_SIGIL2('SIGH', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_SIGIL3) = A_SigilShowFlash
	S_SIGIL3('SIGH', 0, 10.0 / 35.0, S_SIGIL4) = A_FireSigil
	S_SIGIL4('SIGH', 0, 5.0 / 35.0, S_SIGIL)
	{
		A_ClearFlash();
		SetSigilSprite();
	}
	S_SIGILFLASH1('SIGF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGILFLASH2) = A_Light2
	S_SIGILFLASH2('SIGF', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGILFLASH3) = A_SigilFlash
	S_SIGILFLASH3('SIGF', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE)
	{
		A_Light1();
		Owner.Player.FixedColourmap = 0;
	}
}

defaultproperties
{
	Ammo = StrifeDefs::am_noammo;
	UpState = S_SIGILUP;
	DownState = S_SIGILDOWN;
	ReadyState = S_SIGIL;
	AttackState = S_SIGIL1;
	FlashState = S_SIGILFLASH1;
}
