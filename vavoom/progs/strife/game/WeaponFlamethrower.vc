//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFlamethrower : Weapon;

//==========================================================================
//
//	A_FireFlamethrower
//
//==========================================================================

final void A_FireFlamethrower()
{
	Actor A;

	Owner.SetState(Actor(Owner).MissileState);
	Player(Owner.Player).Ammo[Ammo]--;
	Owner.Angles.yaw = AngleMod360(Owner.Angles.yaw +
		(Random() - Random()) * 45.0 / 8.0);
	Owner.Player.bFixAngle = true;
	A = Player(Owner.Player).SpawnPlayerMissile(FlameFX1);
	if (A)
	{
		A.Velocity.z += 20.0 * 35.0 / 5.0;
	}
}

__states__
{
	S_FLAME('FLMT', 0, 3.0 / 35.0, S_FLAME01) = A_WeaponReady
	S_FLAME01('FLMT', 1, 3.0 / 35.0, S_FLAME) = A_WeaponReady
	S_FLAMEDOWN('FLMT', 0, 1.0 / 35.0, S_FLAMEDOWN) = A_Lower
	S_FLAMEUP('FLMT', 0, 1.0 / 35.0, S_FLAMEUP) = A_Raise
	S_FLAME1('FLMF', 0, 2.0 / 35.0, S_FLAME2) = A_FireFlamethrower
	S_FLAME2('FLMF', 1, 3.0 / 35.0, S_FLAME) = A_ReFire
}

defaultproperties
{
	Ammo = StrifeDefs::am_cell;
	UpState = S_FLAMEUP;
	DownState = S_FLAMEDOWN;
	ReadyState = S_FLAME;
	AttackState = S_FLAME1;
	FlashState = S_LIGHTDONE;
}
