//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFlamethrower : Weapon;

//==========================================================================
//
//	A_FireFlamethrower
//
//==========================================================================

void A_FireFlamethrower()
{
	Actor A;

	Player.MO.SetState(Actor(Player.MO).MissileState);
	Player(Player).Ammo[Ammo]--;
	Player.MO.Angles.yaw = AngleMod360(Player.MO.Angles.yaw +
		(Random() - Random()) * 45.0 / 8.0);
	Player.bFixAngle = true;
	A = Player(Player).SpawnPlayerMissile(FlameFX1);
	if (A)
	{
		A.Velocity.z += 20.0 * 35.0 / 5.0;
	}
}

__states__
{
	S_FLAME('FLMT', 0, 3.0 / 35.0, S_FLAME01) { A_WeaponReady(); }
	S_FLAME01('FLMT', 1, 3.0 / 35.0, S_FLAME) { A_WeaponReady(); }
	S_FLAMEDOWN('FLMT', 0, 1.0 / 35.0, S_FLAMEDOWN) { A_Lower(); }
	S_FLAMEUP('FLMT', 0, 1.0 / 35.0, S_FLAMEUP) { A_Raise(); }
	S_FLAME1('FLMF', 0, 2.0 / 35.0, S_FLAME2) { A_FireFlamethrower(); }
	S_FLAME2('FLMF', 1, 3.0 / 35.0, S_FLAME) { A_ReFire(); }
}

defaultproperties
{
	Ammo = StrifeDefs::am_cell;
	UpState = S_FLAMEUP;
	DownState = S_FLAMEDOWN;
	ReadyState = S_FLAME;
	AttackState = S_FLAME1;
	FlashState = S_LIGHTDONE;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2006/03/02 18:36:30  dj_jl
//  Don't use game specific classes in common.
//
//  Revision 1.6  2006/02/17 19:06:53  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.5  2004/12/22 07:56:47  dj_jl
//  Fully working Strife support.
//
//  Revision 1.4  2004/08/22 19:23:27  dj_jl
//  Moved many functions to player class.
//
//  Revision 1.3  2004/01/30 17:39:34  dj_jl
//  Implemented many action functions.
//
//  Revision 1.2  2003/11/12 16:51:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/11/02 08:20:57  dj_jl
//  New style classes.
//
//**************************************************************************
