//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MerchanderWeaponSmith : Pawn
	__mobjinfo__(116);

//==========================================================================
//
//	A_CloseUpShop
//
//==========================================================================

void A_CloseUpShop()
{
	StrifeLevelInfo(Level).EV_DoDoor(999, 64, 960, 0, 0, DOOREV_CloseWaitOpen, NULL, none);
	if (Enemy && Enemy.bIsPlayer)
	{
		P_NoiseAlert(Enemy, self);
	}
}

//==========================================================================
//
//	A_ClearSoundTarget
//
//==========================================================================

void A_ClearSoundTarget()
{
	Sector->SoundTarget = none;
}

__states__
{
	S_MERCHANDER_YES1('MRYS', 0, 30.0 / 35.0, S_MERCHANDER_STAND1) { }
	S_MERCHANDER_NO1('MRNO', 0, 6.0 / 35.0, S_MERCHANDER_NO2) { }
	S_MERCHANDER_NO2('MRNO', 1, 6.0 / 35.0, S_MERCHANDER_NO3) { }
	S_MERCHANDER_NO3('MRNO', 2, 10.0 / 35.0, S_MERCHANDER_NO4) { }
	S_MERCHANDER_NO4('MRNO', 1, 6.0 / 35.0, S_MERCHANDER_NO5) { }
	S_MERCHANDER_NO5('MRNO', 0, 6.0 / 35.0, S_MERCHANDER_STAND1) { }
	S_MERCHANDER_STAND1('MRST', 0, 10.0 / 35.0, S_MERCHANDER_STAND1) { A_Stand(); }
	S_MERCHANDER_LOOK1('MRLK', 0, 30.0 / 35.0, S_MERCHANDER_STAND1) { A_ActiveSound(); }
	S_MERCHANDER_LOOK2('MRLK', 1, 30.0 / 35.0, S_MERCHANDER_STAND1) { }
	S_MERCHANDER_BD1('MRBD', 0, 4.0 / 35.0, S_MERCHANDER_BD2) { }
	S_MERCHANDER_BD2('MRBD', 1, 4.0 / 35.0, S_MERCHANDER_BD3) { }
	S_MERCHANDER_BD3('MRBD', 2, 4.0 / 35.0, S_MERCHANDER_BD4) { }
	S_MERCHANDER_BD4('MRBD', 3, 4.0 / 35.0, S_MERCHANDER_BD5) { }
	S_MERCHANDER_BD5('MRBD', 4, 4.0 / 35.0, S_MERCHANDER_BD6) { }
	S_MERCHANDER_BD6('MRBD', 3, 4.0 / 35.0, S_MERCHANDER_BD7) { }
	S_MERCHANDER_BD7('MRBD', 2, 4.0 / 35.0, S_MERCHANDER_BD8) { }
	S_MERCHANDER_BD8('MRBD', 1, 4.0 / 35.0, S_MERCHANDER_BD9) { }
	S_MERCHANDER_BD9('MRBD', 0, 5.0 / 35.0, S_MERCHANDER_BD10) { }
	S_MERCHANDER_BD10('MRBD', 5, 6.0 / 35.0, S_MERCHANDER_STAND1) { }
	S_MERCHANDER_PAIN1('MRPN', 0, 3.0 / 35.0, S_MERCHANDER_PAIN2) { }
	S_MERCHANDER_PAIN2('MRPN', 1, 3.0 / 35.0, S_MERCHANDER_PAIN3) { A_Pain(); }
	S_MERCHANDER_PAIN3('MRPN', 2, 3.0 / 35.0, S_MERCHANDER_PAIN4) { }
	S_MERCHANDER_PAIN4('MRPN', 3, 9.0 / 35.0, S_MERCHANDER_PAIN5) { A_CloseUpShop(); }
	S_MERCHANDER_PAIN5('MRPN', 2, 4.0 / 35.0, S_MERCHANDER_PAIN6) { }
	S_MERCHANDER_PAIN6('MRPN', 1, 3.0 / 35.0, S_MERCHANDER_PAIN7) { }
	S_MERCHANDER_PAIN7('MRPN', 0, 3.0 / 35.0, S_MERCHANDER_STAND1) { A_ClearSoundTarget(); }
	S_MERCHANDER_GT1('MRGT', 0, 5.0 / 35.0, S_MERCHANDER_GT2) { }
	S_MERCHANDER_GT2('MRGT', 1, 5.0 / 35.0, S_MERCHANDER_GT3) { }
	S_MERCHANDER_GT3('MRGT', 2, 5.0 / 35.0, S_MERCHANDER_GT4) { }
	S_MERCHANDER_GT4('MRGT', 3, 5.0 / 35.0, S_MERCHANDER_GT5) { }
	S_MERCHANDER_GT5('MRGT', 4, 5.0 / 35.0, S_MERCHANDER_GT6) { }
	S_MERCHANDER_GT6('MRGT', 5, 5.0 / 35.0, S_MERCHANDER_GT7) { }
	S_MERCHANDER_GT7('MRGT', 6, 5.0 / 35.0, S_MERCHANDER_GT8) { }
	S_MERCHANDER_GT8('MRGT', 7, 5.0 / 35.0, S_MERCHANDER_GT9) { }
	S_MERCHANDER_GT9('MRGT', 8, 5.0 / 35.0, S_MERCHANDER_STAND1) { }
}

defaultproperties
{
	ConversationID = 2;
	ClassName = 'Weapon_Smith';
	Health = 10000000;
	Radius = 20.0;
	Height = 56.0;
	Mass = 5000.0;
	PainChance = 0.5859375;
	bCountKill = false;
	bCkeckNoMonsters = false;
	bActivateMCross = false;
	bNoDeathmatch = true;
	IdleState = S_MERCHANDER_STAND1;
	SeeState = S_MERCHANDER_PAIN1;
	PainState = S_MERCHANDER_PAIN1;
	PainSound = 'smith/pain';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.5  2005/12/27 22:22:28  dj_jl
//  Created level info class, moved action special handling to it.
//
//  Revision 1.4  2005/11/19 13:43:50  dj_jl
//  Renamed sounds.
//
//  Revision 1.3  2005/01/25 17:45:17  dj_jl
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.2  2004/01/30 17:41:47  dj_jl
//  Implemented many action functions.
//
//  Revision 1.1  2002/11/02 08:20:56  dj_jl
//  New style classes.
//
//**************************************************************************
