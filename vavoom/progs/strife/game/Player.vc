//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

const float
	INFRATIME		= 120.0;

const int
	MAXHEALTH		= 100,
	INITIAL_HEALTH	= 100,
	INITIAL_AMMO	= 50;

//==========================================================================
//
//  ResetPlayerOnSpawn
//
//==========================================================================

void ResetPlayerOnSpawn()
{
	::ResetPlayerOnSpawn();
}

//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================

int GetRebornHealth()
{
	return INITIAL_HEALTH;
}

//==========================================================================
//
//	GotAmmo
//
//==========================================================================

void GotAmmo(Ammo NewAmmo)
{
	// We were down to zero,
	// so select a new weapon.
	// Preferences are not user selectable.
	if (ReadyWeapon.bWimpyWeapon)
	{
		Weapon Best = BestWeapon(class<Ammo>(NewAmmo.Class));
		if (Best && Best.SelectionOrder < ReadyWeapon.SelectionOrder)
		{
			PendingWeapon = Best;
		}
	}
}

//==========================================================================
//
//	GetMaxHealth
//
//==========================================================================

int GetMaxHealth()
{
	return MAXHEALTH + Stamina;
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;

	impulse = Impulse;
	Impulse = 0;

	if (impulse <= 8)
	{
		ChangeWeapon(impulse);
	}
	else if (impulse == 11)
	{
		InventoryThrow();
	}
	else if (impulse == 13)
	{
		InventoryLeft();
	}
	else if (impulse == 14)
	{
		InventoryRight();
	}
	else if (impulse == 15)
	{
		InventoryUse();
	}
	else if (impulse == 16)
	{
		//  Suicide
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == 17)
	{
		PrevWeapon();
	}
	else if (impulse == 18)
	{
		NextWeapon();
	}
	else if (impulse >= 200 && impulse <= 205)
	{
		LineSpecialLevelInfo(Level).ConChoiceImpulse(impulse - 200);
	}
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	int					i;
	class<Inventory>	Cls;
	class<Weapon>		WpnCls;

	// Backpack
	if (Cmd_CheckParm("Backpack"))
	{
		Inventory I = Level.Spawn(AmmoSatchel,,,, false);
		I.bDropped = true;
		if (!I.TryPickup(EntityEx(MO)))
		{
			I.Destroy();
		}
		cprint("EXTRA AMMO");
	}

	// Weapons
	if (Cmd_CheckParm("Weapons"))
	{
		foreach AllClasses(Weapon, WpnCls)
		{
			if (!FindClassState(WpnCls, 'Ready'))
			{
				//	Abstract base class.
				continue;
			}
			if (WpnCls.default.bCheatNotWeapon)
			{
				continue;
			}
			Weapon Wpn = Level.Spawn(WpnCls,,,, false);
			Wpn.AmmoGive1 = 0;
			Wpn.AmmoGive2 = 0;
			if (!Wpn.TryPickup(EntityEx(MO)))
			{
				Wpn.Destroy();
			}
		}
		cprint("ALL WEAPONS");
	}

	// Ammo
	if (Cmd_CheckParm("Ammo"))
	{
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
			if (!AmmoItem)
			{
				AmmoItem = Level.Spawn(Cls,,,, false);
				if (!AmmoItem.TryPickup(EntityEx(MO)))
				{
					AmmoItem.Destroy();
					AmmoItem = none;
				}
			}
			if (AmmoItem)
			{
				AmmoItem.Amount = AmmoItem.MaxAmount;
			}
		}
		cprint("FULL AMMO");
	}

	// Keys
	if (Cmd_CheckParm("Keys"))
	{
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
		cprint("ALL KEYS");
	}

	// Health
	if (Cmd_CheckParm("Health"))
	{
		Health = MAXHEALTH + Stamina;
		MO.Health = MAXHEALTH + Stamina;
		cprint("FULL HEALTH");
	}

	// Comm unit
	if (Cmd_CheckParm("CommUnit"))
	{
		EntityEx(MO).GiveInventoryType(Communicator);
		cprint("YOU GOT IT");
	}

	// Sigil piece
	if (Cmd_CheckParm("Sigil"))
	{
		Sigil S = Level.Spawn(Sigil,,,, false);
		if (!S.SpecialDropAction(none))
		{
			S.Destroy();
		}
		cprint("SIGIL PIECE");
	}

	// Quest items.
	for (i = 0; i < 31; i++)
	{
		if (Cmd_CheckParm(va("Quest%d", i + 1)))
		{
			EntityEx(MO).GiveInventoryType(class<Inventory>(FindClass(
				StrToName(va("QuestItem%d", i)))));
			cprint("YOU GOT IT");
		}
	}

	// Gold
	if (Cmd_CheckParm("Gold"))
	{
		Inventory GoldItem = EntityEx(MO).FindInventory(Coin);
		if (!GoldItem)
		{
			GoldItem = Level.Spawn(Coin,,,, false);
			if (!GoldItem.TryPickup(EntityEx(MO)))
			{
				GoldItem.Destroy();
				GoldItem = none;
			}
		}
		if (GoldItem)
		{
			GoldItem.Amount = GoldItem.MaxAmount;
		}
		cprint("GOT GOLD");
	}
}

//==========================================================================
//
//  StartDeathSlideShow
//
//==========================================================================

void StartDeathSlideShow()
{
	ClientFinaleType(1);
	Level.Completed(-1, -1, 0);
}

//==========================================================================
//
//	KilledActor
//
//==========================================================================

void KilledActor(EntityEx Victim)
{
	// Check for frag changes
	if (Victim.bIsPlayer)
	{
		if (MO == Victim)
		{
			Frags--;
		}
		else
		{
			Frags++;
		}
	}
}

//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================

int GetSigilPieces()
{
	Sigil S = Sigil(EntityEx(MO).FindInventory(Sigil));
	if (S)
	{
		return S.NumPieces;
	}
	return 0;
}

defaultproperties
{
	bInventoryAlwaysOpen = true;
	InvSize = 5;
}
