//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

const float
	INFRATIME		= 120.0;

const int
	MAXHEALTH		= 100,
	INITIAL_HEALTH	= 100,
	INITIAL_AMMO	= 50,
	GOD_HEALTH		= 100;

replication
{
	reliable if (!bIsClient)
		ClientSlideshow1, ClientSlideshow2, ClientFinaleType;
}

//==========================================================================
//
//  ResetPlayerOnSpawn
//
//==========================================================================

void ResetPlayerOnSpawn()
{
	::ResetPlayerOnSpawn();
}

//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================

int GetRebornHealth()
{
	return INITIAL_HEALTH;
}

//==========================================================================
//
//	GotAmmo
//
//==========================================================================

void GotAmmo(Ammo NewAmmo)
{
	// We were down to zero,
	// so select a new weapon.
	// Preferences are not user selectable.
	if (ReadyWeapon.bWimpyWeapon)
	{
		Weapon Best = BestWeapon(class<Ammo>(NewAmmo.Class));
		if (Best && Best.SelectionOrder < ReadyWeapon.SelectionOrder)
		{
			PendingWeapon = Best;
		}
	}
}

//==========================================================================
//
//	GetMaxHealth
//
//==========================================================================

int GetMaxHealth()
{
	return MAXHEALTH + Stamina;
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	float angle;
	float delta;

	MovePsprites(deltaTime);

	// fall to the ground
	if (ViewHeight > 6.0)
		ViewHeight -= 1.0;

	if (ViewHeight < 6.0)
		ViewHeight = 6.0;

	DeltaViewHeight = 0.0;
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		angle = atan2(Attacker.Origin.y - MO.Origin.y,
			Attacker.Origin.x - MO.Origin.x);

		delta = AngleMod180(angle - MO.Angles.yaw);

		if (delta < 5.0 && delta > -5.0)
		{
			// Looking at killer,
			//  so fade damage flash down.
			MO.Angles.yaw = angle;

			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
			if (PoisonCount)
			{
				PoisonCount--;
			}
		}
		else if (delta > 0.0)
			MO.Angles.yaw += 5.0;
		else
			MO.Angles.yaw -= 5.0;
	}
	else if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}
	else if (PoisonCount)
	{
		PoisonCount--;
	}

	if (Buttons & BT_USE)
		PlayerState = PST_REBORN;
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;

	impulse = Impulse;
	Impulse = 0;

	if (impulse <= 8)
	{
		ChangeWeapon(impulse);
	}
	else if (impulse == 11)
	{
		InventoryThrow();
	}
	else if (impulse == 13)
	{
		InventoryLeft();
	}
	else if (impulse == 14)
	{
		InventoryRight();
	}
	else if (impulse == 15)
	{
		InventoryUse();
	}
	else if (impulse == 16)
	{
		//  Suicide
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == 17)
	{
		PrevWeapon();
	}
	else if (impulse == 18)
	{
		NextWeapon();
	}
	else if (impulse >= 200 && impulse <= 205)
	{
		StrifeLevelInfo(Level).ConChoiceImpulse(impulse - 200);
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	// Copy view angles
	if (MO == Camera)
	{
		MO.Angles = ViewAngles;
	}

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (Actor(MO).bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		Actor(MO).bJustAttacked = false;
	}

	if (bTotallyFrozen)
	{
		Buttons &= BT_USE;
		Impulse = 0;
		ViewAngles = MO.Angles;
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}
	else if (bFrozen)
	{
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime <= 0.0)
			JumpTime = 0.0;
	}

	// Move around.
	// Reactiontime is used to prevent movement
	//  for a bit after a teleport.
	if (Actor(MO).ReactionTime)
	{
		Actor(MO).ReactionTime -= deltaTime;
		if (Actor(MO).ReactionTime <= 0.0)
			Actor(MO).ReactionTime = 0.0;
		if (Actor(MO).bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.WaterLevel > 1)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special || MO.Sector->Damage)
	{
		PlayerInSpecialSector(deltaTime);
	}
	PlayerInContents(deltaTime);

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			EntityEx(MO).UseLines(USERANGE, USETHINGRANGE, '*usefail');
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	//  cycle psprites
	MovePsprites(deltaTime);

	//  Counters, time dependend power ups.

	if (PoisonCount && Level.XLevel.Time - LastPoisonTime >= 0.5)
	{
		PoisonCount -= 5;
		if (PoisonCount < 0)
		{
			PoisonCount = 0;
		}
		LastPoisonTime = Level.XLevel.Time;
		Actor(MO).PoisonDamage(Poisoner, Poisoner, 1, true);
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (Level.XLevel.Time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
	}
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	//	Just in a case camera entity has been destroyed
	if (!Camera)
	{
		Camera = MO;
	}

	if (MO != Camera)
	{
		ViewOrg = Camera.Origin;
		ViewOrg.z += EntityEx(Camera).CameraHeight;
		ViewAngles = Camera.Angles;
	}
	else
	{
		ViewOrg.x = MO.Origin.x;
		ViewOrg.y = MO.Origin.y;

		if (LocalQuakeHappening)
		{
			float intensity;

			intensity = itof(LocalQuakeHappening);
			ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
			ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
		}

		ViewAngles = MO.Angles;
	}

	PaletteFlash();

	ClientSetViewOrg(ViewOrg.x, ViewOrg.y, ViewOrg.z);

	SoundEnvironment = Level.XLevel.Zones[Camera.Sector->Zone];
	if (!SoundEnvironment)
	{
		if (Camera.WaterLevel >= 3)
		{
			//	Under water
			SoundEnvironment = 0x1600;
		}
		else
		{
			//	Generic
			SoundEnvironment = 1;
		}
	}
}

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= CF_GODMODE;
	if (Cheats & CF_GODMODE)
	{
		if (MO)
			MO.Health = GOD_HEALTH;
		Health = GOD_HEALTH;
		cprint("Degreelessness Mode On");
	}
	else
		cprint("Degreelessness Mode Off");
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= CF_NOCLIP;
	if (Cheats & CF_NOCLIP)
		cprint("No Clipping Mode ON");
	else
		cprint("No Clipping Mode OFF");
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	int					i;
	class<Inventory>	Cls;
	class<Weapon>		WpnCls;

	// Backpack
	if (Cmd_CheckParm("Backpack"))
	{
		Inventory I = Level.Spawn(AmmoSatchel,,,, false);
		I.bDropped = true;
		if (!I.TryPickup(EntityEx(MO)))
		{
			I.Destroy();
		}
		cprint("EXTRA AMMO");
	}

	// Weapons
	if (Cmd_CheckParm("Weapons"))
	{
		foreach AllClasses(Weapon, WpnCls)
		{
			if (!FindClassState(WpnCls, 'Ready'))
			{
				//	Abstract base class.
				continue;
			}
			if (WpnCls.default.bCheatNotWeapon)
			{
				continue;
			}
			Weapon Wpn = Level.Spawn(WpnCls,,,, false);
			Wpn.AmmoGive1 = 0;
			Wpn.AmmoGive2 = 0;
			if (!Wpn.TryPickup(EntityEx(MO)))
			{
				Wpn.Destroy();
			}
		}
		cprint("ALL WEAPONS");
	}

	// Ammo
	if (Cmd_CheckParm("Ammo"))
	{
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
			if (!AmmoItem)
			{
				AmmoItem = Level.Spawn(Cls,,,, false);
				if (!AmmoItem.TryPickup(EntityEx(MO)))
				{
					AmmoItem.Destroy();
					AmmoItem = none;
				}
			}
			if (AmmoItem)
			{
				AmmoItem.Amount = AmmoItem.MaxAmount;
			}
		}
		cprint("FULL AMMO");
	}

	// Keys
	if (Cmd_CheckParm("Keys"))
	{
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
		cprint("ALL KEYS");
	}

	// Health
	if (Cmd_CheckParm("Health"))
	{
		Health = MAXHEALTH + Stamina;
		MO.Health = MAXHEALTH + Stamina;
		cprint("FULL HEALTH");
	}

	// Comm unit
	if (Cmd_CheckParm("CommUnit"))
	{
		EntityEx(MO).GiveInventoryType(Communicator);
		cprint("YOU GOT IT");
	}

	// Sigil piece
	if (Cmd_CheckParm("Sigil"))
	{
		Sigil S = Level.Spawn(Sigil,,,, false);
		if (!S.SpecialDropAction(none))
		{
			S.Destroy();
		}
		cprint("SIGIL PIECE");
	}

	// Quest items.
	for (i = 0; i < 31; i++)
	{
		if (Cmd_CheckParm(va("Quest%d", i + 1)))
		{
			EntityEx(MO).GiveInventoryType(class<Inventory>(FindClass(
				StrToName(va("QuestItem%d", i)))));
			cprint("YOU GOT IT");
		}
	}

	// Gold
	if (Cmd_CheckParm("Gold"))
	{
		Inventory GoldItem = EntityEx(MO).FindInventory(Coin);
		if (!GoldItem)
		{
			GoldItem = Level.Spawn(Coin,,,, false);
			if (!GoldItem.TryPickup(EntityEx(MO)))
			{
				GoldItem.Destroy();
				GoldItem = none;
			}
		}
		if (GoldItem)
		{
			GoldItem.Amount = GoldItem.MaxAmount;
		}
		cprint("GOT GOLD");
	}
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	cprint("%d MONSTERS KILLED", LineSpecialLevelInfo(Level).P_Massacre());
}

//==========================================================================
//
//  ClientSlideshow1
//
//==========================================================================

void ClientSlideshow1()
{
	ClientGameBaseEx(ClGame).StartConSlideshow1();
}

//==========================================================================
//
//  ClientSlideshow2
//
//==========================================================================

void ClientSlideshow2()
{
	ClientGameBaseEx(ClGame).StartConSlideshow2();
}

//==========================================================================
//
//  ClientFinaleType
//
//==========================================================================

void ClientFinaleType(int Type)
{
	ClientGameBaseEx(ClGame).SetFinaleType(Type);
}

//==========================================================================
//
//  StartDeathSlideShow
//
//==========================================================================

void StartDeathSlideShow()
{
	ClientFinaleType(1);
	Level.Completed(-1, -1, 0);
}

//==========================================================================
//
//	KilledActor
//
//==========================================================================

void KilledActor(EntityEx Victim)
{
	// Check for frag changes
	if (Victim.bIsPlayer)
	{
		if (MO == Victim)
		{
			Frags--;
		}
		else
		{
			Frags++;
		}
	}
}

//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================

int GetSigilPieces()
{
	Sigil S = Sigil(EntityEx(MO).FindInventory(Sigil));
	if (S)
	{
		return S.NumPieces;
	}
	return 0;
}

defaultproperties
{
	bInventoryAlwaysOpen = true;
	InvSize = 5;
}
