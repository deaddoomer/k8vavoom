//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

const float VIEWHEIGHT		= 41.0;

const float BLINKTHRESHOLD 	= 4.0;

const float
	INVULNTIME		= 30.0,
	INVISTIME		= 60.0,
	INFRATIME		= 120.0,
	IRONTIME		= 60.0;

// 16 pixels of bob
const float MAXBOB			= 16.0;

const int
	MAXHEALTH		= 100,
	INITIAL_HEALTH	= 100,
	INITIAL_AMMO	= 50,
	GOD_HEALTH		= 100;

const float BONUSADD		= 0.2;

const int INVERSECOLOURMAP	= 32;

const float USERANGE		= 64.0;
const float USETHINGRANGE	= 128.0;

int Quests;

int Objectives;

// Armor type is 0-2.
int ArmorType;
int ArmorPoints;

bool Backpack;
bool Communicator;

// Bit flags, for cheats and debug.
// See cheat_t, above.
int Cheats;

int Ammo[StrifeDefs::NUMAMMO];
int MaxAmmo[StrifeDefs::NUMAMMO];
int ReadyAmmo;

int Accuracy;
int Stamina;

int Keys;

int InvFirst;
int InvCursor;
int Inventory[StrifeDefs::NUMINVITEMS];

// Power ups. invinc and invis are timers.
float Powers[NUMPOWERS];

// Refired shots are less accurate.
int Refire;

bool WeaponOwned[StrifeDefs::NUMWEAPONS];

int ReadyWeapon;
int Sigil;

// Is wp_nochange if not changing.
int PendingWeapon;

replication
{
	reliable if (!bIsClient)
		ReadyAmmo, Sigil, Accuracy, Stamina, Keys, InvFirst, InvCursor,
		Objectives, ArmorType, ArmorPoints, Cheats, Ammo, MaxAmmo,
		WeaponOwned, Inventory, Backpack, Communicator;

	unreliable if (!bIsClient)
		ClientBlood, ClientExplosion;

	reliable if (!bIsClient)
		ClientSpeech, ClientVoice, ClientSlideshow1, ClientSlideshow2,
		ClientFinaleType;
}

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer()
{
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient()
{
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
	}
	else
	{
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
	}
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn()
{
	int i;

	// remove pitch and roll angles from corpse
	MO.Angles.pitch = 0.0;
	MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	MO.Player = none;
	MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
		return;
	}

	if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
		GetPlayerNum()]))
	{
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
		return;
	}

	// try to spawn at one of the other players spots
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]))
		{
			SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]);
			return;
		}
		// he's going to be inside something.  Too bad.
	}
	SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
		GetPlayerNum()]);
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient()
{
	int i;

	if (MO)
	{
		MO.Player = none;
		MO.bIsPlayer = false;
		Actor(MO).Damage(none, none, 10000);
	}
	if (ViewEnt)
	{
		ViewEnt.Destroy();
		ViewEnt = none;
	}
	Level.bprint("%s left the game\n", PlayerName);
	MO.PlaySound('misc/chat', CHAN_AUTO, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged()
{
	if (!bSpawned)
	{
		return;
	}
	MO.Translation = Colour;
}

//==========================================================================
//
//  DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void DeathMatchSpawnPlayer()
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		if (CheckSpot(&Level.DeathmatchStarts[i]))
		{
			SpawnPlayer(&Level.DeathmatchStarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	SpawnPlayer(&Level.PlayerStarts[GetPlayerNum()]);
}

//==========================================================================
//
//  CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool CheckSpot(mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int mtnum;
	int sfxnum;
	int i;

	if (!MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].MO &&
				Level.Game.Players[i].MO.Origin.x == mthing->x &&
				Level.Game.Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	if (!MO.CheckPosition(vector(x, y, Actor::ONFLOORZ)))
	{
		return false;
	}

	// flush an old corpse if needed 
	if (StrifeLevelInfo(Level).bodyqueslot >= StrifeLevelInfo::BODYQUESIZE)
		StrifeLevelInfo(Level).bodyque[StrifeLevelInfo(Level).bodyqueslot % StrifeLevelInfo::BODYQUESIZE].Destroy();
	StrifeLevelInfo(Level).bodyque[StrifeLevelInfo(Level).bodyqueslot % StrifeLevelInfo::BODYQUESIZE] = Actor(MO);
	StrifeLevelInfo(Level).bodyqueslot++;

	// spawn a teleport fog 
	sec = Level.XLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = StrifeLevelInfo(Level).Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight));
	A.PlaySound('misc/teleport', CHAN_VOICE);	// don't start sound on first frame

	return true;
}

//==========================================================================
//
//  SpawnPlayer
//
//  Called when a player is spawned on the level. Most of the player
// structure stays unchanged between levels.
//
//==========================================================================

void SpawnPlayer(mthing_t * mthing)
{
	float x;
	float y;
	float z;

	Actor A;
	bool ResetInventory = false;

	if (PlayerState == PST_REBORN)
	{
		PlayerReborn();
		ResetInventory = true;
	}

	x = mthing->x;
	y = mthing->y;
	z = Actor::ONFLOORZ;
	A = StrifeLevelInfo(Level).Spawn(StrifePlayer, vector(x, y, z));
	A.Origin.z += mthing->height;
	A.LinkToWorld();

	// set colour translations for player sprites
	A.Translation = Colour;

	A.Angles.yaw = itof(45 * (mthing->angle / 45));
	A.Player = self;
	A.bIsPlayer = true;
	A.Health = Health;

	MO = A;
	PlayerState = PST_LIVE;
	Refire = 0;
	DamageFlash = 0.0;
	BonusFlash = 0.0;
	ExtraLight = 0;
	FixedColourmap = 0;
	LastSectorDamageTime = 0.0;
	LastHazardTime = 0.0;
	ViewHeight = VIEWHEIGHT;
	ViewAngles = A.Angles;
	bFixAngle = true;

	if (ResetInventory)
	{
		SetWeapon(StrifeDefs::wp_fist);
	}
	else
	{
		ViewEnt.Owner = MO;
	}

	// setup gun psprite
	SetupPsprites();

	// give all cards in death match mode
	if (Level.Game.deathmatch)
	{
		Keys = 0x3f;
	}

	// wake up the status bar
	SB_Start();
}

//==========================================================================
//
//  PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialised
//
//==========================================================================

void PlayerReborn()
{
	//  Clear player struct
	ClearPlayer();

	//  Set initial data
	bUseDown = true;	// don't do anything immediately
	bAttackDown = true;
	PlayerState = PST_LIVE;
	Health = INITIAL_HEALTH;
	WeaponOwned[StrifeDefs::wp_fist] = true;
	MaxAmmo[StrifeDefs::am_clip] = MainGameInfo(Level.Game).maxammo[StrifeDefs::am_clip];
	MaxAmmo[StrifeDefs::am_electric_arrow] = MainGameInfo(Level.Game).maxammo[StrifeDefs::am_electric_arrow];
	MaxAmmo[StrifeDefs::am_poison_arrow] = MainGameInfo(Level.Game).maxammo[StrifeDefs::am_poison_arrow];
	MaxAmmo[StrifeDefs::am_cell] = MainGameInfo(Level.Game).maxammo[StrifeDefs::am_cell];
	MaxAmmo[StrifeDefs::am_misl] = MainGameInfo(Level.Game).maxammo[StrifeDefs::am_misl];
	MaxAmmo[StrifeDefs::am_grenade1] = MainGameInfo(Level.Game).maxammo[StrifeDefs::am_grenade1];
	MaxAmmo[StrifeDefs::am_grenade2] = MainGameInfo(Level.Game).maxammo[StrifeDefs::am_grenade2];

	LocalQuakeHappening = 0;
}

//==========================================================================
//
//  PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void PlayerExitMap(bool clusterChange)
{
	int i;

	for (i = 0; i < NUMPOWERS; i++)
	{
		if(i != pw_ironfeet || pw_invisibility/*|| ITEM_Targeter*/)
			Powers[i] = 0.0;
	}

	if (clusterChange)
	{
		Keys = 0;
	}

	Items = 0;
	MO.Angles.pitch = 0.0;
//	MO.Alpha = 1.0;	// cancel invisibility
	ExtraLight = 0;			// cancel gun flashes
	FixedColourmap = 0;		// cancel ir gogles
	DamageFlash = 0.0;		// no palette changes
	BonusFlash = 0.0;
}

//==========================================================================
//
//  GiveAmmo
//
//  Returns false if the ammo can't be picked up at all
//
//==========================================================================

bool GiveAmmo(int ammo, int num)
{
	int oldammo;
	int max;

	if (ammo == StrifeDefs::am_noammo)
		return false;

	if (ammo < 0 || ammo > StrifeDefs::NUMAMMO)
//      I_Error ("P_GiveAmmo: bad type %i", ammo);
		Error("P_GiveAmmo: bad type");

	max = Backpack ? MainGameInfo(Level.Game).maxammo[ammo] * 2 : MainGameInfo(Level.Game).maxammo[ammo];
	if (Ammo[ammo] == max)
		return false;

	if (Level.Game.gameskill == sk_baby || Level.Game.gameskill == sk_nightmare)
	{
		// give double ammo in trainer mode,
		// you'll need in nightmare
		num <<= 1;
	}

	oldammo = Ammo[ammo];
	Ammo[ammo] += num;

	if (Ammo[ammo] > max)
		Ammo[ammo] = max;

	// If non zero ammo, 
	// don't change up weapons,
	// player was lower on purpose.
	if (oldammo)
		return true;

	// We were down to zero,
	// so select a new weapon.
	// Preferences are not user selectable.
	switch (ammo)
	{
	case StrifeDefs::am_clip:
		if (ReadyWeapon == StrifeDefs::wp_fist)
		{
			if (WeaponOwned[StrifeDefs::wp_riffle])
				PendingWeapon = StrifeDefs::wp_riffle;
		}
		break;

	case StrifeDefs::am_electric_arrow:
		if (ReadyWeapon == StrifeDefs::wp_fist)
		{
			if (WeaponOwned[StrifeDefs::wp_crossbow])
				PendingWeapon = StrifeDefs::wp_crossbow;
		}
		break;

	case StrifeDefs::am_cell:
		if (ReadyWeapon == StrifeDefs::wp_fist)
		{
			if (WeaponOwned[StrifeDefs::wp_flame])
				PendingWeapon = StrifeDefs::wp_flame;
		}
		break;

	case StrifeDefs::am_misl:
		if (ReadyWeapon == StrifeDefs::wp_fist)
		{
			if (WeaponOwned[StrifeDefs::wp_missile])
				PendingWeapon = StrifeDefs::wp_missile;
		}
	default:
		break;
	}

	return true;
}

//==========================================================================
//
//  GiveWeapon
//
//  The weapon name may have a MF_DROPPED flag ored in.
//
//==========================================================================

bool GiveWeapon(int weapon, int weapon2, bool dropped, int ammo1, int ammo2)
{
	int AmmoType;
	int Ammo2Type;
	bool gaveammo;
	bool gaveammo2;
	bool gaveweapon;

	AmmoType = MainGameInfo(Level.Game).WeaponClasses[weapon].default.Ammo;
	Ammo2Type = MainGameInfo(Level.Game).WeaponClasses[weapon].default.Ammo;
	if (Level.Game.netgame && (Level.Game.deathmatch < 2) && !dropped)
	{
		// leave placed weapons forever on net games
		if (WeaponOwned[weapon])
			return false;

		BonusFlash += BONUSADD;
		WeaponOwned[weapon] = true;

		if (Level.Game.deathmatch)
			GiveAmmo(AmmoType, ammo1 * 2);
		else
			GiveAmmo(AmmoType, ammo1);
		PendingWeapon = weapon;

		if (weapon2 != -1)
		{
			WeaponOwned[weapon2] = true;
			if (AmmoType != Ammo2Type)
			{
				if (Level.Game.deathmatch)
					GiveAmmo(Ammo2Type, ammo2 * 2);
				else
					GiveAmmo(Ammo2Type, ammo2);
			}
		}

		MO.PlaySound('misc/w_pkup', CHAN_ITEM);
		return false;
	}

	if (AmmoType != StrifeDefs::am_noammo)
	{
		// give one clip with a dropped weapon,
		// two clips with a found weapon
		if (dropped)
			gaveammo = GiveAmmo(AmmoType, ammo1 / 2);
		else
			gaveammo = GiveAmmo(AmmoType, ammo1);
	}
	else
		gaveammo = false;

	if (weapon2 != -1 && Ammo2Type != StrifeDefs::am_noammo &&
		AmmoType != Ammo2Type && ammo2)
	{
		// give one clip with a dropped weapon,
		// two clips with a found weapon
		if (dropped)
			gaveammo2 = GiveAmmo(Ammo2Type, ammo2 / 2);
		else
			gaveammo2 = GiveAmmo(Ammo2Type, ammo2);
	}
	else
		gaveammo2 = false;

	if (WeaponOwned[weapon])
		gaveweapon = false;
	else
	{
		gaveweapon = true;
		WeaponOwned[weapon] = true;
		if (weapon2 != -1)
			WeaponOwned[weapon2] = true;
		PendingWeapon = weapon;
	}

	return (gaveweapon || gaveammo || gaveammo2);
}

//==========================================================================
//
//	GiveSigilPiece
//
//==========================================================================

void GiveSigilPiece()
{
	if (!WeaponOwned[StrifeDefs::wp_sigil])
		Sigil = 0;
	else if (Sigil == 4)
		Sigil = 0;
	else
		Sigil++;
	WeaponOwned[StrifeDefs::wp_sigil] = true;
	PendingWeapon = StrifeDefs::wp_sigil;
	MO.PlaySound('weapons/sigilcharge', CHAN_WEAPON);
}

//==========================================================================
//
//	GiveBody
//
//	Returns false if the body isn't needed at all
//
//==========================================================================

bool GiveBody(int num)
{
	if (Health >= MAXHEALTH + Stamina)
		return false;

	Health += num;
	if (Health > MAXHEALTH + Stamina)
		Health = MAXHEALTH + Stamina;
	MO.Health = Health;

	return true;
}

//==========================================================================
//
//	GiveArmor
//
//	Returns false if the armor is worse than the current armor.
//
//==========================================================================

bool GiveArmor(int armortype)
{
	int hits;

	hits = armortype * 100;
	if (ArmorPoints >= hits)
		return false;	// don't pick up

	ArmorType = armortype;
	ArmorPoints = hits;

	return true;
}

//==========================================================================
//
//	GiveKey
//
//==========================================================================

bool GiveKey(int key)
{
	if (Keys & (1 << key))
		return false;

	Keys |= 1 << key;
	return true;
}

//==========================================================================
//
//  GiveItem
//
//==========================================================================

bool GiveItem(int item)
{
	if (Items & item)
	{
		return false;	// already got it
	}

	Items |= item;
	return true;
}

//==========================================================================
//
//	GiveInvItem
//
//==========================================================================

bool GiveInvItem(int item, int amount)
{
	if (Inventory[item] >= MainGameInfo(Level.Game).MaxInvItem[item])
	{
		return false;
	}
	Inventory[item] += amount;
	if (Inventory[item] > MainGameInfo(Level.Game).MaxInvItem[item])
	{
		Inventory[item] = MainGameInfo(Level.Game).MaxInvItem[item];
	}
	while (!Inventory[InvCursor] && InvCursor < StrifeDefs::NUMINVITEMS - 1)
	{
		InvCursor++;
	}
	while (!Inventory[InvCursor] && InvCursor > 0)
	{
		InvCursor--;
	}
	AdjustInvFirst();
	return true;
}

//==========================================================================
//
//	RemoveInvItem
//
//==========================================================================

bool RemoveInvItem(int item, int amount)
{
	if (Inventory[item] < amount)
	{
		return false;
	}
	Inventory[item] -= amount;
	while (!Inventory[InvCursor] && InvCursor < StrifeDefs::NUMINVITEMS - 1)
	{
		InvCursor++;
	}
	while (!Inventory[InvCursor] && InvCursor > 0)
	{
		InvCursor--;
	}
	AdjustInvFirst();
	return true;
}

//==========================================================================
//
//	InvRight
//
//==========================================================================

void InvRight()
{
	if (InvCursor < StrifeDefs::NUMINVITEMS - 1)
	{
		InvCursor++;
		while (!Inventory[InvCursor] && InvCursor < StrifeDefs::NUMINVITEMS - 1)
		{
			InvCursor++;
		}
		while (!Inventory[InvCursor] && InvCursor > 0)
		{
			InvCursor--;
		}
		AdjustInvFirst();
	}
}

//==========================================================================
//
//	InvLeft
//
//==========================================================================

void InvLeft()
{
	if (InvCursor > 0)
	{
		InvCursor--;
		while (!Inventory[InvCursor] && InvCursor > 0)
		{
			InvCursor--;
		}
		while (!Inventory[InvCursor] && InvCursor < StrifeDefs::NUMINVITEMS - 1)
		{
			InvCursor++;
		}
		AdjustInvFirst();
	}
}

//==========================================================================
//
//	InvUse
//
//==========================================================================

void InvUse()
{
	bool	itemUsed;
	Actor	A;

	if (!Inventory[InvCursor])
	{
		return;
	}
	itemUsed = false;
	switch (InvCursor)
	{
	case StrifeDefs::ITEM_MedPatch:
		itemUsed = GiveBody(10);
		break;

	case StrifeDefs::ITEM_MedicalKit:
		itemUsed = GiveBody(25);
		break;

	case StrifeDefs::ITEM_SurgeryKit:
		itemUsed = GiveBody(100);
		break;

	case StrifeDefs::ITEM_MetalArmor:
		itemUsed = GiveArmor(2);
		break;

	case StrifeDefs::ITEM_LeatherArmor:
		itemUsed = GiveArmor(1);
		break;

	case StrifeDefs::ITEM_ShadowArmor:
		itemUsed = GivePower(pw_invisibility);
		break;

	case StrifeDefs::ITEM_EnvironmentalSuit:
		itemUsed = GivePower(pw_ironfeet);
		break;

	case StrifeDefs::ITEM_TeleporterBeacon:
		//	Increase item count because ItemThrow also decreases it.
		Inventory[StrifeDefs::ITEM_TeleporterBeacon]++;
		A = InvThrow();
		if (A)
		{
			A.SetState(A.SeeState);
			A.Target = Actor(MO);
			itemUsed = true;
		}
		else
		{
			Inventory[StrifeDefs::ITEM_TeleporterBeacon]--;
		}
		break;

	case StrifeDefs::ITEM_Map:
		itemUsed = GiveItem(IT_ALL_MAP);
		break;

/*	ITEM_Scanner,
	ITEM_Targeter,*/
	}
	//	Remove item if it was used.
	if (itemUsed)
	{
		MO.PlaySound('misc/invuse', CHAN_BODY);
		RemoveInvItem(InvCursor, 1);
	}
}

//==========================================================================
//
//	AdjustInvFirst
//
//==========================================================================

void AdjustInvFirst()
{
	int FirstIdx;
	int CursIdx;
	int Idx;
	int i;

	if (InvFirst > InvCursor)
	{
		InvFirst = InvCursor;
	}
	if (!Inventory[InvCursor])
	{
		return;
	}
	FirstIdx = 0;
	CursIdx = 0;
	Idx = 0;
	for (i = 0; i < StrifeDefs::NUMINVITEMS; i++)
	{
		if (i == InvFirst)
			FirstIdx = Idx;
		if (i == InvCursor)
			CursIdx = Idx;
		if (Inventory[i])
			Idx++;
	}
	while (FirstIdx - CursIdx > 5)
	{
		InvFirst--;
		FirstIdx--;
		while (!Inventory[InvFirst] && InvFirst > 0)
		{
			InvFirst--;
		}
	}
	while (FirstIdx - CursIdx < -5)
	{
		InvFirst++;
		FirstIdx++;
		while (!Inventory[InvFirst] && InvFirst < StrifeDefs::NUMINVITEMS - 1)
		{
			InvFirst++;
		}
	}
}

//==========================================================================
//
//	InvThrow
//
//==========================================================================

Actor InvThrow()
{
	class<InventoryItem>	ItemType;
	int		Amount;
	Actor	Item;
	TVec	Dir;

	if (!Inventory[InvCursor])
	{
		return none;
	}

	ItemType = MainGameInfo(Level.Game).InvItemCID[InvCursor];
	Amount = 1;
	//	Gold is dropped with maximal throwable amount.
	if (InvCursor == StrifeDefs::ITEM_Coin && Inventory[InvCursor] >= 50)
	{
		ItemType = Gold50;
		Amount = 50;
	}
	else if (InvCursor == StrifeDefs::ITEM_Coin && Inventory[InvCursor] >= 25)
	{
		ItemType = Gold25;
		Amount = 25;
	}
	else if (InvCursor == StrifeDefs::ITEM_Coin && Inventory[InvCursor] >= 10)
	{
		ItemType = Gold10;
		Amount = 10;
	}

	AngleVector(&MO.Angles, &Dir);
	Dir.z = 0.0;
	Dir = Normalise(Dir);
	Item = StrifeLevelInfo(Level).Spawn(ItemType, MO.Origin + vector(0.0, 0.0, 32.0) +
		Dir * (MO.Radius + 36.0));
	Item.Velocity = Dir * 64.0;
	//	Remove item.
	RemoveInvItem(InvCursor, Amount);
	return Item;
}

//==========================================================================
//
//	GivePower
//
//==========================================================================

bool GivePower(int power)
{
	if (power == pw_invulnerability)
	{
		Powers[power] = INVULNTIME;
		return true;
	}

	if (power == pw_invisibility)
	{
		Powers[power] = INVISTIME;
		MO.Alpha = 0.1;
		return true;
	}

	if (power == pw_infrared)
	{
		Powers[power] = INFRATIME;
		return true;
	}

	if (power == pw_ironfeet)
	{
		Powers[power] = IRONTIME;
		return true;
	}

	if (Powers[power])
		return false;	// already got it

	Powers[power] = 1.0;
	return true;
}

//==========================================================================
//
//	GiveQuest
//
//==========================================================================

void GiveQuest(int QuestID)
{
	class<Actor>	QClass;
	QuestItem		QInfo;
	
	if (Quests & (1 << QuestID))
		cprint("Already have quest %d", QuestID);
	Quests |= 1 << QuestID;
	cprint("Got quest %d, quests %x", QuestID, Quests);
	QClass = StrifeLevelInfo(Level).GetClassFromID(312 + QuestID);
	QInfo = QuestItem(StrifeLevelInfo(Level).Spawn(QClass, vector(0.0, 0.0, 0.0)));
	if (QInfo.QuestMessage)
		cprint(QInfo.QuestMessage);
	QInfo.Destroy();
}

//==========================================================================
//
//	SetObjectives
//
//==========================================================================

void SetObjectives(int NewObjectives)
{
	if (!NewObjectives)
	{
		return;
	}
	//	Check if log text lump exists in wad file.
	if (!WadLumpPresent(StrToName(va("log%d", NewObjectives))))
	{
		return;
	}
	Objectives = NewObjectives;
}

//==========================================================================
//
//  ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void ThrustPlayer(float angle, float move, float deltaTime)
{
	if ((MO.Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow)
	{
		move *= 0.5;
	}
	MO.Velocity.x += move * cos(angle) * deltaTime;
	MO.Velocity.y += move * sin(angle) * deltaTime;
}

//==========================================================================
//
//  CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void CalcHeight(float deltaTime)
{
	float angle;
	float _Bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	Bob = MO.Velocity.x * MO.Velocity.x + MO.Velocity.y * MO.Velocity.y;
	Bob /= 4.0 * 35.0 * 35.0;
	if (Bob > MAXBOB)
		Bob = MAXBOB;

	angle = 180.0 * 35.0 / 10.0 * Level.XLevel.Time;
	_Bob = Bob / 2.0 * sin(angle);

	// move viewheight
	if (PlayerState == PST_LIVE)
	{
		ViewHeight += DeltaViewHeight * deltaTime;

		if (ViewHeight > VIEWHEIGHT)
		{
			ViewHeight = VIEWHEIGHT;
			DeltaViewHeight = 0.0;
		}

		if (ViewHeight < VIEWHEIGHT / 2.0)
		{
			ViewHeight = VIEWHEIGHT / 2.0;
			if (DeltaViewHeight <= 0.0)
				DeltaViewHeight = 0.00001;
		}

		if (DeltaViewHeight)
		{
			DeltaViewHeight += 256.0 * deltaTime;
			if (!DeltaViewHeight)
				DeltaViewHeight = 0.00001;
		}
	}
	ViewOrg.z = MO.Origin.z + ViewHeight + _Bob;

	if (PlayerState != PST_DEAD && MO.Origin.z <= MO.FloorZ)
	{
		ViewOrg.z -= MO.FloorClip;
	}
	if (ViewOrg.z < MO.FloorZ + 4.0)
		ViewOrg.z = MO.FloorZ + 4.0;

	if (ViewOrg.z > MO.CeilingZ - 4.0)
		ViewOrg.z = MO.CeilingZ - 4.0;
}

//==========================================================================
//
//  MovePlayer
//
//==========================================================================

void MovePlayer(float deltaTime)
{
	float forward;
	float side;

	// Do not let the player control movement
	//  if not onground.
	bool onground = MO.Origin.z <= MO.FloorZ || Actor(MO).bOnMobj;

	forward = ForwardMove * 5.0;
	side = SideMove * 5.0;

	if (!onground)
	{
		forward *= MainGameInfo(Level.Game).air_control;
		side *= MainGameInfo(Level.Game).air_control;
	}

	if (forward)
	{
		// When the player has less than 25 health points, he's unable to run
		if(MO.Health < 25)
		{
			if(forward > 1000.0)
				forward = 1000.0;
		}
		ThrustPlayer(MO.Angles.yaw, forward, deltaTime);
	}
	if (side)
	{
		// When the player has less than 25 health points, he's unable to run
		if(MO.Health < 25)
		{
			if(side > 1000.0)
				side = 1000.0;
		}
		ThrustPlayer(AngleMod360(MO.Angles.yaw - 90.0), side, deltaTime);
	}

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if ((Buttons & BT_JUMP) && onground && !JumpTime)
	{
		//  Jump
		MO.Velocity.z = 9.0 * 35.0;
		Actor(MO).bOnMobj = false;
		JumpTime = 0.5;
	}
}

//==========================================================================
//
//  CheckWaterJump
//
//==========================================================================

void CheckWaterJump()
{
	TVec start;
	TVec end;
	TVec vforward;
	TVec HitPoint;
	TVec HitNormal;

	// check for a jump-out-of-water
	AngleVector(&MO.Angles, &vforward);
	start = MO.Origin;
	start.z += MO.Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalise(vforward);
	end = start + vforward * 24.0;
	if (!Level.XLevel.TraceLine(start, end, HitPoint, HitNormal))
	{
		// solid at waist
		start.z = MO.Origin.z + MO.Height;
		end = start + vforward * 24.0;
		MoveDir = HitNormal * -50.0;
		if (Level.XLevel.TraceLine(start, end, HitPoint, HitNormal))
		{
			// open at eye level
			Actor(MO).bWaterJump = true;
			MO.Velocity.z = 320.0;
			Actor(MO).ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  WaterMove
//
//==========================================================================

void WaterMove(float deltaTime)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	AngleVectors(&MO.Angles, &vforward, &vright, &vup);

	forward = ForwardMove;
	side = SideMove;

	wishvel = forward * vforward + side * vright;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  else
//      wishvel.z += cmd.upmove;

	MO.Velocity += 3.5 * deltaTime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if (Buttons & BT_JUMP)
	{
		if (MO.WaterType == CONTENTS_WATER)
			MO.Velocity.z = 100.0;
		else if (MO.WaterType == CONTENTS_SLUDGE)
			MO.Velocity.z = 80.0;
		else
			MO.Velocity.z = 50.0;
	}
	CheckWaterJump();
}

//==========================================================================
//
//  WaterJump
//
//==========================================================================

void WaterJump()
{
	if (!Actor(MO).ReactionTime || !MO.WaterLevel)
	{
		Actor(MO).bWaterJump = false;
		Actor(MO).ReactionTime = 0.0;
	}
	MO.Velocity.x = MoveDir.x;
	MO.Velocity.y = MoveDir.y;
}

//==========================================================================
//
//  PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector
//
//==========================================================================

void PlayerInSpecialSector(float deltaTime)
{
	float speed;
	float finean;

	//	Falling, not all the way down yet?
	if (MO.Origin.z != GetPlanePointZ(&MO.Sector->floor, MO.Origin))
		return;

	if (MO.Sector->special & SECSPEC_SECRET_MASK)
	{
		//	Secret area.
		SecretCount++;
		Level.CurrentSecret++;
		MO.Sector->special &= ~SECSPEC_SECRET_MASK;
		centreprint("You found a secret area");
		MO.PlaySound('misc/secret', CHAN_VOICE);
	}

	// Has hitten ground.
	if (MO.Sector->special >= SECSPEC_LightFlicker &&
		MO.Sector->special <= 255)
	{
		switch (MO.Sector->special)
		{
		case SECSPEC_DamageHellslime:
			if (!Powers[pw_ironfeet] &&
				Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 10);
			}
			break;
		case SECSPEC_DamageSludge:
			if (!Powers[pw_ironfeet] &&
				Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 4);
			}
			break;
		case SECSPEC_DamageNukage:
			if (!Powers[pw_ironfeet] &&
				Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 5);
			}
			break;
		case SECSPEC_DamageSuperHellslime:
		case SECSPEC_LightStrobeFastDamage:
			if ((!Powers[pw_ironfeet] || (P_Random() < 5)) &&
				Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 20);
			}
			break;
		case SECSPEC_DamageSuperHellslimeExit:
			//	EXIT SUPER DAMAGE! (for E1M8 finale)
			Cheats &= ~StrifeDefs::CF_GODMODE;
	
			if (Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 20);
			}
	
			if (Health <= 10)
			{
				Level.ExitLevel(0);
			}
			break;
		case SECSPEC_DamageLavaWimpy:
			if (Level.XLevel.Time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				//MO.Damage(GLavaInflictor, none, 5);
				Actor(MO).Damage(none, none, 5);
				Actor(MO).HitFloorType();
			}
			break;
		case SECSPEC_DamageLavaHefty:
			if (Level.XLevel.Time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				//MO.Damage(GLavaInflictor, none, 8);
				Actor(MO).Damage(none, none, 8);
				Actor(MO).HitFloorType();
			}
			break;
		case SECSPEC_ScrollEastLavaDamage:
			ThrustPlayer(0.0, 1024.0, deltaTime);
			if (Level.XLevel.Time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				//MO.Damage(GLavaInflictor, none, 5);
				Actor(MO).Damage(none, none, 5);
				Actor(MO).HitFloorType();
			}
			break;
		case SECSPEC_DamageHazard:
			if (!Powers[pw_ironfeet])
				HazardTime += 2.0 * deltaTime;
			break;
		case SECSPEC_DamageInstantDeath:
			Actor(MO).Damage(none, none, 999);
			break;
		case SECSPEC_DamageSuperHazard:
			if (!Powers[pw_ironfeet])
				HazardTime += 4.0 * deltaTime;
			break;
		}
	}
	else
	{
		//	Extended sector damage type.
		switch (MO.Sector->special & SECSPEC_DAMAGE_MASK)
		{
		case 0x0100:
			if (!Powers[pw_ironfeet] &&
				Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 5);
			}
			break;
		case 0x0200:
			if (!Powers[pw_ironfeet] &&
				Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 10);
			}
			break;
		case 0x0300:
			if ((!Powers[pw_ironfeet] || (P_Random() < 5)) &&
				Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, 20);
			}
			break;
		}
	}

	//	Apply any customizable damage
	if (MO.Sector->Damage)
	{
		if (MO.Sector->Damage < 20)
		{
			if (!Powers[pw_ironfeet] &&
				Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, MO.Sector->Damage);
			}
		}
		else if (MO.Sector->Damage < 50)
		{
			if ((!Powers[pw_ironfeet] || (P_Random() < 5)) &&
				Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = Level.XLevel.Time;
				Actor(MO).Damage(none, none, MO.Sector->Damage);
			}
		}
		else if (Level.XLevel.Time - LastSectorDamageTime >= 1.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, MO.Sector->Damage);
		}
	}

	switch (MO.Sector->special)
	{
	case SECSPEC_ScrollCurrent:
		speed = itof((MO.Sector->tag - 100) % 10) / 16.0 * 35.0;
		finean = itof((MO.Sector->tag - 100) / 10) * 45.0;
		MO.Velocity.x += speed * cos(finean);
		MO.Velocity.y += speed * sin(finean);
		break;
	case SECSPEC_ScrollNorthSlow:
	case SECSPEC_ScrollNorthMedium:
	case SECSPEC_ScrollNorthFast:
		ThrustPlayer(90.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthSlow], deltaTime);
		break;
	case SECSPEC_ScrollEastSlow:
	case SECSPEC_ScrollEastMedium:
	case SECSPEC_ScrollEastFast:
		ThrustPlayer(0.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthSlow:
	case SECSPEC_ScrollSouthMedium:
	case SECSPEC_ScrollSouthFast:
		ThrustPlayer(270.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthSlow], deltaTime);
		break;
	case SECSPEC_ScrollWestSlow:
	case SECSPEC_ScrollWestMedium:
	case SECSPEC_ScrollWestFast:
		ThrustPlayer(180.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthWestSlow:
	case SECSPEC_ScrollNorthWestMedium:
	case SECSPEC_ScrollNorthWestFast:
		ThrustPlayer(135.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthEastSlow:
	case SECSPEC_ScrollNorthEastMedium:
	case SECSPEC_ScrollNorthEastFast:
		ThrustPlayer(45.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthEastSlow:
	case SECSPEC_ScrollSouthEastMedium:
	case SECSPEC_ScrollSouthEastFast:
		ThrustPlayer(315.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthWestSlow:
	case SECSPEC_ScrollSouthWestMedium:
	case SECSPEC_ScrollSouthWestFast:
		ThrustPlayer(225.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollEast5:
	case SECSPEC_ScrollEast10:
	case SECSPEC_ScrollEast25:
	case SECSPEC_ScrollEast30:
	case SECSPEC_ScrollEast35:
		ThrustPlayer(0.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEast5], deltaTime);
		break;
	case SECSPEC_ScrollNorth5:
	case SECSPEC_ScrollNorth10:
	case SECSPEC_ScrollNorth25:
	case SECSPEC_ScrollNorth30:
	case SECSPEC_ScrollNorth35:
		ThrustPlayer(90.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorth5], deltaTime);
		break;
	case SECSPEC_ScrollSouth5:
	case SECSPEC_ScrollSouth10:
	case SECSPEC_ScrollSouth25:
	case SECSPEC_ScrollSouth30:
	case SECSPEC_ScrollSouth35:
		ThrustPlayer(270.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouth5], deltaTime);
		break;
	case SECSPEC_ScrollWest5:
	case SECSPEC_ScrollWest10:
	case SECSPEC_ScrollWest25:
	case SECSPEC_ScrollWest30:
	case SECSPEC_ScrollWest35:
		ThrustPlayer(180.0, MainGameInfo(Level.Game).pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWest5], deltaTime);
		break;
	};
}

//==========================================================================
//
//  PlayerInContents
//
//==========================================================================

void PlayerInContents(float deltaTime)
{
	if (!MO.WaterLevel)
	{
		return;
	}
	switch (MO.WaterType)
	{
	case CONTENTS_LAVA:
		if (!Powers[pw_ironfeet] &&
			Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 10);
		}
		break;

	case CONTENTS_NUKAGE:
		if (!Powers[pw_ironfeet] &&
			Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
		break;

	case CONTENTS_SLIME:
		if (!Powers[pw_ironfeet] &&
			Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 10);
		}
		break;

	case CONTENTS_HELLSLIME:
		if ((!Powers[pw_ironfeet] || (P_Random() < 5)) &&
			Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 20);
		}
		break;

	case CONTENTS_SLUDGE:
		if (!Powers[pw_ironfeet] &&
			Level.XLevel.Time - LastSectorDamageTime >= 32.0 / 35.0)
		{
			LastSectorDamageTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 4);
		}
		break;

	case CONTENTS_HAZARD:
		HazardTime += 2.0 * deltaTime;
		break;
	}
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	float angle;
	float delta;

	MovePsprites(deltaTime);

	// fall to the ground
	if (ViewHeight > 6.0)
		ViewHeight -= 1.0;

	if (ViewHeight < 6.0)
		ViewHeight = 6.0;

	DeltaViewHeight = 0.0;
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		angle = atan2(Attacker.Origin.y - MO.Origin.y,
			Attacker.Origin.x - MO.Origin.x);

		delta = AngleMod180(angle - MO.Angles.yaw);

		if (delta < 5.0 && delta > -5.0)
		{
			// Looking at killer,
			//  so fade damage flash down.
			MO.Angles.yaw = angle;

			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
		}
		else if (delta > 0.0)
			MO.Angles.yaw += 5.0;
		else
			MO.Angles.yaw -= 5.0;
	}
	else if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (Buttons & BT_USE)
		PlayerState = PST_REBORN;
}

//==========================================================================
//
//  PrevWeapon
//
//==========================================================================

void PrevWeapon()
{
	int			i;
	int			CurIdx;
	int			NewWeap;

	CurIdx = 0;
	for (i = 0; i < StrifeDefs::NUMWEAPONS; i++)
	{
		if (ReadyWeapon == MainGameInfo(Level.Game).WeaponOrder[i])
		{
			CurIdx = i;
			break;
		}
	}
	for (i = StrifeDefs::NUMWEAPONS - 1; i > 0; i--)
	{
		NewWeap = MainGameInfo(Level.Game).WeaponOrder[(CurIdx + i) % StrifeDefs::NUMWEAPONS];
		if (WeaponOwned[NewWeap])
		{
			PendingWeapon = NewWeap;
			return;
		}
	}
}

//==========================================================================
//
//  NextWeapon
//
//==========================================================================

void NextWeapon()
{
	int			i;
	int			CurIdx;
	int			NewWeap;

	CurIdx = 0;
	for (i = 0; i < StrifeDefs::NUMWEAPONS; i++)
	{
		if (ReadyWeapon == MainGameInfo(Level.Game).WeaponOrder[i])
		{
			CurIdx = i;
			break;
		}
	}
	for (i = 1; i < StrifeDefs::NUMWEAPONS; i++)
	{
		NewWeap = MainGameInfo(Level.Game).WeaponOrder[(CurIdx + i) % StrifeDefs::NUMWEAPONS];
		if (WeaponOwned[NewWeap])
		{
			PendingWeapon = NewWeap;
			return;
		}
	}
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;

	impulse = Impulse;
	Impulse = 0;

	if (impulse <= 8)
	{
		ChangeWeapon(impulse - 1);
	}
	else if (impulse == 11)
	{
		InvThrow();
	}
	else if (impulse == 13)
	{
		InvLeft();
	}
	else if (impulse == 14)
	{
		InvRight();
	}
	else if (impulse == 15)
	{
		InvUse();
	}
	else if (impulse == 16)
	{
		//  Suicide
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == 17)
	{
		PrevWeapon();
	}
	else if (impulse == 18)
	{
		NextWeapon();
	}
	else if (impulse >= 200 && impulse <= 205)
	{
		StrifeLevelInfo(Level).ConChoiceImpulse(impulse - 200);
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	// Copy view angles
	MO.Angles = ViewAngles;

	// fixme: do this in the cheat code
	if (Cheats & StrifeDefs::CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (Actor(MO).bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		Actor(MO).bJustAttacked = false;
	}

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime <= 0.0)
			JumpTime = 0.0;
	}

	// Move around.
	// Reactiontime is used to prevent movement
	//  for a bit after a teleport.
	if (Actor(MO).ReactionTime)
	{
		Actor(MO).ReactionTime -= deltaTime;
		if (Actor(MO).ReactionTime <= 0.0)
			Actor(MO).ReactionTime = 0.0;
		if (Actor(MO).bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.WaterLevel > 1)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special)
		PlayerInSpecialSector(deltaTime);
	PlayerInContents(deltaTime);

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			P_UseLines();
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	//  cycle psprites
	MovePsprites(deltaTime);

	//  Counters, time dependend power ups.

	if (Powers[pw_invulnerability])
	{
		Powers[pw_invulnerability] -= deltaTime;
		if (Powers[pw_invulnerability] <= 0.0)
			Powers[pw_invulnerability] = 0.0;
	}

	if (Powers[pw_invisibility])
	{
		Powers[pw_invisibility] -= deltaTime;
		if (Powers[pw_invisibility] <= 0.0)
		{
			Powers[pw_invisibility] = 0.0;
			MO.Alpha = 1.0;
		}
	}

	if (Powers[pw_infrared])
	{
		Powers[pw_infrared] -= deltaTime;
		if (Powers[pw_infrared] <= 0.0)
			Powers[pw_infrared] = 0.0;
	}

	if (Powers[pw_ironfeet])
	{
		if(P_Random() < 10)
		{
			if(P_Random() < 5 || !(Level.XLevel.TicTime & 0x1f))
				MO.PlaySound('misc/mask', CHAN_VOICE);
		}

		Powers[pw_ironfeet] -= deltaTime;
		if (Powers[pw_ironfeet] <= 0.0)
			Powers[pw_ironfeet] = 0.0;
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (Level.XLevel.Time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
	}

	// Handling colourmaps.
	if (Powers[pw_invulnerability])
	{
		if (Powers[pw_invulnerability] > 4.0 ||
			(ftoi(4.0 * Powers[pw_invulnerability]) & 1))
			FixedColourmap = INVERSECOLOURMAP;
		else
			FixedColourmap = 0;
	}
	else if (Powers[pw_infrared])
	{
		if (Powers[pw_infrared] > 4.0 ||
			(ftoi(4.0 * Powers[pw_infrared]) & 1))
		{
			// almost full bright
			FixedColourmap = 1;
		}
		else
			FixedColourmap = 0;
	}
	else
		FixedColourmap = 0;
}

//==========================================================================
//
//  PaletteFlash
//
//  Do red-/gold-shifts from damage/items
//
//==========================================================================

void PaletteFlash()
{
	CShifts[CSHIFT_Contents] = 0;
	if (MO.WaterLevel == 3)
	{
		switch (MO.WaterType)
		{
		case CONTENTS_WATER:
			CShifts[CSHIFT_Contents] = RGBA(130, 80, 50, 128);
			break;

		case CONTENTS_LAVA:
			CShifts[CSHIFT_Contents] = RGBA(255, 80, 0, 150);
			break;

		case CONTENTS_NUKAGE:
			CShifts[CSHIFT_Contents] = RGBA(50, 255, 50, 150);
			break;

		case CONTENTS_SLIME:
			CShifts[CSHIFT_Contents] = RGBA(0, 25, 5, 150);
			break;

		case CONTENTS_HELLSLIME:
			CShifts[CSHIFT_Contents] = RGBA(255, 80, 0, 150);
			break;

		case CONTENTS_BLOOD:
			CShifts[CSHIFT_Contents] = RGBA(160, 16, 16, 150);
			break;

		case CONTENTS_SLUDGE:
			CShifts[CSHIFT_Contents] = RGBA(128, 160, 128, 150);
			break;

		case CONTENTS_HAZARD:
			CShifts[CSHIFT_Contents] = RGBA(128, 160, 128, 128);
			break;
		}
	}

	CShifts[CSHIFT_Damage] = 0;
	if (DamageFlash)
	{
		int Amount = ftoi(114.0 * DamageFlash);
		if (Amount >= 228)
			Amount = 228;
		CShifts[CSHIFT_Damage] = RGBA(255, 0, 0, Amount);
	}

	CShifts[CSHIFT_Bonus] = 0;
	if (BonusFlash)
	{
		int Amount = ftoi(256.0 * BonusFlash);
		if (Amount >= 128)
			Amount = 128;
		CShifts[CSHIFT_Bonus] = RGBA(215, 186, 68, Amount);
	}

	//FIXME add hazard flash.
	CShifts[CSHIFT_Hazard] = 0;
	if (HazardTime > 16.0 || ftoi(4.0 * HazardTime) & 1)
	{
		CShifts[CSHIFT_Hazard] = RGBA(0, 255, 0, 32);
	}
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	ViewOrg.x = MO.Origin.x;
	ViewOrg.y = MO.Origin.y;

	if (LocalQuakeHappening)
	{
		float intensity;

		intensity = itof(LocalQuakeHappening);
		ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
		ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
	}

	ViewAngles = MO.Angles;

	ReadyAmmo = Weapon(ViewEnt).Ammo;

	PaletteFlash();

	ClientSetViewOrg(ViewOrg.x, ViewOrg.y, ViewOrg.z);
}

//==========================================================================
//
//  SetPlayerRunState
//
//==========================================================================

void SetPlayerRunState()
{
	if (MO.State == Actor(MO).IdleState)
	{
		MO.SetState(Actor(MO).SeeState);
	}
}

//==========================================================================
//
//  SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor SpawnPlayerMissile(class<Actor> type)
{
	Actor A;
	TVec dir;

	// see which target is to be aimed at
	Actor(MO).Aim(dir, 16.0 * 64.0);

	A = Level.Spawn(type, MO.Origin + vector(0.0, 0.0, 32.0 - MO.FloorClip));

	if (A.SightSound)
		A.PlaySound(A.SightSound, CHAN_VOICE);

	A.Target = Actor(MO);
	A.Velocity = dir * A.Speed;
	VectorAngles(&dir, &A.Angles);

	A.CheckMissileSpawn();

	return A;
}

//==========================================================================
//
//  SpawnPlayerMissileAngle
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor SpawnPlayerMissileAngle(class<Actor> type, float angle)
{
	Actor A;
	TVec dir;

	// see which target is to be aimed at
	Actor(MO).Aim(dir, 16.0 * 64.0, angle);

	A = Level.Spawn(type, MO.Origin + vector(0.0, 0.0, 32.0 - MO.FloorClip));

	if (A.SightSound)
		A.PlaySound(A.SightSound, CHAN_VOICE);

	A.Target = Actor(MO);
	A.Velocity = dir * A.Speed;
	VectorAngles(&dir, &A.Angles);

	A.CheckMissileSpawn();

	return A;
}

//***************************************************************************
//
//  WEAPON UTILITES
//
//***************************************************************************

//==========================================================================
//
//	SetWeapon
//
//==========================================================================

void SetWeapon(int NewWeapon)
{
	ReadyWeapon = NewWeapon;
	PendingWeapon = StrifeDefs::wp_nochange;
	if (ViewEnt)
	{
		ViewEnt.Destroy();
	}
	ViewEnt = Weapon(StrifeLevelInfo(Level).Spawn(
		MainGameInfo(Level.Game).WeaponClasses[NewWeapon], vector(0.0, 0.0, 0.0)));
	ViewEnt.Owner = MO;
}

//===========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
// Uses player
//
//===========================================================================

void BringUpWeapon()
{
	PendingWeapon = StrifeDefs::wp_nochange;
	ViewStates[ps_weapon].SY = Weapon::WEAPONBOTTOM;

	SetViewState(ps_weapon, Weapon(ViewEnt).UpState);
}

//==========================================================================
//
//  ChangeWeapon
//
//  The actual changing of the weapon is done when the weapon psprite can
// do it (read: not in the middle of an attack).
//
//==========================================================================

void ChangeWeapon(int newweapon)
{
	int ammo;
	int count;

	if (newweapon == StrifeDefs::wp_crossbow && WeaponOwned[StrifeDefs::wp_crossbow2] &&
		(ReadyWeapon == StrifeDefs::wp_crossbow || !Ammo[StrifeDefs::am_electric_arrow]))
	{
		newweapon = StrifeDefs::wp_crossbow2;
	}
	if (newweapon == StrifeDefs::wp_grenade && WeaponOwned[StrifeDefs::wp_grenade2] &&
		(ReadyWeapon == StrifeDefs::wp_grenade || !Ammo[StrifeDefs::am_grenade1]))
	{
		newweapon = StrifeDefs::wp_grenade2;
	}
	if (newweapon == StrifeDefs::wp_blaster && WeaponOwned[StrifeDefs::wp_blaster2] &&
		ReadyWeapon == StrifeDefs::wp_blaster)
	{
		newweapon = StrifeDefs::wp_blaster2;
	}

	//	Check if we have ammo.
	ammo = MainGameInfo(Level.Game).WeaponClasses[newweapon].default.Ammo;
	if (newweapon == StrifeDefs::wp_blaster)
		count = 20;
	else if (newweapon == StrifeDefs::wp_blaster2)
		count = 30;
	else
		count = 1;
	if (ammo != StrifeDefs::am_noammo && Ammo[ammo] < count)
		return;

	if (WeaponOwned[newweapon] && newweapon != ReadyWeapon)
	{
		PendingWeapon = newweapon;
	}
}

//===========================================================================
//
//  DropWeapon
//
//  Player died, so put the weapon away.
//
//===========================================================================

void DropWeapon()
{
	SetViewState(ps_weapon, Weapon(ViewEnt).DownState);
}

//===========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player.
//
//===========================================================================

void SetupPsprites()
{
	int i;

	// remove all  ViewStates
	for (i = 0; i < NUMPSPRITES; i++)
	{
		SetViewState(i, none);
	}

	// spawn the gun
	BringUpWeapon();
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine.
//
//==========================================================================

void MovePsprites(float deltaTime)
{
	AdvanceViewStates(deltaTime);
	ViewStates[ps_flash].SX = ViewStates[ps_weapon].SX;
	ViewStates[ps_flash].SY = ViewStates[ps_weapon].SY;
}

//==========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough ammo to shoot.
// If not, selects the next weapon to use.
//
//==========================================================================

int CheckAmmo()
{
	int ammo;
	int count;

	ammo = Weapon(ViewEnt).Ammo;

	// Minimal amount for one shot varies.
	if (ReadyWeapon == StrifeDefs::wp_blaster)
		count = 20;
	else if (ReadyWeapon == StrifeDefs::wp_blaster2)
		count = 30;
	else
		count = 1;	// Regular.

	// Some do not need ammunition anyway.
	// Return if current ammunition sufficient.
	if (ammo == StrifeDefs::am_noammo || Ammo[ammo] >= count)
		return true;

	// Out of ammo, pick a weapon to change to.
	// Preferences are set here.
	do
	{
		if (WeaponOwned[StrifeDefs::wp_flame] && Ammo[StrifeDefs::am_cell])
		{
			PendingWeapon = StrifeDefs::wp_flame;
		}
		else if (WeaponOwned[StrifeDefs::wp_riffle] && Ammo[StrifeDefs::am_clip])
		{
			PendingWeapon = StrifeDefs::wp_riffle;
		}
		else if (WeaponOwned[StrifeDefs::wp_crossbow]
			&& Ammo[StrifeDefs::am_electric_arrow])
		{
			PendingWeapon = StrifeDefs::wp_crossbow;
		}
		else if (WeaponOwned[StrifeDefs::wp_missile] && Ammo[StrifeDefs::am_misl])
		{
			PendingWeapon = StrifeDefs::wp_missile;
		}
		else
		{
			// If everything fails.
			PendingWeapon = StrifeDefs::wp_fist;
		}
	}
	while (PendingWeapon == StrifeDefs::wp_nochange);

	// Now set appropriate weapon overlay.
	SetViewState(ps_weapon, Weapon(ViewEnt).DownState);

	return false;
}

//===========================================================================
//
//  FireWeapon
//
//===========================================================================

void FireWeapon()
{
	if (!CheckAmmo())
	{
		return;
	}

	MO.SetState(Actor(MO).MeleeState);
	SetViewState(ps_weapon, Weapon(ViewEnt).AttackState);
	if (Weapon(ViewEnt).bRaiseNoiseAlert)
		StrifeLevelInfo(Level).NoiseAlert(Actor(MO), Actor(MO));
}

//==========================================================================
//
//  P_UseLines
//
//  Looks for special lines in front of the player to activate.
//
//==========================================================================

void P_UseLines()
{
	float x1;
	float y1;
	float x2;
	float y2;
	TVec useDir;
	intercept_t* in;

	AngleVector(&MO.Angles, &useDir);
	x1 = MO.Origin.x;
	y1 = MO.Origin.y;

	x2 = x1 + USETHINGRANGE * useDir.x;
	y2 = y1 + USETHINGRANGE * useDir.y;
	foreach MO.PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES | PT_ADDTHINGS)
	{
		TVec hit_point;
		opening_t *open;

		if (!in->bIsALine)
		{
			//	Check height.
			if (MO.Origin.z >= in->Thing.Origin.z + in->Thing.Height ||
				MO.Origin.z + MO.Height <= in->Thing.Origin.z)
			{
				continue;
			}
			if (StrifeLevelInfo(Level).StartConversation(Actor(MO), Actor(in->Thing)))
			{
				break;
			}
			continue;
		}

		if (!(in->line->flags & ML_TWOSIDED))
			break;	// stop

		hit_point = MO.Origin + (USETHINGRANGE * in->frac) * useDir;
		open = LineOpenings(in->line, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z + MO.Height);
		if (!open || open->range < 1.0)
		{
			// can't use through a wall
			break;
		}
		continue;
	}

	x2 = x1 + USERANGE * useDir.x;
	y2 = y1 + USERANGE * useDir.y;
	foreach MO.PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES)
	{
		if (!in->line->special || (Level.GET_SPAC(in->line->flags) != SPAC_USE &&
			Level.GET_SPAC(in->line->flags) != SPAC_USETHROUGH))
		{
			TVec hit_point;
			opening_t *open;

			hit_point = MO.Origin + (USERANGE * in->frac) * useDir;
			open = LineOpenings(in->line, hit_point);
			open = FindOpening(open, hit_point.z, hit_point.z + MO.Height);
			if (!open)
			{
				MO.PlaySound('*usefail', CHAN_VOICE);

				// can't use through a wall
				break;
			}
			// not a special line, but keep checking
			continue;
		}

		if (PointOnPlaneSide(MO.Origin, in->line) == 1)
		{
			//	Don't use back side unless it's a two-sided line.
			if (in->line->backsector != NULL)
				continue;
			break;
		}

		StrifeLevelInfo(Level).ActivateLine(in->line, Actor(MO), 0, SPAC_USE);

		//WAS can't use more than one special line in a row
		//jff 3/21/98 NOW multiple use allowed with enabling line flag
		if (Level.GET_SPAC(in->line->flags) != SPAC_USETHROUGH)
		{
			break;
		}
	}
}

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= StrifeDefs::CF_GODMODE;
	if (Cheats & StrifeDefs::CF_GODMODE)
	{
		if (MO)
			MO.Health = GOD_HEALTH;
		Health = GOD_HEALTH;
		cprint("Degreelessness Mode On");
	}
	else
		cprint("Degreelessness Mode Off");
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= StrifeDefs::CF_NOCLIP;
	if (Cheats & StrifeDefs::CF_NOCLIP)
		cprint("No Clipping Mode ON");
	else
		cprint("No Clipping Mode OFF");
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
	int i;

	// Backpack
	if (Cmd_CheckParm("Backpack"))
	{
		Backpack = true;
	}

	// Weapons
	if (Cmd_CheckParm("Weapons"))
	{
		for (i = 0; i < StrifeDefs::NUMWEAPONS; i++)
		{
			WeaponOwned[i] = true;
		}
	}

	// Ammo
	if (Cmd_CheckParm("Ammo"))
	{
		for (i = 0; i < StrifeDefs::NUMAMMO; i++)
		{
			Ammo[i] = MainGameInfo(Level.Game).maxammo[i] * (Backpack ? 2 : 1);
		}
	}

	// Keys
	if (Cmd_CheckParm("Keys"))
	{
		Keys = 0x03ffffff;
	}

	// Health
	if (Cmd_CheckParm("Health"))
	{
		Health = MAXHEALTH + Stamina;
		MO.Health = MAXHEALTH + Stamina;
	}

	// Comm unit
	if (Cmd_CheckParm("CommUnit"))
	{
		Communicator = true;
	}

	// Sigil piece
	if (Cmd_CheckParm("Sigil"))
	{
		GiveSigilPiece();
	}

	// Quest items.
	for (i = 0; i < NUMQUESTS; i++)
		if (Cmd_CheckParm(va("Quest%d", i + 1)))
			GiveQuest(i);
}

//==========================================================================
//
//  P_Massacre
//
//  Kills all monsters.
//
//==========================================================================

int P_Massacre()
{
	int count;
	Actor mo;

	count = 0;
	foreach MO.AllThinkers(Actor, mo)
	{
		if (mo.bCountKill && (mo.Health > 0))
		{
			mo.Damage(none, none, 10000);
			count++;
		}
	}
	return count;
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	cprint("%d MONSTERS KILLED", P_Massacre());
}

//==========================================================================
//
//  ClientBlood
//
//==========================================================================

void ClientBlood(TVec org, int damage)
{
	int i, j;
	particle_t *p;
	int c;

	for (i = 0; i < damage; i++)
	{
		p = Level.NewParticle();
		if (!p)
			return;

		p->org = org;
		c = P_Random() >> 1;
		p->colour = RGB(32 + c, c >> 4, c >> 4);
		p->die = Level.XLevel.Time + 0.5 * Random();
		p->vel.x = 32.0 * (Random() - 0.5);
		p->vel.y = 32.0 * (Random() - 0.5);
		p->vel.z = 32.0 * (Random() - 0.5);
	}
}

//==========================================================================
//
//  ClientExplosion
//
//==========================================================================

void ClientExplosion(int etype, TVec org)
{
	dlight_t* dl;

	dl = Level.AllocDlight(none);
	dl->origin = org;
	dl->radius = 350.0;
	dl->colour = StrifeDefs.default.ecolours[etype];
	dl->die = Level.XLevel.Time + 0.5;
	dl->decay = 300.0;
}

//==========================================================================
//
//  ClientSpeech
//
//==========================================================================

void ClientSpeech(int SpeechNum)
{
	ClientGameBaseEx(ClGame).StartSpeech(SpeechNum);
}

//==========================================================================
//
//  ClientVoice
//
//==========================================================================

void ClientVoice(int VoiceNum)
{
	LocalSound(StrToName(va("svox/voc%d", VoiceNum)));
}

//==========================================================================
//
//  ClientSlideshow1
//
//==========================================================================

void ClientSlideshow1()
{
	ClientGameBaseEx(ClGame).StartConSlideshow1();
}

//==========================================================================
//
//  ClientSlideshow2
//
//==========================================================================

void ClientSlideshow2()
{
	ClientGameBaseEx(ClGame).StartConSlideshow2();
}

//==========================================================================
//
//  ClientFinaleType
//
//==========================================================================

void ClientFinaleType(int Type)
{
	ClientGameBaseEx(ClGame).SetFinaleType(Type);
}

defaultproperties
{
}
