//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponCrossbow : Weapon;

//==========================================================================
//
//	A_FireElectricArrow
//
//==========================================================================

void A_FireElectricArrow()
{
	float savedangle;

	savedangle = Player.MO.Angles.yaw;
	Player.MO.Angles.yaw = AngleMod360(Player.MO.Angles.yaw +
		(Random() - Random()) * 45.0 / 8.0 / itof(1 << (Player.Accuracy * 5 / 100)));
	Player.Ammo[Ammo]--;
	Player.MO.SetState(Player.MO.MissileState);
	Player.SpawnPlayerMissile(ElectricArrow);
	Player.MO.Angles.yaw = savedangle;
	Player.MO.PlaySound('weapons/xbowshoot', CHAN_WEAPON);
}

//==========================================================================
//
//	A_FirePoisonArrow
//
//==========================================================================

void A_FirePoisonArrow()
{
	float savedangle;

	savedangle = Player.MO.Angles.yaw;
	Player.MO.Angles.yaw = AngleMod360(Player.MO.Angles.yaw +
		(Random() - Random()) * 45.0 / 8.0 / itof(1 << (Player.Accuracy * 5 / 100)));
	Player.Ammo[Ammo]--;
	Player.MO.SetState(Player.MO.MissileState);
	Player.SpawnPlayerMissile(PoisonArrow);
	Player.MO.Angles.yaw = savedangle;
	Player.MO.PlaySound('weapons/xbowshoot', CHAN_WEAPON);
}

__states__
{
	S_XBOW('XBOW', 0, 1.0 / 35.0, S_XBOW_2)
	{
		Player.SetPsprite(ps_flash, S_XBOWFLASH1);
		A_WeaponReady();
	}
	S_XBOW_2('XBOW', 0, 1.0 / 35.0, S_XBOW_2) { A_WeaponReady(); }
	S_XBOWDOWN('XBOW', 0, 1.0 / 35.0, S_XBOWDOWN_2)
	{
		Player.SetPsprite(ps_flash, S_NULL);
		A_Lower();
	}
	S_XBOWDOWN_2('XBOW', 0, 1.0 / 35.0, S_XBOWDOWN_2) { A_Lower(); }
	S_XBOWUP('XBOW', 0, 1.0 / 35.0, S_XBOWUP) { A_Raise(); }
	S_XBOW1('XBOW', 0, 3.0 / 35.0, S_XBOW2) { A_ClearFlash(); }
	S_XBOW2('XBOW', 1, 6.0 / 35.0, S_XBOW3) { A_FireElectricArrow(); }
	S_XBOW3('XBOW', 2, 4.0 / 35.0, S_XBOW4) { }
	S_XBOW4('XBOW', 3, 6.0 / 35.0, S_XBOW5) { }
	S_XBOW5('XBOW', 4, 3.0 / 35.0, S_XBOW6) { }
	S_XBOW6('XBOW', 5, 5.0 / 35.0, S_XBOW7) { }
	S_XBOW7('XBOW', 6, 5.0 / 35.0, S_XBOW) { A_CheckReload(); }
	S_XBOWFLASH1('XBOW', 10, 5.0 / 35.0, S_XBOWFLASH2) { }
	S_XBOWFLASH2('XBOW', 11, 5.0 / 35.0, S_XBOWFLASH3) { }
	S_XBOWFLASH3('XBOW', 12, 5.0 / 35.0, S_XBOWFLASH1) { }
	S_XBOWPOISON('XBOW', 7, 1.0 / 35.0, S_XBOWPOISON) { A_WeaponReady(); }
	S_XBOWPOISONDOWN('XBOW', 7, 1.0 / 35.0, S_XBOWPOISONDOWN) { A_Lower(); }
	S_XBOWPOISONUP('XBOW', 7, 1.0 / 35.0, S_XBOWPOISONUP) { A_Raise(); }
	S_XBOWPOISON1('XBOW', 7, 3.0 / 35.0, S_XBOWPOISON2) { }
	S_XBOWPOISON2('XBOW', 1, 6.0 / 35.0, S_XBOWPOISON3) { A_FirePoisonArrow(); }
	S_XBOWPOISON3('XBOW', 2, 4.0 / 35.0, S_XBOWPOISON4) { }
	S_XBOWPOISON4('XBOW', 3, 6.0 / 35.0, S_XBOWPOISON5) { }
	S_XBOWPOISON5('XBOW', 4, 3.0 / 35.0, S_XBOWPOISON6) { }
	S_XBOWPOISON6('XBOW', 8, 5.0 / 35.0, S_XBOWPOISON7) { }
	S_XBOWPOISON7('XBOW', 9, 5.0 / 35.0, S_XBOWPOISON) { A_CheckReload(); }
}

defaultproperties
{
	Ammo = am_electric_arrow;
	UpState = S_XBOWUP;
	DownState = S_XBOWDOWN;
	ReadyState = S_XBOW;
	AttackState = S_XBOW1;
	FlashState = S_LIGHTDONE;
	bRaiseNoiseAlert = false;
}

class WeaponCrossbow2 : WeaponCrossbow;

defaultproperties
{
	Ammo = am_poison_arrow;
	UpState = S_XBOWPOISONUP;
	DownState = S_XBOWPOISONDOWN;
	ReadyState = S_XBOWPOISON;
	AttackState = S_XBOWPOISON1;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2005/11/19 13:43:51  dj_jl
//  Renamed sounds.
//
//  Revision 1.5  2004/08/23 19:24:01  dj_jl
//  Moved weapon utilites to player class.
//
//  Revision 1.4  2004/08/22 19:23:27  dj_jl
//  Moved many functions to player class.
//
//  Revision 1.3  2004/01/30 17:39:34  dj_jl
//  Implemented many action functions.
//
//  Revision 1.2  2003/11/12 16:51:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/11/02 08:20:57  dj_jl
//  New style classes.
//
//**************************************************************************
