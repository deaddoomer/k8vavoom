//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponCrossbow : Weapon;

//==========================================================================
//
//	A_FireElectricArrow
//
//==========================================================================

final void A_FireElectricArrow()
{
	float savedangle;

	savedangle = Owner.Angles.yaw;
	Owner.Angles.yaw = AngleMod360(Owner.Angles.yaw +
		(Random() - Random()) * 45.0 / 8.0 / itof(1 << (Player(Owner.Player).Accuracy * 5 / 100)));
	DecAmmo(1);
	Owner.SetState(Actor(Owner).MissileState);
	Actor(Owner).SpawnPlayerMissile(ElectricBolt);
	Owner.Angles.yaw = savedangle;
	Owner.PlaySound('weapons/xbowshoot', CHAN_WEAPON);
}

//==========================================================================
//
//	A_FirePoisonArrow
//
//==========================================================================

final void A_FirePoisonArrow()
{
	float savedangle;

	savedangle = Owner.Angles.yaw;
	Owner.Angles.yaw = AngleMod360(Owner.Angles.yaw +
		(Random() - Random()) * 45.0 / 8.0 / itof(1 << (Player(Owner.Player).Accuracy * 5 / 100)));
	DecAmmo(1);
	Owner.SetState(Actor(Owner).MissileState);
	Actor(Owner).SpawnPlayerMissile(PoisonBolt);
	Owner.Angles.yaw = savedangle;
	Owner.PlaySound('weapons/xbowshoot', CHAN_WEAPON);
}

__states__
{
	S_XBOW('XBOW', 0, 1.0 / 35.0, S_XBOW_2)
	{
		Owner.Player.SetViewState(ps_flash, S_XBOWFLASH1);
		A_WeaponReady();
	}
	S_XBOW_2('XBOW', 0, 1.0 / 35.0, S_XBOW_2) = A_WeaponReady
	S_XBOWDOWN('XBOW', 0, 1.0 / 35.0, S_XBOWDOWN_2) = A_Lower
	S_XBOWDOWN_2('XBOW', 0, 1.0 / 35.0, S_XBOWDOWN_2) = A_Lower
	S_XBOWUP('XBOW', 0, 1.0 / 35.0, S_XBOWUP) = A_Raise
	S_XBOW1('XBOW', 0, 3.0 / 35.0, S_XBOW2) = A_ClearFlash
	S_XBOW2('XBOW', 1, 6.0 / 35.0, S_XBOW3) = A_FireElectricArrow
	S_XBOW3('XBOW', 2, 4.0 / 35.0, S_XBOW4) = none
	S_XBOW4('XBOW', 3, 6.0 / 35.0, S_XBOW5) = none
	S_XBOW5('XBOW', 4, 3.0 / 35.0, S_XBOW6) = none
	S_XBOW6('XBOW', 5, 5.0 / 35.0, S_XBOW7) = none
	S_XBOW7('XBOW', 6, 5.0 / 35.0, S_XBOW) = A_CheckReload
	S_XBOWFLASH1('XBOW', 10, 5.0 / 35.0, S_XBOWFLASH2) = none
	S_XBOWFLASH2('XBOW', 11, 5.0 / 35.0, S_XBOWFLASH3) = none
	S_XBOWFLASH3('XBOW', 12, 5.0 / 35.0, S_XBOWFLASH1) = none
	S_XBOWPOISON('XBOW', 7, 1.0 / 35.0, S_XBOWPOISON) = A_WeaponReady
	S_XBOWPOISONDOWN('XBOW', 7, 1.0 / 35.0, S_XBOWPOISONDOWN) = A_Lower
	S_XBOWPOISONUP('XBOW', 7, 1.0 / 35.0, S_XBOWPOISONUP) = A_Raise
	S_XBOWPOISON1('XBOW', 7, 3.0 / 35.0, S_XBOWPOISON2) = none
	S_XBOWPOISON2('XBOW', 1, 6.0 / 35.0, S_XBOWPOISON3) = A_FirePoisonArrow
	S_XBOWPOISON3('XBOW', 2, 4.0 / 35.0, S_XBOWPOISON4) = none
	S_XBOWPOISON4('XBOW', 3, 6.0 / 35.0, S_XBOWPOISON5) = none
	S_XBOWPOISON5('XBOW', 4, 3.0 / 35.0, S_XBOWPOISON6) = none
	S_XBOWPOISON6('XBOW', 8, 5.0 / 35.0, S_XBOWPOISON7) = none
	S_XBOWPOISON7('XBOW', 9, 5.0 / 35.0, S_XBOWPOISON) = A_CheckReload
}

defaultproperties
{
	Ammo = StrifeDefs::am_electric_arrow;
	UpState = S_XBOWUP;
	DownState = S_XBOWDOWN;
	ReadyState = S_XBOW;
	AttackState = S_XBOW1;
	FlashState = S_LIGHTDONE;
	bRaiseNoiseAlert = false;
}

class WeaponCrossbow2 : WeaponCrossbow;

defaultproperties
{
	Ammo = StrifeDefs::am_poison_arrow;
	UpState = S_XBOWPOISONUP;
	DownState = S_XBOWPOISONDOWN;
	ReadyState = S_XBOWPOISON;
	AttackState = S_XBOWPOISON1;
}
