//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class AcolyteBase : Pawn
	abstract;

//==========================================================================
//
//	A_AcolyteDeath
//
//==========================================================================

void A_AcolyteDeath()
{
	int i;
	Actor Other;

	//	Only the Blue Acolyte does extra stuff on death.
	if (Class != Acolyte8)
		return;

	//	Make sure there is a player alive for victory.
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
		{
			break;
		}
	}
	if (i == MAXPLAYERS)
		return;

	//	Make sure all the other blue acolytes are dead.
	FOREACH(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			//	Found a living one.
			return;
		}
	}

	Level.Game.Players[0].GiveQuest(QUEST_7);
	Level.Game.Players[0].SetObjectives(14);
	MSG_Select(MSG_SV_RELIABLE);
	MSG_WriteByte(StrifeDefs::svc_voice);
	MSG_WriteShort(14);
}

__states__
{
	S_ACOLYTE_XDIE1('GIBS', 0, 5.0 / 35.0, S_ACOLYTE_XDIE2) { A_Fall(); }
	S_ACOLYTE_XDIE2('GIBS', 1, 5.0 / 35.0, S_ACOLYTE_XDIE3) { A_XDying(); }
	S_ACOLYTE_XDIE3('GIBS', 2, 5.0 / 35.0, S_ACOLYTE_XDIE4) { A_XDying(); }
	S_ACOLYTE_XDIE4('GIBS', 3, 4.0 / 35.0, S_ACOLYTE_XDIE5) { A_XDying(); }
	S_ACOLYTE_XDIE5('GIBS', 4, 4.0 / 35.0, S_ACOLYTE_XDIE6) { A_XScream(); }
	S_ACOLYTE_XDIE6('GIBS', 5, 4.0 / 35.0, S_ACOLYTE_XDIE7) { A_XDying(); }
	S_ACOLYTE_XDIE7('GIBS', 6, 4.0 / 35.0, S_ACOLYTE_XDIE8) { }
	S_ACOLYTE_XDIE8('GIBS', 7, 4.0 / 35.0, S_ACOLYTE_XDIE9) { }
	S_ACOLYTE_XDIE9('GIBS', 8, 5.0 / 35.0, S_ACOLYTE_XDIE10) { }
	S_ACOLYTE_XDIE10('GIBS', 9, 5.0 / 35.0, S_ACOLYTE_XDIE11) { A_AcolyteDeath(); }
	S_ACOLYTE_XDIE11('GIBS', 10, 5.0 / 35.0, S_ACOLYTE_XDIE12) { }
	S_ACOLYTE_XDIE12('GIBS', 11, 1400.0 / 35.0, S_NULL) { }
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2006/02/17 19:06:53  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.6  2006/02/15 23:34:27  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.5  2005/03/16 15:04:41  dj_jl
//  More work on line specials.
//
//  Revision 1.4  2004/12/27 12:23:14  dj_jl
//  Multiple small changes for version 1.16
//
//  Revision 1.3  2004/10/13 06:42:15  dj_jl
//  Different quest giving.
//
//  Revision 1.2  2004/01/30 17:43:11  dj_jl
//  Implemented many action functions.
//
//  Revision 1.1  2002/11/02 08:20:56  dj_jl
//  New style classes.
//
//**************************************************************************
