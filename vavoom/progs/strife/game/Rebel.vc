//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Rebel : Pawn
	__mobjinfo__(9);

__states__
{
	S_REBEL_STAND('HMN1', 15, 5.0 / 35.0, S_REBEL_STAND) { A_Stand(); }
	S_REBEL_STAND_R('HMN1', 16, 8.0 / 35.0, S_REBEL_STAND) { }
	S_REBEL_STAND_L('HMN1', 17, 8.0 / 35.0, S_REBEL_STAND) { }
	S_REBEL_WALK1('HMN1', 0, 6.0 / 35.0, S_REBEL_WALK2) { A_Walk(); }
	S_REBEL_WALK2('HMN1', 1, 6.0 / 35.0, S_REBEL_WALK3) { A_Walk(); }
	S_REBEL_WALK3('HMN1', 2, 6.0 / 35.0, S_REBEL_WALK4) { A_Walk(); }
	S_REBEL_WALK4('HMN1', 3, 6.0 / 35.0, S_REBEL_WALK5) { A_Walk(); }
	S_REBEL_WALK5('HMN1', 0, 6.0 / 35.0, S_REBEL_WALK6) { A_Walk(); }
	S_REBEL_WALK6('HMN1', 1, 6.0 / 35.0, S_REBEL_WALK7) { A_Walk(); }
	S_REBEL_WALK7('HMN1', 2, 6.0 / 35.0, S_REBEL_WALK8) { A_Walk(); }
	S_REBEL_WALK8('HMN1', 3, 6.0 / 35.0, S_REBEL_STAND) { A_Walk(); }
	S_REBEL_RUN1('HMN1', 0, 3.0 / 35.0, S_REBEL_RUN2) { A_Chase(); }
	S_REBEL_RUN2('HMN1', 0, 3.0 / 35.0, S_REBEL_RUN3) { A_Chase(); }
	S_REBEL_RUN3('HMN1', 1, 3.0 / 35.0, S_REBEL_RUN4) { A_Chase(); }
	S_REBEL_RUN4('HMN1', 1, 3.0 / 35.0, S_REBEL_RUN5) { A_Chase(); }
	S_REBEL_RUN5('HMN1', 2, 3.0 / 35.0, S_REBEL_RUN6) { A_Chase(); }
	S_REBEL_RUN6('HMN1', 2, 3.0 / 35.0, S_REBEL_RUN7) { A_Chase(); }
	S_REBEL_RUN7('HMN1', 3, 3.0 / 35.0, S_REBEL_RUN8) { A_Chase(); }
	S_REBEL_RUN8('HMN1', 3, 3.0 / 35.0, S_REBEL_RUN1) { A_Chase(); }
	S_REBEL_ATK1('HMN1', 4, 10.0 / 35.0, S_REBEL_ATK2) { A_FaceTarget(); }
	S_REBEL_ATK2('HMN1', 5 | FF_FULLBRIGHT, 10.0 / 35.0, S_REBEL_ATK3) { A_RiffleAttack(); }
	S_REBEL_ATK3('HMN1', 4, 10.0 / 35.0, S_REBEL_RUN1) { A_RiffleAttack(); }
	S_REBEL_PAIN1('HMN1', 14, 3.0 / 35.0, S_REBEL_PAIN2) { }
	S_REBEL_PAIN2('HMN1', 14, 3.0 / 35.0, S_REBEL_RUN1) { A_Pain(); }
	S_REBEL_DIE1('HMN1', 6, 5.0 / 35.0, S_REBEL_DIE2) { }
	S_REBEL_DIE2('HMN1', 7, 5.0 / 35.0, S_REBEL_DIE3) { A_Scream(); }
	S_REBEL_DIE3('HMN1', 8, 3.0 / 35.0, S_REBEL_DIE4) { A_Fall(); }
	S_REBEL_DIE4('HMN1', 9, 4.0 / 35.0, S_REBEL_DIE5) { }
	S_REBEL_DIE5('HMN1', 10, 3.0 / 35.0, S_REBEL_DIE6) { }
	S_REBEL_DIE6('HMN1', 11, 3.0 / 35.0, S_REBEL_DIE7) { }
	S_REBEL_DIE7('HMN1', 12, 3.0 / 35.0, S_REBEL_DIE8) { }
	S_REBEL_DIE8('HMN1', 13, -1.0, none) { }
	S_REBEL_XDIE1('RGIB', 0, 4.0 / 35.0, S_REBEL_XDIE2) { A_XDying(); }
	S_REBEL_XDIE2('RGIB', 1, 4.0 / 35.0, S_REBEL_XDIE3) { A_XScream(); }
	S_REBEL_XDIE3('RGIB', 2, 3.0 / 35.0, S_REBEL_XDIE4) { A_Fall(); }
	S_REBEL_XDIE4('RGIB', 3, 3.0 / 35.0, S_REBEL_XDIE5) { A_XDying(); }
	S_REBEL_XDIE5('RGIB', 4, 3.0 / 35.0, S_REBEL_XDIE6) { A_XDying(); }
	S_REBEL_XDIE6('RGIB', 5, 3.0 / 35.0, S_REBEL_XDIE7) { A_XDying(); }
	S_REBEL_XDIE7('RGIB', 6, 3.0 / 35.0, S_REBEL_XDIE8) { }
	S_REBEL_XDIE8('RGIB', 7, 1400.0 / 35.0, none) { }
}

defaultproperties
{
	ConversationID = 43;
	ClassName = 'Rebel';
	Health = 60;
	GibsHealth = -30;
	Radius = 20.0;
	Height = 56.0;
	Mass = 100.0;
	StepSpeed = 8.0;
	PainChance = 0.9765625;
	bFriendly = true;
	IdleState = S_REBEL_STAND;
	IdleRightState = S_REBEL_STAND_R;
	IdleLeftState = S_REBEL_STAND_L;
	WalkState = S_REBEL_WALK1;
	SeeState = S_REBEL_RUN1;
	MissileState = S_REBEL_ATK1;
	PainState = S_REBEL_PAIN1;
	DeathState = S_REBEL_DIE1;
	GibsDeathState = S_REBEL_XDIE1;
	FireDeathState = S_BURN1;
	DisruptDeathState = S_DISRUPT1;
	SightSound = 'rebel/sight';
	ActiveSound = 'rebel/active';
	PainSound = 'rebel/pain';
	DeathSound = 'rebel/death';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2006/04/06 11:48:52  dj_jl
//  Fixed several bugs.
//
//  Revision 1.6  2006/03/28 15:02:24  firebrand_kh
//  Added bTakePoisonDamage flag
//
//  Revision 1.5  2006/03/12 20:01:24  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.4  2005/11/19 13:43:51  dj_jl
//  Renamed sounds.
//
//  Revision 1.3  2005/03/28 07:45:29  dj_jl
//  Some Boom line specials, fixed multiple bugs.
//
//  Revision 1.2  2004/12/22 07:56:47  dj_jl
//  Fully working Strife support.
//
//  Revision 1.1  2002/11/02 08:20:56  dj_jl
//  New style classes.
//
//**************************************************************************
