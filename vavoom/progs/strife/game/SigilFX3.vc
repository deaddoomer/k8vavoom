//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SigilFX3 : Projectile;

//==========================================================================
//
//	A_Unknown91
//
//==========================================================================

void A_Unknown91()
{
	float angle;
	Actor A;
	float dir;

	dir = Angles.yaw;

	A = Spawn(SpecterFX1_2, Origin);
	A.Instigator = Instigator;
	if (Specter5(Instigator))
	{
		A.bSpectral = false;
	}
	A.Angles.yaw = AngleMod360(dir + 90.0);
	A.Enemy = Enemy;
	A.Velocity.x = A.Speed * cos(A.Angles.yaw);
	A.Velocity.y = A.Speed * sin(A.Angles.yaw);

	A = Spawn(SpecterFX1_2, Origin);
	A.Instigator = Instigator;
	if (Specter5(Instigator))
	{
		A.bSpectral = false;
	}
	A.Angles.yaw = AngleMod360(dir - 90.0);
	A.Enemy = Enemy;
	A.Velocity.x = A.Speed * cos(A.Angles.yaw);
	A.Velocity.y = A.Speed * sin(A.Angles.yaw);

	A = Spawn(SpecterFX1_2, Origin);
	A.Instigator = Instigator;
	if (Specter5(Instigator))
	{
		A.bSpectral = false;
	}
	A.Angles.yaw = dir;
	A.Enemy = Enemy;
	A.Velocity.x = A.Speed * cos(A.Angles.yaw);
	A.Velocity.y = A.Speed * sin(A.Angles.yaw);
	A_Tracer();
}

__states__
{
	S_SIGIL_FX3_1('ZAP7', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX3_2) { A_Unknown91(); }
	S_SIGIL_FX3_2('ZAP7', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SIGIL_FX3_3) { A_Unknown91(); }
	S_SIGIL_FX3_3('ZAP7', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX3_4) { A_Unknown91(); }
	S_SIGIL_FX3_4('ZAP7', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX3_5) { A_Unknown91(); }
	S_SIGIL_FX3_5('ZAP7', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_SIGIL_FX3_1) { A_Unknown91(); }
}

defaultproperties
{
	Radius = 20.0;
	Height = 40.0;
	Speed = 630.0;
	MissileDamage = 130;
	bSpectral = true;
	IdleState = S_SIGIL_FX3_1;
	DeathState = S_ZAP1_2;
	SightSound = 'weapons/sigil';
	DeathSound = 'weapons/sigilhit';
	Effects = StrifeDefs::EF_DL_MISSILE;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2006/04/06 21:49:06  dj_jl
//  Added some lighting effects.
//
//  Revision 1.6  2006/03/29 14:34:45  firebrand_kh
//  Added tracer call for this projectile
//
//  Revision 1.5  2005/11/19 13:43:51  dj_jl
//  Renamed sounds.
//
//  Revision 1.4  2005/03/28 07:45:29  dj_jl
//  Some Boom line specials, fixed multiple bugs.
//
//  Revision 1.3  2004/10/18 06:35:21  dj_jl
//  Implemented many monsters, sigil and some more.
//
//  Revision 1.2  2004/01/29 07:35:26  dj_jl
//  Implemented many action functions
//
//  Revision 1.1  2002/11/02 08:20:57  dj_jl
//  New style classes.
//
//**************************************************************************
