//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : ScriptedEntity
	abstract;

const float
	PUNCHRANGE		= 80.0,
	MAULERRANGE		= (33.0 * 64.0),
	ROBOTRANGE		= 264.0;

bool bUnknown2;			//8000000
bool bSpawnFlag8;
bool bSpawnFlag9;

//===========================================================================
//
//  IsTeleportSpot
//
//===========================================================================

bool IsTeleportSpot()
{
	return !!TeleportDest(self);
}

//===========================================================================
//
//  IsTeleportSpot2
//
//===========================================================================

bool IsTeleportSpot2()
{
	return !!TeleportDest2(self);
}

//===========================================================================
//
//  IsPointPusher
//
//===========================================================================

bool IsPointPusher()
{
	return !!PointPusher(self);
}

//===========================================================================
//
//  IsPointPuller
//
//===========================================================================

bool IsPointPuller()
{
	return !!PointPuller(self);
}

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================

void TouchSpecial(EntityEx Toucher)
{
}

//==========================================================================
//
//  DoMissileExplosionEffects
//
//==========================================================================

void DoMissileExplosionEffects()
{
	if (Effects & EF_DLIGHT_MASK)
	{
		SendExplosion(Effects & EF_DLIGHT_MASK, Origin);
		Effects &= ~EF_DLIGHT_MASK;
	}
}

//==========================================================================
//
//  SendExplosion
//
//==========================================================================

final void SendExplosion(int etype, TVec org)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientExplosion(etype, org);
	}
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(EntityEx source)
{
	// Check for frag changes
	if (bIsPlayer)
	{
		source.Player.FragsStats[Player.GetPlayerNum()]++;
		if (source == self)
		{
			Player.Frags--;
		}
		else
		{
			source.Player.Frags++;
		}
	}
}

//==========================================================================
//
//	PlayerKilled
//
//==========================================================================

void PlayerKilled(EntityEx source, EntityEx inflictor)
{
	// Count environment kills against you
	if (!source)
	{
		Player.FragsStats[Player.GetPlayerNum()]++;
		Player.Frags--;
	}
}

//==========================================================================
//
//  AutoUseHealth
//
//==========================================================================

void AutoUseHealth(int saveHealth)
{
	int i, j;
	int count;

	for (i = 0; i < StrifeDefs::NUMINVITEMS - 1; i++)
	{
		if (Player(Player).Inventory[i] && i == StrifeDefs::ITEM_MedicalKit
			&& Player(Player).Inventory[i] * 25 >= saveHealth)
		{
			// Use medical kits
			Health += 25;
			Player(Player).RemoveInvItem(i, 1);
			Player.MO.PlaySound('misc/invuse', CHAN_BODY);
		}
		else if (Player(Player).Inventory[i] && i == StrifeDefs::ITEM_MedPatch
			&& Player(Player).Inventory[i] * 10 >= saveHealth)
		{
			Health += 10;
			Player(Player).RemoveInvItem(i, 1);
			Player.MO.PlaySound('misc/invuse', CHAN_BODY);
		}
	}
	Player.Health = Health;
}

//==========================================================================
//
//  AutoUseArmor
//
//==========================================================================

void AutoUseArmor()
{
	int i;
	int count;

	for (i = 0; i < StrifeDefs::NUMINVITEMS - 1; i++)
	{
		if (Player(Player).Inventory[i] && i == StrifeDefs::ITEM_MetalArmor)
		{
			// Use metal armor
			Player(Player).GiveArmor(2);
			Player(Player).RemoveInvItem(i, 1);
		}
		else if (Player(Player).Inventory[i] && i == StrifeDefs::ITEM_LeatherArmor)
		{
			// Use leather armor
			Player(Player).GiveArmor(1);
			Player(Player).RemoveInvItem(i, 1);
		}
	}
}

//==========================================================================
//
//  OkayToSwitchTarget
//
//==========================================================================

bool OkayToSwitchTarget(EntityEx source)
{
	return ::OkayToSwitchTarget(source) &&
		(Level.Game.deathmatch || Actor(source).bFriendly != bFriendly);
}

//==========================================================================
//
//  TakeSpecialDamage
//
//==========================================================================

int TakeSpecialDamage(EntityEx inflictor, EntityEx source, int damage)
{
	if (inflictor && inflictor.bNoExtremeDeath && bNoBlood)
	{
		// Don't damage actors that don't take poison damage
		return -1;
	}
	return damage;
}

//===========================================================================
//
//  GiveInventory
//
//===========================================================================

void GiveInventory(name ItemName, int Amount)
{
	if (!bIsPlayer)
	{
		return;
	}

	//	Stamina upgrade.
	if (ItemName == 'UpgradeStamina')
	{
		Player(Player).Stamina += 10;
		Player(Player).GiveBody(200);
	}

	//	Accuracy upgrade.
	if (ItemName == 'UpgradeAccuracy')
	{
		Player(Player).Accuracy += 10;
	}

	//	Quest items.
	if (ItemName == 'QuestItem1')
	{
		Player(Player).GiveQuest(QUEST_KilledBeldin);
	}
	if (ItemName == 'QuestItem2')
	{
		Player(Player).GiveQuest(QUEST_StoleChalice);
	}
	if (ItemName == 'QuestItem3')
	{
		Player(Player).GiveQuest(QUEST_Prison);
	}
	if (ItemName == 'QuestItem4')
	{
		Player(Player).GiveQuest(QUEST_GovPowerCoupling);
	}
	if (ItemName == 'QuestItem5')
	{
		Player(Player).GiveQuest(QUEST_GovDerwin);
	}
	if (ItemName == 'QuestItem6')
	{
		Player(Player).GiveQuest(QUEST_BrokePowerCoupling);
	}
	if (ItemName == 'QuestItem7')
	{
		Player(Player).GiveQuest(QUEST_7);
	}
	if (ItemName == 'QuestItem8')
	{
		Player(Player).GiveQuest(QUEST_GotBrokenPowerCoupling);
	}
	if (ItemName == 'QuestItem9')
	{
		Player(Player).GiveQuest(QUEST_GotDerwinsEar);
	}
	if (ItemName == 'QuestItem10')
	{
		Player(Player).GiveQuest(QUEST_GotPrisonPass);
	}
	if (ItemName == 'QuestItem11')
	{
		Player(Player).GiveQuest(QUEST_GotPrisonKey);
	}
	if (ItemName == 'QuestItem12')
	{
		Player(Player).GiveQuest(QUEST_GotSeveredHand);
	}
	if (ItemName == 'QuestItem13')
	{
		Player(Player).GiveQuest(QUEST_FreedPrisoners);
	}
	if (ItemName == 'QuestItem14')
	{
		Player(Player).GiveQuest(QUEST_BlownUpCrystal);
	}
	if (ItemName == 'QuestItem15')
	{
		Player(Player).GiveQuest(QUEST_GotGuardUniform);
	}
	if (ItemName == 'QuestItem16')
	{
		Player(Player).GiveQuest(QUEST_BlownUpGates);
	}
	if (ItemName == 'QuestItem17')
	{
		Player(Player).GiveQuest(QUEST_VisitOracle);
	}
	if (ItemName == 'QuestItem18')
	{
		Player(Player).GiveQuest(QUEST_GotOraclePass);
	}
	if (ItemName == 'QuestItem19')
	{
		Player(Player).GiveQuest(QUEST_DestroyComputer);
	}
	if (ItemName == 'QuestItem20')
	{
		Player(Player).GiveQuest(QUEST_20);
	}
	if (ItemName == 'QuestItem21')
	{
		Player(Player).GiveQuest(QUEST_KilledBishop);
	}
	if (ItemName == 'QuestItem22')
	{
		Player(Player).GiveQuest(QUEST_KillMacil);
	}
	if (ItemName == 'QuestItem23')
	{
		Player(Player).GiveQuest(QUEST_KilledOracle);
	}
	if (ItemName == 'QuestItem24')
	{
		Player(Player).GiveQuest(QUEST_KilledMacil);
	}
	if (ItemName == 'QuestItem25')
	{
		Player(Player).GiveQuest(QUEST_Factory);
	}
	if (ItemName == 'QuestItem26')
	{
		Player(Player).GiveQuest(QUEST_KilledLoremaster);
	}
	if (ItemName == 'QuestItem27')
	{
		Player(Player).GiveQuest(QUEST_BlownUpComputer);
	}
	if (ItemName == 'QuestItem28')
	{
		Player(Player).GiveQuest(QUEST_GotCatacombKey);
	}
	if (ItemName == 'QuestItem29')
	{
		Player(Player).GiveQuest(QUEST_FreedWorkers);
	}
	if (ItemName == 'QuestItem30')
	{
		Player(Player).GiveQuest(QUEST_30);
	}
	if (ItemName == 'QuestItem31')
	{
		Player(Player).GiveQuest(QUEST_31);
	}
}

//===========================================================================
//
//  CheckInventory
//
//===========================================================================

int CheckInventory(name ItemName)
{
	//	Check if it's a player.
	if (!bIsPlayer)
	{
		return 0;
	}

	//	Weapons.
	if (ItemName == 'FlameThrower')
	{
		return Player(Player).WeaponOwned[StrifeDefs::wp_flame];
	}
	if (ItemName == 'Sigil')
	{
		return Player(Player).WeaponOwned[StrifeDefs::wp_sigil];
	}

	//	Inventory items.
	if (ItemName == 'OfferingChalice')
	{
		return Player(Player).Inventory[StrifeDefs::ITEM_OfferingChalice];
	}
	if (ItemName == 'OfficersUniform')
	{
		return Player(Player).Inventory[StrifeDefs::ITEM_OfficersUniform];
	}

	//	Quest items.
	if (ItemName == 'QuestItem1')
	{
		return Player(Player).Quests & (1 << 0) ? 1 : 0;
	}
	if (ItemName == 'QuestItem2')
	{
		return Player(Player).Quests & (1 << 1) ? 1 : 0;
	}
	if (ItemName == 'QuestItem3')
	{
		return Player(Player).Quests & (1 << 2) ? 1 : 0;
	}
	if (ItemName == 'QuestItem4')
	{
		return Player(Player).Quests & (1 << 3) ? 1 : 0;
	}
	if (ItemName == 'QuestItem5')
	{
		return Player(Player).Quests & (1 << 4) ? 1 : 0;
	}
	if (ItemName == 'QuestItem6')
	{
		return Player(Player).Quests & (1 << 5) ? 1 : 0;
	}
	if (ItemName == 'QuestItem7')
	{
		return Player(Player).Quests & (1 << 6) ? 1 : 0;
	}
	if (ItemName == 'QuestItem8')
	{
		return Player(Player).Quests & (1 << 7) ? 1 : 0;
	}
	if (ItemName == 'QuestItem9')
	{
		return Player(Player).Quests & (1 << 8) ? 1 : 0;
	}
	if (ItemName == 'QuestItem10')
	{
		return Player(Player).Quests & (1 << 9) ? 1 : 0;
	}
	if (ItemName == 'QuestItem11')
	{
		return Player(Player).Quests & (1 << 10) ? 1 : 0;
	}
	if (ItemName == 'QuestItem12')
	{
		return Player(Player).Quests & (1 << 11) ? 1 : 0;
	}
	if (ItemName == 'QuestItem13')
	{
		return Player(Player).Quests & (1 << 12) ? 1 : 0;
	}
	if (ItemName == 'QuestItem14')
	{
		return Player(Player).Quests & (1 << 13) ? 1 : 0;
	}
	if (ItemName == 'QuestItem15')
	{
		return Player(Player).Quests & (1 << 14) ? 1 : 0;
	}
	if (ItemName == 'QuestItem16')
	{
		return Player(Player).Quests & (1 << 15) ? 1 : 0;
	}
	if (ItemName == 'QuestItem17')
	{
		return Player(Player).Quests & (1 << 16) ? 1 : 0;
	}
	if (ItemName == 'QuestItem18')
	{
		return Player(Player).Quests & (1 << 17) ? 1 : 0;
	}
	if (ItemName == 'QuestItem19')
	{
		return Player(Player).Quests & (1 << 18) ? 1 : 0;
	}
	if (ItemName == 'QuestItem20')
	{
		return Player(Player).Quests & (1 << 19) ? 1 : 0;
	}
	if (ItemName == 'QuestItem21')
	{
		return Player(Player).Quests & (1 << 20) ? 1 : 0;
	}
	if (ItemName == 'QuestItem22')
	{
		return Player(Player).Quests & (1 << 21) ? 1 : 0;
	}
	if (ItemName == 'QuestItem23')
	{
		return Player(Player).Quests & (1 << 22) ? 1 : 0;
	}
	if (ItemName == 'QuestItem24')
	{
		return Player(Player).Quests & (1 << 23) ? 1 : 0;
	}
	if (ItemName == 'QuestItem25')
	{
		return Player(Player).Quests & (1 << 24) ? 1 : 0;
	}
	if (ItemName == 'QuestItem26')
	{
		return Player(Player).Quests & (1 << 25) ? 1 : 0;
	}
	if (ItemName == 'QuestItem27')
	{
		return Player(Player).Quests & (1 << 26) ? 1 : 0;
	}
	if (ItemName == 'QuestItem28')
	{
		return Player(Player).Quests & (1 << 27) ? 1 : 0;
	}
	if (ItemName == 'QuestItem29')
	{
		return Player(Player).Quests & (1 << 28) ? 1 : 0;
	}
	if (ItemName == 'QuestItem30')
	{
		return Player(Player).Quests & (1 << 29) ? 1 : 0;
	}
	if (ItemName == 'QuestItem31')
	{
		return Player(Player).Quests & (1 << 30) ? 1 : 0;
	}

	//	I don't know what it is.
	return 0;
}

//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================

int GetSigilPieces()
{
	if (bIsPlayer && Player(Player).WeaponOwned[StrifeDefs::wp_sigil])
	{
		return Player(Player).Sigil + 1;
	}
	return 0;
}

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return Player::VIEWHEIGHT;
}

//==========================================================================
//
//  TossUpObject
//
//==========================================================================

Actor TossUpObject(class<Actor> type)
{
	Actor		A;
	float		an;
	float		randomspeed;

	randomspeed = Random() * 8.0 - 6.0;

	A = Spawn(type, GetCentre());
	if (A)
	{
		an = AngleMod360(Angles.yaw + Random() * 360.0);
		A.Angles.yaw = an;
		A.Tracer = Target;
		A.Target = self;
		A.Velocity.x = randomspeed * cos(an) * 35.0;
		A.Velocity.y = randomspeed * sin(an) * 35.0;
		A.Velocity.z = (12.0 + Random() / 8.0) * 35.0;
	}
	return A;
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(TVec Org, float Range, class<EntityEx> PuffType, bool HitThing)
{
	EntityEx A;

	Org.z += (Random() - Random()) * 4.0;
	A = Spawn(PuffType, Org);
	if(PuffType != StrifeSpark)
		A.Velocity.z = 1.0 * 35.0;

	A.StateTime -= Random() * 0.1;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;
}

//==========================================================================
//
//  SpawnBlood
// 
//==========================================================================

void SpawnBlood(TVec org, int damage)
{
	Actor A;
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientBlood(
			org, damage > 255 ? 255 : damage);
	}

	org.z += (Random() - Random()) * 4.0;
	A = Spawn(Blood, org);
	A.Velocity.z = 2.0 * 35.0;
	A.StateTime -= Random() * 0.1;

	if (A.StateTime < 0.1)
		A.StateTime = 0.1;

	if (damage <= 12 && damage >= 9)
		A.SetState(Blood::S_BLOOD2);
	else if (damage < 9)
		A.SetState(Blood::S_BLOOD3);
}

//==========================================================================
//
//	A_ActiveSound
//
//==========================================================================

final void A_ActiveSound()
{
	if (ActiveSound && !GetSoundPlayingInfo(self, GetSoundID(ActiveSound)))
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_Explode
//
//  Rocket and barrel explosion.
//
//==========================================================================

final void A_Explode()
{
	RadiusAttack(Target, 64, 64.0, true);
	if (Origin.z <= FloorZ + 64.0)
	{
		HitFloorType();
	}
	if (Target && Target.bIsPlayer)
	{
		StrifeLevelInfo(Level).NoiseAlert(Target, self);
	}

	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//  A_Explode2
//
//  Rocket and barrel explosion.
//
//==========================================================================

final void A_Explode2()
{
	RadiusAttack(Target, 128, 128.0, true);
	if (Origin.z <= FloorZ + 128.0)
	{
		HitFloorType();
	}

	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//	A_SetShadow
//
//==========================================================================

final void A_SetShadow()
{
	bUnknown2 = true;
	Alpha = 0.333;
}

//==========================================================================
//
//	A_ClearShadow
//
//==========================================================================

final void A_ClearShadow()
{
	bUnknown2 = false;
	Alpha = 1.0;
}

//==========================================================================
//
//	A_BeShadowyFoe
//
//==========================================================================

final void A_BeShadowyFoe()
{
	Alpha = 0.333;
	bFriendly = false;
}

//==========================================================================
//
//	A_Tracer
//
//==========================================================================

const float TRACEANGLE	= (7.0 * 45.0 / 16.0);

final void A_Tracer()
{
	Actor dest;
	float exact;
	float dist;
	float slope;

	dest = Actor(Tracer);

	if (!dest || dest.Health <= 0)
		return;

	// change angle
	exact = atan2(dest.Origin.y - Origin.y, dest.Origin.x - Origin.x);

	if (exact != Angles.yaw)
	{
		if (AngleMod360(exact - Angles.yaw) > 180.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - TRACEANGLE);
			if (AngleMod360(exact - Angles.yaw) < 180.0)
				Angles.yaw = exact;
		}
		else
		{
			Angles.yaw = AngleMod360(Angles.yaw + TRACEANGLE);
			if (AngleMod360(exact - Angles.yaw) > 180.0)
				Angles.yaw = exact;
		}
	}

	exact = Angles.yaw;
	Velocity.x = Speed * cos(exact);
	Velocity.y = Speed * sin(exact);

	// change slope
	dist = DistTo2(dest);
	dist /= Speed;

	if (dist < 1.0)
	{
		dist = 1.0;
	}
	slope = (dest.Origin.z + 40.0 - Origin.z) / dist;
	if (slope < Velocity.z)
	{
		Velocity.z -= 1.0 / 8.0 * 35.0;
	}
	else
	{
		Velocity.z += 1.0 / 8.0 * 35.0;
	}
}

//==========================================================================
//
//	A_SpawnPuff
//
//==========================================================================

final void A_SpawnPuff()
{
	Actor A;

	if (MiniMissile(self))
	{
		PlaySound('misc/missileinflight', CHAN_VOICE);
		SpawnPuff(Origin, MISSILERANGE, StrifePuff, false);
		A = Spawn(RocketTrail, Origin - Velocity / 35.0);
		if (A)
		{
			A.Velocity.z = 1.0 * 35.0;
		}
	}
	else
	{
		A = Spawn(StrifePuff, Origin + vector(
			(Random() - Random()) * 5.0 / 8.0,
			(Random() - Random()) * 5.0 / 8.0, 0.0));
		//FIXME Create a class for this.
		A.SetState(StrifePuff::S_GRENADE_HE_X2);
	}
}

//==========================================================================
//
//	A_ScrollOrDie
//
//==========================================================================

final void A_ScrollOrDie()
{
	int anglespeed;
	float speed;
	float finean;

	if (Origin.z == GetPlanePointZ(Floor, Origin))
	{
		if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_DamageInstantDeath)
		{
			Damage(none, none, 999);
		}
		else if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_ScrollCurrent)
		{
			anglespeed = Sector->tag - 100;
			speed = itof(anglespeed % 10) / 16.0 * 35.0;
			finean = itof(anglespeed / 10) * 45.0;
			Velocity.x += speed * cos(finean);
			Velocity.y += speed * sin(finean);
		}
	}
}

//==========================================================================
//
//	A_XDying
//
//==========================================================================

final void A_XDying()
{
	Actor gib;
	float an;
	float speed;
	class<Actor> tp;

	if (bNoBlood)
		tp = Junk;
	else
		tp = Meat;
	gib = Spawn(tp, Origin + vector(0.0, 0.0, 24.0));
	if (!gib)
	{
		return;
	}

	an = Random() * 360.0;
	gib.Angles.yaw = an;
	speed = Random() * 16.0 * 35.0;
	gib.Velocity.x = speed * cos(an);
	gib.Velocity.y = speed * sin(an);
	gib.Velocity.z = Random() * 16.0 * 35.0;
}

//==========================================================================
//
//	A_DecReactionCount
//
//==========================================================================

final void A_DecReactionCount()
{
	if (--ReactionCount <= 0)
	{
		ExplodeMissile();
		bSkullFly = false;
	}
}

//==========================================================================
//
//	A_AlertMonsters
//
//==========================================================================

final void A_AlertMonsters()
{
	if (Target && Target.bIsPlayer)
	{
		StrifeLevelInfo(Level).NoiseAlert(Target, self);
	}
}

//==========================================================================
//
//	A_CheckAlarm
//
//	Stay in state untill alarm is triggered.
//
//==========================================================================

final void A_CheckAlarm()
{
	Actor targ;
	int sound;

	Threshold = 0;
	targ = Actor(Sector->SoundTarget);
	if (targ && targ.bShootable)
	{
		Target = targ;
		// go into chase state
		if (SightSound)
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
		Threshold = 10;
		SetState(SeeState);
	}
}

//==========================================================================
//
//	A_Explode32
//
//==========================================================================

final void A_Explode32()
{
	RadiusAttack(Target, 32, 32.0, false);
	if (DeathSound)
		PlaySound(DeathSound, CHAN_VOICE);

	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//	A_Explode192
//
//==========================================================================

final void A_Explode192()
{
	RadiusAttack(Target, 192, 192.0, false);
	if (DeathSound)
		PlaySound(DeathSound, CHAN_VOICE);

	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//	A_RemoveForceField
//
//==========================================================================

final void A_RemoveForceField()
{
	int i;
	line_t* line;

	bSpecial = false;
	for (i = 0; i < Sector->linecount; i++)
	{
		line = Sector->lines[i];
		if (line->backsector && line->special == LNSPEC_ForceField)
		{
			line->flags &= ~(ML_BLOCKING|ML_BLOCKEVERYTHING);
			line->special = 0;
			XLevel.Sides[line->sidenum[0]].midtexture = 0;
			XLevel.Sides[line->sidenum[1]].midtexture = 0;
		}
	}
}

//==========================================================================
//
//	GetSpeechIndex
//
//==========================================================================

int GetSpeechIndex(RogueConSpeech *List, int Count, int ID, int Num)
{
	int Found;
	int i;

	Found = 0;
	for (i = 0; i < Count; i++)
	{
		if (List[i].SpeakerID == ID)
		{
			Found++;
			if (Found == Num)
			{
				return i + 1;
			}
		}
	}
	return 0;
}

//==========================================================================
//
//	GetSpeech
//
//==========================================================================

int GetSpeech()
{
	int Index;

	if (!CurrentSpeech)
	{
		CurrentSpeech = 1;
	}
	Index = GetSpeechIndex(XLevel.LevelSpeeches, XLevel.NumLevelSpeeches,
		ConversationID, CurrentSpeech);
	if (Index)
	{
		return Index;
	}
	return -GetSpeechIndex(XLevel.GenericSpeeches, XLevel.NumGenericSpeeches,
		ConversationID, CurrentSpeech);
}

__states__
{
	S_ZAP1_1('ZAP1', 1, 3.0 / 35.0, S_ZAP1_2) = A_Explode32
	S_ZAP1_0('ZAP1', 0, 3.0 / 35.0, S_ZAP1_2) = A_AlertMonsters
	S_ZAP1_2('ZAP1', 1, 3.0 / 35.0, S_ZAP1_3) = none
	S_ZAP1_3('ZAP1', 2, 3.0 / 35.0, S_ZAP1_4) = none
	S_ZAP1_4('ZAP1', 3, 3.0 / 35.0, S_ZAP1_5) = none
	S_ZAP1_5('ZAP1', 4, 3.0 / 35.0, S_ZAP1_6) = none
	S_ZAP1_6('ZAP1', 5, 3.0 / 35.0, S_ZAP1_7) = none
	S_ZAP1_7('ZAP1', 4, 3.0 / 35.0, S_ZAP1_8) = none
	S_ZAP1_8('ZAP1', 3, 2.0 / 35.0, S_ZAP1_9) = none
	S_ZAP1_9('ZAP1', 2, 2.0 / 35.0, S_ZAP1_10) = none
	S_ZAP1_10('ZAP1', 1, 2.0 / 35.0, S_ZAP1_11) = none
	S_ZAP1_11('ZAP1', 0, 1.0 / 35.0, none) = none

	S_BLOOD1('BLOD', 2, 8.0 / 35.0, S_BLOOD2) = none
	S_BLOOD2('BLOD', 1, 8.0 / 35.0, S_BLOOD3) = none
	S_BLOOD3('BLOD', 0, 8.0 / 35.0, none) = none

	S_SHARD_1('SHRD', 0, 128.0 / 35.0, none) = none
	S_SHARD_2('SHRD', 1, 128.0 / 35.0, none) = none
	S_SHARD_3('SHRD', 2, 128.0 / 35.0, none) = none
	S_SHARD_4('SHRD', 3, 128.0 / 35.0, none) = none
	S_SHARD_5('SHRD', 4, 128.0 / 35.0, none) = none
	S_SHARD_6('SHRD', 5, 128.0 / 35.0, none) = none

	S_MINI_MISSILE2_1('MICR', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_MINI_MISSILE2_2) = A_Tracer
	S_MINI_MISSILE2_2('MICR', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_MINI_MISSILE2_1) = A_Tracer

	S_TOKENS('TOKN', 0, -1.0, none) = none

	S_GIBS('DIE1', 0, -1.0, none) = none

	S_ANKH('ANKH', 0, -1.0, none) = none
}

defaultproperties
{
	MaxDropoffHeight = 32.0;
	FloatSpeed = 175.0;
	CrunchState = S_GIBS;
}
