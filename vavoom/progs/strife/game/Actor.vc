//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : EntityEx
	abstract;

// follow a player exlusively for 3 seconds
const int BASETHRESHOLD		= 100;

const float
	MELEERANGE		= 64.0,
	PUNCHRANGE		= 80.0,
	MISSILERANGE	= (32.0 * 64.0),
	MAULERRANGE		= (33.0 * 64.0),
	ROBOTRANGE		= 264.0;

bool bStanding;			// Don't walk around.
//	MOVEMENT FLAGS
bool bNeutral;			// Neutral characters (peasants and beggars)
bool bStandMustSeeTarget;		//COUNTITEM	800000
bool bFriendly;			// Will fight on player's side
bool bUnknown2;			//8000000
bool bSpectral;			// Can be killed only with Sigil
bool bNoDeathmatch;
bool bSpawnFlag8;
bool bSpawnFlag9;
bool bPoisonDamage;		// Does poison damage (doesn't gib enemies).
bool bFireDamage;		// Causes fire damage.
bool bDisruptDamage;	// Disrupts enemies.
bool bInCombat;			// Actors in combat won't talk
bool bLookAllAround;	// Actor can see all around.

name ClassName;

// Identifier in conversation scripts, originaly index into mobjinfo.
int ConversationID;
int CurrentSpeech;	// Current speech index.

//===========================================================================
//
//  SetInstigator
//
//===========================================================================

void SetInstigator(Entity NewInstigator)
{
	Target = Actor(NewInstigator);
}

//===========================================================================
//
//  PlaySightSound
//
//===========================================================================

void PlaySightSound()
{
	if (SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}
}

//===========================================================================
//
//  SetDropped
//
//===========================================================================

void SetDropped()
{
	bDropped = true;
}

//===========================================================================
//
//  StartFloatBob
//
//===========================================================================

void StartFloatBob(Entity Src)
{
}

//===========================================================================
//
//  SaveFloatBobOffset
//
//===========================================================================

void SaveFloatBobOffset()
{
}

//===========================================================================
//
//  ThingDestroy
//
//===========================================================================

bool ThingDestroy()
{
	if (bShootable)
	{
		Damage(none, none, 10000);
		return true;
	}
	return false;
}

//===========================================================================
//
//  ThingDamage
//
//===========================================================================

void ThingDamage(int Amount)
{
	Damage(none, none, Amount);
}

//===========================================================================
//
//  IsTeleportSpot
//
//===========================================================================

bool IsTeleportSpot()
{
	return !!TeleportDest(self);
}

//===========================================================================
//
//  IsTeleportSpot2
//
//===========================================================================

bool IsTeleportSpot2()
{
	return !!TeleportDest2(self);
}

//===========================================================================
//
//  CanTeleport
//
//===========================================================================

bool CanTeleport()
{
	return !bNoTeleport;
}

//===========================================================================
//
//  SetPainState
//
//===========================================================================

void SetPainState()
{
	SetState(PainState);
}

//===========================================================================
//
//  IsPointPusher
//
//===========================================================================

bool IsPointPusher()
{
	return !!PointPusher(self);
}

//===========================================================================
//
//  IsPointPuller
//
//===========================================================================

bool IsPointPuller()
{
	return !!PointPuller(self);
}

//===========================================================================
//
//  CanWindThrust
//
//===========================================================================

bool CanWindThrust()
{
	return bWindThrust;
}

//===========================================================================
//
//  GetPlayerViewHeight
//
//===========================================================================

float GetPlayerViewHeight()
{
	return Player(Player).ViewHeight;
}

//==========================================================================
//
//  TouchSpecial
//
//==========================================================================

void TouchSpecial(Actor Toucher)
{
}

//==========================================================================
//
//	OnMapSpawn
//
//==========================================================================

void OnMapSpawn(mthing_t * mthing)
{
	if (bNoDeathmatch && Level.Game.deathmatch)
	{
		Destroy();
		return;
	}

	bCheckLineBlocking = false;
	bCheckLineBlockMonsters = false;
	if (!bMissile)
	{
		bCheckLineBlocking = true;
		if (Class != StrifePlayer && !bSpectral)
		{
			bCheckLineBlockMonsters = true;
		}
	}

	if (bMissile)
	{
		MaxStepHeight = 4.0;
	}
	else if (bNoBlood)
	{
		MaxStepHeight = 24.0;
	}

	if (Level.Game.gameskill == sk_nightmare)
	{
		ReactionCount = 0;
	}

	LastLook = P_Random() % MAXPLAYERS;
	// do not set the state with P_SetMobjState,
	// because action routines can not be called yet
	SetInitialState(IdleState);

	if (mthing)
	{
		float x;
		float y;
		float z;

		Level.CopyMThing(mthing, &SpawnPoint);

		x = mthing->x;
		y = mthing->y;
		if (bSpawnCeiling)
			z = ONCEILINGZ;
		else
			z = ONFLOORZ;
		SetOrigin2(vector(x, y, z));
		if (z == ONFLOORZ)
		{
			Origin.z += mthing->height;
		}
		else if (z == ONCEILINGZ)
		{
			Origin.z -= mthing->height;
		}
		LinkToWorld();

		TID = mthing->tid;
		Special = mthing->special;
		Args[0] = mthing->arg1;
		Args[1] = mthing->arg2;
		Args[2] = mthing->arg3;
		Args[3] = mthing->arg4;
		Args[4] = mthing->arg5;
		if (StateTime > 0.0)
			StateTime = 0.1 + Random() * StateTime;
		if (bCountKill)
			Level.TotalKills++;

		Angles.yaw = itof(45 * (mthing->angle / 45));
		if (mthing->options & StrifeLevelInfo::MTF_AMBUSH)
		{
			bStanding = true;
		}
		if (mthing->options & StrifeLevelInfo::MTF_DORMANT)
		{
			bDormant = true;
			StateTime = -1.0;
		}
	}
	else
	{
		SetOrigin2(Origin);
	}

	if (bStaticLight && mthing && !TID)
	{
		if (LightColour == 0xffffffff)
		{
			Level.AddStaticLight(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius);
		}
		else
		{
			Level.AddStaticLightRGB(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius, LightColour);
		}
	}
}

//==========================================================================
//
//  ExplodeMissile
//
//==========================================================================

bool ExplodeMissile()
{
	Velocity = vector(0.0, 0.0, 0.0);

	SetState(DeathState);

	StateTime -= Random() * 0.1;

	if (StateTime < 0.1)
		StateTime = 0.1;

	bMissile = false;
	BounceType = BOUNCE_None;

	if (DeathSound)
		PlaySound(DeathSound, CHAN_VOICE);

	if (Effects & StrifeDefs::EF_DLIGHT_MASK)
	{
		SendExplosion(Effects & StrifeDefs::EF_DLIGHT_MASK, Origin);
		Effects &= ~StrifeDefs::EF_DLIGHT_MASK;
	}
	return true;
}

//==========================================================================
//
//  SendExplosion
//
//==========================================================================

final void SendExplosion(int etype, TVec org)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientExplosion(etype, org);
	}
}

//==========================================================================
//
//  CheckMissileSpawn
//
//  Moves the missile forward a bit and possibly explodes it right there.
//
//==========================================================================

bool CheckMissileSpawn()
{
	StateTime -= Random() * 0.1;
	if (StateTime < 0.1)
		StateTime = 0.1;

	// move a little forward so an angle can
	// be computed if it immediately explodes
	Origin += Velocity * 0.0142857143;

	if (!TryMove(Origin))
	{
		ExplodeMissile();
		return false;
	}
	return true;
}

//==========================================================================
//
//	Died
//
//==========================================================================

void Died(EntityEx source)
{
	int SpeechNum;
	RogueConSpeech *Speech;
	class<Actor> DropItemType;
	Actor A;

	if (bIsPlayer && Level.bDeathSlideShow)
	{
		//	Start sad finale.
		Player(Player).ClientFinaleType(1);
		Level.Completed(-1, -1, 0);
	}

	bShootable = false;
	bFloat = false;
	bSkullFly = false;

	if (!bSpawnCeiling)
		bNoGravity = false;

	bDropOff = true;
	bCorpse = true;
	bNoPassMobj = true;
	Height /= 4.0;

	if (bCountKill && Special)
	{
		// Initiate monster death actions
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2], Args[3],
			Args[4], NULL, 0, self);
	}
	if (source && source.bIsPlayer)
	{
		// count for intermission
		if (bCountKill)
			source.Player.KillCount++;

		if (bIsPlayer)
		{
			source.Player.FragsStats[Player.GetPlayerNum()]++;
			if (source == self)
			{
				Player.Frags--;
			}
			else
			{
				source.Player.Frags++;
			}
		}
	}
	else if (!Level.Game.netgame && bCountKill)
	{
		// count all monster deaths,
		// even those caused by other monsters
		Level.Game.Players[0].KillCount++;
	}
	if (bCountKill)
		Level.CurrentKills++;

	if (bIsPlayer)
	{
		// count environment kills against you
		if (!source)
		{
			Player.FragsStats[Player.GetPlayerNum()]++;
			Player.Frags--;
		}

		bSolid = false;
		Player.PlayerState = PST_DEAD;
		Player(Player).DropWeapon();
#ifdef FIXME
		if (Player == Level.Game.Players[consoleplayer] && automapactive)
		{
			// don't die in auto map,
			// switch view prior to dying
			AM_Stop();
		}
#endif
	}

	if (bFireDamage && FireDeathState)
	{
		SetState(FireDeathState);
		if (bIsPlayer)
		{
			Player.SetViewState(ps_weapon,
				Weapon(Player.ViewEnt).FireDeathWaveState);
			Player.SetViewState(ps_flash, none);
		}
	}
	else if (bDisruptDamage && DisruptDeathState)
	{
		SetState(DisruptDeathState);
		PlaySound('human/disrupt', CHAN_BODY);
	}
	else if (Health < GibsHealth && GibsDeathState)
	{
		SetState(GibsDeathState);
	}
	else
	{
		SetState(DeathState);
	}
	StateTime -= Random() * 0.1;

	if (StateTime < 0.1)
		StateTime = 0.1;

	SpeechNum = GetSpeech();
	if (SpeechNum)
	{
		//	Drop stuff as determined by conversation.
		if (SpeechNum < 0)
		{
			Speech = &XLevel.GenericSpeeches[-SpeechNum - 1];
		}
		else
		{
			Speech = &XLevel.LevelSpeeches[SpeechNum - 1];
		}
		DropItemType = StrifeLevelInfo(Level).GetClassFromID(Speech->DropItem);
		if (DropItemType)
		{
			A = Spawn(DropItemType, Origin + vector(0.0, 0.0, Height / 2.0));

			if (Pickup(A) && Pickup(A).bDropAutoGive)
			{
				Pickup(A).HandlePickup(Actor(source));
				A.Destroy();
			}
			else
			{
				A.Velocity.x = (Random() - Random()) * 35.0;
				A.Velocity.y = (Random() - Random()) * 35.0;
				A.Velocity.z = (5.0 + Random() * 4.0) * 35.0;
				A.bDropped = true;	// special versions of items
			}
		}
	}
	//  This class of rebel always drops a clip, unless it already did.
	if (Class == Rebel1 && !ClipOfBullets(A))
	{
		A = Spawn(ClipOfBullets, Origin + vector(0.0, 0.0, Height / 2.0));
		A.Velocity.x = (Random() - Random()) * 35.0;
		A.Velocity.y = (Random() - Random()) * 35.0;
		A.Velocity.z = (5.0 + Random() * 4.0) * 35.0;
		A.bDropped = true;	// special versions of items
	}
	if (Class == Crusader)
	{
		A = Spawn(EnergyPod, Origin + vector(0.0, 0.0, Height / 2.0));
		A.Velocity.x = (Random() - Random()) * 35.0;
		A.Velocity.y = (Random() - Random()) * 35.0;
		A.Velocity.z = (5.0 + Random() * 4.0) * 35.0;
		A.bDropped = true;	// special versions of items
	}
	if (Class == StrifeBishop)
	{
		A = Spawn(CrateOfMissiles, Origin + vector(0.0, 0.0, Height / 2.0));
		A.Velocity.x = (Random() - Random()) * 35.0;
		A.Velocity.y = (Random() - Random()) * 35.0;
		A.Velocity.z = (5.0 + Random() * 4.0) * 35.0;
		A.bDropped = true;	// special versions of items
	}
}

//==========================================================================
//
//  AutoUseHealth
//
//==========================================================================

void AutoUseHealth(int saveHealth)
{
	int i, j;
	int count;

	for (i = 0; i < StrifeDefs::NUMINVITEMS - 1; i++)
	{
		if (Player(Player).Inventory[i] && i == StrifeDefs::ITEM_MedicalKit
			&& Player(Player).Inventory[i] * 25 >= saveHealth)
		{
			// Use medical kits
			Health += 25;
			Player(Player).RemoveInvItem(i, 1);
			Player.MO.PlaySound('misc/invuse', CHAN_BODY);
		}
		else if (Player(Player).Inventory[i] && i == StrifeDefs::ITEM_MedPatch
			&& Player(Player).Inventory[i] * 10 >= saveHealth)
		{
			Health += 10;
			Player(Player).RemoveInvItem(i, 1);
			Player.MO.PlaySound('misc/invuse', CHAN_BODY);
		}
	}
	Player.Health = Health;
}

//==========================================================================
//
//  AutoUseArmor
//
//==========================================================================

void AutoUseArmor()
{
	int i;
	int count;

	for (i = 0; i < StrifeDefs::NUMINVITEMS - 1; i++)
	{
		if (Player(Player).Inventory[i] && i == StrifeDefs::ITEM_MetalArmor)
		{
			// Use metal armor
			Player(Player).GiveArmor(2);
			Player(Player).RemoveInvItem(i, 1);
		}
		else if (Player(Player).Inventory[i] && i == StrifeDefs::ITEM_LeatherArmor)
		{
			// Use leather armor
			Player(Player).GiveArmor(1);
			Player(Player).RemoveInvItem(i, 1);
		}
	}
}

//==========================================================================
//
//  Damage
//
//  Damages both enemies and players.
//  "inflictor" is the thing that caused the damage, creature or missile,
// can be NULL (slime, etc).
//  "source" is the thing to target after taking damage, creature or NULL.
//  Source and inflictor are the same for melee attacks. Source can be NULL
// for slime, barrel explosions and other environmental stuff.
//
//==========================================================================

void Damage(EntityEx inflictor, EntityEx source, int damage, optional name DmgType)
{
	int saved;

	if (!bShootable)
		return;	// shouldn't happen...

	if (Health <= 0)
		return;

	//	Spectral targets only take damage from spectral projectiles.
	if (bSpectral)
	{
		if (!inflictor || !Actor(inflictor).bSpectral)
		{
			if (MissileState)
			{
				SetState(MissileState);
			}
			return;
		}
	}

	if (bSkullFly)
	{
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(SeeState);
	}
	if (bDormant)
	{
		// Invulnerable, and won't wake up
		return;
	}

	if (bIsPlayer && Level.Game.gameskill == sk_baby)
		damage >>= 1;	// take half damage in trainer mode

	if (inflictor)
	{
		damage = Actor(inflictor).DoSpecialDamage(self, damage);
		if (damage == -1)
		{
			return;
		}
	}
	damage = TakeSpecialDamage(Actor(inflictor), Actor(source), damage);
	if (damage == -1)
	{
		return;
	}

	// Some close combat weapons should not
	// inflict thrust and push the victim out of reach,
	// thus kick away unless using the chainsaw.
	if (inflictor && bColideWithThings)
	{
		Velocity += (500.0 * itof(damage > 100 ? 100 : damage) / Mass) *
			Normalise(GetCentre() - inflictor.GetCentre());
	}

	if (inflictor && Actor(inflictor).bPoisonDamage && bNoBlood)
	{
		// Don't damage actors that don't take poison damage
		return;
	}

	if (inflictor && inflictor.Class == InquisitorShot && Class == Inquisitor)
	{
		// Inquisitor grenades don't damage inquisitors
		return;
	}

	// player specific
	if (bIsPlayer)
	{
		if (inflictor && Actor(inflictor).bFireDamage && Player(Player).Powers[pw_ironfeet])
		{
			// If the player wears an environmental suit it's not
			// damaged by fire damage
			return;
		}

		//	End of game hell hack.
		if ((Sector->special & SECSPEC_BASE_MASK) ==
			SECSPEC_DamageSuperHellslimeExit && damage >= Health)
		{
			damage = Health - 1;
		}

		// Below certain threshold,
		// ignore damage in GOD mode, or with INVUL power.
		if (damage < 1000 && ((Player(Player).Cheats & StrifeDefs::CF_GODMODE) ||
			Player(Player).Powers[pw_invulnerability]))
		{
			return;
		}

		if (Player(Player).ArmorType)
		{
			if (Player(Player).ArmorType == 1)
				saved = damage / 3;
			else
				saved = damage / 2;

			if (Player(Player).ArmorPoints <= saved)
			{
				// armor is used up
				saved = Player(Player).ArmorPoints;
				Player(Player).ArmorType = 0;
				// Try to use some inventory armor
				AutoUseArmor();
			}
			Player(Player).ArmorPoints -= saved;
			damage -= saved;
		}
		if (Player.Health < 50 || damage >= Player.Health)
		{
			// Try to use some inventory health
			AutoUseHealth(damage - Health + 1);
		}
		Player.Health -= damage;	// mirror mobj health here for Dave
		if (Player.Health < 0)
			Player.Health = 0;

		Player(Player).Attacker = Actor(source);
		Player(Player).DamageFlash += itof(damage) / 35.0;	// add damage after armor / invuln

		if (Player(Player).DamageFlash > 3.0)
			Player(Player).DamageFlash = 3.0;	// teleport stomp does 10k points...
	}

	// do the damage    
	Health -= damage;
	if (Health <= 0)
	{
		if (inflictor)
		{
			if (Actor(inflictor).bPoisonDamage)
			{
				//	Prevent gibing animation.
				Health = -1;
			}
			else if (Actor(inflictor).bFireDamage)
			{
				bFireDamage = true;
			}
			else if (Actor(inflictor).bDisruptDamage)
			{
				bDisruptDamage = true;
			}
		}
		Died(source);
		return;
	}

	if ((Random() < PainChance) && !bSkullFly)
	{
		bJustHit = true;	// fight back!
		SetState(PainState);
	}

	ReactionCount = 0;	// we're awake now...

	if ((!Threshold) && source && source != self &&
		(Level.Game.deathmatch || Actor(source).bFriendly != bFriendly))
	{
		// if not intent on another player,
		// chase after this one
		Target = Actor(source);
		Threshold = BASETHRESHOLD;
		if (State == IdleState && SeeState)
		{
			SetState(SeeState);
		}
	}
}

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

int DoSpecialDamage(Actor Victim, int damage)
{
	return damage;
}

//==========================================================================
//
//  TakeSpecialDamage
//
//==========================================================================

int TakeSpecialDamage(Actor inflictor, Actor source, int damage)
{
	return damage;
}

//==========================================================================
//
//  NightmareRespawn
//
//==========================================================================

void NightmareRespawn()
{
	float x;
	float y;
	float z;
	Actor A;
	mthing_t *mthing;

	x = SpawnPoint.x;
	y = SpawnPoint.y;

	// somthing is occupying it's position?
	if (!CheckPosition(vector(x, y, ONFLOORZ)))
		return;	// no respwan

	// spawn a teleport fog at old spot
	// because of removal of the body?
	A = Spawn(TeleportFog, vector(Origin.x, Origin.y, ONFLOORZ));

	// initiate teleport sound
	A.PlaySound('misc/teleport', CHAN_BODY);

	// spawn a teleport fog at the new spot
	A = Spawn(TeleportFog, vector(x, y, ONFLOORZ));

	A.PlaySound('misc/teleport', CHAN_BODY);

	// spawn the new monster
	mthing = &SpawnPoint;

	// spawn it
	if (bSpawnCeiling)
		z = ONCEILINGZ;
	else
		z = ONFLOORZ;

	// inherit attributes from deceased one
	A = Spawn(class<Actor>(Class), vector(x, y, z));
	Level.CopyMThing(&SpawnPoint, &A.SpawnPoint);
	A.Angles.yaw = itof(45 * (mthing->angle / 45));

	if (mthing->options & StrifeLevelInfo::MTF_AMBUSH)
		A.bStanding = true;

	A.ReactionCount = 18;

	// remove the old monster,
	Destroy();
}

//==========================================================================
//
//	Touch
//
//==========================================================================

bool Touch(Entity InOther)
{
	bool solid;
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// check for skulls slamming into things
	if (bSkullFly)
	{
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(IdleState);
		return false;	// stop moving
	}

	// missiles can hit other things
	if (bMissile)
	{
		if (Target && (Target.Class == Other.Class))
		{
			// Don't hit same species as originator.
			if (Other == Target)
				return true;

			if (Other.Class != StrifePlayer)
			{
				// Explode, but do no damage.
				// Let players missile other players.
				return false;
			}
		}

		//	Don't hit spectres with non-sigil weapons.
		if (Other.bSpectral && !bSpectral)
		{
			return true;
		}

		if (!Other.bShootable)
		{
			// didn't do any damage
			return !Other.bSolid;
		}

		// damage / explode
		damage = ((P_Random() % 4) + 1) * MissileDamage;
		Other.Damage(self, Target, damage);
		// don't traverse any more
		return false;
	}

	// check for special pickup
	if (Other.bSpecial)
	{
		solid = Other.bSolid;
		Other.TouchSpecial(self);
		return !solid;
	}

	//return !Other.bSolid || Other.bNoClip;
	return !Other.bSolid;
}

//===========================================================================
//
//	CheckForPushSpecial
//
//===========================================================================

void CheckForPushSpecial(line_t * line, int side)
{
	if (line->special)
	{
		if (bActivatePushWall)
		{
			StrifeLevelInfo(Level).ActivateLine(line, self, side, SPAC_PUSH);
		}
		else if (bActivateImpact)
		{
			StrifeLevelInfo(Level).ActivateLine(line,
				bMissile ? Actor(Target) : self, side, SPAC_IMPACT);
		}
	}
}

//==========================================================================
//
//	BlockedByLine
//
//==========================================================================

void BlockedByLine(line_t * ld)
{
	if (bBlasted)
	{
		Damage(none, none, ftoi(Mass) >> 5);
	}
	CheckForPushSpecial(ld, 0);
}

//==========================================================================
//
//  PushLine
//
//==========================================================================

void PushLine(tmtrace_t* tmtrace)
{
	if (bColideWithWorld)
	{
		int numSpecHitTemp;
		line_t *ld;
		int side;

		if (bBlasted)
		{
			Damage(none, none, ftoi(Mass) >> 5);
		}
		numSpecHitTemp = tmtrace->NumSpecHit;
		while (numSpecHitTemp > 0)
		{
			numSpecHitTemp--;
			// see if the line was crossed
			ld = tmtrace->SpecHit[numSpecHitTemp];
			side = PointOnPlaneSide(Origin, ld);
			CheckForPushSpecial(ld, side);
		}
	}
}

//==========================================================================
//
//	CrossSpecialLine
//
//==========================================================================

void CrossSpecialLine(line_t *ld, int side)
{
	if (bIsPlayer)
	{
		StrifeLevelInfo(Level).ActivateLine(ld, self, side, SPAC_CROSS);
	}
	else if (bActivateMCross)
	{
		StrifeLevelInfo(Level).ActivateLine(ld, self, side, SPAC_MCROSS);
	}
	else if (bActivatePCross)
	{
		StrifeLevelInfo(Level).ActivateLine(ld, self, side, SPAC_PCROSS);
	}
	else if (ld->special == LNSPEC_Teleport)
	{
		//	Teleport hack
		StrifeLevelInfo(Level).ActivateLine(ld, self, side, SPAC_MCROSS);
	}
}

//===========================================================================
//
//  GiveInventory
//
//===========================================================================

void GiveInventory(name ItemName, int Amount)
{
	if (!bIsPlayer)
	{
		return;
	}

	//	Stamina upgrade.
	if (ItemName == 'UpgradeStamina')
	{
		Player(Player).Stamina += 10;
		Player(Player).GiveBody(200);
	}

	//	Accuracy upgrade.
	if (ItemName == 'UpgradeAccuracy')
	{
		Player(Player).Accuracy += 10;
	}

	//	Quest items.
	if (ItemName == 'QuestItem1')
	{
		Player(Player).GiveQuest(QUEST_KilledBeldin);
	}
	if (ItemName == 'QuestItem2')
	{
		Player(Player).GiveQuest(QUEST_StoleChalice);
	}
	if (ItemName == 'QuestItem3')
	{
		Player(Player).GiveQuest(QUEST_Prison);
	}
	if (ItemName == 'QuestItem4')
	{
		Player(Player).GiveQuest(QUEST_GovPowerCoupling);
	}
	if (ItemName == 'QuestItem5')
	{
		Player(Player).GiveQuest(QUEST_GovDerwin);
	}
	if (ItemName == 'QuestItem6')
	{
		Player(Player).GiveQuest(QUEST_BrokePowerCoupling);
	}
	if (ItemName == 'QuestItem7')
	{
		Player(Player).GiveQuest(QUEST_7);
	}
	if (ItemName == 'QuestItem8')
	{
		Player(Player).GiveQuest(QUEST_GotBrokenPowerCoupling);
	}
	if (ItemName == 'QuestItem9')
	{
		Player(Player).GiveQuest(QUEST_GotDerwinsEar);
	}
	if (ItemName == 'QuestItem10')
	{
		Player(Player).GiveQuest(QUEST_GotPrisonPass);
	}
	if (ItemName == 'QuestItem11')
	{
		Player(Player).GiveQuest(QUEST_GotPrisonKey);
	}
	if (ItemName == 'QuestItem12')
	{
		Player(Player).GiveQuest(QUEST_GotSeveredHand);
	}
	if (ItemName == 'QuestItem13')
	{
		Player(Player).GiveQuest(QUEST_FreedPrisoners);
	}
	if (ItemName == 'QuestItem14')
	{
		Player(Player).GiveQuest(QUEST_BlownUpCrystal);
	}
	if (ItemName == 'QuestItem15')
	{
		Player(Player).GiveQuest(QUEST_GotGuardUniform);
	}
	if (ItemName == 'QuestItem16')
	{
		Player(Player).GiveQuest(QUEST_BlownUpGates);
	}
	if (ItemName == 'QuestItem17')
	{
		Player(Player).GiveQuest(QUEST_VisitOracle);
	}
	if (ItemName == 'QuestItem18')
	{
		Player(Player).GiveQuest(QUEST_GotOraclePass);
	}
	if (ItemName == 'QuestItem19')
	{
		Player(Player).GiveQuest(QUEST_DestroyComputer);
	}
	if (ItemName == 'QuestItem20')
	{
		Player(Player).GiveQuest(QUEST_20);
	}
	if (ItemName == 'QuestItem21')
	{
		Player(Player).GiveQuest(QUEST_KilledBishop);
	}
	if (ItemName == 'QuestItem22')
	{
		Player(Player).GiveQuest(QUEST_KillMacil);
	}
	if (ItemName == 'QuestItem23')
	{
		Player(Player).GiveQuest(QUEST_KilledOracle);
	}
	if (ItemName == 'QuestItem24')
	{
		Player(Player).GiveQuest(QUEST_KilledMacil);
	}
	if (ItemName == 'QuestItem25')
	{
		Player(Player).GiveQuest(QUEST_Factory);
	}
	if (ItemName == 'QuestItem26')
	{
		Player(Player).GiveQuest(QUEST_KilledLoremaster);
	}
	if (ItemName == 'QuestItem27')
	{
		Player(Player).GiveQuest(QUEST_BlownUpComputer);
	}
	if (ItemName == 'QuestItem28')
	{
		Player(Player).GiveQuest(QUEST_GotCatacombKey);
	}
	if (ItemName == 'QuestItem29')
	{
		Player(Player).GiveQuest(QUEST_FreedWorkers);
	}
	if (ItemName == 'QuestItem30')
	{
		Player(Player).GiveQuest(QUEST_30);
	}
	if (ItemName == 'QuestItem31')
	{
		Player(Player).GiveQuest(QUEST_31);
	}
}

//===========================================================================
//
//  CheckInventory
//
//===========================================================================

int CheckInventory(name ItemName)
{
	//	Check if it's a player.
	if (!bIsPlayer)
	{
		return 0;
	}

	//	Weapons.
	if (ItemName == 'FlameThrower')
	{
		return Player(Player).WeaponOwned[StrifeDefs::wp_flame];
	}
	if (ItemName == 'Sigil')
	{
		return Player(Player).WeaponOwned[StrifeDefs::wp_sigil];
	}

	//	Inventory items.
	if (ItemName == 'OfferingChalice')
	{
		return Player(Player).Inventory[StrifeDefs::ITEM_OfferingChalice];
	}
	if (ItemName == 'OfficersUniform')
	{
		return Player(Player).Inventory[StrifeDefs::ITEM_OfficersUniform];
	}

	//	Quest items.
	if (ItemName == 'QuestItem1')
	{
		return Player(Player).Quests & (1 << 0) ? 1 : 0;
	}
	if (ItemName == 'QuestItem2')
	{
		return Player(Player).Quests & (1 << 1) ? 1 : 0;
	}
	if (ItemName == 'QuestItem3')
	{
		return Player(Player).Quests & (1 << 2) ? 1 : 0;
	}
	if (ItemName == 'QuestItem4')
	{
		return Player(Player).Quests & (1 << 3) ? 1 : 0;
	}
	if (ItemName == 'QuestItem5')
	{
		return Player(Player).Quests & (1 << 4) ? 1 : 0;
	}
	if (ItemName == 'QuestItem6')
	{
		return Player(Player).Quests & (1 << 5) ? 1 : 0;
	}
	if (ItemName == 'QuestItem7')
	{
		return Player(Player).Quests & (1 << 6) ? 1 : 0;
	}
	if (ItemName == 'QuestItem8')
	{
		return Player(Player).Quests & (1 << 7) ? 1 : 0;
	}
	if (ItemName == 'QuestItem9')
	{
		return Player(Player).Quests & (1 << 8) ? 1 : 0;
	}
	if (ItemName == 'QuestItem10')
	{
		return Player(Player).Quests & (1 << 9) ? 1 : 0;
	}
	if (ItemName == 'QuestItem11')
	{
		return Player(Player).Quests & (1 << 10) ? 1 : 0;
	}
	if (ItemName == 'QuestItem12')
	{
		return Player(Player).Quests & (1 << 11) ? 1 : 0;
	}
	if (ItemName == 'QuestItem13')
	{
		return Player(Player).Quests & (1 << 12) ? 1 : 0;
	}
	if (ItemName == 'QuestItem14')
	{
		return Player(Player).Quests & (1 << 13) ? 1 : 0;
	}
	if (ItemName == 'QuestItem15')
	{
		return Player(Player).Quests & (1 << 14) ? 1 : 0;
	}
	if (ItemName == 'QuestItem16')
	{
		return Player(Player).Quests & (1 << 15) ? 1 : 0;
	}
	if (ItemName == 'QuestItem17')
	{
		return Player(Player).Quests & (1 << 16) ? 1 : 0;
	}
	if (ItemName == 'QuestItem18')
	{
		return Player(Player).Quests & (1 << 17) ? 1 : 0;
	}
	if (ItemName == 'QuestItem19')
	{
		return Player(Player).Quests & (1 << 18) ? 1 : 0;
	}
	if (ItemName == 'QuestItem20')
	{
		return Player(Player).Quests & (1 << 19) ? 1 : 0;
	}
	if (ItemName == 'QuestItem21')
	{
		return Player(Player).Quests & (1 << 20) ? 1 : 0;
	}
	if (ItemName == 'QuestItem22')
	{
		return Player(Player).Quests & (1 << 21) ? 1 : 0;
	}
	if (ItemName == 'QuestItem23')
	{
		return Player(Player).Quests & (1 << 22) ? 1 : 0;
	}
	if (ItemName == 'QuestItem24')
	{
		return Player(Player).Quests & (1 << 23) ? 1 : 0;
	}
	if (ItemName == 'QuestItem25')
	{
		return Player(Player).Quests & (1 << 24) ? 1 : 0;
	}
	if (ItemName == 'QuestItem26')
	{
		return Player(Player).Quests & (1 << 25) ? 1 : 0;
	}
	if (ItemName == 'QuestItem27')
	{
		return Player(Player).Quests & (1 << 26) ? 1 : 0;
	}
	if (ItemName == 'QuestItem28')
	{
		return Player(Player).Quests & (1 << 27) ? 1 : 0;
	}
	if (ItemName == 'QuestItem29')
	{
		return Player(Player).Quests & (1 << 28) ? 1 : 0;
	}
	if (ItemName == 'QuestItem30')
	{
		return Player(Player).Quests & (1 << 29) ? 1 : 0;
	}
	if (ItemName == 'QuestItem31')
	{
		return Player(Player).Quests & (1 << 30) ? 1 : 0;
	}

	//	I don't know what it is.
	return 0;
}

//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================

int GetSigilPieces()
{
	if (bIsPlayer && Player(Player).WeaponOwned[StrifeDefs::wp_sigil])
	{
		return Player(Player).Sigil + 1;
	}
	return 0;
}

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return Player::VIEWHEIGHT;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	//  In my deathmatch mode remove dropped weapons after 30 seconds
	// because otherwise they are spawned fastar than player(s) can pick 
	// them up and the game is going slower and slower and slower ...
	if (bDropped && (Level.Game.deathmatch == 3))
	{
		MoveCount++;
		if (MoveCount >= 30 * 35)
		{
			Destroy();
			return;
		}
	}

	if (!Physics(deltaTime))
	{
		return;
	}

	// cycle through states,
	// calling action functions at transitions
	if (StateTime != -1.0)
	{
		if (!AdvanceState(deltaTime))
			return;	// freed itself
	}
	else
	{
		// check for nightmare respawn
		if (!bCountKill)
			return;

		if (!MainGameInfo(Level.Game).respawnmonsters)
			return;

		MoveCount++;

		if (MoveCount < 12 * 35)
			return;

		if (XLevel.TicTime & 31)
			return;

		if (P_Random() > 4)
			return;

		NightmareRespawn();
	}
}

//==========================================================================
//
//	SectorChanged
//
//==========================================================================

bool SectorChanged(int CrushChange)
{
	Actor A;

	if (HeightClip())
	{
		return true;
	}

	//	Crunch bodies to giblets
	if (Health <= 0)
	{
		SetState(S_GIBS);
		bSolid = false;
		Height = 0.0;
		Radius = 0.0;
		return true;
	}

	//	Crunch dropped items
	if (bDropped)
	{
		Destroy();
		return true;
	}

	if (!bShootable)
	{
		//	Assume it is bloody gibs or something
		return true;
	}

	if (CrushChange && !(XLevel.TicTime & 3))
	{
		Damage(none, none, CrushChange);

		// spray blood in a random direction
		A = Spawn(Blood, Origin + vector(0.0, 0.0, Height / 2.0));
		A.Velocity.x = (Random() - Random()) * 16.0 * 35.0;
		A.Velocity.y = (Random() - Random()) * 16.0 * 35.0;
	}
	return false;	//don't fit
}

//==========================================================================
//
//  LookForMonsters
//
//==========================================================================

bool LookForMonsters(bool allaround)
{
	Actor mo;
	float an;
	float dist;

	if (!Level.Game.Players[0].MO.CanSee(self))
	{
		return false;	//  Not seen by player
	}

	foreach AllThinkers(Actor, mo)
	{
		if (mo.Health <= 0)
			continue;	// dead

		if (mo == self)
			continue;	// self

		if (!mo.bCountKill)
			continue;	// not a monster

		if (!CanSee(mo))
			continue;	// out of sight

		if (P_Random() > 128)
			continue;	// sometimes skip

		if (!allaround)
		{
			an = AngleMod360(atan2(mo.Origin.y - Origin.y,
				mo.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				dist = DistTo(mo);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		Target = mo;
		return true;
	}
	return false;
}

//==========================================================================
//
//  LookForMonsters2
//
//==========================================================================

bool LookForMonsters2(bool allaround)
{
	Actor mo;
	float an;
	float dist;

	foreach AllThinkers(Actor, mo)
	{
		if (mo.Health <= 0)
			continue;	// dead

		if (mo == self)
			continue;	// self

		if (!mo.bCountKill)
			continue;	// not a monster

		if (bFriendly == mo.bFriendly)
			continue;	// fiendly.

		if (!CanSee(mo))
			continue;	// out of sight

		if (P_Random() > 128)
			continue;	// sometimes skip

		if (!allaround)
		{
			an = AngleMod360(atan2(mo.Origin.y - Origin.y,
				mo.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				dist = DistTo(mo);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		Target = mo;
		return true;
	}
	return false;
}

//==========================================================================
//
//  LookForPlayers
//
//  If allaround is false, only look 180 degrees in front.
//  Returns true if a player is targeted.
//
//==========================================================================

bool LookForPlayers(bool allaround)
{
	int c;
	int stop;
	Player player;
	float an;
	float dist;

	if (bFriendly)
	{
		return LookForMonsters2(allaround);
	}
// 
	if (!Level.Game.netgame && Level.Game.Players[0] && Level.Game.Players[0].bSpawned && Level.Game.Players[0].Health <= 0)
	{
		return LookForMonsters(allaround);
	}

	c = 0;
	stop = (LastLook - 1) & (MAXPLAYERS - 1);

	for (;; LastLook = (LastLook + 1) & (MAXPLAYERS - 1))
	{
		if (LastLook == stop)
		{
			// done looking
			return false;
		}

		player = Player(Level.Game.Players[LastLook]);

		if (!player)
			continue;

		if (c++ == 2)
		{
			// done looking
			return false;
		}

		if (!player.bSpawned || !player.MO)
			continue;	//  not spawned yet

		if (player.Health <= 0)
			continue;	// dead

		if (!CanSee(player.MO))
			continue;	//  out of sight

		if (!allaround)
		{
			an = AngleMod360(atan2(player.MO.Origin.y - Origin.y,
				player.MO.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				dist = DistTo(player.MO);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		Target = Actor(player.MO);
		return true;
	}

	return false;
}

//==========================================================================
//
//	SpawnSubMissile
//
//==========================================================================

Actor SpawnSubMissile(class<Actor> type, EntityEx AInstigator)
{
	Actor other;
	TVec dir;

	other = Spawn(type, Origin);
	if (!other)
	{
		return none;
	}

	other.Target = AInstigator;
	other.Angles = Angles;

	other.Velocity.x = other.Speed * cos(Angles.yaw);
	other.Velocity.y = other.Speed * sin(Angles.yaw);
	AimLineAttack(dir, Angles, 1024.0);
	other.Velocity.z = other.Speed * dir.z;
	other.CheckMissileSpawn();
	return other;
}

//==========================================================================
//
//  TossUpObject
//
//==========================================================================

Actor TossUpObject(class<Actor> type)
{
	Actor		A;
	float		an;
	float		randomspeed;

	randomspeed = Random() * 8.0 - 6.0;

	A = Spawn(type, GetCentre());
	if (A)
	{
		an = AngleMod360(Angles.yaw + Random() * 360.0);
		A.Angles.yaw = an;
		A.Tracer = Target;
		A.Target = self;
		A.Velocity.x = randomspeed * cos(an) * 35.0;
		A.Velocity.y = randomspeed * sin(an) * 35.0;
		A.Velocity.z = (12.0 + Random() / 8.0) * 35.0;
	}
	return A;
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(TVec Org, float Range, class<EntityEx> PuffType, bool HitThing)
{
	EntityEx A;

	Org.z += (Random() - Random()) * 4.0;
	A = Spawn(PuffType, Org);
	A.Velocity.z = 1.0 * 35.0;
	A.StateTime -= Random() * 0.1;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;
}

//==========================================================================
//
//  SpawnBlood
// 
//==========================================================================

void SpawnBlood(TVec org, int damage)
{
	Actor A;
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientBlood(
			org, damage > 255 ? 255 : damage);
	}

	org.z += (Random() - Random()) * 4.0;
	A = Spawn(Blood, org);
	A.Velocity.z = 2.0 * 35.0;
	A.StateTime -= Random() * 0.1;

	if (A.StateTime < 0.1)
		A.StateTime = 0.1;

	if (damage <= 12 && damage >= 9)
		A.SetState(Blood::S_BLOOD2);
	else if (damage < 9)
		A.SetState(Blood::S_BLOOD3);
}

//==========================================================================
//
//  A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

final void A_Look()
{
	Actor targ;
	int sound;

	Threshold = 0;	// any shot will wake up
	targ = Actor(Sector->SoundTarget);

	if (targ && targ.bShootable)
	{
		Target = targ;
	}
	else
	{
		if (!LookForPlayers(bLookAllAround))
			return;
	}

	// go into chase state
	if (SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}

	SetState(SeeState);
}

//==========================================================================
//
//	A_ActiveSound
//
//==========================================================================

final void A_ActiveSound()
{
	if (ActiveSound && !GetSoundPlayingInfo(self, GetSoundID(ActiveSound)))
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_Pain
//
//==========================================================================

final void A_Pain()
{
	if (PainSound)
	{
		PlaySound(PainSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_Explode
//
//  Rocket and barrel explosion.
//
//==========================================================================

final void A_Explode()
{
	RadiusAttack(Target, 64, 64.0, true);
	if (Origin.z <= FloorZ + 64.0)
	{
		HitFloorType();
	}
	if (Target && Target.bIsPlayer)
	{
		StrifeLevelInfo(Level).NoiseAlert(Target, self);
	}

	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//  A_Explode2
//
//  Rocket and barrel explosion.
//
//==========================================================================

final void A_Explode2()
{
	RadiusAttack(Target, 128, 128.0, true);
	if (Origin.z <= FloorZ + 128.0)
	{
		HitFloorType();
	}

	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//  A_Scream
//
//  Death sound.
//
//==========================================================================

final void A_Scream()
{
	//  Remove muzzle flash & other light effects
	if (Effects & StrifeDefs::EF_DLIGHT_MASK)
	{
		Effects &= ~StrifeDefs::EF_DLIGHT_MASK;
	}

	if (DeathSound)
	{
		PlaySound(DeathSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_Fall
//
//  Unset blocking.
//
//==========================================================================

final void A_Fall()
{
	//  Remove muzzle flash
	if ((Effects & StrifeDefs::EF_DLIGHT_MASK) == StrifeDefs::EF_DL_MUZZLEFLASH)
	{
		Effects &= ~StrifeDefs::EF_DLIGHT_MASK;
	}

	// actor is on ground, it can be walked over
	bSolid = false;
}

//==========================================================================
//
//	A_SetShadow
//
//==========================================================================

final void A_SetShadow()
{
	bUnknown2 = true;
	Alpha = 0.333;
}

//==========================================================================
//
//	A_ClearShadow
//
//==========================================================================

final void A_ClearShadow()
{
	bUnknown2 = false;
	Alpha = 1.0;
}

//==========================================================================
//
//	A_BeShadowyFoe
//
//==========================================================================

final void A_BeShadowyFoe()
{
	Alpha = 0.333;
	bFriendly = false;
}

//==========================================================================
//
//	A_Tracer
//
//==========================================================================

const float TRACEANGLE	= (7.0 * 45.0 / 16.0);

final void A_Tracer()
{
	Actor dest;
	float exact;
	float dist;
	float slope;

	dest = Actor(Tracer);

	if (!dest || dest.Health <= 0)
		return;

	// change angle
	exact = atan2(dest.Origin.y - Origin.y, dest.Origin.x - Origin.x);

	if (exact != Angles.yaw)
	{
		if (AngleMod360(exact - Angles.yaw) > 180.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - TRACEANGLE);
			if (AngleMod360(exact - Angles.yaw) < 180.0)
				Angles.yaw = exact;
		}
		else
		{
			Angles.yaw = AngleMod360(Angles.yaw + TRACEANGLE);
			if (AngleMod360(exact - Angles.yaw) > 180.0)
				Angles.yaw = exact;
		}
	}

	exact = Angles.yaw;
	Velocity.x = Speed * cos(exact);
	Velocity.y = Speed * sin(exact);

	// change slope
	dist = DistTo2(dest);
	dist /= Speed;

	if (dist < 1.0)
	{
		dist = 1.0;
	}
	slope = (dest.Origin.z + 40.0 - Origin.z) / dist;
	if (slope < Velocity.z)
	{
		Velocity.z -= 1.0 / 8.0 * 35.0;
	}
	else
	{
		Velocity.z += 1.0 / 8.0 * 35.0;
	}
}

//==========================================================================
//
//	A_SpawnPuff
//
//==========================================================================

final void A_SpawnPuff()
{
	Actor A;

	if (MiniMissile(self))
	{
		PlaySound('misc/missileinflight', CHAN_VOICE);
		SpawnPuff(Origin, MISSILERANGE, StrifePuff, false);
		A = Spawn(RocketTrail, Origin - Velocity / 35.0);
		if (A)
		{
			A.Velocity.z = 1.0 * 35.0;
		}
	}
	else
	{
		A = Spawn(StrifePuff, Origin + vector(
			(Random() - Random()) * 5.0 / 8.0,
			(Random() - Random()) * 5.0 / 8.0, 0.0));
		//FIXME Create a class for this.
		A.SetState(StrifePuff::S_GRENADE_HE_X2);
	}
}

//==========================================================================
//
//	A_ScrollOrDie
//
//==========================================================================

final void A_ScrollOrDie()
{
	int anglespeed;
	float speed;
	float finean;

	if (Origin.z == GetPlanePointZ(Floor, Origin))
	{
		if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_DamageInstantDeath)
		{
			Damage(none, none, 999);
		}
		else if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_ScrollCurrent)
		{
			anglespeed = Sector->tag - 100;
			speed = itof(anglespeed % 10) / 16.0 * 35.0;
			finean = itof(anglespeed / 10) * 45.0;
			Velocity.x += speed * cos(finean);
			Velocity.y += speed * sin(finean);
		}
	}
}

//==========================================================================
//
//	A_XDying
//
//==========================================================================

final void A_XDying()
{
	Actor gib;
	float an;
	float speed;
	class<Actor> tp;

	if (bNoBlood)
		tp = Junk;
	else
		tp = Meat;
	gib = Spawn(tp, Origin + vector(0.0, 0.0, 24.0));
	if (!gib)
	{
		return;
	}

	an = Random() * 360.0;
	gib.Angles.yaw = an;
	speed = Random() * 16.0 * 35.0;
	gib.Velocity.x = speed * cos(an);
	gib.Velocity.y = speed * sin(an);
	gib.Velocity.z = Random() * 16.0 * 35.0;
}

//==========================================================================
//
//	A_DecReactionCount
//
//==========================================================================

final void A_DecReactionCount()
{
	if (--ReactionCount <= 0)
	{
		ExplodeMissile();
		bSkullFly = false;
	}
}

//==========================================================================
//
//	A_AlertMonsters
//
//==========================================================================

final void A_AlertMonsters()
{
	if (Target && Target.bIsPlayer)
	{
		StrifeLevelInfo(Level).NoiseAlert(Target, self);
	}
}

//==========================================================================
//
//	A_CheckAlarm
//
//	Stay in state untill alarm is triggered.
//
//==========================================================================

final void A_CheckAlarm()
{
	Actor targ;
	int sound;

	Threshold = 0;
	targ = Actor(Sector->SoundTarget);
	if (targ && targ.bShootable)
	{
		Target = targ;
		// go into chase state
		if (SightSound)
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
		Threshold = 10;
		SetState(SeeState);
	}
}

//==========================================================================
//
//	A_Explode32
//
//==========================================================================

final void A_Explode32()
{
	RadiusAttack(Target, 32, 32.0, false);
	if (DeathSound)
		PlaySound(DeathSound, CHAN_VOICE);

	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//	A_Explode192
//
//==========================================================================

final void A_Explode192()
{
	RadiusAttack(Target, 192, 192.0, false);
	if (DeathSound)
		PlaySound(DeathSound, CHAN_VOICE);

	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//	A_RemoveForceField
//
//==========================================================================

final void A_RemoveForceField()
{
	int i;
	line_t* line;

	bSpecial = false;
	for (i = 0; i < Sector->linecount; i++)
	{
		line = Sector->lines[i];
		if (line->backsector && line->special == 33)
		{
			line->flags &= ~(ML_BLOCKING|ML_BLOCKEVERYTHING);
			line->special = 0;
			XLevel.Sides[line->sidenum[0]].midtexture = 0;
			XLevel.Sides[line->sidenum[1]].midtexture = 0;
		}
	}
}

//==========================================================================
//
//	GetSpeechIndex
//
//==========================================================================

int GetSpeechIndex(RogueConSpeech *List, int Count, int ID, int Num)
{
	int Found;
	int i;

	Found = 0;
	for (i = 0; i < Count; i++)
	{
		if (List[i].SpeakerID == ID)
		{
			Found++;
			if (Found == Num)
			{
				return i + 1;
			}
		}
	}
	return 0;
}

//==========================================================================
//
//	GetSpeech
//
//==========================================================================

int GetSpeech()
{
	int Index;

	if (!CurrentSpeech)
	{
		CurrentSpeech = 1;
	}
	Index = GetSpeechIndex(XLevel.LevelSpeeches, XLevel.NumLevelSpeeches,
		ConversationID, CurrentSpeech);
	if (Index)
	{
		return Index;
	}
	return -GetSpeechIndex(XLevel.GenericSpeeches, XLevel.NumGenericSpeeches,
		ConversationID, CurrentSpeech);
}

//==========================================================================
//
//	ClientTick
//
//==========================================================================

void ClientTick(float DeltaTime)
{
	dlight_t* dl;
	TVec fv;

	switch (Effects & StrifeDefs::EF_DLIGHT_MASK)
	{
	case StrifeDefs::EF_DL_NONE:
		break;

	case StrifeDefs::EF_DL_MISSILE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 255, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case StrifeDefs::EF_DL_RED:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 0, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case StrifeDefs::EF_DL_GREEN:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 255, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case StrifeDefs::EF_DL_BLUE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 0, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case StrifeDefs::EF_DL_MUZZLEFLASH:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->origin.z += 48.0;
		AngleVector(&Angles, &fv);

		dl->origin = dl->origin + 18.0 * fv;
		dl->radius = 200.0 + Random() * 31.0;
		dl->colour = 0xffffffff;
		dl->minlight = 32.0;
		dl->die = XLevel.Time + 0.1;
	}
}

__states__
{
	S_ZAP1_1('ZAP1', 1, 3.0 / 35.0, S_ZAP1_2) = A_Explode32
	S_ZAP1_0('ZAP1', 0, 3.0 / 35.0, S_ZAP1_2) = A_AlertMonsters
	S_ZAP1_2('ZAP1', 1, 3.0 / 35.0, S_ZAP1_3) = none
	S_ZAP1_3('ZAP1', 2, 3.0 / 35.0, S_ZAP1_4) = none
	S_ZAP1_4('ZAP1', 3, 3.0 / 35.0, S_ZAP1_5) = none
	S_ZAP1_5('ZAP1', 4, 3.0 / 35.0, S_ZAP1_6) = none
	S_ZAP1_6('ZAP1', 5, 3.0 / 35.0, S_ZAP1_7) = none
	S_ZAP1_7('ZAP1', 4, 3.0 / 35.0, S_ZAP1_8) = none
	S_ZAP1_8('ZAP1', 3, 2.0 / 35.0, S_ZAP1_9) = none
	S_ZAP1_9('ZAP1', 2, 2.0 / 35.0, S_ZAP1_10) = none
	S_ZAP1_10('ZAP1', 1, 2.0 / 35.0, S_ZAP1_11) = none
	S_ZAP1_11('ZAP1', 0, 1.0 / 35.0, none) = none

	S_BLOOD1('BLOD', 2, 8.0 / 35.0, S_BLOOD2) = none
	S_BLOOD2('BLOD', 1, 8.0 / 35.0, S_BLOOD3) = none
	S_BLOOD3('BLOD', 0, 8.0 / 35.0, none) = none

	S_SHARD_1('SHRD', 0, 128.0 / 35.0, none) = none
	S_SHARD_2('SHRD', 1, 128.0 / 35.0, none) = none
	S_SHARD_3('SHRD', 2, 128.0 / 35.0, none) = none
	S_SHARD_4('SHRD', 3, 128.0 / 35.0, none) = none
	S_SHARD_5('SHRD', 4, 128.0 / 35.0, none) = none
	S_SHARD_6('SHRD', 5, 128.0 / 35.0, none) = none

	S_MINI_MISSILE2_1('MICR', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_MINI_MISSILE2_2) = A_Tracer
	S_MINI_MISSILE2_2('MICR', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_MINI_MISSILE2_1) = A_Tracer

	S_TOKENS('TOKN', 0, -1.0, none) = none

	S_GIBS('DIE1', 0, -1.0, none) = none

	S_ANKH('ANKH', 0, -1.0, none) = none
}

defaultproperties
{
	Health = 1000;
	GibsHealth = -1000;
	ReactionCount = 8;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	MaxStepHeight = 16.0;
	MaxDropoffHeight = 32.0;
	LightOffset = vector(0.0, 0.0, 0.0);
	LightColour = 0xffffffff;
	LightRadius = 128.0;
	FloatSpeed = 175.0;
}
