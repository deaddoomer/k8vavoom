//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : ScriptedEntity
	abstract;

const float
	MAULERRANGE		= (33.0 * 64.0),
	ROBOTRANGE		= 264.0;

bool bSpawnFlag8;
bool bSpawnFlag9;

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(EntityEx source)
{
	// Check for frag changes
	if (bIsPlayer)
	{
		if (source == self)
		{
			Player.Frags--;
		}
		else
		{
			source.Player.Frags++;
		}
	}
}

//==========================================================================
//
//	PlayerKilled
//
//==========================================================================

void PlayerKilled(EntityEx source, EntityEx inflictor)
{
	// Count environment kills against you
	if (!source)
	{
		Player.Frags--;
	}
}

//==========================================================================
//
//  AutoUseHealth
//
//==========================================================================

void AutoUseHealth(int saveHealth)
{
	int i;

	Inventory Item = FindInventory(MedicalKit);
	if (Item && Item.Amount * 25 >= saveHealth)
	{
		// Use medical kits
		i = (saveHealth + 24) / 25;
		while (i--)
		{
			Health += 25;
			saveHealth -= 25;
			if (!(--Item.Amount))
			{
				Item.Destroy();
			}
			PlaySound('misc/invuse', CHAN_BODY);
		}
	}
	
	Item = FindInventory(MedPatch);
	if (saveHealth > 0 && Item && Item.Amount * 10 >= saveHealth)
	{
		i = (saveHealth + 9) / 10;
		while (i--)
		{
			Health += 10;
			if (!(--Item.Amount))
			{
				Item.Destroy();
			}
			PlaySound('misc/invuse', CHAN_BODY);
		}
	}
	Player.Health = Health;
}

//==========================================================================
//
//  AutoUseArmor
//
//==========================================================================

void AutoUseArmor()
{
	Inventory Item = FindInventory(MetalArmor);
	if (Item)
	{
		// Use metal armor
		Item.Use(false);
		if (!(--Item.Amount))
		{
			Item.Destroy();
		}
	}
	else
	{
		Item = FindInventory(LeatherArmor);
		if (Item)
		{
			// Use leather armor
			Item.Use(false);
			if (!(--Item.Amount))
			{
				Item.Destroy();
			}
		}
	}
}

//==========================================================================
//
//  OkayToSwitchTarget
//
//==========================================================================

bool OkayToSwitchTarget(EntityEx source)
{
	return ::OkayToSwitchTarget(source) &&
		(Level.Game.deathmatch || Actor(source).bFriendly != bFriendly);
}

//==========================================================================
//
//  TakeSpecialDamage
//
//==========================================================================

int TakeSpecialDamage(EntityEx inflictor, EntityEx source, int damage,
	name DmgType)
{
	if (inflictor && inflictor.bNoExtremeDeath && bNoBlood)
	{
		// Don't damage actors that don't take poison damage
		return -1;
	}
	return ::TakeSpecialDamage(inflictor, source, damage, DmgType);
}

//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================

int GetSigilPieces()
{
	Sigil S = Sigil(FindInventory(Sigil));
	if (S)
	{
		return S.NumPieces;
	}
	return 0;
}

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return Player::VIEWHEIGHT;
}

//==========================================================================
//
//	A_Tracer
//
//==========================================================================

const float TRACEANGLE	= (7.0 * 45.0 / 16.0);

final void A_Tracer()
{
	Actor dest;
	float exact;
	float dist;
	float slope;

	dest = Actor(Tracer);

	if (!dest || dest.Health <= 0)
		return;

	// change angle
	exact = atan2(dest.Origin.y - Origin.y, dest.Origin.x - Origin.x);

	if (exact != Angles.yaw)
	{
		if (AngleMod360(exact - Angles.yaw) > 180.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - TRACEANGLE);
			if (AngleMod360(exact - Angles.yaw) < 180.0)
				Angles.yaw = exact;
		}
		else
		{
			Angles.yaw = AngleMod360(Angles.yaw + TRACEANGLE);
			if (AngleMod360(exact - Angles.yaw) > 180.0)
				Angles.yaw = exact;
		}
	}

	exact = Angles.yaw;
	Velocity.x = Speed * cos(exact);
	Velocity.y = Speed * sin(exact);

	// change slope
	dist = DistTo2(dest);
	dist /= Speed;

	if (dist < 1.0)
	{
		dist = 1.0;
	}
	slope = (dest.Origin.z + 40.0 - Origin.z) / dist;
	if (slope < Velocity.z)
	{
		Velocity.z -= 1.0 / 8.0 * 35.0;
	}
	else
	{
		Velocity.z += 1.0 / 8.0 * 35.0;
	}
}

//==========================================================================
//
//	A_SpawnPuff
//
//==========================================================================

final void A_SpawnPuff()
{
	Actor A;

	if (MiniMissile(self))
	{
		PlaySound('misc/missileinflight', CHAN_VOICE);
		SpawnPuff(Origin, MISSILERANGE, StrifePuff, false);
		A = Spawn(RocketTrail, Origin - Velocity / 35.0);
		if (A)
		{
			A.Velocity.z = 1.0 * 35.0;
		}
	}
	else
	{
		A = Spawn(Bang4Cloud, Origin + vector(
			(Random() - Random()) * 5.0 / 8.0,
			(Random() - Random()) * 5.0 / 8.0, 0.0));
	}
}

//==========================================================================
//
//	A_XDying
//
//==========================================================================

final void A_XDying()
{
	Actor gib;
	float an;
	float speed;
	class<Actor> tp;

	if (bNoBlood)
		tp = Junk;
	else
		tp = Meat;
	gib = Spawn(tp, Origin + vector(0.0, 0.0, 24.0));
	if (!gib)
	{
		return;
	}

	an = Random() * 360.0;
	gib.Angles.yaw = an;
	speed = Random() * 16.0 * 35.0;
	gib.Velocity.x = speed * cos(an);
	gib.Velocity.y = speed * sin(an);
	gib.Velocity.z = Random() * 16.0 * 35.0;
}

//==========================================================================
//
//	A_DecReactionCount
//
//==========================================================================

final void A_DecReactionCount()
{
	if (--ReactionCount <= 0)
	{
		ExplodeMissile();
		bSkullFly = false;
	}
}

//==========================================================================
//
//	A_AlertMonsters
//
//==========================================================================

final void A_AlertMonsters()
{
	if (Target && Target.bIsPlayer)
	{
		StrifeLevelInfo(Level).NoiseAlert(Target, self);
	}
}

//==========================================================================
//
//	A_CheckAlarm
//
//	Stay in state untill alarm is triggered.
//
//==========================================================================

final void A_CheckAlarm()
{
	Actor targ;
	int sound;

	Threshold = 0;
	targ = Actor(Sector->SoundTarget);
	if (targ && targ.bShootable)
	{
		Target = targ;
		// go into chase state
		if (SightSound)
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
		Threshold = 10;
		SetState(SeeState);
	}
}

//==========================================================================
//
//	A_QuestObjectDeath
//
//==========================================================================

final void A_QuestObjectDeath()
{
	// This function does a lot more than just this
	if (DeathSound)
	{
		PlaySound(DeathSound, CHAN_VOICE);
		PlaySound(DeathSound, 6);
	}

	//	Give quest item for destroying important object.
	//	Basicly all object using this function does this.
	int QuestType = ftoi(Speed);
	class<QuestItem> QClass = class<QuestItem>(FindClass(
		StrToName(va("QuestItem%d", QuestType))));
	if (QClass)
	{
		EntityEx(Level.Game.Players[0].MO).GiveInventoryType(QClass);
		Level.Game.Players[0].cprint(va("$txt_quest_%d", QuestType));
	}
}

states
{
Crunch:
	DIE1 A -1
	Stop
}

defaultproperties
{
	MaxDropoffHeight = 32.0;
	FloatSpeed = 175.0;
}
