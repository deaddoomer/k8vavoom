//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PlayerPawn : Actor
	abstract;

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return Player::VIEWHEIGHT;
}

//==========================================================================
//
//	ShouldDropItems
//
//==========================================================================

bool ShouldDropItems()
{
	return false;
}

//===========================================================================
//
//  GetSigilPieces
//
//===========================================================================

int GetSigilPieces()
{
	Sigil S = Sigil(FindInventory(Sigil));
	if (S)
	{
		return S.NumPieces;
	}
	return 0;
}

//==========================================================================
//
//	AddInventory
//
//==========================================================================

void AddInventory(Inventory Item)
{
	::AddInventory(Item);
	if (bIsPlayer && Item.bInvBar && !Player(Player).InvPtr)
	{
		Player(Player).InvPtr = Item;
		Player(Player).InvFirst = Item;
	}
}

//==========================================================================
//
//	RemoveInventory
//
//==========================================================================

void RemoveInventory(Inventory Item)
{
	if (bIsPlayer)
	{
		if (Item == Player(Player).InvPtr)
		{
			Player(Player).InvPtr = Item.NextInv();
			if (!Player(Player).InvPtr)
			{
				Player(Player).InvPtr = Item.PrevInv();
			}
		}
		if (Item == Player(Player).InvFirst)
		{
			Player(Player).InvFirst = Item.NextInv();
			if (!Player(Player).InvFirst)
			{
				Player(Player).InvFirst = Item.PrevInv();
			}
		}
	}
	::RemoveInventory(Item);
	if (bIsPlayer && Item.bInvBar)
	{
		Player(Player).AdjustInvFirst();
	}
}

//==========================================================================
//
//	InvUse
//
//==========================================================================

bool UseInventory(Inventory Item)
{
	//	Can't use anything while totally frozen
	if (Player(Player).bTotallyFrozen)
	{
		return false;
	}
	if (!::UseInventory(Item))
	{
		return false;
	}
	PlaySound(Item.UseSound, CHAN_BODY);
	return true;
}

defaultproperties
{
	ReactionCount = 0;
	bSolid = true;
	bShootable = true;
	bActivatePushWall = true;
	bFloorClip = true;
	bPassMobj = true;
	bWindThrust = true;
	bSlide = true;
	bTelestomp = true;
	bNoBlockMonst = true;
	bPickUp = true;
}
