//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PlayerPawn : Pawn
	abstract;

struct InitInvInfo
{
	class<Inventory>	Type;
	int					Amount;
};

array<InitInvInfo>		InitialInventory;

//==========================================================================
//
//	AddInventory
//
//==========================================================================

void AddInventory(Inventory Item)
{
	::AddInventory(Item);
	if (Item.bInvBar)
	{
		Player(Player).Inventory[InventoryItem(Item).ItemType] =
			InventoryItem(Item);
		if (!Player(Player).InvCursor)
		{
			Player(Player).InvCursor = Item;
			Player(Player).InvFirst = Item;
		}
	}
}

//==========================================================================
//
//	RemoveInventory
//
//==========================================================================

void RemoveInventory(Inventory Item)
{
	if (Item == Player(Player).InvCursor)
	{
		Player(Player).InvCursor = Item.NextInv();
		if (!Player(Player).InvCursor)
		{
			Player(Player).InvCursor = Item.PrevInv();
		}
	}
	if (Item == Player(Player).InvFirst)
	{
		Player(Player).InvFirst = Item.NextInv();
		if (!Player(Player).InvFirst)
		{
			Player(Player).InvFirst = Item.PrevInv();
		}
	}
	::RemoveInventory(Item);
	if (Item.bInvBar)
	{
		Player(Player).AdjustInvFirst();
	}
}

//==========================================================================
//
//  A_PlayerScream
//
//  Player death sound
//
//==========================================================================

final void A_PlayerScream()
{
	// Default death sound.
	name sound = '*death';

	if (Health < -50)
	{
		// IF THE PLAYER DIES
		// LESS THAN -50% WITHOUT GIBBING
		sound = '*xdeath';
	}

	PlaySound(sound, CHAN_VOICE);
}

defaultproperties
{
	ReactionCount = 0;
	bCountKill = false;
	bMonster = false;
	bActivateMCross = false;
	bWindThrust = true;
	bSlide = true;
	bTelestomp = true;
	bNoBlockMonst = true;
	bPickUp = true;
}
