//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
// 201

class PowerCrystal : Decoration
	__mobjinfo__(92);

//==========================================================================
//
//	A_Unknown112
//
//==========================================================================

void A_Unknown112()
{
	int i;

	RadiusAttack(512, 512, true);
	if (Enemy && Enemy.bIsPlayer)
	{
		Enemy.Player.ExtraLight = 5;
	}
}

//==========================================================================
//
//	A_LightGoesOut
//
//==========================================================================

void A_LightGoesOut()
{
	int i;
	Actor foo;

	Sector->params.lightlevel = 0;
	Sector->floor.dist = Level.FindLowestFloorSurrounding(Sector, NULL);
	for (i = 0; i < 8; i++)
	{
		foo = Spawn(Rub1, Origin);
		if (foo)
		{
			foo.Velocity.x = (Random() * 16.0 - Random() * 8.0) * 35.0;
			foo.Velocity.y = (Random() - Random()) * 8.0 * 35.0;
			foo.Velocity.z = (7.0 + Random() * 4.0) * 35.0;
		}
	}
}

//==========================================================================
//
//	A_Unknown114
//
//==========================================================================

void A_Unknown114()
{
	if (Enemy && Enemy.bIsPlayer)
	{
		Enemy.Player.ExtraLight = 0;
	}
}

__states__
{
	S_CRYSTAL_1('CRYS', 0, 16.0 / 35.0, S_CRYSTAL_2) { A_ActiveSound(); }
	S_CRYSTAL_2('CRYS', 1, 5.0 / 35.0, S_CRYSTAL_3) { A_ActiveSound(); }
	S_CRYSTAL_3('CRYS', 2, 4.0 / 35.0, S_CRYSTAL_4) { A_ActiveSound(); }
	S_CRYSTAL_4('CRYS', 3, 4.0 / 35.0, S_CRYSTAL_5) { A_ActiveSound(); }
	S_CRYSTAL_5('CRYS', 4, 4.0 / 35.0, S_CRYSTAL_6) { A_ActiveSound(); }
	S_CRYSTAL_6('CRYS', 5, 4.0 / 35.0, S_CRYSTAL_1) { A_ActiveSound(); }
	S_CRYSTAL_X1('BOOM', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_CRYSTAL_X2) { A_Unknown112(); }
	S_CRYSTAL_X2('BOOM', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X3) { A_QuestObjectDeath(); }
	S_CRYSTAL_X3('BOOM', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_CRYSTAL_X4) { A_LightGoesOut(); }
	S_CRYSTAL_X4('BOOM', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X5) { A_SpawnPuff(); }
	S_CRYSTAL_X5('BOOM', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X6) { }
	S_CRYSTAL_X6('BOOM', 5 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X7) { }
	S_CRYSTAL_X7('BOOM', 6 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X8) { A_SpawnPuff(); }
	S_CRYSTAL_X8('BOOM', 7 | FF_FULLBRIGHT, 1.0 / 35.0, S_CRYSTAL_X9) { A_Unknown112(); }
	S_CRYSTAL_X9('BOOM', 8 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X10) { }
	S_CRYSTAL_X10('BOOM', 9 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X11) { A_SpawnPuff(); }
	S_CRYSTAL_X11('BOOM', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X12) { A_SpawnPuff(); }
	S_CRYSTAL_X12('BOOM', 11 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X13) { A_SpawnPuff(); }
	S_CRYSTAL_X13('BOOM', 12 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X14) { }
	S_CRYSTAL_X14('BOOM', 13 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X15) { }
	S_CRYSTAL_X15('BOOM', 14 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X16) { A_SpawnPuff(); }
	S_CRYSTAL_X16('BOOM', 15 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X17) { }
	S_CRYSTAL_X17('BOOM', 16 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X18) { }
	S_CRYSTAL_X18('BOOM', 17 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X19) { }
	S_CRYSTAL_X19('BOOM', 18 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X20) { }
	S_CRYSTAL_X20('BOOM', 19 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X21) { }
	S_CRYSTAL_X21('BOOM', 20 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X22) { A_Unknown114(); }
	S_CRYSTAL_X22('BOOM', 21 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X23) { }
	S_CRYSTAL_X23('BOOM', 22 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X24) { }
	S_CRYSTAL_X24('BOOM', 23 | FF_FULLBRIGHT, 3.0 / 35.0, S_CRYSTAL_X25) { }
	S_CRYSTAL_X25('BOOM', 24 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Health = 50;
	Mass = 99999999.0;
	bSolid = true;
	bShootable = true;
	bNoGravity = true;
	bNoBlood = true;
	IdleState = S_CRYSTAL_1;
	DeathState = S_CRYSTAL_X1;
	ActiveSound = 'misc/reactor';
	DeathSound = 'misc/explosion';
	bGiveQuest = true;
	QuestID = QUEST_BlownUpCrystal;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2006/02/05 18:50:55  dj_jl
//  Moved common utils to level info class or built-in.
//
//  Revision 1.7  2005/11/19 13:43:51  dj_jl
//  Renamed sounds.
//
//  Revision 1.6  2005/01/25 17:45:17  dj_jl
//  Constants for common line specials
//  Updated special utilites.
//
//  Revision 1.5  2004/10/18 06:35:21  dj_jl
//  Implemented many monsters, sigil and some more.
//
//  Revision 1.4  2004/10/13 06:36:30  dj_jl
//  Implemented items also giving quests.
//
//  Revision 1.3  2004/10/12 06:39:07  dj_jl
//  Various improvements.
//
//  Revision 1.2  2004/02/04 07:32:58  dj_jl
//  Implemented many action functions
//
//  Revision 1.1  2002/11/02 08:20:56  dj_jl
//  New style classes.
//
//**************************************************************************
