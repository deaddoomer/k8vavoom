//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponPickup : Inventory
	abstract;

int WeaponType;
int Weapon2Type;
int Ammo1Count;
int Ammo2Count;

//==========================================================================
//
//  GiveWeapon
//
//  The weapon name may have a MF_DROPPED flag ored in.
//
//==========================================================================

bool GiveWeapon(EntityEx Toucher)
{
	class<Ammo> AmmoType;
	class<Ammo> Ammo2Type;
	bool gaveammo;
	bool gaveammo2;
	bool gaveweapon;

	AmmoType = MainGameInfo(Level.Game).WeaponClasses[WeaponType].default.AmmoType;
	Ammo2Type = none;
	if (Weapon2Type != -1)
	{
		Ammo2Type = MainGameInfo(Level.Game).WeaponClasses[Weapon2Type].default.AmmoType;
	}

	if (AmmoType)
	{
		// give one clip with a dropped weapon,
		// two clips with a found weapon
		if (ShouldStay() && !bDropped && Level.Game.deathmatch)
			gaveammo = Player(Toucher.Player).GiveAmmo(AmmoType, Ammo1Count * 2);
		else if (bDropped)
			gaveammo = Player(Toucher.Player).GiveAmmo(AmmoType, Ammo1Count / 2);
		else
			gaveammo = Player(Toucher.Player).GiveAmmo(AmmoType, Ammo1Count);
	}
	else
	{
		gaveammo = false;
	}

	if (Weapon2Type != -1 && Ammo2Type && AmmoType != Ammo2Type && Ammo2Count)
	{
		// give one clip with a dropped weapon,
		// two clips with a found weapon
		if (ShouldStay() && !bDropped && Level.Game.deathmatch)
			gaveammo2 = Player(Toucher.Player).GiveAmmo(Ammo2Type, Ammo2Count * 2);
		else if (bDropped)
			gaveammo2 = Player(Toucher.Player).GiveAmmo(Ammo2Type, Ammo2Count / 2);
		else
			gaveammo2 = Player(Toucher.Player).GiveAmmo(Ammo2Type, Ammo2Count);
	}
	else
	{
		gaveammo2 = false;
	}

	if (Player(Toucher.Player).WeaponOwned[WeaponType])
	{
		gaveweapon = false;
	}
	else
	{
		gaveweapon = true;
		Player(Toucher.Player).WeaponOwned[WeaponType] = true;
		if (Weapon2Type != -1)
			Player(Toucher.Player).WeaponOwned[Weapon2Type] = true;
		Player(Toucher.Player).PendingWeapon = WeaponType;
	}

	return (gaveweapon || gaveammo || gaveammo2);
}

//==========================================================================
//
//	TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	// leave placed weapons forever on net games
	if (ShouldStay() && !bDropped && Player(Toucher.Player).WeaponOwned[WeaponType])
	{
		return false;
	}

	if (GiveWeapon(Toucher))
	{
		GoAwayAndDie();
		GiveQuest(Toucher);
		return true;
	}
	return false;
}

//==========================================================================
//
//	ShouldStay
//
//==========================================================================

bool ShouldStay()
{
	return Level.Game.netgame && Level.Game.deathmatch < 2;
}

defaultproperties
{
	bFloorClip = true;
	PickupSound = 'misc/w_pkup';
	Weapon2Type = -1;
}
