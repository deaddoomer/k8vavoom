//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Pickup : Inventory
	abstract;

bool bDropAutoGive;
bool bGiveQuest;
name PickupSound;
string PickupString;
int QuestID;

bool bUnknown2;			//8000000

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	//  In my deathmatch mode remove dropped weapons after 30 seconds
	// because otherwise they are spawned fastar than player(s) can pick 
	// them up and the game is going slower and slower and slower ...
	if (bDropped && (Level.Game.deathmatch == 3))
	{
		MoveCount++;
		if (MoveCount >= 30 * 35)
		{
			Destroy();
			return;
		}
	}

	if (!Physics(deltaTime))
	{
		return;
	}

	// cycle through states,
	// calling action functions at transitions
	if (StateTime != -1.0)
	{
		if (!AdvanceState(deltaTime))
			return;	// freed itself
	}
	else
	{
		// check for nightmare respawn
		if (!bMonster)
			return;

		if (!MainGameInfo(Level.Game).respawnmonsters)
			return;

		MoveCount++;

		if (MoveCount < 12 * 35)
			return;

		if (XLevel.TicTime & 31)
			return;

		if (P_Random() > 4)
			return;

		NightmareRespawn();
	}
}

//==========================================================================
//
//	SectorChanged
//
//==========================================================================

bool SectorChanged(int CrushChange)
{
	Actor A;

	if (HeightClip())
	{
		return true;
	}

	//	Crunch dropped items
	if (bDropped)
	{
		Destroy();
		return true;
	}

	if (!bShootable)
	{
		//	Assume it is bloody gibs or something
		return true;
	}

	if (CrushChange && !(XLevel.TicTime & 3))
	{
		Damage(none, none, CrushChange);

		// spray blood in a random direction
		A = Spawn(Blood, Origin + vector(0.0, 0.0, Height / 2.0));
		A.Velocity.x = (Random() - Random()) * 16.0 * 35.0;
		A.Velocity.y = (Random() - Random()) * 16.0 * 35.0;
	}
	return false;	//don't fit
}

//==========================================================================
//
//	ClientTick
//
//==========================================================================

void ClientTick(float DeltaTime)
{
	dlight_t* dl;
	TVec fv;

	switch (Effects & EF_DLIGHT_MASK)
	{
	case EF_DL_NONE:
		break;

	case EF_DL_WHITE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 255, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case EF_DL_RED:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 0, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case EF_DL_GREEN:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 255, 0);
		dl->die = XLevel.Time + 0.1;
		break;

	case EF_DL_BLUE:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 0, 255);
		dl->die = XLevel.Time + 0.1;
		break;

	case EF_DL_MUZZLEFLASH:
		dl = AllocDlight(self);
		dl->origin = Origin;
		dl->origin.z += 48.0;
		AngleVector(&Angles, &fv);

		dl->origin = dl->origin + 18.0 * fv;
		dl->radius = 200.0 + Random() * 31.0;
		dl->colour = 0xffffffff;
		dl->minlight = 32.0;
		dl->die = XLevel.Time + 0.1;
	}
}

__states__
{
	S_TOKENS('TOKN', 0, -1.0, none) = none
}

//==========================================================================
//
//	ValidTouch
//
//==========================================================================

bool ValidTouch(EntityEx Toucher)
{
	if (!Toucher.bIsPlayer)
	{
		// can't remove thing
		return false;
	}
	// Dead thing touching.
	// Can happen with a sliding player corpse.
	if (Toucher.Health <= 0)
	{
		return false;
	}

	return true;
}

//==========================================================================
//
//	HandlePickup
//
//==========================================================================

bool HandlePickup(Actor Toucher)
{
	Toucher.Player.cprint("Unimplemented pickup %n", ClassName);
	return true;
}

//==========================================================================
//
//	HideSpecial
//
//==========================================================================

void HideSpecial()
{
	// only respawn items in deathmatch
	if (Level.Game.deathmatch && !bDropped)
	{
		SetState(S_DORMANT_PICKUP1);
	}
	else
	{
		Destroy();
	}
}

//==========================================================================
//
//	TouchSpecial
//
//==========================================================================

void TouchSpecial(EntityEx Toucher)
{
	if (!ValidTouch(Toucher))
	{
		// can't remove thing
		return;
	}

	if (!HandlePickup(Actor(Toucher)))
	{
		return;
	}

	if (bGiveQuest)
	{
		Player(Toucher.Player).GiveQuest(QuestID);
	}

	Toucher.Player.cprint(PickupString);
	if (Special)
	{
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2], Args[3],
			Args[4], NULL, 0, Toucher);
		Special = 0;
	}
	HideSpecial();
	Player(Toucher.Player).BonusFlash += Player::BONUSADD;
	Toucher.PlaySound(PickupSound, CHAN_ITEM);
}

//==========================================================================
//
//	GiveItemTo
//
//	Used by conversation scripts.
//
//==========================================================================

bool GiveItemTo(EntityEx Toucher)
{
	if (!HandlePickup(Actor(Toucher)))
	{
		return false;
	}

	if (bGiveQuest)
	{
		Player(Toucher.Player).GiveQuest(QuestID);
	}
	return true;
}

__states__
{
	S_DORMANT_PICKUP1('', 0, 30.0, S_DORMANT_PICKUP2)
	{
		bHidden = true;
		bSpecial = false;
	}
	S_DORMANT_PICKUP2('', 0, -1.0, none)
	{
		EntityEx A;

		bHidden = false;
		bSpecial = true;
		SetState(IdleState);

		// spawn a teleport fog at the new spot
		A = Spawn(ItemFog, Origin);
		A.PlaySound('misc/spawn', CHAN_ITEM);
	}
}

//==========================================================================
//
//	NoBlockingSet
//
//==========================================================================

bool ItemSpecialDropAction(EntityEx Source)
{
	if (bDropAutoGive)
	{
		HandlePickup(Actor(Source));
		Destroy();
		return true;
	}
	return false;
}

//==========================================================================
//
//	A_RemoveForceField
//
//==========================================================================

final void A_RemoveForceField()
{
	int i;
	line_t* line;

	bSpecial = false;
	for (i = 0; i < Sector->linecount; i++)
	{
		line = Sector->lines[i];
		if (line->backsector && line->special == LNSPEC_ForceField)
		{
			line->flags &= ~(ML_BLOCKING|ML_BLOCKEVERYTHING);
			line->special = 0;
			XLevel.Sides[line->sidenum[0]].midtexture = 0;
			XLevel.Sides[line->sidenum[1]].midtexture = 0;
		}
	}
}

//==========================================================================
//
//	A_Explode192
//
//==========================================================================

final void A_Explode192()
{
	RadiusAttack(Target, 192, 192.0, false);
	if (DeathSound)
		PlaySound(DeathSound, CHAN_VOICE);

	if (ExplodeEffect)
	{
		SendExplosion(ExplodeEffect, Origin);
	}
}

//==========================================================================
//
//  SendExplosion
//
//==========================================================================

final void SendExplosion(int etype, TVec org)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientExplosion(etype, org);
	}
}

//==========================================================================
//
//	A_SetShadow
//
//==========================================================================

final void A_SetShadow()
{
	bUnknown2 = true;
	Alpha = 0.333;
}

//==========================================================================
//
//	A_ClearShadow
//
//==========================================================================

final void A_ClearShadow()
{
	bUnknown2 = false;
	Alpha = 1.0;
}

//==========================================================================
//
//	A_BeShadowyFoe
//
//==========================================================================

final void A_BeShadowyFoe()
{
	Alpha = 0.333;
	bFriendly = false;
}

defaultproperties
{
	bSpecial = true;
	bFloorClip = true;
	bNoPassMobj = true;
	PickupSound = 'misc/i_pkup';
	PickupString = "Item";
}
