//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Weapon : ViewEntity;

const float
	MELEERANGE		= 64.0,
	PUNCHRANGE		= 80.0,
	MISSILERANGE	= (32.0 * 64.0),
	MAULERRANGE		= (33.0 * 64.0),
	ROBOTRANGE		= 264.0;

const float LOWERSPEED		= 6.0;
const float RAISESPEED		= 6.0;

const float WEAPONBOTTOM	= 128.0;
const float WEAPONTOP		= 32.0;

int Ammo;
state UpState;
state DownState;
state ReadyState;
state AttackState;
state HoldAttackState;
state FlashState;
state FireDeathWaveState;

bool bRaiseNoiseAlert;

//===========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
// Follows after getting weapon up, or after previous attack/fire sequence.
//
//===========================================================================

void A_WeaponReady()
{
	float angle;

	// get out of attack state
	if (Player.MO.State == Actor(Player.MO).MeleeState ||
		Player.MO.State == Actor(Player.MO).MissileState)
	{
		Player.MO.SetState(Actor(Player.MO).IdleState);
	}

	if (Player(Player).ReadyWeapon == StrifeDefs::wp_flame &&
		Player.ViewStates[ps_weapon].State == ReadyState)
	{
		Player.MO.PlaySound('weapons/flameidle', CHAN_WEAPON);
	}

	// check for change
	//  if player is dead, put the weapon away
	if (Player(Player).PendingWeapon != StrifeDefs::wp_nochange || !Player.Health)
	{
		// change weapon
		//  (pending weapon should allready be validated)
		Player.SetViewState(ps_weapon, DownState);
		return;
	}

	// check for fire
	//  the missile launcher and bfg do not auto fire
	if (Player.Buttons & BT_ATTACK)
	{
		if (!Player.bAttackDown || (Player(Player).ReadyWeapon != StrifeDefs::wp_missile))
		{
			Player.bAttackDown = true;
			Player(Player).FireWeapon();
			return;
		}
	}
	else
		Player.bAttackDown = false;

	// bob the weapon based on movement speed
	angle = AngleMod360(180.0 * Player.Level.Game.level->time);
	Player.ViewStates[ps_weapon].SX = 1.0 + Player(Player).Bob * cos(angle);
	if (angle >= 180.0)
	{
		angle -= 180.0;
	}
	Player.ViewStates[ps_weapon].SY = WEAPONTOP + Player(Player).Bob * sin(angle);
}

//===========================================================================
//
//  A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//===========================================================================

void A_Lower()
{
	//	FIXME!!
	if (Player.Level.Game.frametime < 1.0 / 35.0)
		Player.ViewStates[ps_weapon].SY += LOWERSPEED;
	else
		Player.ViewStates[ps_weapon].SY += LOWERSPEED * 35.0 * Player.Level.Game.frametime;

	// Is already down.
	if (Player.ViewStates[ps_weapon].SY < WEAPONBOTTOM)
		return;

	// Player is dead.
	if (Player.PlayerState == PST_DEAD)
	{
		Player.ViewStates[ps_weapon].SY = WEAPONBOTTOM;

		// don't bring weapon back up
		return;
	}

	Player.SetViewState(ps_flash, none);

	// The old weapon has been lowered off the screen,
	// so change the weapon and start raising it
	if (!Player.Health)
	{
		// Player is dead, so keep the weapon off screen.
		Player.SetViewState(ps_weapon, none);
		return;
	}

	Player(Player).SetWeapon(Player(Player).PendingWeapon);

	Player(Player).BringUpWeapon();
}

//===========================================================================
//
//  A_Raise
//
//===========================================================================

void A_Raise()
{
	//	FIXME!!
	if (Player.Level.Game.frametime < 1.0 / 35.0)
		Player.ViewStates[ps_weapon].SY -= RAISESPEED;
	else
		Player.ViewStates[ps_weapon].SY -= RAISESPEED * 35.0 * Player.Level.Game.frametime;

	if (Player.ViewStates[ps_weapon].SY > WEAPONTOP)
	{
		return;
	}

	Player.ViewStates[ps_weapon].SY = WEAPONTOP;

	// The weapon has been raised all the way,
	//  so change to the ready state.
	Player.SetViewState(ps_weapon, ReadyState);
}

//===========================================================================
//
//  A_ReFire
//
//  The player can re-fire the weapon without lowering it entirely.
//
//===========================================================================

void A_ReFire()
{
	// check for fire
	//  (if a weaponchange is pending, let it go through instead)
	if ((Player.Buttons & BT_ATTACK)
		&& Player(Player).PendingWeapon == StrifeDefs::wp_nochange && Player.Health)
	{
		Player(Player).Refire++;
		Player(Player).FireWeapon();
	}
	else
	{
		Player(Player).Refire = 0;
		Player(Player).CheckAmmo();
	}
}

//===========================================================================
//
//  A_CheckReload
//
//===========================================================================

void A_CheckReload()
{
	Player(Player).CheckAmmo();
}

//===========================================================================
//
//  A_GunFlash
//
//===========================================================================

void A_GunFlash()
{
	Player.MO.SetState(Actor(Player.MO).MissileState);
	Player.SetViewState(ps_flash, FlashState);
}

//===========================================================================
//
//  A_Light0
//
//===========================================================================

void A_Light0()
{
	Player.ExtraLight = 0;
	Player.MO.Effects &= ~StrifeDefs::EF_DLIGHT_MASK;
}

//===========================================================================
//
//  A_Light1
//
//===========================================================================

void A_Light1()
{
	Player.ExtraLight = 1;
}

//===========================================================================
//
//  A_Light2
//
//===========================================================================

void A_Light2()
{
	Player.ExtraLight = 2;
}

//==========================================================================
//
//	A_ClearFlash
//
//==========================================================================

void A_ClearFlash()
{
	Player.SetViewState(ps_flash, none);
}

__states__
{
	S_LIGHTDONE('', 0, 0.0 / 35.0, none) { A_Light0(); }
	S_WAVE1('WAVE', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_WAVE2) { }
	S_WAVE2('WAVE', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_WAVE3) { }
	S_WAVE3('WAVE', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_WAVE4) { }
	S_WAVE4('WAVE', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_WAVE1) { }
	S_RBPY_1('RBPY', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_RBPY_2) { }
	S_RBPY_2('RBPY', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_RBPY_3) { }
	S_RBPY_3('RBPY', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_RBPY_4) { }
	S_RBPY_4('RBPY', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_RBPY_1) { }
	S_TARGETER1('TRGT', 0, -1.0, none) { }
	S_TARGETER2('TRGT', 1, -1.0, none) { }
	S_TARGETER3('TRGT', 2, -1.0, none) { }
}

defaultproperties
{
	bRaiseNoiseAlert = true;
	FireDeathWaveState = S_WAVE1;
}
