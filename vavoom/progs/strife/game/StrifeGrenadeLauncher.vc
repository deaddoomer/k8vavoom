//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StrifeGrenadeLauncher : StrifeWeapon
	__mobjinfo__(154);

//==========================================================================
//
//	A_FireGrenade
//
//==========================================================================

final void A_FireGrenade()
{
	class<Projectile> grenadetype;
	EntityEx grenade;
	float an;
	float tworadii;

	if (Class == StrifeGrenadeLauncher)
	{
		grenadetype = HEGrenade;
	}
	else
	{
		grenadetype = PhosphorousGrenade;
	}
	if (!DepleteAmmo())
		return;

	// Make it flash
	if (Owner.Player.ViewStates[ps_weapon].State == GetAttackState(false))
		Owner.Player.SetViewState(ps_flash, FindState('Flash'));
	else
		Owner.Player.SetViewState(ps_flash, FindState('Flash2'));

	Owner.Origin.z += 32.0;
	grenade = Actor(Owner).SpawnSubMissile(grenadetype, Actor(Owner));
	Owner.Origin.z -= 32.0;
	if (!grenade)
		return;

	if (grenade.SightSound)
	{
		grenade.PlaySound(grenade.SightSound, CHAN_VOICE);
	}

	grenade.Velocity.z = (tan(-Owner.Angles.pitch) * grenade.Speed + 12.0 * 35.0) / 1.5;

	an = Owner.Angles.yaw;
	tworadii = Owner.Radius + grenade.Radius;
	grenade.Origin.x += cos(an) * tworadii;
	grenade.Origin.y += sin(an) * tworadii;

	if (GetAttackState(false) == Owner.Player.ViewStates[ps_weapon].State)
	{
		an = Owner.Angles.yaw - 90.0;
	}
	else
	{
		an = Owner.Angles.yaw + 90.0;
	}
	grenade.Origin.x += cos(an) * 15.0;
	grenade.Origin.y += sin(an) * 15.0;
}

states
{
Ready:
	GREN A 1 A_WeaponReady
	Loop
Deselect:
	GREN A 1 A_Lower
	Loop
Select:
	GREN A 1 A_Raise
	Loop
Fire:
	GREN A 5 A_FireGrenade
	GREN B 10
	GREN A 5 A_FireGrenade
	GREN C 10
	GREN A 0 A_ReFire
	Goto Ready
Flash:
	GREF A 5 Bright A_Light1
	Goto Super::LightDone
FlashUnused:
	GREF A 10 A_Light0
	Goto Super::LightDone
Flash2:
	GREF B 5 Bright A_Light2
	Goto Super::LightDone
Spawn:
	GRND A -1
	Stop
}

defaultproperties
{
	SisterWeaponType = StrifeGrenadeLauncher2;
	Slot = 5;
	SelectionOrder = 2400;
	AmmoType1 = HEGrenadeRounds;
	AmmoUse1 = 1;
	AmmoGive1 = 12;
	ConversationID = 195;
	PickupMessage = "$txt_glauncher";
}
