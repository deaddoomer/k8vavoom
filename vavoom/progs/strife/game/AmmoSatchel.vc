//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class AmmoSatchel : Inventory
	__mobjinfo__(183)
	__scriptid__(144);

//==========================================================================
//
//	TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	class<Ammo>	Cls;

	if (!Player(Toucher.Player).bBackpack)
	{
		Player(Toucher.Player).bBackpack = true;
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Ammo AmmoItem = Ammo(Toucher.FindInventory(Cls));
			if (!AmmoItem)
			{
				AmmoItem = Spawn(Cls);
				AmmoItem.AttachToOwner(Toucher);
				AmmoItem.Amount = 0;
			}
			AmmoItem.MaxAmount = AmmoItem.BackpackMaxAmount;
{
int num = AmmoItem.BackpackAmount;
	int oldammo;

	if (AmmoItem.Amount == AmmoItem.MaxAmount)
		continue;

	if (Level.Game.gameskill == sk_baby || Level.Game.gameskill == sk_nightmare)
	{
		// give double ammo in trainer mode,
		// you'll need in nightmare
		num <<= 1;
	}

	oldammo = AmmoItem.Amount;
	AmmoItem.Amount += num;

	if (AmmoItem.Amount > AmmoItem.MaxAmount)
		AmmoItem.Amount = AmmoItem.MaxAmount;

	// If non zero ammo, 
	// don't change up weapons,
	// player was lower on purpose.
	if (oldammo)
		continue;
	Player(Toucher.Player).GotAmmo(AmmoItem);
	continue;
}
		}
	}
	else
	{
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
{
	int oldammo;

	Ammo AmmoItem2 = Ammo(Toucher.FindInventory(Cls));
	int num = AmmoItem2.BackpackAmount;
	if (AmmoItem2.Amount == AmmoItem2.MaxAmount)
		continue;

	if (Level.Game.gameskill == sk_baby || Level.Game.gameskill == sk_nightmare)
	{
		// give double ammo in trainer mode,
		// you'll need in nightmare
		num <<= 1;
	}

	oldammo = AmmoItem2.Amount;
	AmmoItem2.Amount += num;

	if (AmmoItem2.Amount > AmmoItem2.MaxAmount)
		AmmoItem2.Amount = AmmoItem2.MaxAmount;

	// If non zero ammo, 
	// don't change up weapons,
	// player was lower on purpose.
	if (oldammo)
		continue;
	Player(Toucher.Player).GotAmmo(AmmoItem2);
}
		}
	}
	GoAwayAndDie();
	GiveQuest(Toucher);
	return true;
}

__states__
{
	S_BACKPACK('BKPK', 0, -1.0, none) = none
}

defaultproperties
{
	bFloorClip = true;
	ConversationID = 187;
	PickupMessage = "$txt_ammosatchel";
	IdleState = S_BACKPACK;
}
