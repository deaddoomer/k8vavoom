//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StrifeLevelInfo : LineSpecialLevelInfo;

//==========================================================================
//
//  ExecuteActionSpecial
//
//==========================================================================

int ExecuteActionSpecial(int Special, int Arg1, int Arg2, int Arg3,
	int Arg4, int Arg5, line_t* Line, int Side, Entity E)
{
	bool buttonSuccess;
	EntityEx A;

	A = EntityEx(E);
	buttonSuccess = false;
	switch (Special)
	{
	case 174:	//	SendToCommunicator.
		buttonSuccess = EV_SendToCommunicator(A, Arg1, Arg2, Arg3, Arg4,
			Arg5, Side);
		break;

	// Inert Line specials
	default:
		buttonSuccess = ::ExecuteActionSpecial(Special, Arg1, Arg2, Arg3,
			Arg4, Arg5, Line, Side, E);
		break;
	}
	return buttonSuccess;
}

//==========================================================================
//
//  CheckActivation
//
//==========================================================================

bool CheckActivation(int activationType, line_t * line, EntityEx A)
{
	int lineActivation;
	bool noway;

	noway = true;
	lineActivation = GET_SPAC(line->flags);
	if (lineActivation == SPAC_PTOUCH &&
		(activationType == SPAC_PCROSS || activationType == SPAC_IMPACT))
	{
		lineActivation = activationType;
	}
	else if (lineActivation == SPAC_USETHROUGH)
	{
		lineActivation = SPAC_USE;
	}
	else if (line->special == LNSPEC_Teleport &&
		lineActivation == SPAC_CROSS && activationType == SPAC_PCROSS &&
		A && A.bMissile)
	{
		// Let missiles use regular player teleports
		lineActivation = SPAC_PCROSS;
	}
	if (lineActivation != activationType &&
		!(activationType == SPAC_MCROSS && lineActivation == SPAC_CROSS))
	{
		return false;
	}
	if (!A.bIsPlayer && !A.bMissile)
	{
		if ((activationType == SPAC_USE || activationType == SPAC_PUSH)
			&& (line->flags & ML_SECRET))
			return false;	// never open secret doors

		switch (lineActivation)
		{
		case SPAC_IMPACT:
		case SPAC_PCROSS:
			// shouldn't really be here if not a missile
		case SPAC_MCROSS:
			noway = false;
			break;

		case SPAC_CROSS:
			switch (line->special)
			{
			case LNSPEC_DoorRaise:
			case LNSPEC_PlatDownWaitUpStay:
			case LNSPEC_Teleport:
			case LNSPEC_TeleportNoFog:
			case LNSPEC_PlatDownWaitUpStayLip:
			case LNSPEC_TeleportLine:
				noway = false;
			}
			break;

		case SPAC_USE:
		case SPAC_PUSH:
			switch (line->special)
			{
			case LNSPEC_DoorRaise:
				if (line->arg1 == 0)
					noway = false;
				break;
			case LNSPEC_Teleport:
			case LNSPEC_TeleportNoFog:
				noway = false;
			}
			break;
		}
		if (noway)
			return false;
	}
	return true;
}

//==========================================================================
//
//  EV_SendToCommunicator
//
//==========================================================================

bool EV_SendToCommunicator(EntityEx A, int Arg1, int Arg2, int Arg3, int Arg4,
	int Arg5, int side)
{
	if (Arg2 && side)
		return false;

	if (A && A.bIsPlayer && A.FindInventory(Communicator))
	{
		if (!Arg4)
		{
			Player(A.Player).SetObjectives(Arg1);
		}

		Player(A.Player).ClientVoice(Arg1);

		if (Arg3 == 0)
		{
			A.Player.cprint("Incoming Message");
		}
		else if (Arg3 == 1)
		{
			A.Player.cprint("Incoming Message from BlackBird");
		}
		return true;
	}
	return false;
}

//==========================================================================
//
//  GetDefaultDoorSound
//
//==========================================================================

name GetDefaultDoorSound(sector_t* Sector)
{
	int			i;
	name		SeqName = DefaultDoorSound;

	//	Search the front top textures of 2-sided lines on the door sector
	// for a door sound to use.
	for (i = 0; i < Sector->linecount; i++)
	{
		if (!Sector->lines[i]->backsector)
			continue;

		string TexName = va("%n", GetTextureName(XLevel.Sides[
			Sector->lines[i]->sidenum[0]].toptexture));
		if (StrStartsWith(TexName, "dors"))
		{
			SeqName = 'DoorStone';
		}
		else if (StrStartsWith(TexName, "dorml"))
		{
			SeqName = 'DoorLargeMetal';
		}
		else if (StrStartsWith(TexName, "dorwl"))
		{
			SeqName = 'DoorLargeWood';
		}
		else if (StrStartsWith(TexName, "dorw"))
		{
			SeqName = 'DoorSmallWood';
		}
	}

	return SeqName;
}

defaultproperties
{
	DefaultDoorSound = 'DoorSmallMetal';
	DefaultCeilingSound = 'CeilingNormal';
	DefaultSilentCeilingSound = 'CeilingSemiSilent';
	DefaultFloorSound = 'Floor';
	DefaultFloorAltSound = 'Floor';
	DefaultStairStepSound = 'Floor';
	DefaultPlatformSound = 'Platform';
	bTeleportNewMapBothSides = true;
	bCheckStrifeStartSpots = true;
	ExtPlayersBase = 5;
	Lock103Message = "THIS AREA IS ONLY AVAILABLE IN THE RETAIL VERSION OF STRIFE";
}
