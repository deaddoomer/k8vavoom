//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Inquisitor : Pawn
	__mobjinfo__(16);

name JumpSound;
float JumpSpeed;

//==========================================================================
//
//  TakeSpecialDamage
//
//==========================================================================

int TakeSpecialDamage(EntityEx inflictor, EntityEx source, int damage)
{
	if (InquisitorShot(inflictor))
	{
		// Inquisitor grenades don't damage inquisitors
		return -1;
	}
	return ::TakeSpecialDamage(inflictor, source, damage);
}

//==========================================================================
//
//	A_InquisitorChase
//
//==========================================================================

final void A_InquisitorChase()
{
	float		ZSpeed;

	if (!Target)
		return;

	PlaySound('inquisitor/walk', CHAN_BODY);
	A_Chase();
	ZSpeed = fabs(Velocity.z);
	if (Origin.z < Target.Origin.z)
	{
		if (TestMobjZ())
			Origin.z = FloorZ + 80.0;
		else
		{
			return;
		}

		if (TestMobjZ())
		{
			A_FaceTarget();

			if (/*Radius &&*/Origin.z + Height + 54.0 < CeilingZ)
			{
				SetState(FindState('Jump'));
				bDynamicLight = true;
			}
		}
		else
		{
			return;
		}
	}
	else if (Origin.z != Target.Origin.z && Origin.z != FloorZ && 
		ZSpeed > 21.0)
	{
		A_FaceTarget();
		if (TestMobjZ())
		{
			SetState(FindState('Jump'));
			bDynamicLight = true;
		}
		else
			return;
	}
}

//==========================================================================
//
//	A_InquisitorChase2
//
//==========================================================================

final void A_InquisitorChase2()
{
	if (!Target || Origin.z != FloorZ)
		return;

	if (!CheckRobotRange())
	{
		SetState(FindState('Grenade'));
	}
	else
	{
		SetState(GetStatePlus(MissileState, 1));
	}
}

//==========================================================================
//
//	A_InquisitorGrenade
//
//==========================================================================

final void A_InquisitorGrenade()
{
	EntityEx A;
	float an;

	if (Origin.z != FloorZ)
		return;

	A_FaceTarget();

	A = SpawnMissileZAimed(76.0, Target, InquisitorShot);
	if (A)
	{
		A.Angles.yaw -= 45.0 / 16.0;
		A.Velocity.x = A.Speed * cos(A.Angles.yaw);
		A.Velocity.y = A.Speed * sin(A.Angles.yaw);
		A.Velocity.z += 4.0 * 35.0;
	}

	A = SpawnMissileZAimed(76.0, Target, InquisitorShot);
	if (A)
	{
		A.Angles.yaw += 45.0 / 16.0;
		A.Velocity.x = A.Speed * cos(A.Angles.yaw);
		A.Velocity.y = A.Speed * sin(A.Angles.yaw);
		A.Velocity.z += 15.0 * 35.0;	//weeeeeeeeeee!!!!
	}
}

//==========================================================================
//
//	A_InquisitorInitJump
//
//==========================================================================

final void A_InquisitorInitJump()
{
	float an;
	float dist;

	if (!Target)
		return;

	PlaySound(JumpSound, CHAN_BODY);
	A_FaceTarget();
	Velocity.x += JumpSpeed * cos(Angles.yaw);
	Velocity.y += JumpSpeed * sin(Angles.yaw);
	dist = DistTo2(Target);
	dist /= JumpSpeed;
	if (dist < 1.0)
	{
		dist = 1.0;
	}
	Velocity.z = (Target.Origin.z - Origin.z) / dist;
	ReactionCount = 60;
	bNoGravity = true;
	bFloat = false;
}

//==========================================================================
//
//	A_InquisitorJump
//
//==========================================================================

final void A_InquisitorJump()
{
	ReactionCount--;
	if (ReactionCount < 0 || Velocity.x == 0.0 || Velocity.y == 0.0 ||
		Origin.z <= FloorZ/* || fabs(Velocity.x) > JumpSpeed ||
		fabs(Velocity.y) > JumpSpeed*/)
	{
		SetState(GetStatePlus(SeeState, 1));
		ReactionCount = 0;
		bNoGravity = false;
		bDynamicLight = false;
		return;
	}
	PlaySound(JumpSound, CHAN_BODY);
}

//==========================================================================
//
//	A_InquisitorDropArms
//
//==========================================================================

final void A_InquisitorDropArms()
{
	TossUpObject(InquisitorArm);
	TossUpObject(InquisitorArm);
}

states
{
Spawn:
	ROB3 AB 10 A_Look
	Loop
See:
	ROB3 B 3 A_InquisitorChase
	ROB3 B 3 A_Chase
	ROB3 CCDD 4 A_Chase
	ROB3 E 3 A_InquisitorChase
	ROB3 E 3 A_InquisitorChase2
	Loop
Missile:
	ROB3 A 2 A_InquisitorChase2
	ROB3 F 6 A_FaceTarget
	ROB3 G 8 Bright A_RobotMissile
	ROB3 G 8 A_RobotMissile
	Goto See
Grenade:
	ROB3 K 12 A_FaceTarget
	ROB3 J 6 Bright A_InquisitorGrenade
	ROB3 K 12
	Goto See
Jump:
	ROB3 H 8 Bright A_InquisitorInitJump
	ROB3 I 4 Bright A_InquisitorJump
	ROB3 H 4 Bright A_InquisitorJump
	Goto Jump+1
Death:
	ROB3 L 4 A_XDying
	ROB3 M 4 A_Scream
	ROB3 N 4 A_XDying
	ROB3 O 4 Bright A_ExplodeAndAlert
	ROB3 P 4 Bright A_XDying
	ROB3 Q 4 Bright A_Fall
	ROB3 RSTUV 4 A_XDying
	ROB3 W 4 Bright A_ExplodeAndAlert
	ROB3 XY 4 Bright A_XDying
	ROB3 Z 4 A_XDying
	ROB3 "[" 4 A_XDying
	ROB3 "\\" 3 A_XDying
	ROB3 "]" 3 Bright A_ExplodeAndAlert
	RBB3 A 3 Bright A_InquisitorDropArms
	RBB3 B 3 Bright A_XDying
	RBB3 CD 3 A_XDying
	RBB3 E -1
	Stop
}

defaultproperties
{
	Health = 1000;
	Radius = 40.0;
	Height = 110.0;
	Mass = 1000.0;
	Speed = 12.0 * 35.0;
	JumpSpeed = 6.0 * 35.0;
	bDropOff = true;
	bNoBlood = true;
	bExplodeParticles = true;
	SightSound = 'inquisitor/sight';
	ActiveSound = 'inquisitor/active';
	JumpSound = 'inquisitor/jump';
	DeathSound = 'inquisitor/death';
	DLightColour = RGB(151, 155, 203);
	DLightRadius = 164.0;
	ExplodeEffect = RGB(203, 111, 0);
}
