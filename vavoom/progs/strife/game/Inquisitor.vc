//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Inquisitor : Pawn
	__mobjinfo__(16);

state SeeState2;
state JumpState;
state MissileState2;
state GrenadeState;
name JumpSound;
float JumpSpeed;

//==========================================================================
//
//	A_InquisitorChase
//
//==========================================================================

final void A_InquisitorChase()
{
	float		ZSpeed;

	if (!Target)
		return;

	PlaySound('inquisitor/walk', CHAN_BODY);
	A_Chase();
	ZSpeed = fabs(Velocity.z);
	if (Origin.z < Target.Origin.z)
	{
		if (TestMobjZ())
			Origin.z = FloorZ + 80.0;
		else
		{
			Origin.z = FloorZ;
			return;
		}

		if (TestMobjZ())
		{
			A_FaceTarget();

			if (/*Radius &&*/Origin.z + Height + 54.0 < CeilingZ)
			{
				SetState(JumpState);
				Effects = StrifeDefs::EF_DL_BLUE;
			}
			else
				//	Don't let him jump while under a low ceiling
				Origin.z = FloorZ;
		}
		else
		{
			Origin.z = FloorZ;
			return;
		}
	}
	else if (Origin.z != Target.Origin.z && Origin.z != FloorZ && 
		ZSpeed > 21.0)
	{
		A_FaceTarget();
		if (TestMobjZ())
		{
			SetState(JumpState);
			Effects = StrifeDefs::EF_DL_BLUE;
		}
		else
			return;
	}
}

//==========================================================================
//
//	A_InquisitorChase2
//
//==========================================================================

final void A_InquisitorChase2()
{
	if (!Target || Origin.z != FloorZ)
		return;

	if (!CheckRobotRange())
	{
		SetState(GrenadeState);
	}
	else
	{
		SetState(MissileState2);
	}
}

//==========================================================================
//
//	A_InquisitorGrenade
//
//==========================================================================

final void A_InquisitorGrenade()
{
	EntityEx A;
	float an;

	if (Origin.z != FloorZ)
		return;

	A_FaceTarget();

	A = SpawnMissileZAimed(76.0, Target, InquisitorShot);
	if (A)
	{
		A.Angles.yaw -= 45.0 / 16.0;
		A.Velocity.x = A.Speed * cos(A.Angles.yaw);
		A.Velocity.y = A.Speed * sin(A.Angles.yaw);
		A.Velocity.z += 4.0 * 35.0;
	}

	A = SpawnMissileZAimed(76.0, Target, InquisitorShot);
	if (A)
	{
		A.Angles.yaw += 45.0 / 16.0;
		A.Velocity.x = A.Speed * cos(A.Angles.yaw);
		A.Velocity.y = A.Speed * sin(A.Angles.yaw);
		A.Velocity.z += 15.0 * 35.0;	//weeeeeeeeeee!!!!
	}
}

//==========================================================================
//
//	A_InquisitorInitJump
//
//==========================================================================

final void A_InquisitorInitJump()
{
	float an;
	float dist;

	if (!Target)
		return;

	PlaySound(JumpSound, CHAN_BODY);
	A_FaceTarget();
	Velocity.x += JumpSpeed * cos(Angles.yaw);
	Velocity.y += JumpSpeed * sin(Angles.yaw);
	dist = DistTo2(Target);
	dist /= JumpSpeed;
	if (dist < 1.0)
	{
		dist = 1.0;
	}
	Velocity.z = (Target.Origin.z - Origin.z) / dist;
	ReactionCount = 60;
	bNoGravity = true;
	bFloat = false;
}

//==========================================================================
//
//	A_InquisitorJump
//
//==========================================================================

final void A_InquisitorJump()
{
	ReactionCount--;
	if (ReactionCount < 0 || Velocity.x == 0.0 || Velocity.y == 0.0 ||
		Origin.z <= FloorZ/* || fabs(Velocity.x) > JumpSpeed ||
		fabs(Velocity.y) > JumpSpeed*/)
	{
		SetState(SeeState2);
		ReactionCount = 0;
		bNoGravity = false;
		Effects = StrifeDefs::EF_DL_NONE;
		return;
	}
	PlaySound(JumpSound, CHAN_BODY);
}

//==========================================================================
//
//	A_InquisitorDropArms
//
//==========================================================================

final void A_InquisitorDropArms()
{
	TossUpObject(InquisitorArm);
	TossUpObject(InquisitorArm);
}

__states__
{
	S_INQUISITOR_LOOK1('ROB3', 0, 10.0 / 35.0, S_INQUISITOR_LOOK2) = A_Look
	S_INQUISITOR_LOOK2('ROB3', 1, 10.0 / 35.0, S_INQUISITOR_LOOK1) = A_Look
	S_INQUISITOR_RUN1('ROB3', 1, 3.0 / 35.0, S_INQUISITOR_RUN2) = A_InquisitorChase
	S_INQUISITOR_RUN2('ROB3', 1, 3.0 / 35.0, S_INQUISITOR_RUN3) = A_Chase
	S_INQUISITOR_RUN3('ROB3', 2, 4.0 / 35.0, S_INQUISITOR_RUN4) = A_Chase
	S_INQUISITOR_RUN4('ROB3', 2, 4.0 / 35.0, S_INQUISITOR_RUN5) = A_Chase
	S_INQUISITOR_RUN5('ROB3', 3, 4.0 / 35.0, S_INQUISITOR_RUN6) = A_Chase
	S_INQUISITOR_RUN6('ROB3', 3, 4.0 / 35.0, S_INQUISITOR_RUN7) = A_Chase
	S_INQUISITOR_RUN7('ROB3', 4, 3.0 / 35.0, S_INQUISITOR_RUN8) = A_InquisitorChase
	S_INQUISITOR_RUN8('ROB3', 4, 3.0 / 35.0, S_INQUISITOR_RUN1) = A_InquisitorChase2
	S_INQUISITOR_ATK1_1('ROB3', 0, 2.0 / 35.0, S_INQUISITOR_ATK1_2) = A_InquisitorChase2
	S_INQUISITOR_ATK1_2('ROB3', 5, 6.0 / 35.0, S_INQUISITOR_ATK1_3) = A_FaceTarget
	S_INQUISITOR_ATK1_3('ROB3', 6 | FF_FULLBRIGHT, 8.0 / 35.0, S_INQUISITOR_ATK1_4) = A_RobotMissile
	S_INQUISITOR_ATK1_4('ROB3', 6, 8.0 / 35.0, S_INQUISITOR_RUN1) = A_RobotMissile
	S_INQUISITOR_ATK2_1('ROB3', 10, 12.0 / 35.0, S_INQUISITOR_ATK2_2) = A_FaceTarget
	S_INQUISITOR_ATK2_2('ROB3', 9 | FF_FULLBRIGHT, 6.0 / 35.0, S_INQUISITOR_ATK2_3) = A_InquisitorGrenade
	S_INQUISITOR_ATK2_3('ROB3', 10, 12.0 / 35.0, S_INQUISITOR_RUN1) = none
	S_INQUISITOR_JUMP1('ROB3', 7 | FF_FULLBRIGHT, 8.0 / 35.0, S_INQUISITOR_JUMP2) = A_InquisitorInitJump
	S_INQUISITOR_JUMP2('ROB3', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_JUMP3) = A_InquisitorJump
	S_INQUISITOR_JUMP3('ROB3', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_JUMP2) = A_InquisitorJump
	S_INQUISITOR_DIE1('ROB3', 11, 4.0 / 35.0, S_INQUISITOR_DIE2) = A_XDying
	S_INQUISITOR_DIE2('ROB3', 12, 4.0 / 35.0, S_INQUISITOR_DIE3) = A_Scream
	S_INQUISITOR_DIE3('ROB3', 13, 4.0 / 35.0, S_INQUISITOR_DIE4) = A_XDying
	S_INQUISITOR_DIE4('ROB3', 14 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE5) = A_Explode2
	S_INQUISITOR_DIE5('ROB3', 15 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE6) = A_XDying
	S_INQUISITOR_DIE6('ROB3', 16 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE7) = A_Fall
	S_INQUISITOR_DIE7('ROB3', 17, 4.0 / 35.0, S_INQUISITOR_DIE8) = A_XDying
	S_INQUISITOR_DIE8('ROB3', 18, 4.0 / 35.0, S_INQUISITOR_DIE9) = A_XDying
	S_INQUISITOR_DIE9('ROB3', 19, 4.0 / 35.0, S_INQUISITOR_DIE10) = A_XDying
	S_INQUISITOR_DIE10('ROB3', 20, 4.0 / 35.0, S_INQUISITOR_DIE11) = A_XDying
	S_INQUISITOR_DIE11('ROB3', 21, 4.0 / 35.0, S_INQUISITOR_DIE12) = A_XDying
	S_INQUISITOR_DIE12('ROB3', 22 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE13) = A_Explode2
	S_INQUISITOR_DIE13('ROB3', 23 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE14) = A_XDying
	S_INQUISITOR_DIE14('ROB3', 24 | FF_FULLBRIGHT, 4.0 / 35.0, S_INQUISITOR_DIE15) = A_XDying
	S_INQUISITOR_DIE15('ROB3', 25, 4.0 / 35.0, S_INQUISITOR_DIE16) = A_XDying
	S_INQUISITOR_DIE16('ROB3', 26, 4.0 / 35.0, S_INQUISITOR_DIE17) = A_XDying
	S_INQUISITOR_DIE17('ROB3', 27, 3.0 / 35.0, S_INQUISITOR_DIE18) = A_XDying
	S_INQUISITOR_DIE18('ROB3', 28 | FF_FULLBRIGHT, 3.0 / 35.0, S_INQUISITOR_DIE19) = A_Explode2
	S_INQUISITOR_DIE19('RBB3', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_INQUISITOR_DIE20) = A_InquisitorDropArms
	S_INQUISITOR_DIE20('RBB3', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_INQUISITOR_DIE21) = A_XDying
	S_INQUISITOR_DIE21('RBB3', 2, 3.0 / 35.0, S_INQUISITOR_DIE22) = A_XDying
	S_INQUISITOR_DIE22('RBB3', 3, 3.0 / 35.0, S_INQUISITOR_DIE23) = A_XDying
	S_INQUISITOR_DIE23('RBB3', 4, -1.0, none) = A_BossDeath
}

defaultproperties
{
	Health = 1000;
	Radius = 40.0;
	Height = 110.0;
	Mass = 1000.0;
	StepSpeed = 12.0;
	JumpSpeed = 6.0 * 35.0;
	bDropOff = true;
	bNoBlood = true;
	IdleState = S_INQUISITOR_LOOK1;
	SeeState = S_INQUISITOR_RUN1;
	SeeState2 = S_INQUISITOR_RUN2;
	MissileState = S_INQUISITOR_ATK1_1;
	MissileState2 = S_INQUISITOR_ATK1_2;
	GrenadeState = S_INQUISITOR_ATK2_1;
	JumpState = S_INQUISITOR_JUMP1;
	DeathState = S_INQUISITOR_DIE1;
	SightSound = 'inquisitor/sight';
	ActiveSound = 'inquisitor/active';
	JumpSound = 'inquisitor/jump';
	DeathSound = 'inquisitor/death';
	ExplodeEffect = StrifeDefs::EF_DL_MISSILE;
}
