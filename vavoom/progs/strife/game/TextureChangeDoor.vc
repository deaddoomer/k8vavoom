//**************************************************************************
// //**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class TextureChangeDoor : SectorMover;

float		TopDist;
float		BotDist;
int			Direction;		// 1 = up, 0 = waiting, -1 = down
float		TopWait;		// time to wait at the top
float		TopTime;		// (keep in case a door going down is reset)
							// when it reaches 0, start going down
name		OpenSound;
name		CloseSound;
line_t*		Line;

int			NumFrames;		//	Total number of animation frames.
float		CurrentFrame;
float		AnimSpeed;

//==========================================================================
//
//	Init
//
//==========================================================================

void Init(sector_t* InSector, int Arg1, int Arg2, int Arg3, int Arg4,
	int Arg5, line_t* InLine)
{
	float		Height;
	TVec		Spot;

	Sector = InSector;
	Sector->CeilingData = self;

	Height = Level.FindLowestCeilingSurrounding(Sector, &Spot);
	Spot.z = Height;
	TopDist = DotProduct(Sector->ceiling.normal, Spot);
	Height = Level.FindHighestFloorPoint(Sector, &Spot);
	Spot.z = Height;
	BotDist = DotProduct(Sector->ceiling.normal, Spot);

	NumFrames = 8;
	CurrentFrame = 0.0;
	AnimSpeed = itof(Arg2) * 35.0 / 8.0;

	Line = InLine;
	Direction = 1;
	TopWait = itof(Arg3) / 35.0;
	StartAnim();
}

//==========================================================================
//
//	StartAnim
//
//==========================================================================

void StartAnim()
{
	int		texTop;

	texTop = XLevel.Sides[Line->sidenum[0]].toptexture;
	if (texTop == TextureNumForName('doraln01'))
	{
		OpenSound = 'DoorOpenAirlock';
		CloseSound = 'DoorCloseAirlock';
	}
	else if (texTop == TextureNumForName('dorchn01'))
	{
		OpenSound = 'DoorOpenChain';
		CloseSound = 'DoorCloseChain';
	}
	else if (texTop == TextureNumForName('dorcrg01'))
	{
		OpenSound = 'DoorOpenSmallMetal';
		CloseSound = 'DoorCloseSmallMetal';
	}
	else if (texTop == TextureNumForName('dorirs01'))
	{
		OpenSound = 'DoorOpenAirlock';
		CloseSound = 'DoorCloseAirlock';
	}
	else if (texTop == TextureNumForName('dorqtr01'))
	{
		OpenSound = 'DoorOpenAirlock';
		CloseSound = 'DoorCloseAirlock';
	}
	else if (texTop == TextureNumForName('dorstn01'))
	{
		OpenSound = 'DoorOpenStone';
		CloseSound = 'DoorCloseStone';
	}
	else
	{
		OpenSound = 'DoorOpenLargeMetal';
		CloseSound = 'DoorCloseLargeMetal';
	}
	StartDoorSound(true);
	SetAnimTexture(texTop);
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	int		i;
	int		res;
	int		texTop;
	int		NewMidTexture;

	texTop = XLevel.Sides[Line->sidenum[0]].toptexture;	
	switch (Direction)
	{
	case 1:
		//	Open door.
		Sector->ceiling.dist = TopDist;
		XLevel.ChangeSector(Sector, false);
		CurrentFrame += AnimSpeed * deltaTime;
		if (CurrentFrame >= itof(NumFrames))
		{
			CurrentFrame = itof(NumFrames) - 0.001;
			Direction = 0;	// wait at top
			TopTime = TopWait;
			SectorStopSequence(Sector);
			for (i = 0; i < Sector->linecount; i++)
			{
				if (Sector->lines[i]->backsector)
				{
					Sector->lines[i]->flags &= ~ML_BLOCKING;
				}
			}
		}
		NewMidTexture = texTop + ftoi(CurrentFrame);
		SetAnimTexture(NewMidTexture);
		break;

	case 0:
		//	Waiting
		TopTime -= deltaTime;
		if (TopTime <= 0.0)
		{
			TopTime = 0.0;
			Direction = -1;	// time to go back down
			StartDoorSound(false);
		}
		break;

	case -1:
		//	Close door.
		CurrentFrame -= AnimSpeed * deltaTime;
		if (CurrentFrame <= 0.0)
		{
			CurrentFrame = 0.0;
		}
		NewMidTexture = texTop + ftoi(CurrentFrame);
		SetAnimTexture(NewMidTexture);

		//	Try to close door. If it crushes it means that there's something
		// inside the door so go back.
		Sector->ceiling.dist = BotDist;
		if (XLevel.ChangeSector(Sector, false))
		{
			Direction = 1;
		}
		else if (CurrentFrame == 0.0)
		{
			//	Clear mid texture in a case door will be open from other side.
			SetAnimTexture(0);
			for (i = 0; i < Sector->linecount; i++)
			{
				if (Sector->lines[i]->backsector)
				{
					Sector->lines[i]->flags |= ML_BLOCKING;
				}
			}
			SectorStopSequence(Sector);
			Finished();	// unlink and free
		}
		else
		{
			Sector->ceiling.dist = TopDist;
			XLevel.ChangeSector(Sector, false);
		}
		break;
	}
}

//==========================================================================
//
//	SetAnimTexture
//
//==========================================================================

void SetAnimTexture(int NewTex)
{
	int		i;

	for (i = 0; i < Sector->linecount; i++)
	{
		if (Sector->lines[i]->flags & ML_TWOSIDED)
		{
			SetLineTexture(Sector->lines[i]->sidenum[0], 1, NewTex);
			SetLineTexture(Sector->lines[i]->sidenum[1], 1, NewTex);
		}
	}
}

//==========================================================================
//
//	SetAnimTexture
//
//==========================================================================

void StartDoorSound(bool bOpen)
{
	if (Sector->seqType >= 0)
	{
		SectorStartSequence(Sector, GetSeqTrans(Sector->seqType, SEQ_Door));
	}
	else if (bOpen)
	{
		SectorStartSequence(Sector, OpenSound);
	}
	else
	{
		SectorStartSequence(Sector, CloseSound);
	}
}

defaultproperties
{
}
