//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Stalker : Pawn
	__mobjinfo__(186);

name WalkSound;

//==========================================================================
//
//	A_StalkerLook
//
//==========================================================================

void A_StalkerLook()
{
	//	Set look state depending on floor/ceiling state.
	if (bNoGravity)
	{
		SetState(S_STALKER_LOOK);
	}
	else
	{
		SetState(S_STALKER_F_LOOK);
	}
}

//==========================================================================
//
//	A_StalkerChase2
//
//==========================================================================

void A_StalkerChase2()
{
	if (!bNoGravity)
	{
		//	Walking on floor.
		SetState(S_STALKER_F_RUN1);
	}
	else if (CeilingZ - Height > Origin.z)
	{
		//	Falling down.
		SetState(S_STALKER_LAND1);
	}
}

//==========================================================================
//
//	A_StalkerChase
//
//==========================================================================

void A_StalkerChase()
{
	PlaySound(WalkSound, CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//	A_StalkerAttack
//
//==========================================================================

void A_StalkerAttack()
{
	if (bNoGravity)
	{
		//	Land if we are on ceiling.
		SetState(S_STALKER_LAND1);
	}
	else
	{
		if (!Enemy)
			return;

		A_FaceTarget();

		if (CheckMeleeRange())
		{
			Enemy.Damage(self, self, (P_Random() & 7) * 2 + 2);
		}
	}
}

//==========================================================================
//
//	A_StalkerLand
//
//==========================================================================

void A_StalkerLand()
{
	bNoGravity = false;
}

//==========================================================================
//
//	CheckMeleeRange
//
//==========================================================================

bool CheckMeleeRange()
{
	float	dist;

	if (!bNoGravity)
	{
		return ::CheckMeleeRange();
	}

	//	When walking on ceiling, ignore height difference.
	if (!Enemy)
	{
		return false;
	}

	dist = DistTo2(Enemy);

	if (dist >= MELEERANGE - 20.0 + Enemy.Radius)
	{
		return false;
	}

	if (!CanSee(Enemy))
	{
		return false;
	}

	return true;
}

__states__
{
	S_STALKER_INIT('SPID', 0, 1.0 / 35.0, S_STALKER_INIT) { A_StalkerLook(); }
	S_STALKER_LOOK('SPID', 0, 10.0 / 35.0, S_STALKER_LOOK) { A_Look(); }
	S_STALKER_F_LOOK('SPID', 9, 10.0 / 35.0, S_STALKER_F_LOOK) { A_Look(); }
	S_STALKER_RUN1('SPID', 0, 1.0 / 35.0, S_STALKER_RUN2) { A_StalkerChase2(); }
	S_STALKER_RUN2('SPID', 0, 3.0 / 35.0, S_STALKER_RUN3) { A_Chase(); }
	S_STALKER_RUN3('SPID', 1, 3.0 / 35.0, S_STALKER_RUN4) { A_Chase(); }
	S_STALKER_RUN4('SPID', 1, 3.0 / 35.0, S_STALKER_RUN5) { A_Chase(); }
	S_STALKER_RUN5('SPID', 2, 3.0 / 35.0, S_STALKER_RUN6) { A_StalkerChase(); }
	S_STALKER_RUN6('SPID', 2, 3.0 / 35.0, S_STALKER_RUN1) { A_Chase(); }
	S_STALKER_ATK1('SPID', 9, 3.0 / 35.0, S_STALKER_ATK2) { A_FaceTarget(); }
	S_STALKER_ATK2('SPID', 10, 3.0 / 35.0, S_STALKER_F_RUN1) { A_StalkerAttack(); }
	S_STALKER_LAND1('SPID', 2, 2.0 / 35.0, S_STALKER_LAND2) { A_StalkerLand(); }
	S_STALKER_LAND2('SPID', 8, 3.0 / 35.0, S_STALKER_LAND3) { }
	S_STALKER_LAND3('SPID', 7, 3.0 / 35.0, S_STALKER_LAND4) { }
	S_STALKER_LAND4('SPID', 6, 3.0 / 35.0, S_STALKER_LAND5) { }
	S_STALKER_LAND5('SPID', 5, 3.0 / 35.0, S_STALKER_LAND6) { }
	S_STALKER_LAND6('SPID', 4, 3.0 / 35.0, S_STALKER_LAND7) { }
	S_STALKER_LAND7('SPID', 3, 3.0 / 35.0, S_STALKER_ATK1) { }
	S_STALKER_F_RUN1('SPID', 9, 3.0 / 35.0, S_STALKER_F_RUN2) { A_StalkerChase(); }
	S_STALKER_F_RUN2('SPID', 9, 3.0 / 35.0, S_STALKER_F_RUN3) { A_Chase(); }
	S_STALKER_F_RUN3('SPID', 10, 3.0 / 35.0, S_STALKER_F_RUN4) { A_Chase(); }
	S_STALKER_F_RUN4('SPID', 10, 3.0 / 35.0, S_STALKER_F_RUN5) { A_Chase(); }
	S_STALKER_F_RUN5('SPID', 11, 3.0 / 35.0, S_STALKER_F_RUN6) { A_StalkerChase(); }
	S_STALKER_F_RUN6('SPID', 11, 3.0 / 35.0, S_STALKER_F_RUN1) { A_Chase(); }
	S_STALKER_PAIN('SPID', 11, 1.0 / 35.0, S_STALKER_RUN1) { A_Pain(); }
	S_STALKER_DIE1('SPID', 14, 4.0 / 35.0, S_STALKER_DIE2) { }
	S_STALKER_DIE2('SPID', 15, 4.0 / 35.0, S_STALKER_DIE3) { A_Scream(); }
	S_STALKER_DIE3('SPID', 16, 4.0 / 35.0, S_STALKER_DIE4) { }
	S_STALKER_DIE4('SPID', 17, 4.0 / 35.0, S_STALKER_DIE5) { }
	S_STALKER_DIE5('SPID', 18, 4.0 / 35.0, S_STALKER_DIE6) { }
	S_STALKER_DIE6('SPID', 19, 4.0 / 35.0, S_STALKER_DIE7) { }
	S_STALKER_DIE7('SPID', 20, 4.0 / 35.0, S_STALKER_DIE8) { A_Fall(); }
	S_STALKER_DIE8('SPID', 21, 4.0 / 35.0, S_STALKER_DIE9) { }
	S_STALKER_DIE9('SPID', 22, 4.0 / 35.0, S_STALKER_DIE10) { }
	S_STALKER_DIE10('SPID', 23 | FF_FULLBRIGHT, 4.0 / 35.0, S_STALKER_DIE11) { }
	S_STALKER_DIE11('SPID', 24 | FF_FULLBRIGHT, 4.0 / 35.0, S_STALKER_DIE12) { }
	S_STALKER_DIE12('SPID', 25 | FF_FULLBRIGHT, 4.0 / 35.0, S_STALKER_DIE13) { }
	S_STALKER_DIE13('SPID', 26 | FF_FULLBRIGHT, 4.0 / 35.0, none) { }
}

defaultproperties
{
	Health = 80;
	Radius = 31.0;
	Height = 25.0;
	Mass = 100.0;
	StepSpeed = 16.0;
	PainChance = 0.15625;
	bSpawnCeiling = true;
	bNoGravity = true;
	bDropOff = true;
	bInCombat = true;
	bNoBlood = true;
	IdleState = S_STALKER_INIT;
	SeeState = S_STALKER_RUN1;
	MeleeState = S_STALKER_ATK1;
	PainState = S_STALKER_PAIN;
	DeathState = S_STALKER_DIE1;
	SightSound = 'stalker/sight';
	ActiveSound = 'stalker/active';
	WalkSound = 'stalker/walk';
	AttackSound = 'stalker/attack';
	PainSound = 'stalker/pain';
	DeathSound = 'stalker/death';
}
