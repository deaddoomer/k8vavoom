//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Stalker : Pawn
	__mobjinfo__(186);

name WalkSound;

//==========================================================================
//
//	A_StalkerLook
//
//==========================================================================

final void A_StalkerLook()
{
	//	Set look state depending on floor/ceiling state.
	if (bNoGravity)
	{
		SetState(FindState('LookCeiling'));
	}
	else
	{
		SetState(FindState('LookFloor'));
	}
}

//==========================================================================
//
//	A_StalkerChase2
//
//==========================================================================

final void A_StalkerChase2()
{
	if (!bNoGravity)
	{
		//	Walking on floor.
		SetState(FindState('SeeFloor'));
	}
	else if (CeilingZ - Height > Origin.z)
	{
		//	Falling down.
		SetState(FindState('Land'));
	}
}

//==========================================================================
//
//	A_StalkerChase
//
//==========================================================================

final void A_StalkerChase()
{
	PlaySound(WalkSound, CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//	A_StalkerAttack
//
//==========================================================================

final void A_StalkerAttack()
{
	if (bNoGravity)
	{
		//	Land if we are on ceiling.
		SetState(FindState('Land'));
	}
	else
	{
		if (!Target)
			return;

		A_FaceTarget();

		if (CheckMeleeRange())
		{
			Target.Damage(self, self, (P_Random() & 7) * 2 + 2);
		}
	}
}

//==========================================================================
//
//	A_StalkerLand
//
//==========================================================================

final void A_StalkerLand()
{
	bNoGravity = false;
}

//==========================================================================
//
//	CheckMeleeRange
//
//==========================================================================

bool CheckMeleeRange()
{
	float	dist;

	if (!bNoGravity)
	{
		return ::CheckMeleeRange();
	}

	//	When walking on ceiling, ignore height difference.
	if (!Target)
	{
		return false;
	}

	dist = DistTo2(Target);

	if (dist >= MELEERANGE - 20.0 + Target.Radius)
	{
		return false;
	}

	if (!CanSee(Target))
	{
		return false;
	}

	return true;
}

//==========================================================================
//
//  A_Lights
//
//  Just spawn some dynamic light
//
//==========================================================================

final void A_Lights()
{
	SendExplosion(DLightColour, DLightRadius, Origin);
	bDynamicLight = false;
}

states
{
Spawn:
	SPID A 1 A_StalkerLook
	Loop
LookCeiling:
	SPID A 10 A_Look
	Loop
LookFloor:
	SPID J 10 A_Look
	Loop
See:
	SPID A 1 A_StalkerChase2
	SPID ABB 3 A_Chase
	SPID C 3 A_StalkerChase
	SPID C 3 A_Chase
	Loop
Melee:
	SPID J 3 A_FaceTarget
	SPID K 3 A_StalkerAttack
	Goto SeeFloor
Land:
	SPID C 2 A_StalkerLand
	SPID IHGFED 3
	Goto Melee
SeeFloor:
	SPID J 3 A_StalkerChase
	SPID JKK 3 A_Chase
	SPID L 3 A_StalkerChase
	SPID L 3 A_Chase
	Loop
Pain:
	SPID L 1 A_Pain
	Goto See
Death:
	SPID O 4
	SPID P 4 A_Scream
	SPID QRST 4
	SPID U 4 A_Fall
	SPID VW 4
	SPID X 4 Bright
	SPID Y 4 Bright A_Lights
	SPID Z 4 Bright
	SPID "[" 4 Bright
	Stop
}

defaultproperties
{
	Health = 80;
	Radius = 31.0;
	Height = 25.0;
	Mass = 100.0;
	Speed = 16.0 * 35.0;
	PainChance = 0.15625;
	bSpawnCeiling = true;
	bNoGravity = true;
	bDropOff = true;
	bInCombat = true;
	bNoBlood = true;
	SightSound = 'stalker/sight';
	ActiveSound = 'stalker/active';
	WalkSound = 'stalker/walk';
	AttackSound = 'stalker/attack';
	PainSound = 'stalker/pain';
	DeathSound = 'stalker/death';
	DLightColour = RGB(255, 128, 0);
	DLightRadius = 118.0;
}
