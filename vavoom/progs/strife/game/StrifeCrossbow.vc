//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StrifeCrossbow : StrifeWeapon
	__mobjinfo__(2001);

//==========================================================================
//
//	A_ShowElectricFlash
//
//==========================================================================

final void A_ShowElectricFlash()
{
	Owner.Player.SetViewState(ps_flash, FindState('ElectricFlash'));
}

//==========================================================================
//
//	A_FireElectricArrow
//
//==========================================================================

final void A_FireElectricArrow()
{
	float savedangle;

	savedangle = Owner.Angles.yaw;
	Owner.Angles.yaw = AngleMod360(Owner.Angles.yaw +
		(Random() - Random()) * 45.0 / 8.0 / itof(1 << (Player(Owner.Player).Accuracy * 5 / 100)));
	DepleteAmmo();
	Owner.SetState(Actor(Owner).MissileState);
	Actor(Owner).SpawnPlayerMissile(ElectricBolt);
	Owner.Angles.yaw = savedangle;
	Owner.PlaySound('weapons/xbowshoot', CHAN_WEAPON);
}

//==========================================================================
//
//	A_FirePoisonArrow
//
//==========================================================================

final void A_FirePoisonArrow()
{
	float savedangle;

	savedangle = Owner.Angles.yaw;
	Owner.Angles.yaw = AngleMod360(Owner.Angles.yaw +
		(Random() - Random()) * 45.0 / 8.0 / itof(1 << (Player(Owner.Player).Accuracy * 5 / 100)));
	DepleteAmmo();
	Owner.SetState(Actor(Owner).MissileState);
	Actor(Owner).SpawnPlayerMissile(PoisonBolt);
	Owner.Angles.yaw = savedangle;
	Owner.PlaySound('weapons/xbowshoot', CHAN_WEAPON);
}

states
{
Ready:
	XBOW A 0 A_ShowElectricFlash
	XBOW A 1 A_WeaponReady
	Wait
Deselect:
	XBOW A 1 A_Lower
	Loop
Select:
	XBOW A 1 A_Raise
	Loop
Fire:
	XBOW A 3 A_ClearFlash
	XBOW B 6 A_FireElectricArrow
	XBOW C 4
	XBOW D 6
	XBOW E 3
	XBOW F 5
	XBOW G 5 A_CheckReload
	Goto Ready
ElectricFlash:
	XBOW KLM 5
	Loop
Spawn:
	CBOW A -1
	Stop
}

defaultproperties
{
	SisterWeaponType = StrifeCrossbow2;
	Slot = 2;
	SelectionOrder = 1200;
	AmmoType1 = ElectricBolts;
	AmmoUse1 = 1;
	AmmoGive1 = 8;
	bNoAlert = true;
	ConversationID = 194;
	PickupMessage = "$txt_strifecrossbow";
}
