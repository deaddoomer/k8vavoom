//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MainGameInfo : LineSpecialGameInfo;

const int NUM_SPECIALS		= 236;

struct spec_trans_t
{
	int special;
	int arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;
	int spac;
	int repeat;
};

spec_trans_t spec_trans_tab[NUM_SPECIALS];

//==========================================================================
//
//	Init
//
//==========================================================================

void Init()
{
	::Init();
	InitTranslationTables();
}

//==========================================================================
//
//  InitNewGame
//
//==========================================================================

void InitNewGame(int skill)
{
	SetSkill(skill);
	nomonsters = GetCvar('NoMonsters');
	bRespawnItems = !!GetCvar('deathmatch');
	bWeaponsStay = netgame && GetCvar('deathmatch') < 2;
}

//==========================================================================
//
//	SetSkill
//
//==========================================================================

void SetSkill(int NewSkill)
{
	::SetSkill(NewSkill);
	respawnmonsters = WorldInfo.GameSkill == sk_nightmare || GetCvar('RespawnMonsters');
}

//==========================================================================
//
//  CreateWorldInfo
//
//==========================================================================

WorldInfo CreateWorldInfo()
{
	return WorldInfo(SpawnObject(StrifeWorldInfo));
}

//==========================================================================
//
//	InitTranslationTables
//
//==========================================================================

void InitTranslationTables()
{
	//  0
	SetLineTrans(1, LNSPEC_DoorRaise, 0, 16, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(2, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(3, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(4, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_CROSS, false);
	SetLineTrans(5, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(6, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_CROSS, false);
	SetLineTrans(7, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_USE, false);
	SetLineTrans(8, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_CROSS, false);
	SetLineTrans(9, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_USE, false);

	SetLineTrans(10, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_CROSS, false);
	SetLineTrans(11, LNSPEC_ExitNormal, -1, 0, 0, 0, 0, SPAC_USE, false); // --
	SetLineTrans(12, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(13, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(14, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_USE, false);
	SetLineTrans(15, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_USE, false);
	SetLineTrans(16, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_CROSS, false);
	SetLineTrans(17, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_CROSS, false);
	SetLineTrans(18, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(19, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_CROSS, false);

	SetLineTrans(20, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(21, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_USE, false);
	SetLineTrans(22, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(23, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(24, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_IMPACT, false);
	SetLineTrans(25, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_CROSS, false);
	SetLineTrans(26, LNSPEC_DoorLockedRaise, 0, 16, 150, 4, 0, SPAC_USE, true);
	SetLineTrans(27, LNSPEC_DoorLockedRaise, 0, 16, 150, 3, 0, SPAC_USE, true);
	SetLineTrans(28, LNSPEC_DoorLockedRaise, 0, 16, 150, 11, 0, SPAC_USE, true);
	SetLineTrans(29, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_USE, false);

	SetLineTrans(30, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(31, LNSPEC_DoorOpen, 0, 16, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(32, LNSPEC_DoorLockedRaise, 0, 16, 0, 4, 0, SPAC_USE, false);
	SetLineTrans(33, LNSPEC_DoorLockedRaise, 0, 16, 0, 11, 0, SPAC_USE, false);
	SetLineTrans(34, LNSPEC_DoorLockedRaise, 0, 16, 0, 3, 0, SPAC_USE, false);
	SetLineTrans(35, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(36, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_CROSS, false);
	SetLineTrans(37, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(38, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(39, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(40, LNSPEC_ACSExecuteWithResult, 0, 40, -1, 0, 0, SPAC_USE, false);
	SetLineTrans(41, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(42, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(43, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(44, LNSPEC_CeilingLowerAndCrush, -1, 8, 10, 0, 0, SPAC_CROSS, false);
	SetLineTrans(45, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_USE, true);
	SetLineTrans(46, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_IMPACT, true);
	SetLineTrans(47, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_IMPACT, false);
	SetLineTrans(48, LNSPEC_ScrollTextureLeft, 64, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(49, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_USE, false);

	SetLineTrans(50, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(51, LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_USE, false); // S1 EndLevelSecret
	SetLineTrans(52, LNSPEC_ACSExecuteWithResult, 0, 52, -1, 0, 0, SPAC_CROSS, false);
	SetLineTrans(53, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_CROSS, false);
	SetLineTrans(54, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(55, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_USE, false);
	SetLineTrans(56, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_CROSS, false);
	SetLineTrans(57, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(58, LNSPEC_FloorRaiseByValue, -1, 8, 64, 0, 0, SPAC_CROSS, false);
	SetLineTrans(59, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_CROSS, false);

	SetLineTrans(60, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(61, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(62, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_USE, true);
	SetLineTrans(63, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(64, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(65, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_USE, true);
	SetLineTrans(66, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_USE, true);
	SetLineTrans(67, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_USE, true);
	SetLineTrans(68, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(69, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_USE, true);

	SetLineTrans(70, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_USE, true);
	SetLineTrans(71, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_USE, false);
	SetLineTrans(72, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(73, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_CROSS, true);
	SetLineTrans(74, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(75, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(76, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_CROSS, true);
	SetLineTrans(77, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_CROSS, true);
	//  78
	SetLineTrans(79, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_CROSS, true);

	SetLineTrans(80, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(81, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(82, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(83, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_CROSS, true);
	SetLineTrans(84, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	//  85
	SetLineTrans(86, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(87, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_CROSS, true);
	SetLineTrans(88, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_CROSS, true);
	SetLineTrans(89, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_CROSS, true);

	SetLineTrans(90, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_CROSS, true);
	SetLineTrans(91, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(92, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_CROSS, true);
	SetLineTrans(93, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_CROSS, true);
	SetLineTrans(94, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_CROSS, true);
	SetLineTrans(95, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(96, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(97, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(98, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_CROSS, true);
	SetLineTrans(99, LNSPEC_DoorLockedRaise, -1, 64, 0, 4, 0, SPAC_USE, true);

	SetLineTrans(100, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_CROSS, false);
	SetLineTrans(101, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(102, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_USE, false);
	SetLineTrans(103, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(104, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(105, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_CROSS, true);
	SetLineTrans(106, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(107, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(108, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_CROSS, false);
	SetLineTrans(109, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(110, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(111, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_USE, false);
	SetLineTrans(112, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(113, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(114, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(115, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(116, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(117, LNSPEC_DoorRaise, 0, 64, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(118, LNSPEC_DoorOpen, 0, 64, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(119, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(120, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_CROSS, true);
	SetLineTrans(121, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_CROSS, false);
	SetLineTrans(122, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_USE, false);
	SetLineTrans(123, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_USE, true);
	SetLineTrans(124, LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_CROSS, false); // W1 EndLevelSecret UNUSED
	SetLineTrans(125, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCROSS, false);
	SetLineTrans(126, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCROSS, true);
	SetLineTrans(127, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_USE, false);
	SetLineTrans(128, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(129, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, true);

	SetLineTrans(130, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(131, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(132, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(133, LNSPEC_DoorLockedRaise, -1, 64, 0, 4, 0, SPAC_USE, false);
	SetLineTrans(134, LNSPEC_DoorLockedRaise, -1, 64, 0, 11, 0, SPAC_USE, true);
	SetLineTrans(135, LNSPEC_DoorLockedRaise, -1, 64, 0, 11, 0, SPAC_USE, false);
	SetLineTrans(136, LNSPEC_DoorLockedRaise, -1, 64, 0, 3, 0, SPAC_USE, true);
	SetLineTrans(137, LNSPEC_DoorLockedRaise, -1, 64, 0, 3, 0, SPAC_USE, false);
	SetLineTrans(138, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(139, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_USE, true);

	SetLineTrans(140, LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_USE, false);
	SetLineTrans(141, LNSPEC_CeilingCrushAndRaiseSilentA, -1, 8, 8, 10, 0, SPAC_CROSS, false);
	SetLineTrans(142, LNSPEC_ScrollTextureUp, 64, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(143, LNSPEC_ScrollTextureDown, 64, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(144, LNSPEC_DoorAnimated, -1, 4, 105, 0, 0, SPAC_USE, true);
	SetLineTrans(145, LNSPEC_ACSExecuteWithResult, 0, 145, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(146, LNSPEC_StairsGeneric, -1, 16, 16, 0, 0, SPAC_USE, false);
	SetLineTrans(147, LNSPEC_ClearForceField, -1, 0, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(148, LNSPEC_ForceField, -1, 0, 0, 0, 0, SPAC_USE, true);
	//  149 UNUSED

	SetLineTrans(150, LNSPEC_NoiseAlert, 0, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(151, LNSPEC_DoorLockedRaise, -1, 64, 0, 9, 0, SPAC_USE, true);
	SetLineTrans(152, LNSPEC_DoorLockedRaise, -1, 64, 0, 17, 0, SPAC_USE, true);
	SetLineTrans(153, LNSPEC_DoorLockedRaise, -1, 64, 0, 12, 0, SPAC_USE, true);
	SetLineTrans(154, LNSPEC_ACSLockedExecute, 0, 0, 154, -1, 9, SPAC_USE, true);
	SetLineTrans(155, LNSPEC_PlatUpWaitDownStay, -1, 32, 105, 0, 0, SPAC_USE, true);
	SetLineTrans(156, LNSPEC_DoorLockedRaise, 0, 16, 0, 17, 0, SPAC_USE, false);
	SetLineTrans(157, LNSPEC_DoorLockedRaise, 0, 16, 0, 12, 0, SPAC_USE, false);
	SetLineTrans(158, LNSPEC_DoorLockedRaise, 0, 16, 0, 9, 0, SPAC_USE, false);
	SetLineTrans(159, LNSPEC_DoorLockedRaise, 0, 16, 150, 9, 0, SPAC_USE, true);

	SetLineTrans(160, LNSPEC_DoorLockedRaise, 0, 16, 150, 12, 0, SPAC_USE, true);
	//  161 (Teaser governor's room)
	SetLineTrans(162, LNSPEC_DoorLockedRaise, -1, 64, 0, 17, 0, SPAC_USE, false);
	SetLineTrans(163, LNSPEC_DoorLockedRaise, -1, 64, 0, 12, 0, SPAC_USE, false);
	SetLineTrans(164, LNSPEC_DoorLockedRaise, -1, 64, 0, 9, 0, SPAC_USE, false);
	SetLineTrans(165, LNSPEC_DoorLockedRaise, 0, 0, 0, 102, 0, SPAC_USE, true);
	SetLineTrans(166, LNSPEC_DoorLockedRaise, 0, 16, 150, 6, 0, SPAC_USE, true);
	SetLineTrans(167, LNSPEC_DoorLockedRaise, -1, 64, 0, 6, 0, SPAC_USE, false);
	SetLineTrans(168, LNSPEC_DoorLockedRaise, -1, 64, 0, 6, 0, SPAC_USE, true);
	SetLineTrans(169, LNSPEC_DoorLockedRaise, 0, 16, 0, 1, 0, SPAC_USE, false);

	SetLineTrans(170, LNSPEC_DoorLockedRaise, 0, 16, 150, 2, 0, SPAC_USE, true);
	SetLineTrans(171, LNSPEC_DoorLockedRaise, -1, 16, 0, 5, 0, SPAC_USE, false);
	SetLineTrans(172, LNSPEC_DoorLockedRaise, -1, 16, 0, 7, 0, SPAC_USE, true);
	SetLineTrans(173, LNSPEC_DoorLockedRaise, -1, 16, 0, 8, 0, SPAC_USE, true);
	SetLineTrans(174, LNSPEC_ACSExecuteWithResult, 0, 174, -1, 0, 0, SPAC_CROSS, false);
	SetLineTrans(175, LNSPEC_ACSExecuteWithResult, 0, 175, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(176, LNSPEC_DoorLockedRaise, -1, 16, 0, 10, 0, SPAC_USE, true);
	SetLineTrans(177, LNSPEC_ACSLockedExecute, 0, 0, 177, -1, 10, SPAC_USE, true);
	SetLineTrans(178, LNSPEC_StairsGeneric, -1, 16, 16, 0, 0, SPAC_CROSS, false);
	SetLineTrans(179, LNSPEC_CeilingLowerAndCrush, -1, 8, 1, 0, 0, SPAC_CROSS, false);

	SetLineTrans(180, LNSPEC_ACSExecuteWithResult, 0, 180, -1, 0, 0, SPAC_IMPACT, false);
	SetLineTrans(181, LNSPEC_ACSExecuteWithResult, 0, 181, -1, 0, 0, SPAC_USE, false);
	SetLineTrans(182, 49, -1, 255, 0, 0, 0, SPAC_PTOUCH, false);
	SetLineTrans(183, LNSPEC_ACSExecuteWithResult, 0, 183, -1, 0, 0, SPAC_CROSS, false);
	SetLineTrans(184, LNSPEC_ACSExecuteWithResult, 0, 184, -1, 0, 0, SPAC_CROSS, true); // SR?
	SetLineTrans(185, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(186, LNSPEC_ACSExecuteWithResult, 0, 186, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(187, LNSPEC_ACSExecuteWithResult, 0, 187, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(188, LNSPEC_ACSExecuteWithResult, 0, 188, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(189, LNSPEC_ACSLockedExecute, 0, 0, 189, -1, 13, SPAC_USE, false);

	SetLineTrans(190, LNSPEC_DoorLockedRaise, 0, 16, 150, 14, 0, SPAC_USE, true);
	SetLineTrans(191, LNSPEC_DoorLockedRaise, -1, 16, 0, 14, 0, SPAC_USE, true);
	SetLineTrans(192, LNSPEC_DoorLockedRaise, -1, 16, 0, 16, 0, SPAC_USE, false);
	SetLineTrans(193, LNSPEC_ACSExecuteWithResult, 0, 193, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(194, LNSPEC_ACSExecuteWithResult, 0, 194, -1, 0, 0, SPAC_USE, false);
	SetLineTrans(195, LNSPEC_TeleportZombieChanger, 0, -1, 0, 0, 0, SPAC_MCROSS, true);
	SetLineTrans(196, LNSPEC_ACSExecuteWithResult, 0, 196, -1, 0, 0, SPAC_CROSS, true); // TRIGGER? UNUSED
	SetLineTrans(197, LNSPEC_ACSExecuteWithResult, 0, 197, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(198, LNSPEC_ACSExecuteWithResult, 0, 198, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(199, LNSPEC_ACSExecuteWithResult, 0, 199, -1, 0, 0, SPAC_USE, false);

	SetLineTrans(200, LNSPEC_ACSExecuteWithResult, 0, 200, -1, 0, 0, SPAC_CROSS, true);
	//  201 SR PlaySound UNUSED
	SetLineTrans(202, 174, -1, 0, 1, 0, 0, SPAC_CROSS, false);
	SetLineTrans(203, LNSPEC_ACSExecuteWithResult, 0, 203, -1, 0, 0, SPAC_USE, true);
	SetLineTrans(204, LNSPEC_ACSExecuteWithResult, 0, 204, -1, 0, 0, SPAC_USE, false);
	SetLineTrans(205, LNSPEC_DoorLockedRaise, 0, 0, 0, 103, 0, SPAC_USE, true);
	SetLineTrans(206, LNSPEC_ACSExecuteWithResult, 0, 206, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(207, LNSPEC_DoorAnimated, -1, 4, 105, 0, 0, SPAC_USE, true);
	SetLineTrans(208, LNSPEC_ACSExecuteWithResult, 0, 208, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(209, LNSPEC_ACSExecuteWithResult, 0, 209, -1, 0, 0, SPAC_USE, false);

	SetLineTrans(210, 174, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	//  211 S1 PlaySound UNUSED
	SetLineTrans(212, LNSPEC_ACSExecuteWithResult, 0, 212, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(213, LNSPEC_ACSExecuteWithResult, 0, 213, -1, 0, 0, SPAC_USE, true);
	SetLineTrans(214, LNSPEC_ACSExecuteWithResult, 0, 214, -1, 0, 0, SPAC_USE, true);
	SetLineTrans(215, LNSPEC_ACSExecuteWithResult, 0, 215, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(216, LNSPEC_ACSExecuteWithResult, 0, 216, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(217, LNSPEC_DoorLockedRaise, 0, 16, 150, 23, 0, SPAC_USE, true);
	//  218 W1 Clear NonBlock Quest UNUSED
	SetLineTrans(219, LNSPEC_ACSLockedExecute, 0, 0, 219, -1, 18, SPAC_USE, false);

	SetLineTrans(220, LNSPEC_ACSLockedExecute, 0, 0, 220, -1, 19, SPAC_USE, false);
	SetLineTrans(221, LNSPEC_DoorLockedRaise, 0, 16, 150, 24, 0, SPAC_USE, true);
	SetLineTrans(222, LNSPEC_DoorLockedRaise, -1, 16, 0, 25, 0, SPAC_USE, false); // ??? Realy a key?
	SetLineTrans(223, LNSPEC_DoorLockedRaise, -1, 16, 0, 26, 0, SPAC_USE, true);
	SetLineTrans(224, LNSPEC_DoorLockedRaise, 0, 16, 0, 20, 0, SPAC_USE, false);
	SetLineTrans(225, LNSPEC_DoorLockedRaise, 0, 16, 0, 21, 0, SPAC_USE, false);
	SetLineTrans(226, LNSPEC_ACSExecuteWithResult, 0, 226, -1, 0, 0, SPAC_USE, false);
	SetLineTrans(227, LNSPEC_ACSExecuteWithResult, 0, 227, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(228, LNSPEC_ACSExecuteWithResult, 0, 228, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(229, LNSPEC_ACSExecuteWithResult, 0, 229, -1, 0, 0, SPAC_USE, true);

	SetLineTrans(230, LNSPEC_ACSExecuteWithResult, 0, 230, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(231, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCROSS, true); // ??? (InSou)
	SetLineTrans(232, LNSPEC_ACSExecuteWithResult, 0, 232, -1, 0, 0, SPAC_USE, true);
	SetLineTrans(233, LNSPEC_ACSExecuteWithResult, 0, 233, -1, 0, 0, SPAC_USE, false);
	SetLineTrans(234, LNSPEC_ACSExecuteWithResult, 0, 234, -1, 0, 0, SPAC_USE, true);
	SetLineTrans(235, LNSPEC_ACSExecuteWithResult, 0, 235, -1, 0, 0, SPAC_USE, false);
}

//==========================================================================
//
//	SetLineTrans
//
//==========================================================================

void SetLineTrans(int i, int special, int arg1, int arg2, int arg3,
	int arg4, int arg5, int spac, int repeat)
{
	spec_trans_tab[i].special = special;
	spec_trans_tab[i].arg1 = arg1;
	spec_trans_tab[i].arg2 = arg2;
	spec_trans_tab[i].arg3 = arg3;
	spec_trans_tab[i].arg4 = arg4;
	spec_trans_tab[i].arg5 = arg5;
	spec_trans_tab[i].spac = spac;
	spec_trans_tab[i].repeat = repeat;
}

//==========================================================================
//
//  TranslateLine
//
//==========================================================================

void TranslateLine(line_t* line)
{
	int			OldSpec;
	int			OldTag;
	int			OldFlags;

	OldSpec = line->special;
	OldTag = line->arg1;
	OldFlags = line->flags;

	line->flags &= 0x01ff;
	if (OldFlags & ML_RAILING_STRIFE)
	{
		line->flags |= ML_RAILING;
	}
	if (OldFlags & ML_BLOCK_FLOATERS_STRIFE)
	{
		line->flags |= ML_BLOCK_FLOATERS;
	}

	if (!line->special)
	{
		if (OldFlags & ML_TRANSLUCENT_STRIFE)
		{
			line->special = LNSPEC_LineTranslucent;
			line->arg2 = 170;
		}
		return;
	}

	if (line->special >= NUM_SPECIALS)
	{
		line->special = 0;
		line->arg1 = 0;
		return;
	}

	//	Special.
	line->special = spec_trans_tab[OldSpec].special;
	//	Arg 1.
	if (spec_trans_tab[OldSpec].arg1 == -1)
	{
		line->arg1 = OldTag;
	}
	else
	{
		line->arg1 = spec_trans_tab[OldSpec].arg1;
	}
	//	Arg 2.
	if (spec_trans_tab[OldSpec].arg2 == -1)
	{
		line->arg2 = OldTag;
	}
	else
	{
		line->arg2 = spec_trans_tab[OldSpec].arg2;
	}
	//	Arg 3.
	if (spec_trans_tab[OldSpec].arg3 == -1)
	{
		line->arg3 = OldTag;
	}
	else
	{
		line->arg3 = spec_trans_tab[OldSpec].arg3;
	}
	//	Arg 4.
	if (spec_trans_tab[OldSpec].arg4 == -1)
	{
		line->arg4 = OldTag;
	}
	else
	{
		line->arg4 = spec_trans_tab[OldSpec].arg4;
	}
	//	Arg 5.
	if (spec_trans_tab[OldSpec].arg5 == -1)
	{
		line->arg5 = OldTag;
	}
	else
	{
		line->arg5 = spec_trans_tab[OldSpec].arg5;
	}
	//	Activation flags.
	line->flags |= spec_trans_tab[OldSpec].spac << ML_SPAC_SHIFT;
	if (spec_trans_tab[OldSpec].repeat)
	{
		line->flags |= ML_REPEAT_SPECIAL;
	}

	if (OldFlags & ML_TRANSLUCENT_STRIFE)
	{
		if (line->special == 49)
		{
			line->arg2 = 170;
		}
		else
		{
			print("Translucent flag not compatible with line special");
		}
	}
}

//==========================================================================
//
//  TranslateSector
//
//==========================================================================

void TranslateSector(sector_t* sector)
{
	int special;
	int high;

	special = sector->special;
	if (!special)
	{
		return;
	}
	if (special == 9)
	{
		sector->special = SECSPEC_SECRET_MASK;
		return;
	}

	//	This supports phased lighting with specials 21-24 and wind specials
	// 40-51.
	high = (sector->special & 0xfe0) << 3;
	special &= 0x01f;
	if (special == 5 || special == 15 || special == 16 || special == 18)
	{
		sector->special = high | (special + 100);
	}
	else if (special < 21)
	{
		sector->special = high | (special + 64);
	}
	else if (special < 40)
	{
		sector->special = high | (special - 20);
	}
	else
	{
		sector->special = high | special;
	}
}

//==========================================================================
//
//  TranslateThing
//
//==========================================================================

void TranslateThing(mthing_t* mthing)
{
	int flags;

	// translate the spawn flags to Hexen format.
	flags = mthing->options;
	mthing->options = (flags & 0x7) | 0x7e0;
	if (flags & 0x10)
	{
		mthing->options &= ~StrifeLevelInfo::MTF_GSINGLE;
	}
	if (flags & 0x08)
	{
		mthing->options |= LineSpecialLevelInfo::MTF_STANDSTILL;
	}
	if (flags & 0x20)
	{
		mthing->options |= LineSpecialLevelInfo::MTF_AMBUSH;
	}
	if (flags & 0x40)
	{
		mthing->options |= LineSpecialLevelInfo::MTF_FRIENDLY;
	}
	if (flags & 0x100)
	{
		mthing->options |= LineSpecialLevelInfo::MTF_SHADOW;
	}
	if (flags & 0x200)
	{
		mthing->options |= LineSpecialLevelInfo::MTF_ALTSHADOW;
	}
}

//==========================================================================
//
//  TranslateLevel
//
//==========================================================================

void TranslateLevel(Level InLevel)
{
	int i;

	for (i = 0; i < InLevel.NumLines; i++)
	{
		TranslateLine(&InLevel.Lines[i]);
	}

	for (i = 0; i < InLevel.NumSectors; i++)
	{
		TranslateSector(&InLevel.Sectors[i]);
	}

	for (i = 0; i < InLevel.NumThings; i++)
	{
		TranslateThing(&InLevel.Things[i]);
	}
}

//==========================================================================
//
//  GetConScriptName
//
//==========================================================================

name GetConScriptName(name LevelName)
{
	int i;

	//	Since we don't have advanced format specifiers we need two loops.
	for (i = 1; i < 9; i++)
	{
		if (LevelName == StrToName(va("map0%d", i)))
			return StrToName(va("script0%d", i));
	}
	for (i = 10; i < 99; i++)
	{
		if (LevelName == StrToName(va("map%d", i)))
			return StrToName(va("script%d", i));
	}
	return '';
}

defaultproperties
{
	LevelInfoClass = StrifeLevelInfo;
	GameFilterFlag = EntityEx::GAME_Strife;
	AcsHelper = 'strfhelp';
	GenericConScript = 'script00';
	TeleportFogClass = TeleportFog;
	DefaultKickBack = 100.0;
	bDefaultLaxMonsterActivation = true;
	bBabyNightmareDoubleAmmo = true;
	bNightmareExtraAmmo = false;
	bAlwaysSwitchNewWeapon = true;
	bBloodSpray = true;
	PlayerClasses.Num = 1;
	PlayerClasses[0] = StrifePlayer;
	WeaponSlots[1].Weapons[0] = PunchDagger;
	WeaponSlots[2].Weapons[0] = StrifeCrossbow2;
	WeaponSlots[2].Weapons[1] = StrifeCrossbow;
	WeaponSlots[3].Weapons[0] = AssaultGun;
	WeaponSlots[4].Weapons[0] = MiniMissileLauncher;
	WeaponSlots[5].Weapons[0] = StrifeGrenadeLauncher2;
	WeaponSlots[5].Weapons[1] = StrifeGrenadeLauncher;
	WeaponSlots[6].Weapons[0] = FlameThrower;
	WeaponSlots[7].Weapons[0] = Mauler2;
	WeaponSlots[7].Weapons[1] = Mauler;
	WeaponSlots[8].Weapons[0] = Sigil;
}
