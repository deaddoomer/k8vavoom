//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Programmer : Pawn
	__mobjinfo__(71);

//==========================================================================
//
//	NoBlockingSet
//
//==========================================================================

void NoBlockingSet()
{
	DropItem(Sigil1, 0, 1.0);
}

//==========================================================================
//
//	A_ProgrammerMelee
//
//==========================================================================

final void A_ProgrammerMelee()
{
	if (!Target)
		return;

	A_FaceTarget();

	if (CheckMeleeRange())
	{
		PlaySound('programmer/clank', CHAN_WEAPON);
		Target.Damage(self, self, ((P_Random() % 10) + 1) * 6);
	}
}

//==========================================================================
//
//	A_SpawnProgrammerBase
//
//==========================================================================

final void A_SpawnProgrammerBase()
{
	//	Spawn separate base object.
	TossUpObject(ProgrammerBase);
}

//==========================================================================
//
//	A_ProgrammerDeath
//
//==========================================================================

final void A_ProgrammerDeath()
{
	if (!CheckBossDeath())
	{
		return;
	}
	//	Call death script.
	XLevel.StartACS(250, 0, 0, 0, 0, self, NULL, 0, false, false);
}

//==========================================================================
//
//  A_Lights
//
//  Just spawn some dynamic light
//
//==========================================================================

final void A_Lights()
{
	SendExplosion(DLightColour, DLightRadius, Origin);
	bDynamicLight = false;
}

states
{
Spawn:
	PRGR A 5 A_Look
	PRGR A 1 A_FlightChase
	Loop
See:
	PRGR A 160 A_FlightChase
	PRGR BCD 5 A_FlightChase
	PRGR EF 2 A_FlightChase
	PRGR EF 3 A_Chase
	Goto See+4
Melee:
	PRGR E 2 A_FlightChase
	PRGR F 3 A_FlightChase
	PRGR E 3 A_FaceTarget
	PRGR F 4 A_ProgrammerMelee
	Goto See+4
Missile:
	PRGR G 5 A_FaceTarget
	PRGR H 5 A_FlightChase
	PRGR I 5 Bright A_FaceTarget
	PRGR J 5 Bright A_SpecterAttack
	Goto See+4
Pain:
	PRGR K 5 A_Pain
	PRGR L 5 A_FlightChase
	Goto See+4
Death:
	PRGR L 7 Bright A_XDying
	PRGR M 7 Bright A_Scream
	PRGR N 7 Bright { A_XDying(); A_Lights(); }
	PRGR O 7 Bright A_Fall
	PRGR P 7 Bright A_XDying
	PRGR Q 7 Bright A_SpawnProgrammerBase
	PRGR R 7 Bright
	PRGR S 6 Bright
	PRGR TUVW 5 Bright
	PRGR X 32 Bright
	PRGR Y -1 Bright A_ProgrammerDeath
	Stop
}

defaultproperties
{
	Health = 1100;
	Radius = 45.0;
	Height = 60.0;
	Mass = 800.0;
	StepSpeed = 26.0;
	PainChance = 0.1953125;
	MissileDamage = 4;
	bNoGravity = true;
	bLookAllAround = true;
	bFloat = true;
	bNoBlood = true;
	bNoDeathmatch = true;
	bNoBlockMonst = true;
	ActiveSound = 'programmer/active';
	AttackSound = 'programmer/attack';
	PainSound = 'programmer/pain';
	DeathSound = 'programmer/death';
	DLightColour = RGB(255, 128, 0);
	DLightRadius = 200.0;
}
