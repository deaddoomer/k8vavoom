//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StatusBarScreen : Window;

MainClientState cl;

bool bShowWeapons;
bool bShowKeys;
bool bShowObjectives;
int KeysPage;

int pic_invback;
int pic_invtop;
int pic_invpop;
int pic_invpop2;
int pic_invpbak;
int pic_invpbak2;
int pic_pause;
int pic_yellownum[11];
int pic_graynum[11];
int pic_inv[StrifeDefs::NUMINVITEMS];
int pic_invcurs;
int pic_crossbow;
int pic_riffle;
int pic_missile;
int pic_grenade;
int pic_flame;
int pic_blaster;
int pic_sigil[5];
int pic_i_comm;
int pic_key[StrifeDefs::NUMKEYS];
int pic_ammo[StrifeDefs::NUMAMMO];
int pic_backpack;

int LoadedLog;
int LogText[1024 / 4];

int AmmoPosY[StrifeDefs::NUMAMMO];
string KeyNames[StrifeDefs::NUMKEYS];

//==========================================================================
//
//  StartMap
//
//==========================================================================

void StartMap()
{
	int namebuf[3];
	string Name = ARR2STR(namebuf);
	int i;

	pic_invback = R_RegisterPic("INVBACK", PIC_PATCH);
	pic_invtop = R_RegisterPic("INVTOP", PIC_PATCH);
	pic_invpop = R_RegisterPic("INVPOP", PIC_PATCH);
	pic_invpop2 = R_RegisterPic("INVPOP2", PIC_PATCH);
	pic_invpbak = R_RegisterPic("INVPBAK", PIC_PATCH);
	pic_invpbak2 = R_RegisterPic("INVPBAK2", PIC_PATCH);

	for (i = 0; i < 10; i++)
	{
		sprint(Name, "INVFONY%d", i);
		pic_yellownum[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "INVFONG%d", i);
		pic_graynum[i] = R_RegisterPic(Name, PIC_PATCH);
	}
	pic_yellownum[10] = R_RegisterPic("INVFONY%", PIC_PATCH);
	pic_graynum[10] = R_RegisterPic("INVFONG%", PIC_PATCH);

	pic_inv[0] = R_RegisterPic("I_STMP", PIC_PATCH);
	pic_inv[1] = R_RegisterPic("I_MDKT", PIC_PATCH);
	pic_inv[2] = R_RegisterPic("I_FULL", PIC_PATCH);
	pic_inv[3] = R_RegisterPic("I_XPRK", PIC_PATCH);
	pic_inv[4] = R_RegisterPic("I_ARM1", PIC_PATCH);
	pic_inv[5] = R_RegisterPic("I_ARM2", PIC_PATCH);
	pic_inv[6] = R_RegisterPic("I_SHD1", PIC_PATCH);
	pic_inv[7] = R_RegisterPic("I_MASK", PIC_PATCH);
	pic_inv[8] = R_RegisterPic("I_UNIF", PIC_PATCH);
	pic_inv[9] = R_RegisterPic("I_OFIC", PIC_PATCH);
	pic_inv[10] = R_RegisterPic("I_PMUP", PIC_PATCH);//"I_PMAP", - pic doesn't exist.
	pic_inv[11] = R_RegisterPic("I_PMUP", PIC_PATCH);
	pic_inv[12] = R_RegisterPic("I_BEAC", PIC_PATCH);
	pic_inv[13] = R_RegisterPic("I_TARG", PIC_PATCH);
	pic_inv[14] = R_RegisterPic("I_COIN", PIC_PATCH);
	pic_inv[15] = R_RegisterPic("I_RING", PIC_PATCH);
	pic_inv[16] = R_RegisterPic("I_RELC", PIC_PATCH);
	pic_inv[17] = R_RegisterPic("I_EARS", PIC_PATCH);
	pic_inv[18] = R_RegisterPic("I_BFLM", PIC_PATCH);
	pic_inv[19] = R_RegisterPic("I_COUP", PIC_PATCH);
	pic_inv[20] = R_RegisterPic("I_TOKN", PIC_PATCH);
	pic_inv[21] = R_RegisterPic("I_TOKN", PIC_PATCH);
	pic_inv[22] = R_RegisterPic("I_HELT", PIC_PATCH);
	pic_inv[23] = R_RegisterPic("I_GUNT", PIC_PATCH);
	pic_inv[24] = R_RegisterPic("I_OTOK", PIC_PATCH);
	pic_invcurs = R_RegisterPic("INVCURS", PIC_PATCH);

	pic_key[0] = R_RegisterPic("I_FUSL", PIC_PATCH);
	pic_key[1] = R_RegisterPic("I_REBL", PIC_PATCH);
	pic_key[2] = R_RegisterPic("I_TPAS", PIC_PATCH);
	pic_key[3] = R_RegisterPic("I_CRD1", PIC_PATCH);
	pic_key[4] = R_RegisterPic("I_PRIS", PIC_PATCH);
	pic_key[5] = R_RegisterPic("I_HAND", PIC_PATCH);
	pic_key[6] = R_RegisterPic("I_PWR1", PIC_PATCH);
	pic_key[7] = R_RegisterPic("I_PWR2", PIC_PATCH);
	pic_key[8] = R_RegisterPic("I_KY1G", PIC_PATCH);
	pic_key[9] = R_RegisterPic("I_PWR3", PIC_PATCH);
	pic_key[10] = R_RegisterPic("I_CRD2", PIC_PATCH);
	pic_key[11] = R_RegisterPic("I_KY2S", PIC_PATCH);
	pic_key[12] = R_RegisterPic("I_ORAC", PIC_PATCH);
	pic_key[13] = R_RegisterPic("I_GYID", PIC_PATCH);
	pic_key[14] = R_RegisterPic("I_FUBR", PIC_PATCH);
	pic_key[15] = R_RegisterPic("I_WARE", PIC_PATCH);
	pic_key[16] = R_RegisterPic("I_KY3B", PIC_PATCH);
	pic_key[17] = R_RegisterPic("I_RCRY", PIC_PATCH);
	pic_key[18] = R_RegisterPic("I_BCRY", PIC_PATCH);
	pic_key[19] = R_RegisterPic("I_CHAP", PIC_PATCH);
	pic_key[20] = R_RegisterPic("I_TUNL", PIC_PATCH);
	pic_key[21] = R_RegisterPic("I_SECK", PIC_PATCH);
	pic_key[22] = R_RegisterPic("I_GOID", PIC_PATCH);
	pic_key[23] = R_RegisterPic("I_BLTK", PIC_PATCH);
	pic_key[24] = R_RegisterPic("I_PROC", PIC_PATCH);
	pic_key[25] = R_RegisterPic("I_MINE", PIC_PATCH);
	pic_key[26] = R_RegisterPic("I_BLTK", PIC_PATCH);

	pic_crossbow = R_RegisterPic("CBOWA0", PIC_PATCH);
	pic_riffle = R_RegisterPic("RIFLA0", PIC_PATCH);
	pic_missile = R_RegisterPic("MMSLA0", PIC_PATCH);
	pic_grenade = R_RegisterPic("GRNDA0", PIC_PATCH);
	pic_flame = R_RegisterPic("FLAMA0", PIC_PATCH);
	pic_blaster = R_RegisterPic("TRPDA0", PIC_PATCH);
	pic_sigil[0] = R_RegisterPic("I_SGL1", PIC_PATCH);
	pic_sigil[1] = R_RegisterPic("I_SGL2", PIC_PATCH);
	pic_sigil[2] = R_RegisterPic("I_SGL3", PIC_PATCH);
	pic_sigil[3] = R_RegisterPic("I_SGL4", PIC_PATCH);
	pic_sigil[4] = R_RegisterPic("I_SGL5", PIC_PATCH);
	pic_i_comm = R_RegisterPic("I_COMM", PIC_PATCH);
	pic_ammo[StrifeDefs::am_clip] = R_RegisterPic("I_BLIT", PIC_PATCH);
	pic_ammo[StrifeDefs::am_electric_arrow] = R_RegisterPic("I_XQRL", PIC_PATCH);
	pic_ammo[StrifeDefs::am_poison_arrow] = R_RegisterPic("I_PQRL", PIC_PATCH);
	pic_ammo[StrifeDefs::am_cell] = R_RegisterPic("I_BRY1", PIC_PATCH);
	pic_ammo[StrifeDefs::am_misl] = R_RegisterPic("I_ROKT", PIC_PATCH);
	pic_ammo[StrifeDefs::am_grenade1] = R_RegisterPic("I_GRN1", PIC_PATCH);
	pic_ammo[StrifeDefs::am_grenade2] = R_RegisterPic("I_GRN2", PIC_PATCH);
	pic_backpack = R_RegisterPic("I_BKPK", PIC_PATCH);

	pic_pause = R_RegisterPic("M_PAUSE", PIC_PATCH);

	LoadedLog = 0;
	strcpy(ARR2STR(LogText), "Find help");
}

//==========================================================================
//
//	SB_DrawSmallNum
//
//==========================================================================

void SB_DrawSmallNum(int x, int y, int num)
{
	int w;
	picinfo_t info;

	if (num < 0)
	{
		num = -num;
	}

	R_GetPicInfo(pic_yellownum[0], &info);
	w = info.width;

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic(x - w, y, pic_yellownum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic(x, y, pic_yellownum[num % 10]);
		num /= 10;
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar()
{
	int Idx;
	int i;
	int NumKeys;

	//  background
	R_DrawPic(0, 168, pic_invback);
	R_DrawPic(0, 160, pic_invtop);

	// health percentage
	SB_DrawSmallNum(76, 162, cl.health);

	if (cl.Cheats & StrifeDefs::CF_GODMODE)
	{
		R_FillRect(49, 172, 200, 2, 0xffffff00);
		R_FillRect(49, 175, 200, 2, 0xffffff00);
	}
	else if (cl.health > 100)
	{
		i = 20000 / cl.health;
		R_FillRect(49, 172, i, 2, 0xff00ff00);
		R_FillRect(49, 175, i, 2, 0xff00ff00);
		R_FillRect(49 + i, 172, 200 - i, 2, 0xff7f7fff);
		R_FillRect(49 + i, 175, 200 - i, 2, 0xff7f7fff);
	}
	else if (cl.health > 20)
	{
		R_FillRect(49, 172, cl.health * 2, 2, 0xff00ff00);
		R_FillRect(49, 175, cl.health * 2, 2, 0xff00ff00);
	}
	else if (cl.health > 10)
	{
		R_FillRect(49, 172, cl.health * 2, 2, 0xffffff00);
		R_FillRect(49, 175, cl.health * 2, 2, 0xffffff00);
	}
	else
	{
		R_FillRect(49, 172, cl.health * 2, 2, 0xffff0000);
		R_FillRect(49, 175, cl.health * 2, 2, 0xffff0000);
	}

	// armor percentage
	if (cl.ArmorPoints > 0)
	{
		if (cl.ArmorType == 2)
		{
			R_DrawPic(8, 175, pic_inv[StrifeDefs::ITEM_MetalArmor]);
		}
		else
		{
			R_DrawPic(8, 175, pic_inv[StrifeDefs::ITEM_LeatherArmor]);
		}
		SB_DrawSmallNum(24, 192, cl.ArmorPoints);
	}

	Idx = 0;
	for (i = cl.InvFirst; Idx < 6 && i < StrifeDefs::NUMINVITEMS; i++)
	{
		if (cl.Inventory[i])
		{
			if (cl.InvCursor == i)
			{
				R_DrawPic(42 + 35 * Idx, 180, pic_invcurs);
			}
			R_DrawPic(48 + Idx * 35, 182, pic_inv[i]);
			SB_DrawSmallNum(76 + Idx * 35, 192, cl.Inventory[i]);
			Idx++;
		}
	}

	if (cl.WeaponOwned[StrifeDefs::wp_sigil])
	{
		R_DrawPic(253, 175, pic_sigil[cl.Sigil]);
	}

	if (cl.ReadyAmmo != StrifeDefs::am_noammo)
	{
		SB_DrawSmallNum(310, 162, cl.Ammo[cl.ReadyAmmo]);
		R_DrawPic(290, 181, pic_ammo[cl.ReadyAmmo]);
	}

	if (bShowWeapons)
	{
		R_DrawPic2(0, 56, pic_invpbak, 33);
		R_DrawPic(0, 56, pic_invpop);
		if (cl.WeaponOwned[StrifeDefs::wp_crossbow])
		{
			R_DrawPic(38, 86, pic_crossbow);
		}
		if (cl.WeaponOwned[StrifeDefs::wp_riffle])
		{
			R_DrawPic(40, 107, pic_riffle);
		}
		if (cl.WeaponOwned[StrifeDefs::wp_missile])
		{
			R_DrawPic(39, 131, pic_missile);
		}
		if (cl.WeaponOwned[StrifeDefs::wp_grenade])
		{
			R_DrawPic(78, 87, pic_grenade);
		}
		if (cl.WeaponOwned[StrifeDefs::wp_flame])
		{
			R_DrawPic(80, 117, pic_flame);
		}
		if (cl.WeaponOwned[StrifeDefs::wp_blaster])
		{
			R_DrawPic(75, 142, pic_blaster);
		}
		for (i = 0; i < StrifeDefs::NUMAMMO; i++)
		{
			SB_DrawSmallNum(205, AmmoPosY[i], cl.Ammo[i]);
			SB_DrawSmallNum(238, AmmoPosY[i], cl.MaxAmmo[i] * (cl.Backpack ? 2 : 1));
		}
		SB_DrawSmallNum(267, 84, cl.Accuracy);
		SB_DrawSmallNum(267, 108, cl.Stamina);
		NumKeys = 0;
		for (i = 0; i < StrifeDefs::NUMKEYS; i++)
		{
			if (cl.Keys & (1 << i))
			{
				NumKeys++;
			}
		}
		SB_DrawSmallNum(267, 132, NumKeys);
		if (cl.Communicator)
		{
			R_DrawPic(280, 130, pic_i_comm);
		}
	}
	else if (bShowKeys)
	{
		R_DrawPic2(0, 56, pic_invpbak2, 33);
		R_DrawPic(0, 56, pic_invpop2);
		for (i = 0; i < 10; i++)
		{
			if (cl.Keys & (1 << (i + KeysPage * 10)))
			{
				R_DrawPic(20 + (i / 5) * 140, 60 + (i % 5) * 18,
					pic_key[i + KeysPage * 10]);
				T_SetFont(font_yellow);
				T_SetAlign(hleft, vtop);
				T_DrawText(40 + (i / 5) * 140, 64 + (i % 5) * 18,
					KeyNames[i + KeysPage * 10]);
			}
		}
	}
	else if (bShowObjectives)
	{
		R_DrawPic2(0, 56, pic_invpbak2, 33);
		R_DrawPic(0, 56, pic_invpop2);
		if (LoadedLog != cl.Objectives)
		{
			LoadTextLump(va("LOG%d", cl.Objectives), &LogText[0], 1024);
			LoadedLog = cl.Objectives;
		}
		T_SetFont(font_yellow);
		T_SetAlign(hleft, vtop);
		T_DrawTextW(20, 60, ARR2STR(LogText), 280);
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause()
{
	if (cl.bPaused && GetCvar("draw_pause"))
	{
		//  Pause
		R_DrawPic(126, 4, pic_pause);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	if (sb_view != SB_VIEW_FULLSCREEN ||
		bShowWeapons || bShowKeys || bShowObjectives)
	{
		SB_DrawMainBar();
	}
	SB_DrawPause();
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets()
{
	if (bShowKeys && !GetCvar("sb_show_keys"))
	{
		KeysPage = (KeysPage + 1) % 3;
	}
	bShowWeapons = GetCvar("sb_show_weapons");
	bShowKeys = GetCvar("sb_show_keys");
	bShowObjectives = GetCvar("sb_show_objectives");
}

//==========================================================================
//
//	VisibilityChanged
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 320;
	Height = 200;
	AmmoPosY[0] = 75;
	AmmoPosY[1] = 99;
	AmmoPosY[2] = 91;
	AmmoPosY[3] = 139;
	AmmoPosY[4] = 131;
	AmmoPosY[5] = 115;
	AmmoPosY[6] = 123;
	KeyNames[0] = "Base Key";
	KeyNames[1] = "Govs Key";
	KeyNames[2] = "Passcard";
	KeyNames[3] = "ID Badge";
	KeyNames[4] = "Prison Key";
	KeyNames[5] = "Severed Hand";
	KeyNames[6] = "Power1 Key";
	KeyNames[7] = "Power2 Key";
	KeyNames[8] = "Gold Key";
	KeyNames[9] = "Power3 Key";
	KeyNames[10] = "ID Card";
	KeyNames[11] = "Silver Key";
	KeyNames[12] = "Oracle Key";
	KeyNames[13] = "Military ID";
	KeyNames[14] = "Order Key";
	KeyNames[15] = "Warehouse Key";
	KeyNames[16] = "Brass Key";
	KeyNames[17] = "Red Crystal Key";
	KeyNames[18] = "Blue Crystal Key";
	KeyNames[19] = "Chapel Key";
	KeyNames[20] = "Catacomb Key";
	KeyNames[21] = "Security Key";
	KeyNames[22] = "Core Key";
	KeyNames[23] = "Mauler Key";
	KeyNames[24] = "Factory Key";
	KeyNames[25] = "Mine Key";
	KeyNames[26] = "New Key 5";
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2006/02/20 22:57:17  dj_jl
//  Changed client state structure to class.
//
//  Revision 1.2  2006/02/17 19:06:53  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.1  2006/02/09 22:33:11  dj_jl
//  Moved all client game code to classes.
//
//**************************************************************************
