//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StatusBarScreen : Window;

const int BAR_X = 160;
const int BAR_Y = 280;

ClientGameBase ClGame;
Player cl;

bool bShowWeapons;
bool bShowKeys;
bool bShowObjectives;
int KeysPage;

int pic_invback;
int pic_invtop;
int pic_invpop;
int pic_invpop2;
int pic_invpbak;
int pic_invpbak2;
int pic_pause;
int pic_yellownum[11];
int pic_graynum[11];
int pic_invcurs;
int pic_crossbow;
int pic_riffle;
int pic_missile;
int pic_grenade;
int pic_flame;
int pic_blaster;
int pic_sigil[5];
int pic_i_comm;
int pic_key[StrifeDefs::NUMKEYS];
int pic_backpack;
//For Icons in Fullscreen HUD
int pic_tallnum[10];
int pic_medpack;
int pic_armor1;
int pic_armor2;

int LoadedLog;
string LogText;

string KeyNames[StrifeDefs::NUMKEYS];

//==========================================================================
//
//  StartMap
//
//==========================================================================

void StartMap()
{
	int i;

	pic_invback = R_RegisterPic('invback');
	pic_invtop = R_RegisterPic('invtop');
	pic_invpop = R_RegisterPic('invpop');
	pic_invpop2 = R_RegisterPic('invpop2');
	pic_invpbak = R_RegisterPic('invpbak');
	pic_invpbak2 = R_RegisterPic('invpbak2');

	for (i = 0; i < 10; i++)
	{
		pic_tallnum[i] = R_RegisterPic(StrToName(va("fontb%d", i + 16)));
		pic_yellownum[i] = R_RegisterPic(StrToName(va("invfony%d", i)));
		pic_graynum[i] = R_RegisterPic(StrToName(va("invfong%d", i)));
	}
	pic_yellownum[10] = R_RegisterPic('invfony%');
	pic_graynum[10] = R_RegisterPic('invfong%');

	pic_invcurs = R_RegisterPic('invcurs');

	pic_key[0] = R_RegisterPic('i_fusl');
	pic_key[1] = R_RegisterPic('i_rebl');
	pic_key[2] = R_RegisterPic('i_tpas');
	pic_key[3] = R_RegisterPic('i_crd1');
	pic_key[4] = R_RegisterPic('i_pris');
	pic_key[5] = R_RegisterPic('i_hand');
	pic_key[6] = R_RegisterPic('i_pwr1');
	pic_key[7] = R_RegisterPic('i_pwr2');
	pic_key[8] = R_RegisterPic('i_ky1g');
	pic_key[9] = R_RegisterPic('i_pwr3');
	pic_key[10] = R_RegisterPic('i_crd2');
	pic_key[11] = R_RegisterPic('i_ky2s');
	pic_key[12] = R_RegisterPic('i_orac');
	pic_key[13] = R_RegisterPic('i_gyid');
	pic_key[14] = R_RegisterPic('i_fubr');
	pic_key[15] = R_RegisterPic('i_ware');
	pic_key[16] = R_RegisterPic('i_ky3b');
	pic_key[17] = R_RegisterPic('i_rcry');
	pic_key[18] = R_RegisterPic('i_bcry');
	pic_key[19] = R_RegisterPic('i_chap');
	pic_key[20] = R_RegisterPic('i_tunl');
	pic_key[21] = R_RegisterPic('i_seck');
	pic_key[22] = R_RegisterPic('i_goid');
	pic_key[23] = R_RegisterPic('i_bltk');
	pic_key[24] = R_RegisterPic('i_proc');
	pic_key[25] = R_RegisterPic('i_mine');
	pic_key[26] = R_RegisterPic('i_bltk');

	pic_crossbow = R_RegisterPic('cbowa0');
	pic_riffle = R_RegisterPic('rifla0');
	pic_missile = R_RegisterPic('mmsla0');
	pic_grenade = R_RegisterPic('grnda0');
	pic_flame = R_RegisterPic('flama0');
	pic_blaster = R_RegisterPic('trpda0');
	pic_sigil[0] = R_RegisterPic('i_sgl1');
	pic_sigil[1] = R_RegisterPic('i_sgl2');
	pic_sigil[2] = R_RegisterPic('i_sgl3');
	pic_sigil[3] = R_RegisterPic('i_sgl4');
	pic_sigil[4] = R_RegisterPic('i_sgl5');
	pic_i_comm = R_RegisterPic('i_comm');
	pic_backpack = R_RegisterPic('i_bkpk');
	//For Icons in Fullscreen HUD
	pic_medpack = R_RegisterPic('mdkta0');
	pic_armor1 = R_RegisterPic('arm2a0');
	pic_armor2 = R_RegisterPic('arm1a0');

	pic_pause = R_RegisterPic('m_pause');

	LoadedLog = 0;
	LogText = "Find help";
}

//==========================================================================
//
//	SB_DrawSmallNum
//
//==========================================================================

void SB_DrawSmallNum(int x, int y, int num)
{
	int w;
	picinfo_t info;

	if (num < 0)
	{
		num = -num;
	}

	R_GetPicInfo(pic_yellownum[0], &info);
	w = info.width;

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic(x - w, y, pic_yellownum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic(x, y, pic_yellownum[num % 10]);
		num /= 10;
	}
}

//==========================================================================
//
//	SB_DrawTallNum
//
//==========================================================================

void SB_DrawTallNum(int x, int y, int num, float alpha)
{
	int w;
	picinfo_t info;

	if (num < 0)
	{
		num = -num;
	}

	R_GetPicInfo(pic_tallnum[0], &info);
	w = info.width;

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic2(x - w, y, pic_tallnum[0], alpha);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic2(x, y, pic_tallnum[num % 10], alpha);
		num /= 10;
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar()
{
	int i;
	int NumKeys;
	Inventory Item;

	// draw something in the blank spaces
	R_FillRectWithFlat(0, 448, 640, 32, 'f_pave01');

	if (!cl.MO)
	{
		return;
	}

	//  background
	R_DrawPic(BAR_X + 0, BAR_Y + 168, pic_invback);
	R_DrawPic(BAR_X + 0, BAR_Y + 160, pic_invtop);

	// health percentage
	SB_DrawSmallNum(BAR_X + 76, BAR_Y + 162, cl.Health);

	if (cl.Cheats & Player::CF_GODMODE)
	{
		R_FillRect(BAR_X + 49, BAR_Y + 172, 200, 2, 0xffffff00);
		R_FillRect(BAR_X + 49, BAR_Y + 175, 200, 2, 0xffffff00);
	}
	else if (cl.Health > 100)
	{
		i = 200 - cl.Health;
		if (i < 0)
			i = 0;
		R_FillRect(BAR_X + 49, BAR_Y + 172, i * 2, 2, 0xff00ff00);
		R_FillRect(BAR_X + 49, BAR_Y + 175, i * 2, 2, 0xff00ff00);
		R_FillRect(BAR_X + 49 + i * 2, BAR_Y + 172, 200 - i * 2, 2, 0xff7f7fff);
		R_FillRect(BAR_X + 49 + i * 2, BAR_Y + 175, 200 - i * 2, 2, 0xff7f7fff);
	}
	else if (cl.Health > 20)
	{
		R_FillRect(BAR_X + 49, BAR_Y + 172, cl.Health * 2, 2, 0xff00ff00);
		R_FillRect(BAR_X + 49, BAR_Y + 175, cl.Health * 2, 2, 0xff00ff00);
	}
	else if (cl.Health > 10)
	{
		R_FillRect(BAR_X + 49, BAR_Y + 172, cl.Health * 2, 2, 0xffffff00);
		R_FillRect(BAR_X + 49, BAR_Y + 175, cl.Health * 2, 2, 0xffffff00);
	}
	else
	{
		R_FillRect(BAR_X + 49, BAR_Y + 172, cl.Health * 2, 2, 0xffff0000);
		R_FillRect(BAR_X + 49, BAR_Y + 175, cl.Health * 2, 2, 0xffff0000);
	}

	// armor percentage
	if (cl.ArmorPoints > 0)
	{
		if (cl.ArmorType == 2)
		{
			R_DrawPic(BAR_X + 8, BAR_Y + 175, R_RegisterPic('i_arm1'));
		}
		else
		{
			R_DrawPic(BAR_X + 8, BAR_Y + 175, R_RegisterPic('i_arm2'));
		}
		SB_DrawSmallNum(BAR_X + 24, BAR_Y + 192, cl.ArmorPoints);
	}

	Item = cl.InvFirst;
	for (i = 0; Item && i < 6; i++)
	{
		if (cl.InvCursor == Item)
		{
			R_DrawPic(BAR_X + 42 + 35 * i, BAR_Y + 180, pic_invcurs);
		}
		R_DrawPic(BAR_X + 48 + i * 35, BAR_Y + 182,
			R_RegisterPic(Item.IconName));
		SB_DrawSmallNum(BAR_X + 76 + i * 35, BAR_Y + 192, Item.Amount);
		Item = Item.NextInv();
	}

	if (EntityEx(cl.MO).FindInventory(Sigil))
	{
		R_DrawPic(BAR_X + 253, BAR_Y + 175, pic_sigil[cl.SigilPieces]);
	}

	if (cl.ReadyWeapon && cl.ReadyWeapon.Ammo1)
	{
		SB_DrawSmallNum(BAR_X + 310, BAR_Y + 162, cl.ReadyWeapon.Ammo1.Amount);
		R_DrawPic(BAR_X + 290, BAR_Y + 181,
			R_RegisterPic(cl.ReadyWeapon.Ammo1.IconName));
	}

	if (bShowWeapons)
	{
		R_DrawPic2(BAR_X + 0, BAR_Y + 56, pic_invpbak, 0.666);
		R_DrawPic(BAR_X + 0, BAR_Y + 56, pic_invpop);
		if (EntityEx(cl.MO).FindInventory(StrifeCrossbow))
		{
			R_DrawPic(BAR_X + 38, BAR_Y + 86, pic_crossbow);
		}
		if (EntityEx(cl.MO).FindInventory(AssaultGun))
		{
			R_DrawPic(BAR_X + 40, BAR_Y + 107, pic_riffle);
		}
		if (EntityEx(cl.MO).FindInventory(MiniMissileLauncher))
		{
			R_DrawPic(BAR_X + 39, BAR_Y + 131, pic_missile);
		}
		if (EntityEx(cl.MO).FindInventory(StrifeGrenadeLauncher))
		{
			R_DrawPic(BAR_X + 78, BAR_Y + 87, pic_grenade);
		}
		if (EntityEx(cl.MO).FindInventory(FlameThrower))
		{
			R_DrawPic(BAR_X + 80, BAR_Y + 117, pic_flame);
		}
		if (EntityEx(cl.MO).FindInventory(Mauler))
		{
			R_DrawPic(BAR_X + 75, BAR_Y + 142, pic_blaster);
		}
		DrawAmmo(ClipOfBullets, 75);
		DrawAmmo(ElectricBolts, 99);
		DrawAmmo(PoisonBolts, 91);
		DrawAmmo(EnergyPod, 139);
		DrawAmmo(MiniMissiles, 131);
		DrawAmmo(HEGrenadeRounds, 115);
		DrawAmmo(PhosphorusGrenadeRounds, 123);
		SB_DrawSmallNum(BAR_X + 267, BAR_Y + 84, cl.Accuracy);
		SB_DrawSmallNum(BAR_X + 267, BAR_Y + 108, cl.Stamina);
		NumKeys = 0;
		for (i = 0; i < StrifeDefs::NUMKEYS; i++)
		{
			if (cl.Keys & (1 << i))
			{
				NumKeys++;
			}
		}
		SB_DrawSmallNum(BAR_X + 267, BAR_Y + 132, NumKeys);
		if (cl.Communicator)
		{
			R_DrawPic(BAR_X + 280, BAR_Y + 130, pic_i_comm);
		}
	}
	else if (bShowKeys)
	{
		R_DrawPic2(BAR_X + 0, BAR_Y + 56, pic_invpbak2, 0.666);
		R_DrawPic(BAR_X + 0, BAR_Y + 56, pic_invpop2);
		for (i = 0; i < 10; i++)
		{
			if (cl.Keys & (1 << (i + KeysPage * 10)))
			{
				R_DrawPic(BAR_X + 20 + (i / 5) * 140, BAR_Y + 60 + (i % 5) * 18,
					pic_key[i + KeysPage * 10]);
				T_SetFont(font_yellow);
				T_SetAlign(hleft, vtop);
				T_DrawText(BAR_X + 40 + (i / 5) * 140, BAR_Y + 64 + (i % 5) * 18,
					KeyNames[i + KeysPage * 10]);
			}
		}
	}
	else if (bShowObjectives)
	{
		R_DrawPic2(BAR_X + 0, BAR_Y + 56, pic_invpbak2, 0.666);
		R_DrawPic(BAR_X + 0, BAR_Y + 56, pic_invpop2);
		if (LoadedLog != cl.Objectives)
		{
			LogText = LoadTextLump(StrToName(va("log%d", cl.Objectives)));
			LoadedLog = cl.Objectives;
		}
		T_SetFont(font_yellow);
		T_SetAlign(hleft, vtop);
		T_DrawTextW(BAR_X + 20, BAR_Y + 60, LogText, 280);
	}
}

//==========================================================================
//
//	SB_DrawFullscreenStats
//
//==========================================================================

void DrawAmmo(class<Inventory> Type, int Y)
{
	Inventory AmmoItem = EntityEx(cl.MO).FindInventory(Type);
	SB_DrawSmallNum(BAR_X + 205, BAR_Y + Y, AmmoItem ? AmmoItem.Amount : 0);
	SB_DrawSmallNum(BAR_X + 238, BAR_Y + Y,
		AmmoItem ? AmmoItem.MaxAmount : Type.default.MaxAmount);
}

//==========================================================================
//
//	SB_DrawFullscreenStats
//
//==========================================================================

void SB_DrawFullscreenStats()
{
	int i;
	int NumKeys;
	Inventory Item;

	// health
	SB_DrawTallNum(70, 450, cl.Health, 0.7);
	R_DrawPic2(20, 465, pic_medpack, 0.7);

	// armor
	if (cl.ArmorPoints > 0)
	{
		SB_DrawTallNum(164, 450, cl.ArmorPoints, 0.7);

		// armor type
		if (cl.ArmorType == 2)
		{
			R_DrawPic2(110, 465, pic_armor2, 0.7);
		}
		else
		{
			R_DrawPic2(110, 465, pic_armor1, 0.7);
		}
	}

	// ready weapon ammo with icon
	if (cl.ReadyWeapon && cl.ReadyWeapon.Ammo1)
	{
		SB_DrawTallNum(635, 450, cl.ReadyWeapon.Ammo1.Amount, 0.7);
		R_DrawPic2(575, 450, R_RegisterPic(cl.ReadyWeapon.Ammo1.IconName), 0.7);
	}

	Item = cl.InvFirst;
	for (i = 0; i < 6 && Item; i++)
	{
		if (cl.InvCursor == Item)
		{
			R_DrawPic2(225 + 35 * i, 450, pic_invcurs, 0.6);
		}
		R_DrawPic(231 + i * 35, 452, R_RegisterPic(Item.IconName));
		SB_DrawSmallNum(259 + i * 35, 462, Item.Amount);
		Item = Item.NextInv();
	}

	if (EntityEx(cl.MO).FindInventory(Sigil))
	{
		R_DrawPic2(530, 450, pic_sigil[cl.SigilPieces], 0.6);
	}

	if (bShowWeapons)
	{
		R_DrawPic2(BAR_X + 0, BAR_Y + 96, pic_invpbak, 0.666);
		R_DrawPic(BAR_X + 0, BAR_Y + 96, pic_invpop);
		if (EntityEx(cl.MO).FindInventory(StrifeCrossbow))
		{
			R_DrawPic(BAR_X + 38, BAR_Y + 126, pic_crossbow);
		}
		if (EntityEx(cl.MO).FindInventory(AssaultGun))
		{
			R_DrawPic(BAR_X + 40, BAR_Y + 147, pic_riffle);
		}
		if (EntityEx(cl.MO).FindInventory(MiniMissileLauncher))
		{
			R_DrawPic(BAR_X + 39, BAR_Y + 171, pic_missile);
		}
		if (EntityEx(cl.MO).FindInventory(StrifeGrenadeLauncher))
		{
			R_DrawPic(BAR_X + 78, BAR_Y + 127, pic_grenade);
		}
		if (EntityEx(cl.MO).FindInventory(FlameThrower))
		{
			R_DrawPic(BAR_X + 80, BAR_Y + 157, pic_flame);
		}
		if (EntityEx(cl.MO).FindInventory(Mauler))
		{
			R_DrawPic(BAR_X + 75, BAR_Y + 182, pic_blaster);
		}
		DrawAmmo(ClipOfBullets, 75);
		DrawAmmo(ElectricBolts, 99);
		DrawAmmo(PoisonBolts, 91);
		DrawAmmo(EnergyPod, 139);
		DrawAmmo(MiniMissiles, 131);
		DrawAmmo(HEGrenadeRounds, 115);
		DrawAmmo(PhosphorusGrenadeRounds, 123);
		SB_DrawSmallNum(BAR_X + 267, BAR_Y + 124, cl.Accuracy);
		SB_DrawSmallNum(BAR_X + 267, BAR_Y + 148, cl.Stamina);
		NumKeys = 0;
		for (i = 0; i < StrifeDefs::NUMKEYS; i++)
		{
			if (cl.Keys & (1 << i))
			{
				NumKeys++;
			}
		}
		SB_DrawSmallNum(BAR_X + 267, BAR_Y + 172, NumKeys);
		if (cl.Communicator)
		{
			R_DrawPic(BAR_X + 280, BAR_Y + 170, pic_i_comm);
		}
	}
	else if (bShowKeys)
	{
		R_DrawPic2(BAR_X + 0, BAR_Y + 96, pic_invpbak2, 0.666);
		R_DrawPic(BAR_X + 0, BAR_Y + 96, pic_invpop2);
		for (i = 0; i < 10; i++)
		{
			if (cl.Keys & (1 << (i + KeysPage * 10)))
			{
				R_DrawPic(BAR_X + 20 + (i / 5) * 140, BAR_Y + 100 + (i % 5) * 18,
					pic_key[i + KeysPage * 10]);
				T_SetFont(font_yellow);
				T_SetAlign(hleft, vtop);
				T_DrawText(BAR_X + 40 + (i / 5) * 140, BAR_Y + 104 + (i % 5) * 18,
					KeyNames[i + KeysPage * 10]);
			}
		}
	}
	else if (bShowObjectives)
	{
		R_DrawPic2(BAR_X + 0, BAR_Y + 96, pic_invpbak2, 0.666);
		R_DrawPic(BAR_X + 0, BAR_Y + 96, pic_invpop2);
		if (LoadedLog != cl.Objectives)
		{
			LogText = LoadTextLump(StrToName(va("log%d", cl.Objectives)));
			LoadedLog = cl.Objectives;
		}
		T_SetFont(font_yellow);
		T_SetAlign(hleft, vtop);
		T_DrawTextW(BAR_X + 20, BAR_Y + 100, LogText, 280);
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause()
{
	if (ClGame.bPaused && GetCvar('draw_pause'))
	{
		//  Pause
		R_DrawPic(286, 10, pic_pause);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	if (sb_view != SB_VIEW_FULLSCREEN)
	{
		SB_DrawMainBar();
	}
	else
	{
		SB_DrawFullscreenStats();
	}
	SB_DrawPause();
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets()
{
	if (bShowKeys && !GetCvar('sb_show_keys'))
	{
		KeysPage = (KeysPage + 1) % 3;
	}
	bShowWeapons = GetCvar('sb_show_weapons');
	bShowKeys = GetCvar('sb_show_keys');
	bShowObjectives = GetCvar('sb_show_objectives');
}

//==========================================================================
//
//	VisibilityChanged
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 640;
	Height = 480;
	KeyNames[0] = "Base Key";
	KeyNames[1] = "Govs Key";
	KeyNames[2] = "Passcard";
	KeyNames[3] = "ID Badge";
	KeyNames[4] = "Prison Key";
	KeyNames[5] = "Severed Hand";
	KeyNames[6] = "Power1 Key";
	KeyNames[7] = "Power2 Key";
	KeyNames[8] = "Gold Key";
	KeyNames[9] = "Power3 Key";
	KeyNames[10] = "ID Card";
	KeyNames[11] = "Silver Key";
	KeyNames[12] = "Oracle Key";
	KeyNames[13] = "Military ID";
	KeyNames[14] = "Order Key";
	KeyNames[15] = "Warehouse Key";
	KeyNames[16] = "Brass Key";
	KeyNames[17] = "Red Crystal Key";
	KeyNames[18] = "Blue Crystal Key";
	KeyNames[19] = "Chapel Key";
	KeyNames[20] = "Catacomb Key";
	KeyNames[21] = "Security Key";
	KeyNames[22] = "Core Key";
	KeyNames[23] = "Mauler Key";
	KeyNames[24] = "Factory Key";
	KeyNames[25] = "Mine Key";
	KeyNames[26] = "New Key 5";
}
