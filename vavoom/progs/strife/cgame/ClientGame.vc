//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ClientGame : ClientGameBaseEx;

TitleScreen			GTitle;
StatusBarScreen		GSBar;
IntermissionScreen	GImission;
FinaleScreen		GFinale;

int pic_brdr_t;
int pic_brdr_b;
int pic_brdr_l;
int pic_brdr_r;
int pic_brdr_tl;
int pic_brdr_tr;
int pic_brdr_bl;
int pic_brdr_br;

//==========================================================================
//
//  RootWindowCreated
//
//==========================================================================

void RootWindowCreated()
{
	CreateCvar('sb_show_weapons', "0", 0);
	CreateCvar('sb_show_keys', "0", 0);
	CreateCvar('sb_show_objectives', "0", 0);

	GTitle = TitleScreen(GRoot.NewChild(TitleScreen));
	GSBar = StatusBarScreen(GRoot.NewChild(StatusBarScreen));
	GImission = IntermissionScreen(GRoot.NewChild(IntermissionScreen));
	GFinale = FinaleScreen(GRoot.NewChild(FinaleScreen));
	GTitle.ClGame = self;
	GSBar.ClGame = self;
	GSBar.Hide();
	GImission.ClGame = self;
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  Connected
//
//==========================================================================

void Connected()
{
	GTitle.Hide();
	GTitle.StopDemoLoop();
	GSBar.Show();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  Disconnected
//
//==========================================================================

void Disconnected()
{
	GTitle.Show();
	GSBar.Hide();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  DemoPlaybackStarted
//
//==========================================================================

void DemoPlaybackStarted()
{
	GTitle.Hide();
	GSBar.Show();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  DemoPlaybackStopped
//
//==========================================================================

void DemoPlaybackStopped()
{
	GTitle.Show();
	GSBar.Hide();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  OnHostEndGame
//
//==========================================================================

void OnHostEndGame()
{
	GTitle.OnHostEndGame();
}

//==========================================================================
//
//  OnHostError
//
//==========================================================================

void OnHostError()
{
	GTitle.OnHostError();
}

//==========================================================================
//
//  StatusBarStartMap
//
//==========================================================================

void StatusBarStartMap()
{
	GSBar.cl = Player(cl);
	GSBar.Show();
	GSBar.StartMap();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  StatusBarDrawer
//
//==========================================================================

void StatusBarDrawer(int sb_view)
{
	GSBar.SB_Drawer(sb_view);
}

//==========================================================================
//
//  StatusBarUpdateWidgets
//
//==========================================================================

void StatusBarUpdateWidgets(float DeltaTime)
{
	GSBar.SB_UpdateWidgets();
}

//==========================================================================
//
//  IintermissionStart
//
//==========================================================================

void IintermissionStart()
{
	GSBar.Hide();
	GImission.Show();
	GImission.Start();
	GFinale.Hide();
}

//==========================================================================
//
//  StartFinale
//
//==========================================================================

void StartFinale(name FinaleType)
{
	GSBar.Hide();
	GImission.Hide();
	GFinale.Show();
	GFinale.StartFinale(FinaleType);
}

//===========================================================================
//
//  FinaleResponder
//
//===========================================================================

bool FinaleResponder(event_t* event)
{
	return false;
}

//==========================================================================
//
//  DeactivateMenu
//
//==========================================================================

void DeactivateMenu()
{
	ForceMenuOff();
}

//==========================================================================
//
//  MenuResponder
//
//==========================================================================

bool MenuResponder(event_t * event)
{
	if (!CurrentMenuScreen)
	{
		// Pop-up menu?
		if (event->type == ev_keydown && event->data1 == K_ESCAPE)
		{
			PushMenuScreen(SpawnMenu(MenuScreenMain));
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  MenuActive
//
//==========================================================================

bool MenuActive()
{
	return CurrentMenuScreen != none;
}

//==========================================================================
//
//	SetMenu
//
//==========================================================================

void SetMenu(string Name)
{
	if (!stricmp(Name, "Main"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenMain));
		return;
	}
	if (!stricmp(Name, "Save"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenSaveGame));
		return;
	}
	if (!stricmp(Name, "Load"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenLoadGame));
		return;
	}
	if (!stricmp(Name, "PSetup"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenPlayerSetup));
		return;
	}
	if (!stricmp(Name, "Options"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenOptions));
		return;
	}
	if (!stricmp(Name, "Controls"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenControls));
		return;
	}
	if (!stricmp(Name, "Controls2"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenControls2));
		return;
	}
	if (!stricmp(Name, "Mouse"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenMouseOptions));
		return;
	}
	if (!stricmp(Name, "Resolution"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenScreenResolution));
		return;
	}
	if (!stricmp(Name, "Video"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenVideoOptions));
		return;
	}
	if (!stricmp(Name, "Sound"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenSoundOptions));
		return;
	}
	if (!stricmp(Name, "Help"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenHelp));
		return;
	}
	if (!stricmp(Name, "Quit"))
	{
		menu_quit();
		return;
	}
	PushMenuScreen(SpawnMenu(MenuScreenMain));
}

//==========================================================================
//
//  menu_quit
//
//==========================================================================

void menu_quit()
{
	MessageBoxStartMessage("Do you really want to leave?\n\n(press y to quit)",
		MB_Quit, true);
}

//==========================================================================
//
//  QuitResponse
//
//==========================================================================

void QuitResponse(int ch)
{
	if (ch != K_y)
		return;
	PushMenuScreen(SpawnMenu(MenuScreenQuit));
}

//==========================================================================
//
//  NewGame
//
//==========================================================================

void NewGame(int SkillLevel)
{
	SetCvar('Skill', SkillLevel);

	CmdBuf_AddText("Disconnect\n");
	CmdBuf_AddText("MaxPlayers 1\n");
	CmdBuf_AddText("Map %n\n", MenuStartMap);

	ForceMenuOff();
}

//==========================================================================
//
//  InitBorder
//
//==========================================================================

void InitBorder()
{
	pic_brdr_t = R_RegisterPic('brdr_t');
	pic_brdr_b = R_RegisterPic('brdr_b');
	pic_brdr_l = R_RegisterPic('brdr_l');
	pic_brdr_r = R_RegisterPic('brdr_r');
	pic_brdr_tl = R_RegisterPic('brdr_tl');
	pic_brdr_tr = R_RegisterPic('brdr_tr');
	pic_brdr_bl = R_RegisterPic('brdr_bl');
	pic_brdr_br = R_RegisterPic('brdr_br');
}

//==========================================================================
//
//  DrawBorder
//
//  Draws border
//
//==========================================================================

void DrawBorder(int x, int y, int w, int h)
{
	int i;

	if (!pic_brdr_b)
	{
		InitBorder();
	}

	for (i = 0; i < w; i += 8)
		GRoot.DrawPic(x + i, y - 8, pic_brdr_t);

	for (i = 0; i < w; i += 8)
		GRoot.DrawPic(x + i, y + h, pic_brdr_b);

	for (i = 0; i < h; i += 8)
		GRoot.DrawPic(x - 8, y + i, pic_brdr_l);

	for (i = 0; i < h; i += 8)
		GRoot.DrawPic(x + w, y + i, pic_brdr_r);

	// Draw beveled edge.
	GRoot.DrawPic(x - 8, y - 8, pic_brdr_tl);
	GRoot.DrawPic(x + w, y - 8, pic_brdr_tr);
	GRoot.DrawPic(x - 8, y + h, pic_brdr_bl);
	GRoot.DrawPic(x + w, y + h, pic_brdr_br);
}

//==========================================================================
//
//  DrawViewBorder
//
//==========================================================================

void DrawViewBorder(int x, int y, int w, int h)
{
	GRoot.FillRectWithFlat(0, 0, 640, 480/* - 32*/, 'f_pave01');
	DrawBorder(x, y, w, h);
}

//==========================================================================
//
//	StartSpeech
//
//==========================================================================

void StartSpeech(int SpeechNum)
{
	ConDialog Dlg;

	Dlg = ConDialog(SpawnMenu(ConDialog));
	Dlg.SetSpeech(SpeechNum);
	PushMenuScreen(Dlg);
}

//==========================================================================
//
//	StartConSlideshow1
//
//==========================================================================

void StartConSlideshow1()
{
	PushMenuScreen(SpawnMenu(ConSlideshow1));
}

//==========================================================================
//
//	StartConSlideshow2
//
//==========================================================================

void StartConSlideshow2()
{
	PushMenuScreen(SpawnMenu(ConSlideshow2));
}

//==========================================================================
//
//	SetFinaleType
//
//==========================================================================

void SetFinaleType(int FinaleType)
{
	GFinale.FinaleType = FinaleType;
}

defaultproperties
{
	sb_height = 32;
	MsgBoxFlat = 'f_pave01';
}
