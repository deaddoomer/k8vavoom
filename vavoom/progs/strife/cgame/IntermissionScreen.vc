//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class IntermissionScreen : Window;

enum
{
	IMS_Stats,
	IMS_Text,
	IMS_Done
};

ClientGameBase ClGame;

float TextSpeed;
float TextWait;

// specifies current state
int interstate;
float intertime;

float HubCount;
string HubText;
name TextFlat;
int TextPic;

//==========================================================================
//
//  Start
//
//==========================================================================

void Start()
{
	if (!ClGame.deathmatch && !ClGame.cl.Level.bNoIntermission)
	{
		print("Intermission stats are not yet implemented");
	}
	if (!ClGame.deathmatch)
	{
		IM_InitHubText();
	}
	else
	{
		CmdBuf_AddText("TeleportNewMap\n");
	}
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	intertime += DeltaTime;
	if (ClGame.skipintermission || intertime > HubCount)
	{
		CmdBuf_AddText("TeleportNewMap\n");
		interstate = IMS_Done;
		ClGame.skipintermission = false;
	}
}

//==========================================================================
//
//  DrawWindow
//
//==========================================================================

void DrawWindow()
{
	if (interstate == IMS_Done)
	{
		return;
	}

	switch (interstate)
	{
	case IMS_Text:
		IM_DrawHubText();
	}
}

//========================================================================
//
//  IM_InitHubText
//
//  Initialises the stats for single player mode
//
//========================================================================

void IM_InitHubText()
{
	if (!ClGame.im->Text)
	{
		CmdBuf_AddText("TeleportNewMap\n");
		interstate = IMS_Done;
		return;
	}

	if (ClGame.im->bTextIsLump)
	{
		HubText = LoadTextLump(StrToName(ClGame.im->Text));
	}
	else
	{
		HubText = ClGame.im->Text;
	}
	HubCount = itof(strlen(HubText)) * TextSpeed + TextWait;

	TextFlat = '';
	TextPic = 0;
	if (ClGame.im->TextPic)
	{
		TextPic = R_RegisterPic(ClGame.im->TextPic);
	}
	else if (ClGame.im->TextFlat)
	{
		TextFlat = ClGame.im->TextFlat;
	}

	if (ClGame.im->TextMusic)
	{
		CmdBuf_AddText(va("music loop %n\n", ClGame.im->TextMusic));
	}
	else
	{
		CmdBuf_AddText("music loop d_intro\n");
	}
	interstate = IMS_Text;
}

//===========================================================================
//
//  IM_DrawHubText
//
//===========================================================================

void IM_DrawHubText()
{
	if (TextPic)
	{
		DrawFullScreenPic(TextPic);
	}
	else if (TextFlat)
	{
		FillRectWithFlat(0, 0, 640, 480, TextFlat);
	}
	else
	{
		R_FillRect(0, 0, 640, 480, 0);
	}
	int count = ftoi((intertime - 0.3) / TextSpeed);
	if (count < 0)
	{
		count = 0;
	}
	if (count > strlen(HubText))
	{
		count = strlen(HubText);
	}
	T_SetFont(font_small);
	T_SetAlign(hleft, vtop);
	T_DrawText(170, 145, substr(HubText, 0, count));
}

//==========================================================================
//
//	VisibilityChanged
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 320;
	Height = 200;
}
