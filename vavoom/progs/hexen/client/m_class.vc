//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Class menu
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

void menu_skill(void);

// DATA DECLARATIONS -------------------------------------------------------

int MenuPClass;

// CODE --------------------------------------------------------------------

class MenuScreenClass:MenuScreen
{
	menutext_t fighter;
	menutext_t cleric;
	menutext_t mage;
	menutext_t title;
	menubitmap_t fbox;
	menuanim_t fwalk;
	menubitmap_t cbox;
	menuanim_t cwalk;
	menubitmap_t mbox;
	menuanim_t mwalk;

	defaultproperties
	{
		SelectorType = MenuSelector_BigArrow;
	}
};

MenuScreenClass ClassMenu;

//==========================================================================
//
//  class_callback
//
//==========================================================================

void class_callback(menucommon_t * item, int msg)
{
	switch (msg)
	{
	case MMSG_LOST_FOCUS:
		switch (item->id)
		{
		case 0:
			ClassMenu.fbox.flags |= MNF_HIDEN;
			ClassMenu.fwalk.flags |= MNF_HIDEN;
			break;
		case 1:
			ClassMenu.cbox.flags |= MNF_HIDEN;
			ClassMenu.cwalk.flags |= MNF_HIDEN;
			break;
		case 2:
			ClassMenu.mbox.flags |= MNF_HIDEN;
			ClassMenu.mwalk.flags |= MNF_HIDEN;
			break;
		}
		break;

	case MMSG_RECEIVE_FOCUS:
		switch (item->id)
		{
		case 0:
			ClassMenu.fbox.flags &= ~MNF_HIDEN;
			ClassMenu.fwalk.flags &= ~MNF_HIDEN;
			MenuPClass = PCLASS_FIGHTER;
			break;
		case 1:
			ClassMenu.cbox.flags &= ~MNF_HIDEN;
			ClassMenu.cwalk.flags &= ~MNF_HIDEN;
			MenuPClass = PCLASS_CLERIC;
			break;
		case 2:
			ClassMenu.mbox.flags &= ~MNF_HIDEN;
			ClassMenu.mwalk.flags &= ~MNF_HIDEN;
			MenuPClass = PCLASS_MAGE;
			break;
		}
		break;
	}
}

//==========================================================================
//
//	MenuScreenClass
//
//==========================================================================

void menu_class(void)
{
	int x = 66;
	int y = 66;

	ClassMenu = MenuScreenClass(SpawnMenu(MenuScreenClass));

	MenuText_InitFunc(&ClassMenu.fighter, x, y, "FIGHTER", TEXT_BIG,
		menu_skill);
	ClassMenu.fighter.callback = class_callback;
	ClassMenu.fighter.id = 0;
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.fighter;
	y += 18;

	MenuText_InitFunc(&ClassMenu.cleric, x, y, "CLERIC", TEXT_BIG,
		menu_skill);
	ClassMenu.cleric.callback = class_callback;
	ClassMenu.cleric.id = 1;
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.cleric;
	y += 18;

	MenuText_InitFunc(&ClassMenu.mage, x, y, "MAGE", TEXT_BIG, menu_skill);
	ClassMenu.mage.callback = class_callback;
	ClassMenu.mage.id = 2;
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.mage;
	y += 18;

	MenuText_InitTitle(&ClassMenu.title, 34, 24, "CHOOSE CLASS:", TEXT_BIG);
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.title;

	MenuBitmap_Init(&ClassMenu.fbox, 174, 8, MNF_INACTIVE | MNF_HIDEN,
		"m_fbox", PIC_PATCH);
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.fbox;

	MenuAnim_Init(&ClassMenu.fwalk, 174 + 24, 8 + 12,
		MNF_INACTIVE | MNF_HIDEN, 8, 4, 0, false);
	ClassMenu.fwalk.pics[0] = R_RegisterPic("m_fwalk1", PIC_PATCH);
	ClassMenu.fwalk.pics[1] = R_RegisterPic("m_fwalk2", PIC_PATCH);
	ClassMenu.fwalk.pics[2] = R_RegisterPic("m_fwalk3", PIC_PATCH);
	ClassMenu.fwalk.pics[3] = R_RegisterPic("m_fwalk4", PIC_PATCH);
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.fwalk;

	MenuBitmap_Init(&ClassMenu.cbox, 174, 8, MNF_INACTIVE | MNF_HIDEN,
		"m_cbox", PIC_PATCH);
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.cbox;

	MenuAnim_Init(&ClassMenu.cwalk, 174 + 24, 8 + 12,
		MNF_INACTIVE | MNF_HIDEN, 8, 4, 0, false);
	ClassMenu.cwalk.pics[0] = R_RegisterPic("m_cwalk1", PIC_PATCH);
	ClassMenu.cwalk.pics[1] = R_RegisterPic("m_cwalk2", PIC_PATCH);
	ClassMenu.cwalk.pics[2] = R_RegisterPic("m_cwalk3", PIC_PATCH);
	ClassMenu.cwalk.pics[3] = R_RegisterPic("m_cwalk4", PIC_PATCH);
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.cwalk;

	MenuBitmap_Init(&ClassMenu.mbox, 174, 8, MNF_INACTIVE | MNF_HIDEN,
		"m_mbox", PIC_PATCH);
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.mbox;

	MenuAnim_Init(&ClassMenu.mwalk, 174 + 24, 8 + 12,
		MNF_INACTIVE | MNF_HIDEN, 8, 4, 0, false);
	ClassMenu.mwalk.pics[0] = R_RegisterPic("m_mwalk1", PIC_PATCH);
	ClassMenu.mwalk.pics[1] = R_RegisterPic("m_mwalk2", PIC_PATCH);
	ClassMenu.mwalk.pics[2] = R_RegisterPic("m_mwalk3", PIC_PATCH);
	ClassMenu.mwalk.pics[3] = R_RegisterPic("m_mwalk4", PIC_PATCH);
	MenuItemWrapper(ClassMenu.AddItem(MenuItemWrapper)).item = &ClassMenu.mwalk;

	PushMenuScreen(ClassMenu);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2002/01/21 18:21:33  dj_jl
//  Working on object-oriented menus
//
//  Revision 1.5  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
