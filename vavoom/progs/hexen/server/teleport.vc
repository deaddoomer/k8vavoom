//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// HEADER FILES ------------------------------------------------------------

// MACROS ------------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// EXTERNAL FUNCTION PROTOTYPES --------------------------------------------

// PUBLIC FUNCTION PROTOTYPES ----------------------------------------------

// PRIVATE FUNCTION PROTOTYPES ---------------------------------------------

// EXTERNAL DATA DECLARATIONS ----------------------------------------------

// PUBLIC DATA DEFINITIONS -------------------------------------------------

// PRIVATE DATA DEFINITIONS ------------------------------------------------

float teleport_bbox[4];
mobj_t *teleport_thing;
float teleport_x;
float teleport_y;

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  PIT_StompThing
//
//==========================================================================

boolean PIT_StompThing(MapObject Other)
{
	float blockdist;

	if (!Actor(Other).bShootable)
	{
		return true;
	}

	blockdist = Other.Radius + teleport_thing->Radius;

	if (fabs(Other.origin.x - teleport_x) >= blockdist
		|| fabs(Other.origin.y - teleport_y) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (Other == *teleport_thing)
	{
		return true;
	}

	//  Check if allowed to stomp things
	if (!teleport_thing->bTelestomp)
	{
		return false;
	}

	Actor(Other).Damage(*teleport_thing, *teleport_thing, 10000);

	return true;
}

//==========================================================================
//
//  P_TeleportMove
//
//==========================================================================

boolean P_TeleportMove(mobj_t * thing, float x, float y)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;

	// kill anything occupying the position
	teleport_thing = thing;

	teleport_x = x;
	teleport_y = y;

	// stomp on any things contacted
	xl = MapBlock(x - thing->Radius - level->bmaporgx - MAXRADIUS);
	xh = MapBlock(x + thing->Radius - level->bmaporgx + MAXRADIUS);
	yl = MapBlock(y - thing->Radius - level->bmaporgy - MAXRADIUS);
	yh = MapBlock(y + thing->Radius - level->bmaporgy + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockThingsIterator(bx, by, PIT_StompThing))
				return false;

	// the move is ok,
	// so link the thing into its new position
	P_UnsetThingPosition(*thing);

	thing->origin.x = x;
	thing->origin.y = y;

	P_SetThingPosition(*thing);

	return true;
}

//==========================================================================
//
// P_Teleport
//
//==========================================================================

boolean P_Teleport(mobj_t * thing, float x, float y, float angle,
	boolean useFog)
{
	float oldx;
	float oldy;
	float oldz;
	float aboveFloor;
	float fogDelta;
	player_t *player;
	mobj_t *fog;

	oldx = thing->origin.x;
	oldy = thing->origin.y;
	oldz = thing->origin.z;
	aboveFloor = thing->origin.z - thing->floorz;
	if (!P_TeleportMove(thing, x, y))
	{
		return false;
	}
	if (thing->player)
	{
		player = thing->player;
		if (player->powers[pw_flight] && aboveFloor)
		{
			thing->origin.z = thing->floorz + aboveFloor;
			if (thing->origin.z + thing->Height > thing->ceilingz)
			{
				thing->origin.z = thing->ceilingz - thing->Height;
			}
			player->vieworg.z = thing->origin.z + player->viewheight;
		}
		else
		{
			thing->origin.z = thing->floorz;
			player->vieworg.z = thing->origin.z + player->viewheight;
			if (useFog)
			{
				thing->angles.pitch = 0.0;
			}
		}
	}
	else if (thing->bMissile)
	{
		thing->origin.z = thing->floorz + aboveFloor;
		if (thing->origin.z + thing->Height > thing->ceilingz)
		{
			thing->origin.z = thing->ceilingz - thing->Height;
		}
	}
	else
	{
		thing->origin.z = thing->floorz;
	}
	// Spawn teleport fog at source and destination
	if (useFog)
	{
		fogDelta = thing->bMissile ? 0.0 : TELEFOGHEIGHT;
		fog = P_SpawnMobj(oldx, oldy, oldz + fogDelta, TeleportFog);
		StartSoundName(*fog, 'Teleport', CHAN_VOICE);
		fog = P_SpawnMobj(x + 20.0 * cos(angle),
			y + 20.0 * sin(angle), thing->origin.z + fogDelta, TeleportFog);
		StartSoundName(*fog, 'Teleport', CHAN_VOICE);
		if (thing->player && !thing->player->powers[pw_speed])
		{
			// Freeze player for about .5 sec
			thing->ReactionTime = 0.5;
		}
		thing->angles.yaw = angle;
		if (thing->player)
			thing->player->fixangle = true;
	}
	if (thing->bFloorClip)
	{
		if (thing->origin.z == thing->subsector->sector->floorheight &&
			P_GetThingFloorType(thing) > FLOOR_SOLID)
		{
			thing->floorclip = 10.0;
		}
		else
		{
			thing->floorclip = 0.0;
		}
	}
	if (thing->bMissile)
	{
		thing->velocity.x = thing->Speed * cos(angle);
		thing->velocity.y = thing->Speed * sin(angle);
	}
	else if (useFog)	// no fog doesn't alter the player's momentums
	{
		thing->velocity.x = thing->velocity.y = thing->velocity.z = 0.0;
	}
	return true;
}

//==========================================================================
//
// EV_Teleport
//
//==========================================================================

boolean EV_Teleport(int tid, mobj_t * thing, boolean fog)
{
	int i;
	int count;
	mobj_t *mo;
	int searcher;

	if (!thing)
	{
		// Teleport function called with an invalid mobj
		return false;
	}
	if (thing->bNoTeleport)
	{
		return false;
	}
	count = 0;
	searcher = -1;
	while (P_FindMobjFromTID(tid, &searcher) != NULL)
	{
		count++;
	}
	if (count == 0)
	{
		return false;
	}
	count = 1 + (P_Random() % count);
	searcher = -1;
	for (i = 0; i < count; i++)
	{
		mo = P_FindMobjFromTID(tid, &searcher);
	}
	if (!mo)
		Error("Can't find teleport mapspot\n");
	return P_Teleport(thing, mo->origin.x, mo->origin.y, mo->angles.yaw, fog);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.13  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.12  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
