//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    VERTICAL DOORS
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	DREV_NORMAL,
	DREV_CLOSE,
	DREV_OPEN
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

class VerticalDoor:SectorThinker
{
	int type;
	float topheight;
	float speed;
	int direction;	// 1 = up, 0 = waiting at top, -1 = down
	float topwait;	// tics to wait at the top (keep in case a door going down is reset)
	float toptime;	// when it reaches 0, start going down

//==========================================================================
//
//	Think
//
//==========================================================================

void Think(void)
{
	int res;

	switch (direction)
	{
	case 0:	// WAITING
		toptime -= frametime;
		if (toptime <= 0.0)
			switch (type)
			{
			case DREV_NORMAL:
				direction = -1;	// time to go back down
				SectorStartSequence(sector,
					seq_name[SEQ_DOOR_STONE + sector->seqType]);
				break;
			default:
				break;
			}
		break;
	case -1:	// DOWN
		res = T_MovePlane(sector, speed * frametime,
			sector->floorheight, false, 1, direction);
		if (res == RES_PASTDEST)
		{
			SectorStopSequence(sector);
			switch (type)
			{
			case DREV_NORMAL:
			case DREV_CLOSE:
				sector->SpecialData = none;
				TagFinished(sector->tag);
				RemoveSpecialThinker(self);	// unlink and free
				break;
			default:
				break;
			}
		}
		else if (res == RES_CRUSHED)
		{
			switch (type)
			{
			case DREV_CLOSE:	// DON'T GO BACK UP!
				break;
			default:
				direction = 1;
				break;
			}
		}
		break;
	case 1:	// UP
		res = T_MovePlane(sector, speed * frametime,
			topheight, false, 1, direction);
		if (res == RES_PASTDEST)
		{
			SectorStopSequence(sector);
			switch (type)
			{
			case DREV_NORMAL:
				direction = 0;	// wait at top
				toptime = topwait;
				break;
			case DREV_OPEN:
				sector->SpecialData = none;
				TagFinished(sector->tag);
				RemoveSpecialThinker(self);	// unlink and free
				break;
			default:
				break;
			}
		}
		break;
	}
}

}

//==========================================================================
//
//  EV_DoDoor
//
//  Move a door up/down
//
//==========================================================================

int EV_DoDoor(line_t * line, int *args, int type)
{
	int secnum;
	int retcode;
	sector_t *sec;
	VerticalDoor Door;
	float speed;

	if (type == DREV_NORMAL && !args[2])
	{
		type = DREV_OPEN;
	}
	speed = itof(args[1]) * 4.0;
	secnum = -1;
	retcode = 0;
	while ((secnum = FindSectorFromTag(args[0], secnum)) >= 0)
	{
		sec = &level->sectors[secnum];
		if (sec->SpecialData)
		{
			continue;
		}
		// Add new door thinker
		retcode = 1;
		Door = NewSpecialThinker(VerticalDoor);
		sec->SpecialData = Door;
		Door.sector = sec;
		switch (type)
		{
		case DREV_CLOSE:
			Door.topheight = FindLowestCeilingSurrounding(sec);
			Door.topheight -= 4.0;
			Door.direction = -1;
			break;
		case DREV_NORMAL:
		case DREV_OPEN:
			Door.direction = 1;
			Door.topheight = FindLowestCeilingSurrounding(sec);
			Door.topheight -= 4.0;
			break;
		default:
			break;
		}
		Door.type = type;
		Door.speed = speed;
		Door.topwait = itof(args[2]) / 35.0;	// line->arg3
		SectorStartSequence(Door.sector,
			seq_name[SEQ_DOOR_STONE + Door.sector->seqType]);
	}
	return retcode;
}

//==========================================================================
//
//  EV_VerticalDoor
//
//  Open a door manually, no tag value
//
//==========================================================================

boolean EV_VerticalDoor(line_t * line, mobj_t * thing)
{
	sector_t *sec;
	VerticalDoor Door;
	int side;

	side = 0;	// only front sides can be used

	// if the sector has an active thinker, use it
	sec = level->sides[line->sidenum[side ^ 1]].sector;
	if (sec->SpecialData)
	{
		return false;
	}
	//
	// new door thinker
	//
	Door = NewSpecialThinker(VerticalDoor);
	sec->SpecialData = Door;
	Door.sector = sec;
	Door.direction = 1;
	switch (line->special)
	{
	case 11:
		Door.type = DREV_OPEN;
		line->special = 0;
		break;
	case 12:
	case 13:
		Door.type = line->arg3 ? DREV_NORMAL : DREV_OPEN;
		break;
	default:
		Door.type = DREV_NORMAL;
		break;
	}
	Door.speed = itof(line->arg2) * 4.0;
	Door.topwait = itof(line->arg3) / 35.0;

	//
	// find the top and bottom of the movement range
	//
	Door.topheight = FindLowestCeilingSurrounding(sec);
	Door.topheight -= 4.0;
	SectorStartSequence(Door.sector,
		seq_name[SEQ_DOOR_STONE + Door.sector->seqType]);
	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.6  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/12/18 18:31:01  dj_jl
//  Added class SectorThinker
//
//  Revision 1.4  2001/09/24 17:17:17  dj_jl
//  Created thinker classes
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
