//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Environmental Action routines
//**
//**************************************************************************

//==========================================================================
//
//  Actor::A_HideThing
//
//==========================================================================

void Actor::A_HideThing(void)
{
	if (translucency < 100)
	{
		translucency += 100;
	}
}

//==========================================================================
//
//  Actor::A_UnHideThing
//
//==========================================================================

void Actor::A_UnHideThing(void)
{
	if (translucency >= 100)
	{
		translucency -= 100;
	}
}

//==========================================================================
//
//  Actor::A_RestoreArtifact
//
//==========================================================================

void Actor::A_RestoreArtifact(void)
{
	flags |= MF_SPECIAL;
	SetMobjState(this, spawnstate);
	StartSoundName(this, "Respawn", CHAN_VOICE);
}

//==========================================================================
//
//  Actor::A_RestoreSpecialThing1
//
//  Make a special thing visible again.
//
//==========================================================================

void Actor::A_RestoreSpecialThing1(void)
{
	translucency -= 100;
	StartSoundName(this, "Respawn", CHAN_VOICE);
}

//==========================================================================
//
//  Actor::A_RestoreSpecialThing2
//
//==========================================================================

void Actor::A_RestoreSpecialThing2(void)
{
	flags |= MF_SPECIAL;
	SetMobjState(this, spawnstate);
}

//===========================================================================
//
//  Actor::A_FlameCheck
//
//===========================================================================

void Actor::A_FlameCheck(void)
{
	if (!args[0]--)	// Called every 8 tics
	{
		SetMobjState(this, S_NULL);
	}
}

//===========================================================================
//
//  Actor::A_CheckThrowBomb
//
//===========================================================================

void Actor::A_CheckThrowBomb(void)
{
	if (fabs(velocity.x) < 1.5 * 35.0 &&
		fabs(velocity.y) < 1.5 * 35.0 &&
		velocity.z < 2.0 * 35.0 && statenum == S_THROWINGBOMB6)
	{
		SetMobjState(this, S_THROWINGBOMB7);
		origin.z = floorz;
		velocity.z = 0.0;
		flags2 &= ~MF2_FLOORBOUNCE;
		flags &= ~MF_MISSILE;
	}
	if (!--health)
	{
		SetMobjState(this, deathstate);
	}
}

//===========================================================================
//
//  Actor::A_NoGravity
//
//===========================================================================

void Actor::A_NoGravity(void)
{
	flags |= MF_NOGRAVITY;
}

//============================================================================
//
//  Actor::A_CorpseBloodDrip
//
//============================================================================

void Actor::A_CorpseBloodDrip(void)
{
	if (P_Random() > 128)
	{
		return;
	}
	P_SpawnMobj(origin.x, origin.y, origin.z + height / 2.0,
		MT_CORPSEBLOODDRIP);
}

//============================================================================
//
//  Actor::A_CorpseExplode
//
//============================================================================

void Actor::A_CorpseExplode(void)
{
	mobj_t *mo;
	int i;

	for (i = (P_Random() & 3) + 3; i; i--)
	{
		mo = P_SpawnMobj(origin.x, origin.y, origin.z, MT_CORPSEBIT);
		SetMobjState(mo, mo->spawnstate + (P_Random() % 3));
		if (mo)
		{
			mo->velocity.x = (Random() - Random()) * 4.0 * 35.0;
			mo->velocity.y = (Random() - Random()) * 4.0 * 35.0;
			mo->velocity.z = (Random() * 8.0 + 5.0) * (3.0 / 4.0) * 35.0;
		}
	}
	// Spawn a skull
	mo = P_SpawnMobj(origin.x, origin.y, origin.z, MT_CORPSEBIT);
	SetMobjState(mo, S_CORPSEBIT_4);
	if (mo)
	{
		mo->velocity.x = (Random() - Random()) * 4.0 * 35.0;
		mo->velocity.y = (Random() - Random()) * 4.0 * 35.0;
		mo->velocity.z = (Random() * 8.0 + 5.0) * (3.0 / 4.0) * 35.0;
		StartSoundName(mo, "FireDemonDeath", CHAN_VOICE);
	}
	P_RemoveMobj(this);
}

//===========================================================================
//
//  Actor::A_SoAExplode
//
//  Suit of Armor Explode
//
//===========================================================================

void Actor::A_SoAExplode(void)
{
	mobj_t *mo;
	int i;

	for (i = 0; i < 10; i++)
	{
		mo = P_SpawnMobj(origin.x + (Random() - 0.5) * 16.0,
			origin.y + (Random() - 0.5) * 16.0,
			origin.z + Random() * height, MT_ZARMORCHUNK);
		SetMobjState(mo, mo->spawnstate + i);
		if (mo)
		{
			mo->velocity.x = (Random() - Random()) * 4.0 * 35.0;
			mo->velocity.y = (Random() - Random()) * 4.0 * 35.0;
			mo->velocity.z = (Random() * 8.0 + 5.0) * 35.0;
		}
	}
	if (args[0])
	{
		// Spawn an item
		P_SpawnMobj(origin.x, origin.y, origin.z,
			TranslateThingType[args[0]]);
	}
	StartSoundName(mo, "SuitofArmorBreak", CHAN_VOICE);
	P_RemoveMobj(this);
}

//==========================================================================
//
//  Actor::A_ContMobjSound
//
//==========================================================================

void Actor::A_ContMobjSound(void)
{
	switch (Class)
	{
	case MT_SERPENTFX:
		StartSoundName(this, "SerpentFXContinuous", CHAN_VOICE);
		break;
	case MT_HAMMER_MISSILE:
		StartSoundName(this, "FighterHammerContinuous", CHAN_VOICE);
		break;
	case MT_QUAKE_FOCUS:
		StartSoundName(this, "Earthquake", CHAN_VOICE);
		break;
	default:
		break;
	}
}

//==========================================================================
//
//  Actor::A_ESound
//
//==========================================================================

void Actor::A_ESound(void)
{
	switch (Class)
	{
	case MT_SOUNDWIND:
		StartSoundName(this, "Wind", CHAN_VOICE);
		break;
	}
}

//============================================================================
//
//  A_SetInvulnerable
//
//============================================================================

void A_SetInvulnerable(mobj_t *actor)
{
	actor->flags2 |= MF2_INVULNERABLE;
}

//============================================================================
//
//  Actor::A_UnSetInvulnerable
//
//============================================================================

void Actor::A_UnSetInvulnerable(void)
{
	flags2 &= ~MF2_INVULNERABLE;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.5  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
