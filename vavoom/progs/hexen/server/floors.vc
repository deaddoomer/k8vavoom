//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	FLEV_LOWERFLOOR,	// lower floor to highest surrounding floor
	FLEV_LOWERFLOORTOLOWEST,	// lower floor to lowest surrounding floor
	FLEV_LOWERFLOORBYVALUE,
	FLEV_RAISEFLOOR,	// raise floor to lowest surrounding CEILING
	FLEV_RAISEFLOORTONEAREST,	// raise floor to next highest surrounding floor
	FLEV_RAISEFLOORBYVALUE,
	FLEV_RAISEFLOORCRUSH,
	FLEV_RAISEBYVALUETIMES8,
	FLEV_LOWERBYVALUETIMES8,
	FLEV_LOWERTIMES8INSTANT,
	FLEV_RAISETIMES8INSTANT,
	FLEV_MOVETOVALUETIMES8
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

class FloorMover:SectorMover
{
	int type;
	float speed;
	int direction;
	int crush;
	float floordestheight;
	int textureChange;

//==========================================================================
//
//	Tick
//
//  MOVE A FLOOR TO IT'S DESTINATION (UP OR DOWN)
//
//==========================================================================

void Tick(float deltaTime)
{
	int res;

	res = T_MovePlane(sector, speed * deltaTime,
		floordestheight, crush, 0, direction);

	if (res == RES_PASTDEST)
	{
		SectorStopSequence(sector);
		sector->SpecialData = none;
		if (textureChange)
		{
			SetFloorPic(sector, sector->floor.pic - textureChange);
		}
		TagFinished(sector->tag);
		RemoveSpecialThinker(self);
	}
}

}

//==========================================================================
//
//  EV_DoFloor
//
//  HANDLE FLOOR TYPES
//
//==========================================================================

int EV_DoFloor(line_t * line, int *args, int floortype)
{
	int secnum;
	int rtn;
	sector_t *sec;
	FloorMover Floor;

	rtn = 0;
	for (secnum = FindSectorFromTag(args[0], -1); secnum >= 0;
		secnum = FindSectorFromTag(args[0], secnum))
	{
		sec = &level->sectors[secnum];

		//      ALREADY MOVING?  IF SO, KEEP GOING...
		if (sec->SpecialData)
			continue;

		//
		//      new floor thinker
		//
		rtn = 1;
		Floor = NewSpecialThinker(FloorMover);
		sec->SpecialData = Floor;
		Floor.sector = sec;
		Floor.type = floortype;
		Floor.crush = 0;
		Floor.speed = itof(args[1]) * 35.0 / 8.0;//4.0;
		if (floortype == FLEV_LOWERTIMES8INSTANT ||
			floortype == FLEV_RAISETIMES8INSTANT)
		{
			Floor.speed = 32.0 * 2000.0;
		}
		switch (floortype)
		{
		case FLEV_LOWERFLOOR:
			Floor.direction = -1;
			Floor.floordestheight = FindHighestFloorSurrounding(sec);
			break;
		case FLEV_LOWERFLOORTOLOWEST:
			Floor.direction = -1;
			Floor.floordestheight = FindLowestFloorSurrounding(sec);
			break;
		case FLEV_LOWERFLOORBYVALUE:
			Floor.direction = -1;
			Floor.floordestheight = Floor.sector->floorheight -
				itof(args[2]);
			break;
		case FLEV_LOWERTIMES8INSTANT:
		case FLEV_LOWERBYVALUETIMES8:
			Floor.direction = -1;
			Floor.floordestheight = Floor.sector->floorheight -
				itof(args[2]) * 8.0;
			break;
		case FLEV_RAISEFLOORCRUSH:
			Floor.crush = args[2];	// arg[2] = crushing value
			Floor.direction = 1;
			Floor.floordestheight = sec->ceilingheight - 8.0;
			break;
		case FLEV_RAISEFLOOR:
			Floor.direction = 1;
			Floor.floordestheight = FindLowestCeilingSurrounding(sec);
			if (Floor.floordestheight > sec->ceilingheight)
				Floor.floordestheight = sec->ceilingheight;
			break;
		case FLEV_RAISEFLOORTONEAREST:
			Floor.direction = 1;
			Floor.floordestheight =
				FindNextHighestFloor(sec, sec->floorheight);
			break;
		case FLEV_RAISEFLOORBYVALUE:
			Floor.direction = 1;
			Floor.floordestheight = Floor.sector->floorheight +
				itof(args[2]);
			break;
		case FLEV_RAISETIMES8INSTANT:
		case FLEV_RAISEBYVALUETIMES8:
			Floor.direction = 1;
			Floor.floordestheight = Floor.sector->floorheight +
				itof(args[2]) * 8.0;
			break;
		case FLEV_MOVETOVALUETIMES8:
			Floor.floordestheight = itof(args[2]) * 8.0;
			if (args[3])
			{
				Floor.floordestheight = -Floor.floordestheight;
			}
			if (Floor.floordestheight > Floor.sector->floorheight)
			{
				Floor.direction = 1;
			}
			else if (Floor.floordestheight < Floor.sector->floorheight)
			{
				Floor.direction = -1;
			}
			else
			{	// already at lowest position
				rtn = 0;
			}
			break;
		default:
			Error("Invalid floor type.");
			rtn = 0;
			break;
		}
	}
	if (rtn)
	{
		SectorStartSequence(Floor.sector,
			seq_name[SEQ_PLATFORM + Floor.sector->seqType]);
	}
	return rtn;
}

//==========================================================================
//
//  EV_DoFloorAndCeiling
//
//==========================================================================

int EV_DoFloorAndCeiling(line_t * line, int *args, boolean raise)
{
	boolean floor;
	boolean ceiling;
	int secnum;
	sector_t *sec;

	if (raise)
	{
		floor = EV_DoFloor(line, args, FLEV_RAISEFLOORBYVALUE);
		for (secnum = FindSectorFromTag(args[0], -1); secnum >= 0;
			secnum = FindSectorFromTag(args[0], secnum))
		{
			sec = &level->sectors[secnum];
			sec->SpecialData = none;
		}
		ceiling = EV_DoCeiling(line, args, CLEV_RAISEBYVALUE);
	}
	else
	{
		floor = EV_DoFloor(line, args, FLEV_LOWERFLOORBYVALUE);
		for (secnum = FindSectorFromTag(args[0], -1); secnum >= 0;
			secnum = FindSectorFromTag(args[0], secnum))
		{
			sec = &level->sectors[secnum];
			sec->SpecialData = none;
		}
		ceiling = EV_DoCeiling(line, args, CLEV_LOWERBYVALUE);
	}
	return floor || ceiling;
}

//==========================================================================
//
// EV_FloorCrushStop
//
//==========================================================================

int EV_FloorCrushStop(line_t * line, int *args)
{
	FloorMover Floor;
	boolean rtn;

	rtn = 0;
	FOREACH(FloorMover, Floor)
	{
		if (Floor.type != FLEV_RAISEFLOORCRUSH)
		{
			continue;
		}
		// Completely remove the crushing floor
		SectorStopSequence(Floor.sector);
		Floor.sector->SpecialData = none;
		TagFinished(Floor.sector->tag);
		RemoveSpecialThinker(Floor);
		rtn = 1;
	}
	return rtn;
}

//**************************************************************************
//
//  STAIRS
//
//**************************************************************************

// ===== Build Stairs Private Data =====

#define STAIR_SECTOR_TYPE       26
#define STAIR_QUEUE_SIZE        32

enum
{
	STAIRS_NORMAL,
	STAIRS_SYNC,
	STAIRS_PHASED
};

struct stairqueue_t
{
	sector_t *sector;
	int type;
	float height;
};

stairqueue_t StairQueue[STAIR_QUEUE_SIZE];
int StairQueueHead;
int StairQueueTail;

float StairStepDelta;
int StairDirection;
float StairSpeed;
int StairTexture;
float StairStartDelay;
float StairStartDelayDelta;
int StairTextureChange;
float StairStartHeight;

class StairStepMover:SectorMover
{
	float speed;
	int direction;
	int crush;
	float floordestheight;
	float delayTime;
	float delayTotal;
	float stairsDelayHeight;
	float stairsDelayHeightDelta;
	float resetHeight;
	float resetDelay;
	float resetDelayTime;
	int textureChange;

//==========================================================================
//
//	Tick
//
//  MOVE A FLOOR TO IT'S DESTINATION (UP OR DOWN)
//
//==========================================================================

void Tick(float deltaTime)
{
	int res;

	if (resetDelayTime)
	{
		resetDelayTime -= deltaTime;
		if (resetDelayTime <= 0.0)
		{
			resetDelayTime = 0.0;
			floordestheight = resetHeight;
			direction = -direction;
			resetDelay = 0.0;
			delayTime = 0.0;
			delayTotal = 0.0;
		}
	}
	if (delayTime)
	{
		delayTime -= deltaTime;
		if (delayTime <= 0.0)
 		{
 			delayTime = 0.0;
 			if (textureChange)
			{
				SetFloorPic(sector, sector->floor.pic + textureChange);
			}
		}
		return;
	}

	res = T_MovePlane(sector, speed * deltaTime,
		floordestheight, crush, 0, direction);

	if ((direction == 1 && sector->floorheight >=
			stairsDelayHeight) || (direction == -1 &&
			sector->floorheight <= stairsDelayHeight))
	{
		delayTime = delayTotal;
		stairsDelayHeight += stairsDelayHeightDelta;
	}
	if (res == RES_PASTDEST)
	{
		SectorStopSequence(sector);
		if (delayTotal)
		{
			delayTotal = 0.0;
		}
		if (resetDelay)
		{
//          resetDelayTime = resetDelay;
//          resetDelay = 0.0;
			return;
		}
		sector->SpecialData = none;
		if (textureChange)
		{
			SetFloorPic(sector, sector->floor.pic - textureChange);
		}
		sector->SpecialData = none;
		TagFinished(sector->tag);
		RemoveSpecialThinker(self);
	}
}

}

//==========================================================================
//
//  QueueStairSector
//
//==========================================================================

void QueueStairSector(sector_t * sec, int type, float height)
{
	if ((StairQueueTail + 1) % STAIR_QUEUE_SIZE == StairQueueHead)
	{
		Error("BuildStairs:  Too many branches located.");
	}
	StairQueue[StairQueueTail].sector = sec;
	StairQueue[StairQueueTail].type = type;
	StairQueue[StairQueueTail].height = height;

	StairQueueTail = (StairQueueTail + 1) % STAIR_QUEUE_SIZE;
}

//==========================================================================
//
//  DequeueStairSector
//
//==========================================================================

sector_t *DequeueStairSector(int *type, float *height)
{
	sector_t *sec;

	if (StairQueueHead == StairQueueTail)
	{
		// queue is empty
		return NULL;
	}
	*type = StairQueue[StairQueueHead].type;
	*height = StairQueue[StairQueueHead].height;
	sec = StairQueue[StairQueueHead].sector;
	StairQueueHead = (StairQueueHead + 1) % STAIR_QUEUE_SIZE;

	return sec;
}

//==========================================================================
//
//  ProcessStairSector
//
//==========================================================================

void ProcessStairSector(sector_t * sec, int type, float height,
	int stairsType, float delay, float resetDelay)
{
	int i;
	sector_t *tsec;
	StairStepMover StairStep;

	//
	// new stairStep thinker
	//
	height += StairStepDelta;
	StairStep = NewSpecialThinker(StairStepMover);
	sec->SpecialData = StairStep;
	StairStep.direction = StairDirection;
	StairStep.sector = sec;
	StairStep.floordestheight = height;
	switch (stairsType)
	{
	case STAIRS_NORMAL:
		StairStep.speed = StairSpeed;
		if (delay)
		{
			StairStep.delayTotal = delay;
			StairStep.stairsDelayHeight = sec->floorheight + StairStepDelta;
			StairStep.stairsDelayHeightDelta = StairStepDelta;
		}
		StairStep.resetDelay = resetDelay;
		StairStep.resetDelayTime = resetDelay;
		StairStep.resetHeight = sec->floorheight;
		break;
	case STAIRS_SYNC:
		StairStep.speed = StairSpeed * (height - StairStartHeight) / StairStepDelta;
		StairStep.resetDelay = delay;	//arg4
		StairStep.resetDelayTime = delay;
		StairStep.resetHeight = sec->floorheight;
		break;
/*
	case STAIRS_PHASED:
		StairStep.floordestheight = sec->floorheight + StairStepDelta;
		StairStep.speed = StairSpeed;
		StairStep.delayTime = StairStartDelay;
		StairStartDelay += StairStartDelayDelta;
		StairStep.textureChange = StairTextureChange;
		StairStep.resetDelayCount = StairStartDelay;
		break;
*/
	default:
		break;
	}
	SectorStartSequence(sec, seq_name[SEQ_PLATFORM + sec->seqType]);
	//
	// Find next sector to raise
	// Find nearby sector with sector special equal to type
	//
	for (i = 0; i < sec->linecount; i++)
	{
		line_t *line;

		line = sec->lines[i];
		if (!(line->flags & ML_TWOSIDED))
		{
			continue;
		}
		tsec = line->frontsector;
		if (tsec->special == type + STAIR_SECTOR_TYPE && !tsec->SpecialData
			&& tsec->floor.pic == StairTexture && tsec->validcount != *validcount)
		{
			QueueStairSector(tsec, type ^ 1, height);
			tsec->validcount = *validcount;
			//tsec->special = 0;
		}
		tsec = line->backsector;
		if (tsec->special == type + STAIR_SECTOR_TYPE && !tsec->SpecialData
			&& tsec->floor.pic == StairTexture && tsec->validcount != *validcount)
		{
			QueueStairSector(tsec, type ^ 1, height);
			tsec->validcount = *validcount;
			//tsec->special = 0;
		}
	}
}

//==========================================================================
//
//  EV_BuildStairs
//
//  BUILD A STAIRCASE!
//
//  StairDirection is either positive or negative, denoting build stairs
// up or down.
//
//==========================================================================

int EV_BuildStairs(line_t * line, int *args, int direction, int stairsType)
{
	int secnum;
	float height;
	float delay;
	float resetDelay;
	sector_t *sec;
	sector_t *qSec;
	int type;

	// Set global stairs variables
	StairTextureChange = 0;
	StairDirection = direction;
	StairStepDelta = itof(StairDirection * args[2]);
	StairSpeed = itof(args[1]) * 4.0;
	resetDelay = itof(args[4]) / 32.0;
	delay = itof(args[3]) / 32.0;
	if (stairsType == STAIRS_PHASED)
	{
		StairStartDelayDelta = itof(args[3]) / 32.0;
		StairStartDelay = StairStartDelayDelta;
		resetDelay = StairStartDelayDelta;
		delay = 0.0;
		StairTextureChange = args[4];
	}

	(*validcount)++;
	for (secnum = FindSectorFromTag(args[0], -1); secnum >= 0;
		secnum = FindSectorFromTag(args[0], secnum))
	{
		sec = &level->sectors[secnum];

		StairTexture = sec->floor.pic;
		StairStartHeight = sec->floorheight;

		// ALREADY MOVING?  IF SO, KEEP GOING...
		if (sec->SpecialData)
			continue;

		QueueStairSector(sec, 0, sec->floorheight);
		sec->special = 0;
	}
	for (qSec = DequeueStairSector(&type, &height); qSec != NULL;
		qSec = DequeueStairSector(&type, &height))
	{
		ProcessStairSector(qSec, type, height, stairsType, delay, resetDelay);
	}
	return 1;
}

//**************************************************************************
//
//  PILLAR
//
//**************************************************************************

class TPillar:SectorMover
{
	int direction;
	int crush;
	float ceilingSpeed;
	float floorSpeed;
	float floordest;
	float ceilingdest;

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	int res1;
	int res2;

	// First, raise the floor
	res1 = T_MovePlane(sector, floorSpeed * deltaTime, floordest,
		crush, 0, direction);	// floorOrCeiling, direction
	// Then, lower the ceiling
	res2 = T_MovePlane(sector, ceilingSpeed * deltaTime,
		ceilingdest, crush, 1, -direction);
	if (res1 == RES_PASTDEST && res2 == RES_PASTDEST)
	{
		sector->SpecialData = none;
		SectorStopSequence(sector);
		TagFinished(sector->tag);
		RemoveSpecialThinker(self);
	}
}

}

//==========================================================================
//
//  EV_BuildPillar
//
//==========================================================================

int EV_BuildPillar(line_t * line, int *args, boolean crush)
{
	int secnum;
	sector_t *sec;
	TPillar Pillar;
	float newHeight;
	int rtn;

	rtn = 0;
	for (secnum = FindSectorFromTag(args[0], -1); secnum >= 0;
		secnum = FindSectorFromTag(args[0], secnum))
	{
		sec = &level->sectors[secnum];
		if (sec->SpecialData)
			continue;	// already moving
		if (sec->floorheight == sec->ceilingheight)
		{
			// pillar is already closed
			continue;
		}
		rtn = 1;
		if (!args[2])
		{
			newHeight = sec->floorheight +
				((sec->ceilingheight - sec->floorheight) / 2.0);
		}
		else
		{
			newHeight = sec->floorheight + itof(args[2]);
		}

		Pillar = NewSpecialThinker(TPillar);
		sec->SpecialData = Pillar;
		Pillar.sector = sec;
		if (!args[2])
		{
			Pillar.floorSpeed = itof(args[1]) * 4.0;
			Pillar.ceilingSpeed = Pillar.floorSpeed;
		}
		else if (newHeight - sec->floorheight >
			sec->ceilingheight - newHeight)
		{
			Pillar.floorSpeed = itof(args[1]) * 4.0;
			Pillar.ceilingSpeed = (sec->ceilingheight - newHeight) *
				Pillar.floorSpeed / (newHeight - sec->floorheight);
		}
		else
		{
			Pillar.ceilingSpeed = itof(args[1]) * 4.0;
			Pillar.floorSpeed = (newHeight - sec->floorheight) *
				Pillar.ceilingSpeed / (sec->ceilingheight - newHeight);
		}
		Pillar.floordest = newHeight;
		Pillar.ceilingdest = newHeight;
		Pillar.direction = 1;
		Pillar.crush = crush * args[3];
		SectorStartSequence(Pillar.sector,
			seq_name[SEQ_PLATFORM + Pillar.sector->seqType]);
	}
	return rtn;
}

//==========================================================================
//
// EV_OpenPillar
//
//==========================================================================

int EV_OpenPillar(line_t * line, int *args)
{
	int secnum;
	sector_t *sec;
	TPillar Pillar;
	int rtn;

	rtn = 0;
	for (secnum = FindSectorFromTag(args[0], -1); secnum >= 0;
		secnum = FindSectorFromTag(args[0], secnum))
	{
		sec = &level->sectors[secnum];
		if (sec->SpecialData)
			continue;	// already moving
		if (sec->floorheight != sec->ceilingheight)
		{	// pillar isn't closed
			continue;
		}
		rtn = 1;
		Pillar = NewSpecialThinker(TPillar);
		sec->SpecialData = Pillar;
		Pillar.sector = sec;
		if (!args[2])
		{
			Pillar.floordest = FindLowestFloorSurrounding(sec);
		}
		else
		{
			Pillar.floordest = sec->floorheight - itof(args[2]);
		}
		if (!args[3])
		{
			Pillar.ceilingdest = FindHighestCeilingSurrounding(sec);
		}
		else
		{
			Pillar.ceilingdest = sec->ceilingheight + itof(args[3]);
		}
		if (sec->floorheight - Pillar.floordest >= Pillar.ceilingdest -
			sec->ceilingheight)
		{
			Pillar.floorSpeed = itof(args[1]) * 4.0;
			Pillar.ceilingSpeed = (sec->ceilingheight -
				Pillar.ceilingdest) * Pillar.floorSpeed /
				(Pillar.floordest - sec->floorheight);
		}
		else
		{
			Pillar.ceilingSpeed = itof(args[1]) * 4.0;
			Pillar.floorSpeed = (Pillar.floordest -
				sec->floorheight) * Pillar.ceilingSpeed /
				(sec->ceilingheight - Pillar.ceilingdest);
		}
		Pillar.direction = -1;	// open the pillar
		SectorStartSequence(Pillar.sector,
			seq_name[SEQ_PLATFORM + Pillar.sector->seqType]);
	}
	return rtn;
}

//**************************************************************************
//
//  FLOOR WAGGLE
//
//**************************************************************************

#define WGLSTATE_EXPAND 1
#define WGLSTATE_STABLE 2
#define WGLSTATE_REDUCE 3

class FloorWaggle:SectorMover
{
	float originalHeight;
	float accumulator;
	float accSpeed;
	float targetScale;
	float scale;
	float scaleSpeed;
	float timer;
	int state;

//==========================================================================
//
//  Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	switch (state)
	{
	case WGLSTATE_EXPAND:
		scale += scaleSpeed * deltaTime;
		if (scale >= targetScale)
		{
			scale = targetScale;
			state = WGLSTATE_STABLE;
		}
		break;
	case WGLSTATE_REDUCE:
		scale -= scaleSpeed * deltaTime;
		if (scale <= 0.0)
		{
			// Remove
			sector->floor.dist = originalHeight;
			P_ChangeSector(sector, true);
			sector->SpecialData = none;
			TagFinished(sector->tag);
			RemoveSpecialThinker(self);
			return;
		}
		break;
	case WGLSTATE_STABLE:
		if (timer >= 0.0)
		{
			timer -= deltaTime;
			if (timer <= 0.0)
			{
				state = WGLSTATE_REDUCE;
			}
		}
		break;
	}
	accumulator += accSpeed * deltaTime;
	sector->floor.dist = originalHeight +
		FloatBobOffsets[ftoi(accumulator) & 63] * scale;
	P_ChangeSector(sector, true);
}

}

//==========================================================================
//
//  EV_StartFloorWaggle
//
//==========================================================================

boolean EV_StartFloorWaggle(int tag, int height, int speed, int offset,
	int timer)
{
	int sectorIndex;
	sector_t *sector;
	FloorWaggle Waggle;
	boolean retCode;

	retCode = false;
	for (sectorIndex = FindSectorFromTag(tag, -1); sectorIndex >= 0;
		sectorIndex = FindSectorFromTag(tag, sectorIndex))
	{
		sector = &level->sectors[sectorIndex];
		if (sector->SpecialData)
		{
			// Already busy with another thinker
			continue;
		}
		retCode = true;
		Waggle = NewSpecialThinker(FloorWaggle);
		sector->SpecialData = Waggle;
		Waggle.sector = sector;
		Waggle.originalHeight = sector->floor.dist;
		Waggle.accumulator = itof(offset);
		Waggle.accSpeed = itof(speed) / 2.0;
		Waggle.scale = 0.0;
		Waggle.targetScale = itof(height) / 64.0;
		Waggle.scaleSpeed = Waggle.targetScale
			/ (1.0 + 3.0 * itof(height) / 255.0);
		Waggle.timer = timer ? itof(timer) : -1.0;
		Waggle.state = WGLSTATE_EXPAND;
	}
	return retCode;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/04/11 16:48:10  dj_jl
//  New base classes for sector thinkers, Tick function.
//
//  Revision 1.13  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.12  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.11  2002/01/29 18:16:19  dj_jl
//  Adjusted speed to fix timing
//
//  Revision 1.10  2002/01/15 08:12:26  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.9  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.8  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/18 18:31:01  dj_jl
//  Added class SectorThinker
//
//  Revision 1.6  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/25 17:13:50  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/24 17:17:17  dj_jl
//  Created thinker classes
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
