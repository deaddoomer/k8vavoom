//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

int WeaponManaUseTable[NUMCLASSES * NUMWEAPONS] = {
	0, 2, 3, 14,	//  Fighter
	0, 1, 4, 18,	//  Priest
	0, 3, 5, 15,	//  Mage
	0, 0, 0, 0	//  Pig
};

//****************************************************************************
//
//  WEAPON UTILITES
//
//****************************************************************************

//==========================================================================
//
//	SetWeapon
//
//==========================================================================

void SetWeapon(player_t *player, int NewWeapon)
{
	player->ReadyWeapon = NewWeapon;
	player->PendingWeapon = wp_nochange;

	if (player->ViewEnts[ps_weapon])
	{
		player->ViewEnts[ps_weapon].Destroy();
	}
	player->ViewEnts[ps_weapon] =
		SpawnObject(WeaponClasses[NewWeapon * NUMCLASSES + player->PClass], none);
	player->ViewEnts[ps_weapon].Player = player;
	player->PSpriteSY = Weapon(player->ViewEnts[ps_weapon]).PSpriteSY;
}

//===========================================================================
//
//  SetPsprite
//
//===========================================================================

void SetPsprite(player_t * player, int position, int stnum)
{
	player->ViewEnts[position].SetState(stnum);
}

//==========================================================================
//
//  WeaponManaUse
//
//==========================================================================

int WeaponManaUse(int pclass, int num)
{
	return WeaponManaUseTable[(pclass << 2) + num];
}

//==========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
//
//==========================================================================

void BringUpWeapon(player_t * player)
{
	player->PendingWeapon = wp_nochange;
	player->ViewEnts[ps_weapon].SY = WEAPONBOTTOM;
	player->ViewEnts[ps_weapon].SetState(
		Weapon(player->ViewEnts[ps_weapon]).GetUpState());
}

//==========================================================================
//
//  DropWeapon
//
//  The player died, so put the weapon away.
//
//==========================================================================

void DropWeapon(player_t * player)
{
	player->ViewEnts[ps_weapon].SetState(
		Weapon(player->ViewEnts[ps_weapon]).GetDownState());
}

//==========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player
//
//==========================================================================

void SetupPsprites(player_t * player)
{
	int i;

	// Remove all psprites
	for (i = 0; i < NUMPSPRITES; i++)
	{
		player->ViewEnts[i].StateNum = 0;
	}
	// Spawn the ready weapon
	BringUpWeapon(player);
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine
//
//==========================================================================

void MovePsprites(player_t * player)
{
	int i;
	ViewEntity e;

	for (i = 0; i < NUMPSPRITES; i++)
	{
		e = player->ViewEnts[i];
		if (e.StateNum)	// a null state means not active
		{
			// drop tic count and possibly change state
			if (e.StateTime != -1.0)	// a -1 tic count never changes
			{
				e.StateTime -= frametime;
				if (e.StateTime <= 0.0)
				{
					e.StateTime = 0.0;
					e.SetState(e.NextState);
				}
			}
		}
	}
	player->ViewEnts[ps_flash].SX = player->ViewEnts[ps_weapon].SX;
	player->ViewEnts[ps_flash].SY = player->ViewEnts[ps_weapon].SY;
}

//==========================================================================
//
//  P_CheckMana
//
//  Returns true if there is enough mana to shoot.  If not, selects the
// next weapon to use.
//
//==========================================================================

bool P_CheckMana(player_t * player)
{
	int mana;
	int count;

	mana = Weapon(player->ViewEnts[ps_weapon]).Mana;
	count = WeaponManaUse(player->PClass, player->ReadyWeapon);
	if (mana == MANA_BOTH)
	{
		if (player->Mana[MANA_1] >= count && player->Mana[MANA_2] >= count)
		{
			return true;
		}
	}
	else if (mana == MANA_NONE || player->Mana[mana] >= count)
	{
		return true;
	}
	// out of mana, pick a weapon to change to
	do
	{
		if (player->WeaponOwned[WP_THIRD]
			&& player->Mana[MANA_2] >= WeaponManaUse(player->PClass,
				WP_THIRD))
		{
			player->PendingWeapon = WP_THIRD;
		}
		else if (player->WeaponOwned[WP_SECOND]
			&& player->Mana[MANA_1] >= WeaponManaUse(player->PClass,
				WP_SECOND))
		{
			player->PendingWeapon = WP_SECOND;
		}
		else if (player->WeaponOwned[WP_FOURTH]
			&& player->Mana[MANA_1] >= WeaponManaUse(player->PClass,
				WP_FOURTH)
			&& player->Mana[MANA_2] >= WeaponManaUse(player->PClass,
				WP_FOURTH))
		{
			player->PendingWeapon = WP_FOURTH;
		}
		else
		{
			player->PendingWeapon = WP_FIRST;
		}
	}
	while (player->PendingWeapon == wp_nochange);
	SetPsprite(player, ps_weapon,
		Weapon(player->ViewEnts[ps_weapon]).GetDownState());
	return false;
}

//==========================================================================
//
//  P_FireWeapon
//
//==========================================================================

void P_FireWeapon(player_t * player)
{
	if (!P_CheckMana(player))
	{
		return;
	}
	player->MO.SetState(player->MO.MissileState);
	player->ViewEnts[ps_weapon].SetState(
		Weapon(player->ViewEnts[ps_weapon]).GetAttackState());
	NoiseAlert(player->MO, player->MO);
}

//==========================================================================
//
//  ActivateMorphWeapon
//
//==========================================================================

void ActivateMorphWeapon(player_t * player)
{
	player->ViewEnts[ps_weapon].SY = WEAPONTOP;
	SetWeapon(player, WP_FIRST);	// Snout is the first weapon
	SetPsprite(player, ps_weapon,
		Weapon(player->ViewEnts[ps_weapon]).ReadyState);
}

//==========================================================================
//
//  PostMorphWeapon
//
//==========================================================================

void PostMorphWeapon(player_t * player, int weapon)
{
	SetWeapon(player, weapon);
	player->ViewEnts[ps_weapon].SY = WEAPONBOTTOM;
	SetPsprite(player, ps_weapon, Weapon(player->ViewEnts[ps_weapon]).UpState);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.19  2002/11/02 08:24:12  dj_jl
//  New style classes.
//
//  Revision 1.18  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.17  2002/07/23 13:07:31  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.16  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.15  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.14  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.13  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.12  2002/03/02 17:35:56  dj_jl
//  Weapon classes
//
//  Revision 1.11  2002/02/22 18:00:25  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.10  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.9  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.8  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
