//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#define SHARDSPAWN_LEFT		1
#define SHARDSPAWN_RIGHT	2
#define SHARDSPAWN_UP		4
#define SHARDSPAWN_DOWN		8

int WeaponManaUseTable[NUMCLASSES * NUMWEAPONS] = {
	0, 2, 3, 14,	//  Fighter
	0, 1, 4, 18,	//  Priest
	0, 3, 5, 15,	//  Mage
	0, 0, 0, 0	//  Pig
};

//****************************************************************************
//
//  WEAPON UTILITES
//
//****************************************************************************

//===========================================================================
//
//  SetPsprite
//
//===========================================================================

void SetPsprite(player_t * player, int position, int stnum)
{
	ViewEntity e;
	state_t *state;

	e = player->ViewEnts[position];
	do
	{
		if (!stnum)
		{
			// Object removed itself.
			e.statenum = 0;
			break;
		}
		state = &states[stnum];
		e.time = state->time;	// could be 0
		e.sprite = state->sprite;
		e.frame = state->frame;
		e.model_index = state->model_index;
		e.alias_frame = state->model_frame;
		e.statenum = state->statenum;
		e.nextstate = state->nextstate;
		if (state->misc1)
		{
			// Set coordinates.
			e.sx = state->misc1;
		}
		if (state->misc2)
		{
			e.sy = state->misc2;
		}
		if (state->function)
		{
			// Call action routine.
			state->function(e);
			if (!e.statenum)
			{
				break;
			}
		}
		stnum = e.nextstate;
	}
	while (!e.time);	// An initial state of 0 could cycle through.
}

//==========================================================================
//
//  SetPspriteNF
//
//  Identical to SetPsprite, without calling the action function
//
//==========================================================================

void SetPspriteNF(player_t * player, int position, int stnum)
{
	ViewEntity e;
	state_t *state;

	e = player->ViewEnts[position];
	do
	{
		if (!stnum)
		{	// Object removed itself.
			e.statenum = 0;
			break;
		}
		state = &states[stnum];
		e.time = state->time;	// could be 0
		e.sprite = state->sprite;
		e.frame = state->frame;
		e.model_index = state->model_index;
		e.alias_frame = state->model_frame;
		e.statenum = state->statenum;
		e.nextstate = state->nextstate;
		if (state->misc1)
		{	// Set coordinates.
			e.sx = state->misc1;
		}
		if (state->misc2)
		{
			e.sy = state->misc2;
		}
		stnum = e.nextstate;
	}
	while (!e.time);	// An initial state of 0 could cycle through.
}

//==========================================================================
//
//  WeaponManaUse
//
//==========================================================================

int WeaponManaUse(int pclass, int num)
{
	return WeaponManaUseTable[(pclass << 2) + num];
}

//==========================================================================
//
//  SetFighterAxe
//
//==========================================================================

void SetFighterAxe(player_t * player)
{
	SetPsprite(player, ps_weapon, S_FAXEREADY_G);
}

//==========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
//
//==========================================================================

void BringUpWeapon(player_t * player)
{
	int newstate;

	if (player->pclass == PCLASS_FIGHTER &&
		player->readyweapon == WP_SECOND && player->mana[MANA_1])
	{
		newstate = S_FAXEUP_G;
	}
	else
	{
		newstate = player->w_upstate;
	}
	player->pendingweapon = wp_nochange;
	player->ViewEnts[ps_weapon].sy = WEAPONBOTTOM;
	SetPsprite(player, ps_weapon, newstate);
}

//==========================================================================
//
//  DropWeapon
//
//  The player died, so put the weapon away.
//
//==========================================================================

void DropWeapon(player_t * player)
{
	SetPsprite(player, ps_weapon, player->w_downstate);
}

//==========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player
//
//==========================================================================

void SetupPsprites(player_t * player)
{
	int i;

	// Remove all psprites
	for (i = 0; i < NUMPSPRITES; i++)
	{
		player->ViewEnts[i].statenum = 0;
	}
	// Spawn the ready weapon
	BringUpWeapon(player);
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine
//
//==========================================================================

void MovePsprites(player_t * player)
{
	int i;
	ViewEntity e;

	for (i = 0; i < NUMPSPRITES; i++)
	{
		e = player->ViewEnts[i];
		if (e.statenum)	// a null state means not active
		{
			// drop tic count and possibly change state
			if (e.time != -1.0)	// a -1 tic count never changes
			{
				e.time -= frametime;
				if (e.time <= 0.0)
				{
					e.time = 0.0;
					SetPsprite(player, i, e.nextstate);
				}
			}
		}
	}
	player->ViewEnts[ps_flash].sx = player->ViewEnts[ps_weapon].sx;
	player->ViewEnts[ps_flash].sy = player->ViewEnts[ps_weapon].sy;
}

//==========================================================================
//
//  P_CheckMana
//
//  Returns true if there is enough mana to shoot.  If not, selects the
// next weapon to use.
//
//==========================================================================

boolean P_CheckMana(player_t * player)
{
	int mana;
	int count;

	mana = player->w_mana;
	count = WeaponManaUse(player->pclass, player->readyweapon);
	if (mana == MANA_BOTH)
	{
		if (player->mana[MANA_1] >= count && player->mana[MANA_2] >= count)
		{
			return true;
		}
	}
	else if (mana == MANA_NONE || player->mana[mana] >= count)
	{
		return true;
	}
	// out of mana, pick a weapon to change to
	do
	{
		if (player->weaponowned[WP_THIRD]
			&& player->mana[MANA_2] >= WeaponManaUse(player->pclass,
				WP_THIRD))
		{
			player->pendingweapon = WP_THIRD;
		}
		else if (player->weaponowned[WP_SECOND]
			&& player->mana[MANA_1] >= WeaponManaUse(player->pclass,
				WP_SECOND))
		{
			player->pendingweapon = WP_SECOND;
		}
		else if (player->weaponowned[WP_FOURTH]
			&& player->mana[MANA_1] >= WeaponManaUse(player->pclass,
				WP_FOURTH)
			&& player->mana[MANA_2] >= WeaponManaUse(player->pclass,
				WP_FOURTH))
		{
			player->pendingweapon = WP_FOURTH;
		}
		else
		{
			player->pendingweapon = WP_FIRST;
		}
	}
	while (player->pendingweapon == wp_nochange);
	SetPsprite(player, ps_weapon, player->w_downstate);
	return false;
}

//==========================================================================
//
//  P_FireWeapon
//
//==========================================================================

void P_FireWeapon(player_t * player)
{
	int attackState;

	if (!P_CheckMana(player))
	{
		return;
	}
	player->mo->SetState(PStateAttack[player->pclass]);
	if (player->pclass == PCLASS_FIGHTER && player->readyweapon == WP_SECOND
		&& player->mana[MANA_1] > 0)
	{	// Glowing axe
		attackState = S_FAXEATK_G1;
	}
	else
	{
		attackState = player->refire ?
			player->w_holdatkstate : player->w_atkstate;
	}
	SetPsprite(player, ps_weapon, attackState);
	P_NoiseAlert(player->mo, player->mo);
}

//============================================================================
//
//  AdjustPlayerAngle
//
//============================================================================

#define MAX_ANGLE_ADJUST	5.0

void AdjustPlayerAngle(mobj_t * pmo)
{
	float angle;
	float difference;

	angle = atan2(linetarget->Origin.y - pmo->Origin.y,
		linetarget->Origin.x - pmo->Origin.x);
	difference = AngleMod180(angle - pmo->Angles.yaw);
	if (fabs(difference) > MAX_ANGLE_ADJUST)
	{
		pmo->Angles.yaw +=
			difference > 0.0 ? MAX_ANGLE_ADJUST : -MAX_ANGLE_ADJUST;
	}
	else
	{
		pmo->Angles.yaw = angle;
	}
	pmo->Player->fixangle = true;
}

//==========================================================================
//
//  ActivateMorphWeapon
//
//==========================================================================

void ActivateMorphWeapon(player_t * player)
{
	player->pendingweapon = wp_nochange;
	player->ViewEnts[ps_weapon].sy = WEAPONTOP;
	player->readyweapon = WP_FIRST;	// Snout is the first weapon
	weaponinfo[player->readyweapon * NUMCLASSES + player->pclass] (player);
	player->pspriteSY =
		PSpriteSY[player->pclass * NUMWEAPONS + player->readyweapon];
	SetPsprite(player, ps_weapon, S_SNOUTREADY);
}

//==========================================================================
//
//  PostMorphWeapon
//
//==========================================================================

void PostMorphWeapon(player_t * player, int weapon)
{
	player->pendingweapon = wp_nochange;
	player->readyweapon = weapon;
	weaponinfo[player->readyweapon * NUMCLASSES + player->pclass] (player);
	player->pspriteSY =
		PSpriteSY[player->pclass * NUMWEAPONS + player->readyweapon];
	player->ViewEnts[ps_weapon].sy = WEAPONBOTTOM;
	SetPsprite(player, ps_weapon, player->w_upstate);
}

//****************************************************************************
//
//  WEAPON ACTIONS
//
//****************************************************************************

//==========================================================================
//
//  Weapon::A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
//
//==========================================================================

void Weapon::A_WeaponReady(void)
{
	float angle;

	// Change player from attack state
	if (player->mo->StateNum >= PStateAttack[player->pclass] &&
		player->mo->StateNum <= PStateAttackEnd[player->pclass])
	{
		player->mo->SetState(PStateNormal[player->pclass]);
	}
	// Put the weapon away if the player has a pending weapon or has
	// died.
	if (player->pendingweapon != wp_nochange || !player->health)
	{
		SetPsprite(player, ps_weapon, player->w_downstate);
		return;
	}

	// Check for fire. 
	if (player->buttons & BT_ATTACK)
	{
		player->attackdown = true;
		P_FireWeapon(player);
		return;
	}
	else
	{
		player->attackdown = false;
	}

	if (!player->morphTics)
	{
		// Bob the weapon based on movement speed.
		angle = AngleMod360(180.0 * level->time);
		sx = 1.0 + player->bob * cos(angle);
		if (angle >= 180.0)
		{
			angle -= 180.0;
		}
		sy = WEAPONTOP + player->bob * sin(angle);
	}
}

//==========================================================================
//
//  Weapon::A_Lower
//
//==========================================================================

void Weapon::A_Lower(void)
{
	if (player->morphTics)
	{
		sy = WEAPONBOTTOM;
	}
	else
	{
		sy += LOWERSPEED;
	}
	if (sy < WEAPONBOTTOM)
	{
		// Not lowered all the way yet
		return;
	}
	if (player->playerstate == PST_DEAD)
	{
		// Player is dead, so don't bring up a pending weapon
		sy = WEAPONBOTTOM;
		return;
	}
	if (!player->health)
	{
		// Player is dead, so keep the weapon off screen
		SetPsprite(player, ps_weapon, S_NULL);
		return;
	}
	player->readyweapon = player->pendingweapon;
	weaponinfo[player->readyweapon * NUMCLASSES + player->pclass] (player);
	player->pspriteSY =
		PSpriteSY[player->pclass * NUMWEAPONS + player->readyweapon];
	BringUpWeapon(player);
}

//==========================================================================
//
//  Weapon::A_Raise
//
//==========================================================================

void Weapon::A_Raise(void)
{
	sy -= RAISESPEED;
	if (sy > WEAPONTOP)
	{
		// Not raised all the way yet
		return;
	}
	sy = WEAPONTOP;
	if (player->pclass == PCLASS_FIGHTER && player->readyweapon == WP_SECOND
		&& player->mana[MANA_1])
	{
		SetPsprite(player, ps_weapon, S_FAXEREADY_G);
	}
	else
	{
		SetPsprite(player, ps_weapon, player->w_readystate);
	}
}

//==========================================================================
//
//  Weapon::A_ReFire
//
//  The player can re fire the weapon without lowering it entirely.
//
//==========================================================================

void Weapon::A_ReFire(void)
{
	if ((player->buttons & BT_ATTACK)
		&& player->pendingweapon == wp_nochange && player->health)
	{
		player->refire++;
		P_FireWeapon(player);
	}
	else
	{
		player->refire = 0;
		P_CheckMana(player);
	}
}

//==========================================================================
//
//  Weapon::A_Light0
//
//==========================================================================

void Weapon::A_Light0(void)
{
	player->extralight = 0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.10  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.9  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.8  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
