//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//===========================================================================
//
// Thrust floor stuff
//
// Thrust Spike Variables
//      specialmobj1    pointer to dirt clump mobj
//      special2        speed of raise
//      args[0]     0 = lowered,  1 = raised
//      args[1]     0 = normal,   1 = bloody
//===========================================================================

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::A_ThrustInitUp
//
//==========================================================================

void Actor::A_ThrustInitUp(void)
{
	special2 = 5;	// Raise speed
	args[0] = 1;	// Mark as up
	floorclip = 0.0;
	Flags = MF_SOLID;
	Flags2 = MF2_NOTELEPORT | MF2_FLOORCLIP;
	specialmobj1 = NULL;
}

//==========================================================================
//
//  Actor::A_ThrustInitDn
//
//==========================================================================

void Actor::A_ThrustInitDn(void)
{
	mobj_t *mo;

	special2 = 5;	// Raise speed
	args[0] = 0;	// Mark as down
	floorclip = Height;
	Flags = 0;
	Flags2 = MF2_NOTELEPORT | MF2_FLOORCLIP;
	Translucency = 100;
	mo = P_SpawnMobj(origin.x, origin.y, origin.z, DirtClump);
	specialmobj1 = mo;
}

//==========================================================================
//
//  Actor::A_ThrustRaise
//
//==========================================================================

void Actor::A_ThrustRaise(void)
{
	if (RaiseMobj(this))
	{
		// Reached it's target height
		args[0] = 1;
		if (args[1])
			SetStateNF(S_BTHRUSTINIT2_1);
		else
			SetStateNF(S_THRUSTINIT2_1);
	}

	// Lose the dirt clump
	if ((floorclip < Height) && specialmobj1)
	{
		P_RemoveMobj(specialmobj1);
		specialmobj1 = NULL;
	}

	// Spawn some dirt
	if (P_Random() < 40)
		SpawnDirt(this, Radius);
	special2++;	// Increase raise speed
}

//==========================================================================
//
//  Actor::A_ThrustLower
//
//==========================================================================

void Actor::A_ThrustLower(void)
{
	if (SinkMobj(this))
	{
		args[0] = 0;
		if (args[1])
			SetStateNF(S_BTHRUSTINIT1_1);
		else
			SetStateNF(S_THRUSTINIT1_1);
	}
}

//==========================================================================
//
//  Actor::A_ThrustBlock
//
//==========================================================================

void Actor::A_ThrustBlock(void)
{
	Flags |= MF_SOLID;
}

//==========================================================================
//
//  Actor::A_ThrustImpale
//
//==========================================================================

void Actor::A_ThrustImpale(void)
{
	// Impale all shootables in radius
	PIT_ThrustSpike(this);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.9  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.8  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.7  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.6  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
