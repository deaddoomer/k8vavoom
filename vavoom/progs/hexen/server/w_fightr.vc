//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	WeaponFighterPunch
//
//**************************************************************************

class WeaponFighterPunch:Weapon
{

int Attack2State;
int PunchCount;

//==========================================================================
//
//  A_FPunchAttack
//
//==========================================================================

void A_FPunchAttack(void)
{
	Actor Owner = Player->MO;
	int damage;
	float power;
	int i;
	TAVec angles;
	TVec vforward;

	damage = 40 + (P_Random() & 15);
	power = 2.0;
	PuffType = PunchPuff;
	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		AimLineAttack(Owner, &angles, 2.0 * MELEERANGE);
		if (linetarget)
		{
			PunchCount++;
			if (PunchCount == 3)
			{
				damage <<= 1;
				power = 6.0;
				PuffType = HammerPuff;
			}
			AngleVector(&angles, &vforward);
			if (LineAttack(Owner, vforward, 2.0 * MELEERANGE, damage))
			{
				if (PuffType == HammerPuff)
				{
					Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
				}
				else
				{
					Owner.PlaySound('FighterPunchMiss', CHAN_WEAPON);
				}
			}
			if (linetarget.bCountKill || linetarget.bIsPlayer)
			{
				linetarget.Thrust(angles.yaw, power);
			}
			PlayerPawn(Owner).AdjustPlayerAngle();
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 16.0));
		AimLineAttack(Owner, &angles, 2.0 * MELEERANGE);
		if (linetarget)
		{
			PunchCount++;
			if (PunchCount == 3)
			{
				damage <<= 1;
				power = 6.0;
				PuffType = HammerPuff;
			}
			AngleVector(&angles, &vforward);
			if (LineAttack(Owner, vforward, 2.0 * MELEERANGE, damage))
			{
				if (PuffType == HammerPuff)
				{
					Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
				}
				else
				{
					Owner.PlaySound('FighterPunchMiss', CHAN_WEAPON);
				}
			}
			if (linetarget.bCountKill || linetarget.bIsPlayer)
			{
				linetarget.Thrust(angles.yaw, power);
			}
			PlayerPawn(Owner).AdjustPlayerAngle();
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any creatures, so try to strike any walls
		PunchCount = 0;

		angles = Owner.Angles;
		AimLineAttack(Owner, &angles, MELEERANGE);
		AngleVector(&angles, &vforward);
		if (LineAttack(Owner, vforward, MELEERANGE, damage))
		{
			Owner.PlaySound('FighterPunchMiss', CHAN_WEAPON);
		}
	}

	if (PunchCount == 3)
	{
		PunchCount = 0;
		SetState(Attack2State);
		Owner.PlaySound('FighterGrunt', CHAN_VOICE);
	}
}

__states__
{
	S_PUNCHREADY('FPCH', 0, 1.0 / 35.0, S_PUNCHREADY) { A_WeaponReady(); }
	S_PUNCHDOWN('FPCH', 0, 1.0 / 35.0, S_PUNCHDOWN) { A_Lower(); }
	S_PUNCHUP('FPCH', 0, 1.0 / 35.0, S_PUNCHUP) { A_Raise(); }
	S_PUNCHATK1_1('FPCH', 1, 5.0 / 35.0, S_PUNCHATK1_2) { SX = 5.0; SY = 40.0; }
	S_PUNCHATK1_2('FPCH', 2, 4.0 / 35.0, S_PUNCHATK1_3) { SX = 5.0; SY = 40.0; }
	S_PUNCHATK1_3('FPCH', 3, 4.0 / 35.0, S_PUNCHATK1_4) { SX = 5.0; SY = 40.0; A_FPunchAttack(); }
	S_PUNCHATK1_4('FPCH', 2, 4.0 / 35.0, S_PUNCHATK1_5) { SX = 5.0; SY = 40.0; }
	S_PUNCHATK1_5('FPCH', 1, 5.0 / 35.0, S_PUNCHREADY) { SX = 5.0; SY = 40.0; A_ReFire(); }
	S_PUNCHATK2_1('FPCH', 3, 4.0 / 35.0, S_PUNCHATK2_2) { SX = 5.0; SY = 40.0; }
	S_PUNCHATK2_2('FPCH', 4, 4.0 / 35.0, S_PUNCHATK2_3) { SX = 5.0; SY = 40.0; }
	S_PUNCHATK2_3('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_4) { SX = 15.0; SY = 50.0; }
	S_PUNCHATK2_4('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_5) { SX = 25.0; SY = 60.0; }
	S_PUNCHATK2_5('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_6) { SX = 35.0; SY = 70.0; }
	S_PUNCHATK2_6('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_7) { SX = 45.0; SY = 80.0; }
	S_PUNCHATK2_7('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_8) { SX = 55.0; SY = 90.0; }
	S_PUNCHATK2_8('FPCH', 4, 1.0 / 35.0, S_PUNCHATK2_9) { SX = 65.0; SY = 100.0; }
	S_PUNCHATK2_9('FPCH', 4, 10.0 / 35.0, S_PUNCHREADY) { SY = 150.0; }
}

defaultproperties
{
	Mana = MANA_NONE;
	UpState = S_PUNCHUP;
	DownState = S_PUNCHDOWN;
	ReadyState = S_PUNCHREADY;
	AttackState = S_PUNCHATK1_1;
	Attack2State = S_PUNCHATK2_1;
	HoldAttackState = S_PUNCHATK1_1;
	PSpriteSY = 0.0;
}

}

//**************************************************************************
//
//	WeaponFighterAxe
//
//**************************************************************************

class WeaponFighterAxe:Weapon
{

int NoMoreManaState;

//==========================================================================
//
//  A_FAxeAttack
//
//==========================================================================

#define AXERANGE	(9.0 * MELEERANGE / 4.0)

void A_FAxeAttack(void)
{
	Actor Owner = Player->MO;
	float power;
	int damage;
	int i;
	int useMana;
	TAVec angles;
	TVec vforward;

	damage = 40 + (P_Random() & 15) + (P_Random() & 7);
	power = 0.0;
	if (Player->Mana[MANA_1] > 0)
	{
		damage <<= 1;
		power = 6.0;
		PuffType = AxePuffGlow;
		useMana = 1;
	}
	else
	{
		PuffType = AxePuff;
		useMana = 0;
	}
	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		AimLineAttack(Owner, &angles, AXERANGE);
		if (linetarget)
		{
			AngleVector(&angles, &vforward);
			if (LineAttack(Owner, vforward, AXERANGE, damage))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (linetarget.bCountKill || linetarget.bIsPlayer)
			{
				linetarget.Thrust(angles.yaw, power);
			}
			PlayerPawn(Owner).AdjustPlayerAngle();
			useMana++;
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 16.0));
		AimLineAttack(Owner, &angles, AXERANGE);
		if (linetarget)
		{
			AngleVector(&angles, &vforward);
			if (LineAttack(Owner, vforward, AXERANGE, damage))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			if (linetarget.bCountKill || linetarget.bIsPlayer)
			{
				linetarget.Thrust(angles.yaw, power);
			}
			PlayerPawn(Owner).AdjustPlayerAngle();
			useMana++;
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any creatures, so try to strike any walls
		angles = Owner.Angles;
		AimLineAttack(Owner, &angles, MELEERANGE);
		AngleVector(&angles, &vforward);
		if (LineAttack(Owner, vforward, MELEERANGE, damage))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
	}

	if (useMana == 2)
	{
		Player->Mana[MANA_1] -=
			WeaponManaUse(Player->PClass, Player->ReadyWeapon);
		if (Player->Mana[MANA_1] <= 0)
		{
			SetState(NoMoreManaState);
		}
	}
}

__states__
{
	S_FAXEREADY('FAXE', 0, 1.0 / 35.0, S_FAXEREADY) { A_WeaponReady(); }
	S_FAXEDOWN('FAXE', 0, 1.0 / 35.0, S_FAXEDOWN) { A_Lower(); }
	S_FAXEUP('FAXE', 0, 1.0 / 35.0, S_FAXEUP) { A_Raise(); }
	S_FAXEATK_1('FAXE', 1, 4.0 / 35.0, S_FAXEATK_2) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_2('FAXE', 2, 3.0 / 35.0, S_FAXEATK_3) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_3('FAXE', 3, 2.0 / 35.0, S_FAXEATK_4) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_4('FAXE', 3, 1.0 / 35.0, S_FAXEATK_5) { SX = -5.0; SY = 70.0; A_FAxeAttack(); }
	S_FAXEATK_5('FAXE', 3, 2.0 / 35.0, S_FAXEATK_6) { SX = -25.0; SY = 90.0; }
	S_FAXEATK_6('FAXE', 4, 1.0 / 35.0, S_FAXEATK_7) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_7('FAXE', 4, 2.0 / 35.0, S_FAXEATK_8) { SX = 10.0; SY = 54.0; }
	S_FAXEATK_8('FAXE', 4, 7.0 / 35.0, S_FAXEATK_9) { SX = 10.0; SY = 150.0; }
	S_FAXEATK_9('FAXE', 0, 1.0 / 35.0, S_FAXEATK_10) { SY = 60.0; A_ReFire(); }
	S_FAXEATK_10('FAXE', 0, 1.0 / 35.0, S_FAXEATK_11) { SY = 52.0; }
	S_FAXEATK_11('FAXE', 0, 1.0 / 35.0, S_FAXEATK_12) { SY = 44.0; }
	S_FAXEATK_12('FAXE', 0, 1.0 / 35.0, S_FAXEATK_13) { SY = 36.0; }
	S_FAXEATK_13('FAXE', 0, 1.0 / 35.0, S_FAXEREADY) { }
	S_FAXEREADY_G('FAXE', 11, 1.0 / 35.0, S_FAXEREADY_G1) { A_WeaponReady(); }
	S_FAXEREADY_G1('FAXE', 11, 1.0 / 35.0, S_FAXEREADY_G2) { A_WeaponReady(); }
	S_FAXEREADY_G2('FAXE', 11, 1.0 / 35.0, S_FAXEREADY_G3) { A_WeaponReady(); }
	S_FAXEREADY_G3('FAXE', 12, 1.0 / 35.0, S_FAXEREADY_G4) { A_WeaponReady(); }
	S_FAXEREADY_G4('FAXE', 12, 1.0 / 35.0, S_FAXEREADY_G5) { A_WeaponReady(); }
	S_FAXEREADY_G5('FAXE', 12, 1.0 / 35.0, S_FAXEREADY_G) { A_WeaponReady(); }
	S_FAXEDOWN_G('FAXE', 11, 1.0 / 35.0, S_FAXEDOWN_G) { A_Lower(); }
	S_FAXEUP_G('FAXE', 11, 1.0 / 35.0, S_FAXEUP_G) { A_Raise(); }
	S_FAXEATK_G1('FAXE', 13, 4.0 / 35.0, S_FAXEATK_G2) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_G2('FAXE', 14, 3.0 / 35.0, S_FAXEATK_G3) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_G3('FAXE', 15, 2.0 / 35.0, S_FAXEATK_G4) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_G4('FAXE', 15, 1.0 / 35.0, S_FAXEATK_G5) { SX = -5.0; SY = 70.0; A_FAxeAttack(); }
	S_FAXEATK_G5('FAXE', 15, 2.0 / 35.0, S_FAXEATK_G6) { SX = -25.0; SY = 90.0; }
	S_FAXEATK_G6('FAXE', 16, 1.0 / 35.0, S_FAXEATK_G7) { SX = 15.0; SY = 32.0; }
	S_FAXEATK_G7('FAXE', 16, 2.0 / 35.0, S_FAXEATK_G8) { SX = 10.0; SY = 54.0; }
	S_FAXEATK_G8('FAXE', 16, 7.0 / 35.0, S_FAXEATK_G9) { SX = 10.0; SY = 150.0; }
	S_FAXEATK_G9('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G10) { SY = 60.0; A_ReFire(); }
	S_FAXEATK_G10('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G11) { SY = 52.0; }
	S_FAXEATK_G11('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G12) { SY = 44.0; }
	S_FAXEATK_G12('FAXE', 0, 1.0 / 35.0, S_FAXEATK_G13) { SY = 36.0; }
	S_FAXEATK_G13('FAXE', 0, 1.0 / 35.0, S_FAXEREADY_G) { }
}

//==========================================================================
//
//	GetUpState
//
//==========================================================================

int GetUpState(void)
{
	if (Player->Mana[MANA_1])
	{
		return S_FAXEUP_G;
	}
	else
	{
		return UpState;
	}
}

//==========================================================================
//
//	GetDownState
//
//==========================================================================

int GetDownState(void)
{
	if (Player->Mana[MANA_1])
	{
		return S_FAXEDOWN_G;
	}
	else
	{
		return DownState;
	}
}

//==========================================================================
//
//	GetReadyState
//
//==========================================================================

int GetReadyState(void)
{
	if (Player->Mana[MANA_1])
	{
		return S_FAXEREADY_G;
	}
	else
	{
		return ReadyState;
	}
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

int GetAttackState(void)
{
	if (Player->Mana[MANA_1] > 0)
	{
		// Glowing axe
		return S_FAXEATK_G1;
	}
	else
	{
		return Player->Refire ? HoldAttackState : AttackState;
	}
}

//==========================================================================
//
//	GotMana
//
//==========================================================================

void GotMana(int InMana)
{
	if (InMana == MANA_1)
	{
		SetState(S_FAXEREADY_G);
	}
}

defaultproperties
{
	Mana = MANA_NONE;
	UpState = S_FAXEUP;
	DownState = S_FAXEDOWN;
	ReadyState = S_FAXEREADY;
	AttackState = S_FAXEATK_1;
	HoldAttackState = S_FAXEATK_1;
	NoMoreManaState = S_FAXEATK_5;
	PSpriteSY = -12.0;
}

}

//**************************************************************************
//
//	HammerMissile
//
//**************************************************************************

class HammerMissile:Projectile
{

__states__
{
	S_HAMMER_MISSILE_1('FHFX', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_HAMMER_MISSILE_2) { }
	S_HAMMER_MISSILE_2('FHFX', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_HAMMER_MISSILE_3) { A_ContMobjSound(); }
	S_HAMMER_MISSILE_3('FHFX', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_HAMMER_MISSILE_4) { }
	S_HAMMER_MISSILE_4('FHFX', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_HAMMER_MISSILE_5) { }
	S_HAMMER_MISSILE_5('FHFX', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_HAMMER_MISSILE_6) { }
	S_HAMMER_MISSILE_6('FHFX', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_HAMMER_MISSILE_7) { }
	S_HAMMER_MISSILE_7('FHFX', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_HAMMER_MISSILE_8) { }
	S_HAMMER_MISSILE_8('FHFX', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_HAMMER_MISSILE_1) { }
	S_HAMMER_MISSILE_X1('FHFX', 8 | FF_FULLBRIGHT, 3.0 / 35.0, S_HAMMER_MISSILE_X2) { }
	S_HAMMER_MISSILE_X2('FHFX', 9 | FF_FULLBRIGHT, 3.0 / 35.0, S_HAMMER_MISSILE_X3) { }
	S_HAMMER_MISSILE_X3('FHFX', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_HAMMER_MISSILE_X4) { A_Explode(); }
	S_HAMMER_MISSILE_X4('FHFX', 11 | FF_FULLBRIGHT, 3.0 / 35.0, S_HAMMER_MISSILE_X5) { }
	S_HAMMER_MISSILE_X5('FHFX', 12 | FF_FULLBRIGHT, 3.0 / 35.0, S_HAMMER_MISSILE_X6) { }
	S_HAMMER_MISSILE_X6('FHFX', 13, 3.0 / 35.0, S_HAMMER_MISSILE_X7) { }
	S_HAMMER_MISSILE_X7('FHFX', 14 | FF_FULLBRIGHT, 3.0 / 35.0, S_HAMMER_MISSILE_X8) { }
	S_HAMMER_MISSILE_X8('FHFX', 15 | FF_FULLBRIGHT, 3.0 / 35.0, S_HAMMER_MISSILE_X9) { }
	S_HAMMER_MISSILE_X9('FHFX', 16 | FF_FULLBRIGHT, 3.0 / 35.0, S_HAMMER_MISSILE_X10) { }
	S_HAMMER_MISSILE_X10('FHFX', 17 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 14.0;
	Height = 20.0;
	Speed = 875.0;
	MissileDamage = 10;
	bFireDamage = true;
	IdleState = S_HAMMER_MISSILE_1;
	DeathState = S_HAMMER_MISSILE_X1;
	DeathSound = 'FighterHammerExplode';
	Effects = EF_DL_RED;
}

}

//**************************************************************************
//
//	WeaponFighterHammer
//
//**************************************************************************

class WeaponFighterHammer:Weapon
{

bool bThrowHammer;

//============================================================================
//
//  A_FHammerAttack
//
//============================================================================

#define HAMMER_RANGE	(MELEERANGE + MELEERANGE / 2.0)

void A_FHammerAttack(void)
{
	Actor Owner = Player->MO;
	int damage;
	float power;
	int i;
	TAVec angles;
	TVec vforward;

	damage = 60 + (P_Random() & 63);
	power = 10.0;
	PuffType = HammerPuff;
	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 32.0));
		AimLineAttack(Owner, &angles, HAMMER_RANGE);
		if (linetarget)
		{
			AngleVector(&angles, &vforward);
			if (LineAttack(Owner, vforward, HAMMER_RANGE, damage))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			PlayerPawn(Owner).AdjustPlayerAngle();
			if (linetarget.bCountKill || linetarget.bIsPlayer)
			{
				linetarget.Thrust(angles.yaw, power);
			}
			bThrowHammer = false;	// Don't throw a hammer
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 32.0));
		AimLineAttack(Owner, &angles, HAMMER_RANGE);
		if (linetarget)
		{
			AngleVector(&angles, &vforward);
			if (LineAttack(Owner, vforward, HAMMER_RANGE, damage))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			PlayerPawn(Owner).AdjustPlayerAngle();
			if (linetarget.bCountKill || linetarget.bIsPlayer)
			{
				linetarget.Thrust(angles.yaw, power);
			}
			bThrowHammer = false;	// Don't throw a hammer
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any targets in meleerange, so set to throw out a hammer
		PuffSpawned = none;
		angles = Owner.Angles;
		AimLineAttack(Owner, &angles, HAMMER_RANGE);
		AngleVector(&angles, &vforward);
		if (LineAttack(Owner, vforward, HAMMER_RANGE, damage))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		if (PuffSpawned)
		{
			bThrowHammer = false;
		}
		else
		{
			bThrowHammer = true;
		}
	}

	if (Player->Mana[MANA_2] <
		WeaponManaUse(Player->PClass, Player->ReadyWeapon))
	{
		// Don't spawn a hammer if the player doesn't have enough mana
		bThrowHammer = false;
	}
	return;
}

//============================================================================
//
//  A_FHammerThrow
//
//============================================================================

void A_FHammerThrow(void)
{
	if (!bThrowHammer)
	{
		return;
	}
	Player->Mana[MANA_2] -=
		WeaponManaUse(Player->PClass, Player->ReadyWeapon);
	PlayerPawn(Player->MO).SpawnPlayerMissile(HammerMissile);
}

__states__
{
	S_FHAMMERREADY('FHMR', 0, 1.0 / 35.0, S_FHAMMERREADY) { A_WeaponReady(); }
	S_FHAMMERDOWN('FHMR', 0, 1.0 / 35.0, S_FHAMMERDOWN) { A_Lower(); }
	S_FHAMMERUP('FHMR', 0, 1.0 / 35.0, S_FHAMMERUP) { A_Raise(); }
	S_FHAMMERATK_1('FHMR', 1, 6.0 / 35.0, S_FHAMMERATK_2) { SX = 5.0; }
	S_FHAMMERATK_2('FHMR', 2, 3.0 / 35.0, S_FHAMMERATK_3) { SX = 5.0; A_FHammerAttack(); }
	S_FHAMMERATK_3('FHMR', 3, 3.0 / 35.0, S_FHAMMERATK_4) { SX = 5.0; }
	S_FHAMMERATK_4('FHMR', 4, 2.0 / 35.0, S_FHAMMERATK_5) { SX = 5.0; }
	S_FHAMMERATK_5('FHMR', 4, 10.0 / 35.0, S_FHAMMERATK_6) { SX = 5.0; SY = 150.0; A_FHammerThrow(); }
	S_FHAMMERATK_6('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_7) { SY = 60.0; }
	S_FHAMMERATK_7('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_8) { SY = 55.0; }
	S_FHAMMERATK_8('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_9) { SY = 50.0; }
	S_FHAMMERATK_9('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_10) { SY = 45.0; }
	S_FHAMMERATK_10('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_11) { SY = 40.0; }
	S_FHAMMERATK_11('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_12) { SY = 35.0; }
	S_FHAMMERATK_12('FHMR', 0, 1.0 / 35.0, S_FHAMMERREADY) { }
}

defaultproperties
{
	Mana = MANA_NONE;
	UpState = S_FHAMMERUP;
	DownState = S_FHAMMERDOWN;
	ReadyState = S_FHAMMERREADY;
	AttackState = S_FHAMMERATK_1;
	HoldAttackState = S_FHAMMERATK_1;
	PSpriteSY = -10.0;
}

}

//**************************************************************************
//
//	FighterSwordMissile
//
//**************************************************************************

class FighterSwordMissile:Projectile
{

//============================================================================
//
//  A_FSwordFlames
//
//============================================================================

void A_FSwordFlames(void)
{
	int i;

	for (i = 1 + (P_Random() & 3); i; i--)
	{
		Spawn(FighterSwordFlame, Origin + vector((Random() - 0.5) * 16.0,
			(Random() - 0.5) * 16.0, (Random() - 0.5) * 8.0));
	}
}

__states__
{
	S_FSWORD_MISSILE1('FSFX', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORD_MISSILE2) { }
	S_FSWORD_MISSILE2('FSFX', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORD_MISSILE3) { }
	S_FSWORD_MISSILE3('FSFX', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORD_MISSILE1) { }
	S_FSWORD_MISSILE_X1('FSFX', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_FSWORD_MISSILE_X2) { }
	S_FSWORD_MISSILE_X2('FSFX', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORD_MISSILE_X3) { A_FSwordFlames(); }
	S_FSWORD_MISSILE_X3('FSFX', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_FSWORD_MISSILE_X4) { A_Explode(); }
	S_FSWORD_MISSILE_X4('FSFX', 6 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORD_MISSILE_X5) { }
	S_FSWORD_MISSILE_X5('FSFX', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_FSWORD_MISSILE_X6) { }
	S_FSWORD_MISSILE_X6('FSFX', 8 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORD_MISSILE_X7) { }
	S_FSWORD_MISSILE_X7('FSFX', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_FSWORD_MISSILE_X8) { }
	S_FSWORD_MISSILE_X8('FSFX', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORD_MISSILE_X9) { }
	S_FSWORD_MISSILE_X9('FSFX', 11 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORD_MISSILE_X10) { }
	S_FSWORD_MISSILE_X10('FSFX', 12 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 16.0;
	Height = 8.0;
	Speed = 1050.0;
	MissileDamage = 8;
	IdleState = S_FSWORD_MISSILE1;
	DeathState = S_FSWORD_MISSILE_X1;
	DeathSound = 'FighterSwordExplode';
	Effects = EF_DL_GREEN;
}

}

//**************************************************************************
//
//	WeaponFighterSword
//
//**************************************************************************

class WeaponFighterSword:Weapon
{

//============================================================================
//
//  A_FSwordAttack
//
//============================================================================

void A_FSwordAttack(void)
{
	PlayerPawn Owner = PlayerPawn(Player->MO);

	Player->Mana[MANA_1] -=
		WeaponManaUse(Player->PClass, Player->ReadyWeapon);
	Player->Mana[MANA_2] -=
		WeaponManaUse(Player->PClass, Player->ReadyWeapon);
	Owner.SpawnPlayerMissileAngleXYZ(Owner.Origin + vector(0.0, 0.0, -10.0),
		FighterSwordMissile, AngleMod360(Owner.Angles.yaw + 45.0 / 4.0));
	Owner.SpawnPlayerMissileAngleXYZ(Owner.Origin + vector(0.0, 0.0, -5.0),
		FighterSwordMissile, AngleMod360(Owner.Angles.yaw + 45.0 / 8.0));
	Owner.SpawnPlayerMissileAngleXYZ(Owner.Origin, FighterSwordMissile,
		Owner.Angles.yaw);
	Owner.SpawnPlayerMissileAngleXYZ(Owner.Origin + vector(0.0, 0.0, 5.0),
		FighterSwordMissile, AngleMod360(Owner.Angles.yaw - 45.0 / 8.0));
	Owner.SpawnPlayerMissileAngleXYZ(Owner.Origin + vector(0.0, 0.0, 10.0),
		FighterSwordMissile, AngleMod360(Owner.Angles.yaw - 45.0 / 4.0));
	Owner.PlaySound('FighterSwordFire', CHAN_WEAPON);
}

__states__
{
	S_FSWORDREADY('FSRD', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY1) { A_WeaponReady(); }
	S_FSWORDREADY1('FSRD', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY2) { A_WeaponReady(); }
	S_FSWORDREADY2('FSRD', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY3) { A_WeaponReady(); }
	S_FSWORDREADY3('FSRD', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY4) { A_WeaponReady(); }
	S_FSWORDREADY4('FSRD', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY5) { A_WeaponReady(); }
	S_FSWORDREADY5('FSRD', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY6) { A_WeaponReady(); }
	S_FSWORDREADY6('FSRD', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY7) { A_WeaponReady(); }
	S_FSWORDREADY7('FSRD', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY8) { A_WeaponReady(); }
	S_FSWORDREADY8('FSRD', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY9) { A_WeaponReady(); }
	S_FSWORDREADY9('FSRD', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY10) { A_WeaponReady(); }
	S_FSWORDREADY10('FSRD', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY11) { A_WeaponReady(); }
	S_FSWORDREADY11('FSRD', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY) { A_WeaponReady(); }
	S_FSWORDDOWN('FSRD', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDDOWN) { A_Lower(); }
	S_FSWORDUP('FSRD', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDUP) { A_Raise(); }
	S_FSWORDATK_1('FSRD', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORDATK_2) { SX = 5.0; SY = 36.0; }
	S_FSWORDATK_2('FSRD', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORDATK_3) { SX = 5.0; SY = 36.0; }
	S_FSWORDATK_3('FSRD', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_FSWORDATK_4) { SX = 5.0; SY = 36.0; }
	S_FSWORDATK_4('FSRD', 6 | FF_FULLBRIGHT, 3.0 / 35.0, S_FSWORDATK_5) { SX = 5.0; SY = 36.0; A_FSwordAttack(); }
	S_FSWORDATK_5('FSRD', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_FSWORDATK_6) { SX = 5.0; SY = 36.0; }
	S_FSWORDATK_6('FSRD', 8 | FF_FULLBRIGHT, 2.0 / 35.0, S_FSWORDATK_7) { SX = 5.0; SY = 36.0; }
	S_FSWORDATK_7('FSRD', 8 | FF_FULLBRIGHT, 10.0 / 35.0, S_FSWORDATK_8) { SX = 5.0; SY = 150.0; }
	S_FSWORDATK_8('FSRD', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDATK_9) { SX = 5.0; SY = 60.0; }
	S_FSWORDATK_9('FSRD', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDATK_10) { SX = 5.0; SY = 55.0; }
	S_FSWORDATK_10('FSRD', 2 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDATK_11) { SX = 5.0; SY = 50.0; }
	S_FSWORDATK_11('FSRD', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDATK_12) { SX = 5.0; SY = 45.0; }
	S_FSWORDATK_12('FSRD', 1 | FF_FULLBRIGHT, 1.0 / 35.0, S_FSWORDREADY) { SX = 5.0; SY = 40.0; }
}

defaultproperties
{
	Mana = MANA_BOTH;
	UpState = S_FSWORDUP;
	DownState = S_FSWORDDOWN;
	ReadyState = S_FSWORDREADY;
	AttackState = S_FSWORDATK_1;
	HoldAttackState = S_FSWORDATK_1;
	PSpriteSY = 10.0;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.22  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.21  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.20  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.19  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.18  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.17  2002/03/02 17:35:55  dj_jl
//  Weapon classes
//
//  Revision 1.16  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.15  2002/02/22 18:00:25  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.14  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.13  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.12  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
