//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	DragonFX2
//
//**************************************************************************

class DragonFX2:Effect
{

__states__
{
	S_DRAGON_FX2_1('CFCF', 16 | FF_FULLBRIGHT, 1.0 / 35.0, S_DRAGON_FX2_2) { }
	S_DRAGON_FX2_2('CFCF', 16 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX2_3) { A_UnHideThing(); }
	S_DRAGON_FX2_3('CFCF', 17 | FF_FULLBRIGHT, 3.0 / 35.0, S_DRAGON_FX2_4) { A_Scream(); }
	S_DRAGON_FX2_4('CFCF', 18 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX2_5) { }
	S_DRAGON_FX2_5('CFCF', 19 | FF_FULLBRIGHT, 3.0 / 35.0, S_DRAGON_FX2_6) { A_Explode(); }
	S_DRAGON_FX2_6('CFCF', 20 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX2_7) { }
	S_DRAGON_FX2_7('CFCF', 21 | FF_FULLBRIGHT, 3.0 / 35.0, S_DRAGON_FX2_8) { }
	S_DRAGON_FX2_8('CFCF', 22 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX2_9) { }
	S_DRAGON_FX2_9('CFCF', 23 | FF_FULLBRIGHT, 3.0 / 35.0, S_DRAGON_FX2_10) { }
	S_DRAGON_FX2_10('CFCF', 24 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX2_11) { }
	S_DRAGON_FX2_11('CFCF', 25 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 8.0;
	Height = 8.0;
	Translucency = 100;
	bNoTeleport = true;
	bFireDamage = true;
	bNoGravity = false;
	IdleState = S_DRAGON_FX2_1;
	DeathSound = 'DragonFireballExplode';
}

}

//**************************************************************************
//
//	DragonMissile
//
//**************************************************************************

class DragonMissile:Projectile
{

//============================================================================
//
//	A_DragonFX2
//
//============================================================================

void A_DragonFX2(void)
{
	Actor A;
	int i;
	float delay;

	delay = 0.5 + Random();
	for (i = 1 + (P_Random() & 3); i; i--)
	{
		A = Spawn(DragonFX2, Origin + vector((Random() - 0.5) * 64.0,
			(Random() - 0.5) * 64.0, (Random() - 0.5) * 16.0));
		if (A)
		{
			A.StateTime = delay + Random() * 0.2 * itof(i);
			A.Instigator = Instigator;
		}
	}
}

__states__
{
	S_DRAGON_FX1_1('DRFX', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_2) { }
	S_DRAGON_FX1_2('DRFX', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_3) { }
	S_DRAGON_FX1_3('DRFX', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_4) { }
	S_DRAGON_FX1_4('DRFX', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_5) { }
	S_DRAGON_FX1_5('DRFX', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_6) { }
	S_DRAGON_FX1_6('DRFX', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_1) { }
	S_DRAGON_FX1_X1('DRFX', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_X2) { }
	S_DRAGON_FX1_X2('DRFX', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_X3) { }
	S_DRAGON_FX1_X3('DRFX', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_X4) { }
	S_DRAGON_FX1_X4('DRFX', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_DRAGON_FX1_X5) { A_DragonFX2(); }
	S_DRAGON_FX1_X5('DRFX', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_DRAGON_FX1_X6) { }
	S_DRAGON_FX1_X6('DRFX', 11 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 12.0;
	Height = 10.0;
	Speed = 840.0;
	MissileDamage = 6;
	bFireDamage = true;
	bActivateImpact = false;
	bActivatePCross = false;
	IdleState = S_DRAGON_FX1_1;
	DeathState = S_DRAGON_FX1_X1;
	DeathSound = 'DragonFireballExplode';
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	Dragon
//
//**************************************************************************

class Dragon:Pawn
	__mobjinfo__(254)
{

int CrashedState;		//	Maybe it's safe to use CrashState?
Actor FlightTarget;

//============================================================================
//
//	A_DragonInitFlight
//
//============================================================================

void A_DragonInitFlight(void)
{
	int search;

	search = -1;
	do
	{
		// find the first tid identical to the dragon's tid
		FlightTarget = FindMobjFromTID(TID, &search);
		if (search == -1)
		{
			SetState(IdleState);
			return;
		}
	}
	while (FlightTarget == self);
	RemoveFromTIDList();
}

//============================================================================
//
//	DragonSeek
//
//============================================================================

void DragonSeek(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	Actor tempTarget;
	int search;
	int i;
	int bestArg;
	float bestAngle;
	float angleToSpot, angleToTarget;
	Actor A;
	Actor oldTarget;

	tempTarget = FlightTarget;
	if (!tempTarget)
	{
		return;
	}
	dir = FaceActor(tempTarget, &delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw = AngleMod360(Angles.yaw + delta);
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw = AngleMod360(Angles.yaw - delta);
	}
	Velocity.x = Speed * cos(Angles.yaw);
	Velocity.y = Speed * sin(Angles.yaw);
	if (Origin.z + Height < tempTarget.Origin.z ||
		tempTarget.Origin.z + tempTarget.Height < Origin.z)
	{
		dist = MobjDist2(tempTarget, self);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = (tempTarget.Origin.z - Origin.z) / dist;
	}
	else
	{
		dist = MobjDist2(tempTarget, self);
		dist = dist / Speed;
	}
	if (tempTarget.bShootable && P_Random() < 64)
	{
		// attack the destination mobj if it's attackable
		if (fabs(AngleMod180(Angles.yaw -
			atan2(tempTarget.Origin.y - Origin.y,
			tempTarget.Origin.x - Origin.x))) < 45.0 / 2.0)
		{
			oldTarget = Enemy;
			Enemy = tempTarget;
			if (CheckMeleeRange())
			{
				Enemy.Damage(self, self, HITDICE(10));
				PlaySound('DragonAttack', CHAN_WEAPON);
			}
			else if (P_Random() < 128 && CheckMissileRange())
			{
				SpawnMissile(tempTarget, DragonMissile);
				PlaySound('DragonAttack', CHAN_WEAPON);
			}
			Enemy = oldTarget;
		}
	}
	if (dist * 35.0 < 4.0)
	{
		// Hit the target thing
		if (Enemy && P_Random() < 200)
		{
			bestArg = -1;
			bestAngle = 360.0;
			angleToTarget = atan2(Enemy.Origin.y - Origin.y,
				Enemy.Origin.x - Origin.x);
			for (i = 0; i < 5; i++)
			{
				if (!tempTarget.Args[i])
				{
					continue;
				}
				search = -1;
				A = FindMobjFromTID(tempTarget.Args[i], &search);
				angleToSpot = atan2(A.Origin.y - Origin.y,
					A.Origin.x - Origin.x);
				delta = fabs(AngleMod180(angleToSpot - angleToTarget));
				if (delta < bestAngle)
				{
					bestAngle = delta;
					bestArg = i;
				}
			}
			if (bestArg != -1)
			{
				search = -1;
				FlightTarget = FindMobjFromTID(tempTarget.Args[bestArg],
					&search);
			}
		}
		else
		{
			do
			{
				i = (P_Random() >> 2) % 5;
			}
			while (!tempTarget.Args[i]);
			search = -1;
			FlightTarget = FindMobjFromTID(tempTarget.Args[i], &search);
		}
	}
}

//============================================================================
//
//	A_DragonFlight
//
//============================================================================

void A_DragonFlight(void)
{
	float angle;

	DragonSeek(4.0, 8.0);
	if (Enemy)
	{
		if (!Enemy.bShootable)
		{
			// enemy died
			Enemy = none;
			return;
		}
		angle = atan2(Enemy.Origin.y - Origin.y, Enemy.Origin.x - Origin.x);
		if (fabs(AngleMod180(Angles.yaw - angle)) < 45.0 / 2.0
			&& CheckMeleeRange())
		{
			Enemy.Damage(self, self, HITDICE(8));
			PlaySound('DragonAttack', CHAN_WEAPON);
		}
		else if (fabs(AngleMod180(Angles.yaw - angle)) <= 20.0)
		{
			SetState(MissileState);
			PlaySound('DragonAttack', CHAN_WEAPON);
		}
	}
	else
	{
		LookForPlayers(true);
	}
}

//============================================================================
//
//	A_DragonFlap
//
//============================================================================

void A_DragonFlap(void)
{
	A_DragonFlight();
	if (P_Random() < 240)
	{
		PlaySound('DragonWingflap', CHAN_BODY);
	}
	else
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//============================================================================
//
//	A_DragonAttack
//
//============================================================================

void A_DragonAttack(void)
{
	SpawnMissile(Enemy, DragonMissile);
}

//============================================================================
//
//  A_DragonPain
//
//============================================================================

void A_DragonPain(void)
{
	A_Pain();
	if (!FlightTarget)
	{
		// no destination spot yet
		SetState(SeeState);
	}
}

//============================================================================
//
//	A_DragonCheckCrash
//
//============================================================================

void A_DragonCheckCrash(void)
{
	if (Origin.z <= FloorZ)
	{
		SetState(CrashedState);
	}
}

__states__
{
	S_DRAGON_LOOK1('DRAG', 3, 10.0 / 35.0, S_DRAGON_LOOK1) { A_Look(); }
	S_DRAGON_INIT('DRAG', 2, 5.0 / 35.0, S_DRAGON_INIT2) { }
	S_DRAGON_INIT2('DRAG', 1, 5.0 / 35.0, S_DRAGON_INIT3) { }
	S_DRAGON_INIT3('DRAG', 0, 5.0 / 35.0, S_DRAGON_WALK1) { A_DragonInitFlight(); }
	S_DRAGON_WALK1('DRAG', 1, 3.0 / 35.0, S_DRAGON_WALK2) { A_DragonFlap(); }
	S_DRAGON_WALK2('DRAG', 1, 3.0 / 35.0, S_DRAGON_WALK3) { A_DragonFlight(); }
	S_DRAGON_WALK3('DRAG', 2, 3.0 / 35.0, S_DRAGON_WALK4) { A_DragonFlight(); }
	S_DRAGON_WALK4('DRAG', 2, 3.0 / 35.0, S_DRAGON_WALK5) { A_DragonFlight(); }
	S_DRAGON_WALK5('DRAG', 3, 3.0 / 35.0, S_DRAGON_WALK6) { A_DragonFlight(); }
	S_DRAGON_WALK6('DRAG', 3, 3.0 / 35.0, S_DRAGON_WALK7) { A_DragonFlight(); }
	S_DRAGON_WALK7('DRAG', 2, 3.0 / 35.0, S_DRAGON_WALK8) { A_DragonFlight(); }
	S_DRAGON_WALK8('DRAG', 2, 3.0 / 35.0, S_DRAGON_WALK9) { A_DragonFlight(); }
	S_DRAGON_WALK9('DRAG', 1, 3.0 / 35.0, S_DRAGON_WALK10) { A_DragonFlight(); }
	S_DRAGON_WALK10('DRAG', 1, 3.0 / 35.0, S_DRAGON_WALK11) { A_DragonFlight(); }
	S_DRAGON_WALK11('DRAG', 0, 3.0 / 35.0, S_DRAGON_WALK12) { A_DragonFlight(); }
	S_DRAGON_WALK12('DRAG', 0, 3.0 / 35.0, S_DRAGON_WALK1) { A_DragonFlight(); }
	S_DRAGON_ATK1('DRAG', 4, 8.0 / 35.0, S_DRAGON_WALK1) { A_DragonAttack(); }
	S_DRAGON_PAIN1('DRAG', 5, 10.0 / 35.0, S_DRAGON_WALK1) { A_DragonPain(); }
	S_DRAGON_DEATH1('DRAG', 6, 5.0 / 35.0, S_DRAGON_DEATH2) { A_Scream(); }
	S_DRAGON_DEATH2('DRAG', 7, 4.0 / 35.0, S_DRAGON_DEATH3) { A_NoBlocking(); }
	S_DRAGON_DEATH3('DRAG', 8, 4.0 / 35.0, S_DRAGON_DEATH4) { }
	S_DRAGON_DEATH4('DRAG', 9, 4.0 / 35.0, S_DRAGON_DEATH4) { A_DragonCheckCrash(); }
	S_DRAGON_CRASH1('DRAG', 10, 5.0 / 35.0, S_DRAGON_CRASH2) { }
	S_DRAGON_CRASH2('DRAG', 11, 5.0 / 35.0, S_DRAGON_CRASH3) { }
	S_DRAGON_CRASH3('DRAG', 12, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 640;
	Radius = 20.0;
	Height = 65.0;
	Mass = 99999.0;
	Speed = 350.0;
	PainChance = 128;
	bNoGravity = true;
	bFloat = true;
	bNoBlood = true;
	bBoss = true;
	bFloorClip = false;
	bTelestomp = false;
	bActivatePushWall = false;
	bActivateMCross = false;
	IdleState = S_DRAGON_LOOK1;
	SeeState = S_DRAGON_INIT;
	MissileState = S_DRAGON_ATK1;
	PainState = S_DRAGON_PAIN1;
	DeathState = S_DRAGON_DEATH1;
	CrashedState = S_DRAGON_CRASH1;
	SightSound = 'DragonSight';
	ActiveSound = 'DragonActive';
	AttackSound = 'DragonAttack';
	PainSound = 'DragonPain';
	DeathSound = 'DragonDeath';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.26  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.25  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.24  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.23  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.22  2002/03/16 17:47:46  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.21  2002/03/02 17:58:36  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.20  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.19  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.18  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.17  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.15  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.14  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.12  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
