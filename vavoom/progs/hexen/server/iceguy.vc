//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  Actor::A_IceGuyLook
//
//============================================================================

void Actor::A_IceGuyLook(void)
{
	float dist;
	float an;

	A_Look();
	if (P_Random() < 64)
	{
		dist = Radius * itof(P_Random() - 128) / 128.0;
		an = AngleMod360(Angles.yaw + 90.0);

		P_SpawnMobj(Origin.x + dist * cos(an),
			Origin.y + dist * sin(an), Origin.z + 60.0,
			P_Random() & 1 ? IceGuyWisp2 : IceGuyWisp1);
	}
}

//============================================================================
//
//  Actor::A_IceGuyChase
//
//============================================================================

void Actor::A_IceGuyChase(void)
{
	float dist;
	float an;
	mobj_t *mo;

	A_Chase();
	if (P_Random() < 128)
	{
		dist = Radius * itof(P_Random() - 128) / 128.0;
		an = AngleMod360(Angles.yaw + 90.0);

		mo = P_SpawnMobj(Origin.x + dist * cos(an),
			Origin.y + dist * sin(an), Origin.z + 60.0,
			P_Random() & 1 ? IceGuyWisp2 : IceGuyWisp1);
		if (mo)
		{
			mo->Velocity = Velocity;
			mo->Owner = self;
		}
	}
}

//============================================================================
//
//	Actor::A_IceGuyAttack
//
//============================================================================

void Actor::A_IceGuyAttack(void)
{
	float an;

	if (!Enemy)
	{
		return;
	}
	an = AngleMod360(Angles.yaw + 90.0);
	SpawnMissileXYZ(Origin + vector(Radius / 2.0 * cos(an),
		Radius / 2.0 * sin(an), 40.0), Enemy, IceGuyMissile);

	an = AngleMod360(Angles.yaw - 90.0);
	SpawnMissileXYZ(Origin + vector(Radius / 2.0 * cos(an),
		Radius / 2.0 * sin(an), 40.0), Enemy, IceGuyMissile);

	PlaySound(AttackSound, CHAN_WEAPON);
}

//============================================================================
//
//  Actor::A_IceGuyMissilePuff
//
//============================================================================

void Actor::A_IceGuyMissilePuff(void)
{
	P_SpawnMobj(Origin.x, Origin.y, Origin.z + 2.0, IceGuyMissilePuff);
}

//============================================================================
//
//  Actor::A_IceGuyMissileExplode
//
//============================================================================

void Actor::A_IceGuyMissileExplode(void)
{
	Actor mo;
	int i;

	for (i = 0; i < 8; i++)
	{
		mo = SpawnMissileAngle(IceGuyMissile2, itof(i) * 45.0, -0.3 * 35.0);
		if (mo)
		{
			mo.Owner = Owner;
		}
	}
}

//============================================================================
//
//	Actor::A_IceGuyDie
//
//============================================================================

void Actor::A_IceGuyDie(void)
{
	Velocity = vector(0.0, 0.0, 0.0);
	Height *= 4.0;
	A_FreezeDeathChunks();
}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.13  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.12  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.11  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.10  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.9  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
