//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	IceGuyMissile2
//
//**************************************************************************

class IceGuyMissile2:Projectile
{

__states__
{
	S_ICEGUY_FX2_1('ICPR', 13 | FF_FULLBRIGHT, 3.0 / 35.0, S_ICEGUY_FX2_2) { }
	S_ICEGUY_FX2_2('ICPR', 14 | FF_FULLBRIGHT, 3.0 / 35.0, S_ICEGUY_FX2_3) { }
	S_ICEGUY_FX2_3('ICPR', 15 | FF_FULLBRIGHT, 3.0 / 35.0, S_ICEGUY_FX2_1) { }
}

defaultproperties
{
	Radius = 4.0;
	Height = 4.0;
	Mass = 12.5;
	Speed = 350.0;
	MissileDamage = 1;
	bNoGravity = false;
	bIceDamage = true;
	bActivateImpact = false;
	bActivatePCross = false;
	IdleState = S_ICEGUY_FX2_1;
}

}

//**************************************************************************
//
//	IceGuyMissile
//
//**************************************************************************

class IceGuyMissile:Projectile
{

//==========================================================================
//
//  A_IceGuyMissilePuff
//
//==========================================================================

void A_IceGuyMissilePuff(void)
{
	Spawn(IceGuyMissilePuff, Origin + vector(0.0, 0.0, 2.0));
}

//==========================================================================
//
//  A_IceGuyMissileExplode
//
//==========================================================================

void A_IceGuyMissileExplode(void)
{
	Actor mo;
	int i;

	for (i = 0; i < 8; i++)
	{
		mo = SpawnMissileAngle(IceGuyMissile2, itof(i) * 45.0, -0.3 * 35.0);
		if (mo)
		{
			mo.Instigator = Instigator;
		}
	}
}

__states__
{
	S_ICEGUY_FX1('ICPR', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_ICEGUY_FX2) { A_IceGuyMissilePuff(); }
	S_ICEGUY_FX2('ICPR', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_ICEGUY_FX3) { A_IceGuyMissilePuff(); }
	S_ICEGUY_FX3('ICPR', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_ICEGUY_FX1) { A_IceGuyMissilePuff(); }
	S_ICEGUY_FX_X1('ICPR', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_ICEGUY_FX_X2) { }
	S_ICEGUY_FX_X2('ICPR', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ICEGUY_FX_X3) { A_IceGuyMissileExplode(); }
	S_ICEGUY_FX_X3('ICPR', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ICEGUY_FX_X4) { }
	S_ICEGUY_FX_X4('ICPR', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_ICEGUY_FX_X5) { }
	S_ICEGUY_FX_X5('ICPR', 7 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 8.0;
	Height = 10.0;
	Speed = 490.0;
	MissileDamage = 1;
	bIceDamage = true;
	bActivateImpact = false;
	bActivatePCross = false;
	IdleState = S_ICEGUY_FX1;
	DeathState = S_ICEGUY_FX_X1;
	DeathSound = 'IceGuyMissileExplode';
	Effects = EF_DL_BLUE;
}

}

//**************************************************************************
//
//	IceGuy
//
//**************************************************************************

class IceGuy:Pawn
	__mobjinfo__(8020)
{

//==========================================================================
//
//  A_IceGuyLook
//
//==========================================================================

void A_IceGuyLook(void)
{
	float dist;
	float an;

	A_Look();
	if (Random() < 0.25)
	{
		dist = Radius * (Random() * 2.0 - 1.0);
		an = AngleMod360(Angles.yaw + 90.0);

		Spawn(Random() < 0.5 ? IceGuyWisp2 : IceGuyWisp1,
			Origin + vector(dist * cos(an), dist * sin(an), 60.0));
	}
}

//==========================================================================
//
//  A_IceGuyChase
//
//==========================================================================

void A_IceGuyChase(void)
{
	float dist;
	float an;
	Actor A;

	A_Chase();
	if (Random() < 0.5)
	{
		dist = Radius * (Random() * 2.0 - 1.0);
		an = AngleMod360(Angles.yaw + 90.0);

		A = Spawn(Random() < 0.5 ? IceGuyWisp2 : IceGuyWisp1,
			Origin + vector(dist * cos(an), dist * sin(an), 60.0));
		if (A)
		{
			A.Velocity = Velocity;
			A.Instigator = self;
		}
	}
}

//==========================================================================
//
//	A_IceGuyAttack
//
//==========================================================================

void A_IceGuyAttack(void)
{
	float an;

	if (!Enemy)
	{
		return;
	}
	an = AngleMod360(Angles.yaw + 90.0);
	SpawnMissileXYZ(Origin + vector(Radius / 2.0 * cos(an),
		Radius / 2.0 * sin(an), 40.0), Enemy, IceGuyMissile);

	an = AngleMod360(Angles.yaw - 90.0);
	SpawnMissileXYZ(Origin + vector(Radius / 2.0 * cos(an),
		Radius / 2.0 * sin(an), 40.0), Enemy, IceGuyMissile);

	PlaySound(AttackSound, CHAN_WEAPON);
}

//==========================================================================
//
//	A_IceGuyDie
//
//==========================================================================

void A_IceGuyDie(void)
{
	Velocity = vector(0.0, 0.0, 0.0);
	Height *= 4.0;
	A_FreezeDeathChunks();
}

__states__
{
	S_ICEGUY_LOOK('ICEY', 0, 10.0 / 35.0, S_ICEGUY_LOOK) { A_IceGuyLook(); }
	S_ICEGUY_DORMANT('ICEY', 0, -1.0, S_ICEGUY_LOOK) { }
	S_ICEGUY_WALK1('ICEY', 0, 4.0 / 35.0, S_ICEGUY_WALK2) { A_Chase(); }
	S_ICEGUY_WALK2('ICEY', 1, 4.0 / 35.0, S_ICEGUY_WALK3) { A_IceGuyChase(); }
	S_ICEGUY_WALK3('ICEY', 2, 4.0 / 35.0, S_ICEGUY_WALK4) { A_Chase(); }
	S_ICEGUY_WALK4('ICEY', 3, 4.0 / 35.0, S_ICEGUY_WALK1) { A_Chase(); }
	S_ICEGUY_ATK1('ICEY', 4, 3.0 / 35.0, S_ICEGUY_ATK2) { A_FaceTarget(); }
	S_ICEGUY_ATK2('ICEY', 5, 3.0 / 35.0, S_ICEGUY_ATK3) { A_FaceTarget(); }
	S_ICEGUY_ATK3('ICEY', 6 | FF_FULLBRIGHT, 8.0 / 35.0, S_ICEGUY_ATK4) { A_IceGuyAttack(); }
	S_ICEGUY_ATK4('ICEY', 5, 4.0 / 35.0, S_ICEGUY_WALK1) { A_FaceTarget(); }
	S_ICEGUY_PAIN1('ICEY', 0, 1.0 / 35.0, S_ICEGUY_WALK1) { A_Pain(); }
	S_ICEGUY_DEATH('ICEY', 0, 1.0 / 35.0, S_NULL) { A_IceGuyDie(); }
}

//==========================================================================
//
//	SetDormant
//
//==========================================================================

void SetDormant(void)
{
	bDormant = true;
	SetState(S_ICEGUY_DORMANT);
	StateTime = -1.0;
}

defaultproperties
{
	Health = 120;
	Radius = 22.0;
	Height = 75.0;
	Mass = 150.0;
	StepSpeed = 14.0;
	PainChance = 144;
	bNoBlood = true;
	bIceDamage = true;
	bFloorClip = false;
	IdleState = S_ICEGUY_LOOK;
	SeeState = S_ICEGUY_WALK1;
	MissileState = S_ICEGUY_ATK1;
	PainState = S_ICEGUY_PAIN1;
	DeathState = S_ICEGUY_DEATH;
	SightSound = 'IceGuySight';
	ActiveSound = 'IceGuyActive';
	AttackSound = 'IceGuyAttack';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.18  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.17  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.16  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.15  2002/03/02 17:58:36  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.14  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.13  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.12  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.11  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.10  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.9  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
