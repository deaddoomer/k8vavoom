//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define CLASS_BOSS_STRAFE_RANGE		64.0 * 10.0

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  Actor::A_ClassBossHealth
//
//============================================================================

void Actor::A_ClassBossHealth(void)
{
	if (netgame && !deathmatch)	// co-op only
	{
		if (!special1)
		{
			Health *= 5;
			special1 = true;	// has been initialized
		}
	}
}

//============================================================================
//
//  Actor::A_FastChase
//
//============================================================================

void Actor::A_FastChase(void)
{
	float delta;
	float dist;
	float ang;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	// Modify target threshold
	if (threshold)
	{
		threshold--;
	}

	if (gameskill == sk_nightmare)
	{
		// Monsters move faster in nightmare mode
		time *= 0.5;
		if (time < 0.1)
		{
			time = 0.1;
		}
	}

	//
	// turn towards movement direction if not there yet
	//
	if (movedir < 8)
	{
		angles.yaw = itof(ftoi(angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(angles.yaw - itof(movedir) * 45.0);
		if (delta > 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw + 45.0);
		}
	}

	if (!target || !(target->Flags & MF_SHOOTABLE))
	{
		// look for a new target
		if (P_LookForPlayers(this, true))
		{
			// got a new target
			return;
		}
		SetState(SpawnState);
		return;
	}

	//
	// don't attack twice in a row
	//
	if (Flags & MF_JUSTATTACKED)
	{
		Flags &= ~MF_JUSTATTACKED;
		if (gameskill != sk_nightmare)
			P_NewChaseDir(this);
		return;
	}

	// Strafe
	if (special2 > 0)
	{
		special2--;
	}
	else
	{
		special2 = 0;
		velocity.x = 0.0;
		velocity.y = 0.0;
		dist = MobjDist(this, target);
		if (dist < CLASS_BOSS_STRAFE_RANGE)
		{
			if (P_Random() < 100)
			{
				ang = atan2(target->origin.y - origin.y,
					target->origin.x - origin.x);
				if (P_Random() < 128)
					ang = AngleMod360(ang + 90.0);
				else
					ang = AngleMod360(ang - 90.0);
				velocity.x = 13.0 * cos(ang) * 35.0;
				velocity.y = 13.0 * sin(ang) * 35.0;
				special2 = 3;	// strafe time
			}
		}
	}

	//
	// check for missile attack
	//
	if (MissileState)
	{
		if ((gameskill == sk_nightmare) || !movecount)
		{
			if (CheckMissileRange(this))
			{
				SetState(MissileState);
				Flags |= MF_JUSTATTACKED;
				return;
			}
		}
	}

	//
	// possibly choose another target
	//
	if (netgame && !threshold && !P_CheckSight(this, target))
	{
		if (P_LookForPlayers(this, true))
			return;	// got a new target
	}

	//
	// chase towards player
	//
	if (!special2)
	{
		if (--movecount < 0 || !P_Move(this))
		{
			P_NewChaseDir(this);
		}
	}
}

//============================================================================
//
//	A_FSwordAttack2
//
//============================================================================

void A_FSwordAttack2(mobj_t * actor)
{
	float angle = actor->angles.yaw;

	SpawnMissileAngle(actor, FighterSwordMissile,
		AngleMod360(angle + 45.0 / 4.0), 0.0);
	SpawnMissileAngle(actor, FighterSwordMissile,
		AngleMod360(angle + 45.0 / 8.0), 0.0);
	SpawnMissileAngle(actor, FighterSwordMissile, angle, 0.0);
	SpawnMissileAngle(actor, FighterSwordMissile,
		AngleMod360(angle - 45.0 / 8.0), 0.0);
	SpawnMissileAngle(actor, FighterSwordMissile,
		AngleMod360(angle - 45.0 / 4.0), 0.0);
	StartSoundName(actor, 'FighterSwordFire', CHAN_WEAPON);
}

//============================================================================
//
//  Actor::A_FighterAttack
//
//============================================================================

void Actor::A_FighterAttack(void)
{
	if (!target)
		return;
	A_FSwordAttack2(this);
}

//============================================================================
//
//	A_CHolyAttack3
//
//  Spawns the spirits
//
//============================================================================

void A_CHolyAttack3(mobj_t * actor)
{
	SpawnMissile(actor, actor->target, HolyMissile);
	StartSoundName(actor, 'HolySymbolFire', CHAN_WEAPON);
}

//============================================================================
//
//  Actor::A_ClericAttack
//
//============================================================================

void Actor::A_ClericAttack(void)
{
	if (!target)
		return;
	A_CHolyAttack3(this);
}

//============================================================================
//
//  MStaffSpawn2
//
//============================================================================

void MStaffSpawn2(mobj_t * actor, float angle)
{
	mobj_t *mo;

	mo = SpawnMissileAngle(actor, MageStaffFX2, angle, 0.0);
	if (mo)
	{
		mo->target = actor;
		mo->specialmobj1 = P_RoughMonsterSearch(mo, 10);
	}
}

//============================================================================
//
//	A_MStaffAttack2 - for use by mage class boss
//
//============================================================================

void A_MStaffAttack2(mobj_t * actor)
{
	float angle;

	angle = actor->angles.yaw;
	MStaffSpawn2(actor, angle);
	MStaffSpawn2(actor, AngleMod360(angle - 5.0));
	MStaffSpawn2(actor, AngleMod360(angle + 5.0));
	StartSoundName(actor, 'MageStaffFire', CHAN_WEAPON);
}

//============================================================================
//
//  Actor::A_MageAttack
//
//============================================================================

void Actor::A_MageAttack(void)
{
	if (!target)
		return;
	A_MStaffAttack2(this);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.11  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
