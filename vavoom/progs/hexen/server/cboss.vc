//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define CLASS_BOSS_STRAFE_RANGE		64.0 * 10.0

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  Actor::A_ClassBossHealth
//
//============================================================================

void Actor::A_ClassBossHealth(void)
{
	if (netgame && !deathmatch)	// co-op only
	{
		if (!Special1)
		{
			Health *= 5;
			Special1 = true;	// has been initialized
		}
	}
}

//============================================================================
//
//  Actor::A_FastChase
//
//============================================================================

void Actor::A_FastChase(void)
{
	float delta;
	float dist;
	float ang;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	// Modify target threshold
	if (Threshold)
	{
		Threshold--;
	}

	if (gameskill == sk_nightmare)
	{
		// Monsters move faster in nightmare mode
		StateTime *= 0.5;
		if (StateTime < 0.1)
		{
			StateTime = 0.1;
		}
	}

	//
	// turn towards movement direction if not there yet
	//
	if (MoveDir < 8)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);
		if (delta > 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw + 45.0);
		}
	}

	if (!Enemy || !Enemy.bShootable)
	{
		// look for a new enemy
		if (LookForPlayers(true))
		{
			// got a new enemy
			return;
		}
		SetState(SpawnState);
		return;
	}

	//
	// don't attack twice in a row
	//
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (gameskill != sk_nightmare)
			NewChaseDir();
		return;
	}

	// Strafe
	if (Special2 > 0)
	{
		Special2--;
	}
	else
	{
		Special2 = 0;
		Velocity.x = 0.0;
		Velocity.y = 0.0;
		dist = MobjDist(self, Enemy);
		if (dist < CLASS_BOSS_STRAFE_RANGE)
		{
			if (P_Random() < 100)
			{
				ang = atan2(Enemy.Origin.y - Origin.y,
					Enemy.Origin.x - Origin.x);
				if (P_Random() < 128)
					ang = AngleMod360(ang + 90.0);
				else
					ang = AngleMod360(ang - 90.0);
				Velocity.x = 13.0 * cos(ang) * 35.0;
				Velocity.y = 13.0 * sin(ang) * 35.0;
				Special2 = 3;	// strafe time
			}
		}
	}

	//
	// check for missile attack
	//
	if (MissileState)
	{
		if ((gameskill == sk_nightmare) || !MoveCount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				bJustAttacked = true;
				return;
			}
		}
	}

	//
	// possibly choose another enemy
	//
	if (netgame && !Threshold && !P_CheckSight(self, Enemy))
	{
		if (LookForPlayers(true))
			return;	// got a new enemy
	}

	//
	// chase towards player
	//
	if (!Special2)
	{
		if (--MoveCount < 0 || !StepMove())
		{
			NewChaseDir();
		}
	}
}

//============================================================================
//
//	Actor::A_FSwordAttack2
//
//============================================================================

void Actor::A_FSwordAttack2(void)
{
	float angle = Angles.yaw;

	SpawnMissileAngle(FighterSwordMissile,
		AngleMod360(angle + 45.0 / 4.0), 0.0);
	SpawnMissileAngle(FighterSwordMissile,
		AngleMod360(angle + 45.0 / 8.0), 0.0);
	SpawnMissileAngle(FighterSwordMissile, angle, 0.0);
	SpawnMissileAngle(FighterSwordMissile,
		AngleMod360(angle - 45.0 / 8.0), 0.0);
	SpawnMissileAngle(FighterSwordMissile,
		AngleMod360(angle - 45.0 / 4.0), 0.0);
	PlaySound('FighterSwordFire', CHAN_WEAPON);
}

//============================================================================
//
//  Actor::A_FighterAttack
//
//============================================================================

void Actor::A_FighterAttack(void)
{
	if (!Enemy)
		return;
	A_FSwordAttack2();
}

//============================================================================
//
//	Actor::A_CHolyAttack3
//
//  Spawns the spirits
//
//============================================================================

void Actor::A_CHolyAttack3(void)
{
	SpawnMissile(Enemy, HolyMissile);
	PlaySound('HolySymbolFire', CHAN_WEAPON);
}

//============================================================================
//
//  Actor::A_ClericAttack
//
//============================================================================

void Actor::A_ClericAttack(void)
{
	if (!Enemy)
		return;
	A_CHolyAttack3();
}

//============================================================================
//
//  Actor::MStaffSpawn2
//
//============================================================================

void Actor::MStaffSpawn2(float angle)
{
	Actor mo;

	mo = SpawnMissileAngle(MageStaffFX2, angle, 0.0);
	if (mo)
	{
		mo.Owner = self;
		mo.SpecialMobj1 = &mo.RoughMonsterSearch(10);
	}
}

//============================================================================
//
//	Actor::A_MStaffAttack2 - for use by mage class boss
//
//============================================================================

void Actor::A_MStaffAttack2(void)
{
	float angle;

	angle = Angles.yaw;
	MStaffSpawn2(angle);
	MStaffSpawn2(AngleMod360(angle - 5.0));
	MStaffSpawn2(AngleMod360(angle + 5.0));
	PlaySound('MageStaffFire', CHAN_WEAPON);
}

//============================================================================
//
//  Actor::A_MageAttack
//
//============================================================================

void Actor::A_MageAttack(void)
{
	if (!Enemy)
		return;
	A_MStaffAttack2();
}

//**************************************************************************
//
//  $Log$
//  Revision 1.18  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.17  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.16  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.15  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.14  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.13  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.12  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.11  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
