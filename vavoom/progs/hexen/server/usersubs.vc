//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#define BLAST_RADIUS_DIST	255.0
#define BLAST_FULLSTRENGTH	0.0038909912
#define BLAST_SPEED			20.0

class TLavaInflictor:Actor
{
	void Tick(float deltaTime)
	{
	}

	void Archive(void)
	{
	}
	void Unarchive(void)
	{
		LavaInflictor = self;
	}

	defaultproperties
	{
		bHidden = true;
		bNoBlockmap = true;
		bFireDamage = true;
		bNoDamageThrust = true;
	}
}

void PostMorphWeapon(player_t * player, int weapon);

//==========================================================================
//
//  InitLava
//
//==========================================================================

void InitLava(void)
{
	LavaInflictor = Actor(NewMobjThinker(TLavaInflictor));
//	LavaInflictor->type = MT_CIRCLEFLAME;
}

//==========================================================================
//
//  PlayerPawn::MorphPlayerThink
//
//==========================================================================

void PlayerPawn::MorphPlayerThink(void)
{
	if (Player->MorphTics & 15)
	{
		return;
	}
	if (!(Velocity.x + Velocity.y) && P_Random() < 64)
	{
		// Snout sniff
		Weapon(Player->ViewEnts[ps_weapon]).SnoutSniff();
		PlaySound('PigActive1', CHAN_VOICE);	// snort
		return;
	}
	if (P_Random() < 48)
	{
		if (P_Random() < 128)
		{
			PlaySound('PigActive1', CHAN_VOICE);
		}
		else
		{
			PlaySound('PigActive2', CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  PlayerPawn::UndoPlayerMorph
//
//==========================================================================

boolean PlayerPawn::UndoPlayerMorph(void)
{
	Actor fog;
	Actor A;

	P_UnsetThingPosition(self);
	switch (Player->BaseClass)
	{
	case PCLASS_FIGHTER:
		A = Spawn(PlayerFighter, Origin);
		break;
	case PCLASS_CLERIC:
		A = Spawn(PlayerCleric, Origin);
		break;
	case PCLASS_MAGE:
		A = Spawn(PlayerMage, Origin);
		break;
	default:
		Error("UndoPlayerMorph: Unknown player class %d", Player->BaseClass);
	}
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Remove();
		P_SetThingPosition(self);
		Player->MorphTics = 2 * 35;
		return false;
	}
	P_SetThingPosition(self);
	A.Angles = Angles;
	A.Player = Player;
	A.bIsPlayer = true;
	A.ReactionTime = 0.5;
	if (bFly)
	{
		A.bFly = true;
		A.bNoGravity = true;
	}
	Player->MorphTics = 0;
	A.Health = MAXHEALTH;
	Player->Health = A.Health;
	Player->MO = A;
	Player->PClass = Player->BaseClass;
	SetPlayerColor(Player);
	PostMorphWeapon(Player, _Special1);

	fog = Spawn(TeleportFog, Origin + vector(20.0 * cos(Angles.yaw),
		20.0 * sin(Angles.yaw), TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	SetState(S_FREETARGMOBJ);
	return true;
}

//==========================================================================
//
//  PlayerPawn::SetPlayerRunState
//
//==========================================================================

void PlayerPawn::SetPlayerRunState(void)
{
	if (StateNum == SpawnState)
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//  PlayerPawn::DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void PlayerPawn::DeathPlayerTick(float deltaTime)
{
	int dir;
	float delta;
	int lookDelta;

	MovePsprites(Player);
	if (WaterLevel > 1)
	{
		Velocity.z -= 60.0;	// drift towards bottom
	}

	onground = (Origin.z <= FloorZ);

	if (Class == BloodySkull || Class == IceChunk)
	{
		// Flying bloody skull or flying ice chunk
		Player->ViewHeight = 6.0;
		Player->DeltaViewHeight = 0.0;
		//player->damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (player->lookdir < 60)
			{
				lookDelta = (60 - player->lookdir) / 8;
				if (lookDelta < 1 && (level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				player->lookdir += lookDelta;
			}
#endif
		}
	}
	else if (!bIceDamage)
	{
		// Fall to ground (if not frozen)
		Player->DeltaViewHeight = 0.0;
		if (Player->ViewHeight > 6.0)
		{
			Player->ViewHeight -= 35.0 * deltaTime;
		}
		if (Player->ViewHeight < 6.0)
		{
			Player->ViewHeight = 6.0;
		}
#ifdef FIXME
		if (player->lookdir > 0)
		{
			player->lookdir -= 6;
		}
		else if (player->lookdir < 0)
		{
			player->lookdir += 6;
		}
		if (abs(player->lookdir) < 6)
		{
			player->lookdir = 0;
		}
#endif
	}
	CalcHeight(deltaTime);

	if (Player->Attacker && Player->Attacker != this)
	{
		// Watch killer
		dir = FaceActor(*Player->Attacker, &delta);
		if (delta < 10.0)
		{
			// Looking at killer, so fade damage and poison counters
			if (Player->DamageCount)
			{
				Player->DamageCount--;
			}
			if (Player->PoisonCount)
			{
				Player->PoisonCount--;
			}
		}
		delta = delta / 8.0;
		if (delta > 5.0)
		{
			delta = 5.0;
		}
		if (dir)
		{
			// Turn clockwise
			Angles.yaw += delta;
		}
		else
		{	// Turn counter clockwise
			Angles.yaw -= delta;
		}
	}
	else if (Player->DamageCount || Player->PoisonCount)
	{
		if (Player->DamageCount)
		{
			Player->DamageCount--;
		}
		else
		{
			Player->PoisonCount--;
		}
	}

	if (Player->Buttons & BT_USE)
	{
		Player->Palette = 0;
		Player->WeaponPalette = 0;
		Player->InvPtr = 0;
		Player->InvCurPos = 0;
		Player->NewTorch = 0;
		Player->NewTorchDelta = 0;
		Player->PlayerState = PST_REBORN;
		_Special1 = Player->PClass;
		if (_Special1 > 2)
		{
			_Special1 = 0;
		}
		// Let the mobj know the player has entered the reborn state.  Some
		// mobjs need to know when it's ok to remove themselves.
		_Special2 = 666;
	}
}

//==========================================================================
//
//  PlayerPawn::UseArtiPig
//
//==========================================================================

void PlayerPawn::UseArtiPig(void)
{
	SpawnPlayerMissile(EggMissile);
	SpawnPlayerMissileAngle(EggMissile,
		AngleMod360(Angles.yaw - 45.0 / 6.0));
	SpawnPlayerMissileAngle(EggMissile,
		AngleMod360(Angles.yaw + 45.0 / 6.0));
	SpawnPlayerMissileAngle(EggMissile,
		AngleMod360(Angles.yaw - 45.0 / 3.0));
	SpawnPlayerMissileAngle(EggMissile,
		AngleMod360(Angles.yaw + 45.0 / 3.0));
}

//==========================================================================
//
//  PlayerPawn::UseArtiSummon
//
//==========================================================================

void PlayerPawn::UseArtiSummon(void)
{
	Actor mo;

	mo = SpawnPlayerMissile(SummonMissile);
	if (mo)
	{
		mo.Instigator = self;
		mo._SpecialMobj1 = this;
		mo.Velocity.z = 5.0 * 35.0;
	}
}

//==========================================================================
//
//  PlayerPawn::UseArtiPoisonBag
//
//==========================================================================

void PlayerPawn::UseArtiPoisonBag(void)
{
	float angle;
	Actor bomb;

	angle = Angles.yaw;
	if (Player->PClass == PCLASS_CLERIC)
	{
		bomb = Spawn(PoisonBag, Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - FloorClip));
		if (bomb)
		{
			bomb.Instigator = self;
		}
	}
	else if (Player->PClass == PCLASS_MAGE)
	{
		bomb = Spawn(FireBomb, Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - FloorClip));
		if (bomb)
		{
			bomb.Instigator = self;
		}
	}
	else	// PCLASS_FIGHTER, obviously (also pig, not so obviously)
	{
		bomb = Spawn(ThrowingBomb, Origin +
			vector(0.0, 0.0, 35.0 - FloorClip));
		if (bomb)
		{
			bomb.Angles.yaw = AngleMod360(Angles.yaw +
				(Random() * 2.0 - 1.0) * 45.0 / 8.0);
			bomb.Velocity.z =
				(4.0 + 173.0 * -tan(Angles.pitch) / 16.0) * 35.0;
			bomb.Origin.z += 173.0 * -tan(Angles.pitch) / 16.0;
			bomb.Thrust(bomb.Angles.yaw, bomb.Speed * frametime);
			bomb.Velocity.x += Velocity.x / 2.0;
			bomb.Velocity.y += Velocity.y / 2.0;
			bomb.Instigator = self;
			bomb.StateTime -= Random() * 0.1;
			bomb.CheckMissileSpawn();
		}
	}
}

//==========================================================================
//
//  PlayerPawn::UseArtiTeleportOther
//
//==========================================================================

void PlayerPawn::UseArtiTeleportOther(void)
{
	Actor mo;

	mo = SpawnPlayerMissile(TeleportOtherFX1);
	if (mo)
	{
		mo.Instigator = self;
	}
}

//==========================================================================
//
//  Actor::Blast
//
//==========================================================================

void Actor::Blast(Actor source, float strength)
{
	float angle;
	float ang;
	Actor A;
	float x;
	float y;
	float z;

	angle = atan2(Origin.y - source.Origin.y, Origin.x - source.Origin.x);
	if (strength < BLAST_FULLSTRENGTH)
	{
		Velocity.x = strength * cos(angle) * 35.0;
		Velocity.y = strength * sin(angle) * 35.0;
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (bMissile)
		{
			switch (Class)
			{
			case SorcererBall1:	// don't blast sorcerer balls
			case SorcererBall2:
			case SorcererBall3:
				return;
				break;
			case MageStaffFX2:	// Reflect to originator
				Enemy = Instigator;
				Instigator = source;
				break;
			default:
				break;
			}
		}
		if (Class == HolyFX)
		{
			if (Enemy == source)
			{
				Enemy = Instigator;
				Instigator = source;
			}
		}
		Velocity.x = BLAST_SPEED * cos(angle) * 35.0;
		Velocity.y = BLAST_SPEED * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source.Origin.y - Origin.y, source.Origin.x - Origin.x);
		x = Origin.x + (Radius + 1.0) * cos(ang);
		y = Origin.y + (Radius + 1.0) * sin(ang);
		z = Origin.z - FloorClip + Height / 2.0;
		A = Spawn(BlastEffect, vector(x, y, z));
		if (A)
		{
			A.Velocity.x = Velocity.x;
			A.Velocity.y = Velocity.y;
		}

		if (bMissile)
		{
			Velocity.z = 8.0 * 35.0;
			A.Velocity.z = Velocity.z;
		}
		else
		{
			Velocity.z = 1000.0 / Mass * 35.0;
		}
		if (bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			bSlide = true;
			bBlasted = true;
		}
	}
}

//==========================================================================
//
//  PlayerPawn::UseArtiBlastRadius
//
//  Blast all mobj things away
//
//==========================================================================

void PlayerPawn::UseArtiBlastRadius(void)
{
	Actor mo;
	float dist;

	PlaySound('BlastRadius', CHAN_ITEM);
	NoiseAlert(self, self);

	FOREACH(Actor, mo)
	{
		if ((mo == self) || mo.bBoss)
		{
			// Not a valid monster
			continue;
		}
		if ((mo.Class == PoisonCloud) ||	// poison cloud
			(mo.Class == HolyFX) ||	// holy fx
			mo.bIceCorpse)	// frozen corpse
		{
			// Let these special cases go
		}
		else if (mo.bCountKill && (mo.Health <= 0))
		{
			continue;
		}
		else if (!mo.bCountKill && !mo.bIsPlayer && !mo.bMissile)
		{
			// Must be monster, player, or missile
			continue;
		}
		if (mo.bDormant)
		{
			continue;	// no dormant creatures
		}
		if ((mo.Class == WraithBuried) && mo.bHidden)
		{
			continue;	// no underground wraiths
		}
		if ((mo.Class == SplashBase) || (mo.Class == Splash))
		{
			continue;
		}
		if (mo.Class == Serpent || mo.Class == SerpentLeader)
		{
			continue;
		}
		dist = MobjDist(self, mo);
		if (dist > BLAST_RADIUS_DIST)
		{
			// Out of range
			continue;
		}
		mo.Blast(self, BLAST_FULLSTRENGTH);
	}
}

//==========================================================================
//
//  G_CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

boolean G_CheckSpot(int playernum, mthing_t * mthing)
{
	float x;
	float y;
	subsector_t *ss;
	float an;
	Actor A;
	int i;

	if (!players[playernum].MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < playernum; i++)
			if (players[i].MO.Origin.x == mthing->x &&
				players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	players[playernum].MO.bNoPassMobj = true;
	if (!players[playernum].MO.CheckPosition(vector(x, y, ONFLOORZ)))
	{
		players[playernum].MO.bNoPassMobj = false;
		return false;
	}
	players[playernum].MO.bNoPassMobj = false;

	// spawn a teleport fog 
	ss = PointInSubsector(x, y);
	an = itof(45 * (mthing->angle / 45));

	A = Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		ss->sector->floorheight + TELEFOGHEIGHT));
	A.PlaySound('Teleport', CHAN_VOICE);

	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.27  2002/04/11 16:49:50  dj_jl
//  Tick function.
//
//  Revision 1.26  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.25  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.24  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.23  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.22  2002/03/02 18:00:17  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.21  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.20  2002/02/22 18:00:25  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.19  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/07 18:50:09  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.17  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.10  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.8  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.7  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.6  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.5  2001/09/27 17:09:51  dj_jl
//  Changed LavaInflictor to pointer
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
