//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#define BLAST_RADIUS_DIST	255.0
#define BLAST_FULLSTRENGTH	0.0038909912
#define BLAST_SPEED			20.0

class TLavaInflictor:mobj_t
{
	void Think(void)
	{
	}

	void Archive(void)
	{
	}
	void Unarchive(void)
	{
		LavaInflictor = this;
	}

	defaultproperties
	{
		bNoClient = true;
		bNoBlockmap = true;
		bFireDamage = true;
		bNoDamageThrust = true;
	}
}

void PostMorphWeapon(player_t * player, int weapon);
void SetPspriteNF(player_t * player, int position, int stnum);

int PStateAttack[NUMCLASSES] = {
	S_FPLAY_ATK1,
	S_CPLAY_ATK1,
	S_MPLAY_ATK1,
	S_PIGPLAY_ATK1
};

int PStateAttackEnd[NUMCLASSES] = {
	S_FPLAY_ATK2,
	S_CPLAY_ATK3,
	S_MPLAY_ATK2,
	S_PIGPLAY_ATK1
};

//==========================================================================
//
//  InitLava
//
//==========================================================================

void InitLava(void)
{
	LavaInflictor = &Actor(NewMobjThinker(TLavaInflictor));
//	LavaInflictor->type = MT_CIRCLEFLAME;
}

//==========================================================================
//
//  MorphPlayerThink
//
//==========================================================================

void MorphPlayerThink(player_t * player)
{
	mobj_t *pmo;

	if (player->morphTics & 15)
	{
		return;
	}
	pmo = player->mo;
	if (!(pmo->Velocity.x + pmo->Velocity.y) && P_Random() < 64)
	{
		// Snout sniff
		SetPspriteNF(player, ps_weapon, S_SNOUTATK2);
		StartSoundName(*pmo, 'PigActive1', CHAN_VOICE);	// snort
		return;
	}
	if (P_Random() < 48)
	{
		if (P_Random() < 128)
		{
			StartSoundName(*pmo, 'PigActive1', CHAN_VOICE);
		}
		else
		{
			StartSoundName(*pmo, 'PigActive2', CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  UndoPlayerMorph
//
//==========================================================================

boolean UndoPlayerMorph(player_t * player)
{
	mobj_t *fog;
	mobj_t *mo;
	mobj_t *pmo;
	float x;
	float y;
	float z;
	float angle;
	int weapon;
	boolean OldbFly;

	pmo = player->mo;
	P_UnsetThingPosition(*pmo);
	x = pmo->Origin.x;
	y = pmo->Origin.y;
	z = pmo->Origin.z;
	angle = pmo->Angles.yaw;
	weapon = pmo->special1;
	OldbFly = pmo->bFly;
	switch (player->baseclass)
	{
	case PCLASS_FIGHTER:
		mo = P_SpawnMobj(x, y, z, PlayerFighter);
		break;
	case PCLASS_CLERIC:
		mo = P_SpawnMobj(x, y, z, PlayerCleric);
		break;
	case PCLASS_MAGE:
		mo = P_SpawnMobj(x, y, z, PlayerMage);
		break;
	default:
		Error("UndoPlayerMorph: Unknown player class %d", player->pclass);
	}
	if (!P_TestMobjLocation(mo))
	{
		// Didn't fit
		P_RemoveMobj(mo);
		P_SetThingPosition(*pmo);
		player->morphTics = 2 * 35;
		return false;
	}
	pmo->SetState(S_FREETARGMOBJ);
	SetPlayerColor(player);
	mo->Angles.yaw = angle;
	mo->Player = player;
	mo->bIsPlayer = true;
	mo->ReactionTime = 0.5;
	if (OldbFly)
	{
		mo->bFly = true;
		mo->bNoGravity = true;
	}
	player->morphTics = 0;
	player->health = mo->Health = MAXHEALTH;
	player->mo = mo;
	player->pclass = player->baseclass;
	fog = P_SpawnMobj(x + 20.0 * cos(angle),
		y + 20.0 * sin(angle), z + TELEFOGHEIGHT, TeleportFog);
	StartSoundName(*fog, 'Teleport', CHAN_VOICE);
	PostMorphWeapon(player, weapon);
	return true;
}

//==========================================================================
//
//  SetPlayerRunState
//
//==========================================================================

void SetPlayerRunState(player_t * player)
{
	if (player->mo->StateNum == PStateNormal[player->pclass])
	{
		player->mo->SetState(PStateRun[player->pclass]);
	}
}

//==========================================================================
//
//  DeathPlayerThink
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerThink(player_t * player)
{
	int dir;
	float delta;
	int lookDelta;

	MovePsprites(player);
	if (player->mo->waterlevel > 1)
	{
		player->mo->Velocity.z -= 60.0;	// drift towards bottom
	}

	onground = (player->mo->Origin.z <= player->mo->FloorZ);

	if (player->mo->Class == BloodySkull || player->mo->Class == IceChunk)
	{
		// Flying bloody skull or flying ice chunk
		player->viewheight = 6.0;
		player->deltaviewheight = 0.0;
		//player->damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (player->lookdir < 60)
			{
				lookDelta = (60 - player->lookdir) / 8;
				if (lookDelta < 1 && (level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				player->lookdir += lookDelta;
			}
#endif
		}
	}
	else if (!player->mo->bIceDamage)
	{
		// Fall to ground (if not frozen)
		player->deltaviewheight = 0.0;
		if (player->viewheight > 6.0)
		{
			player->viewheight -= 1.0;
		}
		if (player->viewheight < 6.0)
		{
			player->viewheight = 6.0;
		}
#ifdef FIXME
		if (player->lookdir > 0)
		{
			player->lookdir -= 6;
		}
		else if (player->lookdir < 0)
		{
			player->lookdir += 6;
		}
		if (abs(player->lookdir) < 6)
		{
			player->lookdir = 0;
		}
#endif
	}
	CalcHeight(player);

	if (player->attacker && player->attacker != player->mo)
	{	// Watch killer
		dir = P_FaceMobj(player->mo, player->attacker, &delta);
		if (delta < 10.0)
		{
			// Looking at killer, so fade damage and poison counters
			if (player->damagecount)
			{
				player->damagecount--;
			}
			if (player->poisoncount)
			{
				player->poisoncount--;
			}
		}
		delta = delta / 8.0;
		if (delta > 5.0)
		{
			delta = 5.0;
		}
		if (dir)
		{
			// Turn clockwise
			player->mo->Angles.yaw += delta;
		}
		else
		{	// Turn counter clockwise
			player->mo->Angles.yaw -= delta;
		}
	}
	else if (player->damagecount || player->poisoncount)
	{
		if (player->damagecount)
		{
			player->damagecount--;
		}
		else
		{
			player->poisoncount--;
		}
	}

	if (player->buttons & BT_USE)
	{
		player->palette = 0;
		player->weapon_palette = 0;
		player->inv_ptr = 0;
		player->curpos = 0;
		player->newtorch = 0;
		player->newtorchdelta = 0;
		player->playerstate = PST_REBORN;
		player->mo->special1 = player->pclass;
		if (player->mo->special1 > 2)
		{
			player->mo->special1 = 0;
		}
		// Let the mobj know the player has entered the reborn state.  Some
		// mobjs need to know when it's ok to remove themselves.
		player->mo->special2 = 666;
	}
}

//==========================================================================
//
//  SpawnSpeedMobj
//
//==========================================================================

mobj_t *SpawnSpeedMobj(mobj_t * pmo)
{
	return P_SpawnMobj(pmo->Origin.x, pmo->Origin.y, pmo->Origin.z,
		PlayerSpeed);
}

//==========================================================================
//
//  ArtiPig
//
//==========================================================================

void ArtiPig(mobj_t * mo)
{
	SpawnPlayerMissile(mo, EggMissile);
	SpawnPlayerMissileAngle(mo, EggMissile,
		AngleMod360(mo->Angles.yaw - 45.0 / 6.0));
	SpawnPlayerMissileAngle(mo, EggMissile,
		AngleMod360(mo->Angles.yaw + 45.0 / 6.0));
	SpawnPlayerMissileAngle(mo, EggMissile,
		AngleMod360(mo->Angles.yaw - 45.0 / 3.0));
	SpawnPlayerMissileAngle(mo, EggMissile,
		AngleMod360(mo->Angles.yaw + 45.0 / 3.0));
}

//==========================================================================
//
//  ArtiSummon
//
//==========================================================================

void ArtiSummon(player_t * player)
{
	mobj_t *mo;

	mo = SpawnPlayerMissile(player->mo, SummonMissile);
	if (mo)
	{
		mo->target = player->mo;
		mo->specialmobj1 = player->mo;
		mo->Velocity.z = 5.0 * 35.0;
	}
}

//==========================================================================
//
//  ArtiPoisonBag
//
//==========================================================================

void ArtiPoisonBag(player_t * player)
{
	float angle;
	mobj_t *mo;
	mobj_t *bomb;

	angle = player->mo->Angles.yaw;
	if (player->pclass == PCLASS_CLERIC)
	{
		mo = P_SpawnMobj(player->mo->Origin.x + 16.0 * cos(angle),
			player->mo->Origin.y + 24.0 * sin(angle),
			player->mo->Origin.z - player->mo->FloorClip + 8.0, PoisonBag);
		if (mo)
		{
			mo->target = player->mo;
		}
	}
	else if (player->pclass == PCLASS_MAGE)
	{
		mo = P_SpawnMobj(player->mo->Origin.x + 16.0 * cos(angle),
			player->mo->Origin.y + 24.0 * sin(angle),
			player->mo->Origin.z - player->mo->FloorClip + 8.0, FireBomb);
		if (mo)
		{
			mo->target = player->mo;
		}
	}
	else	// PCLASS_FIGHTER, obviously (also pig, not so obviously)
	{
		bomb = P_SpawnMobj(player->mo->Origin.x, player->mo->Origin.y,
			player->mo->Origin.z - player->mo->FloorClip + 35.0,
			ThrowingBomb);
		if (bomb)
		{
			bomb->Angles.yaw = AngleMod360(player->mo->Angles.yaw +
				(Random() * 2.0 - 1.0) * 45.0 / 8.0);
			bomb->Velocity.z =
				(4.0 + 173.0 * -tan(player->mo->Angles.pitch) / 16.0) * 35.0;
			bomb->Origin.z += 173.0 * -tan(player->mo->Angles.pitch) / 16.0;
			P_ThrustMobj(bomb, bomb->Angles.yaw, bomb->Speed * frametime);
			bomb->Velocity.x += player->mo->Velocity.x / 2.0;
			bomb->Velocity.y += player->mo->Velocity.y / 2.0;
			bomb->target = player->mo;
			bomb->StateTime -= Random() * 0.1;
			CheckMissileSpawn(bomb);
		}
	}
}

//==========================================================================
//
//  ArtiTeleportOther
//
//==========================================================================

void ArtiTeleportOther(player_t * player)
{
	mobj_t *mo;

	mo = SpawnPlayerMissile(player->mo, TeleportOtherFX1);
	if (mo)
	{
		mo->target = player->mo;
	}
}

//==========================================================================
//
//  BlastMobj
//
//==========================================================================

void BlastMobj(mobj_t * source, mobj_t * victim, float strength)
{
	float angle;
	float ang;
	mobj_t *mo;
	float x;
	float y;
	float z;

	angle = atan2(victim->Origin.y - source->Origin.y,
		victim->Origin.x - source->Origin.x);
	if (strength < BLAST_FULLSTRENGTH)
	{
		victim->Velocity.x = strength * cos(angle) * 35.0;
		victim->Velocity.y = strength * sin(angle) * 35.0;
		if (victim->bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim->bSlide = true;
			victim->bBlasted = true;
		}
	}
	else	// full strength blast from artifact
	{
		if (victim->bMissile)
		{
			switch (victim->Class)
			{
			case SorcererBall1:	// don't blast sorcerer balls
			case SorcererBall2:
			case SorcererBall3:
				return;
				break;
			case MageStaffFX2:	// Reflect to originator
				victim->specialmobj1 = victim->target;
				victim->target = source;
				break;
			default:
				break;
			}
		}
		if (victim->Class == HolyFX)
		{
			if (victim->specialmobj1 == source)
			{
				victim->specialmobj1 = victim->target;
				victim->target = source;
			}
		}
		victim->Velocity.x = BLAST_SPEED * cos(angle) * 35.0;
		victim->Velocity.y = BLAST_SPEED * sin(angle) * 35.0;

		// Spawn blast puff
		ang = atan2(source->Origin.y - victim->Origin.y,
			source->Origin.x - victim->Origin.x);
		x = victim->Origin.x + (victim->Radius + 1.0) * cos(ang);
		y = victim->Origin.y + (victim->Radius + 1.0) * sin(ang);
		z = victim->Origin.z - victim->FloorClip + victim->Height / 2.0;
		mo = P_SpawnMobj(x, y, z, BlastEffect);
		if (mo)
		{
			mo->Velocity.x = victim->Velocity.x;
			mo->Velocity.y = victim->Velocity.y;
		}

		if (victim->bMissile)
		{
			victim->Velocity.z = 8.0 * 35.0;
			mo->Velocity.z = victim->Velocity.z;
		}
		else
		{
			victim->Velocity.z = 1000.0 / victim->Mass * 35.0;
		}
		if (victim->bIsPlayer)
		{
			// Players handled automatically
		}
		else
		{
			victim->bSlide = true;
			victim->bBlasted = true;
		}
	}
}

//==========================================================================
//
//  ArtiBlastRadius
//
//  Blast all mobj things away
//
//==========================================================================

void ArtiBlastRadius(player_t * player)
{
	Actor mo;
	mobj_t *pmo = player->mo;
	float dist;

	StartSoundName(*pmo, 'BlastRadius', CHAN_ITEM);
	P_NoiseAlert(player->mo, player->mo);

	FOREACH(Actor, mo)
	{
		if ((mo == *pmo) || mo.bBoss)
		{
			// Not a valid monster
			continue;
		}
		if ((mo.Class == PoisonCloud) ||	// poison cloud
			(mo.Class == HolyFX) ||	// holy fx
			mo.bIceCorpse)	// frozen corpse
		{
			// Let these special cases go
		}
		else if (mo.bCountKill && (mo.Health <= 0))
		{
			continue;
		}
		else if (!mo.bCountKill && !mo.bIsPlayer && !mo.bMissile)
		{
			// Must be monster, player, or missile
			continue;
		}
		if (mo.bDormant)
		{
			continue;	// no dormant creatures
		}
		if ((mo.Class == WraithBuried) && (mo.Translucency >= 100))
		{
			continue;	// no underground wraiths
		}
		if ((mo.Class == SplashBase) || (mo.Class == Splash))
		{
			continue;
		}
		if (mo.Class == Serpent || mo.Class == SerpentLeader)
		{
			continue;
		}
		dist = MobjDist(*pmo, mo);
		if (dist > BLAST_RADIUS_DIST)
		{
			// Out of range
			continue;
		}
		BlastMobj(pmo, &mo, BLAST_FULLSTRENGTH);
	}
}

//==========================================================================
//
//  G_CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

boolean G_CheckSpot(int playernum, mthing_t * mthing)
{
	float x;
	float y;
	subsector_t *ss;
	float an;
	mobj_t *mo;
	int i;

	if (!players[playernum].mo)
	{
		// first spawn of level, before corpses
		for (i = 0; i < playernum; i++)
			if (players[i].mo->Origin.x == mthing->x &&
				players[i].mo->Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	players[playernum].mo->bNoPassMobj = true;
	if (!CheckPosition(*players[playernum].mo, vector(x, y, ONFLOORZ)))
	{
		players[playernum].mo->bNoPassMobj = false;
		return false;
	}
	players[playernum].mo->bNoPassMobj = false;

	// spawn a teleport fog 
	ss = PointInSubsector(x, y);
	an = itof(45 * (mthing->angle / 45));

	mo = P_SpawnMobj(x + 20.0 * cos(an), y + 20.0 * sin(an),
		ss->sector->floorheight + TELEFOGHEIGHT, TeleportFog);
	StartSoundName(*mo, 'Teleport', CHAN_VOICE);

	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.19  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/07 18:50:09  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.17  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.10  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.8  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.7  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.6  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.5  2001/09/27 17:09:51  dj_jl
//  Changed LavaInflictor to pointer
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
