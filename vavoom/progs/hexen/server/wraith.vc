//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	WraithSparkDrip
//
//**************************************************************************

class WraithSparkDrip:Effect
{

__states__
{
	S_WRTHFX_SIZZLE1('WRBL', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_SIZZLE2) { }
	S_WRTHFX_SIZZLE2('WRBL', 10 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_SIZZLE3) { }
	S_WRTHFX_SIZZLE3('WRBL', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_SIZZLE4) { }
	S_WRTHFX_SIZZLE4('WRBL', 12 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_SIZZLE5) { }
	S_WRTHFX_SIZZLE5('WRBL', 13 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_SIZZLE6) { }
	S_WRTHFX_SIZZLE6('WRBL', 14 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_SIZZLE7) { }
	S_WRTHFX_SIZZLE7('WRBL', 15 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 2.0;
	Height = 5.0;
	Mass = 5.0;
	bDropOff = true;
	bFloorClip = true;
	bNoTeleport = true;
	bNoGravity = false;
	IdleState = S_WRTHFX_SIZZLE1;
}

}

//**************************************************************************
//
//	WraithMissile
//
//**************************************************************************

class WraithMissile:Projectile
{

//==========================================================================
//
//  A_WraithFX2
//
//  Spawns sparkle tail of missile.
//
//==========================================================================

void A_WraithFX2(void)
{
	Actor A;
	float angle;
	int i;

	for (i = 0; i < 2; i++)
	{
		A = Spawn(WraithSparkDrip, Origin);
		if (A)
		{
			if (Random() < 0.5)
			{
				angle = AngleMod360(Angles.yaw + Random() * 90.0);
			}
			else
			{
				angle = AngleMod360(Angles.yaw - Random() * 90.0);
			}
			A.Velocity.z = 0.0;
			A.Velocity.x = (Random() / 2.0 + 1.0) * cos(angle) * 35.0;
			A.Velocity.y = (Random() / 2.0 + 1.0) * sin(angle) * 35.0;
			A.Instigator = self;
			A.FloorClip = 10.0;
		}
	}
}

__states__
{
	S_WRTHFX_MOVE1('WRBL', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_WRTHFX_MOVE2) { }
	S_WRTHFX_MOVE2('WRBL', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_WRTHFX_MOVE3) { A_WraithFX2(); }
	S_WRTHFX_MOVE3('WRBL', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_WRTHFX_MOVE1) { }
	S_WRTHFX_BOOM1('WRBL', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_BOOM2) { }
	S_WRTHFX_BOOM2('WRBL', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_BOOM3) { A_WraithFX2(); }
	S_WRTHFX_BOOM3('WRBL', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_BOOM4) { }
	S_WRTHFX_BOOM4('WRBL', 6 | FF_FULLBRIGHT, 3.0 / 35.0, S_WRTHFX_BOOM5) { A_WraithFX2(); }
	S_WRTHFX_BOOM5('WRBL', 7 | FF_FULLBRIGHT, 3.0 / 35.0, S_WRTHFX_BOOM6) { A_WraithFX2(); }
	S_WRTHFX_BOOM6('WRBL', 8 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 6.0;
	Mass = 5.0;
	Speed = 490.0;
	MissileDamage = 5;
	bFloorClip = true;
	bFireDamage = true;
	IdleState = S_WRTHFX_MOVE1;
	DeathState = S_WRTHFX_BOOM1;
	DeathSound = 'WraithMissileExplode';
	Effects = EF_DL_RED;
}

}

//**************************************************************************
//
//	WraithFX3
//
//**************************************************************************

class WraithFX3:Fragment
{

__states__
{
	S_WRTHFX_DROP1('WRBL', 16 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_DROP2) { }
	S_WRTHFX_DROP2('WRBL', 17 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_DROP3) { }
	S_WRTHFX_DROP3('WRBL', 18 | FF_FULLBRIGHT, 4.0 / 35.0, S_WRTHFX_DROP1) { }
	S_WRTHFX_DEAD1('WRBL', 18 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 2.0;
	Height = 5.0;
	Mass = 5.0;
	bFloorClip = true;
	bNoGravity = false;
	IdleState = S_WRTHFX_DROP1;
	DeathState = S_WRTHFX_DEAD1;
	DeathSound = 'Drip';
}

}

//**************************************************************************
//
//	WraithFleshDrip1
//
//**************************************************************************

class WraithFleshDrip1:Fragment
{

__states__
{
	S_WRTHFX_ADROP1('WRBL', 19, 4.0 / 35.0, S_WRTHFX_ADROP2) { }
	S_WRTHFX_ADROP2('WRBL', 20, 4.0 / 35.0, S_WRTHFX_ADROP3) { }
	S_WRTHFX_ADROP3('WRBL', 21, 4.0 / 35.0, S_WRTHFX_ADROP4) { }
	S_WRTHFX_ADROP4('WRBL', 22, 4.0 / 35.0, S_WRTHFX_ADROP1) { }
	S_WRTHFX_ADEAD1('WRBL', 22, 10.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 2.0;
	Height = 5.0;
	Mass = 5.0;
	bNoGravity = false;
	IdleState = S_WRTHFX_ADROP1;
	DeathState = S_WRTHFX_ADEAD1;
	DeathSound = 'Drip';
}

}

//**************************************************************************
//
//	WraithFleshDrip2
//
//**************************************************************************

class WraithFleshDrip2:Fragment
{

__states__
{
	S_WRTHFX_BDROP1('WRBL', 23, 7.0 / 35.0, S_WRTHFX_BDROP2) { }
	S_WRTHFX_BDROP2('WRBL', 24, 7.0 / 35.0, S_WRTHFX_BDROP3) { }
	S_WRTHFX_BDROP3('WRBL', 25, 7.0 / 35.0, S_WRTHFX_BDROP1) { }
	S_WRTHFX_BDEAD1('WRBL', 25, 35.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 2.0;
	Height = 5.0;
	Mass = 5.0;
	bNoGravity = false;
	IdleState = S_WRTHFX_BDROP1;
	DeathState = S_WRTHFX_BDEAD1;
	DeathSound = 'Drip';
}

}

//**************************************************************************
//
//	Wraith
//
//**************************************************************************

class Wraith:Pawn
	__mobjinfo__(34)
{

//
// Wraith Variables
//

int WeaveIndex;		//	Internal index into floatbob

//==========================================================================
//
//  A_WraithInit
//
//==========================================================================

void A_WraithInit(void)
{
	Origin.z += 48.0;
	WeaveIndex = 0;	// index into floatbob
}

//==========================================================================
//
//  A_WraithFX3
//
//  Spawn an FX3 around the actor during attacks.
//
//==========================================================================

void A_WraithFX3(void)
{
	Actor A;
	int numdropped = P_Random() % 15;
	int i;

	for (i = 0; i < numdropped; i++)
	{
		A = Spawn(WraithFX3, Origin);
		if (A)
		{
			A.Origin.x += (Random() - 0.5) * 8.0;
			A.Origin.y += (Random() - 0.5) * 8.0;
			A.Origin.z += Random() * 4.0;
			A.Instigator = self;
		}
	}
}

//==========================================================================
//
//  A_WraithFX4
//
//  Spawn an FX4 during movement.
//
//==========================================================================

void A_WraithFX4(void)
{
	Actor mo;
	int chance = P_Random();
	int spawn4, spawn5;

	if (chance < 10)
	{
		spawn4 = true;
		spawn5 = false;
	}
	else if (chance < 20)
	{
		spawn4 = false;
		spawn5 = true;
	}
	else if (chance < 25)
	{
		spawn4 = true;
		spawn5 = true;
	}
	else
	{
		spawn4 = false;
		spawn5 = false;
	}

	if (spawn4)
	{
		mo = Spawn(WraithFleshDrip1, Origin);
		if (mo)
		{
			mo.Origin.x += (Random() - 0.5) * 16.0;
			mo.Origin.y += (Random() - 0.5) * 16.0;
			mo.Origin.z += Random() * 4.0;
			mo.Instigator = self;
		}
	}
	if (spawn5)
	{
		mo = Spawn(WraithFleshDrip2, Origin);
		if (mo)
		{
			mo.Origin.x += (Random() - 0.5) * 8.0;
			mo.Origin.y += (Random() - 0.5) * 8.0;
			mo.Origin.z += Random() * 4.0;
			mo.Instigator = self;
		}
	}
}

//==========================================================================
//
//  A_WraithLook
//
//==========================================================================

void A_WraithLook(void)
{
//	A_WraithFX4();             // too expensive
	A_Look();
}

//==========================================================================
//
//  A_WraithChase
//
//==========================================================================

void A_WraithChase(void)
{
	Origin.z += FloatBobOffsets[WeaveIndex];
	WeaveIndex = (WeaveIndex + 2) & 63;
//  if (actor->FloorClip > 0)
//  {
//      SetState(S_WRAITH_RAISE2);
//      return;
//  }
	A_Chase();
	A_WraithFX4();
}

//==========================================================================
//
//  A_WraithMelee
//
//==========================================================================

void A_WraithMelee(void)
{
	int amount;

	// Steal health from enemy and give to player
	if (CheckMeleeRange() && (P_Random() < 220))
	{
		amount = HITDICE(2);
		Enemy.Damage(self, self, amount);
		Health += amount;
	}
}

//==========================================================================
//
//  A_WraithMissile
//
//==========================================================================

void A_WraithMissile(void)
{
	Actor mo;

	mo = SpawnMissile(Enemy, WraithMissile);
	if (mo)
	{
		PlaySound('WraithMissileFire', CHAN_WEAPON);
	}
}

__states__
{
	S_WRAITH_INIT1('WRTH', 0, 10.0 / 35.0, S_WRAITH_INIT2) { }
	S_WRAITH_INIT2('WRTH', 1, 5.0 / 35.0, S_WRAITH_LOOK1) { A_WraithInit(); }
	S_WRAITH_LOOK1('WRTH', 0, 15.0 / 35.0, S_WRAITH_LOOK2) { A_WraithLook(); }
	S_WRAITH_LOOK2('WRTH', 1, 15.0 / 35.0, S_WRAITH_LOOK1) { A_WraithLook(); }
	S_WRAITH_CHASE1('WRTH', 0, 4.0 / 35.0, S_WRAITH_CHASE2) { A_WraithChase(); }
	S_WRAITH_CHASE2('WRTH', 1, 4.0 / 35.0, S_WRAITH_CHASE3) { A_WraithChase(); }
	S_WRAITH_CHASE3('WRTH', 2, 4.0 / 35.0, S_WRAITH_CHASE4) { A_WraithChase(); }
	S_WRAITH_CHASE4('WRTH', 3, 4.0 / 35.0, S_WRAITH_CHASE1) { A_WraithChase(); }
	S_WRAITH_ATK1_1('WRTH', 4, 6.0 / 35.0, S_WRAITH_ATK1_2) { A_FaceTarget(); }
	S_WRAITH_ATK1_2('WRTH', 5, 6.0 / 35.0, S_WRAITH_ATK1_3) { A_WraithFX3(); }
	S_WRAITH_ATK1_3('WRTH', 6, 6.0 / 35.0, S_WRAITH_CHASE1) { A_WraithMelee(); }
	S_WRAITH_ATK2_1('WRTH', 4, 6.0 / 35.0, S_WRAITH_ATK2_2) { A_FaceTarget(); }
	S_WRAITH_ATK2_2('WRTH', 5, 6.0 / 35.0, S_WRAITH_ATK2_3) { }
	S_WRAITH_ATK2_3('WRTH', 6, 6.0 / 35.0, S_WRAITH_CHASE1) { A_WraithMissile(); }
	S_WRAITH_PAIN1('WRTH', 0, 2.0 / 35.0, S_WRAITH_PAIN2) { }
	S_WRAITH_PAIN2('WRTH', 7, 6.0 / 35.0, S_WRAITH_CHASE1) { A_Pain(); }
	S_WRAITH_DEATH1_1('WRTH', 8, 4.0 / 35.0, S_WRAITH_DEATH1_2) { }
	S_WRAITH_DEATH1_2('WRTH', 9, 4.0 / 35.0, S_WRAITH_DEATH1_3) { A_Scream(); }
	S_WRAITH_DEATH1_3('WRTH', 10, 4.0 / 35.0, S_WRAITH_DEATH1_4) { }
	S_WRAITH_DEATH1_4('WRTH', 11, 4.0 / 35.0, S_WRAITH_DEATH1_5) { }
	S_WRAITH_DEATH1_5('WRTH', 12, 4.0 / 35.0, S_WRAITH_DEATH1_6) { A_NoBlocking(); }
	S_WRAITH_DEATH1_6('WRTH', 13, 4.0 / 35.0, S_WRAITH_DEATH1_7) { A_QueueCorpse(); }
	S_WRAITH_DEATH1_7('WRTH', 14, 4.0 / 35.0, S_WRAITH_DEATH1_8) { }
	S_WRAITH_DEATH1_8('WRTH', 15, 5.0 / 35.0, S_WRAITH_DEATH1_9) { }
	S_WRAITH_DEATH1_9('WRTH', 16, 5.0 / 35.0, S_WRAITH_DEATH1_0) { }
	S_WRAITH_DEATH1_0('WRTH', 17, -1.0, S_NULL) { }
	S_WRAITH_DEATH2_1('WRT2', 0, 5.0 / 35.0, S_WRAITH_DEATH2_2) { }
	S_WRAITH_DEATH2_2('WRT2', 1, 5.0 / 35.0, S_WRAITH_DEATH2_3) { A_Scream(); }
	S_WRAITH_DEATH2_3('WRT2', 2, 5.0 / 35.0, S_WRAITH_DEATH2_4) { }
	S_WRAITH_DEATH2_4('WRT2', 3, 5.0 / 35.0, S_WRAITH_DEATH2_5) { }
	S_WRAITH_DEATH2_5('WRT2', 4, 5.0 / 35.0, S_WRAITH_DEATH2_6) { A_NoBlocking(); }
	S_WRAITH_DEATH2_6('WRT2', 5, 5.0 / 35.0, S_WRAITH_DEATH2_7) { A_QueueCorpse(); }
	S_WRAITH_DEATH2_7('WRT2', 6, 5.0 / 35.0, S_WRAITH_DEATH2_8) { }
	S_WRAITH_DEATH2_8('WRT2', 7, -1.0, S_NULL) { }
	S_WRAITH_ICE('WRT2', 8, 5.0 / 35.0, S_WRAITH_ICE2) { A_FreezeDeath(); }
	S_WRAITH_ICE2('WRT2', 8, 1.0 / 35.0, S_WRAITH_ICE2) { A_FreezeDeathChunks(); }
}

defaultproperties
{
	Health = 150;
	GibsHealth = -75;
	Radius = 20.0;
	Height = 55.0;
	Mass = 75.0;
	StepSpeed = 11.0;
	PainChance = 0.09765625;
	MissileDamage = 10;
	bNoGravity = true;
	bDropOff = true;
	bFloat = true;
	bActivateMCross = false;
	IdleState = S_WRAITH_INIT1;
	SeeState = S_WRAITH_CHASE1;
	MeleeState = S_WRAITH_ATK1_1;
	MissileState = S_WRAITH_ATK2_1;
	PainState = S_WRAITH_PAIN1;
	DeathState = S_WRAITH_DEATH1_1;
	GibsDeathState = S_WRAITH_DEATH2_1;
	IceDeathState = S_WRAITH_ICE;
	SightSound = 'WraithSight';
	ActiveSound = 'WraithActive';
	AttackSound = 'WraithAttack';
	PainSound = 'WraithPain';
	DeathSound = 'WraithDeath';
}

}

//**************************************************************************
//
//	WraithBuried
//
//**************************************************************************

class WraithBuried:Wraith
	__mobjinfo__(10011)
{

//==========================================================================
//
//  A_WraithRaiseInit
//
//==========================================================================

void A_WraithRaiseInit(void)
{
	Translucency = 0;
	bNonShootable = false;
	bShootable = true;
	bSolid = true;
	FloorClip = Height;
}

//============================================================================
//
//  RaiseFromFloor
//
//  Raise incrementally from the floor
// 
//============================================================================

bool RaiseFromFloor(void)
{
	bool done;

	done = true;
	// Raise a mobj from the ground
	if (FloorClip > 0.0)
	{
		FloorClip -= 2.0;
		if (FloorClip <= 0.0)
		{
			FloorClip = 0.0;
			done = true;
		}
		else
		{
			done = false;
		}
	}
	return done;	// Reached target height
}

//==========================================================================
//
//  A_WraithRaise
//
//==========================================================================

void A_WraithRaise(void)
{
	if (RaiseFromFloor())
	{
		// Reached it's target height
		SetState(S_WRAITH_CHASE1);
	}

	SpawnDirt(Radius);
}

__states__
{
	S_WRAITH_RAISE1('WRTH', 0, 2.0 / 35.0, S_WRAITH_RAISE2) { A_WraithRaiseInit(); }
	S_WRAITH_RAISE2('WRTH', 0, 2.0 / 35.0, S_WRAITH_RAISE3) { A_WraithRaise(); }
	S_WRAITH_RAISE3('WRTH', 0, 2.0 / 35.0, S_WRAITH_RAISE4) { A_FaceTarget(); }
	S_WRAITH_RAISE4('WRTH', 1, 2.0 / 35.0, S_WRAITH_RAISE5) { A_WraithRaise(); }
	S_WRAITH_RAISE5('WRTH', 1, 2.0 / 35.0, S_WRAITH_RAISE2) { A_WraithRaise(); }
}

defaultproperties
{
	Height = 68.0;
	bSolid = false;
	Translucency = 100;
	bShootable = false;
	IdleState = S_WRAITH_LOOK1;
	SeeState = S_WRAITH_RAISE1;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.27  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.26  2002/06/29 15:54:35  dj_jl
//  Floatized PainChance.
//
//  Revision 1.25  2002/06/22 07:16:02  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.24  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.23  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.22  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.21  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.20  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.19  2002/03/02 17:58:37  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.18  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.17  2002/02/22 18:00:25  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.16  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.15  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.14  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.12  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
