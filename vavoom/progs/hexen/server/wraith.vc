//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//============================================================================
// Wraith Variables
//
//  Special1                Internal index into floatbob
//	Special2
//============================================================================

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  Actor::A_WraithInit
//
//============================================================================

void Actor::A_WraithInit(void)
{
	Origin.z += 48.0;
	Special1 = 0;	// index into floatbob
}

//============================================================================
//
//  Actor::A_WraithRaiseInit
//
//============================================================================

void Actor::A_WraithRaiseInit(void)
{
	Translucency = 0;
	bNonShootable = false;
	bShootable = true;
	bSolid = true;
	FloorClip = Height;
}

//============================================================================
//
//  Actor::A_WraithRaise
//
//============================================================================

void Actor::A_WraithRaise(void)
{
	if (RaiseFromFloor())
	{
		// Reached it's target height
		SetState(S_WRAITH_CHASE1);
	}

	SpawnDirt(Radius);
}

//============================================================================
//
//  Actor::A_WraithLook
//
//============================================================================

void Actor::A_WraithLook(void)
{
//	A_WraithFX4();             // too expensive
	A_Look();
}

//============================================================================
//
//  Actor::A_WraithFX2
//
//  Spawns sparkle tail of missile.
//
//============================================================================

void Actor::A_WraithFX2(void)
{
	mobj_t *mo;
	float angle;
	int i;

	for (i = 0; i < 2; i++)
	{
		mo = P_SpawnMobj(Origin.x, Origin.y, Origin.z, WraithSparkDrip);
		if (mo)
		{
			if (Random() < 0.5)
			{
				angle = AngleMod360(Angles.yaw + Random() * 90.0);
			}
			else
			{
				angle = AngleMod360(Angles.yaw - Random() * 90.0);
			}
			mo->Velocity.z = 0.0;
			mo->Velocity.x = (Random() / 2.0 + 1.0) * cos(angle) * 35.0;
			mo->Velocity.y = (Random() / 2.0 + 1.0) * sin(angle) * 35.0;
			mo->Owner = self;
			mo->FloorClip = 10.0;
		}
	}
}

//============================================================================
//
//  Actor::A_WraithFX3
//
//  Spawn an FX3 around the actor during attacks.
//
//============================================================================

void Actor::A_WraithFX3(void)
{
	mobj_t *mo;
	int numdropped = P_Random() % 15;
	int i;

	for (i = 0; i < numdropped; i++)
	{
		mo = P_SpawnMobj(Origin.x, Origin.y, Origin.z, WraithFX3);
		if (mo)
		{
			mo->Origin.x += (Random() - 0.5) * 8.0;
			mo->Origin.y += (Random() - 0.5) * 8.0;
			mo->Origin.z += Random() * 4.0;
			mo->Owner = self;
		}
	}
}

//============================================================================
//
//  Actor::A_WraithFX4
//
//  Spawn an FX4 during movement.
//
//============================================================================

void Actor::A_WraithFX4(void)
{
	Actor mo;
	int chance = P_Random();
	int spawn4, spawn5;

	if (chance < 10)
	{
		spawn4 = true;
		spawn5 = false;
	}
	else if (chance < 20)
	{
		spawn4 = false;
		spawn5 = true;
	}
	else if (chance < 25)
	{
		spawn4 = true;
		spawn5 = true;
	}
	else
	{
		spawn4 = false;
		spawn5 = false;
	}

	if (spawn4)
	{
		mo = SpawnActor(Origin, WraithFleshDrip1);
		if (mo)
		{
			mo.Origin.x += (Random() - 0.5) * 16.0;
			mo.Origin.y += (Random() - 0.5) * 16.0;
			mo.Origin.z += Random() * 4.0;
			mo.Owner = self;
		}
	}
	if (spawn5)
	{
		mo = SpawnActor(Origin, WraithFleshDrip2);
		if (mo)
		{
			mo.Origin.x += (Random() - 0.5) * 8.0;
			mo.Origin.y += (Random() - 0.5) * 8.0;
			mo.Origin.z += Random() * 4.0;
			mo.Owner = self;
		}
	}
}

//============================================================================
//
//  Actor::A_WraithChase
//
//============================================================================

void Actor::A_WraithChase(void)
{
	int weaveindex = Special1;

	Origin.z += FloatBobOffsets[weaveindex];
	Special1 = (weaveindex + 2) & 63;
//  if (actor->FloorClip > 0)
//  {
//      SetState(S_WRAITH_RAISE2);
//      return;
//  }
	A_Chase();
	A_WraithFX4();
}

//============================================================================
//
//  Actor::A_WraithMelee
//
//============================================================================

void Actor::A_WraithMelee(void)
{
	int amount;

	// Steal health from enemy and give to player
	if (CheckMeleeRange() && (P_Random() < 220))
	{
		amount = HITDICE(2);
		Enemy.Damage(self, self, amount);
		Health += amount;
	}
}

//============================================================================
//
//  Actor::A_WraithMissile
//
//============================================================================

void Actor::A_WraithMissile(void)
{
	Actor mo;

	mo = SpawnMissile(Enemy, WraithMissile);
	if (mo)
	{
		PlaySound('WraithMissileFire', CHAN_WEAPON);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.18  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.17  2002/02/22 18:00:25  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.16  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.15  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.14  2002/01/28 18:50:20  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.12  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
