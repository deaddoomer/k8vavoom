//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//  A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

void A_Look(mobj_t * actor)
{
	mobj_t *targ;

	actor->threshold = 0;	// any shot will wake up
	targ = actor->subsector->sector->soundtarget;

	if (targ && targ->flags & MF_SHOOTABLE)
	{
		actor->target = targ;

		if (actor->flags & MF_AMBUSH)
		{
			if (!P_CheckSight(actor, actor->target))
			{
				if (!P_LookForPlayers(actor, false))
					return;
			}
		}
	}
	else
	{
		if (!P_LookForPlayers(actor, false))
			return;
	}

	// go into chase state
	if (actor->sound_sight)
	{
		if (actor->flags2 & MF2_BOSS)
		{	// Full volume
			StartSound(NULL, actor->sound_sight, CHAN_VOICE);
		}
		else
		{
			StartSound(actor, actor->sound_sight, CHAN_VOICE);
		}
	}

	SetMobjState(actor, actor->seestate);
}

//==========================================================================
//
//  A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void A_Chase(mobj_t * actor)
{
	int delta;

	if (actor->reactiontime)
	{
		actor->reactiontime--;
	}

	// modify target threshold
	if (actor->threshold)
	{
		if (!actor->target || actor->target->health <= 0)
		{
			actor->threshold = 0;
		}
		else
		{
			actor->threshold--;
		}
	}

	if (fastparm)
	{
		// Monsters move faster in nightmare mode
		actor->time *= 0.5;
		if (actor->time < 0.1)
		{
			actor->time = 0.1;
		}
	}

	// turn towards movement direction if not there yet
	if (actor->movedir < 8)
	{
		actor->angles.yaw &= (7 << 29);
		delta = actor->angles.yaw - (actor->movedir << 29);

		if (delta > 0)
		{
			actor->angles.yaw -= ANG90 / 2;
		}
		else if (delta < 0)
		{
			actor->angles.yaw += ANG90 / 2;
		}
	}

	if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))
	{
		// look for a new target
		if (P_LookForPlayers(actor, true))
		{
			return;	// got a new target
		}
		SetMobjState(actor, actor->spawnstate);
		return;
	}

	// do not attack twice in a row
	if (actor->flags & MF_JUSTATTACKED)
	{
		actor->flags &= ~MF_JUSTATTACKED;
		if (!fastparm)
		{
			P_NewChaseDir(actor);
		}
		return;
	}

	// check for melee attack
	if (actor->meleestate && CheckMeleeRange(actor))
	{
		if (actor->sound_attack)
		{
			StartSound(actor, actor->sound_attack, CHAN_WEAPON);
		}
		SetMobjState(actor, actor->meleestate);
		return;
	}

	// check for missile attack
	if (actor->missilestate)
	{
		if (fastparm || !actor->movecount)
		{
			if (CheckMissileRange(actor))
			{
				SetMobjState(actor, actor->missilestate);
				actor->flags |= MF_JUSTATTACKED;
				return;
			}
		}
	}

	// possibly choose another target
	if (netgame && !actor->threshold)
	{
		if (!P_CheckSight(actor, actor->target))
		{
			if (P_LookForPlayers(actor, true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--actor->movecount < 0 || !P_Move(actor))
	{
		P_NewChaseDir(actor);
	}

	// make active sound
	if (actor->sound_active && P_Random() < 3)
	{
		if (actor->type == MT_BISHOP && P_Random() < 128)
		{
			StartSound(actor, actor->sound_sight, CHAN_VOICE);
		}
		else if (actor->type == MT_PIG)
		{
			StartSound(actor, GetSoundID("PigActive1") + (P_Random() & 1),
				CHAN_VOICE);
		}
		else if (actor->flags2 & MF2_BOSS)
		{
			StartSound(NULL, actor->sound_active, CHAN_VOICE);
		}
		else
		{
			StartSound(actor, actor->sound_active, CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  A_FaceTarget
//
//==========================================================================

void A_FaceTarget(mobj_t * actor)
{
	if (!actor->target)
		return;

	actor->flags &= ~MF_AMBUSH;

	actor->angles.yaw = atan2(actor->target->origin.y - actor->origin.y,
		actor->target->origin.x - actor->origin.x);

	if (actor->target->translucency)
	{
		actor->angles.yaw += (P_Random() - P_Random()) << 21;
	}
}

//==========================================================================
//
//  A_Pain
//
//==========================================================================

void A_Pain(mobj_t * actor)
{
	if (actor->sound_pain)
	{
		StartSound(actor, actor->sound_pain, CHAN_VOICE);
	}
}

//============================================================================
//
//  A_FreeTargMobj
//
//============================================================================

void A_FreeTargMobj(mobj_t * mo)
{
	mo->velocity.x = mo->velocity.y = mo->velocity.z = 0.0;
	mo->origin.z = mo->ceilingz + 4.0;
	mo->flags &=
		~(MF_SHOOTABLE | MF_FLOAT | MF_SKULLFLY | MF_SOLID | MF_COUNTKILL);
	mo->flags |= MF_CORPSE | MF_DROPOFF | MF_NOGRAVITY;
	mo->flags2 &= ~(MF2_PASSMOBJ | MF2_LOGRAV);
	mo->translucency = 100;
	mo->player = NULL;
	mo->health = -1000;	// Don't resurrect
}

//============================================================================
//
//  A_Scream
//
//============================================================================

void A_Scream(mobj_t * actor)
{
	StopSound(actor, CHAN_AUTO);
	if (actor->player)
	{
		if (actor->player->morphTics)
		{
			StartSound(actor, actor->sound_death, CHAN_VOICE);
		}
		else
		{
			// Handle the different player death screams
			if (actor->velocity.z <= -39.0 * 35.0)
			{	// Falling splat
				StartSoundName(actor, "PlayerFallingSplat", CHAN_VOICE);
			}
			else if (actor->health > -50)
			{	// Normal death sound
				switch (actor->player->pclass)
				{
				case PCLASS_FIGHTER:
					StartSoundName(actor, "PlayerFighterNormalDeath",
						CHAN_VOICE);
					break;
				case PCLASS_CLERIC:
					StartSoundName(actor, "PlayerClericNormalDeath",
						CHAN_VOICE);
					break;
				case PCLASS_MAGE:
					StartSoundName(actor, "PlayerMageNormalDeath",
						CHAN_VOICE);
					break;
				}
			}
			else if (actor->health > -100)
			{	// Crazy death sound
				switch (actor->player->pclass)
				{
				case PCLASS_FIGHTER:
					StartSoundName(actor, "PlayerFighterCrazyDeath",
						CHAN_VOICE);
					break;
				case PCLASS_CLERIC:
					StartSoundName(actor, "PlayerClericCrazyDeath",
						CHAN_VOICE);
					break;
				case PCLASS_MAGE:
					StartSoundName(actor, "PlayerMageCrazyDeath", CHAN_VOICE);
					break;
				}
			}
			else
			{	// Extreme death sound
				int sound;

				switch (actor->player->pclass)
				{
				case PCLASS_FIGHTER:
					sound = GetSoundID("PlayerFighterExtreme1Death");
					break;
				case PCLASS_CLERIC:
					sound = GetSoundID("PlayerClericExtreme1Death");
					break;
				case PCLASS_MAGE:
					sound = GetSoundID("PlayerMageExtreme1Death");
					break;
				}
				sound += P_Random() % 3;	// Three different extreme deaths
				StartSound(actor, sound, CHAN_VOICE);
			}
		}
	}
	else
	{
		StartSound(actor, actor->sound_death, CHAN_VOICE);
	}
}

//============================================================================
//
//  A_Explode
//
//  Handles a bunch of exploding things.
//
//============================================================================

void A_Explode(mobj_t * actor)
{
	int damage;
	float distance;
	int damageSelf;

	damage = 128;
	distance = 128.0;
	damageSelf = true;
	switch (actor->type)
	{
	case MT_FIREBOMB:	// Time Bombs
		actor->origin.z += 32.0;
		actor->translucency = 0;
		break;
	case MT_MNTRFX2:	// Minotaur floor fire
		damage = 24;
		break;
	case MT_BISHOP:	// Bishop radius death
		damage = 25 + (P_Random() & 15);
		break;
	case MT_HAMMER_MISSILE:	// Fighter Hammer
		damage = 128;
		damageSelf = false;
		break;
	case MT_FSWORD_MISSILE:	// Fighter Runesword
		damage = 64;
		damageSelf = false;
		break;
	case MT_CIRCLEFLAME:	// Cleric Flame secondary flames
		damage = 20;
		damageSelf = false;
		break;
	case MT_SORCBALL1:	// Sorcerer balls
	case MT_SORCBALL2:
	case MT_SORCBALL3:
		distance = 255.0;
		damage = 255;
		actor->args[0] = 1;	// don't play bounce
		break;
	case MT_SORCFX1:	// Sorcerer spell 1
		damage = 30;
		break;
	case MT_SORCFX4:	// Sorcerer spell 4
		damage = 20;
		break;
	case MT_TREEDESTRUCTIBLE:
		damage = 10;
		break;
	case MT_DRAGON_FX2:
		damage = 80;
		damageSelf = false;
		break;
	case MT_MSTAFF_FX:
		damage = 64;
		distance = 192.0;
		damageSelf = false;
		break;
	case MT_MSTAFF_FX2:
		damage = 80;
		distance = 192.0;
		damageSelf = false;
		break;
	case MT_POISONCLOUD:
		damage = 4;
		distance = 40.0;
		break;
	case MT_ZXMAS_TREE:
	case MT_ZSHRUB2:
		damage = 30;
		distance = 64.0;
		break;
	default:
		break;
	}
	P_RadiusAttack(actor, actor->target, damage, distance, damageSelf);
	if (actor->origin.z <= actor->floorz + distance
		&& actor->type != MT_POISONCLOUD)
	{
		P_HitFloor(actor);
	}
}

//============================================================================
//
//  A_NoBlocking
//
//============================================================================

void A_NoBlocking(mobj_t * actor)
{
	actor->flags &= ~MF_SOLID;
}

//============================================================================
//
//  A_AddPlayerCorpse
//
//============================================================================

#define BODYQUESIZE 	32
mobj_t *bodyque[BODYQUESIZE];
int bodyqueslot;

void A_AddPlayerCorpse(mobj_t * actor)
{
	if (bodyqueslot >= BODYQUESIZE)
	{
		// Too many player corpses - remove an old one
		P_RemoveMobj(bodyque[bodyqueslot % BODYQUESIZE]);
	}
	bodyque[bodyqueslot % BODYQUESIZE] = actor;
	bodyqueslot++;
}

//============================================================================
//
//  A_SkullPop
//
//============================================================================

void A_SkullPop(mobj_t * actor)
{
	mobj_t *mo;
	player_t *player;

	if (!actor->player)
	{
		return;
	}
	actor->flags &= ~MF_SOLID;
	mo =
		P_SpawnMobj(actor->origin.x, actor->origin.y, actor->origin.z + 48.0,
		MT_BLOODYSKULL);
	//mo->target = actor;
	mo->velocity.x = (Random() - Random()) * 2.0 * 35.0;
	mo->velocity.y = (Random() - Random()) * 2.0 * 35.0;
	mo->velocity.z = (2.0 + Random() / 4.0) * 35.0;
	// Attach player mobj to bloody skull
	player = actor->player;
	actor->player = NULL;
	actor->special1 = player->pclass;
	mo->player = player;
	mo->health = actor->health;
	mo->angles.yaw = actor->angles.yaw;
	player->mo = mo;
	player->damagecount = 32;
}

//============================================================================
//
// A_FreezeDeath
//
//============================================================================

void A_FreezeDeath(mobj_t * actor)
{
	actor->time = 2.0 + Random() * 8.0 + Random() * 8.0;
	actor->flags |= MF_SOLID | MF_SHOOTABLE | MF_NOBLOOD;
	actor->flags2 |= MF2_PUSHABLE | MF2_TELESTOMP | MF2_PASSMOBJ | MF2_SLIDE;
	actor->height *= 4.0;
	StartSoundName(actor, "FreezeDeath", CHAN_VOICE);

	if (actor->player)
	{
		actor->player->damagecount = 0;
		actor->player->poisoncount = 0;
		actor->player->bonuscount = 0;
	}
	else
	{
		if (actor->flags & MF_COUNTKILL && actor->special)
		{
			// Initiate monster death actions
			ExecuteLineSpecial(actor->special, &actor->args[0], NULL, 0,
				actor);
		}
	}
}

//============================================================================
//
// A_IceSetTics
//
//============================================================================

void A_IceSetTics(mobj_t * actor)
{
	int floor;

	actor->time = 2.0 + Random() * 2.0;
	floor = P_GetThingFloorType(actor);
	if (floor == FLOOR_LAVA)
	{
		actor->time /= 4.0;
	}
	else if (floor == FLOOR_ICE)
	{
		actor->time *= 2.0;
	}
}

//============================================================================
//
//  A_FreezeDeathChunks
//
//============================================================================

void A_FreezeDeathChunks(mobj_t * actor)
{
	int i;
	mobj_t *mo;

	if (actor->velocity.x || actor->velocity.y || actor->velocity.z)
	{
		actor->time = 3.0;
		return;
	}
	StartSoundName(actor, "FreezeShatter", CHAN_VOICE);

	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		mo =
			P_SpawnMobj(actor->origin.x + (Random() -
			   0.5) * 2.0 * actor->radius,
			actor->origin.y + (Random() - 0.5) * 2.0 * actor->radius,
			actor->origin.z + Random() * actor->height, MT_ICECHUNK);
		SetMobjState(mo, mo->spawnstate + (P_Random() % 3));
		if (mo)
		{
			mo->velocity.z =
				(mo->origin.z - actor->origin.z) / actor->height * 4.0 * 35.0;
			mo->velocity.x = (Random() - Random()) * 2.0 * 35.0;
			mo->velocity.y = (Random() - Random()) * 2.0 * 35.0;
			A_IceSetTics(mo);	// set a random tic wait
		}
	}
	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		mo =
			P_SpawnMobj(actor->origin.x + (Random() -
			   0.5) * 2.0 * actor->radius,
			actor->origin.y + (Random() - 0.5) * 2.0 * actor->radius,
			actor->origin.z + Random() * actor->height, MT_ICECHUNK);
		SetMobjState(mo, mo->spawnstate + (P_Random() % 3));
		if (mo)
		{
			mo->velocity.z =
				(mo->origin.z - actor->origin.z) / actor->height * 4.0 * 35.0;
			mo->velocity.x = (Random() - Random()) * 2.0 * 35.0;
			mo->velocity.y = (Random() - Random()) * 2.0 * 35.0;
			A_IceSetTics(mo);	// set a random tic wait
		}
	}
	if (actor->player)
	{	// attach the player's view to a chunk of ice
		mo =
			P_SpawnMobj(actor->origin.x, actor->origin.y,
			actor->origin.z + VIEWHEIGHT, MT_ICECHUNK);
		SetMobjState(mo, S_ICECHUNK_HEAD);
		mo->velocity.x = (Random() - Random()) * 2.0 * 35.0;
		mo->velocity.y = (Random() - Random()) * 2.0 * 35.0;
		mo->velocity.z =
			(mo->origin.z - actor->origin.z) / actor->height * 4.0 * 35.0;
		mo->flags2 |= MF2_ICEDAMAGE;	// used to force blue palette
		mo->flags2 &= ~MF2_FLOORCLIP;
		mo->player = actor->player;
		actor->player = NULL;
		mo->health = actor->health;
		mo->angles.yaw = actor->angles.yaw;
		mo->player->mo = mo;
		mo->angles.pitch = 0;
	}
	P_RemoveMobjFromTIDList(actor);
	SetMobjState(actor, S_FREETARGMOBJ);
	actor->translucency = 100;
}

//============================================================================
//
//  A_CheckBurnGone
//
//============================================================================

void A_CheckBurnGone(mobj_t * actor)
{
	if (actor->special2 == 666)
	{
		SetMobjState(actor, S_PLAY_FDTH20);
	}
}

//============================================================================
//
//  A_CheckSkullFloor
//
//============================================================================

void A_CheckSkullFloor(mobj_t * actor)
{
	if (actor->origin.z <= actor->floorz)
	{
		SetMobjState(actor, S_BLOODYSKULLX1);
		StartSoundName(actor, "Drip", CHAN_VOICE);
	}
}

//============================================================================
//
//  A_CheckSkullDone
//
//============================================================================

void A_CheckSkullDone(mobj_t * actor)
{
	if (actor->special2 == 666)
	{
		SetMobjState(actor, S_BLOODYSKULLX2);
	}
}

//============================================================================
//
// A_SpeedFade
//
//============================================================================

void A_SpeedFade(mobj_t * actor)
{
	actor->translucency = 66;
	actor->sprite = actor->target->sprite;
}

//============================================================================
//
// A_IceCheckHeadDone
//
//============================================================================

void A_IceCheckHeadDone(mobj_t * actor)
{
	if (actor->special2 == 666)
	{
		SetMobjState(actor, S_ICECHUNK_HEAD2);
	}
}

//============================================================================
//
// CorpseQueue Routines
//
//============================================================================

// Corpse queue for monsters - this should be saved out
#define CORPSEQUEUESIZE		64
mobj_t *corpseQueue[CORPSEQUEUESIZE];
int corpseQueueSlot;

//============================================================================
//
//  A_QueueCorpse
//
//  Throw another corpse on the queue.
//
//============================================================================

void A_QueueCorpse(mobj_t * actor)
{
	mobj_t *corpse;

	if (corpseQueueSlot >= CORPSEQUEUESIZE)
	{	// Too many corpses - remove an old one
		corpse = corpseQueue[corpseQueueSlot % CORPSEQUEUESIZE];
		if (corpse)
			P_RemoveMobj(corpse);
	}
	corpseQueue[corpseQueueSlot % CORPSEQUEUESIZE] = actor;
	corpseQueueSlot++;
}

//============================================================================
//
//  A_DeQueueCorpse
//
//  Remove a mobj from the queue (for resurrection)
//
//============================================================================

void A_DeQueueCorpse(mobj_t * actor)
{
	int slot;

	for (slot = 0; slot < CORPSEQUEUESIZE; slot++)
	{
		if (corpseQueue[slot] == actor)
		{
			corpseQueue[slot] = NULL;
			break;
		}
	}
}

//============================================================================
//
//  P_InitCreatureCorpseQueue
//
//============================================================================

void P_InitCreatureCorpseQueue(int corpseScan)
{
	mobj_t *mo;
	int i;

	// Initialize queue
	corpseQueueSlot = 0;
	for (i = 0; i < CORPSEQUEUESIZE; i++)
	{
		corpseQueue[i] = NULL;
	}

	if (!corpseScan)
		return;

	// Search mobj list for corpses and place them in this queue
	mo = NULL;
	while (mo = NextMobj(mo))
	{
		if (!(mo->flags & MF_CORPSE))
			continue;	// Must be a corpse
		if (mo->flags & MF_ICECORPSE)
			continue;	// Not ice corpses
		// Only corpses that call A_QueueCorpse from death routine
		switch (mo->type)
		{
		case MT_CENTAUR:
		case MT_CENTAURLEADER:
		case MT_DEMON:
		case MT_DEMON2:
		case MT_WRAITH:
		case MT_WRAITHB:
		case MT_BISHOP:
		case MT_ETTIN:
		case MT_PIG:
		case MT_CENTAUR_SHIELD:
		case MT_CENTAUR_SWORD:
		case MT_DEMONCHUNK1:
		case MT_DEMONCHUNK2:
		case MT_DEMONCHUNK3:
		case MT_DEMONCHUNK4:
		case MT_DEMONCHUNK5:
		case MT_DEMON2CHUNK1:
		case MT_DEMON2CHUNK2:
		case MT_DEMON2CHUNK3:
		case MT_DEMON2CHUNK4:
		case MT_DEMON2CHUNK5:
		case MT_FIREDEMON_SPLOTCH1:
		case MT_FIREDEMON_SPLOTCH2:
			A_QueueCorpse(mo);	// Add corpse to queue
			break;
		default:
			break;
		}
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
