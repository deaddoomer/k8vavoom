//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//  Actor::A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

void Actor::A_Look(void)
{
	mobj_t *targ;

	threshold = 0;	// any shot will wake up
	targ = subsector->sector->soundtarget;

	if (targ && targ->Flags & MF_SHOOTABLE)
	{
		target = targ;

		if (Flags & MF_AMBUSH)
		{
			if (!P_CheckSight(this, target))
			{
				if (!LookForPlayers(false))
					return;
			}
		}
	}
	else
	{
		if (!LookForPlayers(false))
			return;
	}

	// go into chase state
	if (sound_sight)
	{
		if (Flags2 & MF2_BOSS)
		{
			// Full volume
			StartSound(NULL, sound_sight, CHAN_VOICE);
		}
		else
		{
			StartSound(this, sound_sight, CHAN_VOICE);
		}
	}

	SetState(SeeState);
}

//==========================================================================
//
//  Actor::A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void Actor::A_Chase(void)
{
	float delta;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	// modify target threshold
	if (threshold)
	{
		if (!target || target->Health <= 0)
		{
			threshold = 0;
		}
		else
		{
			threshold--;
		}
	}

	if (fastparm)
	{
		// Monsters move faster in nightmare mode
		time *= 0.5;
		if (time < 0.1)
		{
			time = 0.1;
		}
	}

	// turn towards movement direction if not there yet
	if (movedir < 8)
	{
		angles.yaw = itof(ftoi(angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(angles.yaw - itof(movedir) * 45.0);

		if (delta > 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw + 45.0);
		}
	}

	if (!target || !(target->Flags & MF_SHOOTABLE))
	{
		// look for a new target
		if (LookForPlayers(true))
		{
			return;	// got a new target
		}
		SetState(SpawnState);
		return;
	}

	// do not attack twice in a row
	if (Flags & MF_JUSTATTACKED)
	{
		Flags &= ~MF_JUSTATTACKED;
		if (!fastparm)
		{
			NewChaseDir();
		}
		return;
	}

	// check for melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (sound_attack)
		{
			StartSound(this, sound_attack, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// check for missile attack
	if (MissileState)
	{
		if (fastparm || !movecount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				Flags |= MF_JUSTATTACKED;
				return;
			}
		}
	}

	// possibly choose another target
	if (netgame && !threshold)
	{
		if (!P_CheckSight(this, target))
		{
			if (LookForPlayers(true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--movecount < 0 || !StepMove())
	{
		NewChaseDir();
	}

	// make active sound
	if (sound_active && P_Random() < 3)
	{
		if (Class == Bishop && P_Random() < 128)
		{
			StartSound(this, sound_sight, CHAN_VOICE);
		}
		else if (Class == Pig)
		{
			StartSound(this, GetSoundID('PigActive1') + (P_Random() & 1),
				CHAN_VOICE);
		}
		else if (Flags2 & MF2_BOSS)
		{
			StartSound(NULL, sound_active, CHAN_VOICE);
		}
		else
		{
			StartSound(this, sound_active, CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  Actor::A_FaceTarget
//
//==========================================================================

void Actor::A_FaceTarget(void)
{
	if (!target)
		return;

	Flags &= ~MF_AMBUSH;

	angles.yaw = atan2(target->origin.y - origin.y,
		target->origin.x - origin.x);

	if (target->Translucency)
	{
		angles.yaw = AngleMod360(angles.yaw + (Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//  Actor::A_Pain
//
//==========================================================================

void Actor::A_Pain(void)
{
	if (sound_pain)
	{
		StartSound(this, sound_pain, CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_FreeTargMobj
//
//============================================================================

void Actor::A_FreeTargMobj(void)
{
	velocity = vector(0.0, 0.0, 0.0);
	origin.z = ceilingz + 4.0;
	Flags &=
		~(MF_SHOOTABLE | MF_FLOAT | MF_SKULLFLY | MF_SOLID | MF_COUNTKILL);
	Flags |= MF_CORPSE | MF_DROPOFF | MF_NOGRAVITY;
	Flags2 &= ~MF2_LOGRAV;
	Flags2 |= MF2_NOPASSMOBJ;
	Translucency = 100;
	player = NULL;
	Health = -1000;	// Don't resurrect
}

//============================================================================
//
//  Actor::A_Scream
//
//============================================================================

void Actor::A_Scream(void)
{
	StopSound(this, CHAN_AUTO);
	if (player)
	{
		if (player->morphTics)
		{
			StartSound(this, sound_death, CHAN_VOICE);
		}
		else
		{
			// Handle the different player death screams
			if (velocity.z <= -39.0 * 35.0)
			{
				// Falling splat
				StartSoundName(this, 'PlayerFallingSplat', CHAN_VOICE);
			}
			else if (Health > -50)
			{
				// Normal death sound
				switch (player->pclass)
				{
				case PCLASS_FIGHTER:
					StartSoundName(this, 'PlayerFighterNormalDeath',
						CHAN_VOICE);
					break;
				case PCLASS_CLERIC:
					StartSoundName(this, 'PlayerClericNormalDeath',
						CHAN_VOICE);
					break;
				case PCLASS_MAGE:
					StartSoundName(this, 'PlayerMageNormalDeath',
						CHAN_VOICE);
					break;
				}
			}
			else if (Health > -100)
			{
				// Crazy death sound
				switch (player->pclass)
				{
				case PCLASS_FIGHTER:
					StartSoundName(this, 'PlayerFighterCrazyDeath',
						CHAN_VOICE);
					break;
				case PCLASS_CLERIC:
					StartSoundName(this, 'PlayerClericCrazyDeath',
						CHAN_VOICE);
					break;
				case PCLASS_MAGE:
					StartSoundName(this, 'PlayerMageCrazyDeath', CHAN_VOICE);
					break;
				}
			}
			else
			{	// Extreme death sound
				int sound;

				switch (player->pclass)
				{
				case PCLASS_FIGHTER:
					sound = GetSoundID('PlayerFighterExtreme1Death');
					break;
				case PCLASS_CLERIC:
					sound = GetSoundID('PlayerClericExtreme1Death');
					break;
				case PCLASS_MAGE:
					sound = GetSoundID('PlayerMageExtreme1Death');
					break;
				}
				sound += P_Random() % 3;	// Three different extreme deaths
				StartSound(this, sound, CHAN_VOICE);
			}
		}
	}
	else
	{
		StartSound(this, sound_death, CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_Explode
//
//  Handles a bunch of exploding things.
//
//============================================================================

void Actor::A_Explode(void)
{
	int damage;
	float distance;
	int damageSelf;

	damage = 128;
	distance = 128.0;
	damageSelf = true;
	switch (Class)
	{
	case FireBomb:	// Time Bombs
		origin.z += 32.0;
		Translucency = 0;
		break;
	case MinotaurFloorFire1:	// Minotaur floor fire
		damage = 24;
		break;
	case Bishop:	// Bishop radius death
		damage = 25 + (P_Random() & 15);
		break;
	case HammerMissile:	// Fighter Hammer
		damage = 128;
		damageSelf = false;
		break;
	case FighterSwordMissile:	// Fighter Runesword
		damage = 64;
		damageSelf = false;
		break;
	case CircleFlame:	// Cleric Flame secondary flames
		damage = 20;
		damageSelf = false;
		break;
	case SorcererBall1:	// Sorcerer balls
	case SorcererBall2:
	case SorcererBall3:
		distance = 255.0;
		damage = 255;
		args[0] = 1;	// don't play bounce
		break;
	case SorcererFX1:	// Sorcerer spell 1
		damage = 30;
		break;
	case SorcererFX4:	// Sorcerer spell 4
		damage = 20;
		break;
	case TreeDestructible:
		damage = 10;
		break;
	case DragonFX2:
		damage = 80;
		damageSelf = false;
		break;
	case MageStaffFX:
		damage = 64;
		distance = 192.0;
		damageSelf = false;
		break;
	case MageStaffFX2:
		damage = 80;
		distance = 192.0;
		damageSelf = false;
		break;
	case PoisonCloud:
		damage = 4;
		distance = 40.0;
		break;
	case ZXmasTree:
	case ZShrub2:
		damage = 30;
		distance = 64.0;
		break;
	default:
		break;
	}
	P_RadiusAttack(this, target, damage, distance, damageSelf);
	if (origin.z <= floorz + distance && Class != PoisonCloud)
	{
		P_HitFloor(this);
	}
}

//============================================================================
//
//  Actor::A_NoBlocking
//
//============================================================================

void Actor::A_NoBlocking(void)
{
	Flags &= ~MF_SOLID;
}

//============================================================================
//
//  A_AddPlayerCorpse
//
//============================================================================

#define BODYQUESIZE 	32
mobj_t *bodyque[BODYQUESIZE];
int bodyqueslot;

void Actor::A_AddPlayerCorpse(void)
{
	if (bodyqueslot >= BODYQUESIZE)
	{
		// Too many player corpses - remove an old one
		P_RemoveMobj(bodyque[bodyqueslot % BODYQUESIZE]);
	}
	bodyque[bodyqueslot % BODYQUESIZE] = this;
	bodyqueslot++;
}

//============================================================================
//
//  Actor::A_SkullPop
//
//============================================================================

void Actor::A_SkullPop(void)
{
	mobj_t *mo;

	if (!player)
	{
		return;
	}
	Flags &= ~MF_SOLID;
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 48.0, BloodySkull);
	mo->velocity.x = (Random() - Random()) * 2.0 * 35.0;
	mo->velocity.y = (Random() - Random()) * 2.0 * 35.0;
	mo->velocity.z = (2.0 + Random() / 4.0) * 35.0;
	// Attach player mobj to bloody skull
	mo->player = player;
	player = NULL;
	special1 = mo->player->pclass;
	mo->Health = Health;
	mo->angles.yaw = angles.yaw;
	mo->player->mo = mo;
	mo->player->damagecount = 32;
}

//============================================================================
//
//	Actor::A_FreezeDeath
//
//============================================================================

void Actor::A_FreezeDeath(void)
{
	time = 2.0 + Random() * 8.0 + Random() * 8.0;
	Flags |= MF_SOLID | MF_SHOOTABLE | MF_NOBLOOD;
	Flags2 |= MF2_PUSHABLE | MF2_TELESTOMP | MF2_SLIDE;
	Flags2 &= ~MF2_NOPASSMOBJ;
	Height *= 4.0;
	StartSoundName(this, 'FreezeDeath', CHAN_VOICE);

	if (player)
	{
		player->damagecount = 0;
		player->poisoncount = 0;
		player->bonuscount = 0;
	}
	else
	{
		if (Flags & MF_COUNTKILL && special)
		{
			// Initiate monster death actions
			ExecuteLineSpecial(special, &args[0], NULL, 0, this);
		}
	}
}

//============================================================================
//
//	Actor::A_IceSetTics
//
//============================================================================

void Actor::A_IceSetTics(void)
{
	int floor;

	time = 2.0 + Random() * 2.0;
	floor = P_GetThingFloorType(this);
	if (floor == FLOOR_LAVA)
	{
		time /= 4.0;
	}
	else if (floor == FLOOR_ICE)
	{
		time *= 2.0;
	}
}

//============================================================================
//
//  Actor::A_FreezeDeathChunks
//
//============================================================================

void Actor::A_FreezeDeathChunks(void)
{
	int i;
	mobj_t *mo;

	if (velocity.x || velocity.y || velocity.z)
	{
		time = 3.0;
		return;
	}
	StartSoundName(this, 'FreezeShatter', CHAN_VOICE);

	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		mo = P_SpawnMobj(origin.x + (Random() - 0.5) * 2.0 * Radius,
			origin.y + (Random() - 0.5) * 2.0 * Radius,
			origin.z + Random() * Height, IceChunk);
		mo->SetState(mo->SpawnState + (P_Random() % 3));
		if (mo)
		{
			mo->velocity.z = (mo->origin.z - origin.z) / Height * 4.0 * 35.0;
			mo->velocity.x = (Random() - Random()) * 2.0 * 35.0;
			mo->velocity.y = (Random() - Random()) * 2.0 * 35.0;
			Actor(*mo).A_IceSetTics();	// set a random tic wait
		}
	}
	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		mo = P_SpawnMobj(origin.x + (Random() - 0.5) * 2.0 * Radius,
			origin.y + (Random() - 0.5) * 2.0 * Radius,
			origin.z + Random() * Height, IceChunk);
		mo->SetState(mo->SpawnState + (P_Random() % 3));
		if (mo)
		{
			mo->velocity.z = (mo->origin.z - origin.z) / Height * 4.0 * 35.0;
			mo->velocity.x = (Random() - Random()) * 2.0 * 35.0;
			mo->velocity.y = (Random() - Random()) * 2.0 * 35.0;
			Actor(*mo).A_IceSetTics();	// set a random tic wait
		}
	}
	if (player)
	{
		// attach the player's view to a chunk of ice
		mo = P_SpawnMobj(origin.x, origin.y, origin.z + VIEWHEIGHT, IceChunk);
		mo->SetState(S_ICECHUNK_HEAD);
		mo->velocity.x = (Random() - Random()) * 2.0 * 35.0;
		mo->velocity.y = (Random() - Random()) * 2.0 * 35.0;
		mo->velocity.z = (mo->origin.z - origin.z) / Height * 4.0 * 35.0;
		mo->Flags2 |= MF2_ICEDAMAGE;	// used to force blue palette
		mo->Flags2 &= ~MF2_FLOORCLIP;
		mo->player = player;
		player = NULL;
		mo->Health = Health;
		mo->angles.yaw = angles.yaw;
		mo->player->mo = mo;
		mo->angles.pitch = 0.0;
	}
	P_RemoveMobjFromTIDList(this);
	SetState(S_FREETARGMOBJ);
	Translucency = 100;
}

//============================================================================
//
//  Actor::A_CheckBurnGone
//
//============================================================================

void Actor::A_CheckBurnGone(void)
{
	if (special2 == 666)
	{
		SetState(S_PLAY_FDTH20);
	}
}

//============================================================================
//
//  Actor::A_CheckSkullFloor
//
//============================================================================

void Actor::A_CheckSkullFloor(void)
{
	if (origin.z <= floorz)
	{
		SetState(S_BLOODYSKULLX1);
		StartSoundName(this, 'Drip', CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_CheckSkullDone
//
//============================================================================

void Actor::A_CheckSkullDone(void)
{
	if (special2 == 666)
	{
		SetState(S_BLOODYSKULLX2);
	}
}

//============================================================================
//
//	Actor::A_SpeedFade
//
//============================================================================

void Actor::A_SpeedFade(void)
{
	Translucency = 66;
	sprite = target->sprite;
}

//============================================================================
//
//	Actor::A_IceCheckHeadDone
//
//============================================================================

void Actor::A_IceCheckHeadDone(void)
{
	if (special2 == 666)
	{
		SetState(S_ICECHUNK_HEAD2);
	}
}

//============================================================================
//
// CorpseQueue Routines
//
//============================================================================

// Corpse queue for monsters - this should be saved out
#define CORPSEQUEUESIZE		64
mobj_t *corpseQueue[CORPSEQUEUESIZE];
int corpseQueueSlot;

//============================================================================
//
//  Actor::A_QueueCorpse
//
//  Throw another corpse on the queue.
//
//============================================================================

void Actor::A_QueueCorpse(void)
{
	mobj_t *corpse;

	if (corpseQueueSlot >= CORPSEQUEUESIZE)
	{
		// Too many corpses - remove an old one
		corpse = corpseQueue[corpseQueueSlot % CORPSEQUEUESIZE];
		if (corpse)
			P_RemoveMobj(corpse);
	}
	corpseQueue[corpseQueueSlot % CORPSEQUEUESIZE] = this;
	corpseQueueSlot++;
}

//============================================================================
//
//  Actor::A_DeQueueCorpse
//
//  Remove a mobj from the queue (for resurrection)
//
//============================================================================

void Actor::A_DeQueueCorpse(void)
{
	int slot;

	for (slot = 0; slot < CORPSEQUEUESIZE; slot++)
	{
		if (corpseQueue[slot] == this)
		{
			corpseQueue[slot] = NULL;
			break;
		}
	}
}

//============================================================================
//
//  P_InitCreatureCorpseQueue
//
//============================================================================

void P_InitCreatureCorpseQueue(int corpseScan)
{
	mobj_t *mo;
	int i;

	// Initialize queue
	corpseQueueSlot = 0;
	for (i = 0; i < CORPSEQUEUESIZE; i++)
	{
		corpseQueue[i] = NULL;
	}

	if (!corpseScan)
		return;

	// Search mobj list for corpses and place them in this queue
	mo = NULL;
	while (mo = NextMobj(mo))
	{
		if (!(mo->Flags & MF_CORPSE))
			continue;	// Must be a corpse
		if (mo->Flags & MF_ICECORPSE)
			continue;	// Not ice corpses
		// Only corpses that call A_QueueCorpse from death routine
		switch (mo->Class)
		{
		case Centaur:
		case CentaurLeader:
		case Demon:
		case Demon2:
		case Wraith:
		case WraithBuried:
		case Bishop:
		case Ettin:
		case Pig:
		case CentaurShield:
		case CentaurSword:
		case DemonChunk1:
		case DemonChunk2:
		case DemonChunk3:
		case DemonChunk4:
		case DemonChunk5:
		case Demon2Chunk1:
		case Demon2Chunk2:
		case Demon2Chunk3:
		case Demon2Chunk4:
		case Demon2Chunk5:
		case FireDemonSplotch1:
		case FireDemonSplotch2:
			mo->A_QueueCorpse();	// Add corpse to queue
			break;
		default:
			break;
		}
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.15  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.14  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.10  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
