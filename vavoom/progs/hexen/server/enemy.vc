//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//	Pawn::Activate
//
//==========================================================================

boolean Pawn::Activate(void)
{
	// Monster
	if (bDormant)
	{
		bDormant = false;
		StateTime = 0.1;
		return true;
	}
	return false;
}

//==========================================================================
//
//	Pawn::Deactivate
//
//==========================================================================

boolean Pawn::Deactivate(void)
{
	// Monster
	if (!bDormant)
	{
		bDormant = true;
		StateTime = -1.0;
		return true;
	}
	return false;
}

//==========================================================================
//
//  Pawn::A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

void Pawn::A_Look(void)
{
	Actor targ;

	Threshold = 0;	// any shot will wake up
	targ = Actor(Sector->SoundTarget);

	if (targ && targ.bShootable)
	{
		Target = targ;

		if (bAmbush)
		{
			if (!P_CheckSight(self, Target))
			{
				if (!LookForPlayers(false))
					return;
			}
		}
	}
	else
	{
		if (!LookForPlayers(false))
			return;
	}

	// go into chase state
	if (SightSound)
	{
		if (bBoss)
		{
			// Full volume
			PlayFullVolumeSound(SightSound, CHAN_VOICE);
		}
		else
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
	}

	SetState(SeeState);
}

//==========================================================================
//
//  Pawn::A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void Pawn::A_Chase(void)
{
	float delta;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	// modify target threshold
	if (Threshold)
	{
		if (!Target || Target.Health <= 0)
		{
			Threshold = 0;
		}
		else
		{
			Threshold--;
		}
	}

	if (fastparm)
	{
		// Monsters move faster in nightmare mode
		StateTime *= 0.5;
		if (StateTime < 0.1)
		{
			StateTime = 0.1;
		}
	}

	// turn towards movement direction if not there yet
	if (MoveDir < 8)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);

		if (delta > 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw + 45.0);
		}
	}

	if (!Target || !Target.bShootable)
	{
		// look for a new target
		if (LookForPlayers(true))
		{
			return;	// got a new target
		}
		SetState(SpawnState);
		return;
	}

	// do not attack twice in a row
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (!fastparm)
		{
			NewChaseDir();
		}
		return;
	}

	// check for melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// check for missile attack
	if (MissileState)
	{
		if (fastparm || !MoveCount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				bJustAttacked = true;
				return;
			}
		}
	}

	// possibly choose another target
	if (netgame && !Threshold)
	{
		if (!P_CheckSight(self, Target))
		{
			if (LookForPlayers(true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--MoveCount < 0 || !StepMove())
	{
		NewChaseDir();
	}

	// make active sound
	if (ActiveSound && P_Random() < 3)
	{
		if (Class == Bishop && P_Random() < 128)
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
		else if (Class == Pig)
		{
			PlaySound((P_Random() & 1) ? 'PigActive2' :
				'PigActive1', CHAN_VOICE);
		}
		else if (bBoss)
		{
			PlayFullVolumeSound(ActiveSound, CHAN_VOICE);
		}
		else
		{
			PlaySound(ActiveSound, CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  Pawn::A_FaceTarget
//
//==========================================================================

void Pawn::A_FaceTarget(void)
{
	if (!Target)
		return;

	bAmbush = false;

	Angles.yaw = atan2(Target.Origin.y - Origin.y,
		Target.Origin.x - Origin.x);

	if (Target.Translucency)
	{
		Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//  Actor::A_Pain
//
//==========================================================================

void Actor::A_Pain(void)
{
	if (PainSound)
	{
		PlaySound(PainSound, CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_FreeTargMobj
//
//============================================================================

void Actor::A_FreeTargMobj(void)
{
	Velocity = vector(0.0, 0.0, 0.0);
	Origin.z = CeilingZ + 4.0;
	bSolid = false;
	bShootable = false;
	bFloat = false;
	bCountKill = false;
	bSkullFly = false;
	bDropOff = true;
	bNoGravity = true;
	bCorpse = true;
	bNoPassMobj = true;
	Translucency = 100;
	Player = NULL;
	bIsPlayer = false;
	Health = -1000;	// Don't resurrect
}

//============================================================================
//
//  Actor::A_Scream
//
//============================================================================

void Actor::A_Scream(void)
{
	StopSound(self, CHAN_AUTO);
	if (bIsPlayer)
	{
		if (Player->MorphTics)
		{
			PlaySound(DeathSound, CHAN_VOICE);
		}
		else
		{
			// Handle the different player death screams
			if (Velocity.z <= -39.0 * 35.0)
			{
				// Falling splat
				PlaySound('PlayerFallingSplat', CHAN_VOICE);
			}
			else if (Health > -50)
			{
				// Normal death sound
				switch (Player->PClass)
				{
				case PCLASS_FIGHTER:
					PlaySound('PlayerFighterNormalDeath',
						CHAN_VOICE);
					break;
				case PCLASS_CLERIC:
					PlaySound('PlayerClericNormalDeath',
						CHAN_VOICE);
					break;
				case PCLASS_MAGE:
					PlaySound('PlayerMageNormalDeath',
						CHAN_VOICE);
					break;
				}
			}
			else if (Health > -100)
			{
				// Crazy death sound
				switch (Player->PClass)
				{
				case PCLASS_FIGHTER:
					PlaySound('PlayerFighterCrazyDeath',
						CHAN_VOICE);
					break;
				case PCLASS_CLERIC:
					PlaySound('PlayerClericCrazyDeath',
						CHAN_VOICE);
					break;
				case PCLASS_MAGE:
					PlaySound('PlayerMageCrazyDeath', CHAN_VOICE);
					break;
				}
			}
			else
			{	// Extreme death sound
				name sound;

				switch (Player->PClass)
				{
				case PCLASS_FIGHTER:
					switch (P_Random() % 3)
					{
					case 0:
						sound = 'PlayerFighterExtreme1Death';
						break;
					case 1:
						sound = 'PlayerFighterExtreme2Death';
						break;
					case 2:
						sound = 'PlayerFighterExtreme3Death';
						break;
					}
					break;
				case PCLASS_CLERIC:
					switch (P_Random() % 3)
					{
					case 0:
						sound = 'PlayerClericExtreme1Death';
						break;
					case 1:
						sound = 'PlayerClericExtreme2Death';
						break;
					case 2:
						sound = 'PlayerClericExtreme3Death';
						break;
					}
					break;
				case PCLASS_MAGE:
					switch (P_Random() % 3)
					{
					case 0:
						sound = 'PlayerMageExtreme1Death';
						break;
					case 1:
						sound = 'PlayerMageExtreme2Death';
						break;
					case 2:
						sound = 'PlayerMageExtreme3Death';
						break;
					}
					break;
				}
				// Three different extreme deaths
				PlaySound(sound, CHAN_VOICE);
			}
		}
	}
	else
	{
		PlaySound(DeathSound, CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_Explode
//
//  Handles a bunch of exploding things.
//
//============================================================================

void Actor::A_Explode(void)
{
	int damage;
	float distance;
	int damageSelf;

	damage = 128;
	distance = 128.0;
	damageSelf = true;
	switch (Class)
	{
	case FireBomb:	// Time Bombs
		Origin.z += 32.0;
		Translucency = 0;
		break;
	case MinotaurFloorFire1:	// Minotaur floor fire
		damage = 24;
		break;
	case Bishop:	// Bishop radius death
		damage = 25 + (P_Random() & 15);
		break;
	case HammerMissile:	// Fighter Hammer
		damage = 128;
		damageSelf = false;
		break;
	case FighterSwordMissile:	// Fighter Runesword
		damage = 64;
		damageSelf = false;
		break;
	case CircleFlame:	// Cleric Flame secondary flames
		damage = 20;
		damageSelf = false;
		break;
	case SorcererBall1:	// Sorcerer balls
	case SorcererBall2:
	case SorcererBall3:
		distance = 255.0;
		damage = 255;
		Args[0] = 1;	// don't play bounce
		break;
	case SorcererFX1:	// Sorcerer spell 1
		damage = 30;
		break;
	case SorcererFX4:	// Sorcerer spell 4
		damage = 20;
		break;
	case TreeDestructible:
		damage = 10;
		break;
	case DragonFX2:
		damage = 80;
		damageSelf = false;
		break;
	case MageStaffFX:
		damage = 64;
		distance = 192.0;
		damageSelf = false;
		break;
	case MageStaffFX2:
		damage = 80;
		distance = 192.0;
		damageSelf = false;
		break;
	case PoisonCloud:
		damage = 4;
		distance = 40.0;
		break;
	case ZXmasTree:
	case ZShrub2:
		damage = 30;
		distance = 64.0;
		break;
	default:
		break;
	}
	P_RadiusAttack(this, &Owner, damage, distance, damageSelf);
	if (Origin.z <= FloorZ + distance && Class != PoisonCloud)
	{
		HitFloorType();
	}
}

//============================================================================
//
//  Actor::A_NoBlocking
//
//============================================================================

void Actor::A_NoBlocking(void)
{
	bSolid = false;
}

//============================================================================
//
//  A_AddPlayerCorpse
//
//============================================================================

#define BODYQUESIZE 	32
mobj_t *bodyque[BODYQUESIZE];
int bodyqueslot;

void Actor::A_AddPlayerCorpse(void)
{
	if (bodyqueslot >= BODYQUESIZE)
	{
		// Too many player corpses - remove an old one
		P_RemoveMobj(bodyque[bodyqueslot % BODYQUESIZE]);
	}
	bodyque[bodyqueslot % BODYQUESIZE] = this;
	bodyqueslot++;
}

//============================================================================
//
//	Pawn::A_FreezeDeath
//
//============================================================================

void Pawn::A_FreezeDeath(void)
{
	StateTime = 2.0 + Random() * 8.0 + Random() * 8.0;
	bSolid = true;
	bShootable = true;
	bNoBlood = true;
	bPushable = true;
	bTelestomp = true;
	bSlide = true;
	bNoPassMobj = false;
	Height *= 4.0;
	PlaySound('FreezeDeath', CHAN_VOICE);

	if (bIsPlayer)
	{
		Player->DamageCount = 0;
		Player->PoisonCount = 0;
		Player->BonusCount = 0;
	}
	else
	{
		if (bCountKill && Special)
		{
			// Initiate monster death actions
			ExecuteLineSpecial(Special, &Args[0], NULL, 0, this);
		}
	}
}

//============================================================================
//
//	Actor::A_IceSetTics
//
//============================================================================

void Actor::A_IceSetTics(void)
{
	int floor;

	StateTime = 2.0 + Random() * 2.0;
	floor = GetFloorType();
	if (floor == FLOOR_LAVA)
	{
		StateTime /= 4.0;
	}
	else if (floor == FLOOR_ICE)
	{
		StateTime *= 2.0;
	}
}

//============================================================================
//
//  Pawn::A_FreezeDeathChunks
//
//============================================================================

void Pawn::A_FreezeDeathChunks(void)
{
	int i;
	mobj_t *mo;

	if (Velocity.x || Velocity.y || Velocity.z)
	{
		StateTime = 3.0;
		return;
	}
	PlaySound('FreezeShatter', CHAN_VOICE);

	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		mo = P_SpawnMobj(Origin.x + (Random() - 0.5) * 2.0 * Radius,
			Origin.y + (Random() - 0.5) * 2.0 * Radius,
			Origin.z + Random() * Height, IceChunk);
		mo->SetState(mo->SpawnState + (P_Random() % 3));
		if (mo)
		{
			mo->Velocity.z = (mo->Origin.z - Origin.z) / Height * 4.0 * 35.0;
			mo->Velocity.x = (Random() - Random()) * 2.0 * 35.0;
			mo->Velocity.y = (Random() - Random()) * 2.0 * 35.0;
			Actor(*mo).A_IceSetTics();	// set a random tic wait
		}
	}
	for (i = 12 + (P_Random() & 15); i >= 0; i--)
	{
		mo = P_SpawnMobj(Origin.x + (Random() - 0.5) * 2.0 * Radius,
			Origin.y + (Random() - 0.5) * 2.0 * Radius,
			Origin.z + Random() * Height, IceChunk);
		mo->SetState(mo->SpawnState + (P_Random() % 3));
		if (mo)
		{
			mo->Velocity.z = (mo->Origin.z - Origin.z) / Height * 4.0 * 35.0;
			mo->Velocity.x = (Random() - Random()) * 2.0 * 35.0;
			mo->Velocity.y = (Random() - Random()) * 2.0 * 35.0;
			Actor(*mo).A_IceSetTics();	// set a random tic wait
		}
	}
	if (bIsPlayer)
	{
		// attach the player's view to a chunk of ice
		mo = P_SpawnMobj(Origin.x, Origin.y, Origin.z + VIEWHEIGHT,
			IceChunkHead);
		mo->Velocity.x = (Random() - Random()) * 2.0 * 35.0;
		mo->Velocity.y = (Random() - Random()) * 2.0 * 35.0;
		mo->Velocity.z = (mo->Origin.z - Origin.z) / Height * 4.0 * 35.0;
		mo->Player = Player;
		mo->bIsPlayer = true;
		Player = NULL;
		bIsPlayer = false;
		mo->Health = Health;
		mo->Angles.yaw = Angles.yaw;
		mo->Player->mo = mo;
		mo->Angles.pitch = 0.0;
	}
	P_RemoveMobjFromTIDList(this);
	SetState(S_FREETARGMOBJ);
	Translucency = 100;
}

//============================================================================
//
//  Actor::A_CheckBurnGone
//
//============================================================================

void Actor::A_CheckBurnGone(void)
{
	if (_Special2 == 666)
	{
		SetState(S_PLAY_FDTH20);
	}
}

//============================================================================
//
//	Actor::A_SpeedFade
//
//============================================================================

void Actor::A_SpeedFade(void)
{
	Translucency = 66;
	SpriteIndex = Owner.SpriteIndex;
}

//============================================================================
//
// CorpseQueue Routines
//
//============================================================================

// Corpse queue for monsters - this should be saved out
#define CORPSEQUEUESIZE		64
mobj_t *corpseQueue[CORPSEQUEUESIZE];
int corpseQueueSlot;

//============================================================================
//
//  Actor::A_QueueCorpse
//
//  Throw another corpse on the queue.
//
//============================================================================

void Actor::A_QueueCorpse(void)
{
	mobj_t *corpse;

	if (corpseQueueSlot >= CORPSEQUEUESIZE)
	{
		// Too many corpses - remove an old one
		corpse = corpseQueue[corpseQueueSlot % CORPSEQUEUESIZE];
		if (corpse)
			P_RemoveMobj(corpse);
	}
	corpseQueue[corpseQueueSlot % CORPSEQUEUESIZE] = this;
	corpseQueueSlot++;
}

//============================================================================
//
//  Actor::A_DeQueueCorpse
//
//  Remove a mobj from the queue (for resurrection)
//
//============================================================================

void Actor::A_DeQueueCorpse(void)
{
	int slot;

	for (slot = 0; slot < CORPSEQUEUESIZE; slot++)
	{
		if (corpseQueue[slot] == this)
		{
			corpseQueue[slot] = NULL;
			break;
		}
	}
}

//============================================================================
//
//  P_InitCreatureCorpseQueue
//
//============================================================================

void P_InitCreatureCorpseQueue(int corpseScan)
{
	Actor mo;
	int i;

	// Initialize queue
	corpseQueueSlot = 0;
	for (i = 0; i < CORPSEQUEUESIZE; i++)
	{
		corpseQueue[i] = NULL;
	}

	if (!corpseScan)
		return;

	// Search mobj list for corpses and place them in this queue
	FOREACH(Actor, mo)
	{
		if (!mo.bCorpse)
			continue;	// Must be a corpse
		if (mo.bIceCorpse)
			continue;	// Not ice corpses
		// Only corpses that call A_QueueCorpse from death routine
		switch (mo.Class)
		{
		case Centaur:
		case CentaurLeader:
		case Demon:
		case Demon2:
		case Wraith:
		case WraithBuried:
		case Bishop:
		case Ettin:
		case Pig:
		case CentaurShield:
		case CentaurSword:
		case DemonChunk1:
		case DemonChunk2:
		case DemonChunk3:
		case DemonChunk4:
		case DemonChunk5:
		case Demon2Chunk1:
		case Demon2Chunk2:
		case Demon2Chunk3:
		case Demon2Chunk4:
		case Demon2Chunk5:
		case FireDemonSplotch1:
		case FireDemonSplotch2:
			mo.A_QueueCorpse();	// Add corpse to queue
			break;
		default:
			break;
		}
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.24  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.23  2002/03/02 18:00:15  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.22  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.21  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.19  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.16  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.15  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.14  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.10  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
