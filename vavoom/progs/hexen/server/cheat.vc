//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God(void)
{
	players[0].Cheats ^= CF_GODMODE;
	if (players[0].Cheats & CF_GODMODE)
	{
		cprint(&players[0], "GOD MODE ON\n");
	}
	else
	{
		cprint(&players[0], "GOD MODE OFF\n");
	}
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip(void)
{
	players[0].Cheats ^= CF_NOCLIP;
	if (players[0].Cheats & CF_NOCLIP)
	{
		cprint(&players[0], "NO CLIPPING ON\n");
	}
	else
	{
		cprint(&players[0], "NO CLIPPING OFF\n");
	}
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme(void)
{
	if (Cmd_CheckParm("weapons"))
	{
		int i;

		for (i = 0; i < NUMARMOR; i++)
		{
			players[0].ArmorPoints[i] =
				ArmorIncrement[players[0].PClass * NUMARMOR + i];
		}
		for (i = 0; i < NUMWEAPONS; i++)
		{
			players[0].WeaponOwned[i] = true;
		}
		for (i = 0; i < NUMMANA; i++)
		{
			players[0].Mana[i] = MAX_MANA;
		}
		players[0].Pieces = 7;
		cprint(&players[0], "ALL WEAPONS\n");
	}
	if (Cmd_CheckParm("health"))
	{
		if (players[0].MorphTics)
		{
			players[0].mo->Health = MAXMORPHHEALTH;
			players[0].Health = players[0].mo->Health;
		}
		else
		{
			players[0].mo->Health = MAXHEALTH;
			players[0].Health = players[0].mo->Health;
		}
		cprint(&players[0], "FULL HEALTH\n");
	}
	if (Cmd_CheckParm("keys"))
	{
		players[0].Keys = 2047;
		cprint(&players[0], "ALL KEYS\n");
	}
	if (Cmd_CheckParm("artifacts"))
	{
		int i;
		int j;

		for (i = arti_none + 1; i < arti_firstpuzzitem; i++)
		{
			for (j = 0; j < 25; j++)
			{
				players[0].mo->GiveArtifact(i);
			}
		}
		cprint(&players[0], "ALL ARTIFACTS\n");
	}
	if (Cmd_CheckParm("puzzles"))
	{
		int i;

		for (i = arti_firstpuzzitem; i < NUMARTIFACTS; i++)
		{
			players[0].mo->GiveArtifact(i);
		}
		cprint(&players[0], "ALL ARTIFACTS\n");
	}
}

//==========================================================================
//
//  P_Massacre
//
//  Kills all monsters.
//
//==========================================================================

int P_Massacre(void)
{
	int count;
	Actor mo;

	count = 0;
	FOREACH(Actor, mo)
	{
		if (mo.bCountKill && mo.Health > 0)
		{
			mo.bNonShootable = false;
			mo.bInvulnerable = false;
			mo.bShootable = true;
			mo.Damage(none, none, 10000);
			count++;
		}
	}
	return count;
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll(void)
{
	cprint(&players[0], "%d MONSTERS KILLED\n", P_Massacre());
}

//==========================================================================
//
//  Cheat_Morph
//
//==========================================================================

void Cheat_Morph(void)
{
	if (players[0].MorphTics)
	{
		UndoPlayerMorph(&players[0]);
	}
	else
	{
		P_MorphPlayer(&players[0]);
	}
	cprint(&players[0], "SQUEAL!!\n");
}

//==========================================================================
//
//  Cheat_NoWeapons
//
//==========================================================================

void Cheat_NoWeapons(void)
{
	int i;

	if (players[0].MorphTics)
	{
		return;
	}
	for (i = 1; i < 4; i++)
	{
		players[0].WeaponOwned[i] = false;
	}
	players[0].PendingWeapon = WP_FIRST;
	players[0].Pieces = 0;
	cprint(&players[0], "CHEATER - YOU DON'T DESERVE WEAPONS\n");
}

//==========================================================================
//
//  Cheat_Class
//
//==========================================================================

void Cheat_Class(void)
{
	int i;
	int pclass;

	if (players[0].MorphTics)
	{	// don't change class if the player is morphed
		return;
	}
	if (Cmd_CheckParm("fighter"))
		pclass = PCLASS_FIGHTER;
	else if (Cmd_CheckParm("cleric"))
		pclass = PCLASS_CLERIC;
	else if (Cmd_CheckParm("mage"))
		pclass = PCLASS_MAGE;
	else
	{
		cprint(&players[0], "INVALID PLAYER CLASS\n");
		return;
	}
	players[0].PClass = pclass;
	for (i = 0; i < NUMARMOR; i++)
	{
		players[0].ArmorPoints[i] = 0.0;
	}
	players[0].BaseClass = pclass;
	PostMorphWeapon(&players[0], WP_FIRST);
	SB_Start();
}

//**************************************************************************
//
//  $Log$
//  Revision 1.12  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.11  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.10  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.9  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.8  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.7  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.6  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
