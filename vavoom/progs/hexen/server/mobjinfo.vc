//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	$Id$
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**	$Log$
//**	Revision 1.2  2001/07/27 14:27:52  dj_jl
//**	Update with Id-s and Log-s, some fixes
//**
//**************************************************************************
//**
//**	Mobj info table
//**
//**	Generated by makeinfo.
//**
//**************************************************************************

void generic_mobj_start(mobj_t *self, mthing_t *mthing);

//==========================================================================
//
//	misc_MAPSPOT
//
//==========================================================================

void misc_MAPSPOT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_MAPSPOT;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MAPSPOTGRAVITY
//
//==========================================================================

void misc_MAPSPOTGRAVITY(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_MAPSPOT;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREBALL1
//
//==========================================================================

void misc_FIREBALL1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 70.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 4;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE;
	self->spawnstate = S_FIREBALL1_1;
	self->deathstate = S_FIREBALL1_X1;
	self->sound_death = GetSoundID("Fireball");
	self->effects = EF_DL_RED;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARROW
//
//==========================================================================

void misc_ARROW(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 4.0;
	self->mass = 100.0;
	self->speed = 210.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 4;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_ARROW_1;
	self->deathstate = S_ARROW_X1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DART
//
//==========================================================================

void misc_DART(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 4.0;
	self->mass = 100.0;
	self->speed = 210.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 2;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_DART_1;
	self->deathstate = S_DART_X1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_POISONDART
//
//==========================================================================

void misc_POISONDART(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 4.0;
	self->mass = 100.0;
	self->speed = 210.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 2;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_POISONDART_1;
	self->deathstate = S_POISONDART_X1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_RIPPERBALL
//
//==========================================================================

void misc_RIPPERBALL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 210.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 2;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_RIP;
	self->spawnstate = S_RIPPERBALL_1;
	self->deathstate = S_RIPPERBALL_X1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PROJECTILE_BLADE
//
//==========================================================================

void misc_PROJECTILE_BLADE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 6.0;
	self->mass = 100.0;
	self->speed = 210.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 3;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_PRJ_BLADE1;
	self->deathstate = S_PRJ_BLADE_X1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ICESHARD
//
//==========================================================================

void misc_ICESHARD(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 13.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 1;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_ICEDAMAGE;
	self->spawnstate = S_ICESHARD1;
	self->deathstate = S_SHARDFXE1_1;
	self->sound_death = GetSoundID("MageShardsExplode");
	self->effects = EF_DL_BLUE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FLAME_SMALL_TEMP
//
//==========================================================================

void misc_FLAME_SMALL_TEMP(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FLAME_TSMALL1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FLAME_LARGE_TEMP
//
//==========================================================================

void misc_FLAME_LARGE_TEMP(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FLAME_TLARGE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FLAME_SMALL
//
//==========================================================================

void misc_FLAME_SMALL(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FLAME_SMALL1;
	generic_mobj_start(self, mthing);
	if (self->tid)
		AddStaticLight(self->origin, 64.0);
}

//==========================================================================
//
//	misc_FLAME_LARGE
//
//==========================================================================

void misc_FLAME_LARGE(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FLAME_LARGE1;
	generic_mobj_start(self, mthing);
	if (!self->tid)
		AddStaticLight(self->origin, 128.0);
}

//==========================================================================
//
//	misc_HEALINGBOTTLE
//
//==========================================================================

void misc_HEALINGBOTTLE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ITEM_PTN1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HEALTHFLASK
//
//==========================================================================

void misc_HEALTHFLASK(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_PTN2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIFLY
//
//==========================================================================

void misc_ARTIFLY(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_SOAR1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIINVULNERABILITY
//
//==========================================================================

void misc_ARTIINVULNERABILITY(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_INVU1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SUMMONMAULATOR
//
//==========================================================================

void misc_SUMMONMAULATOR(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_SUMMON;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SUMMON_FX
//
//==========================================================================

void misc_SUMMON_FX(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 700.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_SUMMON_FX1_1;
	self->deathstate = S_SUMMON_FX2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_THRUSTFLOOR_UP
//
//==========================================================================

void misc_THRUSTFLOOR_UP(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 128.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_THRUSTINIT2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_THRUSTFLOOR_DOWN
//
//==========================================================================

void misc_THRUSTFLOOR_DOWN(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 128.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_THRUSTINIT1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TELEPORTOTHER
//
//==========================================================================

void misc_TELEPORTOTHER(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_TELOTHER1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TELOTHER_FX1
//
//==========================================================================

void misc_TELOTHER_FX1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 700.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 10001;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_TELO_FX1;
	self->deathstate = S_TELO_FX9;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TELOTHER_FX2
//
//==========================================================================

void misc_TELOTHER_FX2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 560.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 10001;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_TELO_FX2_1;
	self->deathstate = S_TELO_FX9;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TELOTHER_FX3
//
//==========================================================================

void misc_TELOTHER_FX3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 560.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 10001;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_TELO_FX3_1;
	self->deathstate = S_TELO_FX9;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TELOTHER_FX4
//
//==========================================================================

void misc_TELOTHER_FX4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 560.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 10001;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_TELO_FX4_1;
	self->deathstate = S_TELO_FX9;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TELOTHER_FX5
//
//==========================================================================

void misc_TELOTHER_FX5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 560.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 10001;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_TELO_FX5_1;
	self->deathstate = S_TELO_FX9;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DIRT1
//
//==========================================================================

void misc_DIRT1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_DIRT1_1;
	self->deathstate = S_DIRT1_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DIRT2
//
//==========================================================================

void misc_DIRT2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_DIRT2_1;
	self->deathstate = S_DIRT2_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DIRT3
//
//==========================================================================

void misc_DIRT3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_DIRT3_1;
	self->deathstate = S_DIRT3_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DIRT4
//
//==========================================================================

void misc_DIRT4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT;
	self->spawnstate = S_DIRT4_1;
	self->deathstate = S_DIRT4_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DIRT5
//
//==========================================================================

void misc_DIRT5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT;
	self->spawnstate = S_DIRT5_1;
	self->deathstate = S_DIRT5_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DIRT6
//
//==========================================================================

void misc_DIRT6(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT;
	self->spawnstate = S_DIRT6_1;
	self->deathstate = S_DIRT6_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DIRTCLUMP
//
//==========================================================================

void misc_DIRTCLUMP(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_DIRTCLUMP1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ROCK1
//
//==========================================================================

void misc_ROCK1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_ROCK1_1;
	self->deathstate = S_ROCK1_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ROCK2
//
//==========================================================================

void misc_ROCK2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_ROCK2_1;
	self->deathstate = S_ROCK2_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ROCK3
//
//==========================================================================

void misc_ROCK3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_ROCK3_1;
	self->deathstate = S_ROCK3_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FOGSPAWNER
//
//==========================================================================

void misc_FOGSPAWNER(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_SPAWNFOG1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FOGPATCHS
//
//==========================================================================

void misc_FOGPATCHS(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 35.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_NOCLIP|MF_FLOAT;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FOGPATCHS1;
	self->deathstate = S_FOGPATCHS0;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FOGPATCHM
//
//==========================================================================

void misc_FOGPATCHM(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 35.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_NOCLIP|MF_FLOAT;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FOGPATCHM1;
	self->deathstate = S_FOGPATCHM0;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FOGPATCHL
//
//==========================================================================

void misc_FOGPATCHL(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 35.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_NOCLIP|MF_FLOAT;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FOGPATCHL1;
	self->deathstate = S_FOGPATCHL0;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_QUAKE_FOCUS
//
//==========================================================================

void misc_QUAKE_FOCUS(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP;
	self->spawnstate = S_QUAKE_ACTIVE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD1
//
//==========================================================================

void misc_SGSHARD1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD1_1;
	self->deathstate = S_SGSHARD1_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD2
//
//==========================================================================

void misc_SGSHARD2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD2_1;
	self->deathstate = S_SGSHARD2_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD3
//
//==========================================================================

void misc_SGSHARD3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD3_1;
	self->deathstate = S_SGSHARD3_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD4
//
//==========================================================================

void misc_SGSHARD4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD4_1;
	self->deathstate = S_SGSHARD4_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD5
//
//==========================================================================

void misc_SGSHARD5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD5_1;
	self->deathstate = S_SGSHARD5_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD6
//
//==========================================================================

void misc_SGSHARD6(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD6_1;
	self->deathstate = S_SGSHARD6_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD7
//
//==========================================================================

void misc_SGSHARD7(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD7_1;
	self->deathstate = S_SGSHARD7_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD8
//
//==========================================================================

void misc_SGSHARD8(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD8_1;
	self->deathstate = S_SGSHARD8_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD9
//
//==========================================================================

void misc_SGSHARD9(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD9_1;
	self->deathstate = S_SGSHARD9_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SGSHARD0
//
//==========================================================================

void misc_SGSHARD0(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SGSHARD0_1;
	self->deathstate = S_SGSHARD0_D;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIEGG
//
//==========================================================================

void misc_ARTIEGG(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_EGGC1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_EGGFX
//
//==========================================================================

void misc_EGGFX(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 630.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 1;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_EGGFX1;
	self->deathstate = S_EGGFXI1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTISUPERHEAL
//
//==========================================================================

void misc_ARTISUPERHEAL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_SPHL1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZWINGEDSTATUENOSKULL
//
//==========================================================================

void misc_ZWINGEDSTATUENOSKULL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 62.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZWINGEDSTATUENOSKULL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZGEMPEDESTAL
//
//==========================================================================

void misc_ZGEMPEDESTAL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZGEMPEDESTAL1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZSKULL
//
//==========================================================================

void misc_ARTIPUZZSKULL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZSKULL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEMBIG
//
//==========================================================================

void misc_ARTIPUZZGEMBIG(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEMBIG;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEMRED
//
//==========================================================================

void misc_ARTIPUZZGEMRED(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEMRED;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEMGREEN1
//
//==========================================================================

void misc_ARTIPUZZGEMGREEN1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEMGREEN1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEMGREEN2
//
//==========================================================================

void misc_ARTIPUZZGEMGREEN2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEMGREEN2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEMBLUE1
//
//==========================================================================

void misc_ARTIPUZZGEMBLUE1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEMBLUE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEMBLUE2
//
//==========================================================================

void misc_ARTIPUZZGEMBLUE2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEMBLUE2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZBOOK1
//
//==========================================================================

void misc_ARTIPUZZBOOK1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZBOOK1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZBOOK2
//
//==========================================================================

void misc_ARTIPUZZBOOK2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZBOOK2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZSKULL2
//
//==========================================================================

void misc_ARTIPUZZSKULL2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZSKULL2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZFWEAPON
//
//==========================================================================

void misc_ARTIPUZZFWEAPON(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZFWEAPON;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZCWEAPON
//
//==========================================================================

void misc_ARTIPUZZCWEAPON(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZCWEAPON;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZMWEAPON
//
//==========================================================================

void misc_ARTIPUZZMWEAPON(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZMWEAPON;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEAR
//
//==========================================================================

void misc_ARTIPUZZGEAR(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEAR_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEAR2
//
//==========================================================================

void misc_ARTIPUZZGEAR2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEAR2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEAR3
//
//==========================================================================

void misc_ARTIPUZZGEAR3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEAR3_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPUZZGEAR4
//
//==========================================================================

void misc_ARTIPUZZGEAR4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARTIPUZZGEAR4_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTITORCH
//
//==========================================================================

void misc_ARTITORCH(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_TRCH1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREBOMB
//
//==========================================================================

void misc_FIREBOMB(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOGRAVITY;
	self->flags2 = MF2_FIREDAMAGE;
	self->spawnstate = S_FIREBOMB1;
	self->sound_death = GetSoundID("FlechetteExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTITELEPORT
//
//==========================================================================

void misc_ARTITELEPORT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_ATLP1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARTIPOISONBAG
//
//==========================================================================

void misc_ARTIPOISONBAG(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_PSBG1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_POISONBAG
//
//==========================================================================

void misc_POISONBAG(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_POISONBAG1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_POISONCLOUD
//
//==========================================================================

void misc_POISONCLOUD(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 1.0;
	self->height = 1.0;
	self->mass = 99999.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_NOCLIP;
	self->flags2 = MF2_NODMGTHRUST;
	self->spawnstate = S_POISONCLOUD1;
	self->sound_death = GetSoundID("PoisonShroomDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_THROWINGBOMB
//
//==========================================================================

void misc_THROWINGBOMB(mobj_t *self, mthing_t *mthing)
{
	self->health = 48;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 10.0;
	self->mass = 100.0;
	self->speed = 420.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_FIREDAMAGE;
	self->spawnstate = S_THROWINGBOMB1;
	self->deathstate = S_THROWINGBOMB_X1;
	self->sound_sight = GetSoundID("FlechetteBounce");
	self->sound_death = GetSoundID("FlechetteExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SPEEDBOOTS
//
//==========================================================================

void misc_SPEEDBOOTS(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_BOOTS1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BOOSTMANA
//
//==========================================================================

void misc_BOOSTMANA(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_MANA;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BOOSTARMOR
//
//==========================================================================

void misc_BOOSTARMOR(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_ARMOR1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BLASTRADIUS
//
//==========================================================================

void misc_BLASTRADIUS(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_BLAST1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HEALRADIUS
//
//==========================================================================

void misc_HEALRADIUS(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_ARTI_HEALRAD1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SPLASH
//
//==========================================================================

void misc_SPLASH(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 4.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT|MF2_CANNOTPUSH;
	self->spawnstate = S_SPLASH1;
	self->deathstate = S_SPLASHX;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SPLASHBASE
//
//==========================================================================

void misc_SPLASHBASE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_SPLASHBASE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_LAVASPLASH
//
//==========================================================================

void misc_LAVASPLASH(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_LAVASPLASH1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_LAVASMOKE
//
//==========================================================================

void misc_LAVASMOKE(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_LAVASMOKE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SLUDGECHUNK
//
//==========================================================================

void misc_SLUDGECHUNK(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 4.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT|MF2_CANNOTPUSH;
	self->spawnstate = S_SLUDGECHUNK1;
	self->deathstate = S_SLUDGECHUNKX;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SLUDGESPLASH
//
//==========================================================================

void misc_SLUDGESPLASH(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_SLUDGESPLASH1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC0
//
//==========================================================================

void misc_MISC0(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 62.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZWINGEDSTATUE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC1
//
//==========================================================================

void misc_MISC1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZROCK1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC2
//
//==========================================================================

void misc_MISC2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZROCK2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC3
//
//==========================================================================

void misc_MISC3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZROCK3_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC4
//
//==========================================================================

void misc_MISC4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZROCK4_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC5
//
//==========================================================================

void misc_MISC5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 60.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCHANDELIER1;
	generic_mobj_start(self, mthing);
	if (!self->tid)
		AddStaticLight(self->origin, 128.0);
}

//==========================================================================
//
//	misc_MISC6
//
//==========================================================================

void misc_MISC6(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 60.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCHANDELIER_U;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC7
//
//==========================================================================

void misc_MISC7(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 96.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTREEDEAD1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC8
//
//==========================================================================

void misc_MISC8(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 128.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTREE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TREEDESTRUCTIBLE
//
//==========================================================================

void misc_TREEDESTRUCTIBLE(mobj_t *self, mthing_t *mthing)
{
	self->health = 70;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 180.0;
	self->mass = 99999.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD;
	self->spawnstate = S_ZTREEDESTRUCTIBLE1;
	self->deathstate = S_ZTREEDES_D1;
	self->sound_death = GetSoundID("TreeBreak");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC9
//
//==========================================================================

void misc_MISC9(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 150.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTREESWAMP182_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC10
//
//==========================================================================

void misc_MISC10(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 120.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTREESWAMP172_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC11
//
//==========================================================================

void misc_MISC11(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTUMPBURNED1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC12
//
//==========================================================================

void misc_MISC12(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTUMPBARE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC13
//
//==========================================================================

void misc_MISC13(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSTUMPSWAMP1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC14
//
//==========================================================================

void misc_MISC14(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSTUMPSWAMP2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC15
//
//==========================================================================

void misc_MISC15(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSHROOMLARGE1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC16
//
//==========================================================================

void misc_MISC16(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSHROOMLARGE2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC17
//
//==========================================================================

void misc_MISC17(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSHROOMLARGE3_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC18
//
//==========================================================================

void misc_MISC18(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSHROOMSMALL1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC19
//
//==========================================================================

void misc_MISC19(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSHROOMSMALL2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC20
//
//==========================================================================

void misc_MISC20(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSHROOMSMALL3_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC21
//
//==========================================================================

void misc_MISC21(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSHROOMSMALL4_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC22
//
//==========================================================================

void misc_MISC22(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZSHROOMSMALL5_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC23
//
//==========================================================================

void misc_MISC23(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 138.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTALAGMITEPILLAR1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC24
//
//==========================================================================

void misc_MISC24(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 48.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTALAGMITELARGE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC25
//
//==========================================================================

void misc_MISC25(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTALAGMITEMEDIUM1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC26
//
//==========================================================================

void misc_MISC26(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 36.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTALAGMITESMALL1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC27
//
//==========================================================================

void misc_MISC27(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 66.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZSTALACTITELARGE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC28
//
//==========================================================================

void misc_MISC28(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 50.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZSTALACTITEMEDIUM1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC29
//
//==========================================================================

void misc_MISC29(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZSTALACTITESMALL1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC30
//
//==========================================================================

void misc_MISC30(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZMOSSCEILING1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC31
//
//==========================================================================

void misc_MISC31(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 24.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZMOSSCEILING2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC32
//
//==========================================================================

void misc_MISC32(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 52.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSWAMPVINE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC33
//
//==========================================================================

void misc_MISC33(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 92.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZCORPSEKABOB1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC34
//
//==========================================================================

void misc_MISC34(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZCORPSESLEEPING1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC35
//
//==========================================================================

void misc_MISC35(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 46.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTOMBSTONERIP1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC36
//
//==========================================================================

void misc_MISC36(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 46.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTOMBSTONESHANE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC37
//
//==========================================================================

void misc_MISC37(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 46.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTOMBSTONEBIGCROSS1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC38
//
//==========================================================================

void misc_MISC38(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 52.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTOMBSTONEBRIANR1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC39
//
//==========================================================================

void misc_MISC39(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 52.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTOMBSTONECROSSCIRCLE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC40
//
//==========================================================================

void misc_MISC40(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 46.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTOMBSTONESMALLCROSS1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC41
//
//==========================================================================

void misc_MISC41(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 46.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTOMBSTONEBRIANP1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC42
//
//==========================================================================

void misc_MISC42(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 75.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_CORPSEHANGING_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC43
//
//==========================================================================

void misc_MISC43(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 108.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLEGREENTALL_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC44
//
//==========================================================================

void misc_MISC44(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 108.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLEBLUETALL_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC45
//
//==========================================================================

void misc_MISC45(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 62.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLEGREENSHORT_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC46
//
//==========================================================================

void misc_MISC46(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 62.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLEBLUESHORT_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC47
//
//==========================================================================

void misc_MISC47(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 108.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLESTRIPETALL_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC48
//
//==========================================================================

void misc_MISC48(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 108.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLEDARKREDTALL_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC49
//
//==========================================================================

void misc_MISC49(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 108.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLEREDTALL_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC50
//
//==========================================================================

void misc_MISC50(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 108.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLETANTALL_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC51
//
//==========================================================================

void misc_MISC51(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 108.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLERUSTTALL_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC52
//
//==========================================================================

void misc_MISC52(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 62.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLEDARKREDSHORT_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC53
//
//==========================================================================

void misc_MISC53(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 62.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLEREDSHORT_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC54
//
//==========================================================================

void misc_MISC54(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 62.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLETANSHORT_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC55
//
//==========================================================================

void misc_MISC55(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 62.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTATUEGARGOYLERUSTSHORT_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC56
//
//==========================================================================

void misc_MISC56(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 120.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZBANNERTATTERED_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC57
//
//==========================================================================

void misc_MISC57(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 180.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTREELARGE1;
	self->deathstate = S_ZTREELARGE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC58
//
//==========================================================================

void misc_MISC58(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 180.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTREELARGE2;
	self->deathstate = S_ZTREELARGE2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC59
//
//==========================================================================

void misc_MISC59(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 22.0;
	self->height = 100.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTREEGNARLED1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC60
//
//==========================================================================

void misc_MISC60(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 22.0;
	self->height = 100.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTREEGNARLED2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC61
//
//==========================================================================

void misc_MISC61(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 25.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZLOG;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC62
//
//==========================================================================

void misc_MISC62(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 66.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZSTALACTITEICELARGE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC63
//
//==========================================================================

void misc_MISC63(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 50.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZSTALACTITEICEMEDIUM;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC64
//
//==========================================================================

void misc_MISC64(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZSTALACTITEICESMALL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC65
//
//==========================================================================

void misc_MISC65(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 8.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZSTALACTITEICETINY;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC66
//
//==========================================================================

void misc_MISC66(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 66.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTALAGMITEICELARGE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC67
//
//==========================================================================

void misc_MISC67(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 50.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTALAGMITEICEMEDIUM;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC68
//
//==========================================================================

void misc_MISC68(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTALAGMITEICESMALL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC69
//
//==========================================================================

void misc_MISC69(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 8.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZSTALAGMITEICETINY;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC70
//
//==========================================================================

void misc_MISC70(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 17.0;
	self->height = 72.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZROCKBROWN1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC71
//
//==========================================================================

void misc_MISC71(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 50.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZROCKBROWN2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC72
//
//==========================================================================

void misc_MISC72(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZROCKBLACK;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC73
//
//==========================================================================

void misc_MISC73(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZRUBBLE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC74
//
//==========================================================================

void misc_MISC74(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZRUBBLE2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC75
//
//==========================================================================

void misc_MISC75(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZRUBBLE3;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC76
//
//==========================================================================

void misc_MISC76(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 54.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZVASEPILLAR;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_POTTERY1
//
//==========================================================================

void misc_POTTERY1(mobj_t *self, mthing_t *mthing)
{
	self->health = 15;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_DROPOFF|MF_NOBLOOD;
	self->flags2 = MF2_PUSHABLE|MF2_SLIDE|MF2_PASSMOBJ|MF2_TELESTOMP;
	self->spawnstate = S_ZPOTTERY1;
	self->deathstate = S_ZPOTTERY_EXPLODE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_POTTERY2
//
//==========================================================================

void misc_POTTERY2(mobj_t *self, mthing_t *mthing)
{
	self->health = 15;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 25.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_DROPOFF|MF_NOBLOOD;
	self->flags2 = MF2_PUSHABLE|MF2_SLIDE|MF2_PASSMOBJ|MF2_TELESTOMP;
	self->spawnstate = S_ZPOTTERY2;
	self->deathstate = S_ZPOTTERY_EXPLODE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_POTTERY3
//
//==========================================================================

void misc_POTTERY3(mobj_t *self, mthing_t *mthing)
{
	self->health = 15;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 25.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_DROPOFF|MF_NOBLOOD;
	self->flags2 = MF2_PUSHABLE|MF2_SLIDE|MF2_PASSMOBJ|MF2_TELESTOMP;
	self->spawnstate = S_ZPOTTERY3;
	self->deathstate = S_ZPOTTERY_EXPLODE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_POTTERYBIT1
//
//==========================================================================

void misc_POTTERYBIT1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_POTTERYBIT_1;
	self->deathstate = S_POTTERYBIT_EX0;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC77
//
//==========================================================================

void misc_MISC77(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 11.0;
	self->height = 95.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCORPSELYNCHED1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZLYNCHED_NOHEART
//
//==========================================================================

void misc_ZLYNCHED_NOHEART(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 100.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCORPSELYNCHED2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC78
//
//==========================================================================

void misc_MISC78(mobj_t *self, mthing_t *mthing)
{
	self->health = 30;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 35.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD;
	self->spawnstate = S_ZCORPSESITTING;
	self->deathstate = S_ZCORPSESITTING_X;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CORPSEBIT
//
//==========================================================================

void misc_CORPSEBIT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->flags2 = MF2_TELESTOMP;
	self->spawnstate = S_CORPSEBIT_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CORPSEBLOODDRIP
//
//==========================================================================

void misc_CORPSEBLOODDRIP(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 1.0;
	self->height = 4.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_MISSILE;
	self->flags2 = MF2_LOGRAV;
	self->spawnstate = S_CORPSEBLOODDRIP;
	self->deathstate = S_CORPSEBLOODDRIP_X1;
	self->sound_death = GetSoundID("Drip");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BLOODPOOL
//
//==========================================================================

void misc_BLOODPOOL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_BLOODPOOL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC79
//
//==========================================================================

void misc_MISC79(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_ZCANDLE1;
	generic_mobj_start(self, mthing);
	AddStaticLight(self->origin, 128.0);
}

//==========================================================================
//
//	misc_MISC80
//
//==========================================================================

void misc_MISC80(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP;
	self->spawnstate = S_ZLEAFSPAWNER;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_LEAF1
//
//==========================================================================

void misc_LEAF1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 4.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_MISSILE;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT;
	self->spawnstate = S_LEAF1_1;
	self->deathstate = S_LEAF_X1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_LEAF2
//
//==========================================================================

void misc_LEAF2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 4.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_MISSILE;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT;
	self->spawnstate = S_LEAF2_1;
	self->deathstate = S_LEAF_X1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZTWINEDTORCH
//
//==========================================================================

void misc_ZTWINEDTORCH(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTWINEDTORCH_1;
	generic_mobj_start(self, mthing);
	AddStaticLight(self->origin + vector(0.0, 0.0, 64.0), 200.0);
}

//==========================================================================
//
//	misc_ZTWINEDTORCH_UNLIT
//
//==========================================================================

void misc_ZTWINEDTORCH_UNLIT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZTWINEDTORCH_UNLIT;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BRIDGE
//
//==========================================================================

void misc_BRIDGE(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 32.0;
	self->height = 2.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_NOGRAVITY;
	self->spawnstate = S_BRIDGE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BRIDGEBALL
//
//==========================================================================

void misc_BRIDGEBALL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_BBALL1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZWALLTORCH
//
//==========================================================================

void misc_ZWALLTORCH(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_ZWALLTORCH1;
	generic_mobj_start(self, mthing);
	if (!self->tid)
		AddStaticLight(self->origin + vector(0.0, 0.0, 48.0), 128.0);
}

//==========================================================================
//
//	misc_ZWALLTORCH_UNLIT
//
//==========================================================================

void misc_ZWALLTORCH_UNLIT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_ZWALLTORCH_U;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZBARREL
//
//==========================================================================

void misc_ZBARREL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZBARREL1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZSHRUB1
//
//==========================================================================

void misc_ZSHRUB1(mobj_t *self, mthing_t *mthing)
{
	self->health = 20;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 24.0;
	self->mass = 99999.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD;
	self->spawnstate = S_ZSHRUB1;
	self->meleestate = S_ZSHRUB1_X1;
	self->deathstate = S_ZSHRUB1_DIE;
	self->sound_death = GetSoundID("TreeExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZSHRUB2
//
//==========================================================================

void misc_ZSHRUB2(mobj_t *self, mthing_t *mthing)
{
	self->health = 10;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 99999.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD;
	self->spawnstate = S_ZSHRUB2;
	self->meleestate = S_ZSHRUB2_X1;
	self->deathstate = S_ZSHRUB2_DIE;
	self->sound_death = GetSoundID("TreeExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZBUCKET
//
//==========================================================================

void misc_ZBUCKET(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 72.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZBUCKET1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZPOISONSHROOM
//
//==========================================================================

void misc_ZPOISONSHROOM(mobj_t *self, mthing_t *mthing)
{
	self->health = 30;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 20.0;
	self->mass = 99999.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 255;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD;
	self->spawnstate = S_ZPOISONSHROOM1;
	self->painstate = S_ZPOISONSHROOM_P1;
	self->deathstate = S_ZPOISONSHROOM_X1;
	self->sound_pain = GetSoundID("PoisonShroomPain");
	self->sound_death = GetSoundID("PoisonShroomDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZFIREBULL
//
//==========================================================================

void misc_ZFIREBULL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 80.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZFIREBULL1;
	generic_mobj_start(self, mthing);
	if (!self->tid)
		AddStaticLight(self->origin + vector(0.0, 0.0, 32.0), 200.0);
}

//==========================================================================
//
//	misc_ZFIREBULL_UNLIT
//
//==========================================================================

void misc_ZFIREBULL_UNLIT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 80.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZFIREBULL_U;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIRETHING
//
//==========================================================================

void misc_FIRETHING(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 10.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZFIRETHING1;
	generic_mobj_start(self, mthing);
	if (!self->tid)
		AddStaticLight(self->origin + vector(0.0, 0.0, 16.0), 160.0);
}

//==========================================================================
//
//	misc_BRASSTORCH
//
//==========================================================================

void misc_BRASSTORCH(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 35.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZBRASSTORCH1;
	generic_mobj_start(self, mthing);
	if (!self->tid)
		AddStaticLight(self->origin + vector(0.0, 0.0, 48.0), 160.0);
}

//==========================================================================
//
//	misc_ZSUITOFARMOR
//
//==========================================================================

void misc_ZSUITOFARMOR(mobj_t *self, mthing_t *mthing)
{
	self->health = 60;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 72.0;
	self->mass = 99999.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD;
	self->spawnstate = S_ZSUITOFARMOR;
	self->deathstate = S_ZSUITOFARMOR_X1;
	self->sound_death = GetSoundID("SuitofArmorBreak");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZARMORCHUNK
//
//==========================================================================

void misc_ZARMORCHUNK(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 8.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_ZARMORCHUNK1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZBELL
//
//==========================================================================

void misc_ZBELL(mobj_t *self, mthing_t *mthing)
{
	self->health = 5;
	self->spawnhealth = self->health;
	self->radius = 56.0;
	self->height = 120.0;
	self->mass = 99999.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_SPAWNCEILING|MF_NOGRAVITY|MF_NOBLOOD;
	self->spawnstate = S_ZBELL;
	self->deathstate = S_ZBELL_X1;
	self->sound_death = GetSoundID("BellRing");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZBLUE_CANDLE
//
//==========================================================================

void misc_ZBLUE_CANDLE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_ZBLUE_CANDLE1;
	generic_mobj_start(self, mthing);
	if (!self->tid)
		AddStaticLightRGB(self->origin, 128.0, RGB(0, 0, 255));
}

//==========================================================================
//
//	misc_ZIRON_MAIDEN
//
//==========================================================================

void misc_ZIRON_MAIDEN(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 60.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZIRON_MAIDEN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZXMAS_TREE
//
//==========================================================================

void misc_ZXMAS_TREE(mobj_t *self, mthing_t *mthing)
{
	self->health = 20;
	self->spawnhealth = self->health;
	self->radius = 11.0;
	self->height = 130.0;
	self->mass = 99999.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD;
	self->spawnstate = S_ZXMAS_TREE;
	self->meleestate = S_ZXMAS_TREE_X1;
	self->deathstate = S_ZXMAS_TREE_DIE;
	self->sound_death = GetSoundID("TreeExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZCAULDRON
//
//==========================================================================

void misc_ZCAULDRON(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 26.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZCAULDRON1;
	generic_mobj_start(self, mthing);
	if (!self->tid)
		AddStaticLight(self->origin, 128.0);
}

//==========================================================================
//
//	misc_ZCAULDRON_UNLIT
//
//==========================================================================

void misc_ZCAULDRON_UNLIT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 26.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_ZCAULDRON_U;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZCHAINBIT32
//
//==========================================================================

void misc_ZCHAINBIT32(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCHAINBIT32;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZCHAINBIT64
//
//==========================================================================

void misc_ZCHAINBIT64(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCHAINBIT64;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZCHAINEND_HEART
//
//==========================================================================

void misc_ZCHAINEND_HEART(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCHAINEND_HEART;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZCHAINEND_HOOK1
//
//==========================================================================

void misc_ZCHAINEND_HOOK1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCHAINEND_HOOK1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZCHAINEND_HOOK2
//
//==========================================================================

void misc_ZCHAINEND_HOOK2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCHAINEND_HOOK2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZCHAINEND_SPIKE
//
//==========================================================================

void misc_ZCHAINEND_SPIKE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCHAINEND_SPIKE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ZCHAINEND_SKULL
//
//==========================================================================

void misc_ZCHAINEND_SKULL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_ZCHAINEND_SKULL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT1
//
//==========================================================================

void misc_TABLE_SHIT1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT2
//
//==========================================================================

void misc_TABLE_SHIT2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT3
//
//==========================================================================

void misc_TABLE_SHIT3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT3;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT4
//
//==========================================================================

void misc_TABLE_SHIT4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT5
//
//==========================================================================

void misc_TABLE_SHIT5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT5;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT6
//
//==========================================================================

void misc_TABLE_SHIT6(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT6;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT7
//
//==========================================================================

void misc_TABLE_SHIT7(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT7;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT8
//
//==========================================================================

void misc_TABLE_SHIT8(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT8;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT9
//
//==========================================================================

void misc_TABLE_SHIT9(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT9;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TABLE_SHIT10
//
//==========================================================================

void misc_TABLE_SHIT10(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_TABLE_SHIT10;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TFOG
//
//==========================================================================

void misc_TFOG(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_TFOG1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC81
//
//==========================================================================

void misc_MISC81(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_TELESMOKE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TELEPORTMAN
//
//==========================================================================

void misc_TELEPORTMAN(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PUNCHPUFF
//
//==========================================================================

void misc_PUNCHPUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_PUNCHPUFF1;
	self->sound_sight = GetSoundID("FighterPunchHitThing");
	self->sound_attack = GetSoundID("FighterPunchHitWall");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FW_AXE
//
//==========================================================================

void misc_FW_AXE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_AXE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_AXEPUFF
//
//==========================================================================

void misc_AXEPUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_HAMMERPUFF1;
	self->sound_sight = GetSoundID("FighterAxeHitThing");
	self->sound_attack = GetSoundID("FighterHammerHitWall");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_AXEPUFF_GLOW
//
//==========================================================================

void misc_AXEPUFF_GLOW(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_AXEPUFF_GLOW1;
	self->sound_sight = GetSoundID("FighterAxeHitThing");
	self->sound_attack = GetSoundID("FighterHammerHitWall");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_AXEBLOOD
//
//==========================================================================

void misc_AXEBLOOD(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 4.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF;
	self->flags2 = MF2_NOTELEPORT|MF2_CANNOTPUSH;
	self->spawnstate = S_AXEBLOOD1;
	self->deathstate = S_AXEBLOOD6;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FW_HAMMER
//
//==========================================================================

void misc_FW_HAMMER(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_HAMM;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HAMMER_MISSILE
//
//==========================================================================

void misc_HAMMER_MISSILE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 20.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 10;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_HAMMER_MISSILE_1;
	self->deathstate = S_HAMMER_MISSILE_X1;
	self->sound_death = GetSoundID("FighterHammerExplode");
	self->effects = EF_DL_RED;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HAMMERPUFF
//
//==========================================================================

void misc_HAMMERPUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_HAMMERPUFF1;
	self->sound_sight = GetSoundID("FighterHammerHitThing");
	self->sound_attack = GetSoundID("FighterHammerHitWall");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FSWORD_MISSILE
//
//==========================================================================

void misc_FSWORD_MISSILE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 1050.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_FSWORD_MISSILE1;
	self->deathstate = S_FSWORD_MISSILE_X1;
	self->sound_death = GetSoundID("FighterSwordExplode");
	self->effects = EF_DL_GREEN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FSWORD_FLAME
//
//==========================================================================

void misc_FSWORD_FLAME(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_FSWORD_FLAME1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CW_SERPSTAFF
//
//==========================================================================

void misc_CW_SERPSTAFF(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_CSTAFF;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CSTAFF_MISSILE
//
//==========================================================================

void misc_CSTAFF_MISSILE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 10.0;
	self->mass = 100.0;
	self->speed = 770.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 5;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_CSTAFF_MISSILE1;
	self->deathstate = S_CSTAFF_MISSILE_X1;
	self->sound_death = GetSoundID("ClericCStaffExplode");
	self->effects = EF_DL_GREEN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CSTAFFPUFF
//
//==========================================================================

void misc_CSTAFFPUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_CSTAFFPUFF1;
	self->sound_sight = GetSoundID("ClericCStaffHitThing");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CW_FLAME
//
//==========================================================================

void misc_CW_FLAME(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_CFLAME1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CFLAMEFLOOR
//
//==========================================================================

void misc_CFLAMEFLOOR(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_CFLAMEFLOOR1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FLAMEPUFF
//
//==========================================================================

void misc_FLAMEPUFF(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 1.0;
	self->height = 1.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_FLAMEPUFF1;
	self->sound_sight = GetSoundID("ClericFlameExplode");
	self->sound_attack = GetSoundID("ClericFlameExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FLAMEPUFF2
//
//==========================================================================

void misc_FLAMEPUFF2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 1.0;
	self->height = 1.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_FLAMEPUFF2_1;
	self->sound_sight = GetSoundID("ClericFlameExplode");
	self->sound_attack = GetSoundID("ClericFlameExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CIRCLEFLAME
//
//==========================================================================

void misc_CIRCLEFLAME(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 2;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE;
	self->spawnstate = S_CIRCLE_FLAME1;
	self->deathstate = S_CIRCLE_FLAME_X1;
	self->sound_death = GetSoundID("ClericFlameCircle");
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CFLAME_MISSILE
//
//==========================================================================

void misc_CFLAME_MISSILE(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 14.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 7000.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_CFLAME_MISSILE1;
	self->deathstate = S_CFLAME_MISSILE_X;
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HOLY_FX
//
//==========================================================================

void misc_HOLY_FX(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 105;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 6.0;
	self->mass = 100.0;
	self->speed = 420.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 3;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_RIP|MF2_IMPACT|MF2_PCROSS|MF2_SEEKERMISSILE;
	self->spawnstate = S_HOLY_FX1;
	self->deathstate = S_HOLY_FX_X1;
	self->sound_death = GetSoundID("SpiritDie");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HOLY_TAIL
//
//==========================================================================

void misc_HOLY_TAIL(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 1.0;
	self->height = 1.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_NOCLIP;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_HOLY_TAIL1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HOLY_PUFF
//
//==========================================================================

void misc_HOLY_PUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_HOLY_PUFF1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HOLY_MISSILE
//
//==========================================================================

void misc_HOLY_MISSILE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 1050.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 4;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_HOLY_MISSILE1;
	self->deathstate = S_HOLY_MISSILE_X;
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HOLY_MISSILE_PUFF
//
//==========================================================================

void misc_HOLY_MISSILE_PUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 8.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_HOLY_MISSILE_P1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MWANDPUFF
//
//==========================================================================

void misc_MWANDPUFF(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->flags2 = MF2_NOTELEPORT|MF2_CANNOTPUSH|MF2_NODMGTHRUST;
	self->spawnstate = S_MWANDPUFF1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MWANDSMOKE
//
//==========================================================================

void misc_MWANDSMOKE(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->flags2 = MF2_NOTELEPORT|MF2_CANNOTPUSH|MF2_NODMGTHRUST;
	self->spawnstate = S_MWANDSMOKE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MWAND_MISSILE
//
//==========================================================================

void misc_MWAND_MISSILE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 6440.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 2;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_RIP|MF2_CANNOTPUSH|MF2_NODMGTHRUST|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_MWAND_MISSILE1;
	self->deathstate = S_MWANDPUFF1;
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MW_LIGHTNING
//
//==========================================================================

void misc_MW_LIGHTNING(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_MW_LIGHTNING1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_LIGHTNING_CEILING
//
//==========================================================================

void misc_LIGHTNING_CEILING(mobj_t *self, mthing_t *mthing)
{
	self->health = 144;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_LIGHTNING_CEILING1;
	self->deathstate = S_LIGHTNING_C_X1;
	self->effects = EF_DL_BLUE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_LIGHTNING_FLOOR
//
//==========================================================================

void misc_LIGHTNING_FLOOR(mobj_t *self, mthing_t *mthing)
{
	self->health = 144;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_LIGHTNING_FLOOR1;
	self->deathstate = S_LIGHTNING_F_X1;
	self->effects = EF_DL_BLUE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_LIGHTNING_ZAP
//
//==========================================================================

void misc_LIGHTNING_ZAP(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 35.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 2;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_LIGHTNING_ZAP1;
	self->deathstate = S_LIGHTNING_ZAP_X8;
	self->effects = EF_DL_BLUE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MSTAFF_FX
//
//==========================================================================

void misc_MSTAFF_FX(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 700.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 6;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_RIP|MF2_FIREDAMAGE|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_MSTAFF_FX1_1;
	self->deathstate = S_MSTAFF_FX_X1;
	self->sound_death = GetSoundID("MageStaffExplode");
	self->effects = EF_DL_RED;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MSTAFF_FX2
//
//==========================================================================

void misc_MSTAFF_FX2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 595.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 4;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE|MF2_IMPACT|MF2_PCROSS|MF2_SEEKERMISSILE;
	self->spawnstate = S_MSTAFF_FX2_1;
	self->deathstate = S_MSTAFF_FX2_X1;
	self->sound_death = GetSoundID("MageStaffExplode");
	self->effects = EF_DL_RED;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FW_SWORD1
//
//==========================================================================

void misc_FW_SWORD1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_FSWORD1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FW_SWORD2
//
//==========================================================================

void misc_FW_SWORD2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_FSWORD2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FW_SWORD3
//
//==========================================================================

void misc_FW_SWORD3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_FSWORD3;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CW_HOLY1
//
//==========================================================================

void misc_CW_HOLY1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_CHOLY1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CW_HOLY2
//
//==========================================================================

void misc_CW_HOLY2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_CHOLY2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CW_HOLY3
//
//==========================================================================

void misc_CW_HOLY3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_CHOLY3;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MW_STAFF1
//
//==========================================================================

void misc_MW_STAFF1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_MSTAFF1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MW_STAFF2
//
//==========================================================================

void misc_MW_STAFF2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_MSTAFF2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MW_STAFF3
//
//==========================================================================

void misc_MW_STAFF3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_MSTAFF3;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SNOUTPUFF
//
//==========================================================================

void misc_SNOUTPUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_PUNCHPUFF1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MW_CONE
//
//==========================================================================

void misc_MW_CONE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_COS1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SHARDFX1
//
//==========================================================================

void misc_SHARDFX1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 13.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 1;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_IMPACT|MF2_PCROSS|MF2_ICEDAMAGE;
	self->spawnstate = S_SHARDFX1_1;
	self->deathstate = S_SHARDFXE1_1;
	self->sound_death = GetSoundID("MageShardsExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BLOOD
//
//==========================================================================

void misc_BLOOD(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_BLOOD1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BLOODSPLATTER
//
//==========================================================================

void misc_BLOODSPLATTER(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 4.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_CANNOTPUSH;
	self->spawnstate = S_BLOODSPLATTER1;
	self->deathstate = S_BLOODSPLATTERX;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_GIBS
//
//==========================================================================

void misc_GIBS(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_CORPSE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_GIBS1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PLAYER_FIGHTER
//
//==========================================================================

void misc_PLAYER_FIGHTER(mobj_t *self, mthing_t *mthing)
{
	self->health = 100;
	self->spawnhealth = self->health;
	self->gibshealth = -50;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	self->painchance = 255;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_DROPOFF|MF_PICKUP;
	self->flags2 = MF2_WINDTHRUST|MF2_FLOORCLIP|MF2_SLIDE|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL;
	self->spawnstate = S_FPLAY;
	self->seestate = S_FPLAY_RUN1;
	self->missilestate = S_FPLAY_ATK1;
	self->painstate = S_FPLAY_PAIN;
	self->deathstate = S_FPLAY_DIE1;
	self->xdeathstate = S_FPLAY_XDIE1;
	self->sound_pain = GetSoundID("PlayerFighterPain");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BLOODYSKULL
//
//==========================================================================

void misc_BLOODYSKULL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 4.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF;
	self->flags2 = MF2_LOGRAV|MF2_CANNOTPUSH;
	self->spawnstate = S_BLOODYSKULL1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PLAYER_SPEED
//
//==========================================================================

void misc_PLAYER_SPEED(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_PLAYER_SPEED1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ICECHUNK
//
//==========================================================================

void misc_ICECHUNK(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 3.0;
	self->height = 4.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF;
	self->flags2 = MF2_LOGRAV|MF2_FLOORCLIP|MF2_CANNOTPUSH;
	self->spawnstate = S_ICECHUNK1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PLAYER_CLERIC
//
//==========================================================================

void misc_PLAYER_CLERIC(mobj_t *self, mthing_t *mthing)
{
	self->health = 100;
	self->spawnhealth = self->health;
	self->gibshealth = -50;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	self->painchance = 255;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_DROPOFF|MF_PICKUP;
	self->flags2 = MF2_WINDTHRUST|MF2_FLOORCLIP|MF2_SLIDE|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL;
	self->spawnstate = S_CPLAY;
	self->seestate = S_CPLAY_RUN1;
	self->missilestate = S_CPLAY_ATK1;
	self->painstate = S_CPLAY_PAIN;
	self->deathstate = S_CPLAY_DIE1;
	self->xdeathstate = S_CPLAY_XDIE1;
	self->sound_pain = GetSoundID("PlayerClericPain");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PLAYER_MAGE
//
//==========================================================================

void misc_PLAYER_MAGE(mobj_t *self, mthing_t *mthing)
{
	self->health = 100;
	self->spawnhealth = self->health;
	self->gibshealth = -50;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	self->painchance = 255;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_DROPOFF|MF_PICKUP;
	self->flags2 = MF2_WINDTHRUST|MF2_FLOORCLIP|MF2_SLIDE|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL;
	self->spawnstate = S_MPLAY;
	self->seestate = S_MPLAY_RUN1;
	self->missilestate = S_MPLAY_ATK1;
	self->painstate = S_MPLAY_PAIN;
	self->deathstate = S_MPLAY_DIE1;
	self->xdeathstate = S_MPLAY_XDIE1;
	self->sound_pain = GetSoundID("PlayerMagePain");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PIGPLAYER
//
//==========================================================================

void misc_PIGPLAYER(mobj_t *self, mthing_t *mthing)
{
	self->health = 100;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 24.0;
	self->mass = 100.0;
	self->painchance = 255;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_DROPOFF;
	self->flags2 = MF2_WINDTHRUST|MF2_FLOORCLIP|MF2_SLIDE|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL;
	self->spawnstate = S_PIGPLAY;
	self->seestate = S_PIGPLAY_RUN1;
	self->missilestate = S_PIGPLAY_ATK1;
	self->painstate = S_PIGPLAY_PAIN;
	self->deathstate = S_PIG_DIE1;
	self->sound_pain = GetSoundID("PigPain");
	self->sound_death = GetSoundID("PigDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PIG
//
//==========================================================================

void misc_PIG(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 25;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 22.0;
	self->mass = 60.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 128;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_WINDTHRUST|MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL;
	self->spawnstate = S_PIG_LOOK1;
	self->seestate = S_PIG_WALK1;
	self->meleestate = S_PIG_ATK1;
	self->painstate = S_PIG_PAIN;
	self->deathstate = S_PIG_DIE1;
	self->sound_sight = GetSoundID("PigActive1");
	self->sound_active = GetSoundID("PigActive1");
	self->sound_pain = GetSoundID("PigPain");
	self->sound_death = GetSoundID("PigDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CENTAUR
//
//==========================================================================

void misc_CENTAUR(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 200;
	self->spawnhealth = self->health;
	self->gibshealth = -100;
	self->radius = 20.0;
	self->height = 64.0;
	self->mass = 120.0;
	self->speed = 455.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 135;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_CENTAUR_LOOK1;
	self->seestate = S_CENTAUR_WALK1;
	self->meleestate = S_CENTAUR_ATK1;
	self->painstate = S_CENTAUR_PAIN1;
	self->deathstate = S_CENTAUR_DEATH1;
	self->xdeathstate = S_CENTAUR_DEATH_X1;
	self->sound_sight = GetSoundID("CentaurSight");
	self->sound_active = GetSoundID("CentaurActive");
	self->sound_attack = GetSoundID("CentaurAttack");
	self->sound_pain = GetSoundID("CentaurPain");
	self->sound_death = GetSoundID("CentaurDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CENTAURLEADER
//
//==========================================================================

void misc_CENTAURLEADER(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 250;
	self->spawnhealth = self->health;
	self->gibshealth = -125;
	self->radius = 20.0;
	self->height = 64.0;
	self->mass = 120.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 96;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_CENTAUR_LOOK1;
	self->seestate = S_CENTAUR_WALK1;
	self->meleestate = S_CENTAUR_ATK1;
	self->missilestate = S_CENTAUR_MISSILE1;
	self->painstate = S_CENTAUR_PAIN1;
	self->deathstate = S_CENTAUR_DEATH1;
	self->xdeathstate = S_CENTAUR_DEATH_X1;
	self->sound_sight = GetSoundID("CentaurSight");
	self->sound_active = GetSoundID("CentaurActive");
	self->sound_attack = GetSoundID("CentaurAttack");
	self->sound_pain = GetSoundID("CentaurPain");
	self->sound_death = GetSoundID("CentaurDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CENTAUR_FX
//
//==========================================================================

void misc_CENTAUR_FX(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 700.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 4;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_CENTAUR_FX1;
	self->deathstate = S_CENTAUR_FX_X1;
	self->sound_death = GetSoundID("CentaurMissileExplode");
	self->effects = EF_DL_BLUE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CENTAUR_SHIELD
//
//==========================================================================

void misc_CENTAUR_SHIELD(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_DROPOFF|MF_CORPSE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_CENTAUR_SHIELD1;
	self->deathstate = S_CENTAUR_SHIELD_X1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CENTAUR_SWORD
//
//==========================================================================

void misc_CENTAUR_SWORD(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_DROPOFF|MF_CORPSE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_CENTAUR_SWORD1;
	self->deathstate = S_CENTAUR_SWORD_X1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON
//
//==========================================================================

void misc_DEMON(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 250;
	self->spawnhealth = self->health;
	self->gibshealth = -125;
	self->radius = 32.0;
	self->height = 64.0;
	self->mass = 220.0;
	self->speed = 455.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 50;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_MCROSS;
	self->spawnstate = S_DEMN_LOOK1;
	self->seestate = S_DEMN_CHASE1;
	self->meleestate = S_DEMN_ATK1_1;
	self->missilestate = S_DEMN_ATK2_1;
	self->painstate = S_DEMN_PAIN1;
	self->deathstate = S_DEMN_DEATH1;
	self->xdeathstate = S_DEMN_XDEATH1;
	self->sound_sight = GetSoundID("DemonSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_attack = GetSoundID("DemonAttack");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("DemonDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMONCHUNK1
//
//==========================================================================

void misc_DEMONCHUNK1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMONCHUNK1_1;
	self->deathstate = S_DEMONCHUNK1_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMONCHUNK2
//
//==========================================================================

void misc_DEMONCHUNK2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMONCHUNK2_1;
	self->deathstate = S_DEMONCHUNK2_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMONCHUNK3
//
//==========================================================================

void misc_DEMONCHUNK3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMONCHUNK3_1;
	self->deathstate = S_DEMONCHUNK3_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMONCHUNK4
//
//==========================================================================

void misc_DEMONCHUNK4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMONCHUNK4_1;
	self->deathstate = S_DEMONCHUNK4_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMONCHUNK5
//
//==========================================================================

void misc_DEMONCHUNK5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMONCHUNK5_1;
	self->deathstate = S_DEMONCHUNK5_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMONFX1
//
//==========================================================================

void misc_DEMONFX1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 6.0;
	self->mass = 100.0;
	self->speed = 525.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 5;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_DEMONFX_MOVE1;
	self->deathstate = S_DEMONFX_BOOM1;
	self->sound_death = GetSoundID("DemonMissileExplode");
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON2
//
//==========================================================================

void misc_DEMON2(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 250;
	self->spawnhealth = self->health;
	self->gibshealth = -125;
	self->radius = 32.0;
	self->height = 64.0;
	self->mass = 220.0;
	self->speed = 455.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 50;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_MCROSS;
	self->spawnstate = S_DEMN2_LOOK1;
	self->seestate = S_DEMN2_CHASE1;
	self->meleestate = S_DEMN2_ATK1_1;
	self->missilestate = S_DEMN2_ATK2_1;
	self->painstate = S_DEMN2_PAIN1;
	self->deathstate = S_DEMN2_DEATH1;
	self->xdeathstate = S_DEMN2_XDEATH1;
	self->sound_sight = GetSoundID("DemonSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_attack = GetSoundID("DemonAttack");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("DemonDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON2CHUNK1
//
//==========================================================================

void misc_DEMON2CHUNK1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMON2CHUNK1_1;
	self->deathstate = S_DEMON2CHUNK1_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON2CHUNK2
//
//==========================================================================

void misc_DEMON2CHUNK2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMON2CHUNK2_1;
	self->deathstate = S_DEMON2CHUNK2_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON2CHUNK3
//
//==========================================================================

void misc_DEMON2CHUNK3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMON2CHUNK3_1;
	self->deathstate = S_DEMON2CHUNK3_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON2CHUNK4
//
//==========================================================================

void misc_DEMON2CHUNK4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMON2CHUNK4_1;
	self->deathstate = S_DEMON2CHUNK4_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON2CHUNK5
//
//==========================================================================

void misc_DEMON2CHUNK5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_DEMON2CHUNK5_1;
	self->deathstate = S_DEMON2CHUNK5_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON2FX1
//
//==========================================================================

void misc_DEMON2FX1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 6.0;
	self->mass = 100.0;
	self->speed = 525.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 5;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_DEMON2FX_MOVE1;
	self->deathstate = S_DEMON2FX_BOOM1;
	self->sound_death = GetSoundID("DemonMissileExplode");
	self->effects = EF_DL_GREEN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_WRAITHB
//
//==========================================================================

void misc_WRAITHB(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 100;
	self->health = 150;
	self->spawnhealth = self->health;
	self->gibshealth = -75;
	self->radius = 20.0;
	self->height = 68.0;
	self->mass = 75.0;
	self->speed = 385.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 25;
	self->damage = 10;
	self->flags = MF_NOGRAVITY|MF_DROPOFF|MF_FLOAT|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL;
	self->spawnstate = S_WRAITH_LOOK1;
	self->seestate = S_WRAITH_RAISE1;
	self->meleestate = S_WRAITH_ATK1_1;
	self->missilestate = S_WRAITH_ATK2_1;
	self->painstate = S_WRAITH_PAIN1;
	self->deathstate = S_WRAITH_DEATH1_1;
	self->xdeathstate = S_WRAITH_DEATH2_1;
	self->sound_sight = GetSoundID("WraithSight");
	self->sound_active = GetSoundID("WraithActive");
	self->sound_attack = GetSoundID("WraithAttack");
	self->sound_pain = GetSoundID("WraithPain");
	self->sound_death = GetSoundID("WraithDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_WRAITH
//
//==========================================================================

void misc_WRAITH(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 150;
	self->spawnhealth = self->health;
	self->gibshealth = -75;
	self->radius = 20.0;
	self->height = 55.0;
	self->mass = 75.0;
	self->speed = 385.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 25;
	self->damage = 10;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOGRAVITY|MF_DROPOFF|MF_FLOAT|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL;
	self->spawnstate = S_WRAITH_INIT1;
	self->seestate = S_WRAITH_CHASE1;
	self->meleestate = S_WRAITH_ATK1_1;
	self->missilestate = S_WRAITH_ATK2_1;
	self->painstate = S_WRAITH_PAIN1;
	self->deathstate = S_WRAITH_DEATH1_1;
	self->xdeathstate = S_WRAITH_DEATH2_1;
	self->sound_sight = GetSoundID("WraithSight");
	self->sound_active = GetSoundID("WraithActive");
	self->sound_attack = GetSoundID("WraithAttack");
	self->sound_pain = GetSoundID("WraithPain");
	self->sound_death = GetSoundID("WraithDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_WRAITHFX1
//
//==========================================================================

void misc_WRAITHFX1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 6.0;
	self->mass = 5.0;
	self->speed = 490.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 5;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT|MF2_FIREDAMAGE|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_WRTHFX_MOVE1;
	self->deathstate = S_WRTHFX_BOOM1;
	self->sound_death = GetSoundID("WraithMissileExplode");
	self->effects = EF_DL_RED;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_WRAITHFX2
//
//==========================================================================

void misc_WRAITHFX2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 5.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_WRTHFX_SIZZLE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_WRAITHFX3
//
//==========================================================================

void misc_WRAITHFX3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 5.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_WRTHFX_DROP1;
	self->deathstate = S_WRTHFX_DEAD1;
	self->sound_death = GetSoundID("Drip");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_WRAITHFX4
//
//==========================================================================

void misc_WRAITHFX4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 5.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_WRTHFX_ADROP1;
	self->deathstate = S_WRTHFX_ADEAD1;
	self->sound_death = GetSoundID("Drip");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_WRAITHFX5
//
//==========================================================================

void misc_WRAITHFX5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 2.0;
	self->height = 5.0;
	self->mass = 5.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_WRTHFX_BDROP1;
	self->deathstate = S_WRTHFX_BDEAD1;
	self->sound_death = GetSoundID("Drip");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MINOTAUR
//
//==========================================================================

void misc_MINOTAUR(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 66;
	self->health = 2500;
	self->spawnhealth = self->health;
	self->radius = 28.0;
	self->height = 100.0;
	self->mass = 800.0;
	self->speed = 560.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 25;
	self->damage = 7;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL;
	self->spawnstate = S_MNTR_SPAWN1;
	self->seestate = S_MNTR_WALK1;
	self->meleestate = S_MNTR_ATK1_1;
	self->missilestate = S_MNTR_ATK2_1;
	self->painstate = S_MNTR_PAIN1;
	self->deathstate = S_MNTR_DIE1;
	self->sound_sight = GetSoundID("MaulatorSight");
	self->sound_active = GetSoundID("MaulatorActive");
	self->sound_attack = GetSoundID("MaulatorHamSwing");
	self->sound_pain = GetSoundID("MaulatorPain");
	self->sound_death = GetSoundID("MaulatorDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MNTRFX1
//
//==========================================================================

void misc_MNTRFX1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 6.0;
	self->mass = 100.0;
	self->speed = 700.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 3;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE;
	self->spawnstate = S_MNTRFX1_1;
	self->deathstate = S_MNTRFXI1_1;
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MNTRFX2
//
//==========================================================================

void misc_MNTRFX2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 12.0;
	self->mass = 100.0;
	self->speed = 490.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 4;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE;
	self->spawnstate = S_MNTRFX2_1;
	self->deathstate = S_MNTRFXI2_1;
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MNTRFX3
//
//==========================================================================

void misc_MNTRFX3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 4;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE;
	self->spawnstate = S_MNTRFX3_1;
	self->deathstate = S_MNTRFXI2_1;
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MNTRSMOKE
//
//==========================================================================

void misc_MNTRSMOKE(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_MINOSMOKE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MNTRSMOKEEXIT
//
//==========================================================================

void misc_MNTRSMOKEEXIT(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_MINOSMOKEX1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SERPENT
//
//==========================================================================

void misc_SERPENT(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 100;
	self->health = 90;
	self->spawnhealth = self->health;
	self->gibshealth = -45;
	self->radius = 32.0;
	self->height = 70.0;
	self->mass = 99999.0;
	self->speed = 420.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 96;
	self->flags = MF_SOLID|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_PASSMOBJ|MF2_MCROSS|MF2_CANTLEAVEFLOORPIC|MF2_NONSHOOTABLE;
	self->spawnstate = S_SERPENT_LOOK1;
	self->seestate = S_SERPENT_SWIM1;
	self->meleestate = S_SERPENT_SURFACE1;
	self->painstate = S_SERPENT_PAIN1;
	self->deathstate = S_SERPENT_DIE1;
	self->xdeathstate = S_SERPENT_XDIE1;
	self->sound_sight = GetSoundID("SerpentSight");
	self->sound_attack = GetSoundID("SerpentAttack");
	self->sound_pain = GetSoundID("SerpentPain");
	self->sound_death = GetSoundID("SerpentDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SERPENTLEADER
//
//==========================================================================

void misc_SERPENTLEADER(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 100;
	self->health = 90;
	self->spawnhealth = self->health;
	self->gibshealth = -45;
	self->radius = 32.0;
	self->height = 70.0;
	self->mass = 200.0;
	self->speed = 420.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 96;
	self->flags = MF_SOLID|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_PASSMOBJ|MF2_MCROSS|MF2_CANTLEAVEFLOORPIC|MF2_NONSHOOTABLE;
	self->spawnstate = S_SERPENT_LOOK1;
	self->seestate = S_SERPENT_SWIM1;
	self->meleestate = S_SERPENT_SURFACE1;
	self->painstate = S_SERPENT_PAIN1;
	self->deathstate = S_SERPENT_DIE1;
	self->xdeathstate = S_SERPENT_XDIE1;
	self->sound_sight = GetSoundID("SerpentSight");
	self->sound_attack = GetSoundID("SerpentAttack");
	self->sound_pain = GetSoundID("SerpentPain");
	self->sound_death = GetSoundID("SerpentDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SERPENTFX
//
//==========================================================================

void misc_SERPENTFX(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 10.0;
	self->mass = 100.0;
	self->speed = 525.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 4;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_SERPENT_FX1;
	self->deathstate = S_SERPENT_FX_X1;
	self->sound_death = GetSoundID("SerpentFXHit");
	self->effects = EF_DL_GREEN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SERPENT_HEAD
//
//==========================================================================

void misc_SERPENT_HEAD(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 10.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->flags2 = MF2_LOGRAV;
	self->spawnstate = S_SERPENT_HEAD1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SERPENT_GIB1
//
//==========================================================================

void misc_SERPENT_GIB1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 3.0;
	self->height = 3.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_SERPENT_GIB1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SERPENT_GIB2
//
//==========================================================================

void misc_SERPENT_GIB2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 3.0;
	self->height = 3.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_SERPENT_GIB2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SERPENT_GIB3
//
//==========================================================================

void misc_SERPENT_GIB3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 3.0;
	self->height = 3.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_SERPENT_GIB3_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BISHOP
//
//==========================================================================

void misc_BISHOP(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 130;
	self->spawnhealth = self->health;
	self->radius = 22.0;
	self->height = 65.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 110;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOGRAVITY|MF_FLOAT|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL;
	self->spawnstate = S_BISHOP_LOOK1;
	self->seestate = S_BISHOP_WALK1;
	self->missilestate = S_BISHOP_ATK1;
	self->painstate = S_BISHOP_PAIN1;
	self->deathstate = S_BISHOP_DEATH1;
	self->sound_sight = GetSoundID("BishopSight");
	self->sound_active = GetSoundID("BishopActive");
	self->sound_attack = GetSoundID("BishopAttack");
	self->sound_pain = GetSoundID("BishopPain");
	self->sound_death = GetSoundID("BishopDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BISHOP_PUFF
//
//==========================================================================

void misc_BISHOP_PUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_BISHOP_PUFF1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BISHOPBLUR
//
//==========================================================================

void misc_BISHOPBLUR(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_BISHOPBLUR1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BISHOPPAINBLUR
//
//==========================================================================

void misc_BISHOPPAINBLUR(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_BISHOPPAINBLUR1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BISH_FX
//
//==========================================================================

void misc_BISH_FX(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 6.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 1;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_SEEKERMISSILE;
	self->spawnstate = S_BISHFX1_1;
	self->deathstate = S_BISHFXI1_1;
	self->sound_death = GetSoundID("BishopMissileExplode");
	self->effects = EF_DL_GREEN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DRAGON
//
//==========================================================================

void misc_DRAGON(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 640;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 65.0;
	self->mass = 99999.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 128;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOGRAVITY|MF_FLOAT|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_PASSMOBJ|MF2_BOSS;
	self->spawnstate = S_DRAGON_LOOK1;
	self->seestate = S_DRAGON_INIT;
	self->missilestate = S_DRAGON_ATK1;
	self->painstate = S_DRAGON_PAIN1;
	self->deathstate = S_DRAGON_DEATH1;
	self->sound_sight = GetSoundID("DragonSight");
	self->sound_active = GetSoundID("DragonActive");
	self->sound_attack = GetSoundID("DragonAttack");
	self->sound_pain = GetSoundID("DragonPain");
	self->sound_death = GetSoundID("DragonDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DRAGON_FX
//
//==========================================================================

void misc_DRAGON_FX(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 12.0;
	self->height = 10.0;
	self->mass = 100.0;
	self->speed = 840.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 6;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE;
	self->spawnstate = S_DRAGON_FX1_1;
	self->deathstate = S_DRAGON_FX1_X1;
	self->sound_death = GetSoundID("DragonFireballExplode");
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DRAGON_FX2
//
//==========================================================================

void misc_DRAGON_FX2(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 8.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->flags2 = MF2_NOTELEPORT|MF2_FIREDAMAGE;
	self->spawnstate = S_DRAGON_FX2_1;
	self->sound_death = GetSoundID("DragonFireballExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARMOR_1
//
//==========================================================================

void misc_ARMOR_1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARMOR_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARMOR_2
//
//==========================================================================

void misc_ARMOR_2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARMOR_2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARMOR_3
//
//==========================================================================

void misc_ARMOR_3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARMOR_3;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARMOR_4
//
//==========================================================================

void misc_ARMOR_4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_NOGRAVITY;
	self->spawnstate = S_ARMOR_4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MANA1
//
//==========================================================================

void misc_MANA1(mobj_t *self, mthing_t *mthing)
{
	self->health = 10;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 8.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_MANA1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MANA2
//
//==========================================================================

void misc_MANA2(mobj_t *self, mthing_t *mthing)
{
	self->health = 10;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 8.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_MANA2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MANA3
//
//==========================================================================

void misc_MANA3(mobj_t *self, mthing_t *mthing)
{
	self->health = 20;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 8.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->flags2 = MF2_FLOATBOB;
	self->spawnstate = S_MANA3_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEY1
//
//==========================================================================

void misc_KEY1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEY1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEY2
//
//==========================================================================

void misc_KEY2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEY2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEY3
//
//==========================================================================

void misc_KEY3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEY3;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEY4
//
//==========================================================================

void misc_KEY4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEY4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEY5
//
//==========================================================================

void misc_KEY5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEY5;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEY6
//
//==========================================================================

void misc_KEY6(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEY6;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEY7
//
//==========================================================================

void misc_KEY7(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEY7;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEY8
//
//==========================================================================

void misc_KEY8(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEY8;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEY9
//
//==========================================================================

void misc_KEY9(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEY9;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEYA
//
//==========================================================================

void misc_KEYA(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEYA;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEYB
//
//==========================================================================

void misc_KEYB(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 20.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_KEYB;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SOUNDWIND
//
//==========================================================================

void misc_SOUNDWIND(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP;
	self->spawnstate = S_SND_WIND1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SOUNDWATERFALL
//
//==========================================================================

void misc_SOUNDWATERFALL(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP;
	self->spawnstate = S_SND_WATERFALL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ETTIN
//
//==========================================================================

void misc_ETTIN(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 175;
	self->spawnhealth = self->health;
	self->gibshealth = -87;
	self->radius = 25.0;
	self->height = 68.0;
	self->mass = 175.0;
	self->speed = 455.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 60;
	self->damage = 3;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_TELESTOMP|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_ETTIN_LOOK1;
	self->seestate = S_ETTIN_CHASE1;
	self->meleestate = S_ETTIN_ATK1_1;
	self->painstate = S_ETTIN_PAIN1;
	self->deathstate = S_ETTIN_DEATH1_1;
	self->xdeathstate = S_ETTIN_DEATH2_1;
	self->sound_sight = GetSoundID("EttinSight");
	self->sound_active = GetSoundID("EttinActive");
	self->sound_attack = GetSoundID("EttinAttack");
	self->sound_pain = GetSoundID("EttinPain");
	self->sound_death = GetSoundID("EttinDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ETTIN_MACE
//
//==========================================================================

void misc_ETTIN_MACE(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_DROPOFF|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_ETTIN_MACE1;
	self->deathstate = S_ETTIN_MACE5;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREDEMON
//
//==========================================================================

void misc_FIREDEMON(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 80;
	self->spawnhealth = self->health;
	self->gibshealth = -40;
	self->radius = 20.0;
	self->height = 68.0;
	self->mass = 75.0;
	self->speed = 455.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 1;
	self->damage = 1;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOGRAVITY|MF_DROPOFF|MF_FLOAT|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL|MF2_MCROSS|MF2_INVULNERABLE;
	self->spawnstate = S_FIRED_SPAWN1;
	self->seestate = S_FIRED_LOOK4;
	self->missilestate = S_FIRED_ATTACK1;
	self->painstate = S_FIRED_PAIN1;
	self->crashstate = S_FIRED_XDEATH1;
	self->deathstate = S_FIRED_DEATH1;
	self->xdeathstate = S_FIRED_XDEATH1;
	self->sound_sight = GetSoundID("FireDemonSpawn");
	self->sound_active = GetSoundID("FireDemonActive");
	self->sound_pain = GetSoundID("FireDemonPain");
	self->sound_death = GetSoundID("FireDemonDeath");
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREDEMON_SPLOTCH1
//
//==========================================================================

void misc_FIREDEMON_SPLOTCH1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 3.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_DROPOFF|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_FIRED_CORPSE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREDEMON_SPLOTCH2
//
//==========================================================================

void misc_FIREDEMON_SPLOTCH2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 3.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_DROPOFF|MF_CORPSE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT;
	self->spawnstate = S_FIRED_CORPSE4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREDEMON_FX1
//
//==========================================================================

void misc_FIREDEMON_FX1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->gibshealth = -500;
	self->radius = 3.0;
	self->height = 5.0;
	self->mass = 16.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FIRED_RDROP1;
	self->deathstate = S_FIRED_RDEAD1_1;
	self->xdeathstate = S_FIRED_RDEAD1_2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREDEMON_FX2
//
//==========================================================================

void misc_FIREDEMON_FX2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->gibshealth = -500;
	self->radius = 3.0;
	self->height = 5.0;
	self->mass = 16.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FIRED_RDROP2;
	self->deathstate = S_FIRED_RDEAD2_1;
	self->xdeathstate = S_FIRED_RDEAD2_2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREDEMON_FX3
//
//==========================================================================

void misc_FIREDEMON_FX3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->gibshealth = -500;
	self->radius = 3.0;
	self->height = 5.0;
	self->mass = 16.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FIRED_RDROP3;
	self->deathstate = S_FIRED_RDEAD3_1;
	self->xdeathstate = S_FIRED_RDEAD3_2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREDEMON_FX4
//
//==========================================================================

void misc_FIREDEMON_FX4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->gibshealth = -500;
	self->radius = 3.0;
	self->height = 5.0;
	self->mass = 16.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FIRED_RDROP4;
	self->deathstate = S_FIRED_RDEAD4_1;
	self->xdeathstate = S_FIRED_RDEAD4_2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREDEMON_FX5
//
//==========================================================================

void misc_FIREDEMON_FX5(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->gibshealth = -500;
	self->radius = 3.0;
	self->height = 5.0;
	self->mass = 16.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_FIRED_RDROP5;
	self->deathstate = S_FIRED_RDEAD5_1;
	self->xdeathstate = S_FIRED_RDEAD5_2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIREDEMON_FX6
//
//==========================================================================

void misc_FIREDEMON_FX6(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 6.0;
	self->mass = 15.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 1;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_FLOORCLIP|MF2_NOTELEPORT|MF2_FIREDAMAGE|MF2_IMPACT|MF2_PCROSS;
	self->spawnstate = S_FIRED_FX6_1;
	self->deathstate = S_FIRED_FX6_2;
	self->sound_death = GetSoundID("FireDemonMissileHit");
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ICEGUY
//
//==========================================================================

void misc_ICEGUY(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 120;
	self->spawnhealth = self->health;
	self->radius = 22.0;
	self->height = 75.0;
	self->mass = 150.0;
	self->speed = 490.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 144;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL|MF2_MCROSS|MF2_ICEDAMAGE;
	self->spawnstate = S_ICEGUY_LOOK;
	self->seestate = S_ICEGUY_WALK1;
	self->missilestate = S_ICEGUY_ATK1;
	self->painstate = S_ICEGUY_PAIN1;
	self->deathstate = S_ICEGUY_DEATH;
	self->sound_sight = GetSoundID("IceGuySight");
	self->sound_active = GetSoundID("IceGuyActive");
	self->sound_attack = GetSoundID("IceGuyAttack");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ICEGUY_FX
//
//==========================================================================

void misc_ICEGUY_FX(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 8.0;
	self->height = 10.0;
	self->mass = 100.0;
	self->speed = 490.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 1;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_ICEDAMAGE;
	self->spawnstate = S_ICEGUY_FX1;
	self->deathstate = S_ICEGUY_FX_X1;
	self->sound_death = GetSoundID("IceGuyMissileExplode");
	self->effects = EF_DL_BLUE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ICEFX_PUFF
//
//==========================================================================

void misc_ICEFX_PUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 66;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 1.0;
	self->height = 1.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_ICEFX_PUFF1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ICEGUY_FX2
//
//==========================================================================

void misc_ICEGUY_FX2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 4.0;
	self->height = 4.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 1;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT|MF2_ICEDAMAGE;
	self->spawnstate = S_ICEGUY_FX2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ICEGUY_BIT
//
//==========================================================================

void misc_ICEGUY_BIT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 1.0;
	self->height = 1.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT;
	self->spawnstate = S_ICEGUY_BIT1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ICEGUY_WISP1
//
//==========================================================================

void misc_ICEGUY_WISP1(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_ICEGUY_WISP1_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ICEGUY_WISP2
//
//==========================================================================

void misc_ICEGUY_WISP2(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_ICEGUY_WISP2_1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIGHTER_BOSS
//
//==========================================================================

void misc_FIGHTER_BOSS(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 800;
	self->spawnhealth = self->health;
	self->gibshealth = -400;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 50;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_FIGHTER;
	self->seestate = S_FIGHTER_RUN1;
	self->meleestate = S_FIGHTER_ATK1;
	self->missilestate = S_FIGHTER_ATK1;
	self->painstate = S_FIGHTER_PAIN;
	self->deathstate = S_FIGHTER_DIE1;
	self->xdeathstate = S_FIGHTER_XDIE1;
	self->sound_pain = GetSoundID("PlayerFighterPain");
	self->sound_death = GetSoundID("PlayerFighterCrazyDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CLERIC_BOSS
//
//==========================================================================

void misc_CLERIC_BOSS(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 800;
	self->spawnhealth = self->health;
	self->gibshealth = -400;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 50;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_CLERIC;
	self->seestate = S_CLERIC_RUN1;
	self->meleestate = S_CLERIC_ATK1;
	self->missilestate = S_CLERIC_ATK1;
	self->painstate = S_CLERIC_PAIN;
	self->deathstate = S_CLERIC_DIE1;
	self->xdeathstate = S_CLERIC_XDIE1;
	self->sound_pain = GetSoundID("PlayerClericPain");
	self->sound_death = GetSoundID("PlayerClericCrazyDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MAGE_BOSS
//
//==========================================================================

void misc_MAGE_BOSS(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 800;
	self->spawnhealth = self->health;
	self->gibshealth = -400;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 50;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_TELESTOMP|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_MAGE;
	self->seestate = S_MAGE_RUN1;
	self->meleestate = S_MAGE_ATK1;
	self->missilestate = S_MAGE_ATK1;
	self->painstate = S_MAGE_PAIN;
	self->deathstate = S_MAGE_DIE1;
	self->xdeathstate = S_MAGE_XDIE1;
	self->sound_pain = GetSoundID("PlayerMagePain");
	self->sound_death = GetSoundID("PlayerMageCrazyDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCBOSS
//
//==========================================================================

void misc_SORCBOSS(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 5000;
	self->spawnhealth = self->health;
	self->radius = 40.0;
	self->height = 110.0;
	self->mass = 500.0;
	self->speed = 560.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 10;
	self->damage = 9;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_BOSS|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_SORC_SPAWN1;
	self->seestate = S_SORC_WALK1;
	self->missilestate = S_SORC_ATK2_1;
	self->painstate = S_SORC_PAIN1;
	self->deathstate = S_SORC_DIE1;
	self->sound_sight = GetSoundID("SorcererSight");
	self->sound_active = GetSoundID("SorcererActive");
	self->sound_pain = GetSoundID("SorcererPain");
	self->sound_death = GetSoundID("SorcererDeathScream");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCBALL1
//
//==========================================================================

void misc_SORCBALL1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SORCBALL1_1;
	self->painstate = S_SORCBALL1_D1;
	self->deathstate = S_SORCBALL1_D5;
	self->sound_sight = GetSoundID("SorcererBallBounce");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCBALL2
//
//==========================================================================

void misc_SORCBALL2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SORCBALL2_1;
	self->painstate = S_SORCBALL2_D1;
	self->deathstate = S_SORCBALL2_D5;
	self->sound_sight = GetSoundID("SorcererBallBounce");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCBALL3
//
//==========================================================================

void misc_SORCBALL3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SORCBALL3_1;
	self->painstate = S_SORCBALL3_D1;
	self->deathstate = S_SORCBALL3_D5;
	self->sound_sight = GetSoundID("SorcererBallBounce");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCFX1
//
//==========================================================================

void misc_SORCFX1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->gibshealth = -500;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	self->speed = 245.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_MISSILE;
	self->flags2 = MF2_FLOORBOUNCE|MF2_NOTELEPORT;
	self->spawnstate = S_SORCFX1_1;
	self->deathstate = S_SORCFX1_D1;
	self->xdeathstate = S_SORCFX1_D1;
	self->sound_sight = GetSoundID("SorcererBallBounce");
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCFX2
//
//==========================================================================

void misc_SORCFX2(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	self->speed = 525.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_SORCFX2_SPLIT1;
	self->deathstate = S_SORCFX2T1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCFX2_T1
//
//==========================================================================

void misc_SORCFX2_T1(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_SORCFX2T1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCFX3
//
//==========================================================================

void misc_SORCFX3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 22.0;
	self->height = 65.0;
	self->mass = 100.0;
	self->speed = 525.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_SORCFX3_1;
	self->deathstate = S_BISHMORPH1;
	self->sound_sight = GetSoundID("SorcererBishopSpawn");
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCFX3_EXPLOSION
//
//==========================================================================

void misc_SORCFX3_EXPLOSION(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_SORCFX3_EXP1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCFX4
//
//==========================================================================

void misc_SORCFX4(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 10.0;
	self->mass = 100.0;
	self->speed = 420.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_SORCFX4_1;
	self->deathstate = S_SORCFX4_D1;
	self->sound_death = GetSoundID("SorcererBallExplode");
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SORCSPARK1
//
//==========================================================================

void misc_SORCSPARK1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 5.0;
	self->height = 5.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_DROPOFF;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT;
	self->spawnstate = S_SORCSPARK1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BLASTEFFECT
//
//==========================================================================

void misc_BLASTEFFECT(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_NOCLIP;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_BLASTEFFECT1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_WATER_DRIP
//
//==========================================================================

void misc_WATER_DRIP(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 1.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_MISSILE;
	self->flags2 = MF2_LOGRAV|MF2_NOTELEPORT;
	self->spawnstate = S_WATERDRIP1;
	self->sound_death = GetSoundID("Drip");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KORAX
//
//==========================================================================

void misc_KORAX(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 5000;
	self->spawnhealth = self->health;
	self->radius = 65.0;
	self->height = 115.0;
	self->mass = 2000.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 20;
	self->damage = 15;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->flags2 = MF2_FLOORCLIP|MF2_BOSS|MF2_TELESTOMP|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_KORAX_LOOK1;
	self->seestate = S_KORAX_CHASE2;
	self->missilestate = S_KORAX_ATTACK1;
	self->painstate = S_KORAX_PAIN1;
	self->deathstate = S_KORAX_DEATH1;
	self->sound_sight = GetSoundID("KoraxSight");
	self->sound_active = GetSoundID("KoraxActive");
	self->sound_attack = GetSoundID("KoraxAttack");
	self->sound_pain = GetSoundID("KoraxPain");
	self->sound_death = GetSoundID("KoraxDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KORAX_SPIRIT1
//
//==========================================================================

void misc_KORAX_SPIRIT1(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_NOCLIP|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_KSPIRIT_ROAM1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KORAX_SPIRIT2
//
//==========================================================================

void misc_KORAX_SPIRIT2(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_NOCLIP|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_KSPIRIT_ROAM1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KORAX_SPIRIT3
//
//==========================================================================

void misc_KORAX_SPIRIT3(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_NOCLIP|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_KSPIRIT_ROAM1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KORAX_SPIRIT4
//
//==========================================================================

void misc_KORAX_SPIRIT4(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_NOCLIP|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_KSPIRIT_ROAM1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KORAX_SPIRIT5
//
//==========================================================================

void misc_KORAX_SPIRIT5(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_NOCLIP|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_KSPIRIT_ROAM1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KORAX_SPIRIT6
//
//==========================================================================

void misc_KORAX_SPIRIT6(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_NOCLIP|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_KSPIRIT_ROAM1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON_MASH
//
//==========================================================================

void misc_DEMON_MASH(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 33;
	self->health = 250;
	self->spawnhealth = self->health;
	self->radius = 32.0;
	self->height = 64.0;
	self->mass = 220.0;
	self->speed = 455.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 50;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_BLASTED|MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_DEMN_LOOK1;
	self->seestate = S_DEMN_CHASE1;
	self->meleestate = S_DEMN_ATK1_1;
	self->missilestate = S_DEMN_ATK2_1;
	self->painstate = S_DEMN_PAIN1;
	self->sound_sight = GetSoundID("DemonSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_attack = GetSoundID("DemonAttack");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("DemonDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON2_MASH
//
//==========================================================================

void misc_DEMON2_MASH(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 33;
	self->health = 250;
	self->spawnhealth = self->health;
	self->radius = 32.0;
	self->height = 64.0;
	self->mass = 220.0;
	self->speed = 455.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 50;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_BLASTED|MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_DEMN2_LOOK1;
	self->seestate = S_DEMN2_CHASE1;
	self->meleestate = S_DEMN2_ATK1_1;
	self->missilestate = S_DEMN2_ATK2_1;
	self->painstate = S_DEMN2_PAIN1;
	self->sound_sight = GetSoundID("DemonSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_attack = GetSoundID("DemonAttack");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("DemonDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ETTIN_MASH
//
//==========================================================================

void misc_ETTIN_MASH(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 33;
	self->health = 175;
	self->spawnhealth = self->health;
	self->radius = 25.0;
	self->height = 68.0;
	self->mass = 175.0;
	self->speed = 455.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 60;
	self->damage = 3;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_BLASTED|MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_ETTIN_LOOK1;
	self->seestate = S_ETTIN_CHASE1;
	self->meleestate = S_ETTIN_ATK1_1;
	self->painstate = S_ETTIN_PAIN1;
	self->sound_sight = GetSoundID("EttinSight");
	self->sound_active = GetSoundID("EttinActive");
	self->sound_attack = GetSoundID("EttinAttack");
	self->sound_pain = GetSoundID("EttinPain");
	self->sound_death = GetSoundID("EttinDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CENTAUR_MASH
//
//==========================================================================

void misc_CENTAUR_MASH(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 33;
	self->health = 200;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 64.0;
	self->mass = 120.0;
	self->speed = 455.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 135;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD|MF_COUNTKILL;
	self->flags2 = MF2_BLASTED|MF2_FLOORCLIP|MF2_PASSMOBJ|MF2_PUSHWALL|MF2_MCROSS;
	self->spawnstate = S_CENTAUR_LOOK1;
	self->seestate = S_CENTAUR_WALK1;
	self->meleestate = S_CENTAUR_ATK1;
	self->painstate = S_CENTAUR_PAIN1;
	self->sound_sight = GetSoundID("CentaurSight");
	self->sound_active = GetSoundID("CentaurActive");
	self->sound_attack = GetSoundID("CentaurAttack");
	self->sound_pain = GetSoundID("CentaurPain");
	self->sound_death = GetSoundID("CentaurDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KORAX_BOLT
//
//==========================================================================

void misc_KORAX_BOLT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 15.0;
	self->height = 35.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT;
	self->spawnstate = S_KBOLT1;
	self->effects = EF_DL_WHITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BAT_SPAWNER
//
//==========================================================================

void misc_BAT_SPAWNER(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 100;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_SPAWNBATS1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BAT
//
//==========================================================================

void misc_BAT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 3.0;
	self->height = 3.0;
	self->mass = 100.0;
	self->speed = 175.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_MISSILE;
	self->flags2 = MF2_NOTELEPORT|MF2_PASSMOBJ;
	self->spawnstate = S_BAT1;
	self->deathstate = S_BAT_DEATH;
	generic_mobj_start(self, mthing);
}

__mobjinfo__
{
	MT_MAPSPOT { 9001, misc_MAPSPOT }
	MT_MAPSPOTGRAVITY { 9013, misc_MAPSPOTGRAVITY }
	MT_FIREBALL1 { -1, misc_FIREBALL1 }
	MT_ARROW { -1, misc_ARROW }
	MT_DART { -1, misc_DART }
	MT_POISONDART { -1, misc_POISONDART }
	MT_RIPPERBALL { -1, misc_RIPPERBALL }
	MT_PROJECTILE_BLADE { -1, misc_PROJECTILE_BLADE }
	MT_ICESHARD { -1, misc_ICESHARD }
	MT_FLAME_SMALL_TEMP { 10500, misc_FLAME_SMALL_TEMP }
	MT_FLAME_LARGE_TEMP { 10502, misc_FLAME_LARGE_TEMP }
	MT_FLAME_SMALL { 10501, misc_FLAME_SMALL }
	MT_FLAME_LARGE { 10503, misc_FLAME_LARGE }
	MT_HEALINGBOTTLE { 81, misc_HEALINGBOTTLE }
	MT_HEALTHFLASK { 82, misc_HEALTHFLASK }
	MT_ARTIFLY { 83, misc_ARTIFLY }
	MT_ARTIINVULNERABILITY { 84, misc_ARTIINVULNERABILITY }
	MT_SUMMONMAULATOR { 86, misc_SUMMONMAULATOR }
	MT_SUMMON_FX { -1, misc_SUMMON_FX }
	MT_THRUSTFLOOR_UP { 10091, misc_THRUSTFLOOR_UP }
	MT_THRUSTFLOOR_DOWN { 10090, misc_THRUSTFLOOR_DOWN }
	MT_TELEPORTOTHER { 10040, misc_TELEPORTOTHER }
	MT_TELOTHER_FX1 { -1, misc_TELOTHER_FX1 }
	MT_TELOTHER_FX2 { -1, misc_TELOTHER_FX2 }
	MT_TELOTHER_FX3 { -1, misc_TELOTHER_FX3 }
	MT_TELOTHER_FX4 { -1, misc_TELOTHER_FX4 }
	MT_TELOTHER_FX5 { -1, misc_TELOTHER_FX5 }
	MT_DIRT1 { -1, misc_DIRT1 }
	MT_DIRT2 { -1, misc_DIRT2 }
	MT_DIRT3 { -1, misc_DIRT3 }
	MT_DIRT4 { -1, misc_DIRT4 }
	MT_DIRT5 { -1, misc_DIRT5 }
	MT_DIRT6 { -1, misc_DIRT6 }
	MT_DIRTCLUMP { -1, misc_DIRTCLUMP }
	MT_ROCK1 { -1, misc_ROCK1 }
	MT_ROCK2 { -1, misc_ROCK2 }
	MT_ROCK3 { -1, misc_ROCK3 }
	MT_FOGSPAWNER { 10000, misc_FOGSPAWNER }
	MT_FOGPATCHS { 10001, misc_FOGPATCHS }
	MT_FOGPATCHM { 10002, misc_FOGPATCHM }
	MT_FOGPATCHL { 10003, misc_FOGPATCHL }
	MT_QUAKE_FOCUS { -1, misc_QUAKE_FOCUS }
	MT_SGSHARD1 { -1, misc_SGSHARD1 }
	MT_SGSHARD2 { -1, misc_SGSHARD2 }
	MT_SGSHARD3 { -1, misc_SGSHARD3 }
	MT_SGSHARD4 { -1, misc_SGSHARD4 }
	MT_SGSHARD5 { -1, misc_SGSHARD5 }
	MT_SGSHARD6 { -1, misc_SGSHARD6 }
	MT_SGSHARD7 { -1, misc_SGSHARD7 }
	MT_SGSHARD8 { -1, misc_SGSHARD8 }
	MT_SGSHARD9 { -1, misc_SGSHARD9 }
	MT_SGSHARD0 { -1, misc_SGSHARD0 }
	MT_ARTIEGG { 30, misc_ARTIEGG }
	MT_EGGFX { -1, misc_EGGFX }
	MT_ARTISUPERHEAL { 32, misc_ARTISUPERHEAL }
	MT_ZWINGEDSTATUENOSKULL { 9011, misc_ZWINGEDSTATUENOSKULL }
	MT_ZGEMPEDESTAL { 9012, misc_ZGEMPEDESTAL }
	MT_ARTIPUZZSKULL { 9002, misc_ARTIPUZZSKULL }
	MT_ARTIPUZZGEMBIG { 9003, misc_ARTIPUZZGEMBIG }
	MT_ARTIPUZZGEMRED { 9004, misc_ARTIPUZZGEMRED }
	MT_ARTIPUZZGEMGREEN1 { 9005, misc_ARTIPUZZGEMGREEN1 }
	MT_ARTIPUZZGEMGREEN2 { 9009, misc_ARTIPUZZGEMGREEN2 }
	MT_ARTIPUZZGEMBLUE1 { 9006, misc_ARTIPUZZGEMBLUE1 }
	MT_ARTIPUZZGEMBLUE2 { 9010, misc_ARTIPUZZGEMBLUE2 }
	MT_ARTIPUZZBOOK1 { 9007, misc_ARTIPUZZBOOK1 }
	MT_ARTIPUZZBOOK2 { 9008, misc_ARTIPUZZBOOK2 }
	MT_ARTIPUZZSKULL2 { 9014, misc_ARTIPUZZSKULL2 }
	MT_ARTIPUZZFWEAPON { 9015, misc_ARTIPUZZFWEAPON }
	MT_ARTIPUZZCWEAPON { 9016, misc_ARTIPUZZCWEAPON }
	MT_ARTIPUZZMWEAPON { 9017, misc_ARTIPUZZMWEAPON }
	MT_ARTIPUZZGEAR { 9018, misc_ARTIPUZZGEAR }
	MT_ARTIPUZZGEAR2 { 9019, misc_ARTIPUZZGEAR2 }
	MT_ARTIPUZZGEAR3 { 9020, misc_ARTIPUZZGEAR3 }
	MT_ARTIPUZZGEAR4 { 9021, misc_ARTIPUZZGEAR4 }
	MT_ARTITORCH { 33, misc_ARTITORCH }
	MT_FIREBOMB { -1, misc_FIREBOMB }
	MT_ARTITELEPORT { 36, misc_ARTITELEPORT }
	MT_ARTIPOISONBAG { 8000, misc_ARTIPOISONBAG }
	MT_POISONBAG { -1, misc_POISONBAG }
	MT_POISONCLOUD { -1, misc_POISONCLOUD }
	MT_THROWINGBOMB { -1, misc_THROWINGBOMB }
	MT_SPEEDBOOTS { 8002, misc_SPEEDBOOTS }
	MT_BOOSTMANA { 8003, misc_BOOSTMANA }
	MT_BOOSTARMOR { 8041, misc_BOOSTARMOR }
	MT_BLASTRADIUS { 10110, misc_BLASTRADIUS }
	MT_HEALRADIUS { 10120, misc_HEALRADIUS }
	MT_SPLASH { -1, misc_SPLASH }
	MT_SPLASHBASE { -1, misc_SPLASHBASE }
	MT_LAVASPLASH { -1, misc_LAVASPLASH }
	MT_LAVASMOKE { -1, misc_LAVASMOKE }
	MT_SLUDGECHUNK { -1, misc_SLUDGECHUNK }
	MT_SLUDGESPLASH { -1, misc_SLUDGESPLASH }
	MT_MISC0 { 5, misc_MISC0 }
	MT_MISC1 { 6, misc_MISC1 }
	MT_MISC2 { 7, misc_MISC2 }
	MT_MISC3 { 9, misc_MISC3 }
	MT_MISC4 { 15, misc_MISC4 }
	MT_MISC5 { 17, misc_MISC5 }
	MT_MISC6 { 8063, misc_MISC6 }
	MT_MISC7 { 24, misc_MISC7 }
	MT_MISC8 { 25, misc_MISC8 }
	MT_TREEDESTRUCTIBLE { 8062, misc_TREEDESTRUCTIBLE }
	MT_MISC9 { 26, misc_MISC9 }
	MT_MISC10 { 27, misc_MISC10 }
	MT_MISC11 { 28, misc_MISC11 }
	MT_MISC12 { 29, misc_MISC12 }
	MT_MISC13 { 37, misc_MISC13 }
	MT_MISC14 { 38, misc_MISC14 }
	MT_MISC15 { 39, misc_MISC15 }
	MT_MISC16 { 40, misc_MISC16 }
	MT_MISC17 { 41, misc_MISC17 }
	MT_MISC18 { 42, misc_MISC18 }
	MT_MISC19 { 44, misc_MISC19 }
	MT_MISC20 { 45, misc_MISC20 }
	MT_MISC21 { 46, misc_MISC21 }
	MT_MISC22 { 47, misc_MISC22 }
	MT_MISC23 { 48, misc_MISC23 }
	MT_MISC24 { 49, misc_MISC24 }
	MT_MISC25 { 50, misc_MISC25 }
	MT_MISC26 { 51, misc_MISC26 }
	MT_MISC27 { 52, misc_MISC27 }
	MT_MISC28 { 56, misc_MISC28 }
	MT_MISC29 { 57, misc_MISC29 }
	MT_MISC30 { 58, misc_MISC30 }
	MT_MISC31 { 59, misc_MISC31 }
	MT_MISC32 { 60, misc_MISC32 }
	MT_MISC33 { 61, misc_MISC33 }
	MT_MISC34 { 62, misc_MISC34 }
	MT_MISC35 { 63, misc_MISC35 }
	MT_MISC36 { 64, misc_MISC36 }
	MT_MISC37 { 65, misc_MISC37 }
	MT_MISC38 { 66, misc_MISC38 }
	MT_MISC39 { 67, misc_MISC39 }
	MT_MISC40 { 68, misc_MISC40 }
	MT_MISC41 { 69, misc_MISC41 }
	MT_MISC42 { 71, misc_MISC42 }
	MT_MISC43 { 72, misc_MISC43 }
	MT_MISC44 { 73, misc_MISC44 }
	MT_MISC45 { 74, misc_MISC45 }
	MT_MISC46 { 76, misc_MISC46 }
	MT_MISC47 { 8044, misc_MISC47 }
	MT_MISC48 { 8045, misc_MISC48 }
	MT_MISC49 { 8046, misc_MISC49 }
	MT_MISC50 { 8047, misc_MISC50 }
	MT_MISC51 { 8048, misc_MISC51 }
	MT_MISC52 { 8049, misc_MISC52 }
	MT_MISC53 { 8050, misc_MISC53 }
	MT_MISC54 { 8051, misc_MISC54 }
	MT_MISC55 { 8052, misc_MISC55 }
	MT_MISC56 { 77, misc_MISC56 }
	MT_MISC57 { 78, misc_MISC57 }
	MT_MISC58 { 79, misc_MISC58 }
	MT_MISC59 { 80, misc_MISC59 }
	MT_MISC60 { 87, misc_MISC60 }
	MT_MISC61 { 88, misc_MISC61 }
	MT_MISC62 { 89, misc_MISC62 }
	MT_MISC63 { 90, misc_MISC63 }
	MT_MISC64 { 91, misc_MISC64 }
	MT_MISC65 { 92, misc_MISC65 }
	MT_MISC66 { 93, misc_MISC66 }
	MT_MISC67 { 94, misc_MISC67 }
	MT_MISC68 { 95, misc_MISC68 }
	MT_MISC69 { 96, misc_MISC69 }
	MT_MISC70 { 97, misc_MISC70 }
	MT_MISC71 { 98, misc_MISC71 }
	MT_MISC72 { 99, misc_MISC72 }
	MT_MISC73 { 100, misc_MISC73 }
	MT_MISC74 { 101, misc_MISC74 }
	MT_MISC75 { 102, misc_MISC75 }
	MT_MISC76 { 103, misc_MISC76 }
	MT_POTTERY1 { 104, misc_POTTERY1 }
	MT_POTTERY2 { 105, misc_POTTERY2 }
	MT_POTTERY3 { 106, misc_POTTERY3 }
	MT_POTTERYBIT1 { -1, misc_POTTERYBIT1 }
	MT_MISC77 { 108, misc_MISC77 }
	MT_ZLYNCHED_NOHEART { 109, misc_ZLYNCHED_NOHEART }
	MT_MISC78 { 110, misc_MISC78 }
	MT_CORPSEBIT { -1, misc_CORPSEBIT }
	MT_CORPSEBLOODDRIP { -1, misc_CORPSEBLOODDRIP }
	MT_BLOODPOOL { 111, misc_BLOODPOOL }
	MT_MISC79 { 119, misc_MISC79 }
	MT_MISC80 { 113, misc_MISC80 }
	MT_LEAF1 { -1, misc_LEAF1 }
	MT_LEAF2 { -1, misc_LEAF2 }
	MT_ZTWINEDTORCH { 116, misc_ZTWINEDTORCH }
	MT_ZTWINEDTORCH_UNLIT { 117, misc_ZTWINEDTORCH_UNLIT }
	MT_BRIDGE { 118, misc_BRIDGE }
	MT_BRIDGEBALL { -1, misc_BRIDGEBALL }
	MT_ZWALLTORCH { 54, misc_ZWALLTORCH }
	MT_ZWALLTORCH_UNLIT { 55, misc_ZWALLTORCH_UNLIT }
	MT_ZBARREL { 8100, misc_ZBARREL }
	MT_ZSHRUB1 { 8101, misc_ZSHRUB1 }
	MT_ZSHRUB2 { 8102, misc_ZSHRUB2 }
	MT_ZBUCKET { 8103, misc_ZBUCKET }
	MT_ZPOISONSHROOM { 8104, misc_ZPOISONSHROOM }
	MT_ZFIREBULL { 8042, misc_ZFIREBULL }
	MT_ZFIREBULL_UNLIT { 8043, misc_ZFIREBULL_UNLIT }
	MT_FIRETHING { 8060, misc_FIRETHING }
	MT_BRASSTORCH { 8061, misc_BRASSTORCH }
	MT_ZSUITOFARMOR { 8064, misc_ZSUITOFARMOR }
	MT_ZARMORCHUNK { -1, misc_ZARMORCHUNK }
	MT_ZBELL { 8065, misc_ZBELL }
	MT_ZBLUE_CANDLE { 8066, misc_ZBLUE_CANDLE }
	MT_ZIRON_MAIDEN { 8067, misc_ZIRON_MAIDEN }
	MT_ZXMAS_TREE { 8068, misc_ZXMAS_TREE }
	MT_ZCAULDRON { 8069, misc_ZCAULDRON }
	MT_ZCAULDRON_UNLIT { 8070, misc_ZCAULDRON_UNLIT }
	MT_ZCHAINBIT32 { 8071, misc_ZCHAINBIT32 }
	MT_ZCHAINBIT64 { 8072, misc_ZCHAINBIT64 }
	MT_ZCHAINEND_HEART { 8073, misc_ZCHAINEND_HEART }
	MT_ZCHAINEND_HOOK1 { 8074, misc_ZCHAINEND_HOOK1 }
	MT_ZCHAINEND_HOOK2 { 8075, misc_ZCHAINEND_HOOK2 }
	MT_ZCHAINEND_SPIKE { 8076, misc_ZCHAINEND_SPIKE }
	MT_ZCHAINEND_SKULL { 8077, misc_ZCHAINEND_SKULL }
	MT_TABLE_SHIT1 { 8500, misc_TABLE_SHIT1 }
	MT_TABLE_SHIT2 { 8501, misc_TABLE_SHIT2 }
	MT_TABLE_SHIT3 { 8502, misc_TABLE_SHIT3 }
	MT_TABLE_SHIT4 { 8503, misc_TABLE_SHIT4 }
	MT_TABLE_SHIT5 { 8504, misc_TABLE_SHIT5 }
	MT_TABLE_SHIT6 { 8505, misc_TABLE_SHIT6 }
	MT_TABLE_SHIT7 { 8506, misc_TABLE_SHIT7 }
	MT_TABLE_SHIT8 { 8507, misc_TABLE_SHIT8 }
	MT_TABLE_SHIT9 { 8508, misc_TABLE_SHIT9 }
	MT_TABLE_SHIT10 { 8509, misc_TABLE_SHIT10 }
	MT_TFOG { -1, misc_TFOG }
	MT_MISC81 { 140, misc_MISC81 }
	MT_TELEPORTMAN { 14, misc_TELEPORTMAN }
	MT_PUNCHPUFF { -1, misc_PUNCHPUFF }
	MT_FW_AXE { 8010, misc_FW_AXE }
	MT_AXEPUFF { -1, misc_AXEPUFF }
	MT_AXEPUFF_GLOW { -1, misc_AXEPUFF_GLOW }
	MT_AXEBLOOD { -1, misc_AXEBLOOD }
	MT_FW_HAMMER { 123, misc_FW_HAMMER }
	MT_HAMMER_MISSILE { -1, misc_HAMMER_MISSILE }
	MT_HAMMERPUFF { -1, misc_HAMMERPUFF }
	MT_FSWORD_MISSILE { -1, misc_FSWORD_MISSILE }
	MT_FSWORD_FLAME { -1, misc_FSWORD_FLAME }
	MT_CW_SERPSTAFF { 10, misc_CW_SERPSTAFF }
	MT_CSTAFF_MISSILE { -1, misc_CSTAFF_MISSILE }
	MT_CSTAFFPUFF { -1, misc_CSTAFFPUFF }
	MT_CW_FLAME { 8009, misc_CW_FLAME }
	MT_CFLAMEFLOOR { -1, misc_CFLAMEFLOOR }
	MT_FLAMEPUFF { -1, misc_FLAMEPUFF }
	MT_FLAMEPUFF2 { -1, misc_FLAMEPUFF2 }
	MT_CIRCLEFLAME { -1, misc_CIRCLEFLAME }
	MT_CFLAME_MISSILE { -1, misc_CFLAME_MISSILE }
	MT_HOLY_FX { -1, misc_HOLY_FX }
	MT_HOLY_TAIL { -1, misc_HOLY_TAIL }
	MT_HOLY_PUFF { -1, misc_HOLY_PUFF }
	MT_HOLY_MISSILE { -1, misc_HOLY_MISSILE }
	MT_HOLY_MISSILE_PUFF { -1, misc_HOLY_MISSILE_PUFF }
	MT_MWANDPUFF { -1, misc_MWANDPUFF }
	MT_MWANDSMOKE { -1, misc_MWANDSMOKE }
	MT_MWAND_MISSILE { -1, misc_MWAND_MISSILE }
	MT_MW_LIGHTNING { 8040, misc_MW_LIGHTNING }
	MT_LIGHTNING_CEILING { -1, misc_LIGHTNING_CEILING }
	MT_LIGHTNING_FLOOR { -1, misc_LIGHTNING_FLOOR }
	MT_LIGHTNING_ZAP { -1, misc_LIGHTNING_ZAP }
	MT_MSTAFF_FX { -1, misc_MSTAFF_FX }
	MT_MSTAFF_FX2 { -1, misc_MSTAFF_FX2 }
	MT_FW_SWORD1 { 12, misc_FW_SWORD1 }
	MT_FW_SWORD2 { 13, misc_FW_SWORD2 }
	MT_FW_SWORD3 { 16, misc_FW_SWORD3 }
	MT_CW_HOLY1 { 18, misc_CW_HOLY1 }
	MT_CW_HOLY2 { 19, misc_CW_HOLY2 }
	MT_CW_HOLY3 { 20, misc_CW_HOLY3 }
	MT_MW_STAFF1 { 21, misc_MW_STAFF1 }
	MT_MW_STAFF2 { 22, misc_MW_STAFF2 }
	MT_MW_STAFF3 { 23, misc_MW_STAFF3 }
	MT_SNOUTPUFF { -1, misc_SNOUTPUFF }
	MT_MW_CONE { 53, misc_MW_CONE }
	MT_SHARDFX1 { -1, misc_SHARDFX1 }
	MT_BLOOD { -1, misc_BLOOD }
	MT_BLOODSPLATTER { -1, misc_BLOODSPLATTER }
	MT_GIBS { -1, misc_GIBS }
	MT_PLAYER_FIGHTER { -1, misc_PLAYER_FIGHTER }
	MT_BLOODYSKULL { -1, misc_BLOODYSKULL }
	MT_PLAYER_SPEED { -1, misc_PLAYER_SPEED }
	MT_ICECHUNK { -1, misc_ICECHUNK }
	MT_PLAYER_CLERIC { -1, misc_PLAYER_CLERIC }
	MT_PLAYER_MAGE { -1, misc_PLAYER_MAGE }
	MT_PIGPLAYER { -1, misc_PIGPLAYER }
	MT_PIG { -1, misc_PIG }
	MT_CENTAUR { 107, misc_CENTAUR }
	MT_CENTAURLEADER { 115, misc_CENTAURLEADER }
	MT_CENTAUR_FX { -1, misc_CENTAUR_FX }
	MT_CENTAUR_SHIELD { -1, misc_CENTAUR_SHIELD }
	MT_CENTAUR_SWORD { -1, misc_CENTAUR_SWORD }
	MT_DEMON { 31, misc_DEMON }
	MT_DEMONCHUNK1 { -1, misc_DEMONCHUNK1 }
	MT_DEMONCHUNK2 { -1, misc_DEMONCHUNK2 }
	MT_DEMONCHUNK3 { -1, misc_DEMONCHUNK3 }
	MT_DEMONCHUNK4 { -1, misc_DEMONCHUNK4 }
	MT_DEMONCHUNK5 { -1, misc_DEMONCHUNK5 }
	MT_DEMONFX1 { -1, misc_DEMONFX1 }
	MT_DEMON2 { 8080, misc_DEMON2 }
	MT_DEMON2CHUNK1 { -1, misc_DEMON2CHUNK1 }
	MT_DEMON2CHUNK2 { -1, misc_DEMON2CHUNK2 }
	MT_DEMON2CHUNK3 { -1, misc_DEMON2CHUNK3 }
	MT_DEMON2CHUNK4 { -1, misc_DEMON2CHUNK4 }
	MT_DEMON2CHUNK5 { -1, misc_DEMON2CHUNK5 }
	MT_DEMON2FX1 { -1, misc_DEMON2FX1 }
	MT_WRAITHB { 10011, misc_WRAITHB }
	MT_WRAITH { 34, misc_WRAITH }
	MT_WRAITHFX1 { -1, misc_WRAITHFX1 }
	MT_WRAITHFX2 { -1, misc_WRAITHFX2 }
	MT_WRAITHFX3 { -1, misc_WRAITHFX3 }
	MT_WRAITHFX4 { -1, misc_WRAITHFX4 }
	MT_WRAITHFX5 { -1, misc_WRAITHFX5 }
	MT_MINOTAUR { 9, misc_MINOTAUR }
	MT_MNTRFX1 { -1, misc_MNTRFX1 }
	MT_MNTRFX2 { -1, misc_MNTRFX2 }
	MT_MNTRFX3 { -1, misc_MNTRFX3 }
	MT_MNTRSMOKE { -1, misc_MNTRSMOKE }
	MT_MNTRSMOKEEXIT { -1, misc_MNTRSMOKEEXIT }
	MT_SERPENT { 121, misc_SERPENT }
	MT_SERPENTLEADER { 120, misc_SERPENTLEADER }
	MT_SERPENTFX { -1, misc_SERPENTFX }
	MT_SERPENT_HEAD { -1, misc_SERPENT_HEAD }
	MT_SERPENT_GIB1 { -1, misc_SERPENT_GIB1 }
	MT_SERPENT_GIB2 { -1, misc_SERPENT_GIB2 }
	MT_SERPENT_GIB3 { -1, misc_SERPENT_GIB3 }
	MT_BISHOP { 114, misc_BISHOP }
	MT_BISHOP_PUFF { -1, misc_BISHOP_PUFF }
	MT_BISHOPBLUR { -1, misc_BISHOPBLUR }
	MT_BISHOPPAINBLUR { -1, misc_BISHOPPAINBLUR }
	MT_BISH_FX { -1, misc_BISH_FX }
	MT_DRAGON { 254, misc_DRAGON }
	MT_DRAGON_FX { -1, misc_DRAGON_FX }
	MT_DRAGON_FX2 { -1, misc_DRAGON_FX2 }
	MT_ARMOR_1 { 8005, misc_ARMOR_1 }
	MT_ARMOR_2 { 8006, misc_ARMOR_2 }
	MT_ARMOR_3 { 8007, misc_ARMOR_3 }
	MT_ARMOR_4 { 8008, misc_ARMOR_4 }
	MT_MANA1 { 122, misc_MANA1 }
	MT_MANA2 { 124, misc_MANA2 }
	MT_MANA3 { 8004, misc_MANA3 }
	MT_KEY1 { 8030, misc_KEY1 }
	MT_KEY2 { 8031, misc_KEY2 }
	MT_KEY3 { 8032, misc_KEY3 }
	MT_KEY4 { 8033, misc_KEY4 }
	MT_KEY5 { 8034, misc_KEY5 }
	MT_KEY6 { 8035, misc_KEY6 }
	MT_KEY7 { 8036, misc_KEY7 }
	MT_KEY8 { 8037, misc_KEY8 }
	MT_KEY9 { 8038, misc_KEY9 }
	MT_KEYA { 8039, misc_KEYA }
	MT_KEYB { 8200, misc_KEYB }
	MT_SOUNDWIND { 1410, misc_SOUNDWIND }
	MT_SOUNDWATERFALL { 41, misc_SOUNDWATERFALL }
	MT_ETTIN { 10030, misc_ETTIN }
	MT_ETTIN_MACE { -1, misc_ETTIN_MACE }
	MT_FIREDEMON { 10060, misc_FIREDEMON }
	MT_FIREDEMON_SPLOTCH1 { -1, misc_FIREDEMON_SPLOTCH1 }
	MT_FIREDEMON_SPLOTCH2 { -1, misc_FIREDEMON_SPLOTCH2 }
	MT_FIREDEMON_FX1 { -1, misc_FIREDEMON_FX1 }
	MT_FIREDEMON_FX2 { -1, misc_FIREDEMON_FX2 }
	MT_FIREDEMON_FX3 { -1, misc_FIREDEMON_FX3 }
	MT_FIREDEMON_FX4 { -1, misc_FIREDEMON_FX4 }
	MT_FIREDEMON_FX5 { -1, misc_FIREDEMON_FX5 }
	MT_FIREDEMON_FX6 { -1, misc_FIREDEMON_FX6 }
	MT_ICEGUY { 8020, misc_ICEGUY }
	MT_ICEGUY_FX { -1, misc_ICEGUY_FX }
	MT_ICEFX_PUFF { -1, misc_ICEFX_PUFF }
	MT_ICEGUY_FX2 { -1, misc_ICEGUY_FX2 }
	MT_ICEGUY_BIT { -1, misc_ICEGUY_BIT }
	MT_ICEGUY_WISP1 { -1, misc_ICEGUY_WISP1 }
	MT_ICEGUY_WISP2 { -1, misc_ICEGUY_WISP2 }
	MT_FIGHTER_BOSS { 10100, misc_FIGHTER_BOSS }
	MT_CLERIC_BOSS { 10101, misc_CLERIC_BOSS }
	MT_MAGE_BOSS { 10102, misc_MAGE_BOSS }
	MT_SORCBOSS { 10080, misc_SORCBOSS }
	MT_SORCBALL1 { -1, misc_SORCBALL1 }
	MT_SORCBALL2 { -1, misc_SORCBALL2 }
	MT_SORCBALL3 { -1, misc_SORCBALL3 }
	MT_SORCFX1 { -1, misc_SORCFX1 }
	MT_SORCFX2 { -1, misc_SORCFX2 }
	MT_SORCFX2_T1 { -1, misc_SORCFX2_T1 }
	MT_SORCFX3 { -1, misc_SORCFX3 }
	MT_SORCFX3_EXPLOSION { -1, misc_SORCFX3_EXPLOSION }
	MT_SORCFX4 { -1, misc_SORCFX4 }
	MT_SORCSPARK1 { -1, misc_SORCSPARK1 }
	MT_BLASTEFFECT { -1, misc_BLASTEFFECT }
	MT_WATER_DRIP { -1, misc_WATER_DRIP }
	MT_KORAX { 10200, misc_KORAX }
	MT_KORAX_SPIRIT1 { -1, misc_KORAX_SPIRIT1 }
	MT_KORAX_SPIRIT2 { -1, misc_KORAX_SPIRIT2 }
	MT_KORAX_SPIRIT3 { -1, misc_KORAX_SPIRIT3 }
	MT_KORAX_SPIRIT4 { -1, misc_KORAX_SPIRIT4 }
	MT_KORAX_SPIRIT5 { -1, misc_KORAX_SPIRIT5 }
	MT_KORAX_SPIRIT6 { -1, misc_KORAX_SPIRIT6 }
	MT_DEMON_MASH { -1, misc_DEMON_MASH }
	MT_DEMON2_MASH { -1, misc_DEMON2_MASH }
	MT_ETTIN_MASH { -1, misc_ETTIN_MASH }
	MT_CENTAUR_MASH { -1, misc_CENTAUR_MASH }
	MT_KORAX_BOLT { -1, misc_KORAX_BOLT }
	MT_BAT_SPAWNER { 10225, misc_BAT_SPAWNER }
	MT_BAT { -1, misc_BAT }
}