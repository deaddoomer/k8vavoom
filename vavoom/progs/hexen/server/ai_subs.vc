//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

int opposite[] = {
	DI_WEST, DI_SOUTHWEST, DI_SOUTH, DI_SOUTHEAST, DI_EAST, DI_NORTHEAST,
	DI_NORTH, DI_NORTHWEST, DI_NODIR
};

int diags[] = { DI_NORTHWEST, DI_NORTHEAST, DI_SOUTHWEST, DI_SOUTHEAST };

float xspeed[8] =
	{ 1.0, 0.7171630859, 0.0, -0.7171630859, -1.0, -0.7171630859, 0.0,
		0.7171630859 };
float yspeed[8] =
	{ 0.0, 0.7171630859, 1.0, 0.7171630859, 0.0, -0.7171630859, -1.0,
		-0.7171630859 };

//==========================================================================
//
//  Actor::CheckMeleeRange
//
//==========================================================================

boolean Actor::CheckMeleeRange(void)
{
	float dist;

	if (!target)
	{
		return false;
	}
	dist = MobjDist(target, this);
	if (dist >= MELEERANGE)
	{
		return false;
	}
	if (!P_CheckSight(this, target))
	{
		return false;
	}
	if (target->origin.z > origin.z + Height)
	{
		// Target is higher than the attacker
		return false;
	}
	else if (origin.z > target->origin.z + target->Height)
	{
		// Attacker is higher
		return false;
	}
	return true;
}

//==========================================================================
//
//  Actor::CheckMeleeRange2
//
//==========================================================================

boolean Actor::CheckMeleeRange2(void)
{
	float dist;

	if (!target)
	{
		return false;
	}
	dist = MobjDist(target, this);
	if (dist >= MELEERANGE * 2.0 || dist < MELEERANGE)
	{
		return false;
	}
	if (!P_CheckSight(this, target))
	{
		return false;
	}
	if (target->origin.z > origin.z + Height)
	{
		// Target is higher than the attacker
		return false;
	}
	else if (origin.z > target->origin.z + target->Height)
	{
		// Attacker is higher
		return false;
	}
	return true;
}

//==========================================================================
//
//  Actor::CheckMissileRange
//
//==========================================================================

boolean Actor::CheckMissileRange(void)
{
	float dist;

	if (!P_CheckSight(this, target))
	{
		return false;
	}
	if (Flags & MF_JUSTHIT)
	{
		// The target just hit the enemy, so fight back!
		Flags &= ~MF_JUSTHIT;
		return true;
	}
	if (ReactionCount)
	{
		// Don't attack yet
		return false;
	}
	dist = MobjDist(this, target) - 64.0;
	if (!MeleeState)
	{
		// No melee attack, so fire more frequently
		dist -= 128.0;
	}
	if (dist > 200.0)
	{
		dist = 200.0;
	}
	if (Random() * 256.0 < dist)
	{
		return false;
	}
	return true;
}

//==========================================================================
//
//  Actor::FaceMovementDirection
//
//==========================================================================

void Actor::FaceMovementDirection(void)
{
	switch (movedir)
	{
	case DI_EAST:
		angles.yaw = 0.0;
		break;
	case DI_NORTHEAST:
		angles.yaw = 45.0;
		break;
	case DI_NORTH:
		angles.yaw = 90.0;
		break;
	case DI_NORTHWEST:
		angles.yaw = 135.0;
		break;
	case DI_WEST:
		angles.yaw = 180.0;
		break;
	case DI_SOUTHWEST:
		angles.yaw = 225.0;
		break;
	case DI_SOUTH:
		angles.yaw = 270.0;
		break;
	case DI_SOUTHEAST:
		angles.yaw = 315.0;
		break;
	}
}

//============================================================================
//
//  Actor::LookForMonsters
//
//============================================================================

#define MONS_LOOK_RANGE (16.0 * 64.0)
#define MONS_LOOK_LIMIT 64

boolean Actor::LookForMonsters(void)
{
	int count;
	Actor mo;

	if (!P_CheckSight(players[0].mo, this))
	{
		// Player can't see monster
		return false;
	}
	count = 0;
	for (mo = *NextMobj(NULL); mo; mo = *NextMobj(&mo))
	{
		if (!(mo.Flags & MF_COUNTKILL) || (mo == self) || (mo.Health <= 0))
		{
			// Not a valid monster
			continue;
		}
		if (MobjDist(this, (&mo)) > MONS_LOOK_RANGE)
		{
			// Out of range
			continue;
		}
		if (P_Random() < 16)
		{
			// Skip
			continue;
		}
		if (count++ > MONS_LOOK_LIMIT)
		{
			// Stop searching
			return false;
		}
		if (!P_CheckSight(this, &mo))
		{
			// Out of sight
			continue;
		}
		if (Class == Minotaur)
		{
			if ((mo.Class == Minotaur) && (mo.target != specialmobj1))
			{
				continue;
			}
		}
		// Found a target monster
		target = &mo;
		return true;
	}
	return false;
}

//============================================================================
//
//  Actor::LookForPlayers
//
//  If allaround is false, only look 180 degrees in front
//  returns true if a player is targeted
//
//============================================================================

boolean Actor::LookForPlayers(boolean allaround)
{
	int c;
	int stop;
	player_t *P;
	float an;
	float dist;

	if (!netgame && players[0].spawned && players[0].health <= 0)
	{
		// Single player game and player is dead, look for monsters
		return LookForMonsters();
	}
	c = 0;
	stop = (lastlook - 1) & 3;
	for (;; lastlook = (lastlook + 1) & 3)
	{
		if (lastlook == stop)
			return false;	// done looking

		if (!players[lastlook].active)
			continue;

		if (c++ == 2)
			return false;	// done looking

		P = &players[lastlook];
		if (!P->spawned || !P->mo)
			continue;	//  not spawned yet
		if (P->health <= 0)
			continue;	// dead
		if (!P_CheckSight(this, P->mo))
			continue;	// out of sight

		if (!allaround)
		{
			an = AngleMod360(atan2(P->mo->origin.y - origin.y,
				P->mo->origin.x - origin.x) - angles.yaw);
			if (an > 90.0 && an < 270.0)
			{
				dist = MobjDist(P->mo, this);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}
		if (P->mo->Translucency)
		{
			// Player is invisible
			if (MobjDist(P->mo, this) > 2.0 * MELEERANGE &&
				Length(P->mo->velocity) < 5.0 * 35.0)
			{
				// Player is sneaking - can't detect
				return false;
			}
			if (P_Random() < 225)
			{
				// Player isn't sneaking, but still didn't detect
				return false;
			}
		}
		if (Class == Minotaur)
		{
			if (specialmobj1 == P->mo)
			{
				continue;	// Don't target master
			}
		}
		target = P->mo;
		return true;
	}
	return false;
}

//==========================================================================
//
//  Actor::StepMove
//
//  Move in the current direction, returns false if the move is blocked.
//
//==========================================================================

boolean Actor::StepMove(void)
{
	float tryx;
	float tryy;

	line_t *ld;
	boolean good;

	if (Flags2 & MF2_BLASTED)
		return true;
	if (movedir == DI_NODIR)
		return false;

#ifdef RANGECHECK
	if (movedir >= 8 || movedir < 0)
		Error("Weird actor->movedir!");
#endif

	tryx = origin.x + Speed * frametime * xspeed[movedir];
	tryy = origin.y + Speed * frametime * yspeed[movedir];

	if (!P_TryMove(this, tryx, tryy))
	{
		// open any specials
		if (Flags & MF_FLOAT && floatok)
		{
			// must adjust height
			if (origin.z < saved_tmfloorz)
				origin.z += FLOATSPEED * frametime;
			else
				origin.z -= FLOATSPEED * frametime;

			Flags |= MF_INFLOAT;
			return true;
		}

		if (!numspechit)
			return false;

		movedir = DI_NODIR;
		good = false;
		while (numspechit--)
		{
			ld = spechit[numspechit];
			// if the special is not a door
			// that can be opened,
			// return false
			if (P_ActivateLine(ld, this, 0, SPAC_USE))
			{
				good = true;
			}
		}
		return good;
	}
	else
	{
		Flags &= ~MF_INFLOAT;
	}

	if (!(Flags & MF_FLOAT))
	{
		if (origin.z > floorz)
		{
			P_HitFloor(this);
		}
		origin.z = floorz;
	}
	return true;
}

//==========================================================================
//
//  Actor::TryWalk
//
//  Attempts to move actor in its current (ob->moveangle) direction.
//  If blocked by either a wall or an actor returns FALSE.
//  If move is either clear of block only by a door, returns TRUE and sets.
//  If a door is in the way, an OpenDoor call is made to start it opening.
//
//==========================================================================

boolean Actor::TryWalk(void)
{
	if (!StepMove())
	{
		return false;
	}
	movecount = P_Random() & 15;
	return true;
}

//============================================================================
//
//  Actor::NewChaseDir
//
//============================================================================

void Actor::NewChaseDir(void)
{
	float deltax, deltay;
	int d[3];
	int tdir, olddir, turnaround;

	if (!target)
		Error("NewChaseDir: called with no target");

	olddir = movedir;
	turnaround = opposite[olddir];

	deltax = target->origin.x - origin.x;
	deltay = target->origin.y - origin.y;
	if (deltax > 10.0)
		d[1] = DI_EAST;
	else if (deltax < -10.0)
		d[1] = DI_WEST;
	else
		d[1] = DI_NODIR;
	if (deltay < -10.0)
		d[2] = DI_SOUTH;
	else if (deltay > 10.0)
		d[2] = DI_NORTH;
	else
		d[2] = DI_NODIR;

	// try direct route
	if (d[1] != DI_NODIR && d[2] != DI_NODIR)
	{
		movedir = diags[((deltay < 0.0) << 1) + (deltax > 0.0)];
		if (movedir != turnaround && TryWalk())
			return;
	}

	// try other directions
	if (P_Random() > 200 || fabs(deltay) > fabs(deltax))
	{
		tdir = d[1];
		d[1] = d[2];
		d[2] = tdir;
	}

	if (d[1] == turnaround)
		d[1] = DI_NODIR;
	if (d[2] == turnaround)
		d[2] = DI_NODIR;

	if (d[1] != DI_NODIR)
	{
		movedir = d[1];
		if (TryWalk())
			return;	/*either moved forward or attacked */
	}

	if (d[2] != DI_NODIR)
	{
		movedir = d[2];
		if (TryWalk())
			return;
	}

	/* there is no direct path to the player, so pick another direction */

	if (olddir != DI_NODIR)
	{
		movedir = olddir;
		if (TryWalk())
			return;
	}

	if (P_Random() & 1)	/*randomly determine direction of search */
	{
		for (tdir = DI_EAST; tdir <= DI_SOUTHEAST; tdir++)
		{
			if (tdir != turnaround)
			{
				movedir = tdir;
				if (TryWalk())
					return;
			}
		}
	}
	else
	{
		for (tdir = DI_SOUTHEAST; tdir >= DI_EAST; tdir--)
		{
			if (tdir != turnaround)
			{
				movedir = tdir;
				if (TryWalk())
					return;
			}
		}
	}

	if (turnaround != DI_NODIR)
	{
		movedir = turnaround;
		if (TryWalk())
			return;
	}

	movedir = DI_NODIR;	// can't move
}

//===========================================================================
//
//  Actor::RoughBlockCheck
//
//===========================================================================

Actor Actor::RoughBlockCheck(int index)
{
	Actor link;
	float angle;

	link = *BlockLink(index);
	while (link)
	{
		if (player)	// Minotaur looking around player
		{
			if ((link.Flags & MF_COUNTKILL) ||
				(link.player && (link != self)))
			{
				if (!(link.Flags & MF_SHOOTABLE))
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if (link.Flags2 & MF2_DORMANT)
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if ((link.Class == Minotaur) &&
					(*link.specialmobj1 == self))
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if (netgame && !deathmatch && link.player)
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if (P_CheckSight(this, &link))
				{
					return link;
				}
			}
			link = Actor(link.BlockMapNext);
		}
		else if (Class == Minotaur)	// looking around minotaur
		{
			if ((link.Flags & MF_COUNTKILL) ||
				(link.player && (link != *specialmobj1)))
			{
				if (!(link.Flags & MF_SHOOTABLE))
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if (link.Flags2 & MF2_DORMANT)
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if ((link.Class == Minotaur) &&
					(link.specialmobj1 == specialmobj1))
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if (netgame && !deathmatch && link.player)
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if (P_CheckSight(this, &link))
				{
					return link;
				}
			}
			link = Actor(link.BlockMapNext);
		}
		else if (Class == MageStaffFX2)	// bloodscourge
		{
			if ((link.Flags & MF_COUNTKILL ||
					(link.player && link != *target))
				&& !(link.Flags2 & MF2_DORMANT))
			{
				if (!(link.Flags & MF_SHOOTABLE))
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if (netgame && !deathmatch && link.player)
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				else if (P_CheckSight(this, &link))
				{
					angle = AngleMod360(atan2(
						link.origin.y - target->origin.y,
						link.origin.x - target->origin.x) -
						target->angles.yaw);
					if (angle > 226.0 * 360.0 / 256.0 ||
						angle < 30.0 * 360.0 / 256.0)
					{
						return link;
					}
				}
			}
			link = Actor(link.BlockMapNext);
		}
		else	// spirits
		{
			if ((link.Flags & MF_COUNTKILL ||
					(link.player && link != *target))
				&& !(link.Flags2 & MF2_DORMANT))
			{
				if (!(link.Flags & MF_SHOOTABLE))
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if (netgame && !deathmatch && link.player)
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				if (link == *target)
				{
					link = Actor(link.BlockMapNext);
					continue;
				}
				else if (P_CheckSight(this, &link))
				{
					return link;
				}
			}
			link = Actor(link.BlockMapNext);
		}
	}
	return none;
}

//===========================================================================
//
//	Actor::RoughMonsterSearch
//
//	Searches though the surrounding mapblocks for monsters/players
//      distance is in MAPBLOCKUNITS
//
//===========================================================================

Actor Actor::RoughMonsterSearch(int distance)
{
	int blockX;
	int blockY;
	int startX, startY;
	int blockIndex;
	int firstStop;
	int secondStop;
	int thirdStop;
	int finalStop;
	int count;
	Actor newEnemy;

	startX = MapBlock(origin.x - level->bmaporgx);
	startY = MapBlock(origin.y - level->bmaporgy);

	if (startX >= 0 && startX < level->bmapwidth && startY >= 0
		&& startY < level->bmapheight)
	{
		newEnemy = RoughBlockCheck(startY * level->bmapwidth + startX);
		if (newEnemy)
		{
			// found a target right away
			return newEnemy;
		}
	}
	for (count = 1; count <= distance; count++)
	{
		blockX = startX - count;
		blockY = startY - count;

		if (blockY < 0)
		{
			blockY = 0;
		}
		else if (blockY >= level->bmapheight)
		{
			blockY = level->bmapheight - 1;
		}
		if (blockX < 0)
		{
			blockX = 0;
		}
		else if (blockX >= level->bmapwidth)
		{
			blockX = level->bmapwidth - 1;
		}
		blockIndex = blockY * level->bmapwidth + blockX;
		firstStop = startX + count;
		if (firstStop < 0)
		{
			continue;
		}
		if (firstStop >= level->bmapwidth)
		{
			firstStop = level->bmapwidth - 1;
		}
		secondStop = startY + count;
		if (secondStop < 0)
		{
			continue;
		}
		if (secondStop >= level->bmapheight)
		{
			secondStop = level->bmapheight - 1;
		}
		thirdStop = secondStop * level->bmapwidth + blockX;
		secondStop = secondStop * level->bmapwidth + firstStop;
		firstStop += blockY * level->bmapwidth;
		finalStop = blockIndex;

		// Trace the first block section (along the top)
		for (; blockIndex <= firstStop; blockIndex++)
		{
			newEnemy = RoughBlockCheck(blockIndex);
			if (newEnemy)
			{
				return newEnemy;
			}
		}
		// Trace the second block section (right edge)
		for (blockIndex--; blockIndex <= secondStop;
			blockIndex += level->bmapwidth)
		{
			newEnemy = RoughBlockCheck(blockIndex);
			if (newEnemy)
			{
				return newEnemy;
			}
		}
		// Trace the third block section (bottom edge)
		for (blockIndex -= level->bmapwidth; blockIndex >= thirdStop;
			blockIndex--)
		{
			newEnemy = RoughBlockCheck(blockIndex);
			if (newEnemy)
			{
				return newEnemy;
			}
		}
		// Trace the final block section (left edge)
		for (blockIndex++; blockIndex > finalStop;
			blockIndex -= level->bmapwidth)
		{
			newEnemy = RoughBlockCheck(blockIndex);
			if (newEnemy)
			{
				return newEnemy;
			}
		}
	}
	return none;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.10  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.9  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
