//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

int opposite[] = {
	DI_WEST, DI_SOUTHWEST, DI_SOUTH, DI_SOUTHEAST, DI_EAST, DI_NORTHEAST,
	DI_NORTH, DI_NORTHWEST, DI_NODIR
};

int diags[] = { DI_NORTHWEST, DI_NORTHEAST, DI_SOUTHWEST, DI_SOUTHEAST };

//==========================================================================
//
//  CheckMeleeRange
//
//==========================================================================

int CheckMeleeRange(mobj_t * actor)
{
	mobj_t *mo;
	float dist;

	if (!actor->target)
	{
		return false;
	}
	mo = actor->target;
	dist = MobjDist(mo, actor);
	if (dist >= MELEERANGE)
	{
		return false;
	}
	if (!P_CheckSight(actor, mo))
	{
		return false;
	}
	if (mo->origin.z > actor->origin.z + actor->height)
	{
		// Target is higher than the attacker
		return false;
	}
	else if (actor->origin.z > mo->origin.z + mo->height)
	{
		// Attacker is higher
		return false;
	}
	return true;
}

//==========================================================================
//
//  CheckMeleeRange2
//
//==========================================================================

int CheckMeleeRange2(mobj_t * actor)
{
	mobj_t *mo;
	float dist;

	if (!actor->target)
	{
		return false;
	}
	mo = actor->target;
	dist = MobjDist(mo, actor);
	if (dist >= MELEERANGE * 2.0 || dist < MELEERANGE)
	{
		return false;
	}
	if (!P_CheckSight(actor, mo))
	{
		return false;
	}
	if (mo->origin.z > actor->origin.z + actor->height)
	{
		// Target is higher than the attacker
		return false;
	}
	else if (actor->origin.z > mo->origin.z + mo->height)
	{
		// Attacker is higher
		return false;
	}
	return true;
}

//==========================================================================
//
//  CheckMissileRange
//
//==========================================================================

int CheckMissileRange(mobj_t * actor)
{
	float dist;

	if (!P_CheckSight(actor, actor->target))
	{
		return false;
	}
	if (actor->flags & MF_JUSTHIT)
	{
		// The target just hit the enemy, so fight back!
		actor->flags &= ~MF_JUSTHIT;
		return true;
	}
	if (actor->reactiontime)
	{
		// Don't attack yet
		return (false);
	}
	dist = MobjDist(actor, actor->target) - 64.0;
	if (!actor->meleestate)
	{
		// No melee attack, so fire more frequently
		dist -= 128.0;
	}
	if (dist > 200.0)
	{
		dist = 200.0;
	}
	if (Random() * 256.0 < dist)
	{
		return false;
	}
	return true;
}

//==========================================================================
//
//  FaceMovementDirection
//
//==========================================================================

void FaceMovementDirection(mobj_t * actor)
{
	switch (actor->movedir)
	{
	case DI_EAST:
		actor->angles.yaw = 0.0;
		break;
	case DI_NORTHEAST:
		actor->angles.yaw = 45.0;
		break;
	case DI_NORTH:
		actor->angles.yaw = 90.0;
		break;
	case DI_NORTHWEST:
		actor->angles.yaw = 135.0;
		break;
	case DI_WEST:
		actor->angles.yaw = 180.0;
		break;
	case DI_SOUTHWEST:
		actor->angles.yaw = 225.0;
		break;
	case DI_SOUTH:
		actor->angles.yaw = 270.0;
		break;
	case DI_SOUTHEAST:
		actor->angles.yaw = 315.0;
		break;
	}
}

//============================================================================
//
//  P_LookForMonsters
//
//============================================================================

#define MONS_LOOK_RANGE (16.0 * 64.0)
#define MONS_LOOK_LIMIT 64

boolean P_LookForMonsters(mobj_t * actor)
{
	int count;
	mobj_t *mo;

	if (!P_CheckSight(players[0].mo, actor))
	{	// Player can't see monster
		return (false);
	}
	count = 0;
	for (mo = NextMobj(NULL); mo; mo = NextMobj(mo))
	{
		if (!(mo->flags & MF_COUNTKILL) || (mo == actor) || (mo->health <= 0))
		{	// Not a valid monster
			continue;
		}
		if (MobjDist(actor, mo) > MONS_LOOK_RANGE)
		{	// Out of range
			continue;
		}
		if (P_Random() < 16)
		{	// Skip
			continue;
		}
		if (count++ > MONS_LOOK_LIMIT)
		{	// Stop searching
			return false;
		}
		if (!P_CheckSight(actor, mo))
		{	// Out of sight
			continue;
		}
		if (actor->Class == MT_MINOTAUR)
		{
			if ((mo->Class == MT_MINOTAUR) &&
				(mo->target != actor->specialmobj1))
			{
				continue;
			}
		}
		// Found a target monster
		actor->target = mo;
		return true;
	}
	return false;
}

//============================================================================
//
//  P_LookForPlayers
//
//  If allaround is false, only look 180 degrees in front
//  returns true if a player is targeted
//
//============================================================================

boolean P_LookForPlayers(mobj_t * actor, boolean allaround)
{
	int c;
	int stop;
	player_t *player;
	sector_t *sector;
	float an;
	float dist;

	if (!netgame && players[0].spawned && players[0].health <= 0)
	{	// Single player game and player is dead, look for monsters
		return P_LookForMonsters(actor);
	}
	sector = actor->subsector->sector;
	c = 0;
	stop = (actor->lastlook - 1) & 3;
	for (;; actor->lastlook = (actor->lastlook + 1) & 3)
	{
		if (actor->lastlook == stop)
			return false;	// done looking

		if (!players[actor->lastlook].active)
			continue;

		if (c++ == 2)
			return false;	// done looking

		player = &players[actor->lastlook];
		if (!player->spawned || !player->mo)
			continue;	//  not spawned yet
		if (player->health <= 0)
			continue;	// dead
		if (!P_CheckSight(actor, player->mo))
			continue;	// out of sight

		if (!allaround)
		{
			an = AngleMod360(atan2(player->mo->origin.y - actor->origin.y,
				player->mo->origin.x - actor->origin.x) - actor->angles.yaw);
			if (an > 90.0 && an < 270.0)
			{
				dist = MobjDist(player->mo, actor);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}
		if (player->mo->translucency)
		{
			// Player is invisible
			if (MobjDist(player->mo, actor) > 2.0 * MELEERANGE &&
				Length(player->mo->velocity) < 5.0 * 35.0)
			{	// Player is sneaking - can't detect
				return false;
			}
			if (P_Random() < 225)
			{	// Player isn't sneaking, but still didn't detect
				return false;
			}
		}
		if (actor->Class == MT_MINOTAUR)
		{
			if (actor->specialmobj1 == player->mo)
			{
				continue;	// Don't target master
			}
		}
		actor->target = player->mo;
		return true;
	}
	return false;
}

//============================================================================
//
//  P_TryWalk
//
//  Attempts to move actor in its current (ob->moveangle) direction.
//  If blocked by either a wall or an actor returns FALSE.
//  If move is either clear of block only by a door, returns TRUE and sets.
//  If a door is in the way, an OpenDoor call is made to start it opening.
//
//----------------------------------------------------------------------------

boolean P_TryWalk(mobj_t * actor)
{
	if (!P_Move(actor))
	{
		return false;
	}
	actor->movecount = P_Random() & 15;
	return true;
}

//============================================================================
//
//  P_NewChaseDir
//
//============================================================================

void P_NewChaseDir(mobj_t * actor)
{
	float deltax, deltay;
	int d[3];
	int tdir, olddir, turnaround;

	if (!actor->target)
		Error("P_NewChaseDir: called with no target");

	olddir = actor->movedir;
	turnaround = opposite[olddir];

	deltax = actor->target->origin.x - actor->origin.x;
	deltay = actor->target->origin.y - actor->origin.y;
	if (deltax > 10.0)
		d[1] = DI_EAST;
	else if (deltax < -10.0)
		d[1] = DI_WEST;
	else
		d[1] = DI_NODIR;
	if (deltay < -10.0)
		d[2] = DI_SOUTH;
	else if (deltay > 10.0)
		d[2] = DI_NORTH;
	else
		d[2] = DI_NODIR;

// try direct route
	if (d[1] != DI_NODIR && d[2] != DI_NODIR)
	{
		actor->movedir = diags[((deltay < 0.0) << 1) + (deltax > 0.0)];
		if (actor->movedir != turnaround && P_TryWalk(actor))
			return;
	}

// try other directions
	if (P_Random() > 200 || fabs(deltay) > fabs(deltax))
	{
		tdir = d[1];
		d[1] = d[2];
		d[2] = tdir;
	}

	if (d[1] == turnaround)
		d[1] = DI_NODIR;
	if (d[2] == turnaround)
		d[2] = DI_NODIR;

	if (d[1] != DI_NODIR)
	{
		actor->movedir = d[1];
		if (P_TryWalk(actor))
			return;	/*either moved forward or attacked */
	}

	if (d[2] != DI_NODIR)
	{
		actor->movedir = d[2];
		if (P_TryWalk(actor))
			return;
	}

/* there is no direct path to the player, so pick another direction */

	if (olddir != DI_NODIR)
	{
		actor->movedir = olddir;
		if (P_TryWalk(actor))
			return;
	}

	if (P_Random() & 1)	/*randomly determine direction of search */
	{
		for (tdir = DI_EAST; tdir <= DI_SOUTHEAST; tdir++)
		{
			if (tdir != turnaround)
			{
				actor->movedir = tdir;
				if (P_TryWalk(actor))
					return;
			}
		}
	}
	else
	{
		for (tdir = DI_SOUTHEAST; tdir >= DI_EAST; tdir--)
		{
			if (tdir != turnaround)
			{
				actor->movedir = tdir;
				if (P_TryWalk(actor))
					return;
			}
		}
	}

	if (turnaround != DI_NODIR)
	{
		actor->movedir = turnaround;
		if (P_TryWalk(actor))
			return;
	}

	actor->movedir = DI_NODIR;	// can't move
}

//===========================================================================
//
//  RoughBlockCheck
//
//===========================================================================

mobj_t *RoughBlockCheck(mobj_t * mo, int index)
{
	mobj_t *link;
	mobj_t *master;
	float angle;

	link = BlockLink(index);
	while (link)
	{
		if (mo->player)	// Minotaur looking around player
		{
			if ((link->flags & MF_COUNTKILL) ||
				(link->player && (link != mo)))
			{
				if (!(link->flags & MF_SHOOTABLE))
				{
					link = link->bnext;
					continue;
				}
				if (link->flags2 & MF2_DORMANT)
				{
					link = link->bnext;
					continue;
				}
				if ((link->Class == MT_MINOTAUR) &&
					((link->specialmobj1) == mo))
				{
					link = link->bnext;
					continue;
				}
				if (netgame && !deathmatch && link->player)
				{
					link = link->bnext;
					continue;
				}
				if (P_CheckSight(mo, link))
				{
					return link;
				}
			}
			link = link->bnext;
		}
		else if (mo->Class == MT_MINOTAUR)	// looking around minotaur
		{
			master = mo->specialmobj1;
			if ((link->flags & MF_COUNTKILL) ||
				(link->player && (link != master)))
			{
				if (!(link->flags & MF_SHOOTABLE))
				{
					link = link->bnext;
					continue;
				}
				if (link->flags2 & MF2_DORMANT)
				{
					link = link->bnext;
					continue;
				}
				if ((link->Class == MT_MINOTAUR) &&
					(link->specialmobj1 == mo->specialmobj1))
				{
					link = link->bnext;
					continue;
				}
				if (netgame && !deathmatch && link->player)
				{
					link = link->bnext;
					continue;
				}
				if (P_CheckSight(mo, link))
				{
					return link;
				}
			}
			link = link->bnext;
		}
		else if (mo->Class == MT_MSTAFF_FX2)	// bloodscourge
		{
			if ((link->flags & MF_COUNTKILL ||
					(link->player && link != mo->target))
				&& !(link->flags2 & MF2_DORMANT))
			{
				if (!(link->flags & MF_SHOOTABLE))
				{
					link = link->bnext;
					continue;
				}
				if (netgame && !deathmatch && link->player)
				{
					link = link->bnext;
					continue;
				}
				else if (P_CheckSight(mo, link))
				{
					master = mo->target;
					angle = AngleMod360(atan2(
						link->origin.y - master->origin.y,
						link->origin.x - master->origin.x) -
						master->angles.yaw);
					if (angle > 226.0 * 360.0 / 256.0 ||
						angle < 30.0 * 360.0 / 256.0)
					{
						return link;
					}
				}
			}
			link = link->bnext;
		}
		else	// spirits
		{
			if ((link->flags & MF_COUNTKILL ||
					(link->player && link != mo->target))
				&& !(link->flags2 & MF2_DORMANT))
			{
				if (!(link->flags & MF_SHOOTABLE))
				{
					link = link->bnext;
					continue;
				}
				if (netgame && !deathmatch && link->player)
				{
					link = link->bnext;
					continue;
				}
				if (link == mo->target)
				{
					link = link->bnext;
					continue;
				}
				else if (P_CheckSight(mo, link))
				{
					return link;
				}
			}
			link = link->bnext;
		}
	}
	return NULL;
}

//===========================================================================
//
// P_RoughMonsterSearch
//
// Searches though the surrounding mapblocks for monsters/players
//      distance is in MAPBLOCKUNITS
//===========================================================================

mobj_t *P_RoughMonsterSearch(mobj_t * mo, int distance)
{
	int blockX;
	int blockY;
	int startX, startY;
	int blockIndex;
	int firstStop;
	int secondStop;
	int thirdStop;
	int finalStop;
	int count;
	mobj_t *target;

	startX = MapBlock(mo->origin.x - level->bmaporgx);
	startY = MapBlock(mo->origin.y - level->bmaporgy);

	if (startX >= 0 && startX < level->bmapwidth && startY >= 0
		&& startY < level->bmapheight)
	{
		if ((target =
				RoughBlockCheck(mo, startY * level->bmapwidth + startX)))
		{	// found a target right away
			return target;
		}
	}
	for (count = 1; count <= distance; count++)
	{
		blockX = startX - count;
		blockY = startY - count;

		if (blockY < 0)
		{
			blockY = 0;
		}
		else if (blockY >= level->bmapheight)
		{
			blockY = level->bmapheight - 1;
		}
		if (blockX < 0)
		{
			blockX = 0;
		}
		else if (blockX >= level->bmapwidth)
		{
			blockX = level->bmapwidth - 1;
		}
		blockIndex = blockY * level->bmapwidth + blockX;
		firstStop = startX + count;
		if (firstStop < 0)
		{
			continue;
		}
		if (firstStop >= level->bmapwidth)
		{
			firstStop = level->bmapwidth - 1;
		}
		secondStop = startY + count;
		if (secondStop < 0)
		{
			continue;
		}
		if (secondStop >= level->bmapheight)
		{
			secondStop = level->bmapheight - 1;
		}
		thirdStop = secondStop * level->bmapwidth + blockX;
		secondStop = secondStop * level->bmapwidth + firstStop;
		firstStop += blockY * level->bmapwidth;
		finalStop = blockIndex;

		// Trace the first block section (along the top)
		for (; blockIndex <= firstStop; blockIndex++)
		{
			if ((target = RoughBlockCheck(mo, blockIndex)))
			{
				return target;
			}
		}
		// Trace the second block section (right edge)
		for (blockIndex--; blockIndex <= secondStop;
			blockIndex += level->bmapwidth)
		{
			if ((target = RoughBlockCheck(mo, blockIndex)))
			{
				return target;
			}
		}
		// Trace the third block section (bottom edge)
		for (blockIndex -= level->bmapwidth; blockIndex >= thirdStop;
			blockIndex--)
		{
			if ((target = RoughBlockCheck(mo, blockIndex)))
			{
				return target;
			}
		}
		// Trace the final block section (left edge)
		for (blockIndex++; blockIndex > finalStop;
			blockIndex -= level->bmapwidth)
		{
			if ((target = RoughBlockCheck(mo, blockIndex)))
			{
				return target;
			}
		}
	}
	return NULL;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
