//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	Korax
//
// Korax Scripts (reserved)
//  249     Tell scripts that we are below half health
//  250-254 Control scripts
//  255     Death script
//
// Korax TIDs (reserved)
//  245     Reserved for Korax himself
//  248     Initial teleport destination
//  249     Teleport destination
//  250-254 For use in respective control scripts
//  255     For use in death script (spawn spots)
//
// Arm projectiles
//      arm positions numbered:
//          1   top left
//          2   middle left
//          3   lower left
//          4   top right
//          5   middle right
//          6   lower right
//
//**************************************************************************

class Korax:Pawn
	__mobjinfo__(10200)
{

#define KORAX_FIRST_TELEPORT_TID	(248)
#define KORAX_TELEPORT_TID			(249)

#define KORAX_DELTAANGLE			85.0
#define KORAX_ARM_EXTENSION_SHORT	40.0
#define KORAX_ARM_EXTENSION_LONG	55.0

#define KORAX_ARM1_HEIGHT			108.0
#define KORAX_ARM2_HEIGHT			82.0
#define KORAX_ARM3_HEIGHT			54.0
#define KORAX_ARM4_HEIGHT			104.0
#define KORAX_ARM5_HEIGHT			86.0
#define KORAX_ARM6_HEIGHT			53.0

#define KORAX_COMMAND_HEIGHT		120.0
#define KORAX_COMMAND_OFFSET		27.0

#define KORAX_BOLT_HEIGHT			48.0
#define KORAX_BOLT_LIFETIME			3

#define KORAX_SPIRIT_LIFETIME		(5*(35/5))	// 5 seconds

//
// Korax Variables
//
//  Special1    last teleport destination
bool bDidBelowHalfHealth;	//  set if "below half" script not yet run

int KoraxMissileState;
int KoraxCommandState;

//============================================================================
//
//  A_KoraxStep
//
//============================================================================

void A_KoraxStep(void)
{
	A_Chase();
}

//============================================================================
//
//  A_KoraxStep2
//
//============================================================================

void A_KoraxStep2(void)
{
	PlayFullVolumeSound('KoraxStep', CHAN_BODY);
	A_Chase();
}

//============================================================================
//
//  A_KoraxChase
//
//============================================================================

void A_KoraxChase(void)
{
	Actor spot;
	int search;
	int args[3];

	args[0] = 0;
	args[1] = 0;
	args[2] = 0;
	if (!bDidBelowHalfHealth && (Health <= (SpawnHealth / 2)))
	{
		search = 0;
		spot = FindMobjFromTID(KORAX_FIRST_TELEPORT_TID, &search);
		if (spot)
		{
			Teleport(spot.Origin, spot.Angles.yaw, true);
		}

		StartACS(249, 0, &args[0], self, NULL, 0);
		bDidBelowHalfHealth = true;	// Don't run again

		return;
	}

	if (!Enemy)
		return;
	if (P_Random() < 30)
	{
		SetState(MissileState);
	}
	else if (P_Random() < 30)
	{
		PlayFullVolumeSound('KoraxActive', CHAN_VOICE);
	}

	// Teleport away
	if (Health < (SpawnHealth >> 1))
	{
		if (P_Random() < 10)
		{
			spot = FindMobjFromTID(KORAX_TELEPORT_TID, &_Special1);
			if (spot)
			{
				Teleport(spot.Origin, spot.Angles.yaw, true);
			}
		}
	}
}

//============================================================================
//
//  A_KoraxDecide
//
//============================================================================

void A_KoraxDecide(void)
{
	if (P_Random() < 220)
	{
		SetState(KoraxMissileState);
	}
	else
	{
		SetState(KoraxCommandState);
	}
}

//============================================================================
// Arm 1 projectile
//============================================================================

void KoraxFire1(classid type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw - KORAX_DELTAANGLE);
	x = Origin.x + KORAX_ARM_EXTENSION_SHORT * cos(ang);
	y = Origin.y + KORAX_ARM_EXTENSION_SHORT * sin(ang);
	z = Origin.z - FloorClip + KORAX_ARM1_HEIGHT;
	SpawnKoraxMissile(vector(x, y, z), Enemy, type);
}

//============================================================================
// Arm 2 projectile
//============================================================================

void KoraxFire2(classid type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw - KORAX_DELTAANGLE);
	x = Origin.x + KORAX_ARM_EXTENSION_LONG * cos(ang);
	y = Origin.y + KORAX_ARM_EXTENSION_LONG * sin(ang);
	z = Origin.z - FloorClip + KORAX_ARM2_HEIGHT;
	SpawnKoraxMissile(vector(x, y, z), Enemy, type);
}

//============================================================================
// Arm 3 projectile
//============================================================================

void KoraxFire3(classid type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw - KORAX_DELTAANGLE);
	x = Origin.x + KORAX_ARM_EXTENSION_LONG * cos(ang);
	y = Origin.y + KORAX_ARM_EXTENSION_LONG * sin(ang);
	z = Origin.z - FloorClip + KORAX_ARM3_HEIGHT;
	SpawnKoraxMissile(vector(x, y, z), Enemy, type);
}

//============================================================================
// Arm 4 projectile
//============================================================================

void KoraxFire4(classid type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw + KORAX_DELTAANGLE);
	x = Origin.x + KORAX_ARM_EXTENSION_SHORT * cos(ang);
	y = Origin.y + KORAX_ARM_EXTENSION_SHORT * sin(ang);
	z = Origin.z - FloorClip + KORAX_ARM4_HEIGHT;
	SpawnKoraxMissile(vector(x, y, z), Enemy, type);
}

//============================================================================
// Arm 5 projectile
//============================================================================

void KoraxFire5(classid type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw + KORAX_DELTAANGLE);
	x = Origin.x + KORAX_ARM_EXTENSION_LONG * cos(ang);
	y = Origin.y + KORAX_ARM_EXTENSION_LONG * sin(ang);
	z = Origin.z - FloorClip + KORAX_ARM5_HEIGHT;
	SpawnKoraxMissile(vector(x, y, z), Enemy, type);
}

//============================================================================
// Arm 6 projectile
//============================================================================

void KoraxFire6(classid type)
{
	float ang;
	float x, y, z;

	ang = AngleMod360(Angles.yaw + KORAX_DELTAANGLE);
	x = Origin.x + KORAX_ARM_EXTENSION_LONG * cos(ang);
	y = Origin.y + KORAX_ARM_EXTENSION_LONG * sin(ang);
	z = Origin.z - FloorClip + KORAX_ARM6_HEIGHT;
	SpawnKoraxMissile(vector(x, y, z), Enemy, type);
}

//============================================================================
//
//  A_KoraxMissile
//
//============================================================================

void A_KoraxMissile(void)
{
	classid mtype;
	name sound;

	PlaySound('KoraxAttack', CHAN_VOICE);

	switch (P_Random() % 6)
	{
	case 0:
		mtype = WraithMissile;
		sound = 'WraithMissileFire';
		break;
	case 1:
		mtype = DemonMissile;
		sound = 'DemonMissileFire';
		break;
	case 2:
		mtype = Demon2Missile;
		sound = 'DemonMissileFire';
		break;
	case 3:
		mtype = FireDemonMissile;
		sound = 'FireDemonAttack';
		break;
	case 4:
		mtype = CentaurMissile;
		sound = 'CentaurLeaderAttack';
		break;
	case 5:
		mtype = SerpentMissile;
		sound = 'CentaurLeaderAttack';
		break;
	}

	// Fire all 6 missiles at once
	PlayFullVolumeSound(sound, CHAN_VOICE);
	KoraxFire1(mtype);
	KoraxFire2(mtype);
	KoraxFire3(mtype);
	KoraxFire4(mtype);
	KoraxFire5(mtype);
	KoraxFire6(mtype);
}

//============================================================================
// Call action code scripts (250-254)
//============================================================================

void A_KoraxCommand(void)
{
	float x, y, z;
	float ang;
	int numcommands;
	int args[3];

	args[0] = 0;
	args[1] = 0;
	args[2] = 0;
	PlaySound('KoraxCommand', CHAN_VOICE);

	// Shoot stream of lightning to ceiling
	ang = AngleMod360(Angles.yaw - 90.0);
	x = Origin.x + KORAX_COMMAND_OFFSET * cos(ang);
	y = Origin.y + KORAX_COMMAND_OFFSET * sin(ang);
	z = Origin.z + KORAX_COMMAND_HEIGHT;
	Spawn(KoraxBolt, vector(x, y, z));

	if (Health <= (SpawnHealth >> 1))
	{
		numcommands = 5;
	}
	else
	{
		numcommands = 4;
	}

	switch (P_Random() % numcommands)
	{
	case 0:
		StartACS(250, 0, &args[0], self, NULL, 0);
		break;
	case 1:
		StartACS(251, 0, &args[0], self, NULL, 0);
		break;
	case 2:
		StartACS(252, 0, &args[0], self, NULL, 0);
		break;
	case 3:
		StartACS(253, 0, &args[0], self, NULL, 0);
		break;
	case 4:
		StartACS(254, 0, &args[0], self, NULL, 0);
		break;
	}
}

//============================================================================
//
//  A_KoraxBonePop
//
//============================================================================

void A_KoraxBonePop(void)
{
	Actor mo;
	int args[3];

	args[0] = 0;
	args[1] = 0;
	args[2] = 0;
	// Spawn 6 spirits equalangularly
	mo = SpawnMissileAngle(KoraxSpirit1, 60.0 * 0.0, 5.0 * 35.0);
	if (mo)
		mo.KSpiritInit(self);
	mo = SpawnMissileAngle(KoraxSpirit2, 60.0 * 1.0, 5.0 * 35.0);
	if (mo)
		mo.KSpiritInit(self);
	mo = SpawnMissileAngle(KoraxSpirit3, 60.0 * 2.0, 5.0 * 35.0);
	if (mo)
		mo.KSpiritInit(self);
	mo = SpawnMissileAngle(KoraxSpirit4, 60.0 * 3.0, 5.0 * 35.0);
	if (mo)
		mo.KSpiritInit(self);
	mo = SpawnMissileAngle(KoraxSpirit5, 60.0 * 4.0, 5.0 * 35.0);
	if (mo)
		mo.KSpiritInit(self);
	mo = SpawnMissileAngle(KoraxSpirit6, 60.0 * 5.0, 5.0 * 35.0);
	if (mo)
		mo.KSpiritInit(self);

	StartACS(255, 0, &args[0], self, NULL, 0);	// Death script
}

__states__
{
	S_KORAX_LOOK1('KORX', 0, 5.0 / 35.0, S_KORAX_LOOK1) { A_Look(); }
	S_KORAX_CHASE1('KORX', 0, 3.0 / 35.0, S_KORAX_CHASE2) { A_KoraxStep2(); }
	S_KORAX_CHASE2('KORX', 0, 3.0 / 35.0, S_KORAX_CHASE3) { A_KoraxChase(); }
	S_KORAX_CHASE3('KORX', 0, 3.0 / 35.0, S_KORAX_CHASE4) { A_KoraxChase(); }
	S_KORAX_CHASE4('KORX', 0, 3.0 / 35.0, S_KORAX_CHASE5) { A_KoraxChase(); }
	S_KORAX_CHASE5('KORX', 1, 3.0 / 35.0, S_KORAX_CHASE6) { A_KoraxStep(); }
	S_KORAX_CHASE6('KORX', 1, 3.0 / 35.0, S_KORAX_CHASE7) { A_KoraxChase(); }
	S_KORAX_CHASE7('KORX', 1, 3.0 / 35.0, S_KORAX_CHASE8) { A_KoraxChase(); }
	S_KORAX_CHASE8('KORX', 1, 3.0 / 35.0, S_KORAX_CHASE9) { A_KoraxChase(); }
	S_KORAX_CHASE9('KORX', 2, 3.0 / 35.0, S_KORAX_CHASE0) { A_KoraxStep2(); }
	S_KORAX_CHASE0('KORX', 2, 3.0 / 35.0, S_KORAX_CHASEA) { A_KoraxChase(); }
	S_KORAX_CHASEA('KORX', 2, 3.0 / 35.0, S_KORAX_CHASEB) { A_KoraxChase(); }
	S_KORAX_CHASEB('KORX', 2, 3.0 / 35.0, S_KORAX_CHASEC) { A_KoraxChase(); }
	S_KORAX_CHASEC('KORX', 3, 3.0 / 35.0, S_KORAX_CHASED) { A_KoraxStep(); }
	S_KORAX_CHASED('KORX', 3, 3.0 / 35.0, S_KORAX_CHASEE) { A_KoraxChase(); }
	S_KORAX_CHASEE('KORX', 3, 3.0 / 35.0, S_KORAX_CHASEF) { A_KoraxChase(); }
	S_KORAX_CHASEF('KORX', 3, 3.0 / 35.0, S_KORAX_CHASE1) { A_KoraxChase(); }
	S_KORAX_PAIN1('KORX', 7, 5.0 / 35.0, S_KORAX_PAIN2) { A_Pain(); }
	S_KORAX_PAIN2('KORX', 7, 5.0 / 35.0, S_KORAX_CHASE2) { }
	S_KORAX_ATTACK1('KORX', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_KORAX_ATTACK2) { A_FaceTarget(); }
	S_KORAX_ATTACK2('KORX', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_KORAX_ATTACK2) { A_KoraxDecide(); }
	S_KORAX_MISSILE1('KORX', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_KORAX_MISSILE2) { A_FaceTarget(); }
	S_KORAX_MISSILE2('KORX', 5 | FF_FULLBRIGHT, 8.0 / 35.0, S_KORAX_MISSILE3) { A_KoraxMissile(); }
	S_KORAX_MISSILE3('KORX', 4 | FF_FULLBRIGHT, 8.0 / 35.0, S_KORAX_CHASE2) { }
	S_KORAX_COMMAND1('KORX', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_KORAX_COMMAND2) { A_FaceTarget(); }
	S_KORAX_COMMAND2('KORX', 22 | FF_FULLBRIGHT, 10.0 / 35.0, S_KORAX_COMMAND3) { A_FaceTarget(); }
	S_KORAX_COMMAND3('KORX', 6 | FF_FULLBRIGHT, 15.0 / 35.0, S_KORAX_COMMAND4) { A_KoraxCommand(); }
	S_KORAX_COMMAND4('KORX', 22 | FF_FULLBRIGHT, 10.0 / 35.0, S_KORAX_COMMAND5) { }
	S_KORAX_COMMAND5('KORX', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_KORAX_CHASE2) { }
	S_KORAX_DEATH1('KORX', 8, 5.0 / 35.0, S_KORAX_DEATH2) { }
	S_KORAX_DEATH2('KORX', 9, 5.0 / 35.0, S_KORAX_DEATH3) { A_FaceTarget(); }
	S_KORAX_DEATH3('KORX', 10, 5.0 / 35.0, S_KORAX_DEATH4) { A_Scream(); }
	S_KORAX_DEATH4('KORX', 11, 5.0 / 35.0, S_KORAX_DEATH5) { }
	S_KORAX_DEATH5('KORX', 12, 5.0 / 35.0, S_KORAX_DEATH6) { }
	S_KORAX_DEATH6('KORX', 13, 5.0 / 35.0, S_KORAX_DEATH7) { }
	S_KORAX_DEATH7('KORX', 14, 5.0 / 35.0, S_KORAX_DEATH8) { }
	S_KORAX_DEATH8('KORX', 15, 5.0 / 35.0, S_KORAX_DEATH9) { }
	S_KORAX_DEATH9('KORX', 16, 10.0 / 35.0, S_KORAX_DEATH0) { }
	S_KORAX_DEATH0('KORX', 17, 5.0 / 35.0, S_KORAX_DEATHA) { A_KoraxBonePop(); }
	S_KORAX_DEATHA('KORX', 18, 5.0 / 35.0, S_KORAX_DEATHB) { A_NoBlocking(); }
	S_KORAX_DEATHB('KORX', 19, 5.0 / 35.0, S_KORAX_DEATHC) { }
	S_KORAX_DEATHC('KORX', 20, 5.0 / 35.0, S_KORAX_DEATHD) { }
	S_KORAX_DEATHD('KORX', 21, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 5000;
	Radius = 65.0;
	Height = 115.0;
	Mass = 2000.0;
	StepSpeed = 10.0;
	PainChance = 20;
	MissileDamage = 15;
	bNoPassMobj = true;
	bBoss = true;
	IdleState = S_KORAX_LOOK1;
	SeeState = S_KORAX_CHASE2;
	MissileState = S_KORAX_ATTACK1;
	KoraxMissileState = S_KORAX_MISSILE1;
	KoraxCommandState = S_KORAX_COMMAND1;
	PainState = S_KORAX_PAIN1;
	DeathState = S_KORAX_DEATH1;
	SightSound = 'KoraxSight';
	ActiveSound = 'KoraxActive';
	AttackSound = 'KoraxAttack';
	PainSound = 'KoraxPain';
	DeathSound = 'KoraxDeath';
}

}

//**************************************************************************
//**************************************************************************

//============================================================================
//
//  Actor::KSpiritInit
//
//============================================================================

void Actor::KSpiritInit(Actor korax)
{
	int i;
	Actor tail;
	Actor next;

	Health = KORAX_SPIRIT_LIFETIME;

	Enemy = korax;	// Swarm around korax
	_Special2 = 32 + (P_Random() & 7);	// Float bob index
	Args[0] = 10;	// initial turn value
	Args[1] = 0;	// initial look angle

	// Spawn a tail for spirit
	tail = Spawn(HolyTail, Origin);
	tail.SpecialMobj2 = this;	// parent
	for (i = 1; i < 3; i++)
	{
		next = Spawn(HolyTail, Origin);
		next.SetState(next.IdleState + 1);
		tail._SpecialMobj1 = &next;
		tail = next;
	}
	tail._SpecialMobj1 = NULL;	// last tail bit
}

//============================================================================
//
//  Actor::A_KSpiritSeeker
//
//============================================================================

void Actor::A_KSpiritSeeker(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;
	float newZ;
	float deltaZ;

	if (Enemy == none)
	{
		return;
	}
	dir = FaceActor(Enemy, &delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw = AngleMod360(Angles.yaw + delta);
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw = AngleMod360(Angles.yaw - delta);
	}
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);

	if (!(level->tictime & 15) ||
		Origin.z > Enemy.Origin.z + Enemy.Height ||
		Origin.z + Height < Enemy.Origin.z)
	{
		newZ = Enemy.Origin.z + Random() * Enemy.Height;
		deltaZ = newZ - Origin.z;
		if (fabs(deltaZ) > 15.0)
		{
			if (deltaZ > 0.0)
			{
				deltaZ = 15.0;
			}
			else
			{
				deltaZ = -15.0;
			}
		}
		dist = MobjDist2(Enemy, self);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = deltaZ / dist;
	}
	return;
}

//============================================================================
//
//  Actor::A_KSpiritWeave
//
//============================================================================

void Actor::A_KSpiritWeave(void)
{
	float newX, newY;
	int weaveXY, weaveZ;
	float angle;

	weaveXY = _Special2 >> 16;
	weaveZ = _Special2 & 0xFFFF;
	angle = AngleMod360(Angles.yaw + 90.0);
	newX = Origin.x - cos(angle) * FloatBobOffsets[weaveXY] * 4.0;
	newY = Origin.y - sin(angle) * FloatBobOffsets[weaveXY] * 4.0;
	weaveXY = (weaveXY + (P_Random() % 5)) & 63;
	newX += cos(angle) * FloatBobOffsets[weaveXY] * 4.0;
	newY += sin(angle) * FloatBobOffsets[weaveXY] * 4.0;
	TryMove(vector(newX, newY, Origin.z));
	Origin.z -= FloatBobOffsets[weaveZ] * 2.0;
	weaveZ = (weaveZ + (P_Random() % 5)) & 63;
	Origin.z += FloatBobOffsets[weaveZ] * 2.0;
	_Special2 = weaveZ + (weaveXY << 16);
}

//============================================================================
//
//  Actor::A_KSpiritRoam
//
//============================================================================

void Actor::A_KSpiritRoam(void)
{
	if (Health-- <= 0)
	{
		PlaySound('SpiritDie', CHAN_VOICE);
		SetState(S_KSPIRIT_DEATH1);
	}
	else
	{
		if (Enemy)
		{
			A_KSpiritSeeker(itof(Args[0]), itof(Args[0]) * 2.0);
		}
		A_KSpiritWeave();
		if (P_Random() < 50)
		{
			PlayFullVolumeSound('SpiritActive', CHAN_VOICE);
		}
	}
}

//============================================================================
//
//  Actor::A_KBoltRaise
//
//============================================================================

void Actor::A_KBoltRaise(void)
{
	Actor A;
	float z;

	// Spawn a child upward
	z = Origin.z + KORAX_BOLT_HEIGHT;

	if (z + KORAX_BOLT_HEIGHT < CeilingZ)
	{
		A = Spawn(KoraxBolt, vector(Origin.x, Origin.y, z));
		if (A)
		{
			A._Special1 = KORAX_BOLT_LIFETIME;
		}
	}
	else
	{
		// Maybe cap it off here
	}
}

//============================================================================
//
//  Actor::A_KBolt
//
//============================================================================

void Actor::A_KBolt(void)
{
	// Countdown lifetime
	if (_Special1-- <= 0)
	{
		SetState(S_NULL);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.23  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.22  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.21  2002/04/11 16:52:15  dj_jl
//  Made TryMove native.
//
//  Revision 1.20  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.19  2002/03/16 17:47:46  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.18  2002/03/02 17:58:36  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.17  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.16  2002/02/22 18:00:22  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.15  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.14  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.13  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.12  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.11  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
