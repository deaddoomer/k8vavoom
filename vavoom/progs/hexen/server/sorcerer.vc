//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//============================================================================
//
//  Sorcerer stuff
//
// Sorcerer Variables
//      special1f       Angle of ball 1 (all others relative to that)
//      special2        which ball to stop at in stop mode (MT_???)
//      args[0]         Denfense time
//      args[1]         Number of full rotations since stopping mode
//      args[2]         Target orbit speed for acceleration/deceleration
//      args[3]         Movement mode (see SORC_ macros)
//      args[4]         Current ball orbit speed
//  Sorcerer Ball Variables
//      special1f       Previous angle of ball (for woosh)
//      special2        Countdown of rapid fire (FX4)
//      args[0]         If set, don't play the bounce sound when bouncing
//============================================================================

// MACROS ------------------------------------------------------------------

#define SORCBALL_INITIAL_SPEED 		7
#define SORCBALL_TERMINAL_SPEED		25
#define SORCBALL_SPEED_ROTATIONS 	5
#define SORCFX4_RAPIDFIRE_TIME		(6*3)	// 3 seconds
#define SORCFX4_SPREAD_ANGLE		20.0
#define SORC_DEFENSE_TIME			255
#define SORC_DEFENSE_HEIGHT			45.0
#define BOUNCE_TIME_UNIT			(35/2)

#define SORC_DECELERATE		0
#define SORC_ACCELERATE 	1
#define SORC_STOPPING		2
#define SORC_FIRESPELL		3
#define SORC_STOPPED		4
#define SORC_NORMAL			5
#define SORC_FIRING_SPELL	6

#define BALL1_ANGLEOFFSET	0.0
#define BALL2_ANGLEOFFSET	120.0
#define BALL3_ANGLEOFFSET	240.0

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//	Set balls to speed mode - actor is sorcerer
//
//============================================================================

void Actor::A_SpeedBalls(void)
{
	args[3] = SORC_ACCELERATE;	// speed mode
	args[2] = SORCBALL_TERMINAL_SPEED;	// target speed
}

//============================================================================
//
// Set balls to slow mode - actor is sorcerer
//
//============================================================================

void Actor::A_SlowBalls(void)
{
	args[3] = SORC_DECELERATE;	// slow mode
	args[2] = SORCBALL_INITIAL_SPEED;	// target speed
}

//============================================================================
//
//  Actor::A_SorcSpinBalls
//
//  Spawn spinning balls above head - actor is sorcerer.
//
//============================================================================

void Actor::A_SorcSpinBalls(void)
{
	mobj_t *mo;
	float z;

	A_SlowBalls();
	args[0] = 0;	// Currently no defense
	args[3] = SORC_NORMAL;
	args[4] = SORCBALL_INITIAL_SPEED;	// Initial orbit speed
	special1f = 1.0;
	z = origin.z - floorclip + Height;

	mo = P_SpawnMobj(origin.x, origin.y, z, SorcererBall1);
	if (mo)
	{
		mo->target = this;
		mo->special2 = SORCFX4_RAPIDFIRE_TIME;
	}
	mo = P_SpawnMobj(origin.x, origin.y, z, SorcererBall2);
	if (mo)
		mo->target = this;
	mo = P_SpawnMobj(origin.x, origin.y, z, SorcererBall3);
	if (mo)
		mo->target = this;
}

//============================================================================
//
//  Actor::A_StopBalls
//
//  Instant stop when rotation gets to ball in special2
// actor is sorcerer
//
//============================================================================

void Actor::A_StopBalls(void)
{
	int chance = P_Random();

	args[3] = SORC_STOPPING;	// stopping mode
	args[1] = 0;	// Reset rotation counter

	if ((args[0] <= 0) && (chance < 200))
	{
		specialcid = SorcererBall2;	// Blue
	}
	else if ((Health < (spawnhealth >> 1)) && (chance < 200))
	{
		specialcid = SorcererBall3;	// Green
	}
	else
	{
		specialcid = SorcererBall1;	// Yellow
	}
}

//============================================================================
//
//  Actor::A_AccelBalls
//
//  Increase ball orbit speed - actor is ball
//
//============================================================================

void Actor::A_AccelBalls(void)
{
	mobj_t *sorc = target;

	if (sorc->args[4] < sorc->args[2])
	{
		sorc->args[4]++;
	}
	else
	{
		sorc->args[3] = SORC_NORMAL;
		if (sorc->args[4] >= SORCBALL_TERMINAL_SPEED)
		{
			// Reached terminal velocity - stop balls
			sorc->A_StopBalls();
		}
	}
}

//============================================================================
//
//  Actor::A_DecelBalls
//
//  Decrease ball orbit speed - actor is ball
//
//============================================================================

void Actor::A_DecelBalls(void)
{
	mobj_t *sorc = target;

	if (sorc->args[4] > sorc->args[2])
	{
		sorc->args[4]--;
	}
	else
	{
		sorc->args[3] = SORC_NORMAL;
	}
}

//============================================================================
//
//  Actor::A_SorcUpdateBallAngle
//
//  Update angle if first ball - actor is ball
//
//============================================================================

void Actor::A_SorcUpdateBallAngle(void)
{
	if (Class == SorcererBall1)
	{
		target->special1f = AngleMod360(target->special1f +
			itof(target->args[4]));
	}
}

//============================================================================
//
//  Actor::A_SorcOffense1
//
//  Actor is ball.
//
//============================================================================

void Actor::A_SorcOffense1(void)
{
	mobj_t *mo;
	float ang1, ang2;
	mobj_t *parent = target;

	ang1 = AngleMod360(angles.yaw + 70.0);
	ang2 = AngleMod360(angles.yaw - 70.0);
	mo = SpawnMissileAngle(parent, SorcererFX1, ang1, 0.0);
	if (mo)
	{
		mo->target = parent;
		mo->specialmobj1 = parent->target;
		mo->args[4] = BOUNCE_TIME_UNIT;
		mo->args[3] = 15;	// Bounce time in seconds
	}
	mo = SpawnMissileAngle(parent, SorcererFX1, ang2, 0.0);
	if (mo)
	{
		mo->target = parent;
		mo->specialmobj1 = parent->target;
		mo->args[4] = BOUNCE_TIME_UNIT;
		mo->args[3] = 15;	// Bounce time in seconds
	}
}

//============================================================================
//
//  Actor::A_SorcOffense2
//
//  Actor is ball
//
//============================================================================

void Actor::A_SorcOffense2(void)
{
	float ang1;
	mobj_t *mo;
	float delta, index;
	mobj_t *parent = target;
	mobj_t *dest = parent->target;
	float dist;

	index = itof(args[4]) * 360.0 / 256.0;
	args[4] = (args[4] + 15) & 0xff;
	delta = sin(index) * SORCFX4_SPREAD_ANGLE;
	ang1 = AngleMod360(angles.yaw + delta);
	mo = SpawnMissileAngle(parent, SorcererFX4, ang1, 0.0);
	if (mo)
	{
		mo->special2 = 35 * 5 / 2;	// 5 seconds
		dist = MobjDist2(*dest, *mo);
		dist = dist / mo->Speed;
		if (dist < 1.0)
			dist = 1.0;
		mo->velocity.z = (dest->origin.z - mo->origin.z) / dist;
	}
}

//============================================================================
//
//  Actor::A_CastSorcererSpell
//
//  Actor is ball.
//
//============================================================================

void Actor::A_CastSorcererSpell(void)
{
	mobj_t *mo;
	classid spell = Class;
	float ang1, ang2;
	float z;
	mobj_t *parent = target;

	StartSoundName(none, 'SorcererSpellCast', CHAN_VOICE);

	// Put sorcerer into throw spell animation
	if (parent->Health > 0)
		parent->SetStateNF(S_SORC_ATTACK4);

	switch (spell)
	{
	case SorcererBall1:	// Offensive
		A_SorcOffense1();
		break;
	case SorcererBall2:	// Defensive
		z = parent->origin.z - parent->floorclip + SORC_DEFENSE_HEIGHT;
		mo = P_SpawnMobj(origin.x, origin.y, z, SorcererFX2);
		parent->Flags2 |= MF2_REFLECTIVE | MF2_INVULNERABLE;
		parent->args[0] = SORC_DEFENSE_TIME;
		if (mo)
			mo->target = parent;
		break;
	case SorcererBall3:	// Reinforcements
		ang1 = AngleMod360(angles.yaw - 45.0);
		ang2 = AngleMod360(angles.yaw + 45.0);
		if (Health < (spawnhealth / 3))
		{	// Spawn 2 at a time
			mo = SpawnMissileAngle(parent, SorcererFX3, ang1, 4.0);
			if (mo)
				mo->target = parent;
			mo = SpawnMissileAngle(parent, SorcererFX3, ang2, 4.0);
			if (mo)
				mo->target = parent;
		}
		else
		{
			if (P_Random() < 128)
				ang1 = ang2;
			mo = SpawnMissileAngle(parent, SorcererFX3, ang1, 4.0);
			if (mo)
				mo->target = parent;
		}
		break;
	default:
		break;
	}
}

//============================================================================
//
//  Actor::A_SorcBallOrbit
//
//============================================================================

void Actor::A_SorcBallOrbit(void)
{
	float x, y;
	float angle, baseangle;
	int mode = target->args[3];
	mobj_t *parent = target;
	float dist = parent->Radius - (Radius * 2.0);
	float prevangle = special1f;

	if (target->Health <= 0)
		SetState(PainState);

	baseangle = parent->special1f;
	switch (Class)
	{
	case SorcererBall1:
		angle = AngleMod360(baseangle + BALL1_ANGLEOFFSET);
		break;
	case SorcererBall2:
		angle = AngleMod360(baseangle + BALL2_ANGLEOFFSET);
		break;
	case SorcererBall3:
		angle = AngleMod360(baseangle + BALL3_ANGLEOFFSET);
		break;
	default:
//		I_Error("corrupted sorcerer");
		break;
	}
	angles.yaw = angle;

	switch (mode)
	{
	case SORC_NORMAL:	// Balls rotating normally
		A_SorcUpdateBallAngle();
		break;
	case SORC_DECELERATE:	// Balls decelerating
		A_DecelBalls();
		A_SorcUpdateBallAngle();
		break;
	case SORC_ACCELERATE:	// Balls accelerating
		A_AccelBalls();
		A_SorcUpdateBallAngle();
		break;
	case SORC_STOPPING:	// Balls stopping
		if ((parent->specialcid == Class) &&
			(parent->args[1] > SORCBALL_SPEED_ROTATIONS) &&
			(fabs(AngleMod180(angle - parent->angles.yaw)) <
			15.0 * 45.0 / 16.0))
		{
			// Can stop now
			target->args[3] = SORC_FIRESPELL;
			target->args[4] = 0;
			// Set angle so ball angle == sorcerer angle
			switch (Class)
			{
			case SorcererBall1:
				parent->special1f = AngleMod360(parent->angles.yaw -
					BALL1_ANGLEOFFSET);
				break;
			case SorcererBall2:
				parent->special1f = AngleMod360(parent->angles.yaw -
					BALL2_ANGLEOFFSET);
				break;
			case SorcererBall3:
				parent->special1f = AngleMod360(parent->angles.yaw -
					BALL3_ANGLEOFFSET);
				break;
			default:
				break;
			}
		}
		else
		{
			A_SorcUpdateBallAngle();
		}
		break;
	case SORC_FIRESPELL:	// Casting spell
		if (parent->specialcid == Class)
		{
			// Put sorcerer into special throw spell anim
			if (parent->Health > 0)
				parent->SetStateNF(S_SORC_ATTACK1);

			if (Class == SorcererBall1 && P_Random() < 200)
			{
				StartSoundName(none, 'SorcererSpellCast', CHAN_VOICE);
				special2 = SORCFX4_RAPIDFIRE_TIME;
				args[4] = 128;
				parent->args[3] = SORC_FIRING_SPELL;
			}
			else
			{
				A_CastSorcererSpell();
				parent->args[3] = SORC_STOPPED;
			}
		}
		break;
	case SORC_FIRING_SPELL:
		if (parent->specialcid == Class)
		{
			if (special2-- <= 0)
			{
				// Done rapid firing 
				parent->args[3] = SORC_STOPPED;
				// Back to orbit balls
				if (parent->Health > 0)
					parent->SetStateNF(S_SORC_ATTACK4);
			}
			else
			{
				// Do rapid fire spell
				A_SorcOffense2();
			}
		}
		break;
	case SORC_STOPPED:	// Balls stopped
	default:
		break;
	}

	if ((angle < prevangle) && (parent->args[4] == SORCBALL_TERMINAL_SPEED))
	{
		parent->args[1]++;	// Bump rotation counter
		// Completed full rotation - make woosh sound
		StartSoundName(none, 'SorcererBallWoosh', CHAN_VOICE);
	}
	special1f = angle;	// Set previous angle
	x = parent->origin.x + dist * cos(angle);
	y = parent->origin.y + dist * sin(angle);
	origin.x = x;
	origin.y = y;
	origin.z = parent->origin.z - parent->floorclip + parent->Height;
}

//============================================================================
//
//  Actor::A_SorcBossAttack
//
//  Resume ball spinning
//
//============================================================================

void Actor::A_SorcBossAttack(void)
{
	args[3] = SORC_ACCELERATE;
	args[2] = SORCBALL_INITIAL_SPEED;
}

//============================================================================
//
//  Actor::A_SpawnFizzle
//
//  Spell cast magic fizzle
//
//============================================================================

void Actor::A_SpawnFizzle(void)
{
	float x, y, z;
	float dist = 5.0;
	float angle = angles.yaw;
	float rangle;
	mobj_t *mo;
	int ix;

	x = origin.x + dist * cos(angle);
	y = origin.y + dist * sin(angle);
	z = origin.z - floorclip + Height / 2.0;
	for (ix = 0; ix < 5; ix++)
	{
		mo = P_SpawnMobj(x, y, z, SorcererSpark);
		if (mo)
		{
			rangle = angle + Random() * 5.0 * 90.0 / 1024.0;
			mo->velocity.x = Random() * Speed * cos(rangle);
			mo->velocity.y = Random() * Speed * sin(rangle);
			mo->velocity.z = 2.0 * 35.0;
		}
	}
}

//============================================================================
//
//  Actor::A_SorcBallPop
//
//  Ball death - spawn stuff.
//
//============================================================================

void Actor::A_SorcBallPop(void)
{
	StartSoundName(none, 'SorcererBallPop', CHAN_VOICE);
	Flags &= ~MF_NOGRAVITY;
	Flags2 |= MF2_LOGRAV;
	velocity.x = (Random() * 10.0 - 5.0) * 35.0;
	velocity.y = (Random() * 10.0 - 5.0) * 35.0;
	velocity.z = (2.0 + Random() * 3.0) * 35.0;
	//Not used
//	special2 = 4 * FRACUNIT;     // Initial bounce factor
	args[4] = BOUNCE_TIME_UNIT;	// Bounce time unit
	args[3] = 5;	// Bounce time in seconds
}

//============================================================================
//
//  Actor::A_BounceCheck
//
//============================================================================

void Actor::A_BounceCheck(void)
{
	if (args[4]-- <= 0)
	{
		if (args[3]-- <= 0)
		{
			SetState(DeathState);
			switch (Class)
			{
			case SorcererBall1:
			case SorcererBall2:
			case SorcererBall3:
				StartSoundName(none, 'SorcererBigBallExplode', CHAN_VOICE);
				break;
			case SorcererFX1:
				StartSoundName(none, 'SorcererHeadScream', CHAN_VOICE);
				break;
			default:
				break;
			}
		}
		else
		{
			args[4] = BOUNCE_TIME_UNIT;
		}
	}
}

//============================================================================
//
//  Actor::A_SorcFX1Seek
//
//  Yellow spell - offense
//
//============================================================================

void Actor::A_SorcFX1Seek(void)
{
	A_BounceCheck();
	SeekerMissile(this, 2.0, 6.0);
}

//============================================================================
// Blue spell - defense
//============================================================================
//
// FX2 Variables
//      special1f       current angle
//      special2
//      args[0]     0 = CW,  1 = CCW
//      args[1]     
//============================================================================

//============================================================================
//
//  Actor::A_SorcFX2Split
//
//  Split ball in two
//
//============================================================================

void Actor::A_SorcFX2Split(void)
{
	mobj_t *mo;

	mo = P_SpawnMobj(origin.x, origin.y, origin.z, SorcererFX2);
	if (mo)
	{
		mo->target = target;
		mo->args[0] = 0;	// CW
		mo->special1f = angles.yaw;	// Set angle
		mo->SetStateNF(S_SORCFX2_ORBIT1);
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z, SorcererFX2);
	if (mo)
	{
		mo->target = target;
		mo->args[0] = 1;	// CCW
		mo->special1f = angles.yaw;	// Set angle
		mo->SetStateNF(S_SORCFX2_ORBIT1);
	}
	SetState(S_NULL);
}

//============================================================================
//
//  Actor::A_SorcFX2Orbit
//
//  Orbit FX2 about sorcerer
//
//============================================================================

void Actor::A_SorcFX2Orbit(void)
{
	float angle;
	float x, y, z;
	mobj_t *parent = target;
	float dist = parent->Radius;

	if ((parent->Health <= 0) ||	// Sorcerer is dead
		(!parent->args[0]))	// Time expired
	{
		SetStateNF(DeathState);
		parent->args[0] = 0;
		parent->Flags2 &= ~MF2_REFLECTIVE;
		parent->Flags2 &= ~MF2_INVULNERABLE;
	}

	if (args[0] && (parent->args[0]-- <= 0))	// Time expired
	{
		SetStateNF(DeathState);
		parent->args[0] = 0;
		parent->Flags2 &= ~MF2_REFLECTIVE;
	}

	// Move to new position based on angle
	if (args[0])	// Counter clock-wise
	{
		special1f = AngleMod360(special1f + 10.0);
		angle = special1f;
		x = parent->origin.x + dist * cos(angle);
		y = parent->origin.y + dist * sin(angle);
		z = parent->origin.z - parent->floorclip + SORC_DEFENSE_HEIGHT;
		z += 15.0 * cos(angle);
		// Spawn trailer
		P_SpawnMobj(x, y, z, SorcererFX2_T1);
	}
	else	// Clock wise
	{
		special1f = AngleMod360(special1f - 10.0);
		angle = special1f;
		x = parent->origin.x + dist * cos(angle);
		y = parent->origin.y + dist * sin(angle);
		z = parent->origin.z - parent->floorclip + SORC_DEFENSE_HEIGHT;
		z += 20.0 * sin(angle);
		// Spawn trailer
		P_SpawnMobj(x, y, z, SorcererFX2_T1);
	}

	origin.x = x;
	origin.y = y;
	origin.z = z;
}

//============================================================================
//
//  Actor::A_SpawnBishop
//
//  Green spell - spawn bishops
//
//============================================================================

void Actor::A_SpawnBishop(void)
{
	mobj_t *mo;

	mo = P_SpawnMobj(origin.x, origin.y, origin.z, Bishop);
	if (mo)
	{
		if (!P_TestMobjLocation(mo))
		{
			mo->SetState(S_NULL);
		}
	}
	SetState(S_NULL);
}

//============================================================================
//
//  Actor::A_SorcererBishopEntry
//
//============================================================================

void Actor::A_SorcererBishopEntry(void)
{
	P_SpawnMobj(origin.x, origin.y, origin.z, SorcererFX3Explosion);
	StartSound(self, sound_sight, CHAN_VOICE);
}

//============================================================================
//
//  Actor::A_SorcFX4Check
//
//  FX4 - rapid fire balls
//
//============================================================================

void Actor::A_SorcFX4Check(void)
{
	if (special2-- <= 0)
	{
		SetStateNF(DeathState);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.16  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
