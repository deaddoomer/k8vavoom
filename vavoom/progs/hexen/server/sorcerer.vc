//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#define SORCBALL_INITIAL_SPEED 		7
#define SORCBALL_TERMINAL_SPEED		25
#define SORCBALL_SPEED_ROTATIONS 	5
#define SORCFX4_RAPIDFIRE_TIME		(6*3)	// 3 seconds
#define SORCFX4_SPREAD_ANGLE		20.0
#define SORC_DEFENSE_TIME			255
#define SORC_DEFENSE_HEIGHT			45.0
#define BOUNCE_TIME_UNIT			(35/2)

#define SORC_DECELERATE		0
#define SORC_ACCELERATE 	1
#define SORC_STOPPING		2
#define SORC_FIRESPELL		3
#define SORC_STOPPED		4
#define SORC_NORMAL			5
#define SORC_FIRING_SPELL	6

//**************************************************************************
//
//	SorcererSpark
//
//**************************************************************************

class SorcererSpark:Effect
{

__states__
{
	S_SORCSPARK1('SBFX', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SORCSPARK2) { }
	S_SORCSPARK2('SBFX', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SORCSPARK3) { }
	S_SORCSPARK3('SBFX', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_SORCSPARK4) { }
	S_SORCSPARK4('SBFX', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_SORCSPARK5) { }
	S_SORCSPARK5('SBFX', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_SORCSPARK6) { }
	S_SORCSPARK6('SBFX', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_SORCSPARK7) { }
	S_SORCSPARK7('SBFX', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 5.0;
	Height = 5.0;
	Mass = 12.5;
	bDropOff = true;
	bNoTeleport = true;
	bNoGravity = false;
	IdleState = S_SORCSPARK1;
}

}

//**************************************************************************
//
//	Sorcerer
//
//**************************************************************************

class Sorcerer:Pawn
	__mobjinfo__(10080)
{

bool bBallsSpawned;

//
// Sorcerer Variables
//

//      Special1f       Angle of ball 1 (all others relative to that)
//      SpecialCID      which ball to stop at in stop mode (MT_???)
//      Args[0]         Defense time
//      Args[1]         Number of full rotations since stopping mode
//      Args[2]         Target orbit speed for acceleration/deceleration
//      Args[3]         Movement mode (see SORC_ macros)
//      Args[4]         Current ball orbit speed

//============================================================================
//
// Set balls to slow mode - actor is sorcerer
//
//============================================================================

void A_SlowBalls(void)
{
	Args[3] = SORC_DECELERATE;	// slow mode
	Args[2] = SORCBALL_INITIAL_SPEED;	// target speed
}

//============================================================================
//
//  A_SorcSpinBalls
//
//  Spawn spinning balls above head - actor is sorcerer.
//
//============================================================================

void A_SorcSpinBalls(void)
{
	Actor ball;
	TVec org;

	//	To prevent spawning balls more than once.
	if (bBallsSpawned)
	{
		return;
	}
	bBallsSpawned = true;

	A_SlowBalls();
	Args[0] = 0;	// Currently no defense
	Args[3] = SORC_NORMAL;
	Args[4] = SORCBALL_INITIAL_SPEED;	// Initial orbit speed
	Special1f = 1.0;
	org = Origin;
	org.z = Origin.z - FloorClip + Height;

	ball = Spawn(SorcererBall1, org);
	if (ball)
	{
		ball.Instigator = self;
		ball._Special2 = SORCFX4_RAPIDFIRE_TIME;
	}
	ball = Spawn(SorcererBall2, org);
	if (ball)
		ball.Instigator = self;
	ball = Spawn(SorcererBall3, org);
	if (ball)
		ball.Instigator = self;
}

//============================================================================
//
//	Set balls to speed mode - actor is sorcerer
//
//============================================================================

void A_SpeedBalls(void)
{
	Args[3] = SORC_ACCELERATE;	// speed mode
	Args[2] = SORCBALL_TERMINAL_SPEED;	// target speed
}

//============================================================================
//
//  A_SpawnFizzle
//
//  Spell cast magic fizzle
//
//============================================================================

void A_SpawnFizzle(void)
{
	TVec org;
	float dist = 5.0;
	float angle = Angles.yaw;
	float rangle;
	Actor A;
	int ix;

	org.x = Origin.x + dist * cos(angle);
	org.y = Origin.y + dist * sin(angle);
	org.z = Origin.z - FloorClip + Height / 2.0;
	for (ix = 0; ix < 5; ix++)
	{
		A = Spawn(SorcererSpark, org);
		if (A)
		{
			rangle = angle + Random() * 5.0 * 90.0 / 1024.0;
			A.Velocity.x = Random() * Speed * cos(rangle);
			A.Velocity.y = Random() * Speed * sin(rangle);
			A.Velocity.z = 2.0 * 35.0;
		}
	}
}

//============================================================================
//
//  A_SorcBossAttack
//
//  Resume ball spinning
//
//============================================================================

void A_SorcBossAttack(void)
{
	Args[3] = SORC_ACCELERATE;
	Args[2] = SORCBALL_INITIAL_SPEED;
}

//============================================================================
//
//  A_StopBalls
//
//  Instant stop when rotation gets to ball in _Special2
// actor is sorcerer
//
//============================================================================

void A_StopBalls(void)
{
	int chance = P_Random();

	Args[3] = SORC_STOPPING;	// stopping mode
	Args[1] = 0;	// Reset rotation counter

	if ((Args[0] <= 0) && (chance < 200))
	{
		SpecialCID = SorcererBall2;	// Blue
	}
	else if ((Health < (SpawnHealth >> 1)) && (chance < 200))
	{
		SpecialCID = SorcererBall3;	// Green
	}
	else
	{
		SpecialCID = SorcererBall1;	// Yellow
	}
}

__states__
{
	S_SORC_SPAWN1('SORC', 0, 3.0 / 35.0, S_SORC_SPAWN2) { }
	S_SORC_SPAWN2('SORC', 0, 2.0 / 35.0, S_SORC_LOOK1) { A_SorcSpinBalls(); }
	S_SORC_LOOK1('SORC', 0, 10.0 / 35.0, S_SORC_LOOK1) { A_Look(); }
	S_SORC_WALK1('SORC', 0, 5.0 / 35.0, S_SORC_WALK2) { A_Chase(); }
	S_SORC_WALK2('SORC', 1, 5.0 / 35.0, S_SORC_WALK3) { A_Chase(); }
	S_SORC_WALK3('SORC', 2, 5.0 / 35.0, S_SORC_WALK4) { A_Chase(); }
	S_SORC_WALK4('SORC', 3, 5.0 / 35.0, S_SORC_WALK1) { A_Chase(); }
	S_SORC_PAIN1('SORC', 6, 8.0 / 35.0, S_SORC_PAIN2) { }
	S_SORC_PAIN2('SORC', 6, 8.0 / 35.0, S_SORC_WALK1) { A_Pain(); }
	S_SORC_ATK2_1('SORC', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATK2_2) { A_FaceTarget(); }
	S_SORC_ATK2_2('SORC', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATK2_3) { A_SpeedBalls(); }
	S_SORC_ATK2_3('SORC', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATK2_3) { A_FaceTarget(); }
	S_SORC_ATTACK1('SORC', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATTACK2) { }
	S_SORC_ATTACK2('SORC', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORC_ATTACK3) { A_SpawnFizzle(); }
	S_SORC_ATTACK3('SORC', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_ATTACK2) { A_FaceTarget(); }
	S_SORC_ATTACK4('SORC', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORC_ATTACK5) { }
	S_SORC_ATTACK5('SORC', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORC_WALK1) { A_SorcBossAttack(); }
	S_SORC_DIE1('SORC', 7 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE2) { }
	S_SORC_DIE2('SORC', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE3) { A_FaceTarget(); }
	S_SORC_DIE3('SORC', 9 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE4) { A_Scream(); }
	S_SORC_DIE4('SORC', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE5) { }
	S_SORC_DIE5('SORC', 11 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE6) { }
	S_SORC_DIE6('SORC', 12 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE7) { }
	S_SORC_DIE7('SORC', 13 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE8) { }
	S_SORC_DIE8('SORC', 14 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE9) { }
	S_SORC_DIE9('SORC', 15 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIE0) { }
	S_SORC_DIE0('SORC', 16 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEA) { }
	S_SORC_DIEA('SORC', 17 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEB) { }
	S_SORC_DIEB('SORC', 18 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEC) { }
	S_SORC_DIEC('SORC', 19 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIED) { }
	S_SORC_DIED('SORC', 20 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEE) { A_NoBlocking(); }
	S_SORC_DIEE('SORC', 21 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEF) { }
	S_SORC_DIEF('SORC', 22 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEG) { }
	S_SORC_DIEG('SORC', 23 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEH) { }
	S_SORC_DIEH('SORC', 24 | FF_FULLBRIGHT, 5.0 / 35.0, S_SORC_DIEI) { }
	S_SORC_DIEI('SORC', 25 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 5000;
	Radius = 40.0;
	Height = 110.0;
	Mass = 500.0;
	StepSpeed = 16.0;
	PainChance = 0.0390625;
	MissileDamage = 9;
	bNoBlood = true;
	bBoss = true;
	bTelestomp = false;
	IdleState = S_SORC_SPAWN1;
	SeeState = S_SORC_WALK1;
	MissileState = S_SORC_ATK2_1;
	PainState = S_SORC_PAIN1;
	DeathState = S_SORC_DIE1;
	SightSound = 'SorcererSight';
	ActiveSound = 'SorcererActive';
	PainSound = 'SorcererPain';
	DeathSound = 'SorcererDeathScream';
}

}

//**************************************************************************
//
//	SorcererFX1
//
//**************************************************************************

class SorcererFX1:Projectile
{

//============================================================================
//
//  A_SorcFX1Seek
//
//  Yellow spell - offense
//
//============================================================================

void A_SorcFX1Seek(void)
{
	if (Args[4]-- <= 0)
	{
		if (Args[3]-- <= 0)
		{
			SetState(DeathState);
			PlayFullVolumeSound('SorcererHeadScream', CHAN_VOICE);
		}
		else
		{
			Args[4] = BOUNCE_TIME_UNIT;
		}
	}

	SeekerMissile(2.0, 6.0);
}

__states__
{
	S_SORCFX1_1('SBS1', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX1_2) { }
	S_SORCFX1_2('SBS1', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_SORCFX1_3) { A_SorcFX1Seek(); }
	S_SORCFX1_3('SBS1', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_SORCFX1_4) { A_SorcFX1Seek(); }
	S_SORCFX1_4('SBS1', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_SORCFX1_1) { A_SorcFX1Seek(); }
	S_SORCFX1_D1('FHFX', 18 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX1_D2) { A_Explode(); }
	S_SORCFX1_D2('FHFX', 18 | FF_FULLBRIGHT, 6.0 / 35.0, S_SORCFX1_D3) { }
	S_SORCFX1_D3('FHFX', 18 | FF_FULLBRIGHT, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	GibsHealth = -500;
	Radius = 5.0;
	Height = 5.0;
	Mass = 12.5;
	Speed = 245.0;
	bFloorBounce = true;
	bDropOff = false;
	bNoGravity = false;
	bActivateImpact = false;
	bActivatePCross = false;
	IdleState = S_SORCFX1_1;
	DeathState = S_SORCFX1_D1;
	GibsDeathState = S_SORCFX1_D1;
	SightSound = 'SorcererBallBounce';
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	SorcererFX3Explosion
//
//**************************************************************************

class SorcererFX3Explosion:Effect
{

__states__
{
	S_SORCFX3_EXP1('SBS3', 3, 3.0 / 35.0, S_SORCFX3_EXP2) { }
	S_SORCFX3_EXP2('SBS3', 4, 3.0 / 35.0, S_SORCFX3_EXP3) { }
	S_SORCFX3_EXP3('SBS3', 5, 3.0 / 35.0, S_SORCFX3_EXP4) { }
	S_SORCFX3_EXP4('SBS3', 6, 3.0 / 35.0, S_SORCFX3_EXP5) { }
	S_SORCFX3_EXP5('SBS3', 7, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Translucency = 33;
	bNoTeleport = true;
	IdleState = S_SORCFX3_EXP1;
}

}

//**************************************************************************
//
//	SorcererFX3
//
//**************************************************************************

class SorcererFX3:Projectile
{

//============================================================================
//
//  A_SorcererBishopEntry
//
//============================================================================

void A_SorcererBishopEntry(void)
{
	Spawn(SorcererFX3Explosion, Origin);
	PlaySound(SightSound, CHAN_VOICE);
}

//============================================================================
//
//  A_SpawnBishop
//
//  Green spell - spawn bishops
//
//============================================================================

void A_SpawnBishop(void)
{
	Actor A;

	A = Spawn(Bishop, Origin);
	if (A)
	{
		if (!A.TestLocation())
		{
			A.SetState(S_NULL);
		}
	}
	SetState(S_NULL);
}

__states__
{
	S_SORCFX3_1('SBS3', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX3_2) { }
	S_SORCFX3_2('SBS3', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX3_3) { }
	S_SORCFX3_3('SBS3', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX3_1) { }
	S_BISHMORPH1('SBS3', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_BISHMORPHA) { }
	S_BISHMORPHA('BISH', 15, 4.0 / 35.0, S_BISHMORPHB) { A_SorcererBishopEntry(); }
	S_BISHMORPHB('BISH', 14, 4.0 / 35.0, S_BISHMORPHC) { }
	S_BISHMORPHC('BISH', 13, 4.0 / 35.0, S_BISHMORPHD) { }
	S_BISHMORPHD('BISH', 12, 3.0 / 35.0, S_BISHMORPHE) { }
	S_BISHMORPHE('BISH', 11, 3.0 / 35.0, S_BISHMORPHF) { }
	S_BISHMORPHF('BISH', 10, 3.0 / 35.0, S_BISHMORPHG) { }
	S_BISHMORPHG('BISH', 9, 3.0 / 35.0, S_BISHMORPHH) { }
	S_BISHMORPHH('BISH', 8, 3.0 / 35.0, S_BISHMORPHI) { }
	S_BISHMORPHI('BISH', 7, 3.0 / 35.0, S_BISHMORPHJ) { }
	S_BISHMORPHJ('BISH', 6, 3.0 / 35.0, S_NULL) { A_SpawnBishop(); }
}

defaultproperties
{
	Radius = 22.0;
	Height = 65.0;
	Speed = 525.0;
	bDropOff = false;
	bNoGravity = false;
	bActivateImpact = false;
	bActivatePCross = false;
	IdleState = S_SORCFX3_1;
	DeathState = S_BISHMORPH1;
	SightSound = 'SorcererBishopSpawn';
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	SorcererFX4
//
//**************************************************************************

class SorcererFX4:Projectile
{

//============================================================================
//
//  A_SorcFX4Check
//
//  FX4 - rapid fire balls
//
//============================================================================

void A_SorcFX4Check(void)
{
	if (_Special2-- <= 0)
	{
		SetState(DeathState);
	}
}

__states__
{
	S_SORCFX4_1('SBS4', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX4_2) { A_SorcFX4Check(); }
	S_SORCFX4_2('SBS4', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX4_3) { A_SorcFX4Check(); }
	S_SORCFX4_3('SBS4', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX4_1) { A_SorcFX4Check(); }
	S_SORCFX4_D1('SBS4', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX4_D2) { }
	S_SORCFX4_D2('SBS4', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX4_D3) { A_Explode(); }
	S_SORCFX4_D3('SBS4', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX4_D4) { }
	S_SORCFX4_D4('SBS4', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX4_D5) { }
	S_SORCFX4_D5('SBS4', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 10.0;
	Speed = 420.0;
	bDropOff = false;
	bActivateImpact = false;
	bActivatePCross = false;
	IdleState = S_SORCFX4_1;
	DeathState = S_SORCFX4_D1;
	DeathSound = 'SorcererBallExplode';
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	SorcererBall
//
//**************************************************************************

class SorcererBall:Projectile
	abstract
{

//  Sorcerer Ball Variables
//      Special1f       Previous angle of ball (for woosh)
//      Special2        Countdown of rapid fire (FX4)
//      Args[0]         If set, don't play the bounce sound when bouncing
float BallAngleOffset;

//============================================================================
//
//  A_AccelBalls
//
//  Increase ball orbit speed - actor is ball
//
//============================================================================

void A_AccelBalls(void)
{
	Actor sorc = Instigator;

	if (sorc.Args[4] < sorc.Args[2])
	{
		sorc.Args[4]++;
	}
	else
	{
		sorc.Args[3] = SORC_NORMAL;
		if (sorc.Args[4] >= SORCBALL_TERMINAL_SPEED)
		{
			// Reached terminal velocity - stop balls
			Sorcerer(sorc).A_StopBalls();
		}
	}
}

//============================================================================
//
//  A_DecelBalls
//
//  Decrease ball orbit speed - actor is ball
//
//============================================================================

void A_DecelBalls(void)
{
	Actor sorc = Instigator;

	if (sorc.Args[4] > sorc.Args[2])
	{
		sorc.Args[4]--;
	}
	else
	{
		sorc.Args[3] = SORC_NORMAL;
	}
}

//============================================================================
//
//  A_SorcUpdateBallAngle
//
//  Update angle if first ball - actor is ball
//
//============================================================================

void A_SorcUpdateBallAngle(void)
{
	if (Class == SorcererBall1)
	{
		Instigator.Special1f = AngleMod360(Instigator.Special1f + itof(Instigator.Args[4]));
	}
}

//============================================================================
//
//  A_SorcOffense2
//
//  Actor is ball
//
//============================================================================

void A_SorcOffense2(void)
{
	float ang1;
	Actor mo;
	float delta, index;
	float dist;

	index = itof(Args[4]) * 360.0 / 256.0;
	Args[4] = (Args[4] + 15) & 0xff;
	delta = sin(index) * SORCFX4_SPREAD_ANGLE;
	ang1 = AngleMod360(Angles.yaw + delta);
	mo = Instigator.SpawnMissileAngle(SorcererFX4, ang1, 0.0);
	if (mo)
	{
		mo._Special2 = 35 * 5 / 2;	// 5 seconds
		dist = MobjDist2(Instigator.Enemy, mo);
		dist = dist / mo.Speed;
		if (dist < 1.0)
			dist = 1.0;
		mo.Velocity.z = (Instigator.Enemy.Origin.z - mo.Origin.z) / dist;
	}
}

//============================================================================
//
//  A_CastSorcererSpell
//
//  Actor is ball.
//
//============================================================================

void A_CastSorcererSpell(void)
{
}

//============================================================================
//
//  A_SorcBallOrbit
//
//============================================================================

void A_SorcBallOrbit(void)
{
	float angle, baseangle;
	int mode = Instigator.Args[3];
	float dist = Instigator.Radius - (Radius * 2.0);
	float prevangle = Special1f;

	if (Instigator.Health <= 0)
		SetState(PainState);

	baseangle = Instigator.Special1f;
	angle = AngleMod360(baseangle + BallAngleOffset);
	Angles.yaw = angle;

	switch (mode)
	{
	case SORC_NORMAL:	// Balls rotating normally
		A_SorcUpdateBallAngle();
		break;
	case SORC_DECELERATE:	// Balls decelerating
		A_DecelBalls();
		A_SorcUpdateBallAngle();
		break;
	case SORC_ACCELERATE:	// Balls accelerating
		A_AccelBalls();
		A_SorcUpdateBallAngle();
		break;
	case SORC_STOPPING:	// Balls stopping
		if ((Instigator.SpecialCID == Class) &&
			(Instigator.Args[1] > SORCBALL_SPEED_ROTATIONS) &&
			(fabs(AngleMod180(angle - Instigator.Angles.yaw)) <
			15.0 * 45.0 / 16.0))
		{
			// Can stop now
			Instigator.Args[3] = SORC_FIRESPELL;
			Instigator.Args[4] = 0;
			// Set angle so ball angle == sorcerer angle
			Instigator.Special1f = AngleMod360(Instigator.Angles.yaw -
				BallAngleOffset);
		}
		else
		{
			A_SorcUpdateBallAngle();
		}
		break;
	case SORC_FIRESPELL:	// Casting spell
		if (Instigator.SpecialCID == Class)
		{
			// Put sorcerer into special throw spell anim
			if (Instigator.Health > 0)
				Instigator.SetState(S_SORC_ATTACK1);

			PlayFullVolumeSound('SorcererSpellCast', CHAN_VOICE);

			A_CastSorcererSpell();
		}
		break;
	case SORC_FIRING_SPELL:
		if (Instigator.SpecialCID == Class)
		{
			if (_Special2-- <= 0)
			{
				// Done rapid firing 
				Instigator.Args[3] = SORC_STOPPED;
				// Back to orbit balls
				if (Instigator.Health > 0)
					Instigator.SetState(S_SORC_ATTACK4);
			}
			else
			{
				// Do rapid fire spell
				A_SorcOffense2();
			}
		}
		break;
	case SORC_STOPPED:	// Balls stopped
	default:
		break;
	}

	if ((angle < prevangle) && (Instigator.Args[4] == SORCBALL_TERMINAL_SPEED))
	{
		Instigator.Args[1]++;	// Bump rotation counter
		// Completed full rotation - make woosh sound
		PlayFullVolumeSound('SorcererBallWoosh', CHAN_VOICE);
	}
	Special1f = angle;	// Set previous angle
	Origin.x = Instigator.Origin.x + dist * cos(angle);
	Origin.y = Instigator.Origin.y + dist * sin(angle);
	Origin.z = Instigator.Origin.z - Instigator.FloorClip + Instigator.Height;
}

//============================================================================
//
//  A_SorcBallPop
//
//  Ball death - spawn stuff.
//
//============================================================================

void A_SorcBallPop(void)
{
	PlayFullVolumeSound('SorcererBallPop', CHAN_VOICE);
	bNoGravity = false;
	Velocity.x = (Random() * 10.0 - 5.0) * 35.0;
	Velocity.y = (Random() * 10.0 - 5.0) * 35.0;
	Velocity.z = (2.0 + Random() * 3.0) * 35.0;
	Args[4] = BOUNCE_TIME_UNIT;	// Bounce time unit
	Args[3] = 5;	// Bounce time in seconds
}

//============================================================================
//
//  A_BounceCheck
//
//============================================================================

void A_BounceCheck(void)
{
	if (Args[4]-- <= 0)
	{
		if (Args[3]-- <= 0)
		{
			SetState(DeathState);
			PlayFullVolumeSound('SorcererBigBallExplode', CHAN_VOICE);
		}
		else
		{
			Args[4] = BOUNCE_TIME_UNIT;
		}
	}
}

defaultproperties
{
	Radius = 5.0;
	Height = 5.0;
	Mass = 12.5;
	Speed = 350.0;
	bFloorBounce = true;
	bDropOff = false;
	bActivateImpact = false;
	bActivatePCross = false;
	SightSound = 'SorcererBallBounce';
}

}

//**************************************************************************
//
//	SorcererBall1
//
//**************************************************************************

class SorcererBall1:SorcererBall
{

//============================================================================
//
//  A_SorcOffense1
//
//  Actor is ball.
//
//============================================================================

void A_SorcOffense1(void)
{
	Actor mo;
	float ang1, ang2;

	ang1 = AngleMod360(Angles.yaw + 70.0);
	ang2 = AngleMod360(Angles.yaw - 70.0);
	mo = Instigator.SpawnMissileAngle(SorcererFX1, ang1, 0.0);
	if (mo)
	{
		mo.Instigator = Instigator;
		mo.Enemy = Instigator.Enemy;
		mo.Args[4] = BOUNCE_TIME_UNIT;
		mo.Args[3] = 15;	// Bounce time in seconds
	}
	mo = Instigator.SpawnMissileAngle(SorcererFX1, ang2, 0.0);
	if (mo)
	{
		mo.Instigator = Instigator;
		mo.Enemy = Instigator.Enemy;
		mo.Args[4] = BOUNCE_TIME_UNIT;
		mo.Args[3] = 15;	// Bounce time in seconds
	}
}

//============================================================================
//
//  A_CastSorcererSpell
//
//  Actor is ball.
//
//============================================================================

void A_CastSorcererSpell(void)
{
	if (P_Random() < 200)
	{
		_Special2 = SORCFX4_RAPIDFIRE_TIME;
		Args[4] = 128;
		Instigator.Args[3] = SORC_FIRING_SPELL;
		return;
	}

	// Put sorcerer into throw spell animation
	if (Instigator.Health > 0)
		Instigator.SetState(S_SORC_ATTACK4);

	// Offensive
	A_SorcOffense1();

	Instigator.Args[3] = SORC_STOPPED;
}

__states__
{
	S_SORCBALL1_1('SBMP', 0, 2.0 / 35.0, S_SORCBALL1_2) { A_SorcBallOrbit(); }
	S_SORCBALL1_2('SBMP', 1, 2.0 / 35.0, S_SORCBALL1_3) { A_SorcBallOrbit(); }
	S_SORCBALL1_3('SBMP', 2, 2.0 / 35.0, S_SORCBALL1_4) { A_SorcBallOrbit(); }
	S_SORCBALL1_4('SBMP', 3, 2.0 / 35.0, S_SORCBALL1_5) { A_SorcBallOrbit(); }
	S_SORCBALL1_5('SBMP', 4, 2.0 / 35.0, S_SORCBALL1_6) { A_SorcBallOrbit(); }
	S_SORCBALL1_6('SBMP', 5, 2.0 / 35.0, S_SORCBALL1_7) { A_SorcBallOrbit(); }
	S_SORCBALL1_7('SBMP', 6, 2.0 / 35.0, S_SORCBALL1_8) { A_SorcBallOrbit(); }
	S_SORCBALL1_8('SBMP', 7, 2.0 / 35.0, S_SORCBALL1_9) { A_SorcBallOrbit(); }
	S_SORCBALL1_9('SBMP', 8, 2.0 / 35.0, S_SORCBALL1_0) { A_SorcBallOrbit(); }
	S_SORCBALL1_0('SBMP', 9, 2.0 / 35.0, S_SORCBALL1_A) { A_SorcBallOrbit(); }
	S_SORCBALL1_A('SBMP', 10, 2.0 / 35.0, S_SORCBALL1_B) { A_SorcBallOrbit(); }
	S_SORCBALL1_B('SBMP', 11, 2.0 / 35.0, S_SORCBALL1_C) { A_SorcBallOrbit(); }
	S_SORCBALL1_C('SBMP', 12, 2.0 / 35.0, S_SORCBALL1_D) { A_SorcBallOrbit(); }
	S_SORCBALL1_D('SBMP', 13, 2.0 / 35.0, S_SORCBALL1_E) { A_SorcBallOrbit(); }
	S_SORCBALL1_E('SBMP', 14, 2.0 / 35.0, S_SORCBALL1_F) { A_SorcBallOrbit(); }
	S_SORCBALL1_F('SBMP', 15, 2.0 / 35.0, S_SORCBALL1_1) { A_SorcBallOrbit(); }
	S_SORCBALL1_D1('SBMP', 0, 5.0 / 35.0, S_SORCBALL1_D2) { A_SorcBallPop(); }
	S_SORCBALL1_D2('SBMP', 1, 2.0 / 35.0, S_SORCBALL1_D2) { A_BounceCheck(); }
	S_SORCBALL1_D5('SBS4', 3, 5.0 / 35.0, S_SORCBALL1_D6) { A_Explode(); }
	S_SORCBALL1_D6('SBS4', 4, 5.0 / 35.0, S_SORCBALL1_D7) { }
	S_SORCBALL1_D7('SBS4', 5, 6.0 / 35.0, S_SORCBALL1_D8) { }
	S_SORCBALL1_D8('SBS4', 6, 6.0 / 35.0, S_SORCBALL1_D9) { }
	S_SORCBALL1_D9('SBS4', 7, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_SORCBALL1_1;
	PainState = S_SORCBALL1_D1;
	DeathState = S_SORCBALL1_D5;
	BallAngleOffset = 0.0;
}

}

//**************************************************************************
//
//	SorcererFX2_T1
//
//**************************************************************************

class SorcererFX2_T1:Effect
{

__states__
{
	S_SORCFX2T1('SBS2', 0, 10.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Translucency = 33;
	bNoTeleport = true;
	IdleState = S_SORCFX2T1;
}

}

//**************************************************************************
//
//	SorcererFX2
//
//**************************************************************************

class SorcererFX2:Effect
{

//==========================================================================
// Blue spell - defense
//==========================================================================
//
// FX2 Variables
//      Special1f       current angle
//      Args[0]     0 = CW,  1 = CCW
//==========================================================================

int OrbitState;

//==========================================================================
//
//  A_SorcFX2Split
//
//  Split ball in two
//
//==========================================================================

void A_SorcFX2Split(void)
{
	Actor A;

	A = Spawn(SorcererFX2, Origin);
	if (A)
	{
		A.Instigator = Instigator;
		A.Args[0] = 0;	// CW
		A.Special1f = Angles.yaw;	// Set angle
		A.SetState(SorcererFX2(A).OrbitState);
	}
	A = Spawn(SorcererFX2, Origin);
	if (A)
	{
		A.Instigator = Instigator;
		A.Args[0] = 1;	// CCW
		A.Special1f = Angles.yaw;	// Set angle
		A.SetState(SorcererFX2(A).OrbitState);
	}
	SetState(S_NULL);
}

//==========================================================================
//
//  A_SorcFX2Orbit
//
//  Orbit FX2 about sorcerer
//
//==========================================================================

void A_SorcFX2Orbit(void)
{
	float angle;
	float x, y, z;
	float dist = Instigator.Radius;

	if ((Instigator.Health <= 0) ||	// Sorcerer is dead
		(!Instigator.Args[0]))	// Time expired
	{
		SetState(DeathState);
		Instigator.Args[0] = 0;
		Instigator.bReflective = false;
		Instigator.bInvulnerable = false;
	}

	if (Args[0] && (Instigator.Args[0]-- <= 0))	// Time expired
	{
		SetState(DeathState);
		Instigator.Args[0] = 0;
		Instigator.bReflective = false;
	}

	// Move to new position based on angle
	if (Args[0])	// Counter clock-wise
	{
		Special1f = AngleMod360(Special1f + 10.0);
		angle = Special1f;
		x = Instigator.Origin.x + dist * cos(angle);
		y = Instigator.Origin.y + dist * sin(angle);
		z = Instigator.Origin.z - Instigator.FloorClip + SORC_DEFENSE_HEIGHT;
		z += 15.0 * cos(angle);
		// Spawn trailer
		Spawn(SorcererFX2_T1, vector(x, y, z));
	}
	else	// Clock wise
	{
		Special1f = AngleMod360(Special1f - 10.0);
		angle = Special1f;
		x = Instigator.Origin.x + dist * cos(angle);
		y = Instigator.Origin.y + dist * sin(angle);
		z = Instigator.Origin.z - Instigator.FloorClip + SORC_DEFENSE_HEIGHT;
		z += 20.0 * sin(angle);
		// Spawn trailer
		Spawn(SorcererFX2_T1, vector(x, y, z));
	}

	Origin.x = x;
	Origin.y = y;
	Origin.z = z;
}

__states__
{
	S_SORCFX2_SPLIT1('SBS2', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_SORCFX2_SPLIT1) { A_SorcFX2Split(); }
	S_SORCFX2_ORBIT1_NF('SBS2', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT2) { }
	S_SORCFX2_ORBIT1('SBS2', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT2) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBIT2('SBS2', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT3) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBIT3('SBS2', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT4) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBIT4('SBS2', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT5) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBIT5('SBS2', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT6) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBIT6('SBS2', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT7) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBIT7('SBS2', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT8) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBIT8('SBS2', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT9) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBIT9('SBS2', 8 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT0) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBIT0('SBS2', 9 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITA) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBITA('SBS2', 10 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITB) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBITB('SBS2', 11 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITC) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBITC('SBS2', 12 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITD) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBITD('SBS2', 13 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITE) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBITE('SBS2', 14 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBITF) { A_SorcFX2Orbit(); }
	S_SORCFX2_ORBITF('SBS2', 15 | FF_FULLBRIGHT, 2.0 / 35.0, S_SORCFX2_ORBIT1) { A_SorcFX2Orbit(); }
	S_SORCFX2_DEATH('SBS2', 0, 10.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 5.0;
	Height = 5.0;
	Speed = 525.0;
	bNoTeleport = true;
	IdleState = S_SORCFX2_SPLIT1;
	OrbitState = S_SORCFX2_ORBIT1_NF;
	DeathState = S_SORCFX2_DEATH;
}

}

//**************************************************************************
//
//	SorcererBall2
//
//**************************************************************************

class SorcererBall2:SorcererBall
{

//============================================================================
//
//  A_CastSorcererSpell
//
//	Defensive
//
//============================================================================

void A_CastSorcererSpell(void)
{
	Actor mo;
	float z;

	// Put sorcerer into throw spell animation
	if (Instigator.Health > 0)
		Instigator.SetState(S_SORC_ATTACK4);

	z = Instigator.Origin.z - Instigator.FloorClip + SORC_DEFENSE_HEIGHT;
	mo = Spawn(SorcererFX2, vector(Origin.x, Origin.y, z));
	Instigator.bInvulnerable = true;
	Instigator.bReflective = true;
	Instigator.Args[0] = SORC_DEFENSE_TIME;
	if (mo)
		mo.Instigator = Instigator;

	Instigator.Args[3] = SORC_STOPPED;
}

__states__
{
	S_SORCBALL2_1('SBMB', 0, 2.0 / 35.0, S_SORCBALL2_2) { A_SorcBallOrbit(); }
	S_SORCBALL2_2('SBMB', 1, 2.0 / 35.0, S_SORCBALL2_3) { A_SorcBallOrbit(); }
	S_SORCBALL2_3('SBMB', 2, 2.0 / 35.0, S_SORCBALL2_4) { A_SorcBallOrbit(); }
	S_SORCBALL2_4('SBMB', 3, 2.0 / 35.0, S_SORCBALL2_5) { A_SorcBallOrbit(); }
	S_SORCBALL2_5('SBMB', 4, 2.0 / 35.0, S_SORCBALL2_6) { A_SorcBallOrbit(); }
	S_SORCBALL2_6('SBMB', 5, 2.0 / 35.0, S_SORCBALL2_7) { A_SorcBallOrbit(); }
	S_SORCBALL2_7('SBMB', 6, 2.0 / 35.0, S_SORCBALL2_8) { A_SorcBallOrbit(); }
	S_SORCBALL2_8('SBMB', 7, 2.0 / 35.0, S_SORCBALL2_9) { A_SorcBallOrbit(); }
	S_SORCBALL2_9('SBMB', 8, 2.0 / 35.0, S_SORCBALL2_0) { A_SorcBallOrbit(); }
	S_SORCBALL2_0('SBMB', 9, 2.0 / 35.0, S_SORCBALL2_A) { A_SorcBallOrbit(); }
	S_SORCBALL2_A('SBMB', 10, 2.0 / 35.0, S_SORCBALL2_B) { A_SorcBallOrbit(); }
	S_SORCBALL2_B('SBMB', 11, 2.0 / 35.0, S_SORCBALL2_C) { A_SorcBallOrbit(); }
	S_SORCBALL2_C('SBMB', 12, 2.0 / 35.0, S_SORCBALL2_D) { A_SorcBallOrbit(); }
	S_SORCBALL2_D('SBMB', 13, 2.0 / 35.0, S_SORCBALL2_E) { A_SorcBallOrbit(); }
	S_SORCBALL2_E('SBMB', 14, 2.0 / 35.0, S_SORCBALL2_F) { A_SorcBallOrbit(); }
	S_SORCBALL2_F('SBMB', 15, 2.0 / 35.0, S_SORCBALL2_1) { A_SorcBallOrbit(); }
	S_SORCBALL2_D1('SBMB', 0, 5.0 / 35.0, S_SORCBALL2_D2) { A_SorcBallPop(); }
	S_SORCBALL2_D2('SBMB', 1, 2.0 / 35.0, S_SORCBALL2_D2) { A_BounceCheck(); }
	S_SORCBALL2_D5('SBS3', 3, 5.0 / 35.0, S_SORCBALL2_D6) { A_Explode(); }
	S_SORCBALL2_D6('SBS3', 4, 5.0 / 35.0, S_SORCBALL2_D7) { }
	S_SORCBALL2_D7('SBS3', 5, 6.0 / 35.0, S_SORCBALL2_D8) { }
	S_SORCBALL2_D8('SBS3', 6, 6.0 / 35.0, S_SORCBALL2_D9) { }
	S_SORCBALL2_D9('SBS3', 7, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_SORCBALL2_1;
	PainState = S_SORCBALL2_D1;
	DeathState = S_SORCBALL2_D5;
	BallAngleOffset = 120.0;
}

}

//**************************************************************************
//
//	SorcererBall3
//
//**************************************************************************

class SorcererBall3:SorcererBall
{

//============================================================================
//
//  A_CastSorcererSpell
//
//	Reinforcements
//
//============================================================================

void A_CastSorcererSpell(void)
{
	Actor mo;
	float ang1, ang2;

	// Put sorcerer into throw spell animation
	if (Instigator.Health > 0)
		Instigator.SetState(S_SORC_ATTACK4);

	ang1 = AngleMod360(Angles.yaw - 45.0);
	ang2 = AngleMod360(Angles.yaw + 45.0);
	if (Health < (SpawnHealth / 3))
	{
		// Spawn 2 at a time
		mo = Instigator.SpawnMissileAngle(SorcererFX3, ang1, 4.0);
		if (mo)
			mo.Instigator = Instigator;
		mo = Instigator.SpawnMissileAngle(SorcererFX3, ang2, 4.0);
		if (mo)
			mo.Instigator = Instigator;
	}
	else
	{
		if (P_Random() < 128)
			ang1 = ang2;
		mo = Instigator.SpawnMissileAngle(SorcererFX3, ang1, 4.0);
		if (mo)
			mo.Instigator = Instigator;
	}

	Instigator.Args[3] = SORC_STOPPED;
}

__states__
{
	S_SORCBALL3_1('SBMG', 0, 2.0 / 35.0, S_SORCBALL3_2) { A_SorcBallOrbit(); }
	S_SORCBALL3_2('SBMG', 1, 2.0 / 35.0, S_SORCBALL3_3) { A_SorcBallOrbit(); }
	S_SORCBALL3_3('SBMG', 2, 2.0 / 35.0, S_SORCBALL3_4) { A_SorcBallOrbit(); }
	S_SORCBALL3_4('SBMG', 3, 2.0 / 35.0, S_SORCBALL3_5) { A_SorcBallOrbit(); }
	S_SORCBALL3_5('SBMG', 4, 2.0 / 35.0, S_SORCBALL3_6) { A_SorcBallOrbit(); }
	S_SORCBALL3_6('SBMG', 5, 2.0 / 35.0, S_SORCBALL3_7) { A_SorcBallOrbit(); }
	S_SORCBALL3_7('SBMG', 6, 2.0 / 35.0, S_SORCBALL3_8) { A_SorcBallOrbit(); }
	S_SORCBALL3_8('SBMG', 7, 2.0 / 35.0, S_SORCBALL3_9) { A_SorcBallOrbit(); }
	S_SORCBALL3_9('SBMG', 8, 2.0 / 35.0, S_SORCBALL3_0) { A_SorcBallOrbit(); }
	S_SORCBALL3_0('SBMG', 9, 2.0 / 35.0, S_SORCBALL3_A) { A_SorcBallOrbit(); }
	S_SORCBALL3_A('SBMG', 10, 2.0 / 35.0, S_SORCBALL3_B) { A_SorcBallOrbit(); }
	S_SORCBALL3_B('SBMG', 11, 2.0 / 35.0, S_SORCBALL3_C) { A_SorcBallOrbit(); }
	S_SORCBALL3_C('SBMG', 12, 2.0 / 35.0, S_SORCBALL3_D) { A_SorcBallOrbit(); }
	S_SORCBALL3_D('SBMG', 13, 2.0 / 35.0, S_SORCBALL3_E) { A_SorcBallOrbit(); }
	S_SORCBALL3_E('SBMG', 14, 2.0 / 35.0, S_SORCBALL3_F) { A_SorcBallOrbit(); }
	S_SORCBALL3_F('SBMG', 15, 2.0 / 35.0, S_SORCBALL3_1) { A_SorcBallOrbit(); }
	S_SORCBALL3_D1('SBMG', 0, 5.0 / 35.0, S_SORCBALL3_D2) { A_SorcBallPop(); }
	S_SORCBALL3_D2('SBMG', 1, 2.0 / 35.0, S_SORCBALL3_D2) { A_BounceCheck(); }
	S_SORCBALL3_D5('SBS3', 3, 5.0 / 35.0, S_SORCBALL3_D6) { A_Explode(); }
	S_SORCBALL3_D6('SBS3', 4, 5.0 / 35.0, S_SORCBALL3_D7) { }
	S_SORCBALL3_D7('SBS3', 5, 6.0 / 35.0, S_SORCBALL3_D8) { }
	S_SORCBALL3_D8('SBS3', 6, 6.0 / 35.0, S_SORCBALL3_D9) { }
	S_SORCBALL3_D9('SBS3', 7, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Mass = 100.0;
	IdleState = S_SORCBALL3_1;
	PainState = S_SORCBALL3_D1;
	DeathState = S_SORCBALL3_D5;
	BallAngleOffset = 240.0;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.29  2002/06/29 15:54:34  dj_jl
//  Floatized PainChance.
//
//  Revision 1.28  2002/06/22 07:16:02  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.27  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.26  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.25  2002/03/28 18:20:11  dj_jl
//  Got rid of SetStateNF.
//
//  Revision 1.24  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.23  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.22  2002/03/02 17:58:36  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.21  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.20  2002/02/22 18:00:23  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.19  2002/02/16 16:26:56  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.18  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.17  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
