//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    CEILINGS
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	CLEV_LOWERTOFLOOR,
	CLEV_RAISETOHIGHEST,
	CLEV_LOWERANDCRUSH,
	CLEV_CRUSHANDRAISE,
	CLEV_LOWERBYVALUE,
	CLEV_RAISEBYVALUE,
	CLEV_CRUSHRAISEANDSTAY,
	CLEV_MOVETOVALUETIMES8
};

// TYPES -------------------------------------------------------------------

class CeilingMover:SectorThinker
{
	int type;
	float topheight;
	float speed;
	int direction;
	float bottomheight;
	int crush;
	int tag;	// ID

	void Think(void);
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	CeilingMover::Think
//
//==========================================================================

void CeilingMover::Think(void)
{
	int res;

	switch (direction)
	{
	case 1:	// UP
		res = T_MovePlane(sector, speed * frametime,
			topheight, false, 1, direction);
		if (res == RES_PASTDEST)
		{
			SectorStopSequence(sector);
			switch (type)
			{
			case CLEV_CRUSHANDRAISE:
				direction = -1;
				speed = speed * 2.0;
				break;
			default:
				sector->specialdata = NULL;
				TagFinished(sector->tag);
				RemoveSpecialThinker(this);
				break;
			}
		}
		break;
	case -1:	// DOWN
		res = T_MovePlane(sector, speed * frametime,
			bottomheight, crush, 1, direction);
		if (res == RES_PASTDEST)
		{
			SectorStopSequence(sector);
			switch (type)
			{
			case CLEV_CRUSHANDRAISE:
			case CLEV_CRUSHRAISEANDSTAY:
				direction = 1;
				speed = speed / 2.0;
				break;
			default:
				sector->specialdata = NULL;
				TagFinished(sector->tag);
				RemoveSpecialThinker(this);
				break;
			}
		}
		break;
	}
}

//==================================================================
//
//  EV_DoCeiling
//
//  Move a ceiling up/down and all around!
//
//==================================================================

int EV_DoCeiling(line_t * line, int *arg, int type)
{
	int secnum, rtn;
	sector_t *sec;
	CeilingMover *ceiling;

	secnum = -1;
	rtn = 0;

	while ((secnum = FindSectorFromTag(arg[0], secnum)) >= 0)
	{
		sec = &level->sectors[secnum];
		if (sec->specialdata)
			continue;

		//
		// new door thinker
		//
		rtn = 1;
		ceiling = NewSpecialThinker(CeilingMover);
		sec->specialdata = ceiling;
		ceiling->sector = sec;
		ceiling->crush = 0;
		ceiling->speed = itof(arg[1]) * 4.0;
		switch (type)
		{
		case CLEV_CRUSHRAISEANDSTAY:
			ceiling->crush = arg[2];	// arg[2] = crushing value
			ceiling->topheight = sec->ceilingheight;
			ceiling->bottomheight = sec->floorheight + 8.0;
			ceiling->direction = -1;
			break;
		case CLEV_CRUSHANDRAISE:
			ceiling->topheight = sec->ceilingheight;
		case CLEV_LOWERANDCRUSH:
			ceiling->crush = arg[2];	// arg[2] = crushing value
		case CLEV_LOWERTOFLOOR:
			ceiling->bottomheight = sec->floorheight;
			if (type != CLEV_LOWERTOFLOOR)
			{
				ceiling->bottomheight += 8.0;
			}
			ceiling->direction = -1;
			break;
		case CLEV_RAISETOHIGHEST:
			ceiling->topheight = FindHighestCeilingSurrounding(sec);
			ceiling->direction = 1;
			break;
		case CLEV_LOWERBYVALUE:
			ceiling->bottomheight = sec->ceilingheight - itof(arg[2]);
			ceiling->direction = -1;
			break;
		case CLEV_RAISEBYVALUE:
			ceiling->topheight = sec->ceilingheight + itof(arg[2]);
			ceiling->direction = 1;
			break;
		case CLEV_MOVETOVALUETIMES8:
			{
				float destHeight = itof(arg[2]) * 8.0;

				if (arg[3])
				{
					destHeight = -destHeight;
				}
				if (sec->ceilingheight <= destHeight)
				{
					ceiling->direction = 1;
					ceiling->topheight = destHeight;
					if (sec->ceilingheight == destHeight)
					{
						rtn = 0;
					}
				}
				else if (sec->ceilingheight > destHeight)
				{
					ceiling->direction = -1;
					ceiling->bottomheight = destHeight;
				}
				break;
			}
		default:
			rtn = 0;
			break;
		}
		ceiling->tag = sec->tag;
		ceiling->type = type;
		if (rtn)
		{
			SectorStartSequence(ceiling->sector,
				seq_name[SEQ_PLATFORM + ceiling->sector->seqType]);
		}
	}
	return rtn;
}

//==================================================================
//
//  EV_CeilingCrushStop
//
//  Stop a ceiling from crushing!
//
//==================================================================

int EV_CeilingCrushStop(line_t * line, int *args)
{
	CeilingMover c;

	FOREACH(CeilingMover, c)
	{
		if (c.tag == args[0])
		{
			SectorStopSequence(c.sector);
			c.sector->specialdata = NULL;
			TagFinished(c.sector->tag);
			RemoveSpecialThinker(&c);
			return 1;
		}
	}
	return 0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/18 18:31:01  dj_jl
//  Added class SectorThinker
//
//  Revision 1.5  2001/09/25 17:13:50  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/24 17:17:17  dj_jl
//  Created thinker classes
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
