//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//**************************************************************************
//
//	Minotaur
//
//**************************************************************************
//**************************************************************************

class Minotaur:Pawn
	__mobjinfo__(9)
{

//
// Minotaur variables
//

//  SpecialMobj1    pointer to player that spawned it
bool bFloorFireRefired;		//  internal to minotaur AI
//  Args[0]         minotaur start time
//  Args[4]         charge duration countdown

int LookState;
int SeeStateNF;
int RoamState;
int FloorFireState;
int FloorFireRefireState;
int ChargeState;

#define MINOTAUR_LOOK_DIST		(16.0 * 54.0)
#define MNTR_CHARGE_SPEED		805.0

//============================================================================
//
//  A_MinotaurFade0
//
//============================================================================

void A_MinotaurFade0(void)
{
	Translucency = 66;
}

//============================================================================
//
//  A_MinotaurFade1
//
//============================================================================

void A_MinotaurFade1(void)
{
	// Second level of transparency
	Translucency = 33;
}

//============================================================================
//
//  A_MinotaurFade2
//
//============================================================================

void A_MinotaurFade2(void)
{
	// Make fully visible
	Translucency = 0;
}

//============================================================================
//
//  A_MinotaurLook
//
//  Look for enemy of player
//
//============================================================================

void A_MinotaurLook(void)
{
	Actor mo;
	float dist;
	int i;
	Actor master = *_SpecialMobj1;

	Enemy = none;

	if (deathmatch)	// Quick search for players
	{
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (!players[i].bSpawned)
				continue;
			mo = players[i].MO;
			if (mo == master)
				continue;
			if (mo.Health <= 0)
				continue;
			dist = MobjDist(self, mo);
			if (dist > MINOTAUR_LOOK_DIST)
				continue;
			Enemy = mo;
			break;
		}
	}

	if (!Enemy)	// Near player monster search
	{
		if (master && (master.Health > 0) && master.bIsPlayer)
			Enemy = master.RoughMonsterSearch(20);
		else
			Enemy = RoughMonsterSearch(20);
	}

	if (!Enemy)	// Normal monster search
	{
		FOREACH(Actor, mo)
		{
			if (!mo.bCountKill)
				continue;
			if (mo.Health <= 0)
				continue;
			if (!mo.bShootable)
				continue;
			dist = MobjDist(self, mo);
			if (dist > MINOTAUR_LOOK_DIST)
				continue;
			if ((mo == master) || (mo == self))
				continue;
			if ((mo.Class == Minotaur) &&
				(mo._SpecialMobj1 == _SpecialMobj1)) continue;
			Enemy = mo;
			break;	// Found mobj to attack
		}
	}

	if (Enemy)
	{
		SetState(SeeStateNF);
	}
	else
	{
		SetState(RoamState);
	}
}

//============================================================================
//
//  A_MinotaurChase
//
//============================================================================

void A_MinotaurChase(void)
{
	int starttime = Args[0];

	Translucency = 0;	// In case pain caused him to skip his fade in.

	if ((level->tictime - starttime) >= ftoi(MAULATORTIME * 35.0))
	{
		Damage(none, none, 10000);
		return;
	}

	if (P_Random() < 30)
		A_MinotaurLook();	// adjust to closest target

	if (!Enemy || (Enemy.Health <= 0) || !Enemy.bShootable)
	{
		// look for a new enemy
		SetState(LookState);
		return;
	}

	FaceMovementDirection();
	ReactionCount = 0;

	// Melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// Missile attack
	if (MissileState && CheckMissileRange())
	{
		SetState(MissileState);
		return;
	}

	// chase towards target
	if (!StepMove())
	{
		NewChaseDir();
	}

	// Active sound
	if (ActiveSound && P_Random() < 6)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}

}

//============================================================================
//
//  A_MinotaurRoam
//
//============================================================================

void A_MinotaurRoam(void)
{
	int starttime = Args[0];

	Translucency = 0;	// In case pain caused him to skip his fade in.

	if ((level->tictime - starttime) >= ftoi(MAULATORTIME * 35.0))
	{
		Damage(none, none, 10000);
		return;
	}

	if (P_Random() < 30)
		A_MinotaurLook();	// adjust to closest target

	if (P_Random() < 6)
	{
		//Choose new direction
		MoveDir = P_Random() % 8;
		FaceMovementDirection();
	}
	if (!StepMove())
	{
		// Turn
		if (P_Random() & 1)
			MoveDir = (++MoveDir) % 8;
		else
			MoveDir = (MoveDir + 7) % 8;
		FaceMovementDirection();
	}
}

//============================================================================
//
//  A_MinotaurAtk1
//
//  Melee attack.
//
//============================================================================

void A_MinotaurAtk1(void)
{
	if (!Enemy)
	{
		return;
	}

	PlaySound('MaulatorHamSwing', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(4));
	}
}

//============================================================================
//
//  A_MinotaurDecide
//
//  Choose a missile attack.
//
//============================================================================

void A_MinotaurDecide(void)
{
	float dist;

	if (!Enemy)
		return;
	dist = MobjDist(self, Enemy);

	if (Enemy.Origin.z + Enemy.Height > Origin.z &&
		Enemy.Origin.z + Enemy.Height < Origin.z + Height &&
		dist < 16.0 * 64.0 && dist > 1.0 * 64.0 && P_Random() < 230)
	{
		// Charge attack
		// Don't call the state function right away
		SetState(ChargeState);
		bSkullFly = true;
		A_FaceTarget();
		Velocity = Normalize(Enemy.Origin - Origin) * MNTR_CHARGE_SPEED;
		Args[4] = 35 / 2;	// Charge duration
	}
	else if (Enemy.Origin.z == Enemy.FloorZ &&
		dist < 9.0 * 64.0 && P_Random() < 100)
	{
		// Floor fire attack
		SetState(FloorFireState);
		bFloorFireRefired = false;
	}
	else
	{
		// Swing attack
		A_FaceTarget();
		// Don't need to call SetState because the current state
		// falls through to the swing attack
	}
}

//============================================================================
//
//  A_MinotaurAtk2
//
//  Swing attack.
//
//============================================================================

void A_MinotaurAtk2(void)
{
	Actor mo;
	float angle;
	float momz;

	if (!Enemy)
		return;

	PlaySound('MaulatorHamSwing', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(3));
		return;
	}
	mo = SpawnMissile(Enemy, MinotaurMissile);
	if (mo)
	{
		momz = mo.Velocity.z;
		angle = mo.Angles.yaw;
		SpawnMissileAngle(MinotaurMissile,
			AngleMod360(angle - (45.0 / 8.0)), momz);
		SpawnMissileAngle(MinotaurMissile,
			AngleMod360(angle + (45.0 / 8.0)), momz);
		SpawnMissileAngle(MinotaurMissile,
			AngleMod360(angle - (45.0 / 16.0)), momz);
		SpawnMissileAngle(MinotaurMissile,
			AngleMod360(angle + (45.0 / 16.0)), momz);
	}
}

//============================================================================
//
//  A_MinotaurAtk3
//
//  Floor fire attack.
//
//============================================================================

void A_MinotaurAtk3(void)
{
	Actor mo;

	if (!Enemy)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(3));
		if (Enemy.bIsPlayer)
		{
			// Squish the player
			Enemy.Player->DeltaViewHeight = -16.0;
		}
	}
	else
	{
		mo = SpawnMissile(Enemy, MinotaurFloorFire1);
		if (mo)
		{
			mo.PlaySound('MaulatorHamHit', CHAN_VOICE);
		}
	}
	if (P_Random() < 192 && !bFloorFireRefired)
	{
		SetState(FloorFireRefireState);
		bFloorFireRefired = true;
	}
}

//============================================================================
//
//  A_MinotaurCharge
//
//============================================================================

void A_MinotaurCharge(void)
{
	Actor puff;

	if (!Enemy)
		return;

	if (Args[4] > 0)
	{
		puff = Spawn(PunchPuff, Origin);
		puff.Velocity.z = 2.0 * 35.0;
		Args[4]--;
	}
	else
	{
		bSkullFly = false;
		SetState(SeeState);
	}
}

//============================================================================
//
//  A_SmokePuffExit
//
//============================================================================

void A_SmokePuffExit(void)
{
	Spawn(MinotaurSmokeExit, Origin);
}

__states__
{
	S_MNTR_SPAWN1('MNTR', 0, 15.0 / 35.0, S_MNTR_SPAWN2) { }
	S_MNTR_SPAWN2('MNTR', 0, 15.0 / 35.0, S_MNTR_SPAWN3) { A_MinotaurFade1(); }
	S_MNTR_SPAWN3('MNTR', 0, 3.0 / 35.0, S_MNTR_LOOK1) { A_MinotaurFade2(); }
	S_MNTR_LOOK1('MNTR', 0, 10.0 / 35.0, S_MNTR_LOOK2) { A_MinotaurLook(); }
	S_MNTR_LOOK2('MNTR', 1, 10.0 / 35.0, S_MNTR_LOOK1) { A_MinotaurLook(); }
	S_MNTR_WALK1_NF('MNTR', 0, 5.0 / 35.0, S_MNTR_WALK2) { }
	S_MNTR_WALK1('MNTR', 0, 5.0 / 35.0, S_MNTR_WALK2) { A_MinotaurChase(); }
	S_MNTR_WALK2('MNTR', 1, 5.0 / 35.0, S_MNTR_WALK3) { A_MinotaurChase(); }
	S_MNTR_WALK3('MNTR', 2, 5.0 / 35.0, S_MNTR_WALK4) { A_MinotaurChase(); }
	S_MNTR_WALK4('MNTR', 3, 5.0 / 35.0, S_MNTR_WALK1) { A_MinotaurChase(); }
	S_MNTR_ROAM1_NF('MNTR', 0, 5.0 / 35.0, S_MNTR_ROAM2) { }
	S_MNTR_ROAM1('MNTR', 0, 5.0 / 35.0, S_MNTR_ROAM2) { A_MinotaurRoam(); }
	S_MNTR_ROAM2('MNTR', 1, 5.0 / 35.0, S_MNTR_ROAM3) { A_MinotaurRoam(); }
	S_MNTR_ROAM3('MNTR', 2, 5.0 / 35.0, S_MNTR_ROAM4) { A_MinotaurRoam(); }
	S_MNTR_ROAM4('MNTR', 3, 5.0 / 35.0, S_MNTR_ROAM1) { A_MinotaurRoam(); }
	S_MNTR_ATK1_1('MNTR', 6, 10.0 / 35.0, S_MNTR_ATK1_2) { A_FaceTarget(); }
	S_MNTR_ATK1_2('MNTR', 7, 7.0 / 35.0, S_MNTR_ATK1_3) { A_FaceTarget(); }
	S_MNTR_ATK1_3('MNTR', 8, 12.0 / 35.0, S_MNTR_WALK1) { A_MinotaurAtk1(); }
	S_MNTR_ATK2_1('MNTR', 6, 10.0 / 35.0, S_MNTR_ATK2_2) { A_MinotaurDecide(); }
	S_MNTR_ATK2_2('MNTR', 9, 4.0 / 35.0, S_MNTR_ATK2_3) { A_FaceTarget(); }
	S_MNTR_ATK2_3('MNTR', 10, 9.0 / 35.0, S_MNTR_WALK1) { A_MinotaurAtk2(); }
	S_MNTR_ATK3_1('MNTR', 6, 10.0 / 35.0, S_MNTR_ATK3_2) { A_FaceTarget(); }
	S_MNTR_ATK3_2('MNTR', 7, 7.0 / 35.0, S_MNTR_ATK3_3) { A_FaceTarget(); }
	S_MNTR_ATK3_3('MNTR', 8, 12.0 / 35.0, S_MNTR_WALK1) { A_MinotaurAtk3(); }
	S_MNTR_ATK3_4('MNTR', 8, 12.0 / 35.0, S_MNTR_ATK3_1) { }
	S_MNTR_ATK4_1('MNTR', 5, 2.0 / 35.0, S_MNTR_ATK4_2) { }
	S_MNTR_ATK4_2('MNTR', 5, 2.0 / 35.0, S_MNTR_ATK4_2) { A_MinotaurCharge(); }
	S_MNTR_PAIN1('MNTR', 4, 3.0 / 35.0, S_MNTR_PAIN2) { }
	S_MNTR_PAIN2('MNTR', 4, 6.0 / 35.0, S_MNTR_WALK1) { A_Pain(); }
	S_MNTR_DIE1('MNTR', 4, 6.0 / 35.0, S_MNTR_DIE2) { }
	S_MNTR_DIE2('MNTR', 4, 2.0 / 35.0, S_MNTR_DIE3) { A_Scream(); }
	S_MNTR_DIE3('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE4) { A_SmokePuffExit(); }
	S_MNTR_DIE4('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE5) { }
	S_MNTR_DIE5('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE6) { A_NoBlocking(); }
	S_MNTR_DIE6('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE7) { }
	S_MNTR_DIE7('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE8) { A_MinotaurFade1(); }
	S_MNTR_DIE8('MNTR', 4, 5.0 / 35.0, S_MNTR_DIE9) { A_MinotaurFade0(); }
	S_MNTR_DIE9('MNTR', 4, 10.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Health = 2500;
	Radius = 28.0;
	Height = 100.0;
	Mass = 800.0;
	StepSpeed = 16.0;
	PainChance = 25;
	MissileDamage = 7;
	Translucency = 66;
	IdleState = S_MNTR_SPAWN1;
	LookState = S_MNTR_LOOK1;
	SeeState = S_MNTR_WALK1;
	SeeStateNF = S_MNTR_WALK1_NF;
	RoamState = S_MNTR_ROAM1_NF;
	MeleeState = S_MNTR_ATK1_1;
	MissileState = S_MNTR_ATK2_1;
	FloorFireState = S_MNTR_ATK3_1;
	FloorFireRefireState = S_MNTR_ATK3_4;
	ChargeState = S_MNTR_ATK4_1;
	PainState = S_MNTR_PAIN1;
	DeathState = S_MNTR_DIE1;
	SightSound = 'MaulatorSight';
	ActiveSound = 'MaulatorActive';
	AttackSound = 'MaulatorHamSwing';
	PainSound = 'MaulatorPain';
	DeathSound = 'MaulatorDeath';
	bActivateMCross = false;
	bCheckNoMonsters = false;	// We want minoaturs also in deathmatch
}

}

//**************************************************************************
//**************************************************************************

//==========================================================================
//
//  Actor::A_Summon
//
//  Summon Minotaur
//
//==========================================================================

void Actor::A_Summon(void)
{
	Actor A;

	A = Spawn(Minotaur, Origin);
	if (A)
	{
		if (!A.TestLocation() || !_SpecialMobj1)
		{
			// Didn't fit - change back to artifact
			A.SetState(S_NULL);
			A = Spawn(ArtifactSummonMaulator, Origin);
			if (A)
				A.bDropped = true;
			return;
		}

		A.Args[0] = level->tictime;
		if (_SpecialMobj1->bCorpse)
		{
			// Master dead
			A._SpecialMobj1 = NULL;	// No master
		}
		else
		{
			A._SpecialMobj1 = _SpecialMobj1;	// Pointer to master
			PlayerPawn(*_SpecialMobj1).GivePower(pw_minotaur);
		}

		// Make smoke puff
		Spawn(MinotaurSmoke, Origin);
		PlaySound('MaulatorActive', CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_MntrFloorFire
//
//============================================================================

void Actor::A_MntrFloorFire(void)
{
	Actor A;

	Origin.z = FloorZ;
	A = Spawn(MinotaurFloorFire2, vector(
		Origin.x + (Random() - Random()) * 4.0,
		Origin.y + (Random() - Random()) * 4.0, ONFLOORZ));
	A.Instigator = Instigator;
	A.Velocity.x = 0.00001;	// Force block checking
	A.CheckMissileSpawn();
}

//**************************************************************************
//
//  $Log$
//  Revision 1.28  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.27  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.26  2002/03/16 17:47:46  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.25  2002/03/12 19:19:16  dj_jl
//  Pickup classes
//
//  Revision 1.24  2002/03/02 17:58:36  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.23  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.22  2002/02/22 18:00:22  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.21  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.20  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.18  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.17  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.16  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.15  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.13  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.10  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.9  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.8  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.7  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
