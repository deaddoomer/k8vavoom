//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

float air_control = 1.0 / 256.0;

Actor GLavaInflictor;

bool onground;

float pushTab[3] = {
	5.0 * 35.0 * 35.0 / 32.0,
	10.0 * 35.0 * 35.0 / 32.0,
	25.0 * 35.0 * 35.0 / 32.0
};

//==========================================================================
//
//  PlayerThink
//
//==========================================================================

void PlayerThink(Player player)
{
	PlayerPawn(player.MO).PlayerTick(frametime);
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos(Player player)
{
	PlayerPawn(player.MO).SetViewPos();
}

//==========================================================================
//
// EV_LineSearchForPuzzleItem
//
//==========================================================================

bool EV_LineSearchForPuzzleItem(line_t * line, int *args, Actor A)
{
	int i;
	int type, arti;

	if (!A)
		return false;
	if (!A.bIsPlayer)
		return false;

	// Search player's inventory for puzzle items
	for (i = 0; i < A.Player.ArtifactCount; i++)
	{
		arti = A.Player.Inventory[i].type;
		type = arti - arti_firstpuzzitem;
		if (type < 0)
			continue;
		if (type == line->arg1)
		{
			// A puzzle item was found for the line
			if (PlayerPawn(A).UseArtifact(arti))
			{
				// A puzzle item was found for the line
				PlayerPawn(A).PlayerRemoveArtifact(i);
				if (arti < arti_firstpuzzitem)
				{
					A.PlaySound('UseArtifact', CHAN_ITEM);
				}
				else
				{
					A.PlaySound('PuzzleSuccess', CHAN_ITEM);
				}
				A.Player.ArtifactFlash = 4;
				return true;
			}
		}
	}
	return false;
}

//==========================================================================
//
//  G_PlayerExitMap
//
//  Called when the player leaves a map.
//
//==========================================================================

void G_PlayerExitMap(int playerNumber, bool clusterChange)
{
	int i;
	Player player;
	float flightPower;

	player = svvars->Players[playerNumber];

	// Strip all current powers (retain flight)
	flightPower = player.Powers[pw_flight];
	for (i = 0; i < NUMPOWERS; i++)
		player.Powers[i] = 0.0;
//  memset(player.Powers, 0, sizeof(player.Powers));
	player.Powers[pw_flight] = flightPower;

	if (deathmatch)
	{
		player.Powers[pw_flight] = 0.0;
	}
	else
	{
		if (clusterChange)
		{	// Entering new cluster
			// Strip all keys
			player.Keys = 0;

			// Strip flight artifact
			for (i = 0; i < 25; i++)
			{
				player.Powers[pw_flight] = 0.0;
				PlayerPawn(player.MO).PlayerUseArtifact(arti_fly);
			}
			player.Powers[pw_flight] = 0.0;
		}
	}

	if (player.MorphTime)
	{
		SetWeapon(player, player.MO._Special1);	// Restore weapon
		player.MorphTime = 0.0;
	}
	player.MO.Angles.pitch = 0.0;
	player.MO.Translucency = 0;	// Remove invisibility
	player.ExtraLight = 0;	// Remove weapon flashes
	player.FixedColormap = 0;	// Remove torch
	player.DamageFlash = 0.0;	// No palette changes
	player.BonusFlash = 0.0;
	player.PoisonCount = 0;
}

//==========================================================================
//
//  G_DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void G_DeathMatchSpawnPlayer(int playernum)
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % level->numdeathmatchstarts;
		if (G_CheckSpot(playernum, &level->deathmatchstarts[i]))
		{
			level->deathmatchstarts[i].type = playernum + 1;
			P_SpawnPlayer(&level->deathmatchstarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	P_SpawnPlayer(&level->playerstarts[playernum]);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn(int playernum)
{
	int i;
	bool oldWeaponowned[NUMWEAPONS];
	int oldKeys;
	int oldPieces;
	bool foundSpot;
	int bestWeapon;
	Player player;

	// respawn at the start
	player = svvars->Players[playernum];

	// remove pitch and roll angles from corpse
	player.MO.Angles.pitch = 0.0;
	player.MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	player.MO.Player = none;
	player.MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(playernum);
		return;
	}

	// Cooperative net-play, retain keys and weapons
	oldKeys = player.Keys;
	oldPieces = player.Pieces;
	for (i = 0; i < NUMWEAPONS; i++)
	{
		oldWeaponowned[i] = player.WeaponOwned[i];
	}

	foundSpot = false;
	if (G_CheckSpot(playernum,
			&level->playerstarts[RebornPosition * MAXPLAYERS + playernum]))
	{	// Appropriate player start spot is open
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
				playernum]);
		foundSpot = true;
	}
	else
	{
		// Try to spawn at one of the other player start spots
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (G_CheckSpot(playernum,
					&level->playerstarts[RebornPosition * MAXPLAYERS + i]))
			{	// Found an open start spot

				// Fake as other player
				level->playerstarts[RebornPosition * MAXPLAYERS + i].type =
					playernum + 1;
				P_SpawnPlayer(&level->playerstarts[RebornPosition *
						MAXPLAYERS + i]);

				// Restore proper player type
				level->playerstarts[RebornPosition * MAXPLAYERS + i].type =
					i + 1;

				foundSpot = true;
				break;
			}
		}
	}

	if (!foundSpot)
	{
		// Player's going to be inside something
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
				playernum]);
	}

	// Restore keys and weapons
	player.Keys = oldKeys;
	player.Pieces = oldPieces;
	for (bestWeapon = 0, i = 0; i < NUMWEAPONS; i++)
	{
		if (oldWeaponowned[i])
		{
			bestWeapon = i;
			player.WeaponOwned[i] = true;
		}
	}
	player.Mana[MANA_1] = 25;
	player.Mana[MANA_2] = 25;
	if (bestWeapon)
	{
		// Bring up the best weapon
		player.PendingWeapon = bestWeapon;
	}
}

//==========================================================================
//
//  SetPlayerColor
//
//==========================================================================

void SetPlayerColor(Player player)
{
	player.MO.Translation = 0;
	if (player.PClass == PCLASS_FIGHTER)
	{
		// The first type should be blue, and the third should be the
		// Fighter's original gold color
		if (player.Color == 0)
		{
			player.MO.Translation = 2;
		}
		else if (player.Color != 2)
		{
			player.MO.Translation = player.Color;
		}
	}
	else if (player.Color)
	{
		// Set color translation bits for player sprites
		player.MO.Translation =
			player.PClass * (MAXPLAYERS - 1) + player.Color;
	}
}

//==========================================================================
//
//	PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer(Player player)
{
	player.ViewEnts[ps_weapon] = SpawnObject(Weapon, none);
	player.ViewEnts[ps_weapon].Player = player;
	player.ViewEnts[ps_flash] = SpawnObject(Weapon, none);
	player.ViewEnts[ps_flash].Player = player;
	if (player.bIsBot)
	{
		player.Bot = SpawnObject(BotPlayer, none);
		player.Bot.player = player;
		player.Bot.OnBeginPlay();
	}
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient(int i)
{
	Player player;
	int j;
	int oldKeys;
	int oldPieces;
	bool oldWeaponowned[NUMWEAPONS];
	bool playerWasReborn;
	int bestWeapon;

	player = svvars->Players[i];

	player.Attacker = none;
	player.Poisoner = none;

	if (netgame && !deathmatch)
	{
		// Cooperative net-play, retain keys and weapons
		oldKeys = player.Keys;
		oldPieces = player.Pieces;
		for (j = 0; j < NUMWEAPONS; j++)
		{
			oldWeaponowned[j] = player.WeaponOwned[j];
		}
		playerWasReborn = (player.PlayerState == PST_REBORN);
	}

	//  Spawn player
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(i);
	}
	else
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + i]);
	}

	if (netgame && !deathmatch && playerWasReborn)
	{
		// Restore keys and weapons when reborn in co-op
		player.Keys = oldKeys;
		player.Pieces = oldPieces;
		for (bestWeapon = 0, j = 0; j < NUMWEAPONS; j++)
		{
			if (oldWeaponowned[j])
			{
				bestWeapon = j;
				player.WeaponOwned[j] = true;
			}
		}
		player.Mana[MANA_1] = 25;
		player.Mana[MANA_2] = 25;
		if (bestWeapon)
		{
			// Bring up the best weapon
			player.PendingWeapon = bestWeapon;
		}
	}

	// Destroy all things touching players
	player.MO.TeleportMove(player.MO.Origin);
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient(Player player)
{
	int i;

	if (player.Bot != none)
	{
		player.Bot.Destroy();
		player.Bot = none;
	}
	if (player.MO)
	{
		player.MO.Player = none;
		player.MO.bIsPlayer = false;
		player.MO.Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (player.ViewEnts[i])
		{
			player.ViewEnts[i].Destroy();
			player.ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(player.PlayerName));
	player.MO.PlayFullVolumeSound('Chat', CHAN_AUTO);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged(Player player)
{
	if (!player.bSpawned)
	{
		return;
	}
	SetPlayerColor(player);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.42  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.41  2003/07/11 16:47:39  dj_jl
//  Made array of players with pointers
//
//  Revision 1.40  2003/03/08 12:41:45  dj_jl
//  Removing class pointers.
//
//  Revision 1.39  2002/11/02 08:24:12  dj_jl
//  New style classes.
//
//  Revision 1.38  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.37  2002/07/23 13:07:31  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.36  2002/07/13 08:01:50  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.35  2002/04/11 16:49:50  dj_jl
//  Tick function.
//
//  Revision 1.34  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.33  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.32  2002/03/12 19:19:18  dj_jl
//  Pickup classes
//
//  Revision 1.31  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.30  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.29  2002/03/02 18:00:17  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.28  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.27  2002/02/22 18:00:25  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.26  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.25  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.24  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.23  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.22  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.21  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.20  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.19  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.18  2002/01/11 08:03:13  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.17  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.16  2002/01/03 18:31:57  dj_jl
//  Fixed view sprites
//
//  Revision 1.15  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.14  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.13  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.12  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.11  2001/10/09 17:36:57  dj_jl
//  Added flags for status bar
//
//  Revision 1.10  2001/10/04 17:27:20  dj_jl
//  Fixed air movement bug
//
//  Revision 1.9  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.8  2001/09/27 17:09:51  dj_jl
//  Changed LavaInflictor to pointer
//
//  Revision 1.7  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.6  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.5  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.4  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
