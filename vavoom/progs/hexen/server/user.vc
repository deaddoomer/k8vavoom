//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

float air_control = 1.0 / 256.0;

#define HEAL_RADIUS_DIST	255.0

#define TXT_USEPUZZLEFAILED			"YOU CANNOT USE THIS HERE"

void SetWeapon(player_t *player, int NewWeapon);
void SetPlayerRunState(player_t * player);
boolean UndoPlayerMorph(player_t * player);
void MovePsprites(player_t * player);
void MorphPlayerThink(player_t * player);
void DeathPlayerThink(player_t * player);
mobj_t *SpawnSpeedMobj(mobj_t * pmo);
void ArtiPig(mobj_t * mo);
void ArtiSummon(player_t * player);
void ArtiPoisonBag(player_t * player);
void ArtiTeleportOther(player_t * player);
void ArtiBlastRadius(player_t * player);
void PlayerUseArtifact(player_t * player, int arti);
void PlayerNextArtifact(player_t * player);
void PlayerRemoveArtifact(player_t * player, int slot);
void P_RemoveMobjFromTIDList(mobj_t * mobj);
boolean P_TeleportMove(mobj_t * thing, float x, float y);
boolean P_Teleport(mobj_t * thing, float x, float y, float angle,
	boolean useFog);
boolean G_CheckSpot(int playernum, mthing_t * mthing);
boolean P_UsePuzzleItem(player_t * player, int itemType);
void P_UseLines(player_t * player);

mobj_t *LavaInflictor;

boolean onground;

//==========================================================================
//
//  MovePlayer
//
//==========================================================================

float sv_maxspeed = 400.0;
float sv_accelerate = 10.0;

void MovePlayer(player_t * player)
{
	float fly;
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	forward = player->ForwardMove;
	side = player->SideMove;

	//  Adjust speed depending on class. Originaly this is done in input
	// code, but to simplify it, we do it here.
	//  Fighter moves faster, cleric at original speed, mage - slower,
	// pig - slower, but faster than mage
	switch (player->PClass)
	{
	case PCLASS_FIGHTER:
		forward *= 1.18;
		side *= 1.3;
		break;

	case PCLASS_CLERIC:
		break;

	case PCLASS_MAGE:
		forward *= 0.9;
		side *= 0.9;
		break;

	case PCLASS_PIG:
		forward *= 0.97;
		side *= 0.97;
		break;
	}

	if (player->Powers[pw_speed] && !player->MorphTics)
	{
		// Adjust for a player with a speed artifact
		forward *= 1.5;
		side *= 1.5;
	}
	if (!(player->Powers[pw_flight]
			&& !(player->mo->Origin.z <= player->mo->FloorZ))
		&& player->mo->GetFloorType() == FLOOR_ICE)	// Friction_Low
	{
		forward *= 0.5;
		side *= 0.5;
	}

	// Do not let the player control movement
	//  if not onground.
	onground = (player->mo->Origin.z <= player->mo->FloorZ)
		|| player->mo->bOnMobj;
	if (!(onground || player->mo->bFly))
	{
		//  not on ground, so little effect on velocity
		forward *= air_control;
		side *= air_control;
	}

	AngleVectors(&player->mo->Angles, &vforward, &vright, &vup);

	wishvel = forward * vforward + side * vright;
	if (onground && !player->mo->bFly)
	{
		wishvel.z = 0.0;
	}

	player->mo->Velocity += 5.0 * frametime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState(player);
	}

	fly = player->FlyMove / 16.0;
	if (fly && player->Powers[pw_flight])
	{
		if (player->FlyMove != TOCENTER)
		{
			player->FlyHeight = fly * 2.0;
			if (!player->mo->bFly)
			{
				player->mo->bFly = true;
				player->mo->bNoGravity = true;
				if (player->mo->Velocity.z <= -39.0 * 35.0)
				{
					// stop falling scream
					StopSound(*player->mo, CHAN_AUTO);
				}
			}
		}
		else
		{
			player->mo->bFly = false;
			player->mo->bNoGravity = false;
		}
	}
	else if (fly > 0.0)
	{
		PlayerUseArtifact(player, arti_fly);
	}
	if (player->mo->bFly)
	{
		player->mo->Velocity.z = player->FlyHeight * 35.0 + wishvel.z;
		if (player->FlyHeight)
		{
			player->FlyHeight /= 2.0;
		}
	}
	if ((player->Buttons & BT_JUMP) && onground && !player->JumpTics)
	{
		if (player->MorphTics)
		{
			player->mo->Velocity.z = 6.0 * 35.0;
		}
		else
		{
			player->mo->Velocity.z = 9.0 * 35.0;
		}
		player->mo->bOnMobj = false;
		player->JumpTics = 18;
	}
}

//==========================================================================
//
//  CheckWaterJump
//
//==========================================================================

void CheckWaterJump(player_t * player)
{
	TVec start;
	TVec end;
	TVec vforward;

	// check for a jump-out-of-water
	AngleVector(&player->mo->Angles, &vforward);
	start = player->mo->Origin;
	start.z += player->mo->Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalize(vforward);
	end = start + vforward * 24.0;
	if (!TraceLine(start, end))
	{
		// solid at waist
		start.z = player->mo->Origin.z + player->mo->Height;
		end = start + vforward * 24.0;
		player->MoveDir = trace_plane_normal * -50.0;
		if (TraceLine(start, end))
		{
			// open at eye level
			player->mo->bWaterJump = true;
			player->mo->Velocity.z = 350.0;
			player->mo->ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  WaterMove
//
//==========================================================================

void WaterMove(player_t * player)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	// Do not let the player control movement
	//  if not onground.
	onground = (player->mo->Origin.z <= player->mo->FloorZ)
		|| player->mo->bOnMobj;

	AngleVectors(&player->mo->Angles, &vforward, &vright, &vup);

	forward = player->ForwardMove;
	side = player->SideMove;

	//  Adjust speed depending on class. Originaly this is done in input
	// code, but to simplify it, we do it here.
	//  Fighter moves faster, cleric at original speed, mage - slower,
	// pig - slower, but faster than mage
	switch (player->PClass)
	{
	case PCLASS_FIGHTER:
		forward *= 1.18;
		side *= 1.3;
		break;

	case PCLASS_CLERIC:
		break;

	case PCLASS_MAGE:
		forward *= 0.9;
		side *= 0.9;
		break;

	case PCLASS_PIG:
		forward *= 0.97;
		side *= 0.97;
		break;
	}

	if (player->Powers[pw_speed] && !player->MorphTics)
	{
		// Adjust for a player with a speed artifact
		forward *= 1.5;
		side *= 1.5;
	}

	wishvel = vforward * forward + vright * side;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  else
//      wishvel.z += cmd.upmove;

	player->mo->Velocity += 3.5 * frametime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState(player);
	}

	if (player->Buttons & BT_JUMP)
	{
		if (player->mo->WaterType == CONTENTS_WATER)
			player->mo->Velocity.z = 100.0;
		else if (player->mo->WaterType == CONTENTS_SLUDGE)
			player->mo->Velocity.z = 80.0;
		else
			player->mo->Velocity.z = 50.0;
	}
	CheckWaterJump(player);
}

//==========================================================================
//
//  WaterJump
//
//==========================================================================

void WaterJump(player_t * player)
{
	if (!player->mo->ReactionTime || !player->mo->WaterLevel)
	{
		player->mo->bWaterJump = false;
		player->mo->ReactionTime = 0.0;
	}
	player->mo->Velocity.x = player->MoveDir.x;
	player->mo->Velocity.y = player->MoveDir.y;
}

//==========================================================================
//
//  ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void ThrustPlayer(player_t * player, float angle, float move)
{
	if (!(player->Powers[pw_flight]
			&& !(player->mo->Origin.z <= player->mo->FloorZ))
		&& player->mo->GetFloorType() == FLOOR_ICE)	// Friction_Low
	{
		move *= 0.5;
	}
	player->mo->Velocity.x += move * cos(angle) * frametime;
	player->mo->Velocity.y += move * sin(angle) * frametime;
}

//==========================================================================
//
//  CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void CalcHeight(player_t * player)
{
	float angle;
	float bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	player->Bob = (player->mo->Velocity.x * player->mo->Velocity.x +
		player->mo->Velocity.y * player->mo->Velocity.y)
		* frametime * frametime;

	player->Bob /= 4.0;
	if (player->Bob > MAXBOB)
		player->Bob = MAXBOB;

	if (player->mo->bFly && !onground)
	{
		player->Bob = 0.5;
	}

	angle = 180.0 * 35.0 / 10.0 * level->time;
	bob = player->Bob / 2.0 * sin(angle);

	// move viewheight
	if (player->PlayerState == PST_LIVE)
	{
		player->ViewHeight += player->DeltaViewHeight;

		if (player->ViewHeight > VIEWHEIGHT)
		{
			player->ViewHeight = VIEWHEIGHT;
			player->DeltaViewHeight = 0.0;
		}

		if (player->ViewHeight < VIEWHEIGHT / 2.0)
		{
			player->ViewHeight = VIEWHEIGHT / 2.0;
			if (player->DeltaViewHeight <= 0.0)
				player->DeltaViewHeight = 0.00001;
		}

		if (player->DeltaViewHeight)
		{
			player->DeltaViewHeight += 0.25;
			if (!player->DeltaViewHeight)
				player->DeltaViewHeight = 0.00001;
		}
	}
	if (player->MorphTics)
	{
		player->ViewOrg.z = player->mo->Origin.z + player->ViewHeight - 20.0;
	}
	else
	{
		player->ViewOrg.z = player->mo->Origin.z + player->ViewHeight + bob;
	}
	if (player->mo->FloorClip && player->PlayerState != PST_DEAD &&
		player->mo->Origin.z <= player->mo->FloorZ)
	{
		player->ViewOrg.z -= player->mo->FloorClip;
	}
	if (player->ViewOrg.z < player->mo->FloorZ + 4.0)
	{
		player->ViewOrg.z = player->mo->FloorZ + 4.0;
	}

	if (player->ViewOrg.z > player->mo->CeilingZ - 4.0)
		player->ViewOrg.z = player->mo->CeilingZ - 4.0;
}

//==========================================================================
//
//  PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector.
//
//==========================================================================

float pushTab[3] = {
	5.0 * 35.0 * 35.0 / 32.0,
	10.0 * 35.0 * 35.0 / 32.0,
	25.0 * 35.0 * 35.0 / 32.0
};

void PlayerInSpecialSector(player_t * player)
{
	sector_t *sector;

	sector = player->mo->Sector;
	if (player->mo->Origin.z != sector->floorheight)
	{
		// Player is not touching the floor
		return;
	}
	switch (sector->special)
	{
	case 9:	// SecretArea
		player->SecretCount++;
		sector->special = 0;
		break;

	case 201:
	case 202:
	case 203:	// Scroll_North_xxx
		ThrustPlayer(player, 90.0, pushTab[sector->special - 201]);
		break;
	case 204:
	case 205:
	case 206:	// Scroll_East_xxx
		ThrustPlayer(player, 0.0, pushTab[sector->special - 204]);
		break;
	case 207:
	case 208:
	case 209:	// Scroll_South_xxx
		ThrustPlayer(player, 270.0, pushTab[sector->special - 207]);
		break;
	case 210:
	case 211:
	case 212:	// Scroll_West_xxx
		ThrustPlayer(player, 180.0, pushTab[sector->special - 210]);
		break;
	case 213:
	case 214:
	case 215:	// Scroll_NorthWest_xxx
		ThrustPlayer(player, 90.0 + 45.0, pushTab[sector->special - 213]);
		break;
	case 216:
	case 217:
	case 218:	// Scroll_NorthEast_xxx
		ThrustPlayer(player, 45.0, pushTab[sector->special - 216]);
		break;
	case 219:
	case 220:
	case 221:	// Scroll_SouthEast_xxx
		ThrustPlayer(player, 270.0 + 45.0, pushTab[sector->special - 219]);
		break;
	case 222:
	case 223:
	case 224:	// Scroll_SouthWest_xxx
		ThrustPlayer(player, 180.0 + 45.0, pushTab[sector->special - 222]);
		break;

	case 40:
	case 41:
	case 42:
	case 43:
	case 44:
	case 45:
	case 46:
	case 47:
	case 48:
	case 49:
	case 50:
	case 51:
		// Wind specials are handled in (P_mobj):P_XYMovement
		break;

	case 26:	// Stairs_Special1
	case 27:	// Stairs_Special2
		// Used in (P_floor):ProcessStairSector
		break;

	case 198:	// Lightning Special
	case 199:	// Lightning Flash special
	case 200:	// Sky2
		// Used in (R_plane):R_Drawplanes
		break;
//      default:
//          I_Error("PlayerInSpecialSector: "
//              "unknown special %i", sector->special);
	}
}

//============================================================================
//
//  PlayerOnSpecialFlat
//
//============================================================================

void PlayerOnSpecialFlat(player_t * player, int floorType)
{
	if (player->mo->Origin.z != player->mo->FloorZ)
	{
		// Player is not touching the floor
		return;
	}
	switch (floorType)
	{
	case FLOOR_LAVA:
		if (!(level->tictime & 31))
		{
			player->mo->Damage(*LavaInflictor, none, 10);
			player->mo->PlaySound('LavaSizzle', CHAN_BODY);
		}
		break;
	default:
		break;
	}
}

//==========================================================================
//
//  PlayerInContents
//
//==========================================================================

void PlayerInContents(player_t * player)
{
	if (!player->mo->WaterLevel)
	{
		return;
	}
	switch (player->mo->WaterType)
	{
	case CONTENTS_LAVA:
		if (!(level->tictime & 31))
		{
			player->mo->Damage(*LavaInflictor, none, 10);
			player->mo->PlaySound('LavaSizzle', CHAN_BODY);
		}
		break;
	}
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse(player_t * player)
{
	int impulse;
	int i;

	impulse = player->Impulse;
	player->Impulse = 0;
	player->Arti = 0;

	if (impulse <= NUMWEAPONS)
	{
		// The actual changing of the weapon is done when the weapon
		// psprite can do it (A_WeaponReady), so it doesn't happen in
		// the middle of an attack.
		if (player->WeaponOwned[impulse - 1] &&
			impulse - 1 != player->ReadyWeapon && !player->MorphTics)
		{
			player->PendingWeapon = impulse - 1;
		}
	}
	else if (impulse == 13)
	{
		InventoryLeft(player);
	}
	else if (impulse == 14)
	{
		InventoryRight(player);
	}
	else if (impulse == 15)
	{
		InventoryUse(player);
	}
	else if (impulse == 16)
	{
		player->mo->Damage(none, none, 10000);
	}
	// Hexen artifact hot keys
	if (!player->Arti)
	{
		if (impulse == 11)
		{
			player->Arti = NUMARTIFACTS;
		}
		else if (impulse == 12 && (player->mo->Health < MAXHEALTH))
		{
			player->Arti = arti_health;
		}
		else if (impulse == 10)
		{
			player->Arti = arti_poisonbag;
		}
		else if (impulse == 9)
		{
			player->Arti = arti_blastradius;
		}
		else if (impulse == 8)
		{
			player->Arti = arti_teleport;
		}
		else if (impulse == 7)
		{
			player->Arti = arti_teleportother;
		}
		else if (impulse == 6)
		{
			player->Arti = arti_egg;
		}
		else if (impulse == 5 && !player->Powers[pw_invulnerability])
		{
			player->Arti = arti_invulnerability;
		}
	}

	if (player->Arti)
	{
		// Use an artifact
		if (player->Arti == NUMARTIFACTS)
		{
			// use one of each artifact (except puzzle artifacts)
			for (i = 1; i < arti_firstpuzzitem; i++)
			{
				PlayerUseArtifact(player, i);
			}
		}
		else
		{
			PlayerUseArtifact(player, player->Arti);
		}
	}
}

//==========================================================================
//
//  PlayerThink
//
//==========================================================================

void PlayerThink(player_t * player)
{
	int floorType;
	int newweapon;
	mobj_t *pmo;
	mobj_t *speedMo;

	if (player->bIsBot)
	{
		player->Bot.Think();
	}

	// Copy view angles
	player->mo->Angles = player->ViewAngles;

	// fixme: do this in the cheat code
	if (player->Cheats & CF_NOCLIP)
		player->mo->bNoClip = true;
	else
		player->mo->bNoClip = false;

	if (player->mo->bJustAttacked)
	{
		player->ForwardMove = 100.0;
		player->SideMove = 0.0;
		player->mo->bJustAttacked = false;
	}

	player->WorldTimer++;
	InventoryTick(player);

	if (player->PlayerState == PST_DEAD)
	{
		DeathPlayerThink(player);
		return;
	}

	if (player->JumpTics)
	{
		player->JumpTics--;
	}
	if (player->MorphTics)
	{
		MorphPlayerThink(player);
	}

	//  Move around.
	//  ReactionTime is used to prevent movement for a bit after a teleport.
	if (player->mo->ReactionTime)
	{
		player->mo->ReactionTime -= frametime;
		if (player->mo->ReactionTime <= 0.0)
			player->mo->ReactionTime = 0.0;
		if (player->mo->bWaterJump)
			WaterJump(player);
	}
	else
	{
		if (player->mo->WaterLevel >= 2)
			WaterMove(player);
		else
			MovePlayer(player);
		pmo = player->mo;
		if (player->Powers[pw_speed] && !(level->tictime & 1) &&
			Length(pmo->Velocity) > 12.0 * 35.0)
		{
			speedMo = SpawnSpeedMobj(pmo);
			if (speedMo)
			{
				speedMo->Angles.yaw = pmo->Angles.yaw;
				speedMo->Translation = pmo->Translation;
				speedMo->Owner = *pmo;
				speedMo->_Special1 = player->PClass;
				if (speedMo->_Special1 > 2)
				{
					speedMo->_Special1 = 0;
				}
				speedMo->SpriteIndex = pmo->SpriteIndex;
				speedMo->FloorClip = pmo->FloorClip;
#ifdef FIXME
				if (player == &players[consoleplayer])
				{
					speedMo->Translucency = 100;
				}
#endif
			}
		}
	}

	CalcHeight(player);

	if (player->mo->Sector->special)
	{
		PlayerInSpecialSector(player);
	}
	if ((floorType = player->mo->GetFloorType()) != FLOOR_SOLID)
	{
		PlayerOnSpecialFlat(player, floorType);
	}
	PlayerInContents(player);

	switch (player->PClass)
	{
	case PCLASS_FIGHTER:
		if (player->mo->Velocity.z <= -35.0 * 35.0
			&& player->mo->Velocity.z >= -40.0 * 35.0 && !player->MorphTics
			&& !GetSoundPlayingInfo(*player->mo,
				GetSoundID('PlayerFighterFallingScream')))
		{
			player->mo->PlaySound('PlayerFighterFallingScream', CHAN_VOICE);
		}
		break;
	case PCLASS_CLERIC:
		if (player->mo->Velocity.z <= -35.0 * 35.0
			&& player->mo->Velocity.z >= -40.0 * 35.0 && !player->MorphTics
			&& !GetSoundPlayingInfo(*player->mo,
				GetSoundID('PlayerClericFallingScream')))
		{
			player->mo->PlaySound('PlayerClericFallingScream', CHAN_VOICE);
		}
		break;
	case PCLASS_MAGE:
		if (player->mo->Velocity.z <= -35.0 * 35.0
			&& player->mo->Velocity.z >= -40.0 * 35.0 && !player->MorphTics
			&& !GetSoundPlayingInfo(*player->mo,
				GetSoundID('PlayerMageFallingScream')))
		{
			player->mo->PlaySound('PlayerMageFallingScream', CHAN_VOICE);
		}
		break;
	default:
		break;
	}

	// Check for weapon change.
	if (player->Impulse)
	{
		PlayerImpulse(player);
	}

	// check for use
	if (player->Buttons & BT_USE)
	{
		if (!player->bUseDown)
		{
			P_UseLines(player);
			player->bUseDown = true;
		}
	}
	else
	{
		player->bUseDown = false;
	}

	// Morph counter
	if (player->MorphTics)
	{
		if (!--player->MorphTics)
		{
			// Attempt to undo the pig
			UndoPlayerMorph(player);
		}
	}

	// cycle psprites
	MovePsprites(player);

	// Counters, time dependend power ups.

	if (player->Powers[pw_invulnerability])
	{
		if (player->PClass == PCLASS_CLERIC)
		{
#ifdef FIXME
			if (mobj->Flags2 & MF2_DONTDRAW)
			{
				mobj->translucency = 100;
			}
			else if (mobj->Flags & MF_SHADOW)
			{
				mobj->translucency = 66;
			}
			else if (mobj->Flags & MF_ALTSHADOW)
			{
				mobj->translucency = 33;
			}
			else
			{
				mobj->translucency = 0;
			}
			if (!(level->tictime & 7) && player->mo->Flags & MF_SHADOW
				&& !(player->mo->Flags2 & MF2_DONTDRAW))
			{
				player->mo->Flags &= ~MF_SHADOW;
				if (!(player->mo->Flags & MF_ALTSHADOW))
				{
					player->mo->Flags2 |= MF2_DONTDRAW | MF2_NONSHOOTABLE;
				}
			}
			if (!(level->tictime & 31))
			{
				if (player->mo->Flags2 & MF2_DONTDRAW)
				{
					if (!(player->mo->Flags & MF_SHADOW))
					{
						player->mo->Flags |= MF_SHADOW | MF_ALTSHADOW;
					}
					else
					{
						player->mo->Flags2 &=
							~(MF2_DONTDRAW | MF2_NONSHOOTABLE);
					}
				}
				else
				{
					player->mo->Flags |= MF_SHADOW;
					player->mo->Flags &= ~MF_ALTSHADOW;
				}
			}
#endif
		}
		if (!(--player->Powers[pw_invulnerability]))
		{
			player->mo->bInvulnerable = false;
			player->mo->bReflective = false;
			if (player->PClass == PCLASS_CLERIC)
			{
				player->mo->bNonShootable = false;
				player->mo->Translucency = 0;
			}
		}
	}

	if (player->Powers[pw_minotaur])
		player->Powers[pw_minotaur]--;

	if (player->Powers[pw_infrared])
		player->Powers[pw_infrared]--;

	if (player->Powers[pw_speed])
		player->Powers[pw_speed]--;

	if (player->Powers[pw_flight] && netgame)
	{
		if (!--player->Powers[pw_flight])
		{
			if (player->mo->Origin.z != player->mo->FloorZ)
			{
//FIXME             player->centering = true;
			}
			player->mo->bFly = false;
			player->mo->bNoGravity = false;
		}
	}

	if (player->PoisonCount && !(level->tictime & 15))
	{
		player->PoisonCount -= 5;
		if (player->PoisonCount < 0)
		{
			player->PoisonCount = 0;
		}
		player->mo->PoisonDamage(*player->Poisoner, 1, true);
	}

	if (player->DamageCount)
		player->DamageCount--;

	if (player->BonusCount)
		player->BonusCount--;

	// Handling colormaps.
	if (player->Powers[pw_infrared])
	{
		if (player->Powers[pw_infrared] <= ftoi(BLINKTHRESHOLD * 35.0))
		{
			if (player->Powers[pw_infrared] & 8)
			{
				player->FixedColormap = 0;
			}
			else
			{
				player->FixedColormap = 1;
			}
		}
		else if (!(level->tictime & 16))
		{
			if (player->NewTorch)
			{
				if (player->FixedColormap + player->NewTorchDelta > 7 ||
					player->FixedColormap + player->NewTorchDelta < 1 ||
					player->FixedColormap == player->NewTorch)
				{
					player->NewTorch = 0;
				}
				else
				{
					player->FixedColormap += player->NewTorchDelta;
				}
			}
			else
			{
				player->NewTorch = (P_Random() & 7) + 1;
				player->NewTorchDelta =
					(player->NewTorch ==
					player->FixedColormap) ? 0 : ((player->NewTorch >
						player->FixedColormap) ? 1 : -1);
			}
		}
	}
	else
		player->FixedColormap = 0;
}

//==========================================================================
//
//  SB_PaletteFlash
//
//  Sets the new palette based upon the current values of
// player->DamageCount and player->BonusCount.
//
//==========================================================================

void SB_PaletteFlash(player_t * player)
{
	player->CShifts[CSHIFT_CONTENTS] = 0;
	if (player->mo->WaterLevel == 3)
	{
		switch (player->mo->WaterType)
		{
		case CONTENTS_WATER:
			player->CShifts[CSHIFT_CONTENTS] = CSHIFT(130, 80, 50, 128);
			break;

		case CONTENTS_SLUDGE:
			player->CShifts[CSHIFT_CONTENTS] = CSHIFT(128, 160, 128, 150);
			break;

		case CONTENTS_LAVA:
			player->CShifts[CSHIFT_CONTENTS] = CSHIFT(255, 80, 0, 150);
			break;
		}
	}

	if (player->PoisonCount)
	{
		player->Palette = 0;
		player->Palette = (player->PoisonCount + 7) >> 3;
		if (player->Palette >= NUMPOISONPALS)
		{
			player->Palette = NUMPOISONPALS - 1;
		}
		player->Palette += STARTPOISONPALS;
	}
	else if (player->DamageCount)
	{
		player->Palette = (player->DamageCount + 7) >> 3;
		if (player->Palette >= NUMREDPALS)
		{
			player->Palette = NUMREDPALS - 1;
		}
		player->Palette += STARTREDPALS;
	}
	else if (player->BonusCount)
	{
		player->Palette = (player->BonusCount + 7) >> 3;
		if (player->Palette >= NUMBONUSPALS)
		{
			player->Palette = NUMBONUSPALS - 1;
		}
		player->Palette += STARTBONUSPALS;
	}
	else if (player->mo->bIceDamage)
	{
		// Frozen player
		player->Palette = STARTICEPAL;
	}
	else
	{
		player->Palette = player->WeaponPalette;
	}
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos(player_t * player)
{
	player->ViewOrg.x = player->mo->Origin.x;
	player->ViewOrg.y = player->mo->Origin.y;

	if (player->LocalQuakeHappening)
	{
		float intensity;

		intensity = itof(player->LocalQuakeHappening);
		player->ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
		player->ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
	}

	player->ViewAngles = player->mo->Angles;

	SB_PaletteFlash(player);

	player->Stats.flags = player->Keys;
	player->Stats.flags |= player->ReadyWeapon << SBF_WPN_SHIFT;
	player->Stats.flags |= player->Pieces << SBF_PIECES_SHIFT;
	if (player->Powers[pw_flight])
	{
		if (player->Powers[pw_flight] > ftoi(BLINKTHRESHOLD * 35.0)
			|| !(player->Powers[pw_flight] & 16))
		{
			player->Stats.flags |= SBF_POWER_FLIGHT;
		}
	}
	if (player->Powers[pw_speed])
	{
		if (player->Powers[pw_speed] > ftoi(BLINKTHRESHOLD * 35.0)
			|| !(player->Powers[pw_speed] & 16))
		{
			player->Stats.flags |= SBF_POWER_SPEED;
		}
	}
	if (player->Powers[pw_invulnerability])
	{
		if (player->Powers[pw_invulnerability] > ftoi(BLINKTHRESHOLD * 35.0)
			|| !(player->Powers[pw_invulnerability] & 16))
		{
			player->Stats.flags |= SBF_POWER_INVULN;
		}
	}
	if (player->Powers[pw_minotaur])
	{
		if (player->Powers[pw_minotaur] > ftoi(BLINKTHRESHOLD * 35.0)
			|| !(player->Powers[pw_minotaur] & 16))
		{
			player->Stats.flags |= SBF_POWER_MINOTAUR;
		}
	}
	if (player->mo->bFly)
	{
		player->Stats.flags |= SBF_IN_FLIGHT;
	}
}

//==========================================================================
//
//  ArtiHealRadius
//
//  Do class specific effect for everyone in radius
//
//==========================================================================

boolean ArtiHealRadius(player_t * player)
{
	Actor mo;
	float dist;
	int effective = false;
	int amount;

	FOREACH(Actor, mo)
	{
		if (!mo.bIsPlayer)
			continue;
		if (mo.Health <= 0)
			continue;
		dist = MobjDist(*player->mo, mo);
		if (dist > HEAL_RADIUS_DIST)
		{
			// Out of range
			continue;
		}

		switch (player->PClass)
		{
		case PCLASS_FIGHTER:	// Radius armor boost
			if ((mo.GiveArmor(ARMOR_ARMOR, 1)) ||
				(mo.GiveArmor(ARMOR_SHIELD, 1)) ||
				(mo.GiveArmor(ARMOR_HELMET, 1)) ||
				(mo.GiveArmor(ARMOR_AMULET, 1)))
			{
				effective = true;
				mo.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case PCLASS_CLERIC:	// Radius heal
			amount = 50 + (P_Random() % 50);
			if (mo.GiveBody(amount))
			{
				effective = true;
				mo.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case PCLASS_MAGE:	// Radius mana boost
			amount = 50 + (P_Random() % 50);
			if ((mo.GiveMana(MANA_1, amount)) ||
				(mo.GiveMana(MANA_2, amount)))
			{
				effective = true;
				mo.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case PCLASS_PIG:
		default:
			break;
		}
	}
	return effective;
}

//==========================================================================
//
//  ArtiTele
//
//==========================================================================

void ArtiTele(player_t * player)
{
	int i;
	float destX;
	float destY;
	float destAngle;

	if (deathmatch)
	{
		i = P_Random() % level->numdeathmatchstarts;
		destX = level->deathmatchstarts[i].x;
		destY = level->deathmatchstarts[i].y;
		destAngle = itof(45 * (level->deathmatchstarts[i].angle / 45));
	}
	else
	{
		destX = level->playerstarts[0].x;
		destY = level->playerstarts[0].y;
		destAngle = itof(45 * (level->playerstarts[0].angle / 45));
	}
	P_Teleport(player->mo, destX, destY, destAngle, true);
	if (player->MorphTics)
	{
		// Teleporting away will undo any morph effects (pig)
		UndoPlayerMorph(player);
	}
}

//==========================================================================
//
//  UseArtifact
//
//  Returns true if the artifact was used.
//
//==========================================================================

boolean UseArtifact(player_t * player, int arti)
{
	mobj_t *mo;
	int i;
	int count;

	switch (arti)
	{
	case arti_health:
		if (!player->mo->GiveBody(25))
		{
			return false;
		}
		break;
	case arti_superhealth:
		if (!player->mo->GiveBody(100))
		{
			return false;
		}
		break;
	case arti_invulnerability:
		if (!player->mo->GivePower(pw_invulnerability))
		{
			return false;
		}
		break;
	case arti_torch:
		if (!player->mo->GivePower(pw_infrared))
		{
			return false;
		}
		break;
	case arti_fly:
		if (!player->mo->GivePower(pw_flight))
		{
			return false;
		}
		if (player->mo->Velocity.z <= -35.0 * 35.0)
		{	// stop falling scream
			StopSound(*player->mo, CHAN_AUTO);
		}
		break;
	case arti_teleport:
		ArtiTele(player);
		break;
	case arti_egg:
		ArtiPig(player->mo);
		break;
	case arti_healingradius:
		if (!ArtiHealRadius(player))
		{
			return false;
		}
		break;
	case arti_summon:
		ArtiSummon(player);
		break;
	case arti_blastradius:
		ArtiBlastRadius(player);
		break;
	case arti_poisonbag:
		ArtiPoisonBag(player);
		break;
	case arti_teleportother:
		ArtiTeleportOther(player);
		break;
	case arti_speed:
		if (!player->mo->GivePower(pw_speed))
		{
			return (false);
		}
		break;
	case arti_boostmana:
		if (!player->mo->GiveMana(MANA_1, MAX_MANA))
		{
			if (!player->mo->GiveMana(MANA_2, MAX_MANA))
			{
				return false;
			}

		}
		else
		{
			player->mo->GiveMana(MANA_2, MAX_MANA);
		}
		break;
	case arti_boostarmor:
		count = 0;

		for (i = 0; i < NUMARMOR; i++)
		{
			count += player->mo->GiveArmor(i, 1);	// 1 point per armor type
		}
		if (!count)
		{
			return false;
		}
		break;

	case arti_puzzskull:
	case arti_puzzgembig:
	case arti_puzzgemred:
	case arti_puzzgemgreen1:
	case arti_puzzgemgreen2:
	case arti_puzzgemblue1:
	case arti_puzzgemblue2:
	case arti_puzzbook1:
	case arti_puzzbook2:
	case arti_puzzskull2:
	case arti_puzzfweapon:
	case arti_puzzcweapon:
	case arti_puzzmweapon:
	case arti_puzzgear1:
	case arti_puzzgear2:
	case arti_puzzgear3:
	case arti_puzzgear4:
		if (P_UsePuzzleItem(player, arti - arti_firstpuzzitem))
		{
			return true;
		}
		else
		{
			centerprint(player, TXT_USEPUZZLEFAILED);
			return false;
		}
		break;
	default:
		return false;
	}
	return true;
}

//==========================================================================
//
//  PlayerUseArtifact
//
//==========================================================================

void PlayerUseArtifact(player_t * player, int arti)
{
	int i;

	for (i = 0; i < player->InventorySlotNum; i++)
	{
		if (player->Inventory[i].type == arti)
		{
			// Found match - try to use
			if (UseArtifact(player, arti))
			{
				// Artifact was used - remove it from inventory
				PlayerRemoveArtifact(player, i);
				if (arti < arti_firstpuzzitem)
				{
					player->mo->PlaySound('UseArtifact', CHAN_ITEM);
				}
				else
				{
					player->mo->PlaySound('PuzzleSuccess', CHAN_ITEM);
				}
				player->ArtifactFlash = 4;
			}
			else if (arti < arti_firstpuzzitem)
			{
				// Unable to use artifact, advance pointer
				PlayerNextArtifact(player);
			}
			break;
		}
	}
}

//==========================================================================
//
//  PlayerNextArtifact
//
//==========================================================================

void PlayerNextArtifact(player_t * player)
{
	player->InvPtr--;
	if (player->InvPtr < 6)
	{
		player->InvCurPos--;
		if (player->InvCurPos < 0)
		{
			player->InvCurPos = 0;
		}
	}
	if (player->InvPtr < 0)
	{
		player->InvPtr = player->InventorySlotNum - 1;
		if (player->InvPtr < 6)
		{
			player->InvCurPos = player->InvPtr;
		}
		else
		{
			player->InvCurPos = 6;
		}
	}
	player->ReadyArtifact = player->Inventory[player->InvPtr].type;
}

//==========================================================================
//
//  PlayerRemoveArtifact
//
//==========================================================================

void PlayerRemoveArtifact(player_t * player, int slot)
{
	int i;

	player->ArtifactCount--;
	if (!(--player->Inventory[slot].count))
	{
		// Used last of a type - compact the artifact list
		player->ReadyArtifact = arti_none;
		player->Inventory[slot].type = arti_none;
		for (i = slot + 1; i < player->InventorySlotNum; i++)
		{
			player->Inventory[i - 1].type = player->Inventory[i].type;
			player->Inventory[i - 1].count = player->Inventory[i].count;
		}
		player->InventorySlotNum--;
		// Set position markers and get next ReadyArtifact
		player->InvPtr--;
		if (player->InvPtr < 6)
		{
			player->InvCurPos--;
			if (player->InvCurPos < 0)
			{
				player->InvCurPos = 0;
			}
		}
		if (player->InvPtr >= player->InventorySlotNum)
		{
			player->InvPtr = player->InventorySlotNum - 1;
		}
		if (player->InvPtr < 0)
		{
			player->InvPtr = 0;
		}
		player->ReadyArtifact = player->Inventory[player->InvPtr].type;
	}
}

//==========================================================================
//
//  TeleportToPlayerStarts
//
//==========================================================================

void TeleportToPlayerStarts(mobj_t * victim)
{
	int i;
	int selections = 0;
	float destX;
	float destY;
	float destAngle;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!players[i].bActive)
			continue;
		selections++;
	}
	i = P_Random() % selections;
	destX = level->playerstarts[i].x;
	destY = level->playerstarts[i].y;
	destAngle = itof(45 * (level->playerstarts[i].angle / 45));
	P_Teleport(victim, destX, destY, destAngle, true);
}

//==========================================================================
//
//  TeleportToDeathmatchStarts
//
//==========================================================================

void TeleportToDeathmatchStarts(mobj_t * victim)
{
	int i;
	float destX;
	float destY;
	float destAngle;

	if (level->numdeathmatchstarts)
	{
		i = P_Random() % level->numdeathmatchstarts;
		destX = level->deathmatchstarts[i].x;
		destY = level->deathmatchstarts[i].y;
		destAngle = itof(45 * (level->deathmatchstarts[i].angle / 45));
		P_Teleport(victim, destX, destY, destAngle, true);
	}
	else
	{
		TeleportToPlayerStarts(victim);
	}
}

//==========================================================================
//
//  TeleportOther
//
//==========================================================================

void TeleportOther(mobj_t * victim)
{
	if (victim->bIsPlayer)
	{
		if (deathmatch)
			TeleportToDeathmatchStarts(victim);
		else
			TeleportToPlayerStarts(victim);
	}
	else
	{
		// If death action, run it upon teleport
		if (victim->bCountKill && victim->Special)
		{
			P_RemoveMobjFromTIDList(victim);
			ExecuteLineSpecial(victim->Special, &victim->Args[0],
				NULL, 0, victim);
			victim->Special = 0;
		}

		// Send all monsters to deathmatch spots
		TeleportToDeathmatchStarts(victim);
	}
}

//==========================================================================
//
// EV_LineSearchForPuzzleItem
//
//==========================================================================

boolean EV_LineSearchForPuzzleItem(line_t * line, int *args, mobj_t * mo)
{
	player_t *player;
	int i;
	int type, arti;

	if (!mo)
		return false;
	player = mo->Player;
	if (!player)
		return false;

	// Search player's inventory for puzzle items
	for (i = 0; i < player->ArtifactCount; i++)
	{
		arti = player->Inventory[i].type;
		type = arti - arti_firstpuzzitem;
		if (type < 0)
			continue;
		if (type == line->arg1)
		{
			// A puzzle item was found for the line
			if (UseArtifact(player, arti))
			{
				// A puzzle item was found for the line
				PlayerRemoveArtifact(player, i);
				if (arti < arti_firstpuzzitem)
				{
					player->mo->PlaySound('UseArtifact', CHAN_ITEM);
				}
				else
				{
					player->mo->PlaySound('PuzzleSuccess', CHAN_ITEM);
				}
				player->ArtifactFlash = 4;
				return true;
			}
		}
	}
	return false;
}

//==========================================================================
//
//  G_PlayerExitMap
//
//  Called when the player leaves a map.
//
//==========================================================================

void G_PlayerExitMap(int playerNumber, boolean clusterChange)
{
	int i;
	player_t *player;
	int flightPower;

	player = &players[playerNumber];

	// Strip all current powers (retain flight)
	flightPower = player->Powers[pw_flight];
	for (i = 0; i < NUMPOWERS; i++)
		player->Powers[i] = 0;
//  memset(player->Powers, 0, sizeof(player->Powers));
	player->Powers[pw_flight] = flightPower;

	if (deathmatch)
	{
		player->Powers[pw_flight] = 0;
	}
	else
	{
		if (clusterChange)
		{	// Entering new cluster
			// Strip all keys
			player->Keys = 0;

			// Strip flight artifact
			for (i = 0; i < 25; i++)
			{
				player->Powers[pw_flight] = 0;
				PlayerUseArtifact(player, arti_fly);
			}
			player->Powers[pw_flight] = 0;
		}
	}

	if (player->MorphTics)
	{
		SetWeapon(player, player->mo->_Special1);	// Restore weapon
		player->MorphTics = 0;
	}
	player->mo->Angles.pitch = 0.0;
	player->mo->Translucency = 0;	// Remove invisibility
	player->ExtraLight = 0;	// Remove weapon flashes
	player->FixedColormap = 0;	// Remove torch
	player->DamageCount = 0;	// No palette changes
	player->BonusCount = 0;
	player->PoisonCount = 0;
}

//==========================================================================
//
//  G_DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void G_DeathMatchSpawnPlayer(int playernum)
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % level->numdeathmatchstarts;
		if (G_CheckSpot(playernum, &level->deathmatchstarts[i]))
		{
			level->deathmatchstarts[i].type = playernum + 1;
			P_SpawnPlayer(&level->deathmatchstarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	P_SpawnPlayer(&level->playerstarts[playernum]);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn(int playernum)
{
	int i;
	boolean oldWeaponowned[NUMWEAPONS];
	int oldKeys;
	int oldPieces;
	boolean foundSpot;
	int bestWeapon;

	// respawn at the start

	// first dissasociate the corpse
	players[playernum].mo->Player = NULL;
	players[playernum].mo->bIsPlayer = false;

	// spawn at random spot if in death match
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(playernum);
		return;
	}

	// Cooperative net-play, retain keys and weapons
	oldKeys = players[playernum].Keys;
	oldPieces = players[playernum].Pieces;
	for (i = 0; i < NUMWEAPONS; i++)
	{
		oldWeaponowned[i] = players[playernum].WeaponOwned[i];
	}

	foundSpot = false;
	if (G_CheckSpot(playernum,
			&level->playerstarts[RebornPosition * MAXPLAYERS + playernum]))
	{	// Appropriate player start spot is open
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
				playernum]);
		foundSpot = true;
	}
	else
	{
		// Try to spawn at one of the other player start spots
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (G_CheckSpot(playernum,
					&level->playerstarts[RebornPosition * MAXPLAYERS + i]))
			{	// Found an open start spot

				// Fake as other player
				level->playerstarts[RebornPosition * MAXPLAYERS + i].type =
					playernum + 1;
				P_SpawnPlayer(&level->playerstarts[RebornPosition *
						MAXPLAYERS + i]);

				// Restore proper player type
				level->playerstarts[RebornPosition * MAXPLAYERS + i].type =
					i + 1;

				foundSpot = true;
				break;
			}
		}
	}

	if (!foundSpot)
	{
		// Player's going to be inside something
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
				playernum]);
	}

	// Restore keys and weapons
	players[playernum].Keys = oldKeys;
	players[playernum].Pieces = oldPieces;
	for (bestWeapon = 0, i = 0; i < NUMWEAPONS; i++)
	{
		if (oldWeaponowned[i])
		{
			bestWeapon = i;
			players[playernum].WeaponOwned[i] = true;
		}
	}
	players[playernum].Mana[MANA_1] = 25;
	players[playernum].Mana[MANA_2] = 25;
	if (bestWeapon)
	{
		// Bring up the best weapon
		players[playernum].PendingWeapon = bestWeapon;
	}
}

//==========================================================================
//
//  SetPlayerColor
//
//==========================================================================

void SetPlayerColor(player_t * player)
{
	player->mo->Translation = 0;
	if (player->PClass == PCLASS_FIGHTER)
	{
		// The first type should be blue, and the third should be the
		// Fighter's original gold color
		if (player->Color == 0)
		{
			player->mo->Translation = 2;
		}
		else if (player->Color != 2)
		{
			player->mo->Translation = player->Color;
		}
	}
	else if (player->Color)
	{
		// Set color translation bits for player sprites
		player->mo->Translation =
			player->PClass * (MAXPLAYERS - 1) + player->Color;
	}
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient(int i)
{
	player_t *player;
	int j;
	int oldKeys;
	int oldPieces;
	boolean oldWeaponowned[NUMWEAPONS];
	boolean playerWasReborn;
	int bestWeapon;

	player = &players[i];

	player->Attacker = NULL;
	player->Poisoner = NULL;

	player->ViewEnts[ps_weapon] = SpawnObject(Weapon, none);
	player->ViewEnts[ps_weapon].Player = player;
	player->ViewEnts[ps_flash] = SpawnObject(Weapon, none);
	player->ViewEnts[ps_flash].Player = player;
	if (players[i].bIsBot)
	{
		players[i].Bot = SpawnObject(BotPlayer, none);
		players[i].Bot.player = &players[i];
		players[i].Bot.OnBeginPlay();
	}

	if (netgame && !deathmatch)
	{
		// Cooperative net-play, retain keys and weapons
		oldKeys = player->Keys;
		oldPieces = player->Pieces;
		for (j = 0; j < NUMWEAPONS; j++)
		{
			oldWeaponowned[j] = player->WeaponOwned[j];
		}
		playerWasReborn = (player->PlayerState == PST_REBORN);
	}

	//  Spawn player
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(i);
	}
	else
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + i]);
	}

	if (netgame && !deathmatch && playerWasReborn)
	{
		// Restore keys and weapons when reborn in co-op
		player->Keys = oldKeys;
		player->Pieces = oldPieces;
		for (bestWeapon = 0, j = 0; j < NUMWEAPONS; j++)
		{
			if (oldWeaponowned[j])
			{
				bestWeapon = j;
				player->WeaponOwned[j] = true;
			}
		}
		player->Mana[MANA_1] = 25;
		player->Mana[MANA_2] = 25;
		if (bestWeapon)
		{
			// Bring up the best weapon
			player->PendingWeapon = bestWeapon;
		}
	}

	// Destroy all things touching players
	P_TeleportMove(player->mo, player->mo->Origin.x, player->mo->Origin.y);
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient(player_t * player)
{
	int i;

	if (player->Bot != none)
	{
		player->Bot.Destroy();
		player->Bot = none;
	}
	if (player->mo)
	{
		player->mo->Player = NULL;
		player->mo->bIsPlayer = false;
		player->mo->Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (player->ViewEnts[i])
		{
			player->ViewEnts[i].Destroy();
			player->ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(player->Name));
	player->mo->PlayFullVolumeSound('Chat', CHAN_AUTO);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged(player_t * player)
{
	if (!player->bSpawned)
	{
		return;
	}
	SetPlayerColor(player);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.29  2002/03/02 18:00:17  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.28  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.27  2002/02/22 18:00:25  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.26  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.25  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.24  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.23  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.22  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.21  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.20  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.19  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.18  2002/01/11 08:03:13  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.17  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.16  2002/01/03 18:31:57  dj_jl
//  Fixed view sprites
//
//  Revision 1.15  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.14  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.13  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.12  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.11  2001/10/09 17:36:57  dj_jl
//  Added flags for status bar
//
//  Revision 1.10  2001/10/04 17:27:20  dj_jl
//  Fixed air movement bug
//
//  Revision 1.9  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.8  2001/09/27 17:09:51  dj_jl
//  Changed LavaInflictor to pointer
//
//  Revision 1.7  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.6  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.5  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.4  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
