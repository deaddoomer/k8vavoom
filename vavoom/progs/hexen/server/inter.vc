//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Intercepts
//**
//**************************************************************************

//**************************************************************************
//**************************************************************************
//
//	Pickup
//
//**************************************************************************
//**************************************************************************

class Pickup:Actor
	abstract
{

void TouchSpecial(Actor Toucher);

//==========================================================================
//
//  A_RestoreSpecialThing1
//
//  Make a special thing visible again.
//
//==========================================================================

void A_RestoreSpecialThing1(void)
{
	bHidden = false;
	PlaySound('Respawn', CHAN_VOICE);
}

//==========================================================================
//
//  A_RestoreSpecialThing2
//
//==========================================================================

void A_RestoreSpecialThing2(void)
{
	bSpecial = true;
	SetState(IdleState);
}

__states__
{
	//	Hide for 40 secs
	S_HIDESPECIAL1('ACLO', 4, 1400.0 / 35.0, S_HIDESPECIAL2) { }
	S_HIDESPECIAL2('ACLO', 0, 4.0 / 35.0, S_HIDESPECIAL3) { A_RestoreSpecialThing1(); }
	S_HIDESPECIAL3('ACLO', 1, 4.0 / 35.0, S_HIDESPECIAL4) { }
	S_HIDESPECIAL4('ACLO', 0, 4.0 / 35.0, S_HIDESPECIAL5) { }
	S_HIDESPECIAL5('ACLO', 1, 4.0 / 35.0, S_HIDESPECIAL6) { }
	S_HIDESPECIAL6('ACLO', 2, 4.0 / 35.0, S_HIDESPECIAL7) { }
	S_HIDESPECIAL7('ACLO', 1, 4.0 / 35.0, S_HIDESPECIAL8) { }
	S_HIDESPECIAL8('ACLO', 2, 4.0 / 35.0, S_HIDESPECIAL9) { }
	S_HIDESPECIAL9('ACLO', 3, 4.0 / 35.0, S_HIDESPECIAL10) { }
	S_HIDESPECIAL10('ACLO', 2, 4.0 / 35.0, S_HIDESPECIAL11) { }
	S_HIDESPECIAL11('ACLO', 3, 4.0 / 35.0, S_NULL) { A_RestoreSpecialThing2(); }
}

//==========================================================================
//
//  HideSpecial
//
//==========================================================================

void HideSpecial(void)
{
	bSpecial = false;
	bHidden = true;
	SetState(S_HIDESPECIAL1);
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 32.0;
	Mass = 100.0;
	bSpecial = true;
	bNoPassMobj = true;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemHealingBottle
//
//**************************************************************************
//**************************************************************************

class ItemHealingBottle:Pickup
	__mobjinfo__(81)
{

__states__
{
	S_ITEM_PTN1_1('PTN1', 0, 'items/vial.md2', 0, 3.0 / 35.0, S_ITEM_PTN1_2) { }
	S_ITEM_PTN1_2('PTN1', 1, 'items/vial.md2', 0, 3.0 / 35.0, S_ITEM_PTN1_3) { }
	S_ITEM_PTN1_3('PTN1', 2, 'items/vial.md2', 0, 3.0 / 35.0, S_ITEM_PTN1_1) { }
}

defaultproperties
{
	bFloatBob = true;
	IdleState = S_ITEM_PTN1_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	Artifact
//
//**************************************************************************
//**************************************************************************

class Artifact:Pickup
	abstract
{

int ArtifactType;
int DormantState;

//==========================================================================
//
//  A_HideThing
//
//==========================================================================

void A_HideThing(void)
{
	bHidden = true;
}

//==========================================================================
//
//  A_UnHideThing
//
//==========================================================================

void A_UnHideThing(void)
{
	bHidden = false;
}

//==========================================================================
//
//  A_RestoreArtifact
//
//==========================================================================

void A_RestoreArtifact(void)
{
	bSpecial = true;
	SetState(IdleState);
	PlaySound('Respawn', CHAN_VOICE);
}

__states__
{
	//	Dormant for 40 secs
	S_DORMANTARTI1_1('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI1_2) { }
	S_DORMANTARTI1_2('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_3) { }
	S_DORMANTARTI1_3('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI1_4) { }
	S_DORMANTARTI1_4('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_5) { }
	S_DORMANTARTI1_5('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_6) { }
	S_DORMANTARTI1_6('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_7) { }
	S_DORMANTARTI1_7('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_8) { }
	S_DORMANTARTI1_8('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI1_9) { }
	S_DORMANTARTI1_9('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_10) { }
	S_DORMANTARTI1_10('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI1_11) { }
	S_DORMANTARTI1_11('ACLO', 0, 1400.0 / 35.0, S_DORMANTARTI1_12) { A_HideThing(); }
	S_DORMANTARTI1_12('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI1_13) { A_UnHideThing(); }
	S_DORMANTARTI1_13('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_14) { }
	S_DORMANTARTI1_14('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI1_15) { }
	S_DORMANTARTI1_15('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_16) { }
	S_DORMANTARTI1_16('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_17) { }
	S_DORMANTARTI1_17('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI1_18) { }
	S_DORMANTARTI1_18('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_19) { }
	S_DORMANTARTI1_19('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI1_20) { }
	S_DORMANTARTI1_20('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI1_21) { }
	S_DORMANTARTI1_21('ACLO', 3, 3.0 / 35.0, S_NULL) { A_RestoreArtifact(); }

	//	Dormant for 2 minutes
	S_DORMANTARTI2_1('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI2_2) { }
	S_DORMANTARTI2_2('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_3) { }
	S_DORMANTARTI2_3('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI2_4) { }
	S_DORMANTARTI2_4('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_5) { }
	S_DORMANTARTI2_5('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_6) { }
	S_DORMANTARTI2_6('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_7) { }
	S_DORMANTARTI2_7('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_8) { }
	S_DORMANTARTI2_8('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI2_9) { }
	S_DORMANTARTI2_9('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_10) { }
	S_DORMANTARTI2_10('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI2_11) { }
	S_DORMANTARTI2_11('ACLO', 0, 4200.0 / 35.0, S_DORMANTARTI2_12) { A_HideThing(); }
	S_DORMANTARTI2_12('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI2_13) { A_UnHideThing(); }
	S_DORMANTARTI2_13('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_14) { }
	S_DORMANTARTI2_14('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI2_15) { }
	S_DORMANTARTI2_15('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_16) { }
	S_DORMANTARTI2_16('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_17) { }
	S_DORMANTARTI2_17('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI2_18) { }
	S_DORMANTARTI2_18('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_19) { }
	S_DORMANTARTI2_19('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI2_20) { }
	S_DORMANTARTI2_20('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI2_21) { }
	S_DORMANTARTI2_21('ACLO', 3, 3.0 / 35.0, S_NULL) { A_RestoreArtifact(); }

	//	Dormant for 10 minutes
	S_DORMANTARTI3_1('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI3_2) { }
	S_DORMANTARTI3_2('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_3) { }
	S_DORMANTARTI3_3('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI3_4) { }
	S_DORMANTARTI3_4('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_5) { }
	S_DORMANTARTI3_5('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_6) { }
	S_DORMANTARTI3_6('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_7) { }
	S_DORMANTARTI3_7('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_8) { }
	S_DORMANTARTI3_8('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI3_9) { }
	S_DORMANTARTI3_9('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_10) { }
	S_DORMANTARTI3_10('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI3_11) { }
	S_DORMANTARTI3_11('ACLO', 0, 21000.0 / 35.0, S_DORMANTARTI3_12) { A_HideThing(); }
	S_DORMANTARTI3_12('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI3_13) { A_UnHideThing(); }
	S_DORMANTARTI3_13('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_14) { }
	S_DORMANTARTI3_14('ACLO', 0, 3.0 / 35.0, S_DORMANTARTI3_15) { }
	S_DORMANTARTI3_15('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_16) { }
	S_DORMANTARTI3_16('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_17) { }
	S_DORMANTARTI3_17('ACLO', 1, 3.0 / 35.0, S_DORMANTARTI3_18) { }
	S_DORMANTARTI3_18('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_19) { }
	S_DORMANTARTI3_19('ACLO', 3, 3.0 / 35.0, S_DORMANTARTI3_20) { }
	S_DORMANTARTI3_20('ACLO', 2, 3.0 / 35.0, S_DORMANTARTI3_21) { }
	S_DORMANTARTI3_21('ACLO', 3, 3.0 / 35.0, S_NULL) { A_RestoreArtifact(); }

	S_DEADARTI1('ACLO', 3, 3.0 / 35.0, S_DEADARTI2) { }
	S_DEADARTI2('ACLO', 2, 3.0 / 35.0, S_DEADARTI3) { }
	S_DEADARTI3('ACLO', 3, 3.0 / 35.0, S_DEADARTI4) { }
	S_DEADARTI4('ACLO', 2, 3.0 / 35.0, S_DEADARTI5) { }
	S_DEADARTI5('ACLO', 1, 3.0 / 35.0, S_DEADARTI6) { }
	S_DEADARTI6('ACLO', 2, 3.0 / 35.0, S_DEADARTI7) { }
	S_DEADARTI7('ACLO', 1, 3.0 / 35.0, S_DEADARTI8) { }
	S_DEADARTI8('ACLO', 0, 3.0 / 35.0, S_DEADARTI9) { }
	S_DEADARTI9('ACLO', 1, 3.0 / 35.0, S_DEADARTI10) { }
	S_DEADARTI10('ACLO', 0, 3.0 / 35.0, S_NULL) { }
}

//==========================================================================
//
//  SetDormantArtifact
//
//  Removes the bSpecial flag and initiates the artifact pickup animation.
//
//==========================================================================

void SetDormantArtifact(void)
{
	bSpecial = false;
	if (deathmatch && !bDropped)
	{
		SetState(DormantState);
	}
	else
	{
		// Don't respawn
		SetState(S_DEADARTI1);
	}
}

void TouchSpecial(Actor Toucher);

defaultproperties
{
	bFloatBob = true;
	DormantState = S_DORMANTARTI1_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactHealthFlask
//
//**************************************************************************
//**************************************************************************

class ArtifactHealthFlask:Artifact
	__mobjinfo__(82)
{

__states__
{
	S_ARTI_PTN2_1('PTN2', 0, 'artifact/flask.md2', 0, 4.0 / 35.0, S_ARTI_PTN2_2) { }
	S_ARTI_PTN2_2('PTN2', 1, 'artifact/flask.md2', 0, 4.0 / 35.0, S_ARTI_PTN2_3) { }
	S_ARTI_PTN2_3('PTN2', 2, 'artifact/flask.md2', 0, 4.0 / 35.0, S_ARTI_PTN2_1) { }
}

defaultproperties
{
	ArtifactType = arti_health;
	IdleState = S_ARTI_PTN2_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactFly
//
//**************************************************************************
//**************************************************************************

class ArtifactFly:Artifact
	__mobjinfo__(83)
{

__states__
{
	S_ARTI_SOAR1('SOAR', 0, 5.0 / 35.0, S_ARTI_SOAR2) { }
	S_ARTI_SOAR2('SOAR', 1, 5.0 / 35.0, S_ARTI_SOAR3) { }
	S_ARTI_SOAR3('SOAR', 2, 5.0 / 35.0, S_ARTI_SOAR4) { }
	S_ARTI_SOAR4('SOAR', 1, 5.0 / 35.0, S_ARTI_SOAR1) { }
}

defaultproperties
{
	ArtifactType = arti_fly;
	IdleState = S_ARTI_SOAR1;
	DormantState = S_DORMANTARTI2_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactInvulnerability
//
//**************************************************************************
//**************************************************************************

class ArtifactInvulnerability:Artifact
	__mobjinfo__(84)
{

__states__
{
	S_ARTI_INVU1('INVU', 0, 'artifact/invinc.md2', 0, 3.0 / 35.0, S_ARTI_INVU2) { }
	S_ARTI_INVU2('INVU', 1, 'artifact/invinc.md2', 0, 3.0 / 35.0, S_ARTI_INVU3) { }
	S_ARTI_INVU3('INVU', 2, 'artifact/invinc.md2', 0, 3.0 / 35.0, S_ARTI_INVU4) { }
	S_ARTI_INVU4('INVU', 3, 'artifact/invinc.md2', 0, 3.0 / 35.0, S_ARTI_INVU1) { }
}

defaultproperties
{
	ArtifactType = arti_invulnerability;
	IdleState = S_ARTI_INVU1;
	DormantState = S_DORMANTARTI3_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactSummonMaulator
//
//**************************************************************************
//**************************************************************************

class ArtifactSummonMaulator:Artifact
	__mobjinfo__(86)
{

__states__
{
	S_ARTI_SUMMON('SUMN', 0, 350.0 / 35.0, S_ARTI_SUMMON) { }
}

defaultproperties
{
	ArtifactType = arti_summon;
	IdleState = S_ARTI_SUMMON;
	DormantState = S_DORMANTARTI2_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactTeleportOther
//
//**************************************************************************
//**************************************************************************

class ArtifactTeleportOther:Artifact
	__mobjinfo__(10040)
{

__states__
{
	S_ARTI_TELOTHER1('TELO', 0, 5.0 / 35.0, S_ARTI_TELOTHER2) { }
	S_ARTI_TELOTHER2('TELO', 1, 5.0 / 35.0, S_ARTI_TELOTHER3) { }
	S_ARTI_TELOTHER3('TELO', 2, 5.0 / 35.0, S_ARTI_TELOTHER4) { }
	S_ARTI_TELOTHER4('TELO', 3, 5.0 / 35.0, S_ARTI_TELOTHER1) { }
}

defaultproperties
{
	ArtifactType = arti_teleportother;
	IdleState = S_ARTI_TELOTHER1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactEgg
//
//**************************************************************************
//**************************************************************************

class ArtifactEgg:Artifact
	__mobjinfo__(30)
{

__states__
{
	S_ARTI_EGGC1('PORK', 0, 5.0 / 35.0, S_ARTI_EGGC2) { }
	S_ARTI_EGGC2('PORK', 1, 5.0 / 35.0, S_ARTI_EGGC3) { }
	S_ARTI_EGGC3('PORK', 2, 5.0 / 35.0, S_ARTI_EGGC4) { }
	S_ARTI_EGGC4('PORK', 3, 5.0 / 35.0, S_ARTI_EGGC5) { }
	S_ARTI_EGGC5('PORK', 4, 5.0 / 35.0, S_ARTI_EGGC6) { }
	S_ARTI_EGGC6('PORK', 5, 5.0 / 35.0, S_ARTI_EGGC7) { }
	S_ARTI_EGGC7('PORK', 6, 5.0 / 35.0, S_ARTI_EGGC8) { }
	S_ARTI_EGGC8('PORK', 7, 5.0 / 35.0, S_ARTI_EGGC1) { }
}

defaultproperties
{
	ArtifactType = arti_egg;
	IdleState = S_ARTI_EGGC1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactSuperHeal
//
//**************************************************************************
//**************************************************************************

class ArtifactSuperHeal:Artifact
	__mobjinfo__(32)
{

__states__
{
	S_ARTI_SPHL1('SPHL', 0, 'artifact/shboost.md2', 0, 350.0 / 35.0, S_ARTI_SPHL1) { }
}

defaultproperties
{
	ArtifactType = arti_superhealth;
	IdleState = S_ARTI_SPHL1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactTorch
//
//**************************************************************************
//**************************************************************************

class ArtifactTorch:Artifact
	__mobjinfo__(33)
{

__states__
{
	S_ARTI_TRCH1('TRCH', 0 | FF_FULLBRIGHT, 'artifact/torch.md2', 0, 3.0 / 35.0, S_ARTI_TRCH2) { }
	S_ARTI_TRCH2('TRCH', 1 | FF_FULLBRIGHT, 'artifact/torch.md2', 0, 3.0 / 35.0, S_ARTI_TRCH3) { }
	S_ARTI_TRCH3('TRCH', 2 | FF_FULLBRIGHT, 'artifact/torch.md2', 0, 3.0 / 35.0, S_ARTI_TRCH1) { }
}

defaultproperties
{
	ArtifactType = arti_torch;
	IdleState = S_ARTI_TRCH1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactTeleport
//
//**************************************************************************
//**************************************************************************

class ArtifactTeleport:Artifact
	__mobjinfo__(36)
{

__states__
{
	S_ARTI_ATLP1('ATLP', 0, 'artifact/teleport.md2', 0, 4.0 / 35.0, S_ARTI_ATLP2) { }
	S_ARTI_ATLP2('ATLP', 1, 'artifact/teleport.md2', 0, 4.0 / 35.0, S_ARTI_ATLP3) { }
	S_ARTI_ATLP3('ATLP', 2, 'artifact/teleport.md2', 0, 4.0 / 35.0, S_ARTI_ATLP4) { }
	S_ARTI_ATLP4('ATLP', 1, 'artifact/teleport.md2', 0, 4.0 / 35.0, S_ARTI_ATLP1) { }
}

defaultproperties
{
	ArtifactType = arti_teleport;
	IdleState = S_ARTI_ATLP1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactFlechette
//
//**************************************************************************
//**************************************************************************

class ArtifactFlechette:Artifact
	__mobjinfo__(8000)
{

__states__
{
	S_ARTI_PSBG1('PSBG', 0, 'artifact/flechete.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_poisonbag;
	IdleState = S_ARTI_PSBG1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactSpeedBoots
//
//**************************************************************************
//**************************************************************************

class ArtifactSpeedBoots:Artifact
	__mobjinfo__(8002)
{

__states__
{
	S_ARTI_BOOTS1('SPED', 0 | FF_FULLBRIGHT, 'artifact/speed.md2', 0, 3.0 / 35.0, S_ARTI_BOOTS2) { }
	S_ARTI_BOOTS2('SPED', 1 | FF_FULLBRIGHT, 'artifact/speed.md2', 0, 3.0 / 35.0, S_ARTI_BOOTS3) { }
	S_ARTI_BOOTS3('SPED', 2 | FF_FULLBRIGHT, 'artifact/speed.md2', 0, 3.0 / 35.0, S_ARTI_BOOTS4) { }
	S_ARTI_BOOTS4('SPED', 3 | FF_FULLBRIGHT, 'artifact/speed.md2', 0, 3.0 / 35.0, S_ARTI_BOOTS5) { }
	S_ARTI_BOOTS5('SPED', 4 | FF_FULLBRIGHT, 'artifact/speed.md2', 0, 3.0 / 35.0, S_ARTI_BOOTS6) { }
	S_ARTI_BOOTS6('SPED', 5 | FF_FULLBRIGHT, 'artifact/speed.md2', 0, 3.0 / 35.0, S_ARTI_BOOTS7) { }
	S_ARTI_BOOTS7('SPED', 6 | FF_FULLBRIGHT, 'artifact/speed.md2', 0, 3.0 / 35.0, S_ARTI_BOOTS8) { }
	S_ARTI_BOOTS8('SPED', 7 | FF_FULLBRIGHT, 'artifact/speed.md2', 0, 3.0 / 35.0, S_ARTI_BOOTS1) { }
}

defaultproperties
{
	ArtifactType = arti_speed;
	IdleState = S_ARTI_BOOTS1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactBoostMana
//
//**************************************************************************
//**************************************************************************

class ArtifactBoostMana:Artifact
	__mobjinfo__(8003)
{

__states__
{
	S_ARTI_MANA('BMAN', 0 | FF_FULLBRIGHT, 'artifact/mboost.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_boostmana;
	IdleState = S_ARTI_MANA;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactBoostArmor
//
//**************************************************************************
//**************************************************************************

class ArtifactBoostArmor:Artifact
	__mobjinfo__(8041)
{

__states__
{
	S_ARTI_ARMOR1('BRAC', 0 | FF_FULLBRIGHT, 'artifact/bracer.md2', 0, 4.0 / 35.0, S_ARTI_ARMOR2) { }
	S_ARTI_ARMOR2('BRAC', 1 | FF_FULLBRIGHT, 'artifact/bracer.md2', 0, 4.0 / 35.0, S_ARTI_ARMOR3) { }
	S_ARTI_ARMOR3('BRAC', 2 | FF_FULLBRIGHT, 'artifact/bracer.md2', 0, 4.0 / 35.0, S_ARTI_ARMOR4) { }
	S_ARTI_ARMOR4('BRAC', 3 | FF_FULLBRIGHT, 'artifact/bracer.md2', 0, 4.0 / 35.0, S_ARTI_ARMOR5) { }
	S_ARTI_ARMOR5('BRAC', 4 | FF_FULLBRIGHT, 'artifact/bracer.md2', 0, 4.0 / 35.0, S_ARTI_ARMOR6) { }
	S_ARTI_ARMOR6('BRAC', 5 | FF_FULLBRIGHT, 'artifact/bracer.md2', 0, 4.0 / 35.0, S_ARTI_ARMOR7) { }
	S_ARTI_ARMOR7('BRAC', 6 | FF_FULLBRIGHT, 'artifact/bracer.md2', 0, 4.0 / 35.0, S_ARTI_ARMOR8) { }
	S_ARTI_ARMOR8('BRAC', 7 | FF_FULLBRIGHT, 'artifact/bracer.md2', 0, 4.0 / 35.0, S_ARTI_ARMOR1) { }
}

defaultproperties
{
	ArtifactType = arti_boostarmor;
	IdleState = S_ARTI_ARMOR1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactBlastRadius
//
//**************************************************************************
//**************************************************************************

class ArtifactBlastRadius:Artifact
	__mobjinfo__(10110)
{

__states__
{
	S_ARTI_BLAST1('BLST', 0 | FF_FULLBRIGHT, 'artifact/blast.md2', 0, 4.0 / 35.0, S_ARTI_BLAST2) { }
	S_ARTI_BLAST2('BLST', 1 | FF_FULLBRIGHT, 'artifact/blast.md2', 0, 4.0 / 35.0, S_ARTI_BLAST3) { }
	S_ARTI_BLAST3('BLST', 2 | FF_FULLBRIGHT, 'artifact/blast.md2', 0, 4.0 / 35.0, S_ARTI_BLAST4) { }
	S_ARTI_BLAST4('BLST', 3 | FF_FULLBRIGHT, 'artifact/blast.md2', 0, 4.0 / 35.0, S_ARTI_BLAST5) { }
	S_ARTI_BLAST5('BLST', 4 | FF_FULLBRIGHT, 'artifact/blast.md2', 0, 4.0 / 35.0, S_ARTI_BLAST6) { }
	S_ARTI_BLAST6('BLST', 5 | FF_FULLBRIGHT, 'artifact/blast.md2', 0, 4.0 / 35.0, S_ARTI_BLAST7) { }
	S_ARTI_BLAST7('BLST', 6 | FF_FULLBRIGHT, 'artifact/blast.md2', 0, 4.0 / 35.0, S_ARTI_BLAST8) { }
	S_ARTI_BLAST8('BLST', 7 | FF_FULLBRIGHT, 'artifact/blast.md2', 0, 4.0 / 35.0, S_ARTI_BLAST1) { }
}

defaultproperties
{
	ArtifactType = arti_blastradius;
	IdleState = S_ARTI_BLAST1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactHealRadius
//
//**************************************************************************
//**************************************************************************

class ArtifactHealRadius:Artifact
	__mobjinfo__(10120)
{

__states__
{
	S_ARTI_HEALRAD1('HRAD', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD2) { }
	S_ARTI_HEALRAD2('HRAD', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD3) { }
	S_ARTI_HEALRAD3('HRAD', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD4) { }
	S_ARTI_HEALRAD4('HRAD', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD5) { }
	S_ARTI_HEALRAD5('HRAD', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD6) { }
	S_ARTI_HEALRAD6('HRAD', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD7) { }
	S_ARTI_HEALRAD7('HRAD', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD8) { }
	S_ARTI_HEALRAD8('HRAD', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD9) { }
	S_ARTI_HEALRAD9('HRAD', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD0) { }
	S_ARTI_HEALRAD0('HRAD', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRADA) { }
	S_ARTI_HEALRADA('HRAD', 10 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRADB) { }
	S_ARTI_HEALRADB('HRAD', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRADC) { }
	S_ARTI_HEALRADC('HRAD', 12 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRADD) { }
	S_ARTI_HEALRADD('HRAD', 13 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRADE) { }
	S_ARTI_HEALRADE('HRAD', 14 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRADF) { }
	S_ARTI_HEALRADF('HRAD', 15 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTI_HEALRAD1) { }
}

defaultproperties
{
	ArtifactType = arti_healingradius;
	IdleState = S_ARTI_HEALRAD1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzle
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzle:Artifact
	abstract
{

defaultproperties
{
	bFloatBob = false;
	bNoGravity = true;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleSkull
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleSkull:ArtifactPuzzle
	__mobjinfo__(9002)
{

__states__
{
	S_ARTIPUZZSKULL('ASKU', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzskull;
	IdleState = S_ARTIPUZZSKULL;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGemBig
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGemBig:ArtifactPuzzle
	__mobjinfo__(9003)
{

__states__
{
	S_ARTIPUZZGEMBIG('ABGM', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgembig;
	IdleState = S_ARTIPUZZGEMBIG;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGemRed
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGemRed:ArtifactPuzzle
	__mobjinfo__(9004)
{

__states__
{
	S_ARTIPUZZGEMRED('AGMR', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgemred;
	IdleState = S_ARTIPUZZGEMRED;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGemGreen1
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGemGreen1:ArtifactPuzzle
	__mobjinfo__(9005)
{

__states__
{
	S_ARTIPUZZGEMGREEN1('AGMG', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgemgreen1;
	IdleState = S_ARTIPUZZGEMGREEN1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGemGreen2
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGemGreen2:ArtifactPuzzle
	__mobjinfo__(9009)
{

__states__
{
	S_ARTIPUZZGEMGREEN2('AGG2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgemgreen2;
	IdleState = S_ARTIPUZZGEMGREEN2;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGemBlue1
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGemBlue1:ArtifactPuzzle
	__mobjinfo__(9006)
{

__states__
{
	S_ARTIPUZZGEMBLUE1('AGMB', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgemblue1;
	IdleState = S_ARTIPUZZGEMBLUE1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGemBlue2
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGemBlue2:ArtifactPuzzle
	__mobjinfo__(9010)
{

__states__
{
	S_ARTIPUZZGEMBLUE2('AGB2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgemblue2;
	IdleState = S_ARTIPUZZGEMBLUE2;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleBook1
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleBook1:ArtifactPuzzle
	__mobjinfo__(9007)
{

__states__
{
	S_ARTIPUZZBOOK1('ABK1', 0, 'puzzle/book1.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzbook1;
	IdleState = S_ARTIPUZZBOOK1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleBook2
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleBook2:ArtifactPuzzle
	__mobjinfo__(9008)
{

__states__
{
	S_ARTIPUZZBOOK2('ABK2', 0, 'puzzle/book2.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzbook2;
	IdleState = S_ARTIPUZZBOOK2;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleSkull2
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleSkull2:ArtifactPuzzle
	__mobjinfo__(9014)
{

__states__
{
	S_ARTIPUZZSKULL2('ASK2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzskull2;
	IdleState = S_ARTIPUZZSKULL2;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleFWeapon
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleFWeapon:ArtifactPuzzle
	__mobjinfo__(9015)
{

__states__
{
	S_ARTIPUZZFWEAPON('AFWP', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzfweapon;
	IdleState = S_ARTIPUZZFWEAPON;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleCWeapon
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleCWeapon:ArtifactPuzzle
	__mobjinfo__(9016)
{

__states__
{
	S_ARTIPUZZCWEAPON('ACWP', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzcweapon;
	IdleState = S_ARTIPUZZCWEAPON;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleMWeapon
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleMWeapon:ArtifactPuzzle
	__mobjinfo__(9017)
{

__states__
{
	S_ARTIPUZZMWEAPON('AMWP', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArtifactType = arti_puzzmweapon;
	IdleState = S_ARTIPUZZMWEAPON;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGear
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGear:ArtifactPuzzle
	__mobjinfo__(9018)
{

__states__
{
	S_ARTIPUZZGEAR_1('AGER', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR_2) { }
	S_ARTIPUZZGEAR_2('AGER', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR_3) { }
	S_ARTIPUZZGEAR_3('AGER', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR_4) { }
	S_ARTIPUZZGEAR_4('AGER', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR_5) { }
	S_ARTIPUZZGEAR_5('AGER', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR_6) { }
	S_ARTIPUZZGEAR_6('AGER', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR_7) { }
	S_ARTIPUZZGEAR_7('AGER', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR_8) { }
	S_ARTIPUZZGEAR_8('AGER', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR_1) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgear1;
	IdleState = S_ARTIPUZZGEAR_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGear2
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGear2:ArtifactPuzzle
	__mobjinfo__(9019)
{

__states__
{
	S_ARTIPUZZGEAR2_1('AGR2', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR2_2) { }
	S_ARTIPUZZGEAR2_2('AGR2', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR2_3) { }
	S_ARTIPUZZGEAR2_3('AGR2', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR2_4) { }
	S_ARTIPUZZGEAR2_4('AGR2', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR2_5) { }
	S_ARTIPUZZGEAR2_5('AGR2', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR2_6) { }
	S_ARTIPUZZGEAR2_6('AGR2', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR2_7) { }
	S_ARTIPUZZGEAR2_7('AGR2', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR2_8) { }
	S_ARTIPUZZGEAR2_8('AGR2', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR2_1) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgear2;
	IdleState = S_ARTIPUZZGEAR2_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGear3
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGear3:ArtifactPuzzle
	__mobjinfo__(9020)
{

__states__
{
	S_ARTIPUZZGEAR3_1('AGR3', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR3_2) { }
	S_ARTIPUZZGEAR3_2('AGR3', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR3_3) { }
	S_ARTIPUZZGEAR3_3('AGR3', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR3_4) { }
	S_ARTIPUZZGEAR3_4('AGR3', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR3_5) { }
	S_ARTIPUZZGEAR3_5('AGR3', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR3_6) { }
	S_ARTIPUZZGEAR3_6('AGR3', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR3_7) { }
	S_ARTIPUZZGEAR3_7('AGR3', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR3_8) { }
	S_ARTIPUZZGEAR3_8('AGR3', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR3_1) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgear3;
	IdleState = S_ARTIPUZZGEAR3_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ArtifactPuzzleGear4
//
//**************************************************************************
//**************************************************************************

class ArtifactPuzzleGear4:ArtifactPuzzle
	__mobjinfo__(9021)
{

__states__
{
	S_ARTIPUZZGEAR4_1('AGR4', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR4_2) { }
	S_ARTIPUZZGEAR4_2('AGR4', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR4_3) { }
	S_ARTIPUZZGEAR4_3('AGR4', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR4_4) { }
	S_ARTIPUZZGEAR4_4('AGR4', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR4_5) { }
	S_ARTIPUZZGEAR4_5('AGR4', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR4_6) { }
	S_ARTIPUZZGEAR4_6('AGR4', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR4_7) { }
	S_ARTIPUZZGEAR4_7('AGR4', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR4_8) { }
	S_ARTIPUZZGEAR4_8('AGR4', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_ARTIPUZZGEAR4_1) { }
}

defaultproperties
{
	ArtifactType = arti_puzzgear4;
	IdleState = S_ARTIPUZZGEAR4_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponPickup
//
//**************************************************************************
//**************************************************************************

class WeaponPickup:Pickup
	abstract
{

int WeaponClass;
int WeaponType;

void TouchSpecial(Actor Toucher);

defaultproperties
{
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponFAxe
//
//**************************************************************************
//**************************************************************************

class WeaponFAxe:WeaponPickup
	__mobjinfo__(8010)
{

__states__
{
	S_AXE('WFAX', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	WeaponClass = PCLASS_FIGHTER;
	WeaponType = WP_SECOND;
	IdleState = S_AXE;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponFHammer
//
//**************************************************************************
//**************************************************************************

class WeaponFHammer:WeaponPickup
	__mobjinfo__(123)
{

__states__
{
	S_HAMM('WFHM', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	WeaponClass = PCLASS_FIGHTER;
	WeaponType = WP_THIRD;
	IdleState = S_HAMM;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponCSerpentStaff
//
//**************************************************************************
//**************************************************************************

class WeaponCSerpentStaff:WeaponPickup
	__mobjinfo__(10)
{

__states__
{
	S_CSTAFF('WCSS', 0, 'weapons/g_staff.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	WeaponClass = PCLASS_CLERIC;
	WeaponType = WP_SECOND;
	IdleState = S_CSTAFF;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponCFlame
//
//**************************************************************************
//**************************************************************************

class WeaponCFlame:WeaponPickup
	__mobjinfo__(8009)
{

__states__
{
	S_CFLAME1('WCFM', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_CFLAME2) { }
	S_CFLAME2('WCFM', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_CFLAME3) { }
	S_CFLAME3('WCFM', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_CFLAME4) { }
	S_CFLAME4('WCFM', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_CFLAME5) { }
	S_CFLAME5('WCFM', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_CFLAME6) { }
	S_CFLAME6('WCFM', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_CFLAME7) { }
	S_CFLAME7('WCFM', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_CFLAME8) { }
	S_CFLAME8('WCFM', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_CFLAME1) { }
}

defaultproperties
{
	bNoGravity = true;
	WeaponClass = PCLASS_CLERIC;
	WeaponType = WP_THIRD;
	IdleState = S_CFLAME1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponMCone
//
//**************************************************************************
//**************************************************************************

class WeaponMCone:WeaponPickup
	__mobjinfo__(53)
{

__states__
{
	S_COS1('WMCS', 0 | FF_FULLBRIGHT, 8.0 / 35.0, S_COS2) { }
	S_COS2('WMCS', 1 | FF_FULLBRIGHT, 8.0 / 35.0, S_COS3) { }
	S_COS3('WMCS', 2 | FF_FULLBRIGHT, 8.0 / 35.0, S_COS1) { }
}

defaultproperties
{
	WeaponClass = PCLASS_MAGE;
	WeaponType = WP_SECOND;
	IdleState = S_COS1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponMLightning
//
//**************************************************************************
//**************************************************************************

class WeaponMLightning:WeaponPickup
	__mobjinfo__(8040)
{

__states__
{
	S_MW_LIGHTNING1('WMLG', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_MW_LIGHTNING2) { }
	S_MW_LIGHTNING2('WMLG', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_MW_LIGHTNING3) { }
	S_MW_LIGHTNING3('WMLG', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_MW_LIGHTNING4) { }
	S_MW_LIGHTNING4('WMLG', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_MW_LIGHTNING5) { }
	S_MW_LIGHTNING5('WMLG', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_MW_LIGHTNING6) { }
	S_MW_LIGHTNING6('WMLG', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_MW_LIGHTNING7) { }
	S_MW_LIGHTNING7('WMLG', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_MW_LIGHTNING8) { }
	S_MW_LIGHTNING8('WMLG', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_MW_LIGHTNING1) { }
}

defaultproperties
{
	bNoGravity = true;
	WeaponClass = PCLASS_MAGE;
	WeaponType = WP_THIRD;
	IdleState = S_MW_LIGHTNING1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponPiece
//
//**************************************************************************
//**************************************************************************

class WeaponPiece:Pickup
	abstract
{

int PieceClass;
int PieceValue;

void TouchSpecial(Actor Toucher);

defaultproperties
{
	bFloatBob = true;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponFSwordPiece1
//
//**************************************************************************
//**************************************************************************

class WeaponFSwordPiece1:WeaponPiece
	__mobjinfo__(12)
{

__states__
{
	S_FSWORD1('WFR1', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	PieceClass = PCLASS_FIGHTER;
	PieceValue = WPIECE1;
	IdleState = S_FSWORD1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponFSwordPiece2
//
//**************************************************************************
//**************************************************************************

class WeaponFSwordPiece2:WeaponPiece
	__mobjinfo__(13)
{

__states__
{
	S_FSWORD2('WFR2', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	PieceClass = PCLASS_FIGHTER;
	PieceValue = WPIECE2;
	IdleState = S_FSWORD2;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponFSwordPiece3
//
//**************************************************************************
//**************************************************************************

class WeaponFSwordPiece3:WeaponPiece
	__mobjinfo__(16)
{

__states__
{
	S_FSWORD3('WFR3', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	PieceClass = PCLASS_FIGHTER;
	PieceValue = WPIECE3;
	IdleState = S_FSWORD3;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponCHolyPiece1
//
//**************************************************************************
//**************************************************************************

class WeaponCHolyPiece1:WeaponPiece
	__mobjinfo__(18)
{

__states__
{
	S_CHOLY1('WCH1', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	PieceClass = PCLASS_CLERIC;
	PieceValue = WPIECE1;
	IdleState = S_CHOLY1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponCHolyPiece2
//
//**************************************************************************
//**************************************************************************

class WeaponCHolyPiece2:WeaponPiece
	__mobjinfo__(19)
{

__states__
{
	S_CHOLY2('WCH2', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	PieceClass = PCLASS_CLERIC;
	PieceValue = WPIECE2;
	IdleState = S_CHOLY2;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponCHolyPiece3
//
//**************************************************************************
//**************************************************************************

class WeaponCHolyPiece3:WeaponPiece
	__mobjinfo__(20)
{

__states__
{
	S_CHOLY3('WCH3', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	PieceClass = PCLASS_CLERIC;
	PieceValue = WPIECE3;
	IdleState = S_CHOLY3;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponMStaffPiece1
//
//**************************************************************************
//**************************************************************************

class WeaponMStaffPiece1:WeaponPiece
	__mobjinfo__(21)
{

__states__
{
	S_MSTAFF1('WMS1', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	PieceClass = PCLASS_MAGE;
	PieceValue = WPIECE1;
	IdleState = S_MSTAFF1;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponMStaffPiece2
//
//**************************************************************************
//**************************************************************************

class WeaponMStaffPiece2:WeaponPiece
	__mobjinfo__(22)
{

__states__
{
	S_MSTAFF2('WMS2', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	PieceClass = PCLASS_MAGE;
	PieceValue = WPIECE2;
	IdleState = S_MSTAFF2;
}

}

//**************************************************************************
//**************************************************************************
//
//	WeaponMStaffPiece3
//
//**************************************************************************
//**************************************************************************

class WeaponMStaffPiece3:WeaponPiece
	__mobjinfo__(23)
{

__states__
{
	S_MSTAFF3('WMS3', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
}

defaultproperties
{
	PieceClass = PCLASS_MAGE;
	PieceValue = WPIECE3;
	IdleState = S_MSTAFF3;
}

}

//**************************************************************************
//**************************************************************************
//
//	Armor
//
//**************************************************************************
//**************************************************************************

class Armor:Pickup
	abstract
{

int ArmorType;

void TouchSpecial(Actor Toucher);

defaultproperties
{
	bNoGravity = true;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemArmor1
//
//**************************************************************************
//**************************************************************************

class ItemArmor1:Armor
	__mobjinfo__(8005)
{

__states__
{
	S_ARMOR_1('ARM1', 0, 'items/bplate.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArmorType = ARMOR_ARMOR;
	IdleState = S_ARMOR_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemArmor2
//
//**************************************************************************
//**************************************************************************

class ItemArmor2:Armor
	__mobjinfo__(8006)
{

__states__
{
	S_ARMOR_2('ARM2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArmorType = ARMOR_SHIELD;
	IdleState = S_ARMOR_2;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemArmor3
//
//**************************************************************************
//**************************************************************************

class ItemArmor3:Armor
	__mobjinfo__(8007)
{

__states__
{
	S_ARMOR_3('ARM3', 0, 'items/helmet.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArmorType = ARMOR_HELMET;
	IdleState = S_ARMOR_3;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemArmor4
//
//**************************************************************************
//**************************************************************************

class ItemArmor4:Armor
	__mobjinfo__(8008)
{

__states__
{
	S_ARMOR_4('ARM4', 0, 'items/amulet.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	ArmorType = ARMOR_AMULET;
	IdleState = S_ARMOR_4;
}

}

//**************************************************************************
//**************************************************************************
//
//	Mana
//
//**************************************************************************
//**************************************************************************

class Mana:Pickup
	abstract
{

int ManaType;
int ManaCount;

void TouchSpecial(Actor Toucher);

defaultproperties
{
	Health = 10;
	Radius = 8.0;
	bFloatBob = true;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemManaBlue
//
//**************************************************************************
//**************************************************************************

class ItemManaBlue:Mana
	__mobjinfo__(122)
{

__states__
{
	S_MANA1_1('MAN1', 0 | FF_FULLBRIGHT, 'mana/blue.md2', 0, 4.0 / 35.0, S_MANA1_2) { }
	S_MANA1_2('MAN1', 1 | FF_FULLBRIGHT, 'mana/blue.md2', 0, 4.0 / 35.0, S_MANA1_3) { }
	S_MANA1_3('MAN1', 2 | FF_FULLBRIGHT, 'mana/blue.md2', 0, 4.0 / 35.0, S_MANA1_4) { }
	S_MANA1_4('MAN1', 3 | FF_FULLBRIGHT, 'mana/blue.md2', 0, 4.0 / 35.0, S_MANA1_5) { }
	S_MANA1_5('MAN1', 4 | FF_FULLBRIGHT, 'mana/blue.md2', 0, 4.0 / 35.0, S_MANA1_6) { }
	S_MANA1_6('MAN1', 5 | FF_FULLBRIGHT, 'mana/blue.md2', 0, 4.0 / 35.0, S_MANA1_7) { }
	S_MANA1_7('MAN1', 6 | FF_FULLBRIGHT, 'mana/blue.md2', 0, 4.0 / 35.0, S_MANA1_8) { }
	S_MANA1_8('MAN1', 7 | FF_FULLBRIGHT, 'mana/blue.md2', 0, 4.0 / 35.0, S_MANA1_9) { }
	S_MANA1_9('MAN1', 8 | FF_FULLBRIGHT, 'mana/blue.md2', 0, 4.0 / 35.0, S_MANA1_1) { }
}

defaultproperties
{
	ManaType = MANA_1;
	ManaCount = 15;
	IdleState = S_MANA1_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemManaGreen
//
//**************************************************************************
//**************************************************************************

class ItemManaGreen:Mana
	__mobjinfo__(124)
{

__states__
{
	S_MANA2_1('MAN2', 0 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_2) { }
	S_MANA2_2('MAN2', 1 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_3) { }
	S_MANA2_3('MAN2', 2 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_4) { }
	S_MANA2_4('MAN2', 3 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_5) { }
	S_MANA2_5('MAN2', 4 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_6) { }
	S_MANA2_6('MAN2', 5 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_7) { }
	S_MANA2_7('MAN2', 6 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_8) { }
	S_MANA2_8('MAN2', 7 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_9) { }
	S_MANA2_9('MAN2', 8 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_10) { }
	S_MANA2_10('MAN2', 9 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_11) { }
	S_MANA2_11('MAN2', 10 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_12) { }
	S_MANA2_12('MAN2', 11 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_13) { }
	S_MANA2_13('MAN2', 12 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_14) { }
	S_MANA2_14('MAN2', 13 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_15) { }
	S_MANA2_15('MAN2', 14 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_16) { }
	S_MANA2_16('MAN2', 15 | FF_FULLBRIGHT, 'mana/green.md2', 0, 4.0 / 35.0, S_MANA2_1) { }
}

defaultproperties
{
	ManaType = MANA_2;
	ManaCount = 15;
	IdleState = S_MANA2_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemManaCombined
//
//**************************************************************************
//**************************************************************************

class ItemManaCombined:Mana
	__mobjinfo__(8004)
{

__states__
{
	S_MANA3_1('MAN3', 0 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_2) { }
	S_MANA3_2('MAN3', 1 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_3) { }
	S_MANA3_3('MAN3', 2 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_4) { }
	S_MANA3_4('MAN3', 3 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_5) { }
	S_MANA3_5('MAN3', 4 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_6) { }
	S_MANA3_6('MAN3', 5 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_7) { }
	S_MANA3_7('MAN3', 6 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_8) { }
	S_MANA3_8('MAN3', 7 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_9) { }
	S_MANA3_9('MAN3', 8 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_10) { }
	S_MANA3_10('MAN3', 9 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_11) { }
	S_MANA3_11('MAN3', 10 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_12) { }
	S_MANA3_12('MAN3', 11 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_13) { }
	S_MANA3_13('MAN3', 12 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_14) { }
	S_MANA3_14('MAN3', 13 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_15) { }
	S_MANA3_15('MAN3', 14 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_16) { }
	S_MANA3_16('MAN3', 15 | FF_FULLBRIGHT, 'mana/combined.md2', 0, 4.0 / 35.0, S_MANA3_1) { }
}

defaultproperties
{
	ManaType = MANA_BOTH;
	ManaCount = 20;
	IdleState = S_MANA3_1;
}

}

//**************************************************************************
//**************************************************************************
//
//	Key
//
//**************************************************************************
//**************************************************************************

class Key:Pickup
	abstract
{

int KeyType;

void TouchSpecial(Actor Toucher);

defaultproperties
{
	Radius = 8.0;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKey1
//
//**************************************************************************
//**************************************************************************

class ItemKey1:Key
	__mobjinfo__(8030)
{

__states__
{
	S_KEY1('KEY1', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_1;
	IdleState = S_KEY1;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKey2
//
//**************************************************************************
//**************************************************************************

class ItemKey2:Key
	__mobjinfo__(8031)
{

__states__
{
	S_KEY2('KEY2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_2;
	IdleState = S_KEY2;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKey3
//
//**************************************************************************
//**************************************************************************

class ItemKey3:Key
	__mobjinfo__(8032)
{

__states__
{
	S_KEY3('KEY3', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_3;
	IdleState = S_KEY3;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKey4
//
//**************************************************************************
//**************************************************************************

class ItemKey4:Key
	__mobjinfo__(8033)
{

__states__
{
	S_KEY4('KEY4', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_4;
	IdleState = S_KEY4;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKey5
//
//**************************************************************************
//**************************************************************************

class ItemKey5:Key
	__mobjinfo__(8034)
{

__states__
{
	S_KEY5('KEY5', 0, 'keys/emerald.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_5;
	IdleState = S_KEY5;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKey6
//
//**************************************************************************
//**************************************************************************

class ItemKey6:Key
	__mobjinfo__(8035)
{

__states__
{
	S_KEY6('KEY6', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_6;
	IdleState = S_KEY6;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKey7
//
//**************************************************************************
//**************************************************************************

class ItemKey7:Key
	__mobjinfo__(8036)
{

__states__
{
	S_KEY7('KEY7', 0, 'keys/silver.md2', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_7;
	IdleState = S_KEY7;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKey8
//
//**************************************************************************
//**************************************************************************

class ItemKey8:Key
	__mobjinfo__(8037)
{

__states__
{
	S_KEY8('KEY8', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_8;
	IdleState = S_KEY8;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKey9
//
//**************************************************************************
//**************************************************************************

class ItemKey9:Key
	__mobjinfo__(8038)
{

__states__
{
	S_KEY9('KEY9', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_9;
	IdleState = S_KEY9;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKeyA
//
//**************************************************************************
//**************************************************************************

class ItemKeyA:Key
	__mobjinfo__(8039)
{

__states__
{
	S_KEYA('KEYA', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_A;
	IdleState = S_KEYA;
}

}

//**************************************************************************
//**************************************************************************
//
//	ItemKeyB
//
//**************************************************************************
//**************************************************************************

class ItemKeyB:Key
	__mobjinfo__(8200)
{

__states__
{
	S_KEYB('KEYB', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	KeyType = KEY_B;
	IdleState = S_KEYB;
}

}

//**************************************************************************
//**************************************************************************

// Mana

#define TXT_MANA_1				"BLUE MANA"
#define TXT_MANA_2				"GREEN MANA"
#define TXT_MANA_BOTH			"COMBINED MANA"

// Artifacts

#define TXT_ARTIINVULNERABILITY		"ICON OF THE DEFENDER"
#define TXT_ARTIHEALTH				"QUARTZ FLASK"
#define TXT_ARTISUPERHEALTH			"MYSTIC URN"
#define TXT_ARTISUMMON				"DARK SERVANT"
#define TXT_ARTITORCH				"TORCH"
#define TXT_ARTIEGG					"PORKALATOR"
#define TXT_ARTIFLY					"WINGS OF WRATH"
#define TXT_ARTITELEPORT			"CHAOS DEVICE"
#define TXT_ARTIPOISONBAG			"FLECHETTE"
#define TXT_ARTITELEPORTOTHER		"BANISHMENT DEVICE"
#define TXT_ARTISPEED				"BOOTS OF SPEED"
#define TXT_ARTIBOOSTMANA			"KRATER OF MIGHT"
#define TXT_ARTIBOOSTARMOR			"DRAGONSKIN BRACERS"
#define TXT_ARTIBLASTRADIUS			"DISC OF REPULSION"
#define TXT_ARTIHEALINGRADIUS		"MYSTIC AMBIT INCANT"

// Puzzle artifacts

#define TXT_ARTIPUZZSKULL			"YORICK'S SKULL"
#define TXT_ARTIPUZZGEMBIG			"HEART OF D'SPARIL"
#define TXT_ARTIPUZZGEMRED			"RUBY PLANET"
#define TXT_ARTIPUZZGEMGREEN1		"EMERALD PLANET"
#define TXT_ARTIPUZZGEMGREEN2		"EMERALD PLANET"
#define TXT_ARTIPUZZGEMBLUE1		"SAPPHIRE PLANET"
#define TXT_ARTIPUZZGEMBLUE2		"SAPPHIRE PLANET"
#define TXT_ARTIPUZZBOOK1			"DAEMON CODEX"
#define TXT_ARTIPUZZBOOK2			"LIBER OSCURA"
#define TXT_ARTIPUZZSKULL2			"FLAME MASK"
#define TXT_ARTIPUZZFWEAPON			"GLAIVE SEAL"
#define TXT_ARTIPUZZCWEAPON			"HOLY RELIC"
#define TXT_ARTIPUZZMWEAPON			"SIGIL OF THE MAGUS"
#define TXT_ARTIPUZZGEAR			"CLOCK GEAR"

// Items

#define TXT_ITEMHEALTH			"CRYSTAL VIAL"
#define TXT_ARMOR1				"MESH ARMOR"
#define TXT_ARMOR2				"FALCON SHIELD"
#define TXT_ARMOR3				"PLATINUM HELMET"
#define TXT_ARMOR4				"AMULET OF WARDING"

// Weapons

#define TXT_WEAPON_F2			"TIMON'S AXE"
#define TXT_WEAPON_F3			"HAMMER OF RETRIBUTION"
#define TXT_WEAPON_F4			"QUIETUS ASSEMBLED"
#define TXT_WEAPON_C2			"SERPENT STAFF"
#define TXT_WEAPON_C3			"FIRESTORM"
#define TXT_WEAPON_C4			"WRAITHVERGE ASSEMBLED"
#define TXT_WEAPON_M2			"FROST SHARDS"
#define TXT_WEAPON_M3			"ARC OF DEATH"
#define TXT_WEAPON_M4			"BLOODSCOURGE ASSEMBLED"
#define TXT_QUIETUS_PIECE		"SEGMENT OF QUIETUS"
#define TXT_WRAITHVERGE_PIECE	"SEGMENT OF WRAITHVERGE"
#define TXT_BLOODSCOURGE_PIECE	"SEGMENT OF BLOODSCOURGE"

#define BONUSADD 	6

float ArmorMax[NUMCLASSES] = { 20.0, 18.0, 16.0, 1.0 };

int pieceValueTrans[] = {
	0,	// 0: never
	WPIECE1 | WPIECE2 | WPIECE3,	// WPIECE1 (1)
	WPIECE2 | WPIECE3,	// WPIECE2 (2)
	0,	// 3: never
	WPIECE3	// WPIECE3 (4)
};

//
//  Pickup messages
//
string weaponMessages[6] = {
	TXT_WEAPON_F2,
	TXT_WEAPON_F3,
	TXT_WEAPON_C2,
	TXT_WEAPON_C3,
	TXT_WEAPON_M2,
	TXT_WEAPON_M3,
};
string fourthWeaponText[] = {
	TXT_WEAPON_F4,
	TXT_WEAPON_C4,
	TXT_WEAPON_M4
};
string weaponPieceText[] = {
	TXT_QUIETUS_PIECE,
	TXT_WRAITHVERGE_PIECE,
	TXT_BLOODSCOURGE_PIECE
};
string artifactMessages[NUMARTIFACTS] = {
	"",
	TXT_ARTIINVULNERABILITY,
	TXT_ARTIHEALTH,
	TXT_ARTISUPERHEALTH,
	TXT_ARTIHEALINGRADIUS,
	TXT_ARTISUMMON,
	TXT_ARTITORCH,
	TXT_ARTIEGG,
	TXT_ARTIFLY,
	TXT_ARTIBLASTRADIUS,
	TXT_ARTIPOISONBAG,
	TXT_ARTITELEPORTOTHER,
	TXT_ARTISPEED,
	TXT_ARTIBOOSTMANA,
	TXT_ARTIBOOSTARMOR,
	TXT_ARTITELEPORT,

	TXT_ARTIPUZZSKULL,
	TXT_ARTIPUZZGEMBIG,
	TXT_ARTIPUZZGEMRED,
	TXT_ARTIPUZZGEMGREEN1,
	TXT_ARTIPUZZGEMGREEN2,
	TXT_ARTIPUZZGEMBLUE1,
	TXT_ARTIPUZZGEMBLUE2,
	TXT_ARTIPUZZBOOK1,
	TXT_ARTIPUZZBOOK2,
	TXT_ARTIPUZZSKULL2,
	TXT_ARTIPUZZFWEAPON,
	TXT_ARTIPUZZCWEAPON,
	TXT_ARTIPUZZMWEAPON,
	TXT_ARTIPUZZGEAR,	// All gear pickups use the same text
	TXT_ARTIPUZZGEAR,
	TXT_ARTIPUZZGEAR,
	TXT_ARTIPUZZGEAR
};
string armorText[NUMARMOR] = {
	TXT_ARMOR1,
	TXT_ARMOR2,
	TXT_ARMOR3,
	TXT_ARMOR4
};
string manaText[4] = {
	TXT_MANA_1,
	TXT_MANA_2,
	"",
	TXT_MANA_BOTH
};

//==========================================================================
//
//  PlayerPawn::GiveMana
//
//  Returns true if the player accepted the mana, false if it was
// refused (player has MAX_MANA).
//
//==========================================================================

boolean PlayerPawn::GiveMana(int mana, int count)
{
	int prevMana;

	if (mana == MANA_NONE)
	{
		return false;
	}
	if (mana == MANA_BOTH)
	{
		//	Give both types. Do this here to simplify other code.
		// Use bitwise or to make sure bot types are given.
		return GiveMana(MANA_1, count) | GiveMana(MANA_2, count);
	}
	if (mana < 0 || mana > NUMMANA)
	{
		Error("Actor::GiveMana: bad type %i", mana);
	}
	if (Player->Mana[mana] == MAX_MANA)
	{
		return false;
	}
	if (gameskill == sk_baby || gameskill == sk_nightmare)
	{
		// extra mana in baby mode and nightmare mode
		count += count >> 1;
	}
	prevMana = Player->Mana[mana];

	Player->Mana[mana] += count;
	if (Player->Mana[mana] > MAX_MANA)
	{
		Player->Mana[mana] = MAX_MANA;
	}
	if (prevMana <= 0)
	{
		Weapon(Player->ViewEnts[ps_weapon]).GotMana(mana);
	}
	return true;
}

//==========================================================================
//
//  PlayerPawn::GiveBody
//
//  Returns false if the body isn't needed at all.
//
//==========================================================================

boolean PlayerPawn::GiveBody(int num)
{
	int max;

	max = MAXHEALTH;
	if (Player->MorphTics)
	{
		max = MAXMORPHHEALTH;
	}
	if (Health >= max)
	{
		return false;
	}
	Health += num;
	if (Health > max)
	{
		Health = max;
	}
	Player->Health = Health;
	return true;
}

//==========================================================================
//
//  PlayerPawn::GiveArmor
//
//  Returns false if the armor is worse than the current armor.
//
//==========================================================================

boolean PlayerPawn::GiveArmor(int armortype, int amount)
{
	float hits;
	float totalArmor;

	if (amount == -1)
	{
		hits = ArmorIncrement[Player->PClass * NUMARMOR + armortype];
		if (Player->ArmorPoints[armortype] >= hits)
		{
			return false;
		}
		else
		{
			Player->ArmorPoints[armortype] = hits;
		}
	}
	else
	{
		hits = itof(amount) * 5.0;
		totalArmor = Player->ArmorPoints[ARMOR_ARMOR]
			+ Player->ArmorPoints[ARMOR_SHIELD]
			+ Player->ArmorPoints[ARMOR_HELMET]
			+ Player->ArmorPoints[ARMOR_AMULET]
			+ AutoArmorSave[Player->PClass];
		if (totalArmor < ArmorMax[Player->PClass] * 5.0)
		{
			Player->ArmorPoints[armortype] += hits;
		}
		else
		{
			return false;
		}
	}
	return true;
}

//==========================================================================
//
//  PlayerPawn::GiveKey
//
//==========================================================================

boolean PlayerPawn::GiveKey(int key)
{
	if (Player->Keys & (1 << key))
	{
		return false;
	}
	Player->BonusCount += BONUSADD;
	Player->Keys |= 1 << key;
	return true;
}

//==========================================================================
//
//  PlayerPawn::GivePower
//
//  Returns true if power accepted.
//
//==========================================================================

boolean PlayerPawn::GivePower(int power)
{
	if (power == pw_invulnerability)
	{
		if (Player->Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Player->Powers[power] = INVULNTIME;
		bInvulnerable = true;
		if (Player->PClass == PCLASS_MAGE)
		{
			bReflective = true;
		}
		return true;
	}
	if (power == pw_flight)
	{
		if (Player->Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Player->Powers[power] = FLIGHTTIME;
		bFly = true;
		bNoGravity = true;
		if (Origin.z <= FloorZ)
		{
			Player->FlyHeight = 10.0;	// thrust the player in the air a bit
		}
		return (true);
	}
	if (power == pw_infrared)
	{
		if (Player->Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Player->Powers[power] = INFRATIME;
		return true;
	}
	if (power == pw_speed)
	{
		if (Player->Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Player->Powers[power] = SPEEDTIME;
		return true;
	}
	if (power == pw_minotaur)
	{
		// Doesn't matter if already have power, renew ticker
		Player->Powers[power] = MAULATORTIME;
		return true;
	}
	if (Player->Powers[power])
	{
		return false;	// already got it
	}
	Player->Powers[power] = 1.0;
	return true;
}

//==========================================================================
//
//  PlayerPawn::GiveArtifact
//
//  Returns true if artifact accepted.
//
//==========================================================================

boolean PlayerPawn::GiveArtifact(int arti)
{
	int i;
	int j;
	boolean slidePointer;

	slidePointer = false;
	i = 0;
	while (Player->Inventory[i].type != arti && i < Player->InventorySlotNum)
	{
		i++;
	}
	if (i == Player->InventorySlotNum)
	{
		if (arti < arti_firstpuzzitem)
		{
			i = 0;
			while (Player->Inventory[i].type < arti_firstpuzzitem
				&& i < Player->InventorySlotNum)
			{
				i++;
			}
			if (i != Player->InventorySlotNum)
			{
				for (j = Player->InventorySlotNum; j > i; j--)
				{
					Player->Inventory[j].count =
						Player->Inventory[j - 1].count;
					Player->Inventory[j].type = Player->Inventory[j - 1].type;
					slidePointer = true;
				}
			}
		}
		Player->Inventory[i].count = 1;
		Player->Inventory[i].type = arti;
		Player->InventorySlotNum++;
	}
	else
	{
		if (arti >= arti_firstpuzzitem && netgame && !deathmatch)
		{
			// Can't carry more than 1 puzzle item in coop netplay
			return false;
		}
		if (Player->Inventory[i].count >= 25)
		{
			// Player already has 25 of this item
			return false;
		}
		Player->Inventory[i].count++;
	}
	if (!Player->ArtifactCount)
	{
		Player->ReadyArtifact = arti;
	}
	else if (slidePointer && i <= Player->InvPtr)
	{
		Player->InvPtr++;
		Player->InvCurPos++;
		if (Player->InvCurPos > 6)
		{
			Player->InvCurPos = 6;
		}
	}
	Player->ArtifactCount++;
	return true;
}

//==========================================================================
//
//  Pickup::TouchSpecial
//
//==========================================================================

void Pickup::TouchSpecial(Actor Toucher)
{
	PlayerPawn P;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	switch (Class)
	{
		// Items
	case ItemHealingBottle:
		if (!P.GiveBody(10))
		{
			return;
		}
		cprint(P.Player, TXT_ITEMHEALTH);
		break;
	}
	if (Special)
	{
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, P);
		Special = 0;
	}
	if (deathmatch && !bDropped)
	{
		HideSpecial();
	}
	else
	{
		Remove();
	}
	P.Player->BonusCount += BONUSADD;
	P.PlaySound('PickupItem', CHAN_ITEM);
}

//==========================================================================
//
//  Artifact::TouchSpecial
//
//==========================================================================

void Artifact::TouchSpecial(Actor Toucher)
{
	PlayerPawn P;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	if (P.GiveArtifact(ArtifactType))
	{
		if (Special)
		{
			ExecuteLineSpecial(Special, &Args[0], NULL, 0, P);
			Special = 0;
		}
		P.Player->BonusCount += BONUSADD;
		if (ArtifactType < arti_firstpuzzitem)
		{
			SetDormantArtifact();
			PlaySound('PickupArtifact', CHAN_ITEM);
			cprint(P.Player, artifactMessages[ArtifactType]);
		}
		else
		{
			// Puzzle item
			PlayFullVolumeSound('PickupItem', CHAN_ITEM);
			cprint(P.Player, artifactMessages[ArtifactType]);
			if (!netgame || deathmatch)
			{
				// Remove puzzle items if not cooperative netplay
				Remove();
			}
		}
	}
}

//==========================================================================
//
//  WeaponPickup::TouchSpecial
//
//==========================================================================

void WeaponPickup::TouchSpecial(Actor Toucher)
{
	PlayerPawn P;
	boolean remove;
	boolean gaveMana;
	boolean gaveWeapon;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	remove = true;
	if (P.Player->PClass != WeaponClass)
	{
		// Wrong class, but try to pick up for mana
		if (netgame && !deathmatch)
		{
			// Can't pick up weapons for other classes in coop netplay
			return;
		}
		if (WeaponType == WP_SECOND)
		{
			if (!P.GiveMana(MANA_1, 25))
			{
				return;
			}
		}
		else
		{
			if (!P.GiveMana(MANA_2, 25))
			{
				return;
			}
		}
	}
	else if (netgame && !deathmatch)
	{
		// Cooperative net-game
		if (P.Player->WeaponOwned[WeaponType])
		{
			return;
		}
		P.Player->WeaponOwned[WeaponType] = true;
		if (WeaponType == WP_SECOND)
		{
			P.GiveMana(MANA_1, 25);
		}
		else
		{
			P.GiveMana(MANA_2, 25);
		}
		P.Player->PendingWeapon = WeaponType;
		remove = false;
	}
	else
	{
		// Deathmatch or single player game
		if (WeaponType == WP_SECOND)
		{
			gaveMana = P.GiveMana(MANA_1, 25);
		}
		else
		{
			gaveMana = P.GiveMana(MANA_2, 25);
		}
		if (P.Player->WeaponOwned[WeaponType])
		{
			gaveWeapon = false;
		}
		else
		{
			gaveWeapon = true;
			P.Player->WeaponOwned[WeaponType] = true;
			if (WeaponType > P.Player->ReadyWeapon)
			{
				// Only switch to more powerful weapons
				P.Player->PendingWeapon = WeaponType;
			}
		}
		if (!gaveWeapon && !gaveMana)
		{
			// Player didn't need the weapon or any mana
			return;
		}
	}

	cprint(P.Player, weaponMessages[WeaponClass * 2 + WeaponType - 1]);
	if (Special)
	{
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, P);
		Special = 0;
	}

	if (remove)
	{
		if (deathmatch && !bDropped)
		{
			HideSpecial();
		}
		else
		{
			Remove();
		}
	}

	P.Player->BonusCount += BONUSADD;
	P.PlaySound('PickupWeapon', CHAN_ITEM);
}

//==========================================================================
//
//  WeaponPiece::TouchSpecial
//
//==========================================================================

void WeaponPiece::TouchSpecial(Actor Toucher)
{
	PlayerPawn P;
	boolean remove;
	boolean checkAssembled;
	boolean gaveWeapon;
	int gaveMana;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	remove = true;
	checkAssembled = true;
	gaveWeapon = false;
	if (P.Player->PClass != PieceClass)
	{
		// Wrong class, but try to pick up for mana
		if (netgame && !deathmatch)
		{
			// Can't pick up wrong-class weapons in coop netplay
			return;
		}
		checkAssembled = false;
		gaveMana = P.GiveMana(MANA_BOTH, 20);
		if (!gaveMana)
		{
			// Didn't need the mana, so don't pick it up
			return;
		}
	}
	else if (netgame && !deathmatch)
	{
		// Cooperative net-game
		if (P.Player->Pieces & PieceValue)
		{
			// Already has the piece
			return;
		}
		PieceValue = pieceValueTrans[PieceValue];
		P.GiveMana(MANA_BOTH, 20);
		remove = false;
	}
	else
	{
		// Deathmatch or single player game
		gaveMana = P.GiveMana(MANA_BOTH, 20);
		if (P.Player->Pieces & PieceValue)
		{
			// Already has the piece, check if mana needed
			if (!gaveMana)
			{
				// Didn't need the mana, so don't pick it up
				return;
			}
			checkAssembled = false;
		}
	}

	// Pick up the weapon piece
	if (Special)
	{
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, P);
		Special = 0;
	}
	if (remove)
	{
		if (deathmatch && !bDropped)
		{
			HideSpecial();
		}
		else
		{
			Remove();
		}
	}
	P.Player->BonusCount += BONUSADD;

	// Check if fourth weapon assembled
	if (checkAssembled)
	{
		P.Player->Pieces |= PieceValue;
		if (P.Player->Pieces == (WPIECE1 | WPIECE2 | WPIECE3))
		{
			gaveWeapon = true;
			P.Player->WeaponOwned[WP_FOURTH] = true;
			P.Player->PendingWeapon = WP_FOURTH;
		}
	}

	if (gaveWeapon)
	{
		cprint(P.Player, fourthWeaponText[PieceClass]);
		// Play the build-sound full volume for all players
		P.PlayFullVolumeSound('WeaponBuild', CHAN_ITEM);
	}
	else
	{
		cprint(P.Player, weaponPieceText[PieceClass]);
		P.PlayFullVolumeSound('PickupWeapon', CHAN_ITEM);	//FIXME must be PickupPiece
	}
}

//==========================================================================
//
//  Armor::TouchSpecial
//
//==========================================================================

void Armor::TouchSpecial(Actor Toucher)
{
	PlayerPawn P;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	if (!P.GiveArmor(ArmorType, -1))
	{
		return;
	}
	cprint(P.Player, armorText[ArmorType]);
	if (Special)
	{
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, P);
		Special = 0;
	}
	if (deathmatch && !bDropped)
	{
		HideSpecial();
	}
	else
	{
		Remove();
	}
	P.Player->BonusCount += BONUSADD;
	P.PlaySound('PickupItem', CHAN_ITEM);
}

//==========================================================================
//
//  Mana::TouchSpecial
//
//==========================================================================

void Mana::TouchSpecial(Actor Toucher)
{
	PlayerPawn P;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	if (!P.GiveMana(ManaType, ManaCount))
	{
		return;
	}
	cprint(P.Player, manaText[ManaType]);
	if (Special)
	{
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, P);
		Special = 0;
	}
	if (deathmatch && !bDropped)
	{
		HideSpecial();
	}
	else
	{
		Remove();
	}
	P.Player->BonusCount += BONUSADD;
	P.PlaySound('PickupItem', CHAN_ITEM);
}

//==========================================================================
//
//  Key::TouchSpecial
//
//==========================================================================

void Key::TouchSpecial(Actor Toucher)
{
	PlayerPawn P;

	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}
	P = PlayerPawn(Toucher);
	if (!P)
	{
		//	Shouldn't happen
		return;
	}
	if (!P.GiveKey(KeyType))
	{
		return;
	}
	cprint(P.Player, TextKeyMessages[KeyType]);
	if (Special)
	{
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, P);
		Special = 0;
	}
	if (!netgame)
	{
		// Only remove keys in single player game
		if (deathmatch && !bDropped)
		{
			HideSpecial();
		}
		else
		{
			Remove();
		}
	}
	P.Player->BonusCount += BONUSADD;
	P.PlaySound('PickupKey', CHAN_ITEM);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.22  2002/07/13 07:58:51  dj_jl
//  Added new models, updated existing ones.
//
//  Revision 1.21  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.20  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.19  2002/03/16 17:47:46  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.18  2002/03/12 19:19:16  dj_jl
//  Pickup classes
//
//  Revision 1.17  2002/03/02 18:00:15  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.16  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.15  2002/02/22 18:00:22  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.14  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.13  2002/02/09 18:12:25  dj_jl
//  Replaced identifying sprite name indexes with sprite names
//
//  Revision 1.12  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.11  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.10  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.9  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.8  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.7  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.6  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.5  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
