//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//	Actor::A_SerpentChase
//
//============================================================================

void Actor::A_SerpentChase(void)
{
	float delta;
	float oldX, oldY;
	int oldFloor;

	if (reactiontime)
	{
		reactiontime--;
	}

	// Modify target threshold
	if (threshold)
	{
		threshold--;
	}

	if (gameskill == sk_nightmare)
	{
		// Monsters move faster in nightmare mode
		time *= 0.5;
		if (time < 0.1)
		{
			time = 0.1;
		}
	}

	//
	// turn towards movement direction if not there yet
	//
	if (movedir < 8)
	{
		angles.yaw = itof(ftoi(angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(angles.yaw - itof(movedir) * 45.0);
		if (delta > 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw + 45.0);
		}
	}

	if (!target || !(target->flags & MF_SHOOTABLE))
	{
		// look for a new target
		if (P_LookForPlayers(this, true))
		{
			// got a new target
			return;
		}
		SetMobjState(this, spawnstate);
		return;
	}

	//
	// don't attack twice in a row
	//
	if (flags & MF_JUSTATTACKED)
	{
		flags &= ~MF_JUSTATTACKED;
		if (gameskill != sk_nightmare)
			P_NewChaseDir(this);
		return;
	}

	//
	// check for melee attack
	//
	if (meleestate && CheckMeleeRange(this))
	{
		if (sound_attack)
		{
			StartSound(this, sound_attack, CHAN_WEAPON);
		}
		SetMobjState(this, meleestate);
		return;
	}

	//
	// possibly choose another target
	//
	if (netgame && !threshold && !P_CheckSight(this, target))
	{
		if (P_LookForPlayers(this, true))
			return;	// got a new target
	}

	//
	// chase towards player
	//
	oldX = origin.x;
	oldY = origin.y;
	oldFloor = subsector->sector->floor.pic;
	if (--movecount < 0 || !P_Move(this))
	{
		P_NewChaseDir(this);
	}
	if (subsector->sector->floor.pic != oldFloor)
	{
		P_TryMove(this, oldX, oldY);
		P_NewChaseDir(this);
	}

	//
	// make active sound
	//
	if (sound_active && P_Random() < 3)
	{
		StartSound(this, sound_active, CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_SerpentHumpDecide
//
//  Decided whether to hump up, or if the mobj is a serpent leader,
// to missile attack
//
//============================================================================

void Actor::A_SerpentHumpDecide(void)
{
	if (Class == MT_SERPENTLEADER)
	{
		if (P_Random() > 30)
		{
			return;
		}
		else if (P_Random() < 40)
		{
			// Missile attack
			SetMobjState(this, S_SERPENT_SURFACE1);
			return;
		}
	}
	else if (P_Random() > 3)
	{
		return;
	}
	if (!CheckMeleeRange(this))
	{
		// The hump shouldn't occur when within melee range
		if (Class == MT_SERPENTLEADER && P_Random() < 128)
		{
			SetMobjState(this, S_SERPENT_SURFACE1);
		}
		else
		{
			SetMobjState(this, S_SERPENT_HUMP1);
			StartSoundName(this, 'SerpentActive', CHAN_VOICE);
		}
	}
}

//============================================================================
//
//	Actor::A_SerpentUnHide
//
//============================================================================

void Actor::A_SerpentUnHide(void)
{
	translucency = 0;
	floorclip = 24.0;
}

//============================================================================
//
//	Actor::A_SerpentRaiseHump
// 
//	Raises the hump above the surface by raising the floorclip level
//
//============================================================================

void Actor::A_SerpentRaiseHump(void)
{
	floorclip -= 4.0;
}

//============================================================================
//
//	Actor::A_SerpentLowerHump
// 
//============================================================================

void Actor::A_SerpentLowerHump(void)
{
	floorclip += 4.0;
}

//============================================================================
//
//	Actor::A_SerpentHide
//
//============================================================================

void Actor::A_SerpentHide(void)
{
	translucency = 100;
	floorclip = 0.0;
}

//==========================================================================
//
//	Actor::A_SetShootable
//
//==========================================================================

void Actor::A_SetShootable(void)
{
	flags2 &= ~MF2_NONSHOOTABLE;
	flags |= MF_SHOOTABLE;
}

//==========================================================================
//
//	Actor::A_UnSetShootable
//
//==========================================================================

void Actor::A_UnSetShootable(void)
{
	flags2 |= MF2_NONSHOOTABLE;
	flags &= ~MF_SHOOTABLE;
}

//============================================================================
//
//	Actor::A_SerpentBirthScream
//
//============================================================================

void Actor::A_SerpentBirthScream(void)
{
	StartSoundName(this, 'SerpentBirth', CHAN_VOICE);
}

//============================================================================
//
//  Actor::A_SerpentCheckForAttack
//
//============================================================================

void Actor::A_SerpentCheckForAttack(void)
{
	if (!target)
	{
		return;
	}
	if (Class == MT_SERPENTLEADER)
	{
		if (!CheckMeleeRange(this))
		{
			SetMobjState(this, S_SERPENT_ATK1);
			return;
		}
	}
	if (CheckMeleeRange2(this))
	{
		SetMobjState(this, S_SERPENT_WALK1);
	}
	else if (CheckMeleeRange(this))
	{
		if (P_Random() < 32)
		{
			SetMobjState(this, S_SERPENT_WALK1);
		}
		else
		{
			SetMobjState(this, S_SERPENT_ATK1);
		}
	}
}

//============================================================================
//
//	Actor::A_SerpentDiveSound
//
//============================================================================

void Actor::A_SerpentDiveSound(void)
{
	StartSoundName(this, 'SerpentActive', CHAN_VOICE);
}

//============================================================================
//
//  Actor::A_SerpentWalk
//
//  Similar to A_Chase, only has a hardcoded entering of meleestate.
//
//============================================================================

void Actor::A_SerpentWalk(void)
{
	float delta;

	if (reactiontime)
	{
		reactiontime--;
	}

	// Modify target threshold
	if (threshold)
	{
		threshold--;
	}

	if (gameskill == sk_nightmare)
	{
		// Monsters move faster in nightmare mode
		time *= 0.5;
		if (time < 0.1)
		{
			time = 0.1;
		}
	}

	//
	// turn towards movement direction if not there yet
	//
	if (movedir < 8)
	{
		angles.yaw = itof(ftoi(angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(angles.yaw - itof(movedir) * 45.0);
		if (delta > 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			angles.yaw = AngleMod360(angles.yaw + 45.0);
		}
	}

	if (!target || !(target->flags & MF_SHOOTABLE))
	{
		// look for a new target
		if (P_LookForPlayers(this, true))
		{
			// got a new target
			return;
		}
		SetMobjState(this, spawnstate);
		return;
	}

	//
	// don't attack twice in a row
	//
	if (flags & MF_JUSTATTACKED)
	{
		flags &= ~MF_JUSTATTACKED;
		if (gameskill != sk_nightmare)
			P_NewChaseDir(this);
		return;
	}

	//
	// check for melee attack
	//
	if (meleestate && CheckMeleeRange(this))
	{
		if (sound_attack)
		{
			StartSound(this, sound_attack, CHAN_WEAPON);
		}
		SetMobjState(this, S_SERPENT_ATK1);
		return;
	}
	//
	// possibly choose another target
	//
	if (netgame && !threshold && !P_CheckSight(this, target))
	{
		if (P_LookForPlayers(this, true))
			return;	// got a new target
	}

	//
	// chase towards player
	//
	if (--movecount < 0 || !P_Move(this))
	{
		P_NewChaseDir(this);
	}
}

//============================================================================
//
//  Actor::A_SerpentChooseAttack
//
//============================================================================

void Actor::A_SerpentChooseAttack(void)
{
	if (!target || CheckMeleeRange(this))
	{
		return;
	}
	if (Class == MT_SERPENTLEADER)
	{
		SetMobjState(this, S_SERPENT_MISSILE1);
	}
}

//============================================================================
//
//	Actor::A_SerpentMeleeAttack
//
//============================================================================

void Actor::A_SerpentMeleeAttack(void)
{
	if (!target)
	{
		return;
	}
	if (CheckMeleeRange(this))
	{
		target->Damage(this, this, HITDICE(5));
		StartSoundName(this, 'SerpentMeleeHit', CHAN_WEAPON);
	}
	if (P_Random() < 96)
	{
		A_SerpentCheckForAttack();
	}
}

//============================================================================
//
//	Actor::A_SerpentMissileAttack
//
//============================================================================

void Actor::A_SerpentMissileAttack(void)
{
	mobj_t *mo;

	if (!target)
	{
		return;
	}
	mo = SpawnMissile(this, target, MT_SERPENTFX);
}

//============================================================================
//
//	Actor::A_SerpentHeadPop
//
//============================================================================

void Actor::A_SerpentHeadPop(void)
{
	P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, MT_SERPENT_HEAD);
}

//============================================================================
//
//	Actor::A_SerpentSpawnGibs
//
//============================================================================

void Actor::A_SerpentSpawnGibs(void)
{
	mobj_t *mo;

	mo = P_SpawnMobj(origin.x + (Random() - 0.5) * 16.0,
		origin.y + (Random() - 0.5) * 16.0, floorz + 1.0,
		MT_SERPENT_GIB1);
	if (mo)
	{
		mo->velocity.x = (Random() - 0.5) / 4.0 * 35.0;
		mo->velocity.y = (Random() - 0.5) / 4.0 * 35.0;
		mo->floorclip = 6.0;
	}
	mo = P_SpawnMobj(origin.x + (Random() - 0.5) * 16.0,
		origin.y + (Random() - 0.5) * 16.0, floorz + 1.0,
		MT_SERPENT_GIB2);
	if (mo)
	{
		mo->velocity.x = (Random() - 0.5) / 4.0 * 35.0;
		mo->velocity.y = (Random() - 0.5) / 4.0 * 35.0;
		mo->floorclip = 6.0;
	}
	mo = P_SpawnMobj(origin.x + (Random() - 0.5) * 16.0,
		origin.y + (Random() - 0.5) * 16.0, floorz + 1.0,
		MT_SERPENT_GIB3);
	if (mo)
	{
		mo->velocity.x = (Random() - 0.5) / 4.0 * 35.0;
		mo->velocity.y = (Random() - 0.5) / 4.0 * 35.0;
		mo->floorclip = 6.0;
	}
}

//============================================================================
//
//	Actor::A_SerpentHeadCheck
//
//============================================================================

void Actor::A_SerpentHeadCheck(void)
{
	if (origin.z <= floorz)
	{
		if (P_GetThingFloorType(this) >= FLOOR_LIQUID)
		{
			P_HitFloor(this);
			SetMobjState(this, S_NULL);
		}
		else
		{
			SetMobjState(this, S_SERPENT_HEAD_X1);
		}
	}
}

//============================================================================
//
//	Actor::A_FloatGib
//
//============================================================================

void Actor::A_FloatGib(void)
{
	floorclip -= 1.0;
}

//============================================================================
//
//	Actor::A_SinkGib
//
//============================================================================

void Actor::A_SinkGib(void)
{
	floorclip += 1.0;
}

//============================================================================
//
//	Actor::A_DelayGib
//
//============================================================================

void Actor::A_DelayGib(void)
{
	time -= Random() * 2.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.10  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
