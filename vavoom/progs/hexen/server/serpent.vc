//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	Copyright (C) 1999-2000 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**	
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
// A_SerpentChase
//
//============================================================================

void A_SerpentChase(mobj_t* actor)
{
	int 	delta;
	float	oldX, oldY;
	int		oldFloor;

	if (actor->reactiontime)
	{
		actor->reactiontime--;
	}

	// Modify target threshold
	if (actor->threshold)
	{
		actor->threshold--;
	}

	if (gameskill == sk_nightmare)
	{
		// Monsters move faster in nightmare mode
		actor->time *= 0.5;
		if (actor->time < 0.1)
		{
			actor->time = 0.1;
		}
	}

	//
	// turn towards movement direction if not there yet
	//
	if(actor->movedir < 8)
	{
		actor->angles.yaw &= (7<<29);
		delta = actor->angles.yaw-(actor->movedir << 29);
		if(delta > 0)
		{
			actor->angles.yaw -= ANG90/2;
		}
		else if(delta < 0)
		{
			actor->angles.yaw += ANG90/2;
		}
	}

	if(!actor->target || !(actor->target->flags&MF_SHOOTABLE))
	{ // look for a new target
		if(P_LookForPlayers(actor, true))
		{ // got a new target
			return;
		}
		SetMobjState(actor, actor->spawnstate);
		return;
	}

	//
	// don't attack twice in a row
	//
	if(actor->flags & MF_JUSTATTACKED)
	{
		actor->flags &= ~MF_JUSTATTACKED;
		if (gameskill != sk_nightmare)
			P_NewChaseDir (actor);
		return;
	}

	//
	// check for melee attack
	//
	if (actor->meleestate && CheckMeleeRange (actor))
	{
		if (actor->sound_attack)
		{
			StartSound (actor, actor->sound_attack);
		}
		SetMobjState (actor, actor->meleestate);
		return;
	}

	//
	// possibly choose another target
	//
	if (netgame && !actor->threshold && !P_CheckSight (actor, actor->target) )
	{
		if (P_LookForPlayers(actor,true))
			return;         // got a new target
	}

	//
	// chase towards player
	//
	oldX = actor->origin.x;
	oldY = actor->origin.y;
	oldFloor = actor->subsector->sector->floor.pic;
	if (--actor->movecount<0 || !P_Move(actor))
	{
		P_NewChaseDir(actor);
	}
	if (actor->subsector->sector->floor.pic != oldFloor)
	{
		P_TryMove(actor, oldX, oldY);
		P_NewChaseDir(actor);
	}

	//
	// make active sound
	//
	if (actor->sound_active && P_Random() < 3)
	{
		StartSound(actor, actor->sound_active);
	}
}

//============================================================================
//
//	A_SerpentHumpDecide
//
//	Decided whether to hump up, or if the mobj is a serpent leader,
// to missile attack
//============================================================================

void A_SerpentHumpDecide(mobj_t* actor)
{
	if(actor->type == MT_SERPENTLEADER)
	{
		if(P_Random() > 30)
		{
			return;
		}
		else if(P_Random() < 40)
		{ // Missile attack
			SetMobjState(actor, S_SERPENT_SURFACE1);
			return;
		}
	}
	else if(P_Random() > 3)
	{
		return;
	}
	if(!CheckMeleeRange(actor))
	{ // The hump shouldn't occur when within melee range
		if(actor->type == MT_SERPENTLEADER && P_Random() < 128)
		{
			SetMobjState(actor, S_SERPENT_SURFACE1);
		}
		else
		{	
			SetMobjState(actor, S_SERPENT_HUMP1);
			StartSoundName(actor, "SerpentActive");
		}
	}
}

//============================================================================
//
// A_SerpentUnHide
//
//============================================================================

void A_SerpentUnHide(mobj_t* actor)
{
	actor->translucency = 0;
	actor->floorclip = 24.0;
}

//============================================================================
//
// A_SerpentRaiseHump
// 
// Raises the hump above the surface by raising the floorclip level
//============================================================================

void A_SerpentRaiseHump(mobj_t* actor)
{
	actor->floorclip -= 4.0;
}

//============================================================================
//
// A_SerpentLowerHump
// 
//============================================================================

void A_SerpentLowerHump(mobj_t* actor)
{
	actor->floorclip += 4.0;
}

//============================================================================
//
// A_SerpentHide
//
//============================================================================

void A_SerpentHide(mobj_t* actor)
{
	actor->translucency = 100;
	actor->floorclip = 0.0;
}

//==========================================================================
//
// A_SetShootable
//
//==========================================================================

void A_SetShootable(mobj_t* actor)
{
	actor->flags2 &= ~MF2_NONSHOOTABLE;
	actor->flags |= MF_SHOOTABLE;
}

//==========================================================================
//
// A_UnSetShootable
//
//==========================================================================

void A_UnSetShootable(mobj_t* actor)
{
	actor->flags2 |= MF2_NONSHOOTABLE;
	actor->flags &= ~MF_SHOOTABLE;
}

//============================================================================
//
// A_SerpentBirthScream
//
//============================================================================

void A_SerpentBirthScream(mobj_t* actor)
{
	StartSoundName(actor, "SerpentBirth");
}

//============================================================================
//
//	A_SerpentCheckForAttack
//
//============================================================================

void A_SerpentCheckForAttack(mobj_t* actor)
{
	if(!actor->target)
	{
		return;
	}
	if(actor->type == MT_SERPENTLEADER)
	{
		if(!CheckMeleeRange(actor))
		{
			SetMobjState(actor, S_SERPENT_ATK1);
			return;
		}
	}
	if(CheckMeleeRange2(actor))
	{
		SetMobjState(actor, S_SERPENT_WALK1);
	}
	else if(CheckMeleeRange(actor))
	{
		if(P_Random() < 32)
		{
			SetMobjState(actor, S_SERPENT_WALK1);
		}
		else
		{
			SetMobjState(actor, S_SERPENT_ATK1);
		}
	}
}

//============================================================================
//
// A_SerpentDiveSound
//
//============================================================================

void A_SerpentDiveSound(mobj_t* actor)
{
	StartSoundName(actor, "SerpentActive");
}

//============================================================================
//
//	A_SerpentWalk
//
//	Similar to A_Chase, only has a hardcoded entering of meleestate.
//
//============================================================================

void A_SerpentWalk(mobj_t* actor)
{
	int delta;

	if(actor->reactiontime)
	{
		actor->reactiontime--;
	}

	// Modify target threshold
	if(actor->threshold)
	{
		actor->threshold--;
	}

	if(gameskill == sk_nightmare)
	{ // Monsters move faster in nightmare mode
		actor->time *= 0.5;
		if (actor->time < 0.1)
		{
			actor->time = 0.1;
		}
	}

	//
	// turn towards movement direction if not there yet
	//
	if(actor->movedir < 8)
	{
		actor->angles.yaw &= (7<<29);
		delta = actor->angles.yaw-(actor->movedir << 29);
		if(delta > 0)
		{
			actor->angles.yaw -= ANG90/2;
		}
		else if(delta < 0)
		{
			actor->angles.yaw += ANG90/2;
		}
	}

	if(!actor->target || !(actor->target->flags&MF_SHOOTABLE))
	{ // look for a new target
		if(P_LookForPlayers(actor, true))
		{ // got a new target
			return;
		}
		SetMobjState(actor, actor->spawnstate);
		return;
	}

	//
	// don't attack twice in a row
	//
	if(actor->flags & MF_JUSTATTACKED)
	{
		actor->flags &= ~MF_JUSTATTACKED;
		if (gameskill != sk_nightmare)
			P_NewChaseDir (actor);
		return;
	}

	//
	// check for melee attack
	//
	if (actor->meleestate && CheckMeleeRange (actor))
	{
		if (actor->sound_attack)
		{
			StartSound (actor, actor->sound_attack);
		}
		SetMobjState(actor, S_SERPENT_ATK1);
		return;
	}
	//
	// possibly choose another target
	//
	if (netgame && !actor->threshold && !P_CheckSight (actor, actor->target) )
	{
		if (P_LookForPlayers(actor,true))
			return;         // got a new target
	}

	//
	// chase towards player
	//
	if (--actor->movecount<0 || !P_Move(actor))
	{
		P_NewChaseDir (actor);
	}
}

//============================================================================
//
//	A_SerpentChooseAttack
//
//============================================================================

void A_SerpentChooseAttack(mobj_t* actor)
{
	if(!actor->target || CheckMeleeRange(actor))
	{
		return;
	}
	if(actor->type == MT_SERPENTLEADER)
	{
		SetMobjState(actor, S_SERPENT_MISSILE1);
	}
}
	
//============================================================================
//
// A_SerpentMeleeAttack
//
//============================================================================

void A_SerpentMeleeAttack(mobj_t* actor)
{
	if(!actor->target)
	{
		return;
	}
	if(CheckMeleeRange(actor))
	{
		DamageMobj(actor->target, actor, actor, HITDICE(5));
		StartSoundName(actor, "SerpentMeleeHit");
	}
	if(P_Random() < 96)
	{
		A_SerpentCheckForAttack(actor);
	}
}

//============================================================================
//
// A_SerpentMissileAttack
//
//============================================================================
	
void A_SerpentMissileAttack(mobj_t* actor)
{
	mobj_t*	mo;

	if(!actor->target)
	{
		return;
	}
	mo = SpawnMissile(actor, actor->target, MT_SERPENTFX);
}

//============================================================================
//
// A_SerpentHeadPop
//
//============================================================================

void A_SerpentHeadPop(mobj_t* actor)
{
	P_SpawnMobj(actor->origin.x, actor->origin.y, actor->origin.z + 45.0, MT_SERPENT_HEAD);
}

//============================================================================
//
// A_SerpentSpawnGibs
//
//============================================================================

void A_SerpentSpawnGibs(mobj_t* actor)
{
	mobj_t*	mo;

	mo = P_SpawnMobj(actor->origin.x + (Random() - 0.5) * 16.0,
		actor->origin.y + (Random() - 0.5) * 16.0, actor->floorz + 1.0,
		MT_SERPENT_GIB1);	
	if(mo)
	{
		mo->velocity.x = (Random() - 0.5) / 4.0 * 35.0;
		mo->velocity.y = (Random() - 0.5) / 4.0 * 35.0;
		mo->floorclip = 6.0;
	}
	mo = P_SpawnMobj(actor->origin.x + (Random() - 0.5) * 16.0,
		actor->origin.y + (Random() - 0.5) * 16.0, actor->floorz + 1.0,
		MT_SERPENT_GIB2);	
	if(mo)
	{
		mo->velocity.x = (Random() - 0.5) / 4.0 * 35.0;
		mo->velocity.y = (Random() - 0.5) / 4.0 * 35.0;
		mo->floorclip = 6.0;
	}
	mo = P_SpawnMobj(actor->origin.x + (Random() - 0.5) * 16.0,
		actor->origin.y + (Random() - 0.5) * 16.0, actor->floorz + 1.0,
		MT_SERPENT_GIB3);	
	if(mo)
	{
		mo->velocity.x = (Random() - 0.5) / 4.0 * 35.0;
		mo->velocity.y = (Random() - 0.5) / 4.0 * 35.0;
		mo->floorclip = 6.0;
	}
}

//============================================================================
//
// A_SerpentHeadCheck
//
//============================================================================

void A_SerpentHeadCheck(mobj_t* actor)
{
	if (actor->origin.z <= actor->floorz)
	{
		if(P_GetThingFloorType(actor) >= FLOOR_LIQUID)
		{
			P_HitFloor(actor);
			SetMobjState(actor, S_NULL);
		}
		else
		{
			SetMobjState(actor, S_SERPENT_HEAD_X1);
		}
	}
}

//============================================================================
//
// A_FloatGib
//
//============================================================================

void A_FloatGib(mobj_t* actor)
{
	actor->floorclip -= 1.0;
}

//============================================================================
//
// A_SinkGib
//
//============================================================================

void A_SinkGib(mobj_t* actor)
{
	actor->floorclip += 1.0;
}

//============================================================================
//
// A_DelayGib
//
//============================================================================

void A_DelayGib(mobj_t* actor)
{
	actor->time -= Random() * 2.0;
}

