//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	MapSpot
//
//**************************************************************************

class MapSpot:Actor
	__mobjinfo__(9001)
{

__states__
{
	S_MAPSPOT('TLGL', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	bHidden = true;
	bNoBlockmap = true;
	bNoGravity = true;
	bNoPassMobj = true;
	IdleState = S_MAPSPOT;
}

}

//**************************************************************************
//
//	MapSpotGravity
//
//**************************************************************************

class MapSpotGravity:Actor
	__mobjinfo__(9013)
{

__states__
{
	S_MAPSPOT_GRAV('TLGL', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	Translucency = 100;
	bNoPassMobj = true;
	IdleState = S_MAPSPOT_GRAV;
}

}

//**************************************************************************
//
//	FireBomb
//
//**************************************************************************

class FireBomb:Actor
{

__states__
{
	S_FIREBOMB1('PSBG', 0, 'artifact/flechete.md2', 0, 20.0 / 35.0, S_FIREBOMB2) { }
	S_FIREBOMB2('PSBG', 0, 'artifact/flechete.md2', 0, 10.0 / 35.0, S_FIREBOMB3) { }
	S_FIREBOMB3('PSBG', 0, 'artifact/flechete.md2', 0, 10.0 / 35.0, S_FIREBOMB4) { }
	S_FIREBOMB4('PSBG', 1, 4.0 / 35.0, S_FIREBOMB5) { }
	S_FIREBOMB5('PSBG', 2, 4.0 / 35.0, S_FIREBOMB6) { A_Scream(); }
	S_FIREBOMB6('XPL1', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_FIREBOMB7) { A_Explode(); }
	S_FIREBOMB7('XPL1', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_FIREBOMB8) { }
	S_FIREBOMB8('XPL1', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_FIREBOMB9) { }
	S_FIREBOMB9('XPL1', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_FIREBOMB10) { }
	S_FIREBOMB10('XPL1', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_FIREBOMB11) { }
	S_FIREBOMB11('XPL1', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	Translucency = 33;
	bNoGravity = true;
	bNoPassMobj = true;
	bFireDamage = true;
	IdleState = S_FIREBOMB1;
	DeathSound = 'FlechetteExplode';
}

}

//**************************************************************************
//
//	Splash
//
//**************************************************************************

class Splash:Fragment
{

__states__
{
	S_SPLASH1('SPSH', 0, 8.0 / 35.0, S_SPLASH2) { }
	S_SPLASH2('SPSH', 1, 8.0 / 35.0, S_SPLASH3) { }
	S_SPLASH3('SPSH', 2, 8.0 / 35.0, S_SPLASH4) { }
	S_SPLASH4('SPSH', 3, 16.0 / 35.0, S_NULL) { }
	S_SPLASHX('SPSH', 3, 10.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 2.0;
	Height = 4.0;
	Mass = 12.5;
	bNoGravity = false;
	bCannotPush = true;
	IdleState = S_SPLASH1;
	DeathState = S_SPLASHX;
}

}

//**************************************************************************
//
//	SplashBase
//
//**************************************************************************

class SplashBase:Effect
{

__states__
{
	S_SPLASHBASE1('SPSH', 4, 5.0 / 35.0, S_SPLASHBASE2) { }
	S_SPLASHBASE2('SPSH', 5, 5.0 / 35.0, S_SPLASHBASE3) { }
	S_SPLASHBASE3('SPSH', 6, 5.0 / 35.0, S_SPLASHBASE4) { }
	S_SPLASHBASE4('SPSH', 7, 5.0 / 35.0, S_SPLASHBASE5) { }
	S_SPLASHBASE5('SPSH', 8, 5.0 / 35.0, S_SPLASHBASE6) { }
	S_SPLASHBASE6('SPSH', 9, 5.0 / 35.0, S_SPLASHBASE7) { }
	S_SPLASHBASE7('SPSH', 10, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	bNoGravity = false;
	IdleState = S_SPLASHBASE1;
}

}

//**************************************************************************
//
//	LavaSplash
//
//**************************************************************************

class LavaSplash:Effect
{

__states__
{
	S_LAVASPLASH1('LVAS', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_LAVASPLASH2) { }
	S_LAVASPLASH2('LVAS', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_LAVASPLASH3) { }
	S_LAVASPLASH3('LVAS', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_LAVASPLASH4) { }
	S_LAVASPLASH4('LVAS', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_LAVASPLASH5) { }
	S_LAVASPLASH5('LVAS', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_LAVASPLASH6) { }
	S_LAVASPLASH6('LVAS', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	bNoGravity = false;
	IdleState = S_LAVASPLASH1;
}

}

//**************************************************************************
//
//	LavaSmoke
//
//**************************************************************************

class LavaSmoke:Effect
{

__states__
{
	S_LAVASMOKE1('LVAS', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_LAVASMOKE2) { }
	S_LAVASMOKE2('LVAS', 7 | FF_FULLBRIGHT, 5.0 / 35.0, S_LAVASMOKE3) { }
	S_LAVASMOKE3('LVAS', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_LAVASMOKE4) { }
	S_LAVASMOKE4('LVAS', 9 | FF_FULLBRIGHT, 5.0 / 35.0, S_LAVASMOKE5) { }
	S_LAVASMOKE5('LVAS', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Translucency = 66;
	IdleState = S_LAVASMOKE1;
}

}

//**************************************************************************
//
//	SludgeChunk
//
//**************************************************************************

class SludgeChunk:Fragment
{

__states__
{
	S_SLUDGECHUNK1('SLDG', 0, 8.0 / 35.0, S_SLUDGECHUNK2) { }
	S_SLUDGECHUNK2('SLDG', 1, 8.0 / 35.0, S_SLUDGECHUNK3) { }
	S_SLUDGECHUNK3('SLDG', 2, 8.0 / 35.0, S_SLUDGECHUNK4) { }
	S_SLUDGECHUNK4('SLDG', 3, 8.0 / 35.0, S_NULL) { }
	S_SLUDGECHUNKX('SLDG', 3, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 2.0;
	Height = 4.0;
	Mass = 12.5;
	bNoGravity = false;
	bCannotPush = true;
	IdleState = S_SLUDGECHUNK1;
	DeathState = S_SLUDGECHUNKX;
}

}

//**************************************************************************
//
//	SludgeSplash
//
//**************************************************************************

class SludgeSplash:Effect
{

__states__
{
	S_SLUDGESPLASH1('SLDG', 4, 6.0 / 35.0, S_SLUDGESPLASH2) { }
	S_SLUDGESPLASH2('SLDG', 5, 6.0 / 35.0, S_SLUDGESPLASH3) { }
	S_SLUDGESPLASH3('SLDG', 6, 6.0 / 35.0, S_SLUDGESPLASH4) { }
	S_SLUDGESPLASH4('SLDG', 7, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	bNoGravity = false;
	IdleState = S_SLUDGESPLASH1;
}

}

//**************************************************************************
//
//	TeleportFog
//
//**************************************************************************

class TeleportFog:Effect
{

__states__
{
	S_TFOG1('TELE', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG2) { }
	S_TFOG2('TELE', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG3) { }
	S_TFOG3('TELE', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG4) { }
	S_TFOG4('TELE', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG5) { }
	S_TFOG5('TELE', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG6) { }
	S_TFOG6('TELE', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG7) { }
	S_TFOG7('TELE', 6 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG8) { }
	S_TFOG8('TELE', 7 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG9) { }
	S_TFOG9('TELE', 6 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG10) { }
	S_TFOG10('TELE', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG11) { }
	S_TFOG11('TELE', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG12) { }
	S_TFOG12('TELE', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG13) { }
	S_TFOG13('TELE', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_TFOG1;
}

}

//**************************************************************************
//
//	TeleSmoke
//
//**************************************************************************

class TeleSmoke:Effect
	__mobjinfo__(140)
{

__states__
{
	S_TELESMOKE1('TSMK', 0, 4.0 / 35.0, S_TELESMOKE2) { }
	S_TELESMOKE2('TSMK', 1, 3.0 / 35.0, S_TELESMOKE3) { }
	S_TELESMOKE3('TSMK', 2, 4.0 / 35.0, S_TELESMOKE4) { }
	S_TELESMOKE4('TSMK', 3, 3.0 / 35.0, S_TELESMOKE5) { }
	S_TELESMOKE5('TSMK', 4, 4.0 / 35.0, S_TELESMOKE6) { }
	S_TELESMOKE6('TSMK', 5, 3.0 / 35.0, S_TELESMOKE7) { }
	S_TELESMOKE7('TSMK', 6, 4.0 / 35.0, S_TELESMOKE8) { }
	S_TELESMOKE8('TSMK', 7, 3.0 / 35.0, S_TELESMOKE9) { }
	S_TELESMOKE9('TSMK', 8, 4.0 / 35.0, S_TELESMOKE10) { }
	S_TELESMOKE10('TSMK', 9, 3.0 / 35.0, S_TELESMOKE11) { }
	S_TELESMOKE11('TSMK', 10, 4.0 / 35.0, S_TELESMOKE12) { }
	S_TELESMOKE12('TSMK', 11, 3.0 / 35.0, S_TELESMOKE13) { }
	S_TELESMOKE13('TSMK', 12, 4.0 / 35.0, S_TELESMOKE14) { }
	S_TELESMOKE14('TSMK', 13, 3.0 / 35.0, S_TELESMOKE15) { }
	S_TELESMOKE15('TSMK', 14, 4.0 / 35.0, S_TELESMOKE16) { }
	S_TELESMOKE16('TSMK', 15, 3.0 / 35.0, S_TELESMOKE17) { }
	S_TELESMOKE17('TSMK', 16, 4.0 / 35.0, S_TELESMOKE18) { }
	S_TELESMOKE18('TSMK', 17, 3.0 / 35.0, S_TELESMOKE19) { }
	S_TELESMOKE19('TSMK', 18, 4.0 / 35.0, S_TELESMOKE20) { }
	S_TELESMOKE20('TSMK', 19, 3.0 / 35.0, S_TELESMOKE21) { }
	S_TELESMOKE21('TSMK', 20, 4.0 / 35.0, S_TELESMOKE22) { }
	S_TELESMOKE22('TSMK', 21, 3.0 / 35.0, S_TELESMOKE23) { }
	S_TELESMOKE23('TSMK', 22, 4.0 / 35.0, S_TELESMOKE24) { }
	S_TELESMOKE24('TSMK', 23, 3.0 / 35.0, S_TELESMOKE25) { }
	S_TELESMOKE25('TSMK', 24, 4.0 / 35.0, S_TELESMOKE26) { }
	S_TELESMOKE26('TSMK', 25, 3.0 / 35.0, S_TELESMOKE1) { }
}

defaultproperties
{
	IdleState = S_TELESMOKE1;
}

}

//**************************************************************************
//
//	TeleportSpot
//
//**************************************************************************

class TeleportSpot:Actor
	__mobjinfo__(14)
{

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	bHidden = true;
	bNoBlockmap = true;
	bNoPassMobj = true;
}

}

//**************************************************************************
//
//	Blood
//
//**************************************************************************

class Blood:Effect
{

__states__
{
	S_BLOOD1('BLOD', 2, 8.0 / 35.0, S_BLOOD2) { }
	S_BLOOD2('BLOD', 1, 8.0 / 35.0, S_BLOOD3) { }
	S_BLOOD3('BLOD', 0, 8.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Mass = 5.0;
	bNoGravity = false;
	IdleState = S_BLOOD1;
}

}

//**************************************************************************
//
//	BloodSplatter
//
//**************************************************************************

class BloodSplatter:Fragment
{

__states__
{
	S_BLOODSPLATTER1('BLOD', 2, 8.0 / 35.0, S_BLOODSPLATTER2) { }
	S_BLOODSPLATTER2('BLOD', 1, 8.0 / 35.0, S_BLOODSPLATTER3) { }
	S_BLOODSPLATTER3('BLOD', 0, 8.0 / 35.0, S_NULL) { }
	S_BLOODSPLATTERX('BLOD', 0, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 2.0;
	Height = 4.0;
	Mass = 5.0;
	bCannotPush = true;
	bNoGravity = false;
	IdleState = S_BLOODSPLATTER1;
	DeathState = S_BLOODSPLATTERX;
}

}

//**************************************************************************
//
//	Gibs
//
//	UNUSED, BTW
//
//**************************************************************************

class Gibs:Carcas
{

defaultproperties
{
	bNoBlockmap = true;
	bFloorClip = false;
	IdleState = S_GIBS1;
}

}

//**************************************************************************
//
//	PlayerSpeed
//
//**************************************************************************

class PlayerSpeed:Effect
{

//============================================================================
//
//	A_SpeedFade
//
//============================================================================

void A_SpeedFade(void)
{
	Translucency = 66;
	SpriteIndex = Instigator.SpriteIndex;
}

__states__
{
	S_PLAYER_SPEED1('PLAY', 0, 5.0 / 35.0, S_PLAYER_SPEED2) { }
	S_PLAYER_SPEED2('PLAY', 0, 3.0 / 35.0, S_NULL) { A_SpeedFade(); }
}

defaultproperties
{
	Translucency = 33;
	IdleState = S_PLAYER_SPEED1;
}

}

//**************************************************************************
//
//	IceChunk
//
//**************************************************************************

class IceChunk:Effect
{

//============================================================================
//
//	A_IceSetTics
//
//============================================================================

void A_IceSetTics(void)
{
	int floor;

	StateTime = 2.0 + Random() * 2.0;
	floor = GetFloorType();
	if (floor == FLOOR_LAVA)
	{
		StateTime /= 4.0;
	}
	else if (floor == FLOOR_ICE)
	{
		StateTime *= 2.0;
	}
}

__states__
{
	S_ICECHUNK1('ICEC', 0, 10.0 / 35.0, S_ICECHUNK2) { }
	S_ICECHUNK2('ICEC', 1, 10.0 / 35.0, S_ICECHUNK3) { A_IceSetTics(); }
	S_ICECHUNK3('ICEC', 2, 10.0 / 35.0, S_ICECHUNK4) { A_IceSetTics(); }
	S_ICECHUNK4('ICEC', 3, 10.0 / 35.0, S_NULL) { A_IceSetTics(); }
}

defaultproperties
{
	Radius = 3.0;
	Height = 4.0;
	Mass = 12.5;
	bDropOff = true;
	bFloorClip = true;
	bCannotPush = true;
	bNoGravity = false;
	IdleState = S_ICECHUNK1;
}

}

//**************************************************************************
//
//	SoundWind
//
//**************************************************************************

class SoundWind:Actor
	__mobjinfo__(1410)
{

//==========================================================================
//
//  A_ESound
//
//==========================================================================

void A_ESound(void)
{
	PlaySound('Wind', CHAN_VOICE);
}

__states__
{
	S_SND_WIND1('', 0, 1.0 / 35.0, S_SND_WIND2) { }
	S_SND_WIND2('', 0, 200.0 / 35.0, S_SND_WIND2) { A_ESound(); }
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	bHidden = true;
	bNoBlockmap = true;
	bNoPassMobj = true;
	IdleState = S_SND_WIND1;
}

}

//**************************************************************************
//
//	SoundWaterfall
//
//**************************************************************************

class SoundWaterfall:Actor
	__mobjinfo__(41)
{

//==========================================================================
//
//  A_ESound
//
//==========================================================================

void A_ESound(void)
{
	// Waterfall seams to be silent, in other words UNUSED
}

__states__
{
	S_SND_WATERFALL('', 0, 85.0 / 35.0, S_SND_WATERFALL) { A_ESound(); }
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	bHidden = true;
	bNoBlockmap = true;
	bNoPassMobj = true;
	IdleState = S_SND_WATERFALL;
}

}

//**************************************************************************
//
//	BlastEffect
//
//**************************************************************************

class BlastEffect:Effect
{

__states__
{
	S_BLASTEFFECT1('RADE', 0, 4.0 / 35.0, S_BLASTEFFECT2) { }
	S_BLASTEFFECT2('RADE', 1, 4.0 / 35.0, S_BLASTEFFECT3) { }
	S_BLASTEFFECT3('RADE', 2, 4.0 / 35.0, S_BLASTEFFECT4) { }
	S_BLASTEFFECT4('RADE', 3, 4.0 / 35.0, S_BLASTEFFECT5) { }
	S_BLASTEFFECT5('RADE', 4, 4.0 / 35.0, S_BLASTEFFECT6) { }
	S_BLASTEFFECT6('RADE', 5, 4.0 / 35.0, S_BLASTEFFECT7) { }
	S_BLASTEFFECT7('RADE', 6, 4.0 / 35.0, S_BLASTEFFECT8) { }
	S_BLASTEFFECT8('RADE', 7, 4.0 / 35.0, S_BLASTEFFECT9) { }
	S_BLASTEFFECT9('RADE', 8, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Translucency = 33;
	bColideWithWorld = false;
	bColideWithThings = false;
	bNoTeleport = true;
	IdleState = S_BLASTEFFECT1;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2002/07/13 07:58:51  dj_jl
//  Added new models, updated existing ones.
//
//  Revision 1.1  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//**************************************************************************
