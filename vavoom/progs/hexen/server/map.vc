//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define USERANGE 			64.0

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//**************************************************************************
//
//  SECTOR HEIGHT CHANGING
//
//  After modifying a sectors floor or ceiling height, call this routine to
// adjust the positions of all things that touch the sector.
//  If anything doesn't fit anymore, true will be returned. If crunch is
// true, they will take damage as they are being crushed.
//  If Crunch is false, you should set the sector height back the way it was
// and call P_ChangeSector again to undo the changes.
//
//**************************************************************************

boolean crushchange;
boolean nofit;

//==========================================================================
//
//  CalcSecMinMaxs
//
//==========================================================================

void CalcSecMinMaxs(sector_t * sector)
{
	float minz;
	float maxz;
	int i;

	if (sector->floor.normal.z == 1.0)
	{
		//  Horisontal floor
		sector->floor.minz = sector->floor.dist;
		sector->floor.maxz = sector->floor.dist;
	}
	else
	{
		//  Sloped floor
		minz = 99999.0;
		maxz = -99999.0;
		for (i = 0; i < sector->linecount; i++)
		{
			float z;

			z = GetPlanePointZ(&sector->floor, *sector->lines[i]->v1);
			if (minz > z)
				minz = z;
			if (maxz < z)
				maxz = z;
		}
		sector->floor.minz = minz;
		sector->floor.maxz = maxz;
	}

	if (sector->ceiling.normal.z == -1.0)
	{
		//  Horisontal ceiling
		sector->ceiling.minz = -sector->ceiling.dist;
		sector->ceiling.maxz = -sector->ceiling.dist;
	}
	else
	{
		//  Sloped ceiling
		minz = 99999.0;
		maxz = -99999.0;
		for (i = 0; i < sector->linecount; i++)
		{
			float z;

			z = GetPlanePointZ(&sector->ceiling, *sector->lines[i]->v1);
			if (minz > z)
				minz = z;
			if (maxz < z)
				maxz = z;
		}
		sector->ceiling.minz = minz;
		sector->ceiling.maxz = maxz;
	}

	sector->floorheight = sector->floor.minz;
	sector->ceilingheight = sector->ceiling.maxz;
}

//==========================================================================
//
//  Actor::HeightClip
//
//  Takes a valid thing and adjusts the thing->FloorZ, thing->CeilingZ, and
// possibly thing->z. This is called for all nearby monsters whenever a
// sector changes height. If the thing doesn't fit, the z will be set to the
// lowest value and false will be returned.
//
//==========================================================================

boolean Actor::HeightClip(void)
{
	boolean onfloor;

	onfloor = (Origin.z == FloorZ);

	CheckRelPosition(Origin);
	// what about stranding a monster partially off an edge?

	FloorZ = tmtrace->FloorZ;
	CeilingZ = tmtrace->CeilingZ;
	Floor = tmtrace->Floor;
	Ceiling = tmtrace->Ceiling;

	if (onfloor)
	{
		// walking monsters rise and fall with the floor
		if ((Origin.z - FloorZ < 9.0) || bNoGravity)
		{
			Origin.z = FloorZ;
		}
	}
	else
	{
		// don't adjust a floating monster unless forced to
		if (Origin.z + Height > CeilingZ)
			Origin.z = CeilingZ - Height;
	}

	if (CeilingZ - FloorZ < Height)
		return false;

	return true;
}

//==========================================================================
//
//  PIT_ChangeSector
//
//==========================================================================

boolean PIT_ChangeSector(MapObject InOther)
{
	Actor B;
	Actor Other;

	Other = Actor(InOther);
	if (Other.HeightClip())
	{
		// keep checking
		return true;
	}

	// crunch bodies to giblets
	if (Other.bCorpse && (Other.Health <= 0))
	{
		if (Other.bNoBlood)
		{
			Other.Remove();
		}
		else
		{
			if (Other.StateNum != S_GIBS1)
			{
				Other.SetState(S_GIBS1);
				Other.Height = 0.0;
				Other.Radius = 0.0;
				Other.PlaySound('PlayerFallingSplat', CHAN_VOICE);
			}
		}
		return true;	// keep checking
	}

	// crunch dropped items
	if (Other.bDropped)
	{
		Other.Remove();

		// keep checking
		return true;
	}

	if (!Other.bShootable)
	{
		// assume it is bloody gibs or something
		return true;
	}

	if (crushchange && !(level->tictime & 3))
	{
		Other.Damage(none, none, crushchange);

		// spray blood in a random direction
		if (!Other.bNoBlood && !Other.bInvulnerable)
		{
			B = Spawn(Blood, Other.Origin +
				vector(0.0, 0.0, Other.Height / 2.0));
			B.Velocity.x = (Random() - Random()) * 16.0 * 35.0;
			B.Velocity.y = (Random() - Random()) * 16.0 * 35.0;
		}
	}

	// keep checking (crush other things)   
	nofit = true;	//don't fit

	return true;
}

//==========================================================================
//
//  P_ChangeSector
//
//==========================================================================

boolean P_ChangeSector(sector_t * sector, int crunch)
{
	int x;
	int y;

	CalcSecMinMaxs(sector);

	nofit = false;
	crushchange = crunch;

	// re-check heights for all things near the moving sector
	for (x = sector->blockbox[BOXLEFT]; x <= sector->blockbox[BOXRIGHT]; x++)
		for (y = sector->blockbox[BOXBOTTOM]; y <= sector->blockbox[BOXTOP];
			y++)
			P_BlockThingsIterator(x, y, 'PIT_ChangeSector');

	return nofit;
}

//**************************************************************************
//
//  USE LINES
//
//**************************************************************************

Actor usething;
TVec useDir;

//==========================================================================
//
//  PTR_UseTraverse
//
//==========================================================================

boolean PTR_UseTraverse(intercept_t * in)
{
	name sound;
	float pheight;
	TVec hit_point;
	opening_t *open;

	if (!in->line->special)
	{
		hit_point = usething.Origin + (USERANGE * in->frac) * useDir;
		open = LineOpenings(in->line, hit_point);
		open = FindOpening(open, hit_point.z + usething.Height / 2.0,
			hit_point.z + usething.Height);
		if (!open)
		{
			if (usething.bIsPlayer)
			{
				switch (usething.Player->PClass)
				{
				case PCLASS_FIGHTER:
					sound = 'PlayerFighterFailedUse';
					break;
				case PCLASS_CLERIC:
					sound = 'PlayerClericFailedUse';
					break;
				case PCLASS_MAGE:
					sound = 'PlayerMageFailedUse';
					break;
				case PCLASS_PIG:
					sound = 'PigActive1';
					break;
				default:
					sound = 'None';
					break;
				}
				usething.PlaySound(sound, CHAN_VOICE);
			}
			return false;	// can't use through a wall
		}
		if (usething.bIsPlayer)
		{
			pheight = usething.Origin.z + usething.Height / 2.0;
			if ((open->top < pheight) || (open->bottom > pheight))
			{
				switch (usething.Player->PClass)
				{
				case PCLASS_FIGHTER:
					sound = 'PlayerFighterFailedUse';
					break;
				case PCLASS_CLERIC:
					sound = 'PlayerClericFailedUse';
					break;
				case PCLASS_MAGE:
					sound = 'PlayerMageFailedUse';
					break;
				case PCLASS_PIG:
					sound = 'PigActive1';
					break;
				default:
					sound = 'None';
					break;
				}
				usething.PlaySound(sound, CHAN_VOICE);
			}
		}
		return true;	// not a special line, but keep checking
	}

	if (PointOnPlaneSide(usething.Origin, in->line) == 1)
		return false;	// don't use back sides

	P_ActivateLine(in->line, usething, 0, SPAC_USE);

	return false;	// can't use for than one special line in a row
}

//==========================================================================
//
//  P_UseLines
//
//  Looks for special lines in front of the player to activate.
//
//==========================================================================

void P_UseLines(player_t * player)
{
	float x1;
	float y1;
	float x2;
	float y2;

	usething = player->MO;

	AngleVector(&player->MO.Angles, &useDir);
	x1 = player->MO.Origin.x;
	y1 = player->MO.Origin.y;
	x2 = x1 + USERANGE * useDir.x;
	y2 = y1 + USERANGE * useDir.y;
	P_PathTraverse(x1, y1, x2, y2, PT_ADDLINES, 'PTR_UseTraverse');
}

//**************************************************************************
//
//  USING A PUZZLE ITEM
//
//**************************************************************************

#define USE_PUZZLE_ITEM_SPECIAL 129

Actor PuzzleItemUser;
int PuzzleItemType;
boolean PuzzleActivated;
TVec PuzzleUseDir;

//==========================================================================
//
// PTR_PuzzleItemTraverse
//
//==========================================================================

boolean PTR_PuzzleItemTraverse(intercept_t * in)
{
	Actor mobj;
	TVec hit_point;
	opening_t *open;

	if (in->isaline)
	{
		// Check line
		hit_point =
			PuzzleItemUser.Origin + (USERANGE * in->frac) * PuzzleUseDir;
		if (in->line->special != USE_PUZZLE_ITEM_SPECIAL)
		{
			open = LineOpenings(in->line, hit_point);
			if (!open || open->range <= 0.0)
			{
				name sound;

				sound = 'None';
				if (PuzzleItemUser.bIsPlayer)
				{
					switch (PuzzleItemUser.Player->PClass)
					{
					case PCLASS_FIGHTER:
						sound = 'PuzzleFailFighter';
						break;
					case PCLASS_CLERIC:
						sound = 'PuzzleFailCleric';
						break;
					case PCLASS_MAGE:
						sound = 'PuzzleFailMage';
						break;
					}
				}
				PuzzleItemUser.PlaySound(sound, CHAN_VOICE);
				return false;	// can't use through a wall
			}
			return true;	// Continue searching
		}
		if (PointOnPlaneSide(PuzzleItemUser.Origin, in->line) == 1)
		{
			// Don't use back sides
			return false;
		}
		if (PuzzleItemType != in->line->arg1)
		{
			// Item type doesn't match
			return false;
		}
		StartACS(in->line->arg2, 0, &in->line->arg3,
			PuzzleItemUser, in->line, 0);
		in->line->special = 0;
		PuzzleActivated = true;
		return false;	// Stop searching
	}
	// Check thing
	mobj = Actor(in->Thing);
	if (mobj.Special != USE_PUZZLE_ITEM_SPECIAL)
	{
		// Wrong special
		return true;
	}
	if (PuzzleItemType != mobj.Args[0])
	{
		// Item type doesn't match
		return true;
	}
	StartACS(mobj.Args[1], 0, &mobj.Args[2], PuzzleItemUser, NULL, 0);
	mobj.Special = 0;
	PuzzleActivated = true;
	return false;	// Stop searching
}

//==========================================================================
//
//  P_UsePuzzleItem
//
//  Returns true if the puzzle item was used on a line or a thing.
//
//==========================================================================

boolean P_UsePuzzleItem(player_t * player, int itemType)
{
	float x1, y1, x2, y2;

	PuzzleItemType = itemType;
	PuzzleItemUser = player->MO;
	PuzzleActivated = false;
	AngleVector(&player->MO.Angles, &PuzzleUseDir);
	x1 = player->MO.Origin.x;
	y1 = player->MO.Origin.y;
	x2 = x1 + USERANGE * PuzzleUseDir.x;
	y2 = y1 + USERANGE * PuzzleUseDir.y;
	P_PathTraverse(x1, y1, x2, y2, PT_ADDLINES | PT_ADDTHINGS,
		'PTR_PuzzleItemTraverse');
	return PuzzleActivated;
}

//**************************************************************************
//
//  AIMING
//
//**************************************************************************

Actor aim_thing;

// Height if not aiming up or down
// ???: use slope for monsters?
float aim_z;
float aim_range;
float aim_slope;
TVec aim_dir;
float aim_topslope;
float aim_bottomslope;	// slopes to top and bottom of target
float aim_range2d;

//==========================================================================
//
//  PTR_AimTraverse
//
//  Sets linetaget and aim_slope when a target is aimed at.
//
//==========================================================================

boolean PTR_AimTraverse(intercept_t * in)
{
	line_t *li;
	Actor th;
	float thingtopslope;
	float thingbottomslope;
	float dist;
	float slope;
	opening_t *open;

	if (in->isaline)
	{
		TVec hit_point;

		li = in->line;

		if (!(li->flags & ML_TWOSIDED))
			return false;	// stop

		// Crosses a two sided line.
		// A two sided line will restrict
		// the possible target ranges.
		dist = aim_range * in->frac;
		hit_point = aim_thing.Origin + dist * aim_dir;
		open = LineOpenings(li, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z);

		if (!open || open->bottom >= open->top)
			return false;	// stop

		dist = aim_range2d * in->frac;
		if (li->frontsector->floorheight != li->backsector->floorheight)
		{
			slope = (open->bottom - aim_z) / dist;
			if (slope > aim_bottomslope)
				aim_bottomslope = slope;
		}

		if (li->frontsector->ceilingheight != li->backsector->ceilingheight)
		{
			slope = (open->top - aim_z) / dist;
			if (slope < aim_topslope)
				aim_topslope = slope;
		}

		if (aim_topslope <= aim_bottomslope)
			return false;	// stop

		return true;	// shot continues
	}

	// shoot a thing
	th = Actor(in->Thing);
	if (th == aim_thing)
		return true;	// can't shoot self

	if (!th.bShootable)
		return true;	// corpse or something

	if (th.bIsPlayer && netgame && !deathmatch)
	{
		// don't aim at fellow co-op players
		return true;
	}

	// check angles to see if the thing can be aimed at
	dist = aim_range2d * in->frac;
	thingtopslope = (th.Origin.z + th.Height - aim_z) / dist;

	if (thingtopslope < aim_bottomslope)
		return true;	// shot over the thing

	thingbottomslope = (th.Origin.z - aim_z) / dist;

	if (thingbottomslope > aim_topslope)
		return true;	// shot under the thing

	// this thing can be hit!
	if (thingtopslope > aim_topslope)
		thingtopslope = aim_topslope;

	if (thingbottomslope < aim_bottomslope)
		thingbottomslope = aim_bottomslope;

	aim_slope = (thingtopslope + thingbottomslope) / 2.0;
	linetarget = th;

	return false;	// don't go any farther
}

//==========================================================================
//
//  AimLineAttack
//
//==========================================================================

void AimLineAttack(Actor t1, TAVec * angles, float distance)
{
	float x2;
	float y2;
	float topangle;
	float botangle;

	aim_thing = t1;

	AngleVector(angles, &aim_dir);
	x2 = t1.Origin.x + distance * aim_dir.x;
	y2 = t1.Origin.y + distance * aim_dir.y;
	aim_z = t1.Origin.z + t1.Height / 2.0 + 8.0 - t1.FloorClip;
	aim_range2d =
		Length(vector(distance * aim_dir.x, distance * aim_dir.y, 0.0));

	// can't shoot outside view angles
	topangle = AngleMod180(-angles->pitch + 30.0);
	botangle = AngleMod180(-angles->pitch - 30.0);
	if (topangle > 89.0)
		topangle = 89.0;
	if (botangle < -89.0)
		botangle = -89.0;
	aim_topslope = tan(topangle);
	aim_bottomslope = tan(botangle);

	aim_range = distance;
	linetarget = none;

	P_PathTraverse(t1.Origin.x, t1.Origin.y, x2, y2,
		PT_ADDLINES | PT_ADDTHINGS, 'PTR_AimTraverse');

	if (linetarget)
	{
		angles->pitch = -atan(aim_slope);
	}
}

//**************************************************************************
//
//  SHOOTING
//
//**************************************************************************

Actor shoot_thing;
float shoot_range;
TVec shoot_origin;
TVec shoot_dir;
int la_damage;

//==========================================================================
//
//  ShootHitPlane
//
//==========================================================================

boolean ShootHitPlane(sec_plane_t * plane)
{
	float org_dist;
	float hit_dist;

	if (plane->flags & SPF_NOBLOCKSHOOT)
	{
		//  Doesn't block shooting
		return true;
	}
	org_dist = DotProduct(linestart, plane->normal) - plane->dist;
	if (org_dist < 0.0)
	{
		//  Don't shoot back side
		return true;
	}
	hit_dist = DotProduct(lineend, plane->normal) - plane->dist;
	if (hit_dist >= 0.0)
	{
		//  Didn't hit plane
		return true;
	}

	//  Hit plane
	if (plane->pic == skyflatnum)
	{
		// don't shoot the sky!
		return false;
	}

	//  If we are shooting floor or ceiling we are adjusting position
	// to spawn puff on floor or ceiling, not on wall
	lineend -= (lineend - linestart) * hit_dist / (hit_dist - org_dist);

	// position a bit closer
	lineend += 4.0 * plane->normal;

	// Spawn bullet puffs.
	SpawnPuff(lineend);

	// don't go any farther
	return false;
}

//==========================================================================
//
//  ShootCheckPlanes
//
//==========================================================================

boolean ShootCheckPlanes(sector_t * sec)
{
	sec_region_t *reg;
	sec_region_t *startreg;

	startreg = PointInRegion(sec, linestart);
	for (reg = startreg; reg; reg = reg->next)
	{
		if (!ShootHitPlane(reg->floor))
		{
			//  Hit floor
			return false;
		}
		if (!ShootHitPlane(reg->ceiling))
		{
			//  Hit ceiling
			return false;
		}
	}
	for (reg = startreg->prev; reg; reg = reg->prev)
	{
		if (!ShootHitPlane(reg->floor))
		{
			//  Hit floor
			return false;
		}
		if (!ShootHitPlane(reg->ceiling))
		{
			//  Hit ceiling
			return false;
		}
	}
	return true;
}

//==========================================================================
//
//  PTR_ShootTraverse
//
//==========================================================================

boolean PTR_ShootTraverse(intercept_t * in)
{
	TVec hit_point;
	line_t *li;
	Actor th;

	if (in->isaline)
	{
		sector_t *sec;

		li = in->line;
		hit_point = shoot_origin + (shoot_range * in->frac) * shoot_dir;
		if (li->flags & ML_TWOSIDED && PointOnPlaneSide(shoot_origin, li))
		{
			sec = li->backsector;
		}
		else
		{
			sec = li->frontsector;
		}

		lineend = hit_point;

		//  Check for shooting floor or ceiling
		if (!ShootCheckPlanes(sec))
		{
			return false;
		}

		linestart = lineend;

		//  Execute line special after checking for hitting floor or ceiling
		// when we know that it actally hits line
		if (li->special)
		{
			P_ActivateLine(li, shoot_thing, 0, SPAC_IMPACT);
		}

		if (li->flags & ML_TWOSIDED)
		{
			// crosses a two sided line
			opening_t *open;
			float opentop = 0.0;

			open = LineOpenings(li, hit_point);
			if (open)
			{
				opentop = open->top;
			}
			while (open)
			{
				if (open->bottom <= hit_point.z && open->top >= hit_point.z)
				{
					// shot continues
					return true;
				}
				open = open->next;
			}
			if (li->frontsector->ceiling.pic == skyflatnum &&
				li->backsector->ceiling.pic == skyflatnum &&
				hit_point.z > opentop)
			{
				// it's a sky hack wall
				return false;
			}
		}

		//  Hit line

		// position a bit closer
		hit_point -= 4.0 * shoot_dir;

		// Spawn bullet puffs.
		SpawnPuff(hit_point);

		// don't go any farther
		return false;
	}

	// shoot a thing
	th = Actor(in->Thing);

	if (th == shoot_thing)
		return true;	// can't shoot self

	if (!th.bShootable)
		return true;	// corpse or something

	// check angles to see if the thing can be aimed at
	hit_point = shoot_origin + (shoot_range * in->frac) * shoot_dir;

	if (th.Origin.z + th.Height < hit_point.z)
		return true;	// shot over the thing

	if (th.Origin.z > hit_point.z)
		return true;	// shot under the thing

	// hit thing
	// position a bit closer
	hit_point -= 10.0 * shoot_dir;

	SpawnPuff(hit_point);
	if (la_damage)
	{
		if (!th.bNoBlood && !th.bInvulnerable)
		{
			if (PuffType == AxePuff || PuffType == AxePuffGlow)
			{
				th.SpawnBloodSplatter2(hit_point);
			}
			if (P_Random() < 192)
			{
				MSG_Select(MSG_SV_DATAGRAM);
				MSG_WriteByte(svc_blood);
				MSG_WriteShort(ftoi(hit_point.x));
				MSG_WriteShort(ftoi(hit_point.y));
				MSG_WriteShort(ftoi(hit_point.z));
				MSG_WriteByte(la_damage > 255 ? 255 : la_damage);

				th.SpawnBloodSplatter(hit_point);
			}
		}
		if (PuffType == FlamePuff2)
		{
			// Cleric FlameStrike does fire damage
			th.Damage(LavaInflictor, shoot_thing, la_damage);
		}
		else
		{
			th.Damage(shoot_thing, shoot_thing, la_damage);
		}
	}

	// don't go any farther
	return false;
}

//==========================================================================
//
//  LineAttack
//
//  If damage == 0, it is just a test trace that will leave linetarget set.
//
//==========================================================================

int LineAttack(Actor t1, TVec dir, float distance, int damage)
{
	TVec dst;

	shoot_thing = t1;
	la_damage = damage;

	shoot_origin = t1.Origin;
	shoot_origin.z += t1.Height * 0.5 + 8.0 - t1.FloorClip;

	shoot_dir = dir;
	shoot_range = distance;

	dst = shoot_origin + shoot_range * shoot_dir;
	linestart = shoot_origin;
	if (!P_PathTraverse(t1.Origin.x, t1.Origin.y, dst.x, dst.y,
			PT_ADDLINES | PT_ADDTHINGS, 'PTR_ShootTraverse'))
	{
		return false;
	}
	lineend = dst;
	return ShootCheckPlanes(PointInSubsector(dst.x, dst.y)->sector);
}

//**************************************************************************
//
//  RADIUS ATTACK
//
//**************************************************************************

Actor bombsource;
Actor bombspot;
int bombdamage;
float bombdistance;
boolean DamageSource;

//==========================================================================
//
//  PIT_RadiusAttack
//
//  "bombsource" is the creature that caused the explosion at "bombspot".
//
//==========================================================================

boolean PIT_RadiusAttack(MapObject Other)
{
	float dist;
	int damage;

	if (!Actor(Other).bShootable)
	{
		return true;
	}
//  if (Other.Flags2 & MF2_BOSS)
//  {
//		// Bosses take no damage from PIT_RadiusAttack
//      return true;
//  }
	if (!DamageSource && Other == bombsource)
	{
		// don't damage the source of the explosion
		return true;
	}
#if 0
	if (abs(ftoi(Other.Origin.z - bombspot.Origin.z)) > 2 * bombdistance)
	{
		// too high/low
		return true;
	}
#endif
	dist = Length(MobjCenter(Other) - MobjCenter(bombspot)) - Other.Radius;
	if (dist < 0.0)
	{
		dist = 0.0;
	}
	if (dist >= bombdistance)
	{
		// Out of range
		return true;
	}
	if (Actor(Other).CanSee(bombspot))
	{
		// OK to damage, target is in direct path
		damage = (bombdamage * ftoi(bombdistance - dist) /
			ftoi(bombdistance)) + 1;
		if (Other.bIsPlayer)
		{
			damage >>= 2;
		}
		Actor(Other).Damage(bombspot, bombsource, damage);
	}
	return true;
}

//==========================================================================
//
//  P_RadiusAttack
//
//  Source is the creature that caused the explosion at spot.
//
//==========================================================================

void P_RadiusAttack(Actor spot, Actor source, int damage,
	float distance, boolean damageSource)
{
	int x, y, xl, xh, yl, yh;

	yh = MapBlock(spot.Origin.y + distance - level->bmaporgy);
	yl = MapBlock(spot.Origin.y - distance - level->bmaporgy);
	xh = MapBlock(spot.Origin.x + distance - level->bmaporgx);
	xl = MapBlock(spot.Origin.x - distance - level->bmaporgx);
	bombspot = spot;
	bombsource = source;
	bombdamage = damage;
	bombdistance = distance;
	DamageSource = damageSource;
	for (y = yl; y <= yh; y++)
	{
		for (x = xl; x <= xh; x++)
		{
			P_BlockThingsIterator(x, y, 'PIT_RadiusAttack');
		}
	}
}

//**************************************************************************
//
//
//
//**************************************************************************

Actor tsthing;

//==========================================================================
//
//  PIT_ThrustStompThing
//
//==========================================================================

boolean PIT_ThrustStompThing(MapObject Other)
{
	float blockdist;

	if (!Actor(Other).bShootable)
		return true;

	blockdist = Other.Radius + tsthing.Radius;
	if (fabs(Other.Origin.x - tsthing.Origin.x) >= blockdist ||
		fabs(Other.Origin.y - tsthing.Origin.y) >= blockdist ||
		(Other.Origin.z > tsthing.Origin.z + tsthing.Height))
	{
		return true;	// didn't hit it
	}

	if (Other == tsthing)
		return true;	// don't clip against self

	Actor(Other).Damage(tsthing, tsthing, 10001);
	tsthing.Args[1] = 1;	// Mark thrust thing as bloody

	return true;
}

//==========================================================================
//
//  PIT_ThrustSpike
//
//==========================================================================

void PIT_ThrustSpike(Actor actor)
{
	int xl, xh, yl, yh, bx, by;
	float x0, x2, y0, y2;

	tsthing = actor;

	x0 = actor.Origin.x - actor.Radius;
	x2 = actor.Origin.x + actor.Radius;
	y0 = actor.Origin.y - actor.Radius;
	y2 = actor.Origin.y + actor.Radius;

	xl = MapBlock(x0 - level->bmaporgx - MAXRADIUS);
	xh = MapBlock(x2 - level->bmaporgx + MAXRADIUS);
	yl = MapBlock(y0 - level->bmaporgy - MAXRADIUS);
	yh = MapBlock(y2 - level->bmaporgy + MAXRADIUS);

	// stomp on any things contacted
	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			P_BlockThingsIterator(bx, by, 'PIT_ThrustStompThing');
}

//**************************************************************************
//
//  $Log$
//  Revision 1.28  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.27  2002/03/28 18:15:35  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.26  2002/03/20 19:07:47  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.25  2002/03/16 17:47:46  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.24  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.23  2002/03/02 18:00:15  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.22  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.21  2002/02/22 18:00:22  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.18  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.17  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.16  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.15  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.14  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.13  2002/01/15 08:10:57  dj_jl
//  Added P_CheckRelPosition
//
//  Revision 1.12  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.10  2001/12/01 18:14:09  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.9  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.8  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.7  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.6  2001/09/27 17:12:14  dj_jl
//  Changed LavaInflictor to pointer
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
