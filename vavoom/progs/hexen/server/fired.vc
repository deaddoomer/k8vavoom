//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//============================================================================
// Fire Demon AI
//
// special1         index into floatbob
// special2         whether strafing or not
//============================================================================

// MACROS ------------------------------------------------------------------

#define FIREDEMON_ATTACK_RANGE	(64.0 * 8.0)

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  A_FiredSpawnRock
//
//============================================================================

void A_FiredSpawnRock(mobj_t * actor)
{
	mobj_t *mo;
	float x, y, z;
	classid rtype;

	switch (P_Random() % 5)
	{
	case 0:
		rtype = MT_FIREDEMON_FX1;
		break;
	case 1:
		rtype = MT_FIREDEMON_FX2;
		break;
	case 2:
		rtype = MT_FIREDEMON_FX3;
		break;
	case 3:
		rtype = MT_FIREDEMON_FX4;
		break;
	case 4:
		rtype = MT_FIREDEMON_FX5;
		break;
	}

	x = actor->origin.x + (Random() - 0.5) * 16.0;
	y = actor->origin.y + (Random() - 0.5) * 16.0;
	z = actor->origin.z + Random() * 8.0;
	mo = P_SpawnMobj(x, y, z, rtype);
	if (mo)
	{
		mo->target = actor;
		mo->velocity.x = (Random() - 0.5) * 4.0 * 35.0;
		mo->velocity.y = (Random() - 0.5) * 4.0 * 35.0;
		mo->velocity.z = Random() * 4.0 * 35.0;
		mo->special1 = 2;	// Number bounces
	}

	// Initialize fire demon
	actor->special2 = 0;
	actor->flags &= ~MF_JUSTATTACKED;
}

//============================================================================
//
//  Actor::A_FiredRocks
//
//============================================================================

void Actor::A_FiredRocks(void)
{
	A_FiredSpawnRock(this);
	A_FiredSpawnRock(this);
	A_FiredSpawnRock(this);
	A_FiredSpawnRock(this);
	A_FiredSpawnRock(this);
}

//============================================================================
//
//  Actor::A_FiredChase
//
//============================================================================

void Actor::A_FiredChase(void)
{
	int weaveindex = special1;
	float ang;
	float dist;

	if (reactiontime)
		reactiontime--;
	if (threshold)
		threshold--;

	// Float up and down
	origin.z += FloatBobOffsets[weaveindex];
	special1 = (weaveindex + 2) & 63;

	// Insure it stays above certain height
	if (origin.z < floorz + 64.0)
	{
		origin.z += 2.0;
	}

	if (!target || !(target->flags & MF_SHOOTABLE))
	{
		// Invalid target
		P_LookForPlayers(this, true);
		return;
	}

	// Strafe
	if (special2 > 0)
	{
		special2--;
	}
	else
	{
		special2 = 0;
		velocity.x = 0.0;
		velocity.y = 0.0;
		dist = MobjDist(this, target);
		if (dist < FIREDEMON_ATTACK_RANGE)
		{
			if (P_Random() < 30)
			{
				ang = atan2(target->origin.y - origin.y,
					target->origin.x - origin.x);
				if (P_Random() < 128)
					ang = AngleMod360(ang + 90.0);
				else
					ang = AngleMod360(ang - 90.0);
				velocity.x = 8.0 * cos(ang) * 35.0;
				velocity.y = 8.0 * sin(ang) * 35.0;
				special2 = 3;	// strafe time
			}
		}
	}

	FaceMovementDirection(this);

	// Normal movement
	if (!special2)
	{
		if (--movecount < 0 || !P_Move(this))
		{
			P_NewChaseDir(this);
		}
	}

	// Do missile attack
	if (!(flags & MF_JUSTATTACKED))
	{
		if (CheckMissileRange(this) && (P_Random() < 20))
		{
			SetMobjState(this, missilestate);
			flags |= MF_JUSTATTACKED;
			return;
		}
	}
	else
	{
		flags &= ~MF_JUSTATTACKED;
	}

	// make active sound
	if (sound_active && P_Random() < 3)
	{
		StartSound(this, sound_active, CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_FiredAttack
//
//============================================================================

void Actor::A_FiredAttack(void)
{
	mobj_t *mo;

	mo = SpawnMissile(this, target, MT_FIREDEMON_FX6);
	if (mo)
		StartSoundName(this, 'FireDemonAttack', CHAN_WEAPON);
}

//============================================================================
//
//  Actor::A_FiredSplotch
//
//============================================================================

void Actor::A_FiredSplotch(void)
{
	mobj_t *mo;

	mo = P_SpawnMobj(origin.x, origin.y, origin.z, MT_FIREDEMON_SPLOTCH1);
	if (mo)
	{
		mo->velocity.x = (Random() - 0.5) * 8.0 * 35.0;
		mo->velocity.y = (Random() - 0.5) * 8.0 * 35.0;
		mo->velocity.z = (3.0 + Random() * 4.0) * 35.0;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z, MT_FIREDEMON_SPLOTCH2);
	if (mo)
	{
		mo->velocity.x = (Random() - 0.5) * 8.0 * 35.0;
		mo->velocity.y = (Random() - 0.5) * 8.0 * 35.0;
		mo->velocity.z = (3.0 + Random() * 4.0) * 35.0;
	}
}

//============================================================================
//
//  Actor::A_SmBounce
//
//============================================================================

void Actor::A_SmBounce(void)
{
	// give some more momentum (x,y,&z)
	origin.z = floorz + 1.0;
	velocity.z = (2.0 + Random() * 4.0) * 35.0;
	velocity.x = Random() * 3.0 * 35.0;
	velocity.y = Random() * 3.0 * 35.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
