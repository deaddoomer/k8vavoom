//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	FireDemonMissile
//
//**************************************************************************

class FireDemonMissile:Projectile
{

__states__
{
	S_FIRED_FX6_1('FDMB', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_FX6_1) { }
	S_FIRED_FX6_2('FDMB', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_FX6_3) { }
	S_FIRED_FX6_3('FDMB', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_FX6_4) { }
	S_FIRED_FX6_4('FDMB', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_FX6_5) { }
	S_FIRED_FX6_5('FDMB', 4 | FF_FULLBRIGHT, 5.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 6.0;
	Mass = 15.0;
	Speed = 350.0;
	MissileDamage = 1;
	bFloorClip = true;
	bFireDamage = true;
	IdleState = S_FIRED_FX6_1;
	DeathState = S_FIRED_FX6_2;
	DeathSound = 'FireDemonMissileHit';
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	FireDemonRock1
//
//**************************************************************************

class FireDemonRock1:Fragment
{

//============================================================================
//
//  A_SmBounce
//
//============================================================================

void A_SmBounce(void)
{
	// give some more momentum (x,y,&z)
	Origin.z = FloorZ + 1.0;
	Velocity.z = (2.0 + Random() * 4.0) * 35.0;
	Velocity.x = Random() * 3.0 * 35.0;
	Velocity.y = Random() * 3.0 * 35.0;
}

__states__
{
	S_FIRED_RDROP1('FDMN', 18, 4.0 / 35.0, S_FIRED_RDROP1) { }
	S_FIRED_RDEAD1_1('FDMN', 18, 5.0 / 35.0, S_FIRED_RDEAD1_2) { A_SmBounce(); }
	S_FIRED_RDEAD1_2('FDMN', 18, 200.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	GibsHealth = -500;
	Radius = 3.0;
	Height = 5.0;
	Mass = 16.0;
	bNoGravity = false;
	IdleState = S_FIRED_RDROP1;
	DeathState = S_FIRED_RDEAD1_1;
	GibsDeathState = S_FIRED_RDEAD1_2;
}

}

//**************************************************************************
//
//	FireDemonRock2
//
//**************************************************************************

class FireDemonRock2:FireDemonRock1
{

__states__
{
	S_FIRED_RDROP2('FDMN', 19, 4.0 / 35.0, S_FIRED_RDROP2) { }
	S_FIRED_RDEAD2_1('FDMN', 19, 5.0 / 35.0, S_FIRED_RDEAD2_2) { A_SmBounce(); }
	S_FIRED_RDEAD2_2('FDMN', 19, 200.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_FIRED_RDROP2;
	DeathState = S_FIRED_RDEAD2_1;
	GibsDeathState = S_FIRED_RDEAD2_2;
}

}

//**************************************************************************
//
//	FireDemonRock3
//
//**************************************************************************

class FireDemonRock3:FireDemonRock1
{

__states__
{
	S_FIRED_RDROP3('FDMN', 20, 4.0 / 35.0, S_FIRED_RDROP3) { }
	S_FIRED_RDEAD3_1('FDMN', 20, 5.0 / 35.0, S_FIRED_RDEAD3_2) { A_SmBounce(); }
	S_FIRED_RDEAD3_2('FDMN', 20, 200.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_FIRED_RDROP3;
	DeathState = S_FIRED_RDEAD3_1;
	GibsDeathState = S_FIRED_RDEAD3_2;
}

}

//**************************************************************************
//
//	FireDemonRock4
//
//**************************************************************************

class FireDemonRock4:FireDemonRock1
{

__states__
{
	S_FIRED_RDROP4('FDMN', 21, 4.0 / 35.0, S_FIRED_RDROP4) { }
	S_FIRED_RDEAD4_1('FDMN', 21, 5.0 / 35.0, S_FIRED_RDEAD4_2) { A_SmBounce(); }
	S_FIRED_RDEAD4_2('FDMN', 21, 200.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_FIRED_RDROP4;
	DeathState = S_FIRED_RDEAD4_1;
	GibsDeathState = S_FIRED_RDEAD4_2;
}

}

//**************************************************************************
//
//	FireDemonRock5
//
//**************************************************************************

class FireDemonRock5:FireDemonRock1
{

__states__
{
	S_FIRED_RDROP5('FDMN', 22, 4.0 / 35.0, S_FIRED_RDROP5) { }
	S_FIRED_RDEAD5_1('FDMN', 22, 5.0 / 35.0, S_FIRED_RDEAD5_2) { A_SmBounce(); }
	S_FIRED_RDEAD5_2('FDMN', 22, 200.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_FIRED_RDROP5;
	DeathState = S_FIRED_RDEAD5_1;
	GibsDeathState = S_FIRED_RDEAD5_2;
}

}

//**************************************************************************
//
//	FireDemonSplotch1
//
//**************************************************************************

class FireDemonSplotch1:Carcas
{

__states__
{
	S_FIRED_CORPSE1('FDMN', 15, 3.0 / 35.0, S_FIRED_CORPSE2) { }
	S_FIRED_CORPSE2('FDMN', 15, 6.0 / 35.0, S_FIRED_CORPSE3) { A_QueueCorpse(); }
	S_FIRED_CORPSE3('FDMN', 24, -1.0, S_NULL) { }
}

defaultproperties
{
	Radius = 3.0;
	Height = 16.0;
	IdleState = S_FIRED_CORPSE1;
}

}

//**************************************************************************
//
//	FireDemonSplotch2
//
//**************************************************************************

class FireDemonSplotch2:Carcas
{

__states__
{
	S_FIRED_CORPSE4('FDMN', 16, 3.0 / 35.0, S_FIRED_CORPSE5) { }
	S_FIRED_CORPSE5('FDMN', 16, 6.0 / 35.0, S_FIRED_CORPSE6) { A_QueueCorpse(); }
	S_FIRED_CORPSE6('FDMN', 25, -1.0, S_NULL) { }
}

defaultproperties
{
	Radius = 3.0;
	Height = 16.0;
	IdleState = S_FIRED_CORPSE4;
}

}

//**************************************************************************
//
//	FireDemon
//
//**************************************************************************

class FireDemon:Pawn
	__mobjinfo__(10060)
{

//
// Fire Demon AI
//

#define FIREDEMON_ATTACK_RANGE	(64.0 * 8.0)

int WeaveIndex;		//	Index into floatbob
int StrafeCount;	//	Whether strafing or not

//============================================================================
//
//  A_FiredSpawnRock
//
//============================================================================

void A_FiredSpawnRock(void)
{
	Actor mo;
	TVec rockOrg;
	classid rtype;

	switch (P_Random() % 5)
	{
	case 0:
		rtype = FireDemonRock1;
		break;
	case 1:
		rtype = FireDemonRock2;
		break;
	case 2:
		rtype = FireDemonRock3;
		break;
	case 3:
		rtype = FireDemonRock4;
		break;
	case 4:
		rtype = FireDemonRock5;
		break;
	}

	rockOrg.x = Origin.x + (Random() - 0.5) * 16.0;
	rockOrg.y = Origin.y + (Random() - 0.5) * 16.0;
	rockOrg.z = Origin.z + Random() * 8.0;
	mo = Spawn(rtype, rockOrg);
	if (mo)
	{
		mo.Instigator = self;
		mo.Velocity.x = (Random() - 0.5) * 4.0 * 35.0;
		mo.Velocity.y = (Random() - 0.5) * 4.0 * 35.0;
		mo.Velocity.z = Random() * 4.0 * 35.0;
		mo._Special1 = 2;	// Number bounces
	}

	// Initialize fire demon
	StrafeCount = 0;
	bJustAttacked = false;
}

//============================================================================
//
//  A_FiredRocks
//
//============================================================================

void A_FiredRocks(void)
{
	A_FiredSpawnRock();
	A_FiredSpawnRock();
	A_FiredSpawnRock();
	A_FiredSpawnRock();
	A_FiredSpawnRock();
}

//============================================================================
//
//  A_FiredChase
//
//============================================================================

void A_FiredChase(void)
{
	float ang;
	float dist;

	if (ReactionCount)
		ReactionCount--;
	if (Threshold)
		Threshold--;

	// Float up and down
	Origin.z += FloatBobOffsets[WeaveIndex];
	WeaveIndex = (WeaveIndex + 2) & 63;

	// Insure it stays above certain height
	if (Origin.z < FloorZ + 64.0)
	{
		Origin.z += 2.0;
	}

	if (!Enemy || !Enemy.bShootable)
	{
		// Invalid enemy
		LookForPlayers(true);
		return;
	}

	// Strafe
	if (StrafeCount > 0)
	{
		StrafeCount--;
	}
	else
	{
		StrafeCount = 0;
		Velocity.x = 0.0;
		Velocity.y = 0.0;
		dist = MobjDist(self, Enemy);
		if (dist < FIREDEMON_ATTACK_RANGE)
		{
			if (P_Random() < 30)
			{
				ang = atan2(Enemy.Origin.y - Origin.y,
					Enemy.Origin.x - Origin.x);
				if (P_Random() < 128)
					ang = AngleMod360(ang + 90.0);
				else
					ang = AngleMod360(ang - 90.0);
				Velocity.x = 8.0 * cos(ang) * 35.0;
				Velocity.y = 8.0 * sin(ang) * 35.0;
				StrafeCount = 3;	// strafe time
			}
		}
	}

	FaceMovementDirection();

	// Normal movement
	if (!StrafeCount)
	{
		if (--MoveCount < 0 || !StepMove())
		{
			NewChaseDir();
		}
	}

	// Do missile attack
	if (!bJustAttacked)
	{
		if (CheckMissileRange() && (P_Random() < 20))
		{
			SetState(MissileState);
			bJustAttacked = true;
			return;
		}
	}
	else
	{
		bJustAttacked = false;
	}

	// make active sound
	if (ActiveSound && P_Random() < 3)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//============================================================================
//
//  A_FiredAttack
//
//============================================================================

void A_FiredAttack(void)
{
	Actor mo;

	mo = SpawnMissile(Enemy, FireDemonMissile);
	if (mo)
	{
		PlaySound('FireDemonAttack', CHAN_WEAPON);
	}
}

//============================================================================
//
//  A_FiredSplotch
//
//============================================================================

void A_FiredSplotch(void)
{
	Actor A;

	A = Spawn(FireDemonSplotch1, Origin);
	if (A)
	{
		A.Velocity.x = (Random() - 0.5) * 8.0 * 35.0;
		A.Velocity.y = (Random() - 0.5) * 8.0 * 35.0;
		A.Velocity.z = (3.0 + Random() * 4.0) * 35.0;
	}
	A = Spawn(FireDemonSplotch2, Origin);
	if (A)
	{
		A.Velocity.x = (Random() - 0.5) * 8.0 * 35.0;
		A.Velocity.y = (Random() - 0.5) * 8.0 * 35.0;
		A.Velocity.z = (3.0 + Random() * 4.0) * 35.0;
	}
}

__states__
{
	S_FIRED_SPAWN1('FDMN', 23 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_LOOK1) { }
	S_FIRED_LOOK1('FDMN', 4 | FF_FULLBRIGHT, 10.0 / 35.0, S_FIRED_LOOK2) { A_Look(); }
	S_FIRED_LOOK2('FDMN', 5 | FF_FULLBRIGHT, 10.0 / 35.0, S_FIRED_LOOK3) { A_Look(); }
	S_FIRED_LOOK3('FDMN', 6 | FF_FULLBRIGHT, 10.0 / 35.0, S_FIRED_LOOK1) { A_Look(); }
	S_FIRED_LOOK4('FDMN', 4 | FF_FULLBRIGHT, 8.0 / 35.0, S_FIRED_LOOK5) { }
	S_FIRED_LOOK5('FDMN', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_FIRED_LOOK6) { }
	S_FIRED_LOOK6('FDMN', 6 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_LOOK7) { }
	S_FIRED_LOOK7('FDMN', 5 | FF_FULLBRIGHT, 8.0 / 35.0, S_FIRED_LOOK8) { }
	S_FIRED_LOOK8('FDMN', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_FIRED_LOOK9) { }
	S_FIRED_LOOK9('FDMN', 5 | FF_FULLBRIGHT, 7.0 / 35.0, S_FIRED_LOOK0) { A_FiredRocks(); }
	S_FIRED_LOOK0('FDMN', 7 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_LOOKA) { }
	S_FIRED_LOOKA('FDMN', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_LOOKB) { }
	S_FIRED_LOOKB('FDMN', 9 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_WALK1) { A_UnSetInvulnerable(); }
	S_FIRED_WALK1('FDMN', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_WALK2) { A_FiredChase(); }
	S_FIRED_WALK2('FDMN', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_WALK3) { A_FiredChase(); }
	S_FIRED_WALK3('FDMN', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_WALK1) { A_FiredChase(); }
	S_FIRED_PAIN1('FDMN', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_FIRED_WALK1) { A_Pain(); }
	S_FIRED_ATTACK1('FDMN', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_FIRED_ATTACK2) { A_FaceTarget(); }
	S_FIRED_ATTACK2('FDMN', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_ATTACK3) { A_FiredAttack(); }
	S_FIRED_ATTACK3('FDMN', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_ATTACK4) { A_FiredAttack(); }
	S_FIRED_ATTACK4('FDMN', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_FIRED_WALK1) { A_FiredAttack(); }
	S_FIRED_DEATH1('FDMN', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_FIRED_DEATH2) { A_FaceTarget(); }
	S_FIRED_DEATH2('FDMN', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_FIRED_DEATH3) { A_Scream(); }
	S_FIRED_DEATH3('FDMN', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_FIRED_DEATH4) { A_NoBlocking(); }
	S_FIRED_DEATH4('FDMN', 11 | FF_FULLBRIGHT, 200.0 / 35.0, S_NULL) { }
	S_FIRED_XDEATH1('FDMN', 12, 5.0 / 35.0, S_FIRED_XDEATH2) { A_FaceTarget(); }
	S_FIRED_XDEATH2('FDMN', 13, 5.0 / 35.0, S_FIRED_XDEATH3) { A_NoBlocking(); }
	S_FIRED_XDEATH3('FDMN', 14, 5.0 / 35.0, S_NULL) { A_FiredSplotch(); }
	S_FIRED_ICE1('FDMN', 17, 5.0 / 35.0, S_FIRED_ICE2) { A_FreezeDeath(); }
	S_FIRED_ICE2('FDMN', 17, 1.0 / 35.0, S_FIRED_ICE2) { A_FreezeDeathChunks(); }
}

defaultproperties
{
	Health = 80;
	GibsHealth = -40;
	Radius = 20.0;
	Height = 68.0;
	Mass = 75.0;
	StepSpeed = 13.0;
	PainChance = 1;
	MissileDamage = 1;
	bNoGravity = true;
	bDropOff = true;
	bFloat = true;
	bInvulnerable = true;
	IdleState = S_FIRED_SPAWN1;
	SeeState = S_FIRED_LOOK4;
	MissileState = S_FIRED_ATTACK1;
	PainState = S_FIRED_PAIN1;
	CrashState = S_FIRED_XDEATH1;
	DeathState = S_FIRED_DEATH1;
	GibsDeathState = S_FIRED_XDEATH1;
	IceDeathState = S_FIRED_ICE1;
	SightSound = 'FireDemonSpawn';
	ActiveSound = 'FireDemonActive';
	PainSound = 'FireDemonPain';
	DeathSound = 'FireDemonDeath';
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.25  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.24  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.23  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.22  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.21  2002/03/16 17:47:46  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.20  2002/03/02 17:58:36  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.19  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.18  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.17  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.16  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.15  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.14  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.13  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.12  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.11  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
