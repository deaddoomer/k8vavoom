//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define GRAVITY 			1225.0
#define MAXMOVE 			1050.0
#define STOPSPEED			2.1875

#define FRICTION_NORMAL		3.28125
#define FRICTION_LOW		0.95703125
#define FRICTION_FLY		2.87109375
#define FRICTION_WATER		3.0

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

boolean P_ExplodeMissile(mobj_t * mo);

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  ClipVelocity
//
//  Slide off of the impacting object
//
//==========================================================================

TVec ClipVelocity(TVec in, TVec normal, float overbounce)
{
	return in - normal * (DotProduct(in, normal) * overbounce);
}

//**************************************************************************
//
//  SLIDE MOVE
//
//  Allows the player to slide along any angled walls.
//
//**************************************************************************

float bestslidefrac;
float secondslidefrac;

line_t *bestslideline;
line_t *secondslideline;

mobj_t *slidemo;
TVec slideorg;
TVec slidedir;

//==========================================================================
//
//  PTR_SlideTraverse
//
//==========================================================================

boolean PTR_SlideTraverse(intercept_t * in)
{
	line_t *li;
	TVec hit_point;
	opening_t *open;

	if (!in->isaline)
		Error("PTR_SlideTraverse: not a line?");

	li = in->line;

	if (li->flags & ML_TWOSIDED)
	{
		// set openrange, opentop, openbottom
		hit_point = slideorg + in->frac * slidedir;
		open = LineOpenings(li, hit_point);
		open =
			FindOpening(open, slidemo->origin.z,
			slidemo->origin.z + slidemo->height);

		if (open && (open->range >= slidemo->height) &&	//  fits
			(open->top - slidemo->origin.z >= slidemo->height) &&	// mobj is not too high
			(open->bottom - slidemo->origin.z <= 24.0))	// not too big a step up
		{
			// this line doesn't block movement
			return true;
		}
	}
	else
	{
		if (PointOnPlaneSide(slidemo->origin, li))
		{
			// don't hit the back side
			return true;
		}
	}

	// the line does block movement,
	// see if it is closer than best so far
	if (in->frac < bestslidefrac)
	{
		secondslidefrac = bestslidefrac;
		secondslideline = bestslideline;
		bestslidefrac = in->frac;
		bestslideline = li;
	}

	return false;	// stop
}

//==========================================================================
//
//  SlidePathTraverse
//
//==========================================================================

void SlidePathTraverse(float x, float y)
{
	slideorg = vector(x, y, slidemo->origin.z);
	slidedir = slidemo->velocity * frametime;
	P_PathTraverse(x, y, x + slidedir.x, y + slidedir.y,
		PT_ADDLINES, PTR_SlideTraverse);
}

//==========================================================================
//
//  P_SlideMove
//
//  The momx / momy move is bad, so try to slide along a wall.
//  Find the first line hit, move flush to it, and slide along it.
//  This is a kludgy mess.
//
//==========================================================================

void P_SlideMove(mobj_t * mo)
{
	float leadx;
	float leady;
	float trailx;
	float traily;
	float newx;
	float newy;
	int hitcount;

	slidemo = mo;
	hitcount = 0;

	do
	{
		if (++hitcount == 3)
		{
			// don't loop forever
			if (!P_TryMove(mo, mo->origin.x,
					mo->origin.y + mo->velocity.y * frametime))
				P_TryMove(mo, mo->origin.x + mo->velocity.x * frametime,
					mo->origin.y);
			return;
		}

		// trace along the three leading corners
		if (mo->velocity.x > 0.0)
		{
			leadx = mo->origin.x + mo->radius;
			trailx = mo->origin.x - mo->radius;
		}
		else
		{
			leadx = mo->origin.x - mo->radius;
			trailx = mo->origin.x + mo->radius;
		}

		if (mo->velocity.y > 0.0)
		{
			leady = mo->origin.y + mo->radius;
			traily = mo->origin.y - mo->radius;
		}
		else
		{
			leady = mo->origin.y - mo->radius;
			traily = mo->origin.y + mo->radius;
		}

		bestslidefrac = 1.00001;

		SlidePathTraverse(leadx, leady);
		SlidePathTraverse(trailx, leady);
		SlidePathTraverse(leadx, traily);

		// move up to the wall
		if (bestslidefrac == 1.00001)
		{
			// the move most have hit the middle, so stairstep
			if (!P_TryMove(mo, mo->origin.x,
					mo->origin.y + mo->velocity.y * frametime))
				P_TryMove(mo, mo->origin.x + mo->velocity.x * frametime,
					mo->origin.y);
			return;
		}

		// fudge a bit to make sure it doesn't hit
		bestslidefrac -= 0.03125;
		if (bestslidefrac > 0.0)
		{
			newx = mo->velocity.x * frametime * bestslidefrac;
			newy = mo->velocity.y * frametime * bestslidefrac;

			if (!P_TryMove(mo, mo->origin.x + newx, mo->origin.y + newy))
			{
				if (!P_TryMove(mo, mo->origin.x,
						mo->origin.y + mo->velocity.y * frametime))
					P_TryMove(mo, mo->origin.x + mo->velocity.x * frametime,
						mo->origin.y);
				return;
			}
		}

		// Now continue along the wall.
		// First calculate remainder.
		bestslidefrac = 1.0 - (bestslidefrac + 0.03125);

		if (bestslidefrac > 1.0)
			bestslidefrac = 1.0;

		if (bestslidefrac <= 0.0)
			return;

		// clip the moves
		mo->velocity =
			ClipVelocity(mo->velocity * bestslidefrac, bestslideline->normal,
			1.0);

	}
	while (!P_TryMove(mo, mo->origin.x + mo->velocity.x * frametime,
			mo->origin.y + mo->velocity.y * frametime));
}

//**************************************************************************
//
//  BOUNCING
//
//  Bounce missile against walls
//
//**************************************************************************

//============================================================================
//
//  PTR_BounceTraverse
//
//============================================================================

boolean PTR_BounceTraverse(intercept_t * in)
{
	line_t *li;
	TVec hit_point;
	opening_t *open;

	if (!in->isaline)
		Error("PTR_BounceTraverse: not a line?");

	li = in->line;
	if (li->flags & ML_TWOSIDED)
	{
		hit_point = slideorg + in->frac * slidedir;
		open = LineOpenings(li, hit_point);	// set openrange, opentop, openbottom
		open =
			FindOpening(open, slidemo->origin.z,
			slidemo->origin.z + slidemo->height);
		if (open && open->range >= slidemo->height &&	// fits
			open->top - slidemo->origin.z >= slidemo->height)	// mobj is not too high
		{
			return true;	// this line doesn't block movement
		}
	}
	else
	{
		if (PointOnPlaneSide(slidemo->origin, li))
		{
			return true;	// don't hit the back side
		}
	}

	// the line does block movement, see if it is closer than best so far
	if (in->frac < bestslidefrac)
	{
		secondslidefrac = bestslidefrac;
		secondslideline = bestslideline;
		bestslidefrac = in->frac;
		bestslideline = li;
	}
	return false;	// stop
}

//============================================================================
//
//  P_BounceWall
//
//============================================================================

void P_BounceWall(mobj_t * mo)
{
	float leadx, leady;

	slidemo = mo;

	//
	// trace along the three leading corners
	//
	if (mo->velocity.x > 0.0)
	{
		leadx = mo->origin.x + mo->radius;
	}
	else
	{
		leadx = mo->origin.x - mo->radius;
	}
	if (mo->velocity.y > 0.0)
	{
		leady = mo->origin.y + mo->radius;
	}
	else
	{
		leady = mo->origin.y - mo->radius;
	}
	bestslidefrac = 1.00001;
	slideorg = vector(leadx, leady, slidemo->origin.z);
	slidedir = mo->velocity * frametime;
	P_PathTraverse(leadx, leady, leadx + slidedir.x, leady + slidedir.y,
		PT_ADDLINES, PTR_BounceTraverse);
	mo->velocity =
		ClipVelocity(mo->velocity * 0.75, bestslideline->normal, 2.0);
}

//**************************************************************************
//
//  OBJECT MOVEMENT
//
//**************************************************************************

//==========================================================================
//
//  Entity::CheckWater
//
//==========================================================================

boolean Entity::CheckWater(void)
{
	TVec point;
	int cont;

	point = origin;
	point.z += 1.0;

	waterlevel = 0;
	watertype = CONTENTS_EMPTY;
	cont = PointContents(subsector->sector, point);
	if (cont >= CONTENTS_WATER)
	{
		watertype = cont;
		waterlevel = 1;
		point.z = origin.z + height * 0.5;
		cont = PointContents(subsector->sector, point);
		if (cont >= CONTENTS_WATER)
		{
			waterlevel = 2;
			if (player)
			{
				point = player->vieworg;
				cont = PointContents(subsector->sector, point);
				if (cont >= CONTENTS_WATER)
					waterlevel = 3;
			}
		}
	}
	return waterlevel > 1;
}

//==========================================================================
//
//  Entity::UpdateVelocity
//
//==========================================================================

void Entity::UpdateVelocity(void)
{
	//  Don't add gravity if standing on slope with normal.z > 0.7 (aprox
	// 45 degrees)
	if (origin.z > floorz || floor->normal.z < 0.7)
	{
		if (waterlevel < 2)
		{
			if (flags2 & MF2_LOGRAV)
			{
				velocity.z -= GRAVITY / 8.0 * frametime;
			}
			else if (!(flags & MF_NOGRAVITY))
			{
				velocity.z -= GRAVITY * frametime;
			}
		}
		else if (!player)
		{
			velocity.z = -60.0;
		}
	}

	// Friction

	if (flags & (MF_SKULLFLY | MF_MISSILE))
	{
		return;
	}
	if (origin.z > floorz && waterlevel < 2 &&
		!(flags2 & MF2_FLY) && !(flags2 & MF2_ONMOBJ))
	{
		// No friction when falling
		if (type != MT_BLASTEFFECT)
			return;
	}

	if (origin.z <= floorz)
	{
		//  Clip velocity
		float dot = DotProduct(velocity, floor->normal);

		if (dot < 0.0)
		{
			velocity -= dot * floor->normal;
		}
	}

	if (flags & MF_CORPSE)
	{
		// Don't stop sliding if halfway off a step with some momentum
		if (velocity.x > 0.25 * 35.0 || velocity.x < -0.25 * 35.0 ||
			velocity.y > 0.25 * 35.0 || velocity.y < -0.25 * 35.0)
		{
			if (floorz != subsector->sector->floorheight)
			{
				return;
			}
		}
	}
	if (velocity.x > -STOPSPEED && velocity.x < STOPSPEED &&
		velocity.y > -STOPSPEED && velocity.y < STOPSPEED &&
		velocity.z > -STOPSPEED && velocity.z < STOPSPEED &&
		(!player || (!player->forwardmove && !player->sidemove)))
	{
		// If in a walking frame, stop moving
		if (player)
		{
			int sn;

			sn = player->mo->statenum - PStateRun[player->pclass];
			if (sn >= 0 && sn < 4)
			{
				SetMobjState(player->mo, PStateNormal[player->pclass]);
			}
		}
		velocity.x = 0.0;
		velocity.y = 0.0;
	}
	else
	{
		if (waterlevel >= 2)
		{
			velocity -= velocity * FRICTION_WATER * frametime;
		}
		else if (flags2 & MF2_FLY && !(origin.z <= floorz)
			&& !(flags2 & MF2_ONMOBJ))
		{
			velocity -= velocity * FRICTION_FLY * frametime;
		}
		else if (P_GetThingFloorType(this) == FLOOR_ICE)
		{
			velocity -= velocity * FRICTION_LOW * frametime;
		}
		else
		{
			velocity -= velocity * FRICTION_NORMAL * frametime;
		}
	}
}

//==========================================================================
//
//	Entity::XYMovement
//
//==========================================================================

boolean Entity::XYMovement(void)
{
	float ptryx, ptryy;
	float xmove, ymove;
	int special;
	float angle;

	if (!velocity.x && !velocity.y)
	{
		if (flags & MF_SKULLFLY)
		{
			// A flying mobj slammed into something
			flags &= ~MF_SKULLFLY;
			velocity = vector(0.0, 0.0, 0.0);
			if (!SetMobjState(this, seestate))
			{
				return false;
			}
		}
		return true;
	}
	special = subsector->sector->special;
	if (flags2 & MF2_WINDTHRUST)
	{
		switch (special)
		{
		case 40:
		case 41:
		case 42:	// Wind_East
			P_ThrustMobj(this, 0.0, windTab[special - 40]);
			break;
		case 43:
		case 44:
		case 45:	// Wind_North
			P_ThrustMobj(this, 90.0, windTab[special - 43]);
			break;
		case 46:
		case 47:
		case 48:	// Wind_South
			P_ThrustMobj(this, 270.0, windTab[special - 46]);
			break;
		case 49:
		case 50:
		case 51:	// Wind_West
			P_ThrustMobj(this, 180.0, windTab[special - 49]);
			break;
		}
	}
	if (velocity.x > MAXMOVE)
	{
		velocity.x = MAXMOVE;
	}
	else if (velocity.x < -MAXMOVE)
	{
		velocity.x = -MAXMOVE;
	}
	if (velocity.y > MAXMOVE)
	{
		velocity.y = MAXMOVE;
	}
	else if (velocity.y < -MAXMOVE)
	{
		velocity.y = -MAXMOVE;
	}
	xmove = velocity.x * frametime;
	ymove = velocity.y * frametime;
	do
	{
		if (xmove > MAXMOVE / (35.0 * 2.0) || ymove > MAXMOVE / (35.0 * 2.0))
		{
			ptryx = origin.x + xmove / 2.0;
			ptryy = origin.y + ymove / 2.0;
			xmove /= 2.0;
			ymove /= 2.0;
		}
		else
		{
			ptryx = origin.x + xmove;
			ptryy = origin.y + ymove;
			xmove = ymove = 0.0;
		}
		if (!P_TryMove(this, ptryx, ptryy))
		{
			// Blocked move
			if (flags & MF_MISSILE)
			{
				if (flags2 & MF2_FLOORBOUNCE)
				{
					if (BlockingMobj)
					{
						if ((BlockingMobj->flags2 & MF2_REFLECTIVE) ||
							((!BlockingMobj->player) &&
								(!(BlockingMobj->flags & MF_COUNTKILL))))
						{
							float speed;

							angle = AngleMod360(
								atan2(origin.y - BlockingMobj->origin.y,
									origin.x - BlockingMobj->origin.x) +
									Random() * 16.0 - 8.0);
							speed = Length(velocity);
							speed = speed * 0.75;
							angles.yaw = angle;
							velocity.x = speed * cos(angle);
							velocity.y = speed * sin(angle);
							if (sound_sight)
							{
								StartSound(this, sound_sight, CHAN_VOICE);
							}
							return true;
						}
						else
						{
							// Struck a player/creature
							return P_ExplodeMissile(this);
						}
					}
					else
					{
						// Struck a wall
						P_BounceWall(this);
						switch (type)
						{
						case MT_SORCBALL1:
						case MT_SORCBALL2:
						case MT_SORCBALL3:
						case MT_SORCFX1:
							break;
						default:
							if (sound_sight)
							{
								StartSound(this, sound_sight, CHAN_VOICE);
							}
							break;
						}
						return true;
					}
				}
				if (BlockingMobj && (BlockingMobj->flags2 & MF2_REFLECTIVE))
				{
					int explode = false;

					angle = atan2(origin.y - BlockingMobj->origin.y,
						origin.x - BlockingMobj->origin.x);

					// Change angle for delflection/reflection
					switch (BlockingMobj->type)
					{
					case MT_CENTAUR:
					case MT_CENTAURLEADER:
						if (fabs(AngleMod180(angle -
							BlockingMobj->angles.yaw)) > 45.0 * 45.0 / 32.0)
						{
							explode = true;
							break;
						}
						if (type == MT_HOLY_FX)
						{
							explode = true;
							break;
						}
						// Drop through to sorcerer full reflection
					case MT_SORCBOSS:
						// Deflection
						if (P_Random() < 128)
							angle = AngleMod360(angle + 45.0);
						else
							angle = AngleMod360(angle - 45.0);
						break;
					default:
						// Reflection
						angle = AngleMod360(angle + itof((P_Random() % 16) - 8));
						break;
					}

					if (!explode)
					{
						// Reflect the missile along angle
						angles.yaw = angle;
						velocity.x = (speed / 2.0) * cos(angle);
						velocity.y = (speed / 2.0) * sin(angle);
//						velocity.z = -velocity.z;
						if (flags2 & MF2_SEEKERMISSILE)
						{
							specialmobj1 = target;
						}
						target = BlockingMobj;
						return true;
					}
				}
				// Explode a missile
				if (ceilingline && ceilingline->backsector
					&& ceilingline->backsector->ceiling.pic == skyflatnum)
				{
					// Hack to prevent missiles exploding against the sky
					if (type == MT_BLOODYSKULL)
					{
						velocity.x = velocity.y = 0.0;
						velocity.z = -1.0 * 35.0;
					}
					else if (type == MT_HOLY_FX)
					{
						if (!P_ExplodeMissile(this))
						{
							return false;
						}
					}
					else
					{
						P_RemoveMobj(this);
						return false;
					}
					return true;
				}
				if (!P_ExplodeMissile(this))
				{
					return false;
				}
			}
			else
			{
				if (flags2 & MF2_SLIDE)
				{
					// Try to slide along it
					if (!BlockingMobj)
					{
						// Slide against wall
						P_SlideMove(this);
					}
					else
					{
						// Slide against mobj
						if (P_TryMove(this, origin.x, ptryy))
						{
							velocity.x = 0.0;
						}
						else if (P_TryMove(this, ptryx, origin.y))
						{
							velocity.y = 0.0;
						}
						else
						{
							velocity.x = velocity.y = 0.0;
						}
					}
				}
				else
				{
					velocity.x = velocity.y = 0.0;
				}
			}
		}
	}
	while (xmove || ymove);

	return true;
}

//==========================================================================
//
//  TEST ON MOBJ
//
//==========================================================================

mobj_t *tzmthing;
float tzmx;
float tzmy;
float tzmz;

mobj_t *onmobj;	//generic global onmobj...used for landing on pods/players

//==========================================================================
//
//  PIT_CheckOnmobjZ
//
//==========================================================================

boolean PIT_CheckOnmobjZ(mobj_t * thing)
{
	float blockdist;

	if (!(thing->flags & (MF_SOLID | MF_SPECIAL | MF_SHOOTABLE)))
	{
		// Can't hit thing
		return true;
	}
	blockdist = thing->radius + tzmthing->radius;
	if (fabs(thing->origin.x - tzmx) >= blockdist
		|| fabs(thing->origin.y - tzmy) >= blockdist)
	{
		// Didn't hit thing
		return true;
	}
	if (thing == tzmthing)
	{
		// Don't clip against self
		return true;
	}
	if (tzmz > thing->origin.z + thing->height)
	{
		return true;
	}
	else if (tzmz + tzmthing->height < thing->origin.z)
	{
		// under thing
		return true;
	}
	if (thing->flags & MF_SOLID)
	{
		onmobj = thing;
	}
	return (!(thing->flags & MF_SOLID));
}

//=============================================================================
//
//  P_FakeZMovement
//
//  Fake the zmovement so that we can check if a move is legal
//
//=============================================================================

void P_FakeZMovement(mobj_t * mo)
{
	float dist;
	float delta;

	//
	//  adjust height
	//
	tzmz += mo->velocity.z * frametime;
	if (mo->flags & MF_FLOAT && mo->target)
	{
		// float down towards target if too close
		if (!(mo->flags & MF_SKULLFLY) && !(mo->flags & MF_INFLOAT))
		{
			dist = MobjDist2(mo, mo->target);
			delta = mo->target->origin.z + mo->height / 2.0 - tzmz;
			if (delta < 0.0 && dist < -(delta * 3.0))
				tzmz -= FLOATSPEED * frametime;
			else if (delta > 0.0 && dist < (delta * 3.0))
				tzmz += FLOATSPEED * frametime;
		}
	}
	if (mo->player && mo->flags2 & MF2_FLY && !(tzmz <= mo->floorz)
		&& level->tictime & 2)
	{
		tzmz += sin(90.0 * 35.0 / 20.0 * level->time);
	}

	//
	//  clip movement
	//
	if (tzmz <= mo->floorz)
	{
		// Hit the floor
		tzmz = mo->floorz;
		if (mo->crashstate && (mo->flags & MF_CORPSE))
		{
			return;
		}
	}

	if (tzmz + mo->height > mo->ceilingz)
	{
		// hit the ceiling
		tzmz = mo->ceilingz - mo->height;
	}
}

//=============================================================================
//
//  P_CheckOnmobj
//
//  Checks if the new Z position is legal
//
//=============================================================================

mobj_t *P_CheckOnmobj(mobj_t * thing)
{
	int xl, xh, yl, yh, bx, by;

	tzmthing = thing;
	tzmx = thing->origin.x;
	tzmy = thing->origin.y;
	tzmz = thing->origin.z;
	P_FakeZMovement(tzmthing);

	if (thing->flags & MF_NOCLIP)
		return NULL;

	//
	// check things first, possibly picking things up
	// the bounding box is extended by MAXRADIUS because mobj_ts are grouped
	// into mapblocks based on their origin point, and can overlap into adjacent
	// blocks by up to MAXRADIUS units
	//
	xl = MapBlock(thing->origin.x - thing->radius - level->bmaporgx -
		MAXRADIUS);
	xh = MapBlock(thing->origin.x + thing->radius - level->bmaporgx +
		MAXRADIUS);
	yl = MapBlock(thing->origin.y - thing->radius - level->bmaporgy -
		MAXRADIUS);
	yh = MapBlock(thing->origin.y + thing->radius - level->bmaporgy +
		MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
	{
		for (by = yl; by <= yh; by++)
		{
			if (!P_BlockThingsIterator(bx, by, PIT_CheckOnmobjZ))
			{
				return onmobj;
			}
		}
	}
	return NULL;
}

//==========================================================================
//
//	Entity::ZMovement
//
//==========================================================================

boolean Entity::ZMovement(void)
{
	float dist;
	float delta;
	float vdot;

	//
	// check for smooth step up
	//
	if (player && origin.z < floorz)
	{
		player->viewheight -= floorz - origin.z;
		player->deltaviewheight = (VIEWHEIGHT - player->viewheight) / 8.0;
	}
	//
	// adjust height
	//
	origin.z += velocity.z * frametime;
	if (flags & MF_FLOAT && target)
	{
		// float down towards target if too close
		if (!(flags & MF_SKULLFLY) && !(flags & MF_INFLOAT))
		{
			dist = MobjDist2(this, target);
			delta = target->origin.z + height / 2.0 - origin.z;
			if (delta < 0.0 && dist < -delta * 3.0)
				origin.z -= FLOATSPEED * frametime;
			else if (delta > 0.0 && dist < delta * 3.0)
				origin.z += FLOATSPEED * frametime;
		}
	}
	if (player && flags2 & MF2_FLY && !(origin.z <= floorz)
		&& level->tictime & 2)
	{
		origin.z += sin(90.0 * 35.0 / 20.0 * level->time);
	}

	//
	// clip movement
	//
	if (origin.z <= floorz + 0.1)
	{
		// Hit the floor
		if (flags & MF_MISSILE)
		{
			origin.z = floorz;
			if (flags2 & MF2_FLOORBOUNCE)
			{
				P_FloorBounceMissile(this);
				return true;
			}
			else if (type == MT_HOLY_FX)
			{
				// The spirit struck the ground
				velocity.z = 0.0;
				P_HitFloor(this);
				return true;
			}
			else if (type == MT_MNTRFX2 || type == MT_LIGHTNING_FLOOR)
			{
				// Minotaur floor fire can go up steps
				return true;
			}
			else
			{
				P_HitFloor(this);
				return P_ExplodeMissile(this);
			}
		}

		vdot = DotProduct(velocity, floor->normal);
		if (flags & MF_COUNTKILL)	// Blasted mobj falling
		{
			if (vdot < -23.0 * 35.0)
			{
				P_MonsterFallingDamage(this);
			}
		}
		if (origin.z - velocity.z * frametime > floorz)
		{
			// Spawn splashes, etc.
			P_HitFloor(this);
		}
		origin.z = floorz;
		if (vdot < -0.1)
		{
			if (flags2 & MF2_ICEDAMAGE && vdot < -GRAVITY * 0.25)
			{
				time = 0.1;
				velocity.x = 0.0;
				velocity.y = 0.0;
				velocity.z = 0.0;
				return true;
			}
			if (player)
			{
				player->jumpTics = 7;	// delay any jumping for a short time
				if (vdot < -GRAVITY * 0.25 && !(flags2 & MF2_FLY))
				{
					// squat down
					player->deltaviewheight = vdot * frametime / 8.0;
					if (vdot < -23.0 * 35.0)
					{
						P_FallingDamage(player);
						P_NoiseAlert(this, this);
					}
					else if (vdot < -GRAVITY * 0.375
						&& !player->morphTics)
					{
						StartSoundName(this, "PlayerLand", CHAN_BODY);
						switch (player->pclass)
						{
						case PCLASS_FIGHTER:
							StartSoundName(this, "PlayerFighterGrunt",
								CHAN_VOICE);
							break;
						case PCLASS_CLERIC:
							StartSoundName(this, "PlayerClericGrunt",
								CHAN_VOICE);
							break;
						case PCLASS_MAGE:
							StartSoundName(this, "PlayerMageGrunt",
								CHAN_VOICE);
							break;
						default:
							break;
						}
					}
					else if ((P_GetThingFloorType(this) < FLOOR_LIQUID) &&
						(!player->morphTics))
					{
						StartSoundName(this, "PlayerLand", CHAN_BODY);
					}
//FIXME					player->centering = true;
				}
			}
			else if (type == MT_POTTERY1 || type == MT_POTTERY2 || type == MT_POTTERY3)
			{
				DamageMobj(this, NULL, NULL, 25);
			}
			else if (flags & MF_COUNTKILL)
			{
				if (vdot < -23.0 * 35.0)
				{
					// Doesn't get here
				}
			}
			velocity -= vdot * floor->normal;
		}
		if (flags & MF_SKULLFLY)
		{
			// The skull slammed into something
			velocity = ClipVelocity(velocity, floor->normal, 2.0);
		}
		if (crashstate &&
			(flags & MF_CORPSE) && !(flags2 & MF2_ICEDAMAGE))
		{
			return SetMobjState(this, crashstate);
		}
	}

	if (origin.z + height > ceilingz)
	{
		// hit the ceiling
		vdot = DotProduct(velocity, ceiling->normal);
		if (vdot < 0.0)
			velocity -= vdot * ceiling->normal;
		origin.z = ceilingz - height;
		if (flags & MF_MISSILE)
		{
			if (flags2 & MF2_FLOORBOUNCE)
			{
				// Maybe reverse momentum here for ceiling bounce
				// Currently won't happen

				if (sound_sight)
				{
					StartSound(this, sound_sight, CHAN_VOICE);
				}
				return true;
			}
			if (type == MT_LIGHTNING_CEILING)
			{
				return true;
			}
			if (ceiling->pic == skyflatnum)
			{
				if (type == MT_BLOODYSKULL)
				{
					velocity.x = velocity.y = 0.0;
					velocity.z = -1.0 * 35.0;
				}
				else if (type == MT_HOLY_FX)
				{
					return P_ExplodeMissile(this);
				}
				else
				{
					P_RemoveMobj(this);
					return false;
				}
				return true;
			}
			return P_ExplodeMissile(this);
		}
		if (flags & MF_SKULLFLY)
		{	// the skull slammed into something
			velocity.z = -velocity.z;
		}
	}
	return true;
}

//==========================================================================
//
//  Entity::ResetBlasted
//
//==========================================================================

void Entity::ResetBlasted(void)
{
	flags2 &= ~MF2_BLASTED;
	if (!(flags & MF_ICECORPSE))
	{
		flags2 &= ~MF2_SLIDE;
	}
}

//===========================================================================
//
//  PlayerLandedOnThing
//
//===========================================================================

void PlayerLandedOnThing(mobj_t * mo, mobj_t * onmobj)
{
	mo->player->deltaviewheight = mo->velocity.z * frametime / 8.0;
	if (mo->velocity.z < -23.0 * 35.0)
	{
		P_FallingDamage(mo->player);
		P_NoiseAlert(mo, mo);
	}
	else if (mo->velocity.z < -GRAVITY * 0.375 && !mo->player->morphTics)
	{
		StartSoundName(mo, "PlayerLand", CHAN_BODY);
		switch (mo->player->pclass)
		{
		case PCLASS_FIGHTER:
			StartSoundName(mo, "PlayerFighterGrunt", CHAN_VOICE);
			break;
		case PCLASS_CLERIC:
			StartSoundName(mo, "PlayerClericGrunt", CHAN_VOICE);
			break;
		case PCLASS_MAGE:
			StartSoundName(mo, "PlayerMageGrunt", CHAN_VOICE);
			break;
		default:
			break;
		}
	}
	else if (!mo->player->morphTics)
	{
		StartSoundName(mo, "PlayerLand", CHAN_BODY);
	}
//FIXME mo->player->centering = true;
}

//==========================================================================
//
//	Entity::BlasterPhysics
//
//==========================================================================

boolean Entity::BlasterPhysics(void)
{
	int i;
	float xfrac;
	float yfrac;
	float zfrac;
	float z;
	boolean changexy;
	mobj_t *mo;

	// Handle movement
	if (velocity.x || velocity.y || (origin.z != floorz) || velocity.z)
	{
		xfrac = velocity.x * frametime / 8.0;
		yfrac = velocity.y * frametime / 8.0;
		zfrac = velocity.z * frametime / 8.0;
		changexy = xfrac || yfrac;
		for (i = 0; i < 8; i++)
		{
			if (changexy)
			{
				if (!P_TryMove(this, origin.x + xfrac, origin.y + yfrac))
				{
					// Blocked move
					return P_ExplodeMissile(this);
				}
			}
			origin.z += zfrac;
			if (origin.z <= floorz)
			{
				// Hit the floor
				origin.z = floorz;
				P_HitFloor(this);
				return P_ExplodeMissile(this);
			}
			if (origin.z + height > ceilingz)
			{
				// Hit the ceiling
				origin.z = ceilingz - height;
				return P_ExplodeMissile(this);
			}
			if (changexy)
			{
				if (type == MT_MWAND_MISSILE && (P_Random() < 128))
				{
					z = origin.z - 8.0;
					if (z < floorz)
					{
						z = floorz;
					}
					P_SpawnMobj(origin.x, origin.y, z, MT_MWANDSMOKE);
				}
				else if (type != MT_MWAND_MISSILE && !--special1)
				{
					special1 = 4;
					z = origin.z - 12.0;
					if (z < floorz)
					{
						z = floorz;
					}
					mo = P_SpawnMobj(origin.x, origin.y, z, MT_CFLAMEFLOOR);
					if (mo)
					{
						mo->angles.yaw = angles.yaw;
					}
				}
			}
		}
	}
	return true;
}

//==========================================================================
//
//	Entity::Physics
//
//==========================================================================

boolean Entity::Physics(void)
{
	Entity *onmo;

	if (blaster)
	{
		return BlasterPhysics();
	}

	CheckWater();
	if (!(flags2 & MF2_FLOATBOB))
		UpdateVelocity();

	// Handle X and Y momentums
	BlockingMobj = NULL;
	if (velocity.x || velocity.y || (flags & MF_SKULLFLY))
	{
		if (!XYMovement())
		{
			return false;
		}
	}
	else if (flags2 & MF2_BLASTED)
	{
		// Reset to not blasted when momentums are gone
		ResetBlasted();
	}

	if (flags2 & MF2_FLOATBOB)
	{
		// Floating item bobbing motion (special1 is height)
		origin.z = floorz + special1f + FloatBobOffsets[(health++) & 63];
	}
	else if ((origin.z != floorz) || velocity.z || BlockingMobj)
	{
		// Handle Z momentum and gravity
		if (flags2 & MF2_PASSMOBJ)
		{
			if (!(onmo = P_CheckOnmobj(this)))
			{
				if (!ZMovement())
				{
					return false;
				}
				if (player && flags & MF2_ONMOBJ)
				{
					flags2 &= ~MF2_ONMOBJ;
				}
			}
			else
			{
				if (player)
				{
					if (velocity.z < -GRAVITY * 0.25 && !(flags2 & MF2_FLY))
					{
						PlayerLandedOnThing(this, onmo);
					}
					if (onmo->origin.z + onmo->height - origin.z <= 24.0)
					{
						player->viewheight -=
							onmo->origin.z + onmo->height - origin.z;
						player->deltaviewheight =
							(VIEWHEIGHT - player->viewheight) / 8.0;
						origin.z = onmo->origin.z + onmo->height;
						flags2 |= MF2_ONMOBJ;
						velocity.z = 0.0;
					}
					else
					{
						// hit the bottom of the blocking mobj
						velocity.z = 0.0;
					}
				}
			}
		}
		else
		{
			if (!ZMovement())
			{
				return false;
			}
		}
	}
	return true;
}

//==========================================================================
//
//	Entity::Think
//
//==========================================================================

void Entity::Think(void)
{
	if (!Physics())
	{
		return;
	}
	// Cycle through states, calling action functions at transitions
	if (time != -1.0)
	{
		time -= frametime;
		if (time <= 0.0)
		{
			// you can cycle through multiple states in a tic
			do
			{
				if (!SetMobjState(this, nextstate))
				{
					// mobj was removed
					return;
				}
			}
			while (!time);
		}
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.9  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.8  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.7  2001/10/04 17:27:52  dj_jl
//  Beautification
//
//  Revision 1.6  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
