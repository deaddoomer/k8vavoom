//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::UpdateMorphedMonster
//
//  Returns true if the pig morphs.
//
//==========================================================================

int Actor::UpdateMorphedMonster(int tics)
{
	Actor fog;
	TVec oldOrigin;
	classid originalClass;
	float oldAngle;
	mobj_t *oldTarget;
	int oldSpecial;
	int oldTID;
	int oldArgs[5];
	Actor mo;

	special1 -= tics;
	if (special1 > 0)
	{
		return false;
	}
	originalClass = specialcid;
	switch (originalClass)
	{
	case WraithBuried:	// These must remain morphed
	case Serpent:
	case SerpentLeader:
	case Minotaur:
		return false;
	default:
		break;
	}
	oldOrigin = Origin;
	oldAngle = Angles.yaw;
	oldTarget = target;
	oldSpecial = Special;
	oldTID = TID;
	oldArgs[0] = Args[0];
	oldArgs[1] = Args[1];
	oldArgs[2] = Args[2];
	oldArgs[3] = Args[3];
	oldArgs[4] = Args[4];

	P_UnsetThingPosition(self);
	mo = SpawnActor(oldOrigin, originalClass);

	if (!P_TestMobjLocation(&mo))
	{
		// Didn't fit
		P_RemoveMobj(&mo);
		P_SetThingPosition(self);
		mo.special1 = 5 * 35;	// Next try in 5 seconds
		return false;
	}
	P_RemoveMobjFromTIDList(this);
	SetState(S_FREETARGMOBJ);
	mo.Angles.yaw = oldAngle;
	mo.target = oldTarget;
	mo.TID = oldTID;
	mo.Special = oldSpecial;
	mo.Args[0] = oldArgs[0];
	mo.Args[1] = oldArgs[1];
	mo.Args[2] = oldArgs[2];
	mo.Args[3] = oldArgs[3];
	mo.Args[4] = oldArgs[4];
	P_InsertMobjIntoTIDList(&mo, oldTID);
	fog = SpawnActor(oldOrigin + vector(0.0, 0.0, TELEFOGHEIGHT),
		TeleportFog);
	StartSoundName(fog, 'Teleport', CHAN_VOICE);
	return true;
}

//============================================================================
//
//  Actor::A_PigLook
//
//============================================================================

void Actor::A_PigLook(void)
{
	if (UpdateMorphedMonster(10))
	{
		return;
	}
	A_Look();
}

//============================================================================
//
//  Actor::A_PigChase
//
//============================================================================

void Actor::A_PigChase(void)
{
	if (UpdateMorphedMonster(3))
	{
		return;
	}
	A_Chase();
}

//============================================================================
//
//	Actor::A_PigAttack
//
//============================================================================

void Actor::A_PigAttack(void)
{
	if (UpdateMorphedMonster(18))
	{
		return;
	}
	if (!target)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		target->Damage(self, self, 2 + (P_Random() & 1));
		StartSoundName(self, 'PigAttack', CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_PigPain
//
//============================================================================

void Actor::A_PigPain(void)
{
	A_Pain();
	if (Origin.z <= FloorZ)
	{
		Velocity.z = 3.5 * 35.0;
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.17  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.15  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
