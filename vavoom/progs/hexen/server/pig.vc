//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  UpdateMorphedMonster
//
//  Returns true if the pig morphs.
//
//==========================================================================

int UpdateMorphedMonster(mobj_t * actor, int tics)
{
	mobj_t *fog;
	float x;
	float y;
	float z;
	classid moType;
	float angle;
	int flags;
	int health;
	mobj_t *target;
	int special;
	int tid;
	int args[5];
	classid pig_type;
	mobj_t *mo;

	actor->special1 -= tics;
	if (actor->special1 > 0)
	{
		return false;
	}
	moType = actor->specialcid;
	switch (moType)
	{
	case MT_WRAITHB:	// These must remain morphed
	case MT_SERPENT:
	case MT_SERPENTLEADER:
	case MT_MINOTAUR:
		return false;
	default:
		break;
	}
	x = actor->origin.x;
	y = actor->origin.y;
	z = actor->origin.z;
	angle = actor->angles.yaw;
	flags = actor->flags;
	health = actor->health;
	target = actor->target;
	special = actor->special;
	tid = actor->tid;
	args[0] = actor->args[0];
	args[1] = actor->args[1];
	args[2] = actor->args[2];
	args[3] = actor->args[3];
	args[4] = actor->args[4];
	pig_type = actor->Class;

	P_RemoveMobjFromTIDList(actor);
	SetMobjState(actor, S_FREETARGMOBJ);
	mo = P_SpawnMobj(x, y, z, moType);

	if (!P_TestMobjLocation(mo))
	{
		// Didn't fit
		P_RemoveMobj(mo);
		mo = P_SpawnMobj(x, y, z, pig_type);
		mo->angles.yaw = angle;
		mo->flags = flags;
		mo->health = health;
		mo->target = target;
		mo->special = special;
		mo->special1 = 5 * 35;	// Next try in 5 seconds
		mo->specialcid = moType;
		mo->tid = tid;
		mo->args[0] = args[0];
		mo->args[1] = args[1];
		mo->args[2] = args[2];
		mo->args[3] = args[3];
		mo->args[4] = args[4];
		P_InsertMobjIntoTIDList(mo, tid);
		return false;
	}
	mo->angles.yaw = angle;
	mo->target = target;
	mo->tid = tid;
	mo->special = special;
	mo->args[0] = args[0];
	mo->args[1] = args[1];
	mo->args[2] = args[2];
	mo->args[3] = args[3];
	mo->args[4] = args[4];
	P_InsertMobjIntoTIDList(mo, tid);
	fog = P_SpawnMobj(x, y, z + TELEFOGHEIGHT, MT_TFOG);
	StartSoundName(fog, "Teleport", CHAN_VOICE);
	return true;
}

//============================================================================
//
//  Actor::A_PigLook
//
//============================================================================

void Actor::A_PigLook(void)
{
	if (UpdateMorphedMonster(this, 10))
	{
		return;
	}
	A_Look();
}

//============================================================================
//
//  Actor::A_PigChase
//
//============================================================================

void Actor::A_PigChase(void)
{
	if (UpdateMorphedMonster(this, 3))
	{
		return;
	}
	A_Chase();
}

//============================================================================
//
//	Actor::A_PigAttack
//
//============================================================================

void Actor::A_PigAttack(void)
{
	if (UpdateMorphedMonster(this, 18))
	{
		return;
	}
	if (!target)
	{
		return;
	}
	if (CheckMeleeRange(this))
	{
		target->Damage(this, this, 2 + (P_Random() & 1));
		StartSoundName(this, "PigAttack", CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_PigPain
//
//============================================================================

void Actor::A_PigPain(void)
{
	A_Pain();
	if (origin.z <= floorz)
	{
		velocity.z = 3.5 * 35.0;
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
