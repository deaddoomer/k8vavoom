//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define FLOATSPEED		140.0

// keep track of special lines as they are hit,
// but don't process them until the move is proven valid
#define MAXSPECIALCROSS	32

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

float xspeed[8] =
	{ 1.0, 0.7171630859, 0.0, -0.7171630859, -1.0, -0.7171630859, 0.0,
		0.7171630859 };
float yspeed[8] =
	{ 0.0, 0.7171630859, 1.0, 0.7171630859, 0.0, -0.7171630859, -1.0,
		-0.7171630859 };

boolean floatok;	// if true, move would be ok if

							// within tmfloorz - tmceilingz
float saved_tmfloorz;

// keep track of the line that lowers the ceiling,
// so missiles don't explode against sky hack walls
line_t *ceilingline;

float tmbbox[4];
mobj_t *tmthing;
int tmflags;
float tmx;
float tmy;
float tmz;
TVec tmpos;
float tmfloorz;
float tmceilingz;
float tmdropoffz;
sec_plane_t *tmfloor;
sec_plane_t *tmceiling;

line_t *spechit[MAXSPECIALCROSS];
int numspechit;

// CODE --------------------------------------------------------------------

//**************************************************************************
//
//  CHECK ABSOLUTE POSITION
//
//**************************************************************************

//==========================================================================
//
//  PIT_CheckThing
//
//==========================================================================

boolean PIT_CheckThing(mobj_t * thing)
{
	float blockdist;

	if (!(thing->Flags & MF_SOLID))
		return true;

	blockdist = thing->Radius + tmthing->Radius;

	if (fabs(thing->origin.x - tmx) >= blockdist
		|| fabs(thing->origin.y - tmy) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (thing == tmthing)
		return true;

	BlockingMobj = thing;
	if (!(tmthing->Flags2 & MF2_NOPASSMOBJ))
	{
		// check if a mobj passed over/under another object
		if (tmthing->Class == Bishop && thing->Class == Bishop)
		{
			// don't let bishops fly over other bishops
			return false;
		}
		if (tmthing->origin.z >= thing->origin.z + thing->Height)
		{
			return true;
		}
		else if (tmthing->origin.z + tmthing->Height < thing->origin.z)
		{
			// under thing
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  PIT_CheckLine
//
//  Adjusts tmfloorz and tmceilingz as lines are contacted
//
//==========================================================================

boolean PIT_CheckLine(line_t * ld)
{
	TVec hit_point;
	opening_t *open;

	if (tmbbox[BOXRIGHT] <= ld->bbox[BOXLEFT] ||
		tmbbox[BOXLEFT] >= ld->bbox[BOXRIGHT] ||
		tmbbox[BOXTOP] <= ld->bbox[BOXBOTTOM] ||
		tmbbox[BOXBOTTOM] >= ld->bbox[BOXTOP])
		return true;

	if (P_BoxOnLineSide(&tmbbox[0], ld) != -1)
		return true;

	// A line has been hit
	if (!ld->backsector)
	{
		return false;
	}

	if (ld->flags & ML_BLOCKING)
	{
		return false;
	}

	if (!tmthing->player && ld->flags & ML_BLOCKMONSTERS)
	{
		return false;
	}

	// set openrange, opentop, openbottom
	hit_point =
		tmpos - (DotProduct(tmpos, ld->normal) - ld->dist) * ld->normal;
	open = LineOpenings(ld, hit_point);
	open = FindOpening(open, tmz, tmz + tmthing->Height);

	if (open)
	{
		// adjust floor / ceiling heights
		if (!(open->ceiling->flags & SPF_NOBLOCKING)
			&& open->top < tmceilingz)
		{
			tmceiling = open->ceiling;
			tmceilingz = open->top;
			ceilingline = ld;
		}

		if (!(open->floor->flags & SPF_NOBLOCKING) && open->bottom > tmfloorz)
		{
			tmfloor = open->floor;
			tmfloorz = open->bottom;
		}

		if (open->lowfloor < tmdropoffz)
			tmdropoffz = open->lowfloor;
	}
	else
	{
		tmceilingz = tmfloorz;
	}

	return true;
}

//==========================================================================
//
//  P_CheckPosition
//
//  This is purely informative, nothing is modified
// 
// in:
//  a mobj_t (can be valid or invalid)
//  a position to be checked
//   (doesn't need to be related to the mobj_t->x,y)
//
//==========================================================================

boolean P_CheckPosition(mobj_t * thing, float x, float y)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;
	subsector_t *newsubsec;
	sec_region_t *gap;
	sec_region_t *reg;

	tmthing = thing;
	tmflags = thing->Flags;

	tmx = x;
	tmy = y;
	tmz = thing->origin.z;
	tmpos = vector(x, y, thing->origin.z);

	tmbbox[BOXTOP] = y + tmthing->Radius;
	tmbbox[BOXBOTTOM] = y - tmthing->Radius;
	tmbbox[BOXRIGHT] = x + tmthing->Radius;
	tmbbox[BOXLEFT] = x - tmthing->Radius;

	newsubsec = PointInSubsector(x, y);
	ceilingline = NULL;

	// The base floor / ceiling is from the subsector
	// that contains the point.
	// Any contacted lines the step closer together
	// will adjust them.
	gap =
		FindThingGap(newsubsec->sector->botregion, tmpos, tmz,
		tmz + thing->Height);
	reg = gap;
	while (reg->prev && reg->floor->flags & SPF_NOBLOCKING)
		reg = reg->prev;
	tmfloor = reg->floor;
	tmfloorz = tmdropoffz = GetPlanePointZ(reg->floor, tmpos);
	reg = gap;
	while (reg->next && reg->ceiling->flags & SPF_NOBLOCKING)
		reg = reg->next;
	tmceiling = reg->ceiling;
	tmceilingz = GetPlanePointZ(reg->ceiling, tmpos);

	(*validcount)++;
	numspechit = 0;

	if (tmflags & MF_NOCLIP && !(tmflags & MF_SKULLFLY))
		return true;
	BlockingMobj = NULL;

	// Check things first, possibly picking things up.
	// The bounding box is extended by MAXRADIUS
	// because mobj_ts are grouped into mapblocks
	// based on their origin point, and can overlap
	// into adjacent blocks by up to MAXRADIUS units.
	xl = MapBlock(tmbbox[BOXLEFT] - level->bmaporgx - MAXRADIUS);
	xh = MapBlock(tmbbox[BOXRIGHT] - level->bmaporgx + MAXRADIUS);
	yl = MapBlock(tmbbox[BOXBOTTOM] - level->bmaporgy - MAXRADIUS);
	yh = MapBlock(tmbbox[BOXTOP] - level->bmaporgy + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockThingsIterator(bx, by, PIT_CheckThing))
				return false;

	// check lines
	if (tmflags & MF_NOCLIP)
	{
		return true;
	}
	BlockingMobj = NULL;

	xl = MapBlock(tmbbox[BOXLEFT] - level->bmaporgx);
	xh = MapBlock(tmbbox[BOXRIGHT] - level->bmaporgx);
	yl = MapBlock(tmbbox[BOXBOTTOM] - level->bmaporgy);
	yh = MapBlock(tmbbox[BOXTOP] - level->bmaporgy);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockLinesIterator(bx, by, PIT_CheckLine))
				return false;

	return true;
}

//**************************************************************************
//
//  CHECK RELATIVE POSITION
//
//**************************************************************************

//==========================================================================
//
//	Actor::Touch
//
//==========================================================================

boolean Actor::Touch(Actor Other)
{
	boolean solid;
	int damage;

	if (!(Other.Flags & (MF_SOLID | MF_SPECIAL | MF_SHOOTABLE)))
		return true;

	// Check for skulls slamming into things
	if (Flags & MF_SKULLFLY)
	{
		if (Class == Minotaur)
		{
			// Slamming minotaurs shouldn't move non-creatures
			if (!(Other.Flags & MF_COUNTKILL))
			{
				return false;
			}
		}
		else if (Class == HolyFX)
		{
			if (Other.Flags & MF_SHOOTABLE && Other != *target)
			{
				if (netgame && !deathmatch && Other.player)
				{
					// don't attack other co-op players
					return true;
				}
				if (Other.Flags2 & MF2_REFLECTIVE
					&& (Other.player || Other.Flags2 & MF2_BOSS))
				{
					specialmobj1 = target;
					target = &Other;
					return true;
				}
				if (Other.Flags & MF_COUNTKILL || Other.player)
				{
					specialmobj1 = &Other;
				}
				if (P_Random() < 96)
				{
					damage = 12;
					if (Other.player || Other.Flags2 & MF2_BOSS)
					{
						damage = 3;
						// ghost burns out faster when attacking players/bosses
						Health -= 6;
					}
					Other.Damage(self, *target, damage);
					if (P_Random() < 128)
					{
						P_SpawnMobj(origin.x, origin.y, origin.z, HolyPuff);
						StartSoundName(this, 'SpiritAttack', CHAN_VOICE);
						if (Other.Flags & MF_COUNTKILL && P_Random() < 128
							&& !GetSoundPlayingInfo(&Other,
								GetSoundID('PuppyBeat')))
						{
							if ((Other.Class == Centaur) ||
								(Other.Class == CentaurLeader) ||
								(Other.Class == Ettin))
							{
								StartSoundName(&Other, 'PuppyBeat',
									CHAN_VOICE);
							}
						}
					}
				}
				if (Other.Health <= 0)
				{
					special1 = 0;
					specialmobj1 = NULL;
				}
			}
			return true;
		}
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		Flags &= ~MF_SKULLFLY;
		velocity = vector(0.0, 0.0, 0.0);
		SetState(SeeState);
		return false;
	}
	// Check for blasted thing running into another
	if (Flags2 & MF2_BLASTED && Other.Flags & MF_SHOOTABLE)
	{
		if (!(Other.Flags2 & MF2_BOSS) && (Other.Flags & MF_COUNTKILL))
		{
			Other.velocity.x += velocity.x;
			Other.velocity.y += velocity.y;
			if ((Other.velocity.x + Other.velocity.y) > 3.0 * 35.0)
			{
				damage = (ftoi(Mass) / 100) + 1;
				Other.Damage(self, self, damage);
				damage = (ftoi(Other.Mass) / 100) + 1;
				Damage(Other, Other, damage >> 2);
			}
			return false;
		}
	}
	// Check for missile
	if (Flags & MF_MISSILE)
	{
		// Check for a non-shootable mobj
		if (Other.Flags2 & MF2_NONSHOOTABLE)
		{
			return true;
		}
		if (Flags2 & MF2_FLOORBOUNCE)
		{
			if (*target == Other || !(Other.Flags & MF_SOLID))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		if (Class ==  LightningFloor || Class == LightningCeiling)
		{
			if (Other.Flags & MF_SHOOTABLE && Other != *target)
			{
				if (Other.Mass != 99999.0)
				{
					Other.velocity.x += velocity.x / 16.0;
					Other.velocity.y += velocity.y / 16.0;
				}
				if ((!Other.player && !(Other.Flags2 & MF2_BOSS))
					|| !(level->tictime & 1))
				{
					if (Other.Class == Centaur ||
						Other.Class == CentaurLeader)
					{
						// Lightning does more damage to centaurs
						Other.Damage(self, *target, 9);
					}
					else
					{
						Other.Damage(self, *target, 3);
					}
					if (!(GetSoundPlayingInfo(this,
								GetSoundID('MageLightningZap'))))
					{
						StartSoundName(this, 'MageLightningZap',
							CHAN_VOICE);
					}
					if (Other.Flags & MF_COUNTKILL && P_Random() < 64
						&& !GetSoundPlayingInfo(&Other,
							GetSoundID('PuppyBeat')))
					{
						if ((Other.Class == Centaur) ||
							(Other.Class == CentaurLeader) ||
							(Other.Class == Ettin))
						{
							StartSoundName(&Other, 'PuppyBeat', CHAN_VOICE);
						}
					}
				}
				Health--;
				if (Health <= 0 || Other.Health <= 0)
				{
					return false;
				}
				if (Class == LightningFloor)
				{
					if (specialmobj2 && !specialmobj2->specialmobj1)
					{
						specialmobj2->specialmobj1 = &Other;
					}
				}
				else if (!specialmobj1)
				{
					specialmobj1 = &Other;
				}
			}
			return true;	// lightning zaps through all sprites
		}
		else if (Class == LightningZap)
		{
			mobj_t *lmo;

			if (Other.Flags & MF_SHOOTABLE && Other != *target)
			{
				lmo = specialmobj2;
				if (lmo)
				{
					if (lmo->Class == LightningFloor)
					{
						if (lmo->specialmobj2 &&
							!lmo->specialmobj2->specialmobj1)
						{
							lmo->specialmobj2->specialmobj1 = &Other;
						}
					}
					else if (!lmo->specialmobj1)
					{
						lmo->specialmobj1 = &Other;
					}
					if (!(level->tictime & 3))
					{
						lmo->Health--;
					}
				}
			}
		}
		else if (Class == MageStaffFX2 && Other != *target)
		{
			if (!Other.player && !(Other.Flags2 & MF2_BOSS))
			{
				switch (Other.Class)
				{
				case FighterBoss:	// these not flagged boss
				case ClericBoss:	// so they can be blasted
				case MageBoss:
					break;
				default:
					Other.Damage(self, *target, 10);
					return true;
				}
			}
		}
		if (target && target->Class == Other.Class)
		{
			// Don't hit same species as originator
			if (Other == *target)
			{
				// Don't missile self
				return true;
			}
			if (!Other.player)
			{
				// Hit same species as originator, explode, no damage
				return false;
			}
		}
		if (!(Other.Flags & MF_SHOOTABLE))
		{
			// Didn't do any damage
			return !(Other.Flags & MF_SOLID);
		}
		if (Flags2 & MF2_RIP)
		{
			if (!(Other.Flags & MF_NOBLOOD) &&
				!(Other.Flags2 & MF2_REFLECTIVE) &&
				!(Other.Flags2 & MF2_INVULNERABLE))
			{
				// Ok to spawn some blood
				P_RipperBlood(this);
			}
			damage = ((P_Random() & 3) + 2) * MissileDamage;
			Other.Damage(self, *target, damage);
			if (Other.Flags2 & MF2_PUSHABLE
				&& !(Flags2 & MF2_CANNOTPUSH))
			{
				// Push thing
				Other.velocity.x += velocity.x / 4.0;
				Other.velocity.y += velocity.y / 4.0;
			}
			numspechit = 0;
			return true;
		}
		// Do damage
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		if (damage)
		{
			if (!(Other.Flags & MF_NOBLOOD) &&
				!(Other.Flags2 & MF2_REFLECTIVE) &&
				!(Other.Flags2 & MF2_INVULNERABLE) &&
				!(Class == TeleportOtherFX1) &&
				!(Class == TeleportOtherFX2) &&
				!(Class == TeleportOtherFX3) &&
				!(Class == TeleportOtherFX4) &&
				!(Class == TeleportOtherFX5) && (P_Random() < 192))
			{
				P_BloodSplatter(origin.x, origin.y, origin.z, &Other);
			}
			Other.Damage(self, *target, damage);
		}
		return false;
	}
	if (Other.Flags2 & MF2_PUSHABLE && !(Flags2 & MF2_CANNOTPUSH))
	{
		// Push thing
		Other.velocity.x += velocity.x / 4.0;
		Other.velocity.y += velocity.y / 4.0;
	}
	// Check for special thing
	if (Other.Flags & MF_SPECIAL)
	{
		solid = Other.Flags & MF_SOLID;
		P_TouchSpecialThing(&Other, this);	// Can remove thing
		return !solid;
	}
	return !(Other.Flags & MF_SOLID);
}

//==========================================================================
//
//	PIT_CheckRelThing
//
//==========================================================================

boolean PIT_CheckRelThing(mobj_t * thing)
{
	float blockdist;

	blockdist = thing->Radius + tmthing->Radius;

	if (fabs(thing->origin.x - tmx) >= blockdist
		|| fabs(thing->origin.y - tmy) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (thing == tmthing)
		return true;

	BlockingMobj = thing;
	if (!(tmthing->Flags2 & MF2_NOPASSMOBJ) || (thing->Flags & MF_SPECIAL))
	{
		// check if a mobj passed over/under another object
		if (tmthing->Class == Bishop && thing->Class == Bishop)
		{
			// don't let bishops fly over other bishops
			return false;
		}
		if (tmthing->origin.z >= thing->origin.z + thing->Height)
		{
			return true;
		}
		if (tmthing->origin.z + tmthing->Height < thing->origin.z)
		{
			// under thing
			return true;
		}
	}
	return tmthing->Touch(*thing);
}

//===========================================================================
//
// CheckForPushSpecial
//
//===========================================================================

void CheckForPushSpecial(line_t * line, int side, mobj_t * mobj)
{
	if (line->special)
	{
		if (mobj->Flags2 & MF2_PUSHWALL)
		{
			P_ActivateLine(line, mobj, side, SPAC_PUSH);
		}
		else if (mobj->Flags2 & MF2_IMPACT)
		{
			P_ActivateLine(line, mobj, side, SPAC_IMPACT);
		}
	}
}

//==========================================================================
//
//	PIT_CheckRelLine
//
//  Adjusts tmfloorz and tmceilingz as lines are contacted
//
//==========================================================================

boolean PIT_CheckRelLine(line_t * ld)
{
	TVec hit_point;
	opening_t *open;

	if (tmbbox[BOXRIGHT] <= ld->bbox[BOXLEFT] ||
		tmbbox[BOXLEFT] >= ld->bbox[BOXRIGHT] ||
		tmbbox[BOXTOP] <= ld->bbox[BOXBOTTOM] ||
		tmbbox[BOXBOTTOM] >= ld->bbox[BOXTOP])
		return true;

	if (P_BoxOnLineSide(&tmbbox[0], ld) != -1)
		return true;

	// A line has been hit

	// The moving thing's destination position will cross
	// the given line.
	// If this should not be allowed, return false.
	// If the line is special, keep track of it
	// to process later if the move is proven ok.
	// NOTE: specials are NOT sorted by order,
	// so two special lines that are only 8 pixels apart
	// could be crossed in either order.

	if (!ld->backsector)
	{
		// One sided line
		if (tmthing->Flags2 & MF2_BLASTED)
		{
			tmthing->Damage(none, none, ftoi(tmthing->Mass) >> 5);
		}
		CheckForPushSpecial(ld, 0, tmthing);
		return false;
	}

	if (!(tmthing->Flags & MF_MISSILE))
	{
		if (ld->flags & ML_BLOCKING)
		{
			// Explicitly blocking everything
			if (tmthing->Flags2 & MF2_BLASTED)
			{
				tmthing->Damage(none, none, ftoi(tmthing->Mass) >> 5);
			}
			CheckForPushSpecial(ld, 0, tmthing);
			return false;
		}

		if (!tmthing->player && ld->flags & ML_BLOCKMONSTERS)
		{
			// Block monsters only
			if (tmthing->Flags2 & MF2_BLASTED)
			{
				tmthing->Damage(none, none, ftoi(tmthing->Mass) >> 5);
			}
			return false;
		}
	}

	// set openrange, opentop, openbottom
	hit_point =
		tmpos - (DotProduct(tmpos, ld->normal) - ld->dist) * ld->normal;
	open = LineOpenings(ld, hit_point);
	open = FindOpening(open, tmz, tmz + tmthing->Height);

	if (open)
	{
		// adjust floor / ceiling heights
		if (!(open->ceiling->flags & SPF_NOBLOCKING)
			&& open->top < tmceilingz)
		{
			tmceiling = open->ceiling;
			tmceilingz = open->top;
			ceilingline = ld;
		}

		if (!(open->floor->flags & SPF_NOBLOCKING) && open->bottom > tmfloorz)
		{
			tmfloor = open->floor;
			tmfloorz = open->bottom;
		}

		if (open->lowfloor < tmdropoffz)
			tmdropoffz = open->lowfloor;
	}
	else
	{
		tmceilingz = tmfloorz;
	}

	// if contacted a special line, add it to the list
	if (ld->special)
	{
		if (numspechit >= MAXSPECIALCROSS)
		{
//          cond << "Spechit overflow\n";
		}
		else
		{
			spechit[numspechit] = ld;
			numspechit++;
		}
	}

	return true;
}

//==========================================================================
//
//	P_CheckRelPosition
//
//  This is purely informative, nothing is modified
// (except things picked up).
// 
// in:
//  a mobj_t (can be valid or invalid)
//  a position to be checked
//   (doesn't need to be related to the mobj_t->x,y)
//
// during:
//  special things are touched if MF_PICKUP
//  early out on solid lines?
//
// out:
//  newsubsec
//  floorz
//  ceilingz
//  tmdropoffz
//   the lowest point contacted
//   (monsters won't move to a dropoff)
//  speciallines[]
//  numspeciallines
//
//==========================================================================

boolean P_CheckRelPosition(mobj_t * thing, float x, float y)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;
	subsector_t *newsubsec;
	sec_region_t *gap;
	sec_region_t *reg;

	tmthing = thing;
	tmflags = thing->Flags;

	tmx = x;
	tmy = y;
	tmz = thing->origin.z;
	tmpos = vector(x, y, thing->origin.z);

	tmbbox[BOXTOP] = y + tmthing->Radius;
	tmbbox[BOXBOTTOM] = y - tmthing->Radius;
	tmbbox[BOXRIGHT] = x + tmthing->Radius;
	tmbbox[BOXLEFT] = x - tmthing->Radius;

	newsubsec = PointInSubsector(x, y);
	ceilingline = NULL;

	// The base floor / ceiling is from the subsector
	// that contains the point.
	// Any contacted lines the step closer together
	// will adjust them.
	gap =
		FindThingGap(newsubsec->sector->botregion, tmpos, tmz,
		tmz + thing->Height);
	reg = gap;
	while (reg->prev && reg->floor->flags & SPF_NOBLOCKING)
		reg = reg->prev;
	tmfloor = reg->floor;
	tmfloorz = tmdropoffz = GetPlanePointZ(reg->floor, tmpos);
	reg = gap;
	while (reg->next && reg->ceiling->flags & SPF_NOBLOCKING)
		reg = reg->next;
	tmceiling = reg->ceiling;
	tmceilingz = GetPlanePointZ(reg->ceiling, tmpos);

	(*validcount)++;
	numspechit = 0;

	if (tmflags & MF_NOCLIP && !(tmflags & MF_SKULLFLY))
		return true;
	BlockingMobj = NULL;

	// Check things first, possibly picking things up.
	// The bounding box is extended by MAXRADIUS
	// because mobj_ts are grouped into mapblocks
	// based on their origin point, and can overlap
	// into adjacent blocks by up to MAXRADIUS units.
	xl = MapBlock(tmbbox[BOXLEFT] - level->bmaporgx - MAXRADIUS);
	xh = MapBlock(tmbbox[BOXRIGHT] - level->bmaporgx + MAXRADIUS);
	yl = MapBlock(tmbbox[BOXBOTTOM] - level->bmaporgy - MAXRADIUS);
	yh = MapBlock(tmbbox[BOXTOP] - level->bmaporgy + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockThingsIterator(bx, by, PIT_CheckRelThing))
				return false;

	// check lines
	if (tmflags & MF_NOCLIP)
	{
		return true;
	}
	BlockingMobj = NULL;

	xl = MapBlock(tmbbox[BOXLEFT] - level->bmaporgx);
	xh = MapBlock(tmbbox[BOXRIGHT] - level->bmaporgx);
	yl = MapBlock(tmbbox[BOXBOTTOM] - level->bmaporgy);
	yh = MapBlock(tmbbox[BOXTOP] - level->bmaporgy);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockLinesIterator(bx, by, PIT_CheckRelLine))
				return false;

	return true;
}

//==========================================================================
//
//  PushLine
//
//==========================================================================

void PushLine(mobj_t * thing)
{
	if (!(thing->Flags & (MF_TELEPORT | MF_NOCLIP)))
	{
		int numSpecHitTemp;
		line_t *ld;
		int side;

		if (thing->Flags2 & MF2_BLASTED)
		{
			thing->Damage(none, none, ftoi(thing->Mass) >> 5);
		}
		numSpecHitTemp = numspechit;
		while (numSpecHitTemp > 0)
		{
			numSpecHitTemp--;
			// see if the line was crossed
			ld = spechit[numSpecHitTemp];
			side = PointOnPlaneSide(thing->origin, ld);
			CheckForPushSpecial(ld, side, thing);
		}
	}
}

//==========================================================================
//
//  P_TryMove
//
//  Attempt to move to a new position, crossing special lines unless
// MF_TELEPORT is set.
//
//==========================================================================

boolean P_TryMove(mobj_t * thing, float x, float y)
{
	boolean check;
	TVec oldorg;
	int side;
	int oldside;
	line_t *ld;

	check = P_CheckRelPosition(thing, x, y);
	floatok = false;
	saved_tmfloorz = tmfloorz;
	if (!check)
	{
		if (!BlockingMobj || BlockingMobj->player || !thing->player ||
			BlockingMobj->origin.z + BlockingMobj->Height - thing->origin.z >
			24.0
			|| (BlockingMobj->subsector->sector->ceilingheight -
		   (BlockingMobj->origin.z + BlockingMobj->Height) < thing->Height)
			|| (tmceilingz - (BlockingMobj->origin.z + BlockingMobj->Height) <
				thing->Height))
		{
			PushLine(thing);
			return false;
		}
	}

	if (!(thing->Flags & MF_NOCLIP))
	{
		if (tmceilingz - tmfloorz < thing->Height)
		{
			// Doesn't fit
			PushLine(thing);
			return false;
		}

		floatok = true;

		if (!(thing->Flags & MF_TELEPORT) &&
			tmceilingz - thing->origin.z < thing->Height &&
			thing->Class != LightningCeiling && !(thing->Flags2 & MF2_FLY))
		{
			// mobj must lower itself to fit
			PushLine(thing);
			return false;
		}
		if (thing->Flags2 & MF2_FLY)
		{
			if (thing->origin.z + thing->Height > tmceilingz)
			{
				thing->velocity.z = -8.0 * 35.0;
				PushLine(thing);
				return false;
			}
			else if (thing->origin.z < tmfloorz
				&& tmfloorz - tmdropoffz > 24.0)
			{
				thing->velocity.z = 8.0 * 35.0;
				PushLine(thing);
				return false;
			}
		}
		if (!(thing->Flags & MF_TELEPORT)
			// The Minotaur floor fire (MinotaurFloorFire1) can step up any amount
			&& thing->Class != MinotaurFloorFire1 && thing->Class != LightningFloor
			&& tmfloorz - thing->origin.z > 24.0)
		{
			PushLine(thing);
			return false;
		}
		if (!(thing->Flags & (MF_DROPOFF | MF_FLOAT)) &&
			(tmfloorz - tmdropoffz > 24.0) && !(thing->Flags2 & MF2_BLASTED))
		{
			// Can't move over a dropoff unless it's been blasted
			return false;
		}
		if (thing->Flags2 & MF2_CANTLEAVEFLOORPIC &&
			(tmfloor->pic != thing->floor->pic
				|| tmfloorz != thing->origin.z))
		{
			// must stay within a sector of a certain floor type
			return false;
		}
	}

	// the move is ok,
	// so link the thing into its new position
	P_UnsetThingPosition(thing);

	oldorg = thing->origin;
	thing->origin.x = x;
	thing->origin.y = y;

	P_SetThingPosition(thing);
	thing->floor = tmfloor;
	thing->ceiling = tmceiling;
	thing->floorz = tmfloorz;
	thing->ceilingz = tmceilingz;

	if (thing->Flags2 & MF2_FLOORCLIP)
	{
		if (thing->origin.z == thing->subsector->sector->floorheight &&
			P_GetThingFloorType(thing) >= FLOOR_LIQUID)
		{
			thing->floorclip = 10.0;
		}
		else
		{
			thing->floorclip = 0.0;
		}
	}

	//
	// if any special lines were hit, do the effect
	//
	if (!(thing->Flags & (MF_TELEPORT | MF_NOCLIP)))
	{
		while (numspechit > 0)
		{
			numspechit--;
			// see if the line was crossed
			ld = spechit[numspechit];
			side = PointOnPlaneSide(thing->origin, ld);
			oldside = PointOnPlaneSide(oldorg, ld);
			if (side != oldside)
			{
				if (ld->special)
				{
					if (thing->player)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_CROSS);
					}
					else if (thing->Flags2 & MF2_MCROSS)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_MCROSS);
					}
					else if (thing->Flags2 & MF2_PCROSS)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_PCROSS);
					}
				}
			}
		}
	}

	return true;
}

//==========================================================================
//
//  P_Move
//
//  Move in the current direction, returns false if the move is blocked.
//
//==========================================================================

boolean P_Move(mobj_t * actor)
{
	float tryx;
	float tryy;

	line_t *ld;
	boolean good;

	if (actor->Flags2 & MF2_BLASTED)
		return true;
	if (actor->movedir == DI_NODIR)
		return false;

#ifdef RANGECHECK
	if (actor->movedir >= 8 || actor->movedir < 0)
		I_Error("Weird actor->movedir!");
#endif

	tryx =
		actor->origin.x + actor->Speed * frametime * xspeed[actor->movedir];
	tryy =
		actor->origin.y + actor->Speed * frametime * yspeed[actor->movedir];

	if (!P_TryMove(actor, tryx, tryy))
	{
		// open any specials
		if (actor->Flags & MF_FLOAT && floatok)
		{
			// must adjust height
			if (actor->origin.z < saved_tmfloorz)
				actor->origin.z += FLOATSPEED * frametime;
			else
				actor->origin.z -= FLOATSPEED * frametime;

			actor->Flags |= MF_INFLOAT;
			return true;
		}

		if (!numspechit)
			return false;

		actor->movedir = DI_NODIR;
		good = false;
		while (numspechit--)
		{
			ld = spechit[numspechit];
			// if the special is not a door
			// that can be opened,
			// return false
			if (P_ActivateLine(ld, actor, 0, SPAC_USE))
			{
				good = true;
			}
		}
		return good;
	}
	else
	{
		actor->Flags &= ~MF_INFLOAT;
	}

	if (!(actor->Flags & MF_FLOAT))
	{
		if (actor->origin.z > actor->floorz)
		{
			P_HitFloor(actor);
		}
		actor->origin.z = actor->floorz;
	}
	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/15 08:10:57  dj_jl
//  Added P_CheckRelPosition
//
//  Revision 1.9  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
