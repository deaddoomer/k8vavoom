//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::TestLocation
//
//  Returns true if the mobj is not blocked by anything at its current
// location, otherwise returns false.
//
//==========================================================================

bool Actor::TestLocation(void)
{
	if (!bColideWithThings && !bColideWithWorld)
		return true;

	if (CheckPosition(Origin))
	{
		// XY is ok, now check Z
		if ((Origin.z < FloorZ) || (Origin.z + Height > CeilingZ))
		{
			// Bad Z
			return false;
		}
		return true;
	}
	return false;
}

//==========================================================================
//
//	Actor::Touch
//
//==========================================================================

bool Actor::Touch(Entity InOther)
{
	bool solid;
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// Check for skulls slamming into things
	if (bSkullFly)
	{
		if (Class == Minotaur)
		{
			// Slamming minotaurs shouldn't move non-creatures
			if (!Other.bCountKill)
			{
				return false;
			}
		}
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(SeeState);
		return false;
	}
	// Check for blasted thing running into another
	if (bBlasted && Other.bShootable)
	{
		if (!Other.bBoss && Other.bCountKill)
		{
			Other.Velocity.x += Velocity.x;
			Other.Velocity.y += Velocity.y;
			if ((Other.Velocity.x + Other.Velocity.y) > 3.0 * 35.0)
			{
				damage = (ftoi(Mass) / 100) + 1;
				Other.Damage(self, self, damage);
				damage = (ftoi(Other.Mass) / 100) + 1;
				Damage(Other, Other, damage >> 2);
			}
			return false;
		}
	}
	// Check for missile
	if (bMissile)
	{
		// Check for a non-shootable mobj
		if (Other.bNonShootable)
		{
			return true;
		}
		if (bFloorBounce)
		{
			if (Instigator == Other || !Other.bSolid)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		if (Class == LightningZap)
		{
			Actor lmo;

			if (Other.bShootable && Other != Instigator)
			{
				lmo = *SpecialMobj2;
				if (lmo)
				{
					if (lmo.Class == LightningFloor)
					{
						if (lmo.SpecialMobj2 &&
							!lmo.SpecialMobj2->Enemy)
						{
							lmo.SpecialMobj2->Enemy = Other;
						}
					}
					else if (!lmo.Enemy)
					{
						lmo.Enemy = Other;
					}
					if (!(level->tictime & 3))
					{
						lmo.Health--;
					}
				}
			}
		}
		else if (Class == MageStaffFX2 && Other != Instigator)
		{
			if (!Other.bIsPlayer && !Other.bBoss)
			{
				switch (Other.Class)
				{
				case FighterBoss:	// these not flagged boss
				case ClericBoss:	// so they can be blasted
				case MageBoss:
					break;
				default:
					Other.Damage(self, Instigator, 10);
					return true;
				}
			}
		}
		if (Instigator && Instigator.Class == Other.Class)
		{
			// Don't hit same species as originator
			if (Other == Instigator)
			{
				// Don't missile self
				return true;
			}
			if (!Other.bIsPlayer)
			{
				// Hit same species as originator, explode, no damage
				return false;
			}
		}
		if (!Other.bShootable)
		{
			// Didn't do any damage
			return !Other.bSolid;
		}
		if (bRip)
		{
			if (!Other.bNoBlood && !Other.bReflective && !Other.bInvulnerable)
			{
				// Ok to spawn some blood
				SpawnRipperBlood();
			}
			damage = ((P_Random() & 3) + 2) * MissileDamage;
			Other.Damage(self, Instigator, damage);
			if (Other.bPushable && !bCannotPush)
			{
				// Push thing
				Other.Velocity.x += Velocity.x / 4.0;
				Other.Velocity.y += Velocity.y / 4.0;
			}
//WHAT A FUCK IS THIS???????			numspechit = 0;
			return true;
		}
		// Do damage
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		if (damage)
		{
			if (!Other.bNoBlood && !Other.bReflective &&
				!Other.bInvulnerable &&
				!(Class == TeleportOtherFX1) &&
				!(Class == TeleportOtherFX2) &&
				!(Class == TeleportOtherFX3) &&
				!(Class == TeleportOtherFX4) &&
				!(Class == TeleportOtherFX5) && (P_Random() < 192))
			{
				Other.SpawnBloodSplatter(Origin);
			}
			Other.Damage(self, Instigator, damage);
		}
		return false;
	}
	if (Other.bPushable && !bCannotPush)
	{
		// Push thing
		Other.Velocity.x += Velocity.x / 4.0;
		Other.Velocity.y += Velocity.y / 4.0;
	}
	// Check for special thing
	if (Other.bSpecial)
	{
		solid = Other.bSolid;
		Pickup(Other).TouchSpecial(self);	// Can remove thing
		return !solid;
	}
	return !Other.bSolid;
}

//===========================================================================
//
//	Actor::CheckForPushSpecial
//
//===========================================================================

void Actor::CheckForPushSpecial(line_t * line, int side)
{
	if (line->special)
	{
		if (bActivatePushWall)
		{
			P_ActivateLine(line, self, side, SPAC_PUSH);
		}
		else if (bActivateImpact)
		{
			P_ActivateLine(line, self, side, SPAC_IMPACT);
		}
	}
}

//==========================================================================
//
//	Actor::BlockedByLine
//
//==========================================================================

void Actor::BlockedByLine(line_t * ld)
{
	if (bBlasted)
	{
		Damage(none, none, ftoi(Mass) >> 5);
	}
	CheckForPushSpecial(ld, 0);
}

//==========================================================================
//
//  Actor::PushLine
//
//==========================================================================

void Actor::PushLine(void)
{
	if (bColideWithWorld)
	{
		int numSpecHitTemp;
		line_t *ld;
		int side;

		if (bBlasted)
		{
			Damage(none, none, ftoi(Mass) >> 5);
		}
		numSpecHitTemp = tmtrace->NumSpecHit;
		while (numSpecHitTemp > 0)
		{
			numSpecHitTemp--;
			// see if the line was crossed
			ld = tmtrace->SpecHit[numSpecHitTemp];
			side = PointOnPlaneSide(Origin, ld);
			CheckForPushSpecial(ld, side);
		}
	}
}

//==========================================================================
//
//	Actor::CrossSpecialLine
//
//==========================================================================

void Actor::CrossSpecialLine(line_t *ld, int side)
{
	if (bIsPlayer)
	{
		P_ActivateLine(ld, self, side, SPAC_CROSS);
	}
	else if (bActivateMCross)
	{
		P_ActivateLine(ld, self, side, SPAC_MCROSS);
	}
	else if (bActivatePCross)
	{
		P_ActivateLine(ld, self, side, SPAC_PCROSS);
	}
}

//==========================================================================
//
//	Actor::HandleFloorclip
//
//==========================================================================

void Actor::HandleFloorclip(void)
{
	if (bFloorClip)
	{
		if (Origin.z == Sector->floorheight &&
			GetFloorType() >= FLOOR_LIQUID)
		{
			FloorClip = 10.0;
		}
		else
		{
			FloorClip = 0.0;
		}
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.32  2002/09/07 16:28:26  dj_jl
//  Added Level class.
//
//  Revision 1.31  2002/08/28 16:36:39  dj_jl
//  Merged MapObject with Entity, some natives, beautification.
//
//  Revision 1.30  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.29  2002/04/11 16:52:16  dj_jl
//  Made TryMove native.
//
//  Revision 1.28  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.27  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.26  2002/03/12 19:19:17  dj_jl
//  Pickup classes
//
//  Revision 1.25  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.24  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.23  2002/03/02 18:00:15  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.22  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.21  2002/02/22 18:00:23  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/09 18:13:46  dj_jl
//  Added flags that determines what line blocking flags to check
//
//  Revision 1.18  2002/02/07 18:50:09  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.17  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/15 08:10:57  dj_jl
//  Added P_CheckRelPosition
//
//  Revision 1.9  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
