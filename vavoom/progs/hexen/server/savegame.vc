//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

void G_DeathMatchSpawnPlayer(int playernum);
void P_SpawnPlayer(mthing_t * mthing);

//==========================================================================
//
//  ArchivePlayer
//
//==========================================================================

void ArchivePlayer(player_t * player)
{
}

//==========================================================================
//
//  UnarchivePlayer
//
//==========================================================================

void UnarchivePlayer(player_t * player)
{
	player->attacker = NULL;
	player->poisoner = NULL;
}

//==========================================================================
//
//  mobj_t::Archive
//
//==========================================================================

void mobj_t::Archive(void)
{
	boolean corpse;

	corpse = flags & MF_CORPSE;
	if (corpse)
	{
		target = MobjToNum(NULL);
	}
	else
	{
		target = MobjToNum(target);
	}

	switch (Class)
	{
		// Just specialmobj1
	case MT_BISH_FX:
	case MT_HOLY_FX:
	case MT_DRAGON:
	case MT_THRUSTFLOOR_UP:
	case MT_THRUSTFLOOR_DOWN:
	case MT_MINOTAUR:
	case MT_SORCFX1:
	case MT_MSTAFF_FX2:
		if (corpse)
		{
			specialmobj1 = MobjToNum(NULL);
		}
		else
		{
			specialmobj1 = MobjToNum(specialmobj1);
		}
		break;

		// Just specialmobj2
	case MT_LIGHTNING_FLOOR:
	case MT_LIGHTNING_ZAP:
		if (corpse)
		{
			specialmobj2 = MobjToNum(NULL);
		}
		else
		{
			specialmobj2 = MobjToNum(specialmobj2);
		}
		break;

		// Both specialmobj1 and specialmobj2
	case MT_HOLY_TAIL:
	case MT_LIGHTNING_CEILING:
		if (corpse)
		{
			specialmobj1 = MobjToNum(NULL);
			specialmobj2 = MobjToNum(NULL);
		}
		else
		{
			specialmobj1 = MobjToNum(specialmobj1);
			specialmobj2 = MobjToNum(specialmobj2);
		}
		break;

		// Miscellaneous
	case MT_KORAX:
		special1 = 0;	// Searching index
		break;

	default:
		break;
	}
	specialcid = ClassIDToNum(specialcid);
}

//==========================================================================
//
//  mobj_t::Unarchive
//
//==========================================================================

void mobj_t::Unarchive(void)
{
	target = NumToMobj(target);
	switch (Class)
	{
		// Just specialmobj1
	case MT_BISH_FX:
	case MT_HOLY_FX:
	case MT_DRAGON:
	case MT_THRUSTFLOOR_UP:
	case MT_THRUSTFLOOR_DOWN:
	case MT_MINOTAUR:
	case MT_SORCFX1:
		specialmobj1 = NumToMobj(specialmobj1);
		break;

		// Just special2
	case MT_LIGHTNING_FLOOR:
	case MT_LIGHTNING_ZAP:
		specialmobj2 = NumToMobj(specialmobj2);
		break;

		// Both special1 and special2
	case MT_HOLY_TAIL:
	case MT_LIGHTNING_CEILING:
		specialmobj1 = NumToMobj(specialmobj1);
		specialmobj2 = NumToMobj(specialmobj2);
		break;

	default:
		break;
	}
	specialcid = NumToClassID(specialcid);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.4  2001/09/24 17:18:15  dj_jl
//  Created thinker classes
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
