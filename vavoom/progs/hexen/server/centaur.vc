//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	Centaur
//
//**************************************************************************

class Centaur:Pawn
	__mobjinfo__(107)
{

//==========================================================================
//
//  A_CentaurAttack
//
//==========================================================================

void A_CentaurAttack(void)
{
	if (!Enemy)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, P_Random() % 7 + 3);
	}
}

//==========================================================================
//
//	A_SetReflective
//
//==========================================================================

void A_SetReflective(void)
{
	bReflective = true;

	A_SetInvulnerable();
}

//==========================================================================
//
//	A_UnSetReflective
//
//==========================================================================

void A_UnSetReflective(void)
{
	bReflective = false;

	A_UnSetInvulnerable();
}

//==========================================================================
//
//	A_CentaurDefend
//
//==========================================================================

void A_CentaurDefend(void)
{
	A_FaceTarget();
	if (CheckMeleeRange() && Random() < 0.125)
	{
		A_UnSetInvulnerable();
		SetState(MeleeState);
	}
}

//==========================================================================
//
//  A_CentaurDropStuff
//
//  Spawn shield/sword sprites when the centaur pulps
//
//==========================================================================

void A_CentaurDropStuff(void)
{
	Actor A;
	float angle;

	A = Spawn(CentaurShield, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw + 90.0);
		A.Velocity.x = ((Random() - 0.5) * 8.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = ((Random() - 0.5) * 8.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = (8.0 + Random() * 4.0) * 35.0;
		A.Instigator = self;
	}
	A = Spawn(CentaurSword, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = ((Random() - 0.5) * 8.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = ((Random() - 0.5) * 8.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = (8.0 + Random() * 4.0) * 35.0;
		A.Instigator = self;
	}
}

__states__
{
	S_CENTAUR_LOOK1('CENT', 0, 10.0 / 35.0, S_CENTAUR_LOOK2) { A_Look(); }
	S_CENTAUR_LOOK2('CENT', 1, 10.0 / 35.0, S_CENTAUR_LOOK1) { A_Look(); }
	S_CENTAUR_WALK1('CENT', 0, 4.0 / 35.0, S_CENTAUR_WALK2) { A_Chase(); }
	S_CENTAUR_WALK2('CENT', 1, 4.0 / 35.0, S_CENTAUR_WALK3) { A_Chase(); }
	S_CENTAUR_WALK3('CENT', 2, 4.0 / 35.0, S_CENTAUR_WALK4) { A_Chase(); }
	S_CENTAUR_WALK4('CENT', 3, 4.0 / 35.0, S_CENTAUR_WALK1) { A_Chase(); }
	S_CENTAUR_ATK1('CENT', 7, 5.0 / 35.0, S_CENTAUR_ATK2) { A_FaceTarget(); }
	S_CENTAUR_ATK2('CENT', 8, 4.0 / 35.0, S_CENTAUR_ATK3) { A_FaceTarget(); }
	S_CENTAUR_ATK3('CENT', 9, 7.0 / 35.0, S_CENTAUR_WALK1) { A_CentaurAttack(); }
	S_CENTAUR_PAIN1('CENT', 6, 6.0 / 35.0, S_CENTAUR_PAIN2) { A_Pain(); }
	S_CENTAUR_PAIN2('CENT', 6, 6.0 / 35.0, S_CENTAUR_PAIN3) { A_SetReflective(); }
	S_CENTAUR_PAIN3('CENT', 4, 15.0 / 35.0, S_CENTAUR_PAIN4) { A_CentaurDefend(); }
	S_CENTAUR_PAIN4('CENT', 4, 15.0 / 35.0, S_CENTAUR_PAIN5) { A_CentaurDefend(); }
	S_CENTAUR_PAIN5('CENT', 4, 15.0 / 35.0, S_CENTAUR_PAIN6) { A_CentaurDefend(); }
	S_CENTAUR_PAIN6('CENT', 4, 1.0 / 35.0, S_CENTAUR_WALK1) { A_UnSetReflective(); }
	S_CENTAUR_DEATH1('CENT', 10, 4.0 / 35.0, S_CENTAUR_DEATH2) { }
	S_CENTAUR_DEATH2('CENT', 11, 4.0 / 35.0, S_CENTAUR_DEATH3) { A_Scream(); }
	S_CENTAUR_DEATH3('CENT', 12, 4.0 / 35.0, S_CENTAUR_DEATH4) { }
	S_CENTAUR_DEATH4('CENT', 13, 4.0 / 35.0, S_CENTAUR_DEATH5) { }
	S_CENTAUR_DEATH5('CENT', 14, 4.0 / 35.0, S_CENTAUR_DEATH6) { A_NoBlocking(); }
	S_CENTAUR_DEATH6('CENT', 15, 4.0 / 35.0, S_CENTAUR_DEATH7) { }
	S_CENTAUR_DEATH7('CENT', 16, 4.0 / 35.0, S_CENTAUR_DEATH8) { }
	S_CENTAUR_DEATH8('CENT', 17, 4.0 / 35.0, S_CENTAUR_DEATH9) { A_QueueCorpse(); }
	S_CENTAUR_DEATH9('CENT', 18, 4.0 / 35.0, S_CENTAUR_DEATH0) { }
	S_CENTAUR_DEATH0('CENT', 19, -1.0, S_NULL) { }
	S_CENTAUR_DEATH_X1('CTXD', 0, 4.0 / 35.0, S_CENTAUR_DEATH_X2) { }
	S_CENTAUR_DEATH_X2('CTXD', 1, 4.0 / 35.0, S_CENTAUR_DEATH_X3) { A_NoBlocking(); }
	S_CENTAUR_DEATH_X3('CTXD', 2, 4.0 / 35.0, S_CENTAUR_DEATH_X4) { A_CentaurDropStuff(); }
	S_CENTAUR_DEATH_X4('CTXD', 3, 3.0 / 35.0, S_CENTAUR_DEATH_X5) { A_Scream(); }
	S_CENTAUR_DEATH_X5('CTXD', 4, 4.0 / 35.0, S_CENTAUR_DEATH_X6) { A_QueueCorpse(); }
	S_CENTAUR_DEATH_X6('CTXD', 5, 3.0 / 35.0, S_CENTAUR_DEATH_X7) { }
	S_CENTAUR_DEATH_X7('CTXD', 6, 4.0 / 35.0, S_CENTAUR_DEATH_X8) { }
	S_CENTAUR_DEATH_X8('CTXD', 7, 3.0 / 35.0, S_CENTAUR_DEATH_X9) { }
	S_CENTAUR_DEATH_X9('CTXD', 8, 4.0 / 35.0, S_CENTAUR_DEATH_X10) { }
	S_CENTAUR_DEATH_X10('CTXD', 9, 3.0 / 35.0, S_CENTAUR_DEATH_X11) { }
	S_CENTAUR_DEATH_X11('CTXD', 10, -1.0, S_NULL) { }
	S_CENTAUR_ICE('CENT', 20, 5.0 / 35.0, S_CENTAUR_ICE2) { A_FreezeDeath(); }
	S_CENTAUR_ICE2('CENT', 20, 1.0 / 35.0, S_CENTAUR_ICE2) { A_FreezeDeathChunks(); }
}

defaultproperties
{
	Health = 200;
	GibsHealth = -100;
	Radius = 20.0;
	Height = 64.0;
	Mass = 120.0;
	StepSpeed = 13.0;
	PainChance = 135;
	IdleState = S_CENTAUR_LOOK1;
	SeeState = S_CENTAUR_WALK1;
	MeleeState = S_CENTAUR_ATK1;
	PainState = S_CENTAUR_PAIN1;
	DeathState = S_CENTAUR_DEATH1;
	GibsDeathState = S_CENTAUR_DEATH_X1;
	IceDeathState = S_CENTAUR_ICE;
	SightSound = 'CentaurSight';
	ActiveSound = 'CentaurActive';
	AttackSound = 'CentaurAttack';
	PainSound = 'CentaurPain';
	DeathSound = 'CentaurDeath';
}

}

//**************************************************************************
//
//	CentaurMissile
//
//**************************************************************************

class CentaurMissile:Projectile
{

__states__
{
	S_CENTAUR_FX1('CTFX', 0 | FF_FULLBRIGHT, -1.0, S_NULL) { }
	S_CENTAUR_FX_X1('CTFX', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_CENTAUR_FX_X2) { }
	S_CENTAUR_FX_X2('CTFX', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_CENTAUR_FX_X3) { }
	S_CENTAUR_FX_X3('CTFX', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_CENTAUR_FX_X4) { }
	S_CENTAUR_FX_X4('CTFX', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_CENTAUR_FX_X5) { }
	S_CENTAUR_FX_X5('CTFX', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 20.0;
	Height = 16.0;
	Speed = 700.0;
	MissileDamage = 4;
	IdleState = S_CENTAUR_FX1;
	DeathState = S_CENTAUR_FX_X1;
	DeathSound = 'CentaurMissileExplode';
	Effects = EF_DL_BLUE;
}

}

//**************************************************************************
//
//	CentaurLeader
//
//**************************************************************************

class CentaurLeader:Centaur
	__mobjinfo__(115)
{

//==========================================================================
//
//  A_CentaurAttack2
//
//==========================================================================

void A_CentaurAttack2(void)
{
	if (!Enemy)
	{
		return;
	}
	SpawnMissile(Enemy, CentaurMissile);
	PlaySound('CentaurLeaderAttack', CHAN_WEAPON);
}

__states__
{
	S_CENTAUR_MISSILE1('CENT', 4, 10.0 / 35.0, S_CENTAUR_MISSILE2) { A_FaceTarget(); }
	S_CENTAUR_MISSILE2('CENT', 5 | FF_FULLBRIGHT, 8.0 / 35.0, S_CENTAUR_MISSILE3) { A_CentaurAttack2(); }
	S_CENTAUR_MISSILE3('CENT', 4, 10.0 / 35.0, S_CENTAUR_MISSILE4) { A_FaceTarget(); }
	S_CENTAUR_MISSILE4('CENT', 5 | FF_FULLBRIGHT, 8.0 / 35.0, S_CENTAUR_WALK1) { A_CentaurAttack2(); }
}

defaultproperties
{
	Health = 250;
	GibsHealth = -125;
	StepSpeed = 10.0;
	PainChance = 96;
	MissileState = S_CENTAUR_MISSILE1;
}

}

//**************************************************************************
//
//	CentaurMash
//
//**************************************************************************

class CentaurMash:Centaur
{

defaultproperties
{
	GibsHealth = 0;
	Translucency = 33;
	bNoBlood = true;
	bBlasted = true;
	bTelestomp = false;
	DeathState = S_NULL;
	GibsDeathState = S_NULL;
	IceDeathState = S_NULL;
}

}

//**************************************************************************
//**************************************************************************

//==========================================================================
//
//  Actor::A_CheckFloor
//
//  Checks if an object hit the floor
//
//==========================================================================

void Actor::A_CheckFloor(void)
{
	if (Origin.z <= FloorZ)
	{
		Origin.z = FloorZ;
		//bLowGravity = false;
		SetState(DeathState);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.24  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.23  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.22  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.21  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.20  2002/03/02 17:58:36  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.19  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.18  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.17  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.15  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
