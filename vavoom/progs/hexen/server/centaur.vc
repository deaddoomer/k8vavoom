//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  Actor::A_CentaurAttack
//
//============================================================================

void Actor::A_CentaurAttack(void)
{
	if (!target)
	{
		return;
	}
	if (CheckMeleeRange(this))
	{
		target->Damage(this, this, P_Random() % 7 + 3);
	}
}

//============================================================================
//
//  Actor::A_CentaurAttack2
//
//============================================================================

void Actor::A_CentaurAttack2(void)
{
	if (!target)
	{
		return;
	}
	SpawnMissile(this, target, MT_CENTAUR_FX);
	StartSoundName(this, "CentaurLeaderAttack", CHAN_WEAPON);
}

//============================================================================
//
//	Actor::A_SetReflective
//
//============================================================================

void Actor::A_SetReflective(void)
{
	flags2 |= MF2_REFLECTIVE;

	if (IsA(MT_CENTAUR) || IsA(MT_CENTAURLEADER))
	{
		A_SetInvulnerable(this);
	}
}

//============================================================================
//
//	Actor::A_UnSetReflective
//
//============================================================================

void Actor::A_UnSetReflective(void)
{
	flags2 &= ~MF2_REFLECTIVE;

	if (IsA(MT_CENTAUR) || IsA(MT_CENTAURLEADER))
	{
		A_UnSetInvulnerable();
	}
}

//============================================================================
//
//	Actor::A_CentaurDefend
//
//============================================================================

void Actor::A_CentaurDefend(void)
{
	A_FaceTarget();
	if (CheckMeleeRange(this) && P_Random() < 32)
	{
		A_UnSetInvulnerable();
		SetMobjState(this, meleestate);
	}
}

//============================================================================
//
//  Actor::A_CentaurDropStuff
//
//  Spawn shield/sword sprites when the centaur pulps
//
//============================================================================

void Actor::A_CentaurDropStuff(void)
{
	mobj_t *mo;
	float angle;

	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, MT_CENTAUR_SHIELD);
	if (mo)
	{
		angle = AngleMod360(angles.yaw + 90.0);
		mo->velocity.x = ((Random() - 0.5) * 8.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = ((Random() - 0.5) * 8.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 + Random() * 4.0 * 35.0;
		mo->target = this;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, MT_CENTAUR_SWORD);
	if (mo)
	{
		angle = AngleMod360(angles.yaw - 90.0);
		mo->velocity.x = ((Random() - 0.5) * 8.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = ((Random() - 0.5) * 8.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 + Random() * 4.0 * 35.0;
		mo->target = this;
	}
}

//===========================================================================
//
//  Actor::A_CheckFloor
//
//  Checks if an object hit the floor
//
//===========================================================================

void Actor::A_CheckFloor(void)
{
	if (origin.z <= floorz)
	{
		origin.z = floorz;
		flags2 &= ~MF2_LOGRAV;
		SetMobjState(this, deathstate);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
