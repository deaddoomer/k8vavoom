//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	$Id$
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**	$Log$
//**	Revision 1.2  2001/07/27 14:27:52  dj_jl
//**	Update with Id-s and Log-s, some fixes
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
// 	A_PotteryExplode
//
//============================================================================

void A_PotteryExplode(mobj_t* actor)
{
	mobj_t*	mo = NULL;
	int 	i;

	for(i = (P_Random()&3)+3; i; i--)
	{
		mo = P_SpawnMobj(actor->origin.x, actor->origin.y, actor->origin.z, MT_POTTERYBIT1);
		SetMobjState(mo, mo->spawnstate+(P_Random()%5));
		if(mo)
		{
			mo->velocity.x = (Random() - Random()) * 4.0 * 35.0;
			mo->velocity.y = (Random() - Random()) * 4.0 * 35.0;
			mo->velocity.z = (Random() * 8.0 + 5.0) * (3.0 / 4.0) * 35.0;
		}
	}
	StartSoundName(mo, "PotteryExplode");
	if (actor->args[0])
	{ // Spawn an item
		P_SpawnMobj(actor->origin.x, actor->origin.y, actor->origin.z,
			TranslateThingType[actor->args[0]]);
	}
//	P_RemoveMobj(actor);
}

//============================================================================
//
// 	A_PotteryChooseBit
//
//============================================================================

void A_PotteryChooseBit(mobj_t* actor)
{
	SetMobjState(actor, actor->deathstate + (P_Random() % 5) + 1);
	actor->time = 8.0 + Random() * 16.0;
}

//============================================================================
//
// 	A_PotteryCheck
//
//============================================================================

void A_PotteryCheck(mobj_t* actor)
{
	int 	i;
	mobj_t*	pmo;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!players[i].active || !players[i].spawned)
		{
			continue;
		}
		pmo = players[i].mo;
		if (P_CheckSight(actor, pmo) && (abs(atan2(actor->origin.y - pmo->origin.y,
			actor->origin.x - pmo->origin.x) - pmo->angles.yaw) <= ANG45))
		{
			// Previous state (pottery bit waiting state)
			SetMobjState(actor, actor->statenum - 1);
			return;
		}
	}
}

