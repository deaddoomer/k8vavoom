//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  Actor::A_PotteryExplode
//
//============================================================================

void Actor::A_PotteryExplode(void)
{
	mobj_t *mo = NULL;
	int i;

	for (i = (P_Random() & 3) + 3; i; i--)
	{
		mo = P_SpawnMobj(Origin.x, Origin.y, Origin.z, PotteryBit);
		mo->SetState(mo->SpawnState + (P_Random() % 5));
		if (mo)
		{
			mo->Velocity.x = (Random() - Random()) * 4.0 * 35.0;
			mo->Velocity.y = (Random() - Random()) * 4.0 * 35.0;
			mo->Velocity.z = (Random() * 8.0 + 5.0) * (3.0 / 4.0) * 35.0;
		}
	}
	StartSoundName(*mo, 'PotteryExplode', CHAN_VOICE);
	if (Args[0])
	{
		// Spawn an item
		P_SpawnMobj(Origin.x, Origin.y, Origin.z,
			TranslateThingType[Args[0]]);
	}
//	P_RemoveMobj(this);
}

//============================================================================
//
//  Actor::A_PotteryChooseBit
//
//============================================================================

void Actor::A_PotteryChooseBit(void)
{
	SetState(DeathState + (P_Random() % 5) + 1);
	StateTime = 8.0 + Random() * 16.0;
}

//============================================================================
//
//  Actor::A_PotteryCheck
//
//============================================================================

void Actor::A_PotteryCheck(void)
{
	int i;
	mobj_t *pmo;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!players[i].active || !players[i].spawned)
		{
			continue;
		}
		pmo = players[i].mo;
		if (P_CheckSight(self, *pmo) &&
			(fabs(AngleMod180(atan2(Origin.y - pmo->Origin.y,
			Origin.x - pmo->Origin.x) - pmo->Angles.yaw)) <= 45.0))
		{
			// Previous state (pottery bit waiting state)
			SetState(StateNum - 1);
			return;
		}
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.13  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.12  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/02 17:42:38  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
