//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	Copyright (C) 1999-2000 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**	
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//	A_BishopDecide
//
//============================================================================

void A_BishopDecide(mobj_t* actor)
{
	if (P_Random() < 220)
	{
		return;
	}
	else
	{
		SetMobjState(actor, S_BISHOP_BLUR1);
	}		
}

//============================================================================
//
//	A_BishopDoBlur
//
//============================================================================

void A_BishopDoBlur(mobj_t* actor)
{
	actor->special1 = (P_Random() & 3) + 3; // P_Random number of blurs
	if (P_Random() < 120)
	{
		P_ThrustMobj(actor, actor->angles.yaw+ANG90, 11.0);
	}
	else if (P_Random() > 125)
	{
		P_ThrustMobj(actor, actor->angles.yaw-ANG90, 11.0);
	}
	else
	{ // Thrust forward
		P_ThrustMobj(actor, actor->angles.yaw, 11.0);
	}
	StartSoundName(actor, "BishopBlur");
}

//============================================================================
//
// A_BishopSpawnBlur
//
//============================================================================

void A_BishopSpawnBlur(mobj_t* actor)
{
	mobj_t*	mo;

	if(!--actor->special1)
	{
		actor->velocity.x = 0.0;
		actor->velocity.y = 0.0;
		if(P_Random() > 96)
		{
			SetMobjState(actor, S_BISHOP_WALK1);
		}
		else
		{
			SetMobjState(actor, S_BISHOP_ATK1);
		}
	}
	mo = P_SpawnMobj(actor->origin.x, actor->origin.y, actor->origin.z, MT_BISHOPBLUR);
	if(mo)
	{
		mo->angles.yaw = actor->angles.yaw;
	}
}

//============================================================================
//
// A_BishopChase
//
//============================================================================

void A_BishopChase(mobj_t* actor)
{
	actor->origin.z -= FloatBobOffsets[actor->special2] / 2.0;
	actor->special2 = (actor->special2 + 4) & 63;
	actor->origin.z += FloatBobOffsets[actor->special2] / 2.0;
}

//============================================================================
//
// A_BishopAttack
//
//============================================================================

void A_BishopAttack(mobj_t* actor)
{
	if(!actor->target)
	{
		return;
	}
	StartSound(actor, actor->sound_attack);
	if (CheckMeleeRange(actor))
	{
		DamageMobj(actor->target, actor, actor, HITDICE(4));
		return;
	}
	actor->special1 = (P_Random()&3)+5;
}

//============================================================================
//
// 	A_BishopAttack2
//
//	Spawns one of a string of bishop missiles
//
//============================================================================

void A_BishopAttack2(mobj_t* actor)
{
	mobj_t*	mo;

	if(!actor->target || !actor->special1)
	{
		actor->special1 = 0;
		SetMobjState(actor, S_BISHOP_WALK1);
		return;
	}
	mo = SpawnMissile(actor, actor->target, MT_BISH_FX);
	if(mo)
	{
		mo->specialmobj1 = actor->target;
		mo->special2 = 16; // High word == x/y, Low word == z
	}
	actor->special1--;
}

//============================================================================
//
//	A_BishopPainBlur
//
//============================================================================

void A_BishopPainBlur(mobj_t* actor)
{
	mobj_t*	mo;

	if (P_Random() < 64)
	{
		SetMobjState(actor, S_BISHOP_BLUR1);
		return;
	}
	mo = P_SpawnMobj(
		actor->origin.x + (Random() - Random()) * 16.0,
		actor->origin.y + (Random() - Random()) * 16.0,
		actor->origin.z + (Random() - Random()) * 8.0,
		MT_BISHOPPAINBLUR);
	if (mo)
	{
		mo->angles.yaw = actor->angles.yaw;
	}
}

//============================================================================
//
// A_BishopPuff
//
//============================================================================

void A_BishopPuff(mobj_t* actor)
{
	mobj_t*	mo;

	mo = P_SpawnMobj(actor->origin.x, actor->origin.y, actor->origin.z + 40.0, MT_BISHOP_PUFF);
	if (mo)
	{
		mo->velocity.z = 0.5 * 35.0;
	}
}

//==========================================================================
//
// A_SetAltShadow
//
//==========================================================================

void A_SetAltShadow(mobj_t* actor)
{
	actor->translucency = 33;
}

//============================================================================
//
// A_BishopMissileWeave
//
//============================================================================

void A_BishopMissileWeave(mobj_t* actor)
{
	float	newX, newY;
	int 	weaveXY, weaveZ;
	angle_t	angle;

	weaveXY = actor->special2 >> 16;
	weaveZ = actor->special2 & 0xFFFF;
	angle = actor->angles.yaw + ANG90;
	newX = actor->origin.x - cos(angle) * FloatBobOffsets[weaveXY] * 2.0;
	newY = actor->origin.y - sin(angle) * FloatBobOffsets[weaveXY] * 2.0;
	weaveXY = (weaveXY + 2) & 63;
	newX += cos(angle) * FloatBobOffsets[weaveXY] * 2.0;
	newY += sin(angle) * FloatBobOffsets[weaveXY] * 2.0;
	P_TryMove(actor, newX, newY);
	actor->origin.z -= FloatBobOffsets[weaveZ];
	weaveZ = (weaveZ + 2) & 63;
	actor->origin.z += FloatBobOffsets[weaveZ];
	actor->special2 = weaveZ + (weaveXY << 16);
}

//============================================================================
//
// A_BishopMissileSeek
//
//============================================================================

void A_BishopMissileSeek(mobj_t* actor)
{
	SeekerMissile(actor, ANGLE_1*2, ANGLE_1*3);
}

