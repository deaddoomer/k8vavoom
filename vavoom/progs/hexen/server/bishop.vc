//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  Actor::A_BishopDecide
//
//============================================================================

void Actor::A_BishopDecide(void)
{
	if (P_Random() < 220)
	{
		return;
	}
	else
	{
		SetState(S_BISHOP_BLUR1);
	}
}

//============================================================================
//
//  Actor::A_BishopDoBlur
//
//============================================================================

void Actor::A_BishopDoBlur(void)
{
	special1 = (P_Random() & 3) + 3;	// P_Random number of blurs
	if (P_Random() < 120)
	{
		P_ThrustMobj(this, AngleMod360(angles.yaw + 90.0), 11.0);
	}
	else if (P_Random() > 125)
	{
		P_ThrustMobj(this, AngleMod360(angles.yaw - 90.0), 11.0);
	}
	else
	{
		// Thrust forward
		P_ThrustMobj(this, angles.yaw, 11.0);
	}
	StartSoundName(this, 'BishopBlur', CHAN_VOICE);
}

//============================================================================
//
//	Actor::A_BishopSpawnBlur
//
//============================================================================

void Actor::A_BishopSpawnBlur(void)
{
	mobj_t *mo;

	if (!--special1)
	{
		velocity.x = 0.0;
		velocity.y = 0.0;
		if (P_Random() > 96)
		{
			SetState(S_BISHOP_WALK1);
		}
		else
		{
			SetState(S_BISHOP_ATK1);
		}
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z, BishopBlur);
	if (mo)
	{
		mo->angles.yaw = angles.yaw;
	}
}

//============================================================================
//
//	Actor::A_BishopChase
//
//============================================================================

void Actor::A_BishopChase(void)
{
	origin.z -= FloatBobOffsets[special2] / 2.0;
	special2 = (special2 + 4) & 63;
	origin.z += FloatBobOffsets[special2] / 2.0;
}

//============================================================================
//
//	Actor::A_BishopAttack
//
//============================================================================

void Actor::A_BishopAttack(void)
{
	if (!target)
	{
		return;
	}
	StartSound(this, sound_attack, CHAN_WEAPON);
	if (CheckMeleeRange(this))
	{
		target->Damage(self, self, HITDICE(4));
		return;
	}
	special1 = (P_Random() & 3) + 5;
}

//============================================================================
//
//  Actor::A_BishopAttack2
//
//  Spawns one of a string of bishop missiles
//
//============================================================================

void Actor::A_BishopAttack2(void)
{
	mobj_t *mo;

	if (!target || !special1)
	{
		special1 = 0;
		SetState(S_BISHOP_WALK1);
		return;
	}
	mo = SpawnMissile(this, target, BishopMissile);
	if (mo)
	{
		mo->specialmobj1 = target;
		mo->special2 = 16;	// High word == x/y, Low word == z
	}
	special1--;
}

//============================================================================
//
//  Actor::A_BishopPainBlur
//
//============================================================================

void Actor::A_BishopPainBlur(void)
{
	mobj_t *mo;

	if (P_Random() < 64)
	{
		SetState(S_BISHOP_BLUR1);
		return;
	}
	mo = P_SpawnMobj(origin.x + (Random() - Random()) * 16.0,
		origin.y + (Random() - Random()) * 16.0,
		origin.z + (Random() - Random()) * 8.0, BishopPainBlur);
	if (mo)
	{
		mo->angles.yaw = angles.yaw;
	}
}

//============================================================================
//
//	Actor::A_BishopPuff
//
//============================================================================

void Actor::A_BishopPuff(void)
{
	mobj_t *mo;

	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 40.0, BishopPuff);
	if (mo)
	{
		mo->velocity.z = 0.5 * 35.0;
	}
}

//==========================================================================
//
//	Actor::A_SetAltShadow
//
//==========================================================================

void Actor::A_SetAltShadow(void)
{
	Translucency = 33;
}

//============================================================================
//
//	Actor::A_BishopMissileWeave
//
//============================================================================

void Actor::A_BishopMissileWeave(void)
{
	float newX, newY;
	int weaveXY, weaveZ;
	float angle;

	weaveXY = special2 >> 16;
	weaveZ = special2 & 0xFFFF;
	angle = AngleMod360(angles.yaw + 90.0);
	newX = origin.x - cos(angle) * FloatBobOffsets[weaveXY] * 2.0;
	newY = origin.y - sin(angle) * FloatBobOffsets[weaveXY] * 2.0;
	weaveXY = (weaveXY + 2) & 63;
	newX += cos(angle) * FloatBobOffsets[weaveXY] * 2.0;
	newY += sin(angle) * FloatBobOffsets[weaveXY] * 2.0;
	P_TryMove(this, newX, newY);
	origin.z -= FloatBobOffsets[weaveZ];
	weaveZ = (weaveZ + 2) & 63;
	origin.z += FloatBobOffsets[weaveZ];
	special2 = weaveZ + (weaveXY << 16);
}

//============================================================================
//
//	Actor::A_BishopMissileSeek
//
//============================================================================

void Actor::A_BishopMissileSeek(void)
{
	SeekerMissile(this, 2.0, 3.0);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
