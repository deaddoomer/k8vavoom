//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//**************************************************************************
//
//	Bishop
//
//**************************************************************************
//**************************************************************************

class Bishop:Pawn
	__mobjinfo__(114)
{

int BlurState;
int NumToSpawn;		//	Number of blurs/missiles to spawn
int WeaveIndex;		//	Index into floatbob

//==========================================================================
//
//  A_BishopDecide
//
//==========================================================================

void A_BishopDecide(void)
{
	if (P_Random() < 220)
	{
		return;
	}
	else
	{
		SetState(BlurState);
	}
}

//==========================================================================
//
//  A_BishopDoBlur
//
//==========================================================================

void A_BishopDoBlur(void)
{
	NumToSpawn = (P_Random() & 3) + 3;	// P_Random number of blurs
	if (P_Random() < 120)
	{
		Thrust(AngleMod360(Angles.yaw + 90.0), 11.0);
	}
	else if (P_Random() > 125)
	{
		Thrust(AngleMod360(Angles.yaw - 90.0), 11.0);
	}
	else
	{
		// Thrust forward
		Thrust(Angles.yaw, 11.0);
	}
	PlaySound('BishopBlur', CHAN_VOICE);
}

//==========================================================================
//
//	A_BishopSpawnBlur
//
//==========================================================================

void A_BishopSpawnBlur(void)
{
	Actor blur;

	if (!--NumToSpawn)
	{
		Velocity.x = 0.0;
		Velocity.y = 0.0;
		if (P_Random() > 96)
		{
			SetState(SeeState);
		}
		else
		{
			SetState(MissileState);
		}
	}
	blur = Spawn(BishopBlur, Origin);
	if (blur)
	{
		blur.Angles = Angles;
	}
}

//==========================================================================
//
//	A_BishopChase
//
//==========================================================================

void A_BishopChase(void)
{
	Origin.z -= FloatBobOffsets[WeaveIndex] / 2.0;
	WeaveIndex = (WeaveIndex + 4) & 63;
	Origin.z += FloatBobOffsets[WeaveIndex] / 2.0;
}

//==========================================================================
//
//	A_BishopAttack
//
//==========================================================================

void A_BishopAttack(void)
{
	if (!Target)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
		return;
	}
	NumToSpawn = (P_Random() & 3) + 5;
}

//==========================================================================
//
//  A_BishopAttack2
//
//  Spawns one of a string of bishop missiles
//
//==========================================================================

void A_BishopAttack2(void)
{
	Actor mo;

	if (!Target || !NumToSpawn)
	{
		NumToSpawn = 0;
		SetState(SeeState);
		return;
	}
	mo = SpawnMissile(Target, BishopMissile);
	if (mo)
	{
		mo.Target = Target;
		mo._Special2 = 16;	// High word == x/y, Low word == z
	}
	NumToSpawn--;
}

//==========================================================================
//
//  A_BishopPainBlur
//
//==========================================================================

void A_BishopPainBlur(void)
{
	Actor blur;

	if (P_Random() < 64)
	{
		SetState(BlurState);
		return;
	}
	blur = Spawn(BishopPainBlur,
		Origin + vector((Random() - Random()) * 16.0,
		(Random() - Random()) * 16.0, (Random() - Random()) * 8.0));
	if (blur)
	{
		blur.Angles = Angles;
	}
}

//==========================================================================
//
//	A_BishopPuff
//
//==========================================================================

void A_BishopPuff(void)
{
	Actor puff;

	puff = Spawn(BishopPuff, Origin + vector(0.0, 0.0, 40.0));
	if (puff)
	{
		puff.Velocity.z = 0.5 * 35.0;
	}
}

__states__
{
	S_BISHOP_LOOK1('BISH', 0, 10.0 / 35.0, S_BISHOP_LOOK1) { A_Look(); }
	S_BISHOP_DECIDE('BISH', 0, 1.0 / 35.0, S_BISHOP_WALK1) { A_BishopDecide(); }
	S_BISHOP_BLUR1('BISH', 0, 2.0 / 35.0, S_BISHOP_BLUR2) { A_BishopDoBlur(); }
	S_BISHOP_BLUR2('BISH', 0, 4.0 / 35.0, S_BISHOP_BLUR2) { A_BishopSpawnBlur(); }
	S_BISHOP_WALK1('BISH', 0, 2.0 / 35.0, S_BISHOP_WALK2) { A_Chase(); }
	S_BISHOP_WALK2('BISH', 0, 2.0 / 35.0, S_BISHOP_WALK3) { A_BishopChase(); }
	S_BISHOP_WALK3('BISH', 0, 2.0 / 35.0, S_BISHOP_WALK4) { }
	S_BISHOP_WALK4('BISH', 1, 2.0 / 35.0, S_BISHOP_WALK5) { A_BishopChase(); }
	S_BISHOP_WALK5('BISH', 1, 2.0 / 35.0, S_BISHOP_WALK6) { A_Chase(); }
	S_BISHOP_WALK6('BISH', 1, 2.0 / 35.0, S_BISHOP_DECIDE) { A_BishopChase(); }
	S_BISHOP_ATK1('BISH', 0, 3.0 / 35.0, S_BISHOP_ATK2) { A_FaceTarget(); }
	S_BISHOP_ATK2('BISH', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_BISHOP_ATK3) { A_FaceTarget(); }
	S_BISHOP_ATK3('BISH', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_BISHOP_ATK4) { A_FaceTarget(); }
	S_BISHOP_ATK4('BISH', 5 | FF_FULLBRIGHT, 3.0 / 35.0, S_BISHOP_ATK5) { A_BishopAttack(); }
	S_BISHOP_ATK5('BISH', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_BISHOP_ATK5) { A_BishopAttack2(); }
	S_BISHOP_PAIN1('BISH', 2, 6.0 / 35.0, S_BISHOP_PAIN2) { A_Pain(); }
	S_BISHOP_PAIN2('BISH', 2, 6.0 / 35.0, S_BISHOP_PAIN3) { A_BishopPainBlur(); }
	S_BISHOP_PAIN3('BISH', 2, 6.0 / 35.0, S_BISHOP_PAIN4) { A_BishopPainBlur(); }
	S_BISHOP_PAIN4('BISH', 2, 6.0 / 35.0, S_BISHOP_PAIN5) { A_BishopPainBlur(); }
	S_BISHOP_PAIN5('BISH', 2, 0.0 / 35.0, S_BISHOP_WALK1) { }
	S_BISHOP_DEATH1('BISH', 6, 6.0 / 35.0, S_BISHOP_DEATH2) { }
	S_BISHOP_DEATH2('BISH', 7 | FF_FULLBRIGHT, 6.0 / 35.0, S_BISHOP_DEATH3) { A_Scream(); }
	S_BISHOP_DEATH3('BISH', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_BISHOP_DEATH4) { A_NoBlocking(); }
	S_BISHOP_DEATH4('BISH', 9 | FF_FULLBRIGHT, 5.0 / 35.0, S_BISHOP_DEATH5) { A_Explode(); }
	S_BISHOP_DEATH5('BISH', 10 | FF_FULLBRIGHT, 5.0 / 35.0, S_BISHOP_DEATH6) { }
	S_BISHOP_DEATH6('BISH', 11 | FF_FULLBRIGHT, 4.0 / 35.0, S_BISHOP_DEATH7) { }
	S_BISHOP_DEATH7('BISH', 12 | FF_FULLBRIGHT, 4.0 / 35.0, S_BISHOP_DEATH8) { }
	S_BISHOP_DEATH8('BISH', 13, 4.0 / 35.0, S_BISHOP_DEATH9) { A_BishopPuff(); }
	S_BISHOP_DEATH9('BISH', 14, 4.0 / 35.0, S_BISHOP_DEATH10) { A_QueueCorpse(); }
	S_BISHOP_DEATH10('BISH', 15, -1.0, S_NULL) { }
	S_BISHOP_ICE('BISH', 23, 5.0 / 35.0, S_BISHOP_ICE2) { A_FreezeDeath(); }
	S_BISHOP_ICE2('BISH', 23, 1.0 / 35.0, S_BISHOP_ICE2) { A_FreezeDeathChunks(); }
}

defaultproperties
{
	Health = 130;
	Radius = 22.0;
	Height = 65.0;
	Mass = 100.0;
	StepSpeed = 10.0;
	PainChance = 110;
	bNoGravity = true;
	bFloat = true;
	bNoBlood = true;
	bFloorClip = false;
	bActivateMCross = false;
	SpawnState = S_BISHOP_LOOK1;
	BlurState = S_BISHOP_BLUR1;
	SeeState = S_BISHOP_WALK1;
	MissileState = S_BISHOP_ATK1;
	PainState = S_BISHOP_PAIN1;
	DeathState = S_BISHOP_DEATH1;
	IceDeathState = S_BISHOP_ICE;
	SightSound = 'BishopSight';
	ActiveSound = 'BishopActive';
	AttackSound = 'BishopAttack';
	PainSound = 'BishopPain';
	DeathSound = 'BishopDeath';
}

}

//**************************************************************************
//**************************************************************************

//==========================================================================
//
//	Actor::A_SetAltShadow
//
//==========================================================================

void Actor::A_SetAltShadow(void)
{
	Translucency = 33;
}

//==========================================================================
//
//	Actor::A_BishopMissileWeave
//
//==========================================================================

void Actor::A_BishopMissileWeave(void)
{
	float newX, newY;
	int weaveXY, weaveZ;
	float angle;

	weaveXY = _Special2 >> 16;
	weaveZ = _Special2 & 0xFFFF;
	angle = AngleMod360(Angles.yaw + 90.0);
	newX = Origin.x - cos(angle) * FloatBobOffsets[weaveXY] * 2.0;
	newY = Origin.y - sin(angle) * FloatBobOffsets[weaveXY] * 2.0;
	weaveXY = (weaveXY + 2) & 63;
	newX += cos(angle) * FloatBobOffsets[weaveXY] * 2.0;
	newY += sin(angle) * FloatBobOffsets[weaveXY] * 2.0;
	TryMove(newX, newY);
	Origin.z -= FloatBobOffsets[weaveZ];
	weaveZ = (weaveZ + 2) & 63;
	Origin.z += FloatBobOffsets[weaveZ];
	_Special2 = weaveZ + (weaveXY << 16);
}

//==========================================================================
//
//	Actor::A_BishopMissileSeek
//
//==========================================================================

void Actor::A_BishopMissileSeek(void)
{
	SeekerMissile(2.0, 3.0);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.21  2002/03/16 17:47:46  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.20  2002/03/02 17:58:36  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.19  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.18  2002/02/22 18:00:20  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.17  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.16  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.15  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
