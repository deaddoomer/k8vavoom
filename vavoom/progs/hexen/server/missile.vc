//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::CheckMissileSpawn
//
//  Returns true if the missile is at a valid spawn point, otherwise
// explodes it and returns false.
//
//==========================================================================

boolean Actor::CheckMissileSpawn(void)
{
	// move a little forward so an angle can be computed if it
	// immediately explodes
	Origin += Velocity * 0.0142857143;
	if (!P_TryMove(this, Origin.x, Origin.y))
	{
		ExplodeMissile();
		return false;
	}
	return true;
}

//==========================================================================
//
//  Actor::SpawnMissile
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a mobj_t pointer to the missile.
//
//==========================================================================

Actor Actor::SpawnMissile(Actor dest, classid type)
{
	Actor th;
	TVec org;
	TVec dir;

	org = Origin;
	switch (type)
	{
	case MinotaurMissile:	// Minotaur swing attack missile
		org.z = Origin.z + 40.0;
		break;
	case MinotaurFloorFire1:	// Minotaur floor fire missile
		org.z = ONFLOORZ + FloorClip;
		break;
	case CentaurMissile:
		org.z = Origin.z + 45.0;
		break;
	case IceGuyMissile:
		org.z = Origin.z + 40.0;
		break;
	case HolyMissile:
		org.z = Origin.z + 40.0;
		break;
	default:
		org.z = Origin.z + 32.0;
		break;
	}
	org.z -= FloorClip;
	th = SpawnActor(org, type);
	if (th.SightSound)
	{
		th.PlaySound(th.SightSound, CHAN_VOICE);
	}
	th.Owner = self;	// Originator
	dir = dest.Origin - Origin;
	if (dest.Translucency)
	{
		// Invisible target
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0);
	}
	dir = Normalize(dir);
	th.Velocity = dir * th.Speed;
	VectorAngles(&dir, &th.Angles);
	return th.CheckMissileSpawn() ? th : none;
}

//==========================================================================
//
//  Actor::SpawnMissileXYZ
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a mobj_t pointer to the missile.
//
//==========================================================================

Actor Actor::SpawnMissileXYZ(TVec org, Actor dest, classid type)
{
	TVec dir;
	Actor th;

	org.z -= FloorClip;
	th = SpawnActor(org, type);
	if (th.SightSound)
	{
		th.PlaySound(th.SightSound, CHAN_VOICE);
	}
	th.Owner = self;	// Originator
	dir = dest.Origin - Origin;
	if (dest.Translucency)
	{
		// Invisible target
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0);
	}
	dir = Normalize(dir);
	th.Velocity = dir * th.Speed;
	VectorAngles(&dir, &th.Angles);
	return th.CheckMissileSpawn() ? th : none;
}

//==========================================================================
//
//  Actor::SpawnMissileAngle
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a mobj_t pointer to the missile.
//
//==========================================================================

Actor Actor::SpawnMissileAngle(classid type, float angle, float momz)
{
	TVec org;
	Actor mo;

	org = Origin;
	switch (type)
	{
	case MinotaurMissile:	// Minotaur swing attack missile
		org.z = Origin.z + 40.0;
		break;
	case MinotaurFloorFire1:	// Minotaur floor fire missile
		org.z = ONFLOORZ + FloorClip;
		break;
	case IceGuyMissile2:	// Secondary Projectiles of the Ice Guy
		org.z = Origin.z + 3.0;
		break;
	case MageStaffFX2:
		org.z = Origin.z + 40.0;
		break;
	default:
		org.z = Origin.z + 32.0;
		break;
	}
	org.z -= FloorClip;
	mo = SpawnActor(org, type);
	if (mo.SightSound)
	{
		mo.PlaySound(mo.SightSound, CHAN_VOICE);
	}
	mo.Owner = self;	// Originator
	mo.Angles.yaw = angle;
	mo.Velocity.x = mo.Speed * cos(angle);
	mo.Velocity.y = mo.Speed * sin(angle);
	mo.Velocity.z = momz;
	return mo.CheckMissileSpawn() ? mo : none;
}

//==========================================================================
//
//  Actor::SpawnMissileAngleSpeed
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a mobj_t pointer to the missile.
//
//==========================================================================

Actor Actor::SpawnMissileAngleSpeed(classid type, float angle,
	float momz, float speed)
{
	TVec org;
	Actor mo;

	org = Origin;
	org.z -= FloorClip;
	mo = SpawnActor(org, type);
	mo.Owner = self;	// Originator
	mo.Angles.yaw = angle;
	mo.Velocity.x = speed * cos(angle);
	mo.Velocity.y = speed * sin(angle);
	mo.Velocity.z = momz;
	return mo.CheckMissileSpawn() ? mo : none;
}

//============================================================================
//
//  Actor::SpawnKoraxMissile
//
//============================================================================

Actor Actor::SpawnKoraxMissile(TVec org, Actor dest, classid type)
{
	TVec dir;
	Actor th;

	org.z -= FloorClip;
	th = SpawnActor(org, type);
	if (th.SightSound)
	{
		th.PlaySound(th.SightSound, CHAN_VOICE);
	}
	th.Owner = self;	// Originator
	dir = dest.Origin - org;
	if (dest.Translucency)
	{
		// Invisible target
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0);
	}
	dir = Normalize(dir);
	th.Velocity = dir * th.Speed;
	VectorAngles(&dir, &th.Angles);
	return th.CheckMissileSpawn() ? th : none;
}

//==========================================================================
//
//  Actor::SeekerMissile
//
//  The missile specialmobj1 field must be mobj_t Enemy.  Returns true if
// target was tracked, false if not.
//
//==========================================================================

boolean Actor::SeekerMissile(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;
	mobj_t *target;

	target = SpecialMobj1;
	if (!target)
	{
		return false;
	}
	if (!target->bShootable)
	{
		// Target died
		SpecialMobj1 = NULL;
		return false;
	}
	dir = FaceActor(*target, &delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw += delta;
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw -= delta;
	}
	Angles.yaw = AngleMod360(Angles.yaw);
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);
	if (Origin.z + Height < target->Origin.z ||
		target->Origin.z + target->Height < Origin.z)
	{
		// Need to seek vertically
		dist = MobjDist2(*target, self);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = (target->Origin.z + target->Height / 2.0 -
			Origin.z - Height / 2.0) / dist;
	}
	return true;
}

//==========================================================================
//
//  Actor::SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor Actor::SpawnPlayerMissile(classid type)
{
	Actor MissileMobj;
	TAVec angles;
	TVec vforward;
	TVec org;

	// Try to find a target
	avcpy(Angles, angles);
	AimLineAttack(this, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(this, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(this, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = Angles.yaw;
			}
		}
	}
	org = Origin;
	if (type == LightningFloor)
	{
		org.z = ONFLOORZ;
		angles.pitch = 0.0;
	}
	else if (type == LightningCeiling)
	{
		org.z = ONCEILINGZ;
		angles.pitch = 0.0;
	}
	else
	{
		org.z = Origin.z + 4.0 * 8.0 - tan(Angles.pitch);
		org.z -= FloorClip;
	}
	MissileMobj = SpawnActor(org, type);
	MissileMobj.Owner = self;
	avcpy(angles, MissileMobj.Angles);
	AngleVector(&angles, &vforward);
	MissileMobj.Velocity = vforward * MissileMobj.Speed;
	if (MissileMobj.Class == MageWandMissile ||
		MissileMobj.Class == ClericFlameMissile)
	{
		// Ultra-fast ripper spawning missile
		MissileMobj.Origin += MissileMobj.Velocity * frametime / 8.0;
	}
	else
	{
		// Normal missile
		MissileMobj.Origin += MissileMobj.Velocity * frametime / 2.0;
	}
	if (!P_TryMove(&MissileMobj, MissileMobj.Origin.x, MissileMobj.Origin.y))
	{
		// Exploded immediately
		MissileMobj.ExplodeMissile();
		return none;
	}
	return MissileMobj;
}

//===========================================================================
//
//  Actor::SpawnPlayerMissileAngle
//
//===========================================================================

Actor Actor::SpawnPlayerMissileAngle(classid type, float angle)
{
	TAVec angles;
	TVec vforward;
	Actor th;
	TVec org;

	//
	// see which target is to be aimed at
	//
	angles = Angles;
	angles.yaw = angle;
	AimLineAttack(this, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(this, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(this, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	org = Origin;
	org.z = Origin.z + 4.0 * 8.0 - tan(Angles.pitch);
	org.z -= FloorClip;
	th = SpawnActor(org, type);
	th.Owner = self;
	th.Angles = angles;
	AngleVector(&angles, &vforward);
	th.Velocity = vforward * th.Speed;
	return th.CheckMissileSpawn() ? th : none;
}

//===========================================================================
//
//  Actor::SpawnPlayerMissileAngleXYZ
//
//===========================================================================

Actor Actor::SpawnPlayerMissileAngleXYZ(TVec org, classid type, float angle)
{
	Actor th;
	TAVec angles;
	TVec vforward;

	//
	// see which target is to be aimed at
	//
	angles = Angles;
	angles.yaw = angle;
	AimLineAttack(this, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(this, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(this, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	org.z += 4.0 * 8.0 - tan(Angles.pitch);
	org.z -= FloorClip;
	th = SpawnActor(org, type);
	th.Owner = self;
	th.Angles = angles;
	AngleVector(&angles, &vforward);
	th.Velocity = vforward * th.Speed;
	return th.CheckMissileSpawn() ? th : none;
}

//==========================================================================
//
//  Actor::ExplodeMissile
//
//==========================================================================

boolean Actor::ExplodeMissile(void)
{
	Velocity = vector(0.0, 0.0, 0.0);
	if (!SetState(DeathState))
	{
		return false;
	}
	//mo->tics -= P_Random()&3;
	bMissile = false;

	switch (Class)
	{
	case SorcererBall1:
	case SorcererBall2:
	case SorcererBall3:
		PlayFullVolumeSound('SorcererBigBallExplode', CHAN_AUTO);
		break;
	case SorcererFX1:
		PlayFullVolumeSound('SorcererHeadScream', CHAN_AUTO);
		break;
	default:
		if (DeathSound)
		{
			PlaySound(DeathSound, CHAN_VOICE);
		}
		break;
	}
	if (Effects & EF_DLIGHT_MASK)
	{
		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion);
		MSG_WriteByte(Effects & EF_DLIGHT_MASK);
		MSG_WriteShort(ftoi(Origin.x));
		MSG_WriteShort(ftoi(Origin.y));
		MSG_WriteShort(ftoi(Origin.z));
		Effects &= ~EF_DLIGHT_MASK;
	}
	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.21  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.20  2002/02/22 18:00:22  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.19  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.18  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.17  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.12  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.11  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.10  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.8  2001/12/01 18:14:09  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.7  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
