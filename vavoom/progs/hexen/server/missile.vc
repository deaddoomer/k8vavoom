//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

boolean P_ExplodeMissile(Missile * mo);

// DATA DECLARATIONS -------------------------------------------------------

Missile *MissileMobj;

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  CheckMissileSpawn
//
//  Returns true if the missile is at a valid spawn point, otherwise
// explodes it and returns false.
//
//==========================================================================

int CheckMissileSpawn(Missile * missile)
{
	// move a little forward so an angle can be computed if it
	// immediately explodes
	missile->origin += missile->velocity * 0.0142857143;
	if (!P_TryMove(missile, missile->origin.x, missile->origin.y))
	{
		P_ExplodeMissile(missile);
		return false;
	}
	return true;
}

//==========================================================================
//
//  SpawnMissile
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Missile pointer to the missile.
//
//==========================================================================

Missile *SpawnMissile(mobj_t * source, mobj_t * dest, int type)
{
	float z;
	Missile *th;
	TVec dir;

	switch (type)
	{
	case MT_MNTRFX1:	// Minotaur swing attack missile
		z = source->origin.z + 40.0;
		break;
	case MT_MNTRFX2:	// Minotaur floor fire missile
		z = ONFLOORZ + source->floorclip;
		break;
	case MT_CENTAUR_FX:
		z = source->origin.z + 45.0;
		break;
	case MT_ICEGUY_FX:
		z = source->origin.z + 40.0;
		break;
	case MT_HOLY_MISSILE:
		z = source->origin.z + 40.0;
		break;
	default:
		z = source->origin.z + 32.0;
		break;
	}
	z -= source->floorclip;
	th = (Missile *)P_SpawnMobj(source->origin.x, source->origin.y, z, type);
	if (th->sound_sight)
	{
		StartSound(th, th->sound_sight, CHAN_VOICE);
	}
	th->target = source;	// Originator
	dir = dest->origin - source->origin;
	if (dest->translucency)
	{	// Invisible target
		VectorRotateAroundZ(&dir, (P_Random() - P_Random()) << 21);
	}
	dir = Normalize(dir);
	th->velocity = dir * th->speed;
	VectorAngles(&dir, &th->angles);
	return (CheckMissileSpawn(th) ? th : NULL);
}

//==========================================================================
//
//  SpawnMissileXYZ
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Missile pointer to the missile.
//
//==========================================================================

Missile *SpawnMissileXYZ(float x, float y, float z, mobj_t * source,
	mobj_t * dest, int type)
{
	TVec dir;
	Missile *th;

	z -= source->floorclip;
	th = (Missile *)P_SpawnMobj(x, y, z, type);
	if (th->sound_sight)
	{
		StartSound(th, th->sound_sight, CHAN_VOICE);
	}
	th->target = source;	// Originator
	dir = dest->origin - source->origin;
	if (dest->translucency)
	{	// Invisible target
		VectorRotateAroundZ(&dir, (P_Random() - P_Random()) << 21);
	}
	dir = Normalize(dir);
	th->velocity = dir * th->speed;
	VectorAngles(&dir, &th->angles);
	return (CheckMissileSpawn(th) ? th : NULL);
}

//==========================================================================
//
//  SpawnMissileAngle
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Missile pointer to the missile.
//
//==========================================================================

Missile *SpawnMissileAngle(mobj_t * source, int type, angle_t angle,
	float momz)
{
	float z;
	Missile *mo;

	switch (type)
	{
	case MT_MNTRFX1:	// Minotaur swing attack missile
		z = source->origin.z + 40.0;
		break;
	case MT_MNTRFX2:	// Minotaur floor fire missile
		z = ONFLOORZ + source->floorclip;
		break;
	case MT_ICEGUY_FX2:	// Secondary Projectiles of the Ice Guy
		z = source->origin.z + 3.0;
		break;
	case MT_MSTAFF_FX2:
		z = source->origin.z + 40.0;
		break;
	default:
		z = source->origin.z + 32.0;
		break;
	}
	z -= source->floorclip;
	mo = (Missile *)P_SpawnMobj(source->origin.x, source->origin.y, z, type);
	if (mo->sound_sight)
	{
		StartSound(mo, mo->sound_sight, CHAN_VOICE);
	}
	mo->target = source;	// Originator
	mo->angles.yaw = angle;
	mo->velocity.x = mo->speed * cos(angle);
	mo->velocity.y = mo->speed * sin(angle);
	mo->velocity.z = momz * 35.0;
	return (CheckMissileSpawn(mo) ? mo : NULL);
}

//==========================================================================
//
//  SpawnMissileAngleSpeed
//
//  Returns NULL if the missile exploded immediately, otherwise returns
// a Missile pointer to the missile.
//
//==========================================================================

Missile *SpawnMissileAngleSpeed(mobj_t * source, int type, angle_t angle,
	float momz, float ticspeed)
{
	float z;
	Missile *mo;

	z = source->origin.z;
	z -= source->floorclip;
	mo = (Missile *)P_SpawnMobj(source->origin.x, source->origin.y, z, type);
	if (mo->sound_sight)
	{
		//StartSound(mo, mo->info->seesound);
	}
	mo->target = source;	// Originator
	mo->angles.yaw = angle;
	mo->velocity.x = ticspeed * cos(angle) * 35.0;
	mo->velocity.y = ticspeed * sin(angle) * 35.0;
	mo->velocity.z = momz * 35.0;
	return (CheckMissileSpawn(mo) ? mo : NULL);
}

//============================================================================
//
//  SpawnKoraxMissile
//
//============================================================================

Missile *SpawnKoraxMissile(float x, float y, float z,
	mobj_t * source, mobj_t * dest, int type)
{
	TVec dir;
	Missile *th;

	z -= source->floorclip;
	th = (Missile *)P_SpawnMobj(x, y, z, type);
	if (th->sound_sight)
	{
		StartSound(th, th->sound_sight, CHAN_VOICE);
	}
	th->target = source;	// Originator
	dir = dest->origin - vector(x, y, z);
	if (dest->translucency)
	{	// Invisible target
		VectorRotateAroundZ(&dir, (P_Random() - P_Random()) << 21);
	}
	dir = Normalize(dir);
	th->velocity = dir * th->speed;
	VectorAngles(&dir, &th->angles);
	return (CheckMissileSpawn(th) ? th : NULL);
}

//==========================================================================
//
//  SeekerMissile
//
//  The missile specialmobj1 field must be Missile *target.  Returns true if
// target was tracked, false if not.
//
//==========================================================================

boolean SeekerMissile(Missile * actor, angle_t thresh, angle_t turnMax)
{
	int dir;
	float dist;
	angle_t delta;
	angle_t angle;
	Missile *target;

	target = (Missile *)actor->specialmobj1;
	if (!target)
	{
		return false;
	}
	if (!(target->flags & MF_SHOOTABLE))
	{
		// Target died
		actor->specialmobj1 = NULL;
		return false;
	}
	dir = P_FaceMobj(actor, target, &delta);
	if (delta > thresh)
	{
		delta >>= 1;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		actor->angles.yaw += delta;
	}
	else
	{
		// Turn counter clockwise
		actor->angles.yaw -= delta;
	}
	angle = actor->angles.yaw;
	actor->velocity.x = actor->speed * cos(angle);
	actor->velocity.y = actor->speed * sin(angle);
	if (actor->origin.z + actor->height < target->origin.z ||
		target->origin.z + target->height < actor->origin.z)
	{
		// Need to seek vertically
		dist = MobjDist2(target, actor);
		dist = dist / actor->speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		actor->velocity.z = (target->origin.z + target->height / 2.0 -
			actor->origin.z - actor->height / 2.0) / dist;
	}
	return true;
}

//==========================================================================
//
//  SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Missile *SpawnPlayerMissile(mobj_t * source, int type)
{
	TBAMVec angles;
	TVec vforward;
	float x, y, z;

	// Try to find a target
	avcpy(source->angles, angles);
	AimLineAttack(source, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw += 1 << 26;
		AimLineAttack(source, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw -= 2 << 26;
			AimLineAttack(source, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = source->angles.yaw;
			}
		}
	}
	x = source->origin.x;
	y = source->origin.y;
	if (type == MT_LIGHTNING_FLOOR)
	{
		z = ONFLOORZ;
		angles.pitch = 0;
	}
	else if (type == MT_LIGHTNING_CEILING)
	{
		z = ONCEILINGZ;
		angles.pitch = 0;
	}
	else
	{
		z = source->origin.z + 4.0 * 8.0 - tan(source->angles.pitch);
		z -= source->floorclip;
	}
	MissileMobj = (Missile *)P_SpawnMobj(x, y, z, type);
	if (MissileMobj->sound_sight)
	{
		//StartSound(MissileMobj, MissileMobj->info->seesound);
	}
	MissileMobj->target = source;
	avcpy(angles, MissileMobj->angles);
	AngleVector(&angles, &vforward);
	MissileMobj->velocity = vforward * MissileMobj->speed;
	if (MissileMobj->type == MT_MWAND_MISSILE ||
		MissileMobj->type == MT_CFLAME_MISSILE)
	{
		// Ultra-fast ripper spawning missile
		MissileMobj->origin.x += MissileMobj->velocity.x * frametime / 8.0;
		MissileMobj->origin.y += MissileMobj->velocity.y * frametime / 8.0;
		MissileMobj->origin.z += MissileMobj->velocity.z * frametime / 8.0;
	}
	else
	{
		// Normal missile
		MissileMobj->origin.x += MissileMobj->velocity.x * frametime / 2.0;
		MissileMobj->origin.y += MissileMobj->velocity.y * frametime / 2.0;
		MissileMobj->origin.z += MissileMobj->velocity.z * frametime / 2.0;
	}
	if (!P_TryMove(MissileMobj, MissileMobj->origin.x, MissileMobj->origin.y))
	{
		// Exploded immediately
		P_ExplodeMissile(MissileMobj);
		return NULL;
	}
	return MissileMobj;
}

//===========================================================================
//
//  SpawnPlayerMissileAngle
//
//===========================================================================

Missile *SpawnPlayerMissileAngle(mobj_t * source, int type, angle_t angle)
{
	TBAMVec angles;
	TVec vforward;
	Missile *th;
	float x, y, z;

	//
	// see which target is to be aimed at
	//
	avcpy(source->angles, angles);
	angles.yaw = angle;
	AimLineAttack(source, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw += 1 << 26;
		AimLineAttack(source, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw -= 2 << 26;
			AimLineAttack(source, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	x = source->origin.x;
	y = source->origin.y;
	z = source->origin.z + 4.0 * 8.0 - tan(source->angles.pitch);
	z -= source->floorclip;
	th = (Missile *)P_SpawnMobj(x, y, z, type);
//  if(th->info->seesound)
//  {
//      StartSound(th, th->info->seesound);
//  }
	th->target = source;
	avcpy(angles, th->angles);
	AngleVector(&angles, &vforward);
	th->velocity = vforward * th->speed;
	return (CheckMissileSpawn(th) ? th : NULL);
}

//===========================================================================
//
//  SpawnPlayerMissileAngleXYZ
//
//===========================================================================

Missile *SpawnPlayerMissileAngleXYZ(mobj_t * source, float x, float y, float z,
	int type, angle_t angle)
{
	Missile *th;
	TBAMVec angles;
	TVec vforward;

	//
	// see which target is to be aimed at
	//
	avcpy(source->angles, angles);
	angles.yaw = angle;
	AimLineAttack(source, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw += 1 << 26;
		AimLineAttack(source, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw -= 2 << 26;
			AimLineAttack(source, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	z += 4.0 * 8.0 - tan(source->angles.pitch);
	z -= source->floorclip;
	th = (Missile *)P_SpawnMobj(x, y, z, type);
//  if(th->info->seesound)
//  {
//      StartSound(th, th->info->seesound);
//  }
	th->target = source;
	avcpy(angles, th->angles);
	AngleVector(&angles, &vforward);
	th->velocity = vforward * th->speed;
	return (CheckMissileSpawn(th) ? th : NULL);
}

//==========================================================================
//
//  P_ExplodeMissile
//
//==========================================================================

boolean P_ExplodeMissile(Missile * mo)
{
	if (!(mo->flags & MF_MISSILE))
	{
		//	Already exploded
		return true;
	}

	mo->velocity = vector(0.0, 0.0, 0.0);
	if (!SetMobjState(mo, mo->deathstate))
	{
		return false;
	}
	//mo->tics -= P_Random()&3;
	mo->flags &= ~MF_MISSILE;

	switch (mo->type)
	{
	case MT_SORCBALL1:
	case MT_SORCBALL2:
	case MT_SORCBALL3:
		StartSoundName(NULL, "SorcererBigBallExplode", CHAN_AUTO);
		break;
	case MT_SORCFX1:
		StartSoundName(NULL, "SorcererHeadScream", CHAN_AUTO);
		break;
	default:
		if (mo->sound_death)
		{
			StartSound(mo, mo->sound_death, CHAN_VOICE);
		}
		break;
	}
	if (mo->effects & EF_DLIGHT_MASK)
	{
		MSG_Select(MSG_SV_DATAGRAM, NULL);
		MSG_WriteByte(svc_explosion);
		MSG_WriteByte(mo->effects & EF_DLIGHT_MASK);
		MSG_WriteShort(ftoi(mo->origin.x));
		MSG_WriteShort(ftoi(mo->origin.y));
		MSG_WriteShort(ftoi(mo->origin.z));
		mo->effects &= ~EF_DLIGHT_MASK;
	}
	return true;
}

//**************************************************************************
//
//  BOUNCING
//
//  Bounce missile against walls
//
//**************************************************************************

//============================================================================
//
//  PTR_BounceTraverse
//
//============================================================================

boolean PTR_BounceTraverse(intercept_t * in)
{
	line_t *li;
	TVec hit_point;
	opening_t *open;

	if (!in->isaline)
		Error("PTR_BounceTraverse: not a line?");

	li = in->line;
	if (li->flags & ML_TWOSIDED)
	{
		hit_point = slideorg + in->frac * slidedir;
		open = LineOpenings(li, hit_point);	// set openrange, opentop, openbottom
		open =
			FindOpening(open, slidemo->origin.z,
			slidemo->origin.z + slidemo->height);
		if (open && open->range >= slidemo->height &&	// fits
			open->top - slidemo->origin.z >= slidemo->height)	// mobj is not too high
		{
			return true;	// this line doesn't block movement
		}
	}
	else
	{
		if (PointOnPlaneSide(slidemo->origin, li))
		{
			return true;	// don't hit the back side
		}
	}

	// the line does block movement, see if it is closer than best so far
	if (in->frac < bestslidefrac)
	{
		secondslidefrac = bestslidefrac;
		secondslideline = bestslideline;
		bestslidefrac = in->frac;
		bestslideline = li;
	}
	return false;	// stop
}

//============================================================================
//
//  P_BounceWall
//
//============================================================================

void P_BounceWall(Missile * mo)
{
	float leadx, leady;

	slidemo = mo;

	//
	// trace along the three leading corners
	//
	if (mo->velocity.x > 0.0)
	{
		leadx = mo->origin.x + mo->radius;
	}
	else
	{
		leadx = mo->origin.x - mo->radius;
	}
	if (mo->velocity.y > 0.0)
	{
		leady = mo->origin.y + mo->radius;
	}
	else
	{
		leady = mo->origin.y - mo->radius;
	}
	bestslidefrac = 1.00001;
	slideorg = vector(leadx, leady, slidemo->origin.z);
	slidedir = mo->velocity * frametime;
	P_PathTraverse(leadx, leady, leadx + slidedir.x, leady + slidedir.y,
		PT_ADDLINES, PTR_BounceTraverse);
	mo->velocity =
		ClipVelocity(mo->velocity * 0.75, bestslideline->normal, 2.0);
}

//==========================================================================
//
//	Missile::BlasterPhysics
//
//==========================================================================

boolean Missile::BlasterPhysics(void)
{
	int i;
	float xfrac;
	float yfrac;
	float zfrac;
	float z;
	boolean changexy;
	mobj_t *mo;

	// Handle movement
	if (velocity.x || velocity.y || (origin.z != floorz) || velocity.z)
	{
		xfrac = velocity.x * frametime / 8.0;
		yfrac = velocity.y * frametime / 8.0;
		zfrac = velocity.z * frametime / 8.0;
		changexy = xfrac || yfrac;
		for (i = 0; i < 8; i++)
		{
			if (changexy)
			{
				if (!P_TryMove(this, origin.x + xfrac, origin.y + yfrac))
				{
					// Blocked move
					return P_ExplodeMissile(this);
				}
			}
			origin.z += zfrac;
			if (origin.z <= floorz)
			{
				// Hit the floor
				origin.z = floorz;
				P_HitFloor(this);
				return P_ExplodeMissile(this);
			}
			if (origin.z + height > ceilingz)
			{
				// Hit the ceiling
				origin.z = ceilingz - height;
				return P_ExplodeMissile(this);
			}
			if (changexy)
			{
				if (type == MT_MWAND_MISSILE && (P_Random() < 128))
				{
					z = origin.z - 8.0;
					if (z < floorz)
					{
						z = floorz;
					}
					P_SpawnMobj(origin.x, origin.y, z, MT_MWANDSMOKE);
				}
				else if (type != MT_MWAND_MISSILE && !--special1)
				{
					special1 = 4;
					z = origin.z - 12.0;
					if (z < floorz)
					{
						z = floorz;
					}
					mo = P_SpawnMobj(origin.x, origin.y, z, MT_CFLAMEFLOOR);
					if (mo)
					{
						mo->angles.yaw = angles.yaw;
					}
				}
			}
		}
	}
	return true;
}

//==========================================================================
//
//	Missile::XYMovement
//
//==========================================================================

boolean Missile::XYMovement(void)
{
	float ptryx, ptryy;
	float xmove, ymove;
	angle_t angle;

	if (!velocity.x && !velocity.y)
	{
		return true;
	}
	if (velocity.x > MAXMOVE)
	{
		velocity.x = MAXMOVE;
	}
	else if (velocity.x < -MAXMOVE)
	{
		velocity.x = -MAXMOVE;
	}
	if (velocity.y > MAXMOVE)
	{
		velocity.y = MAXMOVE;
	}
	else if (velocity.y < -MAXMOVE)
	{
		velocity.y = -MAXMOVE;
	}
	xmove = velocity.x * frametime;
	ymove = velocity.y * frametime;
	do
	{
		if (xmove > MAXMOVE / (35.0 * 2.0) || ymove > MAXMOVE / (35.0 * 2.0))
		{
			ptryx = origin.x + xmove / 2.0;
			ptryy = origin.y + ymove / 2.0;
			xmove /= 2.0;
			ymove /= 2.0;
		}
		else
		{
			ptryx = origin.x + xmove;
			ptryy = origin.y + ymove;
			xmove = ymove = 0.0;
		}
		if (!P_TryMove(this, ptryx, ptryy))
		{
			// Blocked move
			if (flags2 & MF2_FLOORBOUNCE)
			{
				if (BlockingMobj)
				{
					if ((BlockingMobj->flags2 & MF2_REFLECTIVE) ||
						((!BlockingMobj->player) &&
							(!(BlockingMobj->flags & MF_COUNTKILL))))
					{
						float speed;

						angle = atan2(origin.y - BlockingMobj->origin.y,
							origin.x - BlockingMobj->origin.x) +
							ANGLE_1 * ((P_Random() % 16) - 8);
						speed = Length(velocity);
						speed = speed * 0.75;
						angles.yaw = angle;
						velocity.x = speed * cos(angle);
						velocity.y = speed * sin(angle);
						if (sound_sight)
						{
							StartSound(this, sound_sight, CHAN_VOICE);
						}
						return true;
					}
					else
					{
						// Struck a player/creature
						return P_ExplodeMissile(this);
					}
				}
				else
				{
					// Struck a wall
					P_BounceWall(this);
					switch (type)
					{
					case MT_SORCBALL1:
					case MT_SORCBALL2:
					case MT_SORCBALL3:
					case MT_SORCFX1:
						break;
					default:
						if (sound_sight)
						{
							StartSound(this, sound_sight, CHAN_VOICE);
						}
						break;
					}
					return true;
				}
			}
			if (BlockingMobj && (BlockingMobj->flags2 & MF2_REFLECTIVE))
			{
				int explode = false;

				angle = atan2(origin.y - BlockingMobj->origin.y,
					origin.x - BlockingMobj->origin.x);

				// Change angle for delflection/reflection
				switch (BlockingMobj->type)
				{
				case MT_CENTAUR:
				case MT_CENTAURLEADER:
					if (abs(angle - BlockingMobj->angles.yaw) >> 24 > 45)
					{
						explode = true;
						break;
					}
					if (type == MT_HOLY_FX)
					{
						explode = true;
						break;
					}
					// Drop through to sorcerer full reflection
				case MT_SORCBOSS:
					// Deflection
					if (P_Random() < 128)
						angle += ANG45;
					else
						angle -= ANG45;
					break;
				default:
					// Reflection
					angle += ANGLE_1 * ((P_Random() % 16) - 8);
					break;
				}

				if (!explode)
				{
					// Reflect the missile along angle
					angles.yaw = angle;
					velocity.x = (speed / 2.0) * cos(angle);
					velocity.y = (speed / 2.0) * sin(angle);
//					velocity.z = -velocity.z;
					if (flags2 & MF2_SEEKERMISSILE)
					{
						specialmobj1 = target;
					}
					target = BlockingMobj;
					return true;
				}
			}
			// Explode a missile
			if (ceilingline && ceilingline->backsector
				&& ceilingline->backsector->ceiling.pic == skyflatnum)
			{
				// Hack to prevent missiles exploding against the sky
				if (type == MT_BLOODYSKULL)
				{
					velocity.x = velocity.y = 0.0;
					velocity.z = -1.0 * 35.0;
				}
				else if (type == MT_HOLY_FX)
				{
					if (!P_ExplodeMissile(this))
					{
						return false;
					}
				}
				else
				{
					P_RemoveMobj(this);
					return false;
				}
				return true;
			}
			if (!P_ExplodeMissile(this))
			{
				return false;
			}
		}
	}
	while (xmove || ymove);

	return true;
}

//==========================================================================
//
//	Missile::ZMovement
//
//==========================================================================

boolean Missile::ZMovement(void)
{
	float dist;
	float delta;

	//
	// adjust height
	//
	origin.z += velocity.z * frametime;

	//
	// clip movement
	//
	if (origin.z <= floorz)
	{
		// Hit the floor
		origin.z = floorz;
		if (!(flags & MF_MISSILE))
		{
			//	Already exploded
			return true;
		}
		if (flags2 & MF2_FLOORBOUNCE)
		{
			P_FloorBounceMissile(this);
			return true;
		}
		else if (type == MT_HOLY_FX)
		{
			// The spirit struck the ground
			velocity.z = 0.0;
			P_HitFloor(this);
			return true;
		}
		else if (type == MT_MNTRFX2 || type == MT_LIGHTNING_FLOOR)
		{
			// Minotaur floor fire can go up steps
			return true;
		}
		else
		{
			P_HitFloor(this);
			return P_ExplodeMissile(this);
		}
	}

	if (origin.z + height > ceilingz)
	{
		// hit the ceiling
		if (velocity.z > 0.0)
			velocity.z = 0.0;
		origin.z = ceilingz - height;
		if (!(flags & MF_MISSILE))
		{
			//	Already exploded
			return true;
		}
		if (flags2 & MF2_FLOORBOUNCE)
		{
			// Maybe reverse momentum here for ceiling bounce
			// Currently won't happen

			if (sound_sight)
			{
				StartSound(this, sound_sight, CHAN_VOICE);
			}
			return true;
		}
		if (type == MT_LIGHTNING_CEILING)
		{
			return true;
		}
		if (ceiling->pic == skyflatnum)
		{
			if (type == MT_BLOODYSKULL)
			{
				velocity.x = velocity.y = 0.0;
				velocity.z = -1.0 * 35.0;
			}
			else if (type == MT_HOLY_FX)
			{
				return P_ExplodeMissile(this);
			}
			else
			{
				P_RemoveMobj(this);
				return false;
			}
			return true;
		}
		return P_ExplodeMissile(this);
	}
	return true;
}

//==========================================================================
//
//  Missile::UpdateVelocity
//
//==========================================================================

void Missile::UpdateVelocity(void)
{
//	if (waterlevel < 2)
//	{
		if (flags2 & MF2_LOGRAV)
		{
			velocity.z -= GRAVITY / 8.0 * frametime;
		}
		else if (!(flags & MF_NOGRAVITY))
		{
			velocity.z -= GRAVITY * frametime;
		}
//	}
//	else
//	{
//		velocity.z = -60.0;
//	}
}

//==========================================================================
//
//	Missile::Physics
//
//==========================================================================

boolean Missile::Physics(void)
{
	Entity *onmo;

	if (blaster)
	{
		return BlasterPhysics();
	}

	CheckWater();
	UpdateVelocity();

	// Handle X and Y momentums
	BlockingMobj = NULL;
	if (velocity.x || velocity.y)
	{
		if (!XYMovement())
		{
			return false;
		}
	}
	else if (flags2 & MF2_BLASTED)
	{
		// Reset to not blasted when momentums are gone
		ResetBlasted();
	}

	if ((origin.z != floorz) || velocity.z || BlockingMobj)
	{
		// Handle Z momentum and gravity
		if (flags2 & MF2_PASSMOBJ)
		{
			if (!(onmo = P_CheckOnmobj(this)))
			{
				if (!ZMovement())
				{
					return false;
				}
			}
		}
		else
		{
			if (!ZMovement())
			{
				return false;
			}
		}
	}
	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
