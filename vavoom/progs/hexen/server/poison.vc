//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	PoisonCloud
//
//**************************************************************************

class PoisonCloud:Effect
{

int LifeCount;
int BobIndex;

//==========================================================================
//
//	InitCloud
//
//	FIXME this sucks!
//
//==========================================================================

void InitCloud(Actor InstigatedBy)
{
	Velocity.x = 0.00001;	// missile objects must move to impact other objects
	LifeCount = 24 + (P_Random() & 7);
	BobIndex = 0;
	Instigator = InstigatedBy;
	Radius = 20.0;
	Height = 30.0;
	bColideWithThings = true;
	bColideWithWorld = true;
}

//============================================================================
//
//  A_Explode
//
//============================================================================

void A_Explode(void)
{
	P_RadiusAttack(self, Instigator, 4, 40.0, true);
}

//===========================================================================
//
//  A_PoisonBagDamage
//
//===========================================================================

void A_PoisonBagDamage(void)
{
	A_Explode();

	Origin.z += FloatBobOffsets[BobIndex] / 16.0;
	BobIndex = (BobIndex + 1) & 63;
}

//===========================================================================
//
//  A_PoisonBagCheck
//
//===========================================================================

void A_PoisonBagCheck(void)
{
	if (!--LifeCount)
	{
		SetState(DeathState);
	}
}

__states__
{
	S_POISONCLOUD1('PSBG', 3, 1.0 / 35.0, S_POISONCLOUD2) { }
	S_POISONCLOUD2('PSBG', 3, 1.0 / 35.0, S_POISONCLOUD3) { A_Scream(); }
	S_POISONCLOUD3('PSBG', 3, 2.0 / 35.0, S_POISONCLOUD4) { A_PoisonBagDamage(); }
	S_POISONCLOUD4('PSBG', 4, 2.0 / 35.0, S_POISONCLOUD5) { A_PoisonBagDamage(); }
	S_POISONCLOUD5('PSBG', 4, 2.0 / 35.0, S_POISONCLOUD6) { A_PoisonBagDamage(); }
	S_POISONCLOUD6('PSBG', 4, 2.0 / 35.0, S_POISONCLOUD7) { A_PoisonBagDamage(); }
	S_POISONCLOUD7('PSBG', 5, 2.0 / 35.0, S_POISONCLOUD8) { A_PoisonBagDamage(); }
	S_POISONCLOUD8('PSBG', 5, 2.0 / 35.0, S_POISONCLOUD9) { A_PoisonBagDamage(); }
	S_POISONCLOUD9('PSBG', 5, 2.0 / 35.0, S_POISONCLOUD10) { A_PoisonBagDamage(); }
	S_POISONCLOUD10('PSBG', 6, 2.0 / 35.0, S_POISONCLOUD11) { A_PoisonBagDamage(); }
	S_POISONCLOUD11('PSBG', 6, 2.0 / 35.0, S_POISONCLOUD12) { A_PoisonBagDamage(); }
	S_POISONCLOUD12('PSBG', 6, 2.0 / 35.0, S_POISONCLOUD13) { A_PoisonBagDamage(); }
	S_POISONCLOUD13('PSBG', 7, 2.0 / 35.0, S_POISONCLOUD14) { A_PoisonBagDamage(); }
	S_POISONCLOUD14('PSBG', 7, 2.0 / 35.0, S_POISONCLOUD15) { A_PoisonBagDamage(); }
	S_POISONCLOUD15('PSBG', 7, 2.0 / 35.0, S_POISONCLOUD16) { A_PoisonBagDamage(); }
	S_POISONCLOUD16('PSBG', 8, 2.0 / 35.0, S_POISONCLOUD17) { A_PoisonBagDamage(); }
	S_POISONCLOUD17('PSBG', 8, 1.0 / 35.0, S_POISONCLOUD18) { A_PoisonBagDamage(); }
	S_POISONCLOUD18('PSBG', 8, 1.0 / 35.0, S_POISONCLOUD4) { A_PoisonBagCheck(); }
	S_POISONCLOUD_X1('PSBG', 7, 7.0 / 35.0, S_POISONCLOUD_X2) { }
	S_POISONCLOUD_X2('PSBG', 6, 7.0 / 35.0, S_POISONCLOUD_X3) { }
	S_POISONCLOUD_X3('PSBG', 5, 6.0 / 35.0, S_POISONCLOUD_X4) { }
	S_POISONCLOUD_X4('PSBG', 3, 6.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 1.0;
	Height = 1.0;
	Mass = 99999.0;
	Translucency = 66;
	bDropOff = true;
	bColideWithWorld = false;
	bColideWithThings = false;
	bNoDamageThrust = true;
	IdleState = S_POISONCLOUD1;
	DeathState = S_POISONCLOUD_X1;
	DeathSound = 'PoisonShroomDeath';
}

}

//**************************************************************************
//
//	PoisonBag
//
//**************************************************************************

class PoisonBag:Effect
{

//===========================================================================
//
//  A_PoisonBagInit
//
//===========================================================================

void A_PoisonBagInit(void)
{
	Actor A;

	A = Spawn(PoisonCloud, Origin + vector(0.0, 0.0, 28.0));
	if (A)
	{
		PoisonCloud(A).InitCloud(Instigator);
	}
}

__states__
{
	S_POISONBAG1('PSBG', 0 | FF_FULLBRIGHT, 'artifact/flechete.md2', 0, 18.0 / 35.0, S_POISONBAG2) { }
	S_POISONBAG2('PSBG', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_POISONBAG3) { }
	S_POISONBAG3('PSBG', 2, 3.0 / 35.0, S_POISONBAG4) { }
	S_POISONBAG4('PSBG', 2, 1.0 / 35.0, S_NULL) { A_PoisonBagInit(); }
}

defaultproperties
{
	Radius = 5.0;
	Height = 5.0;
	IdleState = S_POISONBAG1;
}

}

//**************************************************************************
//
//	ZPoisonShroom
//
//**************************************************************************

class ZPoisonShroom:Decoration
	__mobjinfo__(8104)
{

//===========================================================================
//
//  A_PoisonShroom
//
//===========================================================================

void A_PoisonShroom(void)
{
	StateTime = 4.0 + Random() * 16.0;
}

//===========================================================================
//
//  A_PoisonBagInit
//
//===========================================================================

void A_PoisonBagInit(void)
{
	Actor A;

	A = Spawn(PoisonCloud, Origin + vector(0.0, 0.0, 28.0));
	if (A)
	{
		PoisonCloud(A).InitCloud(Instigator);
	}
}

__states__
{
	S_ZPOISONSHROOM1('SHRM', 0, 5.0 / 35.0, S_ZPOISONSHROOM_P2) { A_PoisonShroom(); }
	S_ZPOISONSHROOM_P1('SHRM', 0, 6.0 / 35.0, S_ZPOISONSHROOM_P2) { }
	S_ZPOISONSHROOM_P2('SHRM', 1, 8.0 / 35.0, S_ZPOISONSHROOM1) { A_Pain(); }
	S_ZPOISONSHROOM_X1('SHRM', 2, 5.0 / 35.0, S_ZPOISONSHROOM_X2) { }
	S_ZPOISONSHROOM_X2('SHRM', 3, 5.0 / 35.0, S_ZPOISONSHROOM_X3) { }
	S_ZPOISONSHROOM_X3('SHRM', 4, 5.0 / 35.0, S_ZPOISONSHROOM_X4) { A_PoisonBagInit(); }
	S_ZPOISONSHROOM_X4('SHRM', 5, -1.0, S_NULL) { }
}

defaultproperties
{
	Health = 30;
	Radius = 6.0;
	Height = 20.0;
	Mass = 99999.0;
	PainChance = 1.0;
	bSolid = true;
	bShootable = true;
	bNoBlood = true;
	IdleState = S_ZPOISONSHROOM1;
	PainState = S_ZPOISONSHROOM_P1;
	DeathState = S_ZPOISONSHROOM_X1;
	PainSound = 'PoisonShroomPain';
	DeathSound = 'PoisonShroomDeath';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.19  2002/07/13 07:58:51  dj_jl
//  Added new models, updated existing ones.
//
//  Revision 1.18  2002/06/29 15:54:34  dj_jl
//  Floatized PainChance.
//
//  Revision 1.17  2002/06/22 07:16:02  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.16  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.15  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.14  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.13  2002/03/02 18:00:15  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.12  2002/02/22 18:00:23  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.11  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.10  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.9  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.8  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.7  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.6  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/09/20 16:20:00  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
