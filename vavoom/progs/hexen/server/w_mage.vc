//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  A_MWandAttack
//
//============================================================================

void A_MWandAttack(mobj_t * actor)
{
	player_t *player = actor->player;
	mobj_t *mo;

	mo = SpawnPlayerMissile(player->mo, MT_MWAND_MISSILE);
	if (mo)
	{
		mo->blaster = true;
	}
	StartSoundName(player->mo, "MageWandFire", CHAN_WEAPON);
}

//==========================================================================
//
//  A_FireConePL1
//
//==========================================================================

void A_FireConePL1(mobj_t * actor)
{
	player_t *player = actor->player;
	TAVec angles;
	int damage;
	int i;
	mobj_t *pmo;
	mobj_t *mo;
	int conedone = false;

	pmo = player->mo;
	player->mana[MANA_1] -=
		WeaponManaUse(player->pclass, player->readyweapon);
	StartSoundName(pmo, "MageShardsFire", CHAN_WEAPON);

	damage = 90 + (P_Random() & 15);
	for (i = 0; i < 16; i++)
	{
		avcpy(pmo->angles, angles);
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 16.0));
		AimLineAttack(pmo, &angles, MELEERANGE);
		if (linetarget)
		{
			pmo->flags2 |= MF2_ICEDAMAGE;
			linetarget->Damage(pmo, pmo, damage);
			pmo->flags2 &= ~MF2_ICEDAMAGE;
			conedone = true;
			break;
		}
	}

	// didn't find any creatures, so fire projectiles
	if (!conedone)
	{
		mo = SpawnPlayerMissile(pmo, MT_SHARDFX1);
		if (mo)
		{
			mo->special1 = SHARDSPAWN_LEFT | SHARDSPAWN_DOWN | SHARDSPAWN_UP
				| SHARDSPAWN_RIGHT;
			mo->special2 = 3;	// Set sperm count (levels of reproductivity)
			mo->target = pmo;
			mo->args[0] = 3;	// Mark Initial shard as super damage
		}
	}
}

//============================================================================
//
//  A_ShedShard
//
//============================================================================

void A_ShedShard(mobj_t * actor)
{
	mobj_t *mo;
	int spawndir = actor->special1;
	int spermcount = actor->special2;

	if (spermcount <= 0)
		return;	// No sperm left
	actor->special2 = 0;
	spermcount--;

	// every so many calls, spawn a new missile in it's set directions
	if (spawndir & SHARDSPAWN_LEFT)
	{
		mo = SpawnMissileAngleSpeed(actor, MT_SHARDFX1,
			actor->angles.yaw + (45.0 / 9.0), 0.0, itof(20 + 2 * spermcount));
		if (mo)
		{
			mo->special1 = SHARDSPAWN_LEFT;
			mo->special2 = spermcount;
			mo->velocity.z = actor->velocity.z;
			mo->target = actor->target;
			mo->args[0] = (spermcount == 3) ? 2 : 0;
		}
	}
	if (spawndir & SHARDSPAWN_RIGHT)
	{
		mo = SpawnMissileAngleSpeed(actor, MT_SHARDFX1,
			actor->angles.yaw - (45.0 / 9.0), 0.0, itof(20 + 2 * spermcount));
		if (mo)
		{
			mo->special1 = SHARDSPAWN_RIGHT;
			mo->special2 = spermcount;
			mo->velocity.z = actor->velocity.z;
			mo->target = actor->target;
			mo->args[0] = (spermcount == 3) ? 2 : 0;
		}
	}
	if (spawndir & SHARDSPAWN_UP)
	{
		mo = SpawnMissileAngleSpeed(actor, MT_SHARDFX1, actor->angles.yaw,
			0.0, itof(15 + 2 * spermcount));
		if (mo)
		{
			mo->velocity.z = actor->velocity.z;
			mo->origin.z += 8.0;
			if (spermcount & 1)	// Every other reproduction
				mo->special1 =
					SHARDSPAWN_UP | SHARDSPAWN_LEFT | SHARDSPAWN_RIGHT;
			else
				mo->special1 = SHARDSPAWN_UP;
			mo->special2 = spermcount;
			mo->target = actor->target;
			mo->args[0] = (spermcount == 3) ? 2 : 0;
		}
	}
	if (spawndir & SHARDSPAWN_DOWN)
	{
		mo = SpawnMissileAngleSpeed(actor, MT_SHARDFX1, actor->angles.yaw,
			0.0, itof(15 + 2 * spermcount));
		if (mo)
		{
			mo->velocity.z = actor->velocity.z;
			mo->origin.z -= 4.0;
			if (spermcount & 1)	// Every other reproduction
				mo->special1 =
					SHARDSPAWN_DOWN | SHARDSPAWN_LEFT | SHARDSPAWN_RIGHT;
			else
				mo->special1 = SHARDSPAWN_DOWN;
			mo->special2 = spermcount;
			mo->target = actor->target;
			mo->args[0] = (spermcount == 3) ? 2 : 0;
		}
	}
}

//============================================================================
//
//  A_LightningReady
//
//============================================================================

void A_LightningReady(mobj_t * actor)
{
	player_t *player = actor->player;

	A_WeaponReady(actor);
	if (P_Random() < 160)
	{
		StartSoundName(player->mo, "MageLightningReady", CHAN_WEAPON);
	}
}

//============================================================================
//
//  A_MLightningAttack2
//
//============================================================================

void A_LightningZap(mobj_t * actor);

void A_MLightningAttack2(mobj_t * actor)
{
	mobj_t *fmo;
	mobj_t *cmo;

	fmo = SpawnPlayerMissile(actor, MT_LIGHTNING_FLOOR);
	cmo = SpawnPlayerMissile(actor, MT_LIGHTNING_CEILING);
	if (fmo)
	{
		fmo->specialmobj1 = NULL;
		fmo->specialmobj2 = cmo;
		A_LightningZap(fmo);
	}
	if (cmo)
	{
		cmo->specialmobj1 = NULL;	// mobj that it will track
		cmo->specialmobj2 = fmo;
		A_LightningZap(cmo);
	}
	StartSoundName(actor, "MageLightningFire", CHAN_WEAPON);
}

//============================================================================
//
//  A_MLightningAttack
//
//============================================================================

void A_MLightningAttack(mobj_t * actor)
{
	player_t *player = actor->player;

	A_MLightningAttack2(player->mo);
	player->mana[MANA_2] -=
		WeaponManaUse(player->pclass, player->readyweapon);
}

//============================================================================
//
//  A_LightningClip
//
//============================================================================

#define ZAGSPEED		1.0

void A_LightningClip(mobj_t * actor)
{
	mobj_t *cMo;
	mobj_t *target;
	int zigZag;

	if (actor->type == MT_LIGHTNING_FLOOR)
	{
		actor->origin.z = actor->floorz;
		target = actor->specialmobj2->specialmobj1;
	}
	else if (actor->type == MT_LIGHTNING_CEILING)
	{
		actor->origin.z = actor->ceilingz - actor->height;
		target = actor->specialmobj1;
	}
	if (actor->type == MT_LIGHTNING_FLOOR)
	{
		// floor lightning zig-zags, and forces the ceiling lightning to mimic
		cMo = actor->specialmobj2;
		zigZag = P_Random();
		if ((zigZag > 128 && actor->special1 < 2) || actor->special1 < -2)
		{
			P_ThrustMobj(actor, actor->angles.yaw + 90.0, ZAGSPEED);
			if (cMo)
			{
				P_ThrustMobj(cMo, actor->angles.yaw + 90.0, ZAGSPEED);
			}
			actor->special1++;
		}
		else
		{
			P_ThrustMobj(actor, actor->angles.yaw - 90.0, ZAGSPEED);
			if (cMo)
			{
				P_ThrustMobj(cMo, cMo->angles.yaw - 90.0, ZAGSPEED);
			}
			actor->special1--;
		}
	}
	if (target)
	{
		if (target->health <= 0)
		{
			P_ExplodeMissile(actor);
		}
		else
		{
			actor->angles.yaw = atan2(target->origin.y - actor->origin.y,
				target->origin.x - actor->origin.x);
			actor->velocity.x = 0.0;
			actor->velocity.y = 0.0;
			P_ThrustMobj(actor, actor->angles.yaw,
				actor->speed * frametime / 2.0);
		}
	}
}

//============================================================================
//
//  A_LightningZap
//
//============================================================================

void A_LightningZap(mobj_t * actor)
{
	mobj_t *mo;
	float deltaZ;

	A_LightningClip(actor);

	actor->health -= 8;
	if (actor->health <= 0)
	{
		SetMobjState(actor, actor->deathstate);
		return;
	}
	if (actor->type == MT_LIGHTNING_FLOOR)
	{
		deltaZ = 10.0;
	}
	else
	{
		deltaZ = -10.0;
	}
	mo = P_SpawnMobj(actor->origin.x + (Random() - 0.5) * actor->radius,
		actor->origin.y + (Random() - 0.5) * actor->radius,
		actor->origin.z + deltaZ, MT_LIGHTNING_ZAP);
	if (mo)
	{
		mo->specialmobj2 = actor;
		mo->velocity.x = actor->velocity.x;
		mo->velocity.y = actor->velocity.y;
		mo->target = actor->target;
		if (actor->type == MT_LIGHTNING_FLOOR)
		{
			mo->velocity.z = 20.0 * 35.0;
		}
		else
		{
			mo->velocity.z = -20.0 * 35.0;
		}
	}
	if (actor->type == MT_LIGHTNING_FLOOR && P_Random() < 160)
	{
		StartSoundName(actor, "MageLightningContinuous", CHAN_VOICE);
	}
}

//============================================================================
//
//  A_ZapMimic
//
//============================================================================

void A_ZapMimic(mobj_t * actor)
{
	mobj_t *mo;

	mo = actor->specialmobj2;
	if (mo)
	{
		if (mo->statenum >= mo->deathstate || mo->statenum == S_FREETARGMOBJ)
		{
			P_ExplodeMissile(actor);
		}
		else
		{
			actor->velocity.x = mo->velocity.x;
			actor->velocity.y = mo->velocity.y;
		}
	}
}

//============================================================================
//
//  A_LastZap
//
//============================================================================

void A_LastZap(mobj_t * actor)
{
	mobj_t *mo;

	mo =
		P_SpawnMobj(actor->origin.x, actor->origin.y, actor->origin.z,
		MT_LIGHTNING_ZAP);
	if (mo)
	{
		SetMobjState(mo, S_LIGHTNING_ZAP_X1);
		mo->velocity.z = 40.0 * 35.0;
	}
}

//============================================================================
//
//  A_LightningRemove
//
//============================================================================

void A_LightningRemove(mobj_t * actor)
{
	mobj_t *mo;

	mo = actor->specialmobj2;
	if (mo)
	{
		mo->specialmobj2 = NULL;
		P_ExplodeMissile(mo);
	}
}

//============================================================================
//
// MStaffSpawn
//
//============================================================================

void MStaffSpawn(mobj_t * pmo, float angle)
{
	mobj_t *mo;

	mo = SpawnPlayerMissileAngle(pmo, MT_MSTAFF_FX2, angle);
	if (mo)
	{
		mo->target = pmo;
		mo->specialmobj1 = P_RoughMonsterSearch(mo, 10);
	}
}

//============================================================================
//
//  A_MStaffAttack
//
//============================================================================

void A_MStaffAttack(mobj_t * actor)
{
	player_t *player = actor->player;
	float angle;
	mobj_t *pmo;

	player->mana[MANA_1] -=
		WeaponManaUse(player->pclass, player->readyweapon);
	player->mana[MANA_2] -=
		WeaponManaUse(player->pclass, player->readyweapon);
	pmo = player->mo;
	angle = pmo->angles.yaw;

	MStaffSpawn(pmo, angle);
	MStaffSpawn(pmo, angle - 5.0);
	MStaffSpawn(pmo, angle + 5.0);
	StartSoundName(player->mo, "MageStaffFire", CHAN_WEAPON);
	player->damagecount = 0;
	player->bonuscount = 0;
	player->weapon_palette = STARTSCOURGEPAL;
}

//============================================================================
//
//  A_MStaffPalette
//
//============================================================================

void A_MStaffPalette(mobj_t * actor)
{
	player_t *player = actor->player;
	pspdef_t *psp = &player->psprites[ps_weapon];
	int pal;

	pal = STARTSCOURGEPAL + psp->statenum - S_MSTAFFATK_2;
	if (pal == STARTSCOURGEPAL + 3)
	{	// reset back to original playpal
		pal = 0;
	}
	player->weapon_palette = pal;
}

//============================================================================
//
//  A_MStaffWeave
//
//============================================================================

void A_MStaffWeave(mobj_t * actor)
{
	float newX, newY;
	int weaveXY, weaveZ;
	float angle;

	weaveXY = actor->special2 >> 16;
	weaveZ = actor->special2 & 0xFFFF;
	angle = AngleMod360(actor->angles.yaw + 90.0);
	newX = actor->origin.x - cos(angle) * FloatBobOffsets[weaveXY] * 4.0;
	newY = actor->origin.y - sin(angle) * FloatBobOffsets[weaveXY] * 4.0;
	weaveXY = (weaveXY + 6) & 63;
	newX += cos(angle) * FloatBobOffsets[weaveXY] * 4.0;
	newY += sin(angle) * FloatBobOffsets[weaveXY] * 4.0;
	P_TryMove(actor, newX, newY);
	actor->origin.z -= FloatBobOffsets[weaveZ] * 2.0;
	weaveZ = (weaveZ + 3) & 63;
	actor->origin.z += FloatBobOffsets[weaveZ] * 2.0;
	if (actor->origin.z <= actor->floorz)
	{
		actor->origin.z = actor->floorz + 1.0;
	}
	actor->special2 = weaveZ + (weaveXY << 16);
}

//============================================================================
//
//  A_MStaffTrack
//
//============================================================================

void A_MStaffTrack(mobj_t * actor)
{
	if (!actor->specialmobj1 && (P_Random() < 50))
	{
		actor->specialmobj1 = P_RoughMonsterSearch(actor, 10);
	}
	SeekerMissile(actor, 2.0, 10.0);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
