//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  Weapon::A_MWandAttack
//
//============================================================================

void Weapon::A_MWandAttack(void)
{
	mobj_t *mo;

	mo = SpawnPlayerMissile(Player->mo, MageWandMissile);
	if (mo)
	{
		mo->bBlaster = true;
	}
	Player->mo->PlaySound('MageWandFire', CHAN_WEAPON);
}

//==========================================================================
//
//  Weapon::A_FireConePL1
//
//==========================================================================

void Weapon::A_FireConePL1(void)
{
	TAVec ang;
	int damage;
	int i;
	mobj_t *pmo;
	mobj_t *mo;
	int conedone = false;

	pmo = Player->mo;
	Player->Mana[MANA_1] -=
		WeaponManaUse(Player->PClass, Player->ReadyWeapon);
	pmo->PlaySound('MageShardsFire', CHAN_WEAPON);

	damage = 90 + (P_Random() & 15);
	for (i = 0; i < 16; i++)
	{
		ang = pmo->Angles;
		ang.yaw = AngleMod360(ang.yaw + itof(i) * (45.0 / 16.0));
		AimLineAttack(pmo, &ang, MELEERANGE);
		if (linetarget)
		{
			pmo->bIceDamage = true;
			linetarget->Damage(*pmo, *pmo, damage);
			pmo->bIceDamage = false;
			conedone = true;
			break;
		}
	}

	// didn't find any creatures, so fire projectiles
	if (!conedone)
	{
		mo = SpawnPlayerMissile(pmo, ShardMissile);
		if (mo)
		{
			mo->Special1 = SHARDSPAWN_LEFT | SHARDSPAWN_DOWN | SHARDSPAWN_UP
				| SHARDSPAWN_RIGHT;
			mo->Special2 = 3;	// Set sperm count (levels of reproductivity)
			mo->Owner = *pmo;
			mo->Args[0] = 3;	// Mark Initial shard as super damage
		}
	}
}

//============================================================================
//
//  Actor::A_ShedShard
//
//============================================================================

void Actor::A_ShedShard(void)
{
	mobj_t *mo;
	int spawndir = Special1;
	int spermcount = Special2;

	if (spermcount <= 0)
		return;	// No sperm left
	Special2 = 0;
	spermcount--;

	// every so many calls, spawn a new missile in it's set directions
	if (spawndir & SHARDSPAWN_LEFT)
	{
		mo = SpawnMissileAngleSpeed(this, ShardMissile,
			Angles.yaw + (45.0 / 9.0), 0.0, itof(20 + 2 * spermcount));
		if (mo)
		{
			mo->Special1 = SHARDSPAWN_LEFT;
			mo->Special2 = spermcount;
			mo->Velocity.z = Velocity.z;
			mo->Owner = Owner;
			mo->Args[0] = (spermcount == 3) ? 2 : 0;
		}
	}
	if (spawndir & SHARDSPAWN_RIGHT)
	{
		mo = SpawnMissileAngleSpeed(this, ShardMissile,
			Angles.yaw - (45.0 / 9.0), 0.0, itof(20 + 2 * spermcount));
		if (mo)
		{
			mo->Special1 = SHARDSPAWN_RIGHT;
			mo->Special2 = spermcount;
			mo->Velocity.z = Velocity.z;
			mo->Owner = Owner;
			mo->Args[0] = (spermcount == 3) ? 2 : 0;
		}
	}
	if (spawndir & SHARDSPAWN_UP)
	{
		mo = SpawnMissileAngleSpeed(this, ShardMissile, Angles.yaw,
			0.0, itof(15 + 2 * spermcount));
		if (mo)
		{
			mo->Velocity.z = Velocity.z;
			mo->Origin.z += 8.0;
			if (spermcount & 1)	// Every other reproduction
				mo->Special1 =
					SHARDSPAWN_UP | SHARDSPAWN_LEFT | SHARDSPAWN_RIGHT;
			else
				mo->Special1 = SHARDSPAWN_UP;
			mo->Special2 = spermcount;
			mo->Owner = Owner;
			mo->Args[0] = (spermcount == 3) ? 2 : 0;
		}
	}
	if (spawndir & SHARDSPAWN_DOWN)
	{
		mo = SpawnMissileAngleSpeed(this, ShardMissile, Angles.yaw,
			0.0, itof(15 + 2 * spermcount));
		if (mo)
		{
			mo->Velocity.z = Velocity.z;
			mo->Origin.z -= 4.0;
			if (spermcount & 1)	// Every other reproduction
				mo->Special1 =
					SHARDSPAWN_DOWN | SHARDSPAWN_LEFT | SHARDSPAWN_RIGHT;
			else
				mo->Special1 = SHARDSPAWN_DOWN;
			mo->Special2 = spermcount;
			mo->Owner = Owner;
			mo->Args[0] = (spermcount == 3) ? 2 : 0;
		}
	}
}

//============================================================================
//
//  Weapon::A_LightningReady
//
//============================================================================

void Weapon::A_LightningReady(void)
{
	A_WeaponReady();
	if (P_Random() < 160)
	{
		Player->mo->PlaySound('MageLightningReady', CHAN_WEAPON);
	}
}

//============================================================================
//
//  Weapon::A_MLightningAttack
//
//============================================================================

void Weapon::A_MLightningAttack(void)
{
	mobj_t *fmo;
	mobj_t *cmo;

	fmo = SpawnPlayerMissile(Player->mo, LightningFloor);
	cmo = SpawnPlayerMissile(Player->mo, LightningCeiling);
	if (fmo)
	{
		fmo->SpecialMobj1 = NULL;
		fmo->SpecialMobj2 = cmo;
		fmo->A_LightningZap();
	}
	if (cmo)
	{
		cmo->SpecialMobj1 = NULL;	// mobj that it will track
		cmo->SpecialMobj2 = fmo;
		cmo->A_LightningZap();
	}
	Player->mo->PlaySound('MageLightningFire', CHAN_WEAPON);
	Player->Mana[MANA_2] -= WeaponManaUse(Player->PClass,
		Player->ReadyWeapon);
}

//============================================================================
//
//  Actor::A_LightningClip
//
//============================================================================

#define ZAGSPEED		1.0

void Actor::A_LightningClip(void)
{
	mobj_t *cMo;
	mobj_t *targ;
	int zigZag;

	if (Class == LightningFloor)
	{
		Origin.z = FloorZ;
		targ = SpecialMobj2->SpecialMobj1;
	}
	else if (Class == LightningCeiling)
	{
		Origin.z = CeilingZ - Height;
		targ = SpecialMobj1;
	}
	if (Class == LightningFloor)
	{
		// floor lightning zig-zags, and forces the ceiling lightning to mimic
		cMo = SpecialMobj2;
		zigZag = P_Random();
		if ((zigZag > 128 && Special1 < 2) || Special1 < -2)
		{
			P_ThrustMobj(this, Angles.yaw + 90.0, ZAGSPEED);
			if (cMo)
			{
				P_ThrustMobj(cMo, Angles.yaw + 90.0, ZAGSPEED);
			}
			Special1++;
		}
		else
		{
			P_ThrustMobj(this, Angles.yaw - 90.0, ZAGSPEED);
			if (cMo)
			{
				P_ThrustMobj(cMo, cMo->Angles.yaw - 90.0, ZAGSPEED);
			}
			Special1--;
		}
	}
	if (targ)
	{
		if (targ->Health <= 0)
		{
			P_ExplodeMissile(this);
		}
		else
		{
			Angles.yaw = atan2(targ->Origin.y - Origin.y,
				targ->Origin.x - Origin.x);
			Velocity.x = 0.0;
			Velocity.y = 0.0;
			P_ThrustMobj(this, Angles.yaw, Speed * frametime / 2.0);
		}
	}
}

//============================================================================
//
//  Actor::A_LightningZap
//
//============================================================================

void Actor::A_LightningZap(void)
{
	mobj_t *mo;
	float deltaZ;

	A_LightningClip();

	Health -= 8;
	if (Health <= 0)
	{
		SetState(DeathState);
		return;
	}
	if (Class == LightningFloor)
	{
		deltaZ = 10.0;
	}
	else
	{
		deltaZ = -10.0;
	}
	mo = P_SpawnMobj(Origin.x + (Random() - 0.5) * Radius,
		Origin.y + (Random() - 0.5) * Radius,
		Origin.z + deltaZ, LightningZap);
	if (mo)
	{
		mo->SpecialMobj2 = this;
		mo->Velocity.x = Velocity.x;
		mo->Velocity.y = Velocity.y;
		mo->Owner = Owner;
		if (Class == LightningFloor)
		{
			mo->Velocity.z = 20.0 * 35.0;
		}
		else
		{
			mo->Velocity.z = -20.0 * 35.0;
		}
	}
	if (Class == LightningFloor && P_Random() < 160)
	{
		PlaySound('MageLightningContinuous', CHAN_VOICE);
	}
}

//============================================================================
//
//  Actor::A_ZapMimic
//
//============================================================================

void Actor::A_ZapMimic(void)
{
	mobj_t *mo;

	mo = SpecialMobj2;
	if (mo)
	{
		if (mo->StateNum >= mo->DeathState || mo->StateNum == S_FREETARGMOBJ)
		{
			P_ExplodeMissile(this);
		}
		else
		{
			Velocity.x = mo->Velocity.x;
			Velocity.y = mo->Velocity.y;
		}
	}
}

//============================================================================
//
//  Actor::A_LastZap
//
//============================================================================

void Actor::A_LastZap(void)
{
	mobj_t *mo;

	mo = P_SpawnMobj(Origin.x, Origin.y, Origin.z, LightningZap);
	if (mo)
	{
		mo->SetState(S_LIGHTNING_ZAP_X1);
		mo->Velocity.z = 40.0 * 35.0;
	}
}

//============================================================================
//
//  Actor::A_LightningRemove
//
//============================================================================

void Actor::A_LightningRemove(void)
{
	mobj_t *mo;

	mo = SpecialMobj2;
	if (mo)
	{
		mo->SpecialMobj2 = NULL;
		P_ExplodeMissile(mo);
	}
}

//============================================================================
//
//	Weapon::MStaffSpawn
//
//============================================================================

void Weapon::MStaffSpawn(float angle)
{
	mobj_t *mo;

	mo = SpawnPlayerMissileAngle(Player->mo, MageStaffFX2, angle);
	if (mo)
	{
		mo->Owner = *Player->mo;
		mo->SpecialMobj1 = &mo->RoughMonsterSearch(10);
	}
}

//============================================================================
//
//  Weapon::A_MStaffAttack
//
//============================================================================

void Weapon::A_MStaffAttack(void)
{
	float angle;

	Player->Mana[MANA_1] -=
		WeaponManaUse(Player->PClass, Player->ReadyWeapon);
	Player->Mana[MANA_2] -=
		WeaponManaUse(Player->PClass, Player->ReadyWeapon);
	angle = Player->mo->Angles.yaw;

	MStaffSpawn(angle);
	MStaffSpawn(angle - 5.0);
	MStaffSpawn(angle + 5.0);
	Player->mo->PlaySound('MageStaffFire', CHAN_WEAPON);
	Player->DamageCount = 0;
	Player->BonusCount = 0;
	Player->WeaponPalette = STARTSCOURGEPAL;
}

//============================================================================
//
//  Weapon::A_MStaffPalette
//
//============================================================================

void Weapon::A_MStaffPalette(void)
{
	int pal;

	pal = STARTSCOURGEPAL + StateNum - S_MSTAFFATK_2;
	if (pal == STARTSCOURGEPAL + 3)
	{	// reset back to original playpal
		pal = 0;
	}
	Player->WeaponPalette = pal;
}

//============================================================================
//
//  Actor::A_MStaffWeave
//
//============================================================================

void Actor::A_MStaffWeave(void)
{
	float newX, newY;
	int weaveXY, weaveZ;
	float angle;

	weaveXY = Special2 >> 16;
	weaveZ = Special2 & 0xFFFF;
	angle = AngleMod360(Angles.yaw + 90.0);
	newX = Origin.x - cos(angle) * FloatBobOffsets[weaveXY] * 4.0;
	newY = Origin.y - sin(angle) * FloatBobOffsets[weaveXY] * 4.0;
	weaveXY = (weaveXY + 6) & 63;
	newX += cos(angle) * FloatBobOffsets[weaveXY] * 4.0;
	newY += sin(angle) * FloatBobOffsets[weaveXY] * 4.0;
	P_TryMove(this, newX, newY);
	Origin.z -= FloatBobOffsets[weaveZ] * 2.0;
	weaveZ = (weaveZ + 3) & 63;
	Origin.z += FloatBobOffsets[weaveZ] * 2.0;
	if (Origin.z <= FloorZ)
	{
		Origin.z = FloorZ + 1.0;
	}
	Special2 = weaveZ + (weaveXY << 16);
}

//============================================================================
//
//  Actor::A_MStaffTrack
//
//============================================================================

void Actor::A_MStaffTrack(void)
{
	if (!SpecialMobj1 && (P_Random() < 50))
	{
		SpecialMobj1 = &RoughMonsterSearch(10);
	}
	SeekerMissile(this, 2.0, 10.0);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.20  2002/02/22 18:00:25  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.19  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/01/28 18:50:19  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.16  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.15  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/17 18:15:55  dj_jl
//  Renamed all map object classes
//
//  Revision 1.13  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/12 18:02:48  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.11  2002/01/11 18:19:42  dj_jl
//  Started to use names in progs
//
//  Revision 1.10  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.8  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:18  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:53  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
