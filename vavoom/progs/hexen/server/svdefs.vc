//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define TELEFOGHEIGHT	32.0

#define STARTREDPALS    1
#define STARTBONUSPALS  9
#define STARTPOISONPALS 13
#define STARTICEPAL		21
#define STARTHOLYPAL	22
#define STARTSCOURGEPAL 25
#define NUMREDPALS      8
#define NUMBONUSPALS    4
#define NUMPOISONPALS	8

#define BLINKTHRESHOLD 	4.0

#define INVULNTIME		30.0
#define INFRATIME		120.0
#define FLIGHTTIME 		60.0
#define SPEEDTIME 		45.0
#define MORPHTIME 		40.0
#define MAULATORTIME 	25.0

#define MAXHEALTH 		100
#define MAXMORPHHEALTH	30
#define VIEWHEIGHT 		48.0

// player radius for movement checking
//#define PLAYERRADIUS  16*FRACUNIT

#define BASETHRESHOLD	100	// follow a player exlusively for 3 seconds

#define ONFLOORZ		-99999.0
#define ONCEILINGZ		99999.0
#define FLOATRANDZ		99998.0

#define WPIECE1			1
#define WPIECE2			2
#define WPIECE3			4

//
// Map things flags
//
#define	MTF_EASY		0x0001	// Skill flags.
#define	MTF_NORMAL		0x0002
#define	MTF_HARD		0x0004
#define	MTF_AMBUSH		0x0008	// Deaf monsters/do not react to sound.
#define MTF_DORMANT		0x0010	// The thing is dormant
#define MTF_FIGHTER		0x0020	// Thing appearing in player classes
#define MTF_CLERIC		0x0040
#define MTF_MAGE		0x0080
#define MTF_GSINGLE		0x0100	// Appearing in game modes
#define MTF_GCOOP		0x0200
#define MTF_GDEATHMATCH	0x0400

//
// Player internal flags, for cheats and debug.
//
#define CF_NOCLIP		1	// No clipping, walk through barriers.
#define CF_GODMODE		2	// No damage, no health loss.

#define MELEERANGE		64.0
#define MISSILERANGE	(32.0 * 64.0)

#define LOWERSPEED		6.0
#define RAISESPEED		6.0

#define WEAPONBOTTOM	128.0
#define WEAPONTOP		32.0

// 16 pixels of bob
#define MAXBOB			16.0

// CONSTANTS ---------------------------------------------------------------

// Any floor type >= FLOOR_LIQUID will floorclip sprites
enum
{
	FLOOR_SOLID,
	FLOOR_ICE,
	FLOOR_LIQUID,
	FLOOR_WATER,
	FLOOR_LAVA,
	FLOOR_SLUDGE
};

enum
{
	CONTENTS_EMPTY,
	CONTENTS_WATER,
	CONTENTS_LAVA,
	CONTENTS_SLUDGE,

	CONTENTS_SOLID = -1
};

enum
{
	CSHIFT_CONTENTS
};

// Power up artifacts.
enum
{
	pw_invulnerability,
	pw_infrared,
	pw_flight,
	pw_speed,
	pw_minotaur,
	NUMPOWERS
};

enum
{
	PO_ANCHOR_TYPE = 3000,
	PO_SPAWN_TYPE,
	PO_SPAWNCRUSH_TYPE
};

enum
{
	SEQ_PLATFORM,
	SEQ_PLATFORM_HEAVY,	// same script as a normal platform
	SEQ_PLATFORM_METAL,
	SEQ_PLATFORM_CREAK,	// same script as a normal platform
	SEQ_PLATFORM_SILENCE,
	SEQ_PLATFORM_LAVA,
	SEQ_PLATFORM_WATER,
	SEQ_PLATFORM_ICE,
	SEQ_PLATFORM_EARTH,
	SEQ_PLATFORM_METAL2,

	SEQ_DOOR_STONE,
	SEQ_DOOR_HEAVY,
	SEQ_DOOR_METAL,
	SEQ_DOOR_CREAK,
	SEQ_DOOR_SILENCE,
	SEQ_DOOR_LAVA,
	SEQ_DOOR_WATER,
	SEQ_DOOR_ICE,
	SEQ_DOOR_EARTH,
	SEQ_DOOR_METAL2,

	SEQ_ESOUND_WIND,
	SEQ_NUMSEQ
};

enum
{
	CHAN_AUTO,
	CHAN_VOICE,
	CHAN_WEAPON,
	CHAN_ITEM,
	CHAN_BODY
};

// TYPES -------------------------------------------------------------------

class Actor:Entity
	abstract
{
	//  States
	int IdleState;
	int SeeState;
	int PainState;
	int MeleeState;
	int MissileState;
	int CrashState;
	int DeathState;
	int GibsDeathState;
	int IceDeathState;

	//  Sounds
	name SightSound;
	name ActiveSound;
	name AttackSound;
	name PainSound;
	name DeathSound;

	//	Flags
	bool bSpecial;			// call P_SpecialThing when touched
	bool bShootable;		// Can be hit.
	bool bAmbush;
	bool bJustHit;			// try to attack right back
	bool bJustAttacked;		// take at least one step before attacking
	bool bSpawnCeiling;		// hang from ceiling instead of floor
	// movement flags
	bool bPickUp;			// for players to pick up items
	bool bMissile;		// don't hit same species, explode on block
	bool bNoBlood;			// don't bleed when shot (use puff)
	bool bCorpse;			// don't stop moving halfway off a step
	bool bInFloat;			// floating to a height for a move, don't
							// auto float to target's height
	bool bSkullFly;			// skull in flight
	bool bCountKill;		// count towards intermission kill total
	bool bIceCorpse;		// a frozen corpse (for blasting)
	bool bWindThrust;		// gets pushed around by the wind specials
	bool bFloorBounce;		// bounces off the floor
	bool bSpawnFloat;		// spawn random float z
	bool bNoTeleport;		// does not teleport
	bool bRip;				// missile rips through solid targets
	bool bPushable;			// can be pushed by other moving mobjs
	bool bSlide;			// slides against walls
	bool bOnMobj;			// mobj is resting on top of another mobj
	bool bCannotPush;		// cannot push other pushable mobjs
	bool bDropped;			// dropped by a demon
	bool bBoss;				// mobj is a major boss
	bool bFireDamage;		// does fire damage
	bool bNoDamageThrust;	// does not thrust target when damaging
	bool bTelestomp;		// mobj can stomp another
	bool bFloatBob;			// use float bobbing z movement
	bool bActivateImpact;	// an MF_MISSILE mobj can activate
							// SPAC_IMPACT
	bool bActivatePushWall;	// mobj can push walls
	bool bActivateMCross;	// can activate monster cross lines
	bool bActivatePCross;	// can activate projectile cross lines
	bool bNonShootable;		// mobj is totally non-shootable,
							// but still considered solid
	bool bInvulnerable;		// mobj is invulnerable
	bool bDormant;			// thing is dormant
	bool bIceDamage;		// does ice damage
	bool bSeekerMissile;	// is a seeker (for reflection)
	bool bReflective;		// reflects missiles
	bool bWaterJump;
	bool bBlaster;

	//  Params
	float Speed;
	int PainChance;
	int SpawnHealth;
	int GibsHealth;

	// Thing being chased/attacked (or none).
	Actor Enemy;
	// The originator for missiles.
	Actor Instigator;

	int _Special1;	// Special info
	int _Special2;	// Special info
	float Special1f;
	float Special2f;
	Actor *_SpecialMobj1;
	Actor *SpecialMobj2;
	classid SpecialCID;

	int MissileDamage;	// For missiles

	// Used by player to freeze a bit after teleporting.
	float ReactionTime;

	boolean Touch(MapObject Other);
	void CheckForPushSpecial(line_t * line, int side);
	void BlockedByLine(line_t * ld);
	boolean TestLocation(void);
	void PushLine(void);
	void CrossSpecialLine(line_t *ld, int side);
	void HandleFloorclip(void);

	void Tick(float deltaTime);

	void TeleportToPlayerStarts(void);
	void TeleportToDeathmatchStarts(void);
	void TeleportOther(void);

	int GetFloorType(void);
	void SetOrigin2(TVec origin);
	void OnMapSpawn(mthing_t *mthing);
	void Remove(void);
	int HitFloorType(void);
	void FloorBounceMissile(void);
	void Thrust(float angle, float move);
	int FaceActor(Actor target, float *delta);
	void MonsterFallingDamage(void);
	Actor ActiveMinotaur(void);
	void Died(Actor source);
	void MinotaurSlam(Actor source);
	boolean MorphPlayer(void);
	boolean MorphMonster(void);
	void AutoUseHealth(int saveHealth);
	void InsertIntoTIDList(int tid);
	void RemoveFromTIDList(void);

	void Damage(Actor inflictor, Actor source, int damage);
	void FallingDamage(void);
	void PoisonDamage(Actor source, int damage, boolean playPainSound);
	void PoisonPlayer(Actor poisoner, int poison);
	void SpawnBloodSplatter(TVec org);
	void SpawnBloodSplatter2(TVec org);
	void SpawnRipperBlood(void);
	void SpawnDirt(float radius);

	boolean Activate(void);
	boolean Deactivate(void);

	//  Physics
	boolean Physics(void);
	boolean XYMovement(void);
	boolean ZMovement(void);
	boolean HitMobj(Entity Other);
	boolean HitLine(void);
	boolean HitFloor(void);
	boolean HitCeiling(void);
	void ApplyFriction(void);
	void ResetBlasted(void);
	boolean BlasterPhysics(void);
	void PlayerLandedOnThing(void);
	void SlideMove(void);
	void BounceWall(void);

	void SetDormant(void)
	{
		bDormant = true;
		StateTime = -1.0;
	}

	void Archive(void);
	void Unarchive(void);

	boolean CheckMissileSpawn(void);
	boolean SeekerMissile(float thresh, float turnMax);
	boolean ExplodeMissile(void);
	Actor SpawnMissileAngle(classid type, float angle, float momz);
	Actor SpawnMissileAngleSpeed(classid type, float angle, float momz,
		float speed);

	boolean TeleportMove(TVec pos);
	boolean Teleport(TVec pos, float angle, boolean useFog);

	boolean HeightClip(void);

	void Blast(Actor source, float strength);

	Actor RoughBlockCheck(int index);
	Actor RoughMonsterSearch(int distance);

	// Misc weapon functions
	void CHolyTailFollow(float dist);
	void CHolyTailRemove(void);

	// Misc action functions
	void A_SetInvulnerable(void);
	void A_BridgeRemove(void);

	// Misc enemy functions
	void A_DeQueueCorpse(void);
	void KSpiritInit(Actor korax);
	void A_KSpiritSeeker(float thresh, float turnMax);
	void A_KSpiritWeave(void);

	// Action functions
	void A_FreeTargMobj(void);
	void A_FlameCheck(void);
	void A_HideThing(void);
	void A_UnHideThing(void);
	void A_Summon(void);
	void A_TeloSpawnC(void);
	void A_TeloSpawnB(void);
	void A_TeloSpawnA(void);
	void A_TeloSpawnD(void);
	void A_CheckTeleRing(void);
	void A_FogSpawn(void);
	void A_FogMove(void);
	void A_Quake(void);
	void A_ContMobjSound(void);
	void A_Scream(void);
	void A_Explode(void);
	void A_PoisonBagInit(void);
	void A_PoisonBagDamage(void);
	void A_PoisonBagCheck(void);
	void A_CheckThrowBomb(void);
	void A_NoGravity(void);
	void A_CorpseBloodDrip(void);
	void A_CorpseExplode(void);
	void A_LeafSpawn(void);
	void A_LeafThrust(void);
	void A_LeafCheck(void);
	void A_BridgeInit(void);
	void A_BridgeOrbit(void);
	void A_TreeDeath(void);
	void A_PoisonShroom(void);
	void A_Pain(void);
	void A_SoAExplode(void);
	void A_BellReset1(void);
	void A_BellReset2(void);
	void A_NoBlocking(void);
	void A_CHolyTail(void);
	void A_AddPlayerCorpse(void);
	void A_CheckBurnGone(void);
	void A_SpeedFade(void);
	void A_IceSetTics(void);
	void A_PigPain(void);
	void A_QueueCorpse(void);
	void A_CheckFloor(void);
	void A_SerpentHeadCheck(void);
	void A_FloatGib(void);
	void A_DelayGib(void);
	void A_SinkGib(void);
	void A_SetAltShadow(void);
	void A_ESound(void);
	void A_UnSetInvulnerable(void);
	void A_SmBounce(void);
	void A_SorcFX2Split(void);
	void A_SorcFX2Orbit(void);
	void A_KSpiritRoam(void);
	void A_KBoltRaise(void);
	void A_KBolt(void);
	void A_BatSpawnInit(void);
	void A_BatSpawn(void);
	void A_BatMove(void);

	defaultproperties
	{
		MaxStepHeight = 24.0;
	}
}

class Pawn:Actor
	abstract
{
	bool bCheckNoMonsters;		// Don't spawn if monsters are disabled

	float StepSpeed;

	// Reaction time: if non 0, don't attack yet.
	int ReactionCount;

	// If >0, the target will be chased
	// no matter what (even if shot)
	int Threshold;

	// Player number last looked for.
	int LastLook;

	// Movement direction, movement generation (zig-zagging).
	int MoveDir;	// 0-7
	int MoveCount;	// when 0, select a new dir

	void OnMapSpawn(mthing_t *mthing);

	boolean Activate(void);
	boolean Deactivate(void);

	Actor SpawnMissile(Actor dest, classid type);
	Actor SpawnMissileXYZ(TVec org, Actor dest, classid type);
	Actor SpawnKoraxMissile(TVec org, Actor dest, classid type);

	boolean CheckMeleeRange(void);
	boolean CheckMeleeRange2(void);
	boolean CheckMissileRange(void);
	void FaceMovementDirection(void);
	boolean LookForMonsters(void);
	boolean LookForPlayers(boolean allaround);
	boolean StepMove(void);
	boolean TryWalk(void);
	void NewChaseDir(void);

	void A_Look(void);
	void A_Chase(void);
	void A_FaceTarget(void);
	void A_FreezeDeath(void);
	void A_FreezeDeathChunks(void);

	defaultproperties
	{
		ReactionCount = 8;
		bSolid = true;
		bShootable = true;
		bCountKill = true;
		bFloorClip = true;
		bTelestomp = true;
		bActivatePushWall = true;
		bActivateMCross = true;
		bCheckNoMonsters = true;
	}
}

class PlayerPawn:Pawn
	abstract
{
	// For cleric's invulnerability effect
	bool bAltShadow;
	bool bShadow;
	bool bDontDraw;

	int AttackEndState;

	boolean GiveMana(int mana, int count);
	boolean GiveBody(int num);
	boolean GiveArmor(int armortype, int amount);
	boolean GiveKey(int key);
	boolean GivePower(int power);
	boolean GiveArtifact(int arti);

	void InventoryLeft(void);
	void InventoryRight(void);
	void InventoryUse(void);
	void InventoryTick(float deltaTime);

	void MovePlayer(float deltaTime);
	void CheckWaterJump(void);
	void WaterMove(float deltaTime);
	void WaterJump(void);
	void ThrustPlayer(float angle, float move, float deltaTime);
	void CalcHeight(float deltaTime);
	void PlayerInSpecialSector(float deltaTime);
	void PlayerOnSpecialFlat(int floorType);
	void PlayerInContents(void);
	void PlayerImpulse(void);
	void PlayerTick(float deltaTime);
	void PaletteFlash(void);
	void SetViewPos(void);
	boolean UseArtiHealRadius(void);
	void UseArtiTele(void);
	boolean UseArtifact(int arti);
	void PlayerUseArtifact(int arti);
	void PlayerNextArtifact(void);
	void PlayerRemoveArtifact(int slot);

	void MorphPlayerThink(void);
	boolean UndoPlayerMorph(void);
	void SetPlayerRunState(void);
	void DeathPlayerTick(float deltaTime);
	void UseArtiPig(void);
	void UseArtiSummon(void);
	void UseArtiPoisonBag(void);
	void UseArtiTeleportOther(void);
	void UseArtiBlastRadius(void);

	Actor SpawnPlayerMissile(classid type);
	Actor SpawnPlayerMissileAngle(classid type, float angle);
	Actor SpawnPlayerMissileAngleXYZ(TVec org, classid type, float angle);

	void AdjustPlayerAngle(void);

	defaultproperties
	{
		ReactionCount = 0;
		bCountKill = false;
		bActivateMCross = false;
		bCheckNoMonsters = false;
		bDropOff = true;
		bWindThrust = true;
		bSlide = true;
	}
}

class Projectile:Actor
	abstract
{
	defaultproperties
	{
		Health = 1000;
		Mass = 100.0;
		bMissile = true;
		bNoBlockmap = true;
		bDropOff = true;
		bNoGravity = true;
		bNoTeleport = true;
		bActivateImpact = true;
		bActivatePCross = true;
	}
}

class Weapon:ViewEntity
	abstract
{
	int Mana;
	int UpState;
	int DownState;
	int ReadyState;
	int AttackState;
	int HoldAttackState;
	float PSpriteSY;		// Y-adjustment value for full screen

	int GetUpState(void) { return UpState; }
	int GetDownState(void) { return DownState; }
	int GetReadyState(void) { return ReadyState; }
	int GetAttackState(void);
	void GotMana(int InMana) { }
	void SnoutSniff(void) { }	// FIXME

	void A_Light0(void);
	void A_WeaponReady(void);
	void A_Lower(void);
	void A_Raise(void);
	void A_ReFire(void);
}

/*

  Class definitions for botinfo, chatinfo, and
  other various bot information thingamabobers.
*/

enum
{
	bsk_verypoor,
	bsk_poor,
	bsk_low,
	bsk_medium,
	bsk_high,
	bsk_excellent,
	bsk_supreme
};

struct botinfo_t
{
	string Name;		// Bot's name*/
	int accuracy;		// Accuracy with "instant" weapons (this includes "leading")
	int intelect;		// Accuracy with "missile" weapons (rocket launcher, etc.)
	int evade;			// Ability to dodge incoming missiles
	int anticip;		// Ability to anticipate "instant" shots
	int reaction;		// Overall reaction time (lower is "better")
/*	int pisschance;		// Chance the bot will get pissed when his threshold is reached
	int threshold;		// How much it takes to frustrate/piss off the bot
	int dangerlevel;	// When health is below this, we need some health
	int wpfav;			// Favorite weapon
	int chatinfo;		// Bot's chat strings
	int chattime;		// How long it takes us to type a line
	int chatty;			// How talkative the bot is
	char *color;		// Color (in form of a string)
	char *gender;		// Male/female/it :)
	char *skin;			// Skin
	int railcolor;		// Railgun trail color
	bool revealed;		// Hidden bots must be revealed*/
	string userinfo;
};

/*struct chatline_t
{
	char		*string;
	chattype_t  bot;
	chatline_t	*line;
};

struct chatinfo_t
{
	chatline_t		intro[5];
	chatline_t		inter[5];
	chatline_t		rare[5];
	chatline_t		frag[15];
	chatline_t		died[10];
	chatline_t		roam[10];
	chatline_t		pissed[5];
	chatline_t		frustrated[5];
	chatline_t		special[20];
} chatinfo_t;*/

/*

  The bot class, prototypes and definitions be here!

*/

#define FORWARDWALK		200.0
#define FORWARDRUN		400.0
#define SIDEWALK		192.0
#define SIDERUN			320.0

/*#define MAX_TRAVERSE_DIST			(1024*FRACUNIT)	//10 meters, used within b_func.c*/
#define AVOID_DIST					512.0	//Try avoid incoming missiles once they reached this close
#define SAFE_SELF_MISDIST			128.0	//Distance from self to target where it's safe to pull a rocket.
/*#define FRIEND_DIST					(128*FRACUNIT)	//To friend.
#define DARK_DIST					(256*FRACUNIT)	//Distance that bot can see enemies in the dark from.
#define WHATS_DARK					64				//light value thats classed as dark.
#define MAX_MONSTER_TARGET_DIST		(1024*FRACUNIT)	//Too high can slow down the performance, see P_mobj.c*/
#define ENEMY_SCAN_FOV				120.0
/*#define MAXMOVEHEIGHT				(32*FRACUNIT)	//MAXSTEPMOVE but with jumping counted in.
#define GETINCOMBAT					(512*FRACUNIT)	//Max distance to item. if it's due to be icked up in a combat situation.*/
#define SHOOTFOV					60.0
/*#define MAXROAM						(5*TICRATE)		//When this time is elapsed the bot will roam after something else.*/

// The things the bot knows about their enemy
//struct enemyinfo_t
//{
//	int				health;
//	weapontype_t	weap;
//};

//
// Bot states
//
enum
{
	// Deciding what to do
	BST_NOTHING,
	// Bot is "fetching" something (skull, whatever)
	BST_OFFENSE,
	// Bot is defending something
	BST_DEFENSE,
	// Bot is heading to scoring place
	BST_RETURN
};

// Main bot class
class BotPlayer:Object
{
	player_t *player;		// Points to reference player
	Actor botmo;

	// Destinations
	Actor item;			// Item (roam towards weapon, etc)
	boolean itemIsWeapon;
	boolean itemIsPowerup;
	Actor goal;			// Teamgame goal spot
	Actor node;			// Node we're heading towards
	Actor prev;			// Previous node we were at
	TVec posdest;			// Position of our destination (doesn't have to be an actor)
	boolean posdest_valid;
	Actor enemy;			// The dead meat.
	TVec lastpos;			// Last place we saw our enemy
	boolean lastpos_valid;
	Actor missile;			// A threathing missile that got to be avoided.

	Actor ally;			// Ally to tag along with
/*	AActor		*last_mate;	// If bots mate dissapeared (not if died) that mate is
							// pointed to by this. Allows bot to roam to it if
							// necessary.

	enemyinfo_t	enemyinfo;	// Things we know about our enemy

	botstate_t	state;		// What we're doing in teamgame mode

	fixed_t		lastx;		// Last known x location of bot's enemy (go there if enemy goes out of sight)
	fixed_t		lasty;		// Last known y location of bot's enemy

	// Tickers

	float t_respawn;*/
	float t_strafe;
	float t_react;
/*	float t_fight;
	float t_rocket;
	float t_turn;
	float t_pissed;
	float t_frust;*/
	float t_fire;			// Tics left until our gun will actually fire again
	float t_anticip;
/*	float t_chat;			// Tics left until bots completes "typing" in what he's saying.
							// Bot also doesn't do anything during this time.*/

	float forwardmove;	// For building ucmd
	float sidemove;

	// Misc booleans
	boolean allround;
	boolean newItemIsWeapon;
	boolean newItemIsPowerup;

/*	chatline_t	*chatline;	// For when t_chat expires

	bottype_t	bottype;	// Bot type*/
	botinfo_t info;			// Aiming, name, perfection, yadda yadda

/*	fixed_t		oldx;
	fixed_t		oldy;

	int			thingnum;*/
	int angerlevel;

/*	AActor		*things[NUMMOBJTYPES];*/
	float combatdist[NUMWEAPONS * NUMCLASSES]; //different for each weapon.

	float angle;			// The wanted angle that the bot tries to get every tic.

/*	void LinkToPlayer (int playernum);*/

	void OnBeginPlay(void);
	void OnSpawn(void);
	void BotTick(float deltaTime);
	boolean CheckTo(TVec pos);
	void CheckStuff(void);
	float GetAngle(void);
	boolean CheckPath(float ang, float dist);
	void SetEnemy(void);
	Actor FindEnemy(void);
	boolean Check_LOS(Actor to, float vangle);
	boolean CheckItem(Actor item);
	void Scan(void);
	int WeapFromItem(Actor item);
	int WeapPieceFromItem(Actor item);
	int ManaFromItem(Actor item);
	void Move(float deltaTime);
	void SetAngle(float an);
	void Roam(void);
	float AngleTo(TVec dest);
	void Attack(void);
	void Turn(void);
	void BotAim(void);
	void Pitch(void);
	int SkillLower(int skill, int num);
	void Killed(Actor victim);
	void Died(Actor killer);
}

addfields player_t
{
	//
	//  FIRST FIELDS ARE STATS THAT ARE SENT TO CLIENT FOR STATUS BAR
	//

	sb_stats_t Stats;

	float ArmorPoints[NUMARMOR];

	float InventoryTime;

	int ArtifactFlash;
	int ReadyArtifact;
	int InvPtr;
	int InvCurPos;
	int InventorySlotNum;
	inventory_t Inventory[NUMARTIFACTS];

	int Mana[NUMMANA];

	//
	//  ----------
	//

	int Keys;

	// Power ups. invinc and invis are tic counters.
	float Powers[NUMPOWERS];

	int Arti;	// artitype_t to use

	// Base height above floor for viewz.
	float ViewHeight;
	// Bob/squat speed.
	float DeltaViewHeight;
	// bounded/scaled total momentum.
	float Bob;

	float FlyHeight;

	int ArtifactCount;

	// Bit flags, for cheats and debug.
	// See cheat_t, above.
	int Cheats;

	// Refired shots are less accurate.
	int Refire;

	int Pieces;	// Fourth Weapon pieces

	// Is wp_nochange if not changing.
	int PendingWeapon;
	int ReadyWeapon;

	boolean WeaponOwned[NUMWEAPONS];

	// Who did damage (NULL for floors/ceilings).
	Actor *Attacker;

	// For screen flashing (red or bright).
	int DamageCount;
	int BonusCount;

	int PoisonCount;	// screen flash for poison damage
	Actor *Poisoner;	// NULL for non-player mobjs

	int JumpTics;
	int LocalQuakeHappening;

	int NewTorch;	// used in the torch flicker effect.
	int NewTorchDelta;

	int WeaponPalette;
	int MorphTics;	// player is a pig if > 0

	TVec MoveDir;

	BotPlayer Bot;
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int num_stats = NUM_STATS + NUMARMOR + NUMMANA + 6 + NUMARTIFACTS * 2;

boolean randomclass;

// Hexen only

float FloatBobOffsets[64] = {
	0.0, 0.7841339111, 1.560714722, 2.322265625,
	3.061462402, 3.77116394, 4.444549561, 5.075134277,
	5.656845093, 6.184082031, 6.651748657, 7.055358887,
	7.391021729, 7.655517578, 7.8462677, 7.961471558,
	7.999984741, 7.961471558, 7.8462677, 7.655517578,
	7.391021729, 7.055358887, 6.651748657, 6.184082031,
	5.656845093, 5.075134277, 4.444549561, 3.77116394,
	3.061462402, 2.322265625, 1.560714722, 0.7841339111,
	-0.0000152587, -0.7841491699, -1.56072998, -2.322280884,
	-3.061477661, -3.771179199, -4.444564819, -5.075149536,
	-5.656860352, -6.18409729, -6.651763916, -7.055374146,
	-7.391052246, -7.655532837, -7.846298218, -7.961486816,
	-8.0, -7.961486816, -7.846298218, -7.655532837,
	-7.391052246, -7.055374146, -6.651763916, -6.18409729,
	-5.656860352, -5.075149536, -4.444564819, -3.771179199,
	-3.061477661, -2.322280884, -1.56072998, -0.7841339111
};

name seq_name[] = {
	'Platform',
	'Platform',	// a 'heavy' platform is just a platform
	'PlatformMetal',
	'Platform',	// same with a 'creak' platform
	'Silence',
	'Lava',
	'Water',
	'Ice',
	'Earth',
	'PlatformMetal2',

	'DoorNormal',
	'DoorHeavy',
	'DoorMetal',
	'DoorCreak',
	'Silence',
	'Lava',
	'Water',
	'Ice',
	'Earth',
	'DoorMetal2',

	'Wind'
};

name door_seq_name[] = {
	'DoorNormal',
	'DoorHeavy',
	'DoorMetal',
	'DoorCreak',
	'Silence',
	'Lava',
	'Water',
	'Ice',
	'Earth',
	'DoorMetal2'
};

#define POLY_SEQ_NAME(num)		seq_name[SEQ_DOOR_STONE + num]

// CODE --------------------------------------------------------------------

//==========================================================================
//
//
//
//==========================================================================

//**************************************************************************
//
//  $Log$
//  Revision 1.33  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.32  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.31  2002/05/03 17:13:35  dj_jl
//  Fixed content types.
//
//  Revision 1.30  2002/04/11 16:50:54  dj_jl
//  Made TryMove native, Tick function.
//
//  Revision 1.29  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.28  2002/03/16 17:47:47  dj_jl
//  Got rid of mobj_t and some other legacy.
//
//  Revision 1.27  2002/03/12 19:19:18  dj_jl
//  Pickup classes
//
//  Revision 1.26  2002/03/09 17:57:02  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.25  2002/03/04 18:31:36  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.24  2002/03/02 17:58:37  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.23  2002/02/26 17:49:49  dj_jl
//  no message
//
//  Revision 1.22  2002/02/22 18:00:24  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.21  2002/02/16 16:27:44  dj_jl
//  Added bool variables
//
//  Revision 1.20  2002/02/14 19:20:59  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/09 18:15:42  dj_jl
//  Beautification
//
//  Revision 1.18  2002/02/07 18:50:09  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.17  2002/02/06 17:28:53  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:26  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.14  2002/01/24 18:19:27  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.13  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/12 18:00:48  dj_jl
//  Sound names initialized as names
//
//  Revision 1.11  2002/01/11 18:16:34  dj_jl
//  Moved here Actor and Weapon class declarations
//
//  Revision 1.10  2002/01/07 12:25:58  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/27 17:52:24  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.8  2001/12/18 18:31:49  dj_jl
//  Beautification
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/12/01 18:08:53  dj_jl
//  Physics functions as methods, started to use class references
//
//  Revision 1.5  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.4  2001/10/27 07:40:58  dj_jl
//  Switched some functions into class members
//
//  Revision 1.3  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.2  2001/10/18 17:39:34  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.1  2001/10/09 17:35:46  dj_jl
//  Split server defines into seperate file
//
//**************************************************************************
