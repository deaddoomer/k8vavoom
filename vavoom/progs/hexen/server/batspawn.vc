//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	Bat
//
//**************************************************************************

class Bat:Fragment
{

// Bat Variables
int LifeTime;		// lifetime counter
int FloatBobIndex;
float TurnAngle;	// turn amount per move (in degrees)

//===========================================================================
//
//  A_BatMove
//
//===========================================================================

void A_BatMove(void)
{
	float newangle;
	float newSpeed;

	if (LifeTime < 0)
	{
		SetState(DeathState);
	}
	LifeTime -= 2;	// Called every 2 tics

	if (Random() < 0.5)
	{
		newangle = AngleMod360(Angles.yaw + TurnAngle);
	}
	else
	{
		newangle = AngleMod360(Angles.yaw - TurnAngle);
	}

	// Adjust momentum vector to new direction
	newSpeed = Speed * Random() * 4.0;
	Velocity.x = newSpeed * cos(newangle);
	Velocity.y = newSpeed * sin(newangle);

	if (Random() < 0.05859375)
		PlaySound('BatScream', CHAN_VOICE);

	// Handle Z movement
	Origin.z = Instigator.Origin.z + 2.0 * FloatBobOffsets[FloatBobIndex];
	FloatBobIndex = (FloatBobIndex + 3) & 63;
}

__states__
{
	S_BAT1('ABAT', 0, 2.0 / 35.0, S_BAT2) { A_BatMove(); }
	S_BAT2('ABAT', 1, 2.0 / 35.0, S_BAT3) { A_BatMove(); }
	S_BAT3('ABAT', 2, 2.0 / 35.0, S_BAT1) { A_BatMove(); }
	S_BAT_DEATH('ABAT', 0, 2.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 3.0;
	Height = 3.0;
	Speed = 175.0;
	bDropOff = false;
	IdleState = S_BAT1;
	DeathState = S_BAT_DEATH;
}

}

//**************************************************************************
//
//	BatSpawner
//
//**************************************************************************

class BatSpawner:Actor
	__mobjinfo__(10225)
{

//===========================================================================
//
// Bat Spawner Variables
//  args[0]     frequency of spawn (1=fastest, 10=slowest)
//  args[1]     spread angle (0..255)
//  args[2]     
//  args[3]     duration of bats (in octics)
//  args[4]     turn amount per move (in degrees)
//
//===========================================================================

int FrequencyCount;		// frequency counter

//===========================================================================
//
//  A_BatSpawnInit
//
//===========================================================================

void A_BatSpawnInit(void)
{
	FrequencyCount = 0;	// Frequency count
}

//===========================================================================
//
//  A_BatSpawn
//
//===========================================================================

void A_BatSpawn(void)
{
	Bat mo;
	float delta;
	float angle;

	// Countdown until next spawn
	if (FrequencyCount-- > 0)
		return;
	FrequencyCount = Args[0];	// Reset frequency count

	delta = itof(Args[1]);
	if (delta == 0.0)
		delta = 1.0;
	angle = AngleMod360(Angles.yaw +
		delta * (Random() - 0.5) * 360.0 / 256.0);
	mo = Bat(SpawnMissileAngle(Bat, angle, 0.0));
	if (mo)
	{
		mo.FloatBobIndex = P_Random() & 63;	// floatbob index
		mo.TurnAngle = itof(Args[4]);	// turn degrees
		mo.LifeTime = Args[3] << 3;	// Set lifetime
		mo.Instigator = self;
	}
}

__states__
{
	S_SPAWNBATS1('', 0, 2.0 / 35.0, S_SPAWNBATS2) { }
	S_SPAWNBATS2('', 0, 2.0 / 35.0, S_SPAWNBATS3) { A_BatSpawnInit(); }
	S_SPAWNBATS3('', 0, 2.0 / 35.0, S_SPAWNBATS3) { A_BatSpawn(); }
	S_SPAWNBATS_OFF('', 0, -1.0, S_NULL) { }
}

//==========================================================================
//
//	Activate
//
//==========================================================================

bool Activate(void)
{
	SetState(S_SPAWNBATS1);
	return true;
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

bool Deactivate(void)
{
	SetState(S_SPAWNBATS_OFF);
	return true;
}

defaultproperties
{
	Health = 1000;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	Translucency = 100;
	bHidden = true;
	bNoBlockmap = true;
	bNoGravity = true;
	bNoPassMobj = true;
	IdleState = S_SPAWNBATS1;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.19  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.18  2002/06/22 07:16:01  dj_jl
//  Added base classes for objects, split them into corresponding files.
//
//  Revision 1.17  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.16  2002/03/02 18:00:15  dj_jl
//  Some smaller changes, beautification.
//
//  Revision 1.15  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.14  2002/02/22 18:00:20  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.13  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.12  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.10  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.9  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.8  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
