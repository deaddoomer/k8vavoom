//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//============================================================================
//
//  Actor::A_DemonAttack1 (melee)
//
//============================================================================

void Actor::A_DemonAttack1(void)
{
	if (CheckMeleeRange())
	{
		target->Damage(self, self, HITDICE(2));
	}
}

//============================================================================
//
//  Actor::A_DemonAttack2 (missile)
//
//============================================================================

void Actor::A_DemonAttack2(void)
{
	mobj_t *mo;
	classid fireBall;

	if (Class == Demon)
	{
		fireBall = DemonMissile;
	}
	else
	{
		fireBall = Demon2Missile;
	}
	mo = SpawnMissile(this, target, fireBall);
	if (mo)
	{
		mo->origin.z += 30.0;
		StartSoundName(self, 'DemonMissileFire', CHAN_WEAPON);
	}
}

//============================================================================
//
//  Actor::A_DemonDeath
//
//============================================================================

void Actor::A_DemonDeath(void)
{
	mobj_t *mo;
	float angle;

	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, DemonChunk1);
	if (mo)
	{
		angle = AngleMod360(angles.yaw + 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, DemonChunk2);
	if (mo)
	{
		angle = AngleMod360(angles.yaw - 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, DemonChunk3);
	if (mo)
	{
		angle = AngleMod360(angles.yaw - 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, DemonChunk4);
	if (mo)
	{
		angle = AngleMod360(angles.yaw - 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, DemonChunk5);
	if (mo)
	{
		angle = AngleMod360(angles.yaw - 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
}

//===========================================================================
//
//	Actor::A_Demon2Death
//
//===========================================================================

void Actor::A_Demon2Death(void)
{
	mobj_t *mo;
	float angle;

	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, Demon2Chunk1);
	if (mo)
	{
		angle = AngleMod360(angles.yaw + 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, Demon2Chunk2);
	if (mo)
	{
		angle = AngleMod360(angles.yaw - 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, Demon2Chunk3);
	if (mo)
	{
		angle = AngleMod360(angles.yaw - 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, Demon2Chunk4);
	if (mo)
	{
		angle = AngleMod360(angles.yaw - 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
	mo = P_SpawnMobj(origin.x, origin.y, origin.z + 45.0, Demon2Chunk5);
	if (mo)
	{
		angle = AngleMod360(angles.yaw - 90.0);
		mo->velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		mo->velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		mo->velocity.z = 8.0 * 35.0;
		mo->target = this;
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.12  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
