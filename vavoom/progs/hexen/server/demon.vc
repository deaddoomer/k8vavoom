//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	DemonMissile
//
//**************************************************************************

class DemonMissile:Projectile
{

__states__
{
	S_DEMONFX_MOVE1('DMFX', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMONFX_MOVE2) { }
	S_DEMONFX_MOVE2('DMFX', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMONFX_MOVE3) { }
	S_DEMONFX_MOVE3('DMFX', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMONFX_MOVE1) { }
	S_DEMONFX_BOOM1('DMFX', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMONFX_BOOM2) { }
	S_DEMONFX_BOOM2('DMFX', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMONFX_BOOM3) { }
	S_DEMONFX_BOOM3('DMFX', 5 | FF_FULLBRIGHT, 3.0 / 35.0, S_DEMONFX_BOOM4) { }
	S_DEMONFX_BOOM4('DMFX', 6 | FF_FULLBRIGHT, 3.0 / 35.0, S_DEMONFX_BOOM5) { }
	S_DEMONFX_BOOM5('DMFX', 7 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 6.0;
	Speed = 525.0;
	MissileDamage = 5;
	bFireDamage = true;
	IdleState = S_DEMONFX_MOVE1;
	DeathState = S_DEMONFX_BOOM1;
	DeathSound = 'DemonMissileExplode';
	Effects = EF_DL_WHITE;
}

}

//**************************************************************************
//
//	Demon
//
//**************************************************************************

class Demon:Pawn
	__mobjinfo__(31)
{

classid FireBallType;

//============================================================================
//
//  A_DemonAttack1 (melee)
//
//============================================================================

void A_DemonAttack1(void)
{
	if (CheckMeleeRange())
	{
		Enemy.Damage(self, self, HITDICE(2));
	}
}

//============================================================================
//
//  A_DemonAttack2 (missile)
//
//============================================================================

void A_DemonAttack2(void)
{
	Actor M;

	M = SpawnMissile(Enemy, FireBallType);
	if (M)
	{
		M.Origin.z += 30.0;
		PlaySound('DemonMissileFire', CHAN_WEAPON);
	}
}

//============================================================================
//
//  A_DemonDeath
//
//============================================================================

void A_DemonDeath(void)
{
	Actor A;
	float angle;

	A = Spawn(DemonChunk1, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw + 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(DemonChunk2, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(DemonChunk3, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(DemonChunk4, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(DemonChunk5, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
}

__states__
{
	S_DEMN_LOOK1('DEMN', 0, 10.0 / 35.0, S_DEMN_LOOK2) { A_Look(); }
	S_DEMN_LOOK2('DEMN', 0, 10.0 / 35.0, S_DEMN_LOOK1) { A_Look(); }
	S_DEMN_CHASE1('DEMN', 0, 4.0 / 35.0, S_DEMN_CHASE2) { A_Chase(); }
	S_DEMN_CHASE2('DEMN', 1, 4.0 / 35.0, S_DEMN_CHASE3) { A_Chase(); }
	S_DEMN_CHASE3('DEMN', 2, 4.0 / 35.0, S_DEMN_CHASE4) { A_Chase(); }
	S_DEMN_CHASE4('DEMN', 3, 4.0 / 35.0, S_DEMN_CHASE1) { A_Chase(); }
	S_DEMN_ATK1_1('DEMN', 4, 6.0 / 35.0, S_DEMN_ATK1_2) { A_FaceTarget(); }
	S_DEMN_ATK1_2('DEMN', 5, 8.0 / 35.0, S_DEMN_ATK1_3) { A_FaceTarget(); }
	S_DEMN_ATK1_3('DEMN', 6, 6.0 / 35.0, S_DEMN_CHASE1) { A_DemonAttack1(); }
	S_DEMN_ATK2_1('DEMN', 4, 5.0 / 35.0, S_DEMN_ATK2_2) { A_FaceTarget(); }
	S_DEMN_ATK2_2('DEMN', 5, 6.0 / 35.0, S_DEMN_ATK2_3) { A_FaceTarget(); }
	S_DEMN_ATK2_3('DEMN', 6, 5.0 / 35.0, S_DEMN_CHASE1) { A_DemonAttack2(); }
	S_DEMN_PAIN1('DEMN', 4, 4.0 / 35.0, S_DEMN_PAIN2) { }
	S_DEMN_PAIN2('DEMN', 4, 4.0 / 35.0, S_DEMN_CHASE1) { A_Pain(); }
	S_DEMN_DEATH1('DEMN', 7, 6.0 / 35.0, S_DEMN_DEATH2) { }
	S_DEMN_DEATH2('DEMN', 8, 6.0 / 35.0, S_DEMN_DEATH3) { }
	S_DEMN_DEATH3('DEMN', 9, 6.0 / 35.0, S_DEMN_DEATH4) { A_Scream(); }
	S_DEMN_DEATH4('DEMN', 10, 6.0 / 35.0, S_DEMN_DEATH5) { A_NoBlocking(); }
	S_DEMN_DEATH5('DEMN', 11, 6.0 / 35.0, S_DEMN_DEATH6) { A_QueueCorpse(); }
	S_DEMN_DEATH6('DEMN', 12, 6.0 / 35.0, S_DEMN_DEATH7) { }
	S_DEMN_DEATH7('DEMN', 13, 6.0 / 35.0, S_DEMN_DEATH8) { }
	S_DEMN_DEATH8('DEMN', 14, 6.0 / 35.0, S_DEMN_DEATH9) { }
	S_DEMN_DEATH9('DEMN', 15, -1.0, S_NULL) { }
	S_DEMN_XDEATH1('DEMN', 7, 6.0 / 35.0, S_DEMN_XDEATH2) { }
	S_DEMN_XDEATH2('DEMN', 8, 6.0 / 35.0, S_DEMN_XDEATH3) { A_DemonDeath(); }
	S_DEMN_XDEATH3('DEMN', 9, 6.0 / 35.0, S_DEMN_XDEATH4) { A_Scream(); }
	S_DEMN_XDEATH4('DEMN', 10, 6.0 / 35.0, S_DEMN_XDEATH5) { A_NoBlocking(); }
	S_DEMN_XDEATH5('DEMN', 11, 6.0 / 35.0, S_DEMN_XDEATH6) { A_QueueCorpse(); }
	S_DEMN_XDEATH6('DEMN', 12, 6.0 / 35.0, S_DEMN_XDEATH7) { }
	S_DEMN_XDEATH7('DEMN', 13, 6.0 / 35.0, S_DEMN_XDEATH8) { }
	S_DEMN_XDEATH8('DEMN', 14, 6.0 / 35.0, S_DEMN_XDEATH9) { }
	S_DEMN_XDEATH9('DEMN', 15, -1.0, S_NULL) { }
	S_DEMON_ICE('DEMN', 16, 5.0 / 35.0, S_DEMON_ICE2) { A_FreezeDeath(); }
	S_DEMON_ICE2('DEMN', 16, 1.0 / 35.0, S_DEMON_ICE2) { A_FreezeDeathChunks(); }
}

defaultproperties
{
	Health = 250;
	GibsHealth = -125;
	Radius = 32.0;
	Height = 64.0;
	Mass = 220.0;
	StepSpeed = 13.0;
	PainChance = 50;
	bActivatePushWall = false;
	IdleState = S_DEMN_LOOK1;
	SeeState = S_DEMN_CHASE1;
	MeleeState = S_DEMN_ATK1_1;
	MissileState = S_DEMN_ATK2_1;
	PainState = S_DEMN_PAIN1;
	DeathState = S_DEMN_DEATH1;
	GibsDeathState = S_DEMN_XDEATH1;
	IceDeathState = S_DEMON_ICE;
	SightSound = 'DemonSight';
	ActiveSound = 'DemonActive';
	AttackSound = 'DemonAttack';
	PainSound = 'DemonPain';
	DeathSound = 'DemonDeath';
	FireBallType = DemonMissile;
}

}

//**************************************************************************
//
//	Demon2Missile
//
//**************************************************************************

class Demon2Missile:Projectile
{

__states__
{
	S_DEMON2FX_MOVE1('D2FX', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_MOVE2) { }
	S_DEMON2FX_MOVE2('D2FX', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_MOVE3) { }
	S_DEMON2FX_MOVE3('D2FX', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_MOVE4) { }
	S_DEMON2FX_MOVE4('D2FX', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_MOVE5) { }
	S_DEMON2FX_MOVE5('D2FX', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_MOVE6) { }
	S_DEMON2FX_MOVE6('D2FX', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_MOVE1) { }
	S_DEMON2FX_BOOM1('D2FX', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_BOOM2) { }
	S_DEMON2FX_BOOM2('D2FX', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_BOOM3) { }
	S_DEMON2FX_BOOM3('D2FX', 8 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_BOOM4) { }
	S_DEMON2FX_BOOM4('D2FX', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_DEMON2FX_BOOM5) { }
	S_DEMON2FX_BOOM5('D2FX', 10 | FF_FULLBRIGHT, 3.0 / 35.0, S_DEMON2FX_BOOM6) { }
	S_DEMON2FX_BOOM6('D2FX', 11 | FF_FULLBRIGHT, 3.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 10.0;
	Height = 6.0;
	Speed = 525.0;
	MissileDamage = 5;
	bFireDamage = true;
	IdleState = S_DEMON2FX_MOVE1;
	DeathState = S_DEMON2FX_BOOM1;
	DeathSound = 'DemonMissileExplode';
	Effects = EF_DL_GREEN;
}

}

//**************************************************************************
//
//	Demon2
//
//**************************************************************************

class Demon2:Demon
	__mobjinfo__(8080)
{

//===========================================================================
//
//	A_Demon2Death
//
//===========================================================================

void A_Demon2Death(void)
{
	Actor A;
	float angle;

	A = Spawn(Demon2Chunk1, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw + 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(Demon2Chunk2, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(Demon2Chunk3, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(Demon2Chunk4, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
	A = Spawn(Demon2Chunk5, Origin + vector(0.0, 0.0, 45.0));
	if (A)
	{
		angle = AngleMod360(Angles.yaw - 90.0);
		A.Velocity.x = (Random() * 4.0 + 1.0) * cos(angle) * 35.0;
		A.Velocity.y = (Random() * 4.0 + 1.0) * sin(angle) * 35.0;
		A.Velocity.z = 8.0 * 35.0;
		A.Instigator = self;
	}
}

__states__
{
	S_DEMN2_LOOK1('DEM2', 0, 10.0 / 35.0, S_DEMN2_LOOK2) { A_Look(); }
	S_DEMN2_LOOK2('DEM2', 0, 10.0 / 35.0, S_DEMN2_LOOK1) { A_Look(); }
	S_DEMN2_CHASE1('DEM2', 0, 4.0 / 35.0, S_DEMN2_CHASE2) { A_Chase(); }
	S_DEMN2_CHASE2('DEM2', 1, 4.0 / 35.0, S_DEMN2_CHASE3) { A_Chase(); }
	S_DEMN2_CHASE3('DEM2', 2, 4.0 / 35.0, S_DEMN2_CHASE4) { A_Chase(); }
	S_DEMN2_CHASE4('DEM2', 3, 4.0 / 35.0, S_DEMN2_CHASE1) { A_Chase(); }
	S_DEMN2_ATK1_1('DEM2', 4, 6.0 / 35.0, S_DEMN2_ATK1_2) { A_FaceTarget(); }
	S_DEMN2_ATK1_2('DEM2', 5, 8.0 / 35.0, S_DEMN2_ATK1_3) { A_FaceTarget(); }
	S_DEMN2_ATK1_3('DEM2', 6, 6.0 / 35.0, S_DEMN2_CHASE1) { A_DemonAttack1(); }
	S_DEMN2_ATK2_1('DEM2', 4, 5.0 / 35.0, S_DEMN2_ATK2_2) { A_FaceTarget(); }
	S_DEMN2_ATK2_2('DEM2', 5, 6.0 / 35.0, S_DEMN2_ATK2_3) { A_FaceTarget(); }
	S_DEMN2_ATK2_3('DEM2', 6, 5.0 / 35.0, S_DEMN2_CHASE1) { A_DemonAttack2(); }
	S_DEMN2_PAIN1('DEM2', 4, 4.0 / 35.0, S_DEMN2_PAIN2) { }
	S_DEMN2_PAIN2('DEM2', 4, 4.0 / 35.0, S_DEMN2_CHASE1) { A_Pain(); }
	S_DEMN2_DEATH1('DEM2', 7, 6.0 / 35.0, S_DEMN2_DEATH2) { }
	S_DEMN2_DEATH2('DEM2', 8, 6.0 / 35.0, S_DEMN2_DEATH3) { }
	S_DEMN2_DEATH3('DEM2', 9, 6.0 / 35.0, S_DEMN2_DEATH4) { A_Scream(); }
	S_DEMN2_DEATH4('DEM2', 10, 6.0 / 35.0, S_DEMN2_DEATH5) { A_NoBlocking(); }
	S_DEMN2_DEATH5('DEM2', 11, 6.0 / 35.0, S_DEMN2_DEATH6) { A_QueueCorpse(); }
	S_DEMN2_DEATH6('DEM2', 12, 6.0 / 35.0, S_DEMN2_DEATH7) { }
	S_DEMN2_DEATH7('DEM2', 13, 6.0 / 35.0, S_DEMN2_DEATH8) { }
	S_DEMN2_DEATH8('DEM2', 14, 6.0 / 35.0, S_DEMN2_DEATH9) { }
	S_DEMN2_DEATH9('DEM2', 15, -1.0, S_NULL) { }
	S_DEMN2_XDEATH1('DEM2', 7, 6.0 / 35.0, S_DEMN2_XDEATH2) { }
	S_DEMN2_XDEATH2('DEM2', 8, 6.0 / 35.0, S_DEMN2_XDEATH3) { A_Demon2Death(); }
	S_DEMN2_XDEATH3('DEM2', 9, 6.0 / 35.0, S_DEMN2_XDEATH4) { A_Scream(); }
	S_DEMN2_XDEATH4('DEM2', 10, 6.0 / 35.0, S_DEMN2_XDEATH5) { A_NoBlocking(); }
	S_DEMN2_XDEATH5('DEM2', 11, 6.0 / 35.0, S_DEMN2_XDEATH6) { A_QueueCorpse(); }
	S_DEMN2_XDEATH6('DEM2', 12, 6.0 / 35.0, S_DEMN2_XDEATH7) { }
	S_DEMN2_XDEATH7('DEM2', 13, 6.0 / 35.0, S_DEMN2_XDEATH8) { }
	S_DEMN2_XDEATH8('DEM2', 14, 6.0 / 35.0, S_DEMN2_XDEATH9) { }
	S_DEMN2_XDEATH9('DEM2', 15, -1.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_DEMN2_LOOK1;
	SeeState = S_DEMN2_CHASE1;
	MeleeState = S_DEMN2_ATK1_1;
	MissileState = S_DEMN2_ATK2_1;
	PainState = S_DEMN2_PAIN1;
	DeathState = S_DEMN2_DEATH1;
	GibsDeathState = S_DEMN2_XDEATH1;
	FireBallType = Demon2Missile;
}

}

//**************************************************************************
//
//	DemonMash
//
//**************************************************************************

class DemonMash:Demon
{

defaultproperties
{
	GibsHealth = 0;
	Translucency = 33;
	bNoBlood = true;
	bBlasted = true;
	bTelestomp = false;
	bActivatePushWall = true;
	DeathState = S_NULL;
	GibsDeathState = S_NULL;
	IceDeathState = S_NULL;
}

}

//**************************************************************************
//
//	Demon2Mash
//
//**************************************************************************

class Demon2Mash:Demon2
{

defaultproperties
{
	GibsHealth = 0;
	Translucency = 33;
	bNoBlood = true;
	bBlasted = true;
	bTelestomp = false;
	bActivatePushWall = true;
	DeathState = S_NULL;
	GibsDeathState = S_NULL;
	IceDeathState = S_NULL;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.21  2002/06/14 15:49:45  dj_jl
//  Added Projectile class.
//
//  Revision 1.20  2002/05/18 17:00:00  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.19  2002/03/28 18:32:51  dj_jl
//  Little renaming, some bug fixes.
//
//  Revision 1.18  2002/03/02 17:58:36  dj_jl
//  Created Pawn class as a base class for all creatures.
//  Moved all monster classes into corresponding files.
//
//  Revision 1.17  2002/02/26 17:49:48  dj_jl
//  no message
//
//  Revision 1.16  2002/02/22 18:00:21  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.15  2002/02/14 19:20:58  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.14  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.13  2002/01/25 18:04:35  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.12  2002/01/24 18:19:26  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:54  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/11 18:19:41  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:25:57  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:23  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:42  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.5  2001/10/22 17:23:13  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:10  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/30 17:33:17  dj_jl
//  Added sound channels
//  
//  Revision 1.2  2001/07/27 14:27:52  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
