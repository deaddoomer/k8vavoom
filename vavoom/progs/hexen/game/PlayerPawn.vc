//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PlayerPawn:Pawn
	abstract;

// For cleric's invulnerability effect
bool bAltShadow;
bool bShadow;
bool bDontDraw;

int AttackEndState;

//==========================================================================
//
//  GiveMana
//
//  Returns true if the player accepted the mana, false if it was
// refused (player has MAX_MANA).
//
//==========================================================================

bool GiveMana(int mana, int count)
{
	int prevMana;

	if (mana == MANA_NONE)
	{
		return false;
	}
	if (mana == MANA_BOTH)
	{
		//	Give both types. Do this here to simplify other code.
		// Use bitwise or to make sure bot types are given.
		return GiveMana(MANA_1, count) | GiveMana(MANA_2, count);
	}
	if (mana < 0 || mana > NUMMANA)
	{
		Error("Actor::GiveMana: bad type %i", mana);
	}
	if (Player->Mana[mana] == MAX_MANA)
	{
		return false;
	}
	if (gameskill == sk_baby || gameskill == sk_nightmare)
	{
		// extra mana in baby mode and nightmare mode
		count += count >> 1;
	}
	prevMana = Player->Mana[mana];

	Player->Mana[mana] += count;
	if (Player->Mana[mana] > MAX_MANA)
	{
		Player->Mana[mana] = MAX_MANA;
	}
	if (prevMana <= 0)
	{
		Weapon(Player->ViewEnts[ps_weapon]).GotMana(mana);
	}
	return true;
}

//==========================================================================
//
//  GiveBody
//
//  Returns false if the body isn't needed at all.
//
//==========================================================================

bool GiveBody(int num)
{
	int max;

	max = MAXHEALTH;
	if (Player->MorphTime)
	{
		max = MAXMORPHHEALTH;
	}
	if (Health >= max)
	{
		return false;
	}
	Health += num;
	if (Health > max)
	{
		Health = max;
	}
	Player->Health = Health;
	return true;
}

//==========================================================================
//
//  GiveArmor
//
//  Returns false if the armor is worse than the current armor.
//
//==========================================================================

bool GiveArmor(int armortype, int amount)
{
	float hits;
	float totalArmor;

	if (amount == -1)
	{
		hits = ArmorIncrement[Player->PClass * NUMARMOR + armortype];
		if (Player->ArmorPoints[armortype] >= hits)
		{
			return false;
		}
		else
		{
			Player->ArmorPoints[armortype] = hits;
		}
	}
	else
	{
		hits = itof(amount) * 5.0;
		totalArmor = Player->ArmorPoints[ARMOR_ARMOR]
			+ Player->ArmorPoints[ARMOR_SHIELD]
			+ Player->ArmorPoints[ARMOR_HELMET]
			+ Player->ArmorPoints[ARMOR_AMULET]
			+ AutoArmorSave[Player->PClass];
		if (totalArmor < ArmorMax[Player->PClass] * 5.0)
		{
			Player->ArmorPoints[armortype] += hits;
		}
		else
		{
			return false;
		}
	}
	return true;
}

//==========================================================================
//
//  GiveKey
//
//==========================================================================

bool GiveKey(int key)
{
	if (Player->Keys & (1 << key))
	{
		return false;
	}
	Player->BonusFlash += BONUSADD;
	Player->Keys |= 1 << key;
	return true;
}

//==========================================================================
//
//  GivePower
//
//  Returns true if power accepted.
//
//==========================================================================

bool GivePower(int power)
{
	if (power == pw_invulnerability)
	{
		if (Player->Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Player->Powers[power] = INVULNTIME;
		bInvulnerable = true;
		if (Player->PClass == PCLASS_MAGE)
		{
			bReflective = true;
		}
		return true;
	}
	if (power == pw_flight)
	{
		if (Player->Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Player->Powers[power] = FLIGHTTIME;
		bFly = true;
		bNoGravity = true;
		if (Origin.z <= FloorZ)
		{
			Player->FlyHeight = 10.0;	// thrust the player in the air a bit
		}
		return (true);
	}
	if (power == pw_infrared)
	{
		if (Player->Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Player->Powers[power] = INFRATIME;
		return true;
	}
	if (power == pw_speed)
	{
		if (Player->Powers[power] > BLINKTHRESHOLD)
		{
			// Already have it
			return false;
		}
		Player->Powers[power] = SPEEDTIME;
		return true;
	}
	if (power == pw_minotaur)
	{
		// Doesn't matter if already have power, renew ticker
		Player->Powers[power] = MAULATORTIME;
		return true;
	}
	if (Player->Powers[power])
	{
		return false;	// already got it
	}
	Player->Powers[power] = 1.0;
	return true;
}

//==========================================================================
//
//  GiveArtifact
//
//  Returns true if artifact accepted.
//
//==========================================================================

bool GiveArtifact(int arti)
{
	int i;
	int j;
	bool slidePointer;

	slidePointer = false;
	i = 0;
	while (Player->Inventory[i].type != arti && i < Player->InventorySlotNum)
	{
		i++;
	}
	if (i == Player->InventorySlotNum)
	{
		if (arti < arti_firstpuzzitem)
		{
			i = 0;
			while (Player->Inventory[i].type < arti_firstpuzzitem
				&& i < Player->InventorySlotNum)
			{
				i++;
			}
			if (i != Player->InventorySlotNum)
			{
				for (j = Player->InventorySlotNum; j > i; j--)
				{
					Player->Inventory[j].count =
						Player->Inventory[j - 1].count;
					Player->Inventory[j].type = Player->Inventory[j - 1].type;
					slidePointer = true;
				}
			}
		}
		Player->Inventory[i].count = 1;
		Player->Inventory[i].type = arti;
		Player->InventorySlotNum++;
	}
	else
	{
		if (arti >= arti_firstpuzzitem && netgame && !deathmatch)
		{
			// Can't carry more than 1 puzzle item in coop netplay
			return false;
		}
		if (Player->Inventory[i].count >= 25)
		{
			// Player already has 25 of this item
			return false;
		}
		Player->Inventory[i].count++;
	}
	if (!Player->ArtifactCount)
	{
		Player->ReadyArtifact = arti;
	}
	else if (slidePointer && i <= Player->InvPtr)
	{
		Player->InvPtr++;
		Player->InvCurPos++;
		if (Player->InvCurPos > 6)
		{
			Player->InvCurPos = 6;
		}
	}
	Player->ArtifactCount++;
	return true;
}

//==========================================================================
//
//  InventoryLeft
//
//==========================================================================

void InventoryLeft(void)
{
	if (!Player->InventoryTime)
	{
		Player->InventoryTime = 5.0;
		return;
	}
	Player->InventoryTime = 5.0;
	Player->InvPtr--;
	if (Player->InvPtr < 0)
	{
		Player->InvPtr = 0;
	}
	else
	{
		Player->InvCurPos--;
		if (Player->InvCurPos < 0)
		{
			Player->InvCurPos = 0;
		}
	}
}

//==========================================================================
//
//  InventoryRight
//
//==========================================================================

void InventoryRight(void)
{
	if (!Player->InventoryTime)
	{
		Player->InventoryTime = 5.0;
		return;
	}
	Player->InventoryTime = 5.0;
	Player->InvPtr++;
	if (Player->InvPtr >= Player->InventorySlotNum)
	{
		Player->InvPtr--;
		if (Player->InvPtr < 0)
			Player->InvPtr = 0;
	}
	else
	{
		Player->InvCurPos++;
		if (Player->InvCurPos > 6)
		{
			Player->InvCurPos = 6;
		}
	}
}

//==========================================================================
//
//  InventoryUse
//
//==========================================================================

void InventoryUse(void)
{
	Player->ReadyArtifact = Player->Inventory[Player->InvPtr].type;
	// flag to denote that it's okay to use an artifact
	if (Player->InventoryTime)
	{
		Player->InventoryTime = 0.0;
	}
	else
	{
		Player->Arti = Player->ReadyArtifact;
	}
}

//==========================================================================
//
//  InventoryTick
//
//==========================================================================

void InventoryTick(float deltaTime)
{
	// turn inventory off after a certain amount of time
	if (Player->InventoryTime)
	{
		Player->InventoryTime -= deltaTime;
		if (Player->InventoryTime <= 0.0)
		{
			Player->InventoryTime = 0.0;
			Player->ReadyArtifact = Player->Inventory[Player->InvPtr].type;
		}
	}
	if (Player->ArtifactFlash)
	{
		Player->ArtifactFlash--;
	}
}

//==========================================================================
//
//  MovePlayer
//
//==========================================================================

void MovePlayer(float deltaTime)
{
	float fly;
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	forward = Player->ForwardMove;
	side = Player->SideMove;

	//  Adjust speed depending on class. Originaly this is done in input
	// code, but to simplify it, we do it here.
	//  Fighter moves faster, cleric at original speed, mage - slower,
	// pig - slower, but faster than mage
	switch (Player->PClass)
	{
	case PCLASS_FIGHTER:
		forward *= 1.18;
		side *= 1.3;
		break;

	case PCLASS_CLERIC:
		break;

	case PCLASS_MAGE:
		forward *= 0.9;
		side *= 0.9;
		break;

	case PCLASS_PIG:
		forward *= 0.97;
		side *= 0.97;
		break;
	}

	if (Player->Powers[pw_speed] && !Player->MorphTime)
	{
		// Adjust for a player with a speed artifact
		forward *= 1.5;
		side *= 1.5;
	}
	if (!(Player->Powers[pw_flight] && !(Origin.z <= FloorZ)) &&
		GetFloorType() == FLOOR_ICE)	// Friction_Low
	{
		forward *= 0.5;
		side *= 0.5;
	}

	// Do not let the player control movement
	//  if not onground.
	onground = (Origin.z <= FloorZ) || bOnMobj;
	if (!(onground || bFly))
	{
		//  not on ground, so little effect on velocity
		forward *= air_control;
		side *= air_control;
	}

	AngleVectors(&Angles, &vforward, &vright, &vup);

	wishvel = forward * vforward + side * vright;
	if (onground && !bFly)
	{
		wishvel.z = 0.0;
	}

	Velocity += 5.0 * deltaTime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState();
	}

	fly = Player->FlyMove / 16.0;
	if (fly && Player->Powers[pw_flight])
	{
		if (Player->FlyMove != TOCENTER)
		{
			Player->FlyHeight = fly * 2.0;
			if (!bFly)
			{
				bFly = true;
				bNoGravity = true;
				if (Velocity.z <= -39.0 * 35.0)
				{
					// stop falling scream
					StopSound(CHAN_AUTO);
				}
			}
		}
		else
		{
			bFly = false;
			bNoGravity = false;
		}
	}
	else if (fly > 0.0)
	{
		PlayerUseArtifact(arti_fly);
	}
	if (bFly)
	{
		Velocity.z = Player->FlyHeight * 35.0 + wishvel.z;
		if (Player->FlyHeight)
		{
			Player->FlyHeight /= 2.0;
		}
	}
	if ((Player->Buttons & BT_JUMP) && onground && !Player->JumpTime)
	{
		if (Player->MorphTime)
		{
			Velocity.z = 6.0 * 35.0;
		}
		else
		{
			Velocity.z = 9.0 * 35.0;
		}
		bOnMobj = false;
		Player->JumpTime = 0.5;
	}
}

//==========================================================================
//
//  CheckWaterJump
//
//==========================================================================

void CheckWaterJump(void)
{
	TVec start;
	TVec end;
	TVec vforward;

	// check for a jump-out-of-water
	AngleVector(&Angles, &vforward);
	start = Origin;
	start.z += Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalize(vforward);
	end = start + vforward * 24.0;
	if (!TraceLine(start, end))
	{
		// solid at waist
		start.z = Origin.z + Height;
		end = start + vforward * 24.0;
		Player->MoveDir = trace_plane_normal * -50.0;
		if (TraceLine(start, end))
		{
			// open at eye level
			bWaterJump = true;
			Velocity.z = 350.0;
			ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  WaterMove
//
//==========================================================================

void WaterMove(float deltaTime)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	// Do not let the player control movement
	//  if not onground.
	onground = (Origin.z <= FloorZ) || bOnMobj;

	AngleVectors(&Angles, &vforward, &vright, &vup);

	forward = Player->ForwardMove;
	side = Player->SideMove;

	//  Adjust speed depending on class. Originaly this is done in input
	// code, but to simplify it, we do it here.
	//  Fighter moves faster, cleric at original speed, mage - slower,
	// pig - slower, but faster than mage
	switch (Player->PClass)
	{
	case PCLASS_FIGHTER:
		forward *= 1.18;
		side *= 1.3;
		break;

	case PCLASS_CLERIC:
		break;

	case PCLASS_MAGE:
		forward *= 0.9;
		side *= 0.9;
		break;

	case PCLASS_PIG:
		forward *= 0.97;
		side *= 0.97;
		break;
	}

	if (Player->Powers[pw_speed] && !Player->MorphTime)
	{
		// Adjust for a player with a speed artifact
		forward *= 1.5;
		side *= 1.5;
	}

	wishvel = vforward * forward + vright * side;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  else
//      wishvel.z += cmd.upmove;

	Velocity += 3.5 * deltaTime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if (Player->Buttons & BT_JUMP)
	{
		if (WaterType == CONTENTS_WATER)
			Velocity.z = 100.0;
		else if (WaterType == CONTENTS_SLUDGE)
			Velocity.z = 80.0;
		else
			Velocity.z = 50.0;
	}
	CheckWaterJump();
}

//==========================================================================
//
//  WaterJump
//
//==========================================================================

void WaterJump(void)
{
	if (!ReactionTime || !WaterLevel)
	{
		bWaterJump = false;
		ReactionTime = 0.0;
	}
	Velocity.x = Player->MoveDir.x;
	Velocity.y = Player->MoveDir.y;
}

//==========================================================================
//
//  ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void ThrustPlayer(float angle, float move, float deltaTime)
{
	if (!(Player->Powers[pw_flight] && !(Origin.z <= FloorZ)) &&
		GetFloorType() == FLOOR_ICE)	// Friction_Low
	{
		move *= 0.5;
	}
	Velocity.x += move * cos(angle) * deltaTime;
	Velocity.y += move * sin(angle) * deltaTime;
}

//==========================================================================
//
//  CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void CalcHeight(float deltaTime)
{
	float angle;
	float bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	Player->Bob = Velocity.x * Velocity.x + Velocity.y * Velocity.y;
	Player->Bob /= 4.0 * 35.0 * 35.0;
	if (Player->Bob > MAXBOB)
		Player->Bob = MAXBOB;

	if (bFly && !onground)
	{
		Player->Bob = 0.5;
	}

	angle = 180.0 * 35.0 / 10.0 * level->time;
	bob = Player->Bob / 2.0 * sin(angle);

	// move viewheight
	if (Player->PlayerState == PST_LIVE)
	{
		Player->ViewHeight += Player->DeltaViewHeight * deltaTime;

		if (Player->ViewHeight > VIEWHEIGHT)
		{
			Player->ViewHeight = VIEWHEIGHT;
			Player->DeltaViewHeight = 0.0;
		}

		if (Player->ViewHeight < VIEWHEIGHT / 2.0)
		{
			Player->ViewHeight = VIEWHEIGHT / 2.0;
			if (Player->DeltaViewHeight <= 0.0)
				Player->DeltaViewHeight = 0.00001;
		}

		if (Player->DeltaViewHeight)
		{
			Player->DeltaViewHeight += 256.0 * deltaTime;
			if (!Player->DeltaViewHeight)
				Player->DeltaViewHeight = 0.00001;
		}
	}
	if (Player->MorphTime)
	{
		Player->ViewOrg.z = Origin.z + Player->ViewHeight - 20.0;
	}
	else
	{
		Player->ViewOrg.z = Origin.z + Player->ViewHeight + bob;
	}
	if (FloorClip && Player->PlayerState != PST_DEAD &&
		Origin.z <= FloorZ)
	{
		Player->ViewOrg.z -= FloorClip;
	}
	if (Player->ViewOrg.z < FloorZ + 4.0)
	{
		Player->ViewOrg.z = FloorZ + 4.0;
	}

	if (Player->ViewOrg.z > CeilingZ - 4.0)
		Player->ViewOrg.z = CeilingZ - 4.0;
}

//==========================================================================
//
//  PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector.
//
//==========================================================================

void PlayerInSpecialSector(float deltaTime)
{
	//FIXME Bullshit, doesn't work on slopes
	if (Origin.z != Sector->floorheight)
	{
		// Player is not touching the floor
		return;
	}
	switch (Sector->special)
	{
	case 9:	// SecretArea
		Player->SecretCount++;
		Sector->special = 0;
		break;

	case 201:
	case 202:
	case 203:	// Scroll_North_xxx
		ThrustPlayer(90.0, pushTab[Sector->special - 201], deltaTime);
		break;
	case 204:
	case 205:
	case 206:	// Scroll_East_xxx
		ThrustPlayer(0.0, pushTab[Sector->special - 204], deltaTime);
		break;
	case 207:
	case 208:
	case 209:	// Scroll_South_xxx
		ThrustPlayer(270.0, pushTab[Sector->special - 207], deltaTime);
		break;
	case 210:
	case 211:
	case 212:	// Scroll_West_xxx
		ThrustPlayer(180.0, pushTab[Sector->special - 210], deltaTime);
		break;
	case 213:
	case 214:
	case 215:	// Scroll_NorthWest_xxx
		ThrustPlayer(135.0, pushTab[Sector->special - 213], deltaTime);
		break;
	case 216:
	case 217:
	case 218:	// Scroll_NorthEast_xxx
		ThrustPlayer(45.0, pushTab[Sector->special - 216], deltaTime);
		break;
	case 219:
	case 220:
	case 221:	// Scroll_SouthEast_xxx
		ThrustPlayer(315.0, pushTab[Sector->special - 219], deltaTime);
		break;
	case 222:
	case 223:
	case 224:	// Scroll_SouthWest_xxx
		ThrustPlayer(225.0, pushTab[Sector->special - 222], deltaTime);
		break;

	case 40:
	case 41:
	case 42:
	case 43:
	case 44:
	case 45:
	case 46:
	case 47:
	case 48:
	case 49:
	case 50:
	case 51:
		// Wind specials are handled in (P_mobj):P_XYMovement
		break;

	case 26:	// Stairs_Special1
	case 27:	// Stairs_Special2
		// Used in (P_floor):ProcessStairSector
		break;

	case 198:	// Lightning Special
	case 199:	// Lightning Flash special
	case 200:	// Sky2
		// Used in (R_plane):R_Drawplanes
		break;
	}
}

//============================================================================
//
//  PlayerOnSpecialFlat
//
//============================================================================

void PlayerOnSpecialFlat(int floorType)
{
	if (Origin.z != FloorZ)
	{
		// Player is not touching the floor
		return;
	}
	switch (floorType)
	{
	case FLOOR_LAVA:
		if (!(level->tictime & 31))
		{
			Damage(GLavaInflictor, none, 10);
			PlaySound('LavaSizzle', CHAN_BODY);
		}
		break;
	default:
		break;
	}
}

//==========================================================================
//
//  PlayerInContents
//
//==========================================================================

void PlayerInContents(void)
{
	if (!WaterLevel)
	{
		return;
	}
	switch (WaterType)
	{
	case CONTENTS_LAVA:
		if (!(level->tictime & 31))
		{
			Damage(GLavaInflictor, none, 10);
			PlaySound('LavaSizzle', CHAN_BODY);
		}
		break;
	}
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse(void)
{
	int impulse;
	int i;

	impulse = Player->Impulse;
	Player->Impulse = 0;
	Player->Arti = 0;

	if (impulse <= NUMWEAPONS)
	{
		// The actual changing of the weapon is done when the weapon
		// psprite can do it (A_WeaponReady), so it doesn't happen in
		// the middle of an attack.
		if (Player->WeaponOwned[impulse - 1] &&
			impulse - 1 != Player->ReadyWeapon && !Player->MorphTime)
		{
			Player->PendingWeapon = impulse - 1;
		}
	}
	else if (impulse == 13)
	{
		InventoryLeft();
	}
	else if (impulse == 14)
	{
		InventoryRight();
	}
	else if (impulse == 15)
	{
		InventoryUse();
	}
	else if (impulse == 16)
	{
		Damage(none, none, 10000);
	}
	// Hexen artifact hot keys
	if (!Player->Arti)
	{
		if (impulse == 11)
		{
			Player->Arti = NUMARTIFACTS;
		}
		else if (impulse == 12 && (Health < MAXHEALTH))
		{
			Player->Arti = arti_health;
		}
		else if (impulse == 10)
		{
			Player->Arti = arti_poisonbag;
		}
		else if (impulse == 9)
		{
			Player->Arti = arti_blastradius;
		}
		else if (impulse == 8)
		{
			Player->Arti = arti_teleport;
		}
		else if (impulse == 7)
		{
			Player->Arti = arti_teleportother;
		}
		else if (impulse == 6)
		{
			Player->Arti = arti_egg;
		}
		else if (impulse == 5 && !Player->Powers[pw_invulnerability])
		{
			Player->Arti = arti_invulnerability;
		}
	}

	if (Player->Arti)
	{
		// Use an artifact
		if (Player->Arti == NUMARTIFACTS)
		{
			// use one of each artifact (except puzzle artifacts)
			for (i = 1; i < arti_firstpuzzitem; i++)
			{
				PlayerUseArtifact(i);
			}
		}
		else
		{
			PlayerUseArtifact(Player->Arti);
		}
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	int floorType;
	int newweapon;
	Actor speedA;

	if (Player->bIsBot)
	{
		Player->Bot.BotTick(deltaTime);
	}

	// Copy view angles
	Angles = Player->ViewAngles;

	// fixme: do this in the cheat code
	if (Player->Cheats & CF_NOCLIP)
	{
		bColideWithThings = false;
		bColideWithWorld = false;
	}
	else
	{
		bColideWithThings = true;
		bColideWithWorld = true;
	}

	if (bJustAttacked)
	{
		Player->ForwardMove = 100.0;
		Player->SideMove = 0.0;
		bJustAttacked = false;
	}

	Player->WorldTimer++;
	InventoryTick(deltaTime);

	if (Player->PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	if (Player->JumpTime)
	{
		Player->JumpTime -= deltaTime;
		if (Player->JumpTime <= 0.0)
			Player->JumpTime = 0.0;
	}
	if (Player->MorphTime)
	{
		MorphPlayerThink();
	}

	//  Move around.
	//  ReactionTime is used to prevent movement for a bit after a teleport.
	if (ReactionTime)
	{
		ReactionTime -= deltaTime;
		if (ReactionTime <= 0.0)
			ReactionTime = 0.0;
		if (bWaterJump)
			WaterJump();
	}
	else
	{
		if (WaterLevel >= 2)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
		if (Player->Powers[pw_speed] && !(level->tictime & 1) &&
			Length(Velocity) > 12.0 * 35.0)
		{
			speedA = Spawn(PlayerSpeed, Origin);
			if (speedA)
			{
				speedA.Angles.yaw = Angles.yaw;
				speedA.Translation = Translation;
				speedA.Instigator = self;
				speedA._Special1 = Player->PClass;
				if (speedA._Special1 > 2)
				{
					speedA._Special1 = 0;
				}
				speedA.SpriteIndex = SpriteIndex;
				speedA.FloorClip = FloorClip;
#ifdef FIXME
				if (Player == &players[consoleplayer])
				{
					speedA.bHidden = true;
				}
#endif
			}
		}
	}

	CalcHeight(deltaTime);

	if (Sector->special)
	{
		PlayerInSpecialSector(deltaTime);
	}
	floorType = GetFloorType();
	if (floorType != FLOOR_SOLID)
	{
		PlayerOnSpecialFlat(floorType);
	}
	PlayerInContents();

	switch (Player->PClass)
	{
	case PCLASS_FIGHTER:
		if (Velocity.z <= -35.0 * 35.0 && Velocity.z >= -40.0 * 35.0 &&
			!Player->MorphTime && !GetSoundPlayingInfo(self,
				GetSoundID('PlayerFighterFallingScream')))
		{
			PlaySound('PlayerFighterFallingScream', CHAN_VOICE);
		}
		break;
	case PCLASS_CLERIC:
		if (Velocity.z <= -35.0 * 35.0 && Velocity.z >= -40.0 * 35.0 &&
			!Player->MorphTime && !GetSoundPlayingInfo(self,
				GetSoundID('PlayerClericFallingScream')))
		{
			PlaySound('PlayerClericFallingScream', CHAN_VOICE);
		}
		break;
	case PCLASS_MAGE:
		if (Velocity.z <= -35.0 * 35.0 && Velocity.z >= -40.0 * 35.0 &&
			!Player->MorphTime && !GetSoundPlayingInfo(self,
				GetSoundID('PlayerMageFallingScream')))
		{
			PlaySound('PlayerMageFallingScream', CHAN_VOICE);
		}
		break;
	default:
		break;
	}

	// Check for weapon change.
	if (Player->Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Player->Buttons & BT_USE)
	{
		if (!Player->bUseDown)
		{
			P_UseLines(Player);
			Player->bUseDown = true;
		}
	}
	else
	{
		Player->bUseDown = false;
	}

	// Morph counter
	if (Player->MorphTime)
	{
		Player->MorphTime -= deltaTime;
		if (Player->MorphTime <= 0.0)
		{
			// Attempt to undo the pig
			Player->MorphTime = 0.0;
			UndoPlayerMorph();
		}
	}

	// cycle psprites
	MovePsprites(Player);

	// Counters, time dependend power ups.

	if (Player->Powers[pw_invulnerability])
	{
		if (Player->PClass == PCLASS_CLERIC)
		{
			if (!(level->tictime & 7) && bShadow && !bDontDraw)
			{
				bShadow = false;
				if (!bAltShadow)
				{
					bDontDraw = true;
 					bNonShootable = true;
				}
			}
			if (!(level->tictime & 31))
			{
				if (bDontDraw)
				{
					if (!bShadow)
					{
						bShadow = true;
 						bAltShadow = true;
					}
					else
					{
						bDontDraw = false;
 						bNonShootable = false;
					}
				}
				else
				{
					bShadow = true;
					bAltShadow = false;
				}
			}
			if (bDontDraw)
			{
				Translucency = 100;
			}
			else if (bShadow)
			{
				Translucency = 66;
			}
			else if (bAltShadow)
			{
				Translucency = 33;
			}
			else
			{
				Translucency = 0;
			}
		}
		Player->Powers[pw_invulnerability] -= deltaTime;
		if (Player->Powers[pw_invulnerability] <= 0.0)
		{
			Player->Powers[pw_invulnerability] = 0.0;
			bInvulnerable = false;
			bReflective = false;
			if (Player->PClass == PCLASS_CLERIC)
			{
				bNonShootable = false;
				Translucency = 0;
			}
		}
	}

	if (Player->Powers[pw_minotaur])
	{
		Player->Powers[pw_minotaur] -= deltaTime;
		if (Player->Powers[pw_minotaur] <= 0.0)
			Player->Powers[pw_minotaur] = 0.0;
	}

	if (Player->Powers[pw_infrared])
	{
		Player->Powers[pw_infrared] -= deltaTime;
		if (Player->Powers[pw_infrared] <= 0.0)
			Player->Powers[pw_infrared] = 0.0;
	}

	if (Player->Powers[pw_speed])
	{
		Player->Powers[pw_speed] -= deltaTime;
		if (Player->Powers[pw_speed] <= 0.0)
			Player->Powers[pw_speed] = 0.0;
	}

	if (Player->Powers[pw_flight] && netgame)
	{
		Player->Powers[pw_flight] -= deltaTime;
		if (Player->Powers[pw_flight] <= 0.0)
		{
			Player->Powers[pw_flight] = 0.0;
			if (Origin.z != FloorZ)
			{
//FIXME             player->centering = true;
			}
			bFly = false;
			bNoGravity = false;
		}
	}

	if (Player->PoisonCount && level->time - Player->LastPoisonTime >= 0.5)
	{
		Player->PoisonCount -= 5;
		if (Player->PoisonCount < 0)
		{
			Player->PoisonCount = 0;
		}
		Player->LastPoisonTime = level->time;
		PoisonDamage(*Player->Poisoner, 1, true);
	}

	if (Player->DamageFlash)
	{
		Player->DamageFlash -= deltaTime;
		if (Player->DamageFlash <= 0.0)
			Player->DamageFlash = 0.0;
	}

	if (Player->BonusFlash)
	{
		Player->BonusFlash -= deltaTime;
		if (Player->BonusFlash <= 0.0)
			Player->BonusFlash = 0.0;
	}

	// Handling colormaps.
	if (Player->Powers[pw_infrared])
	{
		if (Player->Powers[pw_infrared] <= BLINKTHRESHOLD)
		{
			if (ftoi(Player->Powers[pw_infrared] * 35.0) & 8)
			{
				Player->FixedColormap = 0;
			}
			else
			{
				Player->FixedColormap = 1;
			}
		}
		else if (!(level->tictime & 16))
		{
			if (Player->NewTorch)
			{
				if (Player->FixedColormap + Player->NewTorchDelta > 7 ||
					Player->FixedColormap + Player->NewTorchDelta < 1 ||
					Player->FixedColormap == Player->NewTorch)
				{
					Player->NewTorch = 0;
				}
				else
				{
					Player->FixedColormap += Player->NewTorchDelta;
				}
			}
			else
			{
				Player->NewTorch = (P_Random() & 7) + 1;
				Player->NewTorchDelta =
					(Player->NewTorch ==
					Player->FixedColormap) ? 0 : ((Player->NewTorch >
						Player->FixedColormap) ? 1 : -1);
			}
		}
	}
	else
		Player->FixedColormap = 0;

	//	Need this for unmorphing
	if (!bIsPlayer)
	{
		Player = NULL;
	}
}

//==========================================================================
//
//  PaletteFlash
//
//  Sets the new palette based upon the current values of
// Player->DamageFlash and Player->BonusFlash.
//
//==========================================================================

void PaletteFlash(void)
{
	Player->CShifts[CSHIFT_CONTENTS] = 0;
	if (WaterLevel == 3)
	{
		switch (WaterType)
		{
		case CONTENTS_WATER:
			Player->CShifts[CSHIFT_CONTENTS] = CSHIFT(130, 80, 50, 128);
			break;

		case CONTENTS_SLUDGE:
			Player->CShifts[CSHIFT_CONTENTS] = CSHIFT(128, 160, 128, 150);
			break;

		case CONTENTS_LAVA:
			Player->CShifts[CSHIFT_CONTENTS] = CSHIFT(255, 80, 0, 150);
			break;
		}
	}

	if (Player->PoisonCount)
	{
		Player->Palette = 0;
		Player->Palette = (Player->PoisonCount + 7) >> 3;
		if (Player->Palette >= NUMPOISONPALS)
		{
			Player->Palette = NUMPOISONPALS - 1;
		}
		Player->Palette += STARTPOISONPALS;
	}
	else if (Player->DamageFlash)
	{
		Player->Palette = (ftoi(32.0 * Player->DamageFlash) + 7) >> 3;
		if (Player->Palette >= NUMREDPALS)
		{
			Player->Palette = NUMREDPALS - 1;
		}
		Player->Palette += STARTREDPALS;
	}
	else if (Player->BonusFlash)
	{
		Player->Palette = (ftoi(32.0 * Player->BonusFlash) + 7) >> 3;
		if (Player->Palette >= NUMBONUSPALS)
		{
			Player->Palette = NUMBONUSPALS - 1;
		}
		Player->Palette += STARTBONUSPALS;
	}
	else if (bIceDamage)
	{
		// Frozen player
		Player->Palette = STARTICEPAL;
	}
	else
	{
		Player->Palette = Player->WeaponPalette;
	}
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos(void)
{
	Player->ViewOrg.x = Origin.x;
	Player->ViewOrg.y = Origin.y;

	if (Player->LocalQuakeHappening)
	{
		float intensity;

		intensity = itof(Player->LocalQuakeHappening);
		Player->ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
		Player->ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
	}

	Player->ViewAngles = Angles;

	PaletteFlash();

	Player->Stats.flags = Player->Keys;
	Player->Stats.flags |= Player->ReadyWeapon << SBF_WPN_SHIFT;
	Player->Stats.flags |= Player->Pieces << SBF_PIECES_SHIFT;
	if (Player->Powers[pw_flight])
	{
		if (Player->Powers[pw_flight] > BLINKTHRESHOLD ||
			!(ftoi(Player->Powers[pw_flight] * 35.0) & 16))
		{
			Player->Stats.flags |= SBF_POWER_FLIGHT;
		}
	}
	if (Player->Powers[pw_speed])
	{
		if (Player->Powers[pw_speed] > BLINKTHRESHOLD ||
			!(ftoi(Player->Powers[pw_speed] * 35.0) & 16))
		{
			Player->Stats.flags |= SBF_POWER_SPEED;
		}
	}
	if (Player->Powers[pw_invulnerability])
	{
		if (Player->Powers[pw_invulnerability] > BLINKTHRESHOLD ||
			!(ftoi(Player->Powers[pw_invulnerability] * 35.0) & 16))
		{
			Player->Stats.flags |= SBF_POWER_INVULN;
		}
	}
	if (Player->Powers[pw_minotaur])
	{
		if (Player->Powers[pw_minotaur] > BLINKTHRESHOLD ||
			!(ftoi(Player->Powers[pw_minotaur] * 35.0) & 16))
		{
			Player->Stats.flags |= SBF_POWER_MINOTAUR;
		}
	}
	if (bFly)
	{
		Player->Stats.flags |= SBF_IN_FLIGHT;
	}
}

//==========================================================================
//
//  UseArtiHealRadius
//
//  Do class specific effect for everyone in radius
//
//==========================================================================

bool UseArtiHealRadius(void)
{
	PlayerPawn P;
	float dist;
	int effective = false;
	int amount;

	FOREACH(PlayerPawn, P)
	{
		if (!P.bIsPlayer)
			continue;
		if (P.Health <= 0)
			continue;
		dist = MobjDist(self, P);
		if (dist > HEAL_RADIUS_DIST)
		{
			// Out of range
			continue;
		}

		switch (Player->PClass)
		{
		case PCLASS_FIGHTER:	// Radius armor boost
			if ((P.GiveArmor(ARMOR_ARMOR, 1)) ||
				(P.GiveArmor(ARMOR_SHIELD, 1)) ||
				(P.GiveArmor(ARMOR_HELMET, 1)) ||
				(P.GiveArmor(ARMOR_AMULET, 1)))
			{
				effective = true;
				P.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case PCLASS_CLERIC:	// Radius heal
			amount = 50 + (P_Random() % 50);
			if (P.GiveBody(amount))
			{
				effective = true;
				P.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case PCLASS_MAGE:	// Radius mana boost
			amount = 50 + (P_Random() % 50);
			if ((P.GiveMana(MANA_1, amount)) ||
				(P.GiveMana(MANA_2, amount)))
			{
				effective = true;
				P.PlaySound('MysticIncant', CHAN_ITEM);
			}
			break;
		case PCLASS_PIG:
		default:
			break;
		}
	}
	return effective;
}

//==========================================================================
//
//  UseArtiTele
//
//==========================================================================

void UseArtiTele(void)
{
	int i;
	float destX;
	float destY;
	float destAngle;

	if (deathmatch)
	{
		i = P_Random() % level->numdeathmatchstarts;
		destX = level->deathmatchstarts[i].x;
		destY = level->deathmatchstarts[i].y;
		destAngle = itof(45 * (level->deathmatchstarts[i].angle / 45));
	}
	else
	{
		destX = level->playerstarts[0].x;
		destY = level->playerstarts[0].y;
		destAngle = itof(45 * (level->playerstarts[0].angle / 45));
	}
	Teleport(vector(destX, destY, ONFLOORZ), destAngle, true);
	if (Player->MorphTime)
	{
		// Teleporting away will undo any morph effects (pig)
		UndoPlayerMorph();
	}
}

//==========================================================================
//
//  UseArtifact
//
//  Returns true if the artifact was used.
//
//==========================================================================

bool UseArtifact(int arti)
{
	int i;
	int count;

	switch (arti)
	{
	case arti_health:
		if (!GiveBody(25))
		{
			return false;
		}
		break;
	case arti_superhealth:
		if (!GiveBody(100))
		{
			return false;
		}
		break;
	case arti_invulnerability:
		if (!GivePower(pw_invulnerability))
		{
			return false;
		}
		break;
	case arti_torch:
		if (!GivePower(pw_infrared))
		{
			return false;
		}
		break;
	case arti_fly:
		if (!GivePower(pw_flight))
		{
			return false;
		}
		if (Velocity.z <= -35.0 * 35.0)
		{
			// stop falling scream
			StopSound(CHAN_AUTO);
		}
		break;
	case arti_teleport:
		UseArtiTele();
		break;
	case arti_egg:
		UseArtiPig();
		break;
	case arti_healingradius:
		if (!UseArtiHealRadius())
		{
			return false;
		}
		break;
	case arti_summon:
		UseArtiSummon();
		break;
	case arti_blastradius:
		UseArtiBlastRadius();
		break;
	case arti_poisonbag:
		UseArtiPoisonBag();
		break;
	case arti_teleportother:
		UseArtiTeleportOther();
		break;
	case arti_speed:
		if (!GivePower(pw_speed))
		{
			return false;
		}
		break;
	case arti_boostmana:
		if (!GiveMana(MANA_BOTH, MAX_MANA))
		{
			return false;
		}
		break;
	case arti_boostarmor:
		count = 0;

		for (i = 0; i < NUMARMOR; i++)
		{
			count += GiveArmor(i, 1);	// 1 point per armor type
		}
		if (!count)
		{
			return false;
		}
		break;

	case arti_puzzskull:
	case arti_puzzgembig:
	case arti_puzzgemred:
	case arti_puzzgemgreen1:
	case arti_puzzgemgreen2:
	case arti_puzzgemblue1:
	case arti_puzzgemblue2:
	case arti_puzzbook1:
	case arti_puzzbook2:
	case arti_puzzskull2:
	case arti_puzzfweapon:
	case arti_puzzcweapon:
	case arti_puzzmweapon:
	case arti_puzzgear1:
	case arti_puzzgear2:
	case arti_puzzgear3:
	case arti_puzzgear4:
		if (P_UsePuzzleItem(Player, arti - arti_firstpuzzitem))
		{
			return true;
		}
		else
		{
			centerprint(Player, TXT_USEPUZZLEFAILED);
			return false;
		}
		break;
	default:
		return false;
	}
	return true;
}

//==========================================================================
//
//  PlayerUseArtifact
//
//==========================================================================

void PlayerUseArtifact(int arti)
{
	int i;

	for (i = 0; i < Player->InventorySlotNum; i++)
	{
		if (Player->Inventory[i].type == arti)
		{
			// Found match - try to use
			if (UseArtifact(arti))
			{
				// Artifact was used - remove it from inventory
				PlayerRemoveArtifact(i);
				if (arti < arti_firstpuzzitem)
				{
					PlaySound('UseArtifact', CHAN_ITEM);
				}
				else
				{
					PlaySound('PuzzleSuccess', CHAN_ITEM);
				}
				Player->ArtifactFlash = 4;
			}
			else if (arti < arti_firstpuzzitem)
			{
				// Unable to use artifact, advance pointer
				PlayerNextArtifact();
			}
			break;
		}
	}
}

//==========================================================================
//
//  PlayerNextArtifact
//
//==========================================================================

void PlayerNextArtifact(void)
{
	Player->InvPtr--;
	if (Player->InvPtr < 6)
	{
		Player->InvCurPos--;
		if (Player->InvCurPos < 0)
		{
			Player->InvCurPos = 0;
		}
	}
	if (Player->InvPtr < 0)
	{
		Player->InvPtr = Player->InventorySlotNum - 1;
		if (Player->InvPtr < 6)
		{
			Player->InvCurPos = Player->InvPtr;
		}
		else
		{
			Player->InvCurPos = 6;
		}
	}
	Player->ReadyArtifact = Player->Inventory[Player->InvPtr].type;
}

//==========================================================================
//
//  PlayerRemoveArtifact
//
//==========================================================================

void PlayerRemoveArtifact(int slot)
{
	int i;

	Player->ArtifactCount--;
	if (!(--Player->Inventory[slot].count))
	{
		// Used last of a type - compact the artifact list
		Player->ReadyArtifact = arti_none;
		Player->Inventory[slot].type = arti_none;
		for (i = slot + 1; i < Player->InventorySlotNum; i++)
		{
			Player->Inventory[i - 1].type = Player->Inventory[i].type;
			Player->Inventory[i - 1].count = Player->Inventory[i].count;
		}
		Player->InventorySlotNum--;
		// Set position markers and get next ReadyArtifact
		Player->InvPtr--;
		if (Player->InvPtr < 6)
		{
			Player->InvCurPos--;
			if (Player->InvCurPos < 0)
			{
				Player->InvCurPos = 0;
			}
		}
		if (Player->InvPtr >= Player->InventorySlotNum)
		{
			Player->InvPtr = Player->InventorySlotNum - 1;
		}
		if (Player->InvPtr < 0)
		{
			Player->InvPtr = 0;
		}
		Player->ReadyArtifact = Player->Inventory[Player->InvPtr].type;
	}
}

//==========================================================================
//
//  SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor SpawnPlayerMissile(classid type)
{
	Actor MissileMobj;
	TAVec angles;
	TVec vforward;
	TVec org;

	// Try to find a target
	avcpy(Angles, angles);
	AimLineAttack(self, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(self, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(self, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = Angles.yaw;
			}
		}
	}
	org = Origin;
	if (type == LightningFloor)
	{
		org.z = ONFLOORZ;
		angles.pitch = 0.0;
	}
	else if (type == LightningCeiling)
	{
		org.z = ONCEILINGZ;
		angles.pitch = 0.0;
	}
	else
	{
		org.z = Origin.z + 4.0 * 8.0 - tan(Angles.pitch);
		org.z -= FloorClip;
	}
	MissileMobj = Spawn(type, org);
	MissileMobj.Instigator = self;
	avcpy(angles, MissileMobj.Angles);
	AngleVector(&angles, &vforward);
	MissileMobj.Velocity = vforward * MissileMobj.Speed;
	if (MissileMobj.Class == MageWandMissile ||
		MissileMobj.Class == ClericFlameMissile)
	{
		// Ultra-fast ripper spawning missile
		MissileMobj.Origin += MissileMobj.Velocity * frametime / 8.0;
	}
	else
	{
		// Normal missile
		MissileMobj.Origin += MissileMobj.Velocity * frametime / 2.0;
	}
	if (!MissileMobj.TryMove(MissileMobj.Origin))
	{
		// Exploded immediately
		MissileMobj.ExplodeMissile();
		return none;
	}
	return MissileMobj;
}

//===========================================================================
//
//  SpawnPlayerMissileAngle
//
//===========================================================================

Actor SpawnPlayerMissileAngle(classid type, float angle)
{
	TAVec angles;
	TVec vforward;
	Actor th;
	TVec org;

	//
	// see which target is to be aimed at
	//
	angles = Angles;
	angles.yaw = angle;
	AimLineAttack(self, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(self, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(self, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	org = Origin;
	org.z = Origin.z + 4.0 * 8.0 - tan(Angles.pitch);
	org.z -= FloorClip;
	th = Spawn(type, org);
	th.Instigator = self;
	th.Angles = angles;
	AngleVector(&angles, &vforward);
	th.Velocity = vforward * th.Speed;
	return th.CheckMissileSpawn() ? th : none;
}

//===========================================================================
//
//  SpawnPlayerMissileAngleXYZ
//
//===========================================================================

Actor SpawnPlayerMissileAngleXYZ(TVec org, classid type, float angle)
{
	Actor th;
	TAVec angles;
	TVec vforward;

	//
	// see which target is to be aimed at
	//
	angles = Angles;
	angles.yaw = angle;
	AimLineAttack(self, &angles, 16.0 * 64.0);
	if (!linetarget)
	{
		angles.yaw = AngleMod360(angles.yaw + 45.0 / 8.0);
		AimLineAttack(self, &angles, 16.0 * 64.0);
		if (!linetarget)
		{
			angles.yaw = AngleMod360(angles.yaw - 45.0 / 4.0);
			AimLineAttack(self, &angles, 16.0 * 64.0);
			if (!linetarget)
			{
				angles.yaw = angle;
			}
		}
	}
	org.z += 4.0 * 8.0 - tan(Angles.pitch);
	org.z -= FloorClip;
	th = Spawn(type, org);
	th.Instigator = self;
	th.Angles = angles;
	AngleVector(&angles, &vforward);
	th.Velocity = vforward * th.Speed;
	return th.CheckMissileSpawn() ? th : none;
}

//==========================================================================
//
//  MorphPlayerThink
//
//==========================================================================

void MorphPlayerThink(void)
{
	//FIXME this sucks
	if (ftoi(32.0 * Player->MorphTime) & 15)
	{
		return;
	}
	if (!(Velocity.x + Velocity.y) && P_Random() < 64)
	{
		// Snout sniff
		Weapon(Player->ViewEnts[ps_weapon]).SnoutSniff();
		PlaySound('PigActive1', CHAN_VOICE);	// snort
		return;
	}
	if (P_Random() < 48)
	{
		if (P_Random() < 128)
		{
			PlaySound('PigActive1', CHAN_VOICE);
		}
		else
		{
			PlaySound('PigActive2', CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//  UndoPlayerMorph
//
//==========================================================================

bool UndoPlayerMorph(void)
{
	Actor fog;
	Actor A;

	UnlinkFromWorld();
	switch (Player->BaseClass)
	{
	case PCLASS_FIGHTER:
		A = Spawn(PlayerFighter, Origin);
		break;
	case PCLASS_CLERIC:
		A = Spawn(PlayerCleric, Origin);
		break;
	case PCLASS_MAGE:
		A = Spawn(PlayerMage, Origin);
		break;
	default:
		Error("UndoPlayerMorph: Unknown player class %d", Player->BaseClass);
	}
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Remove();
		LinkToWorld();
		Player->MorphTime = 2.0;
		return false;
	}
	LinkToWorld();
	A.Angles = Angles;
	A.Player = Player;
	A.bIsPlayer = true;
	A.ReactionTime = 0.5;
	if (bFly)
	{
		A.bFly = true;
		A.bNoGravity = true;
	}
	Player->MorphTime = 0.0;
	A.Health = MAXHEALTH;
	Player->Health = A.Health;
	Player->MO = A;
	Player->PClass = Player->BaseClass;
	SetPlayerColor(Player);
	PostMorphWeapon(Player, _Special1);

	fog = Spawn(TeleportFog, Origin + vector(20.0 * cos(Angles.yaw),
		20.0 * sin(Angles.yaw), TELEFOGHEIGHT));
	fog.PlaySound('Teleport', CHAN_VOICE);

	SetState(S_FREETARGMOBJ);
	return true;
}

//==========================================================================
//
//  SetPlayerRunState
//
//==========================================================================

void SetPlayerRunState(void)
{
	if (StateNum == IdleState)
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	int dir;
	float delta;
	int lookDelta;

	MovePsprites(Player);
	if (WaterLevel > 1)
	{
		Velocity.z -= 60.0;	// drift towards bottom
	}

	onground = (Origin.z <= FloorZ);

	if (Class == BloodySkull || Class == IceChunk)
	{
		// Flying bloody skull or flying ice chunk
		Player->ViewHeight = 6.0;
		Player->DeltaViewHeight = 0.0;
		//player->damagecount = 20;
		if (onground)
		{
#ifdef FIXME
			if (player->lookdir < 60)
			{
				lookDelta = (60 - player->lookdir) / 8;
				if (lookDelta < 1 && (level->tictime & 1))
				{
					lookDelta = 1;
				}
				else if (lookDelta > 6)
				{
					lookDelta = 6;
				}
				player->lookdir += lookDelta;
			}
#endif
		}
	}
	else if (!bIceDamage)
	{
		// Fall to ground (if not frozen)
		Player->DeltaViewHeight = 0.0;
		if (Player->ViewHeight > 6.0)
		{
			Player->ViewHeight -= 35.0 * deltaTime;
		}
		if (Player->ViewHeight < 6.0)
		{
			Player->ViewHeight = 6.0;
		}
#ifdef FIXME
		if (player->lookdir > 0)
		{
			player->lookdir -= 6;
		}
		else if (player->lookdir < 0)
		{
			player->lookdir += 6;
		}
		if (abs(player->lookdir) < 6)
		{
			player->lookdir = 0;
		}
#endif
	}
	CalcHeight(deltaTime);

	if (Player->Attacker && Player->Attacker != this)
	{
		// Watch killer
		dir = FaceActor(*Player->Attacker, &delta);
		if (delta < 10.0)
		{
			// Looking at killer, so fade damage and poison counters
			if (Player->DamageFlash)
			{
				Player->DamageFlash -= deltaTime;
				if (Player->DamageFlash <= 0.0)
					Player->DamageFlash = 0.0;
			}
			if (Player->PoisonCount)
			{
				Player->PoisonCount--;
			}
		}
		delta = delta / 8.0;
		if (delta > 5.0)
		{
			delta = 5.0;
		}
		if (dir)
		{
			// Turn clockwise
			Angles.yaw += delta;
		}
		else
		{	// Turn counter clockwise
			Angles.yaw -= delta;
		}
	}
	else if (Player->DamageFlash || Player->PoisonCount)
	{
		if (Player->DamageFlash)
		{
			Player->DamageFlash -= deltaTime;
			if (Player->DamageFlash <= 0.0)
				Player->DamageFlash = 0.0;
		}
		else
		{
			Player->PoisonCount--;
		}
	}

	if (Player->Buttons & BT_USE)
	{
		Player->Palette = 0;
		Player->WeaponPalette = 0;
		Player->InvPtr = 0;
		Player->InvCurPos = 0;
		Player->NewTorch = 0;
		Player->NewTorchDelta = 0;
		Player->PlayerState = PST_REBORN;
		_Special1 = Player->PClass;
		if (_Special1 > 2)
		{
			_Special1 = 0;
		}
		// Let the mobj know the player has entered the reborn state.  Some
		// mobjs need to know when it's ok to remove themselves.
		_Special2 = 666;
	}
}

//==========================================================================
//
//  UseArtiPig
//
//==========================================================================

void UseArtiPig(void)
{
	SpawnPlayerMissile(EggMissile);
	SpawnPlayerMissileAngle(EggMissile,
		AngleMod360(Angles.yaw - 45.0 / 6.0));
	SpawnPlayerMissileAngle(EggMissile,
		AngleMod360(Angles.yaw + 45.0 / 6.0));
	SpawnPlayerMissileAngle(EggMissile,
		AngleMod360(Angles.yaw - 45.0 / 3.0));
	SpawnPlayerMissileAngle(EggMissile,
		AngleMod360(Angles.yaw + 45.0 / 3.0));
}

//==========================================================================
//
//  UseArtiSummon
//
//==========================================================================

void UseArtiSummon(void)
{
	Actor mo;

	mo = SpawnPlayerMissile(SummonMissile);
	if (mo)
	{
		mo.Instigator = self;
		mo._SpecialMobj1 = this;
		mo.Velocity.z = 5.0 * 35.0;
	}
}

//==========================================================================
//
//  UseArtiPoisonBag
//
//==========================================================================

void UseArtiPoisonBag(void)
{
	float angle;
	Actor bomb;

	angle = Angles.yaw;
	if (Player->PClass == PCLASS_CLERIC)
	{
		bomb = Spawn(PoisonBag, Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - FloorClip));
		if (bomb)
		{
			bomb.Instigator = self;
		}
	}
	else if (Player->PClass == PCLASS_MAGE)
	{
		bomb = Spawn(FireBomb, Origin +
			vector(16.0 * cos(angle), 24.0 * sin(angle), 8.0 - FloorClip));
		if (bomb)
		{
			bomb.Instigator = self;
		}
	}
	else	// PCLASS_FIGHTER, obviously (also pig, not so obviously)
	{
		bomb = Spawn(ThrowingBomb, Origin +
			vector(0.0, 0.0, 35.0 - FloorClip));
		if (bomb)
		{
			bomb.Angles.yaw = AngleMod360(Angles.yaw +
				(Random() * 2.0 - 1.0) * 45.0 / 8.0);
			bomb.Velocity.z =
				(4.0 + 173.0 * -tan(Angles.pitch) / 16.0) * 35.0;
			bomb.Origin.z += 173.0 * -tan(Angles.pitch) / 16.0;
			bomb.Thrust(bomb.Angles.yaw, bomb.Speed * frametime);
			bomb.Velocity.x += Velocity.x / 2.0;
			bomb.Velocity.y += Velocity.y / 2.0;
			bomb.Instigator = self;
			bomb.StateTime -= Random() * 0.1;
			bomb.CheckMissileSpawn();
		}
	}
}

//==========================================================================
//
//  UseArtiTeleportOther
//
//==========================================================================

void UseArtiTeleportOther(void)
{
	Actor mo;

	mo = SpawnPlayerMissile(TeleportOtherFX1);
	if (mo)
	{
		mo.Instigator = self;
	}
}

//==========================================================================
//
//  UseArtiBlastRadius
//
//  Blast all mobj things away
//
//==========================================================================

void UseArtiBlastRadius(void)
{
	Actor mo;
	float dist;

	PlaySound('BlastRadius', CHAN_ITEM);
	NoiseAlert(self, self);

	FOREACH(Actor, mo)
	{
		if ((mo == self) || mo.bBoss)
		{
			// Not a valid monster
			continue;
		}
		if ((mo.Class == PoisonCloud) ||	// poison cloud
			(mo.Class == HolyFX) ||	// holy fx
			mo.bIceCorpse)	// frozen corpse
		{
			// Let these special cases go
		}
		else if (mo.bCountKill && (mo.Health <= 0))
		{
			continue;
		}
		else if (!mo.bCountKill && !mo.bIsPlayer && !mo.bMissile)
		{
			// Must be monster, player, or missile
			continue;
		}
		if (mo.bDormant)
		{
			continue;	// no dormant creatures
		}
		if ((mo.Class == WraithBuried) && mo.bHidden)
		{
			continue;	// no underground wraiths
		}
		if ((mo.Class == SplashBase) || (mo.Class == Splash))
		{
			continue;
		}
		if (mo.Class == Serpent || mo.Class == SerpentLeader)
		{
			continue;
		}
		dist = MobjDist(self, mo);
		if (dist > BLAST_RADIUS_DIST)
		{
			// Out of range
			continue;
		}
		mo.Blast(self, BLAST_FULLSTRENGTH);
	}
}

//===========================================================================
//
//  RoughCheckThing
//
//	Minotaur looking around player
//
//===========================================================================

bool RoughCheckThing(Entity Other)
{
	Actor link = Actor(Other);
	
	if (!bIsPlayer)
	{
		return false;
	}
	if (!link.bCountKill && (!link.bIsPlayer || link == self))
	{
		return false;
	}
	if (!link.bShootable)
	{
		return false;
	}
	if (link.bDormant)
	{
		return false;
	}
	if (link.IsA('Minotaur') && *link._SpecialMobj1 == self)
	{
		return false;
	}
	if (netgame && !deathmatch && link.bIsPlayer)
	{
		return false;
	}
	if (CanSee(link))
	{
		return true;
	}
	return false;
}

//============================================================================
//
//  AdjustPlayerAngle
//
//============================================================================

void AdjustPlayerAngle(void)
{
	float angle;
	float difference;

	angle = atan2(linetarget.Origin.y - Origin.y,
		linetarget.Origin.x - Origin.x);
	difference = AngleMod180(angle - Angles.yaw);
	if (fabs(difference) > 5.0)
	{
		Angles.yaw += difference > 0.0 ? 5.0 : -5.0;
	}
	else
	{
		Angles.yaw = angle;
	}
	Player->bFixAngle = true;
}

defaultproperties
{
	ReactionCount = 0;
	bCountKill = false;
	bActivateMCross = false;
	bCheckNoMonsters = false;
	bDropOff = true;
	bWindThrust = true;
	bSlide = true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2002/10/26 16:32:26  dj_jl
//  New style of defining classes.
//
//**************************************************************************
