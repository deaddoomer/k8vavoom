//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFighterHammer : Weapon;

bool bThrowHammer;
float HammerRange;

//============================================================================
//
//  A_FHammerAttack
//
//============================================================================

final void A_FHammerAttack()
{
	Actor Owner = Actor(Player.MO);
	int damage;
	float power;
	int i;
	TAVec angles;
	TVec vforward;

	damage = 60 + (P_Random() & 63);
	power = 10.0;
	for (i = 0; i < 16; i++)
	{
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw + itof(i) * (45.0 / 32.0));
		Owner.AimLineAttack(&angles, HammerRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, HammerRange, damage, HammerPuff))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player(Player).AdjustPlayerAngle();
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			bThrowHammer = false;	// Don't throw a hammer
			break;
		}
		angles = Owner.Angles;
		angles.yaw = AngleMod360(angles.yaw - itof(i) * (45.0 / 32.0));
		Owner.AimLineAttack(&angles, HammerRange);
		if (Owner.linetarget)
		{
			AngleVector(&angles, &vforward);
			if (Owner.LineAttack(vforward, HammerRange, damage, HammerPuff))
			{
				Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
			}
			Player(Player).AdjustPlayerAngle();
			if (Owner.linetarget.bCountKill || Owner.linetarget.bIsPlayer)
			{
				Owner.linetarget.Thrust(angles.yaw, power);
			}
			bThrowHammer = false;	// Don't throw a hammer
			break;
		}
	}
	if (i == 16)
	{
		// didn't find any targets in meleerange, so set to throw out a hammer
		MainGameInfo(Player.Level.Game).PuffSpawned = none;
		angles = Owner.Angles;
		Owner.AimLineAttack(&angles, HammerRange);
		AngleVector(&angles, &vforward);
		if (Owner.LineAttack(vforward, HammerRange, damage, HammerPuff))
		{
			Owner.PlaySound('FighterHammerMiss', CHAN_WEAPON);
		}
		if (MainGameInfo(Player.Level.Game).PuffSpawned)
		{
			bThrowHammer = false;
		}
		else
		{
			bThrowHammer = true;
		}
	}

	if (Player(Player).Mana[HexenDefs::MANA_2] <
		WeaponManaUse(Player.PClass, Player(Player).ReadyWeapon))
	{
		// Don't spawn a hammer if the player doesn't have enough mana
		bThrowHammer = false;
	}
	return;
}

//============================================================================
//
//  A_FHammerThrow
//
//============================================================================

final void A_FHammerThrow()
{
	if (!bThrowHammer)
	{
		return;
	}
	Player(Player).Mana[HexenDefs::MANA_2] -=
		WeaponManaUse(Player.PClass, Player(Player).ReadyWeapon);
	Player(Player).SpawnPlayerMissile(HammerMissile);
}

__states__
{
	S_FHAMMERREADY('FHMR', 0, 1.0 / 35.0, S_FHAMMERREADY) = A_WeaponReady
	S_FHAMMERDOWN('FHMR', 0, 1.0 / 35.0, S_FHAMMERDOWN) = A_Lower
	S_FHAMMERUP('FHMR', 0, 1.0 / 35.0, S_FHAMMERUP) = A_Raise
	S_FHAMMERATK_1('FHMR', 1, 6.0 / 35.0, S_FHAMMERATK_2, 5, 0) = none
	S_FHAMMERATK_2('FHMR', 2, 3.0 / 35.0, S_FHAMMERATK_3, 5, 0) = A_FHammerAttack
	S_FHAMMERATK_3('FHMR', 3, 3.0 / 35.0, S_FHAMMERATK_4, 5, 0) = none
	S_FHAMMERATK_4('FHMR', 4, 2.0 / 35.0, S_FHAMMERATK_5, 5, 0) = none
	S_FHAMMERATK_5('FHMR', 4, 10.0 / 35.0, S_FHAMMERATK_6, 5, 150) = A_FHammerThrow
	S_FHAMMERATK_6('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_7, 0, 60) = none
	S_FHAMMERATK_7('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_8, 0, 55) = none
	S_FHAMMERATK_8('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_9, 0, 50) = none
	S_FHAMMERATK_9('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_10, 0, 45) = none
	S_FHAMMERATK_10('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_11, 0, 40) = none
	S_FHAMMERATK_11('FHMR', 0, 1.0 / 35.0, S_FHAMMERATK_12, 0, 35) = none
	S_FHAMMERATK_12('FHMR', 0, 1.0 / 35.0, S_FHAMMERREADY) = none
}

defaultproperties
{
	Mana = HexenDefs::MANA_NONE;
	UpState = S_FHAMMERUP;
	DownState = S_FHAMMERDOWN;
	ReadyState = S_FHAMMERREADY;
	AttackState = S_FHAMMERATK_1;
	HoldAttackState = S_FHAMMERATK_1;
	PSpriteSY = -10.0;
	HammerRange = Actor::MELEERANGE + Actor::MELEERANGE / 2.0;
}
