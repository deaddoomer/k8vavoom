//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Artifact : Inventory
	abstract;

int ArtifactType;

//==========================================================================
//
//  TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	int i;
	int j;
	bool slidePointer;

	slidePointer = false;
	i = 0;
	while (i < Player(Toucher.Player).InventorySlotNum &&
		Player(Toucher.Player).Inventory[i].ArtifactType != ArtifactType)
	{
		i++;
	}
	if (i == Player(Toucher.Player).InventorySlotNum)
	{
		if (ArtifactType < HexenDefs::arti_firstpuzzitem)
		{
			i = 0;
			while (i < Player(Toucher.Player).InventorySlotNum &&
				Player(Toucher.Player).Inventory[i].ArtifactType < HexenDefs::arti_firstpuzzitem)
			{
				i++;
			}
			if (i != Player(Toucher.Player).InventorySlotNum)
			{
				for (j = Player(Toucher.Player).InventorySlotNum; j > i; j--)
				{
					Player(Toucher.Player).Inventory[j] = Player(Toucher.Player).Inventory[j - 1];
					slidePointer = true;
				}
			}
		}
		Player(Toucher.Player).Inventory[i] = Level.Spawn(MainGameInfo(Level.Game).ArtiClasses[ArtifactType]);
		Player(Toucher.Player).Inventory[i].AttachToOwner(Toucher);
		Player(Toucher.Player).Inventory[i].Amount = 1;
		Player(Toucher.Player).InventorySlotNum++;
		if (!Player(Toucher.Player).InvPtr)
		{
			Player(Toucher.Player).InvPtr = Player(Toucher.Player).Inventory[i];
			Player(Toucher.Player).InvFirst = Player(Toucher.Player).Inventory[i];
		}
	}
	else
	{
		if (ArtifactType >= HexenDefs::arti_firstpuzzitem && Level.Game.netgame && !Level.Game.deathmatch)
		{
			// Can't carry more than 1 puzzle item in coop netplay
			return false;
		}
		if (Player(Toucher.Player).Inventory[i].Amount >= Player(Toucher.Player).Inventory[i].MaxAmount)
		{
			// Player already has 25 of this item
			return false;
		}
		Player(Toucher.Player).Inventory[i].Amount++;
	}
	if (slidePointer)
	{
		Player(Toucher.Player).AdjustInvFirst();
	}
	GoAwayAndDie();
	return true;
}

defaultproperties
{
	Height = 32.0;
	MaxAmount = DefMaxAmount;
	bFloatBob = true;
	bPickupFlash = true;
	bInvBar = true;
	PickupSound = 'PickupArtifact';
}
