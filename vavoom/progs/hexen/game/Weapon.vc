//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Weapon : ViewEntity
	abstract;

int Mana;
int UpState;
int DownState;
int ReadyState;
int AttackState;
int HoldAttackState;
float PSpriteSY;		// Y-adjustment value for full screen

//==========================================================================
//
//  WeaponManaUse
//
//==========================================================================

int WeaponManaUse(int pclass, int num)
{
	return MainGameInfo(Player.Level.Game).WeaponManaUseTable[(pclass << 2) + num];
}

int GetUpState()
{
	return UpState;
}

int GetDownState()
{
	return DownState;
}

int GetReadyState()
{
	return ReadyState;
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

int GetAttackState()
{
	return Player.Refire ? HoldAttackState : AttackState;
}

void GotMana(int InMana)
{
}

// FIXME
void SnoutSniff()
{
}

//==========================================================================
//
//  A_Light0
//
//==========================================================================

void A_Light0()
{
	Player.ExtraLight = 0;
}

//==========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
//
//==========================================================================

void A_WeaponReady()
{
	float angle;

	// Change player from attack state
	if (Player.MO.StateNum >= Player.MO.MissileState &&
		Player.MO.StateNum <= PlayerPawn(Player.MO).AttackEndState)
	{
		Player.MO.SetState(Player.MO.IdleState);
	}
	// Put the weapon away if the player has a pending weapon or has died.
	if (Player.PendingWeapon != HexenDefs::wp_nochange || !Player.Health)
	{
		Player.SetPsprite(ps_weapon, GetDownState());
		return;
	}

	// Check for fire. 
	if (Player.Buttons & BT_ATTACK)
	{
		Player.bAttackDown = true;
		Player.FireWeapon();
		return;
	}
	else
	{
		Player.bAttackDown = false;
	}

	if (!Player.MorphTime)
	{
		// Bob the weapon based on movement speed.
		angle = AngleMod360(180.0 * Player.Level.Game.level->time);
		SX = 1.0 + Player.Bob * cos(angle);
		if (angle >= 180.0)
		{
			angle -= 180.0;
		}
		SY = WEAPONTOP + Player.Bob * sin(angle);
	}
}

//==========================================================================
//
//  A_Lower
//
//==========================================================================

void A_Lower()
{
	if (Player.MorphTime)
	{
		SY = WEAPONBOTTOM;
	}
	else
	{
		//	FIXME!!
		if (Player.Level.Game.frametime < 1.0 / 35.0)
			SY += LOWERSPEED;
		else
			SY += LOWERSPEED * 35.0 * Player.Level.Game.frametime;
	}
	if (SY < WEAPONBOTTOM)
	{
		// Not lowered all the way yet
		return;
	}
	if (Player.PlayerState == PST_DEAD)
	{
		// Player is dead, so don't bring up a pending weapon
		SY = WEAPONBOTTOM;
		return;
	}
	if (!Player.Health)
	{
		// Player is dead, so keep the weapon off screen
		Player.SetPsprite(ps_weapon, S_NULL);
		return;
	}
	Player.SetWeapon(Player.PendingWeapon);
	Player.BringUpWeapon();
}

//==========================================================================
//
//  A_Raise
//
//==========================================================================

void A_Raise()
{
	//	FIXME!!
	if (Player.Level.Game.frametime < 1.0 / 35.0)
		SY -= RAISESPEED;
	else
		SY -= RAISESPEED * 35.0 * Player.Level.Game.frametime;
	if (SY > WEAPONTOP)
	{
		// Not raised all the way yet
		return;
	}
	SY = WEAPONTOP;
	Player.SetPsprite(ps_weapon, GetReadyState());
}

//==========================================================================
//
//  A_ReFire
//
//  The player can re fire the weapon without lowering it entirely.
//
//==========================================================================

void A_ReFire()
{
	if ((Player.Buttons & BT_ATTACK) &&
		Player.PendingWeapon == HexenDefs::wp_nochange && Player.Health)
	{
		Player.Refire++;
		Player.FireWeapon();
	}
	else
	{
		Player.Refire = 0;
		Player.CheckMana();
	}
}

// UNUSED
__states__
{
	S_LIGHTDONE('FPCH', 0, 0.0 / 35.0, S_NULL) { A_Light0(); }
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2006/02/17 19:06:52  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.5  2006/02/15 23:33:55  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.4  2006/02/13 18:30:17  dj_jl
//  Moved all server progs global functions to classes.
//
//  Revision 1.3  2004/08/23 19:23:59  dj_jl
//  Moved weapon utilites to player class.
//
//  Revision 1.2  2003/11/12 16:50:47  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:27  dj_jl
//  New style of defining classes.
//
//**************************************************************************
