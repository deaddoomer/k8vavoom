//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponEx : Weapon
	abstract;

const float LOWERSPEED		= 6.0;
const float RAISESPEED		= 6.0;

const float WEAPONBOTTOM	= 128.0;
const float WEAPONTOP		= 32.0;

class<Ammo> ManaType1;
class<Ammo> ManaType2;
state UpState;
state DownState;
state ReadyState;
state AttackState;
state HoldAttackState;
float PSpriteSY;		// Y-adjustment value for full screen
int ManaUse;
bool bManaOptional;

int WeaponClass;
int WeaponType;

//==========================================================================
//
//  TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	bool gaveMana;
	bool gaveWeapon;

	if (Toucher.Player.PClass != WeaponClass)
	{
		// Wrong class, but try to pick up for mana
		if (ShouldStay())
		{
			// Can't pick up weapons for other classes in coop netplay
			return false;
		}
		if (WeaponType == HexenDefs::WP_SECOND)
		{
			if (!Player(Toucher.Player).GiveMana(Mana1, 25))
			{
				return false;
			}
		}
		else
		{
			if (!Player(Toucher.Player).GiveMana(Mana2, 25))
			{
				return false;
			}
		}
		GoAwayAndDie();
		return true;
	}

	// Cooperative net-game
	if (ShouldStay() && !bDropped && Player(Toucher.Player).WeaponOwned[WeaponType])
	{
		return false;
	}

	if (WeaponType == HexenDefs::WP_SECOND)
	{
		gaveMana = Player(Toucher.Player).GiveMana(Mana1, 25);
	}
	else
	{
		gaveMana = Player(Toucher.Player).GiveMana(Mana2, 25);
	}
	if (Player(Toucher.Player).WeaponOwned[WeaponType])
	{
		gaveWeapon = false;
	}
	else
	{
		gaveWeapon = true;
		Player(Toucher.Player).WeaponOwned[WeaponType] =
			Spawn(class<WeaponEx>(Class));
		Player(Toucher.Player).WeaponOwned[WeaponType].AttachToOwner(Toucher);
		if (WeaponType > Player(Toucher.Player).ReadyWeapon.WeaponType)
		{
			// Only switch to more powerful weapons
			Player(Toucher.Player).PendingWeapon = Player(Toucher.Player).WeaponOwned[WeaponType];
		}
	}
	if (gaveWeapon || gaveMana)
	{
		GoAwayAndDie();
	}
	return gaveWeapon || gaveMana;
}

//==========================================================================
//
//	ShouldStay
//
//==========================================================================

bool ShouldStay()
{
	return Level.Game.netgame && !Level.Game.deathmatch;
}

//==========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough mana to shoot.  If not, selects the
// next weapon to use.
//
//==========================================================================

bool CheckAmmo(bool AutoSwitch, optional bool RequireAmmo)
{
	class<Ammo> mana1;
	class<Ammo> mana2;
	int count;

	if (!RequireAmmo && bManaOptional)
	{
		return true;
	}
	mana1 = ManaType1;
	mana2 = ManaType2;
	count = ManaUse;
	bool Good = true;
	if (mana1 && EntityEx(Owner).FindInventory(mana1).Amount < count)
	{
		Good = false;
	}
	if (mana2 && EntityEx(Owner).FindInventory(mana2).Amount < count)
	{
		Good = false;
	}
	if (Good)
	{
		return true;
	}
	if (!AutoSwitch)
	{
		return false;
	}
	// out of mana, pick a weapon to change to
	do
	{
		if (Player(Owner.Player).WeaponOwned[HexenDefs::WP_THIRD] &&
			Player(Owner.Player).WeaponOwned[HexenDefs::WP_THIRD].CheckAmmo(false))
		{
			Player(Owner.Player).PendingWeapon = Player(Owner.Player).WeaponOwned[HexenDefs::WP_THIRD];
		}
		else if (Player(Owner.Player).WeaponOwned[HexenDefs::WP_SECOND] &&
			Player(Owner.Player).WeaponOwned[HexenDefs::WP_SECOND].CheckAmmo(false))
		{
			Player(Owner.Player).PendingWeapon = Player(Owner.Player).WeaponOwned[HexenDefs::WP_SECOND];
		}
		else if (Player(Owner.Player).WeaponOwned[HexenDefs::WP_FOURTH] &&
			Player(Owner.Player).WeaponOwned[HexenDefs::WP_FOURTH].CheckAmmo(false))
		{
			Player(Owner.Player).PendingWeapon = Player(Owner.Player).WeaponOwned[HexenDefs::WP_FOURTH];
		}
		else
		{
			Player(Owner.Player).PendingWeapon = Player(Owner.Player).WeaponOwned[HexenDefs::WP_FIRST];
		}
	}
	while (!Player(Owner.Player).PendingWeapon);
	Player(Owner.Player).SetViewState(ps_weapon, GetDownState());
	return false;
}

//==========================================================================
//
//  DecMana
//
//==========================================================================

void DecMana()
{
	if (ManaType1)
	{
		EntityEx(Owner).FindInventory(ManaType1).Amount -= ManaUse;
	}
	if (ManaType2)
	{
		EntityEx(Owner).FindInventory(ManaType2).Amount -= ManaUse;
	}
}

state GetUpState()
{
	return UpState;
}

state GetDownState()
{
	return DownState;
}

state GetReadyState()
{
	return ReadyState;
}

//==========================================================================
//
//	GetAttackState
//
//==========================================================================

state GetAttackState()
{
	return Player(Owner.Player).Refire ? HoldAttackState : AttackState;
}

void GotMana(Ammo InMana)
{
}

// FIXME
void SnoutSniff()
{
}

//==========================================================================
//
//  A_Light0
//
//==========================================================================

final void A_Light0()
{
	Owner.Player.ExtraLight = 0;
}

//==========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
//
//==========================================================================

final void A_WeaponReady()
{
	float angle;

	// Change player from attack state
	if (StateIsInRange(Owner.State, Actor(Owner).MissileState,
		PlayerPawn(Owner).AttackEndState, 3))
	{
		Owner.SetState(Actor(Owner).IdleState);
	}
	// Put the weapon away if the player has a pending weapon or has died.
	if (Player(Owner.Player).PendingWeapon || !Owner.Player.Health)
	{
		Owner.Player.SetViewState(ps_weapon, GetDownState());
		return;
	}

	// Check for fire. 
	if (Owner.Player.Buttons & BT_ATTACK)
	{
		Owner.Player.bAttackDown = true;
		Player(Owner.Player).FireWeapon();
		return;
	}
	else
	{
		Owner.Player.bAttackDown = false;
	}

	if (!Player(Owner.Player).MorphTime)
	{
		// Bob the weapon based on movement speed.
		angle = AngleMod360(180.0 * XLevel.Time);
		Owner.Player.ViewStates[ps_weapon].SX = 1.0 + Player(Owner.Player).Bob * cos(angle);
		if (angle >= 180.0)
		{
			angle -= 180.0;
		}
		Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP + Player(Owner.Player).Bob * sin(angle);
	}
}

//==========================================================================
//
//  A_Lower
//
//==========================================================================

final void A_Lower()
{
	if (Player(Owner.Player).MorphTime)
	{
		Owner.Player.ViewStates[ps_weapon].SY = WEAPONBOTTOM;
	}
	else
	{
		//	FIXME!!
		if (Level.Game.frametime < 1.0 / 35.0)
			Owner.Player.ViewStates[ps_weapon].SY += LOWERSPEED;
		else
			Owner.Player.ViewStates[ps_weapon].SY += LOWERSPEED * 35.0 * Level.Game.frametime;
	}
	if (Owner.Player.ViewStates[ps_weapon].SY < WEAPONBOTTOM)
	{
		// Not lowered all the way yet
		return;
	}
	if (Owner.Player.PlayerState == PST_DEAD)
	{
		// Player is dead, so don't bring up a pending weapon
		Owner.Player.ViewStates[ps_weapon].SY = WEAPONBOTTOM;
		return;
	}
	if (!Owner.Player.Health)
	{
		// Player is dead, so keep the weapon off screen
		Owner.Player.SetViewState(ps_weapon, none);
		return;
	}
	Entity Tmp = Owner;//FIXME temporary hack.
	Player(Owner.Player).SetWeapon(Player(Owner.Player).PendingWeapon.WeaponType);
	Player(Tmp.Player).BringUpWeapon();
}

//==========================================================================
//
//  A_Raise
//
//==========================================================================

final void A_Raise()
{
	//	FIXME!!
	if (Level.Game.frametime < 1.0 / 35.0)
		Owner.Player.ViewStates[ps_weapon].SY -= RAISESPEED;
	else
		Owner.Player.ViewStates[ps_weapon].SY -= RAISESPEED * 35.0 * Level.Game.frametime;
	if (Owner.Player.ViewStates[ps_weapon].SY > WEAPONTOP)
	{
		// Not raised all the way yet
		return;
	}
	Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP;
	Owner.Player.SetViewState(ps_weapon, GetReadyState());
}

//==========================================================================
//
//  A_ReFire
//
//  The player can re fire the weapon without lowering it entirely.
//
//==========================================================================

final void A_ReFire()
{
	if ((Owner.Player.Buttons & BT_ATTACK) &&
		!Player(Owner.Player).PendingWeapon && Owner.Player.Health)
	{
		Player(Owner.Player).Refire++;
		Player(Owner.Player).FireWeapon();
	}
	else
	{
		Player(Owner.Player).Refire = 0;
		CheckAmmo(true);
	}
}

// UNUSED
__states__
{
	S_LIGHTDONE('FPCH', 0, 0.0 / 35.0, none) = A_Light0
}

defaultproperties
{
	Height = 32.0;
	PickupSound = 'PickupWeapon';
}
