//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//#define GRENADE_LAUNCHER

#ifndef DOOM2
boolean shareware;

void NotDoom2(void)
{
	FatalError("These progs don't support DOOM II.");
}
#endif

enum
{
	wp_fist,
	wp_pistol,
	wp_shotgun,
	wp_chaingun,
	wp_missile,
	wp_plasma,
	wp_bfg,
	wp_chainsaw,
	wp_supershotgun,
#ifdef GRENADE_LAUNCHER
	wp_grenade,
#endif

	NUMWEAPONS,

	// No pending weapon change.
	wp_nochange
};

// Ammunition types defined.
enum
{
	am_clip,	// Pistol / chaingun ammo.
	am_shell,	// Shotgun / double barreled shotgun.
	am_cell,	// Plasma rifle, BFG.
	am_misl,	// Missile launcher.

	NUMAMMO,

	am_noammo	// Unlimited for chainsaw / fist.
};

struct sb_stats_t
{
	int flags;
};

#define NUM_STATS		1

#define SBF_BLUE_CARD		0x00000001
#define SBF_YELLOW_CARD		0x00000002
#define SBF_RED_CARD		0x00000004
#define SBF_BLUE_SKULL		0x00000008
#define SBF_YELLOW_SKULL	0x00000010
#define SBF_RED_SKULL		0x00000020
#define SBF_GOD_MODE		0x00000040

#ifdef CLIENT

addfields client_state_t
{
	//
	//  STATS FOR STATUS BAR
	//

	sb_stats_t stats;

	int ammo[NUMAMMO];
	int ready_ammo;

	boolean weaponowned[NUMWEAPONS];

	int armorpoints;

	boolean backpack;

	int readyweapon;

	// For screen flashing (red or bright).
	int damagecount;
	int bonuscount;
};

#endif

// Additional network protocol commands
enum
{
	svc_gun_shot = USER_PROTOCOL_START,
	svc_blood,
	svc_explosion,
	svc_explosion2
};

//  Dynamic light effects
enum
{
	EF_DL_NONE,
	EF_DL_MISSILE,
	EF_DL_RBALL,
	EF_DL_GBALL,
	EF_DL_PLASMA,
	EF_DL_MUZZLEFLASH
};

#define EF_DLIGHT_MASK	0x07
#define EF_ROCKET		0x08

//**************************************************************************
//
//  $Log$
//  Revision 1.10  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2002/01/03 18:33:04  dj_jl
//  Beautification
//
//  Revision 1.8  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.7  2001/10/09 17:35:46  dj_jl
//  Split server defines into seperate file
//
//  Revision 1.6  2001/10/02 17:42:37  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.5  2001/09/24 17:12:36  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:12  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
