//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Player setup
//**
//**************************************************************************

//==========================================================================
//
//	MenuChoice_PlayerName
//
//==========================================================================

class MenuChoice_PlayerName:MenuInputLine
{
	void InitWindow(void)
	{
		::InitWindow();
		strcpy(ARR2STR(Value), GetCvarS("Name"));
	}

	void ValueChanged(void)
	{
		::ValueChanged();
		SetCvarS("Name", ARR2STR(Value));
	}

	defaultproperties
	{
		Text = "Name";
	}
}

//==========================================================================
//
//	MenuChoice_Color
//
//==========================================================================

class MenuChoice_Color:MenuChoiceEnum
{
	MenuSpriteAnim Anim;

	int GetInitialValue(void)
	{
		return GetCvar("color");
	}

	bool SetNewValue(int newValue)
	{
		SetCvar("color", newValue);
		Anim.Translation = newValue;
		return true;
	}

	defaultproperties
	{
		Text = "Color";
		bLeftAlign = true;
		EnumNames[0] = "green";
		EnumNames[1] = "gray";
		EnumNames[2] = "brown";
		EnumNames[3] = "red";
		EnumNames[4] = "light red";
		EnumNames[5] = "blue";
		EnumNames[6] = "rose";
		EnumNames[7] = "light brown";
	}
}

//==========================================================================
//
//	MenuChoice_Skin
//
//==========================================================================

class MenuChoice_Skin:MenuChoiceEnum
{
	int SkinBuf[64 / 4];

	void SetSkin(int skinNum)
	{
		sprint(ARR2STR(SkinBuf), "models/players/%s/%s", GetCvarS("model"),
			EnumNames[skinNum]);
	}

	int GetInitialValue(void)
	{
		int i;
		string curskin;

		curskin = GetCvarS("skin");
		for (i = 0; i < MaxValue; i++)
		{
			if (!strcmp(curskin, EnumNames[i]))
			{
				break;
			}
		}
		if (i == MaxValue)
		{
			i = 0;
			SetCvarS("skin", EnumNames[0]);
		}
		return i;
	}

	bool SetNewValue(int newValue)
	{
		SetCvarS("skin", EnumNames[newValue]);
		SetSkin(newValue);
		return true;
	}

	defaultproperties
	{
		Text = "Skin";
		bLeftAlign = true;
		//  FIXME FIXME FIXME
		EnumNames[0] = "black.pcx";
		EnumNames[1] = "blackf.pcx";
		EnumNames[2] = "blue.pcx";
		EnumNames[3] = "bluef.pcx";
		EnumNames[4] = "brown.pcx";
		EnumNames[5] = "brownf.pcx";
		EnumNames[6] = "camo.pcx";
		EnumNames[7] = "camof.pcx";
		EnumNames[8] = "green.pcx";
		EnumNames[9] = "greenf.pcx";
		EnumNames[10] = "indigo.pcx";
		EnumNames[11] = "indigof.pcx";
		EnumNames[12] = "lgtblue.pcx";
		EnumNames[13] = "lgtbluef.pcx";
		EnumNames[14] = "navy.pcx";
		EnumNames[15] = "navyf.pcx";
		EnumNames[16] = "orange.pcx";
		EnumNames[17] = "orangef.pcx";
		EnumNames[18] = "pink.pcx";
		EnumNames[19] = "pinkf.pcx";
		EnumNames[20] = "purple.pcx";
		EnumNames[21] = "purplef.pcx";
		EnumNames[22] = "red.pcx";
		EnumNames[23] = "redf.pcx";
		EnumNames[24] = "violet.pcx";
		EnumNames[25] = "violetf.pcx";
		EnumNames[26] = "white.pcx";
		EnumNames[27] = "whitef.pcx";
		EnumNames[28] = "yellow.pcx";
		EnumNames[29] = "yellowf.pcx";
	}
}

//==========================================================================
//
//	MenuScreenPlayerSetup
//
//==========================================================================

class MenuScreenPlayerSetup:MenuScreen
{
	MenuChoice_PlayerName PlayerName;
	MenuChoice_Color Color;
	MenuSpriteAnim Anim;
	MenuChoice_Skin Skin;
	MenuModel Mdl;

	void CreateChoices(void)
	{
		model_t *model;

		PlayerName = MenuChoice_PlayerName(NewChild(MenuChoice_PlayerName));
		PlayerName.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += PlayerName.Height;

		Color = MenuChoice_Color(NewChild(MenuChoice_Color));
		Color.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += Color.Height;

		R_InstallSprite("PLAY", 500);

		Anim = MenuSpriteAnim(NewChild(MenuSpriteAnim));
		Anim.SetPos(100, 160);
		Anim.SprDef = 500;
		Anim.Speed = 8;
		Anim.NumFrames = 4;
		Anim.Translation = Color.Value;
		Color.Anim = Anim;

		model = InstallModel("models/players/doomguy/tris.md2");
		if (model)
		{
			SetCvarS("model", "doomguy");

			Skin = MenuChoice_Skin(NewChild(MenuChoice_Skin));
			Skin.SetPos(ChoicesStartX, ChoicesStartY);
			ChoicesStartY += Skin.Height;

			Mdl = MenuModel(NewChild(MenuModel));
			Mdl.Origin = vector(-64.0, 32.0, -32.0);
			Mdl.Angle = 345.0;
			Mdl.Model = model;
			Mdl.Skin = ARR2STR(Skin.SkinBuf);
			Skin.SetSkin(Skin.Value);
		}
	}

	defaultproperties
	{
		ChoicesStartX = 16;
		ChoicesStartY = 40;
		SelectorType = MenuSelector_SmallLeft;
		Title = "PLAYER SETUP";
	}
}

void menu_psetup(void)
{
	PushMenuScreen(SpawnMenu(MenuScreenPlayerSetup));
}

//**************************************************************************
//
//  $Log$
//  Revision 1.13  2002/09/07 16:28:24  dj_jl
//  Added Level class.
//
//  Revision 1.12  2002/05/29 16:50:26  dj_jl
//  Started a work on native Window classes.
//
//  Revision 1.11  2002/02/26 17:46:50  dj_jl
//  Fixes for menus.
//
//  Revision 1.10  2002/01/23 17:54:22  dj_jl
//  Object-oriented menus, got rid of C-style type casting.
//
//  Revision 1.9  2002/01/21 18:21:32  dj_jl
//  Working on object-oriented menus
//
//  Revision 1.8  2002/01/11 08:03:10  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.7  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/11/09 14:39:44  dj_jl
//  Beautification
//
//  Revision 1.5  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/15 17:04:47  dj_jl
//  Model setup
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
