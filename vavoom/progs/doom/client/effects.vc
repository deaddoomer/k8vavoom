//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

enum
{
	pt_static,
	pt_explode,
	pt_explode2
};

addfields particle_t
{
	int			type;
	float		ramp;
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int		ramp1[8] = {0xfffff31b, 0xffdfab27, 0xffbf772f, 0xff9f4f33,
					0xff7f3b2b, 0xff632f1f, 0xff4b2313, 0xff2f170b};
int		ramp2[8] = {0xfffff31b, 0xffefcb1f, 0xffdfab27, 0xffcf8f2b,
					0xffbf772f, 0xffaf632f, 0xff8f4333, 0xff733723};
int		ecolors[8] =
{
	0,					// EF_DL_NONE
	RGB(255, 255, 255),	// EF_DL_MISSILE
	RGB(255, 32, 32),	// EF_DL_RBALL
	RGB(32, 255, 32),	// EF_DL_GBALL
	RGB(32, 32, 255),	// EF_DL_PLASMA
	0					// EF_DL_MUZZLEFLASH
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	ParseGunShot
//
//==========================================================================

void ParseGunShot(void)
{
	TVec		org;
	int			i;
	particle_t	*p;
	int			c;

	org.x = itof(MSG_ReadShort());
	org.y = itof(MSG_ReadShort());
	org.z = itof(MSG_ReadShort());

	for (i = 0; i < 20; i++)
	{
		p = NewParticle();
		if (!p)
			return;

		p->org = org;
		c = P_Random() >> 1;
		p->color = RGB(c, c, c);
		p->die = cl->time + 0.5 * Random();
		p->vel.x = 32.0 * (Random() - 0.5);
		p->vel.y = 32.0 * (Random() - 0.5);
		p->vel.z = 32.0 * (Random() - 0.5);
		p->type = pt_static;
	}
}

//==========================================================================
//
//	ParseBlood
//
//==========================================================================

void ParseBlood(void)
{
	TVec		org;
	int			damage;
	int			i;
	particle_t	*p;
	int			c;

	org.x = itof(MSG_ReadShort());
	org.y = itof(MSG_ReadShort());
	org.z = itof(MSG_ReadShort());
	damage = MSG_ReadByte();

	for (i = 0; i < 4 * damage; i++)
	{
		p = NewParticle();
		if (!p)
			return;

		p->org = org;
		c = P_Random() >> 1;
		p->color = RGB(32 + c, c >> 4, c >> 4);
		p->die = cl->time + 0.5 * Random();
		p->vel.x = 32.0 * (Random() - 0.5);
		p->vel.y = 32.0 * (Random() - 0.5);
		p->vel.z = 32.0 * (Random() - 0.5);
		p->type = pt_static;
	}
}

//==========================================================================
//
//	ParseExplosion
//
//==========================================================================

void ParseExplosion(void)
{
	TVec		org;
	int			i;
	particle_t	*p;
	dlight_t	*dl;

	org.x = itof(MSG_ReadShort());
	org.y = itof(MSG_ReadShort());
	org.z = itof(MSG_ReadShort());

	for (i = 0; i < 1024; i++)
	{
		p = NewParticle();
		if (!p)
			return;
		p->die = cl->time + 5.0;
		p->color = ramp1[0];
		p->ramp = Random() * 4.0;
		if (i & 1)
		{
			p->type = pt_explode;
		}
		else
		{
			p->type = pt_explode2;
		}
		p->org.x = org.x + ((Random() * 32.0) - 16.0);
		p->org.y = org.y + ((Random() * 32.0) - 16.0);
		p->org.z = org.z + ((Random() * 32.0) - 16.0);
		p->vel.x = (Random() * 512.0) - 256.0;
		p->vel.y = (Random() * 512.0) - 256.0;
		p->vel.z = (Random() * 512.0) - 256.0;
	}

	dl = AllocDlight(0);
	dl->origin = org;
	dl->radius = 350.0;
	dl->color = 0xffffffff;
	dl->die = cl->time + 0.5;
	dl->decay = 300.0;
}

//==========================================================================
//
//	ParseExplosion2
//
//==========================================================================

void ParseExplosion2(void)
{
	TVec		org;
	dlight_t	*dl;
	int			etype;

	etype = MSG_ReadByte();
	org.x = itof(MSG_ReadShort());
	org.y = itof(MSG_ReadShort());
	org.z = itof(MSG_ReadShort());

	dl = AllocDlight(0);
	dl->origin = org;
	dl->radius = 350.0;
	dl->color = ecolors[etype];
	dl->die = cl->time + 0.5;
	dl->decay = 300.0;
}

//==========================================================================
//
//	ParseServerCommand
//
//==========================================================================

boolean ParseServerCommand(int cmd_type)
{
	switch (cmd_type)
	{
	 case svc_gun_shot:
		ParseGunShot();
		break;

	 case svc_blood:
		ParseBlood();
		break;

	 case svc_explosion:
		ParseExplosion();
		break;

	 case svc_explosion2:
		ParseExplosion2();
		break;

	 default:
		return false;
	}
	return true;
}

//==========================================================================
//
//	UpdateParticle
//
//==========================================================================

void UpdateParticle(particle_t *p)
{
	float			time2, time3;
	float			dvel;
	float			grav;
/*
	int				i;
	float			time1;
	
	time1 = frametime * 5;
*/
	time3 = frametime * 15.0;
	time2 = frametime * 10.0; // 15;
	dvel = 4.0 * frametime;
	grav = 0.0;//frametime * sv_gravity.value * 0.05;

	switch (p->type)
	{
	 case pt_static:
		break;

	 case pt_explode:
		p->ramp += time2;
		if (p->ramp >= 8.0)
			p->die = -1.0;
		else
			p->color = ramp1[ftoi(p->ramp)];
		p->vel.x += p->vel.x * dvel;
		p->vel.y += p->vel.y * dvel;
		p->vel.z += p->vel.z * dvel;
		p->vel.z -= grav;
		break;

	 case pt_explode2:
		p->ramp += time3;
		if (p->ramp >= 8.0)
			p->die = -1.0;
		else
			p->color = ramp2[ftoi(p->ramp)];
		p->vel.x -= p->vel.x * frametime;
		p->vel.y -= p->vel.y * frametime;
		p->vel.z -= p->vel.z * frametime;
		p->vel.z -= grav;
		break;
	}
}

//==========================================================================
//
//	CL_UpdateMobj
//
//==========================================================================

void CL_UpdateMobj(clmobj_t *mobj, int key)
{
	dlight_t	*dl;
	TVec		fv;

	switch (mobj->effects & EF_DLIGHT_MASK)
	{
	 case EF_DL_NONE:
		break;

	 case EF_DL_MISSILE:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->radius = 200.0;
		dl->color = RGB(255, 255, 255);
		dl->die = cl->time + 0.1;
		break;

	 case EF_DL_RBALL:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->radius = 200.0;
		dl->color = RGB(255, 0, 0);
		dl->die = cl->time + 0.1;
		break;

	 case EF_DL_GBALL:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->radius = 200.0;
		dl->color = RGB(0, 255, 0);
		dl->die = cl->time + 0.1;
		break;

	 case EF_DL_PLASMA:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->radius = 200.0;
		dl->color = RGB(0, 0, 255);
		dl->die = cl->time + 0.1;
		break;

	 case EF_DL_MUZZLEFLASH:
		dl = AllocDlight(key);
		dl->origin = mobj->origin;
		dl->origin.z += 48.0;
		AngleVector(&mobj->angles, &fv);
			 
		dl->origin = dl->origin + 18.0 * fv;
		dl->radius = 200.0 + Random() * 31.0;
		dl->color = 0xffffffff;
		dl->minlight = 32.0;
		dl->die = cl->time + 0.1;
	}

	if (mobj->effects & EF_ROCKET)
	{
		int			i;
		particle_t	*p;
		int			c;
		int			count;

		count = ftoi(frametime * 256.0);
		for (i = 0; i < count; i++)
		{
			p = NewParticle();
			if (!p)
				return;

			p->org = mobj->origin;
			c = P_Random() >> 1;
			p->color = RGB(c, c, c);
			p->die = cl->time + 0.5 * Random();
			p->type = pt_static;
			p->vel.x = 16.0 * (Random() - 0.5);
			p->vel.y = 16.0 * (Random() - 0.5);
			p->vel.z = 16.0 * (Random() - 0.5);
		}
	}
}

