//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    New game menu
//**
//**************************************************************************

#ifndef DOOM2
class MenuChoice_MPEpisode;
#endif
class MenuChoice_StartGame;

//==========================================================================
//
//	MenuChoice_Players
//
//==========================================================================

class MenuChoice_Players:MenuChoiceEnum
{
	int GetInitialValue(void)
	{
		return 2;
	}

	defaultproperties
	{
		Text = "Max players";
		EnumNames[0] = "2";
		EnumNames[1] = "3";
		EnumNames[2] = "4";
		EnumNames[3] = "5";
		EnumNames[4] = "6";
		EnumNames[5] = "7";
		EnumNames[6] = "8";
	}
}

//==========================================================================
//
//	MenuChoice_Monsters
//
//==========================================================================

class MenuChoice_Monsters:MenuChoice_OnOff
{
	defaultproperties
	{
		Text = "Monsters";
	}
}

//==========================================================================
//
//	MenuChoice_DeathMatch
//
//==========================================================================

class MenuChoice_DeathMatch:MenuChoiceEnum
{
	int GetInitialValue(void)
	{
		return 2;
	}

	defaultproperties
	{
		Text = "Game type";
		EnumNames[0] = "Cooperative";
		EnumNames[1] = "Deathmatch";
		EnumNames[2] = "Deathmatch2";
		EnumNames[3] = "Deathmatch3";
	}
}

//==========================================================================
//
//	MenuChoice_MPSkill
//
//==========================================================================

class MenuChoice_MPSkill:MenuChoiceEnum
{
	int GetInitialValue(void)
	{
		return 2;
	}

	defaultproperties
	{
		Text = "Skill";
		EnumNames[0] = "Baby";
		EnumNames[1] = "Easy";
		EnumNames[2] = "Normal";
		EnumNames[3] = "Hard";
		EnumNames[4] = "Nightmare";
	}
}

//==========================================================================
//
//	MenuChoice_TimeLimit
//
//==========================================================================

class MenuChoice_TimeLimit:MenuChoiceEnum
{
	defaultproperties
	{
		Text = "Time limit";
		EnumNames[0] = "0";
		EnumNames[1] = "5";
		EnumNames[2] = "10";
		EnumNames[3] = "15";
		EnumNames[4] = "20";
		EnumNames[5] = "25";
		EnumNames[6] = "30";
		EnumNames[7] = "35";
		EnumNames[8] = "40";
		EnumNames[9] = "45";
		EnumNames[10] = "50";
		EnumNames[11] = "55";
		EnumNames[12] = "60";
	}
}

//==========================================================================
//
//	MenuChoice_Level
//
//==========================================================================

class MenuChoice_MPLevel:MenuChoiceEnum
{
#ifndef DOOM2
	void InitMapList(int epi)
	{
		int i;

		for (i = 0; i < 9; i++)
		{
			EnumNames[i] = P_GetMapName(epi * 9 + i + 1);
		}
		MaxValue = 9;
		Value = 0;
	}
#else
	void InitMapList(void)
	{
		int i;
#ifdef FIXME
		int count = 0;

		for (i = 1; i <= 99; i++)
		{
			int map = P_TranslateMap(i);

			if (map != -1)
			{
				EnumNames[count] = P_GetMapName(map);
				count++;
			}
		}
		MaxValue = count;
#else
		for (i = 1; i <= 32; i++)
		{
			EnumNames[i - 1] = P_GetMapName(i);
		}
		MaxValue = 32;
#endif
		Value = 0;
	}
#endif

	void Init(void)
	{
		::Init();
#ifndef DOOM2
		InitMapList(0);
#else
		InitMapList();
#endif
	}

	defaultproperties
	{
		Text = "Level";
	}
}

#ifndef DOOM2

//==========================================================================
//
//	MenuChoice_MPEpisode
//
//==========================================================================

class MenuChoice_MPEpisode:MenuChoiceEnum
{
	MenuChoice_MPLevel Levels;

	void Init(void)
	{
		::Init();
		MaxValue = shareware ? 1 : ExtendedWAD ? 4 : 3;
	}

	boolean SetNewValue(int newValue)
	{
		Levels.InitMapList(newValue);
		return true;
	}

	defaultproperties
	{
		Text = "Episode";
		EnumNames[0] = "Knee - Deep in the Dead";
		EnumNames[1] = "The Shores of Hell";
		EnumNames[2] = "Inferno";
		EnumNames[3] = "Thy Flesh Consumed";
	}
}

#endif

//==========================================================================
//
//	MenuScreenNewNetGame
//
//==========================================================================

class MenuScreenNewNetGame:MenuScreen
{
	MenuChoiceEnum Players;
	MenuChoiceEnum Monsters;
	MenuChoiceEnum DeathMatch;
	MenuChoiceEnum Skill;
	MenuChoiceEnum TimeLimit;
#ifndef DOOM2
	MenuChoice_MPEpisode Episode;
#endif
	MenuChoice_MPLevel Level;

	void CreateChoices(void)
	{
		MenuChoice startGame;

		startGame = MenuChoice(AddItem(MenuChoice_StartGame));
		startGame.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += startGame.Height;

		Players = MenuChoice_Players(AddItem(MenuChoice_Players));
		Players.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += Players.Height;

		Monsters = MenuChoice_Monsters(AddItem(MenuChoice_Monsters));
		Monsters.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += Monsters.Height;

		DeathMatch = MenuChoice_DeathMatch(AddItem(MenuChoice_DeathMatch));
		DeathMatch.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += DeathMatch.Height;

		Skill = MenuChoice_MPSkill(AddItem(MenuChoice_MPSkill));
		Skill.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += Skill.Height;

		TimeLimit = MenuChoice_TimeLimit(AddItem(MenuChoice_TimeLimit));
		TimeLimit.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += TimeLimit.Height;

#ifndef DOOM2
		Episode = MenuChoice_MPEpisode(AddItem(MenuChoice_MPEpisode));
		Episode.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += Episode.Height;
#endif

		Level = MenuChoice_MPLevel(AddItem(MenuChoice_MPLevel));
		Level.SetPos(ChoicesStartX, ChoicesStartY);
		ChoicesStartY += Level.Height;
#ifndef DOOM2
		Episode.Levels = Level;
#endif
	}

	void StartNewGame(void)
	{
		CmdBuf_AddText("Disconnect\n");
		CmdBuf_AddText("MaxPlayers %d\n", Players.Value + 2);
		CmdBuf_AddText("NoMonsters %d\n", !Monsters.Value);
		CmdBuf_AddText("DeathMatch %d\n", DeathMatch.Value);
		CmdBuf_AddText("TimeLimit %d\n", TimeLimit.Value * 5);
		CmdBuf_AddText("Skill %d\n", Skill.Value);
#ifdef DOOM2
		if (Level.Value + 1 < 10)
			CmdBuf_AddText("Map MAP0%d\n", Level.Value + 1);
		else
			CmdBuf_AddText("Map MAP%d\n", Level.Value + 1);
#else
		CmdBuf_AddText("Map E%dM%d\n", Episode.Value + 1, Level.Value + 1);
#endif
	}

	defaultproperties
	{
		ChoicesStartX = 128;
		ChoicesStartY = 40;
		SelectorType = MenuSelector_SmallRight;
		Title = "NEW GAME";
	}
}

//==========================================================================
//
//	MenuChoice_StartGame
//
//==========================================================================

class MenuChoice_StartGame:MenuSmallTextButton
{
	void ActivateEvent(void)
	{
		MenuScreenNewNetGame(Parent).StartNewGame();
	}

	defaultproperties
	{
		Text = "Start Game";
	}
}

void menu_new_game(void)
{
	PushMenuScreen(SpawnMenu(MenuScreenNewNetGame));
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2002/01/23 17:54:22  dj_jl
//  Object-oriented menus, got rid of C-style type casting.
//
//  Revision 1.5  2002/01/21 18:21:32  dj_jl
//  Working on object-oriented menus
//
//  Revision 1.4  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.3  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
