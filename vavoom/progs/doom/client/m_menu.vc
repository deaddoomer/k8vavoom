//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

#define MAX_MENU_ITEMS		32

#define MAX_MENU_STACK		32

#define NUM_END_MESSAGES	15

#define SLOTTEXTLEN 		24

#define MAX_ILINE_LENGTH	79

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

enum
{
	DRV_SOFTWARE,
	DRV_OPENGL,
	DRV_DIRECT3D
};

class MenuScreen;
class MenuControlKey;

struct mode_t
{
	int width;
	int height;
};

struct TILine
{
	int Data[(MAX_ILINE_LENGTH + 1) / 4];	// line of text
	int len;	// current line length
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

MenuScreen menu_stack[MAX_MENU_STACK];
int menu_sp;

MenuScreen CurrentMenuScreen;

int pic_M_LSLEFT;
int pic_M_LSCNTR;
int pic_M_LSRGHT;

#ifndef DOOM2
int MenuEpisode;
#endif

MenuControlKey CurrentCtl;
int ControlColumn;	// menu column for controls

mode_t modes[9] = {
	{320, 200},
	{320, 240},
	{640, 400},
	{640, 480},
	{800, 600},
	{1024, 768},
	{1152, 864},
	{1280, 1024},
	{1600, 1200}
};
int depths[4] = { 8, 16, 24, 32 };

name quitsounds[8] = {
#ifndef DOOM2
	'PlayerDeath',
	'DemonPain',
	'ZombiePain',
	'Slop',
	'Teleport',
	'ZombieSight1',
	'ZombieSight3',
	'DemonAttack'
#else
	'ArchVileActive',
	'PickupPower',
	'CubeFly',
	'Slop',
	'RavenantSwing',
	'KnightDeath',
	'BabyActive',
	'DemonAttack'
#endif
};

string endmsg[NUM_END_MESSAGES] = {
	"are you sure you want to\nquit this great game?",
	"please don't leave, there's more\ndemons to toast!",
	"let's beat it -- this is turning\ninto a bloodbath!",
	"i wouldn't leave if i were you.\ndos is much worse.",
	"you're trying to say you like dos\nbetter than me, right?",
	"don't leave yet -- there's a\ndemon around that corner!",
	"ya know, next time you come in here\ni'm gonna toast ya.",
	"go ahead and leave. see if i care.",

	"you want to quit?\nthen, thou hast lost an eighth!",
	"don't go now, there's a \ndimensional shambler waiting\nat the dos prompt!",
	"get outta here and go back\nto your boring programs.",
	"if i were your boss, i'd \n deathmatch ya in a minute!",
	"look, bud. you leave now\nand you forfeit your body count!",
	"just leave. when you come\nback, i'll be waiting with a bat.",
	"you're lucky i don't smack\nyou for thinking about leaving."
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  SpawnMenu
//
//==========================================================================

MenuScreen SpawnMenu(classid CID)
{
	return MenuScreen(GRoot.NewChild(CID));
}

//**************************************************************************
//**
//**    Menu stack handling
//**
//**************************************************************************

//==========================================================================
//
//  PushMenuScreen
//
//==========================================================================

void PushMenuScreen(MenuScreen menu)
{
	int i;

	// avoid stacking menus invoked by hotkeys
	for (i = 0; i < menu_sp; i++)
	{
		if (menu_stack[i].Class == menu.Class)
		{
			int j;

			for (j = i; j < menu_sp; j++)
			{
				menu_stack[j].Destroy();
			}
			menu_sp = i;
			CurrentMenuScreen = none;
			break;
		}
	}

	if (menu_sp >= MAX_MENU_STACK)
		FatalError("PushMenu: menu stack overflow");

	menu_stack[menu_sp++] = menu;

	if (!CurrentMenuScreen)
	{
/*		if (cl.paused)
		{
			S_ResumeSound();
		}
		C_ClearNotify();*/
		CmdBuf_AddText("HideConsole\n");
		LocalSound('MenuActivate');
	}
	else
	{
		CurrentMenuScreen.Hide();
	}

	CurrentMenuScreen = menu;
}

//==========================================================================
//
//  PopMenu
//
//==========================================================================

void PopMenu(void)
{
	menu_sp--;

	if (menu_sp < 0)
		FatalError("PopMenu: menu stack underflow");

	menu_stack[menu_sp].Destroy();
	if (menu_sp)
	{
		CurrentMenuScreen = menu_stack[menu_sp - 1];
		CurrentMenuScreen.Show();
		CurrentMenuScreen.Raise();
		LocalSound('MenuPrevious');
	}
	else
	{
		CurrentMenuScreen = none;
		LocalSound('MenuClose');
	}
}

//==========================================================================
//
//  ForceMenuOff
//
//==========================================================================

void ForceMenuOff(void)
{
	int i;

	for (i = 0; i < menu_sp; i++)
	{
		menu_stack[i].Destroy();
	}
	menu_sp = 0;
	CurrentMenuScreen = none;
}

//**************************************************************************
//**
//**	Slot for saves and input lines
//**
//**************************************************************************

//==========================================================================
//
//  DrawSlot
//
//==========================================================================

int DrawSlot(GC gc, int y, string text, bool entering)
{
	int xx;
	int j;

	gc.DrawIcon(2, y + 12, pic_M_LSLEFT);
	for (j = 0, xx = 10; j < 24; j++, xx += 8)
	{
		gc.DrawIcon(xx, y + 12, pic_M_LSCNTR);
	}
	gc.DrawIcon(xx, y + 12, pic_M_LSRGHT);

	T_SetFont(font_small);
	T_SetAlign(hleft, vtop);
	gc.DrawText(8, y + 5, text);
	if (entering)
	{
		T_DrawCursor();
	}
	return 16;
}

//==========================================================================
//
//  InitSlot
//
//==========================================================================

void InitSlot(void)
{
	pic_M_LSLEFT = R_RegisterPic("M_LSLEFT", PIC_PATCH);
	pic_M_LSCNTR = R_RegisterPic("M_LSCNTR", PIC_PATCH);
	pic_M_LSRGHT = R_RegisterPic("M_LSRGHT", PIC_PATCH);
}

#ifndef DOOM2

//==========================================================================
//
//  SharewareResponse
//
//==========================================================================

void SharewareResponse(int key)
{
	PushMenuScreen(SpawnMenu(MenuScreenHelp));
}

#endif

//==========================================================================
//
//  NewGame
//
//==========================================================================

void NewGame(int skill)
{
	SetCvar("Skill", skill);

	CmdBuf_AddText("Disconnect\n");
	CmdBuf_AddText("MaxPlayers 1\n");

#ifdef DOOM2
	CmdBuf_AddText("Map %s\n", P_TranslateMap(1));
#else
	CmdBuf_AddText("Map E%dM1\n", MenuEpisode);
#endif

	ForceMenuOff();
}

//==========================================================================
//
//  VerifyNightmare
//
//  Realy mightmare skill?
//
//==========================================================================

void VerifyNightmare(int ch)
{
	if (ch != K_y)
		return;

	NewGame(sk_nightmare);
}

//==========================================================================
//
//  ControlResponse
//
//==========================================================================

void ControlResponse(int key)
{
	string kb_down;
	string kb_up;
	int key1;
	int key2;

	if (key != K_ESCAPE)
	{
		kb_down = CurrentCtl.CommandOn;
		kb_up = CurrentCtl.CommandOff;
		IN_GetBindingKeys(kb_down, &key1, &key2);
		if (ControlColumn == 0)
		{
			IN_SetBinding(key1, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
		if (ControlColumn == 1)
		{
			IN_SetBinding(key2, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
	}
}

//==========================================================================
//
//  QuitResponse
//
//==========================================================================

void QuitResponse(int ch)
{
	if (ch != K_y)
		return;

	LocalSoundTillDone(quitsounds[P_Random() & 7]);

	CmdBuf_AddText("Quit\n");
}

//==========================================================================
//
//  menu_quit
//
//==========================================================================

void menu_quit(void)
{
	LocalSound('Chat');
	MB_StartMessage(va("%s\n\n(press y to quit)",
			endmsg[P_Random() % NUM_END_MESSAGES]), MB_Quit, true);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.30  2004/02/16 07:07:30  dj_jl
//  Multiple hotkey fix
//
//  Revision 1.29  2003/09/24 16:37:30  dj_jl
//  Increase max video mode
//
//  Revision 1.28  2003/03/08 12:13:51  dj_jl
//  Menu code cleanup.
//
//  Revision 1.27  2002/10/26 16:32:19  dj_jl
//  New style of defining classes.
//
//  Revision 1.26  2002/09/07 16:28:24  dj_jl
//  Added Level class.
//
//  Revision 1.25  2002/07/20 14:45:21  dj_jl
//  Fixed join game menu.
//
//  Revision 1.24  2002/06/14 15:46:45  dj_jl
//  Added modal window class.
//
//  Revision 1.23  2002/05/29 16:50:26  dj_jl
//  Started a work on native Window classes.
//
//  Revision 1.22  2002/03/09 17:52:49  dj_jl
//  Got rid of function pointers
//
//  Revision 1.21  2002/03/02 17:29:55  dj_jl
//  Renamed builtin Spawn to SpawnObject
//  Added suport for Pad-Enter, some fixes.
//
//  Revision 1.20  2002/02/26 17:46:50  dj_jl
//  Fixes for menus.
//
//  Revision 1.19  2002/02/06 17:22:16  dj_jl
//  Some fixes for the menus.
//
//  Revision 1.18  2002/01/28 18:46:20  dj_jl
//  Some fixes, beautification
//
//  Revision 1.17  2002/01/23 17:54:22  dj_jl
//  Object-oriented menus, got rid of C-style type casting.
//
//  Revision 1.16  2002/01/21 18:21:32  dj_jl
//  Working on object-oriented menus
//
//  Revision 1.15  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.14  2002/01/11 08:03:10  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.13  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.12  2001/12/12 19:14:11  dj_jl
//  Removed support for ASCII character constants
//
//  Revision 1.11  2001/12/04 18:22:08  dj_jl
//  Reworking menus
//
//  Revision 1.10  2001/12/01 18:04:21  dj_jl
//  Started reworking menus
//
//  Revision 1.9  2001/11/09 14:38:45  dj_jl
//  Moved input line to progs
//
//  Revision 1.8  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.7  2001/10/08 17:22:11  dj_jl
//  Changed slist to be returned by engine
//
//  Revision 1.6  2001/09/25 17:11:04  dj_jl
//  Seperated menu API
//
//  Revision 1.5  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/29 17:46:25  dj_jl
//  Moved view border and message box to progs
//  
//  Revision 1.3  2001/08/15 17:04:47  dj_jl
//  Model setup
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
