//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Mouse menu
//**
//**************************************************************************

//==========================================================================
//
//	MenuChoice_MouseXSensitivity
//
//==========================================================================

class MenuChoice_MouseXSensitivity:MenuChoiceSlider
{
	float GetInitialValue(void)
	{
		return GetCvarF("mouse_x_sensitivity");
	}

	boolean SetNewValue(float newValue)
	{
		SetCvarF("mouse_x_sensitivity", newValue);
		return true;
	}

	defaultproperties
	{
		Text = "Mouse X sensitivity";
		ValueDelta = 0.25;
		MaxValue = 10.0;
	}
}

//==========================================================================
//
//	MenuChoice_MouseYSensitivity
//
//==========================================================================

class MenuChoice_MouseYSensitivity:MenuChoiceSlider
{
	float GetInitialValue(void)
	{
		return GetCvarF("mouse_y_sensitivity");
	}

	boolean SetNewValue(float newValue)
	{
		SetCvarF("mouse_y_sensitivity", newValue);
		return true;
	}

	defaultproperties
	{
		Text = "Mouse Y sensitivity";
		ValueDelta = 0.25;
		MaxValue = 10.0;
	}
}

//==========================================================================
//
//	MenuChoice_MouseLook
//
//==========================================================================

class MenuChoice_MouseLook:MenuChoice_OnOff
{
	int GetInitialValue(void)
	{
		return GetCvar("mouse_look");
	}

	boolean SetNewValue(int newValue)
	{
		SetCvar("mouse_look", newValue);
		return true;
	}

	defaultproperties
	{
		Text = "Mouse look";
	}
}

//==========================================================================
//
//	MenuChoice_InvertMouse
//
//==========================================================================

class MenuChoice_InvertMouse:MenuChoice_OnOff
{
	int GetInitialValue(void)
	{
		return GetCvar("invert_mouse");
	}

	boolean SetNewValue(int newValue)
	{
		SetCvar("invert_mouse", newValue);
		return true;
	}

	defaultproperties
	{
		Text = "Invert mouse";
	}
}

//==========================================================================
//
//	MenuChoice_Lookspring
//
//==========================================================================

class MenuChoice_Lookspring:MenuChoice_OnOff
{
	int GetInitialValue(void)
	{
		return GetCvar("lookspring");
	}

	boolean SetNewValue(int newValue)
	{
		SetCvar("lookspring", newValue);
		return true;
	}

	defaultproperties
	{
		Text = "Look spring";
	}
}

//==========================================================================
//
//	MenuChoice_LookStrafe
//
//==========================================================================

class MenuChoice_LookStrafe:MenuChoice_OnOff
{
	int GetInitialValue(void)
	{
		return GetCvar("lookstrafe");
	}

	boolean SetNewValue(int newValue)
	{
		SetCvar("lookstrafe", newValue);
		return true;
	}

	defaultproperties
	{
		Text = "Look strafe";
	}
}

//==========================================================================
//
//	MenuScreenMouseOptions
//
//==========================================================================

class MenuScreenMouseOptions:MenuScreen
{
	defaultproperties
	{
		Choices[0] = MenuChoice_MouseXSensitivity;
		Choices[1] = MenuChoice_MouseYSensitivity;
		Choices[2] = MenuChoice_MouseLook;
		Choices[3] = MenuChoice_InvertMouse;
		Choices[4] = MenuChoice_Lookspring;
		Choices[5] = MenuChoice_LookStrafe;
		ChoicesStartX = 160;
		ChoicesStartY = 32;
		SelectorType = MenuSelector_SmallRight;
		Title = "MOUSE OPTIONS";
	}
}

void menu_mouse(void)
{
	PushMenuScreen(SpawnMenu(MenuScreenMouseOptions));
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2002/01/23 17:54:22  dj_jl
//  Object-oriented menus, got rid of C-style type casting.
//
//  Revision 1.5  2002/01/21 18:21:32  dj_jl
//  Working on object-oriented menus
//
//  Revision 1.4  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.3  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
