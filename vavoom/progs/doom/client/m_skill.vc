//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Skill menu
//**
//**************************************************************************

//==========================================================================
//
//  NewGame
//
//==========================================================================

void NewGame(int skill)
{
	SetCvar("Skill", skill);

	CmdBuf_AddText("Disconnect\n");
	CmdBuf_AddText("MaxPlayers 1\n");

#ifdef DOOM2
	CmdBuf_AddText("Map %s\n", P_TranslateMap(1));
#else
	CmdBuf_AddText("Map E%dM1\n", MenuEpisode);
#endif

	ForceMenuOff();
}

//==========================================================================
//
//  VerifyNightmare
//
//  Realy mightmare skill?
//
//==========================================================================

void VerifyNightmare(int ch)
{
	if (ch != K_y)
		return;

	NewGame(sk_nightmare);
}

//==========================================================================
//
//	MenuChoice_SkillBaby
//
//==========================================================================

class MenuChoice_SkillBaby:MenuBigTextButton
{
	int SkillLevel;

	void ActivateEvent(void)
	{
		if (SkillLevel == sk_nightmare)
		{
			MB_StartMessage("are you sure? this skill level\nisn't even remotely fair.\n\npress y or n.",
				MB_Nightmare, true);
			return;
		}

		NewGame(SkillLevel);
	}

	defaultproperties
	{
		Text = "I'm too young to die.";
		SkillLevel = sk_baby;
	}
}

//==========================================================================
//
//	MenuChoice_SkillEasy
//
//==========================================================================

class MenuChoice_SkillEasy:MenuChoice_SkillBaby
{
	defaultproperties
	{
		Text = "Hey, not too rough.";
		SkillLevel = sk_easy;
	}
}

//==========================================================================
//
//	MenuChoice_SkillNormal
//
//==========================================================================

class MenuChoice_SkillNormal:MenuChoice_SkillBaby
{
	defaultproperties
	{
		Text = "Hurt me plenty.";
		SkillLevel = sk_medium;
	}
}

//==========================================================================
//
//	MenuChoice_SkillHard
//
//==========================================================================

class MenuChoice_SkillHard:MenuChoice_SkillBaby
{
	defaultproperties
	{
		Text = "Ultra - Violence.";
		SkillLevel = sk_hard;
	}
}

//==========================================================================
//
//	MenuChoice_SkillNightmare
//
//==========================================================================

class MenuChoice_SkillNightmare:MenuChoice_SkillBaby
{
	defaultproperties
	{
		Text = "Nightmare";	//""
		SkillLevel = sk_nightmare;
	}
}

//==========================================================================
//
//	MenuScreenSkill
//
//==========================================================================

class MenuScreenSkill:MenuScreen
{
	void SetDefaultChoice(void)
	{
		::SetDefaultChoice();
		SetCursor(CursorPos + 2);
	}

	defaultproperties
	{
		Choices[0] = MenuChoice_SkillBaby;
		Choices[1] = MenuChoice_SkillEasy;
		Choices[2] = MenuChoice_SkillNormal;
		Choices[3] = MenuChoice_SkillHard;
		Choices[4] = MenuChoice_SkillNightmare;
		ChoicesStartX = 48;
		ChoicesStartY = 40;
		SelectorType = MenuSelector_Skull;
		Title = "CHOOSE SKILL LEVEL:";
	}
};

void menu_skill(void)
{
	PushMenuScreen(SpawnMenu(MenuScreenSkill));
}

//**************************************************************************
//
//  $Log$
//  Revision 1.12  2002/03/09 17:52:49  dj_jl
//  Got rid of function pointers
//
//  Revision 1.11  2002/02/06 17:22:16  dj_jl
//  Some fixes for the menus.
//
//  Revision 1.10  2002/01/23 17:54:22  dj_jl
//  Object-oriented menus, got rid of C-style type casting.
//
//  Revision 1.9  2002/01/21 18:21:32  dj_jl
//  Working on object-oriented menus
//
//  Revision 1.8  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 19:14:11  dj_jl
//  Removed support for ASCII character constants
//
//  Revision 1.6  2001/12/01 18:04:21  dj_jl
//  Started reworking menus
//
//  Revision 1.5  2001/10/12 17:23:35  dj_jl
//  Start on first map in MAPINFO script
//
//  Revision 1.4  2001/09/25 17:11:04  dj_jl
//  Seperated menu API
//
//  Revision 1.3  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
