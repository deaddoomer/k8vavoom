//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ClientGame : ClientGameBase;

enum
{
	MB_None,
	MB_Quit,
	MB_Control,
	MB_Shareware,
	MB_Nightmare
};

const int MAX_MENU_STACK	= 32;

const int NUM_END_MESSAGES	= 15;

TitleScreen			GTitle;
StatusBarScreen		GSBar;
IntermissionScreen	GImission;
FinaleScreen		GFinale;

MenuScreen menu_stack[MAX_MENU_STACK];
int menu_sp;

MenuScreen CurrentMenuScreen;

name MenuStartMap;

MenuControlKey CurrentCtl;
int ControlColumn;	// menu column for controls

name quitsounds[8];

string endmsg[NUM_END_MESSAGES];

name QuitSound;
bool WaitForQuit;

//
//  MESSAGE BOX
//
bool messageToPrint;
int msgBoxX;
int msgBoxY;
int msgBoxW;
int msgBoxH;
string messageString;	// ...and here is the message string!
bool messageNeedsInput;	// timed message = no input from user
int messageType;

int pic_brdr_t;
int pic_brdr_b;
int pic_brdr_l;
int pic_brdr_r;
int pic_brdr_tl;
int pic_brdr_tr;
int pic_brdr_bl;
int pic_brdr_br;

//==========================================================================
//
//  RootWindowCreated
//
//==========================================================================

void RootWindowCreated()
{
	GTitle = TitleScreen(GRoot.NewChild(TitleScreen));
	GSBar = StatusBarScreen(GRoot.NewChild(StatusBarScreen));
	GImission = IntermissionScreen(GRoot.NewChild(IntermissionScreen));
	GFinale = FinaleScreen(GRoot.NewChild(FinaleScreen));
	GTitle.ClGame = self;
	GSBar.ClGame = self;
	GSBar.Hide();
	GImission.ClGame = self;
	GImission.Hide();
	GFinale.ClGame = self;
	GFinale.Hide();
}

//==========================================================================
//
//  Connected
//
//==========================================================================

void Connected()
{
	GTitle.Hide();
	GTitle.StopDemoLoop();
	GSBar.Show();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  Disconnected
//
//==========================================================================

void Disconnected()
{
	GTitle.Show();
	GSBar.Hide();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  DemoPlaybackStarted
//
//==========================================================================

void DemoPlaybackStarted()
{
	GTitle.Hide();
	GSBar.Show();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  DemoPlaybackStopped
//
//==========================================================================

void DemoPlaybackStopped()
{
	GTitle.Show();
	GSBar.Hide();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  OnHostEndGame
//
//==========================================================================

void OnHostEndGame()
{
	GTitle.OnHostEndGame();
}

//==========================================================================
//
//  OnHostError
//
//==========================================================================

void OnHostError()
{
	GTitle.OnHostError();
}

//==========================================================================
//
//  StatusBarStartMap
//
//==========================================================================

void StatusBarStartMap()
{
	GSBar.cl = Player(cl);
	GSBar.Show();
	GSBar.StartMap();
	GImission.Hide();
	GFinale.Hide();
}

//==========================================================================
//
//  StatusBarDrawer
//
//==========================================================================

void StatusBarDrawer(int sb_view)
{
	GSBar.SB_Drawer(sb_view);
}

//==========================================================================
//
//  StatusBarUpdateWidgets
//
//==========================================================================

void StatusBarUpdateWidgets()
{
	GSBar.SB_UpdateWidgets();
}

//==========================================================================
//
//  IintermissionStart
//
//==========================================================================

void IintermissionStart()
{
	GSBar.Hide();
	GImission.Show();
	GImission.Start();
	GFinale.Hide();
}

//==========================================================================
//
//  StartFinale
//
//==========================================================================

void StartFinale(name FinaleType)
{
	intermission = 2;
	GSBar.Hide();
	GImission.Hide();
	GFinale.Show();
	GFinale.StartFinale(FinaleType);
}

//===========================================================================
//
//  FinaleResponder
//
//===========================================================================

bool FinaleResponder(event_t * event)
{
	return GFinale.Responder(event);
}

//==========================================================================
//
//  DeactivateMenu
//
//==========================================================================

void DeactivateMenu()
{
	ForceMenuOff();
}

//==========================================================================
//
//  MenuResponder
//
//==========================================================================

bool MenuResponder(event_t * event)
{
	if (!CurrentMenuScreen)
	{
		// Pop-up menu?
		if (event->type == ev_keydown && event->data1 == K_ESCAPE)
		{
			PushMenuScreen(SpawnMenu(MenuScreenMain));
			return true;
		}
		return false;
	}

	if (event->type != ev_keydown)
	{
		return false;
	}
	return CurrentMenuScreen.Key(event->data1);
}

//==========================================================================
//
//  MenuActive
//
//==========================================================================

bool MenuActive()
{
	return CurrentMenuScreen != none;
}

//==========================================================================
//
//	SetMenu
//
//==========================================================================

void SetMenu(string Name)
{
	if (!stricmp(Name, "Main"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenMain));
		return;
	}
	if (!stricmp(Name, "Save"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenSaveGame));
		return;
	}
	if (!stricmp(Name, "Load"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenLoadGame));
		return;
	}
	if (!stricmp(Name, "PSetup"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenPlayerSetup));
		return;
	}
	if (!stricmp(Name, "Options"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenOptions));
		return;
	}
	if (!stricmp(Name, "Controls"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenControls));
		return;
	}
	if (!stricmp(Name, "Controls2"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenControls2));
		return;
	}
	if (!stricmp(Name, "Mouse"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenMouseOptions));
		return;
	}
	if (!stricmp(Name, "Resolution"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenScreenResolution));
		return;
	}
	if (!stricmp(Name, "Video"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenVideoOptions));
		return;
	}
	if (!stricmp(Name, "Sound"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenSoundOptions));
		return;
	}
	if (!stricmp(Name, "Help"))
	{
		PushMenuScreen(SpawnMenu(MenuScreenHelp));
		return;
	}
	if (!stricmp(Name, "Quit"))
	{
		menu_quit();
		return;
	}
	PushMenuScreen(SpawnMenu(MenuScreenMain));
}

//==========================================================================
//
//  SpawnMenu
//
//==========================================================================

MenuScreen SpawnMenu(class<MenuScreen> CID)
{
	MenuScreen m;

	m = MenuScreen(GRoot.NewChild(CID));
	m.ClGame = self;
	return m;
}

//**************************************************************************
//**
//**    Menu stack handling
//**
//**************************************************************************

//==========================================================================
//
//  PushMenuScreen
//
//==========================================================================

void PushMenuScreen(MenuScreen menu)
{
	int i;

	// avoid stacking menus invoked by hotkeys
	for (i = 0; i < menu_sp; i++)
	{
		if (menu_stack[i].Class == menu.Class)
		{
			int j;

			for (j = i; j < menu_sp; j++)
			{
				menu_stack[j].Destroy();
			}
			menu_sp = i;
			CurrentMenuScreen = none;
			break;
		}
	}

	if (menu_sp >= MAX_MENU_STACK)
		FatalError("PushMenu: menu stack overflow");

	menu_stack[menu_sp++] = menu;

	if (!CurrentMenuScreen)
	{
/*		if (cl.paused)
		{
			S_ResumeSound();
		}
		C_ClearNotify();*/
		CmdBuf_AddText("HideConsole\n");
		LocalSound('menu/activate');
	}
	else
	{
		CurrentMenuScreen.Hide();
	}

	CurrentMenuScreen = menu;
}

//==========================================================================
//
//  PopMenu
//
//==========================================================================

void PopMenu()
{
	menu_sp--;

	if (menu_sp < 0)
		FatalError("PopMenu: menu stack underflow");

	menu_stack[menu_sp].Destroy();
	if (menu_sp)
	{
		CurrentMenuScreen = menu_stack[menu_sp - 1];
		CurrentMenuScreen.Show();
		CurrentMenuScreen.Raise();
		LocalSound('menu/backup');
	}
	else
	{
		CurrentMenuScreen = none;
		LocalSound('menu/clear');
	}
}

//==========================================================================
//
//  ForceMenuOff
//
//==========================================================================

void ForceMenuOff()
{
	int i;

	for (i = 0; i < menu_sp; i++)
	{
		menu_stack[i].Destroy();
	}
	menu_sp = 0;
	CurrentMenuScreen = none;
}

//==========================================================================
//
//  MessageBoxStartMessage
//
//==========================================================================

void MessageBoxStartMessage(string text, int type, bool input)
{
	messageToPrint = true;
	messageString = text;
	messageType = type;
	messageNeedsInput = input;

	T_SetFont(font_small);
	msgBoxW = (T_TextWidth(messageString) + 16) & ~15;
	msgBoxH = (T_TextHeight(messageString) + 16) & ~15;
	if (msgBoxW > 304)
		msgBoxW = 304;
	if (msgBoxH > 184)
		msgBoxH = 184;
	msgBoxX = (640 - msgBoxW) / 2;
	msgBoxY = (480 - msgBoxH) / 2;

	CmdBuf_AddText("HideConsole\n");
}

//==========================================================================
//
//  MessageBoxDrawer
//
//==========================================================================

void MessageBoxDrawer()
{
	// Horiz. & Vertically centre string and print it.
	if (messageToPrint)
	{
		R_FillRectWithFlat(msgBoxX, msgBoxY, msgBoxW, msgBoxH, 'flat20');
		DrawBorder(msgBoxX, msgBoxY, msgBoxW, msgBoxH);
		T_SetFont(font_small);
		T_SetAlign(hcentre, vcentre);
		T_DrawText(320, 240, messageString);
	}

	if (WaitForQuit && !IsLocalSoundPlaying(QuitSound))
	{
		CmdBuf_AddText("Quit\n");
	}
}

//==========================================================================
//
//  MessageBoxResponder
//
//==========================================================================

bool MessageBoxResponder(event_t * event)
{
	if (WaitForQuit)
	{
		return true;
	}

	// Take care of any messages that need input
	if (messageToPrint && event->type == ev_keydown)
	{
		if (messageNeedsInput &&
			event->data1 != K_SPACE &&
			event->data1 != K_n &&
			event->data1 != K_y &&
			event->data1 != K_ESCAPE &&
			event->data1 != K_MOUSE1 && event->data1 != K_MOUSE2)
		{
			return true;
		}

		messageToPrint = false;
		switch (messageType)
		{
		case MB_None:
			break;
		case MB_Quit:
			QuitResponse(event->data1);
			break;
		case MB_Control:
			ControlResponse(event->data1);
			break;
		case MB_Shareware:
			SharewareResponse(event->data1);
			break;
		case MB_Nightmare:
			VerifyNightmare(event->data1);
			break;
		}

//      S_StartSound(sfx1_swtchx);
		return true;
	}
	return false;
}

//==========================================================================
//
//  MessageBoxActive
//
//==========================================================================

bool MessageBoxActive()
{
	return messageToPrint;
}

//==========================================================================
//
//  menu_quit
//
//==========================================================================

void menu_quit()
{
	LocalSound('misc/chat');
	MessageBoxStartMessage(va("%s\n\n(press y to quit)",
			endmsg[P_Random() % NUM_END_MESSAGES]), MB_Quit, true);
}

//==========================================================================
//
//  QuitResponse
//
//==========================================================================

void QuitResponse(int ch)
{
	if (ch != K_y)
		return;

	//	Continue to show message box.
	messageToPrint = true;
	WaitForQuit = true;
	QuitSound = quitsounds[P_Random() & 7];
	LocalSound(QuitSound);
}

//==========================================================================
//
//  ControlResponse
//
//==========================================================================

void ControlResponse(int key)
{
	string kb_down;
	string kb_up;
	int key1;
	int key2;

	if (key != K_ESCAPE)
	{
		kb_down = CurrentCtl.CommandOn;
		kb_up = CurrentCtl.CommandOff;
		IN_GetBindingKeys(kb_down, &key1, &key2);
		if (ControlColumn == 0)
		{
			IN_SetBinding(key1, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
		if (ControlColumn == 1)
		{
			IN_SetBinding(key2, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
	}
}

//==========================================================================
//
//  SharewareResponse
//
//==========================================================================

void SharewareResponse(int key)
{
	PushMenuScreen(SpawnMenu(MenuScreenHelp));
}

//==========================================================================
//
//  VerifyNightmare
//
//  Realy mightmare skill?
//
//==========================================================================

void VerifyNightmare(int ch)
{
	if (ch != K_y)
		return;

	NewGame(sk_nightmare);
}

//==========================================================================
//
//  NewGame
//
//==========================================================================

void NewGame(int skill)
{
	SetCvar('Skill', skill);

	CmdBuf_AddText("Disconnect\n");
	CmdBuf_AddText("MaxPlayers 1\n");

	CmdBuf_AddText("Map %n\n", MenuStartMap);

	ForceMenuOff();
}

//==========================================================================
//
//  InitBorder
//
//==========================================================================

void InitBorder()
{
	pic_brdr_t = R_RegisterPic('brdr_t');
	pic_brdr_b = R_RegisterPic('brdr_b');
	pic_brdr_l = R_RegisterPic('brdr_l');
	pic_brdr_r = R_RegisterPic('brdr_r');
	pic_brdr_tl = R_RegisterPic('brdr_tl');
	pic_brdr_tr = R_RegisterPic('brdr_tr');
	pic_brdr_bl = R_RegisterPic('brdr_bl');
	pic_brdr_br = R_RegisterPic('brdr_br');
}

//==========================================================================
//
//  DrawBorder
//
//  Draws border
//
//==========================================================================

void DrawBorder(int x, int y, int w, int h)
{
	int i;

	if (!pic_brdr_b)
	{
		InitBorder();
	}

	for (i = 0; i < w; i += 8)
		R_DrawPic(x + i, y - 8, pic_brdr_t);

	for (i = 0; i < w; i += 8)
		R_DrawPic(x + i, y + h, pic_brdr_b);

	for (i = 0; i < h; i += 8)
		R_DrawPic(x - 8, y + i, pic_brdr_l);

	for (i = 0; i < h; i += 8)
		R_DrawPic(x + w, y + i, pic_brdr_r);

	// Draw beveled edge.
	R_DrawPic(x - 8, y - 8, pic_brdr_tl);
	R_DrawPic(x + w, y - 8, pic_brdr_tr);
	R_DrawPic(x - 8, y + h, pic_brdr_bl);
	R_DrawPic(x + w, y + h, pic_brdr_br);
}

//==========================================================================
//
//  DrawViewBorder
//
//==========================================================================

void DrawViewBorder(int x, int y, int w, int h)
{
#ifdef DOOM2
	R_FillRectWithFlat(0, 0, 640, 480/* - 32*/, 'grnrock');
#else
	R_FillRectWithFlat(0, 0, 640, 480/* - 32*/, 'floor7_2');
#endif
	DrawBorder(x, y, w, h);
}

//==========================================================================
//
//  UpdateParticle
//
//==========================================================================

void UpdateParticle(particle_t * p, float DeltaTime)
{
	float time2, time3;
	float dvel;
	float grav;

/*
	int				i;
	float			time1;
	
	time1 = frametime * 5;
*/
	time3 = DeltaTime * 15.0;
	time2 = DeltaTime * 10.0;	// 15;
	dvel = 4.0 * DeltaTime;
	grav = 0.0;	//frametime * sv_gravity.value * 0.05;

	switch (p->type)
	{
	case DoomDefs::pt_static:
		break;

	case DoomDefs::pt_explode:
		p->ramp += time2;
		if (p->ramp >= 16.0)
			p->die = -1.0;
		else
			p->colour = DoomDefs.default.ramp1[ftoi(p->ramp)];
		p->vel.x += p->vel.x * dvel;
		p->vel.y += p->vel.y * dvel;
		p->vel.z += p->vel.z * dvel;
		p->vel.z -= grav;
		break;

	case DoomDefs::pt_explode2:
		p->ramp += time3;
		if (p->ramp >= 16.0)
			p->die = -1.0;
		else
			p->colour = DoomDefs.default.ramp2[ftoi(p->ramp)];
		p->vel.x -= p->vel.x * DeltaTime;
		p->vel.y -= p->vel.y * DeltaTime;
		p->vel.z -= p->vel.z * DeltaTime;
		p->vel.z -= grav;
		break;
	}
}

//==========================================================================
//
//  UpdateMobj
//
//==========================================================================

void UpdateMobj(Entity mobj, int key, float DeltaTime)
{
	dlight_t *dl;
	TVec fv;

	switch (mobj.Effects & DoomDefs::EF_DLIGHT_MASK)
	{
	case DoomDefs::EF_DL_NONE:
		break;

	case DoomDefs::EF_DL_MISSILE:
		dl = AllocDlight(key);
		dl->origin = mobj.Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 255, 255);
		dl->die = time + 0.1;
		break;

	case DoomDefs::EF_DL_RBALL:
		dl = AllocDlight(key);
		dl->origin = mobj.Origin;
		dl->radius = 200.0;
		dl->colour = RGB(255, 0, 0);
		dl->die = time + 0.1;
		break;

	case DoomDefs::EF_DL_GBALL:
		dl = AllocDlight(key);
		dl->origin = mobj.Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 255, 0);
		dl->die = time + 0.1;
		break;

	case DoomDefs::EF_DL_PLASMA:
		dl = AllocDlight(key);
		dl->origin = mobj.Origin;
		dl->radius = 200.0;
		dl->colour = RGB(0, 0, 255);
		dl->die = time + 0.1;
		break;

	case DoomDefs::EF_DL_MUZZLEFLASH:
		dl = AllocDlight(key);
		dl->origin = mobj.Origin;
		dl->origin.z += 48.0;
		AngleVector(&mobj.Angles, &fv);

		dl->origin = dl->origin + 18.0 * fv;
		dl->radius = 200.0 + Random() * 31.0;
		dl->colour = 0xffffffff;
		dl->minlight = 32.0;
		dl->die = time + 0.1;
	}

	if (mobj.Effects & DoomDefs::EF_ROCKET)
	{
		int i;
		particle_t *p;
		int c;
		int count;

		count = ftoi(DeltaTime * 256.0);
		for (i = 0; i < count; i++)
		{
			p = NewParticle();
			if (!p)
				return;

			p->org = mobj.Origin;
			c = P_Random() >> 1;
			p->colour = RGB(c, c, c);
			p->die = time + 0.5 * Random();
			p->type = DoomDefs::pt_static;
			p->vel.x = 16.0 * (Random() - 0.5);
			p->vel.y = 16.0 * (Random() - 0.5);
			p->vel.z = 16.0 * (Random() - 0.5);
		}
	}
}

defaultproperties
{
	sb_height = 32;
#ifndef DOOM2
	quitsounds[0] = '*death';
	quitsounds[1] = 'demon/pain';
	quitsounds[2] = 'grunt/pain';
	quitsounds[3] = 'misc/gibbed';
	quitsounds[4] = 'misc/teleport';
	quitsounds[5] = 'grunt/sight1';
	quitsounds[6] = 'grunt/sight3';
	quitsounds[7] = 'demon/melee';
#else
	quitsounds[0] = 'vile/active';
	quitsounds[1] = 'misc/p_pkup';
	quitsounds[2] = 'brain/cube';
	quitsounds[3] = 'misc/gibbed';
	quitsounds[4] = 'skeleton/swing';
	quitsounds[5] = 'knight/death';
	quitsounds[6] = 'baby/active';
	quitsounds[7] = 'demon/melee';
#endif
	endmsg[0] = "are you sure you want to\nquit this great game?";
	endmsg[1] = "please don\'t leave, there\'s more\ndemons to toast!";
	endmsg[2] = "let\'s beat it -- this is turning\ninto a bloodbath!";
	endmsg[3] = "i wouldn\'t leave if i were you.\ndos is much worse.";
	endmsg[4] = "you\'re trying to say you like dos\nbetter than me, right?";
	endmsg[5] = "don\'t leave yet -- there\'s a\ndemon around that corner!";
	endmsg[6] = "ya know, next time you come in here\ni\'m gonna toast ya.";
	endmsg[7] = "go ahead and leave. see if i care.";
	endmsg[8] = "you want to quit?\nthen, thou hast lost an eighth!";
	endmsg[9] = "don\'t go now, there\'s a \ndimensional shambler waiting\nat the dos prompt!";
	endmsg[10] = "get outta here and go back\nto your boring programs.";
	endmsg[11] = "if i were your boss, i\'d \n deathmatch ya in a minute!";
	endmsg[12] = "look, bud. you leave now\nand you forfeit your body count!";
	endmsg[13] = "just leave. when you come\nback, i\'ll be waiting with a bat.";
	endmsg[14] = "you\'re lucky i don\'t smack\nyou for thinking about leaving.";
}
