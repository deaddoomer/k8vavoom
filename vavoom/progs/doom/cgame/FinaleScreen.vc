//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FinaleScreen : Window;

ClientGameBase ClGame;

name FinaleType;

float FinaleTime;

int fpage1;
int fpage2;
int fend[7];

int laststage;

ActorDisplayWindow CastWin;

int			castnum;
int			castframes;
int			castonmelee;
bool		castattacking;
bool		castdeath;

const int CastCount = 17;

// Casting by id Software. in order of appearance
class<Actor> castorder[CastCount];
//
// Character cast strings
//
string caststrings[CastCount];

//==========================================================================
//
//  StartFinale
//
//==========================================================================

void StartFinale(name AFinaleType)
{
	FinaleType = AFinaleType;

	FinaleTime = 0.0;
	if (FinaleType == 'EndGamePic1')
	{
		if (WadLumpPresent('e4m1'))
			InitPic('credit');
		else
			InitPic('help2');
	}
	else if (FinaleType == 'EndGamePic2')
	{
		InitPic('victory2');
	}
	else if (FinaleType == 'EndGameBunny')
	{
		F_InitBunnyScroll();
	}
	else if (FinaleType == 'EndGamePic3')
	{
		InitPic('endpic');
	}
	else if (FinaleType == 'EndGameUnderwater')
	{
		fpage1 = R_RegisterPicPal('e2end', 'e2pal');
#ifdef FIXME
		S_StartSong("d_victor", P_GetCDEnd1Track(), true);
#else
		CmdBuf_AddText("music loop d_victor\n");
#endif
	}
	else if (FinaleType == 'EndGameDemon')
	{
		fpage1 = R_RegisterPic('final1');
		fpage2 = R_RegisterPic('final2');
#ifdef FIXME
		S_StartSong("d_victor", P_GetCDEnd1Track(), true);
#else
		CmdBuf_AddText("music loop d_victor\n");
#endif
	}
	else if (FinaleType == 'EndGameCast')
	{
		F_StartCast();
	}
	else if (strlen(va("%n", FinaleType)) > 16 &&
		!strcmp(substr(va("%n", FinaleType), 0, 16), "EndGameCustomPic"))
	{
		InitPic(StrToName(substr(va("%n", FinaleType), 16, strlen(va("%n",
			FinaleType)) - 16)));
	}
	else
	{
		print("Unknown finale type %n", FinaleType);
		InitPic('credit');
	}
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	FinaleTime += DeltaTime;
	if (FinaleType == 'EndGameCast')
	{
		F_CastTicker(DeltaTime);
	}
}

//==========================================================================
//
//  DrawWindow
//
//==========================================================================

void DrawWindow()
{
	if (FinaleType == 'EndGameBunny')
	{
		F_BunnyScroll();
	}
	else if (FinaleType == 'EndGameCast')
	{
		F_CastDrawer();
	}
	else if (FinaleType == 'EndGameDemon')
	{
		F_DemonScroll();
	}
	else
	{
		DrawFullScreenPic(fpage1);
	}
}

//==========================================================================
//
//  PostDrawWindow
//
//==========================================================================

void PostDrawWindow()
{
	if (FinaleType == 'EndGameCast')
	{
		T_SetFont(font_small);
		T_SetAlign(hcentre, vtop);
		DrawText(320, 440, caststrings[castnum]);
	}
}

//===========================================================================
//
//  Responder
//
//===========================================================================

bool Responder(event_t * event)
{
	if (FinaleType == 'EndGameCast')
	{
		return F_CastResponder(event);
	}
	return false;
}

//==========================================================================
//
//  InitPic
//
//==========================================================================

void InitPic(name PicName)
{
	fpage1 = R_RegisterPic(PicName);
#ifdef FIXME
	S_StartSong("d_victor", P_GetCDEnd1Track(), true);
#else
	CmdBuf_AddText("music loop d_victor\n");
#endif
}

//==========================================================================
//
//  F_InitBunnyScroll
//
//==========================================================================

void F_InitBunnyScroll()
{
	int i;

	fpage1 = R_RegisterPic('pfub1');
	fpage2 = R_RegisterPic('pfub2');
	for (i = 0; i < 7; i++)
	{
		fend[i] = R_RegisterPic(StrToName(va("end%d", i)));
	}
#ifdef FIXME
	S_StartSong("d_bunny", P_GetCDEnd2Track(), true);
#else
	CmdBuf_AddText("music loop d_bunny\n");
#endif
}

//==========================================================================
//
//  F_BunnyScroll
//
//==========================================================================

void F_BunnyScroll()
{
	int scrolled;
	int stage;

	scrolled = ftoi((FinaleTime - 6.5) * 16.0);
	SetVirtualScreen(320, 200);
	if (scrolled <= 0)
	{
		R_DrawPic(0, 0, fpage1);
	}
	else if (scrolled >= 320)
	{
		R_DrawPic(0, 0, fpage2);
	}
	else
	{
		R_DrawPic(scrolled, 0, fpage1);
		R_DrawPic(scrolled - 320, 0, fpage2);
	}
	SetVirtualScreen(640, 480);

	if (FinaleTime < 32.0)
	{
		return;
	}
	if (FinaleTime < 35.0)
	{
		DrawPic((640 - 13 * 8) / 2, (480 - 8 * 8) / 2, fend[0]);
		laststage = 0;
		return;
	}

	stage = ftoi((FinaleTime - 35.0) * 7.0);
	if (stage > 6)
	{
		stage = 6;
	}
	if (stage > laststage)
	{
		LocalSound('weapons/pistol');
		laststage = stage;
	}
	DrawPic((640 - 13 * 8) / 2, (480 - 8 * 8) / 2, fend[stage]);
}

//==========================================================================
//
//  F_StartCast
//
//==========================================================================

void F_StartCast()
{
#ifdef FIXME
	S_StartSong("d_evil", P_GetCDEnd2Track(), true);
#else
	CmdBuf_AddText("music loop d_evil\n");
#endif
	fpage1 = R_RegisterPic('bossback');

	if (!CastWin)
	{
		CastWin = ActorDisplayWindow(NewChild(ActorDisplayWindow));
		CastWin.SetPos(0, 0);
		CastWin.SetSize(640, 480);
	}

	castnum = 0;
	CastWin.SetState(FindClassState(castorder[castnum], 'See'));
	CastWin.CastTime = CastWin.StateTime;
	castdeath = false;
	castframes = 0;
	castonmelee = 0;
	castattacking = false;
}

//==========================================================================
//
//  CastSound
//
//==========================================================================

void DoCastSound(state CurState, class Cls, name State, int Offset,
	name Sound)
{
	state S = FindClassState(Cls, State);
	if (S)
	{
		S = GetStatePlus(S, Offset);
		if (S == CurState)
		{
			LocalSound(Sound);
		}
	}
}

//==========================================================================
//
//  CastSound
//
//==========================================================================

void CastSound(state State)
{
	// sound hacks....
	DoCastSound(State, DoomPlayer, 'Missile', 0, 'weapons/sshotf');
	DoCastSound(State, ZombieMan, 'Missile', 1, 'grunt/attack');
	DoCastSound(State, ShotgunGuy, 'Missile', 1, 'shotguy/attack');
	DoCastSound(State, ChaingunGuy, 'Missile', 1, 'chainguy/attack');
	DoCastSound(State, ChaingunGuy, 'Missile', 2, 'chainguy/attack');
	DoCastSound(State, ChaingunGuy, 'Missile', 3, 'chainguy/attack');
	DoCastSound(State, DoomImp, 'Melee', 2, 'imp/melee');
	DoCastSound(State, LostSoul, 'Missile', 1, 'skull/melee');
	DoCastSound(State, Demon, 'Melee', 1, 'demon/melee');
	DoCastSound(State, Cacodemon, 'Missile', 1, 'caco/attack');
	DoCastSound(State, BaronOfHell, 'Missile', 1, 'baron/attack');
	DoCastSound(State, HellKnight, 'Missile', 1, 'baron/attack');
	DoCastSound(State, Cyberdemon, 'Missile', 1, 'weapons/rocklf');
	DoCastSound(State, Cyberdemon, 'Missile', 3, 'weapons/rocklf');
	DoCastSound(State, Cyberdemon, 'Missile', 5, 'weapons/rocklf');
	DoCastSound(State, SpiderMastermind, 'Missile', 1, 'spider/attack');
	DoCastSound(State, SpiderMastermind, 'Missile', 2, 'spider/attack');
	DoCastSound(State, Arachnotron, 'Missile', 1, 'baby/attack');
	DoCastSound(State, PainElemental, 'Missile', 2, 'skull/melee');
	DoCastSound(State, Revenant, 'Melee', 1, 'skeleton/swing');
	DoCastSound(State, Revenant, 'Melee', 3, 'skeleton/melee');
	DoCastSound(State, Revenant, 'Missile', 1, 'skeleton/attack');
	DoCastSound(State, Fatso, 'Missile', 1, 'fatso/attack');
	DoCastSound(State, Fatso, 'Missile', 4, 'fatso/attack');
	DoCastSound(State, Fatso, 'Missile', 7, 'fatso/attack');
	DoCastSound(State, Archvile, 'Missile', 1, 'vile/start');
}

//==========================================================================
//
//  F_CastTicker
//
//==========================================================================

void F_CastTicker(float DeltaTime)
{
	CastWin.CastTime -= DeltaTime;
	if (CastWin.CastTime > 0.0)
		return;	// not time to change state yet

	SetNextCastState(CastWin.StateTime, CastWin.NextState);
}

//==========================================================================
//
//  SetNextCastState
//
//==========================================================================

void SetNextCastState(float StateTime, state NextState)
{
	state	NewState;

	if (StateTime == -1.0 || !NextState)
	{
		// switch from deathstate to next monster
		castnum++;
		castdeath = false;
		if (castnum == CastCount)
			castnum = 0;
		if (castorder[castnum].default.SightSound)
			LocalSound(castorder[castnum].default.SightSound);
		NewState = FindClassState(castorder[castnum], 'See');
		castframes = 0;
	}
	else
	{
		// just advance to next state in animation
//      if (caststate == &states[S1_PLAY_ATK1])
//          goto stopattack;    // Oh, gross hack!
		NewState = NextState;
		if (NewState == FindClassState(castorder[castnum], 'Spawn'))
			NewState = FindClassState(castorder[castnum], 'See');
		castframes++;

		CastSound(NewState);
	}

	if (castframes == 12)
	{
		// go into attack frame
		castattacking = true;
		if (castonmelee)
			NewState = FindClassState(castorder[castnum], 'Melee');
		else
			NewState = FindClassState(castorder[castnum], 'Missile');
		castonmelee ^= 1;
		if (!NewState)
		{
			if (castonmelee)
				NewState = FindClassState(castorder[castnum], 'Melee');
			else
				NewState = FindClassState(castorder[castnum], 'Missile');
		}
	}

	if (castattacking)
	{
		if (castframes == 24
			|| NewState == FindClassState(castorder[castnum], 'See'))
		{
//        stopattack:
			castattacking = false;
			castframes = 0;
			NewState = FindClassState(castorder[castnum], 'See');
		}
	}

	CastWin.SetState(NewState);
	CastWin.CastTime = CastWin.StateTime;
	if (CastWin.CastTime < 0.0)
		CastWin.CastTime = 15.0 / 35.0;
}

//==========================================================================
//
//  F_CastResponder
//
//==========================================================================

bool F_CastResponder(event_t * ev)
{
	if (ev->type != ev_keydown)
		return false;

	if (castdeath)
		return true;	// already in dying frames

	// go into death frame
	castdeath = true;
	CastWin.SetState(FindClassState(castorder[castnum], 'Death'));
	CastWin.CastTime = CastWin.StateTime;
	castframes = 0;
	castattacking = false;
	if (castorder[castnum].default.DeathSound)
		LocalSound(castorder[castnum].default.DeathSound);

	return true;
}

//==========================================================================
//
//  F_CastDrawer
//
//==========================================================================

void F_CastDrawer()
{
	// erase the entire screen to a background
	SetVirtualScreen(320, 200);
	R_DrawPic(0, 0, fpage1);
	SetVirtualScreen(640, 480);
}

//==========================================================================
//
//  F_DemonScroll
//
//==========================================================================

void F_DemonScroll()
{
	SetVirtualScreen(320, 200);
	if (FinaleTime < 2.0)
	{
		R_DrawPic(0, 0, fpage1);
	}
	else if (FinaleTime < 22.0)
	{
		int yval = ftoi((FinaleTime - 2.0) * 10.0);

		R_DrawPic(0, yval, fpage1);
		R_DrawPic(0, yval - 200, fpage2);
	}
	else
	{
		//else, we'll just sit here and wait, for now
		R_DrawPic(0, 0, fpage2);
	}
	SetVirtualScreen(640, 480);
}

//==========================================================================
//
//	OnVisibilityChanged
//
//==========================================================================

void OnVisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 640;
	Height = 480;

	castorder[0] = ZombieMan;
	castorder[1] = ShotgunGuy;
	castorder[2] = ChaingunGuy;
	castorder[3] = DoomImp;
	castorder[4] = Demon;
	castorder[5] = LostSoul;
	castorder[6] = Cacodemon;
	castorder[7] = HellKnight;
	castorder[8] = BaronOfHell;
	castorder[9] = Arachnotron;
	castorder[10] = PainElemental;
	castorder[11] = Revenant;
	castorder[12] = Fatso;
	castorder[13] = Archvile;
	castorder[14] = SpiderMastermind;
	castorder[15] = Cyberdemon;
	castorder[16] = DoomPlayer;

	caststrings[0] = "ZOMBIEMAN";
	caststrings[1] = "SHOTGUN GUY";
	caststrings[2] = "HEAVY WEAPON DUDE";
	caststrings[3] = "IMP";
	caststrings[4] = "DEMON";
	caststrings[5] = "LOST SOUL";
	caststrings[6] = "CACODEMON";
	caststrings[7] = "HELL KNIGHT";
	caststrings[8] = "BARON OF HELL";
	caststrings[9] = "ARACHNOTRON";
	caststrings[10] = "PAIN ELEMENTAL";
	caststrings[11] = "REVENANT";
	caststrings[12] = "MANCUBUS";
	caststrings[13] = "ARCH-VILE";
	caststrings[14] = "THE SPIDER MASTERMIND";
	caststrings[15] = "THE CYBERDEMON";
	caststrings[16] = "OUR HERO";
}
