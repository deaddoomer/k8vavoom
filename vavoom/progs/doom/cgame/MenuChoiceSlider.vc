//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MenuChoiceSlider:MenuChoice;

string Text;

float Value;
float ValueDelta;
float MinValue;
float MaxValue;

int pic_M_THERML;
int pic_M_THERMM;
int pic_M_THERMR;
int pic_M_THERMO;

delegate bool ValueChanging(Object Sender, float NewValue);

bool SetNewValue(float NewValue)
{
	if (ValueChanging)
	{
		return ValueChanging(self, NewValue);
	}
	return true;
}

void SetInitialValue(float AValue)
{
	Value = AValue;
	if (Value < MinValue)
		Value = MinValue;
	if (Value > MaxValue)
		Value = MaxValue;
}

void InitWindow()
{
	::InitWindow();

	pic_M_THERML = R_RegisterPic('m_therml');
	pic_M_THERMM = R_RegisterPic('m_thermm');
	pic_M_THERMR = R_RegisterPic('m_thermr');
	pic_M_THERMO = R_RegisterPic('m_thermo');
}

void DrawWindow()
{
	int i;
	int xx;

	T_SetFont(font_small);
	T_SetAlign(hright, vtop);
	DrawText(0, 0, Text);

	xx =  8;
	DrawPic(xx, 0, pic_M_THERML);
	xx += 8;
	for (i = 0; i < 13; i++)
	{
		DrawPic(xx, 0, pic_M_THERMM);
		xx += 8;
	}
	DrawPic(xx, 0, pic_M_THERMR);
	xx = 8 + 6 + ftoi((Value - MinValue) * 100.0 / (MaxValue - MinValue));
	DrawPic(xx, 0, pic_M_THERMO);
}

bool Key(int key)
{
	float newValue;

	switch (key)
	{
	case K_LEFTARROW:
		newValue = Value - ValueDelta;
		if (newValue < MinValue)
		{
			newValue = MinValue;
		}
		if (SetNewValue(newValue))
		{
			Value = newValue;
			LocalSound('menu/change');
		}
		return true;

	case K_RIGHTARROW:
		newValue = Value + ValueDelta;
		if (newValue > MaxValue)
		{
			newValue = MaxValue;
		}
		if (SetNewValue(newValue))
		{
			Value = newValue;
			LocalSound('menu/change');
		}
		return true;
	}
	return ::Key(key);
}

defaultproperties
{
	Height = 20;
	Value = 0.0;
	ValueDelta = 1.0;
	MinValue = 0.0;
	MaxValue = 1.0;
}
