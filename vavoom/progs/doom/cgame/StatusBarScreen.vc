//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StatusBarScreen : Window;

//
//  Location of statistics, justified according to widget type.
//

#define ST_BGX				0
#define ST_BGY				168

// AMMO number pos.
#define ST_AMMOX			44
#define ST_AMMOY			171

// HEALTH number pos.
#define ST_HEALTHX			90
#define ST_HEALTHY			171

// Frags pos.
#define ST_FRAGSX			138
#define ST_FRAGSY			171

// Weapon pos.
#define ST_ARMSBGX			104
#define ST_ARMSBGY			168
#define ST_ARMSX			111
#define ST_ARMSY			172
#define ST_ARMSXSPACE		12
#define ST_ARMSYSPACE		10

// Location of marine face
#define ST_FACESX			143
#define ST_FACESY			168

// ARMOR number pos.
#define ST_ARMORX			221
#define ST_ARMORY			171

// Key icon positions.
#define ST_KEY0X			239
#define ST_KEY0Y			171
#define ST_KEY1X			239
#define ST_KEY1Y			181
#define ST_KEY2X			239
#define ST_KEY2Y			191

// Ammunition counter.
#define ST_AMMO0X			288
#define ST_AMMO0Y			173
#define ST_AMMO1X			288
#define ST_AMMO1Y			179
#define ST_AMMO2X			288
#define ST_AMMO2Y			191
#define ST_AMMO3X			288
#define ST_AMMO3Y			185

// Indicate maximum ammunition.
// Only needed because backpack exists.
#define ST_MAXAMMO0X		314
#define ST_MAXAMMO0Y		173
#define ST_MAXAMMO1X		314
#define ST_MAXAMMO1Y		179
#define ST_MAXAMMO2X		314
#define ST_MAXAMMO2Y		191
#define ST_MAXAMMO3X		314
#define ST_MAXAMMO3Y		185

//  Fullscreen widgets
#define ST_TDHEALTHX	64
#define ST_TDHEALTHY	180

#define ST_TDARMORX		140
#define ST_TDARMORY		180

#define ST_TDAMMOX		315
#define ST_TDAMMOY		180

client_state_t *cl;

//
//  PICS
//

int pic_bar;
int pic_arms;
int pic_tallnum[10];
int pic_yellownum[10];
int pic_graynum[10];
int pic_minus;
int pic_percent;
int pic_faceback;
int pic_faces[DoomDefs::ST_NUMFACES];
int pic_keys[6];
int pic_pause;
//For Icons in Fullscreen HUD
int pic_ammoicon[4];
int pic_health;
int pic_armor2;

//==========================================================================
//
//  StartMap
//
//==========================================================================

void StartMap()
{
	int namebuf[3];
	string Name = ARR2STR(namebuf);
	int i;

	pic_bar = R_RegisterPic("STBAR", PIC_PATCH);
	pic_arms = R_RegisterPic("STARMS", PIC_PATCH);

	for (i = 0; i < 10; i++)
	{
		sprint(Name, "STTNUM%d", i);
		pic_tallnum[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "STYSNUM%d", i);
		pic_yellownum[i] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "STGNUM%d", i);
		pic_graynum[i] = R_RegisterPic(Name, PIC_PATCH);
	}
	pic_minus = R_RegisterPic("STTMINUS", PIC_PATCH);
	pic_percent = R_RegisterPic("STTPRCNT", PIC_PATCH);

	sprint(Name, "STFB%d", cl->clientnum);
	pic_faceback = R_RegisterPic(Name, PIC_PATCH);

	for (i = 0; i < 6; i++)
	{
		sprint(Name, "STKEYS%d", i);
		pic_keys[i] = R_RegisterPic(Name, PIC_PATCH);
	}

	for (i = 0; i < DoomDefs::ST_NUMPAINFACES; i++)
	{
		sprint(Name, "STFST%d0", i);
		pic_faces[i * DoomDefs::ST_FACESTRIDE] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "STFST%d1", i);
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 1] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "STFST%d2", i);
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 2] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "STFTR%d0", i);
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 3] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "STFTL%d0", i);
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 4] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "STFOUCH%d", i);
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 5] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "STFEVL%d", i);
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 6] = R_RegisterPic(Name, PIC_PATCH);
		sprint(Name, "STFKILL%d", i);
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 7] = R_RegisterPic(Name, PIC_PATCH);
	}
	pic_faces[DoomDefs::ST_GODFACE] = R_RegisterPic("STFGOD0", PIC_PATCH);
	pic_faces[DoomDefs::ST_DEADFACE] = R_RegisterPic("STFDEAD0", PIC_PATCH);

	pic_pause = R_RegisterPic("M_PAUSE", PIC_PATCH);

	// Fullscreen HUD stuff
	pic_ammoicon[0] = R_RegisterPic("CLIPA0", PIC_PATCH);
	pic_ammoicon[1] = R_RegisterPic("SBOXA0", PIC_PATCH);
	pic_ammoicon[2] = R_RegisterPic("CELLA0", PIC_PATCH);
	pic_ammoicon[3] = R_RegisterPic("ROCKA0", PIC_PATCH);
	pic_health = R_RegisterPic("STIMA0", PIC_PATCH);
	pic_armor2 = R_RegisterPic("ARM2A0", PIC_PATCH);
}

//==========================================================================
//
//	SB_DrawTallNum
//
//==========================================================================

void SB_DrawTallNum(int x, int y, int num, int trans, bool perc)
{
	int w;
	int neg;
	picinfo_t info;

	// if non-number, do not draw it
	if (num == 1994)
	{
		return;
	}

	if (perc)
	{
		R_DrawPic2(x, y, pic_percent, trans);
	}

	R_GetPicInfo(pic_tallnum[0], &info);
	w = info.width;

	neg = num < 0;
	if (neg)
	{
		num = -num;
	}

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic2(x - w, y, pic_tallnum[0], trans);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic2(x, y, pic_tallnum[num % 10], trans);
		num /= 10;
	}

	// draw a minus sign if necessary
	if (neg)
	{
		R_DrawPic2(x - 8, y, pic_minus, trans);
	}
}

//==========================================================================
//
//	SB_DrawSmallNum
//
//==========================================================================

void SB_DrawSmallNum(int x, int y, int num)
{
	int w;
	picinfo_t info;

	if (num < 0)
	{
		num = -num;
	}

	R_GetPicInfo(pic_yellownum[0], &info);
	w = info.width;

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic(x - w, y, pic_yellownum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic(x, y, pic_yellownum[num % 10]);
		num /= 10;
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar()
{
	int i;

	//  background
	R_DrawPic(ST_BGX, ST_BGY, pic_bar);

	// ready weapon ammo
	SB_DrawTallNum(ST_AMMOX, ST_AMMOY, cl->ReadyAmmo, 0, false);

	// health percentage
	SB_DrawTallNum(ST_HEALTHX, ST_HEALTHY, cl->health, 0, true);

	if (cl->deathmatch)
	{
		// frags sum
		SB_DrawTallNum(ST_FRAGSX, ST_FRAGSY, cl->Frags, 0, false);
	}
	else
	{
		// weapons owned
		R_DrawPic(ST_ARMSBGX, ST_ARMSBGY, pic_arms);
		for (i = 0; i < 6; i++)
		{
			if (cl->WeaponOwned[i + 1])
			{
				R_DrawPic(ST_ARMSX + (i % 3) * ST_ARMSXSPACE,
					ST_ARMSY + (i / 3) * ST_ARMSYSPACE, pic_yellownum[i + 2]);
			}
			else
			{
				R_DrawPic(ST_ARMSX + (i % 3) * ST_ARMSXSPACE,
					ST_ARMSY + (i / 3) * ST_ARMSYSPACE, pic_graynum[i + 2]);
			}
		}
	}

	// faces
	if (cl->maxclients > 1)
	{
		R_DrawPic(ST_FACESX, ST_FACESY, pic_faceback);
	}
	R_DrawPic(ST_FACESX, ST_FACESY, pic_faces[cl->sb_faceindex]);

	// armor percentage
	SB_DrawTallNum(ST_ARMORX, ST_ARMORY, cl->ArmorPoints, 0, true);

	// keyboxes 0-2
	if (cl->SBFlags & DoomDefs::SBF_BLUE_SKULL)
	{
		R_DrawPic(ST_KEY0X, ST_KEY0Y, pic_keys[3]);
	}
	else if (cl->SBFlags & DoomDefs::SBF_BLUE_CARD)
	{
		R_DrawPic(ST_KEY0X, ST_KEY0Y, pic_keys[0]);
	}

	if (cl->SBFlags & DoomDefs::SBF_YELLOW_SKULL)
	{
		R_DrawPic(ST_KEY1X, ST_KEY1Y, pic_keys[4]);
	}
	else if (cl->SBFlags & DoomDefs::SBF_YELLOW_CARD)
	{
		R_DrawPic(ST_KEY1X, ST_KEY1Y, pic_keys[1]);
	}

	if (cl->SBFlags & DoomDefs::SBF_RED_SKULL)
	{
		R_DrawPic(ST_KEY2X, ST_KEY2Y, pic_keys[5]);
	}
	else if (cl->SBFlags & DoomDefs::SBF_RED_CARD)
	{
		R_DrawPic(ST_KEY2X, ST_KEY2Y, pic_keys[2]);
	}

	// ammo count (all four kinds)
	SB_DrawSmallNum(ST_AMMO0X, ST_AMMO0Y, cl->Ammo[0]);
	SB_DrawSmallNum(ST_AMMO1X, ST_AMMO1Y, cl->Ammo[1]);
	SB_DrawSmallNum(ST_AMMO2X, ST_AMMO2Y, cl->Ammo[2]);
	SB_DrawSmallNum(ST_AMMO3X, ST_AMMO3Y, cl->Ammo[3]);

	// max ammo count (all four kinds)
	SB_DrawSmallNum(ST_MAXAMMO0X, ST_MAXAMMO0Y, cl->MaxAmmo[0]);
	SB_DrawSmallNum(ST_MAXAMMO1X, ST_MAXAMMO1Y, cl->MaxAmmo[1]);
	SB_DrawSmallNum(ST_MAXAMMO2X, ST_MAXAMMO2Y, cl->MaxAmmo[2]);
	SB_DrawSmallNum(ST_MAXAMMO3X, ST_MAXAMMO3Y, cl->MaxAmmo[3]);
}

//==========================================================================
//
//	SB_DrawFullscreenStats
//
//==========================================================================

void SB_DrawFullscreenStats(void)
{
	// health
	SB_DrawTallNum(ST_TDHEALTHX, ST_TDHEALTHY, cl->health, 40, false);
	R_DrawPic(10, 195, pic_health);

	// armor
	if (cl->ArmorPoints)
	{
		SB_DrawTallNum(ST_TDARMORX, ST_TDARMORY, cl->ArmorPoints, 40, false);
		R_DrawPic(80, 195, pic_armor2);
	}

	// ready weapon ammo with icon
	SB_DrawTallNum(ST_TDAMMOX, ST_TDAMMOY, cl->ReadyAmmo, 40, false);
	if ((cl->ReadyWeapon == DoomDefs::wp_pistol) || (cl->ReadyWeapon == DoomDefs::wp_chaingun))
	{
		R_DrawPic(260, 195, pic_ammoicon[0]);
	}
	else if ((cl->ReadyWeapon == DoomDefs::wp_shotgun) || (cl->ReadyWeapon == DoomDefs::wp_supershotgun))
	{
		R_DrawPic(260, 195, pic_ammoicon[1]);
	}
	else if ((cl->ReadyWeapon == DoomDefs::wp_plasma) || (cl->ReadyWeapon == DoomDefs::wp_bfg))
	{
		R_DrawPic(260, 195, pic_ammoicon[2]);
	}
	else if ((cl->ReadyWeapon == DoomDefs::wp_missile)) //|| (cl->ReadyWeapon & wp_grenade))
	{
		R_DrawPic(260, 195, pic_ammoicon[3]);
	}

	// keys
	if (cl->SBFlags & DoomDefs::SBF_BLUE_SKULL)
	{
		R_DrawPic(230, 190, pic_keys[3]);
	}
	else if (cl->SBFlags & DoomDefs::SBF_BLUE_CARD)
	{
		R_DrawPic(230, 190, pic_keys[0]);
	}

	if (cl->SBFlags & DoomDefs::SBF_YELLOW_SKULL)
	{
		R_DrawPic(220, 190, pic_keys[4]);
	}
	else if (cl->SBFlags & DoomDefs::SBF_YELLOW_CARD)
	{
		R_DrawPic(220, 190, pic_keys[1]);
	}

	if (cl->SBFlags & DoomDefs::SBF_RED_SKULL)
	{
		R_DrawPic(210, 190, pic_keys[5]);
	}
	else if (cl->SBFlags & DoomDefs::SBF_RED_CARD)
	{
		R_DrawPic(210, 190, pic_keys[2]);
	}

	if (cl->deathmatch)
	{
		// frags sum
		SB_DrawTallNum(315, 5, cl->Frags, 40, false);
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause(void)
{
	if (cl->bPaused && GetCvar("draw_pause"))
	{
		R_DrawPic(126, 4, pic_pause);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	if (sb_view == SB_VIEW_FULLSCREEN)
	{
		SB_DrawFullscreenStats();
	}
	else
	{
		SB_DrawMainBar();
	}
	SB_DrawPause();
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets()
{
}

//==========================================================================
//
//	VisibilityChanged
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 320;
	Height = 200;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.2  2006/02/17 19:06:51  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.1  2006/02/09 22:33:09  dj_jl
//  Moved all client game code to classes.
//
//**************************************************************************
