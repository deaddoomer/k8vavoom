//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class StatusBarScreen : Window;

//
//  Location of statistics, justified according to widget type.
//

const int
	ST_BGX				= 160,
	ST_BGY				= 448,

// AMMO number pos.
	ST_AMMOX			= ST_BGX + 44,
	ST_AMMOY			= ST_BGY + 3,

// HEALTH number pos.
	ST_HEALTHX			= ST_BGX + 90,
	ST_HEALTHY			= ST_BGY + 3,

// Frags pos.
	ST_FRAGSX			= ST_BGX + 138,
	ST_FRAGSY			= ST_BGY + 3,

// Weapon pos.
	ST_ARMSBGX			= ST_BGX + 104,
	ST_ARMSBGY			= ST_BGY + 0,
	ST_ARMSX			= ST_BGX + 111,
	ST_ARMSY			= ST_BGY + 4,
	ST_ARMSXSPACE		= 12,
	ST_ARMSYSPACE		= 10,

// Location of marine face
	ST_FACESX			= ST_BGX + 143,
	ST_FACESY			= ST_BGY + 0,

// ARMOR number pos.
	ST_ARMORX			= ST_BGX + 221,
	ST_ARMORY			= ST_BGY + 3,

// Key icon positions.
	ST_KEY0X			= ST_BGX + 239,
	ST_KEY0Y			= ST_BGY + 3,
	ST_KEY1X			= ST_BGX + 239,
	ST_KEY1Y			= ST_BGY + 13,
	ST_KEY2X			= ST_BGX + 239,
	ST_KEY2Y			= ST_BGY + 23,

// Ammunition counter.
	ST_AMMO0X			= ST_BGX + 288,
	ST_AMMO0Y			= ST_BGY + 5,
	ST_AMMO1X			= ST_BGX + 288,
	ST_AMMO1Y			= ST_BGY + 11,
	ST_AMMO2X			= ST_BGX + 288,
	ST_AMMO2Y			= ST_BGY + 23,
	ST_AMMO3X			= ST_BGX + 288,
	ST_AMMO3Y			= ST_BGY + 17,

// Indicate maximum ammunition.
// Only needed because backpack exists.
	ST_MAXAMMO0X		= ST_BGX + 314,
	ST_MAXAMMO0Y		= ST_BGY + 5,
	ST_MAXAMMO1X		= ST_BGX + 314,
	ST_MAXAMMO1Y		= ST_BGY + 11,
	ST_MAXAMMO2X		= ST_BGX + 314,
	ST_MAXAMMO2Y		= ST_BGY + 23,
	ST_MAXAMMO3X		= ST_BGX + 314,
	ST_MAXAMMO3Y		= ST_BGY + 17,

//  Fullscreen widgets
	ST_TDHEALTHX	= 120,
	ST_TDHEALTHY	= 460,

	ST_TDARMORX		= 280,
	ST_TDARMORY		= 460,

	ST_TDAMMOX		= 620,
	ST_TDAMMOY		= 460;

ClientGame ClGame;
Player cl;

//
//  PICS
//

int pic_bar;
int pic_arms;
int pic_tallnum[10];
int pic_yellownum[10];
int pic_graynum[10];
int pic_minus;
int pic_percent;
int pic_faceback;
int pic_faces[DoomDefs::ST_NUMFACES];
int pic_keys[6];
int pic_pause;
//For Icons in Fullscreen HUD
int pic_ammoicon[4];
int pic_health;
int pic_armor;
int pic_armor2;

//==========================================================================
//
//  StartMap
//
//==========================================================================

void StartMap()
{
	int i;

	pic_bar = R_RegisterPic('stbar');
	pic_arms = R_RegisterPic('starms');

	for (i = 0; i < 10; i++)
	{
		pic_tallnum[i] = R_RegisterPic(StrToName(va("sttnum%d", i)));
		pic_yellownum[i] = R_RegisterPic(StrToName(va("stysnum%d", i)));
		pic_graynum[i] = R_RegisterPic(StrToName(va("stgnum%d", i)));
	}
	pic_minus = R_RegisterPic('sttminus');
	pic_percent = R_RegisterPic('sttprcnt');

	pic_faceback = R_RegisterPic(StrToName(va("stfb%d", cl.ClientNum)));

	for (i = 0; i < 6; i++)
	{
		pic_keys[i] = R_RegisterPic(StrToName(va("stkeys%d", i)));
	}

	for (i = 0; i < DoomDefs::ST_NUMPAINFACES; i++)
	{
		pic_faces[i * DoomDefs::ST_FACESTRIDE] =
			R_RegisterPic(StrToName(va("stfst%d0", i)));
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 1] =
			R_RegisterPic(StrToName(va("stfst%d1", i)));
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 2] =
			R_RegisterPic(StrToName(va("stfst%d2", i)));
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 3] =
			R_RegisterPic(StrToName(va("stftr%d0", i)));
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 4] =
			R_RegisterPic(StrToName(va("stftl%d0", i)));
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 5] =
			R_RegisterPic(StrToName(va("stfouch%d", i)));
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 6] =
			R_RegisterPic(StrToName(va("stfevl%d", i)));
		pic_faces[i * DoomDefs::ST_FACESTRIDE + 7] =
			R_RegisterPic(StrToName(va("stfkill%d", i)));
	}
	pic_faces[DoomDefs::ST_GODFACE] = R_RegisterPic('stfgod0');
	pic_faces[DoomDefs::ST_DEADFACE] = R_RegisterPic('stfdead0');

	pic_pause = R_RegisterPic('m_pause');

	// Fullscreen HUD stuff
	pic_ammoicon[0] = R_RegisterPic('ammoa0');
	pic_ammoicon[1] = R_RegisterPic('sboxa0');
	pic_ammoicon[2] = R_RegisterPic('cella0');
	pic_ammoicon[3] = R_RegisterPic('rocka0');
	pic_health = R_RegisterPic('stima0');
	pic_armor = R_RegisterPic('arm1a0');
	pic_armor2 = R_RegisterPic('arm2a0');
}

//==========================================================================
//
//	SB_DrawTallNum
//
//==========================================================================

void SB_DrawTallNum(int x, int y, int num, float alpha, bool perc)
{
	int w;
	int neg;
	picinfo_t info;

	if (perc)
	{
		R_DrawPic2(x, y, pic_percent, alpha);
	}

	R_GetPicInfo(pic_tallnum[0], &info);
	w = info.width;

	neg = num < 0;
	if (neg)
	{
		num = -num;
	}

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic2(x - w, y, pic_tallnum[0], alpha);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic2(x, y, pic_tallnum[num % 10], alpha);
		num /= 10;
	}

	// draw a minus sign if necessary
	if (neg)
	{
		R_DrawPic2(x - 8, y, pic_minus, alpha);
	}
}

//==========================================================================
//
//	SB_DrawSmallNum
//
//==========================================================================

void SB_DrawSmallNum(int x, int y, int num)
{
	int w;
	picinfo_t info;

	if (num < 0)
	{
		num = -num;
	}

	R_GetPicInfo(pic_yellownum[0], &info);
	w = info.width;

	// in the special case of 0, you draw 0
	if (!num)
	{
		R_DrawPic(x - w, y, pic_yellownum[0]);
	}

	// draw the new number
	while (num)
	{
		x -= w;
		R_DrawPic(x, y, pic_yellownum[num % 10]);
		num /= 10;
	}
}

//==========================================================================
//
//	SB_DrawMainBar
//
//==========================================================================

void SB_DrawMainBar()
{
	int i;

	// draw something in the blank spaces
	// check which version of Doom we are playing
#ifdef DOOM2
	R_FillRectWithFlat(0, 448, 640, 32, 'grnrock');
#else
	R_FillRectWithFlat(0, 448, 640, 32, 'floor7_2');
#endif

	if (!cl.MO)
	{
		return;
	}

	//  background
	R_DrawPic(ST_BGX, ST_BGY, pic_bar);

	// ready weapon ammo
	if (cl.ReadyWeapon.Ammo1)
	{
		SB_DrawTallNum(ST_AMMOX, ST_AMMOY, cl.ReadyWeapon.Ammo1.Amount, 1.0, false);
	}

	// health percentage
	SB_DrawTallNum(ST_HEALTHX, ST_HEALTHY, cl.Health, 1.0, true);

	if (ClGame.deathmatch)
	{
		// frags sum
		SB_DrawTallNum(ST_FRAGSX, ST_FRAGSY, cl.Frags, 1.0, false);
	}
	else
	{
		// weapons owned
		R_DrawPic(ST_ARMSBGX, ST_ARMSBGY, pic_arms);
		for (i = 0; i < 6; i++)
		{
			bool HaveWeapon = false;
			Inventory Item;
			for (Item = EntityEx(cl.MO).Inventory; Item; Item = Item.Inventory)
			{
				if (Weapon(Item) && Weapon(Item).Slot == i + 2)
				{
					HaveWeapon = true;
					break;
				}
			}
			if (HaveWeapon)
			{
				R_DrawPic(ST_ARMSX + (i % 3) * ST_ARMSXSPACE,
					ST_ARMSY + (i / 3) * ST_ARMSYSPACE, pic_yellownum[i + 2]);
			}
			else
			{
				R_DrawPic(ST_ARMSX + (i % 3) * ST_ARMSXSPACE,
					ST_ARMSY + (i / 3) * ST_ARMSYSPACE, pic_graynum[i + 2]);
			}
		}
	}

	// faces
	if (ClGame.maxclients > 1)
	{
		R_DrawPic(ST_FACESX, ST_FACESY, pic_faceback);
	}
	R_DrawPic(ST_FACESX, ST_FACESY, pic_faces[cl.sb_faceindex]);

	// armor percentage
	SB_DrawTallNum(ST_ARMORX, ST_ARMORY, cl.ArmorPoints, 1.0, true);

	// keyboxes 0-2
	if (cl.SBFlags & DoomDefs::SBF_BLUE_SKULL)
	{
		R_DrawPic(ST_KEY0X, ST_KEY0Y, pic_keys[3]);
	}
	else if (cl.SBFlags & DoomDefs::SBF_BLUE_CARD)
	{
		R_DrawPic(ST_KEY0X, ST_KEY0Y, pic_keys[0]);
	}

	if (cl.SBFlags & DoomDefs::SBF_YELLOW_SKULL)
	{
		R_DrawPic(ST_KEY1X, ST_KEY1Y, pic_keys[4]);
	}
	else if (cl.SBFlags & DoomDefs::SBF_YELLOW_CARD)
	{
		R_DrawPic(ST_KEY1X, ST_KEY1Y, pic_keys[1]);
	}

	if (cl.SBFlags & DoomDefs::SBF_RED_SKULL)
	{
		R_DrawPic(ST_KEY2X, ST_KEY2Y, pic_keys[5]);
	}
	else if (cl.SBFlags & DoomDefs::SBF_RED_CARD)
	{
		R_DrawPic(ST_KEY2X, ST_KEY2Y, pic_keys[2]);
	}

	// ammo count (all four kinds)
	DrawAmmo(ST_AMMO0X, ST_AMMO0Y, ST_MAXAMMO0X, ST_MAXAMMO0Y, Clip);
	DrawAmmo(ST_AMMO1X, ST_AMMO1Y, ST_MAXAMMO1X, ST_MAXAMMO1Y, Shell);
	DrawAmmo(ST_AMMO2X, ST_AMMO2Y, ST_MAXAMMO2X, ST_MAXAMMO2Y, Cell);
	DrawAmmo(ST_AMMO3X, ST_AMMO3Y, ST_MAXAMMO3X, ST_MAXAMMO3Y, RocketAmmo);
}

//==========================================================================
//
//	DrawAmmo
//
//==========================================================================

void DrawAmmo(int CountX, int CountY, int MaxX, int MaxY,
	class<Inventory> AmmoClass)
{
	Inventory		Item;

	Item = EntityEx(cl.MO).FindInventory(AmmoClass);
	// ammo count
	SB_DrawSmallNum(CountX, CountY, Item ? Item.Amount : 0);
	// max ammo count
	SB_DrawSmallNum(MaxX, MaxY, Item ? Item.MaxAmount :
		AmmoClass.default.MaxAmount);
}

//==========================================================================
//
//	SB_DrawFullscreenStats
//
//==========================================================================

void SB_DrawFullscreenStats()
{
	// health
	SB_DrawTallNum(ST_TDHEALTHX, ST_TDHEALTHY, cl.Health, 0.6, false);
	R_DrawPic(ST_TDHEALTHX - 60, ST_TDHEALTHY + 15, pic_health);

	// armor
	if (cl.ArmorPoints)
	{
		SB_DrawTallNum(ST_TDARMORX, ST_TDARMORY, cl.ArmorPoints, 0.6, false);

		if (cl.ArmorPoints > 100)
		{
			R_DrawPic(ST_TDARMORX - 60, ST_TDARMORY + 15, pic_armor2);
		}
		else
		{
			R_DrawPic(ST_TDARMORX - 60, ST_TDARMORY + 15, pic_armor);
		}
	}

	// ready weapon ammo with icon
	if (cl.ReadyWeapon.Ammo1)
	{
		SB_DrawTallNum(ST_TDAMMOX, ST_TDAMMOY, cl.ReadyWeapon.Ammo1.Amount, 0.6, false);
	}
	if (cl.ReadyWeapon.AmmoType1 == Clip)
	{
		R_DrawPic(ST_TDAMMOX - 60, ST_TDAMMOY + 15, pic_ammoicon[0]);
	}
	else if (cl.ReadyWeapon.AmmoType1 == Shell)
	{
		R_DrawPic(ST_TDAMMOX - 60, ST_TDAMMOY + 15, pic_ammoicon[1]);
	}
	else if (cl.ReadyWeapon.AmmoType1 == Cell)
	{
		R_DrawPic(ST_TDAMMOX - 60, ST_TDAMMOY + 15, pic_ammoicon[2]);
	}
	else if (cl.ReadyWeapon.AmmoType1 == RocketAmmo)
	{
		R_DrawPic(ST_TDAMMOX - 60, ST_TDAMMOY + 15, pic_ammoicon[3]);
	}

	// keys
	if (cl.SBFlags & DoomDefs::SBF_BLUE_SKULL)
	{
		R_DrawPic(460, 470, pic_keys[3]);
	}
	else if (cl.SBFlags & DoomDefs::SBF_BLUE_CARD)
	{
		R_DrawPic(460, 470, pic_keys[0]);
	}

	if (cl.SBFlags & DoomDefs::SBF_YELLOW_SKULL)
	{
		R_DrawPic(440, 470, pic_keys[4]);
	}
	else if (cl.SBFlags & DoomDefs::SBF_YELLOW_CARD)
	{
		R_DrawPic(440, 470, pic_keys[1]);
	}

	if (cl.SBFlags & DoomDefs::SBF_RED_SKULL)
	{
		R_DrawPic(420, 470, pic_keys[5]);
	}
	else if (cl.SBFlags & DoomDefs::SBF_RED_CARD)
	{
		R_DrawPic(420, 470, pic_keys[2]);
	}

	if (ClGame.deathmatch)
	{
		// frags sum
		SB_DrawTallNum(630, 10, cl.Frags, 0.6, false);
	}
}

//==========================================================================
//
//	SB_DrawPause
//
//==========================================================================

void SB_DrawPause()
{
	if (ClGame.bPaused && GetCvar('draw_pause'))
	{
		R_DrawPic(286, 4, pic_pause);
	}
}

//==========================================================================
//
//  SB_Drawer
//
//==========================================================================

void SB_Drawer(int sb_view)
{
	if (sb_view == SB_VIEW_FULLSCREEN)
	{
		SB_DrawFullscreenStats();
	}
	else
	{
		SB_DrawMainBar();
	}
	SB_DrawPause();
}

//==========================================================================
//
//  SB_UpdateWidgets
//
//==========================================================================

void SB_UpdateWidgets()
{
}

//==========================================================================
//
//	VisibilityChanged
//
//==========================================================================

void VisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

defaultproperties
{
	bTickEnabled = true;
	Width = 640;
	Height = 480;
}
