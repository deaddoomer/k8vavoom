//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class IntermissionScreen : Widget;

//	Intermission states
enum
{
	IMS_Stats,
	IMS_NextLoc,
	IMS_NoState,
	IMS_Text,
	IMS_Done
};

ClientGameBase ClGame;

// GLOBAL LOCATIONS
const int WI_SPACINGY	= 33;

const int WI_TITLEY		= 12;

// SINGPLE-PLAYER STUFF
const int SP_STATSX		= 210;
const int SP_STATSY		= 190;

const int SP_TIMEX		= 176;
const int SP_TIMEY		= 308;

const int SP_PARX		= 376;
const int SP_PARY		= 308;

// NET GAME STUFF
const int NG_STATSY		= 210;
const int NG_STATSX		= (172 + 32 / 2);

const int NG_SPACINGX    	= 64;

// DEATHMATCH STUFF
const int DM_MATRIXX		= 202;
const int DM_MATRIXY		= 208;

const int DM_TOTALSX		= 329;
const int DM_DEATHSX		= 429;

const int DM_SPACINGX		= 40;

// in seconds
const float SHOWNEXTLOCDELAY	= 4.0;

//  Different between registered DOOM (1994) and Ultimate DOOM - Final
// edition (retail, 1995?).
const int NUMEPISODES		= 3;
const int NUMMAPS			= 9;

const float TEXTSPEED	= 0.1;
const float TEXTWAIT	= 7.0;

#ifndef DOOM2

struct point_t
{
	int x;
	int y;
};

#endif

int LeaveTitlePic;
int EnterTitlePic;

int interstate;

// used for timing of background animation
float btime;

int sp_state;
int ng_state;
int dm_state;

int				TotalKills;
int				TotalItems;
int				TotalSecret;

int cnt_kills[MAXPLAYERS];
int cnt_items[MAXPLAYERS];
int cnt_secret[MAXPLAYERS];
int cnt_time;
float cnt_pause;
int cnt_frags[MAXPLAYERS];

int dm_Frags[MAXPLAYERS];
int dm_Deaths[MAXPLAYERS];

// Face background, your face, your dead face
int p[MAXPLAYERS];

int star;
int star_width;

int bstar;

// used for general timing
float cnt;

#ifndef DOOM2

int im_episode;
int im_map;
int im_nextepisode;
int im_nextmap;

bool snl_pointeron;

//
// Data needed to add patches to full screen intermission pics.
// Patches are statistics messages, and animations.
// Loads of by-pixel layout and placement, offsets etc.
//

// You Are Here graphic
int yah[2];

// splat
int splat;

point_t lnodes[NUMEPISODES * NUMMAPS];

#endif

IntermissionBackground		Background;

//==========================================================================
//
//  Start
//
//==========================================================================

void Start()
{
#ifndef DOOM2
	// Episode 0 World Map
	SetLN(0, 0, 185, 164);	// location of level 0 (CJ)
	SetLN(0, 1, 148, 143);	// location of level 1 (CJ)
	SetLN(0, 2, 69, 122);	// location of level 2 (CJ)
	SetLN(0, 3, 209, 102);	// location of level 3 (CJ)
	SetLN(0, 4, 116, 89);	// location of level 4 (CJ)
	SetLN(0, 5, 166, 55);	// location of level 5 (CJ)
	SetLN(0, 6, 71, 56);	// location of level 6 (CJ)
	SetLN(0, 7, 135, 29);	// location of level 7 (CJ)
	SetLN(0, 8, 71, 24);	// location of level 8 (CJ)

	// Episode 1 World Map should go here
	SetLN(1, 0, 254, 25);	// location of level 0 (CJ)
	SetLN(1, 1, 97, 50);	// location of level 1 (CJ)
	SetLN(1, 2, 188, 64);	// location of level 2 (CJ)
	SetLN(1, 3, 128, 78);	// location of level 3 (CJ)
	SetLN(1, 4, 214, 92);	// location of level 4 (CJ)
	SetLN(1, 5, 133, 130);	// location of level 5 (CJ)
	SetLN(1, 6, 208, 136);	// location of level 6 (CJ)
	SetLN(1, 7, 148, 140);	// location of level 7 (CJ)
	SetLN(1, 8, 235, 158);	// location of level 8 (CJ)

	// Episode 2 World Map should go here
	SetLN(2, 0, 156, 168);	// location of level 0 (CJ)
	SetLN(2, 1, 48, 154);	// location of level 1 (CJ)
	SetLN(2, 2, 174, 95);	// location of level 2 (CJ)
	SetLN(2, 3, 265, 75);	// location of level 3 (CJ)
	SetLN(2, 4, 130, 48);	// location of level 4 (CJ)
	SetLN(2, 5, 279, 23);	// location of level 5 (CJ)
	SetLN(2, 6, 198, 48);	// location of level 6 (CJ)
	SetLN(2, 7, 140, 25);	// location of level 7 (CJ)
	SetLN(2, 8, 281, 136);	// location of level 8 (CJ)
#endif

	ClGame.skipintermission = false;
	cnt = 0.0;
	btime = 0.0;

	if (!Background)
	{
		Background = NewChild(IntermissionBackground);
		Background.ScaleX = itof(Width) / itof(Background.Width);
		Background.ScaleY = itof(Height) / itof(Background.Height);
	}

#ifndef DOOM2
	FindEpisodeAndMap(ClGame.im->LeaveMap, &im_episode, &im_map);
	FindEpisodeAndMap(ClGame.im->EnterMap, &im_nextepisode, &im_nextmap);
#endif

	IM_InitAnimatedBack();

	TotalKills = ClGame.cl.Level.TotalKills;
	TotalItems = ClGame.cl.Level.TotalItems;
	TotalSecret = ClGame.cl.Level.TotalSecret;

	if (!TotalKills)
		TotalKills = 1;

	if (!TotalItems)
		TotalItems = 1;

	if (!TotalSecret)
		TotalSecret = 1;

	if (ClGame.deathmatch)
		IM_InitDeathmatchStats();
	else if (ClGame.maxclients > 1)
		IM_InitCooperativeStats();
	else
		IM_InitSingleStats();

	if (interstate == IMS_Stats)
	{
		IM_LoadData();

	// intermission music
#ifdef FIXME
#ifdef DOOM2
		S_StartSong("D_DM2INT", P_GetCDIntermissionTrack(), true);
#else
		S_StartSong("D_INTER", P_GetCDIntermissionTrack(), true);
#endif
#else
#ifdef DOOM2
		CmdBuf_AddText("music loop D_DM2INT\n");
#else
		CmdBuf_AddText("music loop D_INTER\n");
#endif
#endif
	}
	else
	{
		IM_InitText();
	}
}

#ifndef DOOM2
//==========================================================================
//
//  SetLN
//
//==========================================================================

void SetLN(int epi, int map, int x, int y)
{
	lnodes[epi * NUMMAPS + map].x = x * 2;
	lnodes[epi * NUMMAPS + map].y = y * 480 / 200;
}

//==========================================================================
//
//  FindEpisodeAndMap
//
//==========================================================================

void FindEpisodeAndMap(name Name, int *epi, int *map)
{
	int e;
	int m;

	for (e = 1; e <= 3; e++)
	{
		for (m = 1; m <= 9; m++)
		{
			if (Name == StrToName(va("e%dm%d", e, m)))
			{
				*epi = e;
				*map = m;
				return;
			}
		}
	}
	*epi = 4;
	*map = 1;
}
#endif

//==========================================================================
//
//	Tick
//
//  Updates stuff each frame
//
//==========================================================================

void Tick(float DeltaTime)
{
	// counter for general background animation
	btime += DeltaTime;

	switch (interstate)
	{
	case IMS_Stats:
		if (ClGame.deathmatch)
			IM_UpdateDeathmatchStats(DeltaTime);
		else if (ClGame.maxclients > 1)
			IM_UpdateCooperativeStats(DeltaTime);
		else
			IM_UpdateSingleStats(DeltaTime);
		break;

#ifndef DOOM2
	case IMS_NextLoc:
		IM_UpdateNextLoc(DeltaTime);
		break;
#endif

	case IMS_NoState:
		IM_UpdateNoState(DeltaTime);
		break;

	case IMS_Text:
		IM_UpdateText(DeltaTime);
		break;

	case IMS_Done:
		break;
	}
}

//==========================================================================
//
//  OnPostDraw
//
//==========================================================================

void OnPostDraw()
{
	SetFont('bigfont');

	switch (interstate)
	{
	case IMS_Stats:
		if (ClGame.deathmatch)
		{
			IM_DrawDeathmatchStats();
		}
		else if (ClGame.maxclients > 1)
		{
			IM_DrawCooperativeStats();
		}
		else
		{
			IM_DrawSingleStats();
		}
		break;

#ifndef DOOM2
	case IMS_NextLoc:
		IM_DrawNextLoc();
		break;
#endif

	case IMS_NoState:
		IM_DrawNoState();
		break;

	case IMS_Text:
		IM_DrawText();
		break;

	case IMS_Done:
		break;
	}
}

//**************************************************************************
//**
//**    Animated background
//**
//**************************************************************************

//==========================================================================
//
//  IM_InitAnimatedBack
//
//==========================================================================

void IM_InitAnimatedBack()
{
#ifdef DOOM2
	Background.Init('interpic', false, ClientGameShared(ClGame));
#else
	if (im_episode > 3)
	{
		Background.Init('interpic', !!interstate, ClientGameShared(ClGame));
	}
	else
	{
		Background.Init(StrToName(va("$in_epi%d", im_episode)), !!interstate,
			ClientGameShared(ClGame));
	}
#endif
}

//==========================================================================
//
//  IM_LoadData
//
//==========================================================================

void IM_LoadData()
{
	picinfo_t info;
	int i;

#ifndef DOOM2
	// you are here
	yah[0] = R_RegisterPic('wiurh0');

	// you are here (alt.)
	yah[1] = R_RegisterPic('wiurh1');

	// splat
	splat = R_RegisterPic('wisplat');
#endif

	if (ClGame.im->LeaveTitlePatch)
	{
		LeaveTitlePic = R_RegisterPic(ClGame.im->LeaveTitlePatch);
	}
	if (ClGame.im->EnterTitlePatch)
	{
		EnterTitlePic = R_RegisterPic(ClGame.im->EnterTitlePatch);
	}

	if (ClGame.maxclients > 1 || ClGame.deathmatch)
	{
		// face backgrounds
//      for (i = 0; i < MAXPLAYERS; i++)
		for (i = 0; i < 4; i++)
		{
			p[i] = R_RegisterPic(StrToName(va("stpb%i", i)));
		}

		// your face
		star = R_RegisterPic('stfst01');
		R_GetPicInfo(star, &info);
		star_width = info.width;

		// dead face
		bstar = R_RegisterPic('stfdead0');
	}
}

//==========================================================================
//
//  IM_UnloadData
//
//==========================================================================

void IM_UnloadData()
{
}

//==========================================================================
//
//  IM_DrawLF
//
//  Draws "<Levelname> Finished!"
//
//==========================================================================

void IM_DrawLF()
{
	picinfo_t info;
	int y = WI_TITLEY;

	// draw <LevelName>
	if (ClGame.im->LeaveTitlePatch)
	{
		R_GetPicInfo(LeaveTitlePic, &info);
		DrawPic(320 - info.width / 2, y, LeaveTitlePic);
		y += info.height + TextHeight("DUMMY") / 4;
	}
	else
	{
		SetTextAlign(hcentre, vtop);
		DrawText(320, y, ClGame.im->LeaveName);
		y += (5 * TextHeight("DUMMY")) / 4;
	}

	// draw "Finished!"
	SetTextAlign(hcentre, vtop);
	DrawText(320, y, "finished");
}

//==========================================================================
//
//  IM_DrawEL
//
//  Draws "Entering <LevelName>"
//
//==========================================================================

void IM_DrawEL()
{
	picinfo_t info;
	int y = WI_TITLEY;

	// draw "Entering"
	SetTextAlign(hcentre, vtop);
	DrawText(320, y, "entering");

	// draw level
	y += (5 * TextHeight("DUMMY")) / 4;
	if (ClGame.im->EnterTitlePatch)
	{
		R_GetPicInfo(EnterTitlePic, &info);
		DrawPic(320 - info.width / 2, y, EnterTitlePic);
	}
	else
	{
		DrawText(320, y, ClGame.im->EnterName);
	}
}

//==========================================================================
//
//  IM_DrawPercent
//
//==========================================================================

void IM_DrawPercent(int x, int y, int p)
{
	if (p < 0)
		return;

	SetTextAlign(hright, vtop);
	DrawText(x, y, va("%d%%", p));
}

//==========================================================================
//
//  IM_DrawTime
//
//  Display level completion time and par, or "sucks" message if overflow.
//
//==========================================================================

void IM_DrawTime(int x, int y, int t, string BaseText, bool sucks)
{
	if (t < 0)
		return;

	SetTextAlign(hleft, vtop);

	string Text;
	if (!sucks || !ClGame.cl.Level.SuckTime || t < ClGame.cl.Level.SuckTime * 60 * 60)
	{
		Text = BaseText;
		if (t >= 60 * 60)
		{
			Text = strcat(Text, va("%d:", t / (60 * 60)));
			if ((t / 60) % 60 < 10)
				Text = strcat(Text, va("0%d", (t / 60) % 60));
			else
				Text = strcat(Text, va("%d", (t / 60) % 60));
		}
		else
			Text = strcat(Text, va("%d", t / 60));
		if (t % 60 < 10)
			Text = strcat(Text, va(":0%d", t % 60));
		else
			Text = strcat(Text, va(":%d", t % 60));
	}
	else
	{
		// "sucks"
		Text = strcat(BaseText, "sucks");
	}
	DrawText(x, y, Text);
}

//==========================================================================
//
//  IM_InitSingleStats
//
//==========================================================================

void IM_InitSingleStats()
{
	interstate = IMS_Stats;
	ClGame.skipintermission = 0;
	sp_state = 1;
	cnt_kills[0] = -1;
	cnt_items[0] = -1;
	cnt_secret[0] = -1;
	cnt_time = -1;
	cnt_pause = 1.0;
	if (ClGame.cl.Level.bNoIntermission)
	{
		interstate = IMS_NoState;
	}
}

//==========================================================================
//
//  IM_DrawSingleStats
//
//==========================================================================

void IM_DrawSingleStats()
{
	// line height
	int lh;

	lh = (3 * TextHeight("DUMMY")) / 2;

	IM_DrawLF();

	SetTextAlign(hleft, vtop);

	DrawText(SP_STATSX, SP_STATSY, "kills");
	DrawText(SP_STATSX, SP_STATSY + lh, "items");
	DrawText(SP_STATSX, SP_STATSY + 2 * lh, "scrt");

	IM_DrawPercent(640 - SP_STATSX, SP_STATSY, cnt_kills[0]);
	IM_DrawPercent(640 - SP_STATSX, SP_STATSY + lh, cnt_items[0]);
	IM_DrawPercent(640 - SP_STATSX, SP_STATSY + 2 * lh, cnt_secret[0]);
	IM_DrawTime(SP_TIMEX, SP_TIMEY, cnt_time, "time: ", true);
	if (cnt_time >= 0 && ClGame.cl.Level.ParTime)
		IM_DrawTime(SP_PARX, SP_PARY, ClGame.cl.Level.ParTime, "par: ", false);
}

//==========================================================================
//
//  IM_UpdateSingleStats
//
//==========================================================================

void IM_UpdateSingleStats(float DeltaTime)
{
	if (ClGame.skipintermission && sp_state != 10)
	{
		ClGame.skipintermission = 0;
		cnt_kills[0] = (ClGame.cl.KillCount * 100) / TotalKills;
		cnt_items[0] = (ClGame.cl.ItemCount * 100) / TotalItems;
		cnt_secret[0] = (ClGame.cl.SecretCount * 100) / TotalSecret;
		cnt_time = ftoi(ClGame.GLevel.LevelInfo.CompletitionTime);
		LocalSound('weapons/rocklx');
		sp_state = 10;
	}

	if (sp_state == 2)
	{
		cnt_kills[0] += 2;

		if (!(ftoi(btime * 35.0) & 3))
			LocalSound('weapons/pistol');

		if (cnt_kills[0] >= (ClGame.cl.KillCount * 100) / TotalKills)
		{
			cnt_kills[0] = (ClGame.cl.KillCount * 100) / TotalKills;
			LocalSound('weapons/rocklx');
			sp_state++;
		}
	}
	else if (sp_state == 4)
	{
		cnt_items[0] += 2;

		if (!(ftoi(btime * 35.0) & 3))
			LocalSound('weapons/pistol');

		if (cnt_items[0] >= (ClGame.cl.ItemCount * 100) / TotalItems)
		{
			cnt_items[0] = (ClGame.cl.ItemCount * 100) / TotalItems;
			LocalSound('weapons/rocklx');
			sp_state++;
		}
	}
	else if (sp_state == 6)
	{
		cnt_secret[0] += 2;

		if (!(ftoi(btime * 35.0) & 3))
			LocalSound('weapons/pistol');

		if (cnt_secret[0] >= (ClGame.cl.SecretCount * 100) / TotalSecret)
		{
			cnt_secret[0] = (ClGame.cl.SecretCount * 100) / TotalSecret;
			LocalSound('weapons/rocklx');
			sp_state++;
		}
	}

	else if (sp_state == 8)
	{
		if (!(ftoi(btime * 35.0) & 3))
			LocalSound('weapons/pistol');

		cnt_time += 3;

		if (cnt_time >= ftoi(ClGame.GLevel.LevelInfo.CompletitionTime))
		{
			cnt_time = ftoi(ClGame.GLevel.LevelInfo.CompletitionTime);
			LocalSound('weapons/rocklx');
			sp_state++;
		}
	}
	else if (sp_state == 10)
	{
		if (ClGame.skipintermission)
		{
			LocalSound('weapons/shotgr');

#ifdef DOOM2
			IM_InitNoState();
#else
			IM_InitNextLoc();
#endif
		}
	}
	else if (sp_state & 1)
	{
		cnt_pause -= DeltaTime;
		if (cnt_pause <= 0.0)
		{
			sp_state++;
			cnt_pause = 1.0;
		}
	}

}

//==========================================================================
//
//  IM_InitCooperativeStats
//
//==========================================================================

void IM_InitCooperativeStats()
{
	int i;

	interstate = IMS_Stats;
	ClGame.skipintermission = 0;
	ng_state = 1;

	cnt_pause = 1.0;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		cnt_kills[i] = 0;
		cnt_items[i] = 0;
		cnt_secret[i] = 0;
		cnt_frags[i] = 0;
	}

	if (ClGame.cl.Level.bNoIntermission)
	{
		interstate = IMS_NoState;
	}
}

//==========================================================================
//
//  IM_DrawCooperativeStats
//
//==========================================================================

void IM_DrawCooperativeStats()
{
	int i;
	int x;
	int y;
	int pwidth;
	picinfo_t info;
	PlayerReplicationInfo RepInfo;

	pwidth = TextWidth("%");

	IM_DrawLF();

	SetTextAlign(hright, vtop);
	// draw stat titles (top line)
	DrawText(NG_STATSX + NG_SPACINGX, NG_STATSY, "kills");

	DrawText(NG_STATSX + 2 * NG_SPACINGX, NG_STATSY, "items");

	DrawText(NG_STATSX + 3 * NG_SPACINGX, NG_STATSY, "scrt");

	DrawText(NG_STATSX + 4 * NG_SPACINGX, NG_STATSY, "frgs");

	// draw stats
	y = NG_STATSY + TextHeight("kills");

	foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
	{
		i = RepInfo.PlayerNum;
		x = NG_STATSX;
		R_GetPicInfo(p[i], &info);
		DrawPic(x - info.width, y, p[i]);

		if (i == ClGame.cl.ClientNum)
			DrawPic(x - info.width, y, star);

		x += NG_SPACINGX;
		IM_DrawPercent(x - pwidth, y + 10, cnt_kills[i]);
		x += NG_SPACINGX;
		IM_DrawPercent(x - pwidth, y + 10, cnt_items[i]);
		x += NG_SPACINGX;
		IM_DrawPercent(x - pwidth, y + 10, cnt_secret[i]);
		x += NG_SPACINGX;

		SetTextAlign(hright, vtop);
		DrawText(x, y + 10, va("%d", cnt_frags[i]));

		y += WI_SPACINGY;
	}
}

//==========================================================================
//
//  IM_UpdateCooperativeStats
//
//==========================================================================

void IM_UpdateCooperativeStats(float DeltaTime)
{
	int fsum;
	PlayerReplicationInfo	RepInfo;

	bool stillticking;

	if (ClGame.skipintermission && ng_state != 10)
	{
		ClGame.skipintermission = 0;

		foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
		{
			cnt_kills[RepInfo.PlayerNum] = (RepInfo.KillCount * 100) / TotalKills;
			cnt_items[RepInfo.PlayerNum] = (RepInfo.ItemCount * 100) / TotalItems;
			cnt_secret[RepInfo.PlayerNum] = (RepInfo.SecretCount * 100) / TotalSecret;
			cnt_frags[RepInfo.PlayerNum] = RepInfo.Frags;
		}
		LocalSound('weapons/rocklx');
		ng_state = 10;
	}

	if (ng_state == 2)
	{
		if (!(ftoi(btime * 35.0) & 3))
			LocalSound('weapons/pistol');

		stillticking = false;

		foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
		{
			cnt_kills[RepInfo.PlayerNum] += 2;

			if (cnt_kills[RepInfo.PlayerNum] >= (RepInfo.KillCount * 100) / TotalKills)
				cnt_kills[RepInfo.PlayerNum] = (RepInfo.KillCount * 100) / TotalKills;
			else
				stillticking = true;
		}

		if (!stillticking)
		{
			LocalSound('weapons/rocklx');
			ng_state++;
		}
	}
	else if (ng_state == 4)
	{
		if (!(ftoi(btime * 35.0) & 3))
			LocalSound('weapons/pistol');

		stillticking = false;

		foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
		{
			cnt_items[RepInfo.PlayerNum] += 2;
			if (cnt_items[RepInfo.PlayerNum] >= (RepInfo.ItemCount * 100) / TotalItems)
				cnt_items[RepInfo.PlayerNum] = (RepInfo.ItemCount * 100) / TotalItems;
			else
				stillticking = true;
		}
		if (!stillticking)
		{
			LocalSound('weapons/rocklx');
			ng_state++;
		}
	}
	else if (ng_state == 6)
	{
		if (!(ftoi(btime * 35.0) & 3))
			LocalSound('weapons/pistol');

		stillticking = false;

		foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
		{
			cnt_secret[RepInfo.PlayerNum] += 2;

			if (cnt_secret[RepInfo.PlayerNum] >= RepInfo.SecretCount * 100 / TotalSecret)
				cnt_secret[RepInfo.PlayerNum] = RepInfo.SecretCount * 100 / TotalSecret;
			else
				stillticking = true;
		}

		if (!stillticking)
		{
			LocalSound('weapons/rocklx');
			ng_state += 1;
		}
	}
	else if (ng_state == 8)
	{
		if (!(ftoi(btime * 35.0) & 3))
			LocalSound('weapons/pistol');

		stillticking = false;

		foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
		{
			cnt_frags[RepInfo.PlayerNum] += 1;

			if (cnt_frags[RepInfo.PlayerNum] >= RepInfo.Frags)
				cnt_frags[RepInfo.PlayerNum] = RepInfo.Frags;
			else
				stillticking = true;
		}

		if (!stillticking)
		{
			LocalSound('*death');
			ng_state++;
		}
	}
	else if (ng_state == 10)
	{
		if (ClGame.skipintermission)
		{
			LocalSound('weapons/shotgr');
#ifdef DOOM2
			IM_InitNoState();
#else
			IM_InitNextLoc();
#endif
		}
	}
	else if (ng_state & 1)
	{
		cnt_pause -= DeltaTime;
		if (cnt_pause <= 0.0)
		{
			ng_state++;
			cnt_pause = 1.0;
		}
	}
}

//==========================================================================
//
//  IM_InitDeathmatchStats
//
//==========================================================================

void IM_InitDeathmatchStats()
{
	int						i;
	int						j;
	PlayerReplicationInfo	RepInfo;

	interstate = IMS_Stats;
	ClGame.skipintermission = 0;
	dm_state = 1;

	cnt_pause = 1.0;

	foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
	{
		i = RepInfo.PlayerNum;
		dm_Frags[i] = 0;
		dm_Deaths[i] = 0;
	}
}

//==========================================================================
//
//  IM_DrawDeathmatchStats
//
//==========================================================================

void IM_DrawDeathmatchStats()
{
	int y;
	picinfo_t info;
	PlayerReplicationInfo RepInfo;

	IM_DrawLF();

	SetTextAlign(hcentre, vtop);
	// draw stat titles (top line)
	DrawText(DM_TOTALSX, DM_MATRIXY - WI_SPACINGY, "FRAGS");
	DrawText(DM_DEATHSX, DM_MATRIXY - WI_SPACINGY, "DEATHS");

	// draw stats
	y = DM_MATRIXY;

	foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
	{
		if (RepInfo.PlayerNum == ClGame.cl.ClientNum)
		{
			R_GetPicInfo(star, &info);
			DrawPic(DM_MATRIXX - info.width - 5, y - 8, star);
		}
		SetTextAlign(hleft, vtop);
		SetFont('smallfont');
		DrawText(DM_MATRIXX, y + 5, RepInfo.PlayerName);
		SetTextAlign(hright, vtop);
		SetFont('bigfont');
		DrawText(DM_TOTALSX, y, va("%d", dm_Frags[RepInfo.PlayerNum]));
		DrawText(DM_DEATHSX, y, va("%d", dm_Deaths[RepInfo.PlayerNum]));
		y += 24;
	}
}

//==========================================================================
//
//  IM_UpdateDeathmatchStats
//
//==========================================================================

void IM_UpdateDeathmatchStats(float DeltaTime)
{
	int i;

	bool stillticking;
	PlayerReplicationInfo	RepInfo;

	if (ClGame.skipintermission && dm_state != 4)
	{
		ClGame.skipintermission = 0;

		foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
		{
			dm_Frags[RepInfo.PlayerNum] = RepInfo.Frags;
			dm_Deaths[RepInfo.PlayerNum] = RepInfo.Deaths;
		}

		LocalSound('weapons/rocklx');
		dm_state = 4;
	}

	if (dm_state == 2)
	{
		if (!(ftoi(btime * 35.0) & 3))
			LocalSound('weapons/pistol');

		stillticking = false;

		foreach ClGame.GLevel.LevelInfo.AllThinkers(PlayerReplicationInfo, RepInfo)
		{
			i = RepInfo.PlayerNum;
			if (dm_Frags[i] != RepInfo.Frags)
			{
				if (RepInfo.Frags < 0)
					dm_Frags[i]--;
				else
					dm_Frags[i]++;

				stillticking = true;
			}
			if (dm_Deaths[i] != RepInfo.Deaths)
			{
				if (RepInfo.Deaths < 0)
					dm_Deaths[i]--;
				else
					dm_Deaths[i]++;

				stillticking = true;
			}
		}
		if (!stillticking)
		{
			LocalSound('weapons/rocklx');
			dm_state++;
		}

	}
	else if (dm_state == 4)
	{
		if (ClGame.skipintermission)
		{
			LocalSound('misc/gibbed');

#ifdef DOOM2
			IM_InitNoState();
#else
			IM_InitNextLoc();
#endif
		}
	}
	else if (dm_state & 1)
	{
		cnt_pause -= DeltaTime;
		if (cnt_pause <= 0.0)
		{
			dm_state++;
			cnt_pause = 1.0;
		}
	}
}

#ifndef DOOM2

//==========================================================================
//
//  IM_InitNextLoc
//
//==========================================================================

void IM_InitNextLoc()
{
	interstate = IMS_NextLoc;
	ClGame.skipintermission = 0;
	cnt = SHOWNEXTLOCDELAY;

	IM_InitAnimatedBack();
}

//==========================================================================
//
//  IM_DrawOnLnode
//
//==========================================================================

void IM_DrawOnLnode(int n, int *c)
{
	int i;
	int left;
	int top;
	int right;
	int bottom;
	bool fits;
	picinfo_t info;

	fits = false;
	i = 0;
	do
	{
		R_GetPicInfo(c[i], &info);
		left = lnodes[(im_episode - 1) * NUMMAPS + n].x - info.xoffset;
		top = lnodes[(im_episode - 1) * NUMMAPS + n].y - info.yoffset;
		right = left + info.width;
		bottom = top + info.height;

		if (left >= 0 && right < 640 && top >= 0 && bottom < 480)
		{
			fits = true;
		}
		else
		{
			i++;
		}
	}
	while (!fits && i != 2);

	if (fits && i < 2)
	{
		DrawPic(lnodes[(im_episode - 1) * NUMMAPS + n].x, lnodes[(im_episode - 1) * NUMMAPS + n].y,
			c[i]);
	}
	else
	{
		// DEBUG
		dprint("Could not place patch on level %d", n + 1);
	}
}

//==========================================================================
//
//  IM_DrawNextLoc
//
//==========================================================================

void IM_DrawNextLoc()
{
	int i;
	int last;

	if (im_episode <= 3)
	{
		last = (im_map == 9) ? im_nextmap - 2 : im_map - 1;

		// draw a splat on taken cities.
		for (i = 0; i <= last; i++)
			IM_DrawOnLnode(i, &splat);

		// splat the secret level?
		if (ClGame.cl.bDidSecret)
			IM_DrawOnLnode(8, &splat);

		// draw flashing ptr
		if (snl_pointeron)
			IM_DrawOnLnode(im_nextmap - 1, &yah[0]);
	}

	// draws which level you are entering..
	IM_DrawEL();
}

//==========================================================================
//
//  IM_UpdateNextLoc
//
//==========================================================================

void IM_UpdateNextLoc(float DeltaTime)
{
	cnt -= DeltaTime;
	if (cnt <= 0.0 || ClGame.skipintermission)
		IM_InitNoState();
	else
		snl_pointeron = (ftoi(32.0 * cnt) & 31) < 20;
}

#endif

//==========================================================================
//
//  IM_InitNoState
//
//==========================================================================

void IM_InitNoState()
{
	interstate = IMS_NoState;
	ClGame.skipintermission = 0;
	cnt = 0.3;
}

//==========================================================================
//
//  IM_DrawNoState
//
//==========================================================================

void IM_DrawNoState()
{
#ifdef DOOM2
	// draws which level you are entering..
	if (ClGame.im->LeaveMap != 'map30')
	{
		IM_DrawEL();
	}
#else
	snl_pointeron = true;
	IM_DrawNextLoc();
#endif
}

//==========================================================================
//
//  IM_UpdateNoState
//
//==========================================================================

void IM_UpdateNoState(float DeltaTime)
{
	cnt -= DeltaTime;
	if (cnt <= 0.0)
	{
		IM_UnloadData();
		IM_InitText();
	}
}

//==========================================================================
//
//
//
//==========================================================================

// specifies current state
float intertime;

float HubCount;
string HubText;

name TextFlat;
int TextPic;

//==========================================================================
//
//  IM_InitText
//
//==========================================================================

void IM_InitText()
{
	if (ClGame.deathmatch || !ClGame.im->Text)
	{
		CmdBuf_AddText("TeleportNewMap\n");
		interstate = IMS_Done;
		return;
	}

	if (ClGame.im->bTextIsLump)
	{
		HubText = LoadTextLump(StrToName(ClGame.im->Text));
	}
	else
	{
		HubText = ClGame.im->Text;
	}
	HubCount = itof(strlen(HubText)) * TEXTSPEED + TEXTWAIT;

	TextFlat = '';
	TextPic = 0;
	if (ClGame.im->TextPic)
	{
		TextPic = R_RegisterPic(ClGame.im->TextPic);
	}
	else if (ClGame.im->TextFlat)
	{
		TextFlat = ClGame.im->TextFlat;
	}

	interstate = IMS_Text;
	intertime = 0.0;

	if (ClGame.im->TextMusic)
	{
		CmdBuf_AddText(va("music loop %n\n", ClGame.im->TextMusic));
	}
	else
	{
#ifdef DOOM2
#ifdef FIXME
		S_StartSong("d_read_m", P_GetCDEnd1Track(), true);
#else
		CmdBuf_AddText("music loop d_read_m\n");
#endif
#else
#ifdef FIXME
		S_StartSong("D_VICTOR", P_GetCDEnd1Track(), true);
#else
		CmdBuf_AddText("music loop D_VICTOR\n");
#endif
#endif
	}
}

//==========================================================================
//
//  IM_DrawText
//
//==========================================================================

void IM_DrawText()
{
	int count;

	// erase the entire screen to a tiled background
	if (TextPic)
	{
		DrawFullScreenPic(TextPic);
	}
	else if (TextFlat)
	{
		FillRectWithFlat(0, 0, 640, 480, TextFlat);
	}
	else
	{
		R_FillRect(0, 0, 640, 480, 0);
	}

	// draw some of the text onto the screen
	count = ftoi((intertime - 0.3) / TEXTSPEED);
	if (count < 0)
		count = 0;
	if (count > strlen(HubText))
		count = strlen(HubText);

	SetFont('smallfont');
	SetTextAlign(hleft, vtop);
	DrawText(170, 150, substr(HubText, 0, count));
}

//==========================================================================
//
//  IM_UpdateText
//
//==========================================================================

void IM_UpdateText(float DeltaTime)
{
	intertime += DeltaTime;
	if (ClGame.skipintermission || intertime > HubCount)
	{
		ClGame.skipintermission = false;
		CmdBuf_AddText("TeleportNewMap\n");
		interstate = IMS_Done;
	}
}

//==========================================================================
//
//	OnVisibilityChanged
//
//==========================================================================

void OnVisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
	if (Background)
	{
		Background.bTickEnabled = bNewVisibility;
	}
}

defaultproperties
{
	bTickEnabled = true;
	Focusable = true;
	Width = 640;
	Height = 480;
}
