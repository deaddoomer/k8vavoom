//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    DOOM and DOOM II progs
//**
//**************************************************************************

#include <macros.vc>

import shared;
import svcommon;

//
// Map things flags
//
enum
{
	MTF_EASY		= 0x0001,	// Skill flags.
	MTF_NORMAL		= 0x0002,
	MTF_HARD		= 0x0004,
	MTF_AMBUSH		= 0x0008,	// Deaf monsters/do not react to sound.
	MTF_DORMANT		= 0x0010,	// The thing is dormant
	MTF_FIGHTER		= 0x0020,	// Thing appearing in player classes
	MTF_CLERIC		= 0x0040,
	MTF_MAGE		= 0x0080,
	MTF_GSINGLE		= 0x0100,	// Appearing in game modes
	MTF_GCOOP		= 0x0200,
	MTF_GDEATHMATCH	= 0x0400
};

// CONSTANTS ---------------------------------------------------------------

enum
{
	FLOOR_SOLID,
	FLOOR_WATER,
	FLOOR_BLOOD,
	FLOOR_NUKAGE,
	FLOOR_SLIME,
	FLOOR_LAVA
};

enum
{
	CONTENTS_EMPTY,
	CONTENTS_WATER,
	CONTENTS_BLOOD,
	CONTENTS_NUKAGE,
	CONTENTS_SLIME,
	CONTENTS_LAVA,

	CONTENTS_SOLID = -1
};

enum
{
	CSHIFT_CONTENTS
};

enum
{
	it_bluecard,
	it_yellowcard,
	it_redcard,
	it_blueskull,
	it_yellowskull,
	it_redskull,

	NUMCARDS
};

// Power up artifacts.
enum
{
	pw_invulnerability,
	pw_strength,
	pw_invisibility,
	pw_ironfeet,
	pw_infrared,
	NUMPOWERS
};

enum
{
	CHAN_AUTO,
	CHAN_VOICE,
	CHAN_WEAPON,
	CHAN_ITEM,
	CHAN_BODY
};

#ifdef DDF
enum
{
	DLITE_None,
	DLITE_Constant,	// lighting is constant (regardless of distance)
	DLITE_Linear,	// lighting is proportional to 1 / distance
	DLITE_Quadratic	// lighting is proportional to 1 / (distance^2)
};

enum
{
	ATK_None,
	ATK_Projectile,
	ATK_Spawner,
	ATK_TripleSpawner,
	ATK_Spreader,
	ATK_RandomSpread,
	ATK_Shot,
	ATK_Tracker,
	ATK_CloseCombat,
	ATK_ShootToSpot,
	ATK_SkullFly,
	ATK_SmartProjectile,
	ATK_Spray,
	NUMATKCLASS
};
#endif

// TYPES -------------------------------------------------------------------

class PolyobjThinker;

#ifdef DDF
struct AttackType
{
	int AttackStyle;
	bool bTraceSmoke;
	bool bKillFailedSpawn;
	bool bPrestepSpawn;
	bool bSpawnTelefrags;
	bool bNeedSight;
	bool bFaceTarget;
	bool bPlayer;
	bool bForceAim;
	bool bAngledSpawn;
	bool bNoTriggerLines;
	name InitSound;
	name Sound;
	float AccuracySlope;
	float AccuracyAngle;
	float XOffset;
	float YOffset;
	float AngleOffset;
	float SlopeOffset;
	float AssaultSpeed;
	float Height;
	float Range;
	int Count;
	int TooClose;
	int Damage;
	int DamageMax;
	int DamageError;
	float DamageDelay;
	int DamageNoArmour;

	// class of the attack.
	int AttackClass;
 
	// object init state.
	name ObjInitState;
  
	float NoTraceChance;
	float KeepFireChance;

	// the MOBJ that is integrated with this attack, or NULL
	classid AtkMobj;

	// spawned object (for spawners). Can be NULL.
	classid SpawnedObj;
  
	// puff object.  Can be NULL.
	classid Puff;
};
#endif

#ifndef	NO_BOTS
class BotPlayer;

enum
{
	bsk_verypoor,
	bsk_poor,
	bsk_low,
	bsk_medium,
	bsk_high,
	bsk_excellent,
	bsk_supreme
};

struct botinfo_t
{
	string Name;		// Bot's name*/
	int accuracy;		// Accuracy with "instant" weapons (this includes "leading")
	int intelect;		// Accuracy with "missile" weapons (rocket launcher, etc.)
	int evade;			// Ability to dodge incoming missiles
	int anticip;		// Ability to anticipate "instant" shots
	int reaction;		// Overall reaction time (lower is "better")
/*	int pisschance;		// Chance the bot will get pissed when his threshold is reached
	int threshold;		// How much it takes to frustrate/piss off the bot
	int dangerlevel;	// When health is below this, we need some health
	int wpfav;			// Favorite weapon
	int chatinfo;		// Bot's chat strings
	int chattime;		// How long it takes us to type a line
	int chatty;			// How talkative the bot is
	char *color;		// Color (in form of a string)
	char *gender;		// Male/female/it :)
	char *skin;			// Skin
	int railcolor;		// Railgun trail color
	bool revealed;		// Hidden bots must be revealed*/
	string userinfo;
};

#endif

#include "game/classes.vc"

#include "game1/classes.vc"

#ifdef DOOM2
#include "game2/classes.vc"

//	Test only with Doom2 because attack functions need Doom2 types.
#include "game/HackedWeapon.vc"
#include "game/HackedActor.vc"
#endif
