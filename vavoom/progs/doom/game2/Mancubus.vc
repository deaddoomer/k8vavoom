//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Mancubus : Pawn
	__mobjinfo__(67)
	__scriptid__(112);

float SpreadAngle;

// Various idle states
int Idle1State;
int Idle2State;
int Idle3State;
int Idle4State;
int Idle5State;

//==========================================================================
//
//	A_IdleDecide
//
//	Decide which idle animation to play.
//
//==========================================================================

void A_IdleDecide()
{
	float R;

	R = Random();
	if (R < 0.1)
	{
		SetState(Idle1State);
	}
	else if (R < 0.2)
	{
		SetState(Idle2State);
	}
	else if (R < 0.3)
	{
		SetState(Idle3State);
	}
	else if (R < 0.4)
	{
		SetState(Idle4State);
	}
	else if (R < 0.5)
	{
		SetState(Idle5State);
	}
	else
	{
		A_Look();
	}
}

//==========================================================================
//
//  A_FatRaise
//
//  Mancubus attack sound.
//
//==========================================================================

void A_FatRaise()
{
	A_FaceTarget();
	PlaySound('fatso/raiseguns', CHAN_WEAPON);
}

//==========================================================================
//
//  A_FatAttack1
//
//  Mancubus attack, firing three missiles (bruisers) in three different
// directions? Doesn't look like it.
//
//==========================================================================

void A_FatAttack1()
{
	Actor A;

	A_FaceTarget();
	// Change direction  to ...
	Angles.yaw = AngleMod360(Angles.yaw + SpreadAngle);
	SpawnMissile(Enemy, MancubusMissile);

	A = SpawnMissile(Enemy, MancubusMissile);
	A.Angles.yaw = AngleMod360(A.Angles.yaw + SpreadAngle);
	VectorRotateAroundZ(&A.Velocity, SpreadAngle);
}

//==========================================================================
//
//  A_FatAttack2
//
//  Mancubus attack, second direction.
//
//==========================================================================

void A_FatAttack2()
{
	Actor A;

	A_FaceTarget();
	// Now here choose opposite deviation.
	Angles.yaw = AngleMod360(Angles.yaw - SpreadAngle);
	SpawnMissile(Enemy, MancubusMissile);

	A = SpawnMissile(Enemy, MancubusMissile);
	A.Angles.yaw = AngleMod360(A.Angles.yaw - SpreadAngle * 2.0);
	VectorRotateAroundZ(&A.Velocity, -SpreadAngle * 2.0);
}

//==========================================================================
//
//  A_FatAttack3
//
//  Mancubus attack, third direction.
//
//==========================================================================

void A_FatAttack3()
{
	Actor A;

	A_FaceTarget();

	A = SpawnMissile(Enemy, MancubusMissile);
	A.Angles.yaw = AngleMod360(A.Angles.yaw - SpreadAngle / 2.0);
	VectorRotateAroundZ(&A.Velocity, -SpreadAngle / 2.0);

	A = SpawnMissile(Enemy, MancubusMissile);
	A.Angles.yaw = AngleMod360(A.Angles.yaw + SpreadAngle / 2.0);
	VectorRotateAroundZ(&A.Velocity, SpreadAngle / 2.0);
}

//==========================================================================
//
//  A_BossDeath
//
//  Possibly trigger special effects if on first boss level
//
//==========================================================================

void A_BossDeath()
{
	int i;
	Mancubus Other;

	if (strcmp(ARR2STR(Level.Game.level->mapname), "MAP07"))
	{
		//  Not a boss level
		return;
	}

	// make sure there is a player alive for victory
	for (i = 0; i < MAXPLAYERS; i++)
		if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
			break;

	if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game

	// scan the remaining thinkers to see if all bosses are dead
	FOREACH(Mancubus, Other)
	{
		if (Other != self && Other.Health > 0)
		{
			// other boss not dead
			return;
		}
	}

	// victory!
	Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0, 0, NULL, 0, none);
}

__states__
{
	// Idle
	S_FATT_STND('FATT', 0, 'monsters/mancubus/base.md2', 0, 15.0 / 35.0, S_FATT_STND2) { A_IdleDecide(); }
	S_FATT_STND2('FATT', 1, 'monsters/mancubus/base.md2', 0, 15.0 / 35.0, S_FATT_STND) { A_Look(); }
	// Idle 1
	S_FATT_IDLE1_1('FATT', 0, 'monsters/mancubus/base.md2', 1, 0.1, S_FATT_IDLE1_2) { A_Look(); }
	S_FATT_IDLE1_2('FATT', 0, 'monsters/mancubus/base.md2', 2, 0.1, S_FATT_IDLE1_3) { }
	S_FATT_IDLE1_3('FATT', 0, 'monsters/mancubus/base.md2', 3, 0.1, S_FATT_IDLE1_4) { }
	S_FATT_IDLE1_4('FATT', 0, 'monsters/mancubus/base.md2', 4, 0.1, S_FATT_IDLE1_5) { }
	S_FATT_IDLE1_5('FATT', 0, 'monsters/mancubus/base.md2', 5, 0.1, S_FATT_IDLE1_6) { }
	S_FATT_IDLE1_6('FATT', 1, 'monsters/mancubus/base.md2', 6, 0.1, S_FATT_IDLE1_7) { A_Look(); }
	S_FATT_IDLE1_7('FATT', 1, 'monsters/mancubus/base.md2', 7, 0.1, S_FATT_IDLE1_8) { }
	S_FATT_IDLE1_8('FATT', 1, 'monsters/mancubus/base.md2', 8, 0.1, S_FATT_IDLE1_9) { }
	S_FATT_IDLE1_9('FATT', 1, 'monsters/mancubus/base.md2', 9, 0.1, S_FATT_IDLE1_10) { }
	S_FATT_IDLE1_10('FATT', 1, 'monsters/mancubus/base.md2', 10, 0.1, S_FATT_IDLE1_11) { }
	S_FATT_IDLE1_11('FATT', 0, 'monsters/mancubus/base.md2', 11, 0.1, S_FATT_IDLE1_12) { A_Look(); }
	S_FATT_IDLE1_12('FATT', 0, 'monsters/mancubus/base.md2', 12, 0.1, S_FATT_IDLE1_13) { }
	S_FATT_IDLE1_13('FATT', 0, 'monsters/mancubus/base.md2', 13, 0.1, S_FATT_IDLE1_14) { }
	S_FATT_IDLE1_14('FATT', 0, 'monsters/mancubus/base.md2', 14, 0.1, S_FATT_IDLE1_15) { }
	S_FATT_IDLE1_15('FATT', 0, 'monsters/mancubus/base.md2', 15, 0.1, S_FATT_IDLE1_16) { }
	S_FATT_IDLE1_16('FATT', 1, 'monsters/mancubus/base.md2', 16, 0.1, S_FATT_IDLE1_17) { A_Look(); }
	S_FATT_IDLE1_17('FATT', 1, 'monsters/mancubus/base.md2', 17, 0.1, S_FATT_IDLE1_18) { }
	S_FATT_IDLE1_18('FATT', 1, 'monsters/mancubus/base.md2', 18, 0.1, S_FATT_IDLE1_19) { }
	S_FATT_IDLE1_19('FATT', 1, 'monsters/mancubus/base.md2', 19, 0.1, S_FATT_IDLE1_20) { }
	S_FATT_IDLE1_20('FATT', 1, 'monsters/mancubus/base.md2', 20, 0.1, S_FATT_STND) { }
	// Idle 2
	S_FATT_IDLE2_1('FATT', 0, 'monsters/mancubus/base.md2', 21, 0.1, S_FATT_IDLE2_2) { A_Look(); }
	S_FATT_IDLE2_2('FATT', 0, 'monsters/mancubus/base.md2', 22, 0.1, S_FATT_IDLE2_3) { }
	S_FATT_IDLE2_3('FATT', 0, 'monsters/mancubus/base.md2', 23, 0.1, S_FATT_IDLE2_4) { }
	S_FATT_IDLE2_4('FATT', 0, 'monsters/mancubus/base.md2', 24, 0.1, S_FATT_IDLE2_5) { }
	S_FATT_IDLE2_5('FATT', 0, 'monsters/mancubus/base.md2', 25, 0.1, S_FATT_IDLE2_6) { }
	S_FATT_IDLE2_6('FATT', 1, 'monsters/mancubus/base.md2', 26, 0.1, S_FATT_IDLE2_7) { A_Look(); }
	S_FATT_IDLE2_7('FATT', 1, 'monsters/mancubus/base.md2', 27, 0.1, S_FATT_IDLE2_8) { }
	S_FATT_IDLE2_8('FATT', 1, 'monsters/mancubus/base.md2', 28, 0.1, S_FATT_IDLE2_9) { }
	S_FATT_IDLE2_9('FATT', 1, 'monsters/mancubus/base.md2', 29, 0.1, S_FATT_IDLE2_10) { }
	S_FATT_IDLE2_10('FATT', 1, 'monsters/mancubus/base.md2', 30, 0.1, S_FATT_IDLE2_11) { }
	S_FATT_IDLE2_11('FATT', 0, 'monsters/mancubus/base.md2', 31, 0.1, S_FATT_IDLE2_12) { A_Look(); }
	S_FATT_IDLE2_12('FATT', 0, 'monsters/mancubus/base.md2', 32, 0.1, S_FATT_IDLE2_13) { }
	S_FATT_IDLE2_13('FATT', 0, 'monsters/mancubus/base.md2', 33, 0.1, S_FATT_IDLE2_14) { }
	S_FATT_IDLE2_14('FATT', 0, 'monsters/mancubus/base.md2', 34, 0.1, S_FATT_IDLE2_15) { }
	S_FATT_IDLE2_15('FATT', 0, 'monsters/mancubus/base.md2', 35, 0.1, S_FATT_IDLE2_16) { }
	S_FATT_IDLE2_16('FATT', 1, 'monsters/mancubus/base.md2', 36, 0.1, S_FATT_IDLE2_17) { A_Look(); }
	S_FATT_IDLE2_17('FATT', 1, 'monsters/mancubus/base.md2', 37, 0.1, S_FATT_IDLE2_18) { }
	S_FATT_IDLE2_18('FATT', 1, 'monsters/mancubus/base.md2', 38, 0.1, S_FATT_IDLE2_19) { }
	S_FATT_IDLE2_19('FATT', 1, 'monsters/mancubus/base.md2', 39, 0.1, S_FATT_IDLE2_20) { }
	S_FATT_IDLE2_20('FATT', 1, 'monsters/mancubus/base.md2', 40, 0.1, S_FATT_STND) { }
	// Idle 3
	S_FATT_IDLE3_1('FATT', 0, 'monsters/mancubus/base.md2', 41, 0.1, S_FATT_IDLE3_2) { A_Look(); }
	S_FATT_IDLE3_2('FATT', 0, 'monsters/mancubus/base.md2', 42, 0.1, S_FATT_IDLE3_3) { }
	S_FATT_IDLE3_3('FATT', 0, 'monsters/mancubus/base.md2', 43, 0.1, S_FATT_IDLE3_4) { }
	S_FATT_IDLE3_4('FATT', 0, 'monsters/mancubus/base.md2', 44, 0.1, S_FATT_IDLE3_5) { }
	S_FATT_IDLE3_5('FATT', 0, 'monsters/mancubus/base.md2', 45, 0.1, S_FATT_IDLE3_6) { }
	S_FATT_IDLE3_6('FATT', 1, 'monsters/mancubus/base.md2', 46, 0.1, S_FATT_IDLE3_7) { A_Look(); }
	S_FATT_IDLE3_7('FATT', 1, 'monsters/mancubus/base.md2', 47, 0.1, S_FATT_IDLE3_8) { }
	S_FATT_IDLE3_8('FATT', 1, 'monsters/mancubus/base.md2', 48, 0.1, S_FATT_IDLE3_9) { }
	S_FATT_IDLE3_9('FATT', 1, 'monsters/mancubus/base.md2', 49, 0.1, S_FATT_IDLE3_10) { }
	S_FATT_IDLE3_10('FATT', 1, 'monsters/mancubus/base.md2', 50, 0.1, S_FATT_IDLE3_11) { }
	S_FATT_IDLE3_11('FATT', 0, 'monsters/mancubus/base.md2', 51, 0.1, S_FATT_IDLE3_12) { A_Look(); }
	S_FATT_IDLE3_12('FATT', 0, 'monsters/mancubus/base.md2', 52, 0.1, S_FATT_IDLE3_13) { }
	S_FATT_IDLE3_13('FATT', 0, 'monsters/mancubus/base.md2', 53, 0.1, S_FATT_IDLE3_14) { }
	S_FATT_IDLE3_14('FATT', 0, 'monsters/mancubus/base.md2', 54, 0.1, S_FATT_IDLE3_15) { }
	S_FATT_IDLE3_15('FATT', 0, 'monsters/mancubus/base.md2', 55, 0.1, S_FATT_IDLE3_16) { }
	S_FATT_IDLE3_16('FATT', 1, 'monsters/mancubus/base.md2', 56, 0.1, S_FATT_IDLE3_17) { A_Look(); }
	S_FATT_IDLE3_17('FATT', 1, 'monsters/mancubus/base.md2', 57, 0.1, S_FATT_IDLE3_18) { }
	S_FATT_IDLE3_18('FATT', 1, 'monsters/mancubus/base.md2', 58, 0.1, S_FATT_IDLE3_19) { }
	S_FATT_IDLE3_19('FATT', 1, 'monsters/mancubus/base.md2', 59, 0.1, S_FATT_IDLE3_20) { }
	S_FATT_IDLE3_20('FATT', 1, 'monsters/mancubus/base.md2', 60, 0.1, S_FATT_STND) { }
	// Idle 4
	S_FATT_IDLE4_1('FATT', 0, 'monsters/mancubus/base.md2', 61, 0.1, S_FATT_IDLE4_2) { A_Look(); }
	S_FATT_IDLE4_2('FATT', 0, 'monsters/mancubus/base.md2', 62, 0.1, S_FATT_IDLE4_3) { }
	S_FATT_IDLE4_3('FATT', 0, 'monsters/mancubus/base.md2', 63, 0.1, S_FATT_IDLE4_4) { }
	S_FATT_IDLE4_4('FATT', 0, 'monsters/mancubus/base.md2', 64, 0.1, S_FATT_IDLE4_5) { }
	S_FATT_IDLE4_5('FATT', 0, 'monsters/mancubus/base.md2', 65, 0.1, S_FATT_IDLE4_6) { }
	S_FATT_IDLE4_6('FATT', 1, 'monsters/mancubus/base.md2', 66, 0.1, S_FATT_IDLE4_7) { A_Look(); }
	S_FATT_IDLE4_7('FATT', 1, 'monsters/mancubus/base.md2', 67, 0.1, S_FATT_IDLE4_8) { }
	S_FATT_IDLE4_8('FATT', 1, 'monsters/mancubus/base.md2', 68, 0.1, S_FATT_IDLE4_9) { }
	S_FATT_IDLE4_9('FATT', 1, 'monsters/mancubus/base.md2', 69, 0.1, S_FATT_IDLE4_10) { }
	S_FATT_IDLE4_10('FATT', 1, 'monsters/mancubus/base.md2', 70, 0.1, S_FATT_IDLE4_11) { }
	S_FATT_IDLE4_11('FATT', 0, 'monsters/mancubus/base.md2', 71, 0.1, S_FATT_IDLE4_12) { A_Look(); }
	S_FATT_IDLE4_12('FATT', 0, 'monsters/mancubus/base.md2', 72, 0.1, S_FATT_IDLE4_13) { }
	S_FATT_IDLE4_13('FATT', 0, 'monsters/mancubus/base.md2', 73, 0.1, S_FATT_IDLE4_14) { }
	S_FATT_IDLE4_14('FATT', 0, 'monsters/mancubus/base.md2', 74, 0.1, S_FATT_IDLE4_15) { }
	S_FATT_IDLE4_15('FATT', 0, 'monsters/mancubus/base.md2', 75, 0.1, S_FATT_IDLE4_16) { }
	S_FATT_IDLE4_16('FATT', 1, 'monsters/mancubus/base.md2', 76, 0.1, S_FATT_IDLE4_17) { A_Look(); }
	S_FATT_IDLE4_17('FATT', 1, 'monsters/mancubus/base.md2', 77, 0.1, S_FATT_IDLE4_18) { }
	S_FATT_IDLE4_18('FATT', 1, 'monsters/mancubus/base.md2', 78, 0.1, S_FATT_IDLE4_19) { }
	S_FATT_IDLE4_19('FATT', 1, 'monsters/mancubus/base.md2', 79, 0.1, S_FATT_IDLE4_20) { }
	S_FATT_IDLE4_20('FATT', 1, 'monsters/mancubus/base.md2', 80, 0.1, S_FATT_STND) { }
	// Idle 5
	S_FATT_IDLE5_1('FATT', 0, 'monsters/mancubus/base.md2', 81, 0.1, S_FATT_IDLE5_2) { A_Look(); }
	S_FATT_IDLE5_2('FATT', 0, 'monsters/mancubus/base.md2', 82, 0.1, S_FATT_IDLE5_3) { }
	S_FATT_IDLE5_3('FATT', 0, 'monsters/mancubus/base.md2', 83, 0.1, S_FATT_IDLE5_4) { }
	S_FATT_IDLE5_4('FATT', 0, 'monsters/mancubus/base.md2', 84, 0.1, S_FATT_IDLE5_5) { }
	S_FATT_IDLE5_5('FATT', 0, 'monsters/mancubus/base.md2', 85, 0.1, S_FATT_IDLE5_6) { }
	S_FATT_IDLE5_6('FATT', 1, 'monsters/mancubus/base.md2', 86, 0.1, S_FATT_IDLE5_7) { A_Look(); }
	S_FATT_IDLE5_7('FATT', 1, 'monsters/mancubus/base.md2', 87, 0.1, S_FATT_IDLE5_8) { }
	S_FATT_IDLE5_8('FATT', 1, 'monsters/mancubus/base.md2', 88, 0.1, S_FATT_IDLE5_9) { }
	S_FATT_IDLE5_9('FATT', 1, 'monsters/mancubus/base.md2', 89, 0.1, S_FATT_IDLE5_10) { }
	S_FATT_IDLE5_10('FATT', 1, 'monsters/mancubus/base.md2', 90, 0.1, S_FATT_IDLE5_11) { }
	S_FATT_IDLE5_11('FATT', 0, 'monsters/mancubus/base.md2', 91, 0.1, S_FATT_IDLE5_12) { A_Look(); }
	S_FATT_IDLE5_12('FATT', 0, 'monsters/mancubus/base.md2', 92, 0.1, S_FATT_IDLE5_13) { }
	S_FATT_IDLE5_13('FATT', 0, 'monsters/mancubus/base.md2', 93, 0.1, S_FATT_IDLE5_14) { }
	S_FATT_IDLE5_14('FATT', 0, 'monsters/mancubus/base.md2', 94, 0.1, S_FATT_IDLE5_15) { }
	S_FATT_IDLE5_15('FATT', 0, 'monsters/mancubus/base.md2', 95, 0.1, S_FATT_IDLE5_16) { }
	S_FATT_IDLE5_16('FATT', 1, 'monsters/mancubus/base.md2', 96, 0.1, S_FATT_IDLE5_17) { A_Look(); }
	S_FATT_IDLE5_17('FATT', 1, 'monsters/mancubus/base.md2', 97, 0.1, S_FATT_IDLE5_18) { }
	S_FATT_IDLE5_18('FATT', 1, 'monsters/mancubus/base.md2', 98, 0.1, S_FATT_IDLE5_19) { }
	S_FATT_IDLE5_19('FATT', 1, 'monsters/mancubus/base.md2', 99, 0.1, S_FATT_IDLE5_20) { }
	S_FATT_IDLE5_20('FATT', 1, 'monsters/mancubus/base.md2', 100, 0.1, S_FATT_STND) { }
	// Runing
	S_FATT_RUN1('FATT', 0, 'monsters/mancubus/base.md2', 101, 4.0 / 35.0, S_FATT_RUN2) { A_Chase(); }
	S_FATT_RUN2('FATT', 0, 'monsters/mancubus/base.md2', 102, 4.0 / 35.0, S_FATT_RUN3) { A_Chase(); }
	S_FATT_RUN3('FATT', 1, 'monsters/mancubus/base.md2', 103, 4.0 / 35.0, S_FATT_RUN4) { A_Chase(); }
	S_FATT_RUN4('FATT', 1, 'monsters/mancubus/base.md2', 107, 4.0 / 35.0, S_FATT_RUN5) { A_Chase(); }
	S_FATT_RUN5('FATT', 2, 'monsters/mancubus/base.md2', 105, 4.0 / 35.0, S_FATT_RUN6) { A_Chase(); }
	S_FATT_RUN6('FATT', 2, 'monsters/mancubus/base.md2', 106, 4.0 / 35.0, S_FATT_RUN7) { A_Chase(); }
	S_FATT_RUN7('FATT', 3, 'monsters/mancubus/base.md2', 107, 4.0 / 35.0, S_FATT_RUN8) { A_Chase(); }
	S_FATT_RUN8('FATT', 3, 'monsters/mancubus/base.md2', 108, 4.0 / 35.0, S_FATT_RUN9) { A_Chase(); }
	S_FATT_RUN9('FATT', 4, 'monsters/mancubus/base.md2', 109, 4.0 / 35.0, S_FATT_RUN10) { A_Chase(); }
	S_FATT_RUN10('FATT', 4, 'monsters/mancubus/base.md2', 110, 4.0 / 35.0, S_FATT_RUN11) { A_Chase(); }
	S_FATT_RUN11('FATT', 5, 'monsters/mancubus/base.md2', 111, 4.0 / 35.0, S_FATT_RUN12) { A_Chase(); }
	S_FATT_RUN12('FATT', 5, 'monsters/mancubus/base.md2', 112, 4.0 / 35.0, S_FATT_RUN1) { A_Chase(); }
	// Attack
	S_FATT_ATK1('FATT', 6, 'monsters/mancubus/base.md2', 113, 4.0 / 35.0, S_FATT_ATK2) { A_FatRaise(); }
	S_FATT_ATK2('FATT', 6, 'monsters/mancubus/base.md2', 114, 4.0 / 35.0, S_FATT_ATK3) { }
	S_FATT_ATK3('FATT', 6, 'monsters/mancubus/base.md2', 115, 4.0 / 35.0, S_FATT_ATK4) { }
	S_FATT_ATK4('FATT', 6, 'monsters/mancubus/base.md2', 116, 4.0 / 35.0, S_FATT_ATK5) { }
	S_FATT_ATK5('FATT', 6, 'monsters/mancubus/base.md2', 117, 4.0 / 35.0, S_FATT_ATK6) { }
	S_FATT_ATK6('FATT', 7 | FF_FULLBRIGHT, 'monsters/mancubus/base.md2', 118, 5.0 / 35.0, S_FATT_ATK7) { A_FatAttack1(); }
	S_FATT_ATK7('FATT', 7 | FF_FULLBRIGHT, 'monsters/mancubus/base.md2', 119, 5.0 / 35.0, S_FATT_ATK8) { }
	S_FATT_ATK8('FATT', 8, 'monsters/mancubus/base.md2', 120, 5.0 / 35.0, S_FATT_ATK9) { A_FaceTarget(); }
	S_FATT_ATK9('FATT', 6, 'monsters/mancubus/base.md2', 117, 5.0 / 35.0, S_FATT_ATK10) { A_FaceTarget(); }
	S_FATT_ATK10('FATT', 7 | FF_FULLBRIGHT, 'monsters/mancubus/base.md2', 118, 5.0 / 35.0, S_FATT_ATK11) { A_FatAttack2(); }
	S_FATT_ATK11('FATT', 7 | FF_FULLBRIGHT, 'monsters/mancubus/base.md2', 119, 5.0 / 35.0, S_FATT_ATK12) { }
	S_FATT_ATK12('FATT', 8, 'monsters/mancubus/base.md2', 120, 5.0 / 35.0, S_FATT_ATK13) { A_FaceTarget(); }
	S_FATT_ATK13('FATT', 6, 'monsters/mancubus/base.md2', 117, 5.0 / 35.0, S_FATT_ATK14) { A_FaceTarget(); }
	S_FATT_ATK14('FATT', 7 | FF_FULLBRIGHT, 'monsters/mancubus/base.md2', 118, 5.0 / 35.0, S_FATT_ATK15) { A_FatAttack3(); }
	S_FATT_ATK15('FATT', 7 | FF_FULLBRIGHT, 'monsters/mancubus/base.md2', 119, 5.0 / 35.0, S_FATT_ATK16) { }
	S_FATT_ATK16('FATT', 8, 'monsters/mancubus/base.md2', 120, 5.0 / 35.0, S_FATT_ATK17) { A_FaceTarget(); }
	S_FATT_ATK17('FATT', 6, 'monsters/mancubus/base.md2', 117, 5.0 / 35.0, S_FATT_RUN1) { A_FaceTarget(); }
	// Pain, only one model frame for now
	S_FATT_PAIN('FATT', 9, 'monsters/mancubus/base.md2', 121, 3.0 / 35.0, S_FATT_PAIN2) { }
	S_FATT_PAIN2('FATT', 9, 'monsters/mancubus/base.md2', 121, 3.0 / 35.0, S_FATT_RUN1) { A_Pain(); }
	// Death
	S_FATT_DIE1('FATT', 10, 'monsters/mancubus/death1.md2', 0, 3.0 / 35.0, S_FATT_DIE2) { }
	S_FATT_DIE2('FATT', 10, 'monsters/mancubus/death1.md2', 1, 3.0 / 35.0, S_FATT_DIE3) { }
	S_FATT_DIE3('FATT', 11, 'monsters/mancubus/death1.md2', 2, 3.0 / 35.0, S_FATT_DIE4) { A_Scream(); }
	S_FATT_DIE4('FATT', 11, 'monsters/mancubus/death1.md2', 3, 3.0 / 35.0, S_FATT_DIE5) { }
	S_FATT_DIE5('FATT', 12, 'monsters/mancubus/death1.md2', 4, 3.0 / 35.0, S_FATT_DIE6) { A_Fall(); }
	S_FATT_DIE6('FATT', 12, 'monsters/mancubus/death2.md2', 0, 3.0 / 35.0, S_FATT_DIE7) { }
	S_FATT_DIE7('FATT', 13, 'monsters/mancubus/death2.md2', 1, 6.0 / 35.0, S_FATT_DIE8) { }
	S_FATT_DIE8('FATT', 14, 'monsters/mancubus/death3.md2', 0, 6.0 / 35.0, S_FATT_DIE9) { }
	S_FATT_DIE9('FATT', 15, 'monsters/mancubus/death4.md2', 0, 6.0 / 35.0, S_FATT_DIE10) { }
	S_FATT_DIE10('FATT', 16, 'monsters/mancubus/death4.md2', 1, 3.0 / 35.0, S_FATT_DIE11) { }
	S_FATT_DIE11('FATT', 16, 'monsters/mancubus/death4.md2', 2, 3.0 / 35.0, S_FATT_DIE12) { }
	S_FATT_DIE12('FATT', 17, 'monsters/mancubus/death4.md2', 3, 6.0 / 35.0, S_FATT_DIE13) { }
	S_FATT_DIE13('FATT', 18, 'monsters/mancubus/death5.md2', 0, 6.0 / 35.0, S_FATT_DIE14) { }
	S_FATT_DIE14('FATT', 19, 'monsters/mancubus/death5.md2', 1, -1.0, S_NULL) { A_BossDeath(); }
	// Resurected by Arch-vile
	S_FATT_RAISE1('FATT', 17, 'monsters/mancubus/death4.md2', 3, 5.0 / 35.0, S_FATT_RAISE2) { }
	S_FATT_RAISE2('FATT', 16, 'monsters/mancubus/death4.md2', 2, 2.5 / 35.0, S_FATT_RAISE3) { }
	S_FATT_RAISE3('FATT', 16, 'monsters/mancubus/death4.md2', 1, 2.5 / 35.0, S_FATT_RAISE4) { }
	S_FATT_RAISE4('FATT', 15, 'monsters/mancubus/death4.md2', 0, 5.0 / 35.0, S_FATT_RAISE5) { }
	S_FATT_RAISE5('FATT', 14, 'monsters/mancubus/death3.md2', 0, 5.0 / 35.0, S_FATT_RAISE6) { }
	S_FATT_RAISE6('FATT', 13, 'monsters/mancubus/death2.md2', 1, 5.0 / 35.0, S_FATT_RAISE7) { }
	S_FATT_RAISE7('FATT', 12, 'monsters/mancubus/death2.md2', 0, 2.5/ 35.0, S_FATT_RAISE8) { }
	S_FATT_RAISE8('FATT', 12, 'monsters/mancubus/death1.md2', 4, 2.5/ 35.0, S_FATT_RAISE9) { }
	S_FATT_RAISE9('FATT', 11, 'monsters/mancubus/death1.md2', 3, 2.5 / 35.0, S_FATT_RAISE10) { }
	S_FATT_RAISE10('FATT', 11, 'monsters/mancubus/death1.md2', 2, 2.5 / 35.0, S_FATT_RAISE11) { }
	S_FATT_RAISE11('FATT', 10, 'monsters/mancubus/death1.md2', 1, 2.5 / 35.0, S_FATT_RAISE12) { }
	S_FATT_RAISE12('FATT', 10, 'monsters/mancubus/death1.md2', 0, 2.5 / 35.0, S_FATT_RUN1) { }
}

defaultproperties
{
	Health = 600;
	Radius = 48.0;
	Height = 64.0;
	Mass = 1000.0;
	StepSpeed = 8.0;
	PainChance = 0.3125;
	SpreadAngle = 90.0 / 8.0;
	IdleState = S_FATT_STND;
	Idle1State = S_FATT_IDLE1_1;
	Idle2State = S_FATT_IDLE2_1;
	Idle3State = S_FATT_IDLE3_1;
	Idle4State = S_FATT_IDLE4_1;
	Idle5State = S_FATT_IDLE5_1;
	SeeState = S_FATT_RUN1;
	MissileState = S_FATT_ATK1;
	PainState = S_FATT_PAIN;
	DeathState = S_FATT_DIE1;
	RaiseState = S_FATT_RAISE1;
	SightSound = 'fatso/sight';
	ActiveSound = 'fatso/active';
	PainSound = 'fatso/pain';
	DeathSound = 'fatso/death';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2006/02/15 23:32:36  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.6  2005/12/27 22:22:27  dj_jl
//  Created level info class, moved action special handling to it.
//
//  Revision 1.5  2005/11/17 23:05:22  dj_jl
//  Renamed sounds.
//
//  Revision 1.4  2005/03/01 14:39:31  dj_jl
//  Big update of line specials.
//
//  Revision 1.3  2003/11/12 16:48:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.2  2003/07/11 16:47:38  dj_jl
//  Made array of players with pointers
//
//  Revision 1.1  2002/10/26 16:32:20  dj_jl
//  New style of defining classes.
//
//**************************************************************************
