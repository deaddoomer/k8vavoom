//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Archvile : Actor
	__mobjinfo__(64)
	__scriptid__(111);

//==========================================================================
//
//  A_VileChase
//
//  Arch-vile check for ressurecting a body.
//
//==========================================================================

final void A_VileChase()
{
	float viletryx;
	float viletryy;
	Entity Other;

	if (MoveDir != DI_NODIR)
	{
		// check for corpses to raise
		viletryx = Origin.x + StepSpeed * MainGameInfo(Level.Game).xspeed[MoveDir];
		viletryy = Origin.y + StepSpeed * MainGameInfo(Level.Game).yspeed[MoveDir];

		//	For all things in radius check whether object is a corpse
		// that can be raised.
		foreach RadiusThings(Other, vector(viletryx, viletryy, 0.0), MAXRADIUS)
		{
			//  Detect a corpse that could be raised.
			float maxdist;
			bool check;

			if (!Other.bCorpse)
				continue;	// not a monster

			if (Other.StateTime != -1.0)
				continue;	// not lying still yet

			if (!EntityEx(Other).RaiseState)
				continue;	// monster doesn't have a raise state

			maxdist = Other.Radius + Radius;

			if (fabs(Other.Origin.x - viletryx) > maxdist ||
				fabs(Other.Origin.y - viletryy) > maxdist)
				continue;	// not actually touching

			if (!CanSee(Other))
				continue;	//  Con't see, possibly in other region

			EntityEx CorpseHit = EntityEx(Other);
			CorpseHit.Velocity.x = 0.0;
			CorpseHit.Velocity.y = 0.0;
			float OldHeight = CorpseHit.Height;
			bool OldSolid = CorpseHit.bSolid;
			CorpseHit.bSolid = true;
			CorpseHit.Height = CorpseHit.default.Height;
			check = CorpseHit.CheckPosition(CorpseHit.Origin);
			CorpseHit.bSolid = OldSolid;
			CorpseHit.Height = OldHeight;

			if (!check)
				continue;	// doesn't fit here

			// got one!
			EntityEx temp = Target;
			Target = CorpseHit;
			A_FaceTarget();
			Target = temp;

			SetState(FindClassState(Archvile, 'Heal'));
			CorpseHit.PlaySound('vile/raise', CHAN_BODY);

			CorpseHit.SetState(CorpseHit.RaiseState);
			CorpseHit.Height = CorpseHit.default.Height;
			CorpseHit.bShootable = true;
			CorpseHit.bFloat = CorpseHit.default.bFloat;
			CorpseHit.bNoGravity = CorpseHit.default.bNoGravity;
			CorpseHit.bDropOff = false;
			CorpseHit.bSolid = true;
			CorpseHit.bCorpse = false;
			CorpseHit.Health = CorpseHit.default.Health;
			CorpseHit.Target = none;
			return;
		}
	}


	// Return to normal attack.
	A_Chase();
}

//==========================================================================
//
//  A_VileStart
//
//  Arch-vile attack start sound.
//
//==========================================================================

final void A_VileStart()
{
	PlaySound('vile/start', CHAN_WEAPON);
}

//==========================================================================
//
//  A_VileTarget
//
//  Spawn the hellfire.
//
//==========================================================================

final void A_VileTarget()
{
	Actor fog;

	if (!Target)
		return;

	A_FaceTarget();

	fog = Spawn(ArchvileFire, Target.Origin);

	Tracer = fog;
	fog.Target = self;
	fog.Tracer = Target;
	fog.SetState(fog.IdleState);
}

//==========================================================================
//
//  A_VileAttack
//
//  Arch-vile attack.
//
//==========================================================================

final void A_VileAttack()
{
	EntityEx fire;

	if (!Target)
		return;

	A_FaceTarget();

	if (!CanSee(Target))
		return;

	PlaySound('vile/stop', CHAN_WEAPON);
	Target.Damage(self, self, 20);
	Target.Velocity.z = 1000.0 / Target.Mass * 35.0;

	fire = Tracer;

	if (!fire)
		return;

	// move the fire between the vile and the player
	fire.Origin.x = Target.Origin.x - 24.0 * cos(Angles.yaw);
	fire.Origin.y = Target.Origin.y - 24.0 * sin(Angles.yaw);
	Actor(fire).RadiusAttack(self, 70, 70.0, true);
}

states
{
Spawn:
	VILE AB 10 A_Look
	Loop
See:
	VILE AABBCCDDEEFF 2 A_VileChase
	Loop
Missile:
	VILE G 0 Bright A_VileStart
	VILE G 10 Bright A_FaceTarget
	VILE H 8 Bright A_VileTarget
	VILE IJKLMN 8 Bright A_FaceTarget
	VILE O 8 Bright A_VileAttack
	VILE P 20 Bright
	Goto See
Heal:
	VILE "[\\]" 10 Bright
	Goto See
Pain:
	VILE Q 5
	VILE Q 5 A_Pain
	Goto See
Death:
	VILE Q 7
	VILE R 7 A_Scream
	VILE S 7 A_Fall
	VILE TUVW 7
	VILE XY 5
	VILE Z -1
	Stop
}

defaultproperties
{
	Health = 700;
	Radius = 20.0;
	Height = 56.0;
	Mass = 500.0;
	StepSpeed = 15.0;
	PainChance = 0.0390625;
	MissileMaxRange = 14.0 * 64.0;
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivateMCross = true;
	bActivatePushWall = true;
	bNoGrudge = true;
	bNeverTarget = true;
	bFloorClip = true;
	SightSound = 'vile/sight';
	ActiveSound = 'vile/active';
	PainSound = 'vile/pain';
	DeathSound = 'vile/death';
}
