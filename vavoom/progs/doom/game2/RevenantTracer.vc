//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class RevenantTracer : Actor
	__scriptid__(53);

//==========================================================================
//
//  A_Tracer
//
//  Ravenant missile tracer.
//
//==========================================================================

const float TRACEADJUST = 0.2865921825;

final void A_Tracer()
{
	Actor A;
	TVec wishdir;
	TVec currdir;
	TVec delta;
	float adjustlen;

	if (XLevel.TicTime & 3)
		return;

	// spawn a puff of smoke behind the rocket      
	SpawnPuff(Origin, MISSILERANGE, BulletPuff, false);

	A = Spawn(RevenantTracerSmoke, Origin - Velocity * Level.Game.frametime);

	A.Velocity.z = 1.0 * 35.0;
	A.StateTime -= Random() * 0.1;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;

	// adjust direction
	if (!Tracer || Tracer.Health <= 0)
		return;

	wishdir = Normalise(Tracer.GetCentre() - Origin);
	currdir = Normalise(Velocity);
	delta = wishdir - currdir;
	adjustlen = Length(delta);
	if (adjustlen > TRACEADJUST)
		adjustlen = TRACEADJUST;
	wishdir = currdir + delta * adjustlen;
	Velocity = wishdir * Speed;
	VectorAngles(&wishdir, &Angles);
}

__states__
{
	S_TRACER('FATB', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_TRACER2) = A_Tracer
	S_TRACER2('FATB', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_TRACER) = A_Tracer
	S_TRACEEXP1('FBXP', 0 | FF_FULLBRIGHT, 8.0 / 35.0, S_TRACEEXP2) = none
	S_TRACEEXP2('FBXP', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_TRACEEXP3) = none
	S_TRACEEXP3('FBXP', 2 | FF_FULLBRIGHT, 4.0 / 35.0, none) = none
}

defaultproperties
{
	Radius = 11.0;
	Height = 8.0;
	Speed = 350.0;
	MissileDamage = 10;
	Alpha = 0.666;
	bMissile = true;
	bNoBlockmap = true;
	bNoGravity = true;
	bDropOff = true;
	bActivatePCross = true;
	bNoTeleport = true;
	bRandomise = true;
	IdleState = S_TRACER;
	DeathState = S_TRACEEXP1;
	SightSound = 'skeleton/attack';
	DeathSound = 'skeleton/tracex';
	Effects = EF_DL_RED;
}
