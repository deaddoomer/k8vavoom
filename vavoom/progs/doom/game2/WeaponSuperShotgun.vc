//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponSuperShotgun : Weapon;

//===========================================================================
//
//  A_FireShotgun2
//
//===========================================================================

void A_FireShotgun2()
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	Player.MO.PlaySound('weapons/sshotf', CHAN_WEAPON);
	Player.MO.SetState(Actor(Player.MO).MissileState);

	Player(Player).Ammo[Ammo] -= 2;

	Player(Player).SetPsprite(ps_flash, FlashState);

	aimDir = Actor(Player.MO).Aim(16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		Actor(Player.MO).LineAttack(dir, Actor::MISSILERANGE, damage);
	}
	Player.MO.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_OpenShotgun2
//
//===========================================================================

void A_OpenShotgun2()
{
	Player.MO.PlaySound('weapons/sshoto', CHAN_WEAPON);
}

//===========================================================================
//
//  A_LoadShotgun2
//
//===========================================================================

void A_LoadShotgun2()
{
	Player.MO.PlaySound('weapons/sshotl', CHAN_WEAPON);
}

//===========================================================================
//
//  A_CloseShotgun2
//
//===========================================================================

void A_CloseShotgun2()
{
	Player.MO.PlaySound('weapons/sshotc', CHAN_WEAPON);
	A_ReFire();
}

__states__
{
	S_DSGUN('SHT2', 0, 'weapons/v_super.md2', 0, 1.0 / 35.0, S_DSGUN) { A_WeaponReady(); }
	S_DSGUNDOWN('SHT2', 0, 'weapons/v_super.md2', 1, 1.0 / 35.0, S_DSGUNDOWN) { A_Lower(); }
	S_DSGUNUP('SHT2', 0, 'weapons/v_super.md2', 2, 1.0 / 35.0, S_DSGUNUP) { A_Raise(); }
	S_DSGUN1('SHT2', 0, 'weapons/v_super.md2', 3, 3.0 / 35.0, S_DSGUN2) { }
	S_DSGUN2('SHT2', 0, 'weapons/v_super.md2', 4, 7.0 / 35.0, S_DSGUN3) { A_FireShotgun2(); }
	S_DSGUN3('SHT2', 1, 'weapons/v_super.md2', 5, 7.0 / 35.0, S_DSGUN4) { }
	S_DSGUN4('SHT2', 2, 'weapons/v_super.md2', 6, 7.0 / 35.0, S_DSGUN5) { A_CheckReload(); }
	S_DSGUN5('SHT2', 3, 'weapons/v_super.md2', 7, 7.0 / 35.0, S_DSGUN6) { A_OpenShotgun2(); }
	S_DSGUN6('SHT2', 4, 'weapons/v_super.md2', 8, 7.0 / 35.0, S_DSGUN7) { }
	S_DSGUN7('SHT2', 5, 'weapons/v_super.md2', 9, 7.0 / 35.0, S_DSGUN8) { A_LoadShotgun2(); }
	S_DSGUN8('SHT2', 6, 'weapons/v_super.md2', 10, 6.0 / 35.0, S_DSGUN9) { }
	S_DSGUN9('SHT2', 7, 'weapons/v_super.md2', 11, 6.0 / 35.0, S_DSGUN10) { A_CloseShotgun2(); }
	S_DSGUN10('SHT2', 0, 'weapons/v_super.md2', 12, 5.0 / 35.0, S_DSGUN) { A_ReFire(); }
	S_DSNR1('SHT2', 1, 7.0 / 35.0, S_DSNR2) { }
	S_DSNR2('SHT2', 0, 3.0 / 35.0, S_DSGUNDOWN) { }
	S_DSGUNFLASH1('SHT2', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_DSGUNFLASH2) { A_Light1(); }
	S_DSGUNFLASH2('SHT2', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
}

defaultproperties
{
	Ammo = DoomDefs::am_shell;
	UpState = S_DSGUNUP;
	DownState = S_DSGUNDOWN;
	ReadyState = S_DSGUN;
	AttackState = S_DSGUN1;
	FlashState = S_DSGUNFLASH1;
	ThirdPersonModel = 'weapons/g_super.md2';
}
