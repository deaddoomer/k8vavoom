//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SuperShotgun : DoomWeapon
	__mobjinfo__(82)
	__scriptid__(33);

//===========================================================================
//
//  A_FireShotgun2
//
//===========================================================================

final void A_FireShotgun2()
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	PlaySound('weapons/sshotf', CHAN_WEAPON);
	SetState(MeleeState);

	if (Wpn)
	{
		if (!Wpn.DepleteAmmo(, 2))
		{
			return;
		}

		Player.SetViewState(ps_flash, Wpn.FindState('Flash'));
	}

	Aim(aimDir, 16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		LineAttack(dir, MISSILERANGE, damage, BulletPuff);
	}
	bMuzzleFlash = true;
	DLightColour = RGB(195, 79, 0);
	DLightRadius = 118.0;
}

//===========================================================================
//
//  A_OpenShotgun2
//
//===========================================================================

final void A_OpenShotgun2()
{
	PlaySound('weapons/sshoto', CHAN_WEAPON);
}

//===========================================================================
//
//  A_LoadShotgun2
//
//===========================================================================

final void A_LoadShotgun2()
{
	PlaySound('weapons/sshotl', CHAN_WEAPON);
}

//===========================================================================
//
//  A_CloseShotgun2
//
//===========================================================================

final void A_CloseShotgun2()
{
	PlaySound('weapons/sshotc', CHAN_WEAPON);
	A_ReFire();
}

states
{
Ready:
	SHT2 A 1 A_WeaponReady
	Loop
Deselect:
	SHT2 A 1 A_Lower
	Loop
Select:
	SHT2 A 1 A_Raise
	Loop
Fire:
	SHT2 A 3
	SHT2 A 7 A_FireShotgun2
	SHT2 B 7
	SHT2 C 7 A_CheckReload
	SHT2 D 7 A_OpenShotgun2
	SHT2 E 7
	SHT2 F 7 A_LoadShotgun2
	SHT2 G 6
	SHT2 H 6 A_CloseShotgun2
	SHT2 A 5 A_ReFire
	Goto Ready
Unused:
	SHT2 B 7
	SHT2 A 3
	Goto Deselect
Flash:
	SHT2 I 5 Bright A_Light1
	SHT2 J 4 Bright A_Light2
	Goto Super::LightDone
Spawn:
	SGN2 A -1
	Stop
}

defaultproperties
{
	Slot = 3;
	SelectionOrder = 400;
	AmmoType1 = Shell;
	AmmoUse1 = 2;
	AmmoGive1 = 8;
	PlayerModelVersion = 9;
	PickupMessage = "$gotshotgun2";
	BotCombatDist = 128.0;
	Obituary = "$ob_mpsshotgun";
}
