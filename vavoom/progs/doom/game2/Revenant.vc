//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Revenant : Actor
	__mobjinfo__(66)
	__scriptid__(20);

//==========================================================================
//
//  A_SkelWhosh
//
//  Ravenant attack sound.
//
//==========================================================================

final void A_SkelWhoosh()
{
	if (!Target)
		return;
	A_FaceTarget();
	PlaySound('skeleton/swing', CHAN_WEAPON);
}

//==========================================================================
//
//  A_SkelFist
//
//  Ravenant close attack.
//
//==========================================================================

final void A_SkelFist()
{
	int damage;

	if (!Target)
		return;

	A_FaceTarget();

	if (CheckMeleeRange())
	{
		damage = ((P_Random() % 10) + 1) * 6;
		PlaySound('skeleton/melee', CHAN_WEAPON);
		Target.Damage(self, self, damage);
	}
}

//==========================================================================
//
//  A_SkelMissile
//
//  Ravenant far attack.
//
//==========================================================================

final void A_SkelMissile()
{
	Actor A;

	if (!Target)
		return;

	A_FaceTarget();
	Origin.z += 16.0;	// so missile spawns higher
	A = SpawnMissile(Target, RevenantTracer);
	Origin.z -= 16.0;	// back to normal

	A.Origin = A.Origin + A.Velocity * 0.03;
	A.Tracer = Target;
	A.bSeekerMissile = true;
}

__states__
{
	S_SKEL_STND('SKEL', 0, 10.0 / 35.0, S_SKEL_STND2) = A_Look
	S_SKEL_STND2('SKEL', 1, 10.0 / 35.0, S_SKEL_STND) = A_Look
	S_SKEL_RUN1('SKEL', 0, 2.0 / 35.0, S_SKEL_RUN2) = A_Chase
	S_SKEL_RUN2('SKEL', 0, 2.0 / 35.0, S_SKEL_RUN3) = A_Chase
	S_SKEL_RUN3('SKEL', 1, 2.0 / 35.0, S_SKEL_RUN4) = A_Chase
	S_SKEL_RUN4('SKEL', 1, 2.0 / 35.0, S_SKEL_RUN5) = A_Chase
	S_SKEL_RUN5('SKEL', 2, 2.0 / 35.0, S_SKEL_RUN6) = A_Chase
	S_SKEL_RUN6('SKEL', 2, 2.0 / 35.0, S_SKEL_RUN7) = A_Chase
	S_SKEL_RUN7('SKEL', 3, 2.0 / 35.0, S_SKEL_RUN8) = A_Chase
	S_SKEL_RUN8('SKEL', 3, 2.0 / 35.0, S_SKEL_RUN9) = A_Chase
	S_SKEL_RUN9('SKEL', 4, 2.0 / 35.0, S_SKEL_RUN10) = A_Chase
	S_SKEL_RUN10('SKEL', 4, 2.0 / 35.0, S_SKEL_RUN11) = A_Chase
	S_SKEL_RUN11('SKEL', 5, 2.0 / 35.0, S_SKEL_RUN12) = A_Chase
	S_SKEL_RUN12('SKEL', 5, 2.0 / 35.0, S_SKEL_RUN1) = A_Chase
	S_SKEL_FIST1('SKEL', 6, 0.0 / 35.0, S_SKEL_FIST2) = A_FaceTarget
	S_SKEL_FIST2('SKEL', 6, 6.0 / 35.0, S_SKEL_FIST3) = A_SkelWhoosh
	S_SKEL_FIST3('SKEL', 7, 6.0 / 35.0, S_SKEL_FIST4) = A_FaceTarget
	S_SKEL_FIST4('SKEL', 8, 6.0 / 35.0, S_SKEL_RUN1) = A_SkelFist
	S_SKEL_MISS1('SKEL', 9 | FF_FULLBRIGHT, 0.0 / 35.0, S_SKEL_MISS2) = A_FaceTarget
	S_SKEL_MISS2('SKEL', 9 | FF_FULLBRIGHT, 10.0 / 35.0, S_SKEL_MISS3) = A_FaceTarget
	S_SKEL_MISS3('SKEL', 10, 10.0 / 35.0, S_SKEL_MISS4) = A_SkelMissile
	S_SKEL_MISS4('SKEL', 10, 10.0 / 35.0, S_SKEL_RUN1) = A_FaceTarget
	S_SKEL_PAIN('SKEL', 11, 5.0 / 35.0, S_SKEL_PAIN2) = none
	S_SKEL_PAIN2('SKEL', 11, 5.0 / 35.0, S_SKEL_RUN1) = A_Pain
	S_SKEL_DIE1('SKEL', 11, 7.0 / 35.0, S_SKEL_DIE2) = none
	S_SKEL_DIE2('SKEL', 12, 7.0 / 35.0, S_SKEL_DIE3) = none
	S_SKEL_DIE3('SKEL', 13, 7.0 / 35.0, S_SKEL_DIE4) = A_Scream
	S_SKEL_DIE4('SKEL', 14, 7.0 / 35.0, S_SKEL_DIE5) = A_Fall
	S_SKEL_DIE5('SKEL', 15, 7.0 / 35.0, S_SKEL_DIE6) = none
	S_SKEL_DIE6('SKEL', 16, -1.0, none) = none
	S_SKEL_RAISE1('SKEL', 16, 5.0 / 35.0, S_SKEL_RAISE2) = none
	S_SKEL_RAISE2('SKEL', 15, 5.0 / 35.0, S_SKEL_RAISE3) = none
	S_SKEL_RAISE3('SKEL', 14, 5.0 / 35.0, S_SKEL_RAISE4) = none
	S_SKEL_RAISE4('SKEL', 13, 5.0 / 35.0, S_SKEL_RAISE5) = none
	S_SKEL_RAISE5('SKEL', 12, 5.0 / 35.0, S_SKEL_RAISE6) = none
	S_SKEL_RAISE6('SKEL', 11, 5.0 / 35.0, S_SKEL_RUN1) = none
}

defaultproperties
{
	Health = 300;
	Radius = 20.0;
	Height = 56.0;
	Mass = 500.0;
	StepSpeed = 10.0;
	PainChance = 0.390625;
	MissileMinRange = 196.0;
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivateMCross = true;
	bActivatePushWall = true;
	bTriggerHappy = true;
	bFloorClip = true;
	IdleState = S_SKEL_STND;
	SeeState = S_SKEL_RUN1;
	MeleeState = S_SKEL_FIST1;
	MissileState = S_SKEL_MISS1;
	PainState = S_SKEL_PAIN;
	DeathState = S_SKEL_DIE1;
	RaiseState = S_SKEL_RAISE1;
	SightSound = 'skeleton/sight';
	ActiveSound = 'skeleton/active';
	PainSound = 'skeleton/pain';
	DeathSound = 'skeleton/death';
}
