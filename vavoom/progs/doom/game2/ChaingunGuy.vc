//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ChaingunGuy : Pawn
	__mobjinfo__(65)
	__scriptid__(2);

name FireSound;

//==========================================================================
//
//  A_CPosAttack
//
//  Heavy weapon dude attack.
//
//==========================================================================

void A_CPosAttack()
{
	int damage;
	TVec dir;

	if (!Enemy)
		return;

	PlaySound(FireSound, CHAN_WEAPON);
	A_FaceTarget();
	dir = AimLineAttack(Angles, MISSILERANGE);
	VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
	damage = ((P_Random() % 5) + 1) * 3;
	LineAttack(dir, MISSILERANGE, damage);

	Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//==========================================================================
//
//  A_CPosRefire
//
//  Heavy weapon dude refire.
//
//==========================================================================

void A_CPosRefire()
{
	// keep firing unless target got out of sight
	A_FaceTarget();

	if (P_Random() < 40)
		return;

	if (!Enemy || Enemy.Health <= 0 || !CanSee(Enemy))
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff()
{
	Actor A;

	A = Spawn(ItemWeaponChaingun, Origin + vector(0.0, 0.0, Height / 2.0));
	A.Velocity.x = (Random() - Random()) * 35.0;
	A.Velocity.y = (Random() - Random()) * 35.0;
	A.Velocity.z = (5.0 + Random() * 4.0) * 35.0;
	A.bDropped = true;	// special versions of items
}

__states__
{
	S_CPOS_STND('CPOS', 0, 'monsters/chainguy/base.md2', 0, 10.0 / 35.0, S_CPOS_STND2) { A_Look(); }
	S_CPOS_STND2('CPOS', 1, 'monsters/chainguy/base.md2', 1, 10.0 / 35.0, S_CPOS_STND) { A_Look(); }
	S_CPOS_RUN1('CPOS', 0, 'monsters/chainguy/base.md2', 2, 3.0 / 35.0, S_CPOS_RUN2) { A_Chase(); }
	S_CPOS_RUN2('CPOS', 0, 'monsters/chainguy/base.md2', 3, 3.0 / 35.0, S_CPOS_RUN3) { A_Chase(); }
	S_CPOS_RUN3('CPOS', 1, 'monsters/chainguy/base.md2', 4, 3.0 / 35.0, S_CPOS_RUN4) { A_Chase(); }
	S_CPOS_RUN4('CPOS', 1, 'monsters/chainguy/base.md2', 5, 3.0 / 35.0, S_CPOS_RUN5) { A_Chase(); }
	S_CPOS_RUN5('CPOS', 2, 'monsters/chainguy/base.md2', 6, 3.0 / 35.0, S_CPOS_RUN6) { A_Chase(); }
	S_CPOS_RUN6('CPOS', 2, 'monsters/chainguy/base.md2', 7, 3.0 / 35.0, S_CPOS_RUN7) { A_Chase(); }
	S_CPOS_RUN7('CPOS', 3, 'monsters/chainguy/base.md2', 8, 3.0 / 35.0, S_CPOS_RUN8) { A_Chase(); }
	S_CPOS_RUN8('CPOS', 3, 'monsters/chainguy/base.md2', 9, 3.0 / 35.0, S_CPOS_RUN1) { A_Chase(); }
	S_CPOS_ATK1('CPOS', 4, 'monsters/chainguy/base.md2', 10, 10.0 / 35.0, S_CPOS_ATK2) { A_FaceTarget(); }
	S_CPOS_ATK2('CPOS', 5 | FF_FULLBRIGHT, 'monsters/chainguy/base.md2', 11, 4.0 / 35.0, S_CPOS_ATK3) { A_CPosAttack(); }
	S_CPOS_ATK3('CPOS', 4 | FF_FULLBRIGHT, 'monsters/chainguy/base.md2', 12, 4.0 / 35.0, S_CPOS_ATK4) { A_CPosAttack(); }
	S_CPOS_ATK4('CPOS', 5, 'monsters/chainguy/base.md2', 13, 1.0 / 35.0, S_CPOS_ATK2) { A_CPosRefire(); }
	S_CPOS_PAIN('CPOS', 6, 'monsters/chainguy/base.md2', 14, 3.0 / 35.0, S_CPOS_PAIN2) { }
	S_CPOS_PAIN2('CPOS', 6, 'monsters/chainguy/base.md2', 15, 3.0 / 35.0, S_CPOS_RUN1) { A_Pain(); }
	S_CPOS_DIE1('CPOS', 7, 'monsters/chainguy/death.md2', 0, 5.0 / 35.0, S_CPOS_DIE2) { }
	S_CPOS_DIE2('CPOS', 8, 'monsters/chainguy/death.md2', 1, 5.0 / 35.0, S_CPOS_DIE3) { A_Scream(); }
	S_CPOS_DIE3('CPOS', 9, 'monsters/chainguy/death.md2', 2, 5.0 / 35.0, S_CPOS_DIE4) { A_Fall(); }
	S_CPOS_DIE4('CPOS', 10, 'monsters/chainguy/death.md2', 3, 5.0 / 35.0, S_CPOS_DIE5) { }
	S_CPOS_DIE5('CPOS', 11, 'monsters/chainguy/death.md2', 4, 5.0 / 35.0, S_CPOS_DIE6) { }
	S_CPOS_DIE6('CPOS', 12, 'monsters/chainguy/death.md2', 5, 5.0 / 35.0, S_CPOS_DIE7) { }
	S_CPOS_DIE7('CPOS', 13, 'monsters/chainguy/death.md2', 6, -1.0, none) { }
	S_CPOS_XDIE1('CPOS', 14, 'monsters/chainguy/gibs.md2', 0, 5.0 / 35.0, S_CPOS_XDIE2) { }
	S_CPOS_XDIE2('CPOS', 15, 'monsters/chainguy/gibs.md2', 1, 5.0 / 35.0, S_CPOS_XDIE3) { A_XScream(); }
	S_CPOS_XDIE3('CPOS', 16, 'monsters/chainguy/gibs.md2', 2, 5.0 / 35.0, S_CPOS_XDIE4) { A_Fall(); }
	S_CPOS_XDIE4('CPOS', 17, 'monsters/chainguy/gibs.md2', 3, 5.0 / 35.0, S_CPOS_XDIE5) { }
	S_CPOS_XDIE5('CPOS', 18, 'monsters/chainguy/gibs.md2', 4, 5.0 / 35.0, S_CPOS_XDIE6) { }
	S_CPOS_XDIE6('CPOS', 19, 'monsters/chainguy/gibs.md2', 5, -1.0, none) { }
	S_CPOS_RAISE1('CPOS', 13, 'monsters/chainguy/death.md2', 7, 5.0 / 35.0, S_CPOS_RAISE2) { }
	S_CPOS_RAISE2('CPOS', 12, 'monsters/chainguy/death.md2', 8, 5.0 / 35.0, S_CPOS_RAISE3) { }
	S_CPOS_RAISE3('CPOS', 11, 'monsters/chainguy/death.md2', 9, 5.0 / 35.0, S_CPOS_RAISE4) { }
	S_CPOS_RAISE4('CPOS', 10, 'monsters/chainguy/death.md2', 10, 5.0 / 35.0, S_CPOS_RAISE5) { }
	S_CPOS_RAISE5('CPOS', 9, 'monsters/chainguy/death.md2', 11, 5.0 / 35.0, S_CPOS_RAISE6) { }
	S_CPOS_RAISE6('CPOS', 8, 'monsters/chainguy/death.md2', 12, 5.0 / 35.0, S_CPOS_RAISE7) { }
	S_CPOS_RAISE7('CPOS', 7, 'monsters/chainguy/death.md2', 13, 5.0 / 35.0, S_CPOS_RUN1) { }
}

defaultproperties
{
	Health = 70;
	GibsHealth = -70;
	Radius = 20.0;
	Height = 56.0;
	Mass = 100.0;
	StepSpeed = 8.0;
	PainChance = 0.6640625;
	IdleState = S_CPOS_STND;
	SeeState = S_CPOS_RUN1;
	MissileState = S_CPOS_ATK1;
	PainState = S_CPOS_PAIN;
	DeathState = S_CPOS_DIE1;
	GibsDeathState = S_CPOS_XDIE1;
	RaiseState = S_CPOS_RAISE1;
	SightSound = 'chainguy/sight';
	ActiveSound = 'chainguy/active';
	PainSound = 'chainguy/pain';
	DeathSound = 'chainguy/death';
	FireSound = 'chainguy/attack';
}

//**************************************************************************
//
//  $Log: ChaingunGuy.vc,v $
//  Revision 1.6  2006/03/12 19:55:13  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.5  2006/02/17 19:06:52  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.4  2006/02/15 23:32:36  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.3  2005/12/11 21:31:39  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.2  2005/11/17 23:05:22  dj_jl
//  Renamed sounds.
//
//  Revision 1.1  2002/10/26 16:32:20  dj_jl
//  New style of defining classes.
//
//**************************************************************************
