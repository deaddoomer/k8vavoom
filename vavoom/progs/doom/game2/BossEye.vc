//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class BossEye : Actor
	__mobjinfo__(89);

//==========================================================================
//
//  A_BrainAwake
//
//  Init boss spawner.
//
//==========================================================================

final void A_BrainAwake()
{
	//	Do just a sound, like in Boom.
	PlaySound('brain/sight', CHAN_VOICE, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_BrainSpit
//
//  Spawn a cube.
//
//==========================================================================

final void A_BrainSpit()
{
	BrainState		BState;
	EntityEx		targ;
	EntityEx		A;
	float			Frac;

	//	Find brain state object, create it if not found.
	BState = none;
	foreach AllThinkers(BrainState, BState)
	{
		break;
	}
	if (!BState)
	{
		BState = Spawn(BrainState);
		BState.FindTargets();
	}

	if (!BState.Targets.Num)
	{
		//	No brain targets placed on a map.
		return;
	}

	BState.bEasy = !BState.bEasy;
	if (Level.Game.gameskill <= sk_easy && !BState.bEasy)
	{
		return;
	}

	// shoot a cube at current target
	targ = BState.Targets[BState.TargetOn];
	BState.TargetOn = (BState.TargetOn + 1) % BState.Targets.Num;

	// spawn brain missile
	A = SpawnMissile(targ, SpawnShot);
	if (A)
	{
		A.Target = targ;
		//	Prevent division by 0
		if (!A.Velocity.x && !A.Velocity.y)
		{
			Frac = 0.0;
		}
		else if (fabs(A.Velocity.x) > fabs(A.Velocity.y))
		{
			Frac = (targ.Origin.x - Origin.x) / A.Velocity.x;
		}
		else
		{
			Frac = (targ.Origin.y - Origin.y) / A.Velocity.y;
		}
		A.ReactionCount = ftoi(Frac / GetStateDuration(A.State));
	}

	PlaySound('brain/spit', CHAN_WEAPON, 1.0, ATTN_NONE);
}

states
{
Spawn:
	SSWV A 10 A_Look
	Loop
See:
	SSWV A 181 A_BrainAwake
	SSWV A 150 A_BrainSpit
	Wait
}

defaultproperties
{
	Height = 32.0;
	bNoSector = true;
	bNoBlockmap = true;
}
