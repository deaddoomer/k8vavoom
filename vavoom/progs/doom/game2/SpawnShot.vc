//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SpawnShot : Actor;

//==========================================================================
//
//  A_SpawnFly
//
//  Cube flying, spawn monster, when finished.
//
//==========================================================================

final void A_SpawnFly()
{
	Actor newmobj;
	Actor fog;
	int r;
	class<Actor> type;

	if (--ReactionCount)
		return;	// still flying

	// First spawn teleport fog.
	fog = Spawn(SpawnFire, Target.Origin, vector(0.0, 0.0, 0.0));
	fog.PlaySound('brain/spawn', CHAN_VOICE);

	// Randomly select monster to spawn.
	r = P_Random();

	// Probability distribution (kind of :),
	// decreasing likelihood.
	if (r < 50)
		type = Imp;
	else if (r < 90)
		type = Demon;
	else if (r < 120)
		type = Shadows;
	else if (r < 130)
		type = PainElemental;
	else if (r < 160)
		type = Cacodemon;
	else if (r < 162)
		type = ArchVile;
	else if (r < 172)
		type = Revenant;
	else if (r < 192)
		type = Arachnotron;
	else if (r < 222)
		type = Mancubus;
	else if (r < 246)
		type = HellKnight;
	else
		type = BaronOfHell;

	newmobj = Spawn(type, Target.Origin, vector(0.0, 0.0, 0.0));
	if (newmobj.LookForPlayers(true))
		newmobj.SetState(newmobj.SeeState);

	// telefrag anything in this spot
	newmobj.bTelestomp = true;
	newmobj.TeleportMove(newmobj.Origin);

	// remove self (i.e., cube).
	Destroy();
}

//==========================================================================
//
//  A_SpawnSound
//
//  Travelling cube sound.
//
//==========================================================================

final void A_SpawnSound()
{
	PlaySound('brain/cube', CHAN_VOICE);
	A_SpawnFly();
}

__states__
{
	S_SPAWN1('BOSF', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPAWN2) = A_SpawnSound
	S_SPAWN2('BOSF', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPAWN3) = A_SpawnFly
	S_SPAWN3('BOSF', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPAWN4) = A_SpawnFly
	S_SPAWN4('BOSF', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPAWN1) = A_SpawnFly
}

defaultproperties
{
	Radius = 6.0;
	Height = 32.0;
	Speed = 350.0;
	MissileDamage = 3;
	bMissile = true;
	bNoBlockmap = true;
	bNoGravity = true;
	bDropOff = true;
	bActivatePCross = true;
	bNoTeleport = true;
	bColideWithThings = false;
	bColideWithWorld = false;
	IdleState = S_SPAWN1;
	SightSound = 'brain/spit';
	DeathSound = 'brain/cubeboom';
}
