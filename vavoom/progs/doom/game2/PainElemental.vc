//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PainElemental : ScriptedEntity
	game(GAME_Doom)
	__mobjinfo__(71)
	__scriptid__(115);

//==========================================================================
//
//  A_PainShootSkull
//
//  Spawn a lost soul and launch it at the target
//
//==========================================================================

final void A_PainShootSkull(float angle)
{
	Actor mo;
	LostSoul newSkull;
	float prestep;
	int count;

	// count total number of skull currently on the level
	count = 0;
	foreach AllThinkers(LostSoul, mo)
	{
		count++;
	}

	// if there are allready 20 skulls on the level,
	// don't spit another one
	if (count > 20)
		return;

	// okay, there's place for another one
	prestep = 4.0 + 3.0 * (Radius + LostSoul.default.Radius) / 2.0;

	// Check whether the Lost Soul is being fired through a 1-sided
	// wall or an impassible line, or a "monsters can't cross" line.
	// If it is, then we don't allow the spawn.
	if (CheckSides(Origin + vector(
	    prestep * cos(angle), prestep * sin(angle), 8.0)))
	{
		return;
	}

	newSkull = LostSoul(Spawn(LostSoul, Origin));

	// Check to see if the new Lost Soul's z value is above the
	// ceiling of its new sector, or below the floor. If so, kill it.
	if ((newSkull.Origin.z > (newSkull.CeilingZ - newSkull.Height)) ||
        (newSkull.Origin.z < newSkull.FloorZ))
	{
		// kill it immediately
		newSkull.Damage(self, self, 10000);
		return;
	}

	// Check for movements.
	if (!newSkull.TryMove(newSkull.Origin + vector(
	    prestep * cos(angle), prestep * sin(angle), 8.0)))
	{
		// kill it immediately
		newSkull.Damage(self, self, 10000);
		return;
	}

	newSkull.Target = Target;
	newSkull.A_SkullAttack();
}

//==========================================================================
//
//  A_PainAttack
//
//  Pain elemental attack. Spawn a lost soul and launch it at the target.
// 
//==========================================================================

final void A_PainAttack()
{
	if (!Target)
		return;

	A_FaceTarget();
	A_PainShootSkull(Angles.yaw);
}

//==========================================================================
//
//  A_PainDie
//
//  Pain elemental death.
//
//==========================================================================

final void A_PainDie()
{
	SendExplosion(DLightColour, DLightRadius, Origin + vector(0.0, 0.0, Height * 0.5));
	A_Fall();
	A_PainShootSkull(Angles.yaw + 90.0);
	A_PainShootSkull(Angles.yaw + 180.0);
	A_PainShootSkull(Angles.yaw + 270.0);
}

states
{
Spawn:
	PAIN A 10 A_Look
	Loop
See:
	PAIN AABBCC 3 A_Chase
	Loop
Missile:
	PAIN DE 5 A_FaceTarget
	PAIN F 5 Bright A_FaceTarget
	PAIN F 0 Bright A_PainAttack
	Goto See
Pain:
	PAIN G 6
	PAIN G 6 A_Pain
	Goto See
Death:
	PAIN H 8 Bright
	PAIN I 8 Bright A_Scream
	PAIN JK 8 Bright
	PAIN L 8 Bright A_PainDie
	PAIN M 8 Bright
	Stop
Raise:
	PAIN MLKJIH 8
	Goto See
}

defaultproperties
{
	Health = 400;
	Radius = 31.0;
	Height = 56.0;
	Mass = 400.0;
	Speed = 8.0 * 35.0;
	PainChance = 0.5;
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivateMCross = true;
	bActivatePushWall = true;
	bNoGravity = true;
	bFloat = true;
	bPassMobj = true;
	DLightColour = RGB(195, 79, 0);
	DLightRadius = 126.0;
	SightSound = 'pain/sight';
	ActiveSound = 'pain/active';
	PainSound = 'pain/pain';
	DeathSound = 'pain/death';
}
