//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PainElemental : Actor
	__mobjinfo__(71)
	__scriptid__(115);

//==========================================================================
//
//  A_PainShootSkull
//
//  Spawn a lost soul and launch it at the target
//
//==========================================================================

final void A_PainShootSkull(float angle)
{
	Actor mo;
	LostSoul newSkull;
	float prestep;
	int count;

	// count total number of skull currently on the level
	count = 0;
	FOREACH(LostSoul, mo)
	{
		count++;
	}

	// if there are allready 20 skulls on the level,
	// don't spit another one
	if (count > 20)
		return;

	// okay, there's place for another one
	prestep = 4.0 + 3.0 * (Radius + LostSoul.default.Radius) / 2.0;

	// Check whether the Lost Soul is being fired through a 1-sided
	// wall or an impassible line, or a "monsters can't cross" line.
	// If it is, then we don't allow the spawn.
	if (CheckSides(Origin + vector(
	    prestep * cos(angle), prestep * sin(angle), 8.0)))
	{
		return;
	}

	newSkull = LostSoul(Spawn(LostSoul, Origin));

	// Check to see if the new Lost Soul's z value is above the
	// ceiling of its new sector, or below the floor. If so, kill it.
	if ((newSkull.Origin.z > (newSkull.CeilingZ - newSkull.Height)) ||
        (newSkull.Origin.z < newSkull.FloorZ))
	{
		// kill it immediately
		newSkull.Damage(self, self, 10000);
		return;
	}

	// Check for movements.
	if (!newSkull.TryMove(newSkull.Origin + vector(
	    prestep * cos(angle), prestep * sin(angle), 8.0)))
	{
		// kill it immediately
		newSkull.Damage(self, self, 10000);
		return;
	}

	newSkull.Enemy = Enemy;
	newSkull.A_SkullAttack();
}

//==========================================================================
//
//  A_PainAttack
//
//  Pain elemental attack. Spawn a lost soul and launch it at the target.
// 
//==========================================================================

final void A_PainAttack()
{
	if (!Enemy)
		return;

	A_FaceTarget();
	A_PainShootSkull(Angles.yaw);
}

//==========================================================================
//
//  A_PainDie
//
//  Pain elemental death.
//
//==========================================================================

final void A_PainDie()
{
	A_Fall();
	A_PainShootSkull(Angles.yaw + 90.0);
	A_PainShootSkull(Angles.yaw + 180.0);
	A_PainShootSkull(Angles.yaw + 270.0);
}

__states__
{
	S_PAIN_STND('PAIN', 0, 10.0 / 35.0, S_PAIN_STND) = A_Look
	S_PAIN_RUN1('PAIN', 0, 3.0 / 35.0, S_PAIN_RUN2) = A_Chase
	S_PAIN_RUN2('PAIN', 0, 3.0 / 35.0, S_PAIN_RUN3) = A_Chase
	S_PAIN_RUN3('PAIN', 1, 3.0 / 35.0, S_PAIN_RUN4) = A_Chase
	S_PAIN_RUN4('PAIN', 1, 3.0 / 35.0, S_PAIN_RUN5) = A_Chase
	S_PAIN_RUN5('PAIN', 2, 3.0 / 35.0, S_PAIN_RUN6) = A_Chase
	S_PAIN_RUN6('PAIN', 2, 3.0 / 35.0, S_PAIN_RUN1) = A_Chase
	S_PAIN_ATK1('PAIN', 3, 5.0 / 35.0, S_PAIN_ATK2) = A_FaceTarget
	S_PAIN_ATK2('PAIN', 4, 5.0 / 35.0, S_PAIN_ATK3) = A_FaceTarget
	S_PAIN_ATK3('PAIN', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_PAIN_ATK4) = A_FaceTarget
	S_PAIN_ATK4('PAIN', 5 | FF_FULLBRIGHT, 0.0 / 35.0, S_PAIN_RUN1) = A_PainAttack
	S_PAIN_PAIN('PAIN', 6, 6.0 / 35.0, S_PAIN_PAIN2) = none
	S_PAIN_PAIN2('PAIN', 6, 6.0 / 35.0, S_PAIN_RUN1) = A_Pain
	S_PAIN_DIE1('PAIN', 7 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE2) = none
	S_PAIN_DIE2('PAIN', 8 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE3) = A_Scream
	S_PAIN_DIE3('PAIN', 9 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE4) = none
	S_PAIN_DIE4('PAIN', 10 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE5) = none
	S_PAIN_DIE5('PAIN', 11 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE6) = A_PainDie
	S_PAIN_DIE6('PAIN', 12 | FF_FULLBRIGHT, 8.0 / 35.0, none) = none
	S_PAIN_RAISE1('PAIN', 12, 8.0 / 35.0, S_PAIN_RAISE2) = none
	S_PAIN_RAISE2('PAIN', 11, 8.0 / 35.0, S_PAIN_RAISE3) = none
	S_PAIN_RAISE3('PAIN', 10, 8.0 / 35.0, S_PAIN_RAISE4) = none
	S_PAIN_RAISE4('PAIN', 9, 8.0 / 35.0, S_PAIN_RAISE5) = none
	S_PAIN_RAISE5('PAIN', 8, 8.0 / 35.0, S_PAIN_RAISE6) = none
	S_PAIN_RAISE6('PAIN', 7, 8.0 / 35.0, S_PAIN_RUN1) = none
}

defaultproperties
{
	Health = 400;
	Radius = 31.0;
	Height = 56.0;
	Mass = 400.0;
	StepSpeed = 8.0;
	PainChance = 0.5;
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivateMCross = true;
	bActivatePushWall = true;
	bNoGravity = true;
	bFloat = true;
	IdleState = S_PAIN_STND;
	SeeState = S_PAIN_RUN1;
	MissileState = S_PAIN_ATK1;
	PainState = S_PAIN_PAIN;
	DeathState = S_PAIN_DIE1;
	RaiseState = S_PAIN_RAISE1;
	SightSound = 'pain/sight';
	ActiveSound = 'pain/active';
	PainSound = 'pain/pain';
	DeathSound = 'pain/death';
}
