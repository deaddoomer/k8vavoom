//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Imp : Pawn
	__mobjinfo__(3001);

//==========================================================================
//
//  A_TroopAttack
//
//  Imp attack.
//
//==========================================================================

void A_TroopAttack()
{
	int damage;

	if (!Enemy)
		return;

	A_FaceTarget();
	if (CheckMeleeRange())
	{
		PlaySound('imp/melee', CHAN_WEAPON);
		damage = (P_Random() % 8 + 1) * 3;
		Enemy.Damage(self, self, damage);
		return;
	}

	// launch a missile
	SpawnMissile(Enemy, ImpMissile);
}

__states__
{
	S_TROO_STND('TROO', 0, 'monsters/imp/base.md2', 0, 10.0 / 35.0, S_TROO_STND2) { A_Look(); }
	S_TROO_STND2('TROO', 1, 'monsters/imp/base.md2', 1, 10.0 / 35.0, S_TROO_STND) { A_Look(); }
	S_TROO_RUN1('TROO', 0, 'monsters/imp/base.md2', 2, 3.0 / 35.0, S_TROO_RUN2) { A_Chase(); }
	S_TROO_RUN2('TROO', 0, 'monsters/imp/base.md2', 3, 3.0 / 35.0, S_TROO_RUN3) { A_Chase(); }
	S_TROO_RUN3('TROO', 1, 'monsters/imp/base.md2', 4, 3.0 / 35.0, S_TROO_RUN4) { A_Chase(); }
	S_TROO_RUN4('TROO', 1, 'monsters/imp/base.md2', 5, 3.0 / 35.0, S_TROO_RUN5) { A_Chase(); }
	S_TROO_RUN5('TROO', 2, 'monsters/imp/base.md2', 6, 3.0 / 35.0, S_TROO_RUN6) { A_Chase(); }
	S_TROO_RUN6('TROO', 2, 'monsters/imp/base.md2', 7, 3.0 / 35.0, S_TROO_RUN7) { A_Chase(); }
	S_TROO_RUN7('TROO', 3, 'monsters/imp/base.md2', 8, 3.0 / 35.0, S_TROO_RUN8) { A_Chase(); }
	S_TROO_RUN8('TROO', 3, 'monsters/imp/base.md2', 9, 3.0 / 35.0, S_TROO_RUN1) { A_Chase(); }
	S_TROO_ATK1('TROO', 4, 'monsters/imp/base.md2', 10, 8.0 / 35.0, S_TROO_ATK2) { A_FaceTarget(); }
	S_TROO_ATK2('TROO', 5, 'monsters/imp/base.md2', 11, 8.0 / 35.0, S_TROO_ATK3) { A_FaceTarget(); }
	S_TROO_ATK3('TROO', 6, 'monsters/imp/base.md2', 12, 6.0 / 35.0, S_TROO_RUN1) { A_TroopAttack(); }
	S_TROO_PAIN('TROO', 7, 'monsters/imp/base.md2', 13, 2.0 / 35.0, S_TROO_PAIN2) { }
	S_TROO_PAIN2('TROO', 7, 'monsters/imp/base.md2', 14, 2.0 / 35.0, S_TROO_RUN1) { A_Pain(); }
	S_TROO_DIE1('TROO', 8, 'monsters/imp/death.md2', 0, 8.0 / 35.0, S_TROO_DIE2) { }
	S_TROO_DIE2('TROO', 9, 'monsters/imp/death.md2', 1, 8.0 / 35.0, S_TROO_DIE3) { A_Scream(); }
	S_TROO_DIE3('TROO', 10, 'monsters/imp/death.md2', 2, 6.0 / 35.0, S_TROO_DIE4) { }
	S_TROO_DIE4('TROO', 11, 'monsters/imp/death.md2', 3, 6.0 / 35.0, S_TROO_DIE5) { A_Fall(); }
	S_TROO_DIE5('TROO', 12, 'monsters/imp/death.md2', 4, -1.0, S_NULL) { }
	S_TROO_XDIE1('TROO', 13, 'monsters/imp/gibs.md2', 0, 5.0 / 35.0, S_TROO_XDIE2) { }
	S_TROO_XDIE2('TROO', 14, 'monsters/imp/gibs.md2', 1, 5.0 / 35.0, S_TROO_XDIE3) { A_XScream(); }
	S_TROO_XDIE3('TROO', 15, 'monsters/imp/gibs.md2', 2, 5.0 / 35.0, S_TROO_XDIE4) { }
	S_TROO_XDIE4('TROO', 16, 'monsters/imp/gibs.md2', 3, 5.0 / 35.0, S_TROO_XDIE5) { A_Fall(); }
	S_TROO_XDIE5('TROO', 17, 'monsters/imp/gibs.md2', 4, 5.0 / 35.0, S_TROO_XDIE6) { }
	S_TROO_XDIE6('TROO', 18, 'monsters/imp/gibs.md2', 5, 5.0 / 35.0, S_TROO_XDIE7) { }
	S_TROO_XDIE7('TROO', 19, 'monsters/imp/gibs.md2', 6, 5.0 / 35.0, S_TROO_XDIE8) { }
	S_TROO_XDIE8('TROO', 20, 'monsters/imp/gibs.md2', 7, -1.0, S_NULL) { }
	S_TROO_RAISE1('TROO', 12, 'monsters/imp/death.md2', 5, 8.0 / 35.0, S_TROO_RAISE2) { }
	S_TROO_RAISE2('TROO', 11, 'monsters/imp/death.md2', 6, 8.0 / 35.0, S_TROO_RAISE3) { }
	S_TROO_RAISE3('TROO', 10, 'monsters/imp/death.md2', 7, 6.0 / 35.0, S_TROO_RAISE4) { }
	S_TROO_RAISE4('TROO', 9, 'monsters/imp/death.md2', 8, 6.0 / 35.0, S_TROO_RAISE5) { }
	S_TROO_RAISE5('TROO', 8, 'monsters/imp/death.md2', 9, 6.0 / 35.0, S_TROO_RUN1) { }
}

defaultproperties
{
	Health = 60;
	GibsHealth = -60;
	Radius = 20.0;
	Height = 56.0;
	Mass = 100.0;
	StepSpeed = 8.0;
	PainChance = 0.78125;
	IdleState = S_TROO_STND;
	SeeState = S_TROO_RUN1;
	MeleeState = S_TROO_ATK1;
	MissileState = S_TROO_ATK1;
	PainState = S_TROO_PAIN;
	DeathState = S_TROO_DIE1;
	GibsDeathState = S_TROO_XDIE1;
	RaiseState = S_TROO_RAISE1;
	SightSound = 'imp/sight';
	ActiveSound = 'imp/active';
	PainSound = 'imp/pain';
	DeathSound = 'imp/death';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2005/11/17 23:05:22  dj_jl
//  Renamed sounds.
//
//  Revision 1.2  2005/05/03 15:03:49  dj_jl
//  Models updated.
//
//  Revision 1.1  2002/10/26 16:32:20  dj_jl
//  New style of defining classes.
//
//**************************************************************************
