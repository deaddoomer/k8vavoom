//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class SpiderMastermind : Pawn
	__mobjinfo__(7)
	__scriptid__(7);

//==========================================================================
//
//  A_Metal
//
//  Move with metal sound.
//
//==========================================================================

void A_Metal()
{
	PlaySound('spider/walk', CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//  A_SPosAttack
//
//  Shotgun guy, Spider mastermind attack.
//
//==========================================================================

void A_SPosAttack()
{
	int i;
	int damage;
	TVec aimDir;
	TVec dir;

	if (!Enemy)
		return;

	PlaySound('spider/attack', CHAN_WEAPON);
	A_FaceTarget();
	aimDir = AimLineAttack(Angles, MISSILERANGE);
	for (i = 0; i < 3; i++)
	{
		dir = aimDir;
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
		damage = ((P_Random() % 5) + 1) * 3;
		LineAttack(dir, MISSILERANGE, damage);
	}

	Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//==========================================================================
//
//  A_SpidRefire
//
//  Spider mastermind refire.
//
//==========================================================================

void A_SpidRefire()
{
	// keep firing unless target got out of sight
	A_FaceTarget();

	if (P_Random() < 10)
		return;

	if (!Enemy || Enemy.Health <= 0 || !CanSee(Enemy))
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//  A_BossDeath
//
//  Possibly trigger special effects if on first boss level
//
//==========================================================================

void A_BossDeath()
{
	string mapname;
	int i;
	Actor Other;

	mapname = ARR2STR(Level.Game.level->mapname);
	if (strcmp(mapname, "E3M8") && strcmp(mapname, "E4M8"))
	{
		//  Not a boss level
		return;
	}

	// make sure there is a player alive for victory
	for (i = 0; i < MAXPLAYERS; i++)
		if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
			break;

	if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game

	// scan the remaining thinkers to see if all bosses are dead
	FOREACH(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other boss not dead
			return;
		}
	}

	// victory!
	if (!strcmp(mapname, "E4M8"))
	{
		Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0, 0, NULL, 0, none);
		return;
	}

	G_ExitLevel(0);
}

__states__
{
	S_SPID_STND('SPID', 0, 'monsters/spider/base.md2', 0, 10.0 / 35.0, S_SPID_STND2) { A_Look(); }
	S_SPID_STND2('SPID', 1, 'monsters/spider/base.md2', 1, 10.0 / 35.0, S_SPID_STND) { A_Look(); }
	S_SPID_RUN1('SPID', 0, 'monsters/spider/base.md2', 2, 3.0 / 35.0, S_SPID_RUN2) { A_Metal(); }
	S_SPID_RUN2('SPID', 0, 'monsters/spider/base.md2', 3, 3.0 / 35.0, S_SPID_RUN3) { A_Chase(); }
	S_SPID_RUN3('SPID', 1, 'monsters/spider/base.md2', 4, 3.0 / 35.0, S_SPID_RUN4) { A_Chase(); }
	S_SPID_RUN4('SPID', 1, 'monsters/spider/base.md2', 5, 3.0 / 35.0, S_SPID_RUN5) { A_Chase(); }
	S_SPID_RUN5('SPID', 2, 'monsters/spider/base.md2', 6, 3.0 / 35.0, S_SPID_RUN6) { A_Metal(); }
	S_SPID_RUN6('SPID', 2, 'monsters/spider/base.md2', 7, 3.0 / 35.0, S_SPID_RUN7) { A_Chase(); }
	S_SPID_RUN7('SPID', 3, 'monsters/spider/base.md2', 8, 3.0 / 35.0, S_SPID_RUN8) { A_Chase(); }
	S_SPID_RUN8('SPID', 3, 'monsters/spider/base.md2', 9, 3.0 / 35.0, S_SPID_RUN9) { A_Chase(); }
	S_SPID_RUN9('SPID', 4, 'monsters/spider/base.md2', 10, 3.0 / 35.0, S_SPID_RUN10) { A_Metal(); }
	S_SPID_RUN10('SPID', 4, 'monsters/spider/base.md2', 11, 3.0 / 35.0, S_SPID_RUN11) { A_Chase(); }
	S_SPID_RUN11('SPID', 5, 'monsters/spider/base.md2', 12, 3.0 / 35.0, S_SPID_RUN12) { A_Chase(); }
	S_SPID_RUN12('SPID', 5, 'monsters/spider/base.md2', 13, 3.0 / 35.0, S_SPID_RUN1) { A_Chase(); }
	S_SPID_ATK1('SPID', 0 | FF_FULLBRIGHT, 'monsters/spider/base.md2', 14, 20.0 / 35.0, S_SPID_ATK2) { A_FaceTarget(); }
	S_SPID_ATK2('SPID', 6 | FF_FULLBRIGHT, 'monsters/spider/base.md2', 15, 4.0 / 35.0, S_SPID_ATK3) { A_SPosAttack(); }
	S_SPID_ATK3('SPID', 7 | FF_FULLBRIGHT, 'monsters/spider/attack.md2', 0, 4.0 / 35.0, S_SPID_ATK4) { A_SPosAttack(); }
	S_SPID_ATK4('SPID', 7 | FF_FULLBRIGHT, 'monsters/spider/attack.md2', 0, 1.0 / 35.0, S_SPID_ATK2) { A_SpidRefire(); }
	S_SPID_PAIN('SPID', 8, 'monsters/spider/base.md2', 16, 3.0 / 35.0, S_SPID_PAIN2) { }
	S_SPID_PAIN2('SPID', 8, 'monsters/spider/base.md2', 17, 3.0 / 35.0, S_SPID_RUN1) { A_Pain(); }
	S_SPID_DIE1('SPID', 9, 'monsters/spider/death.md2', 0, 20.0 / 35.0, S_SPID_DIE2) { A_Scream(); }
	S_SPID_DIE2('SPID', 10, 'monsters/spider/death.md2', 1, 10.0 / 35.0, S_SPID_DIE3) { A_Fall(); }
	S_SPID_DIE3('SPID', 11, 'monsters/spider/death.md2', 2, 10.0 / 35.0, S_SPID_DIE4) { }
	S_SPID_DIE4('SPID', 12, 'monsters/spider/death.md2', 3, 10.0 / 35.0, S_SPID_DIE5) { }
	S_SPID_DIE5('SPID', 13, 'monsters/spider/death.md2', 4, 10.0 / 35.0, S_SPID_DIE6) { }
	S_SPID_DIE6('SPID', 14, 'monsters/spider/death.md2', 5, 10.0 / 35.0, S_SPID_DIE7) { }
	S_SPID_DIE7('SPID', 15, 'monsters/spider/death.md2', 6, 10.0 / 35.0, S_SPID_DIE8) { }
	S_SPID_DIE8('SPID', 16, 'monsters/spider/death.md2', 7, 10.0 / 35.0, S_SPID_DIE9) { }
	S_SPID_DIE9('SPID', 17, 'monsters/spider/death.md2', 8, 10.0 / 35.0, S_SPID_DIE10) { }
	S_SPID_DIE10('SPID', 18, 'monsters/spider/death.md2', 9, 30.0 / 35.0, S_SPID_DIE11) { }
	S_SPID_DIE11('SPID', 18, 'monsters/spider/death.md2', 10, -1.0, S_NULL) { A_BossDeath(); }
}

defaultproperties
{
	Health = 3000;
	Radius = 128.0;
	Height = 100.0;
	Mass = 1000.0;
	StepSpeed = 12.0;
	PainChance = 0.15625;
	bBoss = true;
	bTriggerHappy = true;
	IdleState = S_SPID_STND;
	SeeState = S_SPID_RUN1;
	MissileState = S_SPID_ATK1;
	PainState = S_SPID_PAIN;
	DeathState = S_SPID_DIE1;
	SightSound = 'spider/sight';
	ActiveSound = 'spider/active';
	AttackSound = 'spider/attack';
	PainSound = 'spider/pain';
	DeathSound = 'spider/death';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.10  2006/02/17 19:06:51  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.9  2006/02/15 23:32:09  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.8  2005/12/27 22:22:27  dj_jl
//  Created level info class, moved action special handling to it.
//
//  Revision 1.7  2005/12/11 21:31:39  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.6  2005/11/17 23:05:22  dj_jl
//  Renamed sounds.
//
//  Revision 1.5  2005/03/16 15:04:19  dj_jl
//  More work on line specials.
//
//  Revision 1.4  2005/03/01 14:39:31  dj_jl
//  Big update of line specials.
//
//  Revision 1.3  2003/11/12 16:48:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.2  2003/07/11 16:47:38  dj_jl
//  Made array of players with pointers
//
//  Revision 1.1  2002/10/26 16:32:20  dj_jl
//  New style of defining classes.
//
//**************************************************************************
