//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class GrenadeLauncher : WeaponEx
	__mobjinfo__(90);

//===========================================================================
//
//  A_FireGrenade
//
//===========================================================================

final void A_FireGrenade()
{
	Actor A;

	DecAmmo(1);

	A = Spawn(Grenade, Player.MO.Origin + vector(0.0, 0.0, 32.0));

	if (A.SightSound)
		A.PlaySound(A.SightSound, CHAN_VOICE);

	A.Target = EntityEx(Player.MO);

	//  See which target is to be aimed at
	if (Player.MO.Angles.pitch)
	{
		TVec v_forward;
		TVec v_right;
		TVec v_up;

		AngleVectors(&Player.MO.Angles, &v_forward, &v_right, &v_up);
		A.Velocity = v_forward * A.Speed + v_up * A.Speed / 3.0 +
			((Random() - 0.5) * 20.0) * v_right +
			((Random() - 0.5) * 20.0) * v_up;
	}
	else
	{
		EntityEx(Player.MO).Aim(A.Velocity, 16.0 * 64.0);
		A.Velocity = A.Velocity * A.Speed;
		A.Velocity.z = A.Speed / 3.0;
	}
	VectorAngles(&A.Velocity, &A.Angles);

	A.CheckMissileSpawn();
}

states
{
	//  Weapon in player view
Ready
	GRLG A 1 A_WeaponReady
	Loop
Deselect:
	GRLG A 1 A_Lower
	Loop
Select:
	GRLG A 1 A_Raise
	Loop
Fire:
	GRLG B 8 A_GunFlash
	GRLG B 12 A_FireGrenade
	GRLG B 0 A_ReFire
	Goto Ready
Flash
	GRLF A 3 Bright A_Light1
	GRLF B 4 Bright
	GRLF C 4 Bright A_Light2
	GRLF D 4 Bright A_Light2
	Goto Super::LightDone
	//  Weapon on ground
Spawn:
	GLAU A -1
	Stop
}

defaultproperties
{
	Slot = 5;
	SelectionOrder = 2600;
	AmmoType = RocketAmmo;
	PickupMessage = "Piched up a grenade launcher";
	IdleState = S_GLAUNCH;
	UpState = S_GRENLAUNCHUP;
	DownState = S_GRENLAUNCHDOWN;
	ReadyState = S_GRENLAUNCH;
	AttackState = S_GRENLAUNCH1;
	FlashState = S_GRENLAUNCHFLASH1;
}
