//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponChainsaw : Weapon;

//===========================================================================
//
//  A_Saw
//
//===========================================================================

void A_Saw()
{
	float angle;
	int damage;
	TAVec aimAng;
	TVec dir;

	damage = 2 * (P_Random() % 10 + 1);
	aimAng = Player.MO.Angles;
	aimAng.yaw = AngleMod360(aimAng.yaw + (Random() -
		Random()) * 45.0 / 8.0);

	// use meleerange + 1 se the puff doesn't skip the flash
	dir = Player.MO.AimLineAttack(aimAng, MELEERANGE + 0.00001);
	Player.MO.LineAttack(dir, MELEERANGE + 0.00001, damage);

	if (!Player.MO.linetarget)
	{
		Player.MO.PlaySound('weapons/sawfull', CHAN_WEAPON);
		return;
	}
	Player.MO.PlaySound('weapons/sawhit', CHAN_WEAPON);

	// turn to face target
	angle = atan2(Player.MO.linetarget.Origin.y - Player.MO.Origin.y,
		Player.MO.linetarget.Origin.x - Player.MO.Origin.x);
	if (AngleMod360(angle - Player.MO.Angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - Player.MO.Angles.yaw) < -90.0 / 20.0)
			Player.MO.Angles.yaw = angle + 90.0 / 21.0;
		else
			Player.MO.Angles.yaw = Player.MO.Angles.yaw - 90.0 / 20.0;
	}
	else
	{
		if (AngleMod360(angle - Player.MO.Angles.yaw) > 90.0 / 20.0)
			Player.MO.Angles.yaw = angle - 90.0 / 21.0;
		else
			Player.MO.Angles.yaw += 90.0 / 20.0;
	}
	Player.MO.Angles.yaw = AngleMod360(Player.MO.Angles.yaw);
	Player.MO.bJustAttacked = true;
	Player.bFixAngle = true;
}

__states__
{
	S_SAW('SAWG', 2, 'weapons/v_saw.md2', 0, 4.0 / 35.0, S_SAWB) { A_WeaponReady(); }
	S_SAWB('SAWG', 3, 'weapons/v_saw.md2', 1, 4.0 / 35.0, S_SAW) { A_WeaponReady(); }
	S_SAWDOWN('SAWG', 2, 'weapons/v_saw.md2', 2, 1.0 / 35.0, S_SAWDOWN) { A_Lower(); }
	S_SAWUP('SAWG', 2, 'weapons/v_saw.md2', 3, 1.0 / 35.0, S_SAWUP) { A_Raise(); }
	S_SAW1('SAWG', 0, 'weapons/v_saw.md2', 4, 4.0 / 35.0, S_SAW2) { A_Saw(); }
	S_SAW2('SAWG', 1, 'weapons/v_saw.md2', 5, 4.0 / 35.0, S_SAW3) { A_Saw(); }
	S_SAW3('SAWG', 1, 'weapons/v_saw.md2', 5, 0.0 / 35.0, S_SAW) { A_ReFire(); }
}

defaultproperties
{
	Ammo = DoomDefs::am_noammo;
	UpState = S_SAWUP;
	DownState = S_SAWDOWN;
	ReadyState = S_SAW;
	AttackState = S_SAW1;
	ThirdPersonModel = 'weapons/g_saw.md2';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.5  2006/02/17 19:06:52  dj_jl
//  Moved common defs to classes.
//
//  Revision 1.4  2005/12/11 21:31:39  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.3  2005/11/17 23:05:22  dj_jl
//  Renamed sounds.
//
//  Revision 1.2  2003/11/12 16:48:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.1  2002/10/26 16:32:20  dj_jl
//  New style of defining classes.
//
//**************************************************************************
