//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class WeaponFist : Weapon;

//===========================================================================
//
//  A_Punch
//
//===========================================================================

void A_Punch()
{
	int damage;
	TAVec aimAngles;
	TVec dir;

	damage = (P_Random() % 10 + 1) << 1;

	if (Player(Player).Powers[pw_strength])
		damage *= 10;

	aimAngles = Player.MO.Angles;
	aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
		Random()) * 45.0 / 8.0);
	dir = Actor(Player.MO).AimLineAttack(aimAngles, Actor::MELEERANGE);
	Actor(Player.MO).LineAttack(dir, Actor::MELEERANGE, damage);

	// turn to face target
	if (Actor(Player.MO).linetarget)
	{
		Player.MO.PlaySound('*fist', CHAN_WEAPON);
		Player.MO.Angles.yaw = atan2(
			Actor(Player.MO).linetarget.Origin.y - Player.MO.Origin.y,
			Actor(Player.MO).linetarget.Origin.x - Player.MO.Origin.x);
		Player.bFixAngle = true;
	}
}

__states__
{
	S_PUNCH('PUNG', 0, 'weapons/fists/view.xml', 0, 1.0 / 35.0, S_PUNCH) { A_WeaponReady(); }
	S_PUNCHDOWN('PUNG', 0, 'weapons/fists/view.xml', 1, 1.0 / 35.0, S_PUNCHDOWN) { A_Lower(); }
	S_PUNCHUP('PUNG', 0, 'weapons/fists/view.xml', 2, 1.0 / 35.0, S_PUNCHUP) { A_Raise(); }
	S_PUNCH1('PUNG', 1, 'weapons/fists/view.xml', 3, 4.0 / 35.0, S_PUNCH2) { }
	S_PUNCH2('PUNG', 2, 'weapons/fists/view.xml', 4, 4.0 / 35.0, S_PUNCH3) { A_Punch(); }
	S_PUNCH3('PUNG', 3, 'weapons/fists/view.xml', 5, 5.0 / 35.0, S_PUNCH4) { }
	S_PUNCH4('PUNG', 2, 'weapons/fists/view.xml', 6, 4.0 / 35.0, S_PUNCH5) { }
	S_PUNCH5('PUNG', 1, 'weapons/fists/view.xml', 7, 5.0 / 35.0, S_PUNCH) { A_ReFire(); }
}

defaultproperties
{
	Ammo = DoomDefs::am_noammo;
	UpState = S_PUNCHUP;
	DownState = S_PUNCHDOWN;
	ReadyState = S_PUNCH;
	AttackState = S_PUNCH1;
}
