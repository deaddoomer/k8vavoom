//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class DoomPlayer : Actor;

struct InitInvInfo
{
	class<Inventory>	Type;
	int					Amount;
};

array<InitInvInfo>		InitialInventory;

//==========================================================================
//
//  A_PlayerScream
//
//  Player death sound
//
//==========================================================================

final void A_PlayerScream()
{
	// Default death sound.
	name sound = '*death';

#ifdef DOOM2
	if (Health < -50)
	{
		// IF THE PLAYER DIES
		// LESS THAN -50% WITHOUT GIBBING
		sound = '*xdeath';
	}
#endif

	PlaySound(sound, CHAN_VOICE);
}

__states__
{
	S_PLAY('PLAY', 0, -1.0, none) = none
	S_PLAY_RUN1('PLAY', 0, 4.0 / 35.0, S_PLAY_RUN2) = none
	S_PLAY_RUN2('PLAY', 1, 4.0 / 35.0, S_PLAY_RUN3) = none
	S_PLAY_RUN3('PLAY', 2, 4.0 / 35.0, S_PLAY_RUN4) = none
	S_PLAY_RUN4('PLAY', 3, 4.0 / 35.0, S_PLAY_RUN1) = none
	S_PLAY_ATK1('PLAY', 4, 12.0 / 35.0, S_PLAY) = none
	S_PLAY_ATK2('PLAY', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_PLAY_ATK1) = none
	S_PLAY_PAIN('PLAY', 6, 4.0 / 35.0, S_PLAY_PAIN2) = none
	S_PLAY_PAIN2('PLAY', 6, 4.0 / 35.0, S_PLAY) = A_Pain
	S_PLAY_DIE1('PLAY', 7, 10.0 / 35.0, S_PLAY_DIE2) = none
	S_PLAY_DIE2('PLAY', 8, 10.0 / 35.0, S_PLAY_DIE3) = A_PlayerScream
	S_PLAY_DIE3('PLAY', 9, 10.0 / 35.0, S_PLAY_DIE4) = A_Fall
	S_PLAY_DIE4('PLAY', 10, 10.0 / 35.0, S_PLAY_DIE5) = none
	S_PLAY_DIE5('PLAY', 11, 10.0 / 35.0, S_PLAY_DIE6) = none
	S_PLAY_DIE6('PLAY', 12, 10.0 / 35.0, S_PLAY_DIE7) = none
	S_PLAY_DIE7('PLAY', 13, -1.0, none) = none
	S_PLAY_XDIE1('PLAY', 14, 5.0 / 35.0, S_PLAY_XDIE2) = none
	S_PLAY_XDIE2('PLAY', 15, 5.0 / 35.0, S_PLAY_XDIE3) = A_XScream
	S_PLAY_XDIE3('PLAY', 16, 5.0 / 35.0, S_PLAY_XDIE4) = A_Fall
	S_PLAY_XDIE4('PLAY', 17, 5.0 / 35.0, S_PLAY_XDIE5) = none
	S_PLAY_XDIE5('PLAY', 18, 5.0 / 35.0, S_PLAY_XDIE6) = none
	S_PLAY_XDIE6('PLAY', 19, 5.0 / 35.0, S_PLAY_XDIE7) = none
	S_PLAY_XDIE7('PLAY', 20, 5.0 / 35.0, S_PLAY_XDIE8) = none
	S_PLAY_XDIE8('PLAY', 21, 5.0 / 35.0, S_PLAY_XDIE9) = none
	S_PLAY_XDIE9('PLAY', 22, -1.0, none) = none
}

defaultproperties
{
	Health = 100;
	GibsHealth = -100;
	ReactionCount = 0;
	Radius = 16.0;
	Height = 56.0;
	Mass = 100.0;
	PainChance = 1.0;
	bSolid = true;
	bShootable = true;
	bActivatePushWall = true;
	bTelestomp = true;
	bWindThrust = true;
	bDropOff = true;
	bPickUp = true;
	bFloorClip = true;
	bSlide = true;
	bNoBlockMonst = true;
	IdleState = S_PLAY;
	SeeState = S_PLAY_RUN1;
	MeleeState = S_PLAY_ATK2;
	MissileState = S_PLAY_ATK1;
	PainState = S_PLAY_PAIN;
	DeathState = S_PLAY_DIE1;
	GibsDeathState = S_PLAY_XDIE1;
	PainSound = '*pain100';
	DeathSound = '*death';

	InitialInventory.Num = 3;
	InitialInventory[0].Type = Clip; InitialInventory[0].Amount = 50;
	InitialInventory[1].Type = Fist; InitialInventory[1].Amount = 1;
	InitialInventory[2].Type = Pistol; InitialInventory[2].Amount = 1;
}
