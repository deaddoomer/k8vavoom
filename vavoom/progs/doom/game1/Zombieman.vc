//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Zombieman : Pawn
	__mobjinfo__(3004)
	__scriptid__(4);

//==========================================================================
//
//  A_PosAttack
//
//  Zombieman attack.
//
//==========================================================================

final void A_PosAttack()
{
	int damage;
	TVec dir;

	if (!Enemy)
		return;

	A_FaceTarget();

	dir = AimLineAttack(Angles, MISSILERANGE);
	VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);

	PlaySound('grunt/attack', CHAN_WEAPON);

	damage = ((P_Random() % 5) + 1) * 3;

	LineAttack(dir, MISSILERANGE, damage);

	Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff()
{
	Actor A;

	A = Spawn(ItemAmmoBulletClip, Origin + vector(0.0, 0.0, Height / 2.0));
	A.Velocity.x = (Random() - Random()) * 35.0;
	A.Velocity.y = (Random() - Random()) * 35.0;
	A.Velocity.z = (5.0 + Random() * 4.0) * 35.0;
	A.bDropped = true;	// special versions of items
}

__states__
{
	S_POSS_STND('POSS', 0, 10.0 / 35.0, S_POSS_STND2) = A_Look
	S_POSS_STND2('POSS', 1, 10.0 / 35.0, S_POSS_STND) = A_Look
	S_POSS_RUN1('POSS', 0, 4.0 / 35.0, S_POSS_RUN2) = A_Chase
	S_POSS_RUN2('POSS', 0, 4.0 / 35.0, S_POSS_RUN3) = A_Chase
	S_POSS_RUN3('POSS', 1, 4.0 / 35.0, S_POSS_RUN4) = A_Chase
	S_POSS_RUN4('POSS', 1, 4.0 / 35.0, S_POSS_RUN5) = A_Chase
	S_POSS_RUN5('POSS', 2, 4.0 / 35.0, S_POSS_RUN6) = A_Chase
	S_POSS_RUN6('POSS', 2, 4.0 / 35.0, S_POSS_RUN7) = A_Chase
	S_POSS_RUN7('POSS', 3, 4.0 / 35.0, S_POSS_RUN8) = A_Chase
	S_POSS_RUN8('POSS', 3, 4.0 / 35.0, S_POSS_RUN1) = A_Chase
	S_POSS_ATK1('POSS', 4, 10.0 / 35.0, S_POSS_ATK2) = A_FaceTarget
	S_POSS_ATK2('POSS', 5, 8.0 / 35.0, S_POSS_ATK3) = A_PosAttack
	S_POSS_ATK3('POSS', 4, 8.0 / 35.0, S_POSS_RUN1) = none
	S_POSS_PAIN('POSS', 6, 3.0 / 35.0, S_POSS_PAIN2) = none
	S_POSS_PAIN2('POSS', 6, 3.0 / 35.0, S_POSS_RUN1) = A_Pain
	S_POSS_DIE1('POSS', 7, 5.0 / 35.0, S_POSS_DIE2) = none
	S_POSS_DIE2('POSS', 8, 5.0 / 35.0, S_POSS_DIE3) = A_Scream
	S_POSS_DIE3('POSS', 9, 5.0 / 35.0, S_POSS_DIE4) = A_Fall
	S_POSS_DIE4('POSS', 10, 5.0 / 35.0, S_POSS_DIE5) = none
	S_POSS_DIE5('POSS', 11, -1.0, none) = none
	S_POSS_XDIE1('POSS', 12, 5.0 / 35.0, S_POSS_XDIE2) = none
	S_POSS_XDIE2('POSS', 13, 5.0 / 35.0, S_POSS_XDIE3) = A_XScream
	S_POSS_XDIE3('POSS', 14, 5.0 / 35.0, S_POSS_XDIE4) = A_Fall
	S_POSS_XDIE4('POSS', 15, 5.0 / 35.0, S_POSS_XDIE5) = none
	S_POSS_XDIE5('POSS', 16, 5.0 / 35.0, S_POSS_XDIE6) = none
	S_POSS_XDIE6('POSS', 17, 5.0 / 35.0, S_POSS_XDIE7) = none
	S_POSS_XDIE7('POSS', 18, 5.0 / 35.0, S_POSS_XDIE8) = none
	S_POSS_XDIE8('POSS', 19, 5.0 / 35.0, S_POSS_XDIE9) = none
	S_POSS_XDIE9('POSS', 20, -1.0, none) = none
	S_POSS_RAISE1('POSS', 10, 5.0 / 35.0, S_POSS_RAISE2) = none
	S_POSS_RAISE2('POSS', 9, 5.0 / 35.0, S_POSS_RAISE3) = none
	S_POSS_RAISE3('POSS', 8, 5.0 / 35.0, S_POSS_RAISE4) = none
	S_POSS_RAISE4('POSS', 7, 5.0 / 35.0, S_POSS_RUN1) = none
}

defaultproperties
{
	Health = 20;
	GibsHealth = -20;
	Radius = 20.0;
	Height = 56.0;
	Mass = 100.0;
	StepSpeed = 8.0;
	PainChance = 0.78125;
	IdleState = S_POSS_STND;
	SeeState = S_POSS_RUN1;
	MissileState = S_POSS_ATK1;
	PainState = S_POSS_PAIN;
	DeathState = S_POSS_DIE1;
	GibsDeathState = S_POSS_XDIE1;
	RaiseState = S_POSS_RAISE1;
	SightSound = 'grunt/sight';
	ActiveSound = 'grunt/active';
	AttackSound = 'grunt/attack';
	PainSound = 'grunt/pain';
	DeathSound = 'grunt/death1';
}
