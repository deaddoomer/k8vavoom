//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class BaronOfHell : Pawn
	__mobjinfo__(3003)
	__scriptid__(3);

//==========================================================================
//
//  A_BruisAttack
//
//  Hell knight, Baron of hell attack.
//
//==========================================================================

void A_BruisAttack()
{
	int damage;

	if (!Enemy)
		return;

	if (CheckMeleeRange())
	{
		PlaySound('baron/melee', CHAN_WEAPON);
		damage = (P_Random() % 8 + 1) * 10;
		Enemy.Damage(self, self, damage);
		return;
	}

	// launch a missile
	SpawnMissile(Enemy, BruiserShot);
}

//==========================================================================
//
//  A_BossDeath
//
//  Possibly trigger special effects if on first boss level
//
//==========================================================================

void A_BossDeath()
{
	int i;
	Actor Other;

	if (strcmp(ARR2STR(Level.Game.level->mapname), "E1M8"))
	{
		//  Not a boss level
		return;
	}

	// make sure there is a player alive for victory
	for (i = 0; i < MAXPLAYERS; i++)
		if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
			break;

	if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game

	// scan the remaining thinkers to see if all bosses are dead
	FOREACH(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other boss not dead
			return;
		}
	}

	// victory!
	Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0, 0, NULL, 0, none);
}

__states__
{
	S_BOSS_STND('BOSS', 0, 'monsters/baron/base.md2', 0, 10.0 / 35.0, S_BOSS_STND2) { A_Look(); }
	S_BOSS_STND2('BOSS', 1, 'monsters/baron/base.md2', 1, 10.0 / 35.0, S_BOSS_STND) { A_Look(); }
	S_BOSS_RUN1('BOSS', 0, 'monsters/baron/base.md2', 2, 3.0 / 35.0, S_BOSS_RUN2) { A_Chase(); }
	S_BOSS_RUN2('BOSS', 0, 'monsters/baron/base.md2', 3, 3.0 / 35.0, S_BOSS_RUN3) { A_Chase(); }
	S_BOSS_RUN3('BOSS', 1, 'monsters/baron/base.md2', 4, 3.0 / 35.0, S_BOSS_RUN4) { A_Chase(); }
	S_BOSS_RUN4('BOSS', 1, 'monsters/baron/base.md2', 5, 3.0 / 35.0, S_BOSS_RUN5) { A_Chase(); }
	S_BOSS_RUN5('BOSS', 2, 'monsters/baron/base.md2', 6, 3.0 / 35.0, S_BOSS_RUN6) { A_Chase(); }
	S_BOSS_RUN6('BOSS', 2, 'monsters/baron/base.md2', 7, 3.0 / 35.0, S_BOSS_RUN7) { A_Chase(); }
	S_BOSS_RUN7('BOSS', 3, 'monsters/baron/base.md2', 8, 3.0 / 35.0, S_BOSS_RUN8) { A_Chase(); }
	S_BOSS_RUN8('BOSS', 3, 'monsters/baron/base.md2', 9, 3.0 / 35.0, S_BOSS_RUN1) { A_Chase(); }
	S_BOSS_ATK1('BOSS', 4, 'monsters/baron/base.md2', 10, 8.0 / 35.0, S_BOSS_ATK2) { A_FaceTarget(); }
	S_BOSS_ATK2('BOSS', 5, 'monsters/baron/base.md2', 11, 8.0 / 35.0, S_BOSS_ATK3) { A_FaceTarget(); }
	S_BOSS_ATK3('BOSS', 6, 'monsters/baron/base.md2', 12, 8.0 / 35.0, S_BOSS_RUN1) { A_BruisAttack(); }
	S_BOSS_PAIN('BOSS', 7, 'monsters/baron/base.md2', 13, 2.0 / 35.0, S_BOSS_PAIN2) { }
	S_BOSS_PAIN2('BOSS', 7, 'monsters/baron/base.md2', 14, 2.0 / 35.0, S_BOSS_RUN1) { A_Pain(); }
	S_BOSS_DIE1('BOSS', 8, 'monsters/baron/death.md2', 0, 8.0 / 35.0, S_BOSS_DIE2) { }
	S_BOSS_DIE2('BOSS', 9, 'monsters/baron/death.md2', 1, 8.0 / 35.0, S_BOSS_DIE3) { A_Scream(); }
	S_BOSS_DIE3('BOSS', 10, 'monsters/baron/death.md2', 2, 8.0 / 35.0, S_BOSS_DIE4) { }
	S_BOSS_DIE4('BOSS', 11, 'monsters/baron/death.md2', 3, 8.0 / 35.0, S_BOSS_DIE5) { A_Fall(); }
	S_BOSS_DIE5('BOSS', 12, 'monsters/baron/death.md2', 4, 8.0 / 35.0, S_BOSS_DIE6) { }
	S_BOSS_DIE6('BOSS', 13, 'monsters/baron/death.md2', 5, 8.0 / 35.0, S_BOSS_DIE7) { }
	S_BOSS_DIE7('BOSS', 14, 'monsters/baron/death.md2', 6, -1.0, none) { A_BossDeath(); }
	S_BOSS_RAISE1('BOSS', 14, 'monsters/baron/death.md2', 7, 8.0 / 35.0, S_BOSS_RAISE2) { }
	S_BOSS_RAISE2('BOSS', 13, 'monsters/baron/death.md2', 8, 8.0 / 35.0, S_BOSS_RAISE3) { }
	S_BOSS_RAISE3('BOSS', 12, 'monsters/baron/death.md2', 9, 8.0 / 35.0, S_BOSS_RAISE4) { }
	S_BOSS_RAISE4('BOSS', 11, 'monsters/baron/death.md2', 10, 8.0 / 35.0, S_BOSS_RAISE5) { }
	S_BOSS_RAISE5('BOSS', 10, 'monsters/baron/death.md2', 11, 8.0 / 35.0, S_BOSS_RAISE6) { }
	S_BOSS_RAISE6('BOSS', 9, 'monsters/baron/death.md2', 12, 8.0 / 35.0, S_BOSS_RAISE7) { }
	S_BOSS_RAISE7('BOSS', 8, 'monsters/baron/death.md2', 13, 8.0 / 35.0, S_BOSS_RUN1) { }
}

defaultproperties
{
	Health = 1000;
	Radius = 24.0;
	Height = 64.0;
	Mass = 1000.0;
	StepSpeed = 8.0;
	PainChance = 0.1953125;
	ImuneMissileType = BruiserShot;
	IdleState = S_BOSS_STND;
	SeeState = S_BOSS_RUN1;
	MeleeState = S_BOSS_ATK1;
	MissileState = S_BOSS_ATK1;
	PainState = S_BOSS_PAIN;
	DeathState = S_BOSS_DIE1;
	RaiseState = S_BOSS_RAISE1;
	SightSound = 'baron/sight';
	ActiveSound = 'baron/active';
	PainSound = 'baron/pain';
	DeathSound = 'baron/death';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2006/03/12 19:54:09  dj_jl
//  States as objects, added state variable type.
//
//  Revision 1.7  2006/02/15 23:32:09  dj_jl
//  Moved all server progs global variables to classes.
//
//  Revision 1.6  2005/12/27 22:22:27  dj_jl
//  Created level info class, moved action special handling to it.
//
//  Revision 1.5  2005/11/17 23:05:22  dj_jl
//  Renamed sounds.
//
//  Revision 1.4  2005/03/01 14:39:31  dj_jl
//  Big update of line specials.
//
//  Revision 1.3  2003/11/12 16:48:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.2  2003/07/11 16:47:38  dj_jl
//  Made array of players with pointers
//
//  Revision 1.1  2002/10/26 16:32:19  dj_jl
//  New style of defining classes.
//
//**************************************************************************
