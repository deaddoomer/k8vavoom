//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Fist : Weapon;

//===========================================================================
//
//  A_Punch
//
//===========================================================================

final void A_Punch()
{
	int			damage;
	TAVec		aimAngles;
	TVec		dir;
	EntityEx	AimTarget;

	damage = (P_Random() % 10 + 1) << 1;

	if (Player(Owner.Player).Powers[pw_strength])
		damage *= 10;

	aimAngles = Owner.Angles;
	aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
		Random()) * 45.0 / 8.0);
	AimTarget = Actor(Owner).AimLineAttack(dir, aimAngles, Actor::MELEERANGE);
	Actor(Owner).LineAttack(dir, Actor::MELEERANGE, damage, BulletPuff);

	// turn to face target
	if (AimTarget)
	{
		Owner.PlaySound('*fist', CHAN_WEAPON);
		Owner.Angles.yaw = atan2(
			AimTarget.Origin.y - Owner.Origin.y,
			AimTarget.Origin.x - Owner.Origin.x);
		Owner.Player.bFixAngle = true;
	}
}

__states__
{
	S_PUNCH('PUNG', 0, 1.0 / 35.0, S_PUNCH) = A_WeaponReady
	S_PUNCHDOWN('PUNG', 0, 1.0 / 35.0, S_PUNCHDOWN) = A_Lower
	S_PUNCHUP('PUNG', 0, 1.0 / 35.0, S_PUNCHUP) = A_Raise
	S_PUNCH1('PUNG', 1, 4.0 / 35.0, S_PUNCH2) = none
	S_PUNCH2('PUNG', 2, 4.0 / 35.0, S_PUNCH3) = A_Punch
	S_PUNCH3('PUNG', 3, 5.0 / 35.0, S_PUNCH4) = none
	S_PUNCH4('PUNG', 2, 4.0 / 35.0, S_PUNCH5) = none
	S_PUNCH5('PUNG', 1, 5.0 / 35.0, S_PUNCH) = A_ReFire
}

defaultproperties
{
	UpState = S_PUNCHUP;
	DownState = S_PUNCHDOWN;
	ReadyState = S_PUNCH;
	AttackState = S_PUNCH1;
	PlayerModelVersion = 1;
}
