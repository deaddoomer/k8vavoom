//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Cyberdemon : Pawn
	__mobjinfo__(16);

//==========================================================================
//
//  A_Hoof
//
//  Cyberdemon move with hoof sound.
//
//==========================================================================

void A_Hoof(void)
{
	PlaySound('CyberWalk1', CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//  A_Metal
//
//  Cyberdemon move with metal sound.
//
//==========================================================================

void A_Metal(void)
{
	PlaySound('CyberWalk2', CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//  A_CyberAttack
//
//  Cyberdemon attack.
//
//==========================================================================

void A_CyberAttack(void)
{
	if (!Enemy)
		return;

	A_FaceTarget();
	SpawnMissile(Enemy, Rocket);
}

//==========================================================================
//
//  A_BossDeath
//
//  Possibly trigger special effects if on first boss level
//
//==========================================================================

void A_BossDeath(void)
{
	string mapname;
	int i;
	Actor Other;
	int args[5];

	mapname = ARR2STR(level->mapname);
	if (strcmp(mapname, "E2M8") && strcmp(mapname, "E4M6"))
	{
		//  Not a boss level
		return;
	}

	// make sure there is a player alive for victory
	for (i = 0; i < MAXPLAYERS; i++)
		if (svvars->Players[i] && svvars->Players[i].bSpawned && svvars->Players[i].Health > 0)
			break;

	if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game

	// scan the remaining thinkers to see if all bosses are dead
	FOREACH(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other boss not dead
			return;
		}
	}

	// victory!
	if (!strcmp(mapname, "E4M6"))
	{
		args[0] = 666;
		args[1] = 64;
		args[2] = 150;
		args[3] = 0;
		args[4] = 0;
		EV_DoDoor(NULL, &args[0], doorOpen);
		return;
	}

	G_ExitLevel();
}

__states__
{
	S_CYBER_STND('CYBR', 0, 'monsters/cyber/base.md2', 0, 10.0 / 35.0, S_CYBER_STND2) { A_Look(); }
	S_CYBER_STND2('CYBR', 1, 'monsters/cyber/base.md2', 1, 10.0 / 35.0, S_CYBER_STND) { A_Look(); }
	S_CYBER_RUN1('CYBR', 0, 'monsters/cyber/base.md2', 2, 3.0 / 35.0, S_CYBER_RUN2) { A_Hoof(); }
	S_CYBER_RUN2('CYBR', 0, 'monsters/cyber/base.md2', 3, 3.0 / 35.0, S_CYBER_RUN3) { A_Chase(); }
	S_CYBER_RUN3('CYBR', 1, 'monsters/cyber/base.md2', 4, 3.0 / 35.0, S_CYBER_RUN4) { A_Chase(); }
	S_CYBER_RUN4('CYBR', 1, 'monsters/cyber/base.md2', 5, 3.0 / 35.0, S_CYBER_RUN5) { A_Chase(); }
	S_CYBER_RUN5('CYBR', 2, 'monsters/cyber/base.md2', 6, 3.0 / 35.0, S_CYBER_RUN6) { A_Chase(); }
	S_CYBER_RUN6('CYBR', 2, 'monsters/cyber/base.md2', 7, 3.0 / 35.0, S_CYBER_RUN7) { A_Chase(); }
	S_CYBER_RUN7('CYBR', 3, 'monsters/cyber/base.md2', 8, 3.0 / 35.0, S_CYBER_RUN8) { A_Metal(); }
	S_CYBER_RUN8('CYBR', 3, 'monsters/cyber/base.md2', 9, 3.0 / 35.0, S_CYBER_RUN1) { A_Chase(); }
	S_CYBER_ATK1('CYBR', 4, 'monsters/cyber/base.md2', 10, 6.0 / 35.0, S_CYBER_ATK2) { A_FaceTarget(); }
	S_CYBER_ATK2('CYBR', 5, 'monsters/cyber/attack.md2', 0, 12.0 / 35.0, S_CYBER_ATK3) { A_CyberAttack(); }
	S_CYBER_ATK3('CYBR', 4, 'monsters/cyber/base.md2', 10, 12.0 / 35.0, S_CYBER_ATK4) { A_FaceTarget(); }
	S_CYBER_ATK4('CYBR', 5, 'monsters/cyber/attack.md2', 0, 12.0 / 35.0, S_CYBER_ATK5) { A_CyberAttack(); }
	S_CYBER_ATK5('CYBR', 4, 'monsters/cyber/base.md2', 10, 12.0 / 35.0, S_CYBER_ATK6) { A_FaceTarget(); }
	S_CYBER_ATK6('CYBR', 5, 'monsters/cyber/attack.md2', 0, 12.0 / 35.0, S_CYBER_RUN1) { A_CyberAttack(); }
	S_CYBER_PAIN('CYBR', 6, 'monsters/cyber/base.md2', 11, 10.0 / 35.0, S_CYBER_RUN1) { A_Pain(); }
	S_CYBER_DIE1('CYBR', 7, 'monsters/cyber/death.md2', 0, 10.0 / 35.0, S_CYBER_DIE2) { }
	S_CYBER_DIE2('CYBR', 8, 'monsters/cyber/death.md2', 1, 10.0 / 35.0, S_CYBER_DIE3) { A_Scream(); }
	S_CYBER_DIE3('CYBR', 9, 'monsters/cyber/death.md2', 2, 10.0 / 35.0, S_CYBER_DIE4) { }
	S_CYBER_DIE4('CYBR', 10, 'monsters/cyber/death.md2', 3, 10.0 / 35.0, S_CYBER_DIE5) { }
	S_CYBER_DIE5('CYBR', 11, 'monsters/cyber/death.md2', 4, 10.0 / 35.0, S_CYBER_DIE6) { }
	S_CYBER_DIE6('CYBR', 12, 'monsters/cyber/death.md2', 5, 10.0 / 35.0, S_CYBER_DIE7) { A_Fall(); }
	S_CYBER_DIE7('CYBR', 13, 'monsters/cyber/death.md2', 6, 10.0 / 35.0, S_CYBER_DIE8) { }
	S_CYBER_DIE8('CYBR', 14, 'monsters/cyber/death.md2', 7, 10.0 / 35.0, S_CYBER_DIE9) { }
	S_CYBER_DIE9('CYBR', 15, 'monsters/cyber/death.md2', 8, 30.0 / 35.0, S_CYBER_DIE10) { }
	S_CYBER_DIE10('CYBR', 15, 'monsters/cyber/death.md2', 9, -1.0, S_NULL) { A_BossDeath(); }
}

defaultproperties
{
	Health = 4000;
	Radius = 40.0;
	Height = 110.0;
	Mass = 1000.0;
	StepSpeed = 16.0;
	PainChance = 0.078125;
	MissileChance = 160.0;
	bBoss = true;
	bTriggerHappy = true;
	IdleState = S_CYBER_STND;
	SeeState = S_CYBER_RUN1;
	MissileState = S_CYBER_ATK1;
	PainState = S_CYBER_PAIN;
	DeathState = S_CYBER_DIE1;
	SightSound = 'CyberSight';
	ActiveSound = 'DemonActive';
	PainSound = 'DemonPain';
	DeathSound = 'CyberDeath';
}

//**************************************************************************
//
//  $Log$
//  Revision 1.3  2003/11/12 16:48:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.2  2003/07/11 16:47:38  dj_jl
//  Made array of players with pointers
//
//  Revision 1.1  2002/10/26 16:32:19  dj_jl
//  New style of defining classes.
//
//**************************************************************************
