//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : EntityEx
	abstract;

// follow a player exlusively for 3 seconds
const int BASETHRESHOLD		= 100;

const float FLOATSPEED		= 140.0;

const float MAXMOVE			= 1050.0;
const float STOPSPEED		= 2.1875;

const float BOUNCE_VAL		= 1.5;

const float MELEERANGE		= 64.0;
const float MISSILERANGE	= (32.0 * 64.0);

//  States
state IdleState;
state SeeState;
state PainState;
state MeleeState;
state MissileState;
state DeathState;
state GibsDeathState;
state RaiseState;
state GibsState;

//	Sounds
name SightSound;
name ActiveSound;
name AttackSound;
name PainSound;
name DeathSound;

//	Flags
bool bSpecial;		// call P_SpecialThing when touched
bool bShootable;	// Can be hit.
bool bAmbush;
bool bJustHit;		// try to attack right back
bool bJustAttacked;	// take at least one step before attacking
bool bSpawnCeiling;	// hang from ceiling instead of floor
// movement flags
bool bPickUp;		// for players to pick up items
bool bSlide;		// keep info about sliding along walls
bool bTeleport;		// don't cross lines or look at heights
bool bMissile;		// don't hit same species, explode on block
bool bDropped;		// dropped by a demon, not level spawned
bool bNoBlood;		// don't bleed when shot (use puff)
bool bInFloat;		// floating to a height for a move, don't
			// auto float to target's height
bool bCountKill;	// count towards intermission kill total
bool bCountItem;	// count towards intermission item total
bool bActivateImpact;	// an MF_MISSILE mobj can activate
			// SPAC_IMPACT
bool bActivatePushWall;	// mobj can push walls
bool bActivateMCross;	// can activate monster cross lines
bool bActivatePCross;	// can activate projectile cross lines
bool bDormant;		// thing is dormant
bool bBounce;
bool bWaterJump;
bool bSkullFly;		// skull in flight
bool bNoDeathmatch;
bool bMonster;
bool bTelestomp;
bool bTriggerHappy;
bool bNeverTarget;
bool bNoGrudge;
bool bNoGravKill;
bool bBoss;
bool bNoRespawn;
bool bWindThrust;
bool bNoTeleport;
bool bStaticLight;	// Static light source.
bool bFaster;
bool bFastMelee;
bool bDehackedSpecial;	// Old style special handling

//  Params
float Speed;
float StepSpeed;
float PainChance;
int GibsHealth;

// Thing being chased/attacked (or NULL).
Actor Enemy;
// The originator for missiles.
Actor Instigator;

// Player number last looked for.
int LastLook;

// For nightmare respawn.
mthing_t SpawnPoint;

int MissileDamage;	// For missiles

// Reaction time: if non 0, don't attack yet.
int ReactionCount;
// Used by player to freeze a bit after teleporting.
float ReactionTime;

// If >0, the target will be chased
// no matter what (even if shot)
int Threshold;

// Movement direction, movement generation (zig-zagging).
int MoveDir;	// 0-7
int MoveCount;	// when 0, select a new dir

float MissileChance;
float MissileMinRange;
float MissileMaxRange;
class<Actor> ImuneMissileType;

string PickupMessage;

float bombdamage;

Actor CorpseHit;
float viletryx;
float viletryy;

// Height if not aiming up or down
// ???: use slope for monsters?
float aim_z;
float aim_range;
float aim_slope;
TVec aim_dir;
float aim_topslope;
float aim_bottomslope;	// slopes to top and bottom of target
Actor linetarget;	// who got hit (or NULL)
float aim_range2d;

float shoot_range;
TVec shoot_origin;
TVec shoot_dir;
int la_damage;
TVec shoot_linestart;
TVec shoot_lineend;

// Static light parameters.
TVec LightOffset;
int LightColour;
float LightRadius;

//===========================================================================
//
//  Spawn
//
//===========================================================================

Actor Spawn(class<Actor> type, TVec AOrigin)
{
	Actor A;

	A = Actor(NewMobjThinker(type));

	A.Origin = AOrigin;
	A.OnMapSpawn(NULL);
	return A;
}

//===========================================================================
//
//  SetInstigator
//
//===========================================================================

void SetInstigator(Entity NewInstigator)
{
	Instigator = Actor(NewInstigator);
}

//===========================================================================
//
//  PlaySightSound
//
//===========================================================================

void PlaySightSound()
{
	if (SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE);
	}
}

//===========================================================================
//
//  SetDropped
//
//===========================================================================

void SetDropped()
{
	bDropped = true;
}

//===========================================================================
//
//  StartFloatBob
//
//===========================================================================

void StartFloatBob(Entity Src)
{
}

//===========================================================================
//
//  SaveFloatBobOffset
//
//===========================================================================

void SaveFloatBobOffset()
{
}

//===========================================================================
//
//  ThingDestroy
//
//===========================================================================

bool ThingDestroy()
{
	if (bShootable)
	{
		Damage(none, none, 10000);
		return true;
	}
	return false;
}

//===========================================================================
//
//  ThingDamage
//
//===========================================================================

void ThingDamage(int Amount)
{
	Damage(none, none, Amount);
}

//===========================================================================
//
//  IsTeleportSpot
//
//===========================================================================

bool IsTeleportSpot()
{
	return !!TeleportSpot(self);
}

//===========================================================================
//
//  IsTeleportSpot2
//
//===========================================================================

bool IsTeleportSpot2()
{
	return !!TeleportSpot2(self);
}

//===========================================================================
//
//  CanTeleport
//
//===========================================================================

bool CanTeleport()
{
	return !bNoTeleport;
}

//===========================================================================
//
//  SetPainState
//
//===========================================================================

void SetPainState()
{
	SetState(PainState);
}

//===========================================================================
//
//  IsPointPusher
//
//===========================================================================

bool IsPointPusher()
{
	return !!PointPusher(self);
}

//===========================================================================
//
//  IsPointPuller
//
//===========================================================================

bool IsPointPuller()
{
	return !!PointPuller(self);
}

//===========================================================================
//
//  CanWindThrust
//
//===========================================================================

bool CanWindThrust()
{
	return bWindThrust;
}

//===========================================================================
//
//  GetPlayerViewHeight
//
//===========================================================================

float GetPlayerViewHeight()
{
	return Player(Player).ViewHeight;
}

//===========================================================================
//
//  MoveThing
//
//===========================================================================

bool MoveThing(TVec Pos, bool Fog)
{
	TVec OldOrg = Origin;

	UnlinkFromWorld();
	Origin = Pos;
	LinkToWorld();
	if (TestLocation())
	{
		if (Fog)
		{
			LineSpecialLevelInfo(Level).SpawnTeleportFog(Pos);
			LineSpecialLevelInfo(Level).SpawnTeleportFog(OldOrg);
		}
		return true;
	}
	else
	{
		UnlinkFromWorld();
		Origin = OldOrg;
		LinkToWorld();
		return false;
	}
}

//==========================================================================
//
//	GetStateTime
//
//==========================================================================

float GetStateTime(state AState, float AStateTime)
{
	if (Level.Game.fastparm)
	{
		if (bFaster && StateIsInRange(AState, SeeState, none, 8))
		{
			AStateTime /= 2.0;
		}
		if (bFastMelee && StateIsInRange(AState, MeleeState, none, 3))
		{
			AStateTime /= 2.0;
		}
	}
	return AStateTime;
}

//==========================================================================
//
//	HideSpecial
//
//==========================================================================

void HideSpecial()
{
	// only respawn items in deathmatch
	if ((Level.Game.deathmatch == 2 || Level.Game.deathmatch == 3) && !bDropped && !bNoRespawn)
	{
		SetState(S_DORMANT_PICKUP1);
	}
	else
	{
		Remove();
	}
}

//==========================================================================
//
//	HandlePickup
//
//==========================================================================

bool HandlePickup(Actor Toucher)
{
	return false;
}

//==========================================================================
//
//	HandleDehackedPickup
//
//==========================================================================

bool HandleDehackedPickup(Actor Toucher)
{
	int i;
	name sound = 'misc/i_pkup';

	// Identify by sprite.
	// armor
	name SpriteName = GetStateSpriteName(State);
	if (SpriteName == 'ARM1')
	{
		if (!Player(Toucher.Player).GiveArmor(1))
			return false;
		Toucher.Player.cprint("$gotarmor");
	}
	else if (SpriteName == 'ARM2')
	{
		if (!Player(Toucher.Player).GiveArmor(2))
			return false;
		Toucher.Player.cprint("$gotmega");
	}
		// bonus items
	else if (SpriteName == 'BON1')
	{
		Toucher.Player.Health++;	// can go over 100%
		if (Toucher.Player.Health > 200)
			Toucher.Player.Health = 200;
		Toucher.Health = Toucher.Player.Health;
		Toucher.Player.cprint("$goththbonus");
	}
	else if (SpriteName == 'BON2')
	{
		Player(Toucher.Player).ArmorPoints++;	// can go over 100%
		if (Player(Toucher.Player).ArmorPoints > 200)
			Player(Toucher.Player).ArmorPoints = 200;
		if (!Player(Toucher.Player).ArmorType)
			Player(Toucher.Player).ArmorType = 1;
		Toucher.Player.cprint("$gotarmbonus");
	}
	else if (SpriteName == 'SOUL')
	{
		Toucher.Player.Health += MainGameInfo(Level.Game).SOULSPHERE_HEALTH;
		if (Toucher.Player.Health > MainGameInfo(Level.Game).SOULSPHERE_MAX)
			Toucher.Player.Health = MainGameInfo(Level.Game).SOULSPHERE_MAX;
		Toucher.Player.MO.Health = Toucher.Player.Health;
		Toucher.Player.cprint("$gotsuper");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'MEGA')
	{
		Toucher.Player.Health = MainGameInfo(Level.Game).MEGASPHERE_HEALTH;
		Toucher.Health = Toucher.Player.Health;
		Player(Toucher.Player).GiveArmor(2);
		Toucher.Player.cprint("$gotmsphere");
		sound = 'misc/p_pkup';
	}
		// cards
		// leave cards for everyone
	else if (SpriteName == 'BKEY')
	{
		if (Player(Toucher.Player).GiveCard(it_bluecard))
			Toucher.Player.cprint("$gotbluecard");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'YKEY')
	{
		if (Player(Toucher.Player).GiveCard(it_yellowcard))
			Toucher.Player.cprint("$gotyelwcard");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'RKEY')
	{
		if (Player(Toucher.Player).GiveCard(it_redcard))
			Toucher.Player.cprint("$gotredcard");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'BSKU')
	{
		if (Player(Toucher.Player).GiveCard(it_blueskull))
			Toucher.Player.cprint("$gotblueskul");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'YSKU')
	{
		if (Player(Toucher.Player).GiveCard(it_yellowskull))
			Toucher.Player.cprint("$gotyelwskul");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'RSKU')
	{
		if (Player(Toucher.Player).GiveCard(it_redskull))
			Toucher.Player.cprint("$gotredskull");
		if (Level.Game.netgame)
			return false;
	}
		// medikits, heals
	else if (SpriteName == 'STIM')
	{
		if (!Player(Toucher.Player).GiveBody(10, Player::MAXHEALTH))
			return false;
		Toucher.Player.cprint("$gotstim");
	}
	else if (SpriteName == 'MEDI')
	{
		if (!Player(Toucher.Player).GiveBody(25, Player::MAXHEALTH))
			return false;

		if (Toucher.Player.Health < 25)
			Toucher.Player.cprint("$gotmedineed");
		else
			Toucher.Player.cprint("$gotmedikit");
	}
		// power ups
	else if (SpriteName == 'PINV')
	{
		if (!Player(Toucher.Player).GivePower(pw_invulnerability))
			return false;
		Toucher.Player.cprint("$gotinvul");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'PSTR')
	{
		if (!Player(Toucher.Player).GivePower(pw_strength))
			return false;
		Toucher.Player.cprint("$gotberserk");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'PINS')
	{
		if (!Player(Toucher.Player).GivePower(pw_invisibility))
			return false;
		Toucher.Player.cprint("$gotinvis");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'SUIT')
	{
		if (!Player(Toucher.Player).GivePower(pw_ironfeet))
			return false;
		Toucher.Player.cprint("$gotsuit");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'PVIS')
	{
		if (!Player(Toucher.Player).GivePower(pw_infrared))
			return false;
		Toucher.Player.cprint("$gotvisor");
		sound = 'misc/p_pkup';
	}
		//  Items
	else if (SpriteName == 'PMAP')
	{
		if (!Player(Toucher.Player).GiveItem(IT_ALL_MAP))
			return false;
		Toucher.Player.cprint("$gotmap");
		sound = 'misc/p_pkup';
	}
		// ammo
	else if (SpriteName == 'CLIP')
	{
		if (bDropped)
		{
			if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_clip, MainGameInfo(Level.Game).clipammo[DoomDefs::am_clip] / 2))
				return false;
		}
		else
		{
			if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_clip, MainGameInfo(Level.Game).clipammo[DoomDefs::am_clip]))
				return false;
		}
		Toucher.Player.cprint("$gotclip");
	}
	else if (SpriteName == 'AMMO')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_clip, 5 * MainGameInfo(Level.Game).clipammo[DoomDefs::am_clip]))
			return false;
		Toucher.Player.cprint("$gotclipbox");
	}
	else if (SpriteName == 'ROCK')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_misl, MainGameInfo(Level.Game).clipammo[DoomDefs::am_misl]))
			return false;
		Toucher.Player.cprint("$gotrocket");
	}
	else if (SpriteName == 'BROK')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_misl, 5 * MainGameInfo(Level.Game).clipammo[DoomDefs::am_misl]))
			return false;
		Toucher.Player.cprint("$gotrockbox");
	}
	else if (SpriteName == 'CELL')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_cell, MainGameInfo(Level.Game).clipammo[DoomDefs::am_cell]))
			return false;
		Toucher.Player.cprint("$gotcell");
	}
	else if (SpriteName == 'CELP')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_cell, 5 * MainGameInfo(Level.Game).clipammo[DoomDefs::am_cell]))
			return false;
		Toucher.Player.cprint("$gotcellbox");
	}
	else if (SpriteName == 'SHEL')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_shell, MainGameInfo(Level.Game).clipammo[DoomDefs::am_shell]))
			return false;
		Toucher.Player.cprint("$gotshells");
	}
	else if (SpriteName == 'SBOX')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_shell, 5 * MainGameInfo(Level.Game).clipammo[DoomDefs::am_shell]))
			return false;
		Toucher.Player.cprint("$gotshellbox");
	}
	else if (SpriteName == 'BPAK')
	{
		if (!Player(Toucher.Player).Backpack)
		{
			Player(Toucher.Player).Backpack = true;
			for (i = 0; i < DoomDefs::NUMAMMO; i++)
				Player(Toucher.Player).MaxAmmo[i] *= 2;
		}
		for (i = 0; i < DoomDefs::NUMAMMO; i++)
		{
			Player(Toucher.Player).GiveAmmo(i, MainGameInfo(Level.Game).clipammo[i]);
		}
		Toucher.Player.cprint("$gotbackpack");
	}
		// weapons
	else if (SpriteName == 'BFUG')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_bfg, false))
			return false;
		Toucher.Player.cprint("$gotbfg9000");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'MGUN')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_chaingun, bDropped))
			return false;
		Toucher.Player.cprint("$gotchaingun");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'CSAW')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_chainsaw, false))
			return false;
		Toucher.Player.cprint("$gotchainsaw");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'LAUN')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_missile, false))
			return false;
		Toucher.Player.cprint("$gotlauncher");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'PLAS')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_plasma, false))
			return false;
		Toucher.Player.cprint("$gotplasma");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'SHOT')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_shotgun, bDropped))
			return false;
		Toucher.Player.cprint("$gotshotgun");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'SGN2')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_supershotgun, bDropped))
			return false;
		Toucher.Player.cprint("$gotshotgun2");
		sound = 'misc/w_pkup';
	}
	Toucher.PlaySound(sound, CHAN_ITEM);
	return true;
}

//==========================================================================
//
//	TouchSpecial
//
//==========================================================================

void TouchSpecial(Actor Toucher)
{
	if (!Toucher.bPickUp)
	{
		// can't remove thing
		return;
	}
	// Dead thing touching.
	// Can happen with a sliding player corpse.
	if (Toucher.Health <= 0)
		return;

	if (bDehackedSpecial)
	{
		if (!HandleDehackedPickup(Toucher))
		{
			return;
		}
	}
	else
	{
		if (!HandlePickup(Toucher))
		{
			return;
		}
	}
	if (Special)
	{
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2], Args[3],
			Args[4], NULL, 0, Toucher);
		Special = 0;
	}
	if (bCountItem)
	{
		Toucher.Player.ItemCount++;
		Level.Game.level->currentitems++;
	}
	HideSpecial();
	Player(Toucher.Player).BonusFlash += Player::BONUSADD;
}

//==========================================================================
//
//  SetOrigin2
//
//==========================================================================

void SetOrigin2(TVec origin)
{
	Origin = origin;

	// set subsector and/or block links
	LinkToWorld();

	if (origin.z == ONFLOORZ)
	{
		Origin.z = FloorZ;
	}
	else if (origin.z == ONCEILINGZ)
	{
		Origin.z = CeilingZ - Height;
	}
}

//==========================================================================
//
//	OnMapSpawn
//
//==========================================================================

void OnMapSpawn(mthing_t * mthing)
{
	if (bNoDeathmatch && Level.Game.deathmatch)
	{
		Remove();
		return;
	}
	if (bMonster && Level.Game.nomonsters)
	{
		Remove();
		return;
	}

	bCheckLineBlocking = false;
	bCheckLineBlockMonsters = false;
	if (!bMissile)
	{
		bCheckLineBlocking = true;
		if (Class != DoomPlayer)
		{
			bCheckLineBlockMonsters = true;
		}
	}
	else
	{
		MaxStepHeight = 4.0;
	}

	if (Level.Game.gameskill == sk_nightmare)
	{
		ReactionCount = 0;
	}

	LastLook = P_Random() % MAXPLAYERS;
	// do not set the state with SetState,
	// because action routines can not be called yet
	SetInitialState(IdleState);

	if (mthing)
	{
		float x;
		float y;
		float z;

		Level.CopyMThing(mthing, &SpawnPoint);

		x = mthing->x;
		y = mthing->y;
		if (bSpawnCeiling)
			z = ONCEILINGZ;
		else
			z = ONFLOORZ;
		SetOrigin2(vector(x, y, z));
		if (z == ONFLOORZ)
		{
			Origin.z += mthing->height;
		}
		else if (z == ONCEILINGZ)
		{
			Origin.z -= mthing->height;
		}
		LinkToWorld();

		TID = mthing->tid;
		Special = mthing->special;
		Args[0] = mthing->arg1;
		Args[1] = mthing->arg2;
		Args[2] = mthing->arg3;
		Args[3] = mthing->arg4;
		Args[4] = mthing->arg5;
		if (StateTime > 0.0)
			StateTime = 0.1 + Random() * StateTime;
		if (bCountKill)
			Level.Game.level->totalkills++;
		if (bCountItem)
			Level.Game.level->totalitems++;

		Angles.yaw = itof(45 * (mthing->angle / 45));
		if (mthing->options & MTF_AMBUSH)
		{
			bAmbush = true;
		}
		if (mthing->options & MTF_DORMANT)
		{
			bDormant = true;
			StateTime = -1.0;
		}
	}
	else
	{
		SetOrigin2(Origin);
	}

	if (bStaticLight && mthing && !TID)
	{
		if (LightColour == 0xffffffff)
		{
			Level.AddStaticLight(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius);
		}
		else
		{
			Level.AddStaticLightRGB(Origin + LightOffset, mthing->arg1 ?
				itof(mthing->arg1) * 8.0 : LightRadius, LightColour);
		}
	}
}

//==========================================================================
//
//	Activate
//
//==========================================================================

bool Activate()
{
	if (bMonster)
	{
		// Monster
		if (bDormant)
		{
			bDormant = false;
			StateTime = 0.1;
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

bool Deactivate()
{
	if (bMonster)
	{
		// Monster
		if (!bDormant)
		{
			bDormant = true;
			StateTime = -1.0;
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  ExplodeMissile
//
//==========================================================================

void ExplodeMissile()
{
	Velocity = vector(0.0, 0.0, 0.0);

	SetState(DeathState);

	StateTime -= Random() * 0.1;

	if (StateTime < 0.1)
		StateTime = 0.1;

	bMissile = false;

	if (DeathSound)
		PlaySound(DeathSound, CHAN_VOICE);

	if (!(Effects & DoomDefs::EF_ROCKET) && (Effects & DoomDefs::EF_DLIGHT_MASK))
	{
		MSG_Select(MSG_SV_DATAGRAM);
		if (MSG_CheckSpace(8))
		{
			MSG_WriteByte(DoomDefs::svc_explosion2);
			MSG_WriteByte(Effects & DoomDefs::EF_DLIGHT_MASK);
			MSG_WriteShort(ftoi(Origin.x));
			MSG_WriteShort(ftoi(Origin.y));
			MSG_WriteShort(ftoi(Origin.z));
		}
		Effects &= ~DoomDefs::EF_DLIGHT_MASK;
	}
	Effects &= ~DoomDefs::EF_ROCKET;
}

//==========================================================================
//
//  CheckMissileSpawn
//
//  Moves the missile forward a bit and possibly explodes it right there.
//
//==========================================================================

bool CheckMissileSpawn()
{
	StateTime -= Random() * 0.1;
	if (StateTime < 0.1)
		StateTime = 0.1;

	// move a little forward so an angle can
	// be computed if it immediately explodes
	Origin = Origin + Velocity * 0.0142857143;

	if (!TryMove(Origin))
	{
		ExplodeMissile();
		return false;
	}
	return true;
}

//==========================================================================
//
//  SpawnMissile
//
//==========================================================================

Actor SpawnMissile(Actor dest, class<Actor> type)
{
	Actor A;
	TVec dir;

	A = Spawn(type, Origin + vector(0.0, 0.0, 32.0));

	if (A.SightSound)
		A.PlaySound(A.SightSound, CHAN_VOICE);

	A.Instigator = self;	// where it came from

	if (dest)
	{
		dir = dest.Origin - Origin;
		// fuzzy player
		if (dest.Alpha < 1.0)
		{
			VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
		}
	}
	else
	{
		dir = Velocity;
	}
	dir = Normalise(dir);
	A.Velocity = dir * A.Speed;

	VectorAngles(&dir, &A.Angles);

	A.CheckMissileSpawn();

	return A;
}

//==========================================================================
//
//	Died
//
//==========================================================================

void Died(Actor source)
{
	bShootable = false;
	bFloat = false;
	bSkullFly = false;

	if (!bNoGravKill)
		bNoGravity = false;

	bDropOff = true;
	bCorpse = true;
	bNoPassMobj = true;
	Height /= 4.0;

	if (bCountKill && Special)
	{
		// Initiate monster death actions
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
			Args[3], Args[4], NULL, 0, self);
	}
	if (source && source.bIsPlayer)
	{
		// count for intermission
		if (bCountKill)
			source.Player.KillCount++;

		if (bIsPlayer)
		{
			if (source.Player.bIsBot)
			{
				Player(source.Player).Bot.Killed(self);
			}

			if (Player.bIsBot)
			{
				Player(Player).Bot.Died(source);
			}

			source.Player.FragsStats[Player.GetPlayerNum()]++;
			if (source == self)
			{
				Player.Frags--;
			}
			else
			{
				source.Player.Frags++;
			}
		}
	}
	else if (!Level.Game.netgame && bCountKill)
	{
		// count all monster deaths,
		// even those caused by other monsters
		Level.Game.Players[0].KillCount++;
	}
	if (bCountKill)
		Level.Game.level->currentkills++;

	if (bIsPlayer)
	{
		// count environment kills against you
		if (!source)
		{
			Player.FragsStats[Player.GetPlayerNum()]++;
			Player.Frags--;
		}

		bSolid = false;
		Player.PlayerState = PST_DEAD;
		Player(Player).DropWeapon();
#ifdef FIXME
		if (Player == Players[consoleplayer] && automapactive)
		{
			// don't die in auto map,
			// switch view prior to dying
			AM_Stop();
		}
#endif
	}

	if (Health < GibsHealth && GibsDeathState)
	{
		if (bFixedModel)
		{
			bFixedModel = false;
			ModelSkinNum = 0;
		}
		SetState(GibsDeathState);
	}
	else
	{
		SetState(DeathState);
	}
	StateTime -= Random() * 0.1;

	if (StateTime < 0.1)
		StateTime = 0.1;

	DropStuff();
}

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff()
{
}

//==========================================================================
//
//	Damage
//
//  Damages both enemies and players.
//  "inflictor" is the thing that caused the damage, creature or missile,
// can be NULL (slime, etc).
//  "source" is the thing to target after taking damage, creature or NULL.
//  Source and inflictor are the same for melee attacks. Source can be NULL
// for slime, barrel explosions and other environmental stuff.
//
//==========================================================================

void Damage(Actor inflictor, Actor source, int damage)
{
	int saved;

	if (!bShootable)
		return;	// shouldn't happen...

	if (Health <= 0)
		return;

	if (bSkullFly)
	{
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(SeeState);
	}
	if (bDormant)
	{
		// Invulnerable, and won't wake up
		return;
	}

	if (bIsPlayer && Level.Game.gameskill == sk_baby)
		damage >>= 1;	// take half damage in trainer mode

	// Some close combat weapons should not
	// inflict thrust and push the victim out of reach,
	// thus kick away unless using the chainsaw.
	if (inflictor && bColideWithThings &&
		(!source || !source.bIsPlayer ||
			Player(source.Player).ReadyWeapon != DoomDefs::wp_chainsaw))
	{
		Velocity += (500.0 * itof(damage) / Mass) *
			Normalise(MobjCentre(self) - MobjCentre(inflictor));
	}

	// player specific
	if (bIsPlayer)
	{
		//	End of game hell hack.
		if ((Sector->special & SECSPEC_BASE_MASK) ==
			SECSPEC_DamageSuperHellslimeExit && damage >= Health)
		{
			damage = Health - 1;
		}

		// Below certain threshold,
		// ignore damage in GOD mode, or with INVUL power.
		if (damage < 1000 && ((Player(Player).Cheats & Player::CF_GODMODE) ||
			Player(Player).Powers[pw_invulnerability]))
		{
			return;
		}

		if (Player(Player).ArmorType)
		{
			if (Player(Player).ArmorType == 1)
				saved = damage / 3;
			else
				saved = damage / 2;

			if (Player(Player).ArmorPoints <= saved)
			{
				// armor is used up
				saved = Player(Player).ArmorPoints;
				Player(Player).ArmorType = 0;
			}
			Player(Player).ArmorPoints -= saved;
			damage -= saved;
		}
		Player.Health -= damage;	// mirror mobj health here for Dave
		if (Player.Health < 0)
			Player.Health = 0;

		Player(Player).Attacker = source;
		Player(Player).DamageFlash += itof(damage) / 35.0;	// add damage after armor / invuln

		if (Player(Player).DamageFlash > 3.0)
			Player(Player).DamageFlash = 3.0;	// teleport stomp does 10k points...
	}

	// do the damage    
	Health -= damage;
	if (Health <= 0)
	{
		Died(source);
		return;
	}

	if ((Random() < PainChance) && !bSkullFly)
	{
		bJustHit = true;	// fight back!
		SetState(PainState);
	}

	ReactionCount = 0;	// we're awake now...

	if ((!Threshold || bNoGrudge) &&
		source && source != self && !source.bNeverTarget)
	{
		// if not intent on another player,
		// chase after this one
		Enemy = source;
		Threshold = BASETHRESHOLD;
		if (State == IdleState && SeeState)
		{
			SetState(SeeState);
		}
	}

}

//==========================================================================
//
//  NightmareRespawn
//
//==========================================================================

void NightmareRespawn()
{
	float x;
	float y;
	float z;
	Actor A;
	mthing_t *mthing;

	x = SpawnPoint.x;
	y = SpawnPoint.y;

	// somthing is occupying it's position?
	if (!CheckPosition(vector(x, y, ONFLOORZ)))
		return;	// no respwan

	// spawn a teleport fog at old spot
	// because of removal of the body?
	A = Spawn(TeleportFog, vector(Origin.x, Origin.y, ONFLOORZ));

	// initiate teleport sound
	A.PlaySound('misc/teleport', CHAN_BODY);

	// spawn a teleport fog at the new spot
	A = Spawn(TeleportFog, vector(x, y, ONFLOORZ));

	A.PlaySound('misc/teleport', CHAN_BODY);

	// spawn the new monster
	mthing = &SpawnPoint;

	// spawn it
#ifdef FIXME
	if (info->Flags & MF_SPAWNCEILING)
		z = ONCEILINGZ;
	else
#endif
		z = ONFLOORZ;

	// inherit attributes from deceased one
	A = Spawn(class<Actor>(Class), vector(x, y, z));
	Level.CopyMThing(&SpawnPoint, &A.SpawnPoint);
	A.Angles.yaw = itof(45 * (mthing->angle / 45));

	if (mthing->options & MTF_AMBUSH)
		A.bAmbush = true;

	A.ReactionCount = 18;

	// remove the old monster,
	Remove();
}

//==========================================================================
//
//  TestLocation
//
//  Returns true if the mobj is not blocked by anything at its current
// location, otherwise returns false.
//
//==========================================================================

bool TestLocation()
{
	if (!bColideWithThings && !bColideWithWorld)
		return true;

	if (CheckPosition(Origin))
	{
		// XY is ok, now check Z
		if ((Origin.z < FloorZ) || (Origin.z + Height > CeilingZ))
		{
			// Bad Z
			return false;
		}
		return true;
	}
	return false;
}

//==========================================================================
//
//	Touch
//
//==========================================================================

bool Touch(Entity InOther)
{
	bool solid;
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// check for skulls slamming into things
	if (bSkullFly)
	{
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(IdleState);
		return false;	// stop moving
	}

	// missiles can hit other things
	if (bMissile)
	{
		if (Instigator && (Instigator.Class == Other.Class ||
			Class == Other.ImuneMissileType))
		{
			// Don't hit same species as originator.
			if (Other == Instigator)
				return true;

			if (Other.Class != DoomPlayer)
			{
				// Explode, but do no damage.
				// Let players missile other players.
				return false;
			}
		}

		if (!Other.bShootable)
		{
			// didn't do any damage
			return !Other.bSolid;
		}

		// damage / explode
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, Instigator, damage);
		// don't traverse any more
		return false;
	}

	// check for special pickup
	if (Other.bSpecial)
	{
		solid = Other.bSolid;
		Other.TouchSpecial(self);
		return !solid;
	}

	//return !Other.bSolid || Other.bNoClip;
	return !Other.bSolid;
}

//===========================================================================
//
//	CheckForPushSpecial
//
//===========================================================================

void CheckForPushSpecial(line_t * line, int side)
{
	if (line->special)
	{
		if (bActivatePushWall)
		{
			DoomLevelInfo(Level).ActivateLine(line, self, side, SPAC_PUSH);
		}
		else if (bActivateImpact)
		{
			DoomLevelInfo(Level).ActivateLine(line, bMissile ? Instigator :
				self, side, SPAC_IMPACT);
		}
	}
}

//==========================================================================
//
//	BlockedByLine
//
//==========================================================================

void BlockedByLine(line_t * ld)
{
	if (bBlasted)
	{
		Damage(none, none, ftoi(Mass) >> 5);
	}
	CheckForPushSpecial(ld, 0);
}

//==========================================================================
//
//  PushLine
//
//==========================================================================

void PushLine(tmtrace_t* tmtrace)
{
	if (bColideWithWorld)
	{
		int numSpecHitTemp;
		line_t *ld;
		int side;

		if (bBlasted)
		{
			Damage(none, none, ftoi(Mass) >> 5);
		}
		numSpecHitTemp = tmtrace->NumSpecHit;
		while (numSpecHitTemp > 0)
		{
			numSpecHitTemp--;
			// see if the line was crossed
			ld = tmtrace->SpecHit[numSpecHitTemp];
			side = PointOnPlaneSide(Origin, ld);
			CheckForPushSpecial(ld, side);
		}
	}
}

//==========================================================================
//
//	CrossSpecialLine
//
//==========================================================================

void CrossSpecialLine(line_t *ld, int side)
{
	if (bIsPlayer)
	{
		DoomLevelInfo(Level).ActivateLine(ld, self, side, SPAC_CROSS);
	}
	else if (bActivateMCross)
	{
		DoomLevelInfo(Level).ActivateLine(ld, self, side, SPAC_MCROSS);
	}
	else if (bActivatePCross)
	{
		DoomLevelInfo(Level).ActivateLine(ld, self, side, SPAC_PCROSS);
	}
	else if (ld->special == LNSPEC_Teleport)
	{
		//	Teleport hack
		DoomLevelInfo(Level).ActivateLine(ld, self, side, SPAC_MCROSS);
	}
}

//==========================================================================
//
//  Thrust
//
//==========================================================================

void Thrust(float angle, float move)
{
	Velocity.x += move * cos(angle) * 35.0;
	Velocity.y += move * sin(angle) * 35.0;
}

//==========================================================================
//
//  FaceActor
//
//  Returns 1 if 'source' needs to turn clockwise, or 0 if 'source' needs
// to turn counter clockwise.  'delta' is set to the amount 'source'
// needs to turn.
//
//==========================================================================

int FaceActor(Actor target, float *delta)
{
	float diff;
	float angle1;
	float angle2;

	angle1 = Angles.yaw;
	angle2 = atan2(target.Origin.y - Origin.y, target.Origin.x - Origin.x);
	if (angle2 > angle1)
	{
		diff = AngleMod360(angle2 - angle1);
		if (diff > 180.0)
		{
			*delta = 360.0 - diff;
			return 0;
		}
		else
		{
			*delta = diff;
			return 1;
		}
	}
	else
	{
		diff = AngleMod360(angle1 - angle2);
		if (diff > 180.0)
		{
			*delta = 360.0 - diff;
			return 1;
		}
		else
		{
			*delta = diff;
			return 0;
		}
	}
}

//**************************************************************************
//
//  OBJECT MOVEMENT
//
//**************************************************************************

//==========================================================================
//
//  XYMovement
//
//==========================================================================

void XYMovement(float DeltaTime)
{
	float ptryx;
	float ptryy;
	float xmove;
	float ymove;
	int special;

	if (bWindThrust)
	{
		special = Sector->special & SECSPEC_BASE_MASK;
		switch (special)
		{
		case SECSPEC_WindEastSlow:
		case SECSPEC_WindEastMedium:
		case SECSPEC_WindEastFast:
			Thrust(0.0, MainGameInfo(Level.Game).windTab[special - SECSPEC_WindEastSlow]);
			break;
		case SECSPEC_WindNorthSlow:
		case SECSPEC_WindNorthMedium:
		case SECSPEC_WindNorthFast:
			Thrust(90.0, MainGameInfo(Level.Game).windTab[special - SECSPEC_WindNorthSlow]);
			break;
		case SECSPEC_WindSouthSlow:
		case SECSPEC_WindSouthMedium:
		case SECSPEC_WindSouthFast:
			Thrust(270.0, MainGameInfo(Level.Game).windTab[special - SECSPEC_WindSouthSlow]);
			break;
		case SECSPEC_WindWestSlow:
		case SECSPEC_WindWestMedium:
		case SECSPEC_WindWestFast:
			Thrust(180.0, MainGameInfo(Level.Game).windTab[special - SECSPEC_WindWestSlow]);
			break;
		}
	}
	if (Velocity.x > MAXMOVE)
		Velocity.x = MAXMOVE;
	else if (Velocity.x < -MAXMOVE)
		Velocity.x = -MAXMOVE;

	if (Velocity.y > MAXMOVE)
		Velocity.y = MAXMOVE;
	else if (Velocity.y < -MAXMOVE)
		Velocity.y = -MAXMOVE;

	xmove = Velocity.x * DeltaTime;
	ymove = Velocity.y * DeltaTime;

	do
	{
		if (xmove > MAXMOVE / (35.0 * 2.0) || ymove > MAXMOVE / (35.0 * 2.0))
		{
			ptryx = Origin.x + xmove / 2.0;
			ptryy = Origin.y + ymove / 2.0;
			xmove /= 2.0;
			ymove /= 2.0;
		}
		else
		{
			ptryx = Origin.x + xmove;
			ptryy = Origin.y + ymove;
			xmove = 0.0;
			ymove = 0.0;
		}

		tmtrace_t tmtrace;
		if (!TryMoveEx(&tmtrace, vector(ptryx, ptryy, Origin.z)))
		{
			// blocked move
			if (bIsPlayer)
			{
				// try to slide along it
				SlideMove();
			}
			else if (bMissile)
			{
				if (bBounce)
				{
					//  Bounce against walls and non-killable ofjects
					if (tmtrace.BlockingMobj)
					{
						if (!tmtrace.BlockingMobj.bIsPlayer &&
							!Actor(tmtrace.BlockingMobj).bCountKill)
						{
							float speed;
							float angle;

							angle = AngleMod360(atan2(
								Origin.y - tmtrace.BlockingMobj.Origin.y,
								Origin.x - tmtrace.BlockingMobj.Origin.x) +
								(Random() * 16.0 - 8.0));
							speed = Length(Velocity);
							speed = speed * 0.75;
							Angles.yaw = angle;
							Velocity.x = speed * cos(angle);
							Velocity.y = speed * sin(angle);
							if (PainSound)
							{
								PlaySound(PainSound, CHAN_VOICE);
							}
						}
						else
						{
							// Struck a player/creature
							ExplodeMissile();
						}
					}
					else
					{
						// Struck a wall
						BounceWall(BOUNCE_VAL);
						if (PainSound)
						{
							PlaySound(PainSound, CHAN_VOICE);
						}
					}
					return;
				}

				// explode a missile
				if (tmtrace.CeilingLine &&
					tmtrace.CeilingLine->backsector &&
					tmtrace.CeilingLine->backsector->ceiling.pic == Level.Game.skyflatnum)
				{
					// Hack to prevent missiles exploding
					// against the sky.
					// Does not handle sky floors.
					Remove();
					return;
				}
				ExplodeMissile();
			}
			else
			{
				Velocity.x = 0.0;
				Velocity.y = 0.0;
			}
		}
	}
	while (xmove || ymove);
}

//==========================================================================
//
//	ZMovement
//
//==========================================================================

void ZMovement(float DeltaTime)
{
	float dist;
	float delta;
	float vdot;

	// check for smooth step up
	if (bIsPlayer && Origin.z < FloorZ)
	{
		Player(Player).ViewHeight -= FloorZ - Origin.z;
		Player(Player).DeltaViewHeight = (Player::VIEWHEIGHT - Player(Player).ViewHeight) * 4.0;
	}

	// adjust height
	Origin.z += Velocity.z * DeltaTime;

	if (bFloat && Enemy)
	{
		// float down towards enemy if too close
		if (!bSkullFly && !bInFloat)
		{
			dist = DistTo2(Enemy);

			delta = Enemy.Origin.z + Height / 2.0 - Origin.z;

			if (delta < 0.0 && dist < -(delta * 3.0))
				Origin.z -= FLOATSPEED * DeltaTime;
			else if (delta > 0.0 && dist < (delta * 3.0))
				Origin.z += FLOATSPEED * DeltaTime;
		}
	}

	// clip movement
	if (Origin.z <= FloorZ + 0.1)
	{
		// hit the floor

		vdot = DotProduct(Velocity, Floor->normal);
		// Note (id):
		//  somebody left this after the setting momz to 0,
		//  kinda useless there.
		if (bSkullFly)
		{
			// the skull slammed into something
			Velocity.z = -Velocity.z;
		}

		if (vdot < -0.1)
		{
			if (bIsPlayer && (vdot < -DEFAULT_GRAVITY * 0.25))
			{
				// Squat down.
				// Decrease ViewHeight for a moment
				// after hitting the ground (hard),
				// and utter appropriate sound.
				Player(Player).DeltaViewHeight = vdot / 8.0;
				PlaySound('*land', CHAN_VOICE);
			}
		}
		Origin.z = FloorZ;

		if (bMissile)
		{
			if (bColideWithWorld && !bBounce)
			{
				ExplodeMissile();
				return;
			}
			if (bBounce && PainSound && Length(Velocity) > 256.0)
			{
				PlaySound(PainSound, CHAN_VOICE);
			}
		}
	}

	if (Origin.z + Height > CeilingZ)
	{
		// hit the ceiling
		vdot = DotProduct(Velocity, Ceiling->normal);
		if (vdot < 0.0)
			Velocity -= vdot * Ceiling->normal;

		Origin.z = CeilingZ - Height;

		if (bSkullFly)
		{
			// the skull slammed into something
			Velocity.z = -Velocity.z;
		}

		if (bMissile)
		{
			if (bColideWithWorld && !bBounce)
			{
				ExplodeMissile();
				return;
			}
			if (bBounce && PainSound && Length(Velocity) > 256.0)
			{
				PlaySound(PainSound, CHAN_VOICE);
			}
		}
	}
}

//==========================================================================
//
//  ApplyFriction
//
//==========================================================================

void ApplyFriction()
{
	float dot;

	if ((bMissile || bSkullFly) && !bBounce)
		return;	// no friction for missiles ever

	if (Origin.z > FloorZ && !bOnMobj && WaterLevel < 2)
		return;	// no friction when airborne

	//  Clip velocity
	if (Origin.z <= FloorZ)
	{
		dot = DotProduct(Velocity, Floor->normal);
		if (dot < 0.0)
		{
			if (bBounce)
			{
				dot *= BOUNCE_VAL;
			}
			Velocity -= dot * Floor->normal;
		}
	}

	if (bCorpse)
	{
		// do not stop sliding if halfway off a step with some momentum
		if (Velocity.x > 0.25 * 35.0 || Velocity.x < -0.25 * 35.0 ||
			Velocity.y > 0.25 * 35.0 || Velocity.y < -0.25 * 35.0)
		{
			if (FloorZ != GetPlanePointZ(&Sector->floor, Origin))
				return;
		}
	}

	if (Velocity.x > -STOPSPEED && Velocity.x < STOPSPEED &&
		Velocity.y > -STOPSPEED && Velocity.y < STOPSPEED &&
		Velocity.z > -STOPSPEED && Velocity.z < STOPSPEED &&
		(!bIsPlayer || (!Player.ForwardMove && !Player.SideMove)))
	{
		if (bIsPlayer)
		{
			// if in a walking frame, stop moving
			if (StateIsInRange(State, SeeState, none, 4))
				SetState(IdleState);
		}
		Velocity = vector(0.0, 0.0, 0.0);
	}
	else
	{
		// slow down
		Velocity -= Velocity * (GetFriction() * Level.Game.frametime);
	}
}

//===========================================================================
//
//  GetFriction
//
//===========================================================================

float GetFriction()
{
	// slow down
	if (WaterLevel > 1)
	{
		return FRICTION_WATER;
	}
	if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow)
	{
		return FRICTION_LOW;
	}
	if (Sector->special & SECSPEC_FRICTION_MASK)
	{
		return Sector->Friction;
	}
	return FRICTION_NORMAL;
}

//===========================================================================
//
//  PlayerLandedOnThing
//
//===========================================================================

void PlayerLandedOnThing()
{
	Player(Player).DeltaViewHeight = Velocity.z / 8.0;
	if (Velocity.z < -DEFAULT_GRAVITY * 0.375)
	{
		PlaySound('*land', CHAN_VOICE);
	}
}

//==========================================================================
//
//	Physics
//
//==========================================================================

bool Physics(float DeltaTime)
{
	Actor			onmo;
	SectorThinker	SecThink;
	float			scrollx;
	float			scrolly;
	float			height;
	float			waterheight;	// killough 4/4/98: add waterheight

	if (Sector->AffectorData && bColideWithWorld)
	{

		// killough 3/7/98: Carry things on floor
		// killough 3/20/98: use new sector list which reflects true members
		// killough 3/27/98: fix carrier bug
		// killough 4/4/98: Underwater, carry things even w/o gravity

		// Move objects only if on floor or underwater,
		// non-floating, and clipped.

		for (SecThink = SectorThinker(Sector->AffectorData); SecThink;
			SecThink = SecThink.NextAffector)
		{
			if (!Scroller(SecThink))
			{
				continue;
			}
			scrollx = Scroller(SecThink).CarryScrollX;
			scrolly = Scroller(SecThink).CarryScrollY;
			if (!scrollx && !scrolly)
			{
				continue;
			}
			if (bNoGravity && (!Sector->heightsec ||
				(Sector->heightsec->bIgnoreHeightSec)))
			{
				continue;
			}
			height = GetPlanePointZ(&Sector->floor, Origin);
			if (Origin.z > height)
			{
				if (!Sector->heightsec || (Sector->heightsec->bIgnoreHeightSec))
				{
					continue;
				}

				waterheight = GetPlanePointZ(&Sector->heightsec->floor, Origin);
				if (waterheight > height && Origin.z >= waterheight)
				{
					continue;
				}
			}

			Velocity.x += scrollx;
			Velocity.y += scrolly;
		}
	}

	CheckWater();
	UpdateVelocity();

	// momentum movement
	if (Velocity.x || Velocity.y)
	{
		XYMovement(DeltaTime);
		if (IsDestroyed())
		{
			return false;	// mobj was removed
		}
	}
	else if (bSkullFly)
	{
		// the skull slammed into something
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		if (!SetState(IdleState))
		{
			return false;
		}
	}
	if (!bNoPassMobj && !bMissile)
	{
		// Handle Z momentum and gravity
		onmo = Actor(CheckOnmobj());
		if (onmo)
		{
			if (bIsPlayer)
			{
				if (Velocity.z < -DEFAULT_GRAVITY * 0.25 && !bFly)
				{
					PlayerLandedOnThing();
				}
			}
			if (onmo.Origin.z + onmo.Height - Origin.z <= MaxStepHeight)
			{
				if (bIsPlayer)
				{
					Player(Player).ViewHeight -=
						onmo.Origin.z + onmo.Height - Origin.z;
					Player(Player).DeltaViewHeight =
						(Player::VIEWHEIGHT - Player(Player).ViewHeight) * 4.0;
				}
				Origin.z = onmo.Origin.z + onmo.Height;
			}
			bOnMobj = true;
			Velocity.z = 0.0;
		}
		else
		{
			if ((Origin.z != FloorZ) || Velocity.z || onmo)
			{
				ZMovement(DeltaTime);
				bOnMobj = false;
			}
		}
		if (IsDestroyed())
		{
			return false;	// entity was removed
		}
	}
	else if ((Origin.z != FloorZ) || Velocity.z)
	{
		// Handle Z momentum and gravity
		ZMovement(DeltaTime);
		if (IsDestroyed())
		{
			return false;	// entity was removed
		}
	}
	return true;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	//  In my deathmatch mode remove dropped weapons after 30 seconds
	// because otherwise they are spawned fastar than player(s) can pick 
	// them up and the game is going slower and slower and slower ...
	if (bDropped && (Level.Game.deathmatch == 3))
	{
		MoveCount++;
		if (MoveCount >= 30 * 35)
		{
			Remove();
			return;
		}
	}

	if (!Physics(deltaTime))
	{
		return;
	}

	// cycle through states,
	// calling action functions at transitions
	if (StateTime != -1.0)
	{
		if (!AdvanceState(deltaTime))
			return;	// freed itself
	}
	else
	{
		// check for nightmare respawn
		if (!bCountKill)
			return;

		//  In my deathmatch mode monstars respawns very fast
		if (Level.Game.deathmatch == 3)
		{
			if (Level.Game.level->tictime & 31)
				return;

			if (P_Random() > 32)
				return;

			NightmareRespawn();
		}
		else
		{
			if (!MainGameInfo(Level.Game).respawnmonsters)
				return;

			MoveCount++;

			if (MoveCount < 12 * 35)
				return;

			if (Level.Game.level->tictime & 31)
				return;

			if (P_Random() > 4)
				return;

			NightmareRespawn();
		}
	}
}

//==========================================================================
//
//  HeightClip
//
//  Takes a valid thing and adjusts the thing->FloorZ, thing->CeilingZ, and
// possibly thing->z. This is called for all nearby monsters whenever a
// sector changes height. If the thing doesn't fit, the z will be set to the
// lowest value and false will be returned.
//
//==========================================================================

bool HeightClip()
{
	bool onfloor;

	onfloor = (Origin.z == FloorZ);

	tmtrace_t tmtrace;
	CheckRelPosition(&tmtrace, Origin);
	// what about stranding a monster partially off an edge?

	Floor = tmtrace.Floor;
	Ceiling = tmtrace.Ceiling;
	FloorZ = tmtrace.FloorZ;
	CeilingZ = tmtrace.CeilingZ;

	if (onfloor)
	{
		// walking monsters rise and fall with the floor
		Origin.z = FloorZ;
	}
	else
	{
		// don't adjust a floating monster unless forced to
		if (Origin.z + Height > CeilingZ)
			Origin.z = CeilingZ - Height;
	}

	if (CeilingZ - FloorZ < Height)
		return false;

	return true;
}

//==========================================================================
//
//	SectorChanged
//
//==========================================================================

bool SectorChanged(int CrushChange)
{
	Actor A;

	if (HeightClip())
	{
		return true;
	}

	//	Crunch bodies to giblets
	if (Health <= 0)
	{
		SetState(GibsState);
		bSolid;
		Height = 0.0;
		Radius = 0.0;
		return true;
	}

	//	Crunch dropped items
	if (bDropped)
	{
		Remove();
		return true;
	}

	if (!bShootable)
	{
		//	Assume it is bloody gibs or something
		return true;
	}

	if (CrushChange && !(Level.Game.level->tictime & 3))
	{
		Damage(none, none, CrushChange);

		//	Spray blood in a random direction
		A = Spawn(Blood, Origin + vector(0.0, 0.0, Height / 2.0));
		A.Velocity.x = (Random() - Random()) * 16.0 * 35.0;
		A.Velocity.y = (Random() - Random()) * 16.0 * 35.0;
	}
	return false;	//	Don't fit
}

//**************************************************************************
//
//  RADIUS ATTACK
//
//**************************************************************************

//==========================================================================
//
//  PIT_RadiusAttack
//
//  "bombsource" is the creature that caused the explosion at "bombspot".
//
//==========================================================================

bool PIT_RadiusAttack(Entity Other)
{
	float dist;

	if (!Actor(Other).bShootable)
		return true;

	// Boss spider and cyborg
	// take no damage from concussion.
	if (Actor(Other).bBoss)
		return true;

	dist = Length(MobjCentre(Other) - MobjCentre(self)) - Other.Radius;

	if (dist < 0.0)
		dist = 0.0;

	if (dist >= bombdamage)
		return true;	// out of range

	if (Actor(Other).CanSee(self))
	{
		// must be in direct path
		Actor(Other).Damage(self, Instigator, ftoi(bombdamage - dist));
	}

	return true;
}

//==========================================================================
//
//  RadiusAttack
//
//  Source is the creature that caused the explosion at spot.
//
//==========================================================================

void RadiusAttack(int damage, int distance, bool damageSource)
{
	int x;
	int y;

	int xl;
	int xh;
	int yl;
	int yh;

	float dist;

	dist = itof(damage);
	yh = MapBlock(Origin.y + dist - XLevel.BlockMapOrgY);
	yl = MapBlock(Origin.y - dist - XLevel.BlockMapOrgY);
	xh = MapBlock(Origin.x + dist - XLevel.BlockMapOrgX);
	xl = MapBlock(Origin.x - dist - XLevel.BlockMapOrgX);
	bombdamage = itof(damage);

	for (y = yl; y <= yh; y++)
		for (x = xl; x <= xh; x++)
			XLevel.BlockThingsIterator(x, y, self, 'PIT_RadiusAttack');
}

float teleport_x;
float teleport_y;

//==========================================================================
//
//  PIT_StompThing
//
//==========================================================================

bool PIT_StompThing(Entity Other)
{
	float blockdist;

	if (!Actor(Other).bShootable)
		return true;

	blockdist = Other.Radius + Radius;

	if (fabs(Other.Origin.x - teleport_x) >= blockdist ||
		fabs(Other.Origin.y - teleport_y) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (Other == self)
		return true;

	if (!bTelestomp && !XLevel.bAllowMonsterTelefrags)
	{
		return false;
	}

	Actor(Other).Damage(self, self, 10000);

	return true;
}

//==========================================================================
//
//  TeleportMove
//
//==========================================================================

bool TeleportMove(TVec org)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;

	// kill anything occupying the position
	teleport_x = org.x;
	teleport_y = org.y;

	// stomp on any things contacted
	xl = MapBlock(org.x - Radius - XLevel.BlockMapOrgX - MAXRADIUS);
	xh = MapBlock(org.x + Radius - XLevel.BlockMapOrgX + MAXRADIUS);
	yl = MapBlock(org.y - Radius - XLevel.BlockMapOrgY - MAXRADIUS);
	yh = MapBlock(org.y + Radius - XLevel.BlockMapOrgY + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!XLevel.BlockThingsIterator(bx, by, self, 'PIT_StompThing'))
				return false;

	// the move is ok,
	// so link the thing into its new position
	UnlinkFromWorld();
	Origin = org;
	LinkToWorld();
	if (org.z == ONFLOORZ)
	{
		Origin.z = FloorZ;
	}

	return true;
}

//==========================================================================
//
//  Teleport
//
//==========================================================================

bool Teleport(TVec Dst, float angle, bool DstFog, bool SrcFog, bool KeepDir)
{
	TVec oldOrg;
	Actor fog;

	oldOrg = Origin;

	if (!TeleportMove(Dst))
		return false;

	if (bIsPlayer)
		Player(Player).ViewOrg.z = Origin.z + Player(Player).ViewHeight;

	if (SrcFog)
	{
		// spawn teleport fog at source and destination
		fog = Spawn(TeleportFog, oldOrg);
		fog.PlaySound('misc/teleport', CHAN_VOICE);
	}

	if (DstFog)
	{
		fog = Spawn(TeleportFog, Origin + vector(20.0 * cos(angle),
			20.0 * sin(angle), 0.0));
		fog.PlaySound('misc/teleport', CHAN_VOICE);
	}

	if (!KeepDir)
	{
		// don't move for a bit
		if (bIsPlayer)
		{
			ReactionTime = 0.5;
			Player.bFixAngle = true;
		}

		Angles.yaw = angle;
		Velocity = vector(0.0, 0.0, 0.0);
	}
	return true;
}

//==========================================================================
//
//  CheckMeleeRange
//
//==========================================================================

bool CheckMeleeRange()
{
	float dist;

	if (!Enemy)
	{
		return false;
	}

	dist = DistTo(Enemy);

	if (dist >= MELEERANGE - 20.0 + Enemy.Radius)
	{
		return false;
	}

	// Don't melee things too far above or below actor.
	if (Enemy.Origin.z > Origin.z + Height)
		return false;
	if (Enemy.Origin.z + Enemy.Height < Origin.z)
		return false;

	if (!CanSee(Enemy))
	{
		return false;
	}

	return true;
}

//==========================================================================
//
//  CheckMissileRange
//
//==========================================================================

bool CheckMissileRange()
{
	float dist;

	if (!CanSee(Enemy))
	{
		return false;
	}

	if (bJustHit)
	{
		// the target just hit the enemy,
		// so fight back!
		bJustHit = false;
		return true;
	}

	if (ReactionCount)
	{
		return false;	// do not attack yet
	}

	// OPTIMIZE: get this from a global checksight
	dist = DistTo(Enemy) - 64.0;

	if (!MeleeState)
		dist -= 128.0;	// no melee attack, so fire more

	if (MissileMaxRange && dist > MissileMaxRange)
	{
		return false;	// too far away
	}

	if (MissileMinRange && dist < MissileMinRange)
	{
		return false;	// close for fist attack
	}

	if (bTriggerHappy)
	{
		dist /= 2.0;
	}

	if (dist > MissileChance)
		dist = MissileChance;

	if (Random() * 256.0 < dist)
		return false;

	return true;
}

//==========================================================================
//
//  FindOther
//
//==========================================================================

bool FindOther()
{
	Actor Other;

	FOREACH(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other mobj of the same Class not dead
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  LookForMonsters
//
//==========================================================================

bool LookForMonsters(bool allaround)
{
	Actor mo;
	float an;
	float dist;

	FOREACH(Actor, mo)
	{
		if (mo.Health <= 0)
			continue;	// dead

		if (mo == self)
			continue;

		if (!mo.bIsPlayer && !mo.bMonster)
			continue;

		if (!CanSee(mo))
			continue;	// out of sight

		if (P_Random() > 128)
			continue;

		if (!allaround)
		{
			an = AngleMod360(atan2(mo.Origin.y - Origin.y,
				mo.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				dist = DistTo(mo);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		Enemy = mo;
		return true;
	}
	return false;
}

//==========================================================================
//
//  LookForMonsters2
//
//==========================================================================

bool LookForMonsters2(bool allaround)
{
	Actor mo;
	float an;
	float dist;

	if (!Level.Game.Players[0].MO.CanSee(self))
	{
		return false;	//  Not seen by player
	}

	FOREACH(Actor, mo)
	{
		if (mo.Health <= 0)
			continue;	// dead

		if (mo == self)
			continue;	// self

		if (!mo.bMonster)
			continue;	// not a monster

		if (!CanSee(mo))
			continue;	// out of sight

		if (P_Random() > 128)
			continue;	// sometimes skip

		if (!allaround)
		{
			an = AngleMod360(atan2(mo.Origin.y - Origin.y,
				mo.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				dist = DistTo(mo);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		Enemy = mo;
		return true;
	}
	return false;
}

//==========================================================================
//
//  LookForPlayers
//
//  If allaround is false, only look 180 degrees in front.
//  Returns true if a player is targeted.
//
//==========================================================================

bool LookForPlayers(bool allaround)
{
	int c;
	int stop;
	Player P;
	float an;
	float dist;

	if (Level.Game.deathmatch == 3)
	{
		return LookForMonsters(allaround);
	}

	if (!Level.Game.netgame && Level.Game.Players[0] && Level.Game.Players[0].bSpawned
		&& Level.Game.Players[0].Health <= 0)
	{
		return LookForMonsters2(allaround);
	}

	c = 0;
	stop = (LastLook - 1) & (MAXPLAYERS - 1);

	for (;; LastLook = (LastLook + 1) & (MAXPLAYERS - 1))
	{
		if (LastLook == stop)
		{
			// done looking
			return false;
		}

		P = Player(Level.Game.Players[LastLook]);

		if (!P)
			continue;

		if (c++ == 2)
		{
			// done looking
			return false;
		}

		if (!P.bSpawned || !P.MO)
			continue;	//  not spawned yet

		if (P.Health <= 0)
			continue;	// dead

		if (!CanSee(P.MO))
			continue;	//  out of sight

		if (!allaround)
		{
			an = AngleMod360(atan2(P.MO.Origin.y - Origin.y,
				P.MO.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				dist = DistTo(P.MO);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		Enemy = Actor(P.MO);
		return true;
	}

	return false;
}

//==========================================================================
//
//  StepMove
//
//  Move in the current direction, returns false if the move is blocked.
//
//==========================================================================

bool StepMove()
{
	float tryx, deltax, origx;
	float tryy, deltay, origy;
	float maxmove;
	int steps;
	float xspeed;
	float yspeed;
	int i;
	bool try_ok;

	line_t *ld;
	bool good;


	if (MoveDir == DI_NODIR)
		return false;

	// Instead of yanking non-floating monsters to the ground,
	// let gravity drop them down, unless they're moving down a step.
	if (!bNoGravity && Origin.z > FloorZ && !bOnMobj)
	{
		if (Origin.z > FloorZ + MaxStepHeight)
		{
			return false;
		}
		else
		{
			Origin.z = FloorZ;
		}
	}

#ifdef RANGECHECK
	if (MoveDir >= 8 || MoveDir < 0)
		Error("Weird MoveDir!");
#endif

	origx = Origin.x;
	origy = Origin.y;
	deltax = StepSpeed * MainGameInfo(Level.Game).xspeed[MoveDir];
	deltay = StepSpeed * MainGameInfo(Level.Game).yspeed[MoveDir];
	tryx = origx + deltax;
	tryy = origy + deltay;

	// Like P_XYMovement this should do multiple moves if the step size is too large
	maxmove = Radius;
	steps = 1;

	if (maxmove > 0.0)
	{ 
		xspeed = fabs(deltax);
		yspeed = fabs(deltay);

		if (xspeed > yspeed)
		{
			if (xspeed > maxmove)
			{
				steps = 1 + ftoi(xspeed / maxmove);
			}
		}
		else
		{
			if (yspeed > maxmove)
			{
				steps = 1 + ftoi(yspeed / maxmove);
			}
		}
	}

	try_ok = true;
	tmtrace_t tmtrace;
	for (i = 1; i < steps; i++)
	{
		try_ok = TryMoveEx(&tmtrace, vector(origx + (deltax / itof(steps * i)), origy +
					(deltay / itof(steps * i)), Origin.z));
		if (!try_ok)
			break;
	}

	// killough 3/15/98: don't jump over dropoffs:
	if (try_ok)
		try_ok = TryMoveEx(&tmtrace, vector(tryx, tryy, Origin.z));

	if (!try_ok)
	{
		// open any specials
		if (bFloat && tmtrace.bFloatOk)
		{
			// must adjust height
			if (Origin.z < tmtrace.FloorZ)
				Origin.z += FLOATSPEED * Level.Game.frametime;
			else
				Origin.z -= FLOATSPEED * Level.Game.frametime;

			// Check to make sure there's nothing in the way of the float
			if(TestMobjZ())
			{
				bInFloat = true;
				return true;
			}
		}

		if (!tmtrace.NumSpecHit)
			return false;

		MoveDir = DI_NODIR;
		good = false;
		while (tmtrace.NumSpecHit--)
		{
			ld = tmtrace.SpecHit[tmtrace.NumSpecHit];
			// if the special is not a door
			// that can be opened,
			// return false
			if (DoomLevelInfo(Level).ActivateLine(ld, self, 0, SPAC_USE))
			{
				good = true;
			}
		}
		return good;
	}
	else
	{
		bInFloat = false;
	}

	if (!bFloat)
	{
		Origin.z = FloorZ;
	}
	return true;
}

//==========================================================================
//
//  TryWalk
//
//  Attempts to move actor on in its current (ob->moveangle) direction.
// If blocked by either a wall or an actor returns FALSE
// If move is either clear or blocked only by a door, returns TRUE and sets...
// If a door is in the way, an OpenDoor call is made to start it opening.
//
//==========================================================================

bool TryWalk()
{
	if (!StepMove())
	{
		return false;
	}

	MoveCount = P_Random() & 15;
	return true;
}

//==========================================================================
//
//  DO_NewChaseDir
//
//==========================================================================

void DO_NewChaseDir(float deltax, float deltay)
{
	int d[3];

	int tdir;
	int olddir;

	int turnaround;

	olddir = MoveDir;
	turnaround = MainGameInfo(Level.Game).opposite[olddir];

	if (deltax > 10.0)
		d[1] = DI_EAST;
	else if (deltax < -10.0)
		d[1] = DI_WEST;
	else
		d[1] = DI_NODIR;

	if (deltay < -10.0)
		d[2] = DI_SOUTH;
	else if (deltay > 10.0)
		d[2] = DI_NORTH;
	else
		d[2] = DI_NODIR;

	// try direct route
	if (d[1] != DI_NODIR && d[2] != DI_NODIR)
	{
		MoveDir = MainGameInfo(Level.Game).diags[((deltay < 0.0) << 1) + (deltax > 0.0)];
		if (MoveDir != turnaround && TryWalk())
			return;
	}

	// try other directions
	if (P_Random() > 200 || fabs(deltay) > fabs(deltax))
	{
		tdir = d[1];
		d[1] = d[2];
		d[2] = tdir;
	}

	if (d[1] == turnaround)
		d[1] = DI_NODIR;
	if (d[2] == turnaround)
		d[2] = DI_NODIR;

	if (d[1] != DI_NODIR)
	{
		MoveDir = d[1];
		if (TryWalk())
		{
			// either moved forward or attacked
			return;
		}
	}

	if (d[2] != DI_NODIR)
	{
		MoveDir = d[2];

		if (TryWalk())
			return;
	}

	// there is no direct path to the player,
	// so pick another direction.
	if (olddir != DI_NODIR)
	{
		MoveDir = olddir;

		if (TryWalk())
			return;
	}

	// randomly determine direction of search
	if (P_Random() & 1)
	{
		for (tdir = DI_EAST; tdir <= DI_SOUTHEAST; tdir++)
		{
			if (tdir != turnaround)
			{
				MoveDir = tdir;

				if (TryWalk())
					return;
			}
		}
	}
	else
	{
		for (tdir = DI_SOUTHEAST; tdir != (DI_EAST - 1); tdir--)
		{
			if (tdir != turnaround)
			{
				MoveDir = tdir;

				if (TryWalk())
					return;
			}
		}
	}

	if (turnaround != DI_NODIR)
	{
		MoveDir = turnaround;
		if (TryWalk())
			return;
	}

	MoveDir = DI_NODIR;	// can not move
}

//=============================================================================
//
// NewChaseDir
//
// killough 9/8/98: Split into two functions
//
//=============================================================================

void NewChaseDir()
{
	float deltax;
	float deltay;

	deltax = Enemy.Origin.x - Origin.x;
	deltay = Enemy.Origin.y - Origin.y;

	if (!Enemy)
		Error("NewChaseDir: called with no Enemy");

	tmtrace_t tmtrace;
	CheckRelPosition(&tmtrace, Origin);

	// Try to move away from a dropoff
	if (FloorZ - tmtrace.DropOffZ > MaxDropoffHeight &&
		Origin.z <= FloorZ && !bDropOff && !bOnMobj && !bFloat)
	{
		avoiddropoff_t a;
		// We call the CheckDropoff here to determine if the
		// bounding box actually needs to be used below
		CheckDropOff(&a);

		if (a.deltax || a.deltay)
		{
			// [Graf Zahl] I have changed P_TryMove to only apply this logic when
			// being called from here. bAavoidingDropoff activates the code that
			// allows monsters to move away from a dropoff. This is different from
			// MBF which requires unconditional use of the altered logic and therefore
			// forcing a massive change in the monster behavior to use this.

			// use different dropoff movement logic in P_TryMove
			bAvoidingDropoff = true;
			DO_NewChaseDir(a.deltax, a.deltay);
			bAvoidingDropoff = false;
		
			// If moving away from dropoff, set movecount to 1 so that
			// small steps are taken to get monster away from dropoff.
			MoveCount = 1;
			return;
		}
	}
	DO_NewChaseDir(deltax, deltay);
}

//**************************************************************************
//
//  AIMING
//
//**************************************************************************

//==========================================================================
//
//  PTR_AimTraverse
//
//  Sets linetaget and aim_slope when a target is aimed at.
//
//==========================================================================

bool PTR_AimTraverse(intercept_t * in)
{
	line_t *li;
	Actor Th;
	float thingtopslope;
	float thingbottomslope;
	float dist;
	float slope;
	opening_t *open;

	if (in->bIsALine)
	{
		TVec hit_point;

		li = in->line;

		if (!(li->flags & ML_TWOSIDED))
			return false;	// stop

		// Crosses a two sided line.
		// A two sided line will restrict
		// the possible target ranges.
		dist = aim_range * in->frac;
		hit_point = Origin + dist * aim_dir;
		open = LineOpenings(li, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z);

		if (!open || open->bottom >= open->top)
			return false;	// stop

		dist = aim_range2d * in->frac;
		if (li->frontsector->floorheight != li->backsector->floorheight)
		{
			slope = (open->bottom - aim_z) / dist;
			if (slope > aim_bottomslope)
				aim_bottomslope = slope;
		}

		if (li->frontsector->ceilingheight != li->backsector->ceilingheight)
		{
			slope = (open->top - aim_z) / dist;
			if (slope < aim_topslope)
				aim_topslope = slope;
		}

		if (aim_topslope <= aim_bottomslope)
			return false;	// stop

		return true;	// shot continues
	}

	// shoot a thing
	Th = Actor(in->Thing);
	if (Th == self)
		return true;	// can't shoot self

	if (!Th.bShootable)
		return true;	// corpse or something

#ifdef FIXME
	//  Hexen does this. There's no reason why we can't enable it in Doom.
	if (Th.player && netgame && !deathmatch)
	{
		// don't aim at fellow co-op players
		return true;
	}
#endif

	// check angles to see if the thing can be aimed at
	dist = aim_range2d * in->frac;
	thingtopslope = (Th.Origin.z + Th.Height - aim_z) / dist;

	if (thingtopslope < aim_bottomslope)
		return true;	// shot over the thing

	thingbottomslope = (Th.Origin.z - aim_z) / dist;

	if (thingbottomslope > aim_topslope)
		return true;	// shot under the thing

	// this thing can be hit!
	if (thingtopslope > aim_topslope)
		thingtopslope = aim_topslope;

	if (thingbottomslope < aim_bottomslope)
		thingbottomslope = aim_bottomslope;

	aim_slope = (thingtopslope + thingbottomslope) / 2.0;
	linetarget = Th;

	return false;	// don't go any farther
}

//==========================================================================
//
//  AimLineAttack
//
//==========================================================================

TVec AimLineAttack(TAVec angles, float distance)
{
	float x2;
	float y2;
	float topangle;
	float botangle;
	TVec dir;

	AngleVector(&angles, &aim_dir);
	x2 = Origin.x + distance * aim_dir.x;
	y2 = Origin.y + distance * aim_dir.y;
	aim_z = Origin.z + Height / 2.0 + 8.0 - FloorClip;
	aim_range2d =
		Length(vector(distance * aim_dir.x, distance * aim_dir.y, 0.0));

	// can't shoot outside view angles
	topangle = AngleMod180(-angles.pitch + 30.0);
	botangle = AngleMod180(-angles.pitch - 30.0);
	if (topangle > 89.0)
		topangle = 89.0;
	if (botangle < -89.0)
		botangle = -89.0;
	aim_topslope = tan(topangle);
	aim_bottomslope = tan(botangle);

	aim_range = distance;
	linetarget = none;

	XLevel.PathTraverse(Origin.x, Origin.y, x2, y2,
		PT_ADDLINES | PT_ADDTHINGS, self, 'PTR_AimTraverse');

	if (linetarget)
	{
		angles.pitch = -atan(aim_slope);
	}
	AngleVector(&angles, &dir);
	return dir;
}

//===========================================================================
//
//	Aim
//
//  Sets a slope so a near miss is at aproximately the height of the
// intended target
//
//===========================================================================

TVec Aim(float distance)
{
	TAVec an;
	TVec dir;

	// see which target is to be aimed at
	an = Angles;

	dir = AimLineAttack(an, distance);
	if (!linetarget)
	{
		an.yaw = AngleMod360(an.yaw + 45.0 / 8.0);
		dir = AimLineAttack(an, distance);
		if (!linetarget)
		{
			an.yaw = AngleMod360(an.yaw - 45.0 / 4.0);
			dir = AimLineAttack(an, distance);
			if (!linetarget)
			{
				an.yaw = AngleMod360(an.yaw + 45.0 / 8.0);
				AngleVector(&an, &dir);
			}
		}
	}
	return dir;
}

//**************************************************************************
//
//  SHOOTING
//
//**************************************************************************

//==========================================================================
//
//  ShootHitPlane
//
//==========================================================================

bool ShootHitPlane(sec_plane_t * plane)
{
	float org_dist;
	float hit_dist;

	if (plane->flags & SPF_NOBLOCKSHOOT)
	{
		//  Doesn't block shooting
		return true;
	}
	org_dist = DotProduct(shoot_linestart, plane->normal) - plane->dist;
	if (org_dist < 0.0)
	{
		//  Don't shoot back side
		return true;
	}
	hit_dist = DotProduct(shoot_lineend, plane->normal) - plane->dist;
	if (hit_dist >= 0.0)
	{
		//  Didn't hit plane
		return true;
	}

	//  Hit plane
	if (plane->pic == Level.Game.skyflatnum)
	{
		// don't shoot the sky!
		return false;
	}

	//  If we are shooting floor or ceiling we are adjusting position
	// to spawn puff on floor or ceiling, not on wall
	shoot_lineend -= (shoot_lineend - shoot_linestart) * hit_dist / (hit_dist - org_dist);

	// position a bit closer
	shoot_lineend += 4.0 * plane->normal;

	// Spawn bullet puffs.
	SpawnPuff(shoot_lineend, shoot_range);

	// don't go any farther
	return false;
}

//==========================================================================
//
//  ShootCheckPlanes
//
//==========================================================================

bool ShootCheckPlanes(sector_t * sec)
{
	sec_region_t *reg;
	sec_region_t *startreg;

	startreg = PointInRegion(sec, shoot_linestart);
	for (reg = startreg; reg; reg = reg->next)
	{
		if (!ShootHitPlane(reg->floor))
		{
			//  Hit floor
			return false;
		}
		if (!ShootHitPlane(reg->ceiling))
		{
			//  Hit ceiling
			return false;
		}
	}
	for (reg = startreg->prev; reg; reg = reg->prev)
	{
		if (!ShootHitPlane(reg->floor))
		{
			//  Hit floor
			return false;
		}
		if (!ShootHitPlane(reg->ceiling))
		{
			//  Hit ceiling
			return false;
		}
	}
	return true;
}

//==========================================================================
//
//  PTR_ShootTraverse
//
//==========================================================================

bool PTR_ShootTraverse(intercept_t * in)
{
	TVec hit_point;
	line_t *li;
	Actor th;

	if (in->bIsALine)
	{
		sector_t *sec;

		li = in->line;
		hit_point = shoot_origin + (shoot_range * in->frac) * shoot_dir;
		if (li->flags & ML_TWOSIDED && PointOnPlaneSide(shoot_origin, li))
		{
			sec = li->backsector;
		}
		else
		{
			sec = li->frontsector;
		}

		shoot_lineend = hit_point;

		//  Check for shooting floor or ceiling
		if (!ShootCheckPlanes(sec))
		{
			return false;
		}

		shoot_linestart = shoot_lineend;

		//  Execute line special after checking for hitting floor or ceiling
		// when we know that it actally hits line
		if (li->special)
		{
			DoomLevelInfo(Level).ActivateLine(li, self, 0, SPAC_IMPACT);
		}

		if (li->flags & ML_TWOSIDED)
		{
			// crosses a two sided line
			opening_t *open;
			float opentop = 0.0;

			open = LineOpenings(li, hit_point);
			if (open)
			{
				opentop = open->top;
			}
			while (open)
			{
				if (open->bottom <= hit_point.z && open->top >= hit_point.z)
				{
					// shot continues
					return true;
				}
				open = open->next;
			}
			if (li->frontsector->ceiling.pic == Level.Game.skyflatnum &&
				li->backsector->ceiling.pic == Level.Game.skyflatnum &&
				hit_point.z > opentop)
			{
				// it's a sky hack wall
				return false;
			}
		}

		//  Hit line

		// position a bit closer
		hit_point -= 4.0 * shoot_dir;

		// Spawn bullet puffs.
		SpawnPuff(hit_point, shoot_range);

		// don't go any farther
		return false;
	}

	// shoot a thing
	th = Actor(in->Thing);

	if (th == self)
		return true;	// can't shoot self

	if (!th.bShootable)
		return true;	// corpse or something

	// check angles to see if the thing can be aimed at
	hit_point = shoot_origin + (shoot_range * in->frac) * shoot_dir;

	if (th.Origin.z + th.Height < hit_point.z)
		return true;	// shot over the thing

	if (th.Origin.z > hit_point.z)
		return true;	// shot under the thing

	// hit thing
	// position a bit closer
	hit_point -= 10.0 * shoot_dir;

	// Spawn bullet puffs or blod spots,
	// depending on target type.
	if (th.bNoBlood)
		SpawnPuff(hit_point, shoot_range);
	else
		P_SpawnBlood(hit_point, la_damage);

	if (la_damage)
		th.Damage(self, self, la_damage);

	// don't go any farther
	return false;
}

//==========================================================================
//
//  P_LineAttack
//
//  If damage == 0, it is just a test trace that will leave linetarget set.
//
//==========================================================================

int LineAttack(TVec dir, float distance, int damage)
{
	TVec dst;

	la_damage = damage;

	shoot_origin = Origin;
	shoot_origin.z += Height * 0.5 + 8.0 - FloorClip;

	shoot_dir = dir;
	shoot_range = distance;

	dst = shoot_origin + shoot_range * shoot_dir;
	shoot_linestart = shoot_origin;
	if (!XLevel.PathTraverse(Origin.x, Origin.y, dst.x, dst.y,
		PT_ADDLINES | PT_ADDTHINGS, self, 'PTR_ShootTraverse'))
	{
		return false;
	}
	shoot_lineend = dst;
	return ShootCheckPlanes(XLevel.PointInSector(dst));
}

//==========================================================================
//
//	A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

final void A_Look()
{
	Actor targ;

	Threshold = 0;	// any shot will wake up
	targ = Actor(Sector->SoundTarget);

	if (targ && targ.bShootable)
	{
		Enemy = targ;

		if (bAmbush)
		{
			if (!CanSee(Enemy))
			{
				if (!LookForPlayers(false))
					return;
			}
		}
	}
	else
	{
		if (!LookForPlayers(false))
			return;
	}

	// go into chase state
	if (SightSound)
	{
		PlaySound(SightSound, CHAN_VOICE, 1.0, bBoss ? ATTN_NONE : ATTN_NORMAL);
	}

	SetState(SeeState);
}

//==========================================================================
//
//	A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

final void A_Chase()
{
	float delta;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	//  Remove muzzle flash
	if ((Effects & DoomDefs::EF_DLIGHT_MASK) == DoomDefs::EF_DL_MUZZLEFLASH)
	{
		Effects &= ~DoomDefs::EF_DLIGHT_MASK;
	}

	// modify target threshold
	if (Threshold)
	{
		if (!Enemy || Enemy.Health <= 0)
		{
			Threshold = 0;
		}
		else
		{
			Threshold--;
		}
	}

/*	if (fastparm)
	{ // Monsters move faster in nightmare mode
		actor->tics -= actor->tics / 2;
		if (actor->tics < 3)
		{
			actor->tics = 3;
		}
	}
*/
	// turn towards movement direction if not there yet
	if (MoveDir < 8)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;

		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);

		if (delta > 0.0)
		{
			Angles.yaw -= 45.0;
		}
		else if (delta < 0.0)
		{
			Angles.yaw += 45.0;
		}
	}

	if (!Enemy || !Enemy.bShootable)
	{
		// look for a new target
		if (LookForPlayers(true))
		{
			return;	// got a new target
		}
		SetState(IdleState);
		return;
	}

	// do not attack twice in a row
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (!Level.Game.fastparm)
		{
			NewChaseDir();
		}
		return;
	}

	// check for melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// check for missile attack
	if (MissileState)
	{
		if (Level.Game.fastparm || !MoveCount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				bJustAttacked = true;
				return;
			}
		}
	}

	// possibly choose another target
	if (Level.Game.netgame && !Threshold)
	{
		if (!CanSee(Enemy))
		{
			if (LookForPlayers(true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--MoveCount < 0 || !StepMove())
	{
		NewChaseDir();
	}

	// make active sound
	if (ActiveSound && P_Random() < 3)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	A_FaceTarget
//
//==========================================================================

final void A_FaceTarget()
{
	if (!Enemy)
		return;

	bAmbush = false;

	Angles.yaw = atan2(Enemy.Origin.y - Origin.y, Enemy.Origin.x - Origin.x);

	if (Enemy.Alpha < 1.0)
	{
		Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//  A_Pain
//
//==========================================================================

final void A_Pain()
{
	//  Remove muzzle flash
	if ((Effects & DoomDefs::EF_DLIGHT_MASK) == DoomDefs::EF_DL_MUZZLEFLASH)
	{
		Effects &= ~DoomDefs::EF_DLIGHT_MASK;
	}

	if (PainSound)
	{
		PlaySound(PainSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_Explode
//
//  Rocket and barrel explosion.
//
//==========================================================================

final void A_Explode()
{
	Alpha = 0.5;
	RadiusAttack(128, 0, 0);

	//  Spawn explosion effects - dynamic light and particles
	MSG_Select(MSG_SV_DATAGRAM);
	if (MSG_CheckSpace(7))
	{
		MSG_WriteByte(DoomDefs::svc_explosion);
		MSG_WriteShort(ftoi(Origin.x));
		MSG_WriteShort(ftoi(Origin.y));
		MSG_WriteShort(ftoi(Origin.z + Height * 0.5));
	}

	//  Clear old dynamic light effect
	Effects &= ~DoomDefs::EF_DLIGHT_MASK;
}

//==========================================================================
//
//	A_Scream
//
//  Death sound.
//
//==========================================================================

final void A_Scream()
{
	//  Remove muzzle flash
	if ((Effects & DoomDefs::EF_DLIGHT_MASK) == DoomDefs::EF_DL_MUZZLEFLASH)
	{
		Effects &= ~DoomDefs::EF_DLIGHT_MASK;
	}

	if (DeathSound)
	{
		// Check for bosses.
		PlaySound(DeathSound, CHAN_VOICE, 1.0, bBoss ? ATTN_NONE : ATTN_NORMAL);
	}
}

//==========================================================================
//
//	A_XScream
//
//  Explode death sound.
//
//==========================================================================

final void A_XScream()
{
	//  Remove muzzle flash
	if ((Effects & DoomDefs::EF_DLIGHT_MASK) == DoomDefs::EF_DL_MUZZLEFLASH)
	{
		Effects &= ~DoomDefs::EF_DLIGHT_MASK;
	}

	if (bIsPlayer)
	{
		PlaySound('*gibbed', CHAN_BODY);
	}
	else
	{
		PlaySound('misc/gibbed', CHAN_BODY);
	}
}

//==========================================================================
//
//	A_Fall
//
//  Unset blocking.
//
//==========================================================================

final void A_Fall()
{
	//  Remove muzzle flash
	if ((Effects & DoomDefs::EF_DLIGHT_MASK) == DoomDefs::EF_DL_MUZZLEFLASH)
	{
		Effects &= ~DoomDefs::EF_DLIGHT_MASK;
	}

	// actor is on ground, it can be walked over
	bSolid = false;

	// So change this if corpse objects
	// are meant to be obstacles.
}

//==========================================================================
//
//  A_PlayerScream
//
//  Player death sound
//
//==========================================================================

final void A_PlayerScream()
{
	// Default death sound.
	name sound = '*death';

#ifdef DOOM2
	if (Health < -50)
	{
		// IF THE PLAYER DIES
		// LESS THAN -50% WITHOUT GIBBING
		sound = '*xdeath';
	}
#endif

	PlaySound(sound, CHAN_VOICE);
}

//==========================================================================
//
//  PIT_VileCheck
//
//  Detect a corpse that could be raised.
//
//==========================================================================

bool PIT_VileCheck(Entity Other)
{
	float maxdist;
	bool check;

	if (!Actor(Other).bCorpse)
		return true;	// not a monster

	if (Actor(Other).StateTime != -1.0)
		return true;	// not lying still yet

	if (!Actor(Other).RaiseState)
		return true;	// monster doesn't have a raise state

	maxdist = Other.Radius + Radius;

	if (fabs(Other.Origin.x - viletryx) > maxdist ||
		fabs(Other.Origin.y - viletryy) > maxdist)
		return true;	// not actually touching

	if (!CanSee(Other))
		return true;	//  Con't see, possibly in other region

	CorpseHit = Actor(Other);
	CorpseHit.Velocity.x = 0.0;
	CorpseHit.Velocity.y = 0.0;
	float OldHeight = CorpseHit.Height;
	bool OldSolid = CorpseHit.bSolid;
	CorpseHit.bSolid = true;
	CorpseHit.Height = CorpseHit.default.Height;
	check = CorpseHit.CheckPosition(CorpseHit.Origin);
	CorpseHit.bSolid = OldSolid;
	CorpseHit.Height = OldHeight;

	if (!check)
		return true;	// doesn't fit here

	return false;	// got one, so stop checking
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(TVec Org, float Range)
{
	Actor A;

	MSG_Select(MSG_SV_DATAGRAM);
	if (MSG_CheckSpace(7))
	{
		MSG_WriteByte(DoomDefs::svc_gun_shot);
		MSG_WriteShort(ftoi(Org.x));
		MSG_WriteShort(ftoi(Org.y));
		MSG_WriteShort(ftoi(Org.z));
	}

	Org.z += (Random() - Random()) * 4.0;

	A = Spawn(Puff, Org);
	A.Velocity.z = 1.0 * 35.0;
	A.StateTime -= Random() * 0.1;

	if (A.StateTime < 0.1)
		A.StateTime = 0.1;

	// don't make punches spark on the wall
	if (Range == MELEERANGE)
		A.SetState(Puff::S_PUFF3);
}

//==========================================================================
//
//  P_SpawnBlood
// 
//==========================================================================

void P_SpawnBlood(TVec Org, int damage)
{
	Actor A;

	MSG_Select(MSG_SV_DATAGRAM);
	if (MSG_CheckSpace(8))
	{
		MSG_WriteByte(DoomDefs::svc_blood);
		MSG_WriteShort(ftoi(Org.x));
		MSG_WriteShort(ftoi(Org.y));
		MSG_WriteShort(ftoi(Org.z));
		MSG_WriteByte(damage > 255 ? 255 : damage);
	}

	Org.z += (Random() - Random()) * 4.0;
	A = Spawn(Blood, Org);
	A.Velocity.z = 2.0 * 35.0;
	A.StateTime -= Random() * 0.1;

	if (A.StateTime < 0.1)
		A.StateTime = 0.1;

	if (damage <= 12 && damage >= 9)
		A.SetState(Blood::S_BLOOD2);
	else if (damage < 9)
		A.SetState(Blood::S_BLOOD3);
}

//**************************************************************************
//**************************************************************************
//**************************************************************************
//**************************************************************************
//**************************************************************************

//===========================================================================
//
//  A_BFGSpray
//
//  Spawn a BFG explosion on every monster in view
//
//===========================================================================

final void A_BFGSpray()
{
	int i;
	int j;
	int damage;
	TAVec aimAng;
	Actor emo;

	// offset angles from its attack angle
	for (i = 0; i < 40; i++)
	{
		aimAng = Angles;
		aimAng.yaw = AngleMod360(aimAng.yaw - 45.0 + 90.0 / 40.0 * itof(i));

		// target is the originator (player)
		//  of the missile
		Instigator.AimLineAttack(aimAng, 16.0 * 64.0);
		if (!Instigator.linetarget)
		{
			continue;
		}

		emo = Spawn(ExtraBFG, Instigator.linetarget.Origin +
			vector(0.0, 0.0, Instigator.linetarget.Height / 4.0));

		MSG_Select(MSG_SV_DATAGRAM);
		if (MSG_CheckSpace(8))
		{
			MSG_WriteByte(DoomDefs::svc_explosion2);
			MSG_WriteByte(DoomDefs::EF_DL_GBALL);
			MSG_WriteShort(ftoi(emo.Origin.x));
			MSG_WriteShort(ftoi(emo.Origin.y));
			MSG_WriteShort(ftoi(emo.Origin.z));
		}

		damage = 0;
		for (j = 0; j < 15; j++)
			damage += (P_Random() & 7) + 1;

		Instigator.linetarget.Damage(Instigator, Instigator, damage);
	}
}

//==========================================================================
//
//  A_PosAttack
//
//  Zombieman attack.
//
//==========================================================================

final void A_PosAttack()
{
	int damage;
	TVec dir;

	if (!Enemy)
		return;

	A_FaceTarget();

	dir = AimLineAttack(Angles, MISSILERANGE);
	VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);

	PlaySound('grunt/attack', CHAN_WEAPON);

	damage = ((P_Random() % 5) + 1) * 3;

	LineAttack(dir, MISSILERANGE, damage);

	Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//==========================================================================
//
//  A_SPosAttack
//
//  Shotgun guy, Spider mastermind attack.
//
//==========================================================================

final void A_SPosAttack()
{
	int i;
	int damage;
	TVec aimDir;
	TVec dir;

	if (!Enemy)
		return;

	PlaySound('shotguy/attack', CHAN_WEAPON);
//FIXME	PlaySound('spider/attack', CHAN_WEAPON);
	A_FaceTarget();
	aimDir = AimLineAttack(Angles, MISSILERANGE);
	for (i = 0; i < 3; i++)
	{
		dir = aimDir;
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
		damage = ((P_Random() % 5) + 1) * 3;
		LineAttack(dir, MISSILERANGE, damage);
	}

	Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//==========================================================================
//
//  A_TroopAttack
//
//  Imp attack.
//
//==========================================================================

final void A_TroopAttack()
{
	int damage;

	if (!Enemy)
		return;

	A_FaceTarget();
	if (CheckMeleeRange())
	{
		PlaySound('imp/melee', CHAN_WEAPON);
		damage = (P_Random() % 8 + 1) * 3;
		Enemy.Damage(self, self, damage);
		return;
	}

	// launch a missile
	SpawnMissile(Enemy, ImpMissile);
}

//==========================================================================
//
//  A_SargAttack
//
//  Demon, Spectre attack.
//
//==========================================================================

final void A_SargAttack()
{
	int damage;

	if (!Enemy)
		return;

	A_FaceTarget();
	if (CheckMeleeRange())
	{
		damage = ((P_Random() % 10) + 1) * 4;
		Enemy.Damage(self, self, damage);
	}
}

//==========================================================================
//
//  A_HeadAttack
//
//  Cacodemon attack.
//
//==========================================================================

final void A_HeadAttack()
{
	int damage;

	if (!Enemy)
		return;

	A_FaceTarget();
	if (CheckMeleeRange())
	{
		damage = (P_Random() % 6 + 1) * 10;
		Enemy.Damage(self, self, damage);
		return;
	}

	// launch a missile
	SpawnMissile(Enemy, CacodemonMissile);
}

//==========================================================================
//
//  A_BruisAttack
//
//  Hell knight, Baron of hell attack.
//
//==========================================================================

final void A_BruisAttack()
{
	int damage;

	if (!Enemy)
		return;

	if (CheckMeleeRange())
	{
		PlaySound('baron/melee', CHAN_WEAPON);
		damage = (P_Random() % 8 + 1) * 10;
		Enemy.Damage(self, self, damage);
		return;
	}

	// launch a missile
	SpawnMissile(Enemy, BruiserShot);
}

//==========================================================================
//
//  A_SkullAttack
//
//  Lost soul attack. Fly at the player like a missile.
//
//==========================================================================

const float SKULLSPEED = 700.0;

final void A_SkullAttack()
{
	if (!Enemy)
		return;

	bSkullFly = true;

	PlaySound(AttackSound, CHAN_VOICE);
	A_FaceTarget();
	Velocity = Normalise(MobjCentre(Enemy) - Origin) * SKULLSPEED;
}

//==========================================================================
//
//  A_Hoof
//
//  Cyberdemon move with hoof sound.
//
//==========================================================================

final void A_Hoof()
{
	PlaySound('cyber/hoof', CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//  A_Metal
//
//  Cyberdemon move with metal sound.
//
//==========================================================================

final void A_Metal()
{
	PlaySound('spider/walk', CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//  A_CyberAttack
//
//  Cyberdemon attack.
//
//==========================================================================

final void A_CyberAttack()
{
	if (!Enemy)
		return;

	A_FaceTarget();
	SpawnMissile(Enemy, Rocket);
}

//==========================================================================
//
//  A_SpidRefire
//
//  Spider mastermind refire.
//
//==========================================================================

final void A_SpidRefire()
{
	// keep firing unless target got out of sight
	A_FaceTarget();

	if (P_Random() < 10)
		return;

	if (!Enemy || Enemy.Health <= 0 || !CanSee(Enemy))
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//  A_CPosAttack
//
//  Heavy weapon dude attack.
//
//==========================================================================

final void A_CPosAttack()
{
	int damage;
	TVec dir;

	if (!Enemy)
		return;

	//FIXME
	PlaySound('chainguy/attack', CHAN_WEAPON);
	A_FaceTarget();
	dir = AimLineAttack(Angles, MISSILERANGE);
	VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
	damage = ((P_Random() % 5) + 1) * 3;
	LineAttack(dir, MISSILERANGE, damage);

	Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//==========================================================================
//
//  A_CPosRefire
//
//  Heavy weapon dude refire.
//
//==========================================================================

final void A_CPosRefire()
{
	// keep firing unless target got out of sight
	A_FaceTarget();

	if (P_Random() < 40)
		return;

	if (!Enemy || Enemy.Health <= 0 || !CanSee(Enemy))
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//  A_BabyMetal
//
//  Arachnotron move with metal sound.
//
//==========================================================================

final void A_BabyMetal()
{
	PlaySound('baby/walk', CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//  A_BspiAttack
//
//  Arachnotron attack.
//
//==========================================================================

final void A_BspiAttack()
{
	if (!Enemy)
		return;

	A_FaceTarget();

	// launch a missile
	SpawnMissile(Enemy, ArachnotronPlasma);
}

//==========================================================================
//
//  A_PainShootSkull
//
//  Spawn a lost soul and launch it at the target
//
//==========================================================================

final void A_PainShootSkull(float angle)
{
	Actor mo;
	LostSoul newSkull;
	float prestep;
	int count;

	// count total number of skull currently on the level
	count = 0;
	FOREACH(LostSoul, mo)
	{
		count++;
	}

	// if there are allready 20 skulls on the level,
	// don't spit another one
	if (count > 20)
		return;

	// okay, there's place for another one
	prestep = 4.0 + 3.0 * (Radius + LostSoul.default.Radius) / 2.0;

	// Check whether the Lost Soul is being fired through a 1-sided
	// wall or an impassible line, or a "monsters can't cross" line.
	// If it is, then we don't allow the spawn.
	if (CheckSides(Origin + vector(
	    prestep * cos(angle), prestep * sin(angle), 8.0)))
	{
		return;
	}

	newSkull = LostSoul(Spawn(LostSoul, Origin));

	// Check to see if the new Lost Soul's z value is above the
	// ceiling of its new sector, or below the floor. If so, kill it.
	if ((newSkull.Origin.z > (newSkull.CeilingZ - newSkull.Height)) ||
        (newSkull.Origin.z < newSkull.FloorZ))
	{
		// kill it immediately
		newSkull.Damage(self, self, 10000);
		return;
	}

	// Check for movements.
	if (!newSkull.TryMove(newSkull.Origin + vector(
	    prestep * cos(angle), prestep * sin(angle), 8.0)))
	{
		// kill it immediately
		newSkull.Damage(self, self, 10000);
		return;
	}

	newSkull.Enemy = Enemy;
	newSkull.A_SkullAttack();
}

//==========================================================================
//
//  A_PainAttack
//
//  Pain elemental attack. Spawn a lost soul and launch it at the target.
// 
//==========================================================================

final void A_PainAttack()
{
	if (!Enemy)
		return;

	A_FaceTarget();
	A_PainShootSkull(Angles.yaw);
}

//==========================================================================
//
//  A_PainDie
//
//  Pain elemental death.
//
//==========================================================================

final void A_PainDie()
{
	A_Fall();
	A_PainShootSkull(Angles.yaw + 90.0);
	A_PainShootSkull(Angles.yaw + 180.0);
	A_PainShootSkull(Angles.yaw + 270.0);
}

//==========================================================================
//
//  A_SkelWhosh
//
//  Ravenant attack sound.
//
//==========================================================================

final void A_SkelWhoosh()
{
	if (!Enemy)
		return;
	A_FaceTarget();
	PlaySound('skeleton/swing', CHAN_WEAPON);
}

//==========================================================================
//
//  A_SkelFist
//
//  Ravenant close attack.
//
//==========================================================================

final void A_SkelFist()
{
	int damage;

	if (!Enemy)
		return;

	A_FaceTarget();

	if (CheckMeleeRange())
	{
		damage = ((P_Random() % 10) + 1) * 6;
		PlaySound('skeleton/melee', CHAN_WEAPON);
		Enemy.Damage(self, self, damage);
	}
}

//==========================================================================
//
//  A_SkelMissile
//
//  Ravenant far attack.
//
//==========================================================================

final void A_SkelMissile()
{
	Actor A;

	if (!Enemy)
		return;

	A_FaceTarget();
	Origin.z += 16.0;	// so missile spawns higher
	A = SpawnMissile(Enemy, RevenantTracer);
	Origin.z -= 16.0;	// back to normal

	A.Origin = A.Origin + A.Velocity * 0.03;
	A.Enemy = Enemy;
}

//==========================================================================
//
//  A_Tracer
//
//  Ravenant missile tracer.
//
//==========================================================================

const float TRACEADJUST = 0.2865921825;

final void A_Tracer()
{
	Actor A;
	TVec wishdir;
	TVec currdir;
	TVec delta;
	float adjustlen;

	if (Level.Game.level->tictime & 3)
		return;

	// spawn a puff of smoke behind the rocket      
	SpawnPuff(Origin, MISSILERANGE);

	A = Spawn(RevenantTracerSmoke, Origin - Velocity * Level.Game.frametime);

	A.Velocity.z = 1.0 * 35.0;
	A.StateTime -= Random() * 0.1;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;

	// adjust direction
	if (!Enemy || Enemy.Health <= 0)
		return;

	wishdir = Normalise(MobjCentre(Enemy) - Origin);
	currdir = Normalise(Velocity);
	delta = wishdir - currdir;
	adjustlen = Length(delta);
	if (adjustlen > TRACEADJUST)
		adjustlen = TRACEADJUST;
	wishdir = currdir + delta * adjustlen;
	Velocity = wishdir * Speed;
	VectorAngles(&wishdir, &Angles);
}

//==========================================================================
//
//  A_FatRaise
//
//  Mancubus attack sound.
//
//==========================================================================

final void A_FatRaise()
{
	A_FaceTarget();
	PlaySound('fatso/raiseguns', CHAN_WEAPON);
}

//==========================================================================
//
//  A_FatAttack1
//
//  Mancubus attack, firing three missiles (bruisers) in three different
// directions? Doesn't look like it.
//
//==========================================================================

const float SpreadAngle = 90.0 / 8.0;

final void A_FatAttack1()
{
	Actor A;

	A_FaceTarget();
	// Change direction  to ...
	Angles.yaw = AngleMod360(Angles.yaw + SpreadAngle);
	SpawnMissile(Enemy, MancubusMissile);

	A = SpawnMissile(Enemy, MancubusMissile);
	A.Angles.yaw = AngleMod360(A.Angles.yaw + SpreadAngle);
	VectorRotateAroundZ(&A.Velocity, SpreadAngle);
}

//==========================================================================
//
//  A_FatAttack2
//
//  Mancubus attack, second direction.
//
//==========================================================================

final void A_FatAttack2()
{
	Actor A;

	A_FaceTarget();
	// Now here choose opposite deviation.
	Angles.yaw = AngleMod360(Angles.yaw - SpreadAngle);
	SpawnMissile(Enemy, MancubusMissile);

	A = SpawnMissile(Enemy, MancubusMissile);
	A.Angles.yaw = AngleMod360(A.Angles.yaw - SpreadAngle * 2.0);
	VectorRotateAroundZ(&A.Velocity, -SpreadAngle * 2.0);
}

//==========================================================================
//
//  A_FatAttack3
//
//  Mancubus attack, third direction.
//
//==========================================================================

final void A_FatAttack3()
{
	Actor A;

	A_FaceTarget();

	A = SpawnMissile(Enemy, MancubusMissile);
	A.Angles.yaw = AngleMod360(A.Angles.yaw - SpreadAngle / 2.0);
	VectorRotateAroundZ(&A.Velocity, -SpreadAngle / 2.0);

	A = SpawnMissile(Enemy, MancubusMissile);
	A.Angles.yaw = AngleMod360(A.Angles.yaw + SpreadAngle / 2.0);
	VectorRotateAroundZ(&A.Velocity, SpreadAngle / 2.0);
}

//==========================================================================
//
//  A_VileChase
//
//  Arch-vile check for ressurecting a body.
//
//==========================================================================

final void A_VileChase()
{
	int xl;
	int xh;
	int yl;
	int yh;

	int bx;
	int by;

	Actor temp;

	if (MoveDir != DI_NODIR)
	{
		// check for corpses to raise
		viletryx = Origin.x + StepSpeed * MainGameInfo(Level.Game).xspeed[MoveDir];
		viletryy = Origin.y + StepSpeed * MainGameInfo(Level.Game).yspeed[MoveDir];

		xl = MapBlock(viletryx - XLevel.BlockMapOrgX - MAXRADIUS * 2.0);
		xh = MapBlock(viletryx - XLevel.BlockMapOrgX + MAXRADIUS * 2.0);
		yl = MapBlock(viletryy - XLevel.BlockMapOrgY - MAXRADIUS * 2.0);
		yh = MapBlock(viletryy - XLevel.BlockMapOrgY + MAXRADIUS * 2.0);

		for (bx = xl; bx <= xh; bx++)
		{
			for (by = yl; by <= yh; by++)
			{
				// Call PIT_VileCheck to check whether object is a corpse
				// that canbe raised.
				if (!XLevel.BlockThingsIterator(bx, by, self, 'PIT_VileCheck'))
				{
					// got one!
					temp = Enemy;
					Enemy = CorpseHit;
					A_FaceTarget();
					Enemy = temp;

					SetState(ArchVile::S_VILE_HEAL1);
					CorpseHit.PlaySound('vile/raise', CHAN_BODY);

					CorpseHit.SetState(CorpseHit.RaiseState);
					CorpseHit.Height = CorpseHit.default.Height;
					CorpseHit.bShootable = true;
					CorpseHit.bFloat = CorpseHit.default.bFloat;
					CorpseHit.bNoGravity = CorpseHit.default.bNoGravity;
					CorpseHit.bDropOff = false;
					CorpseHit.bSolid = true;
					CorpseHit.bCorpse = false;
					CorpseHit.Health = CorpseHit.default.Health;
					CorpseHit.Enemy = none;
				}
			}
		}
	}


	// Return to normal attack.
	A_Chase();
}

//==========================================================================
//
//  A_VileStart
//
//  Arch-vile attack start sound.
//
//==========================================================================

final void A_VileStart()
{
	PlaySound('vile/start', CHAN_WEAPON);
}

//==========================================================================
//
//  A_VileTarget
//
//  Spawn the hellfire.
//
//==========================================================================

final void A_VileTarget()
{
	Actor fog;

	if (!Enemy)
		return;

	A_FaceTarget();

	fog = Spawn(ArchvileFire, Enemy.Origin);

	Instigator = fog;//FIXME!!!!!!!
	fog.Instigator = self;
	fog.Enemy = Enemy;
	fog.SetState(fog.IdleState);
}

//==========================================================================
//
//  A_VileAttack
//
//  Arch-vile attack.
//
//==========================================================================

final void A_VileAttack()
{
	Actor fire;

	if (!Enemy)
		return;

	A_FaceTarget();

	if (!CanSee(Enemy))
		return;

	PlaySound('vile/stop', CHAN_WEAPON);
	Enemy.Damage(self, self, 20);
	Enemy.Velocity.z = 1000.0 / Enemy.Mass * 35.0;

	fire = Instigator;//FIXME!!!!!!

	if (!fire)
		return;

	// move the fire between the vile and the player
	fire.Origin.x = Enemy.Origin.x - 24.0 * cos(Angles.yaw);
	fire.Origin.y = Enemy.Origin.y - 24.0 * sin(Angles.yaw);
	fire.RadiusAttack(70, 0, 0);
}

//==========================================================================
//
//  A_Fire
//
//  Keep fire in front of player unless out of sight.
//
//==========================================================================

final void A_Fire()
{
	if (!Enemy || !Instigator)
		return;

	// don't move it if the vile lost sight
	if (!Instigator.CanSee(Enemy))
		return;

	UnlinkFromWorld();
	Origin.x = Enemy.Origin.x + 24.0 * cos(Enemy.Angles.yaw);
	Origin.y = Enemy.Origin.y + 24.0 * sin(Enemy.Angles.yaw);
	Origin.z = Enemy.Origin.z;
	LinkToWorld();
}

//==========================================================================
//
//  A_StartFire
//
//  Make fire start sound.
//
//==========================================================================

final void A_StartFire()
{
	PlaySound('vile/firestrt', CHAN_VOICE);
	A_Fire();
}

//==========================================================================
//
//  A_FireCrackle
//
//  Fire sound.
//
//==========================================================================

final void A_FireCrackle()
{
	PlaySound('vile/firecrkl', CHAN_VOICE);
	A_Fire();
}

//==========================================================================
//
//  A_BrainPain
//
//  Brain pain sound.
//
//==========================================================================

final void A_BrainPain()
{
	PlaySound('brain/pain', CHAN_VOICE, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_BrainScream
//
//  Brain death sound, make explosions.
//
//==========================================================================

final void A_BrainScream()
{
	TVec org;
	Actor A;

	for (org.x = Origin.x - 196.0; org.x < Origin.x + 320.0; org.x += 8.0)
	{
		org.y = Origin.y - 320.0;
		org.z = 1.0 / 512.0 + Random() * 512.0;
		A = Spawn(Rocket, org);
		A.Velocity.z = Random() * 2.0 * 35.0;

		A.SetState(Rocket::S_BRAINEXPLODE1);

		A.StateTime -= Random() * 0.2;
		if (A.StateTime < 0.1)
			A.StateTime = 0.1;
	}

	PlaySound('brain/death', CHAN_VOICE, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_BrainExplode
//
//  Brain explosions.
//
//==========================================================================

final void A_BrainExplode()
{
	TVec org;
	Actor A;

	org.x = Origin.x + (Random() - Random()) * 8.0;
	org.y = Origin.y;
	org.z = 1.0 / 512.0 + Random() * 512.0;
	A = Spawn(Rocket, org);
	A.Velocity.z = Random() * 2.0 * 35.0;

	A.SetState(Rocket::S_BRAINEXPLODE1);

	A.StateTime -= Random() * 0.2;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;
}

//==========================================================================
//
//  A_BrainDie
//
//  Killed brain, exit level.
//
//==========================================================================

final void A_BrainDie()
{
	G_ExitLevel(0);
}

//==========================================================================
//
//  A_BrainAwake
//
//  Init boss spawner.
//
//==========================================================================

final void A_BrainAwake()
{
	Actor m;

	// find all the target spots
	DoomLevelInfo(Level).NumBrainTargets = 0;
	FOREACH(Actor, m)
	{
		if (m.Class == BossTarget)
		{
			DoomLevelInfo(Level).BrainTargets[DoomLevelInfo(Level).NumBrainTargets] = m;
			DoomLevelInfo(Level).NumBrainTargets++;
		}
	}
	DoomLevelInfo(Level).BrainTargetOn = 0;

	PlaySound('brain/sight', CHAN_VOICE, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_BrainSpit
//
//  Spawn a cube.
//
//==========================================================================

final void A_BrainSpit()
{
	Actor targ;
	Actor A;

	DoomLevelInfo(Level).bBrainEasy = !DoomLevelInfo(Level).bBrainEasy;
	if (Level.Game.gameskill <= sk_easy && !DoomLevelInfo(Level).bBrainEasy)
		return;

	// shoot a cube at current target
	targ = DoomLevelInfo(Level).BrainTargets[DoomLevelInfo(Level).BrainTargetOn];
	DoomLevelInfo(Level).BrainTargetOn = (DoomLevelInfo(Level).BrainTargetOn + 1) % DoomLevelInfo(Level).NumBrainTargets;

	// spawn brain missile
	A = SpawnMissile(targ, SpawnShot);
	A.Enemy = targ;
	A.ReactionCount = ftoi((targ.Origin.y - Origin.y) /
		A.Velocity.y / A.StateTime);

	PlaySound('brain/spit', CHAN_WEAPON, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  A_SpawnFly
//
//  Cube flying, spawn monster, when finished.
//
//==========================================================================

final void A_SpawnFly()
{
	Actor newmobj;
	Actor fog;
	int r;
	class<Actor> type;

	if (--ReactionCount)
		return;	// still flying

	// First spawn teleport fog.
	fog = Spawn(SpawnFire, Enemy.Origin);
	fog.PlaySound('brain/spawn', CHAN_VOICE);

	// Randomly select monster to spawn.
	r = P_Random();

	// Probability distribution (kind of :),
	// decreasing likelihood.
	if (r < 50)
		type = Imp;
	else if (r < 90)
		type = Demon;
	else if (r < 120)
		type = Shadows;
	else if (r < 130)
		type = PainElemental;
	else if (r < 160)
		type = Cacodemon;
	else if (r < 162)
		type = ArchVile;
	else if (r < 172)
		type = Revenant;
	else if (r < 192)
		type = Arachnotron;
	else if (r < 222)
		type = Mancubus;
	else if (r < 246)
		type = HellKnight;
	else
		type = BaronOfHell;

	newmobj = Spawn(type, Enemy.Origin);
	if (newmobj.LookForPlayers(true))
		newmobj.SetState(newmobj.SeeState);

	// telefrag anything in this spot
	newmobj.bTelestomp = true;
	newmobj.TeleportMove(newmobj.Origin);

	// remove self (i.e., cube).
	Remove();
}

//==========================================================================
//
//  A_SpawnSound
//
//  Travelling cube sound.
//
//==========================================================================

final void A_SpawnSound()
{
	PlaySound('brain/cube', CHAN_VOICE);
	A_SpawnFly();
}

//==========================================================================
//
//  A_KeenDie
//
//  DOOM II special, map 32. Uses special tag 666.
//
//==========================================================================

final void A_KeenDie()
{
	A_Fall();

	// scan the remaining thinkers to see if all Keens are dead
	if (FindOther())
	{
		return;
	}
	Level.ExecuteActionSpecial(LNSPEC_DoorOpen, 666, 16, 150, 0, 0, NULL, 0, none);
}

//==========================================================================
//
//	BossDeathSpecialAction
//
//==========================================================================

void BossDeathSpecialAction()
{
	// make sure there is a player alive for victory
	int i;
	for (i = 0; i < MAXPLAYERS; i++)
		if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
			break;

	if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game

	// scan the remaining thinkers to see if all bosses are dead
	Actor Other;
	FOREACH(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other boss not dead
			return;
		}
	}

	// victory!
	if (XLevel.bSpecialActionKillMonsters)
	{
		// Kill any remaining monsters
		DoomLevelInfo(Level).P_Massacre();
	}

	if (XLevel.bSpecialActionOpenDoor)
	{
		Level.ExecuteActionSpecial(LNSPEC_DoorOpen, 666, 64, 150, 0, 0,
			NULL, 0, none);
	}
	else if (XLevel.bSpecialActionLowerFloor)
	{
		Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0,
			0, NULL, 0, none);
	}
	else
	{
		G_ExitLevel(0);
	}
}

//==========================================================================
//
//  A_BossDeath
//
//  Possibly trigger special effects if on first boss level
//
//==========================================================================

final void A_BossDeath()
{
	if (Class == BaronOfHell)
	{
		if (!XLevel.bBaronSpecial)
		{
			//  Not a boss level
			return;
		}
		BossDeathSpecialAction();
	}
	else if (Class == Cyberdemon)
	{
		if (!XLevel.bCyberDemonSpecial)
		{
			//  Not a boss level
			return;
		}
		BossDeathSpecialAction();
	}
	else if (Class == SpiderMastermind)
	{
		if (!XLevel.bSpiderMastermindSpecial)
		{
			//  Not a boss level
			return;
		}
		BossDeathSpecialAction();
	}
	else if (Class == Arachnotron)
	{
		int i;
		Actor Other;

		if (!XLevel.bMap07Special)
		{
			//  Not a boss level
			return;
		}

		// make sure there is a player alive for victory
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
				break;

		if (i == MAXPLAYERS)
			return;	// no one left alive, so do not end game

		// scan the remaining thinkers to see if all bosses are dead
		FOREACH(Arachnotron, Other)
		{
			if (Other != self && Other.Health > 0)
			{
				// other boss not dead
				return;
			}
		}

		// victory!
		Level.ExecuteActionSpecial(LNSPEC_FloorRaiseByTexture, 667, 8, 0, 0, 0, NULL, 0, none);
	}
	else if (Class == Mancubus)
	{
		int i;
		Mancubus Other;

		if (!XLevel.bMap07Special)
		{
			//  Not a boss level
			return;
		}

		// make sure there is a player alive for victory
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
				break;

		if (i == MAXPLAYERS)
			return;	// no one left alive, so do not end game

		// scan the remaining thinkers to see if all bosses are dead
		FOREACH(Mancubus, Other)
		{
			if (Other != self && Other.Health > 0)
			{
				// other boss not dead
				return;
			}
		}

		// victory!
		Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0, 0, NULL, 0, none);
	}
}

//**************************************************************************
//**************************************************************************
//**************************************************************************
//**************************************************************************
//**************************************************************************
//**************************************************************************

const float LOWERSPEED		= 6.0;
const float RAISESPEED		= 6.0;

const float WEAPONBOTTOM	= 128.0;
const float WEAPONTOP		= 32.0;

//===========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
// Follows after getting weapon up, or after previous attack/fire sequence.
//
//===========================================================================

final void A_WeaponReady()
{
	float angle;

	// get out of attack state
	if (Owner.State == Actor(Owner).MissileState ||
		Owner.State == DoomPlayer::S_PLAY_ATK2)
	{
		Owner.SetState(Actor(Owner).IdleState);
	}

	if (Player(Owner.Player).ReadyWeapon == DoomDefs::wp_chainsaw &&
		Owner.Player.ViewStates[ps_weapon].State == Weapon(self).ReadyState)
	{
		Owner.PlaySound('weapons/sawidle', CHAN_WEAPON);
	}

	// check for change
	//  if player is dead, put the weapon away
	if (Player(Owner.Player).PendingWeapon != DoomDefs::wp_nochange || !Owner.Player.Health)
	{
		// change weapon
		//  (pending weapon should allready be validated)
		Owner.Player.SetViewState(ps_weapon, Weapon(self).DownState);
		return;
	}

	// check for fire
	//  the missile launcher and bfg do not auto fire
	if (Owner.Player.Buttons & BT_ATTACK)
	{
		if (!Owner.Player.bAttackDown || (Player(Owner.Player).ReadyWeapon != DoomDefs::wp_missile &&
			Player(Owner.Player).ReadyWeapon != DoomDefs::wp_bfg))
		{
			Owner.Player.bAttackDown = true;
			Player(Owner.Player).FireWeapon();
			return;
		}
	}
	else
		Owner.Player.bAttackDown = false;

	// bob the weapon based on movement speed
	angle = AngleMod360(180.0 * Level.Game.level->time);
	Owner.Player.ViewStates[ps_weapon].SX = 1.0 + Player(Owner.Player).Bob * cos(angle);
	if (angle >= 180.0)
	{
		angle -= 180.0;
	}
	Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP + Player(Owner.Player).Bob * sin(angle);
}

//===========================================================================
//
//  A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//===========================================================================

final void A_Lower()
{
	//	FIXME!!
	if (Level.Game.frametime < 1.0 / 35.0)
		Owner.Player.ViewStates[ps_weapon].SY += LOWERSPEED;
	else
		Owner.Player.ViewStates[ps_weapon].SY += LOWERSPEED * 35.0 * Level.Game.frametime;

	// Is already down.
	if (Owner.Player.ViewStates[ps_weapon].SY < WEAPONBOTTOM)
		return;

	// Player is dead.
	if (Owner.Player.PlayerState == PST_DEAD)
	{
		Owner.Player.ViewStates[ps_weapon].SY = WEAPONBOTTOM;

		// don't bring weapon back up
		return;
	}

	// The old weapon has been lowered off the screen,
	// so change the weapon and start raising it
	if (!Owner.Player.Health)
	{
		// Player is dead, so keep the weapon off screen.
		Owner.Player.SetViewState(ps_weapon, none);
		return;
	}

	Player(Owner.Player).SetWeapon(Player(Owner.Player).PendingWeapon);

	Player(Owner.Player).BringUpWeapon();
}

//===========================================================================
//
//  A_Raise
//
//===========================================================================

final void A_Raise()
{
	//	FIXME!!
	if (Level.Game.frametime < 1.0 / 35.0)
		Owner.Player.ViewStates[ps_weapon].SY -= RAISESPEED;
	else
		Owner.Player.ViewStates[ps_weapon].SY -= RAISESPEED * 35.0 * Level.Game.frametime;

	if (Owner.Player.ViewStates[ps_weapon].SY > WEAPONTOP)
	{
		return;
	}

	Owner.Player.ViewStates[ps_weapon].SY = WEAPONTOP;

	// The weapon has been raised all the way,
	//  so change to the ready state.
	Owner.Player.SetViewState(ps_weapon, Weapon(self).ReadyState);
}

//===========================================================================
//
//  A_ReFire
//
//  The player can re-fire the weapon without lowering it entirely.
//
//===========================================================================

final void A_ReFire()
{
	// check for fire
	//  (if a weaponchange is pending, let it go through instead)
	if ((Owner.Player.Buttons & BT_ATTACK)
		&& Player(Owner.Player).PendingWeapon == DoomDefs::wp_nochange && Owner.Player.Health)
	{
		Player(Owner.Player).Refire++;
		Player(Owner.Player).FireWeapon();
	}
	else
	{
		Player(Owner.Player).Refire = 0;
		Player(Owner.Player).CheckAmmo();
	}
}

//===========================================================================
//
//  A_CheckReload
//
//===========================================================================

final void A_CheckReload()
{
	Player(Owner.Player).CheckAmmo();
}

//===========================================================================
//
//  A_GunFlash
//
//===========================================================================

final void A_GunFlash()
{
	Owner.SetState(DoomPlayer::S_PLAY_ATK2);
	Owner.Player.SetViewState(ps_flash, Weapon(self).FlashState);
}

//===========================================================================
//
//  A_Light0
//
//===========================================================================

final void A_Light0()
{
	Owner.Player.ExtraLight = 0;
	Owner.Effects &= ~DoomDefs::EF_DLIGHT_MASK;
}

//===========================================================================
//
//  A_Light1
//
//===========================================================================

final void A_Light1()
{
	Owner.Player.ExtraLight = 1;
}

//===========================================================================
//
//  A_Light2
//
//===========================================================================

final void A_Light2()
{
	Owner.Player.ExtraLight = 2;
}

//===========================================================================
//
//  GunShot
//
//===========================================================================

final void GunShot(Actor A, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 5 * (P_Random() % 3 + 1);

	A.LineAttack(dir, Actor::MISSILERANGE, damage);
}

//**************************************************************************
//**************************************************************************
//**************************************************************************
//**************************************************************************
//**************************************************************************

//===========================================================================
//
//  A_Punch
//
//===========================================================================

final void A_Punch()
{
	int damage;
	TAVec aimAngles;
	TVec dir;

	damage = (P_Random() % 10 + 1) << 1;

	if (Player(Owner.Player).Powers[pw_strength])
		damage *= 10;

	aimAngles = Owner.Angles;
	aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
		Random()) * 45.0 / 8.0);
	dir = Actor(Owner).AimLineAttack(aimAngles, Actor::MELEERANGE);
	Actor(Owner).LineAttack(dir, Actor::MELEERANGE, damage);

	// turn to face target
	if (Actor(Owner).linetarget)
	{
		Owner.PlaySound('*fist', CHAN_WEAPON);
		Owner.Angles.yaw = atan2(
			Actor(Owner).linetarget.Origin.y - Owner.Origin.y,
			Actor(Owner).linetarget.Origin.x - Owner.Origin.x);
		Owner.Player.bFixAngle = true;
	}
}

//===========================================================================
//
//  A_Saw
//
//===========================================================================

final void A_Saw()
{
	float angle;
	int damage;
	TAVec aimAng;
	TVec dir;

	damage = 2 * (P_Random() % 10 + 1);
	aimAng = Owner.Angles;
	aimAng.yaw = AngleMod360(aimAng.yaw + (Random() -
		Random()) * 45.0 / 8.0);

	// use meleerange + 1 se the puff doesn't skip the flash
	dir = Actor(Owner).AimLineAttack(aimAng, Actor::MELEERANGE + 0.00001);
	Actor(Owner).LineAttack(dir, Actor::MELEERANGE + 0.00001, damage);

	if (!Actor(Owner).linetarget)
	{
		Owner.PlaySound('weapons/sawfull', CHAN_WEAPON);
		return;
	}
	Owner.PlaySound('weapons/sawhit', CHAN_WEAPON);

	// turn to face target
	angle = atan2(Actor(Owner).linetarget.Origin.y - Owner.Origin.y,
		Actor(Owner).linetarget.Origin.x - Owner.Origin.x);
	if (AngleMod360(angle - Owner.Angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - Owner.Angles.yaw) < -90.0 / 20.0)
			Owner.Angles.yaw = angle + 90.0 / 21.0;
		else
			Owner.Angles.yaw = Owner.Angles.yaw - 90.0 / 20.0;
	}
	else
	{
		if (AngleMod360(angle - Owner.Angles.yaw) > 90.0 / 20.0)
			Owner.Angles.yaw = angle - 90.0 / 21.0;
		else
			Owner.Angles.yaw += 90.0 / 20.0;
	}
	Owner.Angles.yaw = AngleMod360(Owner.Angles.yaw);
	Actor(Owner).bJustAttacked = true;
	Owner.Player.bFixAngle = true;
}

//===========================================================================
//
//  A_FirePistol
//
//===========================================================================

final void A_FirePistol()
{
	TVec dir;

	Owner.PlaySound('weapons/pistol', CHAN_WEAPON);

	Owner.SetState(DoomPlayer::S_PLAY_ATK2);
	Player(Owner.Player).Ammo[Weapon(self).Ammo]--;

	Owner.Player.SetViewState(ps_flash, Weapon(self).FlashState);

	dir = Actor(Owner).Aim(16.0 * 64.0);
	GunShot(Actor(Owner), !Player(Owner.Player).Refire, dir);
	Owner.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_FireShotgun
//
//===========================================================================

final void A_FireShotgun()
{
	int i;
	TVec dir;

	Owner.PlaySound('weapons/shotgf', CHAN_WEAPON);
	Owner.SetState(DoomPlayer::S_PLAY_ATK2);

	Player(Owner.Player).Ammo[Weapon(self).Ammo]--;

	Owner.Player.SetViewState(ps_flash, Weapon(self).FlashState);

	dir = Actor(Owner).Aim(16.0 * 64.0);
	for (i = 0; i < 7; i++)
	{
		GunShot(Actor(Owner), false, dir);
	}
	Owner.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_FireShotgun2
//
//===========================================================================

final void A_FireShotgun2()
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	Owner.PlaySound('weapons/sshotf', CHAN_WEAPON);
	Owner.SetState(DoomPlayer::S_PLAY_ATK2);

	Player(Owner.Player).Ammo[Weapon(self).Ammo] -= 2;

	Owner.Player.SetViewState(ps_flash, Weapon(self).FlashState);

	aimDir = Actor(Owner).Aim(16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		Actor(Owner).LineAttack(dir, Actor::MISSILERANGE, damage);
	}
	Owner.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_OpenShotgun2
//
//===========================================================================

final void A_OpenShotgun2()
{
	Owner.PlaySound('weapons/sshoto', CHAN_WEAPON);
}

//===========================================================================
//
//  A_LoadShotgun2
//
//===========================================================================

final void A_LoadShotgun2()
{
	Owner.PlaySound('weapons/sshotl', CHAN_WEAPON);
}

//===========================================================================
//
//  A_CloseShotgun2
//
//===========================================================================

final void A_CloseShotgun2()
{
	Owner.PlaySound('weapons/sshotc', CHAN_WEAPON);
	A_ReFire();
}

//===========================================================================
//
//  A_FireCGun
//
//===========================================================================

final void A_FireCGun()
{
	TVec dir;

	Owner.PlaySound('weapons/chngun', CHAN_WEAPON);

	if (!Player(Owner.Player).Ammo[Weapon(self).Ammo])
		return;

	Owner.SetState(DoomPlayer::S_PLAY_ATK2);
	Player(Owner.Player).Ammo[Weapon(self).Ammo]--;

	if (Owner.Player.ViewStates[ps_weapon].State == Weapon(self).AttackState)
		Owner.Player.SetViewState(ps_flash, Weapon(self).FlashState);
	else
		Owner.Player.SetViewState(ps_flash, WeaponChaingun::S_CHAINFLASH2);

	dir = Actor(Owner).Aim(16.0 * 64.0);
	GunShot(Actor(Owner), !Player(Owner.Player).Refire, dir);
	Owner.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_FireMissile
//
//===========================================================================

final void A_FireMissile()
{
	Player(Owner.Player).Ammo[Weapon(self).Ammo]--;
	Player(Owner.Player).SpawnPlayerMissile(Rocket);
}

//===========================================================================
//
//  A_FirePlasma
//
//===========================================================================

final void A_FirePlasma()
{
	Player(Owner.Player).Ammo[Weapon(self).Ammo]--;
	if (!(P_Random() & 1))
		Owner.Player.SetViewState(ps_flash, Weapon(self).FlashState);
	else
		Owner.Player.SetViewState(ps_flash, WeaponPlasma::S_PLASMAFLASH2);
	Player(Owner.Player).SpawnPlayerMissile(PlasmaShot);
}

//===========================================================================
//
//  A_BFGsound
//
//===========================================================================

final void A_BFGsound()
{
	Owner.PlaySound('weapons/bfgf', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireBFG
//
//===========================================================================

final void A_FireBFG()
{
	Player(Owner.Player).Ammo[Weapon(self).Ammo] -= MainGameInfo(Level.Game).BFGCELLS;
	Player(Owner.Player).SpawnPlayerMissile(BFGShot);
}

//	Since many dehacked patches are mixing weapon and actor states we export
//Weapon
__states__
{
	S_LIGHTDONE('SHTG', 4, 0.0 / 35.0, none) = A_Light0
}
//WeaponFist
__states__
{
	S_PUNCH('PUNG', 0, 1.0 / 35.0, S_PUNCH) = A_WeaponReady
	S_PUNCHDOWN('PUNG', 0, 1.0 / 35.0, S_PUNCHDOWN) = A_Lower
	S_PUNCHUP('PUNG', 0, 1.0 / 35.0, S_PUNCHUP) = A_Raise
	S_PUNCH1('PUNG', 1, 4.0 / 35.0, S_PUNCH2) = none
	S_PUNCH2('PUNG', 2, 4.0 / 35.0, S_PUNCH3) = A_Punch
	S_PUNCH3('PUNG', 3, 5.0 / 35.0, S_PUNCH4) = none
	S_PUNCH4('PUNG', 2, 4.0 / 35.0, S_PUNCH5) = none
	S_PUNCH5('PUNG', 1, 5.0 / 35.0, S_PUNCH) = A_ReFire
}
//WeaponPistol
__states__
{
	S_PISTOL('PISG', 0, 1.0 / 35.0, S_PISTOL) = A_WeaponReady
	S_PISTOLDOWN('PISG', 0, 1.0 / 35.0, S_PISTOLDOWN) = A_Lower
	S_PISTOLUP('PISG', 0, 1.0 / 35.0, S_PISTOLUP) = A_Raise
	S_PISTOL1('PISG', 0, 4.0 / 35.0, S_PISTOL2) = none
	S_PISTOL2('PISG', 1, 6.0 / 35.0, S_PISTOL3) = A_FirePistol
	S_PISTOL3('PISG', 2, 4.0 / 35.0, S_PISTOL4) = none
	S_PISTOL4('PISG', 1, 5.0 / 35.0, S_PISTOL) = A_ReFire
	S_PISTOLFLASH('PISF', 0 | FF_FULLBRIGHT, 7.0 / 35.0, S_LIGHTDONE) = A_Light1
}
//WeaponShotgun
__states__
{
	S_SGUN('SHTG', 0, 1.0 / 35.0, S_SGUN) = A_WeaponReady
	S_SGUNDOWN('SHTG', 0, 1.0 / 35.0, S_SGUNDOWN) = A_Lower
	S_SGUNUP('SHTG', 0, 1.0 / 35.0, S_SGUNUP) = A_Raise
	S_SGUN1('SHTG', 0, 3.0 / 35.0, S_SGUN2) = none
	S_SGUN2('SHTG', 0, 7.0 / 35.0, S_SGUN3) = A_FireShotgun
	S_SGUN3('SHTG', 1, 5.0 / 35.0, S_SGUN4) = none
	S_SGUN4('SHTG', 2, 5.0 / 35.0, S_SGUN5) = none
	S_SGUN5('SHTG', 3, 4.0 / 35.0, S_SGUN6) = none
	S_SGUN6('SHTG', 2, 5.0 / 35.0, S_SGUN7) = none
	S_SGUN7('SHTG', 1, 5.0 / 35.0, S_SGUN8) = none
	S_SGUN8('SHTG', 0, 3.0 / 35.0, S_SGUN9) = none
	S_SGUN9('SHTG', 0, 7.0 / 35.0, S_SGUN) = A_ReFire
	S_SGUNFLASH1('SHTF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SGUNFLASH2) = A_Light1
	S_SGUNFLASH2('SHTF', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_LIGHTDONE) = A_Light2
}
//WeaponSuperShotgun
__states__
{
	S_DSGUN('SHT2', 0, 1.0 / 35.0, S_DSGUN) = A_WeaponReady
	S_DSGUNDOWN('SHT2', 0, 1.0 / 35.0, S_DSGUNDOWN) = A_Lower
	S_DSGUNUP('SHT2', 0, 1.0 / 35.0, S_DSGUNUP) = A_Raise
	S_DSGUN1('SHT2', 0, 3.0 / 35.0, S_DSGUN2) = none
	S_DSGUN2('SHT2', 0, 7.0 / 35.0, S_DSGUN3) = A_FireShotgun2
	S_DSGUN3('SHT2', 1, 7.0 / 35.0, S_DSGUN4) = none
	S_DSGUN4('SHT2', 2, 7.0 / 35.0, S_DSGUN5) = A_CheckReload
	S_DSGUN5('SHT2', 3, 7.0 / 35.0, S_DSGUN6) = A_OpenShotgun2
	S_DSGUN6('SHT2', 4, 7.0 / 35.0, S_DSGUN7) = none
	S_DSGUN7('SHT2', 5, 7.0 / 35.0, S_DSGUN8) = A_LoadShotgun2
	S_DSGUN8('SHT2', 6, 6.0 / 35.0, S_DSGUN9) = none
	S_DSGUN9('SHT2', 7, 6.0 / 35.0, S_DSGUN10) = A_CloseShotgun2
	S_DSGUN10('SHT2', 0, 5.0 / 35.0, S_DSGUN) = A_ReFire
	S_DSNR1('SHT2', 1, 7.0 / 35.0, S_DSNR2) = none
	S_DSNR2('SHT2', 0, 3.0 / 35.0, S_DSGUNDOWN) = none
	S_DSGUNFLASH1('SHT2', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_DSGUNFLASH2) = A_Light1
	S_DSGUNFLASH2('SHT2', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) = A_Light2
}
//WeaponChaingun
__states__
{
	S_CHAIN('CHGG', 0, 1.0 / 35.0, S_CHAIN) = A_WeaponReady
	S_CHAINDOWN('CHGG', 0, 1.0 / 35.0, S_CHAINDOWN) = A_Lower
	S_CHAINUP('CHGG', 0, 1.0 / 35.0, S_CHAINUP) = A_Raise
	S_CHAIN1('CHGG', 0, 4.0 / 35.0, S_CHAIN2) = A_FireCGun
	S_CHAIN2('CHGG', 1, 4.0 / 35.0, S_CHAIN3) = A_FireCGun
	S_CHAIN3('CHGG', 1, 0.0 / 35.0, S_CHAIN) = A_ReFire
	S_CHAINFLASH1('CHGF', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) = A_Light1
	S_CHAINFLASH2('CHGF', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) = A_Light2
}
//WeaponMissile
__states__
{
	S_MISSILE('MISG', 0, 1.0 / 35.0, S_MISSILE) = A_WeaponReady
	S_MISSILEDOWN('MISG', 0, 1.0 / 35.0, S_MISSILEDOWN) = A_Lower
	S_MISSILEUP('MISG', 0, 1.0 / 35.0, S_MISSILEUP) = A_Raise
	S_MISSILE1('MISG', 1, 8.0 / 35.0, S_MISSILE2) = A_GunFlash
	S_MISSILE2('MISG', 1, 12.0 / 35.0, S_MISSILE3) = A_FireMissile
	S_MISSILE3('MISG', 1, 0.0 / 35.0, S_MISSILE) = A_ReFire
	S_MISSILEFLASH1('MISF', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_MISSILEFLASH2) = A_Light1
	S_MISSILEFLASH2('MISF', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_MISSILEFLASH3) = none
	S_MISSILEFLASH3('MISF', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_MISSILEFLASH4) = A_Light2
	S_MISSILEFLASH4('MISF', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) = A_Light2
}
//WeaponChainsaw
__states__
{
	S_SAW('SAWG', 2, 4.0 / 35.0, S_SAWB) = A_WeaponReady
	S_SAWB('SAWG', 3, 4.0 / 35.0, S_SAW) = A_WeaponReady
	S_SAWDOWN('SAWG', 2, 1.0 / 35.0, S_SAWDOWN) = A_Lower
	S_SAWUP('SAWG', 2, 1.0 / 35.0, S_SAWUP) = A_Raise
	S_SAW1('SAWG', 0, 4.0 / 35.0, S_SAW2) = A_Saw
	S_SAW2('SAWG', 1, 4.0 / 35.0, S_SAW3) = A_Saw
	S_SAW3('SAWG', 1, 0.0 / 35.0, S_SAW) = A_ReFire
}
//WeaponPlasma
__states__
{
	S_PLASMA('PLSG', 0, 1.0 / 35.0, S_PLASMA) = A_WeaponReady
	S_PLASMADOWN('PLSG', 0, 1.0 / 35.0, S_PLASMADOWN) = A_Lower
	S_PLASMAUP('PLSG', 0, 1.0 / 35.0, S_PLASMAUP) = A_Raise
	S_PLASMA1('PLSG', 0, 3.0 / 35.0, S_PLASMA2) = A_FirePlasma
	S_PLASMA2('PLSG', 1, 20.0 / 35.0, S_PLASMA) = A_ReFire
	S_PLASMAFLASH1('PLSF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) = A_Light1
	S_PLASMAFLASH2('PLSF', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) = A_Light1
}
//WeaponBFG
__states__
{
	S_BFG('BFGG', 0, 1.0 / 35.0, S_BFG) = A_WeaponReady
	S_BFGDOWN('BFGG', 0, 1.0 / 35.0, S_BFGDOWN) = A_Lower
	S_BFGUP('BFGG', 0, 1.0 / 35.0, S_BFGUP) = A_Raise
	S_BFG1('BFGG', 0, 20.0 / 35.0, S_BFG2) = A_BFGsound
	S_BFG2('BFGG', 1, 10.0 / 35.0, S_BFG3) = A_GunFlash
	S_BFG3('BFGG', 1, 10.0 / 35.0, S_BFG4) = A_FireBFG
	S_BFG4('BFGG', 1, 20.0 / 35.0, S_BFG) = A_ReFire
	S_BFGFLASH1('BFGF', 0 | FF_FULLBRIGHT, 11.0 / 35.0, S_BFGFLASH2) = A_Light1
	S_BFGFLASH2('BFGF', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_LIGHTDONE) = A_Light2
}
//Blood
__states__
{
	S_BLOOD1('BLUD', 2, 8.0 / 35.0, S_BLOOD2) = none
	S_BLOOD2('BLUD', 1, 8.0 / 35.0, S_BLOOD3) = none
	S_BLOOD3('BLUD', 0, 8.0 / 35.0, none) = none
}
//Puff
__states__
{
	S_PUFF1('PUFF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_PUFF2) = none
	S_PUFF2('PUFF', 1, 4.0 / 35.0, S_PUFF3) = none
	S_PUFF3('PUFF', 2, 4.0 / 35.0, S_PUFF4) = none
	S_PUFF4('PUFF', 3, 4.0 / 35.0, none) = none
}
//ImpMissile
__states__
{
	S_TBALL1('BAL1', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_TBALL2) = none
	S_TBALL2('BAL1', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_TBALL1) = none
	S_TBALLX1('BAL1', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_TBALLX2) = none
	S_TBALLX2('BAL1', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_TBALLX3) = none
	S_TBALLX3('BAL1', 4 | FF_FULLBRIGHT, 6.0 / 35.0, none) = none
}
//CacodemonMissile
__states__
{
	S_RBALL1('BAL2', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_RBALL2) = none
	S_RBALL2('BAL2', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_RBALL1) = none
	S_RBALLX1('BAL2', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_RBALLX2) = none
	S_RBALLX2('BAL2', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_RBALLX3) = none
	S_RBALLX3('BAL2', 4 | FF_FULLBRIGHT, 6.0 / 35.0, none) = none
}
//PlasmaShot
__states__
{
	S_PLASBALL('PLSS', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_PLASBALL2) = none
	S_PLASBALL2('PLSS', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_PLASBALL) = none
	S_PLASEXP('PLSE', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASEXP2) = none
	S_PLASEXP2('PLSE', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASEXP3) = none
	S_PLASEXP3('PLSE', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASEXP4) = none
	S_PLASEXP4('PLSE', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASEXP5) = none
	S_PLASEXP5('PLSE', 4 | FF_FULLBRIGHT, 4.0 / 35.0, none) = none
}
//Rocket
__states__
{
	S_ROCKET('MISL', 0 | FF_FULLBRIGHT, 1.0 / 35.0, S_ROCKET) = none
}
//BFGShot
__states__
{
	S_BFGSHOT('BFS1', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_BFGSHOT2) = none
	S_BFGSHOT2('BFS1', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_BFGSHOT) = none
	S_BFGLAND('BFE1', 0 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND2) = none
	S_BFGLAND2('BFE1', 1 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND3) = none
	S_BFGLAND3('BFE1', 2 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND4) = A_BFGSpray
	S_BFGLAND4('BFE1', 3 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND5) = none
	S_BFGLAND5('BFE1', 4 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND6) = none
	S_BFGLAND6('BFE1', 5 | FF_FULLBRIGHT, 8.0 / 35.0, none) = none
}
//ExtraBFG
__states__
{
	S_BFGEXP('BFE2', 0 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGEXP2) = none
	S_BFGEXP2('BFE2', 1 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGEXP3) = none
	S_BFGEXP3('BFE2', 2 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGEXP4) = none
	S_BFGEXP4('BFE2', 3 | FF_FULLBRIGHT, 8.0 / 35.0, none) = none
}
//Rocket
__states__
{
	S_EXPLODE1('MISL', 1 | FF_FULLBRIGHT, 8.0 / 35.0, S_EXPLODE2) = A_Explode
	S_EXPLODE2('MISL', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_EXPLODE3) = none
	S_EXPLODE3('MISL', 3 | FF_FULLBRIGHT, 4.0 / 35.0, none) = none
}
//TeleportFog
__states__
{
	S_TFOG('TFOG', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG01) = none
	S_TFOG01('TFOG', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG02) = none
	S_TFOG02('TFOG', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG2) = none
	S_TFOG2('TFOG', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG3) = none
	S_TFOG3('TFOG', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG4) = none
	S_TFOG4('TFOG', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG5) = none
	S_TFOG5('TFOG', 4 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG6) = none
	S_TFOG6('TFOG', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG7) = none
	S_TFOG7('TFOG', 6 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG8) = none
	S_TFOG8('TFOG', 7 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG9) = none
	S_TFOG9('TFOG', 8 | FF_FULLBRIGHT, 6.0 / 35.0, S_TFOG10) = none
	S_TFOG10('TFOG', 9 | FF_FULLBRIGHT, 6.0 / 35.0, none) = none
}
//ItemRespawnFog
__states__
{
	S_IFOG('IFOG', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_IFOG01) = none
	S_IFOG01('IFOG', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_IFOG02) = none
	S_IFOG02('IFOG', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_IFOG2) = none
	S_IFOG2('IFOG', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_IFOG3) = none
	S_IFOG3('IFOG', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_IFOG4) = none
	S_IFOG4('IFOG', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_IFOG5) = none
	S_IFOG5('IFOG', 4 | FF_FULLBRIGHT, 6.0 / 35.0, none) = none
}
//DoomPlayer
__states__
{
	S_PLAY('PLAY', 0, -1.0, none) = none
	S_PLAY_RUN1('PLAY', 0, 4.0 / 35.0, S_PLAY_RUN2) = none
	S_PLAY_RUN2('PLAY', 1, 4.0 / 35.0, S_PLAY_RUN3) = none
	S_PLAY_RUN3('PLAY', 2, 4.0 / 35.0, S_PLAY_RUN4) = none
	S_PLAY_RUN4('PLAY', 3, 4.0 / 35.0, S_PLAY_RUN1) = none
	S_PLAY_ATK1('PLAY', 4, 12.0 / 35.0, S_PLAY) = none
	S_PLAY_ATK2('PLAY', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_PLAY_ATK1) = none
	S_PLAY_PAIN('PLAY', 6, 4.0 / 35.0, S_PLAY_PAIN2) = none
	S_PLAY_PAIN2('PLAY', 6, 4.0 / 35.0, S_PLAY) = A_Pain
	S_PLAY_DIE1('PLAY', 7, 10.0 / 35.0, S_PLAY_DIE2) = none
	S_PLAY_DIE2('PLAY', 8, 10.0 / 35.0, S_PLAY_DIE3) = A_PlayerScream
	S_PLAY_DIE3('PLAY', 9, 10.0 / 35.0, S_PLAY_DIE4) = A_Fall
	S_PLAY_DIE4('PLAY', 10, 10.0 / 35.0, S_PLAY_DIE5) = none
	S_PLAY_DIE5('PLAY', 11, 10.0 / 35.0, S_PLAY_DIE6) = none
	S_PLAY_DIE6('PLAY', 12, 10.0 / 35.0, S_PLAY_DIE7) = none
	S_PLAY_DIE7('PLAY', 13, -1.0, none) = none
	S_PLAY_XDIE1('PLAY', 14, 5.0 / 35.0, S_PLAY_XDIE2) = none
	S_PLAY_XDIE2('PLAY', 15, 5.0 / 35.0, S_PLAY_XDIE3) = A_XScream
	S_PLAY_XDIE3('PLAY', 16, 5.0 / 35.0, S_PLAY_XDIE4) = A_Fall
	S_PLAY_XDIE4('PLAY', 17, 5.0 / 35.0, S_PLAY_XDIE5) = none
	S_PLAY_XDIE5('PLAY', 18, 5.0 / 35.0, S_PLAY_XDIE6) = none
	S_PLAY_XDIE6('PLAY', 19, 5.0 / 35.0, S_PLAY_XDIE7) = none
	S_PLAY_XDIE7('PLAY', 20, 5.0 / 35.0, S_PLAY_XDIE8) = none
	S_PLAY_XDIE8('PLAY', 21, 5.0 / 35.0, S_PLAY_XDIE9) = none
	S_PLAY_XDIE9('PLAY', 22, -1.0, none) = none
}
//Zombieman
__states__
{
	S_POSS_STND('POSS', 0, 10.0 / 35.0, S_POSS_STND2) = A_Look
	S_POSS_STND2('POSS', 1, 10.0 / 35.0, S_POSS_STND) = A_Look
	S_POSS_RUN1('POSS', 0, 4.0 / 35.0, S_POSS_RUN2) = A_Chase
	S_POSS_RUN2('POSS', 0, 4.0 / 35.0, S_POSS_RUN3) = A_Chase
	S_POSS_RUN3('POSS', 1, 4.0 / 35.0, S_POSS_RUN4) = A_Chase
	S_POSS_RUN4('POSS', 1, 4.0 / 35.0, S_POSS_RUN5) = A_Chase
	S_POSS_RUN5('POSS', 2, 4.0 / 35.0, S_POSS_RUN6) = A_Chase
	S_POSS_RUN6('POSS', 2, 4.0 / 35.0, S_POSS_RUN7) = A_Chase
	S_POSS_RUN7('POSS', 3, 4.0 / 35.0, S_POSS_RUN8) = A_Chase
	S_POSS_RUN8('POSS', 3, 4.0 / 35.0, S_POSS_RUN1) = A_Chase
	S_POSS_ATK1('POSS', 4, 10.0 / 35.0, S_POSS_ATK2) = A_FaceTarget
	S_POSS_ATK2('POSS', 5, 8.0 / 35.0, S_POSS_ATK3) = A_PosAttack
	S_POSS_ATK3('POSS', 4, 8.0 / 35.0, S_POSS_RUN1) = none
	S_POSS_PAIN('POSS', 6, 3.0 / 35.0, S_POSS_PAIN2) = none
	S_POSS_PAIN2('POSS', 6, 3.0 / 35.0, S_POSS_RUN1) = A_Pain
	S_POSS_DIE1('POSS', 7, 5.0 / 35.0, S_POSS_DIE2) = none
	S_POSS_DIE2('POSS', 8, 5.0 / 35.0, S_POSS_DIE3) = A_Scream
	S_POSS_DIE3('POSS', 9, 5.0 / 35.0, S_POSS_DIE4) = A_Fall
	S_POSS_DIE4('POSS', 10, 5.0 / 35.0, S_POSS_DIE5) = none
	S_POSS_DIE5('POSS', 11, -1.0, none) = none
	S_POSS_XDIE1('POSS', 12, 5.0 / 35.0, S_POSS_XDIE2) = none
	S_POSS_XDIE2('POSS', 13, 5.0 / 35.0, S_POSS_XDIE3) = A_XScream
	S_POSS_XDIE3('POSS', 14, 5.0 / 35.0, S_POSS_XDIE4) = A_Fall
	S_POSS_XDIE4('POSS', 15, 5.0 / 35.0, S_POSS_XDIE5) = none
	S_POSS_XDIE5('POSS', 16, 5.0 / 35.0, S_POSS_XDIE6) = none
	S_POSS_XDIE6('POSS', 17, 5.0 / 35.0, S_POSS_XDIE7) = none
	S_POSS_XDIE7('POSS', 18, 5.0 / 35.0, S_POSS_XDIE8) = none
	S_POSS_XDIE8('POSS', 19, 5.0 / 35.0, S_POSS_XDIE9) = none
	S_POSS_XDIE9('POSS', 20, -1.0, none) = none
	S_POSS_RAISE1('POSS', 10, 5.0 / 35.0, S_POSS_RAISE2) = none
	S_POSS_RAISE2('POSS', 9, 5.0 / 35.0, S_POSS_RAISE3) = none
	S_POSS_RAISE3('POSS', 8, 5.0 / 35.0, S_POSS_RAISE4) = none
	S_POSS_RAISE4('POSS', 7, 5.0 / 35.0, S_POSS_RUN1) = none
}
//ShotgunGuy
__states__
{
	S_SPOS_STND('SPOS', 0, 10.0 / 35.0, S_SPOS_STND2) = A_Look
	S_SPOS_STND2('SPOS', 1, 10.0 / 35.0, S_SPOS_STND) = A_Look
	S_SPOS_RUN1('SPOS', 0, 3.0 / 35.0, S_SPOS_RUN2) = A_Chase
	S_SPOS_RUN2('SPOS', 0, 3.0 / 35.0, S_SPOS_RUN3) = A_Chase
	S_SPOS_RUN3('SPOS', 1, 3.0 / 35.0, S_SPOS_RUN4) = A_Chase
	S_SPOS_RUN4('SPOS', 1, 3.0 / 35.0, S_SPOS_RUN5) = A_Chase
	S_SPOS_RUN5('SPOS', 2, 3.0 / 35.0, S_SPOS_RUN6) = A_Chase
	S_SPOS_RUN6('SPOS', 2, 3.0 / 35.0, S_SPOS_RUN7) = A_Chase
	S_SPOS_RUN7('SPOS', 3, 3.0 / 35.0, S_SPOS_RUN8) = A_Chase
	S_SPOS_RUN8('SPOS', 3, 3.0 / 35.0, S_SPOS_RUN1) = A_Chase
	S_SPOS_ATK1('SPOS', 4, 10.0 / 35.0, S_SPOS_ATK2) = A_FaceTarget
	S_SPOS_ATK2('SPOS', 5 | FF_FULLBRIGHT, 10.0 / 35.0, S_SPOS_ATK3) = A_SPosAttack
	S_SPOS_ATK3('SPOS', 4, 10.0 / 35.0, S_SPOS_RUN1) = none
	S_SPOS_PAIN('SPOS', 6, 3.0 / 35.0, S_SPOS_PAIN2) = none
	S_SPOS_PAIN2('SPOS', 6, 3.0 / 35.0, S_SPOS_RUN1) = A_Pain
	S_SPOS_DIE1('SPOS', 7, 5.0 / 35.0, S_SPOS_DIE2) = none
	S_SPOS_DIE2('SPOS', 8, 5.0 / 35.0, S_SPOS_DIE3) = A_Scream
	S_SPOS_DIE3('SPOS', 9, 5.0 / 35.0, S_SPOS_DIE4) = A_Fall
	S_SPOS_DIE4('SPOS', 10, 5.0 / 35.0, S_SPOS_DIE5) = none
	S_SPOS_DIE5('SPOS', 11, -1.0, none) = none
	S_SPOS_XDIE1('SPOS', 12, 5.0 / 35.0, S_SPOS_XDIE2) = none
	S_SPOS_XDIE2('SPOS', 13, 5.0 / 35.0, S_SPOS_XDIE3) = A_XScream
	S_SPOS_XDIE3('SPOS', 14, 5.0 / 35.0, S_SPOS_XDIE4) = A_Fall
	S_SPOS_XDIE4('SPOS', 15, 5.0 / 35.0, S_SPOS_XDIE5) = none
	S_SPOS_XDIE5('SPOS', 16, 5.0 / 35.0, S_SPOS_XDIE6) = none
	S_SPOS_XDIE6('SPOS', 17, 5.0 / 35.0, S_SPOS_XDIE7) = none
	S_SPOS_XDIE7('SPOS', 18, 5.0 / 35.0, S_SPOS_XDIE8) = none
	S_SPOS_XDIE8('SPOS', 19, 5.0 / 35.0, S_SPOS_XDIE9) = none
	S_SPOS_XDIE9('SPOS', 20, -1.0, none) = none
	S_SPOS_RAISE1('SPOS', 11, 5.0 / 35.0, S_SPOS_RAISE2) = none
	S_SPOS_RAISE2('SPOS', 10, 5.0 / 35.0, S_SPOS_RAISE3) = none
	S_SPOS_RAISE3('SPOS', 9, 5.0 / 35.0, S_SPOS_RAISE4) = none
	S_SPOS_RAISE4('SPOS', 8, 5.0 / 35.0, S_SPOS_RAISE5) = none
	S_SPOS_RAISE5('SPOS', 7, 5.0 / 35.0, S_SPOS_RUN1) = none
}
//ArchVile
__states__
{
	S_VILE_STND('VILE', 0, 10.0 / 35.0, S_VILE_STND2) = A_Look
	S_VILE_STND2('VILE', 1, 10.0 / 35.0, S_VILE_STND) = A_Look
	S_VILE_RUN1('VILE', 0, 2.0 / 35.0, S_VILE_RUN2) = A_VileChase
	S_VILE_RUN2('VILE', 0, 2.0 / 35.0, S_VILE_RUN3) = A_VileChase
	S_VILE_RUN3('VILE', 1, 2.0 / 35.0, S_VILE_RUN4) = A_VileChase
	S_VILE_RUN4('VILE', 1, 2.0 / 35.0, S_VILE_RUN5) = A_VileChase
	S_VILE_RUN5('VILE', 2, 2.0 / 35.0, S_VILE_RUN6) = A_VileChase
	S_VILE_RUN6('VILE', 2, 2.0 / 35.0, S_VILE_RUN7) = A_VileChase
	S_VILE_RUN7('VILE', 3, 2.0 / 35.0, S_VILE_RUN8) = A_VileChase
	S_VILE_RUN8('VILE', 3, 2.0 / 35.0, S_VILE_RUN9) = A_VileChase
	S_VILE_RUN9('VILE', 4, 2.0 / 35.0, S_VILE_RUN10) = A_VileChase
	S_VILE_RUN10('VILE', 4, 2.0 / 35.0, S_VILE_RUN11) = A_VileChase
	S_VILE_RUN11('VILE', 5, 2.0 / 35.0, S_VILE_RUN12) = A_VileChase
	S_VILE_RUN12('VILE', 5, 2.0 / 35.0, S_VILE_RUN1) = A_VileChase
	S_VILE_ATK1('VILE', 6 | FF_FULLBRIGHT, 0.0 / 35.0, S_VILE_ATK2) = A_VileStart
	S_VILE_ATK2('VILE', 6 | FF_FULLBRIGHT, 10.0 / 35.0, S_VILE_ATK3) = A_FaceTarget
	S_VILE_ATK3('VILE', 7 | FF_FULLBRIGHT, 8.0 / 35.0, S_VILE_ATK4) = A_VileTarget
	S_VILE_ATK4('VILE', 8 | FF_FULLBRIGHT, 8.0 / 35.0, S_VILE_ATK5) = A_FaceTarget
	S_VILE_ATK5('VILE', 9 | FF_FULLBRIGHT, 8.0 / 35.0, S_VILE_ATK6) = A_FaceTarget
	S_VILE_ATK6('VILE', 10 | FF_FULLBRIGHT, 8.0 / 35.0, S_VILE_ATK7) = A_FaceTarget
	S_VILE_ATK7('VILE', 11 | FF_FULLBRIGHT, 8.0 / 35.0, S_VILE_ATK8) = A_FaceTarget
	S_VILE_ATK8('VILE', 12 | FF_FULLBRIGHT, 8.0 / 35.0, S_VILE_ATK9) = A_FaceTarget
	S_VILE_ATK9('VILE', 13 | FF_FULLBRIGHT, 8.0 / 35.0, S_VILE_ATK10) = A_FaceTarget
	S_VILE_ATK10('VILE', 14 | FF_FULLBRIGHT, 8.0 / 35.0, S_VILE_ATK11) = A_VileAttack
	S_VILE_ATK11('VILE', 15 | FF_FULLBRIGHT, 20.0 / 35.0, S_VILE_RUN1) = none
	S_VILE_HEAL1('VILE', 26 | FF_FULLBRIGHT, 10.0 / 35.0, S_VILE_HEAL2) = none
	S_VILE_HEAL2('VILE', 27 | FF_FULLBRIGHT, 10.0 / 35.0, S_VILE_HEAL3) = none
	S_VILE_HEAL3('VILE', 28 | FF_FULLBRIGHT, 10.0 / 35.0, S_VILE_RUN1) = none
	S_VILE_PAIN('VILE', 16, 5.0 / 35.0, S_VILE_PAIN2) = none
	S_VILE_PAIN2('VILE', 16, 5.0 / 35.0, S_VILE_RUN1) = A_Pain
	S_VILE_DIE1('VILE', 16, 7.0 / 35.0, S_VILE_DIE2) = none
	S_VILE_DIE2('VILE', 17, 7.0 / 35.0, S_VILE_DIE3) = A_Scream
	S_VILE_DIE3('VILE', 18, 7.0 / 35.0, S_VILE_DIE4) = A_Fall
	S_VILE_DIE4('VILE', 19, 7.0 / 35.0, S_VILE_DIE5) = none
	S_VILE_DIE5('VILE', 20, 7.0 / 35.0, S_VILE_DIE6) = none
	S_VILE_DIE6('VILE', 21, 7.0 / 35.0, S_VILE_DIE7) = none
	S_VILE_DIE7('VILE', 22, 7.0 / 35.0, S_VILE_DIE8) = none
	S_VILE_DIE8('VILE', 23, 5.0 / 35.0, S_VILE_DIE9) = none
	S_VILE_DIE9('VILE', 24, 5.0 / 35.0, S_VILE_DIE10) = none
	S_VILE_DIE10('VILE', 25, -1.0, none) = none
}
//ArchvileFire
__states__
{
	S_FIRE1('FIRE', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE2) = A_StartFire
	S_FIRE2('FIRE', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE3) = A_Fire
	S_FIRE3('FIRE', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE4) = A_Fire
	S_FIRE4('FIRE', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE5) = A_Fire
	S_FIRE5('FIRE', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE6) = A_FireCrackle
	S_FIRE6('FIRE', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE7) = A_Fire
	S_FIRE7('FIRE', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE8) = A_Fire
	S_FIRE8('FIRE', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE9) = A_Fire
	S_FIRE9('FIRE', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE10) = A_Fire
	S_FIRE10('FIRE', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE11) = A_Fire
	S_FIRE11('FIRE', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE12) = A_Fire
	S_FIRE12('FIRE', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE13) = A_Fire
	S_FIRE13('FIRE', 2 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE14) = A_Fire
	S_FIRE14('FIRE', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE15) = A_Fire
	S_FIRE15('FIRE', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE16) = A_Fire
	S_FIRE16('FIRE', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE17) = A_Fire
	S_FIRE17('FIRE', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE18) = A_Fire
	S_FIRE18('FIRE', 3 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE19) = A_Fire
	S_FIRE19('FIRE', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE20) = A_FireCrackle
	S_FIRE20('FIRE', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE21) = A_Fire
	S_FIRE21('FIRE', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE22) = A_Fire
	S_FIRE22('FIRE', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE23) = A_Fire
	S_FIRE23('FIRE', 4 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE24) = A_Fire
	S_FIRE24('FIRE', 5 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE25) = A_Fire
	S_FIRE25('FIRE', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE26) = A_Fire
	S_FIRE26('FIRE', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE27) = A_Fire
	S_FIRE27('FIRE', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE28) = A_Fire
	S_FIRE28('FIRE', 7 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE29) = A_Fire
	S_FIRE29('FIRE', 6 | FF_FULLBRIGHT, 2.0 / 35.0, S_FIRE30) = A_Fire
	S_FIRE30('FIRE', 7 | FF_FULLBRIGHT, 2.0 / 35.0, none) = A_Fire
}
//RevenantTracerSmoke
__states__
{
	S_SMOKE1('PUFF', 1, 4.0 / 35.0, S_SMOKE2) = none
	S_SMOKE2('PUFF', 2, 4.0 / 35.0, S_SMOKE3) = none
	S_SMOKE3('PUFF', 1, 4.0 / 35.0, S_SMOKE4) = none
	S_SMOKE4('PUFF', 2, 4.0 / 35.0, S_SMOKE5) = none
	S_SMOKE5('PUFF', 3, 4.0 / 35.0, none) = none
}
//RevenantTracer
__states__
{
	S_TRACER('FATB', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_TRACER2) = A_Tracer
	S_TRACER2('FATB', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_TRACER) = A_Tracer
	S_TRACEEXP1('FBXP', 0 | FF_FULLBRIGHT, 8.0 / 35.0, S_TRACEEXP2) = none
	S_TRACEEXP2('FBXP', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_TRACEEXP3) = none
	S_TRACEEXP3('FBXP', 2 | FF_FULLBRIGHT, 4.0 / 35.0, none) = none
}
//Revenant
__states__
{
	S_SKEL_STND('SKEL', 0, 10.0 / 35.0, S_SKEL_STND2) = A_Look
	S_SKEL_STND2('SKEL', 1, 10.0 / 35.0, S_SKEL_STND) = A_Look
	S_SKEL_RUN1('SKEL', 0, 2.0 / 35.0, S_SKEL_RUN2) = A_Chase
	S_SKEL_RUN2('SKEL', 0, 2.0 / 35.0, S_SKEL_RUN3) = A_Chase
	S_SKEL_RUN3('SKEL', 1, 2.0 / 35.0, S_SKEL_RUN4) = A_Chase
	S_SKEL_RUN4('SKEL', 1, 2.0 / 35.0, S_SKEL_RUN5) = A_Chase
	S_SKEL_RUN5('SKEL', 2, 2.0 / 35.0, S_SKEL_RUN6) = A_Chase
	S_SKEL_RUN6('SKEL', 2, 2.0 / 35.0, S_SKEL_RUN7) = A_Chase
	S_SKEL_RUN7('SKEL', 3, 2.0 / 35.0, S_SKEL_RUN8) = A_Chase
	S_SKEL_RUN8('SKEL', 3, 2.0 / 35.0, S_SKEL_RUN9) = A_Chase
	S_SKEL_RUN9('SKEL', 4, 2.0 / 35.0, S_SKEL_RUN10) = A_Chase
	S_SKEL_RUN10('SKEL', 4, 2.0 / 35.0, S_SKEL_RUN11) = A_Chase
	S_SKEL_RUN11('SKEL', 5, 2.0 / 35.0, S_SKEL_RUN12) = A_Chase
	S_SKEL_RUN12('SKEL', 5, 2.0 / 35.0, S_SKEL_RUN1) = A_Chase
	S_SKEL_FIST1('SKEL', 6, 0.0 / 35.0, S_SKEL_FIST2) = A_FaceTarget
	S_SKEL_FIST2('SKEL', 6, 6.0 / 35.0, S_SKEL_FIST3) = A_SkelWhoosh
	S_SKEL_FIST3('SKEL', 7, 6.0 / 35.0, S_SKEL_FIST4) = A_FaceTarget
	S_SKEL_FIST4('SKEL', 8, 6.0 / 35.0, S_SKEL_RUN1) = A_SkelFist
	S_SKEL_MISS1('SKEL', 9 | FF_FULLBRIGHT, 0.0 / 35.0, S_SKEL_MISS2) = A_FaceTarget
	S_SKEL_MISS2('SKEL', 9 | FF_FULLBRIGHT, 10.0 / 35.0, S_SKEL_MISS3) = A_FaceTarget
	S_SKEL_MISS3('SKEL', 10, 10.0 / 35.0, S_SKEL_MISS4) = A_SkelMissile
	S_SKEL_MISS4('SKEL', 10, 10.0 / 35.0, S_SKEL_RUN1) = A_FaceTarget
	S_SKEL_PAIN('SKEL', 11, 5.0 / 35.0, S_SKEL_PAIN2) = none
	S_SKEL_PAIN2('SKEL', 11, 5.0 / 35.0, S_SKEL_RUN1) = A_Pain
	S_SKEL_DIE1('SKEL', 11, 7.0 / 35.0, S_SKEL_DIE2) = none
	S_SKEL_DIE2('SKEL', 12, 7.0 / 35.0, S_SKEL_DIE3) = none
	S_SKEL_DIE3('SKEL', 13, 7.0 / 35.0, S_SKEL_DIE4) = A_Scream
	S_SKEL_DIE4('SKEL', 14, 7.0 / 35.0, S_SKEL_DIE5) = A_Fall
	S_SKEL_DIE5('SKEL', 15, 7.0 / 35.0, S_SKEL_DIE6) = none
	S_SKEL_DIE6('SKEL', 16, -1.0, none) = none
	S_SKEL_RAISE1('SKEL', 16, 5.0 / 35.0, S_SKEL_RAISE2) = none
	S_SKEL_RAISE2('SKEL', 15, 5.0 / 35.0, S_SKEL_RAISE3) = none
	S_SKEL_RAISE3('SKEL', 14, 5.0 / 35.0, S_SKEL_RAISE4) = none
	S_SKEL_RAISE4('SKEL', 13, 5.0 / 35.0, S_SKEL_RAISE5) = none
	S_SKEL_RAISE5('SKEL', 12, 5.0 / 35.0, S_SKEL_RAISE6) = none
	S_SKEL_RAISE6('SKEL', 11, 5.0 / 35.0, S_SKEL_RUN1) = none
}
//MancubusMissile
__states__
{
	S_FATSHOT1('MANF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_FATSHOT2) = none
	S_FATSHOT2('MANF', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_FATSHOT1) = none
	S_FATSHOTX1('MISL', 1 | FF_FULLBRIGHT, 8.0 / 35.0, S_FATSHOTX2) = none
	S_FATSHOTX2('MISL', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_FATSHOTX3) = none
	S_FATSHOTX3('MISL', 3 | FF_FULLBRIGHT, 4.0 / 35.0, none) = none
}
//Mancubus
__states__
{
	S_FATT_STND('FATT', 0, 15.0 / 35.0, S_FATT_STND2) = A_Look
	S_FATT_STND2('FATT', 1, 15.0 / 35.0, S_FATT_STND) = A_Look
	S_FATT_RUN1('FATT', 0, 4.0 / 35.0, S_FATT_RUN2) = A_Chase
	S_FATT_RUN2('FATT', 0, 4.0 / 35.0, S_FATT_RUN3) = A_Chase
	S_FATT_RUN3('FATT', 1, 4.0 / 35.0, S_FATT_RUN4) = A_Chase
	S_FATT_RUN4('FATT', 1, 4.0 / 35.0, S_FATT_RUN5) = A_Chase
	S_FATT_RUN5('FATT', 2, 4.0 / 35.0, S_FATT_RUN6) = A_Chase
	S_FATT_RUN6('FATT', 2, 4.0 / 35.0, S_FATT_RUN7) = A_Chase
	S_FATT_RUN7('FATT', 3, 4.0 / 35.0, S_FATT_RUN8) = A_Chase
	S_FATT_RUN8('FATT', 3, 4.0 / 35.0, S_FATT_RUN9) = A_Chase
	S_FATT_RUN9('FATT', 4, 4.0 / 35.0, S_FATT_RUN10) = A_Chase
	S_FATT_RUN10('FATT', 4, 4.0 / 35.0, S_FATT_RUN11) = A_Chase
	S_FATT_RUN11('FATT', 5, 4.0 / 35.0, S_FATT_RUN12) = A_Chase
	S_FATT_RUN12('FATT', 5, 4.0 / 35.0, S_FATT_RUN1) = A_Chase
	S_FATT_ATK1('FATT', 6, 20.0 / 35.0, S_FATT_ATK2) = A_FatRaise
	S_FATT_ATK2('FATT', 7 | FF_FULLBRIGHT, 10.0 / 35.0, S_FATT_ATK3) = A_FatAttack1
	S_FATT_ATK3('FATT', 8, 5.0 / 35.0, S_FATT_ATK4) = A_FaceTarget
	S_FATT_ATK4('FATT', 6, 5.0 / 35.0, S_FATT_ATK5) = A_FaceTarget
	S_FATT_ATK5('FATT', 7 | FF_FULLBRIGHT, 10.0 / 35.0, S_FATT_ATK6) = A_FatAttack2
	S_FATT_ATK6('FATT', 8, 5.0 / 35.0, S_FATT_ATK7) = A_FaceTarget
	S_FATT_ATK7('FATT', 6, 5.0 / 35.0, S_FATT_ATK8) = A_FaceTarget
	S_FATT_ATK8('FATT', 7 | FF_FULLBRIGHT, 10.0 / 35.0, S_FATT_ATK9) = A_FatAttack3
	S_FATT_ATK9('FATT', 8, 5.0 / 35.0, S_FATT_ATK10) = A_FaceTarget
	S_FATT_ATK10('FATT', 6, 5.0 / 35.0, S_FATT_RUN1) = A_FaceTarget
	S_FATT_PAIN('FATT', 9, 3.0 / 35.0, S_FATT_PAIN2) = none
	S_FATT_PAIN2('FATT', 9, 3.0 / 35.0, S_FATT_RUN1) = A_Pain
	S_FATT_DIE1('FATT', 10, 6.0 / 35.0, S_FATT_DIE2) = none
	S_FATT_DIE2('FATT', 11, 6.0 / 35.0, S_FATT_DIE3) = A_Scream
	S_FATT_DIE3('FATT', 12, 6.0 / 35.0, S_FATT_DIE4) = A_Fall
	S_FATT_DIE4('FATT', 13, 6.0 / 35.0, S_FATT_DIE5) = none
	S_FATT_DIE5('FATT', 14, 6.0 / 35.0, S_FATT_DIE6) = none
	S_FATT_DIE6('FATT', 15, 6.0 / 35.0, S_FATT_DIE7) = none
	S_FATT_DIE7('FATT', 16, 6.0 / 35.0, S_FATT_DIE8) = none
	S_FATT_DIE8('FATT', 17, 6.0 / 35.0, S_FATT_DIE9) = none
	S_FATT_DIE9('FATT', 18, 6.0 / 35.0, S_FATT_DIE10) = none
	S_FATT_DIE10('FATT', 19, -1.0, none) = A_BossDeath
	S_FATT_RAISE1('FATT', 17, 5.0 / 35.0, S_FATT_RAISE2) = none
	S_FATT_RAISE2('FATT', 16, 5.0 / 35.0, S_FATT_RAISE3) = none
	S_FATT_RAISE3('FATT', 15, 5.0 / 35.0, S_FATT_RAISE4) = none
	S_FATT_RAISE4('FATT', 14, 5.0 / 35.0, S_FATT_RAISE5) = none
	S_FATT_RAISE5('FATT', 13, 5.0 / 35.0, S_FATT_RAISE6) = none
	S_FATT_RAISE6('FATT', 12, 5.0 / 35.0, S_FATT_RAISE7) = none
	S_FATT_RAISE7('FATT', 11, 5.0 / 35.0, S_FATT_RAISE8) = none
	S_FATT_RAISE8('FATT', 10, 5.0 / 35.0, S_FATT_RUN1) = none
}
//ChaingunGuy
__states__
{
	S_CPOS_STND('CPOS', 0, 10.0 / 35.0, S_CPOS_STND2) = A_Look
	S_CPOS_STND2('CPOS', 1, 10.0 / 35.0, S_CPOS_STND) = A_Look
	S_CPOS_RUN1('CPOS', 0, 3.0 / 35.0, S_CPOS_RUN2) = A_Chase
	S_CPOS_RUN2('CPOS', 0, 3.0 / 35.0, S_CPOS_RUN3) = A_Chase
	S_CPOS_RUN3('CPOS', 1, 3.0 / 35.0, S_CPOS_RUN4) = A_Chase
	S_CPOS_RUN4('CPOS', 1, 3.0 / 35.0, S_CPOS_RUN5) = A_Chase
	S_CPOS_RUN5('CPOS', 2, 3.0 / 35.0, S_CPOS_RUN6) = A_Chase
	S_CPOS_RUN6('CPOS', 2, 3.0 / 35.0, S_CPOS_RUN7) = A_Chase
	S_CPOS_RUN7('CPOS', 3, 3.0 / 35.0, S_CPOS_RUN8) = A_Chase
	S_CPOS_RUN8('CPOS', 3, 3.0 / 35.0, S_CPOS_RUN1) = A_Chase
	S_CPOS_ATK1('CPOS', 4, 10.0 / 35.0, S_CPOS_ATK2) = A_FaceTarget
	S_CPOS_ATK2('CPOS', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_CPOS_ATK3) = A_CPosAttack
	S_CPOS_ATK3('CPOS', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_CPOS_ATK4) = A_CPosAttack
	S_CPOS_ATK4('CPOS', 5, 1.0 / 35.0, S_CPOS_ATK2) = A_CPosRefire
	S_CPOS_PAIN('CPOS', 6, 3.0 / 35.0, S_CPOS_PAIN2) = none
	S_CPOS_PAIN2('CPOS', 6, 3.0 / 35.0, S_CPOS_RUN1) = A_Pain
	S_CPOS_DIE1('CPOS', 7, 5.0 / 35.0, S_CPOS_DIE2) = none
	S_CPOS_DIE2('CPOS', 8, 5.0 / 35.0, S_CPOS_DIE3) = A_Scream
	S_CPOS_DIE3('CPOS', 9, 5.0 / 35.0, S_CPOS_DIE4) = A_Fall
	S_CPOS_DIE4('CPOS', 10, 5.0 / 35.0, S_CPOS_DIE5) = none
	S_CPOS_DIE5('CPOS', 11, 5.0 / 35.0, S_CPOS_DIE6) = none
	S_CPOS_DIE6('CPOS', 12, 5.0 / 35.0, S_CPOS_DIE7) = none
	S_CPOS_DIE7('CPOS', 13, -1.0, none) = none
	S_CPOS_XDIE1('CPOS', 14, 5.0 / 35.0, S_CPOS_XDIE2) = none
	S_CPOS_XDIE2('CPOS', 15, 5.0 / 35.0, S_CPOS_XDIE3) = A_XScream
	S_CPOS_XDIE3('CPOS', 16, 5.0 / 35.0, S_CPOS_XDIE4) = A_Fall
	S_CPOS_XDIE4('CPOS', 17, 5.0 / 35.0, S_CPOS_XDIE5) = none
	S_CPOS_XDIE5('CPOS', 18, 5.0 / 35.0, S_CPOS_XDIE6) = none
	S_CPOS_XDIE6('CPOS', 19, -1.0, none) = none
	S_CPOS_RAISE1('CPOS', 13, 5.0 / 35.0, S_CPOS_RAISE2) = none
	S_CPOS_RAISE2('CPOS', 12, 5.0 / 35.0, S_CPOS_RAISE3) = none
	S_CPOS_RAISE3('CPOS', 11, 5.0 / 35.0, S_CPOS_RAISE4) = none
	S_CPOS_RAISE4('CPOS', 10, 5.0 / 35.0, S_CPOS_RAISE5) = none
	S_CPOS_RAISE5('CPOS', 9, 5.0 / 35.0, S_CPOS_RAISE6) = none
	S_CPOS_RAISE6('CPOS', 8, 5.0 / 35.0, S_CPOS_RAISE7) = none
	S_CPOS_RAISE7('CPOS', 7, 5.0 / 35.0, S_CPOS_RUN1) = none
}
//Imp
__states__
{
	S_TROO_STND('TROO', 0, 10.0 / 35.0, S_TROO_STND2) = A_Look
	S_TROO_STND2('TROO', 1, 10.0 / 35.0, S_TROO_STND) = A_Look
	S_TROO_RUN1('TROO', 0, 3.0 / 35.0, S_TROO_RUN2) = A_Chase
	S_TROO_RUN2('TROO', 0, 3.0 / 35.0, S_TROO_RUN3) = A_Chase
	S_TROO_RUN3('TROO', 1, 3.0 / 35.0, S_TROO_RUN4) = A_Chase
	S_TROO_RUN4('TROO', 1, 3.0 / 35.0, S_TROO_RUN5) = A_Chase
	S_TROO_RUN5('TROO', 2, 3.0 / 35.0, S_TROO_RUN6) = A_Chase
	S_TROO_RUN6('TROO', 2, 3.0 / 35.0, S_TROO_RUN7) = A_Chase
	S_TROO_RUN7('TROO', 3, 3.0 / 35.0, S_TROO_RUN8) = A_Chase
	S_TROO_RUN8('TROO', 3, 3.0 / 35.0, S_TROO_RUN1) = A_Chase
	S_TROO_ATK1('TROO', 4, 8.0 / 35.0, S_TROO_ATK2) = A_FaceTarget
	S_TROO_ATK2('TROO', 5, 8.0 / 35.0, S_TROO_ATK3) = A_FaceTarget
	S_TROO_ATK3('TROO', 6, 6.0 / 35.0, S_TROO_RUN1) = A_TroopAttack
	S_TROO_PAIN('TROO', 7, 2.0 / 35.0, S_TROO_PAIN2) = none
	S_TROO_PAIN2('TROO', 7, 2.0 / 35.0, S_TROO_RUN1) = A_Pain
	S_TROO_DIE1('TROO', 8, 8.0 / 35.0, S_TROO_DIE2) = none
	S_TROO_DIE2('TROO', 9, 8.0 / 35.0, S_TROO_DIE3) = A_Scream
	S_TROO_DIE3('TROO', 10, 6.0 / 35.0, S_TROO_DIE4) = none
	S_TROO_DIE4('TROO', 11, 6.0 / 35.0, S_TROO_DIE5) = A_Fall
	S_TROO_DIE5('TROO', 12, -1.0, none) = none
	S_TROO_XDIE1('TROO', 13, 5.0 / 35.0, S_TROO_XDIE2) = none
	S_TROO_XDIE2('TROO', 14, 5.0 / 35.0, S_TROO_XDIE3) = A_XScream
	S_TROO_XDIE3('TROO', 15, 5.0 / 35.0, S_TROO_XDIE4) = none
	S_TROO_XDIE4('TROO', 16, 5.0 / 35.0, S_TROO_XDIE5) = A_Fall
	S_TROO_XDIE5('TROO', 17, 5.0 / 35.0, S_TROO_XDIE6) = none
	S_TROO_XDIE6('TROO', 18, 5.0 / 35.0, S_TROO_XDIE7) = none
	S_TROO_XDIE7('TROO', 19, 5.0 / 35.0, S_TROO_XDIE8) = none
	S_TROO_XDIE8('TROO', 20, -1.0, none) = none
	S_TROO_RAISE1('TROO', 12, 8.0 / 35.0, S_TROO_RAISE2) = none
	S_TROO_RAISE2('TROO', 11, 8.0 / 35.0, S_TROO_RAISE3) = none
	S_TROO_RAISE3('TROO', 10, 6.0 / 35.0, S_TROO_RAISE4) = none
	S_TROO_RAISE4('TROO', 9, 6.0 / 35.0, S_TROO_RAISE5) = none
	S_TROO_RAISE5('TROO', 8, 6.0 / 35.0, S_TROO_RUN1) = none
}
//Demon
__states__
{
	S_SARG_STND('SARG', 0, 10.0 / 35.0, S_SARG_STND2) = A_Look
	S_SARG_STND2('SARG', 1, 10.0 / 35.0, S_SARG_STND) = A_Look
	S_SARG_RUN1('SARG', 0, 2.0 / 35.0, S_SARG_RUN2) = A_Chase
	S_SARG_RUN2('SARG', 0, 2.0 / 35.0, S_SARG_RUN3) = A_Chase
	S_SARG_RUN3('SARG', 1, 2.0 / 35.0, S_SARG_RUN4) = A_Chase
	S_SARG_RUN4('SARG', 1, 2.0 / 35.0, S_SARG_RUN5) = A_Chase
	S_SARG_RUN5('SARG', 2, 2.0 / 35.0, S_SARG_RUN6) = A_Chase
	S_SARG_RUN6('SARG', 2, 2.0 / 35.0, S_SARG_RUN7) = A_Chase
	S_SARG_RUN7('SARG', 3, 2.0 / 35.0, S_SARG_RUN8) = A_Chase
	S_SARG_RUN8('SARG', 3, 2.0 / 35.0, S_SARG_RUN1) = A_Chase
	S_SARG_ATK1('SARG', 4, 8.0 / 35.0, S_SARG_ATK2) = A_FaceTarget
	S_SARG_ATK2('SARG', 5, 8.0 / 35.0, S_SARG_ATK3) = A_FaceTarget
	S_SARG_ATK3('SARG', 6, 8.0 / 35.0, S_SARG_RUN1) = A_SargAttack
	S_SARG_PAIN('SARG', 7, 2.0 / 35.0, S_SARG_PAIN2) = none
	S_SARG_PAIN2('SARG', 7, 2.0 / 35.0, S_SARG_RUN1) = A_Pain
	S_SARG_DIE1('SARG', 8, 8.0 / 35.0, S_SARG_DIE2) = none
	S_SARG_DIE2('SARG', 9, 8.0 / 35.0, S_SARG_DIE3) = A_Scream
	S_SARG_DIE3('SARG', 10, 4.0 / 35.0, S_SARG_DIE4) = none
	S_SARG_DIE4('SARG', 11, 4.0 / 35.0, S_SARG_DIE5) = A_Fall
	S_SARG_DIE5('SARG', 12, 4.0 / 35.0, S_SARG_DIE6) = none
	S_SARG_DIE6('SARG', 13, -1.0, none) = none
	S_SARG_RAISE1('SARG', 13, 5.0 / 35.0, S_SARG_RAISE2) = none
	S_SARG_RAISE2('SARG', 12, 5.0 / 35.0, S_SARG_RAISE3) = none
	S_SARG_RAISE3('SARG', 11, 5.0 / 35.0, S_SARG_RAISE4) = none
	S_SARG_RAISE4('SARG', 10, 5.0 / 35.0, S_SARG_RAISE5) = none
	S_SARG_RAISE5('SARG', 9, 5.0 / 35.0, S_SARG_RAISE6) = none
	S_SARG_RAISE6('SARG', 8, 5.0 / 35.0, S_SARG_RUN1) = none
}
//Cacodemon
__states__
{
	S_HEAD_STND('HEAD', 0, 10.0 / 35.0, S_HEAD_STND) = A_Look
	S_HEAD_RUN1('HEAD', 0, 3.0 / 35.0, S_HEAD_RUN1) = A_Chase
	S_HEAD_ATK1('HEAD', 1, 5.0 / 35.0, S_HEAD_ATK2) = A_FaceTarget
	S_HEAD_ATK2('HEAD', 2, 5.0 / 35.0, S_HEAD_ATK3) = A_FaceTarget
	S_HEAD_ATK3('HEAD', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_HEAD_RUN1) = A_HeadAttack
	S_HEAD_PAIN('HEAD', 4, 3.0 / 35.0, S_HEAD_PAIN2) = none
	S_HEAD_PAIN2('HEAD', 4, 3.0 / 35.0, S_HEAD_PAIN3) = A_Pain
	S_HEAD_PAIN3('HEAD', 5, 6.0 / 35.0, S_HEAD_RUN1) = none
	S_HEAD_DIE1('HEAD', 6, 8.0 / 35.0, S_HEAD_DIE2) = none
	S_HEAD_DIE2('HEAD', 7, 8.0 / 35.0, S_HEAD_DIE3) = A_Scream
	S_HEAD_DIE3('HEAD', 8, 8.0 / 35.0, S_HEAD_DIE4) = none
	S_HEAD_DIE4('HEAD', 9, 8.0 / 35.0, S_HEAD_DIE5) = none
	S_HEAD_DIE5('HEAD', 10, 8.0 / 35.0, S_HEAD_DIE6) = A_Fall
	S_HEAD_DIE6('HEAD', 11, -1.0, none) = none
	S_HEAD_RAISE1('HEAD', 11, 8.0 / 35.0, S_HEAD_RAISE2) = none
	S_HEAD_RAISE2('HEAD', 10, 8.0 / 35.0, S_HEAD_RAISE3) = none
	S_HEAD_RAISE3('HEAD', 9, 8.0 / 35.0, S_HEAD_RAISE4) = none
	S_HEAD_RAISE4('HEAD', 8, 8.0 / 35.0, S_HEAD_RAISE5) = none
	S_HEAD_RAISE5('HEAD', 7, 8.0 / 35.0, S_HEAD_RAISE6) = none
	S_HEAD_RAISE6('HEAD', 6, 8.0 / 35.0, S_HEAD_RUN1) = none
}
//BruiserShot
__states__
{
	S_BRBALL1('BAL7', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_BRBALL2) = none
	S_BRBALL2('BAL7', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_BRBALL1) = none
	S_BRBALLX1('BAL7', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_BRBALLX2) = none
	S_BRBALLX2('BAL7', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_BRBALLX3) = none
	S_BRBALLX3('BAL7', 4 | FF_FULLBRIGHT, 6.0 / 35.0, none) = none
}
//BaronOfHell
__states__
{
	S_BOSS_STND('BOSS', 0, 10.0 / 35.0, S_BOSS_STND2) = A_Look
	S_BOSS_STND2('BOSS', 1, 10.0 / 35.0, S_BOSS_STND) = A_Look
	S_BOSS_RUN1('BOSS', 0, 3.0 / 35.0, S_BOSS_RUN2) = A_Chase
	S_BOSS_RUN2('BOSS', 0, 3.0 / 35.0, S_BOSS_RUN3) = A_Chase
	S_BOSS_RUN3('BOSS', 1, 3.0 / 35.0, S_BOSS_RUN4) = A_Chase
	S_BOSS_RUN4('BOSS', 1, 3.0 / 35.0, S_BOSS_RUN5) = A_Chase
	S_BOSS_RUN5('BOSS', 2, 3.0 / 35.0, S_BOSS_RUN6) = A_Chase
	S_BOSS_RUN6('BOSS', 2, 3.0 / 35.0, S_BOSS_RUN7) = A_Chase
	S_BOSS_RUN7('BOSS', 3, 3.0 / 35.0, S_BOSS_RUN8) = A_Chase
	S_BOSS_RUN8('BOSS', 3, 3.0 / 35.0, S_BOSS_RUN1) = A_Chase
	S_BOSS_ATK1('BOSS', 4, 8.0 / 35.0, S_BOSS_ATK2) = A_FaceTarget
	S_BOSS_ATK2('BOSS', 5, 8.0 / 35.0, S_BOSS_ATK3) = A_FaceTarget
	S_BOSS_ATK3('BOSS', 6, 8.0 / 35.0, S_BOSS_RUN1) = A_BruisAttack
	S_BOSS_PAIN('BOSS', 7, 2.0 / 35.0, S_BOSS_PAIN2) = none
	S_BOSS_PAIN2('BOSS', 7, 2.0 / 35.0, S_BOSS_RUN1) = A_Pain
	S_BOSS_DIE1('BOSS', 8, 8.0 / 35.0, S_BOSS_DIE2) = none
	S_BOSS_DIE2('BOSS', 9, 8.0 / 35.0, S_BOSS_DIE3) = A_Scream
	S_BOSS_DIE3('BOSS', 10, 8.0 / 35.0, S_BOSS_DIE4) = none
	S_BOSS_DIE4('BOSS', 11, 8.0 / 35.0, S_BOSS_DIE5) = A_Fall
	S_BOSS_DIE5('BOSS', 12, 8.0 / 35.0, S_BOSS_DIE6) = none
	S_BOSS_DIE6('BOSS', 13, 8.0 / 35.0, S_BOSS_DIE7) = none
	S_BOSS_DIE7('BOSS', 14, -1.0, none) = A_BossDeath
	S_BOSS_RAISE1('BOSS', 14, 8.0 / 35.0, S_BOSS_RAISE2) = none
	S_BOSS_RAISE2('BOSS', 13, 8.0 / 35.0, S_BOSS_RAISE3) = none
	S_BOSS_RAISE3('BOSS', 12, 8.0 / 35.0, S_BOSS_RAISE4) = none
	S_BOSS_RAISE4('BOSS', 11, 8.0 / 35.0, S_BOSS_RAISE5) = none
	S_BOSS_RAISE5('BOSS', 10, 8.0 / 35.0, S_BOSS_RAISE6) = none
	S_BOSS_RAISE6('BOSS', 9, 8.0 / 35.0, S_BOSS_RAISE7) = none
	S_BOSS_RAISE7('BOSS', 8, 8.0 / 35.0, S_BOSS_RUN1) = none
}
//HellKnight
__states__
{
	S_BOS2_STND('BOS2', 0, 10.0 / 35.0, S_BOS2_STND2) = A_Look
	S_BOS2_STND2('BOS2', 1, 10.0 / 35.0, S_BOS2_STND) = A_Look
	S_BOS2_RUN1('BOS2', 0, 3.0 / 35.0, S_BOS2_RUN2) = A_Chase
	S_BOS2_RUN2('BOS2', 0, 3.0 / 35.0, S_BOS2_RUN3) = A_Chase
	S_BOS2_RUN3('BOS2', 1, 3.0 / 35.0, S_BOS2_RUN4) = A_Chase
	S_BOS2_RUN4('BOS2', 1, 3.0 / 35.0, S_BOS2_RUN5) = A_Chase
	S_BOS2_RUN5('BOS2', 2, 3.0 / 35.0, S_BOS2_RUN6) = A_Chase
	S_BOS2_RUN6('BOS2', 2, 3.0 / 35.0, S_BOS2_RUN7) = A_Chase
	S_BOS2_RUN7('BOS2', 3, 3.0 / 35.0, S_BOS2_RUN8) = A_Chase
	S_BOS2_RUN8('BOS2', 3, 3.0 / 35.0, S_BOS2_RUN1) = A_Chase
	S_BOS2_ATK1('BOS2', 4, 8.0 / 35.0, S_BOS2_ATK2) = A_FaceTarget
	S_BOS2_ATK2('BOS2', 5, 8.0 / 35.0, S_BOS2_ATK3) = A_FaceTarget
	S_BOS2_ATK3('BOS2', 6, 8.0 / 35.0, S_BOS2_RUN1) = A_BruisAttack
	S_BOS2_PAIN('BOS2', 7, 2.0 / 35.0, S_BOS2_PAIN2) = none
	S_BOS2_PAIN2('BOS2', 7, 2.0 / 35.0, S_BOS2_RUN1) = A_Pain
	S_BOS2_DIE1('BOS2', 8, 8.0 / 35.0, S_BOS2_DIE2) = none
	S_BOS2_DIE2('BOS2', 9, 8.0 / 35.0, S_BOS2_DIE3) = A_Scream
	S_BOS2_DIE3('BOS2', 10, 8.0 / 35.0, S_BOS2_DIE4) = none
	S_BOS2_DIE4('BOS2', 11, 8.0 / 35.0, S_BOS2_DIE5) = A_Fall
	S_BOS2_DIE5('BOS2', 12, 8.0 / 35.0, S_BOS2_DIE6) = none
	S_BOS2_DIE6('BOS2', 13, 8.0 / 35.0, S_BOS2_DIE7) = none
	S_BOS2_DIE7('BOS2', 14, -1.0, none) = none
	S_BOS2_RAISE1('BOS2', 14, 8.0 / 35.0, S_BOS2_RAISE2) = none
	S_BOS2_RAISE2('BOS2', 13, 8.0 / 35.0, S_BOS2_RAISE3) = none
	S_BOS2_RAISE3('BOS2', 12, 8.0 / 35.0, S_BOS2_RAISE4) = none
	S_BOS2_RAISE4('BOS2', 11, 8.0 / 35.0, S_BOS2_RAISE5) = none
	S_BOS2_RAISE5('BOS2', 10, 8.0 / 35.0, S_BOS2_RAISE6) = none
	S_BOS2_RAISE6('BOS2', 9, 8.0 / 35.0, S_BOS2_RAISE7) = none
	S_BOS2_RAISE7('BOS2', 8, 8.0 / 35.0, S_BOS2_RUN1) = none
}
//LostSoul
__states__
{
	S_SKULL_STND('SKUL', 0 | FF_FULLBRIGHT, 10.0 / 35.0, S_SKULL_STND2) = A_Look
	S_SKULL_STND2('SKUL', 1 | FF_FULLBRIGHT, 10.0 / 35.0, S_SKULL_STND) = A_Look
	S_SKULL_RUN1('SKUL', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_SKULL_RUN2) = A_Chase
	S_SKULL_RUN2('SKUL', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_SKULL_RUN1) = A_Chase
	S_SKULL_ATK1('SKUL', 2 | FF_FULLBRIGHT, 10.0 / 35.0, S_SKULL_ATK2) = A_FaceTarget
	S_SKULL_ATK2('SKUL', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_SKULL_ATK3) = A_SkullAttack
	S_SKULL_ATK3('SKUL', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_SKULL_ATK4) = none
	S_SKULL_ATK4('SKUL', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_SKULL_ATK3) = none
	S_SKULL_PAIN('SKUL', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_SKULL_PAIN2) = none
	S_SKULL_PAIN2('SKUL', 4 | FF_FULLBRIGHT, 3.0 / 35.0, S_SKULL_RUN1) = A_Pain
	S_SKULL_DIE1('SKUL', 5 | FF_FULLBRIGHT, 6.0 / 35.0, S_SKULL_DIE2) = none
	S_SKULL_DIE2('SKUL', 6 | FF_FULLBRIGHT, 6.0 / 35.0, S_SKULL_DIE3) = A_Scream
	S_SKULL_DIE3('SKUL', 7 | FF_FULLBRIGHT, 6.0 / 35.0, S_SKULL_DIE4) = none
	S_SKULL_DIE4('SKUL', 8 | FF_FULLBRIGHT, 6.0 / 35.0, S_SKULL_DIE5) = A_Fall
	S_SKULL_DIE5('SKUL', 9, 6.0 / 35.0, S_SKULL_DIE6) = none
	S_SKULL_DIE6('SKUL', 10, 6.0 / 35.0, none) = none
}
//SpiderMastermind
__states__
{
	S_SPID_STND('SPID', 0, 10.0 / 35.0, S_SPID_STND2) = A_Look
	S_SPID_STND2('SPID', 1, 10.0 / 35.0, S_SPID_STND) = A_Look
	S_SPID_RUN1('SPID', 0, 3.0 / 35.0, S_SPID_RUN2) = A_Metal
	S_SPID_RUN2('SPID', 0, 3.0 / 35.0, S_SPID_RUN3) = A_Chase
	S_SPID_RUN3('SPID', 1, 3.0 / 35.0, S_SPID_RUN4) = A_Chase
	S_SPID_RUN4('SPID', 1, 3.0 / 35.0, S_SPID_RUN5) = A_Chase
	S_SPID_RUN5('SPID', 2, 3.0 / 35.0, S_SPID_RUN6) = A_Metal
	S_SPID_RUN6('SPID', 2, 3.0 / 35.0, S_SPID_RUN7) = A_Chase
	S_SPID_RUN7('SPID', 3, 3.0 / 35.0, S_SPID_RUN8) = A_Chase
	S_SPID_RUN8('SPID', 3, 3.0 / 35.0, S_SPID_RUN9) = A_Chase
	S_SPID_RUN9('SPID', 4, 3.0 / 35.0, S_SPID_RUN10) = A_Metal
	S_SPID_RUN10('SPID', 4, 3.0 / 35.0, S_SPID_RUN11) = A_Chase
	S_SPID_RUN11('SPID', 5, 3.0 / 35.0, S_SPID_RUN12) = A_Chase
	S_SPID_RUN12('SPID', 5, 3.0 / 35.0, S_SPID_RUN1) = A_Chase
	S_SPID_ATK1('SPID', 0 | FF_FULLBRIGHT, 20.0 / 35.0, S_SPID_ATK2) = A_FaceTarget
	S_SPID_ATK2('SPID', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPID_ATK3) = A_SPosAttack
	S_SPID_ATK3('SPID', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPID_ATK4) = A_SPosAttack
	S_SPID_ATK4('SPID', 7 | FF_FULLBRIGHT, 1.0 / 35.0, S_SPID_ATK2) = A_SpidRefire
	S_SPID_PAIN('SPID', 8, 3.0 / 35.0, S_SPID_PAIN2) = none
	S_SPID_PAIN2('SPID', 8, 3.0 / 35.0, S_SPID_RUN1) = A_Pain
	S_SPID_DIE1('SPID', 9, 20.0 / 35.0, S_SPID_DIE2) = A_Scream
	S_SPID_DIE2('SPID', 10, 10.0 / 35.0, S_SPID_DIE3) = A_Fall
	S_SPID_DIE3('SPID', 11, 10.0 / 35.0, S_SPID_DIE4) = none
	S_SPID_DIE4('SPID', 12, 10.0 / 35.0, S_SPID_DIE5) = none
	S_SPID_DIE5('SPID', 13, 10.0 / 35.0, S_SPID_DIE6) = none
	S_SPID_DIE6('SPID', 14, 10.0 / 35.0, S_SPID_DIE7) = none
	S_SPID_DIE7('SPID', 15, 10.0 / 35.0, S_SPID_DIE8) = none
	S_SPID_DIE8('SPID', 16, 10.0 / 35.0, S_SPID_DIE9) = none
	S_SPID_DIE9('SPID', 17, 10.0 / 35.0, S_SPID_DIE10) = none
	S_SPID_DIE10('SPID', 18, 30.0 / 35.0, S_SPID_DIE11) = none
	S_SPID_DIE11('SPID', 18, -1.0, none) = A_BossDeath
}
//Arachnotron
__states__
{
	S_BSPI_STND('BSPI', 0, 10.0 / 35.0, S_BSPI_STND2) = A_Look
	S_BSPI_STND2('BSPI', 1, 10.0 / 35.0, S_BSPI_STND) = A_Look
	S_BSPI_SIGHT('BSPI', 0, 20.0 / 35.0, S_BSPI_RUN1) = none
	S_BSPI_RUN1('BSPI', 0, 3.0 / 35.0, S_BSPI_RUN2) = A_BabyMetal
	S_BSPI_RUN2('BSPI', 0, 3.0 / 35.0, S_BSPI_RUN3) = A_Chase
	S_BSPI_RUN3('BSPI', 1, 3.0 / 35.0, S_BSPI_RUN4) = A_Chase
	S_BSPI_RUN4('BSPI', 1, 3.0 / 35.0, S_BSPI_RUN5) = A_Chase
	S_BSPI_RUN5('BSPI', 2, 3.0 / 35.0, S_BSPI_RUN6) = A_Chase
	S_BSPI_RUN6('BSPI', 2, 3.0 / 35.0, S_BSPI_RUN7) = A_Chase
	S_BSPI_RUN7('BSPI', 3, 3.0 / 35.0, S_BSPI_RUN8) = A_BabyMetal
	S_BSPI_RUN8('BSPI', 3, 3.0 / 35.0, S_BSPI_RUN9) = A_Chase
	S_BSPI_RUN9('BSPI', 4, 3.0 / 35.0, S_BSPI_RUN10) = A_Chase
	S_BSPI_RUN10('BSPI', 4, 3.0 / 35.0, S_BSPI_RUN11) = A_Chase
	S_BSPI_RUN11('BSPI', 5, 3.0 / 35.0, S_BSPI_RUN12) = A_Chase
	S_BSPI_RUN12('BSPI', 5, 3.0 / 35.0, S_BSPI_RUN1) = A_Chase
	S_BSPI_ATK1('BSPI', 0 | FF_FULLBRIGHT, 20.0 / 35.0, S_BSPI_ATK2) = A_FaceTarget
	S_BSPI_ATK2('BSPI', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_BSPI_ATK3) = A_BspiAttack
	S_BSPI_ATK3('BSPI', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_BSPI_ATK4) = none
	S_BSPI_ATK4('BSPI', 7 | FF_FULLBRIGHT, 1.0 / 35.0, S_BSPI_ATK2) = A_SpidRefire
	S_BSPI_PAIN('BSPI', 8, 3.0 / 35.0, S_BSPI_PAIN2) = none
	S_BSPI_PAIN2('BSPI', 8, 3.0 / 35.0, S_BSPI_RUN1) = A_Pain
	S_BSPI_DIE1('BSPI', 9, 20.0 / 35.0, S_BSPI_DIE2) = A_Scream
	S_BSPI_DIE2('BSPI', 10, 7.0 / 35.0, S_BSPI_DIE3) = A_Fall
	S_BSPI_DIE3('BSPI', 11, 7.0 / 35.0, S_BSPI_DIE4) = none
	S_BSPI_DIE4('BSPI', 12, 7.0 / 35.0, S_BSPI_DIE5) = none
	S_BSPI_DIE5('BSPI', 13, 7.0 / 35.0, S_BSPI_DIE6) = none
	S_BSPI_DIE6('BSPI', 14, 7.0 / 35.0, S_BSPI_DIE7) = none
	S_BSPI_DIE7('BSPI', 15, -1.0, none) = A_BossDeath
	S_BSPI_RAISE1('BSPI', 15, 5.0 / 35.0, S_BSPI_RAISE2) = none
	S_BSPI_RAISE2('BSPI', 14, 5.0 / 35.0, S_BSPI_RAISE3) = none
	S_BSPI_RAISE3('BSPI', 13, 5.0 / 35.0, S_BSPI_RAISE4) = none
	S_BSPI_RAISE4('BSPI', 12, 5.0 / 35.0, S_BSPI_RAISE5) = none
	S_BSPI_RAISE5('BSPI', 11, 5.0 / 35.0, S_BSPI_RAISE6) = none
	S_BSPI_RAISE6('BSPI', 10, 5.0 / 35.0, S_BSPI_RAISE7) = none
	S_BSPI_RAISE7('BSPI', 9, 5.0 / 35.0, S_BSPI_RUN1) = none
}
//ArachnotronPlasma
__states__
{
	S_ARACH_PLAZ('APLS', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_ARACH_PLAZ2) = none
	S_ARACH_PLAZ2('APLS', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_ARACH_PLAZ) = none
	S_ARACH_PLEX('APBX', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_ARACH_PLEX2) = none
	S_ARACH_PLEX2('APBX', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_ARACH_PLEX3) = none
	S_ARACH_PLEX3('APBX', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_ARACH_PLEX4) = none
	S_ARACH_PLEX4('APBX', 3 | FF_FULLBRIGHT, 5.0 / 35.0, S_ARACH_PLEX5) = none
	S_ARACH_PLEX5('APBX', 4 | FF_FULLBRIGHT, 5.0 / 35.0, none) = none
}
//Cyberdemon
__states__
{
	S_CYBER_STND('CYBR', 0, 10.0 / 35.0, S_CYBER_STND2) = A_Look
	S_CYBER_STND2('CYBR', 1, 10.0 / 35.0, S_CYBER_STND) = A_Look
	S_CYBER_RUN1('CYBR', 0, 3.0 / 35.0, S_CYBER_RUN2) = A_Hoof
	S_CYBER_RUN2('CYBR', 0, 3.0 / 35.0, S_CYBER_RUN3) = A_Chase
	S_CYBER_RUN3('CYBR', 1, 3.0 / 35.0, S_CYBER_RUN4) = A_Chase
	S_CYBER_RUN4('CYBR', 1, 3.0 / 35.0, S_CYBER_RUN5) = A_Chase
	S_CYBER_RUN5('CYBR', 2, 3.0 / 35.0, S_CYBER_RUN6) = A_Chase
	S_CYBER_RUN6('CYBR', 2, 3.0 / 35.0, S_CYBER_RUN7) = A_Chase
	S_CYBER_RUN7('CYBR', 3, 3.0 / 35.0, S_CYBER_RUN8) = A_Metal
	S_CYBER_RUN8('CYBR', 3, 3.0 / 35.0, S_CYBER_RUN1) = A_Chase
	S_CYBER_ATK1('CYBR', 4, 6.0 / 35.0, S_CYBER_ATK2) = A_FaceTarget
	S_CYBER_ATK2('CYBR', 5, 12.0 / 35.0, S_CYBER_ATK3) = A_CyberAttack
	S_CYBER_ATK3('CYBR', 4, 12.0 / 35.0, S_CYBER_ATK4) = A_FaceTarget
	S_CYBER_ATK4('CYBR', 5, 12.0 / 35.0, S_CYBER_ATK5) = A_CyberAttack
	S_CYBER_ATK5('CYBR', 4, 12.0 / 35.0, S_CYBER_ATK6) = A_FaceTarget
	S_CYBER_ATK6('CYBR', 5, 12.0 / 35.0, S_CYBER_RUN1) = A_CyberAttack
	S_CYBER_PAIN('CYBR', 6, 10.0 / 35.0, S_CYBER_RUN1) = A_Pain
	S_CYBER_DIE1('CYBR', 7, 10.0 / 35.0, S_CYBER_DIE2) = none
	S_CYBER_DIE2('CYBR', 8, 10.0 / 35.0, S_CYBER_DIE3) = A_Scream
	S_CYBER_DIE3('CYBR', 9, 10.0 / 35.0, S_CYBER_DIE4) = none
	S_CYBER_DIE4('CYBR', 10, 10.0 / 35.0, S_CYBER_DIE5) = none
	S_CYBER_DIE5('CYBR', 11, 10.0 / 35.0, S_CYBER_DIE6) = none
	S_CYBER_DIE6('CYBR', 12, 10.0 / 35.0, S_CYBER_DIE7) = A_Fall
	S_CYBER_DIE7('CYBR', 13, 10.0 / 35.0, S_CYBER_DIE8) = none
	S_CYBER_DIE8('CYBR', 14, 10.0 / 35.0, S_CYBER_DIE9) = none
	S_CYBER_DIE9('CYBR', 15, 30.0 / 35.0, S_CYBER_DIE10) = none
	S_CYBER_DIE10('CYBR', 15, -1.0, none) = A_BossDeath
}
//PainElemental
__states__
{
	S_PAIN_STND('PAIN', 0, 10.0 / 35.0, S_PAIN_STND) = A_Look
	S_PAIN_RUN1('PAIN', 0, 3.0 / 35.0, S_PAIN_RUN2) = A_Chase
	S_PAIN_RUN2('PAIN', 0, 3.0 / 35.0, S_PAIN_RUN3) = A_Chase
	S_PAIN_RUN3('PAIN', 1, 3.0 / 35.0, S_PAIN_RUN4) = A_Chase
	S_PAIN_RUN4('PAIN', 1, 3.0 / 35.0, S_PAIN_RUN5) = A_Chase
	S_PAIN_RUN5('PAIN', 2, 3.0 / 35.0, S_PAIN_RUN6) = A_Chase
	S_PAIN_RUN6('PAIN', 2, 3.0 / 35.0, S_PAIN_RUN1) = A_Chase
	S_PAIN_ATK1('PAIN', 3, 5.0 / 35.0, S_PAIN_ATK2) = A_FaceTarget
	S_PAIN_ATK2('PAIN', 4, 5.0 / 35.0, S_PAIN_ATK3) = A_FaceTarget
	S_PAIN_ATK3('PAIN', 5 | FF_FULLBRIGHT, 5.0 / 35.0, S_PAIN_ATK4) = A_FaceTarget
	S_PAIN_ATK4('PAIN', 5 | FF_FULLBRIGHT, 0.0 / 35.0, S_PAIN_RUN1) = A_PainAttack
	S_PAIN_PAIN('PAIN', 6, 6.0 / 35.0, S_PAIN_PAIN2) = none
	S_PAIN_PAIN2('PAIN', 6, 6.0 / 35.0, S_PAIN_RUN1) = A_Pain
	S_PAIN_DIE1('PAIN', 7 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE2) = none
	S_PAIN_DIE2('PAIN', 8 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE3) = A_Scream
	S_PAIN_DIE3('PAIN', 9 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE4) = none
	S_PAIN_DIE4('PAIN', 10 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE5) = none
	S_PAIN_DIE5('PAIN', 11 | FF_FULLBRIGHT, 8.0 / 35.0, S_PAIN_DIE6) = A_PainDie
	S_PAIN_DIE6('PAIN', 12 | FF_FULLBRIGHT, 8.0 / 35.0, none) = none
	S_PAIN_RAISE1('PAIN', 12, 8.0 / 35.0, S_PAIN_RAISE2) = none
	S_PAIN_RAISE2('PAIN', 11, 8.0 / 35.0, S_PAIN_RAISE3) = none
	S_PAIN_RAISE3('PAIN', 10, 8.0 / 35.0, S_PAIN_RAISE4) = none
	S_PAIN_RAISE4('PAIN', 9, 8.0 / 35.0, S_PAIN_RAISE5) = none
	S_PAIN_RAISE5('PAIN', 8, 8.0 / 35.0, S_PAIN_RAISE6) = none
	S_PAIN_RAISE6('PAIN', 7, 8.0 / 35.0, S_PAIN_RUN1) = none
}
//WolfSS
__states__
{
	S_SSWV_STND('SSWV', 0, 10.0 / 35.0, S_SSWV_STND2) = A_Look
	S_SSWV_STND2('SSWV', 1, 10.0 / 35.0, S_SSWV_STND) = A_Look
	S_SSWV_RUN1('SSWV', 0, 3.0 / 35.0, S_SSWV_RUN2) = A_Chase
	S_SSWV_RUN2('SSWV', 0, 3.0 / 35.0, S_SSWV_RUN3) = A_Chase
	S_SSWV_RUN3('SSWV', 1, 3.0 / 35.0, S_SSWV_RUN4) = A_Chase
	S_SSWV_RUN4('SSWV', 1, 3.0 / 35.0, S_SSWV_RUN5) = A_Chase
	S_SSWV_RUN5('SSWV', 2, 3.0 / 35.0, S_SSWV_RUN6) = A_Chase
	S_SSWV_RUN6('SSWV', 2, 3.0 / 35.0, S_SSWV_RUN7) = A_Chase
	S_SSWV_RUN7('SSWV', 3, 3.0 / 35.0, S_SSWV_RUN8) = A_Chase
	S_SSWV_RUN8('SSWV', 3, 3.0 / 35.0, S_SSWV_RUN1) = A_Chase
	S_SSWV_ATK1('SSWV', 4, 10.0 / 35.0, S_SSWV_ATK2) = A_FaceTarget
	S_SSWV_ATK2('SSWV', 5, 10.0 / 35.0, S_SSWV_ATK3) = A_FaceTarget
	S_SSWV_ATK3('SSWV', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_SSWV_ATK4) = A_CPosAttack
	S_SSWV_ATK4('SSWV', 5, 6.0 / 35.0, S_SSWV_ATK5) = A_FaceTarget
	S_SSWV_ATK5('SSWV', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_SSWV_ATK6) = A_CPosAttack
	S_SSWV_ATK6('SSWV', 5, 1.0 / 35.0, S_SSWV_ATK2) = A_CPosRefire
	S_SSWV_PAIN('SSWV', 7, 3.0 / 35.0, S_SSWV_PAIN2) = none
	S_SSWV_PAIN2('SSWV', 7, 3.0 / 35.0, S_SSWV_RUN1) = A_Pain
	S_SSWV_DIE1('SSWV', 8, 5.0 / 35.0, S_SSWV_DIE2) = none
	S_SSWV_DIE2('SSWV', 9, 5.0 / 35.0, S_SSWV_DIE3) = A_Scream
	S_SSWV_DIE3('SSWV', 10, 5.0 / 35.0, S_SSWV_DIE4) = A_Fall
	S_SSWV_DIE4('SSWV', 11, 5.0 / 35.0, S_SSWV_DIE5) = none
	S_SSWV_DIE5('SSWV', 12, -1.0, none) = none
	S_SSWV_XDIE1('SSWV', 13, 5.0 / 35.0, S_SSWV_XDIE2) = none
	S_SSWV_XDIE2('SSWV', 14, 5.0 / 35.0, S_SSWV_XDIE3) = A_XScream
	S_SSWV_XDIE3('SSWV', 15, 5.0 / 35.0, S_SSWV_XDIE4) = A_Fall
	S_SSWV_XDIE4('SSWV', 16, 5.0 / 35.0, S_SSWV_XDIE5) = none
	S_SSWV_XDIE5('SSWV', 17, 5.0 / 35.0, S_SSWV_XDIE6) = none
	S_SSWV_XDIE6('SSWV', 18, 5.0 / 35.0, S_SSWV_XDIE7) = none
	S_SSWV_XDIE7('SSWV', 19, 5.0 / 35.0, S_SSWV_XDIE8) = none
	S_SSWV_XDIE8('SSWV', 20, 5.0 / 35.0, S_SSWV_XDIE9) = none
	S_SSWV_XDIE9('SSWV', 21, -1.0, none) = none
	S_SSWV_RAISE1('SSWV', 12, 5.0 / 35.0, S_SSWV_RAISE2) = none
	S_SSWV_RAISE2('SSWV', 11, 5.0 / 35.0, S_SSWV_RAISE3) = none
	S_SSWV_RAISE3('SSWV', 10, 5.0 / 35.0, S_SSWV_RAISE4) = none
	S_SSWV_RAISE4('SSWV', 9, 5.0 / 35.0, S_SSWV_RAISE5) = none
	S_SSWV_RAISE5('SSWV', 8, 5.0 / 35.0, S_SSWV_RUN1) = none
}
//CommanderKeen
__states__
{
	S_KEENSTND('KEEN', 0, -1.0, S_KEENSTND) = none
	S_COMMKEEN('KEEN', 0, 6.0 / 35.0, S_COMMKEEN2) = none
	S_COMMKEEN2('KEEN', 1, 6.0 / 35.0, S_COMMKEEN3) = none
	S_COMMKEEN3('KEEN', 2, 6.0 / 35.0, S_COMMKEEN4) = A_Scream
	S_COMMKEEN4('KEEN', 3, 6.0 / 35.0, S_COMMKEEN5) = none
	S_COMMKEEN5('KEEN', 4, 6.0 / 35.0, S_COMMKEEN6) = none
	S_COMMKEEN6('KEEN', 5, 6.0 / 35.0, S_COMMKEEN7) = none
	S_COMMKEEN7('KEEN', 6, 6.0 / 35.0, S_COMMKEEN8) = none
	S_COMMKEEN8('KEEN', 7, 6.0 / 35.0, S_COMMKEEN9) = none
	S_COMMKEEN9('KEEN', 8, 6.0 / 35.0, S_COMMKEEN10) = none
	S_COMMKEEN10('KEEN', 9, 6.0 / 35.0, S_COMMKEEN11) = none
	S_COMMKEEN11('KEEN', 10, 6.0 / 35.0, S_COMMKEEN12) = A_KeenDie
	S_COMMKEEN12('KEEN', 11, -1.0, none) = none
	S_KEENPAIN('KEEN', 12, 4.0 / 35.0, S_KEENPAIN2) = none
	S_KEENPAIN2('KEEN', 12, 8.0 / 35.0, S_KEENSTND) = A_Pain
}
//BossBrain
__states__
{
	S_BRAIN('BBRN', 0, -1.0, none) = none
	S_BRAIN_PAIN('BBRN', 1, 36.0 / 35.0, S_BRAIN) = A_BrainPain
	S_BRAIN_DIE1('BBRN', 0, 100.0 / 35.0, S_BRAIN_DIE2) = A_BrainScream
	S_BRAIN_DIE2('BBRN', 0, 10.0 / 35.0, S_BRAIN_DIE3) = none
	S_BRAIN_DIE3('BBRN', 0, 10.0 / 35.0, S_BRAIN_DIE4) = none
	S_BRAIN_DIE4('BBRN', 0, -1.0, none) = A_BrainDie
}
//BossEye
__states__
{
	S_BRAINEYE('SSWV', 0, 10.0 / 35.0, S_BRAINEYE) = A_Look
	S_BRAINEYESEE('SSWV', 0, 181.0 / 35.0, S_BRAINEYE1) = A_BrainAwake
	S_BRAINEYE1('SSWV', 0, 150.0 / 35.0, S_BRAINEYE1) = A_BrainSpit
}
//SpawnShot
__states__
{
	S_SPAWN1('BOSF', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPAWN2) = A_SpawnSound
	S_SPAWN2('BOSF', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPAWN3) = A_SpawnFly
	S_SPAWN3('BOSF', 2 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPAWN4) = A_SpawnFly
	S_SPAWN4('BOSF', 3 | FF_FULLBRIGHT, 3.0 / 35.0, S_SPAWN1) = A_SpawnFly
}
//SpawnFire
__states__
{
	S_SPAWNFIRE1('FIRE', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE2) = A_Fire
	S_SPAWNFIRE2('FIRE', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE3) = A_Fire
	S_SPAWNFIRE3('FIRE', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE4) = A_Fire
	S_SPAWNFIRE4('FIRE', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE5) = A_Fire
	S_SPAWNFIRE5('FIRE', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE6) = A_Fire
	S_SPAWNFIRE6('FIRE', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE7) = A_Fire
	S_SPAWNFIRE7('FIRE', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE8) = A_Fire
	S_SPAWNFIRE8('FIRE', 7 | FF_FULLBRIGHT, 4.0 / 35.0, none) = A_Fire
}
//Rocket
__states__
{
	S_BRAINEXPLODE1('MISL', 1 | FF_FULLBRIGHT, 10.0 / 35.0, S_BRAINEXPLODE2) = none
	S_BRAINEXPLODE2('MISL', 2 | FF_FULLBRIGHT, 10.0 / 35.0, S_BRAINEXPLODE3) = none
	S_BRAINEXPLODE3('MISL', 3 | FF_FULLBRIGHT, 10.0 / 35.0, none) = A_BrainExplode
}
//ItemArmor1
__states__
{
	S_ARM1('ARM1', 0, 6.0 / 35.0, S_ARM1A) = none
	S_ARM1A('ARM1', 1 | FF_FULLBRIGHT, 7.0 / 35.0, S_ARM1) = none
}
//ItemArmor2
__states__
{
	S_ARM2('ARM2', 0, 6.0 / 35.0, S_ARM2A) = none
	S_ARM2A('ARM2', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_ARM2) = none
}
//Barrel
__states__
{
	S_BAR1('BAR1', 0, 6.0 / 35.0, S_BAR2) = none
	S_BAR2('BAR1', 1, 6.0 / 35.0, S_BAR1) = none
	S_BEXP('BEXP', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_BEXP2) = none
	S_BEXP2('BEXP', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_BEXP3) = A_Scream
	S_BEXP3('BEXP', 2 | FF_FULLBRIGHT, 5.0 / 35.0, S_BEXP4) = none
	S_BEXP4('BEXP', 3 | FF_FULLBRIGHT, 10.0 / 35.0, S_BEXP5) = A_Explode
	S_BEXP5('BEXP', 4 | FF_FULLBRIGHT, 10.0 / 35.0, none) = none
}
//BurningBarrel
__states__
{
	S_BBAR1('FCAN', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_BBAR2) = none
	S_BBAR2('FCAN', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_BBAR3) = none
	S_BBAR3('FCAN', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_BBAR1) = none
}
//ItemHealthBonus
__states__
{
	S_BON1('BON1', 0, 6.0 / 35.0, S_BON1A) = none
	S_BON1A('BON1', 1, 6.0 / 35.0, S_BON1B) = none
	S_BON1B('BON1', 2, 6.0 / 35.0, S_BON1C) = none
	S_BON1C('BON1', 3, 6.0 / 35.0, S_BON1D) = none
	S_BON1D('BON1', 2, 6.0 / 35.0, S_BON1E) = none
	S_BON1E('BON1', 1, 6.0 / 35.0, S_BON1) = none
}
//ItemArmorBonus
__states__
{
	S_BON2('BON2', 0, 6.0 / 35.0, S_BON2A) = none
	S_BON2A('BON2', 1, 6.0 / 35.0, S_BON2B) = none
	S_BON2B('BON2', 2, 6.0 / 35.0, S_BON2C) = none
	S_BON2C('BON2', 3, 6.0 / 35.0, S_BON2D) = none
	S_BON2D('BON2', 2, 6.0 / 35.0, S_BON2E) = none
	S_BON2E('BON2', 1, 6.0 / 35.0, S_BON2) = none
}
//ItemKeyBlueCard
__states__
{
	S_BKEY('BKEY', 0, 10.0 / 35.0, S_BKEY2) = none
	S_BKEY2('BKEY', 1 | FF_FULLBRIGHT, 10.0 / 35.0, S_BKEY) = none
}
//ItemKeyRedCard
__states__
{
	S_RKEY('RKEY', 0, 10.0 / 35.0, S_RKEY2) = none
	S_RKEY2('RKEY', 1 | FF_FULLBRIGHT, 10.0 / 35.0, S_RKEY) = none
}
//ItemKeyYellowCard
__states__
{
	S_YKEY('YKEY', 0, 10.0 / 35.0, S_YKEY2) = none
	S_YKEY2('YKEY', 1 | FF_FULLBRIGHT, 10.0 / 35.0, S_YKEY) = none
}
//ItemKeyBlueSkull
__states__
{
	S_BSKULL('BSKU', 0, 10.0 / 35.0, S_BSKULL2) = none
	S_BSKULL2('BSKU', 1 | FF_FULLBRIGHT, 10.0 / 35.0, S_BSKULL) = none
}
//ItemKeyRedSkull
__states__
{
	S_RSKULL('RSKU', 0, 10.0 / 35.0, S_RSKULL2) = none
	S_RSKULL2('RSKU', 1 | FF_FULLBRIGHT, 10.0 / 35.0, S_RSKULL) = none
}
//ItemKeyYellowSkull
__states__
{
	S_YSKULL('YSKU', 0, 10.0 / 35.0, S_YSKULL2) = none
	S_YSKULL2('YSKU', 1 | FF_FULLBRIGHT, 10.0 / 35.0, S_YSKULL) = none
}
//ItemStimPack
__states__
{
	S_STIM('STIM', 0, -1.0, none) = none
}
//ItemMedikit
__states__
{
	S_MEDI('MEDI', 0, -1.0, none) = none
}
//ItemSoulSphere
__states__
{
	S_SOUL('SOUL', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_SOUL2) = none
	S_SOUL2('SOUL', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_SOUL3) = none
	S_SOUL3('SOUL', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_SOUL4) = none
	S_SOUL4('SOUL', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_SOUL5) = none
	S_SOUL5('SOUL', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_SOUL6) = none
	S_SOUL6('SOUL', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_SOUL) = none
}
//ItemInvulnerability
__states__
{
	S_PINV('PINV', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_PINV2) = none
	S_PINV2('PINV', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_PINV3) = none
	S_PINV3('PINV', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_PINV4) = none
	S_PINV4('PINV', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_PINV) = none
}
//ItemBerserk
__states__
{
	S_PSTR('PSTR', 0 | FF_FULLBRIGHT, -1.0, none) = none
}
//ItemInvisibility
__states__
{
	S_PINS('PINS', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_PINS2) = none
	S_PINS2('PINS', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_PINS3) = none
	S_PINS3('PINS', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_PINS4) = none
	S_PINS4('PINS', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_PINS) = none
}
//ItemMegaSphere
__states__
{
	S_MEGA('MEGA', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_MEGA2) = none
	S_MEGA2('MEGA', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_MEGA3) = none
	S_MEGA3('MEGA', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_MEGA4) = none
	S_MEGA4('MEGA', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_MEGA) = none
}
//ItemRadiationSuit
__states__
{
	S_SUIT('SUIT', 0 | FF_FULLBRIGHT, -1.0, none) = none
}
//ItemComputerMap
__states__
{
	S_PMAP('PMAP', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_PMAP2) = none
	S_PMAP2('PMAP', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_PMAP3) = none
	S_PMAP3('PMAP', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_PMAP4) = none
	S_PMAP4('PMAP', 3 | FF_FULLBRIGHT, 6.0 / 35.0, S_PMAP5) = none
	S_PMAP5('PMAP', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_PMAP6) = none
	S_PMAP6('PMAP', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_PMAP) = none
}
//ItemInfrared
__states__
{
	S_PVIS('PVIS', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_PVIS2) = none
	S_PVIS2('PVIS', 1, 6.0 / 35.0, S_PVIS) = none
}
//ItemAmmoBulletClip
__states__
{
	S_CLIP('CLIP', 0, -1.0, none) = none
}
//ItemAmmoBulletBox
__states__
{
	S_AMMO('AMMO', 0, -1.0, none) = none
}
//ItemAmmoRocket
__states__
{
	S_ROCK('ROCK', 0, -1.0, none) = none
}
//ItemAmmoRocketBox
__states__
{
	S_BROK('BROK', 0, -1.0, none) = none
}
//ItemAmmoCells
__states__
{
	S_CELL('CELL', 0, -1.0, none) = none
}
//ItemAmmoCellsPack
__states__
{
	S_CELP('CELP', 0, -1.0, none) = none
}
//ItemAmmoShells
__states__
{
	S_SHEL('SHEL', 0, -1.0, none) = none
}
//ItemAmmoShellsBox
__states__
{
	S_SBOX('SBOX', 0, -1.0, none) = none
}
//ItemBackpack
__states__
{
	S_BPAK('BPAK', 0, -1.0, none) = none
}
//ItemWeaponBFG
__states__
{
	S_BFUG('BFUG', 0, -1.0, none) = none
}
//ItemWeaponChaingun
__states__
{
	S_MGUN('MGUN', 0, -1.0, none) = none
}
//ItemWeaponChainsaw
__states__
{
	S_CSAW('CSAW', 0, -1.0, none) = none
}
//ItemWeaponRocketLauncher
__states__
{
	S_LAUN('LAUN', 0, -1.0, none) = none
}
//ItemWeaponPlasmaGun
__states__
{
	S_PLAS('PLAS', 0, -1.0, none) = none
}
//ItemWeaponShotgun
__states__
{
	S_SHOT('SHOT', 0, -1.0, none) = none
}
//ItemWeaponSuperShotgun
__states__
{
	S_SHOT2('SGN2', 0, -1.0, none) = none
}
//ColumnLamp
__states__
{
	S_COLU('COLU', 0 | FF_FULLBRIGHT, -1.0, none) = none
}
__states__
{
	S_STALAG('SMT2', 0, -1.0, none) = none
}
//BloodyTwitch
__states__
{
	S_BLOODYTWITCH('GOR1', 0, 10.0 / 35.0, S_BLOODYTWITCH2) = none
	S_BLOODYTWITCH2('GOR1', 1, 15.0 / 35.0, S_BLOODYTWITCH3) = none
	S_BLOODYTWITCH3('GOR1', 2, 8.0 / 35.0, S_BLOODYTWITCH4) = none
	S_BLOODYTWITCH4('GOR1', 1, 6.0 / 35.0, S_BLOODYTWITCH) = none
}
//DeadPlayer
__states__
{
	S_DEADTORSO('PLAY', 13, -1.0, none) = none
}
//DeadPlayerGibs
__states__
{
	S_DEADBOTTOM('PLAY', 18, -1.0, none) = none
}
//HeadsOnStick
__states__
{
	S_HEADSONSTICK('POL2', 0, -1.0, none) = none
}
__states__
{
	S_GIBS('POL5', 0, -1.0, none) = none
}
//HeadOnAStick
__states__
{
	S_HEADONASTICK('POL4', 0, -1.0, none) = none
}
//HeadCandles
__states__
{
	S_HEADCANDLES('POL3', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_HEADCANDLES2) = none
	S_HEADCANDLES2('POL3', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_HEADCANDLES) = none
}
//DeadStick
__states__
{
	S_DEADSTICK('POL1', 0, -1.0, none) = none
}
//LiveStick
__states__
{
	S_LIVESTICK('POL6', 0, 6.0 / 35.0, S_LIVESTICK2) = none
	S_LIVESTICK2('POL6', 1, 8.0 / 35.0, S_LIVESTICK) = none
}
//Meat2
__states__
{
	S_MEAT2('GOR2', 0, -1.0, none) = none
}
//Meat3
__states__
{
	S_MEAT3('GOR3', 0, -1.0, none) = none
}
//Meat4
__states__
{
	S_MEAT4('GOR4', 0, -1.0, none) = none
}
//Meat5
__states__
{
	S_MEAT5('GOR5', 0, -1.0, none) = none
}
//Stalagtite
__states__
{
	S_STALAGTITE('SMIT', 0, -1.0, none) = none
}
//ColumnGreenTall
__states__
{
	S_TALLGRNCOL('COL1', 0, -1.0, none) = none
}
//ColumnGreenShort
__states__
{
	S_SHRTGRNCOL('COL2', 0, -1.0, none) = none
}
//ColumnRedTall
__states__
{
	S_TALLREDCOL('COL3', 0, -1.0, none) = none
}
//ColumnRedShort
__states__
{
	S_SHRTREDCOL('COL4', 0, -1.0, none) = none
}
//CandleStick
__states__
{
	S_CANDLESTIK('CAND', 0 | FF_FULLBRIGHT, -1.0, none) = none
}
//Candelabra
__states__
{
	S_CANDELABRA('CBRA', 0 | FF_FULLBRIGHT, -1.0, none) = none
}
//ColumnWithSkull
__states__
{
	S_SKULLCOL('COL6', 0, -1.0, none) = none
}
//BurnedTree
__states__
{
	S_TORCHTREE('TRE1', 0, -1.0, none) = none
}
//BigTree
__states__
{
	S_BIGTREE('TRE2', 0, -1.0, none) = none
}
//TechPillar
__states__
{
	S_TECHPILLAR('ELEC', 0, -1.0, none) = none
}
//EvilEye
__states__
{
	S_EVILEYE('CEYE', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_EVILEYE2) = none
	S_EVILEYE2('CEYE', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_EVILEYE3) = none
	S_EVILEYE3('CEYE', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_EVILEYE4) = none
	S_EVILEYE4('CEYE', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_EVILEYE) = none
}
//FloatingSkull
__states__
{
	S_FLOATSKULL('FSKU', 0 | FF_FULLBRIGHT, 6.0 / 35.0, S_FLOATSKULL2) = none
	S_FLOATSKULL2('FSKU', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_FLOATSKULL3) = none
	S_FLOATSKULL3('FSKU', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_FLOATSKULL) = none
}
//ColumnWithHearth
__states__
{
	S_HEARTCOL('COL5', 0, 14.0 / 35.0, S_HEARTCOL2) = none
	S_HEARTCOL2('COL5', 1, 14.0 / 35.0, S_HEARTCOL) = none
}
//TorchBlue
__states__
{
	S_BLUETORCH('TBLU', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_BLUETORCH2) = none
	S_BLUETORCH2('TBLU', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_BLUETORCH3) = none
	S_BLUETORCH3('TBLU', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_BLUETORCH4) = none
	S_BLUETORCH4('TBLU', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_BLUETORCH) = none
}
//TorchGreen
__states__
{
	S_GREENTORCH('TGRN', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_GREENTORCH2) = none
	S_GREENTORCH2('TGRN', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_GREENTORCH3) = none
	S_GREENTORCH3('TGRN', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_GREENTORCH4) = none
	S_GREENTORCH4('TGRN', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_GREENTORCH) = none
}
//TorchRed
__states__
{
	S_REDTORCH('TRED', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_REDTORCH2) = none
	S_REDTORCH2('TRED', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_REDTORCH3) = none
	S_REDTORCH3('TRED', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_REDTORCH4) = none
	S_REDTORCH4('TRED', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_REDTORCH) = none
}
//TorchBlueShort
__states__
{
	S_BTORCHSHRT('SMBT', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_BTORCHSHRT2) = none
	S_BTORCHSHRT2('SMBT', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_BTORCHSHRT3) = none
	S_BTORCHSHRT3('SMBT', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_BTORCHSHRT4) = none
	S_BTORCHSHRT4('SMBT', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_BTORCHSHRT) = none
}
//TorchGreenShort
__states__
{
	S_GTORCHSHRT('SMGT', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_GTORCHSHRT2) = none
	S_GTORCHSHRT2('SMGT', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_GTORCHSHRT3) = none
	S_GTORCHSHRT3('SMGT', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_GTORCHSHRT4) = none
	S_GTORCHSHRT4('SMGT', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_GTORCHSHRT) = none
}
//TorchRedShort
__states__
{
	S_RTORCHSHRT('SMRT', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_RTORCHSHRT2) = none
	S_RTORCHSHRT2('SMRT', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_RTORCHSHRT3) = none
	S_RTORCHSHRT3('SMRT', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_RTORCHSHRT4) = none
	S_RTORCHSHRT4('SMRT', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_RTORCHSHRT) = none
}
//HangingNoGuts
__states__
{
	S_HANGNOGUTS('HDB1', 0, -1.0, none) = none
}
//HangingNoBrain
__states__
{
	S_HANGBNOBRAIN('HDB2', 0, -1.0, none) = none
}
//HangingTorsoLookDown
__states__
{
	S_HANGTLOOKDN('HDB3', 0, -1.0, none) = none
}
//HangingTorsoSkull
__states__
{
	S_HANGTSKULL('HDB4', 0, -1.0, none) = none
}
//HangingTorsoLookUp
__states__
{
	S_HANGTLOOKUP('HDB5', 0, -1.0, none) = none
}
//HangingTorsoNoBrain
__states__
{
	S_HANGTNOBRAIN('HDB6', 0, -1.0, none) = none
}
//ColonGibs
__states__
{
	S_COLONGIBS('POB1', 0, -1.0, none) = none
}
//SmallPool
__states__
{
	S_SMALLPOOL('POB2', 0, -1.0, none) = none
}
//BrainStem
__states__
{
	S_BRAINSTEM('BRS1', 0, -1.0, none) = none
}
//TechLamp
__states__
{
	S_TECHLAMP('TLMP', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_TECHLAMP2) = none
	S_TECHLAMP2('TLMP', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_TECHLAMP3) = none
	S_TECHLAMP3('TLMP', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_TECHLAMP4) = none
	S_TECHLAMP4('TLMP', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_TECHLAMP) = none
}
//TechLamp2
__states__
{
	S_TECH2LAMP('TLP2', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_TECH2LAMP2) = none
	S_TECH2LAMP2('TLP2', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_TECH2LAMP3) = none
	S_TECH2LAMP3('TLP2', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_TECH2LAMP4) = none
	S_TECH2LAMP4('TLP2', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_TECH2LAMP) = none
}

__states__
{
	S_DORMANT_PICKUP1('', 0, 30.0, S_DORMANT_PICKUP2)
	{
		bHidden = true;
		bSpecial = false;
	}
	S_DORMANT_PICKUP2('', 0, -1.0, none)
	{
		Actor A;

		bHidden = false;
		bSpecial = true;
		SetState(IdleState);

		// spawn a teleport fog at the new spot
		A = Spawn(ItemRespawnFog, Origin);
		A.PlaySound('misc/spawn', CHAN_ITEM);
	}
}

defaultproperties
{
	Health = 1000;
	GibsHealth = -1000;
	ReactionCount = 8;
	Radius = 20.0;
	Height = 16.0;
	Mass = 100.0;
	MaxStepHeight = 24.0;
	MissileChance = 200.0;
	LightOffset = vector(0.0, 0.0, 0.0);
	LightColour = 0xffffffff;
	LightRadius = 128.0;
	GibsState = S_GIBS;
}
