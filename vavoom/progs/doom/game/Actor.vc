//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : Entity
	abstract;

//  States
int IdleState;
int SeeState;
int PainState;
int MeleeState;
int MissileState;
int DeathState;
int GibsDeathState;
int RaiseState;

//	Sounds
name SightSound;
name ActiveSound;
name AttackSound;
name PainSound;
name DeathSound;

//	Flags
bool bSpecial;		// call P_SpecialThing when touched
bool bShootable;	// Can be hit.
bool bAmbush;
bool bJustHit;		// try to attack right back
bool bJustAttacked;	// take at least one step before attacking
bool bSpawnCeiling;	// hang from ceiling instead of floor
// movement flags
bool bPickUp;		// for players to pick up items
bool bSlide;		// keep info about sliding along walls
bool bTeleport;		// don't cross lines or look at heights
bool bMissile;		// don't hit same species, explode on block
bool bDropped;		// dropped by a demon, not level spawned
bool bNoBlood;		// don't bleed when shot (use puff)
bool bCorpse;		// don't stop moving halfway off a step
bool bInFloat;		// floating to a height for a move, don't
					// auto float to target's height
bool bCountKill;	// count towards intermission kill total
bool bCountItem;	// count towards intermission item total
bool bOnMobj;		// mobj is resting on top of another mobj
bool bActivateImpact;	// an MF_MISSILE mobj can activate
						// SPAC_IMPACT
bool bActivatePushWall;	// mobj can push walls
bool bActivateMCross;	// can activate monster cross lines
bool bActivatePCross;	// can activate projectile cross lines
bool bDormant;		// thing is dormant
bool bBounce;
bool bWaterJump;
bool bSkullFly;		// skull in flight
bool bNoDeathmatch;
bool bMonster;
bool bTelestomp;
bool bDefaultFloat;
bool bDefaultNoGravity;
bool bTriggerHappy;
bool bNeverTarget;
bool bNoGrudge;
bool bNoGravKill;
bool bBoss;
bool bNoRespawn;
bool bWindThrust;
bool bNoTeleport;
#ifdef DDF
// Extra flags.
bool bStealth;
bool bJustPickedUp;
bool bTouchy;
bool bLessVis;
bool bDisloyalType;
bool bOwnAttackHurts;
bool bFirstCheck;
bool bNoTrace;
bool bDummyMobj;
bool bNoResurect;
bool bEdgeWalker;
bool bGravFall;
bool bClimbable;
bool bWaterWalker;
bool bCrossLines;
bool bNoFriction;
bool bExtra;
bool bJustBounced;
bool bUsable;
bool bBlockShots;
bool bCrouching;
bool bTunnel;
bool bDLight;
bool bGibbed;
#endif

//  Params
float Speed;
float StepSpeed;
float PainChance;
int SpawnHealth;
int GibsHealth;

// Thing being chased/attacked (or NULL).
Actor Enemy;
// The originator for missiles.
Actor Instigator;

// Player number last looked for.
int LastLook;

// For nightmare respawn.
mthing_t SpawnPoint;

int MissileDamage;	// For missiles

// Reaction time: if non 0, don't attack yet.
int ReactionCount;
// Used by player to freeze a bit after teleporting.
float ReactionTime;

// If >0, the target will be chased
// no matter what (even if shot)
int Threshold;

// Movement direction, movement generation (zig-zagging).
int MoveDir;	// 0-7
int MoveCount;	// when 0, select a new dir

float MissileChance;
float MissileMinRange;
float MissileMaxRange;
classid ImuneMissileType;

string PickupMessage;

#ifdef DDF
// New states.
int SpawnState;
int ResState;
int MeanderState;
int BounceState;
int TouchState;
int JumpState;
int GibState;

// Float move speed
float FloatSpeed;

int ExplodeDamage;
int ExplodeDamageMax;
int ExplodeDamageError;
float ExplodeDamageDelay;
int ExplodeDamageNoArmour;

int CastOrder;
float RespawnTime;

float JumpDelay;
float JumpHeight;
float CrouchHeight;
float ViewHeight;
float ShotHeight;
float MaxFall;
float Fast;
float XScale;
float YScale;
float BounceSpeed;
float BounceUp;
float SightSlope;
float SightAngle;
float RideFriction;
float ShadowTrans;

// Sounds.
name OverkillSound;
name WalkSound;
name JumpSound;
name NoWaySound;
name OofSound;
name GaspSound;

int Fuse;
int Side;
int PlayerNum;

float LungCapacity;
float GaspStart;
int ChokeDamage;
int ChokeDamageMax;
int ChokeDamageError;
float ChokeDamageDelay;
int ChokeDamageNoArmour;

float Bobbing;
int Immunity;

AttackType CloseCombat;
AttackType RangeAttack;
AttackType SpareAttack;

float HaloHeight;
float HaloSize;
float HaloMinSize;
float HaloMaxSize;
float HaloTranslucency;
int HaloColor;
string HaloGraphic;

int DLightType;
int DLightIntensity;
int DLightColor;
float DLightHeight;

classid DropItem;
classid BloodType;
classid RespawnEffect;
classid SpitSpot;

AttackType *CurrentAttack;

int NumBrainTargets;
int BrainTargetOn;
int BrainEasy;
Actor BrainTargets[32];

int SpreadCount;
#endif

float bombdamage;

Actor CorpseHit;
float viletryx;
float viletryy;

// Height if not aiming up or down
// ???: use slope for monsters?
float aim_z;
float aim_range;
float aim_slope;
TVec aim_dir;
float aim_topslope;
float aim_bottomslope;	// slopes to top and bottom of target
Actor linetarget;	// who got hit (or NULL)
float aim_range2d;

float shoot_range;
TVec shoot_origin;
TVec shoot_dir;
int la_damage;

__states__
{
	S_DORMANT_PICKUP1('', 0, 30.0, S_DORMANT_PICKUP2)
	{
		bHidden = true;
		bSpecial = false;
	}
	S_DORMANT_PICKUP2('', 0, -1.0, S_NULL)
	{
		Actor A;

		bHidden = false;
		bSpecial = true;
		SetState(IdleState);

		// spawn a teleport fog at the new spot
		A = Spawn(ItemRespawnFog, Origin);
		A.PlaySound('misc/spawn', CHAN_ITEM);
	}
}

//==========================================================================
//
//	HideSpecial
//
//==========================================================================

void HideSpecial(void)
{
	// only respawn items in deathmatch
	if ((deathmatch == 2 || deathmatch == 3) && !bDropped && !bNoRespawn)
	{
		SetState(S_DORMANT_PICKUP1);
	}
	else
	{
		Remove();
	}
}

//==========================================================================
//
//	HandlePickup
//
//==========================================================================

bool HandlePickup(Actor Toucher)
{
	return false;
}

//==========================================================================
//
//	TouchSpecial
//
//==========================================================================

void TouchSpecial(Actor Toucher)
{
	if (!Toucher.bPickUp)
	{
		// can't remove thing
		return;
	}
	// Dead thing touching.
	// Can happen with a sliding player corpse.
	if (Toucher.Health <= 0)
		return;

	if (!HandlePickup(Toucher))
	{
		return;
	}
#ifdef DDF
	cprint(Toucher.Player, PickupMessage);
	Toucher.PlaySound(ActiveSound, CHAN_ITEM);
#endif
	if (bCountItem)
	{
		Toucher.Player.ItemCount++;
		level->currentitems++;
	}
	HideSpecial();
	Toucher.Player.BonusFlash += BONUSADD;
}

//==========================================================================
//
//  SetOrigin2
//
//==========================================================================

void SetOrigin2(TVec origin)
{
	Origin = origin;

	// set subsector and/or block links
	LinkToWorld();

	if (origin.z == ONFLOORZ)
	{
		Origin.z = FloorZ;
	}
	else if (origin.z == ONCEILINGZ)
	{
		Origin.z = CeilingZ - Height;
	}
}

//==========================================================================
//
//	OnMapSpawn
//
//==========================================================================

void OnMapSpawn(mthing_t * mthing)
{
	state_t *st;

	if (bNoDeathmatch && deathmatch)
	{
		Remove();
		return;
	}
	if (bMonster && nomonsters)
	{
		Remove();
		return;
	}

	SpawnHealth = Health;
	bCheckLineBlocking = false;
	bCheckLineBlockMonsters = false;
	if (!bMissile)
	{
		bCheckLineBlocking = true;
		if (Class != DoomPlayer)
		{
			bCheckLineBlockMonsters = true;
		}
	}
	bDefaultFloat = bFloat;
	bDefaultNoGravity = bNoGravity;

	if (gameskill == sk_nightmare)
	{
		ReactionCount = 0;
	}

	LastLook = P_Random() % MAXPLAYERS;
	// do not set the state with SetState,
	// because action routines can not be called yet
#ifdef DDF
	if (SpawnState)
		SetInitialState(SpawnState);
	else if (MeanderState)
		SetInitialState(MeanderState);
	else
#endif
		SetInitialState(IdleState);

	if (mthing)
	{
		float x;
		float y;
		float z;

		CopyMThing(mthing, &SpawnPoint);

		x = mthing->x;
		y = mthing->y;
		if (bSpawnCeiling)
			z = ONCEILINGZ;
		else
			z = ONFLOORZ;
		SetOrigin2(vector(x, y, z));
		if (z == ONFLOORZ)
		{
			Origin.z += mthing->height;
		}
		else if (z == ONCEILINGZ)
		{
			Origin.z -= mthing->height;
		}
		LinkToWorld();

		TID = mthing->tid;
		Special = mthing->special;
		Args[0] = mthing->arg1;
		Args[1] = mthing->arg2;
		Args[2] = mthing->arg3;
		Args[3] = mthing->arg4;
		Args[4] = mthing->arg5;
		if (StateTime > 0.0)
			StateTime = 0.1 + Random() * StateTime;
		if (bCountKill)
			level->totalkills++;
		if (bCountItem)
			level->totalitems++;

		Angles.yaw = itof(45 * (mthing->angle / 45));
		if (mthing->options & MTF_AMBUSH)
		{
			bAmbush = true;
		}
		if (mthing->options & MTF_DORMANT)
		{
			bDormant = true;
			StateTime = -1.0;
		}
	}
	else
	{
		SetOrigin2(Origin);
	}
}

//==========================================================================
//
//  ExplodeMissile
//
//==========================================================================

void ExplodeMissile(void)
{
	Velocity = vector(0.0, 0.0, 0.0);

	SetState(DeathState);

	StateTime -= Random() * 0.1;

	if (StateTime < 0.1)
		StateTime = 0.1;

	bMissile = false;

	if (DeathSound)
		PlaySound(DeathSound, CHAN_VOICE);

	if (!(Effects & EF_ROCKET) && (Effects & EF_DLIGHT_MASK))
	{
		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion2);
		MSG_WriteByte(Effects & EF_DLIGHT_MASK);
		MSG_WriteShort(ftoi(Origin.x));
		MSG_WriteShort(ftoi(Origin.y));
		MSG_WriteShort(ftoi(Origin.z));
		Effects &= ~EF_DLIGHT_MASK;
	}
	Effects &= ~EF_ROCKET;
}

//==========================================================================
//
//  CheckMissileSpawn
//
//  Moves the missile forward a bit and possibly explodes it right there.
//
//==========================================================================

bool CheckMissileSpawn()
{
	StateTime -= Random() * 0.1;
	if (StateTime < 0.1)
		StateTime = 0.1;

	// move a little forward so an angle can
	// be computed if it immediately explodes
	Origin = Origin + Velocity * 0.0142857143;

	if (!TryMove(Origin))
	{
		ExplodeMissile();
		return false;
	}
	return true;
}

//==========================================================================
//
//  SpawnMissile
//
//==========================================================================

Actor SpawnMissile(Actor dest, classid type)
{
	Actor A;
	TVec dir;

	A = Spawn(type, Origin + vector(0.0, 0.0, 32.0));

	if (A.SightSound)
		A.PlaySound(A.SightSound, CHAN_VOICE);

	A.Instigator = self;	// where it came from

	if (dest)
	{
		dir = dest.Origin - Origin;
		// fuzzy player
		if (dest.Translucency)
		{
			VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
		}
	}
	else
	{
		dir = Velocity;
	}
	dir = Normalise(dir);
	A.Velocity = dir * A.Speed;

	VectorAngles(&dir, &A.Angles);

	A.CheckMissileSpawn();

	return A;
}

//==========================================================================
//
//	Died
//
//==========================================================================

void Died(Actor source)
{
	bShootable = false;
	bFloat = false;
	bSkullFly = false;

	if (!bNoGravKill)
		bNoGravity = false;

	bDropOff = true;
	bCorpse = true;
	Height /= 4.0;

	if (bCountKill && Special)
	{
		// Initiate monster death actions
		ExecuteLineSpecial(Special, &Args[0], NULL, 0, self);
	}
	if (source && source.bIsPlayer)
	{
		// count for intermission
		if (bCountKill)
			source.Player.KillCount++;

		if (bIsPlayer)
		{
#ifndef	NO_BOTS
			if (source.Player.bIsBot)
			{
				source.Player.Bot.Killed(self);
			}

			if (Player.bIsBot)
			{
				Player.Bot.Died(source);
			}
#endif

			source.Player.FragsStats[P_GetPlayerNum(Player)]++;
			if (source == self)
			{
				Player.Frags--;
			}
			else
			{
				source.Player.Frags++;
			}
		}
	}
	else if (!netgame && bCountKill)
	{
		// count all monster deaths,
		// even those caused by other monsters
		svvars->Players[0].KillCount++;
	}
	if (bCountKill)
		level->currentkills++;

	if (bIsPlayer)
	{
		// count environment kills against you
		if (!source)
		{
			Player.FragsStats[P_GetPlayerNum(Player)]++;
			Player.Frags--;
		}

		bSolid = false;
		Player.PlayerState = PST_DEAD;
		Player.DropWeapon();
#ifdef FIXME
		if (Player == svvars->Players[consoleplayer] && automapactive)
		{
			// don't die in auto map,
			// switch view prior to dying
			AM_Stop();
		}
#endif
	}

	if (Health < GibsHealth && GibsDeathState)
	{
		if (bFixedModel)
		{
			bFixedModel = false;
			ModelSkinNum = 0;
		}
		SetState(GibsDeathState);
	}
	else
	{
		SetState(DeathState);
	}
	StateTime -= Random() * 0.1;

	if (StateTime < 0.1)
		StateTime = 0.1;

	DropStuff();
}

//==========================================================================
//
//	DropStuff
//
//==========================================================================

void DropStuff(void)
{
#ifdef DDF
	if (DropItem)
	{
		Actor A;

		A = Spawn(DropItem, vector(Origin.x, Origin.y, FloorZ));
		A.bDropped = true;	// special versions of items
	}
#endif
}

//==========================================================================
//
//	Damage
//
//  Damages both enemies and players.
//  "inflictor" is the thing that caused the damage, creature or missile,
// can be NULL (slime, etc).
//  "source" is the thing to target after taking damage, creature or NULL.
//  Source and inflictor are the same for melee attacks. Source can be NULL
// for slime, barrel explosions and other environmental stuff.
//
//==========================================================================

void Damage(Actor inflictor, Actor source, int damage)
{
	int saved;

	if (!bShootable)
		return;	// shouldn't happen...

	if (Health <= 0)
		return;

	if (bSkullFly)
	{
		Velocity = vector(0.0, 0.0, 0.0);
	}
	if (bDormant)
	{
		// Invulnerable, and won't wake up
		return;
	}

	if (bIsPlayer && gameskill == sk_baby)
		damage >>= 1;	// take half damage in trainer mode

	// Some close combat weapons should not
	// inflict thrust and push the victim out of reach,
	// thus kick away unless using the chainsaw.
	if (inflictor && bColideWithThings &&
		(!source || !source.bIsPlayer ||
			source.Player.ReadyWeapon != wp_chainsaw))
	{
		Velocity += (500.0 * itof(damage) / Mass) *
			Normalise(MobjCenter(self) - MobjCenter(inflictor));
	}

	// player specific
	if (bIsPlayer)
	{
		//	End of game hell hack.
		if ((Sector->special & SECSPEC_BASE_MASK) ==
			SECSPEC_DamageSuperHellslimeExit && damage >= Health)
		{
			damage = Health - 1;
		}

		// Below certain threshold,
		// ignore damage in GOD mode, or with INVUL power.
		if (damage < 1000 && ((Player.Cheats & CF_GODMODE) ||
			Player.Powers[pw_invulnerability]))
		{
			return;
		}

		if (Player.ArmorType)
		{
			if (Player.ArmorType == 1)
				saved = damage / 3;
			else
				saved = damage / 2;

			if (Player.ArmorPoints <= saved)
			{
				// armor is used up
				saved = Player.ArmorPoints;
				Player.ArmorType = 0;
			}
			Player.ArmorPoints -= saved;
			damage -= saved;
		}
		Player.Health -= damage;	// mirror mobj health here for Dave
		if (Player.Health < 0)
			Player.Health = 0;

		Player.Attacker = source;
		Player.DamageFlash += itof(damage) / 35.0;	// add damage after armor / invuln

		if (Player.DamageFlash > 3.0)
			Player.DamageFlash = 3.0;	// teleport stomp does 10k points...
	}

	// do the damage    
	Health -= damage;
	if (Health <= 0)
	{
		Died(source);
		return;
	}

	if ((Random() < PainChance) && !bSkullFly)
	{
		bJustHit = true;	// fight back!
		SetState(PainState);
	}

	ReactionCount = 0;	// we're awake now...

	if ((!Threshold || bNoGrudge) &&
		source && source != self && !source.bNeverTarget)
	{
		// if not intent on another player,
		// chase after this one
		Enemy = source;
		Threshold = BASETHRESHOLD;
		if (StateNum == IdleState && SeeState != S_NULL)
		{
			SetState(SeeState);
		}
	}

}

//==========================================================================
//
//  NightmareRespawn
//
//==========================================================================

void NightmareRespawn(void)
{
	float x;
	float y;
	float z;
	Actor A;
	mthing_t *mthing;

	x = SpawnPoint.x;
	y = SpawnPoint.y;

	// somthing is occupying it's position?
	if (!CheckPosition(vector(x, y, ONFLOORZ)))
		return;	// no respwan

	// spawn a teleport fog at old spot
	// because of removal of the body?
	A = Spawn(TeleportFog, vector(Origin.x, Origin.y, ONFLOORZ));

	// initiate teleport sound
	A.PlaySound('misc/teleport', CHAN_BODY);

	// spawn a teleport fog at the new spot
	A = Spawn(TeleportFog, vector(x, y, ONFLOORZ));

	A.PlaySound('misc/teleport', CHAN_BODY);

	// spawn the new monster
	mthing = &SpawnPoint;

	// spawn it
#ifdef FIXME
	if (info->Flags & MF_SPAWNCEILING)
		z = ONCEILINGZ;
	else
#endif
		z = ONFLOORZ;

	// inherit attributes from deceased one
	A = Spawn(Class, vector(x, y, z));
	CopyMThing(&SpawnPoint, &A.SpawnPoint);
	A.Angles.yaw = itof(45 * (mthing->angle / 45));

	if (mthing->options & MTF_AMBUSH)
		A.bAmbush = true;

	A.ReactionCount = 18;

	// remove the old monster,
	Remove();
}

//==========================================================================
//
//  TestLocation
//
//  Returns true if the mobj is not blocked by anything at its current
// location, otherwise returns false.
//
//==========================================================================

bool TestLocation()
{
	if (!bColideWithThings && !bColideWithWorld)
		return true;

	if (CheckPosition(Origin))
	{
		// XY is ok, now check Z
		if ((Origin.z < FloorZ) || (Origin.z + Height > CeilingZ))
		{
			// Bad Z
			return false;
		}
		return true;
	}
	return false;
}

//==========================================================================
//
//	Touch
//
//==========================================================================

bool Touch(Entity InOther)
{
	bool solid;
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// check for skulls slamming into things
	if (bSkullFly)
	{
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(IdleState);
		return false;	// stop moving
	}

	// missiles can hit other things
	if (bMissile)
	{
		if (Instigator && (Instigator.Class == Other.Class ||
			Class == Other.ImuneMissileType))
		{
			// Don't hit same species as originator.
			if (Other == Instigator)
				return true;

			if (Other.Class != DoomPlayer)
			{
				// Explode, but do no damage.
				// Let players missile other players.
				return false;
			}
		}

		if (!Other.bShootable)
		{
			// didn't do any damage
			return !Other.bSolid;
		}

		// damage / explode
#ifdef DDF
		damage = MissileDamage;	// Already computed
#else
		damage = ((P_Random() % 8) + 1) * MissileDamage;
#endif
		Other.Damage(self, Instigator, damage);
		// don't traverse any more
		return false;
	}

	// check for special pickup
	if (Other.bSpecial)
	{
		solid = Other.bSolid;
		Other.TouchSpecial(self);
		return !solid;
	}

	//return !Other.bSolid || Other.bNoClip;
	return !Other.bSolid;
}

//===========================================================================
//
//	CheckForPushSpecial
//
//===========================================================================

void CheckForPushSpecial(line_t * line, int side)
{
	if (line->special)
	{
		if (bActivatePushWall)
		{
			P_ActivateLine(line, self, side, SPAC_PUSH);
		}
		else if (bActivateImpact)
		{
			P_ActivateLine(line, bMissile ? Instigator : self, side,
				SPAC_IMPACT);
		}
	}
}

//==========================================================================
//
//	BlockedByLine
//
//==========================================================================

void BlockedByLine(line_t * ld)
{
	if (bBlasted)
	{
		Damage(none, none, ftoi(Mass) >> 5);
	}
	CheckForPushSpecial(ld, 0);
}

//==========================================================================
//
//  PushLine
//
//==========================================================================

void PushLine()
{
	if (bColideWithWorld)
	{
		int numSpecHitTemp;
		line_t *ld;
		int side;

		if (bBlasted)
		{
			Damage(none, none, ftoi(Mass) >> 5);
		}
		numSpecHitTemp = tmtrace->NumSpecHit;
		while (numSpecHitTemp > 0)
		{
			numSpecHitTemp--;
			// see if the line was crossed
			ld = tmtrace->SpecHit[numSpecHitTemp];
			side = PointOnPlaneSide(Origin, ld);
			CheckForPushSpecial(ld, side);
		}
	}
}

//==========================================================================
//
//	CrossSpecialLine
//
//==========================================================================

void CrossSpecialLine(line_t *ld, int side)
{
	if (bIsPlayer)
	{
		P_ActivateLine(ld, self, side, SPAC_CROSS);
	}
	else if (bActivateMCross)
	{
		P_ActivateLine(ld, self, side, SPAC_MCROSS);
	}
	else if (bActivatePCross)
	{
		P_ActivateLine(ld, self, side, SPAC_PCROSS);
	}
	else if (ld->special == LNSPEC_Teleport)
	{
		//	Teleport hack
		P_ActivateLine(ld, self, side, SPAC_MCROSS);
	}
}

//==========================================================================
//
//  Thrust
//
//==========================================================================

void Thrust(float angle, float move)
{
	Velocity.x += move * cos(angle) * 35.0;
	Velocity.y += move * sin(angle) * 35.0;
}

//==========================================================================
//
//  FaceActor
//
//  Returns 1 if 'source' needs to turn clockwise, or 0 if 'source' needs
// to turn counter clockwise.  'delta' is set to the amount 'source'
// needs to turn.
//
//==========================================================================

int FaceActor(Actor target, float *delta)
{
	float diff;
	float angle1;
	float angle2;

	angle1 = Angles.yaw;
	angle2 = atan2(target.Origin.y - Origin.y, target.Origin.x - Origin.x);
	if (angle2 > angle1)
	{
		diff = AngleMod360(angle2 - angle1);
		if (diff > 180.0)
		{
			*delta = 360.0 - diff;
			return 0;
		}
		else
		{
			*delta = diff;
			return 1;
		}
	}
	else
	{
		diff = AngleMod360(angle1 - angle2);
		if (diff > 180.0)
		{
			*delta = 360.0 - diff;
			return 1;
		}
		else
		{
			*delta = diff;
			return 0;
		}
	}
}

//**************************************************************************
//
//  OBJECT MOVEMENT
//
//**************************************************************************

//==========================================================================
//
//  XYMovement
//
//==========================================================================

void XYMovement(void)
{
	float ptryx;
	float ptryy;
	float xmove;
	float ymove;
	int special;

	if (bWindThrust)
	{
		special = Sector->special & SECSPEC_BASE_MASK;
		switch (special)
		{
		case SECSPEC_WindEastSlow:
		case SECSPEC_WindEastMedium:
		case SECSPEC_WindEastFast:
			Thrust(0.0, windTab[special - SECSPEC_WindEastSlow]);
			break;
		case SECSPEC_WindNorthSlow:
		case SECSPEC_WindNorthMedium:
		case SECSPEC_WindNorthFast:
			Thrust(90.0, windTab[special - SECSPEC_WindNorthSlow]);
			break;
		case SECSPEC_WindSouthSlow:
		case SECSPEC_WindSouthMedium:
		case SECSPEC_WindSouthFast:
			Thrust(270.0, windTab[special - SECSPEC_WindSouthSlow]);
			break;
		case SECSPEC_WindWestSlow:
		case SECSPEC_WindWestMedium:
		case SECSPEC_WindWestFast:
			Thrust(180.0, windTab[special - SECSPEC_WindWestSlow]);
			break;
		}
	}
	if (Velocity.x > MAXMOVE)
		Velocity.x = MAXMOVE;
	else if (Velocity.x < -MAXMOVE)
		Velocity.x = -MAXMOVE;

	if (Velocity.y > MAXMOVE)
		Velocity.y = MAXMOVE;
	else if (Velocity.y < -MAXMOVE)
		Velocity.y = -MAXMOVE;

	xmove = Velocity.x * frametime;
	ymove = Velocity.y * frametime;

	do
	{
		if (xmove > MAXMOVE / (35.0 * 2.0) || ymove > MAXMOVE / (35.0 * 2.0))
		{
			ptryx = Origin.x + xmove / 2.0;
			ptryy = Origin.y + ymove / 2.0;
			xmove /= 2.0;
			ymove /= 2.0;
		}
		else
		{
			ptryx = Origin.x + xmove;
			ptryy = Origin.y + ymove;
			xmove = 0.0;
			ymove = 0.0;
		}

		if (!TryMove(vector(ptryx, ptryy, Origin.z)))
		{
			// blocked move
			if (bIsPlayer)
			{
				// try to slide along it
				SlideMove();
			}
			else if (bMissile)
			{
				if (bBounce)
				{
					//  Bounce against walls and non-killable ofjects
					if (tmtrace->BlockingMobj)
					{
						if (!tmtrace->BlockingMobj.bIsPlayer &&
							!Actor(tmtrace->BlockingMobj).bCountKill)
						{
							float speed;
							float angle;

							angle = AngleMod360(
								atan2(Origin.y - tmtrace->BlockingMobj.Origin.y,
								Origin.x - tmtrace->BlockingMobj.Origin.x) +
								(Random() * 16.0 - 8.0));
							speed = Length(Velocity);
							speed = speed * 0.75;
							Angles.yaw = angle;
							Velocity.x = speed * cos(angle);
							Velocity.y = speed * sin(angle);
							if (PainSound)
							{
								PlaySound(PainSound, CHAN_VOICE);
							}
						}
						else
						{
							// Struck a player/creature
							ExplodeMissile();
						}
					}
					else
					{
						// Struck a wall
						BounceWall(BOUNCE_VAL);
						if (PainSound)
						{
							PlaySound(PainSound, CHAN_VOICE);
						}
					}
					return;
				}

				// explode a missile
				if (tmtrace->CeilingLine &&
					tmtrace->CeilingLine->backsector &&
					tmtrace->CeilingLine->backsector->ceiling.pic == skyflatnum)
				{
					// Hack to prevent missiles exploding
					// against the sky.
					// Does not handle sky floors.
					Remove();
					return;
				}
				ExplodeMissile();
			}
			else
			{
				Velocity.x = 0.0;
				Velocity.y = 0.0;
			}
		}
	}
	while (xmove || ymove);
}

//==========================================================================
//
//	ZMovement
//
//==========================================================================

void ZMovement(void)
{
	float dist;
	float delta;
	float vdot;

	// check for smooth step up
	if (bIsPlayer && Origin.z < FloorZ)
	{
		Player.ViewHeight -= FloorZ - Origin.z;
		Player.DeltaViewHeight = (VIEWHEIGHT - Player.ViewHeight) * 4.0;
	}

	// adjust height
	Origin.z += Velocity.z * frametime;

	if (bFloat && Enemy)
	{
		// float down towards enemy if too close
		if (!bSkullFly && !bInFloat)
		{
			dist = MobjDist2(self, Enemy);

			delta = Enemy.Origin.z + Height / 2.0 - Origin.z;

			if (delta < 0.0 && dist < -(delta * 3.0))
				Origin.z -= FLOATSPEED * frametime;
			else if (delta > 0.0 && dist < (delta * 3.0))
				Origin.z += FLOATSPEED * frametime;
		}
	}

	// clip movement
	if (Origin.z <= FloorZ + 0.1)
	{
		// hit the floor

		vdot = DotProduct(Velocity, Floor->normal);
		// Note (id):
		//  somebody left this after the setting momz to 0,
		//  kinda useless there.
		if (bSkullFly)
		{
			// the skull slammed into something
			Velocity.z = -Velocity.z;
		}

		if (vdot < -0.1)
		{
			if (bIsPlayer && (vdot < -GRAVITY * 0.25))
			{
				// Squat down.
				// Decrease ViewHeight for a moment
				// after hitting the ground (hard),
				// and utter appropriate sound.
				Player.DeltaViewHeight = vdot / 8.0;
				PlaySound('*land', CHAN_VOICE);
			}
		}
		Origin.z = FloorZ;

		if (bMissile)
		{
			if (bColideWithWorld && !bBounce)
			{
				ExplodeMissile();
				return;
			}
			if (bBounce && PainSound && Length(Velocity) > 256.0)
			{
				PlaySound(PainSound, CHAN_VOICE);
			}
		}
	}

	if (Origin.z + Height > CeilingZ)
	{
		// hit the ceiling
		vdot = DotProduct(Velocity, Ceiling->normal);
		if (vdot < 0.0)
			Velocity -= vdot * Ceiling->normal;

		Origin.z = CeilingZ - Height;

		if (bSkullFly)
		{
			// the skull slammed into something
			Velocity.z = -Velocity.z;
		}

		if (bMissile)
		{
			if (bColideWithWorld && !bBounce)
			{
				ExplodeMissile();
				return;
			}
			if (bBounce && PainSound && Length(Velocity) > 256.0)
			{
				PlaySound(PainSound, CHAN_VOICE);
			}
		}
	}
}

//==========================================================================
//
//  ApplyFriction
//
//==========================================================================

void ApplyFriction(void)
{
	float dot;

	if ((bMissile || bSkullFly) && !bBounce)
		return;	// no friction for missiles ever

	if (Origin.z > FloorZ && !bOnMobj && WaterLevel < 2)
		return;	// no friction when airborne

	//  Clip velocity
	if (Origin.z <= FloorZ)
	{
		dot = DotProduct(Velocity, Floor->normal);
		if (dot < 0.0)
		{
			if (bBounce)
			{
				dot *= BOUNCE_VAL;
			}
			Velocity -= dot * Floor->normal;
		}
	}

	if (bCorpse)
	{
		// do not stop sliding if halfway off a step with some momentum
		if (Velocity.x > 0.25 * 35.0 || Velocity.x < -0.25 * 35.0 ||
			Velocity.y > 0.25 * 35.0 || Velocity.y < -0.25 * 35.0)
		{
			if (FloorZ != GetPlanePointZ(&Sector->floor, Origin))
				return;
		}
	}

	if (Velocity.x > -STOPSPEED && Velocity.x < STOPSPEED &&
		Velocity.y > -STOPSPEED && Velocity.y < STOPSPEED &&
		Velocity.z > -STOPSPEED && Velocity.z < STOPSPEED &&
		(!bIsPlayer || (!Player.ForwardMove && !Player.SideMove)))
	{
		if (bIsPlayer)
		{
			// if in a walking frame, stop moving
			if (StateNum >= SeeState && StateNum <= SeeState + 3)
				SetState(IdleState);
		}
		Velocity = vector(0.0, 0.0, 0.0);
	}
	else
	{
		// slow down
		Velocity -= Velocity * (GetFriction() * frametime);
	}
}

//===========================================================================
//
//  GetFriction
//
//===========================================================================

float GetFriction()
{
	// slow down
	if (WaterLevel > 1)
	{
		return FRICTION_WATER;
	}
	if ((Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow)
	{
		return FRICTION_LOW;
	}
	if (Sector->special & SECSPEC_FRICTION_MASK)
	{
		return Sector->Friction;
	}
	return FRICTION;
}

//===========================================================================
//
//  PlayerLandedOnThing
//
//===========================================================================

void PlayerLandedOnThing()
{
	Player.DeltaViewHeight = Velocity.z / 8.0;
	if (Velocity.z < -GRAVITY * 0.375)
	{
		PlaySound('*land', CHAN_VOICE);
	}
}

//==========================================================================
//
//	Physics
//
//==========================================================================

bool Physics()
{
	Actor			onmo;
	SectorThinker	SecThink;
	float			scrollx;
	float			scrolly;
	float			height;
	float			waterheight;	// killough 4/4/98: add waterheight

	if (Sector->AffectorData && bColideWithWorld)
	{

		// killough 3/7/98: Carry things on floor
		// killough 3/20/98: use new sector list which reflects true members
		// killough 3/27/98: fix carrier bug
		// killough 4/4/98: Underwater, carry things even w/o gravity

		// Move objects only if on floor or underwater,
		// non-floating, and clipped.

		for (SecThink = SectorThinker(Sector->AffectorData); SecThink;
			SecThink = SecThink.NextAffector)
		{
			if (!Scroller(SecThink))
			{
				continue;
			}
			scrollx = Scroller(SecThink).CarryScrollX;
			scrolly = Scroller(SecThink).CarryScrollY;
			if (!scrollx && !scrolly)
			{
				continue;
			}
			if (bNoGravity && (!Sector->heightsec ||
				(Sector->heightsec->bIgnoreHeightSec)))
			{
				continue;
			}
			height = GetPlanePointZ(&Sector->floor, Origin);
			if (Origin.z > height)
			{
				if (!Sector->heightsec || (Sector->heightsec->bIgnoreHeightSec))
				{
					continue;
				}

				waterheight = GetPlanePointZ(&Sector->heightsec->floor, Origin);
				if (waterheight > height && Origin.z >= waterheight)
				{
					continue;
				}
			}

			Velocity.x += scrollx;
			Velocity.y += scrolly;
		}
	}

	CheckWater();
	UpdateVelocity();

	// momentum movement
	if (Velocity.x || Velocity.y)
	{
		XYMovement();
		if (IsDestroyed())
		{
			return false;	// mobj was removed
		}
	}
	else if (bSkullFly)
	{
		// the skull slammed into something
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		if (!SetState(IdleState))
		{
			return false;
		}
	}
	if ((Origin.z != FloorZ) || Velocity.z || tmtrace->BlockingMobj)
	{
		// Handle Z momentum and gravity
		if (!bNoPassMobj && !bMissile)
		{
			onmo = Actor(CheckOnmobj());
			if (!onmo)
			{
				ZMovement();
				if (bIsPlayer && bOnMobj)
				{
					bOnMobj = false;
				}
			}
			else if (bIsPlayer)
			{
				if (Velocity.z < -GRAVITY * 0.25 && !bFly)
				{
					PlayerLandedOnThing();
				}
				if (onmo.Origin.z + onmo.Height - Origin.z <= MaxStepHeight)
				{
					Player.ViewHeight -=
						onmo.Origin.z + onmo.Height - Origin.z;
					Player.DeltaViewHeight =
						(VIEWHEIGHT - Player.ViewHeight) * 4.0;
					Origin.z = onmo.Origin.z + onmo.Height;
					bOnMobj = true;
					Velocity.z = 0.0;
				}
				else
				{
					// hit the bottom of the blocking actor
					Velocity.z = 0.0;
				}
			}
		}
		else
		{
			ZMovement();
		}
		if (IsDestroyed())
		{
			return false;	// entity was removed
		}
	}
	return true;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
	//  In my deathmatch mode remove dropped weapons after 30 seconds
	// because otherwise they are spawned fastar than player(s) can pick 
	// them up and the game is going slower and slower and slower ...
	if (bDropped && (deathmatch == 3))
	{
		MoveCount++;
		if (MoveCount >= 30 * 35)
		{
			Remove();
			return;
		}
	}

	if (!Physics())
	{
		return;
	}

	// cycle through states,
	// calling action functions at transitions
	if (StateTime != -1.0)
	{
		StateTime -= deltaTime;

		// you can cycle through multiple states in a tic
		if (StateTime <= 0.0)
		{
			StateTime = 0.0;
			if (!SetState(NextState))
				return;	// freed itself
		}
	}
	else
	{
		// check for nightmare respawn
		if (!bCountKill)
			return;

		//  In my deathmatch mode monstars respawns very fast
		if (deathmatch == 3)
		{
			if (level->tictime & 31)
				return;

			if (P_Random() > 32)
				return;

			NightmareRespawn();
		}
		else
		{
			if (!respawnmonsters)
				return;

			MoveCount++;

			if (MoveCount < 12 * 35)
				return;

			if (level->tictime & 31)
				return;

			if (P_Random() > 4)
				return;

			NightmareRespawn();
		}
	}
}

//==========================================================================
//
//  HeightClip
//
//  Takes a valid thing and adjusts the thing->FloorZ, thing->CeilingZ, and
// possibly thing->z. This is called for all nearby monsters whenever a
// sector changes height. If the thing doesn't fit, the z will be set to the
// lowest value and false will be returned.
//
//==========================================================================

bool HeightClip()
{
	bool onfloor;

	onfloor = (Origin.z == FloorZ);

	CheckRelPosition(Origin);
	// what about stranding a monster partially off an edge?

	Floor = tmtrace->Floor;
	Ceiling = tmtrace->Ceiling;
	FloorZ = tmtrace->FloorZ;
	CeilingZ = tmtrace->CeilingZ;

	if (onfloor)
	{
		// walking monsters rise and fall with the floor
		Origin.z = FloorZ;
	}
	else
	{
		// don't adjust a floating monster unless forced to
		if (Origin.z + Height > CeilingZ)
			Origin.z = CeilingZ - Height;
	}

	if (CeilingZ - FloorZ < Height)
		return false;

	return true;
}

//==========================================================================
//
//	SectorChanged
//
//==========================================================================

bool SectorChanged(int CrushChange)
{
	Actor A;

	if (HeightClip())
	{
		return true;
	}

	//	Crunch bodies to giblets
	if (Health <= 0)
	{
#ifdef DDF
		SetState(GibState);
#else
		SetState(S_GIBS);
#endif
		bSolid;
		Height = 0.0;
		Radius = 0.0;
		return true;
	}

	//	Crunch dropped items
	if (bDropped)
	{
		Remove();
		return true;
	}

	if (!bShootable)
	{
		//	Assume it is bloody gibs or something
		return true;
	}

	if (CrushChange && !(level->tictime & 3))
	{
		Damage(none, none, CrushChange);

		//	Spray blood in a random direction
		A = Spawn(Blood, Origin + vector(0.0, 0.0, Height / 2.0));
		A.Velocity.x = (Random() - Random()) * 16.0 * 35.0;
		A.Velocity.y = (Random() - Random()) * 16.0 * 35.0;
	}
	return false;	//	Don't fit
}

//**************************************************************************
//
//  RADIUS ATTACK
//
//**************************************************************************

//==========================================================================
//
//  PIT_RadiusAttack
//
//  "bombsource" is the creature that caused the explosion at "bombspot".
//
//==========================================================================

bool PIT_RadiusAttack(Entity Other)
{
	float dist;

	if (!Actor(Other).bShootable)
		return true;

	// Boss spider and cyborg
	// take no damage from concussion.
	if (Actor(Other).bBoss)
		return true;

	dist = Length(MobjCenter(Other) - MobjCenter(self)) - Other.Radius;

	if (dist < 0.0)
		dist = 0.0;

	if (dist >= bombdamage)
		return true;	// out of range

	if (Actor(Other).CanSee(self))
	{
		// must be in direct path
		Actor(Other).Damage(self, Instigator, ftoi(bombdamage - dist));
	}

	return true;
}

//==========================================================================
//
//  RadiusAttack
//
//  Source is the creature that caused the explosion at spot.
//
//==========================================================================

void RadiusAttack(int damage, int distance, bool damageSource)
{
	int x;
	int y;

	int xl;
	int xh;
	int yl;
	int yh;

	float dist;

	dist = itof(damage);
	yh = MapBlock(Origin.y + dist - XLevel.BlockMapOrgY);
	yl = MapBlock(Origin.y - dist - XLevel.BlockMapOrgY);
	xh = MapBlock(Origin.x + dist - XLevel.BlockMapOrgX);
	xl = MapBlock(Origin.x - dist - XLevel.BlockMapOrgX);
	bombdamage = itof(damage);

	for (y = yl; y <= yh; y++)
		for (x = xl; x <= xh; x++)
			P_BlockThingsIterator(x, y, self, 'PIT_RadiusAttack');
}

float teleport_x;
float teleport_y;

//==========================================================================
//
//  PIT_StompThing
//
//==========================================================================

bool PIT_StompThing(Entity Other)
{
	float blockdist;

	if (!Actor(Other).bShootable)
		return true;

	blockdist = Other.Radius + Radius;

	if (fabs(Other.Origin.x - teleport_x) >= blockdist ||
		fabs(Other.Origin.y - teleport_y) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (Other == self)
		return true;

	if (!bTelestomp)
	{
		return false;
	}

	Actor(Other).Damage(self, self, 10000);

	return true;
}

//==========================================================================
//
//  TeleportMove
//
//==========================================================================

bool TeleportMove(TVec org)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;

	// kill anything occupying the position
	teleport_x = org.x;
	teleport_y = org.y;

	// stomp on any things contacted
	xl = MapBlock(org.x - Radius - XLevel.BlockMapOrgX - MAXRADIUS);
	xh = MapBlock(org.x + Radius - XLevel.BlockMapOrgX + MAXRADIUS);
	yl = MapBlock(org.y - Radius - XLevel.BlockMapOrgY - MAXRADIUS);
	yh = MapBlock(org.y + Radius - XLevel.BlockMapOrgY + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockThingsIterator(bx, by, self, 'PIT_StompThing'))
				return false;

	// the move is ok,
	// so link the thing into its new position
	UnlinkFromWorld();
	Origin = org;
	LinkToWorld();
	if (org.z == ONFLOORZ)
	{
		Origin.z = FloorZ;
	}

	return true;
}

//==========================================================================
//
//  Teleport
//
//==========================================================================

int Teleport(TVec Dst, float angle, bool DstFog, bool SrcFog, bool KeepDir)
{
	TVec oldOrg;
	Actor fog;

	oldOrg = Origin;

	if (!TeleportMove(Dst))
		return 0;

	if (bIsPlayer)
		Player.ViewOrg.z = Origin.z + Player.ViewHeight;

	if (SrcFog)
	{
		// spawn teleport fog at source and destination
		fog = Spawn(TeleportFog, oldOrg);
#ifdef DDF
		fog.SetState(fog.SeeState);
#else
		fog.PlaySound('misc/teleport', CHAN_VOICE);
#endif
	}

	if (DstFog)
	{
		fog = Spawn(TeleportFog, Origin + vector(20.0 * cos(angle),
			20.0 * sin(angle), 0.0));
#ifdef DDF
		fog.SetState(fog.SeeState);
#else
		fog.PlaySound('misc/teleport', CHAN_VOICE);
#endif
	}

	if (!KeepDir)
	{
		// don't move for a bit
		if (bIsPlayer)
		{
			ReactionTime = 0.5;
			Player.bFixAngle = true;
		}

		Angles.yaw = angle;
		Velocity = vector(0.0, 0.0, 0.0);
	}
	return 1;
}

//==========================================================================
//
//  CheckMeleeRange
//
//==========================================================================

bool CheckMeleeRange()
{
	float dist;

	if (!Enemy)
	{
		return false;
	}

	dist = MobjDist(Enemy, self);

	if (dist >= MELEERANGE - 20.0 + Enemy.Radius)
	{
		return false;
	}

	if (!CanSee(Enemy))
	{
		return false;
	}

	return true;
}

//==========================================================================
//
//  CheckMissileRange
//
//==========================================================================

bool CheckMissileRange()
{
	float dist;

	if (!CanSee(Enemy))
	{
		return false;
	}

	if (bJustHit)
	{
		// the target just hit the enemy,
		// so fight back!
		bJustHit = false;
		return true;
	}

	if (ReactionCount)
	{
		return false;	// do not attack yet
	}

	// OPTIMIZE: get this from a global checksight
	dist = MobjDist(self, Enemy) - 64.0;

	if (!MeleeState)
		dist -= 128.0;	// no melee attack, so fire more

	if (MissileMaxRange && dist > MissileMaxRange)
	{
		return false;	// too far away
	}

	if (MissileMinRange && dist < MissileMinRange)
	{
		return false;	// close for fist attack
	}

	if (bTriggerHappy)
	{
		dist /= 2.0;
	}

	if (dist > MissileChance)
		dist = MissileChance;

	if (Random() * 256.0 < dist)
		return false;

	return true;
}

//==========================================================================
//
//  FindOther
//
//==========================================================================

bool FindOther()
{
	Actor Other;

	FOREACH(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other mobj of the same Class not dead
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  LookForMonsters
//
//==========================================================================

bool LookForMonsters(bool allaround)
{
	Actor mo;
	float an;
	float dist;

	FOREACH(Actor, mo)
	{
		if (mo.Health <= 0)
			continue;	// dead

		if (mo == self)
			continue;

		if (!mo.bIsPlayer && !mo.bMonster)
			continue;

		if (!CanSee(mo))
			continue;	// out of sight

		if (P_Random() > 128)
			continue;

		if (!allaround)
		{
			an = AngleMod360(atan2(mo.Origin.y - Origin.y,
				mo.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				dist = MobjDist(mo, self);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		Enemy = mo;
		return true;
	}
	return false;
}

//==========================================================================
//
//  LookForMonsters2
//
//==========================================================================

bool LookForMonsters2(bool allaround)
{
	Actor mo;
	float an;
	float dist;

	if (!svvars->Players[0].MO.CanSee(self))
	{
		return false;	//  Not seen by player
	}

	FOREACH(Actor, mo)
	{
		if (mo.Health <= 0)
			continue;	// dead

		if (mo == self)
			continue;	// self

		if (!mo.bMonster)
			continue;	// not a monster

		if (!CanSee(mo))
			continue;	// out of sight

		if (P_Random() > 128)
			continue;	// sometimes skip

		if (!allaround)
		{
			an = AngleMod360(atan2(mo.Origin.y - Origin.y,
				mo.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				dist = MobjDist(mo, self);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		Enemy = mo;
		return true;
	}
	return false;
}

//==========================================================================
//
//  LookForPlayers
//
//  If allaround is false, only look 180 degrees in front.
//  Returns true if a player is targeted.
//
//==========================================================================

bool LookForPlayers(bool allaround)
{
	int c;
	int stop;
	Player P;
	float an;
	float dist;

	if (deathmatch == 3)
	{
		return LookForMonsters(allaround);
	}

	if (!netgame && svvars->Players[0] && svvars->Players[0].bSpawned && svvars->Players[0].Health <= 0)
	{
		return LookForMonsters2(allaround);
	}

	c = 0;
	stop = (LastLook - 1) & (MAXPLAYERS - 1);

	for (;; LastLook = (LastLook + 1) & (MAXPLAYERS - 1))
	{
		if (LastLook == stop)
		{
			// done looking
			return false;
		}

		P = svvars->Players[LastLook];

		if (!P)
			continue;

		if (c++ == 2)
		{
			// done looking
			return false;
		}

		if (!P.bSpawned || !P.MO)
			continue;	//  not spawned yet

		if (P.Health <= 0)
			continue;	// dead

		if (!CanSee(P.MO))
			continue;	//  out of sight

		if (!allaround)
		{
			an = AngleMod360(atan2(P.MO.Origin.y - Origin.y,
				P.MO.Origin.x - Origin.x) - Angles.yaw);

			if (an > 90.0 && an < 270.0)
			{
				dist = MobjDist(P.MO, self);
				// if real close, react anyway
				if (dist > MELEERANGE)
					continue;	// behind back
			}
		}

		Enemy = P.MO;
		return true;
	}

	return false;
}

//==========================================================================
//
//  StepMove
//
//  Move in the current direction, returns false if the move is blocked.
//
//==========================================================================

bool StepMove()
{
	float tryx;
	float tryy;

	line_t *ld;
	bool good;

	if (MoveDir == DI_NODIR)
		return false;

#ifdef RANGECHECK
	if (MoveDir >= 8 || MoveDir < 0)
		Error("Weird MoveDir!");
#endif

	tryx = Origin.x + StepSpeed * xspeed[MoveDir];
	tryy = Origin.y + StepSpeed * yspeed[MoveDir];

	if (!TryMove(vector(tryx, tryy, Origin.z)))
	{
		// open any specials
		if (bFloat && tmtrace->bFloatOk)
		{
			// must adjust height
			if (Origin.z < tmtrace->FloorZ)
				Origin.z += FLOATSPEED * frametime;
			else
				Origin.z -= FLOATSPEED * frametime;

			bInFloat = true;
			return true;
		}

		if (!tmtrace->NumSpecHit)
			return false;

		MoveDir = DI_NODIR;
		good = false;
		while (tmtrace->NumSpecHit--)
		{
			ld = tmtrace->SpecHit[tmtrace->NumSpecHit];
			// if the special is not a door
			// that can be opened,
			// return false
			if (P_ActivateLine(ld, self, 0, SPAC_USE))
			{
				good = true;
			}
		}
		return good;
	}
	else
	{
		bInFloat = false;
	}

	if (!bFloat)
	{
		Origin.z = FloorZ;
	}
	return true;
}

//==========================================================================
//
//  TryWalk
//
//  Attempts to move actor on in its current (ob->moveangle) direction.
// If blocked by either a wall or an actor returns FALSE
// If move is either clear or blocked only by a door, returns TRUE and sets...
// If a door is in the way, an OpenDoor call is made to start it opening.
//
//==========================================================================

bool TryWalk()
{
	if (!StepMove())
	{
		return false;
	}

	MoveCount = P_Random() & 15;
	return true;
}

//==========================================================================
//
//  NewChaseDir
//
//==========================================================================

void NewChaseDir()
{
	float deltax;
	float deltay;

	int d[3];

	int tdir;
	int olddir;

	int turnaround;

	if (!Enemy)
	{
		Error("P_NewChaseDir: called with no target");
	}

	olddir = MoveDir;
	turnaround = opposite[olddir];

	deltax = Enemy.Origin.x - Origin.x;
	deltay = Enemy.Origin.y - Origin.y;

	if (deltax > 10.0)
		d[1] = DI_EAST;
	else if (deltax < -10.0)
		d[1] = DI_WEST;
	else
		d[1] = DI_NODIR;

	if (deltay < -10.0)
		d[2] = DI_SOUTH;
	else if (deltay > 10.0)
		d[2] = DI_NORTH;
	else
		d[2] = DI_NODIR;

	// try direct route
	if (d[1] != DI_NODIR && d[2] != DI_NODIR)
	{
		MoveDir = diags[((deltay < 0.0) << 1) + (deltax > 0.0)];
		if (MoveDir != turnaround && TryWalk())
			return;
	}

	// try other directions
	if (P_Random() > 200 || fabs(deltay) > fabs(deltax))
	{
		tdir = d[1];
		d[1] = d[2];
		d[2] = tdir;
	}

	if (d[1] == turnaround)
		d[1] = DI_NODIR;
	if (d[2] == turnaround)
		d[2] = DI_NODIR;

	if (d[1] != DI_NODIR)
	{
		MoveDir = d[1];
		if (TryWalk())
		{
			// either moved forward or attacked
			return;
		}
	}

	if (d[2] != DI_NODIR)
	{
		MoveDir = d[2];

		if (TryWalk())
			return;
	}

	// there is no direct path to the player,
	// so pick another direction.
	if (olddir != DI_NODIR)
	{
		MoveDir = olddir;

		if (TryWalk())
			return;
	}

	// randomly determine direction of search
	if (P_Random() & 1)
	{
		for (tdir = DI_EAST; tdir <= DI_SOUTHEAST; tdir++)
		{
			if (tdir != turnaround)
			{
				MoveDir = tdir;

				if (TryWalk())
					return;
			}
		}
	}
	else
	{
		for (tdir = DI_SOUTHEAST; tdir != (DI_EAST - 1); tdir--)
		{
			if (tdir != turnaround)
			{
				MoveDir = tdir;

				if (TryWalk())
					return;
			}
		}
	}

	if (turnaround != DI_NODIR)
	{
		MoveDir = turnaround;
		if (TryWalk())
			return;
	}

	MoveDir = DI_NODIR;	// can not move
}

//**************************************************************************
//
//  AIMING
//
//**************************************************************************

//==========================================================================
//
//  PTR_AimTraverse
//
//  Sets linetaget and aim_slope when a target is aimed at.
//
//==========================================================================

bool PTR_AimTraverse(intercept_t * in)
{
	line_t *li;
	Actor Th;
	float thingtopslope;
	float thingbottomslope;
	float dist;
	float slope;
	opening_t *open;

	if (in->bIsALine)
	{
		TVec hit_point;

		li = in->line;

		if (!(li->flags & ML_TWOSIDED))
			return false;	// stop

		// Crosses a two sided line.
		// A two sided line will restrict
		// the possible target ranges.
		dist = aim_range * in->frac;
		hit_point = Origin + dist * aim_dir;
		open = LineOpenings(li, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z);

		if (!open || open->bottom >= open->top)
			return false;	// stop

		dist = aim_range2d * in->frac;
		if (li->frontsector->floorheight != li->backsector->floorheight)
		{
			slope = (open->bottom - aim_z) / dist;
			if (slope > aim_bottomslope)
				aim_bottomslope = slope;
		}

		if (li->frontsector->ceilingheight != li->backsector->ceilingheight)
		{
			slope = (open->top - aim_z) / dist;
			if (slope < aim_topslope)
				aim_topslope = slope;
		}

		if (aim_topslope <= aim_bottomslope)
			return false;	// stop

		return true;	// shot continues
	}

	// shoot a thing
	Th = Actor(in->Thing);
	if (Th == self)
		return true;	// can't shoot self

	if (!Th.bShootable)
		return true;	// corpse or something

#ifdef FIXME
	//  Hexen does this. There's no reason why we can't enable it in Doom.
	if (Th.player && netgame && !deathmatch)
	{
		// don't aim at fellow co-op players
		return true;
	}
#endif

	// check angles to see if the thing can be aimed at
	dist = aim_range2d * in->frac;
	thingtopslope = (Th.Origin.z + Th.Height - aim_z) / dist;

	if (thingtopslope < aim_bottomslope)
		return true;	// shot over the thing

	thingbottomslope = (Th.Origin.z - aim_z) / dist;

	if (thingbottomslope > aim_topslope)
		return true;	// shot under the thing

	// this thing can be hit!
	if (thingtopslope > aim_topslope)
		thingtopslope = aim_topslope;

	if (thingbottomslope < aim_bottomslope)
		thingbottomslope = aim_bottomslope;

	aim_slope = (thingtopslope + thingbottomslope) / 2.0;
	linetarget = Th;

	return false;	// don't go any farther
}

//==========================================================================
//
//  AimLineAttack
//
//==========================================================================

TVec AimLineAttack(TAVec angles, float distance)
{
	float x2;
	float y2;
	float topangle;
	float botangle;
	TVec dir;

	AngleVector(&angles, &aim_dir);
	x2 = Origin.x + distance * aim_dir.x;
	y2 = Origin.y + distance * aim_dir.y;
	aim_z = Origin.z + Height / 2.0 + 8.0 - FloorClip;
	aim_range2d =
		Length(vector(distance * aim_dir.x, distance * aim_dir.y, 0.0));

	// can't shoot outside view angles
	topangle = AngleMod180(-angles.pitch + 30.0);
	botangle = AngleMod180(-angles.pitch - 30.0);
	if (topangle > 89.0)
		topangle = 89.0;
	if (botangle < -89.0)
		botangle = -89.0;
	aim_topslope = tan(topangle);
	aim_bottomslope = tan(botangle);

	aim_range = distance;
	linetarget = none;

	P_PathTraverse(Origin.x, Origin.y, x2, y2,
		PT_ADDLINES | PT_ADDTHINGS, self, 'PTR_AimTraverse');

	if (linetarget)
	{
		angles.pitch = -atan(aim_slope);
	}
	AngleVector(&angles, &dir);
	return dir;
}

//===========================================================================
//
//	Aim
//
//  Sets a slope so a near miss is at aproximately the height of the
// intended target
//
//===========================================================================

TVec Aim(float distance)
{
	TAVec an;
	TVec dir;

	// see which target is to be aimed at
	an = Angles;

	dir = AimLineAttack(an, distance);
	if (!linetarget)
	{
		an.yaw = AngleMod360(an.yaw + 45.0 / 8.0);
		dir = AimLineAttack(an, distance);
		if (!linetarget)
		{
			an.yaw = AngleMod360(an.yaw - 45.0 / 4.0);
			dir = AimLineAttack(an, distance);
			if (!linetarget)
			{
				an.yaw = AngleMod360(an.yaw + 45.0 / 8.0);
				AngleVector(&an, &dir);
			}
		}
	}
	return dir;
}

//**************************************************************************
//
//  SHOOTING
//
//**************************************************************************

//==========================================================================
//
//  ShootHitPlane
//
//==========================================================================

bool ShootHitPlane(sec_plane_t * plane)
{
	float org_dist;
	float hit_dist;

	if (plane->flags & SPF_NOBLOCKSHOOT)
	{
		//  Doesn't block shooting
		return true;
	}
	org_dist = DotProduct(linestart, plane->normal) - plane->dist;
	if (org_dist < 0.0)
	{
		//  Don't shoot back side
		return true;
	}
	hit_dist = DotProduct(lineend, plane->normal) - plane->dist;
	if (hit_dist >= 0.0)
	{
		//  Didn't hit plane
		return true;
	}

	//  Hit plane
	if (plane->pic == skyflatnum)
	{
		// don't shoot the sky!
		return false;
	}

	//  If we are shooting floor or ceiling we are adjusting position
	// to spawn puff on floor or ceiling, not on wall
	lineend -= (lineend - linestart) * hit_dist / (hit_dist - org_dist);

	// position a bit closer
	lineend += 4.0 * plane->normal;

	// Spawn bullet puffs.
	SpawnPuff(lineend, shoot_range);

	// don't go any farther
	return false;
}

//==========================================================================
//
//  ShootCheckPlanes
//
//==========================================================================

bool ShootCheckPlanes(sector_t * sec)
{
	sec_region_t *reg;
	sec_region_t *startreg;

	startreg = PointInRegion(sec, linestart);
	for (reg = startreg; reg; reg = reg->next)
	{
		if (!ShootHitPlane(reg->floor))
		{
			//  Hit floor
			return false;
		}
		if (!ShootHitPlane(reg->ceiling))
		{
			//  Hit ceiling
			return false;
		}
	}
	for (reg = startreg->prev; reg; reg = reg->prev)
	{
		if (!ShootHitPlane(reg->floor))
		{
			//  Hit floor
			return false;
		}
		if (!ShootHitPlane(reg->ceiling))
		{
			//  Hit ceiling
			return false;
		}
	}
	return true;
}

//==========================================================================
//
//  PTR_ShootTraverse
//
//==========================================================================

bool PTR_ShootTraverse(intercept_t * in)
{
	TVec hit_point;
	line_t *li;
	Actor th;

	if (in->bIsALine)
	{
		sector_t *sec;

		li = in->line;
		hit_point = shoot_origin + (shoot_range * in->frac) * shoot_dir;
		if (li->flags & ML_TWOSIDED && PointOnPlaneSide(shoot_origin, li))
		{
			sec = li->backsector;
		}
		else
		{
			sec = li->frontsector;
		}

		lineend = hit_point;

		//  Check for shooting floor or ceiling
		if (!ShootCheckPlanes(sec))
		{
			return false;
		}

		linestart = lineend;

		//  Execute line special after checking for hitting floor or ceiling
		// when we know that it actally hits line
		if (li->special)
		{
			P_ActivateLine(li, self, 0, SPAC_IMPACT);
		}

		if (li->flags & ML_TWOSIDED)
		{
			// crosses a two sided line
			opening_t *open;
			float opentop = 0.0;

			open = LineOpenings(li, hit_point);
			if (open)
			{
				opentop = open->top;
			}
			while (open)
			{
				if (open->bottom <= hit_point.z && open->top >= hit_point.z)
				{
					// shot continues
					return true;
				}
				open = open->next;
			}
			if (li->frontsector->ceiling.pic == skyflatnum &&
				li->backsector->ceiling.pic == skyflatnum &&
				hit_point.z > opentop)
			{
				// it's a sky hack wall
				return false;
			}
		}

		//  Hit line

		// position a bit closer
		hit_point -= 4.0 * shoot_dir;

		// Spawn bullet puffs.
		SpawnPuff(hit_point, shoot_range);

		// don't go any farther
		return false;
	}

	// shoot a thing
	th = Actor(in->Thing);

	if (th == self)
		return true;	// can't shoot self

	if (!th.bShootable)
		return true;	// corpse or something

	// check angles to see if the thing can be aimed at
	hit_point = shoot_origin + (shoot_range * in->frac) * shoot_dir;

	if (th.Origin.z + th.Height < hit_point.z)
		return true;	// shot over the thing

	if (th.Origin.z > hit_point.z)
		return true;	// shot under the thing

	// hit thing
	// position a bit closer
	hit_point -= 10.0 * shoot_dir;

	// Spawn bullet puffs or blod spots,
	// depending on target type.
	if (th.bNoBlood)
		SpawnPuff(hit_point, shoot_range);
	else
		P_SpawnBlood(hit_point, la_damage);

	if (la_damage)
		th.Damage(self, self, la_damage);

	// don't go any farther
	return false;
}

//==========================================================================
//
//  P_LineAttack
//
//  If damage == 0, it is just a test trace that will leave linetarget set.
//
//==========================================================================

int LineAttack(TVec dir, float distance, int damage)
{
	TVec dst;

	la_damage = damage;

	shoot_origin = Origin;
	shoot_origin.z += Height * 0.5 + 8.0 - FloorClip;

	shoot_dir = dir;
	shoot_range = distance;

	dst = shoot_origin + shoot_range * shoot_dir;
	linestart = shoot_origin;
	if (!P_PathTraverse(Origin.x, Origin.y, dst.x, dst.y,
		PT_ADDLINES | PT_ADDTHINGS, self, 'PTR_ShootTraverse'))
	{
		return false;
	}
	lineend = dst;
	return ShootCheckPlanes(GLevel.PointInSector(dst));
}

//==========================================================================
//
//	A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

void A_Look()
{
	Actor targ;

	Threshold = 0;	// any shot will wake up
	targ = Actor(Sector->SoundTarget);

	if (targ && targ.bShootable)
	{
		Enemy = targ;

		if (bAmbush)
		{
			if (!CanSee(Enemy))
			{
				if (!LookForPlayers(false))
					return;
			}
		}
	}
	else
	{
		if (!LookForPlayers(false))
			return;
	}

	// go into chase state
	if (SightSound)
	{
		if (bBoss)
		{
			// Full volume
			PlayFullVolumeSound(SightSound, CHAN_VOICE);
		}
		else
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
	}

#ifdef DDF
	if (SeeState)
#endif
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//	A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void A_Chase()
{
	float delta;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	// modify target threshold
	if (Threshold)
	{
		if (!Enemy || Enemy.Health <= 0)
		{
			Threshold = 0;
		}
		else
		{
			Threshold--;
		}
	}

/*	if (fastparm)
	{ // Monsters move faster in nightmare mode
		actor->tics -= actor->tics / 2;
		if (actor->tics < 3)
		{
			actor->tics = 3;
		}
	}
*/
	// turn towards movement direction if not there yet
	if (MoveDir < 8)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;

		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);

		if (delta > 0.0)
		{
			Angles.yaw -= 45.0;
		}
		else if (delta < 0.0)
		{
			Angles.yaw += 45.0;
		}
	}

	if (!Enemy || !Enemy.bShootable)
	{
		// look for a new target
		if (LookForPlayers(true))
		{
			return;	// got a new target
		}
		SetState(IdleState);
		return;
	}

	// do not attack twice in a row
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (!fastparm)
		{
			NewChaseDir();
		}
		return;
	}

	// check for melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// check for missile attack
	if (MissileState)
	{
		if (fastparm || !MoveCount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				bJustAttacked = true;
				return;
			}
		}
	}

	// possibly choose another target
	if (netgame && !Threshold)
	{
		if (!CanSee(Enemy))
		{
			if (LookForPlayers(true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--MoveCount < 0 || !StepMove())
	{
		NewChaseDir();
	}

	// make active sound
	if (ActiveSound && P_Random() < 3)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	A_FaceTarget
//
//==========================================================================

void A_FaceTarget()
{
	if (!Enemy)
		return;

	bAmbush = false;

	Angles.yaw = atan2(Enemy.Origin.y - Origin.y, Enemy.Origin.x - Origin.x);

	if (Enemy.Translucency)
	{
		Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//  A_Pain
//
//==========================================================================

void A_Pain(void)
{
	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	if (PainSound)
	{
		PlaySound(PainSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_Explode
//
//  Rocket and barrel explosion.
//
//==========================================================================

void A_Explode()
{
	Translucency = 50;
	RadiusAttack(128, 0, 0);

	//  Spawn explosion effects - dynamic light and particles
	MSG_Select(MSG_SV_DATAGRAM);
	MSG_WriteByte(svc_explosion);
	MSG_WriteShort(ftoi(Origin.x));
	MSG_WriteShort(ftoi(Origin.y));
	MSG_WriteShort(ftoi(Origin.z + Height * 0.5));

	//  Clear old dynamic light effect
	Effects &= ~EF_DLIGHT_MASK;
}

//==========================================================================
//
//	A_Scream
//
//  Death sound.
//
//==========================================================================

void A_Scream()
{
	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	if (DeathSound)
	{
		// Check for bosses.
		if (bBoss)
		{
			// full volume
			PlayFullVolumeSound(DeathSound, CHAN_VOICE);
		}
		else
		{
			PlaySound(DeathSound, CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//	A_XScream
//
//  Explode death sound.
//
//==========================================================================

void A_XScream()
{
	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	if (bIsPlayer)
	{
		PlaySound('*gibbed', CHAN_BODY);
	}
	else
	{
		PlaySound('misc/gibbed', CHAN_BODY);
	}
}

//==========================================================================
//
//	A_Fall
//
//  Unset blocking.
//
//==========================================================================

void A_Fall()
{
	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	// actor is on ground, it can be walked over
	bSolid = false;

	// So change this if corpse objects
	// are meant to be obstacles.
}

//==========================================================================
//
//  A_PlayerScream
//
//  Player death sound
//
//==========================================================================

void A_PlayerScream()
{
	// Default death sound.
	name sound = '*death';

#ifdef DOOM2
	if (Health < -50)
	{
		// IF THE PLAYER DIES
		// LESS THAN -50% WITHOUT GIBBING
		sound = '*xdeath';
	}
#endif

	PlaySound(sound, CHAN_VOICE);
}

//==========================================================================
//
//  PIT_VileCheck
//
//  Detect a corpse that could be raised.
//
//==========================================================================

bool PIT_VileCheck(Entity Other)
{
	float maxdist;
	bool check;

	if (!Actor(Other).bCorpse)
		return true;	// not a monster

	if (Actor(Other).StateTime != -1.0)
		return true;	// not lying still yet

	if (Actor(Other).RaiseState == S_NULL)
		return true;	// monster doesn't have a raise state

	maxdist = Other.Radius + Radius;

	if (fabs(Other.Origin.x - viletryx) > maxdist ||
		fabs(Other.Origin.y - viletryy) > maxdist)
		return true;	// not actually touching

	if (!CanSee(Other))
		return true;	//  Con't see, possibly in other region

	CorpseHit = Actor(Other);
	CorpseHit.Velocity.x = 0.0;
	CorpseHit.Velocity.y = 0.0;
	CorpseHit.Height *= 4.0;
	check = CorpseHit.CheckPosition(CorpseHit.Origin);
	CorpseHit.Height /= 4.0;

	if (!check)
		return true;	// doesn't fit here

	return false;	// got one, so stop checking
}

#ifdef DDF

#define DAMAGE_COMPUTE(var, dam)  \
	{  \
		(var) = dam;  \
		if (dam##Error > 0)  \
			(var) += dam##Error * (P_Random() - P_Random()) / 255;  \
		else if (dam##Max > 0)  \
			(var) += (dam##Max - dam) * P_Random() / 255;  \
		if ((var) < 0) (var) = 0;  \
	}

//==========================================================================
//
//	ObjectSpawning
//
//	An Object spawns another object and is spawned in the state specificed
// by attack->objinitstate. The procedure is based on the A_PainShootSkull
// which is the routine for shooting skulls from a pain elemental. In
// this the object being created is decided in the attack. This
// procedure also used the new blocking line check to see if
// the object is spawned across a blocking line, if so the procedure
// terminates.
//
//==========================================================================

void ObjectSpawning(AttackType *attack, float angle)
{
	float spawnx;
	float spawny;
	float spawnz;
	//float slope;
	float prestep;
	Actor newobject;

	// -AJA- 1999/09/10: apply the angle offset of the attack.
	angle -= attack->AngleOffset;
	angle = AngleMod360(angle);
	//slope = object->vertangle + attack->slope_offset;
  
	newobject = Spawn(attack->SpawnedObj, Origin);

	if (attack->bPrestepSpawn)
	{
		prestep = 4.0 + 1.5 * Radius + newobject.Radius;
		spawnx = Origin.x + prestep * cos(angle);
		spawny = Origin.y + prestep * sin(angle);
	}
	else
	{
		spawnx = Origin.x;
		spawny = Origin.y;
	}
	spawnz = Origin.z + attack->Height;
	newobject.SetOrigin2(vector(spawnx, spawny, spawnz));

	if (attack->Sound)
		PlaySound(attack->Sound, CHAN_VOICE);

	// If the object cannot move from its position, remove it or kill it.
	if (!newobject.TryMove(newobject.Origin))
	{
		if (attack->bKillFailedSpawn)
			newobject.Died(self);
		else
			newobject.Remove();
		return;
	}

	newobject.Enemy = Enemy;

	// -AJA- 1999/09/25: Set the initial direction & momentum when
	//       the ANGLED_SPAWN attack special is used.
	if (attack->bAngledSpawn)
	{
		newobject.bSkullFly = true;
		newobject.A_FaceTarget();
		newobject.Velocity = Normalise(MobjCenter(newobject.Enemy) -
			newobject.Origin) * attack->AssaultSpeed;
	}

	newobject.SetState(FindState(attack->ObjInitState));
}

//==========================================================================
//
//	DoAttack
//
//	When an object goes on the attack, it current attack is handled here;
// the attack type is discerned and the assault is launched.
//
//==========================================================================

void DoAttack(AttackType *attack)
{
	int i;
	int damage;
	Actor proj;
	TVec aimDir;
	TVec dir;
	TAVec aimAng;

	switch (attack->AttackStyle)
	{
	case ATK_CloseCombat:
		if (CheckMeleeRange())
		{
			if (attack->Sound)
				PlaySound(attack->Sound, CHAN_WEAPON);
			DAMAGE_COMPUTE(damage, attack->Damage);
			Enemy.Damage(self, self, damage);
		}
		break;

	case ATK_Projectile:
		DAMAGE_COMPUTE(damage, attack->Damage);
		proj = SpawnMissile(Enemy, attack->AtkMobj);
		if (proj)
		{
			proj.MissileDamage = damage;
		}
		break;

	case ATK_SmartProjectile:	// EXTRA
		DAMAGE_COMPUTE(damage, attack->Damage);
		proj = SpawnMissile(Enemy, attack->AtkMobj);
		if (proj)
		{
			proj.MissileDamage = damage;
		}
		break;

	case ATK_RandomSpread:		// EXTRA
		//P_ActLaunchRandomSpread(object);
		break;

	case ATK_ShootToSpot:
		if (NumBrainTargets == 0)
		{
			LookForShootSpots();
		}
		BrainTargetOn += P_Random();
		BrainTargetOn %= NumBrainTargets;
		SpawnMissile(BrainTargets[BrainTargetOn], attack->AtkMobj);
		break;

	case ATK_Shot:
		aimDir = AimLineAttack(self, Angles, MISSILERANGE);
		if (attack->Sound)
			PlaySound(attack->Sound, CHAN_WEAPON);
		for (i = 0; i < attack->Count; i++)
		{
			dir = aimDir;
			VectorRotateAroundZ(&dir, (Random() - Random()) * attack->AccuracyAngle);
			DAMAGE_COMPUTE(damage, attack->Damage);
			LineAttack(self, dir, MISSILERANGE, damage);
		}
		break;

	case ATK_SkullFly:
		if (!Enemy)
		{
			return;
		}
		bSkullFly = true;
		if (attack->InitSound)
			PlaySound(attack->InitSound, CHAN_VOICE);
		Velocity = Normalise(MobjCenter(Enemy) - Origin) * attack->AssaultSpeed;
		break;

	case ATK_Spawner:
		ObjectSpawning(attack, Angles.yaw);
		break;

	case ATK_Spreader:
		DAMAGE_COMPUTE(damage, attack->Damage);
		if (SpreadCount < 0 || SpreadCount > 12)
			SpreadCount = 0;

		if (SpreadCount == 0)
		{
			Angles.yaw = AngleMod360(Angles.yaw + 90.0 / 8.0);
			proj = SpawnMissile(Enemy, attack->AtkMobj);
			if (proj)
			{
				proj.MissileDamage = damage;
			}
		}
		else if (SpreadCount == 4)
		{
			Angles.yaw = AngleMod360(Angles.yaw - 90.0 / 8.0);
			proj = SpawnMissile(Enemy, attack->AtkMobj);
			if (proj)
			{
				proj.MissileDamage = damage;
			}
		}
		else
		{
			proj = SpawnMissile(Enemy, attack->AtkMobj);
			if (proj)
			{
				proj.MissileDamage = damage;
				switch (SpreadCount)
				{
				case 2:
					proj.Angles.yaw = AngleMod360(proj.Angles.yaw + 90.0 / 8.0);
					VectorRotateAroundZ(&proj.Velocity, 90.0 / 8.0);
					break;
				case 6:
					proj.Angles.yaw = AngleMod360(proj.Angles.yaw - 90.0 / 4.0);
					VectorRotateAroundZ(&proj.Velocity, -90.0 / 4.0);
					break;
				case 8:
					proj.Angles.yaw = AngleMod360(proj.Angles.yaw - 90.0 / 16.0);
					VectorRotateAroundZ(&proj.Velocity, -90.0 / 16.0);
					break;
				case 10:
					proj.Angles.yaw = AngleMod360(proj.Angles.yaw + 90.0 / 16.0);
					VectorRotateAroundZ(&proj.Velocity, 90.0 / 16.0);
					break;
				}
			}
		}
		SpreadCount += 2;
		break;

	case ATK_Tracker:
		if (!Enemy)
			return;

		proj = Spawn(attack->AtkMobj, Enemy.Origin);

		Instigator = proj;//FIXME!!!!!!!
		proj.Instigator = self;
		proj.Enemy = Enemy;
		proj.P_ActTrackerFollow();
		break;

	case ATK_TripleSpawner:
		ObjectSpawning(attack, Angles.yaw + 90.0);
		ObjectSpawning(attack, Angles.yaw + 180.0);
		ObjectSpawning(attack, Angles.yaw + 270.0);
		break;

	case ATK_Spray:
		// offset angles from its attack angle
		for (i = 0; i < 40; i++)
		{
			aimAng = Angles;
			aimAng.yaw = AngleMod360(aimAng.yaw - 45.0 + 90.0 / 40.0 * itof(i));

			// target is the originator (player) of the missile
			AimLineAttack(Instigator, aimAng, attack->Range);
			if (!linetarget)
			{
				continue;
			}

			proj = Spawn(attack->AtkMobj, linetarget.Origin +
				vector(0.0, 0.0, linetarget.Height / 4.0));

		    DAMAGE_COMPUTE(damage, attack->Damage);
			linetarget.Damage(Instigator, Instigator, damage);
		}
		break;
	}
}

//==========================================================================
//
//	P_ActComboAttack
//
//	This is called at end of a set of states that can result in
// either a closecombat or ranged attack. The procedure checks
// to see if the target is within melee range and picks the
// approiate attack.
//
//==========================================================================

void P_ActComboAttack(void)
{
	AttackType *attack;

	if (!Enemy)
		return;

	if (CheckMeleeRange())
		attack = &CloseCombat;
	else
		attack = &RangeAttack;

	if (attack->bFaceTarget)
		A_FaceTarget();

	if (attack->bNeedSight)
	{
		if (!CanSee(Enemy))
			return;
	}
	CurrentAttack = attack;
    DoAttack(attack);
}

//==========================================================================
//
//	P_ActMeleeAttack
//
//	Setup a close combat assault
//
//==========================================================================

void P_ActMeleeAttack(AttackType *custom_attack)
{
	AttackType *attack;

	attack = &CloseCombat;

	// -AJA- 1999/08/10: Multiple attack support.
	if (custom_attack)
		attack = custom_attack;

	if (attack->bFaceTarget)
		A_FaceTarget();

	if (attack->bNeedSight)
	{
		if (!Enemy || !CanSee(Enemy))
			return;
	}
	CurrentAttack = attack;
	DoAttack(attack);
}

//==========================================================================
//
//	P_ActRangeAttack
//
//	Setup an attack at range
//
//==========================================================================

void P_ActRangeAttack(AttackType *custom_attack)
{
	AttackType *attack;

	attack = &RangeAttack;

	// -AJA- 1999/08/10: Multiple attack support.
	if (custom_attack)
		attack = custom_attack;

	if (attack->bFaceTarget)
		A_FaceTarget();

	if (attack->bNeedSight)
	{
		if (!Enemy || !CanSee(Enemy))
			return;
	}
	CurrentAttack = attack;
	DoAttack(attack);
}

//==========================================================================
//
//	P_ActSpareAttack
//
//	Setup an attack that is not defined as close or range. can be
// used to act as a follow attack for close or range, if you want one to
// add to the others.
//
//==========================================================================

void P_ActSpareAttack(AttackType *custom_attack)
{
	AttackType *attack;

	attack = &SpareAttack;

	// -AJA- 1999/08/10: Multiple attack support.
	if (custom_attack)
		attack = custom_attack;

	if (attack->bFaceTarget && Enemy)
		A_FaceTarget();

	if (attack->bNeedSight && Enemy)
	{
		if (!CanSee(Enemy))
			return;
	}

	CurrentAttack = attack;
	DoAttack(attack);
}

//==========================================================================
//
//	P_ActRefireCheck
//
//	This procedure will be called inbetween firing on an object
// that will fire repeatly (Chaingunner/Arachontron etc...), the
// purpose of this is to see if the object should refire and
// performs checks to that effect, first there is a check to see
// if the object will keep firing regardless and the others
// check if the the target exists, is alive and within view. The
// only other code here is a stealth check: a object with stealth
// capabilitys will lose the ability while firing.
//
//==========================================================================

void P_ActRefireCheck(void)
{
	AttackType *attack;

	attack = CurrentAttack;

	if (!attack)
		return;

	if (attack->bFaceTarget)
		A_FaceTarget();

	// Random chance that object will keep firing regardless
	if (Random() < attack->KeepFireChance)
		return;

	if (!Enemy || (Enemy.Health <= 0) || !CanSee(Enemy))
	{
		if (SeeState)
			SetState(SeeState);
	}
//  else if (object->flags & MF_STEALTH)
//  {
//    object->vis_target = VISIBLE;
//  }
}

//==========================================================================
//
//	P_ActPlaySound
//
//	Generate an arbitrary sound.
//
//==========================================================================

void P_ActPlaySound(name sound)
{
	PlaySound(sound, CHAN_VOICE);
}

//==========================================================================
//
//	P_ActKillSound
//
//	Kill any current sounds from this thing.
//
//==========================================================================

void P_ActKillSound(void)
{
	StopSound(CHAN_AUTO);
}

//==========================================================================
//
//	P_ActMakeAmbientSound
//
//	Just a sound generating procedure that cause the sound ref
// in seesound to be generated.
//
//==========================================================================

void P_ActMakeAmbientSound(void)
{
	if (SightSound)
		PlaySound(SightSound, CHAN_VOICE);
}

//==========================================================================
//
//	P_ActMakeAmbientSoundRandom
//
//	Give a small "random" chance that this object will make its
// ambient sound. Currently this is a set value of 50, however
// the code that drives this, should allow for the user to set
// the value, note for further DDF Development.
//
//==========================================================================

void P_ActMakeAmbientSoundRandom(void)
{
	if (SightSound)
	{
		if (P_Random() < 50)
			PlaySound(SightSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	P_ActMakeActiveSound
//
//	Just a sound generating procedure that cause the sound ref
// in seesound to be generated.
//
//==========================================================================

void P_ActMakeActiveSound(void)
{
	if (ActiveSound)
		PlaySound(ActiveSound, CHAN_VOICE);
}

//==========================================================================
//
//	P_ActMakeDyingSound
//
//	This procedure is like everyother sound generating
// procedure with the exception that if the object is
// a boss (EF_BOSSMAN extended flag) then the sound is
// generated at full volume (source = NULL).
//
//==========================================================================

void P_ActMakeDyingSound(void)
{
	if (DeathSound)
	{
		if (bBoss)
			PlayFullVolumeSound(DeathSound, CHAN_VOICE);
		else
			PlaySound(DeathSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	P_ActMakePainSound (Ow!! it hurts!)
//
//==========================================================================

void P_ActMakePainSound(void)
{
	if (PainSound)
	{
		if (bBoss)
			PlayFullVolumeSound(PainSound, CHAN_VOICE);
		else
			PlaySound(PainSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	P_ActMakeOverKillSound
//
//==========================================================================

void P_ActMakeOverKillSound(void)
{
	if (OverkillSound)
	{
		if (bBoss)
			PlayFullVolumeSound(OverkillSound, CHAN_VOICE);
		else
			PlaySound(OverkillSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	P_ActMakeCloseAttemptSound
//
//	Attempting close combat sound
//
//==========================================================================

void P_ActMakeCloseAttemptSound(void)
{
	if (CloseCombat.InitSound)
	{
		PlaySound(CloseCombat.InitSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	P_ActMakeRangeAttemptSound
//
//	Attempting attack at range sound
//
//==========================================================================

void P_ActMakeRangeAttemptSound(void)
{
	if (RangeAttack.InitSound)
		PlaySound(RangeAttack.InitSound, CHAN_VOICE);
}

//==========================================================================
//
//	P_ActDamageExplosion
//
//	Radius Attack damage set by info->damage. Used for the original Barrels
//
//==========================================================================

void P_ActDamageExplosion(void)
{
	int damage;
  
	DAMAGE_COMPUTE(damage, ExplodeDamage);

	RadiusAttack(damage, damage, false);
}

void P_ActThrust(void) { }					// EXTRA

//==========================================================================
//
//	P_ActWalkSoundChase
//
//==========================================================================

void P_ActWalkSoundChase(void)
{
	PlaySound(WalkSound, CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//  P_ActResurrectChase
//
//  Arch-vile check for ressurecting a body.
//
//==========================================================================

void P_ActResurrectChase(void)
{
	int xl;
	int xh;
	int yl;
	int yh;

	int bx;
	int by;

	Actor temp;

	if (MoveDir != DI_NODIR)
	{
		// check for corpses to raise
		viletryx = Origin.x + StepSpeed * xspeed[MoveDir];
		viletryy = Origin.y + StepSpeed * yspeed[MoveDir];

		xl = MapBlock(viletryx - XLevel.BlockMapOrgX - MAXRADIUS * 2.0);
		xh = MapBlock(viletryx - XLevel.BlockMapOrgX + MAXRADIUS * 2.0);
		yl = MapBlock(viletryy - XLevel.BlockMapOrgY - MAXRADIUS * 2.0);
		yh = MapBlock(viletryy - XLevel.BlockMapOrgY + MAXRADIUS * 2.0);

		for (bx = xl; bx <= xh; bx++)
		{
			for (by = yl; by <= yh; by++)
			{
				// Call PIT_VileCheck to check whether object is a corpse
				// that canbe raised.
				if (!P_BlockThingsIterator(bx, by, self, 'PIT_VileCheck'))
				{
					// got one!
					temp = Enemy;
					Enemy = CorpseHit;
					A_FaceTarget();
					Enemy = temp;

					SetState(ResState);
					if (CorpseHit.OverkillSound)
						CorpseHit.PlaySound(CorpseHit.OverkillSound, CHAN_BODY);

					CorpseHit.SetState(CorpseHit.RaiseState);
					CorpseHit.Height *= 4.0;
					CorpseHit.bShootable = true;
					CorpseHit.bFloat = CorpseHit.bDefaultFloat;
					CorpseHit.bNoGravity = CorpseHit.bDefaultNoGravity;
					CorpseHit.bDropOff = false;
					CorpseHit.bSolid = true;
					CorpseHit.bCorpse = false;
					CorpseHit.Health = CorpseHit.SpawnHealth;
					CorpseHit.Enemy = none;
					return;
				}
			}
		}
	}


	// Return to normal attack.
	A_Chase();
}

//
//   BOSS-BRAIN HANDLING
//

//==========================================================================
//
//	LookForShootSpots
//
//==========================================================================

void LookForShootSpots(void)
{
	Actor m;

	// find all the target spots
	NumBrainTargets = 0;
	FOREACH(Actor, m)
	{
		if (m.Class == SpitSpot)
		{
			BrainTargets[NumBrainTargets] = m;
			NumBrainTargets++;
		}
	}
}

//==========================================================================
//
//  A_BrainScream
//
//  Brain death sound, make explosions.
//
//==========================================================================

void A_BrainScream(void)
{
	TVec org;
	Actor A;

	for (org.x = Origin.x - 196.0; org.x < Origin.x + 320.0; org.x += 8.0)
	{
		org.y = Origin.y - 320.0;
		org.z = 1.0 / 512.0 + Random() * 512.0;
		A = Spawn(FindClass('BrainDeathMissile'), org);
		if (A.SightSound)
			PlaySound(SightSound, CHAN_VOICE);
		A.Velocity.z = Random() * 2.0 * 35.0;

		A.StateTime -= Random() * 0.2;
		if (A.StateTime < 0.1)
			A.StateTime = 0.1;
	}

	if (DeathSound)
		PlayFullVolumeSound(DeathSound, CHAN_VOICE);
}

//==========================================================================
//
//  A_BrainDie
//
//  Killed brain, exit level.
//
//==========================================================================

void A_BrainDie(void)
{
	G_ExitLevel();
}

//==========================================================================
//
//  A_BrainSpit
//
//  Spawn a cube.
//
//==========================================================================

void A_BrainSpit(void)
{
	Actor targ;
	Actor A;

	BrainEasy ^= 1;
	if (gameskill <= sk_easy && (!BrainEasy))
		return;

	// shoot out a cube
	P_ActRangeAttack(NULL);
}

//==========================================================================
//
//	A_CubeSpawn
//
//  Cube flying, spawn monster, when finished.
//
//==========================================================================

void A_CubeSpawn(void)
{
	Actor newmobj;
	int r;
	classid type;

	// Randomly select monster to spawn.
	r = P_Random();

	// Probability distribution (kind of :),
	// decreasing likelihood.
	if (r < 50)
		type = FindClass('Imp');
	else if (r < 90)
		type = FindClass('Demon');
	else if (r < 120)
		type = FindClass('Shadows');
	else if (r < 130)
		type = FindClass('PainElemental');
	else if (r < 160)
		type = FindClass('Cacodemon');
	else if (r < 162)
		type = FindClass('ArchVile');
	else if (r < 172)
		type = FindClass('Revenant');
	else if (r < 192)
		type = FindClass('Arachnotron');
	else if (r < 222)
		type = FindClass('Mancubus');
	else if (r < 246)
		type = FindClass('HellKnight');
	else
		type = FindClass('BaronOfHell');
	if (!type)
		return;

	newmobj = Spawn(type, Enemy.Origin);
	if (newmobj.LookForPlayers(true))
	{
		if (newmobj.SeeState)
			newmobj.SetState(newmobj.SeeState);
		else
			newmobj.SetState(newmobj.SpawnState);
	}

	// telefrag anything in this spot
	newmobj.bTelestomp = true;
	newmobj.TeleportMove(newmobj.Origin);
}

//==========================================================================
//
//	A_BrainMissileExplode
//
//  Brain explosions.
//
//==========================================================================

void A_BrainMissileExplode(void)
{
	TVec org;
	Actor A;

	org.x = Origin.x + (Random() - Random()) * 8.0;
	org.y = Origin.y;
	org.z = 1.0 / 512.0 + Random() * 512.0;
	A = Spawn(FindClass('BrainDeathMissile'), org);
	if (SightSound)
		PlaySound(SightSound, CHAN_VOICE);
	A.Velocity.z = Random() * 2.0 * 35.0;

	A.StateTime -= Random() * 0.2;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;
}

//==========================================================================
//
//	P_ActJump
//
//	Jumps to the given label, possibly randomly.  Note: nothing to do
// with monsters physically jumping.
//
//==========================================================================

void P_ActJump(float chance, name jumpState)
{
	if (Random() < chance)
	{
		NextState = FindState(jumpState);
	}
}

//==========================================================================
//
//	P_ActFixedHomingProjectile
//
//==========================================================================

void P_ActFixedHomingProjectile(void)
{
	//Actor A;
	TVec wishdir;
	TVec currdir;
	TVec delta;
	float adjustlen;

	if (level->tictime & 3)
		return;

	// spawn a puff of smoke behind the rocket      
	SpawnPuff(Origin.x, Origin.y, Origin.z);

/*
	A = Spawn(RevenantTracerSmoke, Origin - Velocity * frametime);

	A.Velocity.z = 1.0 * 35.0;
	A.StateTime -= Random() * 0.1;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;
*/

	// adjust direction
	if (!Enemy || Enemy.Health <= 0)
		return;

	wishdir = Normalise(MobjCenter(Enemy) - Origin);
	currdir = Normalise(Velocity);
	delta = wishdir - currdir;
	adjustlen = Length(delta);
	if (adjustlen > 0.2865921825)
		adjustlen = 0.2865921825;
	wishdir = currdir + delta * adjustlen;
	Velocity = wishdir * Speed;
	VectorAngles(&wishdir, &Angles);
}

//==========================================================================
//
//	P_ActRandomHomingProjectile
//
//==========================================================================

void P_ActRandomHomingProjectile(void)
{
	//Actor A;
	TVec wishdir;
	TVec currdir;
	TVec delta;
	float adjustlen;

	if (level->tictime & 3)
		return;

	// spawn a puff of smoke behind the rocket      
	SpawnPuff(Origin.x, Origin.y, Origin.z);

/*
	A = Spawn(RevenantTracerSmoke, Origin - Velocity * frametime);

	A.Velocity.z = 1.0 * 35.0;
	A.StateTime -= Random() * 0.1;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;
*/

	// adjust direction
	if (!Enemy || Enemy.Health <= 0)
		return;

	wishdir = Normalise(MobjCenter(Enemy) - Origin);
	currdir = Normalise(Velocity);
	delta = wishdir - currdir;
	adjustlen = Length(delta);
	if (adjustlen > 0.2865921825)
		adjustlen = 0.2865921825;
	wishdir = currdir + delta * adjustlen;
	Velocity = wishdir * Speed;
	VectorAngles(&wishdir, &Angles);
}

void P_ActLaunchOrderedSpread(void) { }	// EXTRA
void P_ActLaunchRandomSpread(void) { }	// EXTRA
void P_ActCreateSmokeTrail(void) { }	// EXTRA

//==========================================================================
//
//	P_ActHomeToSpot
//
//	This projectile will alter its course to intercept its
// target, or explode if it has reached it.  Used by the bossbrain
// cube.
//
//==========================================================================

void P_ActHomeToSpot(void)
{
	float dist;
	float ck_radius;

	if (!Enemy)
	{
		ExplodeMissile();
		return;
	}

	dist = Length(Enemy.Origin - Origin);

	ck_radius = Enemy.Radius + Radius + 2.0;
  
	// reached target ?
	if (dist <= ck_radius)
	{
		ExplodeMissile();
		return;
	}
	Velocity = Normalise(Enemy.Origin - Origin) * Speed;
}

//==========================================================================
//
//	P_ActEffectTracker
//
//  Arch-vile attack.
//
//==========================================================================

void P_ActEffectTracker(void)
{
	Actor tracker;
	int damage;

	if (!Enemy || !CurrentAttack)
		return;

	if (CurrentAttack->bFaceTarget)
		A_FaceTarget();

	if (CurrentAttack->bNeedSight)
	{
		if (!CanSee(Enemy))
			return;
	}

	if (CurrentAttack->Sound)
		PlaySound(CurrentAttack->Sound, CHAN_WEAPON);
	DAMAGE_COMPUTE(damage, CurrentAttack->Damage);
	Enemy.Damage(self, self, damage);
	if (Enemy.Mass)
		Enemy.Velocity.z = 1000.0 / Enemy.Mass * 35.0;
	else
		Enemy.Velocity.z = 2000.0;

	tracker = Instigator;//FIXME!!!!!!

	if (!tracker)
		return;

	// move the fire between the vile and the player
	tracker.Origin.x = Enemy.Origin.x - 24.0 * cos(Angles.yaw);
	tracker.Origin.y = Enemy.Origin.y - 24.0 * sin(Angles.yaw);
	DAMAGE_COMPUTE(damage, tracker.ExplodeDamage);
	tracker.RadiusAttack(damage, 0, 0);
}

//==========================================================================
//
//	P_ActTrackerFollow
//
//	Called by the tracker to follow its target.
//
//==========================================================================

void P_ActTrackerFollow(void)
{
	if (!Enemy)
		return;

	// don't move it if the vile lost sight
	if (!Instigator.CanSee(Enemy))
		return;

	UnlinkFromWorld();
	Origin.x = Enemy.Origin.x + 24.0 * cos(Enemy.Angles.yaw);
	Origin.y = Enemy.Origin.y + 24.0 * sin(Enemy.Angles.yaw);
	Origin.z = Enemy.Origin.z;
	LinkToWorld();
}

//==========================================================================
//
//	P_ActTrackerActive
//
//	Called by the tracker to make its active sound: also tracks
//
//==========================================================================

void P_ActTrackerActive(void)
{
	if (ActiveSound)
		PlaySound(ActiveSound, CHAN_VOICE);

	P_ActTrackerFollow();
}

//==========================================================================
//
//	P_ActTrackerStart
//
//	Called by the tracker to make its launch (see) sound: also tracks
//
//==========================================================================

void P_ActTrackerStart(void)
{
	if (SightSound)
		PlaySound(SightSound, CHAN_VOICE);

	P_ActTrackerFollow();
}

//==========================================================================
//
//	P_ActTransSet
//
//==========================================================================

void P_ActTransSet(int value)
{
	Translucency = value;
}

void P_ActTransFade(void) { }
void P_ActTransMore(void) { }				// EXTRA
void P_ActTransLess(void) { }				// EXTRA
void P_ActTransAlternate(void) { }			// EXTRA

void P_ActPlayerSupportLook(void) { }		// EXTRA

void P_ActStandardMeander(void) { }			// EXTRA
void P_ActPlayerSupportMeander(void) { }	// EXTRA

void P_ActResetSpreadCount(void)
{
	SpreadCount = 0;
}
void P_ActExplode(void) { }				// EXTRA
void P_ActActivateLineType(void) { }	// EXTRA
void P_ActEnableRadTrig(void) { }		// EXTRA
void P_ActDisableRadTrig(void) { }		// EXTRA
void P_ActTouchyRearm(void) { }			// EXTRA
void P_ActTouchyDisarm(void) { }		// EXTRA
void P_ActBounceRearm(void) { }			// EXTRA
void P_ActBounceDisarm(void) { }		// EXTRA
void P_ActPathCheck(void) { }			// EXTRA
void P_ActPathFollow(void) { }			// EXTRA
void P_ActDropItem(void) { }			// EXTRA
void P_ActDLightSet(void) { }
void P_ActDLightFade(void) { }
void P_ActDLightRandom(void) { }		// EXTRA

void P_ActFaceDir(void) { }				// EXTRA
void P_ActTurnDir(void) { }				// EXTRA
void P_ActTurnRandom(void) { }			// EXTRA
void P_ActMlookFace(void) { }			// EXTRA
void P_ActMlookTurn(void) { }			// EXTRA
void P_ActMoveFwd(void) { }				// EXTRA
void P_ActMoveRight(void) { }			// EXTRA
void P_ActMoveUp(void) { }				// EXTRA
void P_ActStopMoving(void) { }			// EXTRA

void P_ActCheckBlood(void) { }
void P_ActCheckMoving(void) { }
#endif

#ifndef NO_BOTS
__states__
{
	S_GIBS('POL5', 0, 'gibs/gibs.md2', 0, -1.0, S_NULL) { }
}
#endif

defaultproperties
{
	MaxStepHeight = 24.0;
	MissileChance = 200.0;
	Health = 1000;
	GibsHealth = -1000;
	Mass = 100.0;
#ifdef DDF
	FloatSpeed = 2.0;
	ExplodeDamageMax = -1;
	ExplodeDamageError = -1;
	RespawnTime = 30.0;
	JumpDelay = 1.0;
	ViewHeight = 0.75;
	ShotHeight = 0.64;
	Fast = 1.0;
	XScale = 1.0;
	YScale = 1.0;
	BounceSpeed = 0.5;
	BounceUp = 0.5;
	SightSlope = 16.0;
	SightAngle = 90.0;
	RideFriction = 0.7;
	ShadowTrans = 0.5;
	LungCapacity = 20.0;
	GaspStart = 2.0;
	ChokeDamage = 6;
	ChokeDamageMax = 14;
	ChokeDamageError = -1;
	ChokeDamageDelay = 2.0;
	ChokeDamageNoArmour = true;
	Bobbing = 1.0;
	CloseCombat.DamageMax = -1;
	CloseCombat.DamageError = -1;
	RangeAttack.DamageMax = -1;
	RangeAttack.DamageError = -1;
	SpareAttack.DamageMax = -1;
	SpareAttack.DamageError = -1;
	HaloHeight = -1.0;
	HaloSize = 32.0;
	HaloMinSize = -1.0;
	HaloMaxSize = -1.0;
	HaloTranslucency = 0.5;
	HaloColor = 0x00ffffff;
	DLightIntensity = 32;
	DLightColor = 0x00ffffff;
	DLightHeight = 0.5;
#endif
}

//**************************************************************************
//
//  $Log$
//  Revision 1.19  2005/12/11 21:31:39  dj_jl
//  Made path traversal callbacks class members.
//
//  Revision 1.18  2005/12/07 22:54:18  dj_jl
//  Moved compiler generated data out of globals.
//
//  Revision 1.17  2005/11/17 23:05:22  dj_jl
//  Renamed sounds.
//
//  Revision 1.16  2005/07/09 13:55:46  dj_jl
//  Scrolers carrying objects.
//
//  Revision 1.15  2005/05/26 17:04:11  dj_jl
//  Some fixes
//
//  Revision 1.14  2005/04/04 07:39:59  dj_jl
//  Fixed dehacked support.
//
//  Revision 1.13  2005/03/28 07:34:31  dj_jl
//  Some Boom line specials and other improvements.
//
//  Revision 1.12  2005/03/16 15:04:20  dj_jl
//  More work on line specials.
//
//  Revision 1.11  2004/12/27 12:23:10  dj_jl
//  Multiple small changes for version 1.16
//
//  Revision 1.10  2004/11/22 07:36:23  dj_jl
//  Implemented all sector specials in all games.
//
//  Revision 1.9  2004/11/01 07:38:21  dj_jl
//  Almost all Hexen line specials are available in all games.
//
//  Revision 1.8  2004/08/23 19:23:42  dj_jl
//  Moved weapon utilites to player class.
//
//  Revision 1.7  2004/08/22 19:23:04  dj_jl
//  Moved many functions to player class.
//
//  Revision 1.6  2004/03/12 07:21:08  dj_jl
//  Monster desth special action
//
//  Revision 1.5  2003/11/12 16:48:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.4  2003/10/22 06:42:04  dj_jl
//  Added look at actor function
//
//  Revision 1.3  2003/07/11 16:47:38  dj_jl
//  Made array of players with pointers
//
//  Revision 1.2  2003/03/08 12:18:36  dj_jl
//  Removing class pointers.
//
//  Revision 1.1  2002/10/26 16:32:19  dj_jl
//  New style of defining classes.
//
//**************************************************************************
