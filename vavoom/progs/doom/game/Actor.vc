//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Actor : ScriptedEntity
	abstract;

bool bDehackedSpecial;	// Old style special handling
bool bNoRespawn;

string PickupMessage;

//===========================================================================
//
//  IsTeleportSpot
//
//===========================================================================

bool IsTeleportSpot()
{
	return !!TeleportDest(self);
}

//===========================================================================
//
//  IsTeleportSpot2
//
//===========================================================================

bool IsTeleportSpot2()
{
	return !!TeleportDest2(self);
}

//===========================================================================
//
//  IsPointPusher
//
//===========================================================================

bool IsPointPusher()
{
	return !!PointPusher(self);
}

//===========================================================================
//
//  IsPointPuller
//
//===========================================================================

bool IsPointPuller()
{
	return !!PointPuller(self);
}

//==========================================================================
//
//	HideSpecial
//
//==========================================================================

void HideSpecial()
{
	// only respawn items in deathmatch
	if ((Level.Game.deathmatch == 2) && !bDropped && !bNoRespawn)
	{
		SetState(S_DORMANT_PICKUP1);
	}
	else
	{
		Destroy();
	}
}

//==========================================================================
//
//	HandlePickup
//
//==========================================================================

bool HandlePickup(Actor Toucher)
{
	return false;
}

//==========================================================================
//
//	HandleDehackedPickup
//
//==========================================================================

bool HandleDehackedPickup(EntityEx Toucher)
{
	int i;
	name sound = 'misc/i_pkup';

	// Identify by sprite.
	// armor
	name SpriteName = GetStateSpriteName(State);
	if (SpriteName == 'arm1')
	{
		if (!Player(Toucher.Player).GiveArmor(1))
			return false;
		Toucher.Player.cprint("$gotarmor");
	}
	else if (SpriteName == 'arm2')
	{
		if (!Player(Toucher.Player).GiveArmor(2))
			return false;
		Toucher.Player.cprint("$gotmega");
	}
		// bonus items
	else if (SpriteName == 'bon1')
	{
		Toucher.Player.Health++;	// can go over 100%
		if (Toucher.Player.Health > 200)
			Toucher.Player.Health = 200;
		Toucher.Health = Toucher.Player.Health;
		Toucher.Player.cprint("$goththbonus");
	}
	else if (SpriteName == 'bon2')
	{
		Player(Toucher.Player).ArmorPoints++;	// can go over 100%
		if (Player(Toucher.Player).ArmorPoints > 200)
			Player(Toucher.Player).ArmorPoints = 200;
		if (!Player(Toucher.Player).ArmorType)
			Player(Toucher.Player).ArmorType = 1;
		Toucher.Player.cprint("$gotarmbonus");
	}
	else if (SpriteName == 'soul')
	{
		Toucher.Player.Health += MainGameInfo(Level.Game).SOULSPHERE_HEALTH;
		if (Toucher.Player.Health > MainGameInfo(Level.Game).SOULSPHERE_MAX)
			Toucher.Player.Health = MainGameInfo(Level.Game).SOULSPHERE_MAX;
		Toucher.Player.MO.Health = Toucher.Player.Health;
		Toucher.Player.cprint("$gotsuper");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'mega')
	{
		Toucher.Player.Health = MainGameInfo(Level.Game).MEGASPHERE_HEALTH;
		Toucher.Health = Toucher.Player.Health;
		Player(Toucher.Player).GiveArmor(2);
		Toucher.Player.cprint("$gotmsphere");
		sound = 'misc/p_pkup';
	}
		// cards
		// leave cards for everyone
	else if (SpriteName == 'bkey')
	{
		if (Player(Toucher.Player).GiveCard(it_bluecard))
			Toucher.Player.cprint("$gotbluecard");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'ykey')
	{
		if (Player(Toucher.Player).GiveCard(it_yellowcard))
			Toucher.Player.cprint("$gotyelwcard");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'rkey')
	{
		if (Player(Toucher.Player).GiveCard(it_redcard))
			Toucher.Player.cprint("$gotredcard");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'bsku')
	{
		if (Player(Toucher.Player).GiveCard(it_blueskull))
			Toucher.Player.cprint("$gotblueskul");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'ysku')
	{
		if (Player(Toucher.Player).GiveCard(it_yellowskull))
			Toucher.Player.cprint("$gotyelwskul");
		if (Level.Game.netgame)
			return false;
	}
	else if (SpriteName == 'rsku')
	{
		if (Player(Toucher.Player).GiveCard(it_redskull))
			Toucher.Player.cprint("$gotredskull");
		if (Level.Game.netgame)
			return false;
	}
		// medikits, heals
	else if (SpriteName == 'stim')
	{
		if (!Player(Toucher.Player).GiveBody(10, Player::MAXHEALTH))
			return false;
		Toucher.Player.cprint("$gotstim");
	}
	else if (SpriteName == 'medi')
	{
		if (!Player(Toucher.Player).GiveBody(25, Player::MAXHEALTH))
			return false;

		if (Toucher.Player.Health < 25)
			Toucher.Player.cprint("$gotmedineed");
		else
			Toucher.Player.cprint("$gotmedikit");
	}
		// power ups
	else if (SpriteName == 'pinv')
	{
		if (!Player(Toucher.Player).GivePower(pw_invulnerability))
			return false;
		Toucher.Player.cprint("$gotinvul");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'pstr')
	{
		if (!Player(Toucher.Player).GivePower(pw_strength))
			return false;
		Toucher.Player.cprint("$gotberserk");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'pins')
	{
		if (!Player(Toucher.Player).GivePower(pw_invisibility))
			return false;
		Toucher.Player.cprint("$gotinvis");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'suit')
	{
		if (!Player(Toucher.Player).GivePower(pw_ironfeet))
			return false;
		Toucher.Player.cprint("$gotsuit");
		sound = 'misc/p_pkup';
	}
	else if (SpriteName == 'pvis')
	{
		if (!Player(Toucher.Player).GivePower(pw_infrared))
			return false;
		Toucher.Player.cprint("$gotvisor");
		sound = 'misc/p_pkup';
	}
		//  Items
	else if (SpriteName == 'pmap')
	{
		if (!Player(Toucher.Player).GiveItem(IT_ALL_MAP))
			return false;
		Toucher.Player.cprint("$gotmap");
		sound = 'misc/p_pkup';
	}
		// ammo
	else if (SpriteName == 'clip')
	{
		if (bDropped)
		{
			if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_clip,
				MainGameInfo(Level.Game).clipammo[DoomDefs::am_clip] / 2))
				return false;
		}
		else
		{
			if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_clip,
				MainGameInfo(Level.Game).clipammo[DoomDefs::am_clip]))
				return false;
		}
		Toucher.Player.cprint("$gotclip");
	}
	else if (SpriteName == 'ammo')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_clip,
			5 * MainGameInfo(Level.Game).clipammo[DoomDefs::am_clip]))
			return false;
		Toucher.Player.cprint("$gotclipbox");
	}
	else if (SpriteName == 'rock')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_misl,
			MainGameInfo(Level.Game).clipammo[DoomDefs::am_misl]))
			return false;
		Toucher.Player.cprint("$gotrocket");
	}
	else if (SpriteName == 'brok')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_misl,
			5 * MainGameInfo(Level.Game).clipammo[DoomDefs::am_misl]))
			return false;
		Toucher.Player.cprint("$gotrockbox");
	}
	else if (SpriteName == 'cell')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_cell,
			MainGameInfo(Level.Game).clipammo[DoomDefs::am_cell]))
			return false;
		Toucher.Player.cprint("$gotcell");
	}
	else if (SpriteName == 'celp')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_cell,
			5 * MainGameInfo(Level.Game).clipammo[DoomDefs::am_cell]))
			return false;
		Toucher.Player.cprint("$gotcellbox");
	}
	else if (SpriteName == 'shel')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_shell,
			MainGameInfo(Level.Game).clipammo[DoomDefs::am_shell]))
			return false;
		Toucher.Player.cprint("$gotshells");
	}
	else if (SpriteName == 'sbox')
	{
		if (!Player(Toucher.Player).GiveAmmo(DoomDefs::am_shell,
			5 * MainGameInfo(Level.Game).clipammo[DoomDefs::am_shell]))
			return false;
		Toucher.Player.cprint("$gotshellbox");
	}
	else if (SpriteName == 'bpak')
	{
		if (!Player(Toucher.Player).Backpack)
		{
			Player(Toucher.Player).Backpack = true;
			for (i = 0; i < DoomDefs::NUMAMMO; i++)
				Player(Toucher.Player).MaxAmmo[i] *= 2;
		}
		for (i = 0; i < DoomDefs::NUMAMMO; i++)
		{
			Player(Toucher.Player).GiveAmmo(i, MainGameInfo(Level.Game).clipammo[i]);
		}
		Toucher.Player.cprint("$gotbackpack");
	}
		// weapons
	else if (SpriteName == 'bfug')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_bfg, false))
			return false;
		Toucher.Player.cprint("$gotbfg9000");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'mgun')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_chaingun, bDropped))
			return false;
		Toucher.Player.cprint("$gotchaingun");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'csaw')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_chainsaw, false))
			return false;
		Toucher.Player.cprint("$gotchainsaw");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'laun')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_missile, false))
			return false;
		Toucher.Player.cprint("$gotlauncher");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'plas')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_plasma, false))
			return false;
		Toucher.Player.cprint("$gotplasma");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'shot')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_shotgun, bDropped))
			return false;
		Toucher.Player.cprint("$gotshotgun");
		sound = 'misc/w_pkup';
	}
	else if (SpriteName == 'sgn2')
	{
		if (!Player(Toucher.Player).GiveWeapon(DoomDefs::wp_supershotgun, bDropped))
			return false;
		Toucher.Player.cprint("$gotshotgun2");
		sound = 'misc/w_pkup';
	}
	Toucher.PlaySound(sound, CHAN_ITEM);
	return true;
}

//==========================================================================
//
//	TouchSpecial
//
//==========================================================================

void TouchSpecial(EntityEx Toucher)
{
	if (!Toucher.bPickUp)
	{
		// can't remove thing
		return;
	}
	// Dead thing touching.
	// Can happen with a sliding player corpse.
	if (Toucher.Health <= 0)
		return;

	if (bDehackedSpecial)
	{
		if (!HandleDehackedPickup(Toucher))
		{
			return;
		}
	}
	else
	{
		if (!HandlePickup(Actor(Toucher)))
		{
			return;
		}
	}
	if (Special)
	{
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2], Args[3],
			Args[4], NULL, 0, Toucher);
		Special = 0;
	}
	if (bCountItem)
	{
		Toucher.Player.ItemCount++;
		Level.CurrentItems++;
	}
	HideSpecial();
	Player(Toucher.Player).BonusFlash += Player::BONUSADD;
}

//==========================================================================
//
//  DoMissileExplosionEffects
//
//==========================================================================

void DoMissileExplosionEffects()
{
	if (!(Effects & EF_ROCKET) && (Effects & EF_DLIGHT_MASK))
	{
		SendExplosion2(Effects & EF_DLIGHT_MASK, Origin);
		Effects &= ~EF_DLIGHT_MASK;
	}
	Effects &= ~EF_ROCKET;
}

//==========================================================================
//
//  SendExplosion2
//
//==========================================================================

final void SendExplosion2(int etype, TVec org)
{
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientExplosion2(etype, org);
	}
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(EntityEx source)
{
	// Check for frag changes
	if (bIsPlayer)
	{
		if (source.Player.bIsBot)
		{
			Player(source.Player).Bot.Killed(self);
		}

		if (Player.bIsBot)
		{
			Player(Player).Bot.Died(Actor(source));
		}

		source.Player.FragsStats[Player.GetPlayerNum()]++;
		if (source == self)
		{
			Player.Frags--;
		}
		else
		{
			source.Player.Frags++;
		}
	}
}

//==========================================================================
//
//	PlayerKilled
//
//==========================================================================

void PlayerKilled(EntityEx source, EntityEx inflictor)
{
	// Count environment kills against you
	if (!source)
	{
		Player.FragsStats[Player.GetPlayerNum()]++;
		Player.Frags--;
	}
}

//==========================================================================
//
//	GetBaseViewHeight
//
//==========================================================================

float GetBaseViewHeight()
{
	return Player::VIEWHEIGHT;
}

//==========================================================================
//
//  FindOther
//
//==========================================================================

bool FindOther()
{
	Actor Other;

	foreach AllThinkers(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other mobj of the same Class not dead
			return true;
		}
	}
	return false;
}

//==========================================================================
//
//  A_Explode
//
//  Rocket and barrel explosion.
//
//==========================================================================

final void A_Explode()
{
	int i;

	Alpha = 0.5;
	RadiusAttack(Target, 128, 128.0, true);
	if (Origin.z <= FloorZ + 128.0)
	{
		HitFloorType();
	}

	//  Spawn explosion effects - dynamic light and particles
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientExplosion(
			Origin + vector(0.0, 0.0, Height * 0.5));
	}

	//  Clear old dynamic light effect
	Effects &= ~EF_DLIGHT_MASK;
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(TVec Org, float Range, class<EntityEx> PuffType, bool HitThing)
{
	EntityEx A;
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientGunShot(Org);
	}

	Org.z += (Random() - Random()) * 4.0;

	A = Spawn(PuffType, Org);
	A.Velocity.z = 1.0 * 35.0;
	A.StateTime -= Random() * 0.1;

	if (A.StateTime < 0.1)
		A.StateTime = 0.1;

	// don't make punches spark on the wall
	if (Range == MELEERANGE)
		A.SetState(BulletPuff::S_PUFF3);
}

//==========================================================================
//
//  SpawnBlood
// 
//==========================================================================

void SpawnBlood(TVec Org, int damage)
{
	Actor A;
	int i;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i])
			continue;
		if (!Level.Game.Players[i].bSpawned)
			continue;
		Player(Level.Game.Players[i]).ClientBlood(Org, damage > 255 ? 255 : damage);
	}

	Org.z += (Random() - Random()) * 4.0;
	A = Spawn(Blood, Org);
	A.Velocity.z = 2.0 * 35.0;
	A.StateTime -= Random() * 0.1;

	if (A.StateTime < 0.1)
		A.StateTime = 0.1;

	if (damage <= 12 && damage >= 9)
		A.SetState(Blood::S_BLOOD2);
	else if (damage < 9)
		A.SetState(Blood::S_BLOOD3);
}

//==========================================================================
//
//  A_SPosAttack
//
//  Shotgun guy, Spider mastermind attack.
//
//==========================================================================

final void A_SPosAttack()
{
	int i;
	int damage;
	TVec aimDir;
	TVec dir;

	if (!Target)
		return;

	PlaySound('shotguy/attack', CHAN_WEAPON);
//FIXME	PlaySound('spider/attack', CHAN_WEAPON);
	A_FaceTarget();
	AimLineAttack(aimDir, Angles, MISSILERANGE);
	for (i = 0; i < 3; i++)
	{
		dir = aimDir;
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
		damage = ((P_Random() % 5) + 1) * 3;
		LineAttack(dir, MISSILERANGE, damage, BulletPuff);
	}

	Effects |= EF_DL_MUZZLEFLASH;
}

//==========================================================================
//
//  A_Metal
//
//  Cyberdemon move with metal sound.
//
//==========================================================================

final void A_Metal()
{
	PlaySound('spider/walk', CHAN_BODY);
	A_Chase();
}

//==========================================================================
//
//  A_SpidRefire
//
//  Spider mastermind refire.
//
//==========================================================================

final void A_SpidRefire()
{
	// keep firing unless target got out of sight
	A_FaceTarget();

	if (P_Random() < 10)
		return;

	if (!Target || Target.Health <= 0 || !CanSee(Target))
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//	BossDeathSpecialAction
//
//==========================================================================

void BossDeathSpecialAction()
{
	// make sure there is a player alive for victory
	int i;
	for (i = 0; i < MAXPLAYERS; i++)
		if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
			break;

	if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game

	// scan the remaining thinkers to see if all bosses are dead
	Actor Other;
	foreach AllThinkers(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other boss not dead
			return;
		}
	}

	// victory!
	if (Level.bSpecialActionKillMonsters)
	{
		// Kill any remaining monsters
		DoomLevelInfo(Level).P_Massacre();
	}

	if (Level.bSpecialActionOpenDoor)
	{
		Level.ExecuteActionSpecial(LNSPEC_DoorOpen, 666, 64, 150, 0, 0,
			NULL, 0, none);
	}
	else if (Level.bSpecialActionLowerFloor)
	{
		Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0,
			0, NULL, 0, none);
	}
	else
	{
		Level.ExitLevel(0);
	}
}

//==========================================================================
//
//  A_BossDeath
//
//  Possibly trigger special effects if on first boss level
//
//==========================================================================

final void A_BossDeath()
{
	if (Class == BaronOfHell)
	{
		if (!Level.bBaronSpecial)
		{
			//  Not a boss level
			return;
		}
		BossDeathSpecialAction();
	}
	else if (Class == Cyberdemon)
	{
		if (!Level.bCyberDemonSpecial)
		{
			//  Not a boss level
			return;
		}
		BossDeathSpecialAction();
	}
	else if (Class == SpiderMastermind)
	{
		if (!Level.bSpiderMastermindSpecial)
		{
			//  Not a boss level
			return;
		}
		BossDeathSpecialAction();
	}
	else if (Class == Arachnotron)
	{
		int i;
		Actor Other;

		if (!Level.bMap07Special)
		{
			//  Not a boss level
			return;
		}

		// make sure there is a player alive for victory
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
				break;

		if (i == MAXPLAYERS)
			return;	// no one left alive, so do not end game

		// scan the remaining thinkers to see if all bosses are dead
		foreach AllThinkers(Arachnotron, Other)
		{
			if (Other != self && Other.Class == Arachnotron && Other.Health > 0)
			{
				// other boss not dead
				return;
			}
		}

		// victory!
		Level.ExecuteActionSpecial(LNSPEC_FloorRaiseByTexture, 667, 8, 0, 0, 0, NULL, 0, none);
	}
	else if (Class == Fatso)
	{
		int i;
		Actor Other;

		if (!Level.bMap07Special)
		{
			//  Not a boss level
			return;
		}

		// make sure there is a player alive for victory
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].bSpawned && Level.Game.Players[i].Health > 0)
				break;

		if (i == MAXPLAYERS)
			return;	// no one left alive, so do not end game

		// scan the remaining thinkers to see if all bosses are dead
		foreach AllThinkers(Fatso, Other)
		{
			if (Other != self && Other.Class == Fatso && Other.Health > 0)
			{
				// other boss not dead
				return;
			}
		}

		// victory!
		Level.ExecuteActionSpecial(LNSPEC_FloorLowerToLowest, 666, 8, 0, 0, 0, NULL, 0, none);
	}
}

__states__
{
	S_GIBS('POL5', 0, -1.0, none) = none

	S_DORMANT_PICKUP1('', 0, 30.0, S_DORMANT_PICKUP2)
	{
		bHidden = true;
		bSpecial = false;
	}
	S_DORMANT_PICKUP2('', 0, -1.0, none)
	{
		Actor A;

		bHidden = false;
		bSpecial = true;
		SetState(IdleState);

		// spawn a teleport fog at the new spot
		A = Spawn(ItemFog, Origin);
		A.PlaySound('misc/spawn', CHAN_ITEM);
	}
}

defaultproperties
{
	CrunchState = S_GIBS;
}
