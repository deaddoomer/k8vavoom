//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Weapon : ViewEntity;

const float LOWERSPEED		= 6.0;
const float RAISESPEED		= 6.0;

const float WEAPONBOTTOM	= 128.0;
const float WEAPONTOP		= 32.0;

int Ammo;
state UpState;
state DownState;
state ReadyState;
state AttackState;
state HoldAttackState;
state FlashState;
int PlayerModelVersion;

//===========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
// Follows after getting weapon up, or after previous attack/fire sequence.
//
//===========================================================================

final void A_WeaponReady()
{
	float angle;

	// get out of attack state
	if (Player.MO.State == Actor(Player.MO).MeleeState ||
		Player.MO.State == Actor(Player.MO).MissileState)
	{
		Player.MO.SetState(Actor(Player.MO).IdleState);
	}

	if (Player(Player).ReadyWeapon == DoomDefs::wp_chainsaw &&
		Player.ViewStates[ps_weapon].State == ReadyState)
	{
		Player.MO.PlaySound('weapons/sawidle', CHAN_WEAPON);
	}

	// check for change
	//  if player is dead, put the weapon away
	if (Player(Player).PendingWeapon != DoomDefs::wp_nochange || !Player.Health)
	{
		// change weapon
		//  (pending weapon should allready be validated)
		Player.SetViewState(ps_weapon, DownState);
		return;
	}

	// check for fire
	//  the missile launcher and bfg do not auto fire
	if (Player.Buttons & BT_ATTACK)
	{
		if (!Player.bAttackDown || (Player(Player).ReadyWeapon != DoomDefs::wp_missile &&
			Player(Player).ReadyWeapon != DoomDefs::wp_bfg))
		{
			Player.bAttackDown = true;
			Player(Player).FireWeapon();
			return;
		}
	}
	else
		Player.bAttackDown = false;

	// bob the weapon based on movement speed
	angle = AngleMod360(180.0 * Player.Level.Game.level->time);
	Player.ViewStates[ps_weapon].SX = 1.0 + Player(Player).Bob * cos(angle);
	if (angle >= 180.0)
	{
		angle -= 180.0;
	}
	Player.ViewStates[ps_weapon].SY = WEAPONTOP + Player(Player).Bob * sin(angle);
}

//===========================================================================
//
//  A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//===========================================================================

final void A_Lower()
{
	//	FIXME!!
	if (Player.Level.Game.frametime < 1.0 / 35.0)
		Player.ViewStates[ps_weapon].SY += LOWERSPEED;
	else
		Player.ViewStates[ps_weapon].SY += LOWERSPEED * 35.0 * Player.Level.Game.frametime;

	// Is already down.
	if (Player.ViewStates[ps_weapon].SY < WEAPONBOTTOM)
		return;

	// Player is dead.
	if (Player.PlayerState == PST_DEAD)
	{
		Player.ViewStates[ps_weapon].SY = WEAPONBOTTOM;

		// don't bring weapon back up
		return;
	}

	// The old weapon has been lowered off the screen,
	// so change the weapon and start raising it
	if (!Player.Health)
	{
		// Player is dead, so keep the weapon off screen.
		Player.SetViewState(ps_weapon, none);
		return;
	}

	Player(Player).SetWeapon(Player(Player).PendingWeapon);

	Player(Player).BringUpWeapon();
}

//===========================================================================
//
//  A_Raise
//
//===========================================================================

final void A_Raise()
{
	//	FIXME!!
	if (Player.Level.Game.frametime < 1.0 / 35.0)
		Player.ViewStates[ps_weapon].SY -= RAISESPEED;
	else
		Player.ViewStates[ps_weapon].SY -= RAISESPEED * 35.0 * Player.Level.Game.frametime;

	if (Player.ViewStates[ps_weapon].SY > WEAPONTOP)
	{
		return;
	}

	Player.ViewStates[ps_weapon].SY = WEAPONTOP;

	// The weapon has been raised all the way,
	//  so change to the ready state.
	Player.SetViewState(ps_weapon, ReadyState);
}

//===========================================================================
//
//  A_ReFire
//
//  The player can re-fire the weapon without lowering it entirely.
//
//===========================================================================

final void A_ReFire()
{
	// check for fire
	//  (if a weaponchange is pending, let it go through instead)
	if ((Player.Buttons & BT_ATTACK)
		&& Player(Player).PendingWeapon == DoomDefs::wp_nochange && Player.Health)
	{
		Player(Player).Refire++;
		Player(Player).FireWeapon();
	}
	else
	{
		Player(Player).Refire = 0;
		Player(Player).CheckAmmo();
	}
}

//===========================================================================
//
//  A_CheckReload
//
//===========================================================================

final void A_CheckReload()
{
	Player(Player).CheckAmmo();
}

//===========================================================================
//
//  A_GunFlash
//
//===========================================================================

final void A_GunFlash()
{
	Player.MO.SetState(Actor(Player.MO).MissileState);
	Player.SetViewState(ps_flash, FlashState);
}

//===========================================================================
//
//  A_Light0
//
//===========================================================================

final void A_Light0()
{
	Player.ExtraLight = 0;
	Player.MO.Effects &= ~DoomDefs::EF_DLIGHT_MASK;
}

//===========================================================================
//
//  A_Light1
//
//===========================================================================

final void A_Light1()
{
	Player.ExtraLight = 1;
}

//===========================================================================
//
//  A_Light2
//
//===========================================================================

final void A_Light2()
{
	Player.ExtraLight = 2;
}

//===========================================================================
//
//  GunShot
//
//===========================================================================

final void GunShot(Actor A, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 5 * (P_Random() % 3 + 1);

	A.LineAttack(dir, Actor::MISSILERANGE, damage);
}

//**************************************************************************
//**************************************************************************
//**************************************************************************
//**************************************************************************
//**************************************************************************

//===========================================================================
//
//  A_Punch
//
//===========================================================================

final void A_Punch()
{
	int damage;
	TAVec aimAngles;
	TVec dir;

	damage = (P_Random() % 10 + 1) << 1;

	if (Player(Player).Powers[pw_strength])
		damage *= 10;

	aimAngles = Player.MO.Angles;
	aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
		Random()) * 45.0 / 8.0);
	dir = Actor(Player.MO).AimLineAttack(aimAngles, Actor::MELEERANGE);
	Actor(Player.MO).LineAttack(dir, Actor::MELEERANGE, damage);

	// turn to face target
	if (Actor(Player.MO).linetarget)
	{
		Player.MO.PlaySound('*fist', CHAN_WEAPON);
		Player.MO.Angles.yaw = atan2(
			Actor(Player.MO).linetarget.Origin.y - Player.MO.Origin.y,
			Actor(Player.MO).linetarget.Origin.x - Player.MO.Origin.x);
		Player.bFixAngle = true;
	}
}

//===========================================================================
//
//  A_Saw
//
//===========================================================================

final void A_Saw()
{
	float angle;
	int damage;
	TAVec aimAng;
	TVec dir;

	damage = 2 * (P_Random() % 10 + 1);
	aimAng = Player.MO.Angles;
	aimAng.yaw = AngleMod360(aimAng.yaw + (Random() -
		Random()) * 45.0 / 8.0);

	// use meleerange + 1 se the puff doesn't skip the flash
	dir = Actor(Player.MO).AimLineAttack(aimAng, Actor::MELEERANGE + 0.00001);
	Actor(Player.MO).LineAttack(dir, Actor::MELEERANGE + 0.00001, damage);

	if (!Actor(Player.MO).linetarget)
	{
		Player.MO.PlaySound('weapons/sawfull', CHAN_WEAPON);
		return;
	}
	Player.MO.PlaySound('weapons/sawhit', CHAN_WEAPON);

	// turn to face target
	angle = atan2(Actor(Player.MO).linetarget.Origin.y - Player.MO.Origin.y,
		Actor(Player.MO).linetarget.Origin.x - Player.MO.Origin.x);
	if (AngleMod360(angle - Player.MO.Angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - Player.MO.Angles.yaw) < -90.0 / 20.0)
			Player.MO.Angles.yaw = angle + 90.0 / 21.0;
		else
			Player.MO.Angles.yaw = Player.MO.Angles.yaw - 90.0 / 20.0;
	}
	else
	{
		if (AngleMod360(angle - Player.MO.Angles.yaw) > 90.0 / 20.0)
			Player.MO.Angles.yaw = angle - 90.0 / 21.0;
		else
			Player.MO.Angles.yaw += 90.0 / 20.0;
	}
	Player.MO.Angles.yaw = AngleMod360(Player.MO.Angles.yaw);
	Actor(Player.MO).bJustAttacked = true;
	Player.bFixAngle = true;
}

//===========================================================================
//
//  A_FirePistol
//
//===========================================================================

final void A_FirePistol()
{
	TVec dir;

	Player.MO.PlaySound('weapons/pistol', CHAN_WEAPON);

	Player.MO.SetState(Actor(Player.MO).MissileState);
	Player(Player).Ammo[Ammo]--;

	Player.SetViewState(ps_flash, FlashState);

	dir = Actor(Player.MO).Aim(16.0 * 64.0);
	GunShot(Actor(Player.MO), !Player(Player).Refire, dir);
	Player.MO.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_FireShotgun
//
//===========================================================================

final void A_FireShotgun()
{
	int i;
	TVec dir;

	Player.MO.PlaySound('weapons/shotgf', CHAN_WEAPON);
	Player.MO.SetState(Actor(Player.MO).MissileState);

	Player(Player).Ammo[Ammo]--;

	Player.SetViewState(ps_flash, FlashState);

	dir = Actor(Player.MO).Aim(16.0 * 64.0);
	for (i = 0; i < 7; i++)
	{
		GunShot(Actor(Player.MO), false, dir);
	}
	Player.MO.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_FireShotgun2
//
//===========================================================================

final void A_FireShotgun2()
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	Player.MO.PlaySound('weapons/sshotf', CHAN_WEAPON);
	Player.MO.SetState(Actor(Player.MO).MissileState);

	Player(Player).Ammo[Ammo] -= 2;

	Player.SetViewState(ps_flash, FlashState);

	aimDir = Actor(Player.MO).Aim(16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		Actor(Player.MO).LineAttack(dir, Actor::MISSILERANGE, damage);
	}
	Player.MO.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_OpenShotgun2
//
//===========================================================================

final void A_OpenShotgun2()
{
	Player.MO.PlaySound('weapons/sshoto', CHAN_WEAPON);
}

//===========================================================================
//
//  A_LoadShotgun2
//
//===========================================================================

final void A_LoadShotgun2()
{
	Player.MO.PlaySound('weapons/sshotl', CHAN_WEAPON);
}

//===========================================================================
//
//  A_CloseShotgun2
//
//===========================================================================

final void A_CloseShotgun2()
{
	Player.MO.PlaySound('weapons/sshotc', CHAN_WEAPON);
	A_ReFire();
}

//===========================================================================
//
//  A_FireCGun
//
//===========================================================================

final void A_FireCGun()
{
	TVec dir;

	Player.MO.PlaySound('weapons/chngun', CHAN_WEAPON);

	if (!Player(Player).Ammo[Ammo])
		return;

	Player.MO.SetState(Actor(Player.MO).MissileState);
	Player(Player).Ammo[Ammo]--;

	if (Player.ViewStates[ps_weapon].State == AttackState)
		Player.SetViewState(ps_flash, FlashState);
	else
		Player.SetViewState(ps_flash, WeaponChaingun::S_CHAINFLASH2);

	dir = Actor(Player.MO).Aim(16.0 * 64.0);
	GunShot(Actor(Player.MO), !Player(Player).Refire, dir);
	Player.MO.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_FireMissile
//
//===========================================================================

final void A_FireMissile()
{
	Player(Player).Ammo[Ammo]--;
	Player(Player).SpawnPlayerMissile(Rocket);
}

//===========================================================================
//
//  A_FirePlasma
//
//===========================================================================

final void A_FirePlasma()
{
	Player(Player).Ammo[Ammo]--;
	if (!(P_Random() & 1))
		Player.SetViewState(ps_flash, FlashState);
	else
		Player.SetViewState(ps_flash, WeaponPlasma::S_PLASMAFLASH2);
	Player(Player).SpawnPlayerMissile(PlasmaShot);
}

//===========================================================================
//
//  A_BFGsound
//
//===========================================================================

final void A_BFGsound()
{
	Player.MO.PlaySound('weapons/bfgf', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireBFG
//
//===========================================================================

final void A_FireBFG()
{
	Player(Player).Ammo[Ammo] -= MainGameInfo(Player.Level.Game).BFGCELLS;
	Player(Player).SpawnPlayerMissile(BFGShot);
}

final void A_Look(){}
final void A_Chase(){}
final void A_FaceTarget(){}
final void A_Pain(){}
final void A_Explode(){}
final void A_Scream(){}
final void A_XScream(){}
final void A_Fall(){}
final void A_PlayerScream(){}
final void A_BFGSpray(){}
final void A_PosAttack(){}
final void A_SPosAttack(){}
final void A_TroopAttack(){}
final void A_SargAttack(){}
final void A_HeadAttack(){}
final void A_BruisAttack(){}
final void A_SkullAttack(){}
final void A_Hoof(){}
final void A_Metal(){}
final void A_CyberAttack(){}
final void A_SpidRefire(){}
final void A_CPosAttack(){}
final void A_CPosRefire(){}
final void A_BabyMetal(){}
final void A_BspiAttack(){}
final void A_PainAttack(){}
final void A_PainDie(){}
final void A_SkelWhoosh(){}
final void A_SkelFist(){}
final void A_SkelMissile(){}
final void A_Tracer(){}
final void A_FatRaise(){}
final void A_FatAttack1(){}
final void A_FatAttack2(){}
final void A_FatAttack3(){}
final void A_VileChase(){}
final void A_VileStart(){}
final void A_VileTarget(){}
final void A_VileAttack(){}
final void A_Fire(){}
final void A_StartFire(){}
final void A_FireCrackle(){}
final void A_BrainPain(){}
final void A_BrainScream(){}
final void A_BrainExplode(){}
final void A_BrainDie(){}
final void A_BrainAwake(){}
final void A_BrainSpit(){}
final void A_SpawnFly(){}
final void A_SpawnSound(){}
final void A_KeenDie(){}
final void A_BossDeath(){}

#ifndef DEHACKED
__states__
{
	S_LIGHTDONE('SHTG', 4, 0.0 / 35.0, none) = A_Light0
}
#endif

defaultproperties
{
	Ammo = DoomDefs::am_noammo;
}
