//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class DoomLevelInfo : LineSpecialLevelInfo;

const int BODYQUESIZE				= 32;

Actor bodyque[BODYQUESIZE];
int bodyqueslot;

//==========================================================================
//
//  SpawnSpecials
//
//==========================================================================

void SpawnSpecials()
{
	::SpawnSpecials();

	SpawnPushers();

	CreateTIDList();
}

//==========================================================================
//
//  FindLine
//
//==========================================================================

line_t* FindLine(int lineTag, int *searchPosition)
{
	int i;

	for (i = *searchPosition + 1; i < MainGameInfo(Game).TaggedLineCount; i++)
	{
		if (MainGameInfo(Game).TaggedLines[i].lineTag == lineTag)
		{
			*searchPosition = i;
			return MainGameInfo(Game).TaggedLines[i].line;
		}
	}
	*searchPosition = -1;
	return NULL;
}

//==========================================================================
//
//  PolyThrustMobj
//
//==========================================================================

void PolyThrustMobj(Entity A, TVec thrustDir, polyobj_t * po)
{
	float force;
	PolyobjThinker pe;

	if (!Actor(A).bShootable && !A.bIsPlayer)
	{
		return;
	}

	pe = PolyobjThinker(po->SpecialData);
	if (pe)
	{
		force = pe.thrust_force;
		if (force < 1.0)
		{
			force = 1.0;
		}
		else if (force > 128.0)
		{
			force = 128.0;
		}
	}
	else
	{
		force = 1.0;
	}

	A.Velocity += force * thrustDir;
	if (po->bCrush)
	{
		TVec testPos;

		testPos = A.Origin + force * thrustDir * Game.frametime;
		if (!A.CheckPosition(testPos))
		{
			Actor(A).Damage(none, none, 3);
		}
	}
}

//==========================================================================
//
//  PolyBusy
//
//==========================================================================

bool PolyBusy(int polyobj)
{
	polyobj_t *poly;

	poly = XLevel.GetPolyobj(polyobj);
	if (!poly->SpecialData)
	{
		return false;
	}
	else
	{
		return true;
	}
}

//==========================================================================
//
//	ThingCount
//
//==========================================================================

int ThingCount(int type, int tid)
{
	int count;
	int searcher;
	Actor Ent;
	classid moType;

	if (!(type + tid))
	{
		// Nothing to count
		return 0;
	}
	moType = FindClassFromScriptId(type);
	count = 0;
	searcher = -1;
	if (tid)
	{
		// Count TID things
		for (Ent = Actor(FindMobjFromTID(tid, &searcher)); Ent != none;
			Ent = Actor(FindMobjFromTID(tid, &searcher)))
		{
			if (type == 0)
			{
				// Just count TIDs
				count++;
			}
			else if (moType == Ent.Class)
			{
				if (Ent.bCountKill && Ent.Health <= 0)
				{
					// Don't count dead monsters
					continue;
				}
				count++;
			}
		}
	}
	else
	{
		// Count only types
		FOREACH(Actor, Ent)
		{
			if (Ent.Class != moType)
			{
				// Doesn't match
				continue;
			}
			if (Ent.bCountKill && Ent.Health <= 0)
			{
				// Don't count dead monsters
				continue;
			}
			count++;
		}
	}
	return count;
}

//==========================================================================
//
//  ExecuteActionSpecial
//
//==========================================================================

bool ExecuteActionSpecial(int Special, int Arg1, int Arg2, int Arg3,
	int Arg4, int Arg5, line_t* Line, int Side, Entity E)
{
	bool buttonSuccess;

	buttonSuccess = false;
	switch (Special)
	{
//LNSPEC_LightStop:
	case LNSPEC_QuakeTremor:
		buttonSuccess = A_LocalQuake(Arg1, Arg2, Arg3, Arg4, Arg5);
		break;
/*	case LNSPEC_UsePuzzleItem:
		buttonSuccess = EV_LineSearchForPuzzleItem(Arg1, Arg2, Arg3, Arg4,
			Arg5, A);
		break;*/
//LNSPEC_ThingActivate:
//LNSPEC_StairsBuildUpDoom:
	case LNSPEC_SectorSetWind:
		buttonSuccess = AdjustPusher(Arg1, Arg2, Arg3, Arg4, Arg5, Line,
			Pusher::PUSHER_Wind);
		break;
//LNSPEC_SectorSetFriction:
	case LNSPEC_SectorSetCurrent:
		buttonSuccess = AdjustPusher(Arg1, Arg2, Arg3, Arg4, Arg5, Line,
			Pusher::PUSHER_Current);
		break;
//LNSPEC_SectorSetGravity:

	// Inert Line specials
	default:
		buttonSuccess = ::ExecuteActionSpecial(Special, Arg1, Arg2, Arg3,
			Arg4, Arg5, Line, Side, E);
		break;
	}
	return buttonSuccess;
}

//==========================================================================
//
//  CheckActivation
//
//==========================================================================

bool CheckActivation(int activationType, line_t * line, Actor A)
{
	int lineActivation;
	bool noway;

	noway = true;
	lineActivation = GET_SPAC(line->flags);
	if (lineActivation == SPAC_PTOUCH &&
		(activationType == SPAC_PCROSS || activationType == SPAC_IMPACT))
	{
		lineActivation = activationType;
	}
	else if (lineActivation == SPAC_USETHROUGH)
	{
		lineActivation = SPAC_USE;
	}
	else if (line->special == LNSPEC_Teleport &&
		lineActivation == SPAC_CROSS && activationType == SPAC_PCROSS &&
		A && A.bMissile)
	{
		// Let missiles use regular player teleports
		lineActivation = SPAC_PCROSS;
	}
	if (lineActivation != activationType &&
		!(activationType == SPAC_MCROSS && lineActivation == SPAC_CROSS))
	{
		return false;
	}
	if (!A.bIsPlayer && !A.bMissile)
	{
		if ((activationType == SPAC_USE || activationType == SPAC_PUSH)
			&& (line->flags & ML_SECRET))
			return false;	// never open secret doors

		switch (lineActivation)
		{
		case SPAC_IMPACT:
		case SPAC_PCROSS:
			// shouldn't really be here if not a missile
		case SPAC_MCROSS:
			noway = false;
			break;

		case SPAC_CROSS:
			switch (line->special)
			{
			case LNSPEC_DoorRaise:
			case LNSPEC_PlatDownWaitUpStay:
			case LNSPEC_Teleport:
			case LNSPEC_TeleportNoFog:
			case LNSPEC_PlatDownWaitUpStayLip:
			case LNSPEC_TeleportLine:
				noway = false;
			}
			break;

		case SPAC_USE:
		case SPAC_PUSH:
			switch (line->special)
			{
			case LNSPEC_DoorRaise:
				if (line->arg1 == 0)
					noway = false;
				break;
			case LNSPEC_Teleport:
			case LNSPEC_TeleportNoFog:
				noway = false;
			}
			break;
		}
		if (noway)
			return false;
	}
	return true;
}

//==========================================================================
//
//  ActivateLine
//
//==========================================================================

bool ActivateLine(line_t* Line, Actor A, int Side, int ActivationType)
{
	int lineActivation;
	bool repeat;
	bool buttonSuccess;

	if (!CheckActivation(ActivationType, Line, A))
	{
		return false;
	}

	lineActivation = GET_SPAC(Line->flags);
	if (lineActivation == SPAC_PTOUCH)
	{
		lineActivation = ActivationType;
	}
	repeat = Line->flags & ML_REPEAT_SPECIAL;
	buttonSuccess = ExecuteActionSpecial(Line->special, Line->arg1,
		Line->arg2, Line->arg3, Line->arg4, Line->arg5, Line, Side, A);
	if ((lineActivation == SPAC_USE || lineActivation == SPAC_IMPACT ||
		lineActivation == SPAC_USETHROUGH) && buttonSuccess)
	{
		P_ChangeSwitchTexture(Line, repeat,
			Line->special == LNSPEC_ExitNormal ||
			Line->special == LNSPEC_ExitSecret ||
			Line->special == LNSPEC_TeleportNewMap ||
			Line->special == LNSPEC_TeleportEndGame
			? 'switches/exitbutn' : 'switches/normbutn');
	}
	if (!repeat && buttonSuccess)
	{
		// clear the special on non-retriggerable lines
		Line->special = 0;
	}
	return true;
}

//==========================================================================
//
//  CheckLock
//
//==========================================================================

bool CheckLock(Entity user, int lock)
{
	int		Keys;

	if (!user.bIsPlayer)
	{
		return false;
	}
	if (!lock)
	{
		return true;
	}

	Keys = Player(user.Player).Keys;
	switch (lock)
	{
	case 2:	// Blue Lock
		if (!(Keys & (1 << it_bluecard)))
		{
			user.Player.centreprint("You need a blue keycard");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 1:	// Red Lock
		if (!(Keys & (1 << it_redcard)))
		{
			user.Player.centreprint("You need a red keycard");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 3:	// Yellow Lock
		if (!(Keys & (1 << it_yellowcard)))
		{
			user.Player.centreprint("You need a yellow keycard");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 5:	// Blue Lock
		if (!(Keys & (1 << it_blueskull)))
		{
			user.Player.centreprint("You need a blue skullkey");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 4:	// Red Lock
		if (!(Keys & (1 << it_redskull)))
		{
			user.Player.centreprint("You need a red skullkey");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 6:	// Yellow Lock
		if (!(Keys & (1 << it_yellowskull)))
		{
			user.Player.centreprint("You need a yellow skullkey");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 100:	// Any key
	case 128 + 100:	// Any key
		if (!Keys)
		{
			user.Player.centreprint("You need any key");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 101:	// All keys
		if (Keys != 0x3f)
		{
			user.Player.centreprint("You need all keycards and skullkeys");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 128 + 2:	// Blue Lock
		if (!(Keys & ((1 << it_bluecard) | (1 << it_blueskull))))
		{
			user.Player.centreprint("You need a blue key");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 128 + 1:	// Red Lock
		if (!(Keys & ((1 << it_redcard) | (1 << it_redskull))))
		{
			user.Player.centreprint("You need a red key");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 128 + 3:	// Yellow Lock
		if (!(Keys & ((1 << it_yellowcard) | (1 << it_yellowskull))))
		{
			user.Player.centreprint("You need a yellow key");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;

	case 128 + 101:	// All keys
		if (!(Keys & ((1 << it_bluecard) | (1 << it_blueskull))) ||
			!(Keys & ((1 << it_redcard) | (1 << it_redskull))) ||
			!(Keys & ((1 << it_yellowcard) | (1 << it_yellowskull))))
		{
			user.Player.centreprint("You need all keys");
			user.PlaySound('*grunt', CHAN_VOICE);
			return false;
		}
		break;
	}

	return true;
}

//==========================================================================
//
//	GetPushThing
//
//	Returns a pointer to an MT_PUSH or MT_PULL thing, NULL otherwise.
//
//==========================================================================

Actor GetPushThing(int s)
{
	Actor		thing;
	sector_t*	sec;

	sec = &XLevel.Sectors[s];
	FOREACH(Actor, thing)
	{
		if (PointPusher(thing) || PointPuller(thing))
		{
			return thing;
		}
	}
	return none;
}

//==========================================================================
//
//	SpawnPushers
//
//	Initialise the sectors where pushers are present
//
//==========================================================================

void SpawnPushers()
{
	int			i;
	line_t*		l;
	int			s;
	Pusher		P;
	Actor		thing;
	int			searcher;

	for (i = 0; i < XLevel.NumLines; i++)
	{
		l = &XLevel.Lines[i];
		switch (l->special)
		{
		case LNSPEC_SectorSetWind: // wind
			for (s = XLevel.FindSectorFromTag(l->arg1, -1); s >= 0; s = XLevel.FindSectorFromTag(l->arg1, s))
			{
				P = Pusher(NewSpecialThinker(Pusher));
				P.Init(Pusher::PUSHER_Wind, l->arg4 ? l : NULL, l->arg2, l->arg3, none, s);
			}
			break;

		case LNSPEC_SectorSetCurrent: // current
			for (s = XLevel.FindSectorFromTag(l->arg1, -1); s >= 0; s = XLevel.FindSectorFromTag(l->arg1, s))
			{
				P = Pusher(NewSpecialThinker(Pusher));
				P.Init(Pusher::PUSHER_Current, l->arg4 ? l : NULL, l->arg2, l->arg3, none, s);
			}
			break;

		case LNSPEC_PointPushSetForce: // push/pull
			if (l->arg1)
			{
				// [RH] Find thing by sector
				for (s = XLevel.FindSectorFromTag(l->arg1, -1); s >= 0;
					s = XLevel.FindSectorFromTag(l->arg1, s))
				{
					thing = GetPushThing(s);
					if (thing)
					{
						// No MT_P* means no effect
						// [RH] Allow narrowing it down by tid
						if (!l->arg2 || l->arg2 == thing.TID)
						{
							P = Pusher(NewSpecialThinker(Pusher));
							P.Init(Pusher::PUSHER_Push, l->arg4 ? l : NULL, l->arg3,
								0, thing, s);
						}
					}
				}
			}
			else
			{
				// [RH] Find thing by tid
				searcher = -1;
				for (thing = Actor(FindMobjFromTID(l->arg2, &searcher)); thing;
					thing = Actor(FindMobjFromTID(l->arg2, &searcher)))
				{
					if (PointPuller(thing) || PointPusher(thing))
					{
						for (s = 0; s < XLevel.NumSectors; s++)
							if (&XLevel.Sectors[s] == thing.Sector)
								break;
						P = Pusher(NewSpecialThinker(Pusher));
						P.Init(Pusher::PUSHER_Push, l->arg4 ? l : NULL, l->arg3, 0,
							thing, s);
					}
				}
			}
			break;
		}
	}
}

//==========================================================================
//
//	AdjustPusher
//
//==========================================================================

bool AdjustPusher(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5,
	line_t* Line, int Type)
{
	int		tag;
	int		magnitude;
	int		angle;
	Pusher	Collection;
	Pusher	P;
	int		secnum;

	if (Line || Arg4)
	{
		return false;
	}
	tag = Arg1;
	magnitude = Arg2;
	angle = Arg3;
	Collection = none;
	// Find pushers already attached to the sector, and change their parameters.
	FOREACH(Pusher, P)
	{
		if (P.CheckForSectorMatch(Type, tag) >= 0)
		{
			P.ChangeValues(magnitude, angle);
			P.AdjustLink = Collection;
			Collection = P;
		}
	}

	// Now create pushers for any sectors that don't already have them.
	for (secnum = XLevel.FindSectorFromTag(tag, -1); secnum >= 0;
		secnum = XLevel.FindSectorFromTag(tag, secnum))
	{
		for (P = Collection; P; P = P.AdjustLink)
		{
			if (P.Affectee == secnum)
				break;
		}
		if (!P)
		{
			P = Pusher(NewSpecialThinker(Pusher));
			P.Init(Type, NULL, magnitude, angle, none, secnum);
		}
	}
	return true;
}

//==========================================================================
//
//	SpawnTeleportFog
//
//==========================================================================

void SpawnTeleportFog(TVec Org)
{
	Actor fogAct;

	fogAct = Spawn(TeleportFog, Org);
	fogAct.PlaySound('Teleport', CHAN_VOICE);
}

//===========================================================================
// Quake variables
//
//      Arg1     Intensity on richter scale (2..9)
//      Arg2     Duration in tics
//      Arg3     Radius for damage, in tile units (64 pixels)
//      Arg4     Radius for tremor in tile units (64 pixels)
//      Arg5     TID of map thing for focus of quake
//
//===========================================================================

//===========================================================================
//
//	A_LocalQuake
//
//===========================================================================

bool A_LocalQuake(int Arg1, int Arg2, int Arg3, int Arg4, int Arg5)
{
	QuakeFocus focus;
	Actor target;
	int lastfound = 0;
	int success = false;

	// Find all quake foci
	do
	{
		target = Actor(FindMobjFromTID(Arg5, &lastfound));
		if (target)
		{
			focus = QuakeFocus(Spawn(QuakeFocus, target.Origin));
			if (focus)
			{
				focus.Richters = Arg1;
				focus.QuakeDuration = Arg2 >> 1;	// decremented every 2 tics
				focus.DamageRadius = itof(Arg3) * 64.0;
				focus.TremorRadius = itof(Arg4) * 64.0;
				success = true;
			}
		}
	}
	while (target);

	return success;
}

//==========================================================================
//
//  SpawnMapThing
//
//  The fields of the mapthing should already be in host byte order.
//
//==========================================================================

void SpawnMapThing(mthing_t * mthing)
{
	int bit;
	Actor A;
	int spawnMask;
	classid moClass;

	if (mthing->type <= 0)
		return;

	// count deathmatch start positions
	if (mthing->type == 11)
	{
		if (NumDeathmatchStarts < MAXDEATHMATCHSTARTS)
		{
			CopyMThing(mthing, &DeathmatchStarts[NumDeathmatchStarts]);
			NumDeathmatchStarts++;
		}
		return;
	}

	// check for players specially
	if (mthing->type <= 4)
	{
		// save spots for respawning in network games
		CopyMThing(mthing, &PlayerStarts[mthing->arg1 * MAXPLAYERS +
			mthing->type - 1]);
		return;
	}
	if (mthing->type >= 4001 && mthing->type <= 4004)
	{
		// save spots for respawning in network games
		CopyMThing(mthing, &PlayerStarts[mthing->arg1 * MAXPLAYERS +
			mthing->type - 4001 + 4]);
		//	Change type to range 5-8.
		PlayerStarts[mthing->arg1 * MAXPLAYERS +
			mthing->type - 4001 + 4].type -= 4000 - 4;
		return;
	}

	if (mthing->type >= 1400 && mthing->type < 1410)
	{
		XLevel.PointInSector(vector(mthing->x,
			mthing->y, 0.0))->seqType = mthing->type - 1400;
		return;
	}

	// Check current game type with spawn flags
	if (Game.netgame == false)
	{
		spawnMask = MTF_GSINGLE;
	}
	else if (Game.deathmatch)
	{
		spawnMask = MTF_GDEATHMATCH;
	}
	else
	{
		spawnMask = MTF_GCOOP;
	}
	if (!(mthing->options & spawnMask))
	{
		return;
	}

	// check for apropriate skill level
	if (Game.gameskill == sk_baby)
		bit = 1;
	else if (Game.gameskill == sk_nightmare)
		bit = 4;
	else
		bit = 1 << (Game.gameskill - 1);

	if (!(mthing->options & bit))
		return;

	// find which type to spawn
	moClass = FindClassFromEditorId(mthing->type);
	if (moClass)
	{
		// spawn it
		A = Actor(NewMobjThinker(moClass));
		A.OnMapSpawn(mthing);
	}
	else
	{
		dprint("SpawnMapThing: Unknown type %d at (%f, %f)",
			mthing->type, mthing->x, mthing->y);
	}
}

//===========================================================================
//
//  Spawn
//
//===========================================================================

Actor Spawn(classid type, TVec AOrigin)
{
	Actor A;

	A = Actor(NewMobjThinker(type));

	A.Origin = AOrigin;
	A.OnMapSpawn(NULL);
	return A;
}

//==========================================================================
//
//  P_Massacre
//
//  Kills all monsters.
//
//==========================================================================

int P_Massacre()
{
	int count;
	Actor mo;

	count = 0;
	FOREACH(Actor, mo)
	{
		if (mo.bCountKill && (mo.Health > 0))
		{
			mo.Damage(none, none, 10000);
			count++;
		}
	}
	return count;
}

defaultproperties
{
	DefaultDoorSound = 'DoorNormal';
	DefaultCeilingSound = 'CeilingNormal';
	DefaultSilentCeilingSound = 'CeilingSemiSilent';
	DefaultFloorSound = 'Floor';
	DefaultFloorAltSound = 'Floor';
	DefaultStairStepSound = 'Floor';
	DefaultPlatformSound = 'Platform';
}
