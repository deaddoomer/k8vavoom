//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class DoomLevelInfo : LineSpecialLevelInfo;

const int BODYQUESIZE				= 32;

EntityEx bodyque[BODYQUESIZE];
int bodyqueslot;

//==========================================================================
//
//  CheckActivation
//
//==========================================================================

bool CheckActivation(int activationType, line_t * line, EntityEx A)
{
	int lineActivation;
	bool noway;

	noway = true;
	lineActivation = GET_SPAC(line->flags);
	if (lineActivation == SPAC_PTOUCH &&
		(activationType == SPAC_PCROSS || activationType == SPAC_IMPACT))
	{
		lineActivation = activationType;
	}
	else if (lineActivation == SPAC_USETHROUGH)
	{
		lineActivation = SPAC_USE;
	}
	else if (line->special == LNSPEC_Teleport &&
		lineActivation == SPAC_CROSS && activationType == SPAC_PCROSS &&
		A && A.bMissile)
	{
		// Let missiles use regular player teleports
		lineActivation = SPAC_PCROSS;
	}
	if (lineActivation != activationType &&
		!(activationType == SPAC_MCROSS && lineActivation == SPAC_CROSS))
	{
		return false;
	}
	if (!A.bIsPlayer && !A.bMissile)
	{
		if ((activationType == SPAC_USE || activationType == SPAC_PUSH)
			&& (line->flags & ML_SECRET))
			return false;	// never open secret doors

		switch (lineActivation)
		{
		case SPAC_IMPACT:
		case SPAC_PCROSS:
			// shouldn't really be here if not a missile
		case SPAC_MCROSS:
			noway = false;
			break;

		case SPAC_CROSS:
			switch (line->special)
			{
			case LNSPEC_DoorRaise:
			case LNSPEC_PlatDownWaitUpStay:
			case LNSPEC_Teleport:
			case LNSPEC_TeleportNoFog:
			case LNSPEC_PlatDownWaitUpStayLip:
			case LNSPEC_TeleportLine:
				noway = false;
			}
			break;

		case SPAC_USE:
		case SPAC_PUSH:
			switch (line->special)
			{
			case LNSPEC_DoorRaise:
				if (line->arg1 == 0)
					noway = false;
				break;
			case LNSPEC_Teleport:
			case LNSPEC_TeleportNoFog:
				noway = false;
			}
			break;
		}
		if (noway)
			return false;
	}
	return true;
}

//==========================================================================
//
//  P_Massacre
//
//  Kills all monsters.
//
//==========================================================================

int P_Massacre()
{
	int count;
	EntityEx mo;

	count = 0;
	foreach AllThinkers(EntityEx, mo)
	{
		if (mo.bMonster && (mo.Health > 0))
		{
			mo.Damage(none, none, 10000);
			count++;
		}
	}
	return count;
}

//==========================================================================
//
//	GetDehackedItemType
//
//==========================================================================

class<Inventory> GetDehackedItemType(EntityEx Item)
{
	// Identify by sprite.
	// armor
	name SpriteName = GetStateSpriteName(Item.State);
	if (SpriteName == 'arm1')
	{
		return class<Inventory>(FindClass('GreenArmor'));
	}
	if (SpriteName == 'arm2')
	{
		return class<Inventory>(FindClass('BlueArmor'));
	}
		// bonus items
	if (SpriteName == 'bon1')
	{
		return HealthBonus;
	}
	if (SpriteName == 'bon2')
	{
		return class<Inventory>(FindClass('ArmorBonus'));
	}
	if (SpriteName == 'soul')
	{
		return Soulsphere;
	}
	if (SpriteName == 'mega')
	{
		return Megasphere;
	}

	// cards
	if (SpriteName == 'bkey')
	{
		return BlueCard;
	}
	if (SpriteName == 'ykey')
	{
		return YellowCard;
	}
	if (SpriteName == 'rkey')
	{
		return RedCard;
	}
	if (SpriteName == 'bsku')
	{
		return BlueSkull;
	}
	if (SpriteName == 'ysku')
	{
		return YellowSkull;
	}
	if (SpriteName == 'rsku')
	{
		return RedSkull;
	}

	// medikits, heals
	if (SpriteName == 'stim')
	{
		return Stimpack;
	}
	if (SpriteName == 'medi')
	{
		return Medikit;
	}

	// power ups
	if (SpriteName == 'pinv')
	{
		return InvulnerabilitySphere;
	}
	if (SpriteName == 'pstr')
	{
		return Berserk;
	}
	if (SpriteName == 'pins')
	{
		return BlurSphere;
	}
	if (SpriteName == 'suit')
	{
		return RadSuit;
	}
	if (SpriteName == 'pvis')
	{
		return Infrared;
	}

	//  Items
	if (SpriteName == 'pmap')
	{
		return Allmap;
	}

	// ammo
	if (SpriteName == 'clip')
	{
		return Clip;
	}
	if (SpriteName == 'ammo')
	{
		return ClipBox;
	}
	if (SpriteName == 'rock')
	{
		return RocketAmmo;
	}
	if (SpriteName == 'brok')
	{
		return RocketBox;
	}
	if (SpriteName == 'cell')
	{
		return Cell;
	}
	if (SpriteName == 'celp')
	{
		return CellPack;
	}
	if (SpriteName == 'shel')
	{
		return Shell;
	}
	if (SpriteName == 'sbox')
	{
		return ShellBox;
	}
	if (SpriteName == 'bpak')
	{
		return Backpack;
	}

	// weapons
	if (SpriteName == 'bfug')
	{
		return BFG9000;
	}
	if (SpriteName == 'mgun')
	{
		return Chaingun;
	}
	if (SpriteName == 'csaw')
	{
		return Chainsaw;
	}
	if (SpriteName == 'laun')
	{
		return RocketLauncher;
	}
	if (SpriteName == 'plas')
	{
		return PlasmaRifle;
	}
	if (SpriteName == 'shot')
	{
		return Shotgun;
	}
	if (SpriteName == 'sgn2')
	{
		return SuperShotgun;
	}
	return none;
}

//==========================================================================
//
//	SetMarineWeapon
//
//==========================================================================

final void SetMarineWeapon(int Tid, int Weapon, Entity Activator)
{
	if (Tid)
	{
		int Searcher = -1;
		Entity Ent;
		for (Ent = Level.FindMobjFromTID(Tid, &Searcher);
			Ent; Ent = Level.FindMobjFromTID(Tid, &Searcher))
		{
			if (ScriptedMarine(Ent))
			{
				ScriptedMarine(Ent).SetWeapon(Weapon);
			}
		}
	}
	else if (ScriptedMarine(Activator))
	{
		ScriptedMarine(Activator).SetWeapon(Weapon);
	}
}

//==========================================================================
//
//	SetMarineSprite
//
//==========================================================================

final void SetMarineSprite(int Tid, name SrcClassName, Entity Activator)
{
	//	If there's no such class, print message and do nothing.
	class TmpClass = FindClass(SrcClassName);
	if (!TmpClass)
	{
		print("Unknown class %n", SrcClassName);
		return;
	}
	//	If it's not a valid actor class, it will set sprite back to default.
	class<EntityEx> SrcClass = class<EntityEx>(TmpClass);

	if (Tid)
	{
		int Searcher = -1;
		Entity Ent;
		for (Ent = Level.FindMobjFromTID(Tid, &Searcher);
			Ent; Ent = Level.FindMobjFromTID(Tid, &Searcher))
		{
			if (ScriptedMarine(Ent))
			{
				ScriptedMarine(Ent).SetSprite(SrcClass);
			}
		}
	}
	else if (ScriptedMarine(Activator))
	{
		ScriptedMarine(Activator).SetSprite(SrcClass);
	}
}

defaultproperties
{
	DefaultDoorSound = 'DoorNormal';
	DefaultCeilingSound = 'CeilingNormal';
	DefaultSilentCeilingSound = 'CeilingSemiSilent';
	DefaultFloorSound = 'Floor';
	DefaultFloorAltSound = 'Floor';
	DefaultStairStepSound = 'Floor';
	DefaultPlatformSound = 'Platform';
}
