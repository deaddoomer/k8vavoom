//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Pickup : Inventory
	abstract;

const float BONUSADD		= 0.2;

string			PickupMessage;
name			PickupSound;

//==========================================================================
//
//	HideSpecial
//
//==========================================================================

final void HideSpecial()
{
	if (ShouldRespawn() && !bDropped)
	{
		SetState(S_DORMANT_PICKUP1);
	}
	else
	{
		Destroy();
	}
}

//==========================================================================
//
//	TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	return false;
}

//==========================================================================
//
//	TouchSpecial
//
//==========================================================================

final void TouchSpecial(EntityEx Toucher)
{
	if (!Toucher.bPickUp)
	{
		// can't remove thing
		return;
	}
	// Dead thing touching.
	// Can happen with a sliding player corpse.
	if (Toucher.Health <= 0)
	{
		return;
	}

	if (!TryPickup(Actor(Toucher)))
	{
		return;
	}

	if (Special)
	{
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2], Args[3],
			Args[4], NULL, 0, Toucher);
		Special = 0;
	}
	if (bCountItem)
	{
		Toucher.Player.ItemCount++;
		Level.CurrentItems++;
	}
	Toucher.Player.cprint(PickupMessage);
	Toucher.PlaySound(PickupSound, CHAN_ITEM);
	if (bDropped || !ShouldStay())
	{
		HideSpecial();
	}
	Player(Toucher.Player).BonusFlash += BONUSADD;
}

//==========================================================================
//
//	TouchDehackedSpecial
//
//==========================================================================

final void TouchDehackedSpecial(EntityEx Toucher)
{
	if (!Toucher.bPickUp)
	{
		// can't remove thing
		return;
	}
	// Dead thing touching.
	// Can happen with a sliding player corpse.
	if (Toucher.Health <= 0)
	{
		return;
	}

	class<Pickup> ItemType = DoomLevelInfo(Level).GetDehackedItemType(self);
	if (!ItemType)
	{
		return;
	}
	Pickup Item = Spawn(ItemType);
	Item.bDropped = bDropped;
	if (!Item.TryPickup(Toucher))
	{
		Item.Destroy();
		return;
	}

	if (Special)
	{
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2], Args[3],
			Args[4], NULL, 0, Toucher);
		Special = 0;
	}
	if (bCountItem)
	{
		Toucher.Player.ItemCount++;
		Level.CurrentItems++;
	}
	Toucher.PlaySound(Item.PickupSound, CHAN_ITEM);
	if (bDropped || !Item.ShouldStay())
	{
		// only respawn items in deathmatch
		if (!bDropped && Item.ShouldRespawn())
		{
			SetState(S_DORMANT_PICKUP1);
		}
		else
		{
			Destroy();
		}
	}
	Player(Toucher.Player).BonusFlash += BONUSADD;
	Item.Destroy();
}

__states__
{
	S_DORMANT_PICKUP1('', 0, 30.0, S_DORMANT_PICKUP2)
	{
		bHidden = true;
		bSpecial = false;
	}
	S_DORMANT_PICKUP2('', 0, -1.0, none)
	{
		EntityEx	A;

		bHidden = false;
		bSpecial = true;
		SetState(IdleState);

		// spawn a teleport fog at the new spot
		A = Spawn(ItemFog, Origin);
		A.PlaySound('misc/spawn', CHAN_ITEM);
	}
}

defaultproperties
{
	PickupSound = 'misc/i_pkup';
}
