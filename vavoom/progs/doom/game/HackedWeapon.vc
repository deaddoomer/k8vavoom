//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HackedWeapon : Weapon;

state ChainFlash2;
state PlasmaFlash2;

//===========================================================================
//
//  A_Punch
//
//===========================================================================

void A_Punch()
{
	int damage;
	TAVec aimAngles;
	TVec dir;

	damage = (P_Random() % 10 + 1) << 1;

	if (Player(Player).Powers[pw_strength])
		damage *= 10;

	aimAngles = Player.MO.Angles;
	aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
		Random()) * 45.0 / 8.0);
	dir = Actor(Player.MO).AimLineAttack(aimAngles, Actor::MELEERANGE);
	Actor(Player.MO).LineAttack(dir, Actor::MELEERANGE, damage);

	// turn to face target
	if (Actor(Player.MO).linetarget)
	{
		Player.MO.PlaySound('*fist', CHAN_WEAPON);
		Player.MO.Angles.yaw = atan2(
			Actor(Player.MO).linetarget.Origin.y - Player.MO.Origin.y,
			Actor(Player.MO).linetarget.Origin.x - Player.MO.Origin.x);
		Player.bFixAngle = true;
	}
}

//===========================================================================
//
//  A_Saw
//
//===========================================================================

void A_Saw()
{
	float angle;
	int damage;
	TAVec aimAng;
	TVec dir;

	damage = 2 * (P_Random() % 10 + 1);
	aimAng = Player.MO.Angles;
	aimAng.yaw = AngleMod360(aimAng.yaw + (Random() -
		Random()) * 45.0 / 8.0);

	// use meleerange + 1 se the puff doesn't skip the flash
	dir = Actor(Player.MO).AimLineAttack(aimAng, Actor::MELEERANGE + 0.00001);
	Actor(Player.MO).LineAttack(dir, Actor::MELEERANGE + 0.00001, damage);

	if (!Actor(Player.MO).linetarget)
	{
		Player.MO.PlaySound('weapons/sawfull', CHAN_WEAPON);
		return;
	}
	Player.MO.PlaySound('weapons/sawhit', CHAN_WEAPON);

	// turn to face target
	angle = atan2(Actor(Player.MO).linetarget.Origin.y - Player.MO.Origin.y,
		Actor(Player.MO).linetarget.Origin.x - Player.MO.Origin.x);
	if (AngleMod360(angle - Player.MO.Angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - Player.MO.Angles.yaw) < -90.0 / 20.0)
			Player.MO.Angles.yaw = angle + 90.0 / 21.0;
		else
			Player.MO.Angles.yaw = Player.MO.Angles.yaw - 90.0 / 20.0;
	}
	else
	{
		if (AngleMod360(angle - Player.MO.Angles.yaw) > 90.0 / 20.0)
			Player.MO.Angles.yaw = angle - 90.0 / 21.0;
		else
			Player.MO.Angles.yaw += 90.0 / 20.0;
	}
	Player.MO.Angles.yaw = AngleMod360(Player.MO.Angles.yaw);
	Actor(Player.MO).bJustAttacked = true;
	Player.bFixAngle = true;
}

//===========================================================================
//
//  A_FirePistol
//
//===========================================================================

void A_FirePistol()
{
	TVec dir;

	Player.MO.PlaySound('weapons/pistol', CHAN_WEAPON);

	Player.MO.SetState(Actor(Player.MO).MissileState);
	Player(Player).Ammo[Ammo]--;

	Player(Player).SetPsprite(ps_flash, FlashState);

	dir = Actor(Player.MO).Aim(16.0 * 64.0);
	GunShot(Actor(Player.MO), !Player(Player).Refire, dir);
	Player.MO.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_FireShotgun
//
//===========================================================================

void A_FireShotgun()
{
	int i;
	TVec dir;

	Player.MO.PlaySound('weapons/shotgf', CHAN_WEAPON);
	Player.MO.SetState(Actor(Player.MO).MissileState);

	Player(Player).Ammo[Ammo]--;

	Player(Player).SetPsprite(ps_flash, FlashState);

	dir = Actor(Player.MO).Aim(16.0 * 64.0);
	for (i = 0; i < 7; i++)
	{
		GunShot(Actor(Player.MO), false, dir);
	}
	Player.MO.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_FireShotgun2
//
//===========================================================================

void A_FireShotgun2()
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	Player.MO.PlaySound('weapons/sshotf', CHAN_WEAPON);
	Player.MO.SetState(Actor(Player.MO).MissileState);

	Player(Player).Ammo[Ammo] -= 2;

	Player(Player).SetPsprite(ps_flash, FlashState);

	aimDir = Actor(Player.MO).Aim(16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		Actor(Player.MO).LineAttack(dir, Actor::MISSILERANGE, damage);
	}
	Player.MO.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_OpenShotgun2
//
//===========================================================================

void A_OpenShotgun2()
{
	Player.MO.PlaySound('weapons/sshoto', CHAN_WEAPON);
}

//===========================================================================
//
//  A_LoadShotgun2
//
//===========================================================================

void A_LoadShotgun2()
{
	Player.MO.PlaySound('weapons/sshotl', CHAN_WEAPON);
}

//===========================================================================
//
//  A_CloseShotgun2
//
//===========================================================================

void A_CloseShotgun2()
{
	Player.MO.PlaySound('weapons/sshotc', CHAN_WEAPON);
	A_ReFire();
}

//===========================================================================
//
//  A_FireCGun
//
//===========================================================================

void A_FireCGun()
{
	TVec dir;

	Player.MO.PlaySound('weapons/chngun', CHAN_WEAPON);

	if (!Player(Player).Ammo[Ammo])
		return;

	Player.MO.SetState(Actor(Player.MO).MissileState);
	Player(Player).Ammo[Ammo]--;

	if (State == AttackState)
		Player(Player).SetPsprite(ps_flash, FlashState);
	else
		Player(Player).SetPsprite(ps_flash, ChainFlash2);

	dir = Actor(Player.MO).Aim(16.0 * 64.0);
	GunShot(Actor(Player.MO), !Player(Player).Refire, dir);
	Player.MO.Effects |= DoomDefs::EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_FireMissile
//
//===========================================================================

void A_FireMissile()
{
	Player(Player).Ammo[Ammo]--;
	Player(Player).SpawnPlayerMissile(Rocket);
}

//===========================================================================
//
//  A_FirePlasma
//
//===========================================================================

void A_FirePlasma()
{
	Player(Player).Ammo[Ammo]--;

	if (!(P_Random() & 1))
		Player(Player).SetPsprite(ps_flash, FlashState);
	else
		Player(Player).SetPsprite(ps_flash, PlasmaFlash2);

	Player(Player).SpawnPlayerMissile(PlasmaShot);
}

//===========================================================================
//
//  A_BFGsound
//
//===========================================================================

void A_BFGsound()
{
	Player.MO.PlaySound('weapons/bfgf', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireBFG
//
//===========================================================================

void A_FireBFG()
{
	Player(Player).Ammo[Ammo] -= BFGCELLS;
	Player(Player).SpawnPlayerMissile(BFGShot);
}

defaultproperties
{
}
