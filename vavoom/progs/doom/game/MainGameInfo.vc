//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MainGameInfo : LineSpecialGameInfo;

const int NUM_SPECIALS = 348;

struct spec_trans_t
{
	int special;
	int arg1;
	int arg2;
	int arg3;
	int arg4;
	int arg5;
	int spac;
	int repeat;
};

spec_trans_t spec_trans_tab[NUM_SPECIALS];

int botskill;
BotPlayer::botinfo_t botinfo[12];

#ifndef DOOM2
bool shareware;
#endif

int INITIAL_HEALTH;
int GOD_HEALTH;

//==========================================================================
//
//	Init
//
//==========================================================================

void Init()
{
	::Init();
#ifndef DOOM2
	shareware = !WadLumpPresent('e2m1');
#endif
	InitTranslationTables();
	InitBotTypes();
}

//==========================================================================
//
//  InitNewGame
//
//==========================================================================

void InitNewGame(int skill)
{
	SetSkill(skill);
	nomonsters = GetCvar('NoMonsters');
	bRespawnItems = GetCvar('deathmatch') >= 2;
	bWeaponsStay = netgame && GetCvar('deathmatch') < 2;
}

//==========================================================================
//
//	SetSkill
//
//==========================================================================

void SetSkill(int NewSkill)
{
	::SetSkill(NewSkill);
	respawnmonsters = WorldInfo.GameSkill == sk_nightmare || GetCvar('RespawnMonsters');
}

//==========================================================================
//
//  CreateWorldInfo
//
//==========================================================================

WorldInfo CreateWorldInfo()
{
	return WorldInfo(SpawnObject(DoomWorldInfo));
}

//==========================================================================
//
//  InitBotTypes
//
//==========================================================================

void InitBotTypes()
{
	SetBotType(0,
		"bot1",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot1\\colour\\green\\class\\0\\model\\doomguy"
	);
	SetBotType(1,
		"bot2",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot2\\colour\\black\\class\\0\\model\\doomguy"
	);
	SetBotType(2,
		"bot3",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot3\\colour\\white\\class\\0\\model\\doomguy"
	);
	SetBotType(3,
		"bot4",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot4\\colour\\brown\\class\\0\\model\\doomguy"
	);
	SetBotType(4,
		"bot5",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot5\\colour\\red\\class\\0\\model\\doomguy"
	);
	SetBotType(5,
		"bot6",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot6\\colour\\pink\\class\\0\\model\\doomguy"
	);
	SetBotType(6,
		"bot7",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot7\\colour\\blue\\class\\0\\model\\doomguy"
	);
	SetBotType(7,
		"bot8",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot8\\colour\\indigo\\class\\0\\model\\doomguy"
	);
	SetBotType(8,
		"bot9",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot9\\colour\\magenta\\class\\0\\model\\doomguy"
	);
	SetBotType(9,
		"bot10",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot10\\colour\\purple\\class\\0\\model\\doomguy"
	);
	SetBotType(10,
		"bot11",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot11\\colour\\orange\\class\\0\\model\\doomguy"
	);
	SetBotType(11,
		"bot12",
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		BotPlayer::bsk_medium,
		"\\Name\\bot12\\colour\\yellow\\class\\0\\model\\doomguy"
	);
}

//==========================================================================
//
//  SetBotType
//
//==========================================================================

void SetBotType(int i, string Name, int accuracy, int intelect, int evade,
	int anticip, int reaction, string userinfo)
{
	botinfo[i].Name = Name;
	botinfo[i].accuracy = accuracy;
	botinfo[i].intelect = intelect;
	botinfo[i].evade = evade;
	botinfo[i].anticip = anticip;
	botinfo[i].reaction = reaction;
	botinfo[i].userinfo = userinfo;
}

//==========================================================================
//
//	InitTranslationTables
//
//==========================================================================

void InitTranslationTables()
{
	//  0
	SetLineTrans(1, LNSPEC_DoorRaise, 0, 16, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(2, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(3, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(4, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_CROSS, false);
	SetLineTrans(5, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(6, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_CROSS, false);
	SetLineTrans(7, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_USE, false);
	SetLineTrans(8, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_CROSS, false);
	SetLineTrans(9, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_USE, false);

	SetLineTrans(10, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_CROSS, false);
	SetLineTrans(11, LNSPEC_ExitNormal, -1, 0, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(12, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(13, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(14, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_USE, false);
	SetLineTrans(15, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_USE, false);
	SetLineTrans(16, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_CROSS, false);
	SetLineTrans(17, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_CROSS, false);
	SetLineTrans(18, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(19, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_CROSS, false);

	SetLineTrans(20, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(21, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_USE, false);
	SetLineTrans(22, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(23, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(24, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_IMPACT, false);
	SetLineTrans(25, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_CROSS, false);
	SetLineTrans(26, LNSPEC_DoorLockedRaise, 0, 16, 150, 2 | 128, 0, SPAC_USE, true);
	SetLineTrans(27, LNSPEC_DoorLockedRaise, 0, 16, 150, 3 | 128, 0, SPAC_USE, true);
	SetLineTrans(28, LNSPEC_DoorLockedRaise, 0, 16, 150, 1 | 128, 0, SPAC_USE, true);
	SetLineTrans(29, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_USE, false);

	SetLineTrans(30, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(31, LNSPEC_DoorOpen, 0, 16, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(32, LNSPEC_DoorLockedRaise, 0, 16, 0, 2 | 128, 0, SPAC_USE, false);
	SetLineTrans(33, LNSPEC_DoorLockedRaise, 0, 16, 0, 1 | 128, 0, SPAC_USE, false);
	SetLineTrans(34, LNSPEC_DoorLockedRaise, 0, 16, 0, 3 | 128, 0, SPAC_USE, false);
	SetLineTrans(35, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(36, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_CROSS, false);
	SetLineTrans(37, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(38, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(39, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(40, LNSPEC_CeilingGeneric, -1, 8, 0, 1, 8, SPAC_CROSS, false);
	SetLineTrans(41, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(42, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(43, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(44, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(45, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_USE, true);
	SetLineTrans(46, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_IMPACT, true);
	SetLineTrans(47, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_IMPACT, false);
	SetLineTrans(48, LNSPEC_ScrollTextureLeft, 64, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(49, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_USE, false);

	SetLineTrans(50, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(51, LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(52, LNSPEC_ExitNormal, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(53, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_CROSS, false);
	SetLineTrans(54, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(55, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_USE, false);
	SetLineTrans(56, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_CROSS, false);
	SetLineTrans(57, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(58, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_CROSS, false);
	SetLineTrans(59, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_CROSS, false);

	SetLineTrans(60, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(61, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(62, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_USE, true);
	SetLineTrans(63, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(64, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(65, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_USE, true);
	SetLineTrans(66, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_USE, true);
	SetLineTrans(67, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_USE, true);
	SetLineTrans(68, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(69, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_USE, true);

	SetLineTrans(70, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_USE, true);
	SetLineTrans(71, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_USE, false);
	SetLineTrans(72, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(73, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_CROSS, true);
	SetLineTrans(74, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(75, LNSPEC_DoorClose, -1, 16, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(76, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_CROSS, true);
	SetLineTrans(77, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_CROSS, true);
	SetLineTrans(78, LNSPEC_FloorTransferNumeric, -1, 0, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(79, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_CROSS, true);

	SetLineTrans(80, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(81, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(82, LNSPEC_FloorLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(83, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_CROSS, true);
	SetLineTrans(84, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(85, LNSPEC_ScrollTextureRight, 64, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(86, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(87, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_CROSS, true);
	SetLineTrans(88, LNSPEC_PlatDownWaitUpStayLip, -1, 32, 105, 0, 0, SPAC_CROSS, true);
	SetLineTrans(89, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_CROSS, true);

	SetLineTrans(90, LNSPEC_DoorRaise, -1, 16, 150, 0, 0, SPAC_CROSS, true);
	SetLineTrans(91, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(92, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_CROSS, true);
	SetLineTrans(93, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_CROSS, true);
	SetLineTrans(94, LNSPEC_FloorRaiseAndCrush, -1, 8, 10, 0, 0, SPAC_CROSS, true);
	SetLineTrans(95, LNSPEC_FloorRaiseToNearestChange, -1, 4, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(96, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(97, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(98, LNSPEC_FloorLowerToHighest, -1, 32, 136, 0, 0, SPAC_CROSS, true);
	SetLineTrans(99, LNSPEC_DoorLockedRaise, -1, 64, 0, 2 | 128, 0, SPAC_USE, true);

	SetLineTrans(100, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_CROSS, false);
	SetLineTrans(101, LNSPEC_FloorRaiseToLowestCeiling, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(102, LNSPEC_FloorLowerToHighest, -1, 8, 128, 0, 0, SPAC_USE, false);
	SetLineTrans(103, LNSPEC_DoorOpen, -1, 16, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(104, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(105, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_CROSS, true);
	SetLineTrans(106, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(107, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(108, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_CROSS, false);
	SetLineTrans(109, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(110, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(111, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_USE, false);
	SetLineTrans(112, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(113, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(114, LNSPEC_DoorRaise, -1, 64, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(115, LNSPEC_DoorOpen, -1, 64, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(116, LNSPEC_DoorClose, -1, 64, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(117, LNSPEC_DoorRaise, 0, 64, 150, 0, 0, SPAC_USE, true);
	SetLineTrans(118, LNSPEC_DoorOpen, 0, 64, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(119, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(120, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_CROSS, true);
	SetLineTrans(121, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_CROSS, false);
	SetLineTrans(122, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_USE, false);
	SetLineTrans(123, LNSPEC_PlatDownWaitUpStayLip, -1, 64, 105, 0, 0, SPAC_USE, true);
	SetLineTrans(124, LNSPEC_ExitSecret, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(125, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCROSS, false);
	SetLineTrans(126, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_MCROSS, true);
	SetLineTrans(127, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_USE, false);
	SetLineTrans(128, LNSPEC_FloorRaiseToNearest, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(129, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, true);

	SetLineTrans(130, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(131, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(132, LNSPEC_FloorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(133, LNSPEC_DoorLockedRaise, -1, 64, 0, 2 | 128, 0, SPAC_USE, false);
	SetLineTrans(134, LNSPEC_DoorLockedRaise, -1, 64, 0, 1 | 128, 0, SPAC_USE, true);
	SetLineTrans(135, LNSPEC_DoorLockedRaise, -1, 64, 0, 1 | 128, 0, SPAC_USE, false);
	SetLineTrans(136, LNSPEC_DoorLockedRaise, -1, 64, 0, 3 | 128, 0, SPAC_USE, true);
	SetLineTrans(137, LNSPEC_DoorLockedRaise, -1, 64, 0, 3 | 128, 0, SPAC_USE, false);
	SetLineTrans(138, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(139, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_USE, true);

	SetLineTrans(140, LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_USE, false);
	SetLineTrans(141, LNSPEC_CeilingCrushAndRaiseSilentA, -1, 8, 8, 10, 0, SPAC_CROSS, false);
	SetLineTrans(142, LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_CROSS, false);
	SetLineTrans(143, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_CROSS, false);
	SetLineTrans(144, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_CROSS, false);
	SetLineTrans(145, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(146, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_CROSS, false);
	SetLineTrans(147, LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_CROSS, true);
	SetLineTrans(148, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 3, 0, 0, SPAC_CROSS, true);
	SetLineTrans(149, LNSPEC_FloorRaiseByValueChangeTex, -1, 4, 4, 0, 0, SPAC_CROSS, true);

	SetLineTrans(150, LNSPEC_CeilingCrushAndRaiseSilentA, -1, 8, 8, 10, 0, SPAC_CROSS, true);
	SetLineTrans(151, LNSPEC_FloorAndCeilingLowerRaise, -1, 8, 8, 0, 0, SPAC_CROSS, true);
	SetLineTrans(152, LNSPEC_CeilingLowerToFloor, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(153, LNSPEC_FloorTransferTrigger, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(154, LNSPEC_FloorTransferTrigger, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(155, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_CROSS, true);
	SetLineTrans(156, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_CROSS, true);
	SetLineTrans(157, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(158, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(159, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_USE, false);

	SetLineTrans(160, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_USE, false);
	SetLineTrans(161, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_USE, false);
	SetLineTrans(162, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_USE, false);
	SetLineTrans(163, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(164, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_USE, false);
	SetLineTrans(165, LNSPEC_CeilingCrushAndRaiseSilentA, -1, 8, 8, 10, 0, SPAC_USE, false);
	SetLineTrans(166, LNSPEC_CeilingGeneric, -1, 8, 0, 1, 8, SPAC_USE, false);
	SetLineTrans(167, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(168, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(169, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_USE, false);

	SetLineTrans(170, LNSPEC_LightChangeToValue, -1, 35, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(171, LNSPEC_LightChangeToValue, -1, 255, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(172, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_USE, false);
	SetLineTrans(173, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(174, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(175, LNSPEC_DoorCloseWaitOpen, -1, 8, 240, 0, 0, SPAC_USE, false);
	SetLineTrans(176, LNSPEC_FloorRaiseByTexture, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(177, LNSPEC_FloorLowerToLowestChange, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(178, LNSPEC_FloorRaiseByValueTimes8, -1, 8, 64, 0, 0, SPAC_USE, true);
	SetLineTrans(179, LNSPEC_FloorRaiseByValueChange, -1, 8, 24, 0, 0, SPAC_USE, true);

	SetLineTrans(180, LNSPEC_FloorRaiseByValue, -1, 8, 24, 0, 0, SPAC_USE, true);
	SetLineTrans(181, LNSPEC_PlatPerpetualRaiseLip, -1, 8, 105, 0, 0, SPAC_USE, true);
	SetLineTrans(182, LNSPEC_PlatStop, -1, 0, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(183, LNSPEC_CeilingCrushAndRaiseA, -1, 16, 16, 10, 0, SPAC_USE, true);
	SetLineTrans(184, LNSPEC_CeilingCrushAndRaiseA, -1, 8, 8, 10, 0, SPAC_USE, true);
	SetLineTrans(185, LNSPEC_CeilingCrushAndRaiseSilentA, -1, 8, 8, 10, 0, SPAC_USE, true);
	SetLineTrans(186, LNSPEC_CeilingGeneric, -1, 8, 0, 1, 8, SPAC_USE, true);
	SetLineTrans(187, LNSPEC_CeilingLowerAndCrush, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(188, LNSPEC_CeilingCrushStop, -1, 0, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(189, LNSPEC_FloorTransferTrigger, -1, 0, 0, 0, 0, SPAC_USE, false);

	SetLineTrans(190, LNSPEC_FloorTransferTrigger, -1, 0, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(191, LNSPEC_FloorDonut, -1, 4, 4, 0, 0, SPAC_USE, true);
	SetLineTrans(192, LNSPEC_LightMaxNeighbor, -1, 0, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(193, LNSPEC_LightStrobeDoom, -1, 5, 35, 0, 0, SPAC_USE, true);
	SetLineTrans(194, LNSPEC_LightMinNeighbor, -1, 0, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(195, LNSPEC_Teleport, 0, -1, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(196, LNSPEC_DoorCloseWaitOpen, -1, 16, 240, 0, 0, SPAC_USE, true);
	SetLineTrans(197, LNSPEC_ExitNormal, 0, 0, 0, 0, 0, SPAC_IMPACT, false);
	SetLineTrans(198, LNSPEC_ExitSecret, 0, 0, 0, 0, 0, SPAC_IMPACT, false);
	SetLineTrans(199, LNSPEC_CeilingLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(200, LNSPEC_CeilingLowerToHighestFloor, -1, 8, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(201, LNSPEC_CeilingLowerToLowest, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(202, LNSPEC_CeilingLowerToHighestFloor, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(203, LNSPEC_CeilingLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(204, LNSPEC_CeilingLowerToHighestFloor, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(205, LNSPEC_CeilingLowerToLowest, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(206, LNSPEC_CeilingLowerToHighestFloor, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(207, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_CROSS, false);
	SetLineTrans(208, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(209, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_USE, false);

	SetLineTrans(210, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_USE, true);
	SetLineTrans(211, LNSPEC_PlatToggle, -1, 0, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(212, LNSPEC_PlatToggle, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(213, LNSPEC_TransferFloorLight, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(214, LNSPEC_ScrollCeiling, -1, 6, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(215, LNSPEC_ScrollFloor, -1, 6, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(216, LNSPEC_ScrollFloor, -1, 6, 1, 0, 0, SPAC_CROSS, false);
	SetLineTrans(217, LNSPEC_ScrollFloor, -1, 6, 2, 0, 0, SPAC_CROSS, false);
	SetLineTrans(218, LNSPEC_ScrollTextureModel, -1, 2, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(219, LNSPEC_FloorLowerToNearest, -1, 8, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(220, LNSPEC_FloorLowerToNearest, -1, 8, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(221, LNSPEC_FloorLowerToNearest, -1, 8, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(222, LNSPEC_FloorLowerToNearest, -1, 8, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(223, LNSPEC_SectorSetFriction, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(224, LNSPEC_SectorSetWind, -1, 0, 0, 1, 0, SPAC_CROSS, false);
	SetLineTrans(225, LNSPEC_SectorSetCurrent, -1, 0, 0, 1, 0, SPAC_CROSS, false);
	SetLineTrans(226, LNSPEC_PointPushSetForce, -1, 0, 0, 1, 0, SPAC_CROSS, false);
	SetLineTrans(227, LNSPEC_ElevatorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(228, LNSPEC_ElevatorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(229, LNSPEC_ElevatorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_USE, false);

	SetLineTrans(230, LNSPEC_ElevatorRaiseToNearest, -1, 32, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(231, LNSPEC_ElevatorLowerToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(232, LNSPEC_ElevatorLowerToNearest, -1, 32, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(233, LNSPEC_ElevatorLowerToNearest, -1, 32, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(234, LNSPEC_ElevatorLowerToNearest, -1, 32, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(235, LNSPEC_ElevatorMoveToFloor, -1, 32, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(236, LNSPEC_ElevatorMoveToFloor, -1, 32, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(237, LNSPEC_ElevatorMoveToFloor, -1, 32, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(238, LNSPEC_ElevatorMoveToFloor, -1, 32, 0, 0, 0, SPAC_USE, true);
	SetLineTrans(239, LNSPEC_FloorTransferNumeric, -1, 0, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(240, LNSPEC_FloorTransferNumeric, -1, 0, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(241, LNSPEC_FloorTransferNumeric, -1, 0, 0, 0, 0, SPAC_USE, false);
	SetLineTrans(242, LNSPEC_TransferHeights, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(243, LNSPEC_TeleportLine, -1, -1, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(244, LNSPEC_TeleportLine, -1, -1, 0, 0, 0, SPAC_CROSS, true);
	SetLineTrans(245, LNSPEC_ScrollCeiling, -1, 5, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(246, LNSPEC_ScrollFloor, -1, 5, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(247, LNSPEC_ScrollFloor, -1, 5, 1, 0, 0, SPAC_CROSS, false);
	SetLineTrans(248, LNSPEC_ScrollFloor, -1, 5, 2, 0, 0, SPAC_CROSS, false);
	SetLineTrans(249, LNSPEC_ScrollTextureModel, -1, 1, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(250, LNSPEC_ScrollCeiling, -1, 4, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(251, LNSPEC_ScrollFloor, -1, 4, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(252, LNSPEC_ScrollFloor, -1, 4, 1, 0, 0, SPAC_CROSS, false);
	SetLineTrans(253, LNSPEC_ScrollFloor, -1, 4, 2, 0, 0, SPAC_CROSS, false);
	SetLineTrans(254, LNSPEC_ScrollTextureModel, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(255, LNSPEC_ScrollTextureOffsets, 0, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(256, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_CROSS, true);
	SetLineTrans(257, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_CROSS, true);
	SetLineTrans(258, LNSPEC_StairsBuildUpDoom, -1, 2, 8, 0, 0, SPAC_USE, true);
	SetLineTrans(259, LNSPEC_StairsBuildUpDoom, -1, 32, 16, 0, 0, SPAC_USE, true);

	SetLineTrans(260, LNSPEC_LineTranslucent, -1, 128, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(261, LNSPEC_TransferCeilingLight, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(262, LNSPEC_TeleportLine, -1, -1, 1, 0, 0, SPAC_CROSS, false);
	SetLineTrans(263, LNSPEC_TeleportLine, -1, -1, 1, 0, 0, SPAC_CROSS, true);
	SetLineTrans(264, LNSPEC_TeleportLine, -1, -1, 1, 0, 0, SPAC_MCROSS, false);
	SetLineTrans(265, LNSPEC_TeleportLine, -1, -1, 1, 0, 0, SPAC_MCROSS, true);
	SetLineTrans(266, LNSPEC_TeleportLine, -1, -1, 0, 0, 0, SPAC_MCROSS, false);
	SetLineTrans(267, LNSPEC_TeleportLine, -1, -1, 0, 0, 0, SPAC_MCROSS, true);
	SetLineTrans(268, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_MCROSS, false);
	SetLineTrans(269, LNSPEC_TeleportNoFog, 0, 0, -1, 0, 0, SPAC_MCROSS, true);

	//	270
	SetLineTrans(271, 0, -1, 255, 0, 0, 0, SPAC_CROSS, false); // LNSPEC_StaticInit
	SetLineTrans(272, 0, -1, 255, 1, 0, 0, SPAC_CROSS, false); // LNSPEC_StaticInit

	SetLineTrans(333, LNSPEC_StaticInit, -1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(334, LNSPEC_StaticInit, -1, 1, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(335, LNSPEC_StaticInit, -1, 2, 0, 0, 0, SPAC_CROSS, false);

	SetLineTrans(340, LNSPEC_PlaneAlign, 1, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(341, LNSPEC_PlaneAlign, 0, 1, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(342, LNSPEC_PlaneAlign, 1, 1, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(343, LNSPEC_PlaneAlign, 2, 0, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(344, LNSPEC_PlaneAlign, 0, 2, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(345, LNSPEC_PlaneAlign, 2, 2, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(346, LNSPEC_PlaneAlign, 2, 1, 0, 0, 0, SPAC_CROSS, false);
	SetLineTrans(347, LNSPEC_PlaneAlign, 1, 2, 0, 0, 0, SPAC_CROSS, false);
}

//==========================================================================
//
//	SetLineTrans
//
//==========================================================================

void SetLineTrans(int i, int special, int arg1, int arg2, int arg3,
	int arg4, int arg5, int spac, int repeat)
{
	spec_trans_tab[i].special = special;
	spec_trans_tab[i].arg1 = arg1;
	spec_trans_tab[i].arg2 = arg2;
	spec_trans_tab[i].arg3 = arg3;
	spec_trans_tab[i].arg4 = arg4;
	spec_trans_tab[i].arg5 = arg5;
	spec_trans_tab[i].spac = spac;
	spec_trans_tab[i].repeat = repeat;
}

//==========================================================================
//
//  TranslateLine
//
//==========================================================================

void TranslateLine(Level InLevel, line_t* line)
{
	int			OldSpec;
	int			OldTag;
	int			OldFlags;

	OldSpec = line->special;
	OldTag = line->arg1;
	OldFlags = line->flags;

	//	Clear unknown flags.
	line->flags &= 0x01ff;

	//	For BOOM compatibility all lines needs to have it's ID same as tag.
	if (OldTag)
	{
		line->LineTag = OldTag;
	}

	if (!line->special)
	{
		return;
	}

	//	Handle Boom's generalised types.
	if (OldSpec > 0x2F80)
	{
		//	Activation flags.
		switch (OldSpec & 0x0006)
		{
		case 0:
			line->flags |= SPAC_CROSS << ML_SPAC_SHIFT;
			break;

		case 2:
		case 6:
			if (OldFlags & 0x0200)
				line->flags |= SPAC_USETHROUGH << ML_SPAC_SHIFT;
			else
				line->flags |= SPAC_USE << ML_SPAC_SHIFT;
			break;

		case 4:
			line->flags |= SPAC_IMPACT << ML_SPAC_SHIFT;
			break;
		}
		if (OldSpec & 1)
		{
			line->flags |= ML_REPEAT_SPECIAL;
		}

		//	We treat push triggers like switch triggers with zero tags.
		if ((OldSpec & 0x0006) == 6)
		{
			line->arg1 = 0;
		}
		else
		{
			line->arg1 = OldTag;
		}

		if (OldSpec < 0x3000)
		{
			//	Generalised crusher (tag, dnspeed, upspeed, silent, damage)
			line->special = LNSPEC_CeilingGenericCrush;
			if (OldSpec & 0x0020)
			{
				line->flags |= ML_MONSTERSCANACTIVATE;
			}
			switch (OldSpec & 0x0018)
			{
			case 0x0000:	line->arg2 = 8;		break;
			case 0x0008:	line->arg2 = 16;	break;
			case 0x0010:	line->arg2 = 32;	break;
			case 0x0018:	line->arg2 = 64;	break;
			}
			line->arg3 = line->arg2;
			line->arg4 = (OldSpec & 0x0040) >> 6;
			line->arg5 = 10;
		}
		else if (OldSpec < 0x3400)
		{
			//	Generalised stairs (tag, speed, step, dir/igntxt, reset)
			line->special = LNSPEC_StairsGeneric;
			if (OldSpec & 0x0020)
			{
				line->flags |= ML_MONSTERSCANACTIVATE;
			}
			switch (OldSpec & 0x0018)
			{
			case 0x0000:	line->arg2 = 2;		break;
			case 0x0008:	line->arg2 = 4;		break;
			case 0x0010:	line->arg2 = 16;	break;
			case 0x0018:	line->arg2 = 32;	break;
			}
			switch (OldSpec & 0x00c0)
			{
			case 0x0000:	line->arg3 = 4;		break;
			case 0x0040:	line->arg3 = 8;		break;
			case 0x0080:	line->arg3 = 16;	break;
			case 0x00c0:	line->arg3 = 24;	break;
			}
			line->arg4 = (OldSpec & 0x0300) >> 8;
			line->arg5 = 0;
		}
		else if (OldSpec < 0x3800)
		{
			//	Generalised lift (tag, speed, delay, target, height)
			line->special = LNSPEC_PlatGeneric;
			if (OldSpec & 0x0020)
			{
				line->flags |= ML_MONSTERSCANACTIVATE;
			}
			switch (OldSpec & 0x0018)
			{
			case 0x0000:	line->arg2 = 16;	break;
			case 0x0008:	line->arg2 = 32;	break;
			case 0x0010:	line->arg2 = 64;	break;
			case 0x0018:	line->arg2 = 128;	break;
			}
			switch (OldSpec & 0x00c0)
			{
			case 0x0000:	line->arg3 = 8;		break;
			case 0x0040:	line->arg3 = 24;	break;
			case 0x0080:	line->arg3 = 40;	break;
			case 0x00c0:	line->arg3 = 80;	break;
			}
			line->arg4 = ((OldSpec & 0x0300) >> 8) + 1;
			line->arg5 = 0;
		}
		else if (OldSpec < 0x3c00)
		{
			//	Generalised locked door (tag, speed, kind, delay, lock)
			line->special = LNSPEC_DoorGeneric;
			if (OldSpec & 0x0080)
			{
				line->flags |= ML_MONSTERSCANACTIVATE;
			}
			switch (OldSpec & 0x0018)
			{
			case 0x0000:	line->arg2 = 16;	break;
			case 0x0008:	line->arg2 = 32;	break;
			case 0x0010:	line->arg2 = 64;	break;
			case 0x0018:	line->arg2 = 128;	break;
			}
			line->arg3 = (OldSpec & 0x0020) >> 5;
			line->arg4 = 0;
			line->arg5 = (OldSpec & 0x01c0) >> 6;
			if (line->arg5 == 0)
			{
				line->arg5 = 100;
			}
			else if (line->arg5 == 7)
			{
				line->arg5 = 101;
			}
			line->arg5 |= (OldSpec & 0x0200) >> 2;
		}
		else if (OldSpec < 0x4000)
		{
			//	Generalised door (tag, speed, kind, delay, lock)
			line->special = LNSPEC_DoorGeneric;
			switch (OldSpec & 0x0018)
			{
			case 0x0000:	line->arg2 = 16;	break;
			case 0x0008:	line->arg2 = 32;	break;
			case 0x0010:	line->arg2 = 64;	break;
			case 0x0018:	line->arg2 = 128;	break;
			}
			line->arg3 = (OldSpec & 0x0060) >> 5;
			if ((OldSpec & 0x0006) == 6)
			{
				line->arg1 = OldTag;
				line->arg3 |= 128;
			}
			switch (OldSpec & 0x0300)
			{
			case 0x0000:	line->arg4 = 8;		break;
			case 0x0100:	line->arg4 = 32;	break;
			case 0x0200:	line->arg4 = 72;	break;
			case 0x0300:	line->arg4 = 240;	break;
			}
			line->arg5 = 0;
		}
		else
		{
			//	Generalised ceiling (tag, speed, height, target, change/model/direct/crush)
			//	Generalised floor (tag, speed, height, target, change/model/direct/crush)
			if (OldSpec < 0x6000)
				line->special = LNSPEC_CeilingGeneric;
			else
				line->special = LNSPEC_FloorGeneric;

			switch (OldSpec & 0x0018)
			{
			case 0x0000:	line->arg2 = 8;		break;
			case 0x0008:	line->arg2 = 16;	break;
			case 0x0010:	line->arg2 = 32;	break;
			case 0x0018:	line->arg2 = 64;	break;
			}
			line->arg4 = ((OldSpec & 0x0380) >> 7) + 1;
			if (line->arg4 >= 7)
			{
				line->arg3 = 24 + (line->arg4 - 7) * 8;
				line->arg4 = 0;
			}
			else
			{
				line->arg3 = 0;
			}
			line->arg5 =  ((OldSpec & 0x0c00) >> 10) |
						  ((OldSpec & 0x0060) >> 3) |
						  ((OldSpec & 0x1000) >> 8);
		}
		return;
	}

	switch (OldSpec)
	{
	// Doom Legacy 3D floors
	case 281:
	case 289:
	case 300:
	//case 301:
	// EDGE 3D floors
	case 400:
	case 401:
	case 402:
	case 403:
	case 404:
	case 405:
	case 406:
	case 407:
	case 408:
	case 413:
	case 414:
	case 415:
	case 416:
	case 417:
		if (GetPlanePointZ(&line->frontsector->floor,
				*line->frontsector->lines[0]->v1) < 
			GetPlanePointZ(&line->frontsector->ceiling,
				*line->frontsector->lines[0]->v1))
		{
			InLevel.SwapPlanes(line->frontsector);
		}
		break;
	}
	switch (OldSpec)
 	{
 	case 281:
	case 289:
		line->special = 160;
		return;
	case 300:
		line->special = 160;
		line->frontsector->floor.Alpha = 0.5;
		line->frontsector->ceiling.Alpha = 0.5;
		return;
	// Doesn't work
	/*case 301:
		line->special = 160;
		line->frontsector->params.contents = CONTENTS_WATER;
		line->frontsector->floor.translucency = 50;
		line->frontsector->ceiling.translucency = 50;
		line->frontsector->ceiling.flags = 7;
		line->frontsector->floor.flags = 7;
		return;*/
	// EDGE 3D floors
	case 400:
		line->special = 160;
		return;
	case 401:
		line->special = 160;
		return;
	case 402:
		line->special = 160;
		return;
	case 403:
		line->special = 160;
		line->frontsector->params.contents = CONTENTS_WATER;
		line->frontsector->ceiling.flags = 7;
		line->frontsector->floor.flags = 7;
		return;
	case 404:
		line->special = 160;
		line->frontsector->params.contents = CONTENTS_WATER;
		line->frontsector->floor.Alpha = 0.8;
		line->frontsector->ceiling.Alpha = 0.8;
		line->frontsector->ceiling.flags = 7;
		line->frontsector->floor.flags = 7;
		return;
	case 405:
		line->special = 160;
		line->frontsector->params.contents = CONTENTS_WATER;
		line->frontsector->floor.Alpha = 0.6;
		line->frontsector->ceiling.Alpha = 0.6;
		line->frontsector->ceiling.flags = 7;
		line->frontsector->floor.flags = 7;
		return;
	case 406:
		line->special = 160;
		line->frontsector->params.contents = CONTENTS_WATER;
		line->frontsector->floor.Alpha = 0.4;
		line->frontsector->ceiling.Alpha = 0.4;
		line->frontsector->ceiling.flags = 7;
		line->frontsector->floor.flags = 7;
		return;
	case 407:
		line->special = 160;
		line->frontsector->params.contents = CONTENTS_WATER;
		line->frontsector->floor.Alpha = 0.2;
		line->frontsector->ceiling.Alpha = 0.2;
		line->frontsector->ceiling.flags = 7;
		line->frontsector->floor.flags = 7;
		return;
	case 408:
		line->special = 160;
		line->frontsector->params.contents = CONTENTS_WATER;
		line->frontsector->floor.Alpha = 0.0;
		line->frontsector->ceiling.Alpha = 0.0;
		line->frontsector->ceiling.flags = 7;
		line->frontsector->floor.flags = 7;
		return;
	case 413:
		line->special = 160;
		return;
	case 414:
		line->special = 160;
		line->frontsector->floor.Alpha = 0.8;
		line->frontsector->ceiling.Alpha = 0.8;
		line->frontsector->ceiling.flags = SPF_NOBLOCKSIGHT;
		line->frontsector->floor.flags = SPF_NOBLOCKSIGHT;
		return;
	case 415:
		line->special = 160;
		line->frontsector->floor.Alpha = 0.6;
		line->frontsector->ceiling.Alpha = 0.6;
		line->frontsector->ceiling.flags = SPF_NOBLOCKSIGHT;
		line->frontsector->floor.flags = SPF_NOBLOCKSIGHT;
		return;
	case 416:
		line->special = 160;
		line->frontsector->floor.Alpha = 0.4;
		line->frontsector->ceiling.Alpha = 0.4;
		line->frontsector->ceiling.flags = SPF_NOBLOCKSIGHT;
		line->frontsector->floor.flags = SPF_NOBLOCKSIGHT;
		return;
	case 417:
		line->special = 160;
		line->frontsector->floor.Alpha = 0.2;
		line->frontsector->ceiling.Alpha = 0.2;
		line->frontsector->ceiling.flags = SPF_NOBLOCKSIGHT;
		line->frontsector->floor.flags = SPF_NOBLOCKSIGHT;
		return;
	}

	if (line->special >= NUM_SPECIALS)
	{
		line->special = 0;
		line->arg1 = 0;
		return;
	}

	//	Special.
	line->special = spec_trans_tab[OldSpec].special;
	//	Arg 1.
	if (spec_trans_tab[OldSpec].arg1 == -1)
	{
		line->arg1 = OldTag;
	}
	else
	{
		line->arg1 = spec_trans_tab[OldSpec].arg1;
	}
	//	Arg 2.
	if (spec_trans_tab[OldSpec].arg2 == -1)
	{
		line->arg2 = OldTag;
	}
	else
	{
		line->arg2 = spec_trans_tab[OldSpec].arg2;
	}
	//	Arg 3.
	if (spec_trans_tab[OldSpec].arg3 == -1)
	{
		line->arg3 = OldTag;
	}
	else
	{
		line->arg3 = spec_trans_tab[OldSpec].arg3;
	}
	//	Arg 4.
	if (spec_trans_tab[OldSpec].arg4 == -1)
	{
		line->arg4 = OldTag;
	}
	else
	{
		line->arg4 = spec_trans_tab[OldSpec].arg4;
	}
	//	Arg 5.
	if (spec_trans_tab[OldSpec].arg5 == -1)
	{
		line->arg5 = OldTag;
	}
	else
	{
		line->arg5 = spec_trans_tab[OldSpec].arg5;
	}

	//	Activation flags.
	if (OldFlags & 0x0200 && spec_trans_tab[OldSpec].spac == SPAC_USE)
		line->flags |= SPAC_USETHROUGH << ML_SPAC_SHIFT;
	else
		line->flags |= spec_trans_tab[OldSpec].spac << ML_SPAC_SHIFT;
	if (spec_trans_tab[OldSpec].repeat)
	{
		line->flags |= ML_REPEAT_SPECIAL;
	}
}

//==========================================================================
//
//  TranslateSector
//
//==========================================================================

void TranslateSector(sector_t* sector)
{
	int special;
	int high;

	special = sector->special;
	if (!special)
	{
		return;
	}
	if (special == 9)
	{
		sector->special = SECSPEC_SECRET_MASK;
		return;
	}

	//	This supports phased lighting with specials 21-24 and wind specials
	// 40-51.
	high = (special & 0xfe0) << 3;
	special &= 0x01f;
	if (special < 21)
	{
		sector->special = high | (special + 64);
	}
	else if (special < 40)
	{
		sector->special = high | (special - 20);
	}
	else
	{
		sector->special = high | special;
	}
}

//==========================================================================
//
//  TranslateThing
//
//==========================================================================

void TranslateThing(mthing_t* mthing)
{
	int flags;

	// translate the spawn flags to Hexen format.
	flags = mthing->options;
	if (flags & 0x100)
	{
		flags &= 0x1f;
	}

	mthing->options = (flags & 0xf) | 0x7e0;
	if (flags & 0x10)
	{
		mthing->options &= ~LineSpecialLevelInfo::MTF_GSINGLE;
	}
	if (flags & 0x80)
	{
		//	MBF friendly monsters
		mthing->options |= LineSpecialLevelInfo::MTF_FRIENDLY;
	}
}

//==========================================================================
//
//  TranslateLevel
//
//==========================================================================

void TranslateLevel(Level InLevel)
{
	int i;

	for (i = 0; i < InLevel.NumLines; i++)
	{
		TranslateLine(InLevel, &InLevel.Lines[i]);
	}

	for (i = 0; i < InLevel.NumSectors; i++)
	{
		TranslateSector(&InLevel.Sectors[i]);
	}

	for (i = 0; i < InLevel.NumThings; i++)
	{
		TranslateThing(&InLevel.Things[i]);
	}
}

defaultproperties
{
	LevelInfoClass = DoomLevelInfo;
	GameFilterFlag = EntityEx::GAME_Doom;
	bDefaultLaxMonsterActivation = true;
	bNoClipIgnoreFloor = true;
	bAlwaysSwitchNewWeapon = true;
	TeleportFogClass = TeleportFog;
	DefaultKickBack = 150.0;
	DefaultInvulnBlendColour = Inventory::INVERSECOLOUR;
	bBloodRandomiseTime = true;
	GibsHealthFactor = 1.0;

	botskill = 2;

	INITIAL_HEALTH = 100;
	GOD_HEALTH = 100;

	PlayerClasses.Num = 1;
	PlayerClasses[0] = DoomPlayer;
	WeaponSlots[1].Weapons[0] = Fist;
	WeaponSlots[1].Weapons[1] = Chainsaw;
	WeaponSlots[2].Weapons[0] = Pistol;
	WeaponSlots[3].Weapons[0] = Shotgun;
	WeaponSlots[3].Weapons[1] = SuperShotgun;
	WeaponSlots[4].Weapons[0] = Chaingun;
	WeaponSlots[5].Weapons[0] = RocketLauncher;
	WeaponSlots[6].Weapons[0] = PlasmaRifle;
	WeaponSlots[7].Weapons[0] = BFG9000;
}
