//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

const float ST_STRAIGHTFACETIME		= 0.5;
const float ST_TURNTIME				= 1.0;
const float ST_EVILGRINTIME			= 2.0;
const float ST_RAMPAGEDELAY			= 2.0;

const int ST_MUCHPAIN				= 20;

const int MAXHEALTH					= 100;

//
//  FACE WIDGET MACROS
//
enum
{
// Number of status faces.
	ST_NUMPAINFACES		= 5,
	ST_NUMSTRAIGHTFACES	= 3,
	ST_NUMTURNFACES		= 2,
	ST_NUMSPECIALFACES	= 3,

	ST_FACESTRIDE
          = (ST_NUMSTRAIGHTFACES + ST_NUMTURNFACES + ST_NUMSPECIALFACES),

	ST_NUMEXTRAFACES	= 2,

	ST_NUMFACES
          = (ST_FACESTRIDE*ST_NUMPAINFACES+ST_NUMEXTRAFACES),

	ST_TURNOFFSET		= (ST_NUMSTRAIGHTFACES),
	ST_OUCHOFFSET		= (ST_TURNOFFSET + ST_NUMTURNFACES),
	ST_EVILGRINOFFSET	= (ST_OUCHOFFSET + 1),
	ST_RAMPAGEOFFSET	= (ST_EVILGRINOFFSET + 1),
	ST_GODFACE			= (ST_NUMPAINFACES * ST_FACESTRIDE),
	ST_DEADFACE			= (ST_GODFACE + 1)
};

//
//  FACE WIDGET DATA
//

// count until face changes
float sb_facetime;

// used for evil grin
bool sb_GotWeapon;

// used to use appopriately pained face
int sb_oldhealth;

// int sb_face_lastattackdown = -1;
int sb_face_priority;

int sb_cpo_lastcalc;
int sb_cpo_oldhealth;

float sb_face_lastattackdown;

// current face index, used by w_faces
int sb_faceindex;

BotPlayer Bot;

replication
{
	reliable if (!bIsClient)
		sb_faceindex;
}

//==========================================================================
//
//  CreateBot
//
//==========================================================================

void CreateBot()
{
	Bot = BotPlayer(SpawnObject(BotPlayer));
	Bot.player = self;
	Bot.OnBeginPlay();
}

//==========================================================================
//
//  DestroyBot
//
//==========================================================================

void DestroyBot()
{
	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged()
{
	if (!bSpawned)
	{
		return;
	}
	SetClientModel();
}

//==========================================================================
//
//	SetClientModel
//
//==========================================================================

void SetClientModel()
{
	string model;

	model = Info_ValueForKey(UserInfo, "model");
	if (!model)
	{
		MO.bFixedModel = false;
		return;
	}

	MO.bFixedModel = true;
	MO.FixedModelName = va("players/%s/player.xml", model);
}

//==========================================================================
//
//  ResetPlayerOnSpawn
//
//==========================================================================

void ResetPlayerOnSpawn()
{
	::ResetPlayerOnSpawn();

	sb_faceindex = 0;
	sb_oldhealth = -1;
	sb_GotWeapon = false;
}

//==========================================================================
//
//  BotOnSpawn
//
//==========================================================================

void BotOnSpawn()
{
	Bot.OnSpawn();
}

//==========================================================================
//
//  DoClearPlayer
//
//==========================================================================

void DoClearPlayer()
{
	BotPlayer b;

	b = Bot;
	::DoClearPlayer();
	Bot = b;
}

//==========================================================================
//
//  GetRebornHealth
//
//==========================================================================

int GetRebornHealth()
{
	return MainGameInfo(Level.Game).INITIAL_HEALTH;
}

//==========================================================================
//
//	GotAmmo
//
//==========================================================================

void GotAmmo(Ammo NewAmmo)
{
	// We were down to zero,
	// so select a new weapon.
	// Preferences are not user selectable.
	if (!ReadyWeapon || ReadyWeapon.bWimpyWeapon)
	{
		Weapon Best = BestWeapon(class<Ammo>(NewAmmo.Class));
		if (Best && (!ReadyWeapon ||
			Best.SelectionOrder < ReadyWeapon.SelectionOrder))
		{
			PendingWeapon = Best;
		}
	}
}

//==========================================================================
//
//	GetMaxHealth
//
//==========================================================================

int GetMaxHealth()
{
	return PlayerPawn(MO).MaxHealth > 0 ? PlayerPawn(MO).MaxHealth :
		(Level.CompatDehHealth ? MAXHEALTH : HealthBonus.default.MaxAmount / 2);
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;

	impulse = Impulse;
	Impulse = 0;

	if (impulse <= 7)
	{
		ChangeWeapon(impulse);
	}
	else if (impulse == 16)
	{
		//  Suicide
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == 17)
	{
		PrevWeapon();
	}
	else if (impulse == 18)
	{
		NextWeapon();
	}
	else if (impulse >= 200 && impulse <= 205)
	{
		LineSpecialLevelInfo(Level).ConChoiceImpulse(impulse - 200);
	}
}

//==========================================================================
//
//  BotTick
//
//==========================================================================

void BotTick(float deltaTime)
{
	Bot.BotTick(deltaTime);
}

//==========================================================================
//
//  CalcPainOffset
//
//==========================================================================

int CalcPainOffset()
{
	int health;

	health = Health > 100 ? 100 : Health;

	if (health != sb_cpo_oldhealth)
	{
		sb_cpo_lastcalc =
			ST_FACESTRIDE * (((100 - health) * ST_NUMPAINFACES) / 101);
		sb_cpo_oldhealth = health;
	}
	return sb_cpo_lastcalc;
}

//==========================================================================
//
//  UpdateFaceWidget
//
//  This is a not-very-pretty routine which handles the face states and
// their timing.
//  the precedence of expressions is:
//  dead > evil grin > turned head > straight ahead
//
//==========================================================================

void UpdateFaceWidget(float FrameTime)
{
	int i;
	float badguyangle;
	float diffang;
	bool doevilgrin;

	// a random number per tick
	int st_randomnumber;

	st_randomnumber = P_Random();

	if (sb_face_priority < 10)
	{
		// dead
		if (!Health)
		{
			sb_face_priority = 9;
			sb_faceindex = ST_DEADFACE;
			sb_facetime = 0.01;
		}
	}

	if (sb_face_priority < 9)
	{
		if (BonusFlash)
		{
			// picking up bonus
			doevilgrin = false;

			if (sb_GotWeapon)
			{
				doevilgrin = true;
				sb_GotWeapon = false;
			}
			if (doevilgrin)
			{
				// evil grin if just picked up weapon
				sb_face_priority = 8;
				sb_facetime = ST_EVILGRINTIME;
				sb_faceindex = CalcPainOffset() + ST_EVILGRINOFFSET;
			}
		}
	}

	if (sb_face_priority < 8)
	{
		if (DamageFlash && Attacker && Attacker != MO)
		{
			// being attacked
			sb_face_priority = 7;

			if (Health - sb_oldhealth > ST_MUCHPAIN)
			{
				sb_facetime = ST_TURNTIME;
				sb_faceindex = CalcPainOffset() + ST_OUCHOFFSET;
			}
			else
			{
				badguyangle = atan2(Attacker.Origin.y - MO.Origin.y,
					Attacker.Origin.x - MO.Origin.x);

				if (badguyangle > MO.Angles.yaw)
				{
					// whether right or left
					diffang = AngleMod360(badguyangle - MO.Angles.yaw);
					i = diffang > 180.0;
				}
				else
				{
					// whether left or right
					diffang = AngleMod360(MO.Angles.yaw - badguyangle);
					i = diffang <= 180.0;
				}	// confusing, aint it?

				sb_facetime = ST_TURNTIME;
				sb_faceindex = CalcPainOffset();

				if (diffang < 45.0)
				{
					// head-on
					sb_faceindex += ST_RAMPAGEOFFSET;
				}
				else if (i)
				{
					// turn face right
					sb_faceindex += ST_TURNOFFSET;
				}
				else
				{
					// turn face left
					sb_faceindex += ST_TURNOFFSET + 1;
				}
			}
		}
	}

	if (sb_face_priority < 7)
	{
		// getting hurt because of your own damn stupidity
		if (DamageFlash)
		{
			if (Health - sb_oldhealth > ST_MUCHPAIN)
			{
				sb_face_priority = 7;
				sb_facetime = ST_TURNTIME;
				sb_faceindex = CalcPainOffset() + ST_OUCHOFFSET;
			}
			else
			{
				sb_face_priority = 6;
				sb_facetime = ST_TURNTIME;
				sb_faceindex = CalcPainOffset() + ST_RAMPAGEOFFSET;
			}
		}
	}

	if (sb_face_priority < 6)
	{
		// rapid firing
		if (bAttackDown && !bFrozen && !bTotallyFrozen)
		{
			if (sb_face_lastattackdown == -1.0)
				sb_face_lastattackdown = ST_RAMPAGEDELAY;
			else
			{
				sb_face_lastattackdown -= FrameTime;
				if (sb_face_lastattackdown <= 0.0)
				{
					sb_face_priority = 5;
					sb_faceindex = CalcPainOffset() + ST_RAMPAGEOFFSET;
					sb_facetime = 0.01;
					sb_face_lastattackdown = 0.01;
				}
			}
		}
		else
			sb_face_lastattackdown = -1.0;
	}

	if (sb_face_priority < 5)
	{
		// invulnerability
		if ((Cheats & CF_GODMODE) || EntityEx(MO).bInvulnerable)
		{
			sb_face_priority = 4;

			sb_faceindex = ST_GODFACE;
			sb_facetime = 0.01;
		}
	}

	// look left or look right if the facecount has timed out
	if (sb_facetime <= 0.0)
	{
		sb_faceindex = CalcPainOffset() + (st_randomnumber % 3);
		sb_facetime = ST_STRAIGHTFACETIME;
		sb_face_priority = 0;
	}

	sb_facetime -= FrameTime;
	sb_oldhealth = Health;
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

const int
	GIMME_INVULNERABILITY	= 0x00040000,
	GIMME_STRENGTH			= 0x00080000,
	GIMME_INVISIBILITY		= 0x00100000,
	GIMME_IRONFEET			= 0x00200000,
	GIMME_ALLMAP			= 0x00400000,
	GIMME_INFRARED			= 0x00800000,
	GIMME_HEALTH			= 0x01000000,
	GIMME_HEALTH2			= 0x02000000,
	GIMME_ARMOR				= 0x04000000,
	GIMME_ARMOR2			= 0x08000000,
	GIMME_KEYS				= 0x0003f000,
	GIMME_POWERS			= 0x00fc0000,
	GIMME_ALL				= 0xffffffff;

void Cheat_Gimme()
{
	int					i;
	int					i1;
	class<Inventory>	Cls;

	i1 = 0;
	// All
	if (Cmd_CheckParm("All"))
		i1 |= GIMME_ALL;

	// Powers
	if (Cmd_CheckParm("Powers"))
		i1 |= GIMME_POWERS;
	if (Cmd_CheckParm("Invulnerability"))
		i1 |= GIMME_INVULNERABILITY;
	if (Cmd_CheckParm("Bersek"))
		i1 |= GIMME_STRENGTH;
	if (Cmd_CheckParm("Invisibility"))
		i1 |= GIMME_INVISIBILITY;
	if (Cmd_CheckParm("Suit"))
		i1 |= GIMME_IRONFEET;
	if (Cmd_CheckParm("AllMap"))
		i1 |= GIMME_ALLMAP;
	if (Cmd_CheckParm("LiteAmp"))
		i1 |= GIMME_INFRARED;

	// Health
	if (Cmd_CheckParm("Health"))
		i1 |= GIMME_HEALTH;
	if (Cmd_CheckParm("Health2"))
		i1 |= GIMME_HEALTH2;

	// Armor
	if (Cmd_CheckParm("Armor"))
		i1 |= GIMME_ARMOR;
	if (Cmd_CheckParm("Armor2"))
		i1 |= GIMME_ARMOR2;

	// Weapons
	if (Cmd_CheckParm("Weapons") || Cmd_CheckParm("All"))
	{
		foreach AllClasses(Weapon, Cls)
		{
			if (!FindClassState(Cls, 'Ready'))
			{
				//	An abstract base class.
				continue;
			}
			Weapon Wpn = Weapon(Level.Spawn(Cls,,,, false));
			Wpn.AmmoGive1 = 0;
			Wpn.AmmoGive2 = 0;
			if (!Wpn.TryPickup(EntityEx(MO)))
			{
				Wpn.Destroy();
			}
		}
	}

	// Backpack
	if (Cmd_CheckParm("Backpack") || Cmd_CheckParm("All"))
	{
		BackpackItem Pack = Level.Spawn(Backpack,,,, false);
		Pack.bDropped = true;
		if (!Pack.TryPickup(EntityEx(MO)))
		{
			Pack.Destroy();
		}
	}

	// Ammo
	if (Cmd_CheckParm("Ammo") || Cmd_CheckParm("All"))
	{
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
			if (!AmmoItem)
			{
				AmmoItem = Level.Spawn(Cls,,,, false);
				if (!AmmoItem.TryPickup(EntityEx(MO)))
				{
					AmmoItem.Destroy();
					AmmoItem = none;
				}
			}
			if (AmmoItem)
			{
				AmmoItem.Amount = AmmoItem.MaxAmount;
			}
		}
	}

	// Keys
	if (Cmd_CheckParm("Keys") || Cmd_CheckParm("All"))
	{
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
	}

	// Powers
	if (i1 & GIMME_INVULNERABILITY)
		EntityEx(MO).GiveInventoryType(PowerInvulnerable);
	if (i1 & GIMME_STRENGTH)
		EntityEx(MO).GiveInventoryType(PowerStrength);
	if (i1 & GIMME_INVISIBILITY)
		EntityEx(MO).GiveInventoryType(PowerInvisibility);
	if (i1 & GIMME_IRONFEET)
		EntityEx(MO).GiveInventoryType(PowerIronFeet);
	if (i1 & GIMME_INFRARED)
		EntityEx(MO).GiveInventoryType(PowerLightAmp);

	//  Items
	if (i1 & GIMME_ALLMAP)
		EntityEx(MO).GiveInventoryType(Allmap);

	// Health
	if ((i1 & GIMME_HEALTH) && (Health < 100))
	{
		Health = 100;
		MO.Health = 100;
	}
	if (i1 & GIMME_HEALTH2)
	{
		Health = 200;
		MO.Health = 200;
	}

	// Armor
	if (i1 & GIMME_ARMOR)
	{
		EntityEx(MO).GiveInventoryType(GreenArmor);
	}
	if (i1 & GIMME_ARMOR2)
	{
		EntityEx(MO).GiveInventoryType(BlueArmor);
	}
	cprint("YOU GOT IT");
}

//==========================================================================
//
//	KilledActor
//
//==========================================================================

void KilledActor(EntityEx Victim)
{
	// Check for frag changes
	if (Victim.bIsPlayer)
	{
		if (bIsBot)
		{
			Bot.Killed(Victim);
		}

		if (Victim.Player.bIsBot)
		{
			Player(Victim.Player).Bot.Died(EntityEx(MO));
		}

		if (MO == Victim)
		{
			Frags--;
		}
		else
		{
			Frags++;
		}
	}
}

defaultproperties
{
}
