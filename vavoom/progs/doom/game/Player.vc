//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : PlayerEx;

const float VIEWHEIGHT		= 41.0;

const float ST_STRAIGHTFACETIME		= 0.5;
const float ST_TURNTIME				= 1.0;
const float ST_EVILGRINTIME			= 2.0;
const float ST_RAMPAGEDELAY			= 2.0;

const int ST_MUCHPAIN				= 20;

const int MAXHEALTH					= 100;

//
//  FACE WIDGET DATA
//

// count until face changes
float sb_facetime;

// used for evil grin
bool sb_GotWeapon;

// used to use appopriately pained face
int sb_oldhealth;

// int sb_face_lastattackdown = -1;
int sb_face_priority;

int sb_cpo_lastcalc;
int sb_cpo_oldhealth;

float sb_face_lastattackdown;

// current face index, used by w_faces
int sb_faceindex;

BotPlayer Bot;

replication
{
	reliable if (!bIsClient)
		sb_faceindex;
}

//==========================================================================
//
//  PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer()
{
	if (bIsBot)
	{
		Bot = BotPlayer(SpawnObject(BotPlayer));
		Bot.player = self;
		Bot.OnBeginPlay();
	}
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient()
{
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
	}
	else
	{
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
	}
}

//==========================================================================
//
//  NetGameReborn
//
//	Respawn at the start
//
//==========================================================================

void NetGameReborn()
{
	int i;

	// remove pitch and roll angles from corpse
	MO.Angles.pitch = 0.0;
	MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	MO.Player = none;
	MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (Level.Game.deathmatch)
	{
		DeathMatchSpawnPlayer();
		return;
	}

	if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
		GetPlayerNum()]))
	{
		SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
			GetPlayerNum()]);
		return;
	}

	// try to spawn at one of the other players spots
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (CheckSpot(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]))
		{
			SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS + i]);
			return;
		}
		// he's going to be inside something.  Too bad.
	}
	SpawnPlayer(&Level.PlayerStarts[Level.Game.RebornPosition * MAXPLAYERS +
		GetPlayerNum()]);
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient()
{
	int i;

	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
	if (MO)
	{
		MO.Player = none;
		MO.bIsPlayer = false;
		Actor(MO).Damage(none, none, 10000);
	}
	Level.bprint("%s left the game\n", PlayerName);
	MO.PlaySound('misc/chat', CHAN_AUTO, 1.0, ATTN_NONE);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged()
{
	if (!bSpawned)
	{
		return;
	}
	SetClientModel();
}

//==========================================================================
//
//	SetClientModel
//
//==========================================================================

void SetClientModel()
{
	string model;

	model = Info_ValueForKey(UserInfo, "model");
	if (!model)
	{
		MO.bFixedModel = false;
		MO.ModelSkin = "";
		return;
	}

	MO.bFixedModel = true;
	MO.FixedModelName = va("players/%s/player.xml", model);
}

//==========================================================================
//
//  DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void DeathMatchSpawnPlayer()
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % Level.NumDeathmatchStarts;
		if (CheckSpot(&Level.DeathmatchStarts[i]))
		{
			SpawnPlayer(&Level.DeathmatchStarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	SpawnPlayer(&Level.PlayerStarts[GetPlayerNum()]);
}

//==========================================================================
//
//  CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool CheckSpot(mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int mtnum;
	int sfxnum;
	int i;

	if (!MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < MAXPLAYERS; i++)
			if (Level.Game.Players[i] && Level.Game.Players[i].MO &&
				Level.Game.Players[i].MO.Origin.x == mthing->x &&
				Level.Game.Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	if (!MO.CheckPosition(vector(x, y, Actor::ONFLOORZ)))
	{
		return false;
	}

	// flush an old corpse if needed 
	if (DoomLevelInfo(Level).bodyqueslot >= DoomLevelInfo::BODYQUESIZE)
		DoomLevelInfo(Level).bodyque[DoomLevelInfo(Level).bodyqueslot % DoomLevelInfo::BODYQUESIZE].Destroy();
	DoomLevelInfo(Level).bodyque[DoomLevelInfo(Level).bodyqueslot % DoomLevelInfo::BODYQUESIZE] = Actor(MO);
	MO.Translation = Level.XLevel.SetBodyQueueTrans(
		DoomLevelInfo(Level).bodyqueslot % DoomLevelInfo::BODYQUESIZE,
		MO.Translation);
	DoomLevelInfo(Level).bodyqueslot++;

	// spawn a teleport fog 
	sec = Level.XLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = DoomLevelInfo(Level).Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight));
	A.PlaySound('misc/teleport', CHAN_VOICE);

	return true;
}

//==========================================================================
//
//  SpawnPlayer
//
//  Called when a player is spawned on the level. Most of the player
// structure stays unchanged between levels.
//
//==========================================================================

void SpawnPlayer(mthing_t * mthing)
{
	int i;
	float x;
	float y;
	float z;
	DoomPlayer PP;
	bool ResetInventory = false;
	Inventory Item;
	class<Inventory> Cls;

	if (PlayerState == PST_REBORN)
	{
		PlayerReborn();
		ResetInventory = true;
	}

	x = mthing->x;
	y = mthing->y;
	z = Actor::ONFLOORZ;
	PP = DoomLevelInfo(Level).Spawn(DoomPlayer, vector(x, y, z),,, false);
	PP.Origin.z += mthing->height;
	PP.LinkToWorld();

	// set colour translations for player sprites
	TranslStart = 112;
	TranslEnd = 127;
	PP.Translation = (Entity::TRANSL_Player << Entity::TRANSL_TYPE_SHIFT) +
		GetPlayerNum();

	PP.Angles.yaw = itof(mthing->angle);
	PP.Player = self;
	PP.bIsPlayer = true;
	PP.Health = Health;

	MO = PP;
	Camera = PP;
	PlayerState = PST_LIVE;
	Refire = 0;
	DamageFlash = 0.0;
	BonusFlash = 0.0;
	PoisonCount = 0;
	ExtraLight = 0;
	FixedColourmap = 0;
	LastSectorDamageTime = 0.0;
	LastHazardTime = 0.0;
	ViewHeight = VIEWHEIGHT;
	ViewAngles = PP.Angles;
	bFixAngle = true;

	sb_faceindex = 0;
	sb_oldhealth = -1;
	sb_GotWeapon = false;

	PP.Inventory = SavedInventory;
	for (Item = PP.Inventory; Item; Item = Item.Inventory)
	{
		Item.Owner = MO;
	}

	if (ResetInventory)
	{
		while (PP.Inventory)
		{
			PP.Inventory.Destroy();
		}

		BasicArmor BArmor = Level.Spawn(BasicArmor,,,, false);
		BArmor.Amount = 0;
		BArmor.AttachToOwner(PP);

		for (i = 0; i < PP.InitialInventory.Num; i++)
		{
			Item = Level.Spawn(PP.InitialInventory[i].Type,,,, false);
			Item.bIgnoreSkill = true;
			//	Temporary hack for Dehacked support.
			if (PP.InitialInventory[i].Type == Clip)
			{
				Item.Amount = MainGameInfo(Level.Game).INITIAL_AMMO;
			}
			else
			{
				Item.Amount = PP.InitialInventory[i].Amount;
			}
			if (Weapon(Item))
			{
				//	For better control empty weapon's ammo.
				Weapon(Item).AmmoGive1 = 0;
				Weapon(Item).AmmoGive2 = 0;
			}
			if (!Item.TryPickup(PP))
			{
				Item.Destroy();
			}
			else if (Weapon(Item) && Weapon(Item).CheckAmmo(false))
			{
				SetWeapon(Weapon(Item));
			}
		}
	}

	// setup gun psprite
	SetupPsprites();

	// give all cards in death match mode
	if (Level.Game.deathmatch)
	{
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
	}

	// wake up the status bar
	SB_Start();

	if (bIsBot)
	{
		Bot.OnSpawn();
	}

	SetClientModel();

	UpdateRevealedMap();
}

//==========================================================================
//
//  PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialised
//
//==========================================================================

void PlayerReborn()
{
	BotPlayer b;

	//  Clear player struct
	b = Bot;
	ClearPlayer();
	Bot = b;

	//  Set initial data
	bUseDown = true;	// don't do anything immediately
	bAttackDown = true;
	PlayerState = PST_LIVE;
	Health = MainGameInfo(Level.Game).INITIAL_HEALTH;
	LocalQuakeHappening = 0;
}

//==========================================================================
//
//  PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void PlayerExitMap(bool clusterChange)
{
	Inventory	Item;

	for (Item = EntityEx(MO).Inventory; Item;)
	{
		Inventory Next = Item.Inventory;
		if (Powerup(Item) && (Level.Game.deathmatch ||
			clusterChange || !Item.bHubPower))
		{
			Item.Destroy();
		}
		Item = Next;
	}

	if (clusterChange)
	{
		for (Item = EntityEx(MO).Inventory; Item;)
		{
			Inventory Next = Item.Inventory;
			if (Item.bInterHubStrip)
			{
				Item.Destroy();
			}
			Item = Next;
		}
	}

	MO.Angles.pitch = 0.0;
	MO.RenderStyle = Entity::STYLE_Normal;
	MO.Alpha = 1.0;	// cancel invisibility
	ExtraLight = 0;			// cancel gun flashes
	FixedColourmap = 0;		// cancel ir gogles
	DamageFlash = 0.0;		// no palette changes
	BonusFlash = 0.0;
	PoisonCount = 0;
}

//==========================================================================
//
//	GiveAmmo
//
//	Returns false if the ammo can't be picked up at all
//
//==========================================================================

bool GiveAmmo(class<Ammo> ammo, int count)
{
	int oldammo;

	if (!ammo)
	{
		return false;
	}

	Ammo AmmoItem = Ammo(EntityEx(MO).FindInventory(ammo));
	if (!AmmoItem)
	{
		AmmoItem = Level.Spawn(ammo,,,, false);
		AmmoItem.AttachToOwner(EntityEx(MO));
		AmmoItem.Amount = 0;
	}
	if (!count)
	{
		return false;
	}
	if (AmmoItem.Amount == AmmoItem.MaxAmount)
	{
		return false;
	}

	if (Level.Game.gameskill == sk_baby ||
		(Level.Game.gameskill == sk_nightmare &&
		LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo))
	{
		// extra ammo in baby mode and nightmare mode
		if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
		{
			count <<= 1;
		}
		else
		{
			count += count >> 1;
		}
	}

	oldammo = AmmoItem.Amount;
	AmmoItem.Amount += count;
	if (AmmoItem.Amount > AmmoItem.MaxAmount)
	{
		AmmoItem.Amount = AmmoItem.MaxAmount;
	}

	if (oldammo <= 0)
	{
		GotAmmo(AmmoItem);
	}
	return true;
}

//==========================================================================
//
//	GotAmmo
//
//==========================================================================

void GotAmmo(Ammo NewAmmo)
{
	// We were down to zero,
	// so select a new weapon.
	// Preferences are not user selectable.
	if (ReadyWeapon.bWimpyWeapon)
	{
		Weapon Best = BestWeapon(class<Ammo>(NewAmmo.Class));
		if (Best && Best.SelectionOrder < ReadyWeapon.SelectionOrder)
		{
			PendingWeapon = Best;
		}
	}
}

//==========================================================================
//
//	GetMaxHealth
//
//==========================================================================

int GetMaxHealth()
{
	return MAXHEALTH;
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	float angle;
	float delta;

	MovePsprites(deltaTime);

	if (MO.WaterLevel > 1)
	{
		MO.Velocity.z = -60.0;	// drift towards bottom
	}

	// fall to the ground
	if (ViewHeight > 6.0)
		ViewHeight -= 1.0;

	if (ViewHeight < 6.0)
		ViewHeight = 6.0;

	DeltaViewHeight = 0.0;
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		angle = atan2(Attacker.Origin.y - MO.Origin.y,
			Attacker.Origin.x - MO.Origin.x);

		delta = AngleMod180(angle - ViewAngles.yaw);

		if (delta < 5.0 || delta > -5.0)
		{
			// Looking at killer,
			//  so fade damage flash down.
			ViewAngles.yaw = angle;

			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
			if (PoisonCount)
			{
				PoisonCount--;
			}
		}
		else if (delta > 0.0)
			ViewAngles.yaw += 5.0;
		else
			ViewAngles.yaw -= 5.0;
	}
	else if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}
	else if (PoisonCount)
	{
		PoisonCount--;
	}

	if (Buttons & BT_USE)
		PlayerState = PST_REBORN;
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;

	impulse = Impulse;
	Impulse = 0;

	if (impulse <= 7)
	{
		ChangeWeapon(impulse);
	}
	else if (impulse == 16)
	{
		//  Suicide
		Actor(MO).Damage(none, none, 10000);
	}
	else if (impulse == 17)
	{
		PrevWeapon();
	}
	else if (impulse == 18)
	{
		NextWeapon();
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
	if (bIsBot)
	{
		Bot.BotTick(deltaTime);
	}

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (Actor(MO).bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		Actor(MO).bJustAttacked = false;
	}

	//	You can only press use while totally frozen
	if (bTotallyFrozen)
	{
		Buttons &= BT_USE;
		Impulse = 0;
		ViewAngles = MO.Angles;
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}
	else if (bFrozen)
	{
		ForwardMove = 0.0;
		SideMove = 0.0;
		FlyMove = 0.0;
	}

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	// Copy view angles
	if (MO == Camera)
	{
		MO.Angles = ViewAngles;
	}

	if (JumpTime)
	{
		JumpTime -= deltaTime;
		if (JumpTime < 0.0)
		{
			JumpTime = 0.0;
		}
	}

	// Move around.
	// Reactiontime is used to prevent movement
	//  for a bit after a teleport.
	if (Actor(MO).ReactionTime)
	{
		Actor(MO).ReactionTime -= deltaTime;
		if (Actor(MO).ReactionTime <= 0.0)
			Actor(MO).ReactionTime = 0.0;
		if (Actor(MO).bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.WaterLevel > 1)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special)
		PlayerInSpecialSector(deltaTime);
	PlayerInContents(deltaTime);

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			P_UseLines();
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	//  cycle psprites
	MovePsprites(deltaTime);

	//  Counters.

	if (PoisonCount && Level.XLevel.Time - LastPoisonTime >= 0.5)
	{
		PoisonCount -= 5;
		if (PoisonCount < 0)
		{
			PoisonCount = 0;
		}
		LastPoisonTime = Level.XLevel.Time;
		Actor(MO).PoisonDamage(Poisoner, Poisoner, 1, true);
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (Level.XLevel.Time - LastHazardTime >= 32.0 / 35.0 && HazardTime > 16.0)
		{
			LastHazardTime = Level.XLevel.Time;
			Actor(MO).Damage(none, none, 5);
		}
	}
}

//==========================================================================
//
//  CalcPainOffset
//
//==========================================================================

int CalcPainOffset()
{
	int health;

	health = Health > 100 ? 100 : Health;

	if (health != sb_cpo_oldhealth)
	{
		sb_cpo_lastcalc =
			DoomDefs::ST_FACESTRIDE * (((100 - health) * DoomDefs::ST_NUMPAINFACES) / 101);
		sb_cpo_oldhealth = health;
	}
	return sb_cpo_lastcalc;
}

//==========================================================================
//
//  UpdateFaceWidget
//
//  This is a not-very-pretty routine which handles the face states and
// their timing.
//  the precedence of expressions is:
//  dead > evil grin > turned head > straight ahead
//
//==========================================================================

void UpdateFaceWidget(float FrameTime)
{
	int i;
	float badguyangle;
	float diffang;
	bool doevilgrin;

	// a random number per tick
	int st_randomnumber;

	st_randomnumber = P_Random();

	if (sb_face_priority < 10)
	{
		// dead
		if (!Health)
		{
			sb_face_priority = 9;
			sb_faceindex = DoomDefs::ST_DEADFACE;
			sb_facetime = 0.01;
		}
	}

	if (sb_face_priority < 9)
	{
		if (BonusFlash)
		{
			// picking up bonus
			doevilgrin = false;

			if (sb_GotWeapon)
			{
				doevilgrin = true;
				sb_GotWeapon = false;
			}
			if (doevilgrin)
			{
				// evil grin if just picked up weapon
				sb_face_priority = 8;
				sb_facetime = ST_EVILGRINTIME;
				sb_faceindex = CalcPainOffset() + DoomDefs::ST_EVILGRINOFFSET;
			}
		}
	}

	if (sb_face_priority < 8)
	{
		if (DamageFlash && Attacker && Attacker != MO)
		{
			// being attacked
			sb_face_priority = 7;

			if (Health - sb_oldhealth > ST_MUCHPAIN)
			{
				sb_facetime = ST_TURNTIME;
				sb_faceindex = CalcPainOffset() + DoomDefs::ST_OUCHOFFSET;
			}
			else
			{
				badguyangle = atan2(Attacker.Origin.y - MO.Origin.y,
					Attacker.Origin.x - MO.Origin.x);

				if (badguyangle > MO.Angles.yaw)
				{
					// whether right or left
					diffang = AngleMod360(badguyangle - MO.Angles.yaw);
					i = diffang > 180.0;
				}
				else
				{
					// whether left or right
					diffang = AngleMod360(MO.Angles.yaw - badguyangle);
					i = diffang <= 180.0;
				}	// confusing, aint it?

				sb_facetime = ST_TURNTIME;
				sb_faceindex = CalcPainOffset();

				if (diffang < 45.0)
				{
					// head-on
					sb_faceindex += DoomDefs::ST_RAMPAGEOFFSET;
				}
				else if (i)
				{
					// turn face right
					sb_faceindex += DoomDefs::ST_TURNOFFSET;
				}
				else
				{
					// turn face left
					sb_faceindex += DoomDefs::ST_TURNOFFSET + 1;
				}
			}
		}
	}

	if (sb_face_priority < 7)
	{
		// getting hurt because of your own damn stupidity
		if (DamageFlash)
		{
			if (Health - sb_oldhealth > ST_MUCHPAIN)
			{
				sb_face_priority = 7;
				sb_facetime = ST_TURNTIME;
				sb_faceindex = CalcPainOffset() + DoomDefs::ST_OUCHOFFSET;
			}
			else
			{
				sb_face_priority = 6;
				sb_facetime = ST_TURNTIME;
				sb_faceindex = CalcPainOffset() + DoomDefs::ST_RAMPAGEOFFSET;
			}
		}
	}

	if (sb_face_priority < 6)
	{
		// rapid firing
		if (bAttackDown && !bFrozen && !bTotallyFrozen)
		{
			if (sb_face_lastattackdown == -1.0)
				sb_face_lastattackdown = ST_RAMPAGEDELAY;
			else
			{
				sb_face_lastattackdown -= FrameTime;
				if (sb_face_lastattackdown <= 0.0)
				{
					sb_face_priority = 5;
					sb_faceindex = CalcPainOffset() + DoomDefs::ST_RAMPAGEOFFSET;
					sb_facetime = 0.01;
					sb_face_lastattackdown = 0.01;
				}
			}
		}
		else
			sb_face_lastattackdown = -1.0;
	}

	if (sb_face_priority < 5)
	{
		// invulnerability
		if ((Cheats & CF_GODMODE) || EntityEx(MO).bInvulnerable)
		{
			sb_face_priority = 4;

			sb_faceindex = DoomDefs::ST_GODFACE;
			sb_facetime = 0.01;
		}
	}

	// look left or look right if the facecount has timed out
	if (sb_facetime <= 0.0)
	{
		sb_faceindex = CalcPainOffset() + (st_randomnumber % 3);
		sb_facetime = ST_STRAIGHTFACETIME;
		sb_face_priority = 0;
	}

	sb_facetime -= FrameTime;
	sb_oldhealth = Health;
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	//	Just in a case camera entity has been destroyed
	if (!Camera)
	{
		Camera = MO;
	}

	if (MO != Camera)
	{
		ViewOrg = Camera.Origin;
		ViewAngles = Camera.Angles;
	}
	else
	{
		ViewOrg.x = MO.Origin.x;
		ViewOrg.y = MO.Origin.y;

		if (LocalQuakeHappening)
		{
			float intensity;

			intensity = itof(LocalQuakeHappening);
			ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
			ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
		}

		if (PlayerState != PST_DEAD)
		{
			ViewAngles = MO.Angles;
		}
	}

	PaletteFlash();

	UpdateFaceWidget(Level.Game.frametime);

	ClientSetViewOrg(ViewOrg.x, ViewOrg.y, ViewOrg.z);
}

//==========================================================================
//
//  P_UseLines
//
//  Looks for special lines in front of the player to activate.
//
//==========================================================================

void P_UseLines()
{
	float x1;
	float y1;
	float x2;
	float y2;
	TVec useDir;
	intercept_t* in;
	TVec hit_point;
	opening_t *open;

	AngleVector(&MO.Angles, &useDir);
	x1 = MO.Origin.x;
	y1 = MO.Origin.y;

	x2 = x1 + USETHINGRANGE * useDir.x;
	y2 = y1 + USETHINGRANGE * useDir.y;
	foreach MO.PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES | PT_ADDTHINGS)
	{
		if (!in->bIsALine)
		{
			//	Check height.
			if (MO.Origin.z >= in->Thing.Origin.z + in->Thing.Height ||
				MO.Origin.z + MO.Height <= in->Thing.Origin.z)
			{
				continue;
			}
			if (LineSpecialLevelInfo(Level).StartConversation(Actor(MO), Actor(in->Thing)))
			{
				break;
			}
			continue;
		}

		if (!(in->line->flags & ML_TWOSIDED))
			break;	// stop

		hit_point = MO.Origin + (USETHINGRANGE * in->frac) * useDir;
		open = LineOpenings(in->line, hit_point);
		open = FindOpening(open, hit_point.z, hit_point.z + MO.Height);
		if (!open || open->range < 1.0)
		{
			// can't use through a wall
			break;
		}
		continue;
	}

	x2 = x1 + USERANGE * useDir.x;
	y2 = y1 + USERANGE * useDir.y;
	foreach MO.PathTraverse(in, x1, y1, x2, y2, PT_ADDLINES)
	{
		line_t* line;
		float pheight;

		line = in->line;
		if (!line->special || (Level.GET_SPAC(line->flags) != SPAC_USE &&
			Level.GET_SPAC(line->flags) != SPAC_USETHROUGH))
		{
			hit_point = MO.Origin + (USERANGE * in->frac) * useDir;
			open = LineOpenings(line, hit_point);
			open = FindOpening(open, hit_point.z,
				hit_point.z + MO.Height);
			if (!open)
			{
				MO.PlaySound('*usefail', CHAN_VOICE);

				// can't use through a wall
				break;
			}
			// not a special line, but keep checking
			continue;
		}

		if (PointOnPlaneSide(MO.Origin, in->line) == 1)
		{
			//	Don't use back side unless it's a two-sided line.
			if (in->line->backsector != NULL)
				continue;
			break;
		}

		DoomLevelInfo(Level).ActivateLine(in->line, Actor(MO), 0, SPAC_USE);

		//WAS can't use more than one special line in a row
		//jff 3/21/98 NOW multiple use allowed with enabling line flag
		if (Level.GET_SPAC(in->line->flags) != SPAC_USETHROUGH)
		{
			break;
		}
	}
}

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= CF_GODMODE;
	if (Cheats & CF_GODMODE)
	{
		if (MO)
			MO.Health = MainGameInfo(Level.Game).GOD_HEALTH;
		Health = MainGameInfo(Level.Game).GOD_HEALTH;
		cprint("Degreelessness Mode On");
	}
	else
		cprint("Degreelessness Mode Off");
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= CF_NOCLIP;
	if (Cheats & CF_NOCLIP)
		cprint("No Clipping Mode ON");
	else
		cprint("No Clipping Mode OFF");
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

const int
	GIMME_INVULNERABILITY	= 0x00040000,
	GIMME_STRENGTH			= 0x00080000,
	GIMME_INVISIBILITY		= 0x00100000,
	GIMME_IRONFEET			= 0x00200000,
	GIMME_ALLMAP			= 0x00400000,
	GIMME_INFRARED			= 0x00800000,
	GIMME_HEALTH			= 0x01000000,
	GIMME_HEALTH2			= 0x02000000,
	GIMME_ARMOR				= 0x04000000,
	GIMME_ARMOR2			= 0x08000000,
	GIMME_KEYS				= 0x0003f000,
	GIMME_POWERS			= 0x00fc0000,
	GIMME_ALL				= 0xffffffff;

void Cheat_Gimme()
{
	int					i;
	int					i1;
	class<Inventory>	Cls;

	i1 = 0;
	// All
	if (Cmd_CheckParm("All"))
		i1 |= GIMME_ALL;

	// Powers
	if (Cmd_CheckParm("Powers"))
		i1 |= GIMME_POWERS;
	if (Cmd_CheckParm("Invulnerability"))
		i1 |= GIMME_INVULNERABILITY;
	if (Cmd_CheckParm("Bersek"))
		i1 |= GIMME_STRENGTH;
	if (Cmd_CheckParm("Invisibility"))
		i1 |= GIMME_INVISIBILITY;
	if (Cmd_CheckParm("Suit"))
		i1 |= GIMME_IRONFEET;
	if (Cmd_CheckParm("AllMap"))
		i1 |= GIMME_ALLMAP;
	if (Cmd_CheckParm("LiteAmp"))
		i1 |= GIMME_INFRARED;

	// Health
	if (Cmd_CheckParm("Health"))
		i1 |= GIMME_HEALTH;
	if (Cmd_CheckParm("Health2"))
		i1 |= GIMME_HEALTH2;

	// Armor
	if (Cmd_CheckParm("Armor"))
		i1 |= GIMME_ARMOR;
	if (Cmd_CheckParm("Armor2"))
		i1 |= GIMME_ARMOR2;

	// Weapons
	if (Cmd_CheckParm("Weapons"))
	{
		foreach AllClasses(Weapon, Cls)
		{
			if (!FindClassState(Cls, 'Ready'))
			{
				//	An abstract base class.
				continue;
			}
#ifndef DOOM2
			if (Cls == SuperShotgun)
			{
				continue;
			}
#endif
			Weapon Wpn = Weapon(Level.Spawn(Cls,,,, false));
			Wpn.AmmoGive1 = 0;
			Wpn.AmmoGive2 = 0;
			if (!Wpn.TryPickup(EntityEx(MO)))
			{
				Wpn.Destroy();
			}
		}
	}

	// Backpack
	if (Cmd_CheckParm("Backpack"))
	{
		BackpackItem Pack = Level.Spawn(Backpack,,,, false);
		Pack.bDropped = true;
		if (!Pack.TryPickup(EntityEx(MO)))
		{
			Pack.Destroy();
		}
	}

	// Ammo
	if (Cmd_CheckParm("Ammo"))
	{
		foreach AllClasses(Ammo, Cls)
		{
			//	Only direct descendants.
			if (GetClassParent(Cls) != Ammo)
			{
				continue;
			}
			Inventory AmmoItem = EntityEx(MO).FindInventory(Cls);
			if (!AmmoItem)
			{
				AmmoItem = Level.Spawn(Cls,,,, false);
				if (!AmmoItem.TryPickup(EntityEx(MO)))
				{
					AmmoItem.Destroy();
					AmmoItem = none;
				}
			}
			if (AmmoItem)
			{
				AmmoItem.Amount = AmmoItem.MaxAmount;
			}
		}
	}

	// Keys
	if (Cmd_CheckParm("Keys"))
	{
		foreach AllClasses(Key, Cls)
		{
			if (!FindClassState(Cls, 'Spawn'))
			{
				//	Abstract class
				continue;
			}
			EntityEx(MO).GiveInventoryType(Cls);
		}
	}

	// Powers
	if (i1 & GIMME_INVULNERABILITY)
		EntityEx(MO).GiveInventoryType(PowerInvulnerable);
	if (i1 & GIMME_STRENGTH)
		EntityEx(MO).GiveInventoryType(PowerStrength);
	if (i1 & GIMME_INVISIBILITY)
		EntityEx(MO).GiveInventoryType(PowerInvisibility);
	if (i1 & GIMME_IRONFEET)
		EntityEx(MO).GiveInventoryType(PowerIronFeet);
	if (i1 & GIMME_INFRARED)
		EntityEx(MO).GiveInventoryType(PowerLightAmp);

	//  Items
	if (i1 & GIMME_ALLMAP)
		EntityEx(MO).GiveInventoryType(Allmap);

	// Health
	if ((i1 & GIMME_HEALTH) && (Health < 100))
	{
		Health = 100;
		MO.Health = 100;
	}
	if (i1 & GIMME_HEALTH2)
	{
		Health = 200;
		MO.Health = 200;
	}

	// Armor
	if (i1 & GIMME_ARMOR)
	{
		EntityEx(MO).GiveInventoryType(GreenArmor);
	}
	if (i1 & GIMME_ARMOR2)
	{
		EntityEx(MO).GiveInventoryType(BlueArmor);
	}
	cprint("YOU GOT IT");
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	cprint("%d MONSTERS KILLED", DoomLevelInfo(Level).P_Massacre());
}

//==========================================================================
//
//	KilledByPlayer
//
//==========================================================================

void KilledByPlayer(EntityEx Victim)
{
	// Check for frag changes
	if (Victim.bIsPlayer)
	{
		if (bIsBot)
		{
			Bot.Killed(Victim);
		}

		if (Victim.Player.bIsBot)
		{
			Player(Victim.Player).Bot.Died(EntityEx(MO));
		}

		if (MO == Victim)
		{
			Frags--;
		}
		else
		{
			Frags++;
		}
	}
}

defaultproperties
{
}
