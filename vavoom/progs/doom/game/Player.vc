//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Player : BasePlayer;

//
//  FIRST FIELDS ARE STATS THAT ARE SENT TO CLIENT FOR STATUS BAR
//

sb_stats_t Stats;

int Ammo[NUMAMMO];
int MaxAmmo[NUMAMMO];
int ReadyAmmo;

bool WeaponOwned[NUMWEAPONS];

int ArmorPoints;

int ReadyWeapon;

// For screen flashing (red or bright).
float DamageFlash;
float BonusFlash;

//
//  ----------
//

bool Backpack;

// Bit flags, for cheats and debug.
// See cheat_t, above.
int Cheats;

// Power ups. invinc and invis are tic counters.
float Powers[NUMPOWERS];

int Keys;

// Base height above floor for viewz.
float ViewHeight;
// Bob/squat speed.
float DeltaViewHeight;
// bounded/scaled total momentum.
float Bob;

// Refired shots are less accurate.
int Refire;

// Is wp_nochange if not changing.
int PendingWeapon;

// Who did damage (NULL for floors/ceilings).
Actor Attacker;

int JumpTics;
int LocalQuakeHappening;

// Armor type is 0-2.
int ArmorType;

TVec MoveDir;

float LastSectorDamageTime;

float HazardTime;
float LastHazardTime;

#ifndef	NO_BOTS
BotPlayer Bot;
#endif

//==========================================================================
//
//  PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer()
{
	ViewEnts[ps_weapon] = SpawnObject(Weapon, none);
	ViewEnts[ps_weapon].Player = self;
	ViewEnts[ps_flash] = SpawnObject(Weapon, none);
	ViewEnts[ps_flash].Player = self;
#ifndef	NO_BOTS
	if (bIsBot)
	{
		Bot = SpawnObject(BotPlayer, none);
		Bot.player = self;
		Bot.OnBeginPlay();
	}
#endif
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient()
{
	if (deathmatch)
	{
		DeathMatchSpawnPlayer();
	}
	else
	{
		SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
			P_GetPlayerNum(self)]);
	}
}

//==========================================================================
//
//  NetGameReborn
//
//	Respawn at the start
//
//==========================================================================

void NetGameReborn()
{
	int i;

	// remove pitch and roll angles from corpse
	MO.Angles.pitch = 0.0;
	MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	MO.Player = none;
	MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (deathmatch)
	{
		DeathMatchSpawnPlayer();
		return;
	}

	if (CheckSpot(&level->playerstarts[RebornPosition * MAXPLAYERS +
		P_GetPlayerNum(self)]))
	{
		SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
			P_GetPlayerNum(self)]);
		return;
	}

	// try to spawn at one of the other players spots
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (CheckSpot(&level->playerstarts[RebornPosition * MAXPLAYERS + i]))
		{
			SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + i]);
			return;
		}
		// he's going to be inside something.  Too bad.
	}
	SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
		P_GetPlayerNum(self)]);
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient()
{
	int i;

#ifndef	NO_BOTS
	if (Bot != none)
	{
		Bot.Destroy();
		Bot = none;
	}
#endif
	if (MO)
	{
		MO.Player = none;
		MO.bIsPlayer = false;
		MO.Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (ViewEnts[i])
		{
			ViewEnts[i].Destroy();
			ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(PlayerName));
	MO.PlayFullVolumeSound('Chat', CHAN_AUTO);
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged()
{
	if (!bSpawned)
	{
		return;
	}
	MO.Translation = Color;
	SetClientModel();
}

//==========================================================================
//
//	SetClientModel
//
//==========================================================================

void SetClientModel()
{
	string model;
	string skin;

	model = Info_ValueForKey(ARR2STR(UserInfo), "model");
	if (!model || !strgetchar(model, 0))
	{
		MO.bFixedModel = false;
		MO.ModelSkinNum = 0;
		return;
	}

	MO.bFixedModel = true;
	MO.ModelIndex = FindModel(va("players/%s/tris.md2", model));
	skin = Info_ValueForKey(ARR2STR(UserInfo), "skin");
	if (skin && strgetchar(skin, 0))
	{
		MO.ModelSkinNum = FindSkin(va("players/%s/%s", model, skin));
	}
	else
	{
		MO.ModelSkinNum = 0;
	}
}

//==========================================================================
//
//  DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void DeathMatchSpawnPlayer()
{
	int i;
	int j;

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % level->numdeathmatchstarts;
		if (CheckSpot(&level->deathmatchstarts[i]))
		{
			SpawnPlayer(&level->deathmatchstarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	SpawnPlayer(&level->playerstarts[P_GetPlayerNum(self)]);
}

//==========================================================================
//
//  CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool CheckSpot(mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int mtnum;
	int sfxnum;
	int i;

	if (!MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < MAXPLAYERS; i++)
			if (svvars->Players[i] && svvars->Players[i].MO &&
				svvars->Players[i].MO.Origin.x == mthing->x &&
				svvars->Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	if (!MO.CheckPosition(vector(x, y, ONFLOORZ)))
	{
		return false;
	}

	// flush an old corpse if needed 
	if (bodyqueslot >= BODYQUESIZE)
		bodyque[bodyqueslot % BODYQUESIZE].Remove();
	bodyque[bodyqueslot % BODYQUESIZE] = MO;
	bodyqueslot++;

	// spawn a teleport fog 
	sec = GLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight));
	A.PlaySound('Teleport', CHAN_VOICE);

	return true;
}

//==========================================================================
//
//  SpawnPlayer
//
//  Called when a player is spawned on the level. Most of the player
// structure stays unchanged between levels.
//
//==========================================================================

void SpawnPlayer(mthing_t * mthing)
{
	float x;
	float y;
	float z;
	PlayerPawn PP;

	if (PlayerState == PST_REBORN)
		PlayerReborn();

	x = mthing->x;
	y = mthing->y;
	z = ONFLOORZ;
	PP = PlayerPawn(Spawn(DoomPlayer, vector(x, y, z)));
	PP.Origin.z += mthing->height;
	PP.LinkToWorld();

	// set color translations for player sprites
	PP.Translation = Color;

	PP.Angles.yaw = itof(mthing->angle);
	PP.Player = self;
	PP.bIsPlayer = true;
	PP.Health = Health;

	MO = PP;
	PlayerState = PST_LIVE;
	Refire = 0;
	DamageFlash = 0.0;
	BonusFlash = 0.0;
	ExtraLight = 0;
	FixedColormap = 0;
	LastSectorDamageTime = 0.0;
	LastHazardTime = 0.0;
	ViewHeight = VIEWHEIGHT;
	ViewAngles = PP.Angles;
	bFixAngle = true;

	// setup gun psprite
	SetupPsprites();

	// give all cards in death match mode
	if (deathmatch)
	{
		Keys = 0x3f;
	}

	// wake up the status bar
	SB_Start();

#ifndef	NO_BOTS
	if (bIsBot)
	{
		Bot.OnSpawn();
	}
#endif

	SetClientModel();
}

//==========================================================================
//
//  PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialized
//
//==========================================================================

void PlayerReborn()
{
#ifndef	NO_BOTS
	BotPlayer b;
#endif

	//  Clear player struct
#ifndef	NO_BOTS
	b = Bot;
#endif
	ClearPlayer(self);
#ifndef	NO_BOTS
	Bot = b;
#endif

	//  Set initial data
	bUseDown = true;	// don't do anything immediately
	bAttackDown = true;
	PlayerState = PST_LIVE;
	Health = INITIAL_HEALTH;
#ifdef DDF
	SetInitialWeapons(self);
#else
	Ammo[am_clip] = INITIAL_AMMO;
	MaxAmmo[am_clip] = maxammo[am_clip];
	MaxAmmo[am_shell] = maxammo[am_shell];
	MaxAmmo[am_misl] = maxammo[am_misl];
	MaxAmmo[am_cell] = maxammo[am_cell];
	WeaponOwned[wp_fist] = true;
	WeaponOwned[wp_pistol] = true;
	SetWeapon(wp_pistol);
#endif
	LocalQuakeHappening = 0;
}

//==========================================================================
//
//  PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void PlayerExitMap(bool clusterChange)
{
	int i;

	if (clusterChange)
	{
		Keys = 0;
	}

	for (i = 0; i < NUMPOWERS; i++)
	{
		Powers[i] = 0.0;
	}
	Items = 0;
	MO.Angles.pitch = 0.0;
	MO.Translucency = 0;	// cancel invisibility
	ExtraLight = 0;			// cancel gun flashes
	FixedColormap = 0;		// cancel ir gogles
	DamageFlash = 0.0;		// no palette changes
	BonusFlash = 0.0;
}

//==========================================================================
//
//	GiveAmmo
//
//	Returns false if the ammo can't be picked up at all
//
//==========================================================================

bool GiveAmmo(int ammo, int num)
{
	int oldammo;
	int max;

	if (ammo == am_noammo)
		return false;

	if (ammo < 0 || ammo > NUMAMMO)
		Error("P_GiveAmmo: bad type %i", ammo);

	max = MaxAmmo[ammo];
	if (Ammo[ammo] == max)
		return false;

	if (gameskill == sk_baby || gameskill == sk_nightmare)
	{
		// give double ammo in trainer mode,
		// you'll need in nightmare
		num <<= 1;
	}

	oldammo = Ammo[ammo];
	Ammo[ammo] += num;

	if (Ammo[ammo] > max)
		Ammo[ammo] = max;

	// If non zero ammo, 
	// don't change up weapons,
	// player was lower on purpose.
	if (oldammo)
		return true;

	// We were down to zero,
	// so select a new weapon.
	// Preferences are not user selectable.
	switch (ammo)
	{
	case am_clip:
		if (ReadyWeapon == wp_fist)
		{
			if (WeaponOwned[wp_chaingun])
				PendingWeapon = wp_chaingun;
			else
				PendingWeapon = wp_pistol;
		}
		break;

	case am_shell:
		if (ReadyWeapon == wp_fist || ReadyWeapon == wp_pistol)
		{
			if (WeaponOwned[wp_shotgun])
				PendingWeapon = wp_shotgun;
		}
		break;

	case am_cell:
		if (ReadyWeapon == wp_fist || ReadyWeapon == wp_pistol)
		{
			if (WeaponOwned[wp_plasma])
				PendingWeapon = wp_plasma;
		}
		break;

	case am_misl:
		if (ReadyWeapon == wp_fist)
		{
			if (WeaponOwned[wp_missile])
				PendingWeapon = wp_missile;
		}
	default:
		break;
	}

	return true;
}

//==========================================================================
//
//  GiveWeapon
//
//  The weapon name may have a MF_DROPPED flag ored in.
//
//==========================================================================

bool GiveWeapon(int weapon, bool dropped)
{
#ifdef DDF
	if (WeaponOwned[weapon])
	{
		return false;
	}
	WeaponOwned[weapon] = true;
	PendingWeapon = weapon;
	return true;
#else
	bool gaveammo;
	bool gaveweapon;
	int ammoCount;

	ammoCount = clipammo[weapon_ammo_type[weapon]];
	if (netgame && (deathmatch < 2) && !dropped)
	{
		// leave placed weapons forever on net games
		if (WeaponOwned[weapon])
			return false;

		BonusFlash += BONUSADD;
		WeaponOwned[weapon] = true;

		if (deathmatch)
			GiveAmmo(weapon_ammo_type[weapon], 5 * ammoCount);
		else
			GiveAmmo(weapon_ammo_type[weapon], 2 * ammoCount);
		PendingWeapon = weapon;

		MO.PlaySound('PickupWeapon', CHAN_ITEM);
		return false;
	}

	gaveammo = false;
	if (weapon_ammo_type[weapon] != am_noammo)
	{
		// give one clip with a dropped weapon,
		// two clips with a found weapon
		if (dropped)
			gaveammo = GiveAmmo(weapon_ammo_type[weapon], 1 * ammoCount);
		else
			gaveammo = GiveAmmo(weapon_ammo_type[weapon], 2 * ammoCount);
	}

	gaveweapon = false;
	if (!WeaponOwned[weapon])
	{
		gaveweapon = true;
		WeaponOwned[weapon] = true;
		PendingWeapon = weapon;
	}

	return (gaveweapon || gaveammo);
#endif
}

//==========================================================================
//
//	GiveBody
//
//	Returns false if the body isn't needed at all
//
//==========================================================================

bool GiveBody(int num, int max)
{
	if (MO.Health >= max)
	{
		return false;
	}

	MO.Health += num;
	if (MO.Health > max)
	{
		MO.Health = max;
	}
	Health = MO.Health;

	return true;
}

//==========================================================================
//
//	GiveArmor
//
//	Returns false if the armor is worse than the current armor.
//
//==========================================================================

bool GiveArmor(int armortype)
{
	int hits;

	hits = armortype * 100;
	if (ArmorPoints >= hits)
		return false;	// don't pick up

	ArmorType = armortype;
	ArmorPoints = hits;

	return true;
}

//==========================================================================
//
//	GiveArmor2
//
//	Returns false if the armor is worse than the current armor.
//
//==========================================================================

bool GiveArmor2(int armortype, int num, int max)
{
	if (ArmorPoints >= max)
	{
		return false;	// don't pick up
	}
	ArmorPoints += num;
	if (ArmorPoints > max)
	{
		ArmorPoints = max;
	}
	if (ArmorType < armortype)
	{
		ArmorType = armortype;
	}
	return true;
}

//==========================================================================
//
//	GiveCard
//
//==========================================================================

bool GiveCard(int card)
{
	if (Keys & (1 << card))
		return false;

	BonusFlash = BONUSADD;
	Keys |= 1 << card;
	return true;
}

//==========================================================================
//
//  GiveItem
//
//==========================================================================

bool GiveItem(int item)
{
	if (Items & item)
	{
		return false;	// already got it
	}

	Items |= item;
	return true;
}

//==========================================================================
//
//	GivePower
//
//==========================================================================

bool GivePower(int power)
{
	if (power == pw_invulnerability)
	{
		Powers[power] = INVULNTIME;
		return true;
	}

	if (power == pw_invisibility)
	{
		Powers[power] = INVISTIME;
		MO.Translucency = 90;
		return true;
	}

	if (power == pw_infrared)
	{
		Powers[power] = INFRATIME;
		return true;
	}

	if (power == pw_ironfeet)
	{
		Powers[power] = IRONTIME;
		return true;
	}

	if (power == pw_strength)
	{
		GiveBody(100, MAXHEALTH);
		Powers[power] = 1.0;
		if (ReadyWeapon != wp_fist)
			PendingWeapon = wp_fist;
		return true;
	}

	if (Powers[power])
		return false;	// already got it

	Powers[power] = 1.0;
	return true;
}

//==========================================================================
//
//	GivePower2
//
//==========================================================================

bool GivePower2(int power, float duration, float max)
{
	if (Powers[power] >= max)
		return false;	// already got it

	Powers[power] += duration;
	if (Powers[power] >= max)
	{
		Powers[power] = max;
	}

	if (power == pw_invisibility)
	{
		MO.Translucency = 90;
	}
	if (power == pw_strength)
	{
		if (ReadyWeapon != wp_fist)
			PendingWeapon = wp_fist;
	}

	return true;
}

//==========================================================================
//
//  ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void ThrustPlayer(float angle, float move, float deltaTime)
{
	if ((MO.Sector->special & SECSPEC_BASE_MASK) == SECSPEC_FrictionLow)
	{
		move *= 0.5;
	}
	MO.Velocity.x += move * cos(angle) * deltaTime;
	MO.Velocity.y += move * sin(angle) * deltaTime;
}

//==========================================================================
//
//  CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void CalcHeight(float deltaTime)
{
	float angle;
	float bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing even if not on ground)
	Bob = MO.Velocity.x * MO.Velocity.x + MO.Velocity.y * MO.Velocity.y;
	Bob /= 4.0 * 35.0 * 35.0;
	if (Bob > MAXBOB)
		Bob = MAXBOB;

	angle = (180.0 * 35.0 / 10.0) * level->time;
	bob = Bob / 2.0 * sin(angle);

	// move viewheight
	if (PlayerState == PST_LIVE)
	{
		ViewHeight += DeltaViewHeight * deltaTime;

		if (ViewHeight > VIEWHEIGHT)
		{
			ViewHeight = VIEWHEIGHT;
			DeltaViewHeight = 0.0;
		}

		if (ViewHeight < VIEWHEIGHT / 2.0)
		{
			ViewHeight = VIEWHEIGHT / 2.0;
			if (DeltaViewHeight <= 0.0)
				DeltaViewHeight = 0.00001;
		}

		if (DeltaViewHeight)
		{
			DeltaViewHeight += 256.0 * deltaTime;
			if (!DeltaViewHeight)
				DeltaViewHeight = 0.00001;
		}
	}
	ViewOrg.z = MO.Origin.z + ViewHeight + bob;

	if (ViewOrg.z > MO.CeilingZ - 4.0)
		ViewOrg.z = MO.CeilingZ - 4.0;
}

//==========================================================================
//
//  MovePlayer
//
//==========================================================================

void MovePlayer(float deltaTime)
{
	float forward;
	float side;

	// Do not let the player control movement
	//  if not onground.
	onground = MO.Origin.z <= MO.FloorZ || MO.bOnMobj;

	forward = ForwardMove * 5.0;
	side = SideMove * 5.0;

	if (!onground)
	{
		forward *= air_control;
		side *= air_control;
	}

	if (forward)
	{
		ThrustPlayer(MO.Angles.yaw, forward, deltaTime);
	}
	if (side)
	{
		ThrustPlayer(MO.Angles.yaw - 90.0, side, deltaTime);
	}

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if ((Buttons & BT_JUMP) && onground && !JumpTics)
	{
		//  Jump
		MO.Velocity.z = 9.0 * 35.0;
		JumpTics = 18;
	}
}

//==========================================================================
//
//  CheckWaterJump
//
//==========================================================================

void CheckWaterJump()
{
	TVec start;
	TVec end;
	TVec vforward;

	// check for a jump-out-of-water
	AngleVector(&MO.Angles, &vforward);
	start = MO.Origin;
	start.z += MO.Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalise(vforward);
	end = start + vforward * 24.0;
	if (!TraceLine(start, end))
	{
		// solid at waist
		start.z = MO.Origin.z + MO.Height;
		end = start + vforward * 24.0;
		MoveDir = trace_plane_normal * -50.0;
		if (TraceLine(start, end))
		{
			// open at eye level
			MO.bWaterJump = true;
			MO.Velocity.z = 320.0;
			MO.ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  WaterMove
//
//==========================================================================

void WaterMove(float deltaTime)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	// Do not let the player control movement
	//  if not onground.
	onground = MO.Origin.z <= MO.FloorZ || MO.bOnMobj;

	AngleVectors(&MO.Angles, &vforward, &vright, &vup);

	forward = ForwardMove;
	side = SideMove;

	wishvel = forward * vforward + side * vright;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  else
//      wishvel.z += cmd.upmove;

	MO.Velocity += 3.5 * deltaTime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState();
	}

	if (Buttons & BT_JUMP)
	{
		if (MO.WaterType == CONTENTS_WATER)
			MO.Velocity.z = 100.0;
		else if (MO.WaterType == CONTENTS_NUKAGE || MO.WaterType == CONTENTS_SLIME)
			MO.Velocity.z = 80.0;
		else
			MO.Velocity.z = 50.0;
	}
	CheckWaterJump();
}

//==========================================================================
//
//  WaterJump
//
//==========================================================================

void WaterJump()
{
	if (!MO.ReactionTime || !MO.WaterLevel)
	{
		MO.bWaterJump = false;
		MO.ReactionTime = 0.0;
	}
	MO.Velocity.x = MoveDir.x;
	MO.Velocity.y = MoveDir.y;
}

//==========================================================================
//
//  PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector
//
//==========================================================================

void PlayerInSpecialSector(float deltaTime)
{
	float speed;
	float finean;

	//	Falling, not all the way down yet?
	if (MO.Origin.z != GetPlanePointZ(&MO.Sector->floor, MO.Origin))
		return;

	if (MO.Sector->special & SECSPEC_SECRET_MASK)
	{
		//	Secret area.
		SecretCount++;
		level->currentsecret++;
		MO.Sector->special &= ~SECSPEC_SECRET_MASK;
		centerprint(self, "You found a secret area");
	}

	// Has hitten ground.
	if (MO.Sector->special >= SECSPEC_LightFlicker &&
		MO.Sector->special <= 255)
	{
		switch (MO.Sector->special)
		{
		case SECSPEC_DamageHellslime:
			if (!Powers[pw_ironfeet] &&
				level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 10);
			}
			break;
		case SECSPEC_DamageSludge:
			if (!Powers[pw_ironfeet] &&
				level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 4);
			}
			break;
		case SECSPEC_DamageNukage:
			if (!Powers[pw_ironfeet] &&
				level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 5);
			}
			break;
		case SECSPEC_LightStrobeFastDamage:
		case SECSPEC_DamageSuperHellslime:
			if ((!Powers[pw_ironfeet] || (P_Random() < 5)) &&
				level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 20);
			}
			break;
		case SECSPEC_DamageSuperHellslimeExit:
			// EXIT SUPER DAMAGE! (for E1M8 finale)
			Cheats &= ~CF_GODMODE;
	
			if (level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 20);
			}
	
			if (Health <= 10)
			{
				G_ExitLevel(0);
			}
			break;
		case SECSPEC_DamageLavaWimpy:
			if (level->time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				//MO.Damage(GLavaInflictor, none, 5);
				MO.Damage(none, none, 5);
				//MO.HitFloorEffect();
			}
			break;
		case SECSPEC_DamageLavaHefty:
			if (level->time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				//MO.Damage(GLavaInflictor, none, 8);
				MO.Damage(none, none, 8);
				//MO.HitFloorEffect();
			}
			break;
		case SECSPEC_ScrollEastLavaDamage:
			ThrustPlayer(0.0, 1024.0, deltaTime);
			if (level->time - LastSectorDamageTime >= 16.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				//MO.Damage(GLavaInflictor, none, 5);
				MO.Damage(none, none, 5);
				//MO.HitFloorEffect();
			}
			break;
		case SECSPEC_DamageHazard:
			if (!Powers[pw_ironfeet])
				HazardTime += 2.0 * deltaTime;
			break;
		case SECSPEC_DamageInstantDeath:
			MO.Damage(none, none, 999);
			break;
		case SECSPEC_DamageSuperHazard:
			if (!Powers[pw_ironfeet])
				HazardTime += 4.0 * deltaTime;
			break;
		}
	}
	else
	{
		//	Extended sector damage type.
		switch (MO.Sector->special & SECSPEC_DAMAGE_MASK)
		{
		case 0x0100:
			if (!Powers[pw_ironfeet] &&
				level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 5);
			}
			break;
		case 0x0200:
			if (!Powers[pw_ironfeet] &&
				level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 10);
			}
			break;
		case 0x0300:
			if ((!Powers[pw_ironfeet] || (P_Random() < 5)) &&
				level->time - LastSectorDamageTime >= 32.0 / 35.0)
			{
				LastSectorDamageTime = level->time;
				MO.Damage(none, none, 20);
			}
			break;
		}
	}

	switch (MO.Sector->special & 255)
	{
	case SECSPEC_ScrollCurrent:
		speed = itof((MO.Sector->tag - 100) % 10) / 16.0 * 35.0;
		finean = itof((MO.Sector->tag - 100) / 10) * 45.0;
		MO.Velocity.x += speed * cos(finean);
		MO.Velocity.y += speed * sin(finean);
		break;
	case SECSPEC_ScrollNorthSlow:
	case SECSPEC_ScrollNorthMedium:
	case SECSPEC_ScrollNorthFast:
		ThrustPlayer(90.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthSlow], deltaTime);
		break;
	case SECSPEC_ScrollEastSlow:
	case SECSPEC_ScrollEastMedium:
	case SECSPEC_ScrollEastFast:
		ThrustPlayer(0.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthSlow:
	case SECSPEC_ScrollSouthMedium:
	case SECSPEC_ScrollSouthFast:
		ThrustPlayer(270.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthSlow], deltaTime);
		break;
	case SECSPEC_ScrollWestSlow:
	case SECSPEC_ScrollWestMedium:
	case SECSPEC_ScrollWestFast:
		ThrustPlayer(180.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthWestSlow:
	case SECSPEC_ScrollNorthWestMedium:
	case SECSPEC_ScrollNorthWestFast:
		ThrustPlayer(135.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollNorthEastSlow:
	case SECSPEC_ScrollNorthEastMedium:
	case SECSPEC_ScrollNorthEastFast:
		ThrustPlayer(45.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthEastSlow:
	case SECSPEC_ScrollSouthEastMedium:
	case SECSPEC_ScrollSouthEastFast:
		ThrustPlayer(315.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthEastSlow], deltaTime);
		break;
	case SECSPEC_ScrollSouthWestSlow:
	case SECSPEC_ScrollSouthWestMedium:
	case SECSPEC_ScrollSouthWestFast:
		ThrustPlayer(225.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouthWestSlow], deltaTime);
		break;
	case SECSPEC_ScrollEast5:
	case SECSPEC_ScrollEast10:
	case SECSPEC_ScrollEast25:
	case SECSPEC_ScrollEast30:
	case SECSPEC_ScrollEast35:
		ThrustPlayer(0.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollEast5], deltaTime);
		break;
	case SECSPEC_ScrollNorth5:
	case SECSPEC_ScrollNorth10:
	case SECSPEC_ScrollNorth25:
	case SECSPEC_ScrollNorth30:
	case SECSPEC_ScrollNorth35:
		ThrustPlayer(90.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollNorth5], deltaTime);
		break;
	case SECSPEC_ScrollSouth5:
	case SECSPEC_ScrollSouth10:
	case SECSPEC_ScrollSouth25:
	case SECSPEC_ScrollSouth30:
	case SECSPEC_ScrollSouth35:
		ThrustPlayer(270.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollSouth5], deltaTime);
		break;
	case SECSPEC_ScrollWest5:
	case SECSPEC_ScrollWest10:
	case SECSPEC_ScrollWest25:
	case SECSPEC_ScrollWest30:
	case SECSPEC_ScrollWest35:
		ThrustPlayer(180.0, pushTab[(MO.Sector->special &
			SECSPEC_BASE_MASK) - SECSPEC_ScrollWest5], deltaTime);
		break;
	};
}

//==========================================================================
//
//  PlayerInContents
//
//==========================================================================

void PlayerInContents()
{
	if (!MO.WaterLevel)
	{
		return;
	}
	switch (MO.WaterType)
	{
	case CONTENTS_NUKAGE:
		// NUKAGE DAMAGE
		if (!Powers[pw_ironfeet])
			if (!(level->tictime & 0x1f))
				MO.Damage(none, none, 5);
		break;

	case CONTENTS_SLIME:
		// HELLSLIME DAMAGE
		if (!Powers[pw_ironfeet])
			if (!(level->tictime & 0x1f))
				MO.Damage(none, none, 10);
		break;

	case CONTENTS_LAVA:
		// SUPER HELLSLIME DAMAGE
		if (!Powers[pw_ironfeet] || (P_Random() < 5))
		{
			if (!(level->tictime & 0x1f))
				MO.Damage(none, none, 20);
		}
		break;
	}
}

//==========================================================================
//
//  DeathPlayerTick
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerTick(float deltaTime)
{
	float angle;
	float delta;

	MovePsprites();

	onground = MO.Origin.z <= MO.FloorZ || MO.bOnMobj;

	if (MO.WaterLevel > 1)
	{
		MO.Velocity.z = -60.0;	// drift towards bottom
	}

	// fall to the ground
	if (ViewHeight > 6.0)
		ViewHeight -= 1.0;

	if (ViewHeight < 6.0)
		ViewHeight = 6.0;

	DeltaViewHeight = 0.0;
	CalcHeight(deltaTime);

	if (Attacker && Attacker != MO)
	{
		angle = atan2(Attacker.Origin.y - MO.Origin.y,
			Attacker.Origin.x - MO.Origin.x);

		delta = AngleMod180(angle - ViewAngles.yaw);

		if (delta < 5.0 || delta > -5.0)
		{
			// Looking at killer,
			//  so fade damage flash down.
			ViewAngles.yaw = angle;

			if (DamageFlash)
			{
				DamageFlash -= deltaTime;
				if (DamageFlash <= 0.0)
					DamageFlash = 0.0;
			}
		}
		else if (delta > 0.0)
			ViewAngles.yaw += 5.0;
		else
			ViewAngles.yaw -= 5.0;
	}
	else if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (Buttons & BT_USE)
		PlayerState = PST_REBORN;
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse()
{
	int impulse;

	impulse = Impulse;
	Impulse = 0;

#ifdef DDF
	if (impulse <= 10)
	{
		ChangeWeapon(impulse - 1);
	}
#else
	if (impulse <= 7)
	{
		ChangeWeapon(impulse - 1);
	}
#endif
	else if (impulse == 16)
	{
		//  Suicide
		MO.Damage(none, none, 10000);
	}
}

//==========================================================================
//
//  PlayerTick
//
//==========================================================================

void PlayerTick(float deltaTime)
{
#ifndef	NO_BOTS
	if (bIsBot)
	{
		Bot.BotTick(deltaTime);
	}
#endif

	// fixme: do this in the cheat code
	if (Cheats & CF_NOCLIP)
	{
		MO.bColideWithThings = false;
		MO.bColideWithWorld = false;
	}
	else
	{
		MO.bColideWithThings = true;
		MO.bColideWithWorld = true;
	}

	if (MO.bJustAttacked)
	{
		ForwardMove = 100.0;
		SideMove = 0.0;
		MO.bJustAttacked = false;
	}

	if (PlayerState == PST_DEAD)
	{
		DeathPlayerTick(deltaTime);
		return;
	}

	// Copy view angles
	MO.Angles = ViewAngles;

	if (JumpTics)
	{
		JumpTics--;
	}

	// Move around.
	// Reactiontime is used to prevent movement
	//  for a bit after a teleport.
	if (MO.ReactionTime)
	{
		MO.ReactionTime -= deltaTime;
		if (MO.ReactionTime <= 0.0)
			MO.ReactionTime = 0.0;
		if (MO.bWaterJump)
			WaterJump();
	}
	else
	{
		if (MO.WaterLevel > 1)
			WaterMove(deltaTime);
		else
			MovePlayer(deltaTime);
	}

	CalcHeight(deltaTime);

	if (MO.Sector->special)
		PlayerInSpecialSector(deltaTime);
	PlayerInContents();

	// Check for weapon change.
	if (Impulse)
	{
		PlayerImpulse();
	}

	// check for use
	if (Buttons & BT_USE)
	{
		if (!bUseDown)
		{
			P_UseLines(self);
			bUseDown = true;
		}
	}
	else
	{
		bUseDown = false;
	}

	//  cycle psprites
	MovePsprites();

	//  Counters, time dependend power ups.

	//  Strength counts up to diminish fade.
	if (Powers[pw_strength])
		Powers[pw_strength] += deltaTime;

	if (Powers[pw_invulnerability])
	{
		Powers[pw_invulnerability] -= deltaTime;
		if (Powers[pw_invulnerability] <= 0.0)
			Powers[pw_invulnerability] = 0.0;
	}

	if (Powers[pw_invisibility])
	{
		Powers[pw_invisibility] -= deltaTime;
		if (Powers[pw_invisibility] <= 0.0)
		{
			Powers[pw_invisibility] = 0.0;
			MO.Translucency = 0;
		}
	}

	if (Powers[pw_infrared])
	{
		Powers[pw_infrared] -= deltaTime;
		if (Powers[pw_infrared] <= 0.0)
			Powers[pw_infrared] = 0.0;
	}

	if (Powers[pw_ironfeet])
	{
		Powers[pw_ironfeet] -= deltaTime;
		if (Powers[pw_ironfeet] <= 0.0)
			Powers[pw_ironfeet] = 0.0;
	}

	if (DamageFlash)
	{
		DamageFlash -= deltaTime;
		if (DamageFlash <= 0.0)
			DamageFlash = 0.0;
	}

	if (BonusFlash)
	{
		BonusFlash -= deltaTime;
		if (BonusFlash <= 0.0)
			BonusFlash = 0.0;
	}

	if (HazardTime)
	{
		HazardTime -= deltaTime;
		if (HazardTime <= 0.0)
			HazardTime = 0.0;
		if (level->time - LastHazardTime >= 32.0 / 35.0 &&
			HazardTime > 16.0)
		{
			LastHazardTime = level->time;
			MO.Damage(none, none, 5);
		}
	}

	// Handling colormaps.
	if (Powers[pw_invulnerability])
	{
		if (Powers[pw_invulnerability] > 4.0 ||
			(ftoi(4.0 * Powers[pw_invulnerability]) & 1))
			FixedColormap = INVERSECOLORMAP;
		else
			FixedColormap = 0;
	}
	else if (Powers[pw_infrared])
	{
		if (Powers[pw_infrared] > 4.0 ||
			(ftoi(4.0 * Powers[pw_infrared]) & 1))
		{
			// almost full bright
			FixedColormap = 1;
		}
		else
			FixedColormap = 0;
	}
	else
		FixedColormap = 0;
}

//==========================================================================
//
//  PaletteFlash
//
//  Do red-/gold-shifts from damage/items
//
//==========================================================================

void PaletteFlash()
{
	int cnt;
	int bzc;

	CShifts[CSHIFT_CONTENTS] = 0;
	if (MO.WaterLevel == 3)
	{
		switch (MO.WaterType)
		{
		case CONTENTS_WATER:
			CShifts[CSHIFT_CONTENTS] = CSHIFT(130, 80, 50, 128);
			break;

		case CONTENTS_BLOOD:
			CShifts[CSHIFT_CONTENTS] = CSHIFT(160, 16, 16, 150);
			break;

		case CONTENTS_NUKAGE:
			CShifts[CSHIFT_CONTENTS] = CSHIFT(50, 255, 50, 150);
			break;

		case CONTENTS_SLIME:
			CShifts[CSHIFT_CONTENTS] = CSHIFT(0, 25, 5, 150);
			break;

		case CONTENTS_LAVA:
			CShifts[CSHIFT_CONTENTS] = CSHIFT(255, 80, 0, 150);
			break;
		}
	}

	cnt = ftoi(32.0 * DamageFlash);

	if (Powers[pw_strength])
	{
		// slowly fade the berzerk out
		bzc = 12 - ftoi(Powers[pw_strength] / 2.0);

		if (bzc > cnt)
			cnt = bzc;
	}

	if (cnt)
	{
		Palette = (cnt + 7) >> 3;

		if (Palette >= NUMREDPALS)
			Palette = NUMREDPALS - 1;

		Palette += STARTREDPALS;
	}
	else if (BonusFlash)
	{
		Palette = (ftoi(32.0 * BonusFlash) + 7) >> 3;

		if (Palette >= NUMBONUSPALS)
			Palette = NUMBONUSPALS - 1;

		Palette += STARTBONUSPALS;
	}
	else if (Powers[pw_ironfeet] > 4.0 ||
		ftoi(4.0 * Powers[pw_ironfeet]) & 1)
		Palette = RADIATIONPAL;
	else
		Palette = 0;
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos()
{
	ViewOrg.x = MO.Origin.x;
	ViewOrg.y = MO.Origin.y;

	if (LocalQuakeHappening)
	{
		float intensity;

		intensity = itof(LocalQuakeHappening);
		ViewOrg.x += (Random() - 0.5) * (intensity * 4.0);
		ViewOrg.y += (Random() - 0.5) * (intensity * 4.0);
	}

	if (PlayerState != PST_DEAD)
	{
		ViewAngles = MO.Angles;
	}

	PaletteFlash();

	Stats.flags = Keys;
	if ((Cheats & CF_GODMODE) || Powers[pw_invulnerability])
		Stats.flags |= SBF_GOD_MODE;

	if (Weapon(ViewEnts[ps_weapon]).Ammo == am_noammo)
		ReadyAmmo = 1994;	// means "n/a"
	else
		ReadyAmmo = Ammo[Weapon(ViewEnts[ps_weapon]).Ammo];
}

//==========================================================================
//
//  SetPlayerRunState
//
//==========================================================================

void SetPlayerRunState()
{
	if (MO.StateNum == MO.IdleState)
	{
		MO.SetState(MO.SeeState);
	}
}

//==========================================================================
//
//  SpawnPlayerMissile
//
//  Tries to aim at a nearby monster
//
//==========================================================================

Actor SpawnPlayerMissile(classid type)
{
	Actor A;
	TVec dir;

	dir = Aim(MO, 16.0 * 64.0);

	A = Spawn(type, MO.Origin + vector(0.0, 0.0, 32.0));

	if (A.SightSound)
		A.PlaySound(A.SightSound, CHAN_VOICE);

	A.Instigator = MO;
	A.Velocity = dir * A.Speed;
	VectorAngles(&dir, &A.Angles);

	A.CheckMissileSpawn();

	return A;
}

#ifdef DDF
//==========================================================================
//
//	ActPlayerAttack
//
//==========================================================================

void ActPlayerAttack(AttackType *attack)
{
	int i;
	float range;
	int damage;
	TAVec aimAngles;
	TVec dir;
	TVec aimDir;
	Actor proj;

	range = (attack->Range > 0.0) ? attack->Range : MISSILERANGE;

	switch (attack->AttackStyle)
	{
	case ATK_CloseCombat:
		if (attack->Sound)
			MO.PlaySound(attack->Sound, CHAN_WEAPON);

		DAMAGE_COMPUTE(damage, attack->Damage);

		if (Powers[pw_strength])
			damage *= 10;

		aimAngles = MO.Angles;
		aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
			Random()) * 45.0 / 8.0);
		dir = AimLineAttack(MO, aimAngles, attack->Range);
		LineAttack(MO, dir, attack->Range, damage);

		// turn to face target
		if (linetarget && attack->bFaceTarget)
		{
			MO.Angles.yaw = atan2(
				linetarget.Origin.y - MO.Origin.y,
				linetarget.Origin.x - MO.Origin.x);
			bFixAngle = true;
		}
		break;

	case ATK_Projectile:
		DAMAGE_COMPUTE(damage, attack->Damage);
		proj = SpawnPlayerMissile(attack->AtkMobj);
		proj.MissileDamage = damage;
		break;

	case ATK_Shot:
		if (attack->Sound)
			MO.PlaySound(attack->Sound, CHAN_WEAPON);

		aimDir = Aim(MO, 16.0 * 64.0);
		// -AJA- 1999/09/10: apply the attack's angle offsets.
		//objangle -= attack->angle_offset;
		//objslope += attack->slope_offset;
		for (i = 0; i < attack->Count; i++)
		{
			//  Make a copy of angles because inacurate shoot will modify them
			dir = aimDir;
			if (!Refire)
			{
				TAVec angles;

				VectorAngles(&dir, &angles);
				if (attack->AccuracyAngle > 0.0)
					angles.yaw += attack->AccuracyAngle * (Random() - Random());
				//if (attack->accuracy_slope > 0)
				//	slope += attack->accuracy_slope * (P_RandomNegPos() / 255.0);
				AngleVector(&angles, &dir);
			}
			DAMAGE_COMPUTE(damage, attack->Damage);
			LineAttack(MO, dir, MISSILERANGE, damage);
		}
		break;

	case ATK_SmartProjectile:	// EXTRA
		print("Smart proj");
		//LaunchSmartProjectile(object, target, attack->atk_mobj);
		break;

	case ATK_RandomSpread:		// EXTRA
		print("Random spread");
		//P_ActLaunchRandomSpread(object);
		break;

	case ATK_ShootToSpot:		// EXTRA
		print("Shoot to spot");
		//ShootToSpot(object);
		break;

	case ATK_SkullFly:			// EXTRA
		Error("Player can't skullfly");
		break;

	case ATK_Spawner:			// EXTRA
		print("spawner");
		//ObjectSpawning(object, object->angle);
		break;

	case ATK_Spreader:			// EXTRA
		print("Spreader");
		//P_ActLaunchOrderedSpread(object);
		break;

	case ATK_Tracker:			// EXTRA
		print("Tracker");
		//LaunchTracker(object);
		break;

	case ATK_TripleSpawner:		// EXTRA
		print("Tripple spawner");
		//ObjectTripleSpawn(object);
		break;

	case ATK_Spray:				// EXTRA
		Error("Player spray");
		break;

	default:
		print("Bad attack type %d", attack->AttackStyle);
	}
}
#endif

//***************************************************************************
//
//  WEAPON UTILITES
//
//***************************************************************************

//==========================================================================
//
//	SetWeapon
//
//==========================================================================

void SetWeapon(int NewWeapon)
{
	ReadyWeapon = NewWeapon;
	PendingWeapon = wp_nochange;
	if (ViewEnts[ps_weapon])
	{
		ViewEnts[ps_weapon].Destroy();
	}
	ViewEnts[ps_weapon] = SpawnObject(WeaponClasses[NewWeapon], none);
	ViewEnts[ps_weapon].Player = self;
	WeaponModel =
		GetModelIndex(Weapon(ViewEnts[ps_weapon]).ThirdPersonModel);
}

//===========================================================================
//
//  SetPsprite
//
//===========================================================================

void SetPsprite(int position, int stnum)
{
	ViewEnts[position].SetState(stnum);
}

//===========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
// Uses player
//
//===========================================================================

void BringUpWeapon()
{
#ifdef DDF
	if (Weapon(ViewEnts[ps_weapon]).StartSound)
		MO.PlaySound(Weapon(ViewEnts[ps_weapon]).StartSound, CHAN_WEAPON);
#else
	if (ReadyWeapon == wp_chainsaw)
		MO.PlaySound('ChainsawStart', CHAN_WEAPON);
#endif

	PendingWeapon = wp_nochange;
	ViewEnts[ps_weapon].SY = WEAPONBOTTOM;

	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).UpState);
}

//==========================================================================
//
//  ChangeWeapon
//
//  The actual changing of the weapon is done when the weapon psprite can
// do it (read: not in the middle of an attack).
//
//==========================================================================

void ChangeWeapon(int newweapon)
{
#ifdef DDF
	int count;
	int i;
	int start;
	int choices[8];
	int key;
	Weapon tmp;

	count = 0;
	start = 0;
	for (i = 0; i < NUMWEAPONS; i++)
	{
		if (!WeaponOwned[i])
			continue;
		if (!WeaponClasses[i])
			continue;
		tmp = Weapon(SpawnObject(WeaponClasses[i], none));
		if (tmp.BindKey == ((newweapon + 1) % 10))
		{
			choices[count] = i;
			if (i == ReadyWeapon)
				start = count;
			count++;
		}
		tmp.Destroy();
	}
	if (count)
	{
		newweapon = choices[(start + 1) % count];
		if (newweapon != ReadyWeapon)
		{
			PendingWeapon = newweapon;
		}
	}
#else //---------
	if (newweapon == wp_fist && WeaponOwned[wp_chainsaw] &&
		!(ReadyWeapon == wp_chainsaw && Powers[pw_strength]))
	{
		newweapon = wp_chainsaw;
	}

#ifdef DOOM2
	if (newweapon == wp_shotgun && WeaponOwned[wp_supershotgun] &&
		ReadyWeapon != wp_supershotgun)
	{
		newweapon = wp_supershotgun;
	}
#endif

#ifdef GRENADE_LAUNCHER
	if (newweapon == wp_missile && WeaponOwned[wp_grenade] &&
		ReadyWeapon != wp_grenade)
	{
		newweapon = wp_grenade;
	}
#endif

	if (WeaponOwned[newweapon] && newweapon != ReadyWeapon)
	{
#ifdef DOOM2
		PendingWeapon = newweapon;
#else
		// Do not go to plasma or BFG in shareware, even if cheated.
		if ((newweapon != wp_plasma && newweapon != wp_bfg) || !shareware)
		{
			PendingWeapon = newweapon;
		}
#endif
	}
#endif
}

//===========================================================================
//
//  DropWeapon
//
//  Player died, so put the weapon away.
//
//===========================================================================

void DropWeapon()
{
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).DownState);
}

//===========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player.
//
//===========================================================================

void SetupPsprites()
{
	int i;

	// remove all psprites
	for (i = 0; i < NUMPSPRITES; i++)
	{
		ViewEnts[i].StateNum = 0;
	}

	// spawn the gun
	BringUpWeapon();
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine.
//
//==========================================================================

void MovePsprites()
{
	int i;
	ViewEntity e;

	for (i = 0; i < NUMPSPRITES; i++)
	{
		e = ViewEnts[i];
		// a null state means not active
		if (e.StateNum)
		{
			// drop tic count and possibly change state

			// a -1 tic count never changes
			if (e.StateTime != -1.0)
			{
				e.StateTime -= frametime;
				if (e.StateTime <= 0.0)
				{
					e.StateTime = 0.0;
					SetPsprite(i, e.NextState);
				}
			}
		}
	}

	ViewEnts[ps_flash].SX = ViewEnts[ps_weapon].SX;
	ViewEnts[ps_flash].SY = ViewEnts[ps_weapon].SY;
}

//==========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough ammo to shoot.
// If not, selects the next weapon to use.
//
//==========================================================================

int CheckAmmo()
{
	int ammo;
	int count;

	ammo = Weapon(ViewEnts[ps_weapon]).Ammo;

#ifdef DDF
	count = Weapon(ViewEnts[ps_weapon]).AmmoPerShot;
#else
	// Minimal amount for one shot varies.
	if (ReadyWeapon == wp_bfg)
		count = BFGCELLS;
#ifdef DOOM2
	else if (ReadyWeapon == wp_supershotgun)
		count = 2;	// Double barrel.
#endif
	else
		count = 1;	// Regular.
#endif

	// Some do not need ammunition anyway.
	// Return if current ammunition sufficient.
	if (ammo == am_noammo || Ammo[ammo] >= count)
		return true;

	// Out of ammo, pick a weapon to change to.
	// Preferences are set here.
	do
	{
#ifndef DOOM2
		if (WeaponOwned[wp_plasma] && Ammo[am_cell] && (!shareware))
#else
		if (WeaponOwned[wp_plasma] && Ammo[am_cell])
#endif
		{
			PendingWeapon = wp_plasma;
		}
#ifdef DOOM2
		else if (WeaponOwned[wp_supershotgun] && Ammo[am_shell] > 2)
		{
			PendingWeapon = wp_supershotgun;
		}
#endif
		else if (WeaponOwned[wp_chaingun] && Ammo[am_clip])
		{
			PendingWeapon = wp_chaingun;
		}
		else if (WeaponOwned[wp_shotgun] && Ammo[am_shell])
		{
			PendingWeapon = wp_shotgun;
		}
		else if (Ammo[am_clip])
		{
			PendingWeapon = wp_pistol;
		}
		else if (WeaponOwned[wp_chainsaw])
		{
			PendingWeapon = wp_chainsaw;
		}
		else if (WeaponOwned[wp_missile] && Ammo[am_misl])
		{
			PendingWeapon = wp_missile;
		}
#ifdef DOOM2
		else if (WeaponOwned[wp_bfg] && Ammo[am_cell] > 40)
#else
		else if (WeaponOwned[wp_bfg] && Ammo[am_cell] > BFGCELLS &&
			(!shareware))
#endif
		{
			PendingWeapon = wp_bfg;
		}
		else
		{
			// If everything fails.
			PendingWeapon = wp_fist;
		}
	}
	while (PendingWeapon == wp_nochange);

	// Now set appropriate weapon overlay.
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).DownState);

	return false;
}

//===========================================================================
//
//  FireWeapon
//
//===========================================================================

void FireWeapon()
{
	if (!CheckAmmo())
	{
		return;
	}

	MO.SetState(MO.MeleeState);
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).AttackState);
	P_NoiseAlert(MO, MO);
}

#ifdef DDF
//==========================================================================
//
//  CheckAmmoSA
//
//  Returns true if there is enough ammo to shoot.
// If not, selects the next weapon to use.
//
//==========================================================================

int CheckAmmoSA()
{
	int ammo;
	int count;

	ammo = Weapon(ViewEnts[ps_weapon]).SAAmmo;

	count = Weapon(ViewEnts[ps_weapon]).SAAmmoPerShot;

	// Some do not need ammunition anyway.
	// Return if current ammunition sufficient.
	if (ammo == am_noammo || Ammo[ammo] >= count)
		return true;

	// Out of ammo, pick a weapon to change to.
	// Preferences are set here.
	do
	{
#ifndef DOOM2
		if (WeaponOwned[wp_plasma] && Ammo[am_cell] && (!shareware))
#else
		if (WeaponOwned[wp_plasma] && Ammo[am_cell])
#endif
		{
			PendingWeapon = wp_plasma;
		}
#ifdef DOOM2
		else if (WeaponOwned[wp_supershotgun] && Ammo[am_shell] > 2)
		{
			PendingWeapon = wp_supershotgun;
		}
#endif
		else if (WeaponOwned[wp_chaingun] && Ammo[am_clip])
		{
			PendingWeapon = wp_chaingun;
		}
		else if (WeaponOwned[wp_shotgun] && Ammo[am_shell])
		{
			PendingWeapon = wp_shotgun;
		}
		else if (Ammo[am_clip])
		{
			PendingWeapon = wp_pistol;
		}
		else if (WeaponOwned[wp_chainsaw])
		{
			PendingWeapon = wp_chainsaw;
		}
		else if (WeaponOwned[wp_missile] && Ammo[am_misl])
		{
			PendingWeapon = wp_missile;
		}
#ifdef DOOM2
		else if (WeaponOwned[wp_bfg] && Ammo[am_cell] > 40)
#else
		else if (WeaponOwned[wp_bfg]
			&& Ammo[am_cell] > BFGCELLS && (!shareware))
#endif
		{
			PendingWeapon = wp_bfg;
		}
		else
		{
			// If everything fails.
			PendingWeapon = wp_fist;
		}
	}
	while (PendingWeapon == wp_nochange);

	// Now set appropriate weapon overlay.
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).DownState);

	return false;
}

//===========================================================================
//
//  FireWeaponSA
//
//===========================================================================

void FireWeaponSA()
{
	if (!Weapon(ViewEnts[ps_weapon]).SAAttackState)
	{
		return;
	}
	if (!CheckAmmoSA())
	{
		return;
	}

	MO.SetState(MO.MeleeState);
	SetPsprite(ps_weapon, Weapon(ViewEnts[ps_weapon]).SAAttackState);
	P_NoiseAlert(MO, MO);
}
#endif

//==========================================================================
//
//  Cheat_God
//
//==========================================================================

void Cheat_God()
{
	Cheats ^= CF_GODMODE;
	if (Cheats & CF_GODMODE)
	{
		if (MO)
			MO.Health = GOD_HEALTH;
		Health = GOD_HEALTH;
		cprint(self, "Degreelessness Mode On");
	}
	else
		cprint(self, "Degreelessness Mode Off");
}

//==========================================================================
//
//  Cheat_NoClip
//
//==========================================================================

void Cheat_NoClip()
{
	Cheats ^= CF_NOCLIP;
	if (Cheats & CF_NOCLIP)
		cprint(self, "No Clipping Mode ON");
	else
		cprint(self, "No Clipping Mode OFF");
}

//==========================================================================
//
//  Cheat_Gimme
//
//==========================================================================

void Cheat_Gimme()
{
#define GIMME_SHOTGUN			0x00000001
#define GIMME_CHAINGUN			0x00000002
#define GIMME_LAUNCHER			0x00000004
#define GIMME_PLASMA			0x00000008
#define GIMME_BFG				0x00000010
#define GIMME_CHAINSAW			0x00000020
#define GIMME_SUPERSHOTGUN		0x00000040
#define GIMME_BACKPACK			0x00000080
#define GIMME_BULLETS			0x00000100
#define GIMME_SHELLS			0x00000200
#define GIMME_ROCKETS			0x00000400
#define GIMME_CELLS				0x00000800
#define GIMME_BLUECARD			0x00001000
#define GIMME_BLUESKULL			0x00002000
#define GIMME_YELLOWCARD		0x00004000
#define GIMME_YELLOWSKULL		0x00008000
#define GIMME_REDCARD			0x00010000
#define GIMME_REDSKULL			0x00020000
#define GIMME_INVULNERABILITY	0x00040000
#define GIMME_STRENGTH			0x00080000
#define GIMME_INVISIBILITY		0x00100000
#define GIMME_IRONFEET			0x00200000
#define GIMME_ALLMAP			0x00400000
#define GIMME_INFRARED			0x00800000
#define GIMME_HEALTH			0x01000000
#define GIMME_HEALTH2			0x02000000
#define GIMME_ARMOR				0x04000000
#define GIMME_ARMOR2			0x08000000
#ifdef GRENADE_LAUNCHER
#define GIMME_GRENADE			0x10000000

#define GIMME_WEAPONS			0x1000007f
#else
#define GIMME_WEAPONS			0x0000007f
#endif
#define GIMME_AMMO				0x00000f00
#define GIMME_KEYS				0x0003f000
#define GIMME_POWERS			0x00fc0000
#define GIMME_ALL				0xffffffff

	int i1;

/*	if (Cmd_Argc() == 1)
    {
       	C_Printf("GIMME [All] [Health] [Health2] [Armor] [Armor2]\n");
        C_Printf(" [Weapons] [Shotgun] [Chaingun] [Launcher] [Plasma]\n");
        C_Printf(" [BFG] [Chainsaw] [SuperShotgun] [Backpack]\n");
        C_Printf(" [Ammo] [Bullets] [Shells] [Rockets] [Cells]\n");
		C_Printf(" [Keys] [BlueCard] [YellowCard] [RedCard]\n");
        C_Printf(" [BlueSkull] [YellowSkull] [RedSkull]\n");
        C_Printf(" [Powers] [Invulnerability] [Bersek]\n");
        C_Printf(" [Invisibility] [Suit] [AllMap] [LiteAmp]\n");
        C_Printf(":Gives you all that you need\n");
        return;
    }*/

	i1 = 0;
	// All
	if (Cmd_CheckParm("All"))
		i1 |= GIMME_ALL;

	// Weapons
	if (Cmd_CheckParm("Weapons"))
		i1 |= GIMME_WEAPONS;
	if (Cmd_CheckParm("Shotgun"))
		i1 |= GIMME_SHOTGUN;
	if (Cmd_CheckParm("Chaingun"))
		i1 |= GIMME_CHAINGUN;
	if (Cmd_CheckParm("Launcher"))
		i1 |= GIMME_LAUNCHER;
	if (Cmd_CheckParm("Plasma"))
		i1 |= GIMME_PLASMA;
	if (Cmd_CheckParm("BFG"))
		i1 |= GIMME_BFG;
	if (Cmd_CheckParm("Chainsaw"))
		i1 |= GIMME_CHAINSAW;
	if (Cmd_CheckParm("SuperShotgun"))
		i1 |= GIMME_SUPERSHOTGUN;
#ifdef GRENADE_LAUNCHER
	if (Cmd_CheckParm("Grenade"))
		i1 |= GIMME_GRENADE;
#endif
	// Backpack
	if (Cmd_CheckParm("Backpack"))
		i1 |= GIMME_BACKPACK;

	// Ammo
	if (Cmd_CheckParm("Ammo"))
		i1 |= GIMME_AMMO;
	if (Cmd_CheckParm("Bullets"))
		i1 |= GIMME_BULLETS;
	if (Cmd_CheckParm("Shells"))
		i1 |= GIMME_SHELLS;
	if (Cmd_CheckParm("Rockets"))
		i1 |= GIMME_ROCKETS;
	if (Cmd_CheckParm("Cells"))
		i1 |= GIMME_CELLS;

	// Keys
	if (Cmd_CheckParm("Keys"))
		i1 |= GIMME_KEYS;
	if (Cmd_CheckParm("BlueCard"))
		i1 |= GIMME_BLUECARD;
	if (Cmd_CheckParm("BlueSkull"))
		i1 |= GIMME_BLUESKULL;
	if (Cmd_CheckParm("YellowCard"))
		i1 |= GIMME_YELLOWCARD;
	if (Cmd_CheckParm("YellowSkull"))
		i1 |= GIMME_YELLOWSKULL;
	if (Cmd_CheckParm("RedCard"))
		i1 |= GIMME_REDCARD;
	if (Cmd_CheckParm("RedSkull"))
		i1 |= GIMME_REDSKULL;

	// Powers
	if (Cmd_CheckParm("Powers"))
		i1 |= GIMME_POWERS;
	if (Cmd_CheckParm("Invulnerability"))
		i1 |= GIMME_INVULNERABILITY;
	if (Cmd_CheckParm("Bersek"))
		i1 |= GIMME_STRENGTH;
	if (Cmd_CheckParm("Invisibility"))
		i1 |= GIMME_INVISIBILITY;
	if (Cmd_CheckParm("Suit"))
		i1 |= GIMME_IRONFEET;
	if (Cmd_CheckParm("AllMap"))
		i1 |= GIMME_ALLMAP;
	if (Cmd_CheckParm("LiteAmp"))
		i1 |= GIMME_INFRARED;

	// Health
	if (Cmd_CheckParm("Health"))
		i1 |= GIMME_HEALTH;
	if (Cmd_CheckParm("Health2"))
		i1 |= GIMME_HEALTH2;

	// Armor
	if (Cmd_CheckParm("Armor"))
		i1 |= GIMME_ARMOR;
	if (Cmd_CheckParm("Armor2"))
		i1 |= GIMME_ARMOR2;

	// Weapons
	if (i1 & GIMME_SHOTGUN)
		WeaponOwned[wp_shotgun] = true;
	if (i1 & GIMME_CHAINGUN)
		WeaponOwned[wp_chaingun] = true;
	if (i1 & GIMME_LAUNCHER)
		WeaponOwned[wp_missile] = true;
	if (i1 & GIMME_PLASMA)
		WeaponOwned[wp_plasma] = true;
	if (i1 & GIMME_BFG)
		WeaponOwned[wp_bfg] = true;
	if (i1 & GIMME_CHAINSAW)
		WeaponOwned[wp_chainsaw] = true;
#ifdef DOOM2
	if (i1 & GIMME_SUPERSHOTGUN)
		WeaponOwned[wp_supershotgun] = true;
#endif
#ifdef GRENADE_LAUNCHER
	if (i1 & GIMME_GRENADE)
		WeaponOwned[wp_grenade] = true;
#endif

	// Backpack
	if (i1 & GIMME_BACKPACK)
		Backpack = true;

	// Ammo
	if (i1 & GIMME_BULLETS)
		Ammo[am_clip] = maxammo[am_clip] * (Backpack ? 2 : 1);
	if (i1 & GIMME_SHELLS)
		Ammo[am_shell] = maxammo[am_shell] * (Backpack ? 2 : 1);
	if (i1 & GIMME_ROCKETS)
		Ammo[am_misl] = maxammo[am_misl] * (Backpack ? 2 : 1);
	if (i1 & GIMME_CELLS)
		Ammo[am_cell] = maxammo[am_cell] * (Backpack ? 2 : 1);

	// Keys
	if (i1 & GIMME_BLUECARD)
		Keys |= 1 << it_bluecard;
	if (i1 & GIMME_YELLOWCARD)
		Keys |= 1 << it_yellowcard;
	if (i1 & GIMME_REDCARD)
		Keys |= 1 << it_redcard;
	if (i1 & GIMME_BLUESKULL)
		Keys |= 1 << it_blueskull;
	if (i1 & GIMME_YELLOWSKULL)
		Keys |= 1 << it_yellowskull;
	if (i1 & GIMME_REDSKULL)
		Keys |= 1 << it_redskull;

	// Powers
	if (i1 & GIMME_INVULNERABILITY)
		GivePower(pw_invulnerability);
	if (i1 & GIMME_STRENGTH)
		GivePower(pw_strength);
	if (i1 & GIMME_INVISIBILITY)
		GivePower(pw_invisibility);
	if (i1 & GIMME_IRONFEET)
		GivePower(pw_ironfeet);
	if (i1 & GIMME_INFRARED)
		GivePower(pw_infrared);

	//  Items
	if (i1 & GIMME_ALLMAP)
		GiveItem(IT_ALL_MAP);

	// Health
	if ((i1 & GIMME_HEALTH) && (Health < 100))
	{
		Health = 100;
		MO.Health = 100;
	}
	if (i1 & GIMME_HEALTH2)
	{
		Health = 200;
		MO.Health = 200;
	}

	// Armor
	if ((i1 & GIMME_ARMOR) && (ArmorPoints < 100))
	{
		ArmorType = 1;
		ArmorPoints = 100;
	}
	if (i1 & GIMME_ARMOR2)
	{
		ArmorType = 2;
		ArmorPoints = 200;
	}
	cprint(self, "YOU GOT IT");
}

//==========================================================================
//
//  Cheat_KillAll
//
//==========================================================================

void Cheat_KillAll()
{
	cprint(self, "%d MONSTERS KILLED", P_Massacre());
}

//==========================================================================
//
//  UnarchivePlayer
//
//==========================================================================

void UnarchivePlayer()
{
	Attacker = none;
}

defaultproperties
{
}

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2005/03/16 15:04:20  dj_jl
//  More work on line specials.
//
//  Revision 1.7  2004/12/27 12:23:11  dj_jl
//  Multiple small changes for version 1.16
//
//  Revision 1.6  2004/11/22 07:36:24  dj_jl
//  Implemented all sector specials in all games.
//
//  Revision 1.5  2004/11/01 07:38:21  dj_jl
//  Almost all Hexen line specials are available in all games.
//
//  Revision 1.4  2004/08/28 12:35:20  dj_jl
//  Move general client functions to player class.
//
//  Revision 1.3  2004/08/23 19:23:42  dj_jl
//  Moved weapon utilites to player class.
//
//  Revision 1.2  2004/08/22 19:23:04  dj_jl
//  Moved many functions to player class.
//
//  Revision 1.1  2003/11/12 16:49:08  dj_jl
//  Changed player structure into a class
//
//**************************************************************************
