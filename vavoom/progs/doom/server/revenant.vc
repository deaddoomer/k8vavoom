//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#ifdef DOOM2

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::A_SkelWhosh
//
//  Ravenant attack sound.
//
//==========================================================================

void Actor::A_SkelWhoosh(void)
{
	if (!Target)
		return;
	A_FaceTarget();
	PlaySound('RavenantSwing', CHAN_WEAPON);
}

//==========================================================================
//
//  Actor::A_SkelFist
//
//  Ravenant close attack.
//
//==========================================================================

void Actor::A_SkelFist(void)
{
	int damage;

	if (!Target)
		return;

	A_FaceTarget();

	if (CheckMeleeRange())
	{
		damage = ((P_Random() % 10) + 1) * 6;
		PlaySound('RavenantPunch', CHAN_WEAPON);
		Target.Damage(self, self, damage);
	}
}

//==========================================================================
//
//  Actor::A_SkelMissile
//
//  Ravenant far attack.
//
//==========================================================================

void Actor::A_SkelMissile(void)
{
	mobj_t *mo;

	if (!Target)
		return;

	A_FaceTarget();
	Origin.z += 16.0;	// so missile spawns higher
	mo = SpawnMissile(this, &Target, RevenantTracer);
	Origin.z -= 16.0;	// back to normal

	mo->Origin = mo->Origin + mo->Velocity * 0.03;
	mo->Target = Target;
}

//==========================================================================
//
//  Actor::A_Tracer
//
//  Ravenant missile tracer.
//
//==========================================================================

#define TRACEADJUST	0.2865921825

void Actor::A_Tracer(void)
{
	mobj_t *th;
	TVec wishdir;
	TVec currdir;
	TVec delta;
	float adjustlen;

	if (level->tictime & 3)
		return;

	// spawn a puff of smoke behind the rocket      
	SpawnPuff(Origin.x, Origin.y, Origin.z);

	th = P_SpawnMobj(Origin.x - Velocity.x * frametime,
		Origin.y - Velocity.y * frametime,
		Origin.z - Velocity.z * frametime, RevenantTracerSmoke);

	th->Velocity.z = 1.0 * 35.0;
	th->StateTime -= Random() * 0.1;
	if (th->StateTime < 0.1)
		th->StateTime = 0.1;

	// adjust direction
	if (!Target || Target.Health <= 0)
		return;

	wishdir = Normalize(MobjCenter(Target) - Origin);
	currdir = Normalize(Velocity);
	delta = wishdir - currdir;
	adjustlen = Length(delta);
	if (adjustlen > TRACEADJUST)
		adjustlen = TRACEADJUST;
	wishdir = currdir + delta * adjustlen;
	Velocity = wishdir * Speed;
	VectorAngles(&wishdir, &Angles);
}

#else

void Actor::A_SkelWhoosh(void)
{
	NotDoom2();
}

void Actor::A_SkelFist(void)
{
	NotDoom2();
}

void Actor::A_SkelMissile(void)
{
	NotDoom2();
}

void Actor::A_Tracer(void)
{
	NotDoom2();
}

#endif

//**************************************************************************
//
//  $Log$
//  Revision 1.9  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.8  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.7  2002/02/22 18:00:13  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.6  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.5  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.4  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.3  2002/01/25 18:04:33  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.2  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.1  2002/01/21 18:19:58  dj_jl
//  Renamed to fix spelling
//
//  Revision 1.11  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
