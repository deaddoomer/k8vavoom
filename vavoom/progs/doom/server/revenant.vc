//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	RevenantTracerSmoke
//
//**************************************************************************

class RevenantTracerSmoke:Effect
{

__states__
{
	S_SMOKE1('PUFF', 1, 4.0 / 35.0, S_SMOKE2) { }
	S_SMOKE2('PUFF', 2, 4.0 / 35.0, S_SMOKE3) { }
	S_SMOKE3('PUFF', 1, 4.0 / 35.0, S_SMOKE4) { }
	S_SMOKE4('PUFF', 2, 4.0 / 35.0, S_SMOKE5) { }
	S_SMOKE5('PUFF', 3, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Translucency = 33;
	IdleState = S_SMOKE1;
}

}

//**************************************************************************
//
//	RevenantTracer
//
//**************************************************************************

class RevenantTracer:Projectile
{

//==========================================================================
//
//  A_Tracer
//
//  Ravenant missile tracer.
//
//==========================================================================

#define TRACEADJUST	0.2865921825

void A_Tracer(void)
{
	Actor A;
	TVec wishdir;
	TVec currdir;
	TVec delta;
	float adjustlen;

	if (level->tictime & 3)
		return;

	// spawn a puff of smoke behind the rocket      
	SpawnPuff(Origin.x, Origin.y, Origin.z);

	A = Spawn(RevenantTracerSmoke, Origin - Velocity * frametime);

	A.Velocity.z = 1.0 * 35.0;
	A.StateTime -= Random() * 0.1;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;

	// adjust direction
	if (!Enemy || Enemy.Health <= 0)
		return;

	wishdir = Normalize(MobjCenter(Enemy) - Origin);
	currdir = Normalize(Velocity);
	delta = wishdir - currdir;
	adjustlen = Length(delta);
	if (adjustlen > TRACEADJUST)
		adjustlen = TRACEADJUST;
	wishdir = currdir + delta * adjustlen;
	Velocity = wishdir * Speed;
	VectorAngles(&wishdir, &Angles);
}

__states__
{
	S_TRACER('FATB', 0 | FF_FULLBRIGHT, 2.0 / 35.0, S_TRACER2) { A_Tracer(); }
	S_TRACER2('FATB', 1 | FF_FULLBRIGHT, 2.0 / 35.0, S_TRACER) { A_Tracer(); }
	S_TRACEEXP1('FBXP', 0 | FF_FULLBRIGHT, 8.0 / 35.0, S_TRACEEXP2) { }
	S_TRACEEXP2('FBXP', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_TRACEEXP3) { }
	S_TRACEEXP3('FBXP', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 11.0;
	Height = 8.0;
	Speed = 350.0;
	MissileDamage = 10;
	Translucency = 33;
	IdleState = S_TRACER;
	DeathState = S_TRACEEXP1;
	SightSound = 'RavenantAttack';
	DeathSound = 'BarrelExplode';
	Effects = EF_DL_RBALL;
}

}

//**************************************************************************
//
//	Revenant
//
//**************************************************************************

class Revenant:Pawn
	__mobjinfo__(66)
{

//==========================================================================
//
//  A_SkelWhosh
//
//  Ravenant attack sound.
//
//==========================================================================

void A_SkelWhoosh(void)
{
	if (!Enemy)
		return;
	A_FaceTarget();
	PlaySound('RavenantSwing', CHAN_WEAPON);
}

//==========================================================================
//
//  A_SkelFist
//
//  Ravenant close attack.
//
//==========================================================================

void A_SkelFist(void)
{
	int damage;

	if (!Enemy)
		return;

	A_FaceTarget();

	if (CheckMeleeRange())
	{
		damage = ((P_Random() % 10) + 1) * 6;
		PlaySound('RavenantPunch', CHAN_WEAPON);
		Enemy.Damage(self, self, damage);
	}
}

//==========================================================================
//
//  A_SkelMissile
//
//  Ravenant far attack.
//
//==========================================================================

void A_SkelMissile(void)
{
	Actor A;

	if (!Enemy)
		return;

	A_FaceTarget();
	Origin.z += 16.0;	// so missile spawns higher
	A = SpawnMissile(Enemy, RevenantTracer);
	Origin.z -= 16.0;	// back to normal

	A.Origin = A.Origin + A.Velocity * 0.03;
	A.Enemy = Enemy;
}

__states__
{
	S_SKEL_STND('SKEL', 0, 'monsters/revenant.md2', 0, 10.0 / 35.0, S_SKEL_STND2) { A_Look(); }
	S_SKEL_STND2('SKEL', 1, 'monsters/revenant.md2', 1, 10.0 / 35.0, S_SKEL_STND) { A_Look(); }
	S_SKEL_RUN1('SKEL', 0, 'monsters/revenant.md2', 2, 2.0 / 35.0, S_SKEL_RUN2) { A_Chase(); }
	S_SKEL_RUN2('SKEL', 0, 'monsters/revenant.md2', 3, 2.0 / 35.0, S_SKEL_RUN3) { A_Chase(); }
	S_SKEL_RUN3('SKEL', 1, 'monsters/revenant.md2', 4, 2.0 / 35.0, S_SKEL_RUN4) { A_Chase(); }
	S_SKEL_RUN4('SKEL', 1, 'monsters/revenant.md2', 5, 2.0 / 35.0, S_SKEL_RUN5) { A_Chase(); }
	S_SKEL_RUN5('SKEL', 2, 'monsters/revenant.md2', 6, 2.0 / 35.0, S_SKEL_RUN6) { A_Chase(); }
	S_SKEL_RUN6('SKEL', 2, 'monsters/revenant.md2', 7, 2.0 / 35.0, S_SKEL_RUN7) { A_Chase(); }
	S_SKEL_RUN7('SKEL', 3, 'monsters/revenant.md2', 8, 2.0 / 35.0, S_SKEL_RUN8) { A_Chase(); }
	S_SKEL_RUN8('SKEL', 3, 'monsters/revenant.md2', 9, 2.0 / 35.0, S_SKEL_RUN9) { A_Chase(); }
	S_SKEL_RUN9('SKEL', 4, 'monsters/revenant.md2', 10, 2.0 / 35.0, S_SKEL_RUN10) { A_Chase(); }
	S_SKEL_RUN10('SKEL', 4, 'monsters/revenant.md2', 11, 2.0 / 35.0, S_SKEL_RUN11) { A_Chase(); }
	S_SKEL_RUN11('SKEL', 5, 'monsters/revenant.md2', 12, 2.0 / 35.0, S_SKEL_RUN12) { A_Chase(); }
	S_SKEL_RUN12('SKEL', 5, 'monsters/revenant.md2', 13, 2.0 / 35.0, S_SKEL_RUN1) { A_Chase(); }
	S_SKEL_FIST1('SKEL', 6, 'monsters/revenant.md2', 14, 0.0 / 35.0, S_SKEL_FIST2) { A_FaceTarget(); }
	S_SKEL_FIST2('SKEL', 6, 'monsters/revenant.md2', 14, 6.0 / 35.0, S_SKEL_FIST3) { A_SkelWhoosh(); }
	S_SKEL_FIST3('SKEL', 7, 'monsters/revenant.md2', 15, 6.0 / 35.0, S_SKEL_FIST4) { A_FaceTarget(); }
	S_SKEL_FIST4('SKEL', 8, 'monsters/revenant.md2', 16, 6.0 / 35.0, S_SKEL_RUN1) { A_SkelFist(); }
	S_SKEL_MISS1('SKEL', 9 | FF_FULLBRIGHT, 'monsters/revenant.md2', 17, 0.0 / 35.0, S_SKEL_MISS2) { A_FaceTarget(); }
	S_SKEL_MISS2('SKEL', 9 | FF_FULLBRIGHT, 'monsters/revenant.md2', 17, 10.0 / 35.0, S_SKEL_MISS3) { A_FaceTarget(); }
	S_SKEL_MISS3('SKEL', 10, 'monsters/revenant.md2', 18, 10.0 / 35.0, S_SKEL_MISS4) { A_SkelMissile(); }
	S_SKEL_MISS4('SKEL', 10, 'monsters/revenant.md2', 19, 10.0 / 35.0, S_SKEL_RUN1) { A_FaceTarget(); }
	S_SKEL_PAIN('SKEL', 11, 'monsters/revenant.md2', 20, 5.0 / 35.0, S_SKEL_PAIN2) { }
	S_SKEL_PAIN2('SKEL', 11, 'monsters/revenant.md2', 21, 5.0 / 35.0, S_SKEL_RUN1) { A_Pain(); }
	S_SKEL_DIE1('SKEL', 11, 'monsters/revdie.md2', 0, 7.0 / 35.0, S_SKEL_DIE2) { }
	S_SKEL_DIE2('SKEL', 12, 'monsters/revdie.md2', 1, 7.0 / 35.0, S_SKEL_DIE3) { }
	S_SKEL_DIE3('SKEL', 13, 'monsters/revdie.md2', 2, 7.0 / 35.0, S_SKEL_DIE4) { A_Scream(); }
	S_SKEL_DIE4('SKEL', 14, 'monsters/revdie.md2', 3, 7.0 / 35.0, S_SKEL_DIE5) { A_Fall(); }
	S_SKEL_DIE5('SKEL', 15, 'monsters/revdie.md2', 4, 7.0 / 35.0, S_SKEL_DIE6) { }
	S_SKEL_DIE6('SKEL', 16, 'monsters/revdie.md2', 5, -1.0, S_NULL) { }
	S_SKEL_RAISE1('SKEL', 16, 'monsters/revdie.md2', 6, 5.0 / 35.0, S_SKEL_RAISE2) { }
	S_SKEL_RAISE2('SKEL', 15, 'monsters/revdie.md2', 7, 5.0 / 35.0, S_SKEL_RAISE3) { }
	S_SKEL_RAISE3('SKEL', 14, 'monsters/revdie.md2', 8, 5.0 / 35.0, S_SKEL_RAISE4) { }
	S_SKEL_RAISE4('SKEL', 13, 'monsters/revdie.md2', 9, 5.0 / 35.0, S_SKEL_RAISE5) { }
	S_SKEL_RAISE5('SKEL', 12, 'monsters/revdie.md2', 10, 5.0 / 35.0, S_SKEL_RAISE6) { }
	S_SKEL_RAISE6('SKEL', 11, 'monsters/revdie.md2', 11, 5.0 / 35.0, S_SKEL_RUN1) { }
}

defaultproperties
{
	Health = 300;
	Radius = 20.0;
	Height = 56.0;
	Mass = 500.0;
	StepSpeed = 10.0;
	PainChance = 0.390625;
	MissileMinRange = 196.0;
	bTriggerHappy = true;
	IdleState = S_SKEL_STND;
	SeeState = S_SKEL_RUN1;
	MeleeState = S_SKEL_FIST1;
	MissileState = S_SKEL_MISS1;
	PainState = S_SKEL_PAIN;
	DeathState = S_SKEL_DIE1;
	RaiseState = S_SKEL_RAISE1;
	SightSound = 'RavenantSight';
	ActiveSound = 'RavenantActive';
	PainSound = 'ZombiePain';
	DeathSound = 'RavenantDeath';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/06/29 15:54:34  dj_jl
//  Floatized PainChance.
//
//  Revision 1.13  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.12  2002/05/03 17:11:55  dj_jl
//  Object classes split up into their files.
//
//  Revision 1.11  2002/03/20 19:07:44  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.10  2002/03/16 17:44:02  dj_jl
//  Added PlayerPawn class, added function Spawn, beautification.
//
//  Revision 1.9  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.8  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.7  2002/02/22 18:00:13  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.6  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.5  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.4  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.3  2002/01/25 18:04:33  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.2  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.1  2002/01/21 18:19:58  dj_jl
//  Renamed to fix spelling
//
//  Revision 1.11  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
