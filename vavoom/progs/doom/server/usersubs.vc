//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

Actor bodyque[BODYQUESIZE];
int bodyqueslot;

//==========================================================================
//
//  G_CheckSpot
//
//  Returns false if the player cannot be respawned at the given mthing_t
// spot because something is occupying it
//
//==========================================================================

bool G_CheckSpot(int playernum, mthing_t * mthing)
{
	float x;
	float y;
	sector_t *sec;
	float an;
	Actor A;
	int mtnum;
	int sfxnum;
	int i;

	if (!svvars->Players[playernum].MO)
	{
		// first spawn of level, before corpses
		for (i = 0; i < playernum; i++)
			if (svvars->Players[i] && svvars->Players[i].MO.Origin.x == mthing->x &&
				svvars->Players[i].MO.Origin.y == mthing->y)
				return false;
		return true;
	}

	x = mthing->x;
	y = mthing->y;

	if (!svvars->Players[playernum].MO.CheckPosition(vector(x, y, ONFLOORZ)))
	{
		return false;
	}

	// flush an old corpse if needed 
	if (bodyqueslot >= BODYQUESIZE)
		bodyque[bodyqueslot % BODYQUESIZE].Remove();
	bodyque[bodyqueslot % BODYQUESIZE] = svvars->Players[playernum].MO;
	bodyqueslot++;

	// spawn a teleport fog 
	sec = GLevel.PointInSector(vector(x, y, 0.0));
	an = itof(45 * (mthing->angle / 45));

	A = Spawn(TeleportFog, vector(x + 20.0 * cos(an), y + 20.0 * sin(an),
		sec->floorheight));
	A.PlaySound('Teleport', CHAN_VOICE);

	return true;
}

//==========================================================================
//
//  P_SpawnPlayer
//
//  Called when a player is spawned on the level. Most of the player
// structure stays unchanged between levels.
//
//==========================================================================

void P_SpawnPlayer(mthing_t * mthing)
{
	Player p;
	float x;
	float y;
	float z;
	PlayerPawn PP;

	p = svvars->Players[mthing->type - 1];

	// not playing?
	if (!p)
		return;

	if (p.PlayerState == PST_REBORN)
		G_PlayerReborn(mthing->type - 1);

	x = mthing->x;
	y = mthing->y;
	z = ONFLOORZ;
	PP = PlayerPawn(Spawn(DoomPlayer, vector(x, y, z)));
	PP.Origin.z += mthing->height;
	PP.LinkToWorld();

	// set color translations for player sprites
	PP.Translation = p.Color;

	PP.Angles.yaw = itof(mthing->angle);
	PP.Player = p;
	PP.bIsPlayer = true;
	PP.Health = p.Health;

	p.MO = PP;
	p.PlayerState = PST_LIVE;
	p.Refire = 0;
	p.DamageFlash = 0.0;
	p.BonusFlash = 0.0;
	p.ExtraLight = 0;
	p.FixedColormap = 0;
	p.ViewHeight = VIEWHEIGHT;
	p.ViewAngles = PP.Angles;
	p.bFixAngle = true;

	// setup gun psprite
	p.SetupPsprites();

	// give all cards in death match mode
	if (deathmatch)
	{
		p.Keys = 0x3f;
	}

	// wake up the status bar
	SB_Start();

#ifndef	NO_BOTS
	if (p.bIsBot)
	{
		p.Bot.OnSpawn();
	}
#endif

	SetClientModel(p);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.35  2004/08/23 19:23:56  dj_jl
//  Moved weapon utilites to player class.
//
//  Revision 1.34  2004/03/01 07:07:42  dj_jl
//  Height for player starts
//
//  Revision 1.33  2003/11/12 16:48:33  dj_jl
//  Changed player structure into a class
//
//  Revision 1.32  2003/07/11 16:47:39  dj_jl
//  Made array of players with pointers
//
//  Revision 1.31  2002/10/26 16:32:21  dj_jl
//  New style of defining classes.
//
//  Revision 1.30  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.29  2002/07/23 13:07:29  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.28  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.27  2002/05/03 17:11:55  dj_jl
//  Object classes split up into their files.
//
//  Revision 1.26  2002/03/28 18:15:34  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.25  2002/03/20 19:07:44  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.24  2002/03/16 17:44:02  dj_jl
//  Added PlayerPawn class, added function Spawn, beautification.
//
//  Revision 1.23  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.22  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.21  2002/02/22 18:00:14  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.19  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.18  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.17  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.16  2002/01/25 18:04:33  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.15  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.13  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.10  2001/12/12 19:15:27  dj_jl
//  Some little changes for state methods
//
//  Revision 1.9  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//  Revision 1.8  2001/12/01 18:14:08  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
