//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	ItemWeaponGrenadeLauncher
//
//**************************************************************************

class ItemWeaponGrenadeLauncher:WeaponPickup
	__mobjinfo__(90)
{

__states__
{
	//  Weapon on ground
	S_GLAUNCH('GLAU', 0, -1.0, S_NULL) { }
}

defaultproperties
{
	IdleState = S_GLAUNCH;
	WeaponType = wp_grenade;
	PickupMessage = "Piched up a grenade launcher";
}

}

//**************************************************************************
//
//	Grenade
//
//**************************************************************************

class Grenade:Rocket
{

__states__
{
	//  Flying grenade
	S_GRENADE('GREN', 0 | FF_FULLBRIGHT, 3.0, S_GRENADE_EXPLODE) { }
	S_GRENADE_EXPLODE('GREN', 0 | FF_FULLBRIGHT, 0.0, S_EXPLODE1)
	{
		ExplodeMissile();
	}
}

defaultproperties
{
	Radius = 11.0;
	Height = 8.0;
	Speed = 600.0;
	MissileDamage = 20;
	bNoGravity = false;
	bBounce = true;
	IdleState = S_GRENADE;
	DeathState = S_EXPLODE1;
	SightSound = 'LauncherFire';
	PainSound = 'GrenadeBounce';
	DeathSound = 'BarrelExplode';
}

}

//**************************************************************************
//
//	WeaponGrenade
//
//**************************************************************************

class WeaponGrenade:Weapon
{

//===========================================================================
//
//  A_FireGrenade
//
//===========================================================================

void A_FireGrenade(void)
{
	Actor A;

	Player->Ammo[Ammo]--;

	A = Spawn(Grenade, Player->MO.Origin + vector(0.0, 0.0, 32.0));

	if (A.SightSound)
		A.PlaySound(A.SightSound, CHAN_VOICE);

	A.Instigator = Player->MO;

	//  See which target is to be aimed at
	if (Player->MO.Angles.pitch)
	{
		TVec v_forward;
		TVec v_right;
		TVec v_up;

		AngleVectors(&Player->MO.Angles, &v_forward, &v_right, &v_up);
		A.Velocity = v_forward * A.Speed + v_up * A.Speed / 3.0 +
			((Random() - 0.5) * 20.0) * v_right +
			((Random() - 0.5) * 20.0) * v_up;
	}
	else
	{
		A.Velocity = Aim(Player->MO, 16.0 * 64.0) * A.Speed;
		A.Velocity.z = A.Speed / 3.0;
	}
	VectorAngles(&A.Velocity, &A.Angles);

	A.CheckMissileSpawn();
}

__states__
{
	//  Weapon in player view
	S_GRENLAUNCH('GRLG', 0, 1.0 / 35.0, S_GRENLAUNCH) { A_WeaponReady(); }
	S_GRENLAUNCHDOWN('GRLG', 0, 1.0 / 35.0, S_GRENLAUNCHDOWN) {	A_Lower(); }
	S_GRENLAUNCHUP('GRLG', 0, 1.0 / 35.0, S_GRENLAUNCHUP) {	A_Raise(); }
	S_GRENLAUNCH1('GRLG', 1, 8.0 / 35.0, S_GRENLAUNCH2) { A_GunFlash(); }
	S_GRENLAUNCH2('GRLG', 1, 12.0 / 35.0, S_GRENLAUNCH3) { A_FireGrenade(); }
	S_GRENLAUNCH3('GRLG', 1, 0.0 / 35.0, S_GRENLAUNCH) { A_ReFire(); }
	S_GRENLAUNCHFLASH1('GRLF', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_GRENLAUNCHFLASH2) { A_Light1();	}
	S_GRENLAUNCHFLASH2('GRLF', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_GRENLAUNCHFLASH3) { }
	S_GRENLAUNCHFLASH3('GRLF', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_GRENLAUNCHFLASH4) {	A_Light2(); }
	S_GRENLAUNCHFLASH4('GRLF', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
}

defaultproperties
{
	Ammo = am_misl;
	UpState = S_GRENLAUNCHUP;
	DownState = S_GRENLAUNCHDOWN;
	ReadyState = S_GRENLAUNCH;
	AttackState = S_GRENLAUNCH1;
	FlashState = S_GRENLAUNCHFLASH1;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.18  2002/06/14 15:51:20  dj_jl
//  A lots of changes, new functions etc for DDF.
//
//  Revision 1.17  2002/05/18 16:59:58  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.16  2002/05/03 17:11:53  dj_jl
//  Object classes split up into their files.
//
//  Revision 1.15  2002/03/20 19:07:43  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.14  2002/03/16 17:38:37  dj_jl
//  Moved grenade firing into weapon class.
//
//  Revision 1.13  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.12  2002/02/22 18:00:07  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.11  2002/02/06 17:28:51  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.10  2002/01/12 17:58:03  dj_jl
//  New style state functions
//
//  Revision 1.9  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.7  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/02 17:42:37  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.5  2001/09/27 17:08:19  dj_jl
//  Removed spawn functions, added mobj classes
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/07 16:42:25  dj_jl
//  Added player models, skins and weapon
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
