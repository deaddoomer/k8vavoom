//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Moving object handling.
//**    Mobj spawn, damage, kill, set state functions
//**
//**************************************************************************

//==========================================================================
//==========================================================================
//
//  GAME SPAWN FUNCTIONS
//
//==========================================================================
//==========================================================================

//==========================================================================
//
//  CopyMThing
//
//==========================================================================

void CopyMThing(mthing_t * from, mthing_t * to)
{
	to->tid = from->tid;
	to->x = from->x;
	to->y = from->y;
	to->height = from->height;
	to->angle = from->angle;
	to->type = from->type;
	to->options = from->options;
	to->special = from->special;
	to->arg1 = from->arg1;
	to->arg2 = from->arg2;
	to->arg3 = from->arg3;
	to->arg4 = from->arg4;
	to->arg5 = from->arg5;
}

//===========================================================================
//
//  Spawn
//
//===========================================================================

Actor Spawn(classid type, TVec AOrigin)
{
	Actor A;

	A = Actor(NewMobjThinker(type));

	A.Origin = AOrigin;
	A.OnMapSpawn(NULL);
	return A;
}

//==========================================================================
//
//  P_SpawnMapThing
//
//  The fields of the mapthing should already be in host byte order.
//
//==========================================================================

void P_SpawnMapThing(mthing_t * mthing, bool spawn_thinkers)
{
	int i;
	int bit;
	Actor A;
	int spawnMask;

	if (mthing->type <= 0)
		return;

	// count deathmatch start positions
	if (mthing->type == 11)
	{
		if (level->numdeathmatchstarts < MAXDEATHMATCHSTARTS)
		{
			CopyMThing(mthing,
				&level->deathmatchstarts[level->numdeathmatchstarts]);
			level->numdeathmatchstarts++;
		}
		return;
	}

	if (mthing->type == PO_SPAWN_TYPE || mthing->type == PO_SPAWNCRUSH_TYPE)
	{
		// Polyobj StartSpot Pt.
		SpawnPolyobj(mthing->x, mthing->y, mthing->angle,
			(mthing->type == PO_SPAWNCRUSH_TYPE));
		return;
	}
	if (mthing->type == PO_ANCHOR_TYPE)
	{
		// Polyobj Anchor Pt.
		AddAnchorPoint(mthing->x, mthing->y, mthing->angle);
		return;
	}

	// check for players specially
	if (mthing->type <= 4)
	{
		// save spots for respawning in network games
		CopyMThing(mthing, &level->playerstarts[mthing->arg1 * MAXPLAYERS +
			mthing->type - 1]);
		return;
	}
	if (mthing->type >= 4001 && mthing->type <= 4004)
	{
		// save spots for respawning in network games
		CopyMThing(mthing, &level->playerstarts[mthing->arg1 * MAXPLAYERS +
			mthing->type - 4001 + 4]);
		//	Change type to range 5-8.
		level->playerstarts[mthing->arg1 * MAXPLAYERS +
			mthing->type - 4001 + 4].type -= 4000 - 4;
		return;
	}

	//  Don't spawn, if we are loading a savegame
	if (!spawn_thinkers)
	{
		return;
	}

	// Check current game type with spawn flags
	if (netgame == false)
	{
		spawnMask = MTF_GSINGLE;
	}
	else if (deathmatch)
	{
		spawnMask = MTF_GDEATHMATCH;
	}
	else
	{
		spawnMask = MTF_GCOOP;
	}
	if (!(mthing->options & spawnMask))
	{
		return;
	}

	// check for apropriate skill level
	if (gameskill == sk_baby)
		bit = 1;
	else if (gameskill == sk_nightmare)
		bit = 4;
	else
		bit = 1 << (gameskill - 1);

	if (!(mthing->options & bit))
		return;

	// find which type to spawn
	for (i = 0; i < num_mobj_types; i++)
	{
		if (mthing->type == mobjinfo[i].doomednum)
		{
			// spawn it
			A = Actor(NewMobjThinker(mobjinfo[i].class_id));
			A.OnMapSpawn(mthing);
			return;
		}
	}
	dprint("P_SpawnMapThing: Unknown type %d at (%f, %f)",
		mthing->type, mthing->x, mthing->y);
}

//==========================================================================
//
//  SpawnPuff
//
//==========================================================================

void SpawnPuff(float x, float y, float z)
{
#if 1
	MSG_Select(MSG_SV_DATAGRAM);
	MSG_WriteByte(svc_gun_shot);
	MSG_WriteShort(ftoi(x));
	MSG_WriteShort(ftoi(y));
	MSG_WriteShort(ftoi(z));
#else
	Actor A;

	z += (Random() - Random()) * 4.0;

	A = P_SpawnMobj(Puff, vector(x, y, z));
	A.Velocity.z = 1.0 * 35.0;
	A.time -= Random() * 0.1;

	if (A.time < 0.1)
		A.time = 0.1;

#ifdef FIXME
	// don't make punches spark on the wall
	if (attackrange == MELEERANGE)
		A.SetState(S_PUFF3);
#endif
#endif
}

//==========================================================================
//
//  P_SpawnBlood
// 
//==========================================================================

void P_SpawnBlood(float x, float y, float z, int damage)
{
#if 0
	Actor A;
#endif

	MSG_Select(MSG_SV_DATAGRAM);
	MSG_WriteByte(svc_blood);
	MSG_WriteShort(ftoi(x));
	MSG_WriteShort(ftoi(y));
	MSG_WriteShort(ftoi(z));
	MSG_WriteByte(damage > 255 ? 255 : damage);
#if 0
	z += (Random() - Random()) * 4.0;
	A = Spawn(Blood, vector(x, y, z));
	A.Velocity.z = 2.0 * 35.0;
	A.StateTime -= Random() * 0.1;

	if (A.StateTime < 0.1)
		A.AtateTime = 0.1;

	if (damage <= 12 && damage >= 9)
		A.SetState(S_BLOOD2);
	else if (damage < 9)
		A.SetState(S_BLOOD3);
#endif
}

//**************************************************************************
//
//      NOISE ALERT
//
//**************************************************************************

Actor soundtarget;

//==========================================================================
//
//  P_RecursiveSound
//
//  Called by P_NoiseAlert. Recursively traverse adjacent sectors, sound
// blocking lines cut off traversal.
//
//==========================================================================

void P_RecursiveSound(sector_t * sec, int soundblocks)
{
	int i;
	line_t *check;
	sector_t *other;

	// wake up all monsters in this sector
	if (sec->validcount == *validcount &&
		sec->soundtraversed <= soundblocks + 1)
	{
		return;	// already flooded
	}

	sec->validcount = *validcount;
	sec->soundtraversed = soundblocks + 1;
	sec->SoundTarget = soundtarget;

	for (i = 0; i < sec->linecount; i++)
	{
		check = sec->lines[i];
		if (!(check->flags & ML_TWOSIDED))
			continue;

		if (!LineOpenings(check, *check->v1))
		{
			if (!LineOpenings(check, *check->v2))
				continue;	// closed door
		}

		if (GLevel.Sides[check->sidenum[0]].sector == sec)
			other = GLevel.Sides[check->sidenum[1]].sector;
		else
			other = GLevel.Sides[check->sidenum[0]].sector;

		if (check->flags & ML_SOUNDBLOCK)
		{
			if (!soundblocks)
				P_RecursiveSound(other, 1);
		}
		else
			P_RecursiveSound(other, soundblocks);
	}
}

//==========================================================================
//
//  P_NoiseAlert
//
//  If a monster yells at a player, it will alert other monsters to the
// player.
//
//==========================================================================

void P_NoiseAlert(Actor target, Actor emmiter)
{
	soundtarget = target;
	(*validcount)++;
	P_RecursiveSound(emmiter.Sector, 0);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.51  2003/11/03 07:12:32  dj_jl
//  8 player starts
//
//  Revision 1.50  2002/10/26 16:32:21  dj_jl
//  New style of defining classes.
//
//  Revision 1.49  2002/09/07 16:28:24  dj_jl
//  Added Level class.
//
//  Revision 1.48  2002/08/28 16:36:39  dj_jl
//  Merged MapObject with Entity, some natives, beautification.
//
//  Revision 1.47  2002/07/23 16:31:43  dj_jl
//  Beautification.
//
//  Revision 1.46  2002/07/23 13:07:29  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.45  2002/07/13 08:01:48  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.44  2002/06/29 15:54:34  dj_jl
//  Floatized PainChance.
//
//  Revision 1.43  2002/06/14 15:51:20  dj_jl
//  A lots of changes, new functions etc for DDF.
//
//  Revision 1.42  2002/05/18 16:59:58  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.41  2002/05/03 17:11:54  dj_jl
//  Object classes split up into their files.
//
//  Revision 1.40  2002/04/11 16:52:13  dj_jl
//  Made TryMove native.
//
//  Revision 1.39  2002/03/28 18:11:24  dj_jl
//  Changed hiding of specials like in Raven games.
//
//  Revision 1.38  2002/03/20 19:07:43  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.37  2002/03/16 17:44:01  dj_jl
//  Added PlayerPawn class, added function Spawn, beautification.
//
//  Revision 1.36  2002/03/04 18:31:35  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.35  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.34  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.33  2002/02/22 18:00:09  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.32  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.31  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.30  2002/02/09 18:13:46  dj_jl
//  Added flags that determines what line blocking flags to check
//
//  Revision 1.29  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.28  2002/02/06 17:28:51  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.27  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.26  2002/01/29 18:11:23  dj_jl
//  Added dormant things
//
//  Revision 1.25  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.24  2002/01/25 18:04:33  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.23  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.22  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.21  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.20  2002/01/12 18:00:47  dj_jl
//  Sound names initialized as names
//
//  Revision 1.19  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.18  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.17  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.16  2001/12/18 18:35:26  dj_jl
//  Added polyobjs
//
//  Revision 1.15  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.14  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//  Revision 1.13  2001/12/01 18:14:08  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.12  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.11  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.10  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.9  2001/10/09 17:41:16  dj_jl
//  Beautification
//
//  Revision 1.8  2001/10/02 17:42:37  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.7  2001/09/27 17:08:19  dj_jl
//  Removed spawn functions, added mobj classes
//
//  Revision 1.6  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.5  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.4  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.3  2001/07/31 16:59:30  dj_jl
//  Set model when spawning object
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
