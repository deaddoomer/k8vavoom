//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Platforms
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	PLAT_UP,
	PLAT_DOWN,
	PLAT_WAITING,
	PLAT_IN_STASIS
};

enum
{
	PLAT_PERPETUALRAISE,
	PLAT_DOWNWAITUPSTAY
};

// TYPES -------------------------------------------------------------------

class TPlat:Thinker
{
	int type;
	sector_t *sector;
	int tag;
	float speed;
	boolean crush;
	float low;
	float high;
	float time;
	float wait;
	int status;
	int oldstatus;

	void Think(void);
	void Archive(void);
	void Unarchive(void);
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	TPlat::Think
//
//  Move a plat up and down
//
//==========================================================================

void TPlat::Think(void)
{
	int res;

	switch (status)
	{
	case PLAT_UP:
		res = T_MovePlane(sector, speed * frametime, high, crush, 0, 1);

		if (res == RES_CRUSHED && (!crush))
		{
			time = wait;
			status = PLAT_DOWN;
			SectorStartSoundName(sector, "PlatformStart", CHAN_VOICE);
		}
		else
		{
			if (res == RES_PASTDEST)
			{
				time = wait;
				status = PLAT_WAITING;
				SectorStartSoundName(sector, "PlatformStop", CHAN_VOICE);

				switch (type)
				{
				case PLAT_DOWNWAITUPSTAY:
					sector->specialdata = NULL;
					RemoveSpecialThinker(this);
					break;

				default:
					break;
				}
			}
		}
		break;

	case PLAT_DOWN:
		res = T_MovePlane(sector, speed * frametime, low, false, 0, -1);

		if (res == RES_PASTDEST)
		{
			time = wait;
			status = PLAT_WAITING;
			SectorStartSoundName(sector, "PlatformStop", CHAN_VOICE);
		}
		break;

	case PLAT_WAITING:
		time -= frametime;
		if (time <= 0.0)
		{
			time = 0.0;
			if (sector->floorheight == low)
				status = PLAT_UP;
			else
				status = PLAT_DOWN;
			SectorStartSoundName(sector, "PlatformStart", CHAN_VOICE);
		}
		break;

	case PLAT_IN_STASIS:
		break;
	}
}

//==========================================================================
//
//	TPlat::Archive
//
//==========================================================================

void TPlat::Archive(void)
{
	sector = SectorToNum(sector);
}

//==========================================================================
//
//	TPlat::Unarchive
//
//==========================================================================

void TPlat::Unarchive(void)
{
	sector = NumToSector(sector);

	//  Set sector's specialdata
	sector->specialdata = this;
}

//==========================================================================
//
//  P_ActivateInStasis
//
//==========================================================================

void P_ActivateInStasis(int tag)
{
	TPlat *plat;

	FOREACH(TPlat, plat)
	{
		if ((plat->tag == tag) && (plat->status == PLAT_IN_STASIS))
		{
			plat->status = plat->oldstatus;
		}
	}
}

//==========================================================================
//
//  EV_DoPlat
//
//  Do Platforms.
//
//==========================================================================

int EV_DoPlat(line_t * line, int *args, int type)
{
	TPlat *plat;
	int secnum;
	int rtn;
	sector_t *sec;

	secnum = -1;
	rtn = 0;

	//  Activate all <type> plats that are PLAT_IN_STASIS
	if (type == PLAT_PERPETUALRAISE)
	{
		//  Activate in stasis
		P_ActivateInStasis(args[0]);
	}

	while ((secnum = FindSectorFromTag(args[0], secnum)) >= 0)
	{
		sec = &level->sectors[secnum];

		if (sec->specialdata)
			continue;

		// Find lowest & highest floors around sector
		rtn = 1;
		plat = NewSpecialThinker(TPlat);

		plat->type = type;
		plat->sector = sec;
		plat->sector->specialdata = plat;
		plat->crush = false;
		plat->tag = args[0];
		plat->speed = itof(args[1]) * 4.0;

		switch (type)
		{
		case PLAT_DOWNWAITUPSTAY:
			plat->low = FindLowestFloorSurrounding(sec);
			if (plat->low > sec->floorheight)
				plat->low = sec->floorheight;
			plat->high = sec->floorheight;
			plat->wait = itof(args[2]) / 35.0;
			plat->status = PLAT_DOWN;
			SectorStartSoundName(sec, "PlatformStart", CHAN_VOICE);
			break;

		case PLAT_PERPETUALRAISE:
			plat->low = FindLowestFloorSurrounding(sec);
			if (plat->low > sec->floorheight)
				plat->low = sec->floorheight;
			plat->high = FindHighestFloorSurrounding(sec);
			if (plat->high < sec->floorheight)
				plat->high = sec->floorheight;
			plat->wait = itof(args[2]) / 35.0;
			plat->status = P_Random() & 1;
			SectorStartSoundName(sec, "PlatformStart", CHAN_VOICE);
			break;

		default:
			break;
		}
	}
	return rtn;
}

//==========================================================================
//
//  EV_StopPlat
//
//==========================================================================

int EV_StopPlat(line_t * line, int *args)
{
	TPlat *plat;

	FOREACH(TPlat, plat)
	{
		if ((plat->status != PLAT_IN_STASIS) && (plat->tag == args[0]))
		{
			plat->oldstatus = plat->status;
			plat->status = PLAT_IN_STASIS;
		}
	}
	return 1;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.6  2001/09/25 17:13:50  dj_jl
//  Beautification
//
//  Revision 1.5  2001/09/24 17:14:11  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
