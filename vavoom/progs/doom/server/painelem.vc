//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#ifdef DOOM2

// MACROS ------------------------------------------------------------------

#define SKULL_RADIUS	16.0

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  A_PainShootSkull
//
//  Spawn a lost soul and launch it at the target
//
//==========================================================================

void A_PainShootSkull(mobj_t * actor, float angle)
{
	float x;
	float y;
	float z;
	mobj_t *mo;
	mobj_t *newmobj;
	float prestep;
	int count;

	// count total number of skull currently on the level
	count = 0;
	mo = NULL;
	while (mo = NextMobj(mo))
	{
		if (mo->Class == MT_SKULL)
			count++;
	}

	// if there are allready 20 skulls on the level,
	// don't spit another one
	if (count > 20)
		return;

	// okay, there's playe for another one
	prestep = 4.0 + 3.0 * (actor->radius + SKULL_RADIUS) / 2.0;

	x = actor->origin.x + prestep * cos(angle);
	y = actor->origin.y + prestep * sin(angle);
	z = actor->origin.z + 8.0;

	newmobj = P_SpawnMobj(x, y, z, MT_SKULL);

	// Check for movements.
	if (!P_TryMove(newmobj, newmobj->origin.x, newmobj->origin.y))
	{
		// kill it immediately
		newmobj->Damage(actor, actor, 10000);
		return;
	}

	newmobj->target = actor->target;
	((Actor *)newmobj)->A_SkullAttack();
}

//==========================================================================
//
//  Actor::A_PainAttack
//
//  Pain elemental attack. Spawn a lost soul and launch it at the target.
// 
//==========================================================================

void Actor::A_PainAttack(void)
{
	if (!target)
		return;

	A_FaceTarget();
	A_PainShootSkull(this, angles.yaw);
}

//==========================================================================
//
//  Actor::A_PainDie
//
//  Pain elemental death.
//
//==========================================================================

void Actor::A_PainDie(void)
{
	A_Fall();
	A_PainShootSkull(this, angles.yaw + 90.0);
	A_PainShootSkull(this, angles.yaw + 180.0);
	A_PainShootSkull(this, angles.yaw + 270.0);
}

#else

void Actor::A_PainAttack(void)
{
	NotDoom2();
}

void Actor::A_PainDie(void)
{
	NotDoom2();
}

#endif

//**************************************************************************
//
//  $Log$
//  Revision 1.8  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.6  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.4  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.3  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
