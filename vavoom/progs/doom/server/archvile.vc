//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#ifdef DOOM2

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  PIT_VileCheck
//
//  Detect a corpse that could be raised.
//
//==========================================================================

Actor CorpseHit;
Actor vileobj;
float viletryx;
float viletryy;

boolean PIT_VileCheck(MapObject Other)
{
	float maxdist;
	boolean check;

	if (!Actor(Other).bCorpse)
		return true;	// not a monster

	if (Actor(Other).StateTime != -1.0)
		return true;	// not lying still yet

	if (Actor(Other).RaiseState == S_NULL)
		return true;	// monster doesn't have a raise state

	maxdist = Other.Radius + vileobj.Radius;

	if (fabs(Other.Origin.x - viletryx) > maxdist ||
		fabs(Other.Origin.y - viletryy) > maxdist)
		return true;	// not actually touching

	if (!P_CheckSight(vileobj, Other))
		return true;	//  Con't see, possibly in other region

	CorpseHit = Actor(Other);
	CorpseHit.Velocity.x = 0.0;
	CorpseHit.Velocity.y = 0.0;
	CorpseHit.Height *= 4.0;
	check = CorpseHit.CheckPosition(CorpseHit.Origin);
	CorpseHit.Height /= 4.0;

	if (!check)
		return true;	// doesn't fit here

	return false;	// got one, so stop checking
}

//==========================================================================
//
//  Actor::A_VileChase
//
//  Arch-vile check for ressurecting a body.
//
//==========================================================================

void Actor::A_VileChase(void)
{
	int xl;
	int xh;
	int yl;
	int yh;

	int bx;
	int by;

	Actor temp;

	if (MoveDir != DI_NODIR)
	{
		// check for corpses to raise
		viletryx = Origin.x + StepSpeed * xspeed[MoveDir];
		viletryy = Origin.y + StepSpeed * yspeed[MoveDir];
		vileobj = self;

		xl = MapBlock(viletryx - level->bmaporgx - MAXRADIUS * 2.0);
		xh = MapBlock(viletryx - level->bmaporgx + MAXRADIUS * 2.0);
		yl = MapBlock(viletryy - level->bmaporgy - MAXRADIUS * 2.0);
		yh = MapBlock(viletryy - level->bmaporgy + MAXRADIUS * 2.0);

		for (bx = xl; bx <= xh; bx++)
		{
			for (by = yl; by <= yh; by++)
			{
				// Call PIT_VileCheck to check whether object is a corpse
				// that canbe raised.
				if (!P_BlockThingsIterator(bx, by, PIT_VileCheck))
				{
					// got one!
					temp = Target;
					Target = CorpseHit;
					A_FaceTarget();
					Target = temp;

					SetState(S_VILE_HEAL1);
					CorpseHit.PlaySound('Slop', CHAN_BODY);

					CorpseHit.SetState(CorpseHit.RaiseState);
					CorpseHit.Height *= 4.0;
#ifdef FIXME
					CorpseHit.Flags = info->Flags;
#else
					CorpseHit.bSolid = true;
					CorpseHit.bCorpse = false;
#endif
					CorpseHit.Health = CorpseHit.SpawnHealth;
					CorpseHit.Target = none;

					return;
				}
			}
		}
	}
	// Return to normal attack.
	A_Chase();
}

//==========================================================================
//
//  Actor::A_VileStart
//
//  Arch-vile attack start sound.
//
//==========================================================================

void Actor::A_VileStart(void)
{
	PlaySound('ArchVileAttack', CHAN_WEAPON);
}

//==========================================================================
//
//  Actor::A_VileTarget
//
//  Spawn the hellfire.
//
//==========================================================================

void Actor::A_VileTarget(void)
{
	mobj_t *fog;

	if (!Target)
		return;

	A_FaceTarget();

	fog = P_SpawnMobj(Target.Origin.x, Target.Origin.x,
		Target.Origin.z, ArchvileFire);

	Owner = *fog;//FIXME!!!!!!!
	fog->Owner = self;
	fog->Target = Target;
	Actor(*fog).A_Fire();
}

//==========================================================================
//
//  Actor::A_VileAttack
//
//  Arch-vile attack.
//
//==========================================================================

void Actor::A_VileAttack(void)
{
	mobj_t *fire;

	if (!Target)
		return;

	A_FaceTarget();

	if (!P_CheckSight(self, Target))
		return;

	PlaySound('BarrelExplode', CHAN_WEAPON);
	Target.Damage(self, self, 20);
	Target.Velocity.z = 1000.0 / Target.Mass * 35.0;

	fire = &Owner;//FIXME!!!!!!

	if (!fire)
		return;

	// move the fire between the vile and the player
	fire->Origin.x = Target.Origin.x - 24.0 * cos(Angles.yaw);
	fire->Origin.y = Target.Origin.y - 24.0 * sin(Angles.yaw);
	P_RadiusAttack(fire, this, 70, 0, 0);
}

//==========================================================================
//
//  Actor::A_StartFire
//
//  Make fire start sound.
//
//==========================================================================

void Actor::A_StartFire(void)
{
	PlaySound('FlameStart', CHAN_VOICE);
	A_Fire();
}

//==========================================================================
//
//  Actor::A_Fire
//
//  Keep fire in front of player unless out of sight.
//
//==========================================================================

void Actor::A_Fire(void)
{
	if (!Target)
		return;

	// don't move it if the vile lost sight
	if (!P_CheckSight(Owner, Target))
		return;

	P_UnsetThingPosition(self);
	Origin.x = Target.Origin.x + 24.0 * cos(Target.Angles.yaw);
	Origin.y = Target.Origin.y + 24.0 * sin(Target.Angles.yaw);
	Origin.z = Target.Origin.z;
	P_SetThingPosition(self);
}

//==========================================================================
//
//  Actor::A_FireCrackle
//
//  Fire sound.
//
//==========================================================================

void Actor::A_FireCrackle(void)
{
	PlaySound('Flame', CHAN_VOICE);
	A_Fire();
}

#else

void Actor::A_VileChase(void)
{
	NotDoom2();
}

void Actor::A_VileStart(void)
{
	NotDoom2();
}

void Actor::A_VileTarget(void)
{
	NotDoom2();
}

void Actor::A_VileAttack(void)
{
	NotDoom2();
}

void Actor::A_StartFire(void)
{
	NotDoom2();
}

void Actor::A_Fire(void)
{
	NotDoom2();
}

void Actor::A_FireCrackle(void)
{
	NotDoom2();
}

#endif

//**************************************************************************
//
//  $Log$
//  Revision 1.20  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.19  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.18  2002/02/22 18:00:06  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.17  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.16  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.15  2002/02/06 17:28:51  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.14  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.13  2002/01/28 18:50:17  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.12  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:52  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/12 18:02:47  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.8  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
