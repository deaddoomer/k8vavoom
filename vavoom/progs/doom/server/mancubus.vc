//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#ifdef DOOM2

// MACROS ------------------------------------------------------------------

#define	FATSPREAD	(90.0 / 8.0)

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::A_FatRaise
//
//  Mancubus attack sound.
//
//==========================================================================

void Actor::A_FatRaise(void)
{
	A_FaceTarget();
	PlaySound('MancubusAttack', CHAN_WEAPON);
}

//==========================================================================
//
//  Actor::A_FatAttack1
//
//  Mancubus attack, firing three missiles (bruisers) in three different
// directions? Doesn't look like it.
//
//==========================================================================

void Actor::A_FatAttack1(void)
{
	mobj_t *mo;

	A_FaceTarget();
	// Change direction  to ...
	Angles.yaw = AngleMod360(Angles.yaw + FATSPREAD);
	SpawnMissile(this, target, MancubusMissile);

	mo = SpawnMissile(this, target, MancubusMissile);
	mo->Angles.yaw = AngleMod360(mo->Angles.yaw + FATSPREAD);
	VectorRotateAroundZ(&mo->Velocity, FATSPREAD);
}

//==========================================================================
//
//  Actor::A_FatAttack2
//
//  Mancubus attack, second direction.
//
//==========================================================================

void Actor::A_FatAttack2(void)
{
	mobj_t *mo;

	A_FaceTarget();
	// Now here choose opposite deviation.
	Angles.yaw = AngleMod360(Angles.yaw - FATSPREAD);
	SpawnMissile(this, target, MancubusMissile);

	mo = SpawnMissile(this, target, MancubusMissile);
	mo->Angles.yaw = AngleMod360(mo->Angles.yaw - FATSPREAD * 2.0);
	VectorRotateAroundZ(&mo->Velocity, -FATSPREAD * 2.0);
}

//==========================================================================
//
//  Actor::A_FatAttack3
//
//  Mancubus attack, third direction.
//
//==========================================================================

void Actor::A_FatAttack3(void)
{
	mobj_t *mo;

	A_FaceTarget();

	mo = SpawnMissile(this, target, MancubusMissile);
	mo->Angles.yaw = AngleMod360(mo->Angles.yaw - FATSPREAD / 2.0);
	VectorRotateAroundZ(&mo->Velocity, -FATSPREAD / 2.0);

	mo = SpawnMissile(this, target, MancubusMissile);
	mo->Angles.yaw = AngleMod360(mo->Angles.yaw + FATSPREAD / 2.0);
	VectorRotateAroundZ(&mo->Velocity, FATSPREAD / 2.0);
}

#else

void Actor::A_FatRaise(void)
{
	NotDoom2();
}

void Actor::A_FatAttack1(void)
{
	NotDoom2();
}

void Actor::A_FatAttack2(void)
{
	NotDoom2();
}

void Actor::A_FatAttack3(void)
{
	NotDoom2();
}

#endif

//**************************************************************************
//
//  $Log$
//  Revision 1.12  2002/02/22 18:00:08  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.11  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.10  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.9  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
