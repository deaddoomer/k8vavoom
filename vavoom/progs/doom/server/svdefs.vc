//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// [RH] Equivalents for BOOM's generalized sector types

#define DAMAGE_MASK		0x0300
#define SECRET_MASK		0x0400
#define FRICTION_MASK	0x0800
#define PUSH_MASK		0x1000

enum
{
	PO_ANCHOR_TYPE = 9300,
	PO_SPAWN_TYPE,
	PO_SPAWNCRUSH_TYPE
};

//#define POLY_SEQ_NAME(num)		va("Sequence%d", num)
#define POLY_SEQ_NAME(num)		'Sequence0'

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

//
// Map things flags
//
#define	MTF_EASY		0x0001	// Skill flags.
#define	MTF_NORMAL		0x0002
#define	MTF_HARD		0x0004
#define	MTF_AMBUSH		0x0008	// Deaf monsters/do not react to sound.
#define MTF_DORMANT		0x0010	// The thing is dormant
#define MTF_FIGHTER		0x0020	// Thing appearing in player classes
#define MTF_CLERIC		0x0040
#define MTF_MAGE		0x0080
#define MTF_GSINGLE		0x0100	// Appearing in game modes
#define MTF_GCOOP		0x0200
#define MTF_GDEATHMATCH	0x0400

#define VIEWHEIGHT		41.0

#define BLINKTHRESHOLD 	4.0

#define INVULNTIME		30.0
#define INVISTIME		60.0
#define INFRATIME		120.0
#define IRONTIME		60.0

// follow a player exlusively for 3 seconds
#define	BASETHRESHOLD	100

#define ONFLOORZ		-99999.0
#define ONCEILINGZ		99999.0

//
// Player internal flags, for cheats and debug.
//
#define CF_NOCLIP		1	// No clipping, walk through barriers.
#define CF_GODMODE		2	// No damage, no health loss.

#define MELEERANGE		64.0
#define MISSILERANGE	(32.0 * 64.0)

#define LOWERSPEED		6.0
#define RAISESPEED		6.0

#define WEAPONBOTTOM	128.0
#define WEAPONTOP		32.0

// 16 pixels of bob
#define MAXBOB			16.0

#define MAXHEALTH		100

enum
{
	FLOOR_SOLID,
	FLOOR_WATER,
	FLOOR_BLOOD,
	FLOOR_NUKAGE,
	FLOOR_SLIME,
	FLOOR_LAVA
};

enum
{
	CONTENTS_EMPTY,
	CONTENTS_WATER,
	CONTENTS_BLOOD,
	CONTENTS_NUKAGE,
	CONTENTS_SLIME,
	CONTENTS_LAVA,

	CONTENTS_SOLID = -1
};

enum
{
	CSHIFT_CONTENTS
};

enum
{
	it_bluecard,
	it_yellowcard,
	it_redcard,
	it_blueskull,
	it_yellowskull,
	it_redskull,

	NUMCARDS
};

// Power up artifacts.
enum
{
	pw_invulnerability,
	pw_strength,
	pw_invisibility,
	pw_ironfeet,
	pw_infrared,
	NUMPOWERS
};

enum
{
	CHAN_AUTO,
	CHAN_VOICE,
	CHAN_WEAPON,
	CHAN_ITEM,
	CHAN_BODY
};

#ifdef DDF
enum
{
	DLITE_None,
	DLITE_Constant,	// lighting is constant (regardless of distance)
	DLITE_Linear,	// lighting is proportional to 1 / distance
	DLITE_Quadratic	// lighting is proportional to 1 / (distance^2)
};

enum
{
	ATK_None,
	ATK_Projectile,
	ATK_Spawner,
	ATK_TripleSpawner,
	ATK_Spreader,
	ATK_RandomSpread,
	ATK_Shot,
	ATK_Tracker,
	ATK_CloseCombat,
	ATK_ShootToSpot,
	ATK_SkullFly,
	ATK_SmartProjectile,
	ATK_Spray,
	NUMATKCLASS
};

struct AttackType
{
	int AttackStyle;
	bool bTraceSmoke;
	bool bKillFailedSpawn;
	bool bPrestepSpawn;
	bool bSpawnTelefrags;
	bool bNeedSight;
	bool bFaceTarget;
	bool bPlayer;
	bool bForceAim;
	bool bAngledSpawn;
	bool bNoTriggerLines;
	name InitSound;
	name Sound;
	float AccuracySlope;
	float AccuracyAngle;
	float XOffset;
	float YOffset;
	float AngleOffset;
	float SlopeOffset;
	float AssaultSpeed;
	float Height;
	float Range;
	int Count;
	int TooClose;
	int Damage;
	int DamageMax;
	int DamageError;
	float DamageDelay;
	int DamageNoArmour;

	// class of the attack.
	int AttackClass;
 
	// object init state.
	int ObjInitState;
  
	float NoTraceChance;
	float KeepFireChance;

	// the MOBJ that is integrated with this attack, or NULL
	classid AtkMobj;

	// spawned object (for spawners). Can be NULL.
	classid SpawnedObj;
  
	// puff object.  Can be NULL.
	classid Puff;
};
#endif

class Actor:Entity
	abstract
{
	//  States
	int IdleState;
	int SeeState;
	int PainState;
	int MeleeState;
	int MissileState;
	int DeathState;
	int GibsDeathState;
	int RaiseState;

	//	Sounds
	name SightSound;
	name ActiveSound;
	name AttackSound;
	name PainSound;
	name DeathSound;

	//	Flags
	bool bSpecial;		// call P_SpecialThing when touched
	bool bShootable;	// Can be hit.
	bool bAmbush;
	bool bJustHit;		// try to attack right back
	bool bJustAttacked;	// take at least one step before attacking
	bool bSpawnCeiling;	// hang from ceiling instead of floor
	// movement flags
	bool bPickUp;		// for players to pick up items
	bool bSlide;		// keep info about sliding along walls
	bool bTeleport;		// don't cross lines or look at heights
	bool bMissile;		// don't hit same species, explode on block
	bool bDropped;		// dropped by a demon, not level spawned
	bool bNoBlood;		// don't bleed when shot (use puff)
	bool bCorpse;		// don't stop moving halfway off a step
	bool bInFloat;		// floating to a height for a move, don't
						// auto float to target's height
	bool bCountKill;	// count towards intermission kill total
	bool bCountItem;	// count towards intermission item total
	bool bOnMobj;		// mobj is resting on top of another mobj
	bool bActivateMCross;	// can activate monster cross lines
	bool bActivatePCross;	// can activate projectile cross lines
	bool bDormant;		// thing is dormant
	bool bBounce;
	bool bWaterJump;
	bool bSkullFly;		// skull in flight
	bool bNoDeathmatch;
	bool bMonster;
	bool bTelestomp;
	bool bDefaultFloat;
	bool bDefaultNoGravity;
	bool bTriggerHappy;
	bool bNeverTarget;
	bool bNoGrudge;
	bool bNoGravKill;
	bool bBoss;
	bool bNoRespawn;
#ifdef DDF
	// Extra flags.
	bool bStealth;
	bool bJustPickedUp;
	bool bTouchy;
	bool bLessVis;
	bool bDisloyalType;
	bool bOwnAttackHurts;
	bool bFirstCheck;
	bool bNoTrace;
	bool bDummyMobj;
	bool bNoResurect;
	bool bEdgeWalker;
	bool bGravFall;
	bool bClimbable;
	bool bWaterWalker;
	bool bCrossLines;
	bool bNoFriction;
	bool bExtra;
	bool bJustBounced;
	bool bUsable;
	bool bBlockShots;
	bool bCrouching;
	bool bTunnel;
	bool bDLight;
	bool bGibbed;
#endif

	//  Params
	float Speed;
	float StepSpeed;
	float PainChance;
	int SpawnHealth;
	int GibsHealth;

	// Thing being chased/attacked (or NULL).
	Actor Enemy;
	// The originator for missiles.
	Actor Instigator;

	// Player number last looked for.
	int LastLook;

	// For nightmare respawn.
	mthing_t SpawnPoint;

	int MissileDamage;	// For missiles

	// Reaction time: if non 0, don't attack yet.
	int ReactionCount;
	// Used by player to freeze a bit after teleporting.
	float ReactionTime;

	// If >0, the target will be chased
	// no matter what (even if shot)
	int Threshold;

	// Movement direction, movement generation (zig-zagging).
	int MoveDir;	// 0-7
	int MoveCount;	// when 0, select a new dir

	float MissileChance;
	float MissileMinRange;
	float MissileMaxRange;
	classid ImuneMissileType;

	string PickupMessage;

#ifdef DDF
	// New states.
	int SpawnState;
	int ResState;
	int MeanderState;
	int BounceState;
	int TouchState;
	int JumpState;
	int GibState;

	// Float move speed
	float FloatSpeed;

	int ExplodeDamage;
	int ExplodeDamageMax;
	int ExplodeDamageError;
	float ExplodeDamageDelay;
	int ExplodeDamageNoArmour;

	int CastOrder;
	float RespawnTime;

	float JumpDelay;
	float JumpHeight;
	float CrouchHeight;
	float ViewHeight;
	float ShotHeight;
	float MaxFall;
	float Fast;
	float XScale;
	float YScale;
	float BounceSpeed;
	float BounceUp;
	float SightSlope;
	float SightAngle;
	float RideFriction;
	float ShadowTrans;

	// Sounds.
	name OverkillSound;
	name WalkSound;
	name JumpSound;
	name NoWaySound;
	name OofSound;
	name GaspSound;

	int Fuse;
	int Side;
	int PlayerNum;

	float LungCapacity;
	float GaspStart;
	int ChokeDamage;
	int ChokeDamageMax;
	int ChokeDamageError;
	float ChokeDamageDelay;
	int ChokeDamageNoArmour;

	float Bobbing;
	int Immunity;

	AttackType CloseCombat;
	AttackType RangeAttack;
	AttackType SpareAttack;

	float HaloHeight;
	float HaloSize;
	float HaloMinSize;
	float HaloMaxSize;
	float HaloTranslucency;
	int HaloColor;
	string HaloGraphic;

	int DLightType;
	int DLightIntensity;
	int DLightColor;
	float DLightHeight;

	classid DropItem;
	classid BloodType;
	classid RespawnEffect;
	classid SpitSpot;

	AttackType *CurrentAttack;

	int NumBrainTargets;
	int BrainTargetOn;
	int BrainEasy;
	Actor BrainTargets[32];

	int SpreadCount;
#endif

	boolean GiveAmmo(int ammo, int num);
	boolean GiveWeapon(int weapon, boolean dropped);
	boolean GiveBody(int num, int max);
	boolean GiveArmor(int armortype);
	boolean GiveArmor2(int armortype, int num, int max);
	boolean GiveCard(int card);
	boolean GiveItem(int item);
	boolean GivePower(int power);
	boolean GivePower2(int power, float duration, float max);
	void HideSpecial(void);
	void TouchSpecial(Actor Toucher);
	boolean HandlePickup(Actor Toucher);

	boolean Touch(MapObject Other);
	void Thrust(float angle, float move);
	boolean TeleportMove(TVec org);
	int Teleport(float x, float y, float angle);
	void CrossSpecialLine(line_t *ld, int side);

	void SetOrigin2(TVec origin);
	void CheckMissileSpawn(void);
	Actor SpawnMissile(Actor dest, classid type);
	void ExplodeMissile(void);
	void Died(Actor source);
	void DropStuff(void);
	void NightmareRespawn(void);

	boolean HeightClip(void);
	void RadiusAttack(int damage, int distance, boolean damageSource);

	void Tick(float deltaTime);
	void OnMapSpawn(mthing_t *mthing);

	void Damage(Actor inflictor, Actor source, int damage);

	// Physics
	void XYMovement(void);
	void ZMovement(void);
	void ApplyFriction(void);
	void PlayerLandedOnThing(void);
	boolean Physics(void);

	boolean CheckMeleeRange(void);
	boolean CheckMissileRange(void);
	boolean FindOther(void);
	boolean LookForMonsters(boolean allaround);
	boolean LookForMonsters2(boolean allaround);
	boolean LookForPlayers(boolean allaround);
	boolean StepMove(void);
	boolean TryWalk(void);
	void NewChaseDir(void);

	void A_Explode(void);
	void A_Pain(void);
	void A_PlayerScream(void);
	void A_Fall(void);
	void A_XScream(void);
	void A_Look(void);
	void A_Chase(void);
	void A_FaceTarget(void);
	void A_Scream(void);

#ifdef DDF
	#define FUNC(name)		void name(void) { }

	// Needed for the bossbrain.
	void A_BrainScream(void);
	void A_BrainDie(void);
	void A_BrainSpit(void);
	void A_CubeSpawn(void);
	void A_BrainMissileExplode(void);

	// Visibility Actions
	void P_ActTransSet(int value);
	FUNC(P_ActTransFade)
	FUNC(P_ActTransMore)				// EXTRA
	FUNC(P_ActTransLess)				// EXTRA
	FUNC(P_ActTransAlternate)			// EXTRA

	// Sound Actions
	void P_ActPlaySound(name sound);
	void P_ActKillSound(void);
	void P_ActMakeAmbientSound(void);
	void P_ActMakeAmbientSoundRandom(void);
	void P_ActMakeCloseAttemptSound(void);
	void P_ActMakeDyingSound(void);
	void P_ActMakeOverKillSound(void);
	void P_ActMakePainSound(void);
	void P_ActMakeRangeAttemptSound(void);
	void P_ActMakeActiveSound(void);

	// Explosion Damage Actions
	void P_ActDamageExplosion(void);
	FUNC(P_ActThrust)					// EXTRA

	// Stand-by / Looking Actions
	FUNC(P_ActPlayerSupportLook)		// EXTRA

	// Meander, aimless movement actions.
	FUNC(P_ActStandardMeander)			// EXTRA
	FUNC(P_ActPlayerSupportMeander)		// EXTRA

	// Chasing Actions
	void P_ActResurrectChase(void);
	void P_ActWalkSoundChase(void);

	// Attacking Actions
	void P_ActComboAttack(void);
	void P_ActMeleeAttack(AttackType *custom_attack);
	void P_ActRangeAttack(AttackType *custom_attack);
	void P_ActSpareAttack(AttackType *custom_attack);
	void P_ActRefireCheck(void);

	// Miscellanous
	void P_ActResetSpreadCount(void)
	{
		SpreadCount = 0;
	}
	FUNC(P_ActExplode)					// EXTRA
	FUNC(P_ActActivateLineType)			// EXTRA
	FUNC(P_ActEnableRadTrig)			// EXTRA
	FUNC(P_ActDisableRadTrig)			// EXTRA
	FUNC(P_ActTouchyRearm)				// EXTRA
	FUNC(P_ActTouchyDisarm)				// EXTRA
	FUNC(P_ActBounceRearm)				// EXTRA
	FUNC(P_ActBounceDisarm)				// EXTRA
	FUNC(P_ActPathCheck)				// EXTRA
	FUNC(P_ActPathFollow)				// EXTRA
	FUNC(P_ActDropItem)					// EXTRA
	FUNC(P_ActDLightSet)
	FUNC(P_ActDLightFade)
	FUNC(P_ActDLightRandom)				// EXTRA

	// Movement actions
	FUNC(P_ActFaceDir)					// EXTRA
	FUNC(P_ActTurnDir)					// EXTRA
	FUNC(P_ActTurnRandom)				// EXTRA
	FUNC(P_ActMlookFace)				// EXTRA
	FUNC(P_ActMlookTurn)				// EXTRA
	FUNC(P_ActMoveFwd)					// EXTRA
	FUNC(P_ActMoveRight)				// EXTRA
	FUNC(P_ActMoveUp)					// EXTRA
	FUNC(P_ActStopMoving)				// EXTRA

	// Projectiles
	void P_ActFixedHomingProjectile(void);
	void P_ActRandomHomingProjectile(void);
	FUNC(P_ActLaunchOrderedSpread)		// EXTRA
	FUNC(P_ActLaunchRandomSpread)		// EXTRA
	FUNC(P_ActCreateSmokeTrail)			// EXTRA
	void P_ActHomeToSpot(void);
	//boolean_t P_ActLookForTargets)

	// Trackers
	void P_ActEffectTracker(void);
	void P_ActTrackerActive(void);
	void P_ActTrackerFollow(void);
	void P_ActTrackerStart(void);

	// Blood and bullet puffs
	FUNC(P_ActCheckBlood)
	FUNC(P_ActCheckMoving)

	void P_ActJump(float chance, name jumpState);

	void DoAttack(AttackType *attack);
	void LookForShootSpots(void);
	void ObjectSpawning(AttackType *attack, float angle);
#endif

	defaultproperties
	{
		MaxStepHeight = 24.0;
		MissileChance = 200.0;
		Health = 1000;
		GibsHealth = -1000;
		Mass = 100.0;
#ifdef DDF
		FloatSpeed = 2.0;
		ExplodeDamageMax = -1;
		ExplodeDamageError = -1;
		RespawnTime = 30.0;
		JumpDelay = 1.0;
		ViewHeight = 0.75;
		ShotHeight = 0.64;
		Fast = 1.0;
		XScale = 1.0;
		YScale = 1.0;
		BounceSpeed = 0.5;
		BounceUp = 0.5;
		SightSlope = 16.0;
		SightAngle = 90.0;
		RideFriction = 0.7;
		ShadowTrans = 0.5;
		LungCapacity = 20.0;
		GaspStart = 2.0;
		ChokeDamage = 6;
		ChokeDamageMax = 14;
		ChokeDamageError = -1;
		ChokeDamageDelay = 2.0;
		ChokeDamageNoArmour = true;
		Bobbing = 1.0;
		CloseCombat.DamageMax = -1;
		CloseCombat.DamageError = -1;
		RangeAttack.DamageMax = -1;
		RangeAttack.DamageError = -1;
		SpareAttack.DamageMax = -1;
		SpareAttack.DamageError = -1;
		HaloHeight = -1.0;
		HaloSize = 32.0;
		HaloMinSize = -1.0;
		HaloMaxSize = -1.0;
		HaloTranslucency = 0.5;
		HaloColor = 0x00ffffff;
		DLightIntensity = 32;
		DLightColor = 0x00ffffff;
		DLightHeight = 0.5;
#endif
	}
}

class Pawn:Actor
	abstract
{
	defaultproperties
	{
		ReactionCount = 8;
		bSolid = true;
		bShootable = true;
		bCountKill = true;
		bMonster = true;
		bActivateMCross = true;
	}
}

class PlayerPawn:Pawn
	abstract
{
	void ThrustPlayer(float angle, float move, float deltaTime);
	void CalcHeight(float deltaTime);
	void MovePlayer(float deltaTime);
	void CheckWaterJump(void);
	void WaterMove(float deltaTime);
	void WaterJump(void);
	void PlayerInSpecialSector(void);
	void PlayerInContents(void);
	void DeathPlayerTick(float deltaTime);
	void PlayerImpulse(void);
	void PlayerTick(float deltaTime);
	void PaletteFlash(void);
	void SetViewPos(void);

	void SetPlayerRunState(void);
	Actor SpawnPlayerMissile(classid type);

#ifdef DDF
	void ActPlayerAttack(AttackType *attack);
#endif

	defaultproperties
	{
		ReactionCount = 0;
		bCountKill = false;
		bMonster = false;
		bActivateMCross = false;
		bTelestomp = true;
	}
}

class Projectile:Actor
{
	defaultproperties
	{
		ReactionCount = 8;
		bMissile = true;
		bNoBlockmap = true;
		bNoGravity = true;
		bDropOff = true;
		bActivatePCross = true;
	}
}

class Effect:Actor
{
	defaultproperties
	{
		Radius = 20.0;
		Height = 16.0;
		ReactionCount = 8;
		bNoBlockmap = true;
		bNoGravity = true;
	}
}

class Pickup:Actor
{
	defaultproperties
	{
		Radius = 20.0;
		Height = 8.0;
		ReactionCount = 8;
		bSpecial = true;
	}
}

class Decoration:Actor
{
	defaultproperties
	{
		Radius = 20.0;
		Height = 16.0;
		ReactionCount = 8;
	}
}

class Weapon:ViewEntity
{
	int Ammo;
	int UpState;
	int DownState;
	int ReadyState;
	int AttackState;
	int HoldAttackState;
	int FlashState;
	name ThirdPersonModel;
#ifdef DDF
	AttackType Attack;
	int AmmoPerShot;	// Ammo used per shot.
	int Clip;			// Amount of shots in a clip
	bool bAutoFire;		// If true, this is an automatic weapon.  If false it is semiautomatic.
	float Kick;			// Amount of kick this weapon gives
	AttackType SAAttack;// Second attack type.
	int SAAmmo;			// Type of ammo for second attack.
	int SAAmmoPerShot;	// Ammo used per second attack shot.
	int SAClip;			// Amount of shots in a second attack clip
	bool bSAAutoFire;	// Second attack is automatic ?
	int ReloadState;	// State showing the weapon being reloaded
	int SAAttackState;	// State showing the second attack firing
	int SAReloadState;	// State showing the second attack reloading
	int SAFlashState;	// State showing the second attack muzzle flash
	int Crosshair;		// Crosshair states
	int ZoomState;		// State showing viewfinder when zoomed.  Can be zero
	bool bFeedBack;		// This weapon gives feedback on hit (chainsaw)
	int UpgradedWeap;	// This weapon upgrades a previous one. (Berserk -> Fist)
	// This affects how it will be selected if out of ammo.  Also
	// determines the cycling order when on the same key.  Dangerous
	// weapons are not auto-selected when out of ammo.
	int Priority;
	bool bDangerous;
	AttackType EjectAttack;	// Attack type for the WEAPON_EJECT code pointer.
	// Sounds.
	name IdleSound;		// Played at the start of every readystate
	name EngagedSound;	// Played while the trigger is held (chainsaw)
	name HitSound;		// Played while the trigger is held and it is pointed at a target.
	name StartSound;	// Played when the weapon is selected
	name Sound1;		// Misc sounds
	name Sound2;
	name Sound3;
	bool bNoThrust;		// This close combat weapon should not push the target away (chainsaw)
	int BindKey;		// which number key this weapon is bound to, or -1 for none
	bool bSilentToMonsters;	// monsters cannot hear this weapon (doesn't wake them up)
	float ZoomFov;		// -AJA- 2000/03/18: when > 0, this weapon can zoom
	bool bRefireInacc;	// -AJA- 2000/05/23: weapon loses accuracy when refired.
	bool bShowClip;		// -AJA- 2000/10/20: show current clip in status bar (not total)
	// controls for weapon bob (up & down) and sway (left & right).
	// Given as percentages in DDF.
	float Bobbing;
	float Swaying;

	// Temporary for reloading.
	int AmmoFired;
	int AmmoFiredSA;
#endif

	void A_Light0(void);
	void A_WeaponReady(void);
	void A_Lower(void);
	void A_Raise(void);
	void A_ReFire(void);
	void A_Light1(void);
	void A_Light2(void);
	void A_CheckReload(void);
	void A_GunFlash(void);

#ifdef DDF
	// Weapon Action Routine pointers
	void A_WeaponShoot(AttackType *custom_attack);
	void A_WeaponEject(AttackType *custom_attack);
	void A_WeaponJump(float chance, name jumpState);
	FUNC(A_NoFire)					// EXTRA
	FUNC(A_NoFireReturn)			// EXTRA
	void A_SFXWeapon1(void)
	{
		Player->MO.PlaySound(Sound1, CHAN_WEAPON);
	}
	void A_SFXWeapon2(void)
	{
		Player->MO.PlaySound(Sound2, CHAN_WEAPON);
	}
	void A_SFXWeapon3(void)
	{
		Player->MO.PlaySound(Sound3, CHAN_WEAPON);
	}
	void A_WeaponPlaySound(name snd)
	{
		Player->MO.PlaySound(snd, CHAN_WEAPON);
	}
	void A_WeaponKillSound(void)
	{
		Player->MO.StopSound(CHAN_WEAPON);
	}
	FUNC(A_WeaponTransSet)
	FUNC(A_WeaponTransFade)			// EXTRA
	FUNC(A_WeaponEnableRadTrig)		// EXTRA
	FUNC(A_WeaponDisableRadTrig)	// EXTRA

	FUNC(A_SetCrosshair)			// EXTRA
	FUNC(A_GotTarget)				// EXTRA
	FUNC(A_WeaponKick)				// EXTRA

	void A_WeaponShootSA(AttackType *custom_attack);
	void A_ReFireSA(void);
	FUNC(A_NoFireSA)				// EXTRA
	FUNC(A_NoFireReturnSA)			// EXTRA
	void A_CheckReloadSA(void);
	void A_GunFlashSA(void);
#endif

	defaultproperties
	{
		Ammo = am_noammo;
#ifdef DDF
		Attack.DamageMax = -1;
		Attack.DamageError = -1;
		SAAttack.DamageMax = -1;
		SAAttack.DamageError = -1;
		EjectAttack.DamageMax = -1;
		EjectAttack.DamageError = -1;
		SAAmmo = am_noammo;
		Clip = 1;
		SAClip = 1;
		UpgradedWeap = -1;
		BindKey = -1;
		Bobbing = 1.0;
		Swaying = 1.0;
#endif
	}
}

#ifndef	NO_BOTS
/*

  Class definitions for botinfo, chatinfo, and
  other various bot information thingamabobers.
*/

enum
{
	bsk_verypoor,
	bsk_poor,
	bsk_low,
	bsk_medium,
	bsk_high,
	bsk_excellent,
	bsk_supreme
};

struct botinfo_t
{
	string Name;		// Bot's name*/
	int accuracy;		// Accuracy with "instant" weapons (this includes "leading")
	int intelect;		// Accuracy with "missile" weapons (rocket launcher, etc.)
	int evade;			// Ability to dodge incoming missiles
	int anticip;		// Ability to anticipate "instant" shots
	int reaction;		// Overall reaction time (lower is "better")
/*	int pisschance;		// Chance the bot will get pissed when his threshold is reached
	int threshold;		// How much it takes to frustrate/piss off the bot
	int dangerlevel;	// When health is below this, we need some health
	int wpfav;			// Favorite weapon
	int chatinfo;		// Bot's chat strings
	int chattime;		// How long it takes us to type a line
	int chatty;			// How talkative the bot is
	char *color;		// Color (in form of a string)
	char *gender;		// Male/female/it :)
	char *skin;			// Skin
	int railcolor;		// Railgun trail color
	bool revealed;		// Hidden bots must be revealed*/
	string userinfo;
};

/*struct chatline_t
{
	char		*string;
	chattype_t  bot;
	chatline_t	*line;
};

struct chatinfo_t
{
	chatline_t		intro[5];
	chatline_t		inter[5];
	chatline_t		rare[5];
	chatline_t		frag[15];
	chatline_t		died[10];
	chatline_t		roam[10];
	chatline_t		pissed[5];
	chatline_t		frustrated[5];
	chatline_t		special[20];
} chatinfo_t;*/

/*

  The bot class, prototypes and definitions be here!

*/

#define FORWARDWALK		200.0
#define FORWARDRUN		400.0
#define SIDEWALK		192.0
#define SIDERUN			320.0

/*#define MAX_TRAVERSE_DIST			(1024*FRACUNIT)	//10 meters, used within b_func.c*/
#define AVOID_DIST					512.0	//Try avoid incoming missiles once they reached this close
#define SAFE_SELF_MISDIST			128.0	//Distance from self to target where it's safe to pull a rocket.
/*#define FRIEND_DIST					(128*FRACUNIT)	//To friend.
#define DARK_DIST					(256*FRACUNIT)	//Distance that bot can see enemies in the dark from.
#define WHATS_DARK					64				//light value thats classed as dark.
#define MAX_MONSTER_TARGET_DIST		(1024*FRACUNIT)	//Too high can slow down the performance, see P_mobj.c*/
#define ENEMY_SCAN_FOV				120.0
/*#define MAXMOVEHEIGHT				(32*FRACUNIT)	//MAXSTEPMOVE but with jumping counted in.
#define GETINCOMBAT					(512*FRACUNIT)	//Max distance to item. if it's due to be icked up in a combat situation.*/
#define SHOOTFOV					60.0
/*#define MAXROAM						(5*TICRATE)		//When this time is elapsed the bot will roam after something else.*/

// The things the bot knows about their enemy
//struct enemyinfo_t
//{
//	int				health;
//	weapontype_t	weap;
//};

//
// Bot states
//
enum
{
	// Deciding what to do
	BST_NOTHING,
	// Bot is "fetching" something (skull, whatever)
	BST_OFFENSE,
	// Bot is defending something
	BST_DEFENSE,
	// Bot is heading to scoring place
	BST_RETURN
};

// Main bot class
class BotPlayer:Object
{
	player_t *player;		// Points to reference player
	Actor botmo;

	// Destinations
	Actor item;			// Item (roam towards weapon, etc)
	boolean itemIsWeapon;
	boolean itemIsPowerup;
	Actor goal;			// Teamgame goal spot
	Actor node;			// Node we're heading towards
	Actor prev;			// Previous node we were at
	TVec posdest;			// Position of our destination (doesn't have to be an actor)
	boolean posdest_valid;
	Actor enemy;			// The dead meat.
	TVec lastpos;			// Last place we saw our enemy
	boolean lastpos_valid;
	Actor missile;			// A threathing missile that got to be avoided.

	Actor ally;			// Ally to tag along with
/*	AActor		*last_mate;	// If bots mate dissapeared (not if died) that mate is
							// pointed to by this. Allows bot to roam to it if
							// necessary.

	enemyinfo_t	enemyinfo;	// Things we know about our enemy

	botstate_t	state;		// What we're doing in teamgame mode

	fixed_t		lastx;		// Last known x location of bot's enemy (go there if enemy goes out of sight)
	fixed_t		lasty;		// Last known y location of bot's enemy

	// Tickers

	float t_respawn;*/
	float t_strafe;
	float t_react;
/*	float t_fight;
	float t_rocket;
	float t_turn;
	float t_pissed;
	float t_frust;*/
	float t_fire;			// Tics left until our gun will actually fire again
	float t_anticip;
/*	float t_chat;			// Tics left until bots completes "typing" in what he's saying.
							// Bot also doesn't do anything during this time.*/

	float forwardmove;	// For building ucmd
	float sidemove;

	// Misc booleans
	boolean allround;
	boolean newItemIsWeapon;
	boolean newItemIsPowerup;

/*	chatline_t	*chatline;	// For when t_chat expires

	bottype_t	bottype;	// Bot type*/
	botinfo_t info;			// Aiming, name, perfection, yadda yadda

/*	fixed_t		oldx;
	fixed_t		oldy;

	int			thingnum;*/
	int angerlevel;

/*	AActor		*things[NUMMOBJTYPES];*/
	float combatdist[NUMWEAPONS + 1]; //different for each weapon.

	float angle;			// The wanted angle that the bot tries to get every tic.

/*	void LinkToPlayer (int playernum);*/

	void OnBeginPlay(void);
	void OnSpawn(void);
	void BotTick(float deltaTime);
	boolean CheckTo(TVec pos);
	void CheckStuff(void);
	float GetAngle(void);
	boolean CheckPath(float ang, float dist);
	void SetEnemy(void);
	Actor FindEnemy(void);
	boolean Check_LOS(Actor to, float vangle);
	boolean CheckItem(Actor item);
	void Scan(void);
	int WeapFromItem(Actor item);
	int AmmoFromItem(Actor item);
	void Move(float deltaTime);
	void SetAngle(float an);
	void Roam(void);
	float AngleTo(TVec dest);
	void Attack(void);
	void Turn(void);
	void BotAim(void);
	void Pitch(void);
	int SkillLower(int skill, int num);
	void Killed(Actor victim);
	void Died(Actor killer);
}
#endif

addfields player_t
{
	//
	//  FIRST FIELDS ARE STATS THAT ARE SENT TO CLIENT FOR STATUS BAR
	//

	sb_stats_t Stats;

	int Ammo[NUMAMMO];
	int MaxAmmo[NUMAMMO];
	int ReadyAmmo;

	boolean WeaponOwned[NUMWEAPONS];

	int ArmorPoints;

	int ReadyWeapon;

	// For screen flashing (red or bright).
	int DamageCount;
	int BonusCount;

	//
	//  ----------
	//

	boolean Backpack;

	// Bit flags, for cheats and debug.
	// See cheat_t, above.
	int Cheats;

	// Power ups. invinc and invis are tic counters.
	int Powers[NUMPOWERS];

	int Keys;

	// Base height above floor for viewz.
	float ViewHeight;
	// Bob/squat speed.
	float DeltaViewHeight;
	// bounded/scaled total momentum.
	float Bob;

	// Refired shots are less accurate.
	int Refire;

	// Is wp_nochange if not changing.
	int PendingWeapon;

	// Who did damage (NULL for floors/ceilings).
	Actor *Attacker;

	int JumpTics;

	// Armor type is 0-2.
	int ArmorType;

	TVec MoveDir;

#ifndef	NO_BOTS
	BotPlayer Bot;
#endif
};

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int num_stats = NUM_STATS + 2 * NUMAMMO + NUMWEAPONS + 5;

boolean respawnmonsters;

float FloatBobOffsets[64] = {
	0.0, 0.7841339111, 1.560714722, 2.322265625,
	3.061462402, 3.77116394, 4.444549561, 5.075134277,
	5.656845093, 6.184082031, 6.651748657, 7.055358887,
	7.391021729, 7.655517578, 7.8462677, 7.961471558,
	7.999984741, 7.961471558, 7.8462677, 7.655517578,
	7.391021729, 7.055358887, 6.651748657, 6.184082031,
	5.656845093, 5.075134277, 4.444549561, 3.77116394,
	3.061462402, 2.322265625, 1.560714722, 0.7841339111,
	-0.0000152587, -0.7841491699, -1.56072998, -2.322280884,
	-3.061477661, -3.771179199, -4.444564819, -5.075149536,
	-5.656860352, -6.18409729, -6.651763916, -7.055374146,
	-7.391052246, -7.655532837, -7.846298218, -7.961486816,
	-8.0, -7.961486816, -7.846298218, -7.655532837,
	-7.391052246, -7.055374146, -6.651763916, -6.18409729,
	-5.656860352, -5.075149536, -4.444564819, -3.771179199,
	-3.061477661, -2.322280884, -1.56072998, -0.7841339111
};

// CODE --------------------------------------------------------------------

//==========================================================================
//
//
//
//==========================================================================

//**************************************************************************
//
//  $Log$
//  Revision 1.36  2002/07/13 08:01:49  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.35  2002/06/29 15:54:34  dj_jl
//  Floatized PainChance.
//
//  Revision 1.34  2002/06/22 07:09:58  dj_jl
//  Made sliding and bouncing functions native.
//
//  Revision 1.33  2002/06/14 15:51:20  dj_jl
//  A lots of changes, new functions etc for DDF.
//
//  Revision 1.32  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.31  2002/05/03 17:11:55  dj_jl
//  Object classes split up into their files.
//
//  Revision 1.30  2002/04/11 16:50:53  dj_jl
//  Made TryMove native, Tick function.
//
//  Revision 1.29  2002/03/28 18:11:24  dj_jl
//  Changed hiding of specials like in Raven games.
//
//  Revision 1.28  2002/03/20 19:07:44  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.27  2002/03/16 17:44:02  dj_jl
//  Added PlayerPawn class, added function Spawn, beautification.
//
//  Revision 1.26  2002/03/09 17:57:01  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.25  2002/03/04 18:31:35  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.24  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.23  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.22  2002/02/22 18:00:14  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.21  2002/02/16 16:27:44  dj_jl
//  Added bool variables
//
//  Revision 1.20  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.18  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.17  2002/01/29 18:10:31  dj_jl
//  Added MCROSS and PCROSS flags
//
//  Revision 1.16  2002/01/25 18:04:33  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.15  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.13  2002/01/12 18:00:47  dj_jl
//  Sound names initialized as names
//
//  Revision 1.12  2002/01/11 18:16:33  dj_jl
//  Moved here Actor and Weapon class declarations
//
//  Revision 1.11  2002/01/11 08:03:10  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.10  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.9  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.8  2001/12/18 18:29:15  dj_jl
//  Added Hexen action specials
//
//  Revision 1.7  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//  Revision 1.5  2001/12/01 18:08:52  dj_jl
//  Physics functions as methods, started to use class references
//
//  Revision 1.4  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.3  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.2  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.1  2001/10/09 17:35:46  dj_jl
//  Split server defines into seperate file
//
//**************************************************************************
