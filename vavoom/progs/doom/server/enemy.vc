//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//	Actor::A_Look
//
//  Stay in state until a player is sighted
//
//==========================================================================

void Actor::A_Look(void)
{
	Actor targ;

	Threshold = 0;	// any shot will wake up
	targ = Actor(Sector->SoundTarget);

	if (targ && targ.bShootable)
	{
		Enemy = targ;

		if (bAmbush)
		{
			if (!P_CheckSight(self, Enemy))
			{
				if (!LookForPlayers(false))
					return;
			}
		}
	}
	else
	{
		if (!LookForPlayers(false))
			return;
	}

	// go into chase state
	if (SightSound)
	{
		name sound;

		sound = SightSound;
		if (sound == 'ZombieSight1' || sound == 'ZombieSight2' ||
			sound == 'ZombieSight3')
		{
			switch (P_Random() % 3)
			{
			case 0:
				sound = 'ZombieSight1';
				break;
			case 1:
				sound = 'ZombieSight2';
				break;
			case 2:
				sound = 'ZombieSight3';
				break;
			}
		}
		if (sound == 'ImpSight1' || sound == 'ImpSight2')
		{
			switch (P_Random() % 2)
			{
			case 0:
				sound = 'ImpSight1';
				break;
			case 1:
				sound = 'ImpSight2';
				break;
			}
		}

		if (Class == SpiderMastermind || Class == Cyberdemon)
		{
			// Full volume
			PlayFullVolumeSound(sound, CHAN_VOICE);
		}
		else
		{
			PlaySound(sound, CHAN_VOICE);
		}
	}

	SetState(SeeState);
}

//==========================================================================
//
//	Actor::A_Chase
//
//  Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void Actor::A_Chase(void)
{
	float delta;

	if (ReactionCount)
	{
		ReactionCount--;
	}

	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	// modify target threshold
	if (Threshold)
	{
		if (!Enemy || Enemy.Health <= 0)
		{
			Threshold = 0;
		}
		else
		{
			Threshold--;
		}
	}

/*	if (fastparm)
	{ // Monsters move faster in nightmare mode
		actor->tics -= actor->tics / 2;
		if (actor->tics < 3)
		{
			actor->tics = 3;
		}
	}
*/
	// turn towards movement direction if not there yet
	if (MoveDir < 8)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;

		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);

		if (delta > 0.0)
		{
			Angles.yaw -= 45.0;
		}
		else if (delta < 0.0)
		{
			Angles.yaw += 45.0;
		}
	}

	if (!Enemy || !Enemy.bShootable)
	{
		// look for a new target
		if (LookForPlayers(true))
		{
			return;	// got a new target
		}
		SetState(SpawnState);
		return;
	}

	// do not attack twice in a row
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (!fastparm)
		{
			NewChaseDir();
		}
		return;
	}

	// check for melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// check for missile attack
	if (MissileState)
	{
		if (fastparm || !MoveCount)
		{
			if (CheckMissileRange())
			{
				SetState(MissileState);
				bJustAttacked = true;
				return;
			}
		}
	}

	// possibly choose another target
	if (netgame && !Threshold)
	{
		if (!P_CheckSight(self, Enemy))
		{
			if (LookForPlayers(true))
				return;	// got a new target
		}
	}

	// chase towards player
	if (--MoveCount < 0 || !StepMove())
	{
		NewChaseDir();
	}

	// make active sound
	if (ActiveSound && P_Random() < 3)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//	Actor::A_FaceTarget
//
//==========================================================================

void Actor::A_FaceTarget(void)
{
	if (!Enemy)
		return;

	bAmbush = false;

	Angles.yaw = atan2(Enemy.Origin.y - Origin.y, Enemy.Origin.x - Origin.x);

	if (Enemy.Translucency)
	{
		Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//  Actor::A_Pain
//
//==========================================================================

void Actor::A_Pain(void)
{
	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	if (PainSound)
	{
		PlaySound(PainSound, CHAN_VOICE);
	}
}

//==========================================================================
//
//  Actor::A_Explode
//
//  Rocket and barrel explosion.
//
//==========================================================================

void Actor::A_Explode(void)
{
	Translucency = 50;
	P_RadiusAttack(this, &Owner, 128, 0, 0);

	//  Spawn explosion effects - dynamic light and particles
	MSG_Select(MSG_SV_DATAGRAM);
	MSG_WriteByte(svc_explosion);
	MSG_WriteShort(ftoi(Origin.x));
	MSG_WriteShort(ftoi(Origin.y));
	MSG_WriteShort(ftoi(Origin.z + Height * 0.5));

	//  Clear old dynamic light effect
	Effects &= ~EF_DLIGHT_MASK;
}

//==========================================================================
//
//	Actor::A_Scream
//
//  Death sound.
//
//==========================================================================

void Actor::A_Scream(void)
{
	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	if (DeathSound)
	{
		name sound;

		sound = DeathSound;
		if (sound == 'ZombieDeath1' || sound == 'ZombieDeath2' ||
			sound == 'ZombieDeath3')
		{
			switch (P_Random() % 3)
			{
			case 0:
				sound = 'ZombieDeath1';
				break;
			case 1:
				sound = 'ZombieDeath2';
				break;
			case 2:
				sound = 'ZombieDeath3';
				break;
			}
		}
		if (sound == 'ImpDeath1' || sound == 'ImpDeath2')
		{
			switch (P_Random() % 2)
			{
			case 0:
				sound = 'ImpDeath1';
				break;
			case 1:
				sound = 'ImpDeath2';
				break;
			}
		}

		// Check for bosses.
		if (Class == SpiderMastermind || Class == Cyberdemon)
		{
			// full volume
			PlayFullVolumeSound(sound, CHAN_VOICE);
		}
		else
		{
			PlaySound(sound, CHAN_VOICE);
		}
	}
}

//==========================================================================
//
//	Actor::A_XScream
//
//  Explode death sound.
//
//==========================================================================

void Actor::A_XScream(void)
{
	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	PlaySound('Slop', CHAN_BODY);
}

//==========================================================================
//
//	Actor::A_Fall
//
//  Unset blocking.
//
//==========================================================================

void Actor::A_Fall(void)
{
	//  Remove muzzle flash
	if ((Effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		Effects &= ~EF_DLIGHT_MASK;
	}

	// actor is on ground, it can be walked over
	bSolid = false;

	// So change this if corpse objects
	// are meant to be obstacles.
}

//==========================================================================
//
//  Actor::A_PlayerScream
//
//  Player death sound
//
//==========================================================================

void Actor::A_PlayerScream(void)
{
	// Default death sound.
	name sound = 'PlayerDeath';

#ifdef DOOM2
	if (Health < -50)
	{
		// IF THE PLAYER DIES
		// LESS THAN -50% WITHOUT GIBBING
		sound = 'PlayerExtremeDeath';
	}
#endif

	PlaySound(sound, CHAN_VOICE);
}

#ifndef DOOM2

//==========================================================================
//
//  Actor::A_BossDeath
//
//  DOOM / Ultimate DOOM boss death
//  Possibly trigger special effects if on first boss level
//
//==========================================================================

void Actor::A_BossDeath(void)
{
	string mapname;
	int i;
	Actor Other;
	int args[5];

	mapname = ARR2STR(level->mapname);

	if (!strcmp(mapname, "E1M8"))
	{
		if (Class != BaronOfHell)
			return;
	}
	else if (!strcmp(mapname, "E2M8"))
	{
		if (Class != Cyberdemon)
			return;
	}
	else if (!strcmp(mapname, "E3M8"))
	{
		if (Class != SpiderMastermind)
			return;
	}
	else if (!strcmp(mapname, "E4M6"))
	{
		if (Class != Cyberdemon)
			return;
	}
	else if (!strcmp(mapname, "E4M8"))
	{
		if (Class != SpiderMastermind)
			return;
	}
	else
	{
		//  Not a boss level
		return;
	}

	// make sure there is a player alive for victory
	for (i = 0; i < MAXPLAYERS; i++)
		if (players[i].bSpawned && players[i].Health > 0)
			break;

	if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game

	// scan the remaining thinkers to see if all bosses are dead
	FOREACH(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other boss not dead
			return;
		}
	}

	// victory!
	if (!strcmp(mapname, "E1M8"))
	{
		args[0] = 666;
		args[1] = 8;
		EV_DoFloor(NULL, &args[0], FLEV_LOWERFLOORTOLOWEST);
		return;
	}
	if (!strcmp(mapname, "E4M6"))
	{
		args[0] = 666;
		args[1] = 64;
		args[2] = 150;
		args[3] = 0;
		EV_DoDoor(NULL, &args[0], doorOpen);
		return;
	}
	if (!strcmp(mapname, "E4M8"))
	{
		args[0] = 666;
		args[1] = 8;
		EV_DoFloor(NULL, &args[0], FLEV_LOWERFLOORTOLOWEST);
		return;
	}

	G_ExitLevel();
}

#else

//==========================================================================
//
//  Actor::A_BossDeath
//
//  DOOM II boss death
//  Possibly trigger special effects if on first boss level
//
//==========================================================================

void Actor::A_BossDeath(void)
{
	int i;
	Actor Other;
	int args[5];

	if (strcmp(ARR2STR(level->mapname), "MAP07"))
	{
		//  Not a boss level
		return;
	}

	if ((Class != Mancubus) && (Class != Arachnotron))
		return;

	// make sure there is a player alive for victory
	for (i = 0; i < MAXPLAYERS; i++)
		if (players[i].bSpawned && players[i].Health > 0)
			break;

	if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game

	// scan the remaining thinkers to see if all bosses are dead
	FOREACH(Actor, Other)
	{
		if (Other != self && Other.Class == Class && Other.Health > 0)
		{
			// other boss not dead
			return;
		}
	}

	// victory!
	if (Class == Mancubus)
	{
		args[0] = 666;
		args[1] = 8;
		EV_DoFloor(NULL, &args[0], FLEV_LOWERFLOORTOLOWEST);
	}
	else	// mo->Class == MT_BABY
	{
		args[0] = 667;
		args[1] = 8;
		EV_DoFloor(NULL, &args[0], FLEV_RAISETOTEXTURE);
	}
}

#endif

//**************************************************************************
//
//  $Log$
//  Revision 1.21  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.20  2002/02/22 18:00:07  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.19  2002/02/16 16:26:55  dj_jl
//  Removed precalculated sound IDs
//
//  Revision 1.18  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.17  2002/02/06 17:28:51  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.15  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.14  2002/01/25 18:04:33  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.13  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.12  2002/01/17 18:15:52  dj_jl
//  Renamed all map object classes
//
//  Revision 1.11  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.10  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.9  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.8  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.7  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/12/01 18:14:07  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.5  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
