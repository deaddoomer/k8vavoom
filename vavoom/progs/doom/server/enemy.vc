//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	Copyright (C) 1999-2000 JÆnis Legzdi·ý
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**	
//**************************************************************************

//==========================================================================
//
//	A_Look
//
//	Stay in state until a player is sighted
//
//==========================================================================

void A_Look(mobj_t *actor)
{
	mobj_t		*targ;
	int			sound;

	actor->threshold = 0;       // any shot will wake up
	targ = actor->subsector->sector->soundtarget;

	if (targ && targ->flags & MF_SHOOTABLE)
	{
		actor->target = targ;

		if ( actor->flags & MF_AMBUSH )
		{
			if (!P_CheckSight(actor, actor->target))
			{
				if (!P_LookForPlayers (actor, false) )
					return;
			}
		}
	}
	else
	{
		if (!P_LookForPlayers(actor, false))
			return;
	}

	// go into chase state
	if (actor->sound_sight)
	{
    	int		sfx_posit = GetSoundID("ZombieSight1");
    	int		sfx_bgsit = GetSoundID("ImpSight1");

		sound = actor->sound_sight;
		if (sound >= sfx_posit &&
        	sound <= sfx_posit + 2)
		{
			sound = sfx_posit + P_Random() % 3;
		}
		if (sound == sfx_bgsit ||
        	sound == sfx_bgsit + 1)
		{
			sound = sfx_bgsit + P_Random() % 2;
		}

		if (actor->type == MT_SPIDER || actor->type == MT_CYBORG)
		{
			// Full volume
			StartSound(NULL, sound);
		}
		else
		{
			StartSound(actor, sound);
		}
	}

	SetMobjState(actor, actor->seestate);
}

//==========================================================================
//
//	A_Chase
//
//	Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void A_Chase(mobj_t *actor)
{
    int		delta;

	if(actor->reactiontime)
	{
		actor->reactiontime--;
	}

	//	Remove muzzle flash
	if ((actor->effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		actor->effects &= ~EF_DLIGHT_MASK;
	}

    // modify target threshold
    if  (actor->threshold)
    {
		if (!actor->target || actor->target->health <= 0)
		{
		    actor->threshold = 0;
		}
		else
        {
		    actor->threshold--;
		}
	}

/*	if (fastparm)
	{ // Monsters move faster in nightmare mode
		actor->tics -= actor->tics / 2;
		if (actor->tics < 3)
		{
			actor->tics = 3;
		}
	}
*/
    // turn towards movement direction if not there yet
    if (actor->movedir < 8)
    {
		actor->angles.yaw &= (7 << 29);
		delta = actor->angles.yaw - (actor->movedir << 29);
	
		if (delta > 0)
        {
		    actor->angles.yaw -= ANG90 / 2;
		}
		else if (delta < 0)
		{
		    actor->angles.yaw += ANG90 / 2;
		}
    }

    if (!actor->target || !(actor->target->flags & MF_SHOOTABLE))
    {
		// look for a new target
		if (P_LookForPlayers(actor,true))
        {
		    return; 	// got a new target
	    }
		SetMobjState(actor, actor->spawnstate);
		return;
    }
    
    // do not attack twice in a row
    if (actor->flags & MF_JUSTATTACKED)
    {
		actor->flags &= ~MF_JUSTATTACKED;
		if (!fastparm)
        {
		    P_NewChaseDir(actor);
		}
		return;
    }
    
    // check for melee attack
    if (actor->meleestate	&& P_CheckMeleeRange(actor))
    {
		if (actor->sound_attack)
        {
		    StartSound(actor, actor->sound_attack);
		}
		SetMobjState(actor, actor->meleestate);
		return;
    }
    
    // check for missile attack
    if (actor->missilestate)
    {
		if (fastparm || !actor->movecount)
        {
			if (P_CheckMissileRange(actor))
            {
				SetMobjState(actor, actor->missilestate);
				actor->flags |= MF_JUSTATTACKED;
				return;
			}
		}
    }

    // possibly choose another target
    if (netgame && !actor->threshold)
    {
    	if (!P_CheckSight(actor, actor->target))
	    {
			if (P_LookForPlayers(actor,true))
			    return;	// got a new target
	    }
	}

    // chase towards player
    if (--actor->movecount < 0 || !P_Move(actor))
    {
		P_NewChaseDir(actor);
    }

    // make active sound
    if (actor->sound_active && P_Random() < 3)
    {
		StartSound(actor, actor->sound_active);
    }
}

//==========================================================================
//
//	A_FaceTarget
//
//==========================================================================

void A_FaceTarget(mobj_t *actor)
{
    if (!actor->target)
		return;
    
    actor->flags &= ~MF_AMBUSH;
	
    actor->angles.yaw = atan2(actor->target->origin.y - actor->origin.y,
							  actor->target->origin.x - actor->origin.x);
    
    if (actor->target->translucency)
	{
		actor->angles.yaw += (P_Random() - P_Random()) << 21;
	}
}

//==========================================================================
//
//	A_StopMuzzleFlash
//
//==========================================================================

void A_StopMuzzleFlash(mobj_t *actor)
{
	//	Remove muzzle flash
	if ((actor->effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		actor->effects &= ~EF_DLIGHT_MASK;
	}
}

//==========================================================================
//
//	A_Pain
//
//==========================================================================

void A_Pain(mobj_t *actor)
{
	//	Remove muzzle flash
	if ((actor->effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		actor->effects &= ~EF_DLIGHT_MASK;
	}

    if (actor->sound_pain)
    {
		StartSound(actor, actor->sound_pain);
	}
}

//==========================================================================
//
//	A_Explode
//
//	Rocket and barrel explosion.
//
//==========================================================================

void A_Explode(mobj_t *thingy)
{
	thingy->translucency = 50;
    P_RadiusAttack(thingy, thingy->target, 128, 0, 0);

	//	Spawn explosion effects - dynamic light and particles
	MSG_Select(MSG_SV_DATAGRAM, NULL);
	MSG_WriteByte(svc_explosion);
	MSG_WriteShort(ftoi(thingy->origin.x));
	MSG_WriteShort(ftoi(thingy->origin.y));
	MSG_WriteShort(ftoi(thingy->origin.z + thingy->height * 0.5));

	//	Clear old dynamic light effect
	thingy->effects &= ~EF_DLIGHT_MASK;
}

//==========================================================================
//
//	A_Scream
//
//	Death sound.
//
//==========================================================================

void A_Scream(mobj_t *actor)
{
    int		sound;

	//	Remove muzzle flash
	if ((actor->effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		actor->effects &= ~EF_DLIGHT_MASK;
	}

	if (actor->sound_death)
    {
    	int		sfx_podth = GetSoundID("ZombieDeath1");
    	int		sfx_bgdth = GetSoundID("ImpDeath1");

		sound = actor->sound_death;
		if (sound >= sfx_podth &&
        	sound <= sfx_podth + 2)
   		{
			sound = sfx_podth + P_Random() % 3;
		}
		if (sound == sfx_bgdth ||
        	sound == sfx_bgdth + 1)
		{
			sound = sfx_bgdth + P_Random() % 2;
	    }

	    // Check for bosses.
    	if (actor->type == MT_SPIDER || actor->type == MT_CYBORG)
	    {
			// full volume
			StartSound(NULL, sound);
	    }
    	else
	    {
			StartSound(actor, sound);
		}
	}
}

//==========================================================================
//
//	A_XScream
//
//	Explode death sound.
//
//==========================================================================

void A_XScream(mobj_t *actor)
{
	//	Remove muzzle flash
	if ((actor->effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		actor->effects &= ~EF_DLIGHT_MASK;
	}

    StartSoundName(actor, "Slop");
}

//==========================================================================
//
//	A_Fall
//
//	Unset blocking.
//
//==========================================================================

void A_Fall(mobj_t *actor)
{
	//	Remove muzzle flash
	if ((actor->effects & EF_DLIGHT_MASK) == EF_DL_MUZZLEFLASH)
	{
		actor->effects &= ~EF_DLIGHT_MASK;
	}

    // actor is on ground, it can be walked over
    actor->flags &= ~MF_SOLID;

    // So change this if corpse objects
    // are meant to be obstacles.
}

//==========================================================================
//
//	A_PlayerScream
//
//	Player death sound
//
//==========================================================================

void A_PlayerScream(mobj_t *mo)
{
    // Default death sound.
    string		sound = "PlayerDeath";
	
#ifdef DOOM2
    if (mo->health < -50)
    {
		// IF THE PLAYER DIES
		// LESS THAN -50% WITHOUT GIBBING
		sound = "PlayerExtremeDeath";
    }
#endif
    
    StartSoundName(mo, sound);
}

#ifndef DOOM2

//==========================================================================
//
//	A_BossDeath
//
//	DOOM / Ultimate DOOM boss death
//	Possibly trigger special effects if on first boss level
//
//==========================================================================

void A_BossDeath(mobj_t* mo)
{
	string		mapname;
    int			i;
    mobj_t*		mo2;
	int			args[5];

	mapname = ptrtos(&level->mapname[0]);

	if (!strcmp(mapname, "E1M8"))
	{
	    if (mo->type != MT_BRUISER)
			return;
	}
	else if (!strcmp(mapname, "E2M8"))
	{
	    if (mo->type != MT_CYBORG)
			return;
	}
	else if (!strcmp(mapname, "E3M8"))
	{
	    if (mo->type != MT_SPIDER)
			return;
	}
	else if (!strcmp(mapname, "E4M6"))
	{
		if (mo->type != MT_CYBORG)
		    return;
	}
	else if (!strcmp(mapname, "E4M8"))
	{
		if (mo->type != MT_SPIDER)
		    return;
	}
	else
	{
		//	Not a boss level
		return;
	}

    // make sure there is a player alive for victory
    for (i=0 ; i<MAXPLAYERS ; i++)
		if (players[i].spawned && players[i].health > 0)
		    break;
    
    if (i==MAXPLAYERS)
		return;	// no one left alive, so do not end game
    
    // scan the remaining thinkers to see if all bosses are dead
    for (mo2 = NextMobj(NULL); mo2; mo2 = NextMobj(mo2))
    {
		if (mo2 != mo && mo2->type == mo->type && mo2->health > 0)
		{
		    // other boss not dead
	    	return;
		}
    }
	
    // victory!
	if (!strcmp(mapname, "E1M8"))
	{
		args[0] = 666;
		args[1] = 8;
		EV_DoFloor(NULL, &args[0], FLEV_LOWERFLOORTOLOWEST);
	    return;
	}
	if (!strcmp(mapname, "E4M6"))
	{
		args[0] = 666;
		args[1] = 64;
		args[2] = 150;
		args[3] = 0;
		EV_DoDoor(NULL, &args[0], doorOpen);
		return;
	}
	if (!strcmp(mapname, "E4M8"))
	{
		args[0] = 666;
		args[1] = 8;
		EV_DoFloor(NULL, &args[0], FLEV_LOWERFLOORTOLOWEST);
		return;
	}

    G_ExitLevel();
}

#else

//==========================================================================
//
//	A_BossDeath
//
//	DOOM II	boss death
//	Possibly trigger special effects if on first boss level
//
//==========================================================================

void A_BossDeath(mobj_t* mo)
{
    int			i;
    mobj_t*		mo2;
	int			args[5];

	if (strcmp(ptrtos(&level->mapname[0]), "MAP07"))
	{
		//	Not a boss level
		return;
	}
		
	if ((mo->type != MT_FATSO) && (mo->type != MT_BABY))
    	return;

    // make sure there is a player alive for victory
    for (i = 0; i < MAXPLAYERS; i++)
		if (players[i].spawned && players[i].health > 0)
		    break;
    
    if (i == MAXPLAYERS)
		return;	// no one left alive, so do not end game
    
    // scan the remaining thinkers to see if all bosses are dead
    for (mo2 = NextMobj(NULL); mo2; mo2 = NextMobj(mo2))
    {
		if (mo2 != mo && mo2->type == mo->type && mo2->health > 0)
		{
		    // other boss not dead
	    	return;
		}
    }
	
    // victory!
    if (mo->type == MT_FATSO)
    {
		args[0] = 666;
		args[1] = 8;
		EV_DoFloor(NULL, &args[0], FLEV_LOWERFLOORTOLOWEST);
   	}
	else // mo->type == MT_BABY
    {
		args[0] = 667;
		args[1] = 8;
		EV_DoFloor(NULL, &args[0], FLEV_RAISETOTEXTURE);
    }
}

#endif

