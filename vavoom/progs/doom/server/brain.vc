//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	BossTarget
//
//**************************************************************************

class BossTarget:Actor
	__mobjinfo__(87)
{

defaultproperties
{
	Radius = 20.0;
	Height = 32.0;
	ReactionCount = 8;
	bHidden = true;
	bNoBlockmap = true;
}

}

//**************************************************************************
//
//	SpawnFire
//
//**************************************************************************

class SpawnFire:Effect
{

__states__
{
	S_SPAWNFIRE1('FIRE', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE2) { }
	S_SPAWNFIRE2('FIRE', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE3) { }
	S_SPAWNFIRE3('FIRE', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE4) { }
	S_SPAWNFIRE4('FIRE', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE5) { }
	S_SPAWNFIRE5('FIRE', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE6) { }
	S_SPAWNFIRE6('FIRE', 5 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE7) { }
	S_SPAWNFIRE7('FIRE', 6 | FF_FULLBRIGHT, 4.0 / 35.0, S_SPAWNFIRE8) { }
	S_SPAWNFIRE8('FIRE', 7 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Translucency = 33;
	IdleState = S_SPAWNFIRE1;
	Effects = EF_DL_MISSILE;
}

}

//**************************************************************************
//
//	SpawnShot
//
//**************************************************************************

class SpawnShot:Projectile
{

//==========================================================================
//
//  A_SpawnFly
//
//  Cube flying, spawn monster, when finished.
//
//==========================================================================

void A_SpawnFly(void)
{
	Actor newmobj;
	Actor fog;
	int r;
	classid type;

	if (--ReactionCount)
		return;	// still flying

	// First spawn teleport fog.
	fog = Spawn(SpawnFire, Enemy.Origin);
	fog.PlaySound('Teleport', CHAN_VOICE);

	// Randomly select monster to spawn.
	r = P_Random();

	// Probability distribution (kind of :),
	// decreasing likelihood.
	if (r < 50)
		type = Imp;
	else if (r < 90)
		type = Demon;
	else if (r < 120)
		type = Shadows;
	else if (r < 130)
		type = PainElemental;
	else if (r < 160)
		type = Cacodemon;
	else if (r < 162)
		type = ArchVile;
	else if (r < 172)
		type = Revenant;
	else if (r < 192)
		type = Arachnotron;
	else if (r < 222)
		type = Mancubus;
	else if (r < 246)
		type = HellKnight;
	else
		type = BaronOfHell;

	newmobj = Spawn(type, Enemy.Origin);
	if (newmobj.LookForPlayers(true))
		newmobj.SetState(newmobj.SeeState);

	// telefrag anything in this spot
	newmobj.bTelestomp = true;
	newmobj.TeleportMove(newmobj.Origin);

	// remove self (i.e., cube).
	Remove();
}

//==========================================================================
//
//  A_SpawnSound
//
//  Travelling cube sound.
//
//==========================================================================

void A_SpawnSound(void)
{
	PlaySound('CubeFly', CHAN_VOICE);
	A_SpawnFly();
}

__states__
{
	S_SPAWN1('BOSF', 0 | FF_FULLBRIGHT, 'monsters/cube.md2', 0, 3.0 / 35.0, S_SPAWN2) { A_SpawnSound(); }
	S_SPAWN2('BOSF', 1 | FF_FULLBRIGHT, 'monsters/cube.md2', 1, 3.0 / 35.0, S_SPAWN3) { A_SpawnFly(); }
	S_SPAWN3('BOSF', 2 | FF_FULLBRIGHT, 'monsters/cube.md2', 2, 3.0 / 35.0, S_SPAWN4) { A_SpawnFly(); }
	S_SPAWN4('BOSF', 3 | FF_FULLBRIGHT, 'monsters/cube.md2', 3, 3.0 / 35.0, S_SPAWN1) { A_SpawnFly(); }
}

defaultproperties
{
	Radius = 6.0;
	Height = 32.0;
	Speed = 350.0;
	MissileDamage = 3;
	bColideWithThings = false;
	bColideWithWorld = false;
	IdleState = S_SPAWN1;
	SightSound = 'BossFire';
	DeathSound = 'FireballExplode';
}

}

//**************************************************************************
//
//	BrainExplosion
//
//**************************************************************************

class BrainExplosion:Rocket
{

//==========================================================================
//
//  A_BrainExplode
//
//  Brain explosions.
//
//==========================================================================

void A_BrainExplode(void)
{
	TVec org;
	Actor A;

	org.x = Origin.x + (Random() - Random()) * 8.0;
	org.y = Origin.y;
	org.z = 1.0 / 512.0 + Random() * 512.0;
	A = Spawn(BrainExplosion, org);
	A.Velocity.z = Random() * 2.0 * 35.0;

	A.SetState(A.IdleState);

	A.StateTime -= Random() * 0.2;
	if (A.StateTime < 0.1)
		A.StateTime = 0.1;
}

__states__
{
	S_BRAINEXPLODE1('MISL', 1 | FF_FULLBRIGHT, 10.0 / 35.0, S_BRAINEXPLODE2) { }
	S_BRAINEXPLODE2('MISL', 2 | FF_FULLBRIGHT, 10.0 / 35.0, S_BRAINEXPLODE3) { }
	S_BRAINEXPLODE3('MISL', 3 | FF_FULLBRIGHT, 10.0 / 35.0, S_NULL) { A_BrainExplode(); }
}

defaultproperties
{
	IdleState = S_BRAINEXPLODE1;
}

}

//**************************************************************************
//
//	BossBrain
//
//**************************************************************************

class BossBrain:Actor
	__mobjinfo__(88)
{

//==========================================================================
//
//  A_BrainPain
//
//  Brain pain sound.
//
//==========================================================================

void A_BrainPain(void)
{
	PlayFullVolumeSound('BossPain', CHAN_VOICE);
}

//==========================================================================
//
//  A_BrainScream
//
//  Brain death sound, make explosions.
//
//==========================================================================

void A_BrainScream(void)
{
	TVec org;
	Actor A;

	for (org.x = Origin.x - 196.0; org.x < Origin.x + 320.0; org.x += 8.0)
	{
		org.y = Origin.y - 320.0;
		org.z = 1.0 / 512.0 + Random() * 512.0;
		A = Spawn(BrainExplosion, org);
		A.Velocity.z = Random() * 2.0 * 35.0;

		A.SetState(A.IdleState);

		A.StateTime -= Random() * 0.2;
		if (A.StateTime < 0.1)
			A.StateTime = 0.1;
	}

	PlayFullVolumeSound('BossDeath', CHAN_VOICE);
}

//==========================================================================
//
//  A_BrainDie
//
//  Killed brain, exit level.
//
//==========================================================================

void A_BrainDie(void)
{
	G_ExitLevel();
}

__states__
{
	S_BRAIN('BBRN', 0, -1.0, S_NULL) { }
	S_BRAIN_PAIN('BBRN', 1, 36.0 / 35.0, S_BRAIN) { A_BrainPain(); }
	S_BRAIN_DIE1('BBRN', 0, 100.0 / 35.0, S_BRAIN_DIE2) { A_BrainScream(); }
	S_BRAIN_DIE2('BBRN', 0, 10.0 / 35.0, S_BRAIN_DIE3) { }
	S_BRAIN_DIE3('BBRN', 0, 10.0 / 35.0, S_BRAIN_DIE4) { }
	S_BRAIN_DIE4('BBRN', 0, -1.0, S_NULL) { A_BrainDie(); }
}

defaultproperties
{
	Health = 250;
	Radius = 16.0;
	Height = 16.0;
	Mass = 10000000.0;
	ReactionCount = 8;
	PainChance = 1.0;
	bSolid = true;
	bShootable = true;
	IdleState = S_BRAIN;
	PainState = S_BRAIN_PAIN;
	DeathState = S_BRAIN_DIE1;
	PainSound = 'BossPain';
	DeathSound = 'BossDeath';
}

}

//**************************************************************************
//
//	BossEye
//
//**************************************************************************

class BossEye:Actor
	__mobjinfo__(89)
{

int NumBrainTargets;
int BrainTargetOn;
bool bBrainEasy;
Actor BrainTargets[32];

//==========================================================================
//
//  A_BrainAwake
//
//  Init boss spawner.
//
//==========================================================================

void A_BrainAwake(void)
{
	Actor m;

	// find all the target spots
	NumBrainTargets = 0;
	FOREACH(Actor, m)
	{
		if (m.Class == BossTarget)
		{
			BrainTargets[NumBrainTargets] = m;
			NumBrainTargets++;
		}
	}
	BrainTargetOn = 0;

	PlayFullVolumeSound('BossSight', CHAN_VOICE);
}

//==========================================================================
//
//  A_BrainSpit
//
//  Spawn a cube.
//
//==========================================================================

void A_BrainSpit(void)
{
	Actor targ;
	Actor A;

	bBrainEasy = !bBrainEasy;
	if (gameskill <= sk_easy && !bBrainEasy)
		return;

	// shoot a cube at current target
	targ = BrainTargets[BrainTargetOn];
	BrainTargetOn = (BrainTargetOn + 1) % NumBrainTargets;

	// spawn brain missile
	A = SpawnMissile(targ, SpawnShot);
	A.Enemy = targ;
	A.ReactionCount = ftoi((targ.Origin.y - Origin.y) /
		A.Velocity.y / A.StateTime);

	PlayFullVolumeSound('BossFire', CHAN_WEAPON);
}

__states__
{
	S_BRAINEYE('SSWV', 0, 10.0 / 35.0, S_BRAINEYE) { A_Look(); }
	S_BRAINEYESEE('SSWV', 0, 181.0 / 35.0, S_BRAINEYE1) { A_BrainAwake(); }
	S_BRAINEYE1('SSWV', 0, 150.0 / 35.0, S_BRAINEYE1) { A_BrainSpit(); }
}

defaultproperties
{
	Radius = 20.0;
	Height = 32.0;
	ReactionCount = 8;
	bHidden = true;
	bNoBlockmap = true;
	IdleState = S_BRAINEYE;
	SeeState = S_BRAINEYESEE;
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.24  2002/06/29 15:54:34  dj_jl
//  Floatized PainChance.
//
//  Revision 1.23  2002/06/22 07:22:16  dj_jl
//  Added default values to Actor.
//
//  Revision 1.22  2002/06/14 15:51:20  dj_jl
//  A lots of changes, new functions etc for DDF.
//
//  Revision 1.21  2002/05/18 16:59:58  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.20  2002/05/03 17:11:52  dj_jl
//  Object classes split up into their files.
//
//  Revision 1.19  2002/03/20 19:07:43  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.18  2002/03/16 17:44:01  dj_jl
//  Added PlayerPawn class, added function Spawn, beautification.
//
//  Revision 1.17  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.16  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.15  2002/02/22 18:00:06  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.14  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.13  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.12  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:52  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.6  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
