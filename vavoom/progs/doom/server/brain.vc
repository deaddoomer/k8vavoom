//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#ifdef DOOM2

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

int numbraintargets;
int braintargeton;
int brain_easy = 0;
mobj_t *braintargets[32];

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  Actor::A_BrainAwake
//
//  Init boss spawner.
//
//==========================================================================

void Actor::A_BrainAwake(void)
{
	Actor m;

	// find all the target spots
	numbraintargets = 0;
	FOREACH(Actor, m)
	{
		if (m.Class == BossTarget)
		{
			braintargets[numbraintargets] = &m;
			numbraintargets++;
		}
	}
	braintargeton = 0;

	PlayFullVolumeSound('BossSight', CHAN_VOICE);
}

//==========================================================================
//
//  Actor::A_BrainSpit
//
//  Spawn a cube.
//
//==========================================================================

void Actor::A_BrainSpit(void)
{
	mobj_t *targ;
	mobj_t *newmobj;

	brain_easy ^= 1;
	if (gameskill <= sk_easy && (!brain_easy))
		return;

	// shoot a cube at current target
	targ = braintargets[braintargeton];
	braintargeton = (braintargeton + 1) % numbraintargets;

	// spawn brain missile
	newmobj = SpawnMissile(this, targ, SpawnShot);
	newmobj->target = targ;
	newmobj->ReactionCount = ftoi((targ->Origin.y - Origin.y) /
		newmobj->Velocity.y / newmobj->StateTime);

	PlayFullVolumeSound('BossFire', CHAN_WEAPON);
}

//==========================================================================
//
//  Actor::A_BrainPain
//
//  Brain pain sound.
//
//==========================================================================

void Actor::A_BrainPain(void)
{
	PlayFullVolumeSound('BossPain', CHAN_VOICE);
}

//==========================================================================
//
//  Actor::A_BrainScream
//
//  Brain death sound, make explosions.
//
//==========================================================================

void Actor::A_BrainScream(void)
{
	float x;
	float y;
	float z;
	mobj_t *th;

	for (x = Origin.x - 196.0; x < Origin.x + 320.0; x += 8.0)
	{
		y = Origin.y - 320.0;
		z = 1.0 / 512.0 + Random() * 512.0;
		th = P_SpawnMobj(x, y, z, Rocket);
		th->Velocity.z = Random() * 2.0 * 35.0;

		th->SetState(S_BRAINEXPLODE1);

		th->StateTime -= Random() * 0.2;
		if (th->StateTime < 0.1)
			th->StateTime = 0.1;
	}

	PlayFullVolumeSound('BossDeath', CHAN_VOICE);
}

//==========================================================================
//
//  Actor::A_BrainExplode
//
//  Brain explosions.
//
//==========================================================================

void Actor::A_BrainExplode(void)
{
	float x;
	float y;
	float z;
	mobj_t *th;

	x = Origin.x + (Random() - Random()) * 8.0;
	y = Origin.y;
	z = 1.0 / 512.0 + Random() * 512.0;
	th = P_SpawnMobj(x, y, z, Rocket);
	th->Velocity.z = Random() * 2.0 * 35.0;

	th->SetState(S_BRAINEXPLODE1);

	th->StateTime -= Random() * 0.2;
	if (th->StateTime < 0.1)
		th->StateTime = 0.1;
}

//==========================================================================
//
//  Actor::A_BrainDie
//
//  Killed brain, exit level.
//
//==========================================================================

void Actor::A_BrainDie(void)
{
	G_ExitLevel();
}

//==========================================================================
//
//  Actor::A_SpawnSound
//
//  Travelling cube sound.
//
//==========================================================================

void Actor::A_SpawnSound(void)
{
	PlaySound('CubeFly', CHAN_VOICE);
	A_SpawnFly();
}

//==========================================================================
//
//  Actor::A_SpawnFly
//
//  Cube flying, spawn monster, when finished.
//
//==========================================================================

void Actor::A_SpawnFly(void)
{
	mobj_t *newmobj;
	mobj_t *fog;
	mobj_t *targ;
	int r;
	classid type;

	if (--ReactionCount)
		return;	// still flying

	targ = target;

	// First spawn teleport fog.
	fog = P_SpawnMobj(targ->Origin.x, targ->Origin.y, targ->Origin.z,
		SpawnFire);
	fog->PlaySound('Teleport', CHAN_VOICE);

	// Randomly select monster to spawn.
	r = P_Random();

	// Probability distribution (kind of :),
	// decreasing likelihood.
	if (r < 50)
		type = Imp;
	else if (r < 90)
		type = Demon;
	else if (r < 120)
		type = Shadows;
	else if (r < 130)
		type = PainElemental;
	else if (r < 160)
		type = Cacodemon;
	else if (r < 162)
		type = ArchVile;
	else if (r < 172)
		type = Revenant;
	else if (r < 192)
		type = Arachnotron;
	else if (r < 222)
		type = Mancubus;
	else if (r < 246)
		type = HellKnight;
	else
		type = BaronOfHell;

	newmobj = P_SpawnMobj(targ->Origin.x, targ->Origin.y,
		targ->Origin.z, type);
	if (newmobj->LookForPlayers(true))
		newmobj->SetState(newmobj->SeeState);

	// telefrag anything in this spot
	P_TeleportMove(newmobj, newmobj->Origin.x, newmobj->Origin.y);

	// remove self (i.e., cube).
	P_RemoveMobj(this);
}

#else

void Actor::A_BrainAwake(void)
{
	NotDoom2();
}

void Actor::A_BrainSpit(void)
{
	NotDoom2();
}

void Actor::A_BrainPain(void)
{
	NotDoom2();
}

void Actor::A_BrainScream(void)
{
	NotDoom2();
}

void Actor::A_BrainExplode(void)
{
	NotDoom2();
}

void Actor::A_BrainDie(void)
{
	NotDoom2();
}

void Actor::A_SpawnSound(void)
{
	NotDoom2();
}

void Actor::A_SpawnFly(void)
{
	NotDoom2();
}

#endif

//**************************************************************************
//
//  $Log$
//  Revision 1.15  2002/02/22 18:00:06  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.14  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.13  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.12  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.11  2002/01/17 18:15:52  dj_jl
//  Renamed all map object classes
//
//  Revision 1.10  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.6  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.5  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
