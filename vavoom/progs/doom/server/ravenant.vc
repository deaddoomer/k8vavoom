//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2001 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

#ifdef DOOM2

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  A_SkelWhosh
//
//  Ravenant attack sound.
//
//==========================================================================

void A_SkelWhoosh(mobj_t * actor)
{
	if (!actor->target)
		return;
	A_FaceTarget(actor);
	StartSoundName(actor, "RavenantSwing", CHAN_WEAPON);
}

//==========================================================================
//
//  A_SkelFist
//
//  Ravenant close attack.
//
//==========================================================================

void A_SkelFist(mobj_t * actor)
{
	int damage;

	if (!actor->target)
		return;

	A_FaceTarget(actor);

	if (P_CheckMeleeRange(actor))
	{
		damage = ((P_Random() % 10) + 1) * 6;
		StartSoundName(actor, "RavenantPunch", CHAN_WEAPON);
		actor->target->Damage(actor, actor, damage);
	}
}

//==========================================================================
//
//  A_SkelMissile
//
//  Ravenant far attack.
//
//==========================================================================

void A_SkelMissile(mobj_t * actor)
{
	mobj_t *mo;

	if (!actor->target)
		return;

	A_FaceTarget(actor);
	actor->origin.z += 16.0;	// so missile spawns higher
	mo = SpawnMissile(actor, actor->target, MT_TRACER);
	actor->origin.z -= 16.0;	// back to normal

	mo->origin = mo->origin + mo->velocity * 0.03;
	mo->tracer = actor->target;
}

//==========================================================================
//
//  A_Tracer
//
//  Ravenant missile tracer.
//
//==========================================================================

#define TRACEADJUST	0.2865921825

void A_Tracer(mobj_t * actor)
{
	mobj_t *dest;
	mobj_t *th;
	TVec wishdir;
	TVec currdir;
	TVec delta;
	float adjustlen;

	if (level->tictime & 3)
		return;

	// spawn a puff of smoke behind the rocket      
	SpawnPuff(actor->origin.x, actor->origin.y, actor->origin.z);

	th = P_SpawnMobj(actor->origin.x - actor->velocity.x * frametime,
		actor->origin.y - actor->velocity.y * frametime,
		actor->origin.z - actor->velocity.z * frametime, MT_SMOKE);

	th->velocity.z = 1.0 * 35.0;
	th->time -= Random() * 0.1;
	if (th->time < 0.1)
		th->time = 0.1;

	// adjust direction
	dest = actor->tracer;

	if (!dest || dest->health <= 0)
		return;

	wishdir = Normalize(MobjCenter(dest) - actor->origin);
	currdir = Normalize(actor->velocity);
	delta = wishdir - currdir;
	adjustlen = Length(delta);
	if (adjustlen > TRACEADJUST)
		adjustlen = TRACEADJUST;
	wishdir = currdir + delta * adjustlen;
	actor->velocity = wishdir * actor->speed;
	VectorAngles(&wishdir, &actor->angles);
}

#else

void A_SkelWhoosh(mobj_t * actor)
{
	NotDoom2();
}

void A_SkelFist(mobj_t * actor)
{
	NotDoom2();
}

void A_SkelMissile(mobj_t * actor)
{
	NotDoom2();
}

void A_Tracer(mobj_t * actor)
{
	NotDoom2();
}

#endif

//**************************************************************************
//
//  $Log$
//  Revision 1.7  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.6  2001/10/22 17:23:11  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/31 17:17:23  dj_jl
//  Removed vector macros
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
