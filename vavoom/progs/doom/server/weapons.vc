//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//***************************************************************************
//
//  WEAPON UTILITES
//
//***************************************************************************

//===========================================================================
//
//  SetPsprite
//
//===========================================================================

void SetPsprite(player_t * player, int position, int stnum)
{
	ViewEntity e;
	state_t *state;

	e = player->ViewEnts[position];
	do
	{
		if (!stnum)
		{
			// Object removed itself.
			e.statenum = 0;
			break;
		}
		state = &states[stnum];
		e.time = state->time;	// could be 0
		e.sprite = state->sprite;
		e.frame = state->frame;
		e.model_index = state->model_index;
		e.alias_frame = state->model_frame;
		e.statenum = state->statenum;
		e.nextstate = state->nextstate;
		if (state->misc1)
		{
			// Set coordinates.
			e.sx = state->misc1;
			e.sy = state->misc2;
		}
		if (state->function)
		{
			// Call action routine.
			state->function(e);
			if (!e.statenum)
			{
				break;
			}
		}
		stnum = e.nextstate;
	}
	while (!e.time);	// An initial state of 0 could cycle through.
}

//===========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
// Uses player
//
//===========================================================================

void BringUpWeapon(player_t * player)
{
	if (player->readyweapon == wp_chainsaw)
		StartSoundName(player->mo, 'ChainsawStart', CHAN_WEAPON);

	player->pendingweapon = wp_nochange;
	player->ViewEnts[ps_weapon].sy = WEAPONBOTTOM;

	SetPsprite(player, ps_weapon, player->w_upstate);
}

//==========================================================================
//
//  ChangeWeapon
//
//  The actual changing of the weapon is done when the weapon psprite can
// do it (read: not in the middle of an attack).
//
//==========================================================================

void ChangeWeapon(player_t * player, int newweapon)
{
	if (newweapon == wp_fist && player->weaponowned[wp_chainsaw]
		&& !(player->readyweapon == wp_chainsaw
			&& player->powers[pw_strength]))
	{
		newweapon = wp_chainsaw;
	}

#ifdef DOOM2
	if (newweapon == wp_shotgun && player->weaponowned[wp_supershotgun]
		&& player->readyweapon != wp_supershotgun)
	{
		newweapon = wp_supershotgun;
	}
#endif

#ifdef GRENADE_LAUNCHER
	if (newweapon == wp_missile && player->weaponowned[wp_grenade]
		&& player->readyweapon != wp_grenade)
	{
		newweapon = wp_grenade;
	}
#endif

	if (player->weaponowned[newweapon] && newweapon != player->readyweapon)
	{
#ifdef DOOM2
		player->pendingweapon = newweapon;
#else
		// Do not go to plasma or BFG in shareware, even if cheated.
		if ((newweapon != wp_plasma && newweapon != wp_bfg) || !shareware)
		{
			player->pendingweapon = newweapon;
		}
#endif
	}
}

//===========================================================================
//
//  DropWeapon
//
//  Player died, so put the weapon away.
//
//===========================================================================

void DropWeapon(player_t * player)
{
	SetPsprite(player, ps_weapon, player->w_downstate);
}

//===========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player.
//
//===========================================================================

void SetupPsprites(player_t * player)
{
	int i;

	// remove all psprites
	for (i = 0; i < NUMPSPRITES; i++)
	{
		player->ViewEnts[i].statenum = 0;
	}

	// spawn the gun
	BringUpWeapon(player);
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine.
//
//==========================================================================

void MovePsprites(player_t * player)
{
	int i;
	ViewEntity e;

	for (i = 0; i < NUMPSPRITES; i++)
	{
		e = player->ViewEnts[i];
		// a null state means not active
		if (e.statenum)
		{
			// drop tic count and possibly change state

			// a -1 tic count never changes
			if (e.time != -1.0)
			{
				e.time -= frametime;
				if (e.time <= 0.0)
				{
					e.time = 0.0;
					SetPsprite(player, i, e.nextstate);
				}
			}
		}
	}

	player->ViewEnts[ps_flash].sx = player->ViewEnts[ps_weapon].sx;
	player->ViewEnts[ps_flash].sy = player->ViewEnts[ps_weapon].sy;
}

//==========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough ammo to shoot.
// If not, selects the next weapon to use.
//
//==========================================================================

int CheckAmmo(player_t * player)
{
	int ammo;
	int count;

	ammo = player->w_ammo;

	// Minimal amount for one shot varies.
	if (player->readyweapon == wp_bfg)
		count = BFGCELLS;
#ifdef DOOM2
	else if (player->readyweapon == wp_supershotgun)
		count = 2;	// Double barrel.
#endif
	else
		count = 1;	// Regular.

	// Some do not need ammunition anyway.
	// Return if current ammunition sufficient.
	if (ammo == am_noammo || player->ammo[ammo] >= count)
		return true;

	// Out of ammo, pick a weapon to change to.
	// Preferences are set here.
	do
	{
#ifndef DOOM2
		if (player->weaponowned[wp_plasma]
			&& player->ammo[am_cell] && (!shareware))
#else
		if (player->weaponowned[wp_plasma] && player->ammo[am_cell])
#endif
		{
			player->pendingweapon = wp_plasma;
		}
#ifdef DOOM2
		else if (player->weaponowned[wp_supershotgun]
			&& player->ammo[am_shell] > 2)
		{
			player->pendingweapon = wp_supershotgun;
		}
#endif
		else if (player->weaponowned[wp_chaingun] && player->ammo[am_clip])
		{
			player->pendingweapon = wp_chaingun;
		}
		else if (player->weaponowned[wp_shotgun] && player->ammo[am_shell])
		{
			player->pendingweapon = wp_shotgun;
		}
		else if (player->ammo[am_clip])
		{
			player->pendingweapon = wp_pistol;
		}
		else if (player->weaponowned[wp_chainsaw])
		{
			player->pendingweapon = wp_chainsaw;
		}
		else if (player->weaponowned[wp_missile] && player->ammo[am_misl])
		{
			player->pendingweapon = wp_missile;
		}
#ifdef DOOM2
		else if (player->weaponowned[wp_bfg] && player->ammo[am_cell] > 40)
#else
		else if (player->weaponowned[wp_bfg]
			&& player->ammo[am_cell] > BFGCELLS && (!shareware))
#endif
		{
			player->pendingweapon = wp_bfg;
		}
		else
		{
			// If everything fails.
			player->pendingweapon = wp_fist;
		}
	}
	while (player->pendingweapon == wp_nochange);

	// Now set appropriate weapon overlay.
	SetPsprite(player, ps_weapon, player->w_downstate);

	return false;
}

//===========================================================================
//
//  FireWeapon
//
//===========================================================================

void FireWeapon(player_t * player)
{
	if (!CheckAmmo(player))
	{
		return;
	}

	SetMobjState(player->mo, S_PLAY_ATK1);
	SetPsprite(player, ps_weapon, player->w_atkstate);
	P_NoiseAlert(player->mo, player->mo);
}

//===========================================================================
//
//  GunShot
//
//===========================================================================

void GunShot(mobj_t * mo, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 5 * (P_Random() % 3 + 1);

	LineAttack(mo, &dir, MISSILERANGE, damage);
}

//***************************************************************************
//
//  WEAPON ACTIONS
//
//***************************************************************************

//===========================================================================
//
//  Weapon::A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
// Follows after getting weapon up, or after previous attack/fire sequence.
//
//===========================================================================

void Weapon::A_WeaponReady(void)
{
	float angle;

	// get out of attack state
	if (player->mo->statenum == S_PLAY_ATK1 ||
		player->mo->statenum == S_PLAY_ATK2)
	{
		SetMobjState(player->mo, S_PLAY);
	}

	if (player->readyweapon == wp_chainsaw && statenum == S_SAW)
	{
		StartSoundName(player->mo, 'ChainsawIdle', CHAN_WEAPON);
	}

	// check for change
	//  if player is dead, put the weapon away
	if (player->pendingweapon != wp_nochange || !player->health)
	{
		// change weapon
		//  (pending weapon should allready be validated)
		SetPsprite(player, ps_weapon, player->w_downstate);
		return;
	}

	// check for fire
	//  the missile launcher and bfg do not auto fire
	if (player->buttons & BT_ATTACK)
	{
		if (!player->attackdown
			|| (player->readyweapon != wp_missile
			&& player->readyweapon != wp_bfg))
		{
			player->attackdown = true;
			FireWeapon(player);
			return;
		}
	}
	else
		player->attackdown = false;

	// bob the weapon based on movement speed
	angle = AngleMod360(180.0 * level->time);
	sx = 1.0 + player->bob * cos(angle);
	if (angle >= 180.0)
	{
		angle -= 180.0;
	}
	sy = WEAPONTOP + player->bob * sin(angle);
}

//===========================================================================
//
//  Weapon::A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//===========================================================================

void Weapon::A_Lower(void)
{
	sy += LOWERSPEED;

	// Is already down.
	if (sy < WEAPONBOTTOM)
		return;

	// Player is dead.
	if (player->playerstate == PST_DEAD)
	{
		sy = WEAPONBOTTOM;

		// don't bring weapon back up
		return;
	}

	// The old weapon has been lowered off the screen,
	// so change the weapon and start raising it
	if (!player->health)
	{
		// Player is dead, so keep the weapon off screen.
		SetPsprite(player, ps_weapon, S_NULL);
		return;
	}

	player->readyweapon = player->pendingweapon;
	weaponinfo[player->readyweapon] (player);

	BringUpWeapon(player);
}

//===========================================================================
//
//  Weapon::A_Raise
//
//===========================================================================

void Weapon::A_Raise(void)
{
	sy -= RAISESPEED;

	if (sy > WEAPONTOP)
	{
		return;
	}

	sy = WEAPONTOP;

	// The weapon has been raised all the way,
	//  so change to the ready state.
	SetPsprite(player, ps_weapon, player->w_readystate);
}

//===========================================================================
//
//  Weapon::A_ReFire
//
//  The player can re-fire the weapon without lowering it entirely.
//
//===========================================================================

void Weapon::A_ReFire(void)
{
	// check for fire
	//  (if a weaponchange is pending, let it go through instead)
	if ((player->buttons & BT_ATTACK)
		&& player->pendingweapon == wp_nochange && player->health)
	{
		player->refire++;
		FireWeapon(player);
	}
	else
	{
		player->refire = 0;
		CheckAmmo(player);
	}
}

//===========================================================================
//
//  Weapon::A_CheckReload
//
//===========================================================================

void Weapon::A_CheckReload(void)
{
	CheckAmmo(player);
}

//===========================================================================
//
//  Weapon::A_GunFlash
//
//===========================================================================

void Weapon::A_GunFlash(void)
{
	SetMobjState(player->mo, S_PLAY_ATK2);
	SetPsprite(player, ps_flash, player->w_flashstate);
}

//===========================================================================
//
//  Weapon::A_Light0
//
//===========================================================================

void Weapon::A_Light0(void)
{
	player->extralight = 0;
	player->mo->Effects &= ~EF_DLIGHT_MASK;
}

//===========================================================================
//
//  Weapon::A_Light1
//
//===========================================================================

void Weapon::A_Light1(void)
{
	player->extralight = 1;
}

//===========================================================================
//
//  Weapon::A_Light2
//
//===========================================================================

void Weapon::A_Light2(void)
{
	player->extralight = 2;
}

//***************************************************************************
//
//  WEAPON ATTACKS
//
//***************************************************************************

//===========================================================================
//
//  Weapon::A_Punch
//
//===========================================================================

void Weapon::A_Punch(void)
{
	int damage;
	TAVec aimAngles;
	TVec dir;

	damage = (P_Random() % 10 + 1) << 1;

	if (player->powers[pw_strength])
		damage *= 10;

	aimAngles = player->mo->angles;
	aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
		Random()) * 45.0 / 8.0);
	dir = AimLineAttack(player->mo, aimAngles, MELEERANGE);
	LineAttack(player->mo, &dir, MELEERANGE, damage);

	// turn to face target
	if (linetarget)
	{
		StartSoundName(player->mo, 'Punch', CHAN_WEAPON);
		player->mo->angles.yaw = atan2(
			linetarget->origin.y - player->mo->origin.y,
			linetarget->origin.x - player->mo->origin.x);
		player->fixangle = 1;
	}
}

//===========================================================================
//
//  Weapon::A_Saw
//
//===========================================================================

void Weapon::A_Saw(void)
{
	float angle;
	int damage;
	TAVec aimAng;
	TVec dir;

	damage = 2 * (P_Random() % 10 + 1);
	aimAng = player->mo->angles;
	aimAng.yaw = AngleMod360(aimAng.yaw + (Random() -
		Random()) * 45.0 / 8.0);

	// use meleerange + 1 se the puff doesn't skip the flash
	dir = AimLineAttack(player->mo, aimAng, MELEERANGE + 0.00001);
	LineAttack(player->mo, &dir, MELEERANGE + 0.00001, damage);

	if (!linetarget)
	{
		StartSoundName(player->mo, 'ChainsawTriggered', CHAN_WEAPON);
		return;
	}
	StartSoundName(player->mo, 'ChainsawHit', CHAN_WEAPON);

	// turn to face target
	angle = atan2(linetarget->origin.y - player->mo->origin.y,
		linetarget->origin.x - player->mo->origin.x);
	if (AngleMod360(angle - player->mo->angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - player->mo->angles.yaw) < -90.0 / 20.0)
			player->mo->angles.yaw = angle + 90.0 / 21.0;
		else
			player->mo->angles.yaw = player->mo->angles.yaw - 90.0 / 20.0;
	}
	else
	{
		if (AngleMod360(angle - player->mo->angles.yaw) > 90.0 / 20.0)
			player->mo->angles.yaw = angle - 90.0 / 21.0;
		else
			player->mo->angles.yaw += 90.0 / 20.0;
	}
	player->mo->angles.yaw = AngleMod360(player->mo->angles.yaw);
	player->mo->Flags |= MF_JUSTATTACKED;
	player->fixangle = 1;
}

//===========================================================================
//
//  Weapon::A_FirePistol
//
//===========================================================================

void Weapon::A_FirePistol(void)
{
	TVec dir;

	StartSoundName(player->mo, 'PistolFire', CHAN_WEAPON);

	SetMobjState(player->mo, S_PLAY_ATK2);
	player->ammo[player->w_ammo]--;

	SetPsprite(player, ps_flash, player->w_flashstate);

	dir = Aim(player->mo, 16.0 * 64.0);
	GunShot(player->mo, !player->refire, dir);
	player->mo->Effects |= EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  Weapon::A_FireShotgun
//
//===========================================================================

void Weapon::A_FireShotgun(void)
{
	int i;
	TVec dir;

	StartSoundName(player->mo, 'ShotgunFire', CHAN_WEAPON);
	SetMobjState(player->mo, S_PLAY_ATK2);

	player->ammo[player->w_ammo]--;

	SetPsprite(player, ps_flash, player->w_flashstate);

	dir = Aim(player->mo, 16.0 * 64.0);
	for (i = 0; i < 7; i++)
	{
		GunShot(player->mo, false, dir);
	}
	player->mo->Effects |= EF_DL_MUZZLEFLASH;
}

#ifdef DOOM2

//===========================================================================
//
//  Weapon::A_FireShotgun2
//
//===========================================================================

void Weapon::A_FireShotgun2(void)
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	StartSoundName(player->mo, 'SuperShotgunFire', CHAN_WEAPON);
	SetMobjState(player->mo, S_PLAY_ATK2);

	player->ammo[player->w_ammo] -= 2;

	SetPsprite(player, ps_flash, player->w_flashstate);

	aimDir = Aim(player->mo, 16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		LineAttack(player->mo, &dir, MISSILERANGE, damage);
	}
	player->mo->Effects |= EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  Weapon::A_OpenShotgun2
//
//===========================================================================

void Weapon::A_OpenShotgun2(void)
{
	StartSoundName(player->mo, 'SuperShotgunOpen', CHAN_WEAPON);
}

//===========================================================================
//
//  Weapon::A_LoadShotgun2
//
//===========================================================================

void Weapon::A_LoadShotgun2(void)
{
	StartSoundName(player->mo, 'SuperShotgunLoad', CHAN_WEAPON);
}

//===========================================================================
//
//  Weapon::A_CloseShotgun2
//
//===========================================================================

void Weapon::A_CloseShotgun2(void)
{
	StartSoundName(player->mo, 'SuperShotgunClose', CHAN_WEAPON);
	A_ReFire();
}

#else

void Weapon::A_FireShotgun2(void)
{
	NotDoom2();
}

void Weapon::A_OpenShotgun2(void)
{
	NotDoom2();
}

void Weapon::A_LoadShotgun2(void)
{
	NotDoom2();
}

void Weapon::A_CloseShotgun2(void)
{
	NotDoom2();
}

#endif

//===========================================================================
//
//  Weapon::A_FireCGun
//
//===========================================================================

void Weapon::A_FireCGun(void)
{
	TVec dir;

	StartSoundName(player->mo, 'PistolFire', CHAN_WEAPON);

	if (!player->ammo[player->w_ammo])
		return;

	SetMobjState(player->mo, S_PLAY_ATK2);
	player->ammo[player->w_ammo]--;

	SetPsprite(player, ps_flash, player->w_flashstate + statenum - S_CHAIN1);

	dir = Aim(player->mo, 16.0 * 64.0);
	GunShot(player->mo, !player->refire, dir);
	player->mo->Effects |= EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  Weapon::A_FireMissile
//
//===========================================================================

void Weapon::A_FireMissile(void)
{
	player->ammo[player->w_ammo]--;
	SpawnPlayerMissile(player->mo, Rocket);
}

//===========================================================================
//
//  Weapon::A_FireGrenade
//
//===========================================================================

#ifdef GRENADE_LAUNCHER
void Weapon::A_FireGrenade(void)
{
	mobj_t *mo;

	player->ammo[player->w_ammo]--;

	mo = P_SpawnMobj(player->mo->origin.x, player->mo->origin.y,
		player->mo->origin.z + 32.0, missile_grenade);

	if (mo->sound_sight)
		StartSound(mo, mo->sound_sight, CHAN_VOICE);

	mo->target = player->mo;

	//  See which target is to be aimed at
	if (player->mo->angles.pitch)
	{
		TVec v_forward;
		TVec v_right;
		TVec v_up;

		AngleVectors(&player->mo->angles, &v_forward, &v_right, &v_up);
		mo->velocity = v_forward * mo->speed + v_up * mo->speed / 3.0 +
			((Random() - 0.5) * 20.0) * v_right +
			((Random() - 0.5) * 20.0) * v_up;
	}
	else
	{
		mo->velocity = Aim(player->mo, 16.0 * 64.0) * mo->speed;
		mo->velocity.z = mo->speed / 3.0;
	}
	VectorAngles(&mo->velocity, &mo->angles);

	CheckMissileSpawn(mo);
}
#endif

//===========================================================================
//
//  Weapon::A_FirePlasma
//
//===========================================================================

void Weapon::A_FirePlasma(void)
{
	player->ammo[player->w_ammo]--;

	SetPsprite(player, ps_flash, player->w_flashstate + (P_Random() & 1));

	SpawnPlayerMissile(player->mo, PlasmaShot);
}

//===========================================================================
//
//  Weapon::A_BFGsound
//
//===========================================================================

void Weapon::A_BFGsound(void)
{
	StartSoundName(player->mo, 'BFGFire', CHAN_WEAPON);
}

//===========================================================================
//
//  Weapon::A_FireBFG
//
//===========================================================================

void Weapon::A_FireBFG(void)
{
	player->ammo[player->w_ammo] -= BFGCELLS;
	SpawnPlayerMissile(player->mo, BFGShot);
}

//===========================================================================
//
//  Actor::A_BFGSpray
//
//  Spawn a BFG explosion on every monster in view
//
//===========================================================================

void Actor::A_BFGSpray(void)
{
	int i;
	int j;
	int damage;
	TAVec aimAng;
	mobj_t *emo;

	// offset angles from its attack angle
	for (i = 0; i < 40; i++)
	{
		aimAng = angles;
		aimAng.yaw = AngleMod360(aimAng.yaw - 45.0 + 90.0 / 40.0 * itof(i));

		// target is the originator (player)
		//  of the missile
		AimLineAttack(target, aimAng, 16.0 * 64.0);
		if (!linetarget)
		{
			continue;
		}

		emo = P_SpawnMobj(linetarget->origin.x, linetarget->origin.y,
			linetarget->origin.z + linetarget->Height / 4.0, ExtraBFG);

		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion2);
		MSG_WriteByte(EF_DL_GBALL);
		MSG_WriteShort(ftoi(emo->origin.x));
		MSG_WriteShort(ftoi(emo->origin.y));
		MSG_WriteShort(ftoi(emo->origin.z));

		damage = 0;
		for (j = 0; j < 15; j++)
			damage += (P_Random() & 7) + 1;

		linetarget->Damage(target, target, damage);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.13  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.10  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.9  2001/12/01 18:14:08  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.8  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/10/02 17:42:37  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
