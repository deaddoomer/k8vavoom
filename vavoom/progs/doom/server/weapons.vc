//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//***************************************************************************
//
//  WEAPON UTILITES
//
//***************************************************************************

//==========================================================================
//
//	SetWeapon
//
//==========================================================================

void SetWeapon(player_t * player, int NewWeapon)
{
	player->ReadyWeapon = NewWeapon;
	player->PendingWeapon = wp_nochange;
	if (player->ViewEnts[ps_weapon])
	{
		player->ViewEnts[ps_weapon].Destroy();
	}
	player->ViewEnts[ps_weapon] = SpawnObject(WeaponClasses[NewWeapon], none);
	player->ViewEnts[ps_weapon].Player = player;
	player->WeaponModel =
		FindModel(Weapon(player->ViewEnts[ps_weapon]).ThirdPersonModel);
}

//===========================================================================
//
//  SetPsprite
//
//===========================================================================

void SetPsprite(player_t * player, int position, int stnum)
{
	player->ViewEnts[position].SetState(stnum);
}

//===========================================================================
//
//  BringUpWeapon
//
//  Starts bringing the pending weapon up from the bottom of the screen.
// Uses player
//
//===========================================================================

void BringUpWeapon(player_t * player)
{
	if (player->ReadyWeapon == wp_chainsaw)
		player->mo->PlaySound('ChainsawStart', CHAN_WEAPON);

	player->PendingWeapon = wp_nochange;
	player->ViewEnts[ps_weapon].SY = WEAPONBOTTOM;

	SetPsprite(player, ps_weapon, Weapon(player->ViewEnts[ps_weapon]).UpState);
}

//==========================================================================
//
//  ChangeWeapon
//
//  The actual changing of the weapon is done when the weapon psprite can
// do it (read: not in the middle of an attack).
//
//==========================================================================

void ChangeWeapon(player_t * player, int newweapon)
{
	if (newweapon == wp_fist && player->WeaponOwned[wp_chainsaw]
		&& !(player->ReadyWeapon == wp_chainsaw
			&& player->Powers[pw_strength]))
	{
		newweapon = wp_chainsaw;
	}

#ifdef DOOM2
	if (newweapon == wp_shotgun && player->WeaponOwned[wp_supershotgun]
		&& player->ReadyWeapon != wp_supershotgun)
	{
		newweapon = wp_supershotgun;
	}
#endif

#ifdef GRENADE_LAUNCHER
	if (newweapon == wp_missile && player->WeaponOwned[wp_grenade]
		&& player->ReadyWeapon != wp_grenade)
	{
		newweapon = wp_grenade;
	}
#endif

	if (player->WeaponOwned[newweapon] && newweapon != player->ReadyWeapon)
	{
#ifdef DOOM2
		player->PendingWeapon = newweapon;
#else
		// Do not go to plasma or BFG in shareware, even if cheated.
		if ((newweapon != wp_plasma && newweapon != wp_bfg) || !shareware)
		{
			player->PendingWeapon = newweapon;
		}
#endif
	}
}

//===========================================================================
//
//  DropWeapon
//
//  Player died, so put the weapon away.
//
//===========================================================================

void DropWeapon(player_t * player)
{
	SetPsprite(player, ps_weapon, Weapon(player->ViewEnts[ps_weapon]).DownState);
}

//===========================================================================
//
//  SetupPsprites
//
//  Called at start of level for each player.
//
//===========================================================================

void SetupPsprites(player_t * player)
{
	int i;

	// remove all psprites
	for (i = 0; i < NUMPSPRITES; i++)
	{
		player->ViewEnts[i].StateNum = 0;
	}

	// spawn the gun
	BringUpWeapon(player);
}

//==========================================================================
//
//  MovePsprites
//
//  Called every tic by player thinking routine.
//
//==========================================================================

void MovePsprites(player_t * player)
{
	int i;
	ViewEntity e;

	for (i = 0; i < NUMPSPRITES; i++)
	{
		e = player->ViewEnts[i];
		// a null state means not active
		if (e.StateNum)
		{
			// drop tic count and possibly change state

			// a -1 tic count never changes
			if (e.StateTime != -1.0)
			{
				e.StateTime -= frametime;
				if (e.StateTime <= 0.0)
				{
					e.StateTime = 0.0;
					SetPsprite(player, i, e.NextState);
				}
			}
		}
	}

	player->ViewEnts[ps_flash].SX = player->ViewEnts[ps_weapon].SX;
	player->ViewEnts[ps_flash].SY = player->ViewEnts[ps_weapon].SY;
}

//==========================================================================
//
//  CheckAmmo
//
//  Returns true if there is enough ammo to shoot.
// If not, selects the next weapon to use.
//
//==========================================================================

int CheckAmmo(player_t * player)
{
	int ammo;
	int count;

	ammo = Weapon(player->ViewEnts[ps_weapon]).Ammo;

	// Minimal amount for one shot varies.
	if (player->ReadyWeapon == wp_bfg)
		count = BFGCELLS;
#ifdef DOOM2
	else if (player->ReadyWeapon == wp_supershotgun)
		count = 2;	// Double barrel.
#endif
	else
		count = 1;	// Regular.

	// Some do not need ammunition anyway.
	// Return if current ammunition sufficient.
	if (ammo == am_noammo || player->Ammo[ammo] >= count)
		return true;

	// Out of ammo, pick a weapon to change to.
	// Preferences are set here.
	do
	{
#ifndef DOOM2
		if (player->WeaponOwned[wp_plasma]
			&& player->Ammo[am_cell] && (!shareware))
#else
		if (player->WeaponOwned[wp_plasma] && player->Ammo[am_cell])
#endif
		{
			player->PendingWeapon = wp_plasma;
		}
#ifdef DOOM2
		else if (player->WeaponOwned[wp_supershotgun]
			&& player->Ammo[am_shell] > 2)
		{
			player->PendingWeapon = wp_supershotgun;
		}
#endif
		else if (player->WeaponOwned[wp_chaingun] && player->Ammo[am_clip])
		{
			player->PendingWeapon = wp_chaingun;
		}
		else if (player->WeaponOwned[wp_shotgun] && player->Ammo[am_shell])
		{
			player->PendingWeapon = wp_shotgun;
		}
		else if (player->Ammo[am_clip])
		{
			player->PendingWeapon = wp_pistol;
		}
		else if (player->WeaponOwned[wp_chainsaw])
		{
			player->PendingWeapon = wp_chainsaw;
		}
		else if (player->WeaponOwned[wp_missile] && player->Ammo[am_misl])
		{
			player->PendingWeapon = wp_missile;
		}
#ifdef DOOM2
		else if (player->WeaponOwned[wp_bfg] && player->Ammo[am_cell] > 40)
#else
		else if (player->WeaponOwned[wp_bfg]
			&& player->Ammo[am_cell] > BFGCELLS && (!shareware))
#endif
		{
			player->PendingWeapon = wp_bfg;
		}
		else
		{
			// If everything fails.
			player->PendingWeapon = wp_fist;
		}
	}
	while (player->PendingWeapon == wp_nochange);

	// Now set appropriate weapon overlay.
	SetPsprite(player, ps_weapon, Weapon(player->ViewEnts[ps_weapon]).DownState);

	return false;
}

//===========================================================================
//
//  FireWeapon
//
//===========================================================================

void FireWeapon(player_t * player)
{
	if (!CheckAmmo(player))
	{
		return;
	}

	player->mo->SetState(S_PLAY_ATK1);
	SetPsprite(player, ps_weapon, Weapon(player->ViewEnts[ps_weapon]).AttackState);
	P_NoiseAlert(*player->mo, *player->mo);
}

//===========================================================================
//
//  GunShot
//
//===========================================================================

void GunShot(Actor A, int accurate, TVec dir)
{
	int damage;

	//  Make a copy of angles because inacurate shoot will modify them
	if (!accurate)
	{
		TAVec angles;

		VectorAngles(&dir, &angles);
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		AngleVector(&angles, &dir);
	}

	damage = 5 * (P_Random() % 3 + 1);

	LineAttack(A, dir, MISSILERANGE, damage);
}

//***************************************************************************
//
//  WEAPON ACTIONS
//
//***************************************************************************

//===========================================================================
//
//  Weapon::A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
// Follows after getting weapon up, or after previous attack/fire sequence.
//
//===========================================================================

void Weapon::A_WeaponReady(void)
{
	float angle;

	// get out of attack state
	if (Player->mo->StateNum == S_PLAY_ATK1 ||
		Player->mo->StateNum == S_PLAY_ATK2)
	{
		Player->mo->SetState(S_PLAY);
	}

	if (Player->ReadyWeapon == wp_chainsaw && StateNum == S_SAW)
	{
		Player->mo->PlaySound('ChainsawIdle', CHAN_WEAPON);
	}

	// check for change
	//  if player is dead, put the weapon away
	if (Player->PendingWeapon != wp_nochange || !Player->Health)
	{
		// change weapon
		//  (pending weapon should allready be validated)
		SetPsprite(Player, ps_weapon, DownState);
		return;
	}

	// check for fire
	//  the missile launcher and bfg do not auto fire
	if (Player->Buttons & BT_ATTACK)
	{
		if (!Player->bAttackDown
			|| (Player->ReadyWeapon != wp_missile
			&& Player->ReadyWeapon != wp_bfg))
		{
			Player->bAttackDown = true;
			FireWeapon(Player);
			return;
		}
	}
	else
		Player->bAttackDown = false;

	// bob the weapon based on movement speed
	angle = AngleMod360(180.0 * level->time);
	SX = 1.0 + Player->Bob * cos(angle);
	if (angle >= 180.0)
	{
		angle -= 180.0;
	}
	SY = WEAPONTOP + Player->Bob * sin(angle);
}

//===========================================================================
//
//  Weapon::A_Lower
//
//  Lowers current weapon, and changes weapon at bottom.
//
//===========================================================================

void Weapon::A_Lower(void)
{
	SY += LOWERSPEED;

	// Is already down.
	if (SY < WEAPONBOTTOM)
		return;

	// Player is dead.
	if (Player->PlayerState == PST_DEAD)
	{
		SY = WEAPONBOTTOM;

		// don't bring weapon back up
		return;
	}

	// The old weapon has been lowered off the screen,
	// so change the weapon and start raising it
	if (!Player->Health)
	{
		// Player is dead, so keep the weapon off screen.
		SetPsprite(Player, ps_weapon, S_NULL);
		return;
	}

	SetWeapon(Player, Player->PendingWeapon);

	BringUpWeapon(Player);
}

//===========================================================================
//
//  Weapon::A_Raise
//
//===========================================================================

void Weapon::A_Raise(void)
{
	SY -= RAISESPEED;

	if (SY > WEAPONTOP)
	{
		return;
	}

	SY = WEAPONTOP;

	// The weapon has been raised all the way,
	//  so change to the ready state.
	SetPsprite(Player, ps_weapon, ReadyState);
}

//===========================================================================
//
//  Weapon::A_ReFire
//
//  The player can re-fire the weapon without lowering it entirely.
//
//===========================================================================

void Weapon::A_ReFire(void)
{
	// check for fire
	//  (if a weaponchange is pending, let it go through instead)
	if ((Player->Buttons & BT_ATTACK)
		&& Player->PendingWeapon == wp_nochange && Player->Health)
	{
		Player->Refire++;
		FireWeapon(Player);
	}
	else
	{
		Player->Refire = 0;
		CheckAmmo(Player);
	}
}

//===========================================================================
//
//  Weapon::A_CheckReload
//
//===========================================================================

void Weapon::A_CheckReload(void)
{
	CheckAmmo(Player);
}

//===========================================================================
//
//  Weapon::A_GunFlash
//
//===========================================================================

void Weapon::A_GunFlash(void)
{
	Player->mo->SetState(S_PLAY_ATK2);
	SetPsprite(Player, ps_flash, FlashState);
}

//===========================================================================
//
//  Weapon::A_Light0
//
//===========================================================================

void Weapon::A_Light0(void)
{
	Player->ExtraLight = 0;
	Player->mo->Effects &= ~EF_DLIGHT_MASK;
}

//===========================================================================
//
//  Weapon::A_Light1
//
//===========================================================================

void Weapon::A_Light1(void)
{
	Player->ExtraLight = 1;
}

//===========================================================================
//
//  Weapon::A_Light2
//
//===========================================================================

void Weapon::A_Light2(void)
{
	Player->ExtraLight = 2;
}

//***************************************************************************
//
//  WEAPON ATTACKS
//
//***************************************************************************

//===========================================================================
//
//  Weapon::A_Punch
//
//===========================================================================

void Weapon::A_Punch(void)
{
	int damage;
	TAVec aimAngles;
	TVec dir;

	damage = (P_Random() % 10 + 1) << 1;

	if (Player->Powers[pw_strength])
		damage *= 10;

	aimAngles = Player->mo->Angles;
	aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
		Random()) * 45.0 / 8.0);
	dir = AimLineAttack(*Player->mo, aimAngles, MELEERANGE);
	LineAttack(*Player->mo, dir, MELEERANGE, damage);

	// turn to face target
	if (linetarget)
	{
		Player->mo->PlaySound('Punch', CHAN_WEAPON);
		Player->mo->Angles.yaw = atan2(
			linetarget.Origin.y - Player->mo->Origin.y,
			linetarget.Origin.x - Player->mo->Origin.x);
		Player->bFixAngle = true;
	}
}

//===========================================================================
//
//  Weapon::A_Saw
//
//===========================================================================

void Weapon::A_Saw(void)
{
	float angle;
	int damage;
	TAVec aimAng;
	TVec dir;

	damage = 2 * (P_Random() % 10 + 1);
	aimAng = Player->mo->Angles;
	aimAng.yaw = AngleMod360(aimAng.yaw + (Random() -
		Random()) * 45.0 / 8.0);

	// use meleerange + 1 se the puff doesn't skip the flash
	dir = AimLineAttack(*Player->mo, aimAng, MELEERANGE + 0.00001);
	LineAttack(*Player->mo, dir, MELEERANGE + 0.00001, damage);

	if (!linetarget)
	{
		Player->mo->PlaySound('ChainsawTriggered', CHAN_WEAPON);
		return;
	}
	Player->mo->PlaySound('ChainsawHit', CHAN_WEAPON);

	// turn to face target
	angle = atan2(linetarget.Origin.y - Player->mo->Origin.y,
		linetarget.Origin.x - Player->mo->Origin.x);
	if (AngleMod360(angle - Player->mo->Angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - Player->mo->Angles.yaw) < -90.0 / 20.0)
			Player->mo->Angles.yaw = angle + 90.0 / 21.0;
		else
			Player->mo->Angles.yaw = Player->mo->Angles.yaw - 90.0 / 20.0;
	}
	else
	{
		if (AngleMod360(angle - Player->mo->Angles.yaw) > 90.0 / 20.0)
			Player->mo->Angles.yaw = angle - 90.0 / 21.0;
		else
			Player->mo->Angles.yaw += 90.0 / 20.0;
	}
	Player->mo->Angles.yaw = AngleMod360(Player->mo->Angles.yaw);
	Player->mo->bJustAttacked = true;
	Player->bFixAngle = true;
}

//===========================================================================
//
//  Weapon::A_FirePistol
//
//===========================================================================

void Weapon::A_FirePistol(void)
{
	TVec dir;

	Player->mo->PlaySound('PistolFire', CHAN_WEAPON);

	Player->mo->SetState(S_PLAY_ATK2);
	Player->Ammo[Ammo]--;

	SetPsprite(Player, ps_flash, FlashState);

	dir = Aim(*Player->mo, 16.0 * 64.0);
	GunShot(*Player->mo, !Player->Refire, dir);
	Player->mo->Effects |= EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  Weapon::A_FireShotgun
//
//===========================================================================

void Weapon::A_FireShotgun(void)
{
	int i;
	TVec dir;

	Player->mo->PlaySound('ShotgunFire', CHAN_WEAPON);
	Player->mo->SetState(S_PLAY_ATK2);

	Player->Ammo[Ammo]--;

	SetPsprite(Player, ps_flash, FlashState);

	dir = Aim(*Player->mo, 16.0 * 64.0);
	for (i = 0; i < 7; i++)
	{
		GunShot(*Player->mo, false, dir);
	}
	Player->mo->Effects |= EF_DL_MUZZLEFLASH;
}

#ifdef DOOM2

//===========================================================================
//
//  Weapon::A_FireShotgun2
//
//===========================================================================

void Weapon::A_FireShotgun2(void)
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	Player->mo->PlaySound('SuperShotgunFire', CHAN_WEAPON);
	Player->mo->SetState(S_PLAY_ATK2);

	Player->Ammo[Ammo] -= 2;

	SetPsprite(Player, ps_flash, FlashState);

	aimDir = Aim(*Player->mo, 16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		LineAttack(*Player->mo, dir, MISSILERANGE, damage);
	}
	Player->mo->Effects |= EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  Weapon::A_OpenShotgun2
//
//===========================================================================

void Weapon::A_OpenShotgun2(void)
{
	Player->mo->PlaySound('SuperShotgunOpen', CHAN_WEAPON);
}

//===========================================================================
//
//  Weapon::A_LoadShotgun2
//
//===========================================================================

void Weapon::A_LoadShotgun2(void)
{
	Player->mo->PlaySound('SuperShotgunLoad', CHAN_WEAPON);
}

//===========================================================================
//
//  Weapon::A_CloseShotgun2
//
//===========================================================================

void Weapon::A_CloseShotgun2(void)
{
	Player->mo->PlaySound('SuperShotgunClose', CHAN_WEAPON);
	A_ReFire();
}

#else

void Weapon::A_FireShotgun2(void)
{
	NotDoom2();
}

void Weapon::A_OpenShotgun2(void)
{
	NotDoom2();
}

void Weapon::A_LoadShotgun2(void)
{
	NotDoom2();
}

void Weapon::A_CloseShotgun2(void)
{
	NotDoom2();
}

#endif

//===========================================================================
//
//  Weapon::A_FireCGun
//
//===========================================================================

void Weapon::A_FireCGun(void)
{
	TVec dir;

	Player->mo->PlaySound('PistolFire', CHAN_WEAPON);

	if (!Player->Ammo[Ammo])
		return;

	Player->mo->SetState(S_PLAY_ATK2);
	Player->Ammo[Ammo]--;

	SetPsprite(Player, ps_flash, FlashState + StateNum - S_CHAIN1);

	dir = Aim(*Player->mo, 16.0 * 64.0);
	GunShot(*Player->mo, !Player->Refire, dir);
	Player->mo->Effects |= EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  Weapon::A_FireMissile
//
//===========================================================================

void Weapon::A_FireMissile(void)
{
	Player->Ammo[Ammo]--;
	PlayerPawn(*Player->mo).SpawnPlayerMissile(Rocket);
}

//===========================================================================
//
//  Weapon::A_FirePlasma
//
//===========================================================================

void Weapon::A_FirePlasma(void)
{
	Player->Ammo[Ammo]--;

	SetPsprite(Player, ps_flash, FlashState + (P_Random() & 1));

	PlayerPawn(*Player->mo).SpawnPlayerMissile(PlasmaShot);
}

//===========================================================================
//
//  Weapon::A_BFGsound
//
//===========================================================================

void Weapon::A_BFGsound(void)
{
	Player->mo->PlaySound('BFGFire', CHAN_WEAPON);
}

//===========================================================================
//
//  Weapon::A_FireBFG
//
//===========================================================================

void Weapon::A_FireBFG(void)
{
	Player->Ammo[Ammo] -= BFGCELLS;
	PlayerPawn(*Player->mo).SpawnPlayerMissile(BFGShot);
}

//===========================================================================
//
//  Actor::A_BFGSpray
//
//  Spawn a BFG explosion on every monster in view
//
//===========================================================================

void Actor::A_BFGSpray(void)
{
	int i;
	int j;
	int damage;
	TAVec aimAng;
	Actor emo;

	// offset angles from its attack angle
	for (i = 0; i < 40; i++)
	{
		aimAng = Angles;
		aimAng.yaw = AngleMod360(aimAng.yaw - 45.0 + 90.0 / 40.0 * itof(i));

		// target is the originator (player)
		//  of the missile
		AimLineAttack(Instigator, aimAng, 16.0 * 64.0);
		if (!linetarget)
		{
			continue;
		}

		emo = Spawn(ExtraBFG, linetarget.Origin +
			vector(0.0, 0.0, linetarget.Height / 4.0));

		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion2);
		MSG_WriteByte(EF_DL_GBALL);
		MSG_WriteShort(ftoi(emo.Origin.x));
		MSG_WriteShort(ftoi(emo.Origin.y));
		MSG_WriteShort(ftoi(emo.Origin.z));

		damage = 0;
		for (j = 0; j < 15; j++)
			damage += (P_Random() & 7) + 1;

		linetarget.Damage(Instigator, Instigator, damage);
	}
}

//**************************************************************************
//
//  $Log$
//  Revision 1.23  2002/03/20 19:07:44  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.22  2002/03/16 17:44:02  dj_jl
//  Added PlayerPawn class, added function Spawn, beautification.
//
//  Revision 1.21  2002/03/02 17:35:55  dj_jl
//  Weapon classes
//
//  Revision 1.20  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.19  2002/02/22 18:00:14  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.18  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.17  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.15  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.13  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.10  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.9  2001/12/01 18:14:08  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.8  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/10/02 17:42:37  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
