//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	WeaponFist
//
//**************************************************************************

class WeaponFist:Weapon
{

//===========================================================================
//
//  A_Punch
//
//===========================================================================

void A_Punch(void)
{
	int damage;
	TAVec aimAngles;
	TVec dir;

	damage = (P_Random() % 10 + 1) << 1;

	if (Player->Powers[pw_strength])
		damage *= 10;

	aimAngles = Player->MO.Angles;
	aimAngles.yaw = AngleMod360(aimAngles.yaw + (Random() -
		Random()) * 45.0 / 8.0);
	dir = AimLineAttack(Player->MO, aimAngles, MELEERANGE);
	LineAttack(Player->MO, dir, MELEERANGE, damage);

	// turn to face target
	if (linetarget)
	{
		Player->MO.PlaySound('Punch', CHAN_WEAPON);
		Player->MO.Angles.yaw = atan2(
			linetarget.Origin.y - Player->MO.Origin.y,
			linetarget.Origin.x - Player->MO.Origin.x);
		Player->bFixAngle = true;
	}
}

__states__
{
	S_PUNCH('PUNG', 0, 'weapons/v_fists.md2', 0, 1.0 / 35.0, S_PUNCH) { A_WeaponReady(); }
	S_PUNCHDOWN('PUNG', 0, 'weapons/v_fists.md2', 1, 1.0 / 35.0, S_PUNCHDOWN) { A_Lower(); }
	S_PUNCHUP('PUNG', 0, 'weapons/v_fists.md2', 2, 1.0 / 35.0, S_PUNCHUP) { A_Raise(); }
	S_PUNCH1('PUNG', 1, 'weapons/v_fists.md2', 3, 4.0 / 35.0, S_PUNCH2) { }
	S_PUNCH2('PUNG', 2, 'weapons/v_fists.md2', 4, 4.0 / 35.0, S_PUNCH3) { A_Punch(); }
	S_PUNCH3('PUNG', 3, 'weapons/v_fists.md2', 5, 5.0 / 35.0, S_PUNCH4) { }
	S_PUNCH4('PUNG', 2, 'weapons/v_fists.md2', 6, 4.0 / 35.0, S_PUNCH5) { }
	S_PUNCH5('PUNG', 1, 'weapons/v_fists.md2', 7, 5.0 / 35.0, S_PUNCH) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_noammo;
	UpState = S_PUNCHUP;
	DownState = S_PUNCHDOWN;
	ReadyState = S_PUNCH;
	AttackState = S_PUNCH1;
}

}

//**************************************************************************
//
//	WeaponPistol
//
//**************************************************************************

class WeaponPistol:Weapon
{

//===========================================================================
//
//  A_FirePistol
//
//===========================================================================

void A_FirePistol(void)
{
	TVec dir;

	Player->MO.PlaySound('PistolFire', CHAN_WEAPON);

	Player->MO.SetState(Player->MO.MissileState);
	Player->Ammo[Ammo]--;

	SetPsprite(Player, ps_flash, FlashState);

	dir = Aim(Player->MO, 16.0 * 64.0);
	GunShot(Player->MO, !Player->Refire, dir);
	Player->MO.Effects |= EF_DL_MUZZLEFLASH;
}

__states__
{
	S_PISTOL('PISG', 0, 'weapons/v_pistol.md2', 0, 1.0 / 35.0, S_PISTOL) { A_WeaponReady(); }
	S_PISTOLDOWN('PISG', 0, 'weapons/v_pistol.md2', 1, 1.0 / 35.0, S_PISTOLDOWN) { A_Lower(); }
	S_PISTOLUP('PISG', 0, 'weapons/v_pistol.md2', 2, 1.0 / 35.0, S_PISTOLUP) { A_Raise(); }
	S_PISTOL1('PISG', 0, 'weapons/v_pistol.md2', 3, 4.0 / 35.0, S_PISTOL2) { }
	S_PISTOL2('PISG', 1, 'weapons/v_pistol.md2', 4, 6.0 / 35.0, S_PISTOL3) { A_FirePistol(); }
	S_PISTOL3('PISG', 2, 'weapons/v_pistol.md2', 5, 4.0 / 35.0, S_PISTOL4) { }
	S_PISTOL4('PISG', 1, 'weapons/v_pistol.md2', 6, 5.0 / 35.0, S_PISTOL) { A_ReFire(); }
	S_PISTOLFLASH('PISF', 0 | FF_FULLBRIGHT, 7.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
}

defaultproperties
{
	Ammo = am_clip;
	UpState = S_PISTOLUP;
	DownState = S_PISTOLDOWN;
	ReadyState = S_PISTOL;
	AttackState = S_PISTOL1;
	FlashState = S_PISTOLFLASH;
	ThirdPersonModel = 'weapons/g_pistol.md2';
}

}

//**************************************************************************
//
//	WeaponShotgun
//
//**************************************************************************

class WeaponShotgun:Weapon
{

//===========================================================================
//
//  A_FireShotgun
//
//===========================================================================

void A_FireShotgun(void)
{
	int i;
	TVec dir;

	Player->MO.PlaySound('ShotgunFire', CHAN_WEAPON);
	Player->MO.SetState(Player->MO.MissileState);

	Player->Ammo[Ammo]--;

	SetPsprite(Player, ps_flash, FlashState);

	dir = Aim(Player->MO, 16.0 * 64.0);
	for (i = 0; i < 7; i++)
	{
		GunShot(Player->MO, false, dir);
	}
	Player->MO.Effects |= EF_DL_MUZZLEFLASH;
}

__states__
{
	S_SGUN('SHTG', 0, 'weapons/v_shotg.md2', 0, 1.0 / 35.0, S_SGUN) { A_WeaponReady(); }
	S_SGUNDOWN('SHTG', 0, 'weapons/v_shotg.md2', 1, 1.0 / 35.0, S_SGUNDOWN) { A_Lower(); }
	S_SGUNUP('SHTG', 0, 'weapons/v_shotg.md2', 2, 1.0 / 35.0, S_SGUNUP) { A_Raise(); }
	S_SGUN1('SHTG', 0, 'weapons/v_shotg.md2', 3, 3.0 / 35.0, S_SGUN2) { }
	S_SGUN2('SHTG', 0, 'weapons/v_shotg.md2', 4, 7.0 / 35.0, S_SGUN3) { A_FireShotgun(); }
	S_SGUN3('SHTG', 1, 'weapons/v_shotg.md2', 5, 5.0 / 35.0, S_SGUN4) { }
	S_SGUN4('SHTG', 2, 'weapons/v_shotg.md2', 6, 5.0 / 35.0, S_SGUN5) { }
	S_SGUN5('SHTG', 3, 'weapons/v_shotg.md2', 7, 4.0 / 35.0, S_SGUN6) { }
	S_SGUN6('SHTG', 2, 'weapons/v_shotg.md2', 8, 5.0 / 35.0, S_SGUN7) { }
	S_SGUN7('SHTG', 1, 'weapons/v_shotg.md2', 9, 5.0 / 35.0, S_SGUN8) { }
	S_SGUN8('SHTG', 0, 'weapons/v_shotg.md2', 10, 3.0 / 35.0, S_SGUN9) { }
	S_SGUN9('SHTG', 0, 'weapons/v_shotg.md2', 11, 7.0 / 35.0, S_SGUN) { A_ReFire(); }
	S_SGUNFLASH1('SHTF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_SGUNFLASH2) { A_Light1(); }
	S_SGUNFLASH2('SHTF', 1 | FF_FULLBRIGHT, 3.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
}

defaultproperties
{
	Ammo = am_shell;
	UpState = S_SGUNUP;
	DownState = S_SGUNDOWN;
	ReadyState = S_SGUN;
	AttackState = S_SGUN1;
	FlashState = S_SGUNFLASH1;
	ThirdPersonModel = 'weapons/g_shotg.md2';
}

}

//**************************************************************************
//
//	WeaponChaingun
//
//**************************************************************************

class WeaponChaingun:Weapon
{

//===========================================================================
//
//  A_FireCGun
//
//===========================================================================

void A_FireCGun(void)
{
	TVec dir;

	Player->MO.PlaySound('PistolFire', CHAN_WEAPON);

	if (!Player->Ammo[Ammo])
		return;

	Player->MO.SetState(Player->MO.MissileState);
	Player->Ammo[Ammo]--;

	SetPsprite(Player, ps_flash, FlashState + StateNum - AttackState);

	dir = Aim(Player->MO, 16.0 * 64.0);
	GunShot(Player->MO, !Player->Refire, dir);
	Player->MO.Effects |= EF_DL_MUZZLEFLASH;
}

__states__
{
	S_CHAIN('CHGG', 0, 'weapons/v_chain.md2', 0, 1.0 / 35.0, S_CHAIN) { A_WeaponReady(); }
	S_CHAINDOWN('CHGG', 0, 'weapons/v_chain.md2', 1, 1.0 / 35.0, S_CHAINDOWN) { A_Lower(); }
	S_CHAINUP('CHGG', 0, 'weapons/v_chain.md2', 2, 1.0 / 35.0, S_CHAINUP) { A_Raise(); }
	S_CHAIN1('CHGG', 0, 'weapons/v_chain.md2', 3, 4.0 / 35.0, S_CHAIN2) { A_FireCGun(); }
	S_CHAIN2('CHGG', 1, 'weapons/v_chain.md2', 4, 4.0 / 35.0, S_CHAIN3) { A_FireCGun(); }
	S_CHAIN3('CHGG', 1, 'weapons/v_chain.md2', 4, 0.0 / 35.0, S_CHAIN) { A_ReFire(); }
	S_CHAINFLASH1('CHGF', 0 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
	S_CHAINFLASH2('CHGF', 1 | FF_FULLBRIGHT, 5.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
}

defaultproperties
{
	Ammo = am_clip;
	UpState = S_CHAINUP;
	DownState = S_CHAINDOWN;
	ReadyState = S_CHAIN;
	AttackState = S_CHAIN1;
	FlashState = S_CHAINFLASH1;
	ThirdPersonModel = 'weapons/g_chain.md2';
}

}

//**************************************************************************
//
//	Rocket
//
//**************************************************************************

class Rocket:Projectile
{

__states__
{
	S_ROCKET('MISL', 0 | FF_FULLBRIGHT, 'missiles/rocket.md2', 0, 1.0 / 35.0, S_ROCKET) { }
	S_EXPLODE1('MISL', 1 | FF_FULLBRIGHT, 8.0 / 35.0, S_EXPLODE2) { A_Explode(); }
	S_EXPLODE2('MISL', 2 | FF_FULLBRIGHT, 6.0 / 35.0, S_EXPLODE3) { }
	S_EXPLODE3('MISL', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 11.0;
	Height = 8.0;
	Speed = 700.0;
	MissileDamage = 20;
	IdleState = S_ROCKET;
	DeathState = S_EXPLODE1;
	SightSound = 'LauncherFire';
	DeathSound = 'BarrelExplode';
	Effects = EF_DL_MISSILE | EF_ROCKET;
}

}

//**************************************************************************
//
//	WeaponMissile
//
//**************************************************************************

class WeaponMissile:Weapon
{

//===========================================================================
//
//  A_FireMissile
//
//===========================================================================

void A_FireMissile(void)
{
	Player->Ammo[Ammo]--;
	PlayerPawn(Player->MO).SpawnPlayerMissile(Rocket);
}

__states__
{
	S_MISSILE('MISG', 0, 'weapons/v_launch.md2', 0, 1.0 / 35.0, S_MISSILE) { A_WeaponReady(); }
	S_MISSILEDOWN('MISG', 0, 'weapons/v_launch.md2', 1, 1.0 / 35.0, S_MISSILEDOWN) { A_Lower(); }
	S_MISSILEUP('MISG', 0, 'weapons/v_launch.md2', 2, 1.0 / 35.0, S_MISSILEUP) { A_Raise(); }
	S_MISSILE1('MISG', 1, 'weapons/v_launch.md2', 3, 8.0 / 35.0, S_MISSILE2) { A_GunFlash(); }
	S_MISSILE2('MISG', 1, 'weapons/v_launch.md2', 4, 12.0 / 35.0, S_MISSILE3) { A_FireMissile(); }
	S_MISSILE3('MISG', 1, 'weapons/v_launch.md2', 5, 0.0 / 35.0, S_MISSILE) { A_ReFire(); }
	S_MISSILEFLASH1('MISF', 0 | FF_FULLBRIGHT, 3.0 / 35.0, S_MISSILEFLASH2) { A_Light1(); }
	S_MISSILEFLASH2('MISF', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_MISSILEFLASH3) { }
	S_MISSILEFLASH3('MISF', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_MISSILEFLASH4) { A_Light2(); }
	S_MISSILEFLASH4('MISF', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
}

defaultproperties
{
	Ammo = am_misl;
	UpState = S_MISSILEUP;
	DownState = S_MISSILEDOWN;
	ReadyState = S_MISSILE;
	AttackState = S_MISSILE1;
	FlashState = S_MISSILEFLASH1;
	ThirdPersonModel = 'weapons/g_launch.md2';
}

}

//**************************************************************************
//
//	PlasmaShot
//
//**************************************************************************

class PlasmaShot:Projectile
{

__states__
{
	S_PLASBALL('PLSS', 0 | FF_FULLBRIGHT, 'missiles/plasma.md2', 0, 6.0 / 35.0, S_PLASBALL2) { }
	S_PLASBALL2('PLSS', 1 | FF_FULLBRIGHT, 'missiles/plasma.md2', 1, 6.0 / 35.0, S_PLASBALL) { }
	S_PLASEXP('PLSE', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASEXP2) { }
	S_PLASEXP2('PLSE', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASEXP3) { }
	S_PLASEXP3('PLSE', 2 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASEXP4) { }
	S_PLASEXP4('PLSE', 3 | FF_FULLBRIGHT, 4.0 / 35.0, S_PLASEXP5) { }
	S_PLASEXP5('PLSE', 4 | FF_FULLBRIGHT, 4.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 13.0;
	Height = 8.0;
	Speed = 875.0;
	MissileDamage = 5;
	Translucency = 33;
	IdleState = S_PLASBALL;
	DeathState = S_PLASEXP;
	SightSound = 'PlasmaFire';
	DeathSound = 'FireballExplode';
	Effects = EF_DL_PLASMA;
}

}

//**************************************************************************
//
//	WeaponPlasma
//
//**************************************************************************

class WeaponPlasma:Weapon
{

//===========================================================================
//
//  A_FirePlasma
//
//===========================================================================

void A_FirePlasma(void)
{
	Player->Ammo[Ammo]--;

	SetPsprite(Player, ps_flash, FlashState + (P_Random() & 1));

	PlayerPawn(Player->MO).SpawnPlayerMissile(PlasmaShot);
}

__states__
{
	S_PLASMA('PLSG', 0, 'weapons/v_plasma.md2', 0, 1.0 / 35.0, S_PLASMA) { A_WeaponReady(); }
	S_PLASMADOWN('PLSG', 0, 'weapons/v_plasma.md2', 1, 1.0 / 35.0, S_PLASMADOWN) { A_Lower(); }
	S_PLASMAUP('PLSG', 0, 'weapons/v_plasma.md2', 2, 1.0 / 35.0, S_PLASMAUP) { A_Raise(); }
	S_PLASMA1('PLSG', 0, 'weapons/v_plasma.md2', 3, 3.0 / 35.0, S_PLASMA2) { A_FirePlasma(); }
	S_PLASMA2('PLSG', 1, 'weapons/v_plasma.md2', 4, 20.0 / 35.0, S_PLASMA) { A_ReFire(); }
	S_PLASMAFLASH1('PLSF', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
	S_PLASMAFLASH2('PLSF', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) { A_Light1(); }
}

defaultproperties
{
	Ammo = am_cell;
	UpState = S_PLASMAUP;
	DownState = S_PLASMADOWN;
	ReadyState = S_PLASMA;
	AttackState = S_PLASMA1;
	FlashState = S_PLASMAFLASH1;
	ThirdPersonModel = 'weapons/g_plasma.md2';
}

}

//**************************************************************************
//
//	ExtraBFG
//
//**************************************************************************

class ExtraBFG:Effect
{

__states__
{
	S_BFGEXP('BFE2', 0 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGEXP2) { }
	S_BFGEXP2('BFE2', 1 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGEXP3) { }
	S_BFGEXP3('BFE2', 2 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGEXP4) { }
	S_BFGEXP4('BFE2', 3 | FF_FULLBRIGHT, 8.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Translucency = 33;
	IdleState = S_BFGEXP;
}

}

//**************************************************************************
//
//	BFGShot
//
//**************************************************************************

class BFGShot:Projectile
{

//===========================================================================
//
//  A_BFGSpray
//
//  Spawn a BFG explosion on every monster in view
//
//===========================================================================

void A_BFGSpray(void)
{
	int i;
	int j;
	int damage;
	TAVec aimAng;
	Actor emo;

	// offset angles from its attack angle
	for (i = 0; i < 40; i++)
	{
		aimAng = Angles;
		aimAng.yaw = AngleMod360(aimAng.yaw - 45.0 + 90.0 / 40.0 * itof(i));

		// target is the originator (player)
		//  of the missile
		AimLineAttack(Instigator, aimAng, 16.0 * 64.0);
		if (!linetarget)
		{
			continue;
		}

		emo = Spawn(ExtraBFG, linetarget.Origin +
			vector(0.0, 0.0, linetarget.Height / 4.0));

		MSG_Select(MSG_SV_DATAGRAM);
		MSG_WriteByte(svc_explosion2);
		MSG_WriteByte(EF_DL_GBALL);
		MSG_WriteShort(ftoi(emo.Origin.x));
		MSG_WriteShort(ftoi(emo.Origin.y));
		MSG_WriteShort(ftoi(emo.Origin.z));

		damage = 0;
		for (j = 0; j < 15; j++)
			damage += (P_Random() & 7) + 1;

		linetarget.Damage(Instigator, Instigator, damage);
	}
}

__states__
{
	S_BFGSHOT('BFS1', 0 | FF_FULLBRIGHT, 4.0 / 35.0, S_BFGSHOT2) { }
	S_BFGSHOT2('BFS1', 1 | FF_FULLBRIGHT, 4.0 / 35.0, S_BFGSHOT) { }
	S_BFGLAND('BFE1', 0 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND2) { }
	S_BFGLAND2('BFE1', 1 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND3) { }
	S_BFGLAND3('BFE1', 2 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND4) { A_BFGSpray(); }
	S_BFGLAND4('BFE1', 3 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND5) { }
	S_BFGLAND5('BFE1', 4 | FF_FULLBRIGHT, 8.0 / 35.0, S_BFGLAND6) { }
	S_BFGLAND6('BFE1', 5 | FF_FULLBRIGHT, 8.0 / 35.0, S_NULL) { }
}

defaultproperties
{
	Radius = 13.0;
	Height = 8.0;
	Speed = 875.0;
	MissileDamage = 100;
	Translucency = 33;
	IdleState = S_BFGSHOT;
	DeathState = S_BFGLAND;
	DeathSound = 'RocketExplode';
	Effects = EF_DL_GBALL;
}

}

//**************************************************************************
//
//	WeaponBFG
//
//**************************************************************************

class WeaponBFG:Weapon
{

//===========================================================================
//
//  A_BFGsound
//
//===========================================================================

void A_BFGsound(void)
{
	Player->MO.PlaySound('BFGFire', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireBFG
//
//===========================================================================

void A_FireBFG(void)
{
	Player->Ammo[Ammo] -= BFGCELLS;
	PlayerPawn(Player->MO).SpawnPlayerMissile(BFGShot);
}

__states__
{
	S_BFG('BFGG', 0, 'weapons/v_bfg.md2', 0, 1.0 / 35.0, S_BFG) { A_WeaponReady(); }
	S_BFGDOWN('BFGG', 0, 'weapons/v_bfg.md2', 1, 1.0 / 35.0, S_BFGDOWN) { A_Lower(); }
	S_BFGUP('BFGG', 0, 'weapons/v_bfg.md2', 2, 1.0 / 35.0, S_BFGUP) { A_Raise(); }
	S_BFG1('BFGG', 0, 'weapons/v_bfg.md2', 3, 20.0 / 35.0, S_BFG2) { A_BFGsound(); }
	S_BFG2('BFGG', 1, 'weapons/v_bfg.md2', 4, 10.0 / 35.0, S_BFG3) { A_GunFlash(); }
	S_BFG3('BFGG', 1, 'weapons/v_bfg.md2', 5, 10.0 / 35.0, S_BFG4) { A_FireBFG(); }
	S_BFG4('BFGG', 1, 'weapons/v_bfg.md2', 6, 20.0 / 35.0, S_BFG) { A_ReFire(); }
	S_BFGFLASH1('BFGF', 0 | FF_FULLBRIGHT, 11.0 / 35.0, S_BFGFLASH2) { A_Light1(); }
	S_BFGFLASH2('BFGF', 1 | FF_FULLBRIGHT, 6.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
}

defaultproperties
{
	Ammo = am_cell;
	UpState = S_BFGUP;
	DownState = S_BFGDOWN;
	ReadyState = S_BFG;
	AttackState = S_BFG1;
	FlashState = S_BFGFLASH1;
	ThirdPersonModel = 'weapons/g_bfg.md2';
}

}

//**************************************************************************
//
//	WeaponChainsaw
//
//**************************************************************************

class WeaponChainsaw:Weapon
{

//===========================================================================
//
//  A_Saw
//
//===========================================================================

void A_Saw(void)
{
	float angle;
	int damage;
	TAVec aimAng;
	TVec dir;

	damage = 2 * (P_Random() % 10 + 1);
	aimAng = Player->MO.Angles;
	aimAng.yaw = AngleMod360(aimAng.yaw + (Random() -
		Random()) * 45.0 / 8.0);

	// use meleerange + 1 se the puff doesn't skip the flash
	dir = AimLineAttack(Player->MO, aimAng, MELEERANGE + 0.00001);
	LineAttack(Player->MO, dir, MELEERANGE + 0.00001, damage);

	if (!linetarget)
	{
		Player->MO.PlaySound('ChainsawTriggered', CHAN_WEAPON);
		return;
	}
	Player->MO.PlaySound('ChainsawHit', CHAN_WEAPON);

	// turn to face target
	angle = atan2(linetarget.Origin.y - Player->MO.Origin.y,
		linetarget.Origin.x - Player->MO.Origin.x);
	if (AngleMod360(angle - Player->MO.Angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - Player->MO.Angles.yaw) < -90.0 / 20.0)
			Player->MO.Angles.yaw = angle + 90.0 / 21.0;
		else
			Player->MO.Angles.yaw = Player->MO.Angles.yaw - 90.0 / 20.0;
	}
	else
	{
		if (AngleMod360(angle - Player->MO.Angles.yaw) > 90.0 / 20.0)
			Player->MO.Angles.yaw = angle - 90.0 / 21.0;
		else
			Player->MO.Angles.yaw += 90.0 / 20.0;
	}
	Player->MO.Angles.yaw = AngleMod360(Player->MO.Angles.yaw);
	Player->MO.bJustAttacked = true;
	Player->bFixAngle = true;
}

__states__
{
	S_SAW('SAWG', 2, 'weapons/v_saw.md2', 0, 4.0 / 35.0, S_SAWB) { A_WeaponReady(); }
	S_SAWB('SAWG', 3, 'weapons/v_saw.md2', 1, 4.0 / 35.0, S_SAW) { A_WeaponReady(); }
	S_SAWDOWN('SAWG', 2, 'weapons/v_saw.md2', 2, 1.0 / 35.0, S_SAWDOWN) { A_Lower(); }
	S_SAWUP('SAWG', 2, 'weapons/v_saw.md2', 3, 1.0 / 35.0, S_SAWUP) { A_Raise(); }
	S_SAW1('SAWG', 0, 'weapons/v_saw.md2', 4, 4.0 / 35.0, S_SAW2) { A_Saw(); }
	S_SAW2('SAWG', 1, 'weapons/v_saw.md2', 5, 4.0 / 35.0, S_SAW3) { A_Saw(); }
	S_SAW3('SAWG', 1, 'weapons/v_saw.md2', 5, 0.0 / 35.0, S_SAW) { A_ReFire(); }
}

defaultproperties
{
	Ammo = am_noammo;
	UpState = S_SAWUP;
	DownState = S_SAWDOWN;
	ReadyState = S_SAW;
	AttackState = S_SAW1;
	ThirdPersonModel = 'weapons/g_saw.md2';
}

}

//**************************************************************************
//
//	WeaponSuperShotgun
//
//**************************************************************************

class WeaponSuperShotgun:Weapon
{

//===========================================================================
//
//  A_FireShotgun2
//
//===========================================================================

void A_FireShotgun2(void)
{
	int i;
	int damage;
	TAVec rot;
	TVec aimDir;
	TVec dir;

	Player->MO.PlaySound('SuperShotgunFire', CHAN_WEAPON);
	Player->MO.SetState(Player->MO.MissileState);

	Player->Ammo[Ammo] -= 2;

	SetPsprite(Player, ps_flash, FlashState);

	aimDir = Aim(Player->MO, 16.0 * 64.0);
	for (i = 0; i < 20; i++)
	{
		rot.pitch = (Random() - Random()) * 45.0 / 8.0;
		rot.yaw = (Random() - Random()) * 45.0 / 4.0;
		rot.roll = 0.0;
		dir = RotateDirectionVector(aimDir, rot);
		damage = 5 * (P_Random() % 3 + 1);
		LineAttack(Player->MO, dir, MISSILERANGE, damage);
	}
	Player->MO.Effects |= EF_DL_MUZZLEFLASH;
}

//===========================================================================
//
//  A_OpenShotgun2
//
//===========================================================================

void A_OpenShotgun2(void)
{
	Player->MO.PlaySound('SuperShotgunOpen', CHAN_WEAPON);
}

//===========================================================================
//
//  A_LoadShotgun2
//
//===========================================================================

void A_LoadShotgun2(void)
{
	Player->MO.PlaySound('SuperShotgunLoad', CHAN_WEAPON);
}

//===========================================================================
//
//  A_CloseShotgun2
//
//===========================================================================

void A_CloseShotgun2(void)
{
	Player->MO.PlaySound('SuperShotgunClose', CHAN_WEAPON);
	A_ReFire();
}

__states__
{
	S_DSGUN('SHT2', 0, 'weapons/v_super.md2', 0, 1.0 / 35.0, S_DSGUN) { A_WeaponReady(); }
	S_DSGUNDOWN('SHT2', 0, 'weapons/v_super.md2', 1, 1.0 / 35.0, S_DSGUNDOWN) { A_Lower(); }
	S_DSGUNUP('SHT2', 0, 'weapons/v_super.md2', 2, 1.0 / 35.0, S_DSGUNUP) { A_Raise(); }
	S_DSGUN1('SHT2', 0, 'weapons/v_super.md2', 3, 3.0 / 35.0, S_DSGUN2) { }
	S_DSGUN2('SHT2', 0, 'weapons/v_super.md2', 4, 7.0 / 35.0, S_DSGUN3) { A_FireShotgun2(); }
	S_DSGUN3('SHT2', 1, 'weapons/v_super.md2', 5, 7.0 / 35.0, S_DSGUN4) { }
	S_DSGUN4('SHT2', 2, 'weapons/v_super.md2', 6, 7.0 / 35.0, S_DSGUN5) { A_CheckReload(); }
	S_DSGUN5('SHT2', 3, 'weapons/v_super.md2', 7, 7.0 / 35.0, S_DSGUN6) { A_OpenShotgun2(); }
	S_DSGUN6('SHT2', 4, 'weapons/v_super.md2', 8, 7.0 / 35.0, S_DSGUN7) { }
	S_DSGUN7('SHT2', 5, 'weapons/v_super.md2', 9, 7.0 / 35.0, S_DSGUN8) { A_LoadShotgun2(); }
	S_DSGUN8('SHT2', 6, 'weapons/v_super.md2', 10, 6.0 / 35.0, S_DSGUN9) { }
	S_DSGUN9('SHT2', 7, 'weapons/v_super.md2', 11, 6.0 / 35.0, S_DSGUN10) { A_CloseShotgun2(); }
	S_DSGUN10('SHT2', 0, 'weapons/v_super.md2', 12, 5.0 / 35.0, S_DSGUN) { A_ReFire(); }
	S_DSNR1('SHT2', 1, 7.0 / 35.0, S_DSNR2) { }
	S_DSNR2('SHT2', 0, 3.0 / 35.0, S_DSGUNDOWN) { }
	S_DSGUNFLASH1('SHT2', 8 | FF_FULLBRIGHT, 5.0 / 35.0, S_DSGUNFLASH2) { A_Light1(); }
	S_DSGUNFLASH2('SHT2', 9 | FF_FULLBRIGHT, 4.0 / 35.0, S_LIGHTDONE) { A_Light2(); }
}

defaultproperties
{
	Ammo = am_shell;
	UpState = S_DSGUNUP;
	DownState = S_DSGUNDOWN;
	ReadyState = S_DSGUN;
	AttackState = S_DSGUN1;
	FlashState = S_DSGUNFLASH1;
	ThirdPersonModel = 'weapons/g_super.md2';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.27  2002/06/14 15:51:20  dj_jl
//  A lots of changes, new functions etc for DDF.
//
//  Revision 1.26  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.25  2002/05/03 17:11:55  dj_jl
//  Object classes split up into their files.
//
//  Revision 1.24  2002/03/28 18:15:34  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.23  2002/03/20 19:07:44  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.22  2002/03/16 17:44:02  dj_jl
//  Added PlayerPawn class, added function Spawn, beautification.
//
//  Revision 1.21  2002/03/02 17:35:55  dj_jl
//  Weapon classes
//
//  Revision 1.20  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.19  2002/02/22 18:00:14  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.18  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.17  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.16  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.15  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.14  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.13  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.12  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.11  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.10  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.9  2001/12/01 18:14:08  dj_jl
//  Changed MSG_Select, beautification
//
//  Revision 1.8  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.7  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.6  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.5  2001/10/02 17:42:37  dj_jl
//  Possibility to declare function's code inside class declaration
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
