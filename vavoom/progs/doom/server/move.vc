//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// keep track of special lines as they are hit,
// but don't process them until the move is proven valid
#define MAXSPECIALCROSS	32

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

boolean floatok;	// if true, move would be ok if

							// within tmfloorz - tmceilingz
float saved_tmfloorz;

// keep track of the line that lowers the ceiling,
// so missiles don't explode against sky hack walls
line_t *ceilingline;

float tmbbox[4];
mobj_t *tmthing;
int tmflags;
float tmx;
float tmy;
float tmz;
TVec tmpos;
float tmfloorz;
float tmceilingz;
float tmdropoffz;
sec_plane_t *tmfloor;
sec_plane_t *tmceiling;

line_t *spechit[MAXSPECIALCROSS];
int numspechit;

mobj_t *BlockingMobj;

// CODE --------------------------------------------------------------------

//**************************************************************************
//
//	CHECK ABSOLUTE POSITION
//
//**************************************************************************

//==========================================================================
//
//	PIT_CheckAbsThing
//
//==========================================================================

boolean PIT_CheckAbsThing(mobj_t * thing)
{
	float blockdist;

	if (!(thing->Flags & MF_SOLID))
		return true;

	blockdist = thing->Radius + tmthing->Radius;

	if (fabs(thing->origin.x - tmx) >= blockdist
		|| fabs(thing->origin.y - tmy) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (thing == tmthing)
		return true;

	// see if it went over / under
	if (tmthing->origin.z >= thing->origin.z + thing->Height)
		return true;	// overhead
	if (tmthing->origin.z + tmthing->Height < thing->origin.z)
		return true;	// underneath

	BlockingMobj = thing;
	return (thing->Flags & MF_NOCLIP);
}

//==========================================================================
//
//	PIT_CheckAbsLine
//
//  Adjusts tmfloorz and tmceilingz as lines are contacted
//
//==========================================================================

boolean PIT_CheckAbsLine(line_t * ld)
{
	TVec hit_point;
	opening_t *open;

	if (tmbbox[BOXRIGHT] <= ld->bbox[BOXLEFT] ||
		tmbbox[BOXLEFT] >= ld->bbox[BOXRIGHT] ||
		tmbbox[BOXTOP] <= ld->bbox[BOXBOTTOM] ||
		tmbbox[BOXBOTTOM] >= ld->bbox[BOXTOP])
		return true;

	if (P_BoxOnLineSide(&tmbbox[0], ld) != -1)
		return true;

	// A line has been hit

	// The moving thing's destination position will cross
	// the given line.
	// If this should not be allowed, return false.
	// If the line is special, keep track of it
	// to process later if the move is proven ok.
	// NOTE: specials are NOT sorted by order,
	// so two special lines that are only 8 pixels apart
	// could be crossed in either order.

	if (!ld->backsector)
	{
		// One sided line
		return false;
	}

	if (ld->flags & ML_BLOCKING)
	{
		// Explicitly blocking everything
		return false;
	}

	if (!tmthing->player && ld->flags & ML_BLOCKMONSTERS)
	{
		// Block monsters only
		return false;
	}

	// set openrange, opentop, openbottom
	hit_point =
		tmpos - (DotProduct(tmpos, ld->normal) - ld->dist) * ld->normal;
	open = LineOpenings(ld, hit_point);
	open = FindOpening(open, tmz, tmz + tmthing->Height);

	if (open)
	{
		// adjust floor / ceiling heights
		if (!(open->ceiling->flags & SPF_NOBLOCKING)
			&& open->top < tmceilingz)
		{
			tmceiling = open->ceiling;
			tmceilingz = open->top;
			ceilingline = ld;
		}

		if (!(open->floor->flags & SPF_NOBLOCKING) && open->bottom > tmfloorz)
		{
			tmfloor = open->floor;
			tmfloorz = open->bottom;
		}

		if (open->lowfloor < tmdropoffz)
			tmdropoffz = open->lowfloor;
	}
	else
	{
		tmceilingz = tmfloorz;
	}

	return true;
}

//==========================================================================
//
//  P_CheckPosition
//
//  This is purely informative, nothing is modified
// (except things picked up).
// 
// in:
//  a mobj_t (can be valid or invalid)
//  a position to be checked
//   (doesn't need to be related to the mobj_t->x,y)
//
// during:
//  special things are touched if MF_PICKUP
//  early out on solid lines?
//
// out:
//  newsubsec
//  floorz
//  ceilingz
//  tmdropoffz
//   the lowest point contacted
//   (monsters won't move to a dropoff)
//  speciallines[]
//  numspeciallines
//
//==========================================================================

boolean P_CheckPosition(mobj_t * thing, float x, float y, float z)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;
	subsector_t *newsubsec;
	sec_region_t *gap;
	sec_region_t *reg;

	tmthing = thing;
	tmflags = thing->Flags;

	tmx = x;
	tmy = y;
	tmz = z;
	tmpos = vector(x, y, z);

	tmbbox[BOXTOP] = y + tmthing->Radius;
	tmbbox[BOXBOTTOM] = y - tmthing->Radius;
	tmbbox[BOXRIGHT] = x + tmthing->Radius;
	tmbbox[BOXLEFT] = x - tmthing->Radius;

	newsubsec = PointInSubsector(x, y);
	ceilingline = NULL;

	// The base floor / ceiling is from the subsector
	// that contains the point.
	// Any contacted lines the step closer together
	// will adjust them.
	gap = FindThingGap(newsubsec->sector->botregion, tmpos, tmz,
		tmz + thing->Height);
	reg = gap;
	while (reg->prev && reg->floor->flags & SPF_NOBLOCKING)
		reg = reg->prev;
	tmfloor = reg->floor;
	tmfloorz = tmdropoffz = GetPlanePointZ(reg->floor, tmpos);
	reg = gap;
	while (reg->next && reg->ceiling->flags & SPF_NOBLOCKING)
		reg = reg->next;
	tmceiling = reg->ceiling;
	tmceilingz = GetPlanePointZ(reg->ceiling, tmpos);

	(*validcount)++;
	numspechit = 0;

	if (tmflags & MF_NOCLIP)
		return true;

	BlockingMobj = NULL;

	// Check things first, possibly picking things up.
	// The bounding box is extended by MAXRADIUS
	// because mobj_ts are grouped into mapblocks
	// based on their origin point, and can overlap
	// into adjacent blocks by up to MAXRADIUS units.
	xl = MapBlock(tmbbox[BOXLEFT] - level->bmaporgx - MAXRADIUS);
	xh = MapBlock(tmbbox[BOXRIGHT] - level->bmaporgx + MAXRADIUS);
	yl = MapBlock(tmbbox[BOXBOTTOM] - level->bmaporgy - MAXRADIUS);
	yh = MapBlock(tmbbox[BOXTOP] - level->bmaporgy + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockThingsIterator(bx, by, PIT_CheckAbsThing))
				return false;

	BlockingMobj = NULL;

	// check lines
	xl = MapBlock(tmbbox[BOXLEFT] - level->bmaporgx);
	xh = MapBlock(tmbbox[BOXRIGHT] - level->bmaporgx);
	yl = MapBlock(tmbbox[BOXBOTTOM] - level->bmaporgy);
	yh = MapBlock(tmbbox[BOXTOP] - level->bmaporgy);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockLinesIterator(bx, by, PIT_CheckAbsLine))
				return false;

	return true;
}

//**************************************************************************
//
//  MOVEMENT CLIPPING
//
//**************************************************************************

//==========================================================================
//
//	Actor::Touch
//
//==========================================================================

boolean Actor::Touch(Actor Other)
{
	boolean solid;
	int damage;

	// check for skulls slamming into things
	if (Flags & MF_SKULLFLY)
	{
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		Flags &= ~MF_SKULLFLY;
		velocity = vector(0.0, 0.0, 0.0);
		SetState(SpawnState);
		return false;	// stop moving
	}

	// missiles can hit other things
	if (Flags & MF_MISSILE)
	{
		if (target && (target->Class == Other.Class ||
			(target->Class == HellKnight && Other.Class == BaronOfHell) ||
			(target->Class == BaronOfHell && Other.Class == HellKnight)))
		{
			// Don't hit same species as originator.
			if (Other == *target)
				return true;

			if (Other.Class != PlayerEntity)
			{
				// Explode, but do no damage.
				// Let players missile other players.
				return false;
			}
		}

		if (!(Other.Flags & MF_SHOOTABLE))
		{
			// didn't do any damage
			return !(Other.Flags & MF_SOLID);
		}

		// damage / explode
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, *target, damage);
		// don't traverse any more
		return false;
	}

	// check for special pickup
	if (Other.Flags & MF_SPECIAL)
	{
		solid = Other.Flags & MF_SOLID;
		Other.TouchSpecial(self);
		return !solid;
	}

	return !(Other.Flags & MF_SOLID) || (Other.Flags & MF_NOCLIP);
}

//==========================================================================
//
//	PIT_CheckRelThing
//
//==========================================================================

boolean PIT_CheckRelThing(mobj_t * thing)
{
	float blockdist;

	if (!(thing->Flags & (MF_SOLID | MF_SPECIAL | MF_SHOOTABLE)))
		return true;

	blockdist = thing->Radius + tmthing->Radius;

	if (fabs(thing->origin.x - tmx) >= blockdist
		|| fabs(thing->origin.y - tmy) >= blockdist)
	{
		// didn't hit it
		return true;
	}

	// don't clip against self
	if (thing == tmthing)
		return true;

	// see if it went over / under
	if (tmthing->origin.z >= thing->origin.z + thing->Height)
	{
		return true;	// overhead
	}
	if (tmthing->origin.z + tmthing->Height < thing->origin.z)
	{
		return true;	// underneath
	}

	BlockingMobj = thing;
	return tmthing->Touch(*thing);
}

//==========================================================================
//
//	PIT_CheckRelLine
//
//  Adjusts tmfloorz and tmceilingz as lines are contacted
//
//==========================================================================

boolean PIT_CheckRelLine(line_t * ld)
{
	TVec hit_point;
	opening_t *open;

	if (tmbbox[BOXRIGHT] <= ld->bbox[BOXLEFT] ||
		tmbbox[BOXLEFT] >= ld->bbox[BOXRIGHT] ||
		tmbbox[BOXTOP] <= ld->bbox[BOXBOTTOM] ||
		tmbbox[BOXBOTTOM] >= ld->bbox[BOXTOP])
		return true;

	if (P_BoxOnLineSide(&tmbbox[0], ld) != -1)
		return true;

	// A line has been hit

	// The moving thing's destination position will cross
	// the given line.
	// If this should not be allowed, return false.
	// If the line is special, keep track of it
	// to process later if the move is proven ok.
	// NOTE: specials are NOT sorted by order,
	// so two special lines that are only 8 pixels apart
	// could be crossed in either order.

	if (!ld->backsector)
	{
		// One sided line
		return false;
	}

	if (!(tmthing->Flags & MF_MISSILE))
	{
		if (ld->flags & ML_BLOCKING)
		{
			// Explicitly blocking everything
			return false;
		}

		if (!tmthing->player && ld->flags & ML_BLOCKMONSTERS)
		{
			// Block monsters only
			return false;
		}
	}

	// set openrange, opentop, openbottom
	hit_point =
		tmpos - (DotProduct(tmpos, ld->normal) - ld->dist) * ld->normal;
	open = LineOpenings(ld, hit_point);
	open = FindOpening(open, tmz, tmz + tmthing->Height);

	if (open)
	{
		// adjust floor / ceiling heights
		if (!(open->ceiling->flags & SPF_NOBLOCKING)
			&& open->top < tmceilingz)
		{
			tmceiling = open->ceiling;
			tmceilingz = open->top;
			ceilingline = ld;
		}

		if (!(open->floor->flags & SPF_NOBLOCKING) && open->bottom > tmfloorz)
		{
			tmfloor = open->floor;
			tmfloorz = open->bottom;
		}

		if (open->lowfloor < tmdropoffz)
			tmdropoffz = open->lowfloor;
	}
	else
	{
		tmceilingz = tmfloorz;
	}

	// if contacted a special line, add it to the list
	if (ld->special)
	{
		if (numspechit >= MAXSPECIALCROSS)
		{
			//cond << "Spechit overflow\n";
		}
		else
		{
			spechit[numspechit] = ld;
			numspechit++;
		}
	}

	return true;
}

//==========================================================================
//
//  P_CheckRelPosition
//
//  This is purely informative, nothing is modified
// (except things picked up).
// 
// in:
//  a mobj_t (can be valid or invalid)
//  a position to be checked
//   (doesn't need to be related to the mobj_t->x,y)
//
// during:
//  special things are touched if MF_PICKUP
//  early out on solid lines?
//
// out:
//  newsubsec
//  floorz
//  ceilingz
//  tmdropoffz
//   the lowest point contacted
//   (monsters won't move to a dropoff)
//  speciallines[]
//  numspeciallines
//
//==========================================================================

boolean P_CheckRelPosition(mobj_t * thing, float x, float y)
{
	int xl;
	int xh;
	int yl;
	int yh;
	int bx;
	int by;
	subsector_t *newsubsec;
	sec_region_t *gap;
	sec_region_t *reg;

	tmthing = thing;
	tmflags = thing->Flags;

	tmx = x;
	tmy = y;
	tmz = thing->origin.z;
	tmpos = vector(x, y, thing->origin.z);

	tmbbox[BOXTOP] = y + tmthing->Radius;
	tmbbox[BOXBOTTOM] = y - tmthing->Radius;
	tmbbox[BOXRIGHT] = x + tmthing->Radius;
	tmbbox[BOXLEFT] = x - tmthing->Radius;

	newsubsec = PointInSubsector(x, y);
	ceilingline = NULL;

	// The base floor / ceiling is from the subsector
	// that contains the point.
	// Any contacted lines the step closer together
	// will adjust them.
	gap =
		FindThingGap(newsubsec->sector->botregion, tmpos, tmz,
		tmz + thing->Height);
	reg = gap;
	while (reg->prev && reg->floor->flags & SPF_NOBLOCKING)
		reg = reg->prev;
	tmfloor = reg->floor;
	tmfloorz = tmdropoffz = GetPlanePointZ(reg->floor, tmpos);
	reg = gap;
	while (reg->next && reg->ceiling->flags & SPF_NOBLOCKING)
		reg = reg->next;
	tmceiling = reg->ceiling;
	tmceilingz = GetPlanePointZ(reg->ceiling, tmpos);

	(*validcount)++;
	numspechit = 0;

	if (tmflags & MF_NOCLIP)
		return true;

	BlockingMobj = NULL;

	// Check things first, possibly picking things up.
	// The bounding box is extended by MAXRADIUS
	// because mobj_ts are grouped into mapblocks
	// based on their origin point, and can overlap
	// into adjacent blocks by up to MAXRADIUS units.
	xl = MapBlock(tmbbox[BOXLEFT] - level->bmaporgx - MAXRADIUS);
	xh = MapBlock(tmbbox[BOXRIGHT] - level->bmaporgx + MAXRADIUS);
	yl = MapBlock(tmbbox[BOXBOTTOM] - level->bmaporgy - MAXRADIUS);
	yh = MapBlock(tmbbox[BOXTOP] - level->bmaporgy + MAXRADIUS);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockThingsIterator(bx, by, PIT_CheckRelThing))
				return false;

	BlockingMobj = NULL;

	// check lines
	xl = MapBlock(tmbbox[BOXLEFT] - level->bmaporgx);
	xh = MapBlock(tmbbox[BOXRIGHT] - level->bmaporgx);
	yl = MapBlock(tmbbox[BOXBOTTOM] - level->bmaporgy);
	yh = MapBlock(tmbbox[BOXTOP] - level->bmaporgy);

	for (bx = xl; bx <= xh; bx++)
		for (by = yl; by <= yh; by++)
			if (!P_BlockLinesIterator(bx, by, PIT_CheckRelLine))
				return false;

	return true;
}

//==========================================================================
//
//  P_TryMove
//
//  Attempt to move to a new position, crossing special lines unless
// MF_TELEPORT is set.
//
//==========================================================================

boolean P_TryMove(mobj_t * thing, float x, float y)
{
	boolean check;
	TVec oldorg;
	int side;
	int oldside;
	line_t *ld;

	check = P_CheckRelPosition(thing, x, y);
	saved_tmfloorz = tmfloorz;
	floatok = false;
	if (!check)
	{
		if (!BlockingMobj || BlockingMobj->player || !thing->player ||
			BlockingMobj->origin.z + BlockingMobj->Height - thing->origin.z >
			24.0
			|| (BlockingMobj->subsector->sector->ceilingheight -
		   (BlockingMobj->origin.z + BlockingMobj->Height) < thing->Height)
			|| (tmceilingz - (BlockingMobj->origin.z + BlockingMobj->Height) <
				thing->Height))
		{
			return false;
		}
	}

	if (!(thing->Flags & MF_NOCLIP))
	{
		if (tmceilingz - tmfloorz < thing->Height)
		{
			// Doesn't fit
			return false;
		}

		floatok = true;

		if (!(thing->Flags & MF_TELEPORT)
			&& tmceilingz - thing->origin.z < thing->Height)
		{
			// mobj must lower itself to fit
			return false;
		}

		if (!(thing->Flags & MF_TELEPORT)
			&& tmfloorz - thing->origin.z > 24.0)
			return false;	// too big a step up

		if (!(thing->Flags & (MF_DROPOFF | MF_FLOAT))
			&& tmfloorz - tmdropoffz > 24.0)
			return false;	// don't stand over a dropoff
	}

	// the move is ok,
	// so link the thing into its new position
	P_UnsetThingPosition(*thing);

	oldorg = thing->origin;
	thing->origin.x = x;
	thing->origin.y = y;

	P_SetThingPosition(*thing);
	thing->floorz = tmfloorz;
	thing->ceilingz = tmceilingz;
	thing->floor = tmfloor;
	thing->ceiling = tmceiling;

	//
	// if any special lines were hit, do the effect
	//
	if (!(thing->Flags & (MF_TELEPORT | MF_NOCLIP)))
	{
		while (numspechit > 0)
		{
			numspechit--;
			// see if the line was crossed
			ld = spechit[numspechit];
			side = PointOnPlaneSide(thing->origin, ld);
			oldside = PointOnPlaneSide(oldorg, ld);
			if (side != oldside)
			{
				if (ld->special)
				{
					if (thing->player)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_CROSS);
					}
					else if (thing->Flags & MF_COUNTKILL)	//thing->flags2 & MF2_MCROSS)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_MCROSS);
					}
					else	//if (thing->flags2 & MF2_PCROSS)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_PCROSS);
					}
				}
			}
		}
	}

	return true;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.12  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/25 18:04:33  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.10  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.9  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.7  2002/01/15 08:10:55  dj_jl
//  Added P_CheckRelPosition
//
//  Revision 1.6  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.4  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.3  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
