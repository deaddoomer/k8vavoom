//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//	Actor::Touch
//
//==========================================================================

boolean Actor::Touch(MapObject InOther)
{
	boolean solid;
	int damage;
	Actor Other;

	Other = Actor(InOther);
	if (!Other.bSolid && !Other.bSpecial && !Other.bShootable)
		return true;

	// check for skulls slamming into things
	if (bSkullFly)
	{
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, self, damage);
		bSkullFly = false;
		Velocity = vector(0.0, 0.0, 0.0);
		SetState(SpawnState);
		return false;	// stop moving
	}

	// missiles can hit other things
	if (bMissile)
	{
		if (Owner && (Owner.Class == Other.Class ||
			(Owner.Class == HellKnight && Other.Class == BaronOfHell) ||
			(Owner.Class == BaronOfHell && Other.Class == HellKnight)))
		{
			// Don't hit same species as originator.
			if (Other == Owner)
				return true;

			if (Other.Class != DoomPlayer)
			{
				// Explode, but do no damage.
				// Let players missile other players.
				return false;
			}
		}

		if (!Other.bShootable)
		{
			// didn't do any damage
			return !Other.bSolid;
		}

		// damage / explode
		damage = ((P_Random() % 8) + 1) * MissileDamage;
		Other.Damage(self, Owner, damage);
		// don't traverse any more
		return false;
	}

	// check for special pickup
	if (Other.bSpecial)
	{
		solid = Other.bSolid;
		Other.TouchSpecial(self);
		return !solid;
	}

	//return !Other.bSolid || Other.bNoClip;
	return !Other.bSolid;
}

boolean floatok;	// if true, move would be ok if
					// within tmtrace.FloorZ - tmtrace.CeilingZ
float saved_tmfloorz;

//==========================================================================
//
//  P_TryMove
//
//  Attempt to move to a new position, crossing special lines unless
// MF_TELEPORT is set.
//
//==========================================================================

boolean P_TryMove(mobj_t * thing, float x, float y)
{
	boolean check;
	TVec oldorg;
	int side;
	int oldside;
	line_t *ld;

	check = thing->CheckRelPosition(vector(x, y, thing->Origin.z));
	saved_tmfloorz = tmtrace->FloorZ;
	floatok = false;
	if (!check)
	{
		if (!tmtrace->BlockingMobj || tmtrace->BlockingMobj.bIsPlayer ||
			!thing->bIsPlayer || tmtrace->BlockingMobj.Origin.z +
			tmtrace->BlockingMobj.Height - thing->Origin.z > 24.0 ||
			(tmtrace->BlockingMobj.Sector->ceilingheight -
				(tmtrace->BlockingMobj.Origin.z +
				tmtrace->BlockingMobj.Height) < thing->Height) ||
		   	(tmtrace->CeilingZ - (tmtrace->BlockingMobj.Origin.z +
			   	tmtrace->BlockingMobj.Height) < thing->Height))
		{
			return false;
		}
	}

	if (thing->bColideWithWorld)
	{
		if (tmtrace->CeilingZ - tmtrace->FloorZ < thing->Height)
		{
			// Doesn't fit
			return false;
		}

		floatok = true;

		if (!thing->bTeleport &&
			tmtrace->CeilingZ - thing->Origin.z < thing->Height)
		{
			// mobj must lower itself to fit
			return false;
		}

		if (!thing->bTeleport && tmtrace->FloorZ - thing->Origin.z > 24.0)
			return false;	// too big a step up

		if (!thing->bDropOff && !thing->bFloat &&
			tmtrace->FloorZ - tmtrace->DropOffZ > 24.0)
			return false;	// don't stand over a dropoff
	}

	// the move is ok,
	// so link the thing into its new position
	P_UnsetThingPosition(*thing);

	oldorg = thing->Origin;
	thing->Origin.x = x;
	thing->Origin.y = y;

	P_SetThingPosition(*thing);
	thing->FloorZ = tmtrace->FloorZ;
	thing->CeilingZ = tmtrace->CeilingZ;
	thing->Floor = tmtrace->Floor;
	thing->Ceiling = tmtrace->Ceiling;

	//
	// if any special lines were hit, do the effect
	//
	if (!thing->bTeleport && thing->bColideWithWorld)
	{
		while (tmtrace->NumSpecHit > 0)
		{
			tmtrace->NumSpecHit--;
			// see if the line was crossed
			ld = tmtrace->SpecHit[tmtrace->NumSpecHit];
			side = PointOnPlaneSide(thing->Origin, ld);
			oldside = PointOnPlaneSide(oldorg, ld);
			if (side != oldside)
			{
				if (ld->special)
				{
					if (thing->bIsPlayer)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_CROSS);
					}
					else if (thing->bActivateMCross)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_MCROSS);
					}
					else if (thing->bActivatePCross)
					{
						P_ActivateLine(ld, thing, oldside, SPAC_PCROSS);
					}
					else if (ld->special == 70)
					{
						//	Teleport hack
						P_ActivateLine(ld, thing, oldside, SPAC_MCROSS);
					}
				}
			}
		}
	}

	return true;
}

//==========================================================================
//
//  P_ThrustMobj
//
//==========================================================================

void P_ThrustMobj(mobj_t * mo, float angle, float move)
{
	mo->Velocity.x += move * cos(angle) * 35.0;
	mo->Velocity.y += move * sin(angle) * 35.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.24  2002/03/16 17:44:01  dj_jl
//  Added PlayerPawn class, added function Spawn, beautification.
//
//  Revision 1.23  2002/03/09 17:57:01  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.22  2002/03/04 18:31:35  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.21  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.20  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.19  2002/02/22 18:00:11  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.18  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.17  2002/02/09 18:13:46  dj_jl
//  Added flags that determines what line blocking flags to check
//
//  Revision 1.16  2002/02/07 18:50:08  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.15  2002/02/06 17:28:51  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.14  2002/02/02 19:17:25  dj_jl
//  Replacing pointers with references, beautification.
//
//  Revision 1.13  2002/01/29 18:10:31  dj_jl
//  Added MCROSS and PCROSS flags
//
//  Revision 1.12  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.11  2002/01/25 18:04:33  dj_jl
//  Many global functions made Actor functions
//
//  Revision 1.10  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.9  2002/01/17 18:15:53  dj_jl
//  Renamed all map object classes
//
//  Revision 1.8  2002/01/15 18:26:59  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.7  2002/01/15 08:10:55  dj_jl
//  Added P_CheckRelPosition
//
//  Revision 1.6  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.5  2001/12/27 17:52:22  dj_jl
//  Removed Entity property type, replaced with Object property Class
//
//  Revision 1.4  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.3  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
