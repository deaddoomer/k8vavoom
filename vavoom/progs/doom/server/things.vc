//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Thing line specials
//**
//**************************************************************************

classid TranslateThingType[] =
{
	MapSpot,	// T_NONE
	ShotgunGuy,
#ifdef DOOM2
	ChaingunGuy,
#else
	MapSpot,
#endif
	BaronOfHell,
	Zombieman,
	Imp,
#ifdef DOOM2
	Arachnotron,
#else
	MapSpot,
#endif
	SpiderMastermind,
	Demon,
	Shadows,

	ImpMissile,	// 10
	ItemAmmoBulletClip,
	ItemAmmoShells,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	Cacodemon,

#ifdef DOOM2
	Revenant,	// 20
#else
	MapSpot,	// 20
#endif
	MapSpot/*Bridge*/,
	ItemArmorBonus,
	ItemStimPack,
	ItemMedikit,
	ItemSoulSphere,
	MapSpot,
	ItemWeaponShotgun,
	ItemWeaponChaingun,
	ItemWeaponRocketLauncher,

	ItemWeaponPlasmaGun,	// 30
	ItemWeaponBFG,
	ItemWeaponChainsaw,
#ifdef DOOM2
	ItemWeaponSuperShotgun,
#else
	MapSpot,
#endif
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	MapSpot,	// 40
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	MapSpot,	// 50
	PlasmaShot,
	MapSpot,
#ifdef DOOM2
	RevenantTracer,
#else
	MapSpot,
#endif
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	MapSpot,	// 60
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	ItemArmor1,
	ItemArmor2,

	MapSpot,	// 70
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	ItemAmmoCells,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	MapSpot,	// 80
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	ItemKeyBlueCard,
	ItemKeyRedCard,
	ItemKeyYellowCard,
	ItemKeyYellowSkull,
	ItemKeyRedSkull,

	ItemKeyBlueSkull,	// 90
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
#ifdef Doom2
	ArchvileFire,
#else
	MapSpot,
#endif
	MapSpot,

	MapSpot/*StealthBaron*/,	// 100
#ifdef Doom2
	MapSpot/*StealthHellKnight*/,
#else
	MapSpot,
#endif
	MapSpot/*StealthZombieman*/,
	MapSpot/*StealthShotgunGuy*/,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,

	LostSoul,	// 110
#ifdef DOOM2
	ArchVile,
	Mancubus,
	HellKnight,
#else
	MapSpot,
	MapSpot,
	MapSpot,
#endif
	Cyberdemon,
#ifdef DOOM2
	PainElemental,
	WolfSS,
	MapSpot/*StealthArachnotron*/,
	MapSpot/*StealthArchvile*/,
#else
	MapSpot,
	MapSpot,
	MapSpot,
	MapSpot,
#endif
	MapSpot/*StealthCacodemon*/,

	MapSpot/*StealthChaingunGuy*/,	// 120
	MapSpot/*StealthDemon*/,
	MapSpot/*StealthImp*/,
#ifdef DOOM2
	MapSpot/*StealthMancubus*/,
	MapSpot/*StealthRevenant*/,
#else
	MapSpot,
	MapSpot,
#endif
	Barrel,
	CacodemonMissile,
	Rocket,
	BFGShot,
#ifdef DOOM2
	ArachnotronPlasma,
#else
	MapSpot,
#endif

	Blood,	// 130
	Puff,
#ifdef DOOM2
	ItemMegaSphere,
#else
	MapSpot,
#endif
	ItemInvulnerability,
	ItemBerserk,
	ItemInvisibility,
	ItemRadiationSuit,
	ItemComputerMap,
	ItemInfrared,
	ItemAmmoBulletBox,

	ItemAmmoRocket,	// 140
	ItemAmmoRocketBox,
	ItemAmmoCellsPack,
	ItemAmmoShellsBox,
	ItemBackpack,
	DeadPlayerGibs,
	Gibs,
	ColonGibs,
	SmallPool,
	BurningBarrel,

	BrainStem,	// 150
	MapSpot/*ScriptedMarine*/,
	ItemHealthBonus,
#ifdef DOOM2
	MancubusMissile,
#else
	MapSpot,
#endif
	BruiserShot
};

//==========================================================================
//
//	EV_ThingProjectile
//
//==========================================================================

bool EV_ThingProjectile(int *args, bool gravity, int newtid)
{
	int tid;
	float angle;
	float speed;
	float vspeed;
	classid moType;
	Actor A;
	Actor newA;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	tid = args[0];
	moType = TranslateThingType[args[1]];
	angle = itof(args[2]) * (360.0 / 256.0);
	speed = itof(args[3]) / 8.0;
	vspeed = itof(args[4]) / 8.0;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		newA = Spawn(moType, A.Origin);
		if (newA.SightSound)
		{
			newA.PlaySound(newA.SightSound, CHAN_VOICE);
		}
		newA.Instigator = A;	// Originator
		newA.Angles.yaw = angle;
		newA.Velocity.x = speed * cos(angle) * 35.0;
		newA.Velocity.y = speed * sin(angle) * 35.0;
		newA.Velocity.z = vspeed * 35.0;
		newA.bDropped = true;	// Don't respawn
		if (gravity)
		{
			newA.bNoGravity = false;
			newA.Mass = 12.5;
		}
		if (newtid)
			newA.InsertIntoTIDList(newtid);
		if (newA.CheckMissileSpawn())
		{
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	EV_ThingSpawn
//
//==========================================================================

bool EV_ThingSpawn(int *args, bool fog)
{
	int tid;
	float angle;
	Actor A;
	Actor newAct;
	Actor fogAct;
	classid moType;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	tid = args[0];
	moType = TranslateThingType[args[1]];
	angle = itof(args[2]) * 360.0 / 256.0;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		newAct = Spawn(moType, A.Origin);
//		if (newAct.bFloatBob)
//		{
//			newAct.Origin.z = A.Origin.z - A.FloorZ;
//			newAct.SetOrigin2(newAct.Origin);
//		}
		if (newAct.TestLocation() == false)
		{
			// Didn't fit
			newAct.Remove();
		}
		else
		{
			newAct.Angles.yaw = angle;
			if (args[3])
				newAct.InsertIntoTIDList(args[3]);
			if (fog == true)
			{
				fogAct = Spawn(TeleportFog, A.Origin);
				fogAct.PlaySound('misc/teleport', CHAN_VOICE);
			}
			newAct.bDropped = true;	// Don't respawn
//			if (newAct.bFloatBob)
//			{
//				newAct.Special1f = newAct.Origin.z - newAct.FloorZ;
//			}
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	EV_ThingActivate
//
//==========================================================================

bool EV_ThingActivate(int tid)
{
	Actor A;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		if (A.Activate())
		{
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	EV_ThingDeactivate
//
//==========================================================================

bool EV_ThingDeactivate(int tid)
{
	Actor A;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		if (A.Deactivate())
		{
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	EV_ThingRemove
//
//==========================================================================

bool EV_ThingRemove(int tid)
{
	Actor A;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		A.RemoveThing();
		success = true;
	}
	return success;
}

//==========================================================================
//
//	EV_ThingDestroy
//
//==========================================================================

bool EV_ThingDestroy(int tid)
{
	Actor A;
	int searcher;
	bool success;

	success = false;
	searcher = -1;
	for (A = Actor(FindMobjFromTID(tid, &searcher)); A;
		A = Actor(FindMobjFromTID(tid, &searcher)))
	{
		if (A.bShootable)
		{
			A.Damage(none, none, 10000);
			success = true;
		}
	}
	return success;
}

//==========================================================================
//
//	ThingCount
//
//==========================================================================

int ThingCount(int type, int tid)
{
	int count;
	int searcher;
	Actor Ent;
	classid moType;

	if (!(type + tid))
	{
		// Nothing to count
		return 0;
	}
	moType = TranslateThingType[type];
	count = 0;
	searcher = -1;
	if (tid)
	{
		// Count TID things
		for (Ent = Actor(FindMobjFromTID(tid, &searcher)); Ent != none;
			Ent = Actor(FindMobjFromTID(tid, &searcher)))
		{
			if (type == 0)
			{
				// Just count TIDs
				count++;
			}
			else if (moType == Ent.Class)
			{
				if (Ent.bCountKill && Ent.Health <= 0)
				{
					// Don't count dead monsters
					continue;
				}
				count++;
			}
		}
	}
	else
	{
		// Count only types
		FOREACH(Actor, Ent)
		{
			if (Ent.Class != moType)
			{
				// Doesn't match
				continue;
			}
			if (Ent.bCountKill && Ent.Health <= 0)
			{
				// Don't count dead monsters
				continue;
			}
			count++;
		}
	}
	return count;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.4  2005/11/17 23:05:22  dj_jl
//  Renamed sounds.
//
//  Revision 1.3  2005/03/16 15:04:20  dj_jl
//  More work on line specials.
//
//  Revision 1.2  2004/12/27 12:23:11  dj_jl
//  Multiple small changes for version 1.16
//
//  Revision 1.1  2004/11/01 07:38:22  dj_jl
//  Almost all Hexen line specials are available in all games.
//
//**************************************************************************
