//**************************************************************************
//**
//**	##   ##    ##    ##   ##   ####     ####   ###     ###
//**	##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**	 ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**	 ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**	  ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**	   #    ##    ##    #      ####     ####   ##       ##
//**
//**	$Id$
//**
//**	Copyright (C) 1999-2001 JÆnis Legzdi·ı
//**
//**	This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**	This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**	$Log$
//**	Revision 1.2  2001/07/27 14:27:51  dj_jl
//**	Update with Id-s and Log-s, some fixes
//**
//**************************************************************************
//**
//**	Mobj info table
//**
//**	Generated by makeinfo.
//**
//**************************************************************************

void generic_mobj_start(mobj_t *self, mthing_t *mthing);

//==========================================================================
//
//	misc_PLAYER
//
//==========================================================================

void misc_PLAYER(mobj_t *self, mthing_t *mthing)
{
	self->health = 100;
	self->spawnhealth = self->health;
	self->gibshealth = -100;
	self->radius = 16.0;
	self->height = 56.0;
	self->mass = 100.0;
	self->painchance = 255;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_DROPOFF|MF_PICKUP;
	self->spawnstate = S_PLAY;
	self->seestate = S_PLAY_RUN1;
	self->missilestate = S_PLAY_ATK1;
	self->painstate = S_PLAY_PAIN;
	self->deathstate = S_PLAY_DIE1;
	self->xdeathstate = S_PLAY_XDIE1;
	self->sound_pain = GetSoundID("PlayerPain");
	self->sound_death = GetSoundID("PlayerDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_zombieman
//
//==========================================================================

void misc_zombieman(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 20;
	self->spawnhealth = self->health;
	self->gibshealth = -20;
	self->radius = 20.0;
	self->height = 56.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 200;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_POSS_STND;
	self->seestate = S_POSS_RUN1;
	self->missilestate = S_POSS_ATK1;
	self->painstate = S_POSS_PAIN;
	self->deathstate = S_POSS_DIE1;
	self->xdeathstate = S_POSS_XDIE1;
	self->raisestate = S_POSS_RAISE1;
	self->sound_sight = GetSoundID("ZombieSight1");
	self->sound_active = GetSoundID("ZombieActive");
	self->sound_attack = GetSoundID("PistolFire");
	self->sound_pain = GetSoundID("ZombiePain");
	self->sound_death = GetSoundID("ZombieDeath1");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_shotgun_guy
//
//==========================================================================

void misc_shotgun_guy(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 30;
	self->spawnhealth = self->health;
	self->gibshealth = -30;
	self->radius = 20.0;
	self->height = 56.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 170;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_SPOS_STND;
	self->seestate = S_SPOS_RUN1;
	self->missilestate = S_SPOS_ATK1;
	self->painstate = S_SPOS_PAIN;
	self->deathstate = S_SPOS_DIE1;
	self->xdeathstate = S_SPOS_XDIE1;
	self->raisestate = S_SPOS_RAISE1;
	self->sound_sight = GetSoundID("ZombieSight2");
	self->sound_active = GetSoundID("ZombieActive");
	self->sound_pain = GetSoundID("ZombiePain");
	self->sound_death = GetSoundID("ZombieDeath2");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_arch_vile
//
//==========================================================================

void misc_arch_vile(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 700;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 56.0;
	self->mass = 500.0;
	self->speed = 525.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 10;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_VILE_STND;
	self->seestate = S_VILE_RUN1;
	self->missilestate = S_VILE_ATK1;
	self->painstate = S_VILE_PAIN;
	self->deathstate = S_VILE_DIE1;
	self->sound_sight = GetSoundID("ArchVileSight");
	self->sound_active = GetSoundID("ArchVileActive");
	self->sound_pain = GetSoundID("ArchVilePain");
	self->sound_death = GetSoundID("ArchVileDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FIRE
//
//==========================================================================

void misc_FIRE(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_FIRE1;
	self->effects = EF_DL_MISSILE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_REVENANT
//
//==========================================================================

void misc_REVENANT(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 300;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 56.0;
	self->mass = 500.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 100;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_SKEL_STND;
	self->seestate = S_SKEL_RUN1;
	self->meleestate = S_SKEL_FIST1;
	self->missilestate = S_SKEL_MISS1;
	self->painstate = S_SKEL_PAIN;
	self->deathstate = S_SKEL_DIE1;
	self->raisestate = S_SKEL_RAISE1;
	self->sound_sight = GetSoundID("RavenantSight");
	self->sound_active = GetSoundID("RavenantActive");
	self->sound_pain = GetSoundID("ZombiePain");
	self->sound_death = GetSoundID("RavenantDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TRACER
//
//==========================================================================

void misc_TRACER(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 11.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 10;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_TRACER;
	self->deathstate = S_TRACEEXP1;
	self->sound_sight = GetSoundID("RavenantAttack");
	self->sound_death = GetSoundID("BarrelExplode");
	self->effects = EF_DL_RBALL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SMOKE
//
//==========================================================================

void misc_SMOKE(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_SMOKE1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MANCUBUS
//
//==========================================================================

void misc_MANCUBUS(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 600;
	self->spawnhealth = self->health;
	self->radius = 48.0;
	self->height = 64.0;
	self->mass = 1000.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 80;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_FATT_STND;
	self->seestate = S_FATT_RUN1;
	self->missilestate = S_FATT_ATK1;
	self->painstate = S_FATT_PAIN;
	self->deathstate = S_FATT_DIE1;
	self->raisestate = S_FATT_RAISE1;
	self->sound_sight = GetSoundID("MancubusSight");
	self->sound_active = GetSoundID("ZombieActive");
	self->sound_pain = GetSoundID("MancubusPain");
	self->sound_death = GetSoundID("MancubusDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_FATSHOT
//
//==========================================================================

void misc_FATSHOT(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 700.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_FATSHOT1;
	self->deathstate = S_FATSHOTX1;
	self->sound_sight = GetSoundID("FireballShoot");
	self->sound_death = GetSoundID("FireballExplode");
	self->effects = EF_DL_RBALL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HEAVY_WEAPON_DUDE
//
//==========================================================================

void misc_HEAVY_WEAPON_DUDE(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 70;
	self->spawnhealth = self->health;
	self->gibshealth = -70;
	self->radius = 20.0;
	self->height = 56.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 170;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_CPOS_STND;
	self->seestate = S_CPOS_RUN1;
	self->missilestate = S_CPOS_ATK1;
	self->painstate = S_CPOS_PAIN;
	self->deathstate = S_CPOS_DIE1;
	self->xdeathstate = S_CPOS_XDIE1;
	self->raisestate = S_CPOS_RAISE1;
	self->sound_sight = GetSoundID("ZombieSight2");
	self->sound_active = GetSoundID("ZombieActive");
	self->sound_pain = GetSoundID("ZombiePain");
	self->sound_death = GetSoundID("ZombieDeath2");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_IMP
//
//==========================================================================

void misc_IMP(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 60;
	self->spawnhealth = self->health;
	self->gibshealth = -60;
	self->radius = 20.0;
	self->height = 56.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 200;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_TROO_STND;
	self->seestate = S_TROO_RUN1;
	self->meleestate = S_TROO_ATK1;
	self->missilestate = S_TROO_ATK1;
	self->painstate = S_TROO_PAIN;
	self->deathstate = S_TROO_DIE1;
	self->xdeathstate = S_TROO_XDIE1;
	self->raisestate = S_TROO_RAISE1;
	self->sound_sight = GetSoundID("ImpSight1");
	self->sound_active = GetSoundID("ImpActive");
	self->sound_pain = GetSoundID("ZombiePain");
	self->sound_death = GetSoundID("ImpDeath1");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_DEMON
//
//==========================================================================

void misc_DEMON(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 150;
	self->spawnhealth = self->health;
	self->radius = 30.0;
	self->height = 56.0;
	self->mass = 400.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 180;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_SARG_STND;
	self->seestate = S_SARG_RUN1;
	self->meleestate = S_SARG_ATK1;
	self->painstate = S_SARG_PAIN;
	self->deathstate = S_SARG_DIE1;
	self->raisestate = S_SARG_RAISE1;
	self->sound_sight = GetSoundID("DemonSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_attack = GetSoundID("DemonAttack");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("DemonDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SHADOWS
//
//==========================================================================

void misc_SHADOWS(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 90;
	self->health = 150;
	self->spawnhealth = self->health;
	self->radius = 30.0;
	self->height = 56.0;
	self->mass = 400.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 180;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_SARG_STND;
	self->seestate = S_SARG_RUN1;
	self->meleestate = S_SARG_ATK1;
	self->painstate = S_SARG_PAIN;
	self->deathstate = S_SARG_DIE1;
	self->raisestate = S_SARG_RAISE1;
	self->sound_sight = GetSoundID("DemonSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_attack = GetSoundID("DemonAttack");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("DemonDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CACODEMON
//
//==========================================================================

void misc_CACODEMON(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 400;
	self->spawnhealth = self->health;
	self->radius = 31.0;
	self->height = 56.0;
	self->mass = 400.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 128;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOGRAVITY|MF_FLOAT|MF_COUNTKILL;
	self->spawnstate = S_HEAD_STND;
	self->seestate = S_HEAD_RUN1;
	self->missilestate = S_HEAD_ATK1;
	self->painstate = S_HEAD_PAIN;
	self->deathstate = S_HEAD_DIE1;
	self->raisestate = S_HEAD_RAISE1;
	self->sound_sight = GetSoundID("CacoSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("CacoDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BARON_OF_HELL
//
//==========================================================================

void misc_BARON_OF_HELL(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 24.0;
	self->height = 64.0;
	self->mass = 1000.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 50;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_BOSS_STND;
	self->seestate = S_BOSS_RUN1;
	self->meleestate = S_BOSS_ATK1;
	self->missilestate = S_BOSS_ATK1;
	self->painstate = S_BOSS_PAIN;
	self->deathstate = S_BOSS_DIE1;
	self->raisestate = S_BOSS_RAISE1;
	self->sound_sight = GetSoundID("BaronSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("BaronDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BRUISERSHOT
//
//==========================================================================

void misc_BRUISERSHOT(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 525.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_BRBALL1;
	self->deathstate = S_BRBALLX1;
	self->sound_sight = GetSoundID("FireballShoot");
	self->sound_death = GetSoundID("FireballExplode");
	self->effects = EF_DL_GBALL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HELL_KNIGHT
//
//==========================================================================

void misc_HELL_KNIGHT(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 500;
	self->spawnhealth = self->health;
	self->radius = 24.0;
	self->height = 64.0;
	self->mass = 1000.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 50;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_BOS2_STND;
	self->seestate = S_BOS2_RUN1;
	self->meleestate = S_BOS2_ATK1;
	self->missilestate = S_BOS2_ATK1;
	self->painstate = S_BOS2_PAIN;
	self->deathstate = S_BOS2_DIE1;
	self->raisestate = S_BOS2_RAISE1;
	self->sound_sight = GetSoundID("KnightSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("KnightDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_LOST_SOUL
//
//==========================================================================

void misc_LOST_SOUL(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->translucency = 33;
	self->health = 100;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 56.0;
	self->mass = 50.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 256;
	self->damage = 3;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOGRAVITY|MF_FLOAT;
	self->spawnstate = S_SKULL_STND;
	self->seestate = S_SKULL_RUN1;
	self->missilestate = S_SKULL_ATK1;
	self->painstate = S_SKULL_PAIN;
	self->deathstate = S_SKULL_DIE1;
	self->sound_active = GetSoundID("DemonActive");
	self->sound_attack = GetSoundID("LostSoulAttack");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("FireballExplode");
	self->effects = EF_DL_MISSILE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_THE_SPIDER_MASTERMIND
//
//==========================================================================

void misc_THE_SPIDER_MASTERMIND(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 3000;
	self->spawnhealth = self->health;
	self->radius = 128.0;
	self->height = 100.0;
	self->mass = 1000.0;
	self->speed = 420.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 40;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_SPID_STND;
	self->seestate = S_SPID_RUN1;
	self->missilestate = S_SPID_ATK1;
	self->painstate = S_SPID_PAIN;
	self->deathstate = S_SPID_DIE1;
	self->sound_sight = GetSoundID("SpiderSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_attack = GetSoundID("ShotgunFire");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("SpiderDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARACHNOTRON
//
//==========================================================================

void misc_ARACHNOTRON(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 500;
	self->spawnhealth = self->health;
	self->radius = 64.0;
	self->height = 64.0;
	self->mass = 600.0;
	self->speed = 420.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 128;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_BSPI_STND;
	self->seestate = S_BSPI_SIGHT;
	self->missilestate = S_BSPI_ATK1;
	self->painstate = S_BSPI_PAIN;
	self->deathstate = S_BSPI_DIE1;
	self->raisestate = S_BSPI_RAISE1;
	self->sound_sight = GetSoundID("BabySight");
	self->sound_active = GetSoundID("BabyActive");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("BabyDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_THE_CYBERDEMON
//
//==========================================================================

void misc_THE_CYBERDEMON(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 4000;
	self->spawnhealth = self->health;
	self->radius = 40.0;
	self->height = 110.0;
	self->mass = 1000.0;
	self->speed = 560.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 20;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_CYBER_STND;
	self->seestate = S_CYBER_RUN1;
	self->missilestate = S_CYBER_ATK1;
	self->painstate = S_CYBER_PAIN;
	self->deathstate = S_CYBER_DIE1;
	self->sound_sight = GetSoundID("CyberSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_pain = GetSoundID("DemonPain");
	self->sound_death = GetSoundID("CyberDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PAIN_ELEMENTAL
//
//==========================================================================

void misc_PAIN_ELEMENTAL(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 400;
	self->spawnhealth = self->health;
	self->radius = 31.0;
	self->height = 56.0;
	self->mass = 400.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 128;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOGRAVITY|MF_FLOAT|MF_COUNTKILL;
	self->spawnstate = S_PAIN_STND;
	self->seestate = S_PAIN_RUN1;
	self->missilestate = S_PAIN_ATK1;
	self->painstate = S_PAIN_PAIN;
	self->deathstate = S_PAIN_DIE1;
	self->raisestate = S_PAIN_RAISE1;
	self->sound_sight = GetSoundID("PainElementalSight");
	self->sound_active = GetSoundID("DemonActive");
	self->sound_pain = GetSoundID("PainElementalPain");
	self->sound_death = GetSoundID("PainElementalDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_WOLFSS
//
//==========================================================================

void misc_WOLFSS(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 50;
	self->spawnhealth = self->health;
	self->gibshealth = -50;
	self->radius = 20.0;
	self->height = 56.0;
	self->mass = 100.0;
	self->speed = 280.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 170;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_COUNTKILL;
	self->spawnstate = S_SSWV_STND;
	self->seestate = S_SSWV_RUN1;
	self->missilestate = S_SSWV_ATK1;
	self->painstate = S_SSWV_PAIN;
	self->deathstate = S_SSWV_DIE1;
	self->xdeathstate = S_SSWV_XDIE1;
	self->raisestate = S_SSWV_RAISE1;
	self->sound_sight = GetSoundID("SSNaziSight");
	self->sound_active = GetSoundID("ZombieActive");
	self->sound_pain = GetSoundID("ZombiePain");
	self->sound_death = GetSoundID("SSNaziDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_KEEN
//
//==========================================================================

void misc_KEEN(mobj_t *self, mthing_t *mthing)
{
	if (nomonsters)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 100;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 72.0;
	self->mass = 10000000.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 256;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_SPAWNCEILING|MF_NOGRAVITY|MF_COUNTKILL;
	self->spawnstate = S_KEENSTND;
	self->painstate = S_KEENPAIN;
	self->deathstate = S_COMMKEEN;
	self->sound_pain = GetSoundID("KeenPain");
	self->sound_death = GetSoundID("KeenDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BOSSBRAIN
//
//==========================================================================

void misc_BOSSBRAIN(mobj_t *self, mthing_t *mthing)
{
	self->health = 250;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 16.0;
	self->mass = 10000000.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->painchance = 255;
	self->flags = MF_SOLID|MF_SHOOTABLE;
	self->spawnstate = S_BRAIN;
	self->painstate = S_BRAIN_PAIN;
	self->deathstate = S_BRAIN_DIE1;
	self->sound_pain = GetSoundID("BossPain");
	self->sound_death = GetSoundID("BossDeath");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BOSSSPIT
//
//==========================================================================

void misc_BOSSSPIT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP;
	self->spawnstate = S_BRAINEYE;
	self->seestate = S_BRAINEYESEE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BOSSTARGET
//
//==========================================================================

void misc_BOSSTARGET(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SPAWNSHOT
//
//==========================================================================

void misc_SPAWNSHOT(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 32.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 3;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_NOCLIP|MF_MISSILE;
	self->spawnstate = S_SPAWN1;
	self->sound_sight = GetSoundID("BossFire");
	self->sound_death = GetSoundID("FireballExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SPAWNFIRE
//
//==========================================================================

void misc_SPAWNFIRE(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_SPAWNFIRE1;
	self->effects = EF_DL_MISSILE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BARREL
//
//==========================================================================

void misc_BARREL(mobj_t *self, mthing_t *mthing)
{
	self->health = 20;
	self->spawnhealth = self->health;
	self->radius = 10.0;
	self->height = 42.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SHOOTABLE|MF_NOBLOOD;
	self->spawnstate = S_BAR1;
	self->deathstate = S_BEXP;
	self->sound_death = GetSoundID("BarrelExplode");
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TROOPSHOT
//
//==========================================================================

void misc_TROOPSHOT(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 3;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_TBALL1;
	self->deathstate = S_TBALLX1;
	self->sound_sight = GetSoundID("FireballShoot");
	self->sound_death = GetSoundID("FireballExplode");
	self->effects = EF_DL_RBALL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_HEADSHOT
//
//==========================================================================

void misc_HEADSHOT(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 6.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 350.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 5;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_RBALL1;
	self->deathstate = S_RBALLX1;
	self->sound_sight = GetSoundID("FireballShoot");
	self->sound_death = GetSoundID("FireballExplode");
	self->effects = EF_DL_RBALL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ROCKET
//
//==========================================================================

void misc_ROCKET(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 11.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 700.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 20;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_ROCKET;
	self->deathstate = S_EXPLODE1;
	self->sound_sight = GetSoundID("LauncherFire");
	self->sound_death = GetSoundID("BarrelExplode");
	self->effects = EF_DL_MISSILE | EF_ROCKET;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PLASMA
//
//==========================================================================

void misc_PLASMA(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 13.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 5;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_PLASBALL;
	self->deathstate = S_PLASEXP;
	self->sound_sight = GetSoundID("PlasmaFire");
	self->sound_death = GetSoundID("FireballExplode");
	self->effects = EF_DL_PLASMA;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BFG
//
//==========================================================================

void misc_BFG(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 13.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 100;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_BFGSHOT;
	self->deathstate = S_BFGLAND;
	self->sound_death = GetSoundID("RocketExplode");
	self->effects = EF_DL_GBALL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_ARACHPLAZ
//
//==========================================================================

void misc_ARACHPLAZ(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 13.0;
	self->height = 8.0;
	self->mass = 100.0;
	self->speed = 875.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->damage = 5;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY|MF_DROPOFF|MF_MISSILE;
	self->spawnstate = S_ARACH_PLAZ;
	self->deathstate = S_ARACH_PLEX;
	self->sound_sight = GetSoundID("PlasmaFire");
	self->sound_death = GetSoundID("FireballExplode");
	self->effects = EF_DL_MISSILE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_PUFF
//
//==========================================================================

void misc_PUFF(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_PUFF1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_BLOOD
//
//==========================================================================

void misc_BLOOD(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_BLOOD1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TFOG
//
//==========================================================================

void misc_TFOG(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_TFOG;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_IFOG
//
//==========================================================================

void misc_IFOG(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_IFOG;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_TELEPORTMAN
//
//==========================================================================

void misc_TELEPORTMAN(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOSECTOR|MF_NOBLOCKMAP;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_EXTRABFG
//
//==========================================================================

void misc_EXTRABFG(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP|MF_NOGRAVITY;
	self->spawnstate = S_BFGEXP;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC0
//
//==========================================================================

void misc_MISC0(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_ARM1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC1
//
//==========================================================================

void misc_MISC1(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_ARM2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC2
//
//==========================================================================

void misc_MISC2(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_COUNTITEM;
	self->spawnstate = S_BON1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC3
//
//==========================================================================

void misc_MISC3(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_COUNTITEM;
	self->spawnstate = S_BON2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC4
//
//==========================================================================

void misc_MISC4(mobj_t *self, mthing_t *mthing)
{
	if (deathmatch)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_BKEY;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC5
//
//==========================================================================

void misc_MISC5(mobj_t *self, mthing_t *mthing)
{
	if (deathmatch)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_RKEY;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC6
//
//==========================================================================

void misc_MISC6(mobj_t *self, mthing_t *mthing)
{
	if (deathmatch)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_YKEY;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC7
//
//==========================================================================

void misc_MISC7(mobj_t *self, mthing_t *mthing)
{
	if (deathmatch)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_YSKULL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC8
//
//==========================================================================

void misc_MISC8(mobj_t *self, mthing_t *mthing)
{
	if (deathmatch)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_RSKULL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC9
//
//==========================================================================

void misc_MISC9(mobj_t *self, mthing_t *mthing)
{
	if (deathmatch)
	{
		RemoveMobjThinker(self);
		return;
	}
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_BSKULL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC10
//
//==========================================================================

void misc_MISC10(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_STIM;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC11
//
//==========================================================================

void misc_MISC11(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_MEDI;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC12
//
//==========================================================================

void misc_MISC12(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_COUNTITEM;
	self->spawnstate = S_SOUL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_INV
//
//==========================================================================

void misc_INV(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_COUNTITEM;
	self->spawnstate = S_PINV;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC13
//
//==========================================================================

void misc_MISC13(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_COUNTITEM;
	self->spawnstate = S_PSTR;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_INS
//
//==========================================================================

void misc_INS(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_COUNTITEM;
	self->spawnstate = S_PINS;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC14
//
//==========================================================================

void misc_MISC14(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_SUIT;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC15
//
//==========================================================================

void misc_MISC15(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_COUNTITEM;
	self->spawnstate = S_PMAP;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC16
//
//==========================================================================

void misc_MISC16(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_COUNTITEM;
	self->spawnstate = S_PVIS;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MEGA
//
//==========================================================================

void misc_MEGA(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL|MF_COUNTITEM;
	self->spawnstate = S_MEGA;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CLIP
//
//==========================================================================

void misc_CLIP(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_CLIP;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC17
//
//==========================================================================

void misc_MISC17(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_AMMO;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC18
//
//==========================================================================

void misc_MISC18(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_ROCK;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC19
//
//==========================================================================

void misc_MISC19(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_BROK;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC20
//
//==========================================================================

void misc_MISC20(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_CELL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC21
//
//==========================================================================

void misc_MISC21(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_CELP;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC22
//
//==========================================================================

void misc_MISC22(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_SHEL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC23
//
//==========================================================================

void misc_MISC23(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_SBOX;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC24
//
//==========================================================================

void misc_MISC24(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_BPAK;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC25
//
//==========================================================================

void misc_MISC25(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_BFUG;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_CHAINGUN
//
//==========================================================================

void misc_CHAINGUN(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_MGUN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC26
//
//==========================================================================

void misc_MISC26(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_CSAW;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC27
//
//==========================================================================

void misc_MISC27(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_LAUN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC28
//
//==========================================================================

void misc_MISC28(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_PLAS;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SHOTGUN
//
//==========================================================================

void misc_SHOTGUN(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_SHOT;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_SUPERSHOTGUN
//
//==========================================================================

void misc_SUPERSHOTGUN(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPECIAL;
	self->spawnstate = S_SHOT2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC29
//
//==========================================================================

void misc_MISC29(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 72.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_TECHLAMP;
	generic_mobj_start(self, mthing);
	AddStaticLight(self->origin + vector(0.0, 0.0, 64.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 200.0);
}

//==========================================================================
//
//	misc_MISC30
//
//==========================================================================

void misc_MISC30(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 56.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_TECH2LAMP;
	generic_mobj_start(self, mthing);
	AddStaticLight(self->origin + vector(0.0, 0.0, 48.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 200.0);
}

//==========================================================================
//
//	misc_MISC31
//
//==========================================================================

void misc_MISC31(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 48.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_COLU;
	generic_mobj_start(self, mthing);
	AddStaticLight(self->origin + vector(0.0, 0.0, 32.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 200.0);
}

//==========================================================================
//
//	misc_MISC32
//
//==========================================================================

void misc_MISC32(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 52.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_TALLGRNCOL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC33
//
//==========================================================================

void misc_MISC33(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_SHRTGRNCOL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC34
//
//==========================================================================

void misc_MISC34(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 52.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_TALLREDCOL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC35
//
//==========================================================================

void misc_MISC35(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_SHRTREDCOL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC36
//
//==========================================================================

void misc_MISC36(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_SKULLCOL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC37
//
//==========================================================================

void misc_MISC37(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_HEARTCOL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC38
//
//==========================================================================

void misc_MISC38(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_EVILEYE;
	generic_mobj_start(self, mthing);
	AddStaticLight(self->origin + vector(0.0, 0.0, 32.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 128.0);
}

//==========================================================================
//
//	misc_MISC39
//
//==========================================================================

void misc_MISC39(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 48.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_FLOATSKULL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC40
//
//==========================================================================

void misc_MISC40(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_TORCHTREE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC41
//
//==========================================================================

void misc_MISC41(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_BLUETORCH;
	generic_mobj_start(self, mthing);
	AddStaticLightRGB(self->origin + vector(0.0, 0.0, 32.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 200.0, RGB(0, 0, 255));
}

//==========================================================================
//
//	misc_MISC42
//
//==========================================================================

void misc_MISC42(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_GREENTORCH;
	generic_mobj_start(self, mthing);
	AddStaticLightRGB(self->origin + vector(0.0, 0.0, 32.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 200.0, RGB(0, 255, 0));
}

//==========================================================================
//
//	misc_MISC43
//
//==========================================================================

void misc_MISC43(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_REDTORCH;
	generic_mobj_start(self, mthing);
	AddStaticLightRGB(self->origin + vector(0.0, 0.0, 32.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 200.0, RGB(255, 0, 0));
}

//==========================================================================
//
//	misc_MISC44
//
//==========================================================================

void misc_MISC44(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_BTORCHSHRT;
	generic_mobj_start(self, mthing);
	AddStaticLightRGB(self->origin + vector(0.0, 0.0, 16.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 200.0, RGB(0, 0, 255));
}

//==========================================================================
//
//	misc_MISC45
//
//==========================================================================

void misc_MISC45(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_GTORCHSHRT;
	generic_mobj_start(self, mthing);
	AddStaticLightRGB(self->origin + vector(0.0, 0.0, 16.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 200.0, RGB(0, 255, 0));
}

//==========================================================================
//
//	misc_MISC46
//
//==========================================================================

void misc_MISC46(mobj_t *self, mthing_t *mthing)
{
	self->translucency = 33;
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_RTORCHSHRT;
	generic_mobj_start(self, mthing);
	AddStaticLightRGB(self->origin + vector(0.0, 0.0, 16.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 200.0, RGB(255, 0, 0));
}

//==========================================================================
//
//	misc_MISC47
//
//==========================================================================

void misc_MISC47(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 40.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_STALAGTITE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC48
//
//==========================================================================

void misc_MISC48(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 120.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_TECHPILLAR;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC49
//
//==========================================================================

void misc_MISC49(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_CANDLESTIK;
	generic_mobj_start(self, mthing);
	AddStaticLight(self->origin, mthing->arg1 ? itof(mthing->arg1) * 8.0 : 64.0);
}

//==========================================================================
//
//	misc_MISC50
//
//==========================================================================

void misc_MISC50(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 56.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_CANDELABRA;
	generic_mobj_start(self, mthing);
	AddStaticLight(self->origin + vector(0.0, 0.0, 32.0),
		mthing->arg1 ? itof(mthing->arg1) * 8.0 : 128.0);
}

//==========================================================================
//
//	misc_MISC51
//
//==========================================================================

void misc_MISC51(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 68.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_BLOODYTWITCH;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC52
//
//==========================================================================

void misc_MISC52(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 84.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_MEAT2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC53
//
//==========================================================================

void misc_MISC53(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 84.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_MEAT3;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC54
//
//==========================================================================

void misc_MISC54(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 68.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_MEAT4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC55
//
//==========================================================================

void misc_MISC55(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 52.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_MEAT5;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC56
//
//==========================================================================

void misc_MISC56(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 84.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_MEAT2;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC57
//
//==========================================================================

void misc_MISC57(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 68.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_MEAT4;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC58
//
//==========================================================================

void misc_MISC58(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 52.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_MEAT3;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC59
//
//==========================================================================

void misc_MISC59(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 52.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_MEAT5;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC60
//
//==========================================================================

void misc_MISC60(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 68.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_BLOODYTWITCH;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC61
//
//==========================================================================

void misc_MISC61(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_HEAD_DIE6;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC62
//
//==========================================================================

void misc_MISC62(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_PLAY_DIE7;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC63
//
//==========================================================================

void misc_MISC63(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_POSS_DIE5;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC64
//
//==========================================================================

void misc_MISC64(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_SARG_DIE6;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC65
//
//==========================================================================

void misc_MISC65(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_SKULL_DIE6;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC66
//
//==========================================================================

void misc_MISC66(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_TROO_DIE5;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC67
//
//==========================================================================

void misc_MISC67(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_SPOS_DIE5;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC68
//
//==========================================================================

void misc_MISC68(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_PLAY_XDIE9;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC69
//
//==========================================================================

void misc_MISC69(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_PLAY_XDIE9;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC70
//
//==========================================================================

void misc_MISC70(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_HEADSONSTICK;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC71
//
//==========================================================================

void misc_MISC71(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->spawnstate = S_GIBS;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC72
//
//==========================================================================

void misc_MISC72(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 56.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_HEADONASTICK;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC73
//
//==========================================================================

void misc_MISC73(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 48.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_HEADCANDLES;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC74
//
//==========================================================================

void misc_MISC74(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_DEADSTICK;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC75
//
//==========================================================================

void misc_MISC75(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_LIVESTICK;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC76
//
//==========================================================================

void misc_MISC76(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 32.0;
	self->height = 96.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_BIGTREE;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC77
//
//==========================================================================

void misc_MISC77(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 32.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID;
	self->spawnstate = S_BBAR1;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC78
//
//==========================================================================

void misc_MISC78(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 88.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_HANGNOGUTS;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC79
//
//==========================================================================

void misc_MISC79(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 88.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_HANGBNOBRAIN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC80
//
//==========================================================================

void misc_MISC80(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_HANGTLOOKDN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC81
//
//==========================================================================

void misc_MISC81(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_HANGTSKULL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC82
//
//==========================================================================

void misc_MISC82(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_HANGTLOOKUP;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC83
//
//==========================================================================

void misc_MISC83(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 16.0;
	self->height = 64.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_SOLID|MF_SPAWNCEILING|MF_NOGRAVITY;
	self->spawnstate = S_HANGTNOBRAIN;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC84
//
//==========================================================================

void misc_MISC84(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_COLONGIBS;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC85
//
//==========================================================================

void misc_MISC85(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_SMALLPOOL;
	generic_mobj_start(self, mthing);
}

//==========================================================================
//
//	misc_MISC86
//
//==========================================================================

void misc_MISC86(mobj_t *self, mthing_t *mthing)
{
	self->health = 1000;
	self->spawnhealth = self->health;
	self->radius = 20.0;
	self->height = 16.0;
	self->mass = 100.0;
	if (gameskill != sk_nightmare)
		self->reactiontime = 8;
	self->flags = MF_NOBLOCKMAP;
	self->spawnstate = S_BRAINSTEM;
	generic_mobj_start(self, mthing);
}

__mobjinfo__
{
	MT_PLAYER { -1, misc_PLAYER }
	MT_POSSESSED { 3004, misc_zombieman }
	MT_SHOTGUY { 9, misc_shotgun_guy }
	MT_VILE { 64, misc_arch_vile }
	MT_FIRE { -1, misc_FIRE }
	MT_UNDEAD { 66, misc_REVENANT }
	MT_TRACER { -1, misc_TRACER }
	MT_SMOKE { -1, misc_SMOKE }
	MT_FATSO { 67, misc_MANCUBUS }
	MT_FATSHOT { -1, misc_FATSHOT }
	MT_CHAINGUY { 65, misc_HEAVY_WEAPON_DUDE }
	MT_TROOP { 3001, misc_IMP }
	MT_SERGEANT { 3002, misc_DEMON }
	MT_SHADOWS { 58, misc_SHADOWS }
	MT_HEAD { 3005, misc_CACODEMON }
	MT_BRUISER { 3003, misc_BARON_OF_HELL }
	MT_BRUISERSHOT { -1, misc_BRUISERSHOT }
	MT_KNIGHT { 69, misc_HELL_KNIGHT }
	MT_SKULL { 3006, misc_LOST_SOUL }
	MT_SPIDER { 7, misc_THE_SPIDER_MASTERMIND }
	MT_BABY { 68, misc_ARACHNOTRON }
	MT_CYBORG { 16, misc_THE_CYBERDEMON }
	MT_PAIN { 71, misc_PAIN_ELEMENTAL }
	MT_WOLFSS { 84, misc_WOLFSS }
	MT_KEEN { 72, misc_KEEN }
	MT_BOSSBRAIN { 88, misc_BOSSBRAIN }
	MT_BOSSSPIT { 89, misc_BOSSSPIT }
	MT_BOSSTARGET { 87, misc_BOSSTARGET }
	MT_SPAWNSHOT { -1, misc_SPAWNSHOT }
	MT_SPAWNFIRE { -1, misc_SPAWNFIRE }
	MT_BARREL { 2035, misc_BARREL }
	MT_TROOPSHOT { -1, misc_TROOPSHOT }
	MT_HEADSHOT { -1, misc_HEADSHOT }
	MT_ROCKET { -1, misc_ROCKET }
	MT_PLASMA { -1, misc_PLASMA }
	MT_BFG { -1, misc_BFG }
	MT_ARACHPLAZ { -1, misc_ARACHPLAZ }
	MT_PUFF { -1, misc_PUFF }
	MT_BLOOD { -1, misc_BLOOD }
	MT_TFOG { -1, misc_TFOG }
	MT_IFOG { -1, misc_IFOG }
	MT_TELEPORTMAN { 14, misc_TELEPORTMAN }
	MT_EXTRABFG { -1, misc_EXTRABFG }
	MT_MISC0 { 2018, misc_MISC0 }
	MT_MISC1 { 2019, misc_MISC1 }
	MT_MISC2 { 2014, misc_MISC2 }
	MT_MISC3 { 2015, misc_MISC3 }
	MT_MISC4 { 5, misc_MISC4 }
	MT_MISC5 { 13, misc_MISC5 }
	MT_MISC6 { 6, misc_MISC6 }
	MT_MISC7 { 39, misc_MISC7 }
	MT_MISC8 { 38, misc_MISC8 }
	MT_MISC9 { 40, misc_MISC9 }
	MT_MISC10 { 2011, misc_MISC10 }
	MT_MISC11 { 2012, misc_MISC11 }
	MT_MISC12 { 2013, misc_MISC12 }
	MT_INV { 2022, misc_INV }
	MT_MISC13 { 2023, misc_MISC13 }
	MT_INS { 2024, misc_INS }
	MT_MISC14 { 2025, misc_MISC14 }
	MT_MISC15 { 2026, misc_MISC15 }
	MT_MISC16 { 2045, misc_MISC16 }
	MT_MEGA { 83, misc_MEGA }
	MT_CLIP { 2007, misc_CLIP }
	MT_MISC17 { 2048, misc_MISC17 }
	MT_MISC18 { 2010, misc_MISC18 }
	MT_MISC19 { 2046, misc_MISC19 }
	MT_MISC20 { 2047, misc_MISC20 }
	MT_MISC21 { 17, misc_MISC21 }
	MT_MISC22 { 2008, misc_MISC22 }
	MT_MISC23 { 2049, misc_MISC23 }
	MT_MISC24 { 8, misc_MISC24 }
	MT_MISC25 { 2006, misc_MISC25 }
	MT_CHAINGUN { 2002, misc_CHAINGUN }
	MT_MISC26 { 2005, misc_MISC26 }
	MT_MISC27 { 2003, misc_MISC27 }
	MT_MISC28 { 2004, misc_MISC28 }
	MT_SHOTGUN { 2001, misc_SHOTGUN }
	MT_SUPERSHOTGUN { 82, misc_SUPERSHOTGUN }
	MT_MISC29 { 85, misc_MISC29 }
	MT_MISC30 { 86, misc_MISC30 }
	MT_MISC31 { 2028, misc_MISC31 }
	MT_MISC32 { 30, misc_MISC32 }
	MT_MISC33 { 31, misc_MISC33 }
	MT_MISC34 { 32, misc_MISC34 }
	MT_MISC35 { 33, misc_MISC35 }
	MT_MISC36 { 37, misc_MISC36 }
	MT_MISC37 { 36, misc_MISC37 }
	MT_MISC38 { 41, misc_MISC38 }
	MT_MISC39 { 42, misc_MISC39 }
	MT_MISC40 { 43, misc_MISC40 }
	MT_MISC41 { 44, misc_MISC41 }
	MT_MISC42 { 45, misc_MISC42 }
	MT_MISC43 { 46, misc_MISC43 }
	MT_MISC44 { 55, misc_MISC44 }
	MT_MISC45 { 56, misc_MISC45 }
	MT_MISC46 { 57, misc_MISC46 }
	MT_MISC47 { 47, misc_MISC47 }
	MT_MISC48 { 48, misc_MISC48 }
	MT_MISC49 { 34, misc_MISC49 }
	MT_MISC50 { 35, misc_MISC50 }
	MT_MISC51 { 49, misc_MISC51 }
	MT_MISC52 { 50, misc_MISC52 }
	MT_MISC53 { 51, misc_MISC53 }
	MT_MISC54 { 52, misc_MISC54 }
	MT_MISC55 { 53, misc_MISC55 }
	MT_MISC56 { 59, misc_MISC56 }
	MT_MISC57 { 60, misc_MISC57 }
	MT_MISC58 { 61, misc_MISC58 }
	MT_MISC59 { 62, misc_MISC59 }
	MT_MISC60 { 63, misc_MISC60 }
	MT_MISC61 { 22, misc_MISC61 }
	MT_MISC62 { 15, misc_MISC62 }
	MT_MISC63 { 18, misc_MISC63 }
	MT_MISC64 { 21, misc_MISC64 }
	MT_MISC65 { 23, misc_MISC65 }
	MT_MISC66 { 20, misc_MISC66 }
	MT_MISC67 { 19, misc_MISC67 }
	MT_MISC68 { 10, misc_MISC68 }
	MT_MISC69 { 12, misc_MISC69 }
	MT_MISC70 { 28, misc_MISC70 }
	MT_MISC71 { 24, misc_MISC71 }
	MT_MISC72 { 27, misc_MISC72 }
	MT_MISC73 { 29, misc_MISC73 }
	MT_MISC74 { 25, misc_MISC74 }
	MT_MISC75 { 26, misc_MISC75 }
	MT_MISC76 { 54, misc_MISC76 }
	MT_MISC77 { 70, misc_MISC77 }
	MT_MISC78 { 73, misc_MISC78 }
	MT_MISC79 { 74, misc_MISC79 }
	MT_MISC80 { 75, misc_MISC80 }
	MT_MISC81 { 76, misc_MISC81 }
	MT_MISC82 { 77, misc_MISC82 }
	MT_MISC83 { 78, misc_MISC83 }
	MT_MISC84 { 79, misc_MISC84 }
	MT_MISC85 { 80, misc_MISC85 }
	MT_MISC86 { 81, misc_MISC86 }
}