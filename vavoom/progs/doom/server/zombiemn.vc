//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//
//	Zombieman
//
//**************************************************************************

class Zombieman:Pawn
	__mobjinfo__(3004)
{

//==========================================================================
//
//  A_PosAttack
//
//  Zombieman attack.
//
//==========================================================================

void A_PosAttack(void)
{
	int damage;
	TVec dir;

	if (!Enemy)
		return;

	A_FaceTarget();

	dir = AimLineAttack(self, Angles, MISSILERANGE);
	VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);

	PlaySound('PistolFire', CHAN_WEAPON);

	damage = ((P_Random() % 5) + 1) * 3;

	LineAttack(self, dir, MISSILERANGE, damage);

	Effects |= EF_DL_MUZZLEFLASH;
}

__states__
{
	S_POSS_STND('POSS', 0, 'monsters/trooper.md2', 0, 10.0 / 35.0, S_POSS_STND2) { A_Look(); }
	S_POSS_STND2('POSS', 1, 'monsters/trooper.md2', 1, 10.0 / 35.0, S_POSS_STND) { A_Look(); }
	S_POSS_RUN1('POSS', 0, 'monsters/trooper.md2', 2, 4.0 / 35.0, S_POSS_RUN2) { A_Chase(); }
	S_POSS_RUN2('POSS', 0, 'monsters/trooper.md2', 3, 4.0 / 35.0, S_POSS_RUN3) { A_Chase(); }
	S_POSS_RUN3('POSS', 1, 'monsters/trooper.md2', 4, 4.0 / 35.0, S_POSS_RUN4) { A_Chase(); }
	S_POSS_RUN4('POSS', 1, 'monsters/trooper.md2', 5, 4.0 / 35.0, S_POSS_RUN5) { A_Chase(); }
	S_POSS_RUN5('POSS', 2, 'monsters/trooper.md2', 6, 4.0 / 35.0, S_POSS_RUN6) { A_Chase(); }
	S_POSS_RUN6('POSS', 2, 'monsters/trooper.md2', 7, 4.0 / 35.0, S_POSS_RUN7) { A_Chase(); }
	S_POSS_RUN7('POSS', 3, 'monsters/trooper.md2', 8, 4.0 / 35.0, S_POSS_RUN8) { A_Chase(); }
	S_POSS_RUN8('POSS', 3, 'monsters/trooper.md2', 9, 4.0 / 35.0, S_POSS_RUN1) { A_Chase(); }
	S_POSS_ATK1('POSS', 4, 'monsters/trooper.md2', 10, 10.0 / 35.0, S_POSS_ATK2) { A_FaceTarget(); }
	S_POSS_ATK2('POSS', 5, 'monsters/trooper.md2', 11, 8.0 / 35.0, S_POSS_ATK3) { A_PosAttack(); }
	S_POSS_ATK3('POSS', 4, 'monsters/trooper.md2', 12, 8.0 / 35.0, S_POSS_RUN1) { }
	S_POSS_PAIN('POSS', 6, 'monsters/trooper.md2', 13, 3.0 / 35.0, S_POSS_PAIN2) { }
	S_POSS_PAIN2('POSS', 6, 'monsters/trooper.md2', 14, 3.0 / 35.0, S_POSS_RUN1) { A_Pain(); }
	S_POSS_DIE1('POSS', 7, 'monsters/troopdie.md2', 0, 5.0 / 35.0, S_POSS_DIE2) { }
	S_POSS_DIE2('POSS', 8, 'monsters/troopdie.md2', 1, 5.0 / 35.0, S_POSS_DIE3) { A_Scream(); }
	S_POSS_DIE3('POSS', 9, 'monsters/troopdie.md2', 2, 5.0 / 35.0, S_POSS_DIE4) { A_Fall(); }
	S_POSS_DIE4('POSS', 10, 'monsters/troopdie.md2', 3, 5.0 / 35.0, S_POSS_DIE5) { }
	S_POSS_DIE5('POSS', 11, 'monsters/troopdie.md2', 4, -1.0, S_NULL) { }
	S_POSS_XDIE1('POSS', 12, 'gibs/troopgib.md2', 0, 5.0 / 35.0, S_POSS_XDIE2) { }
	S_POSS_XDIE2('POSS', 13, 'gibs/troopgib.md2', 1, 5.0 / 35.0, S_POSS_XDIE3) { A_XScream(); }
	S_POSS_XDIE3('POSS', 14, 'gibs/troopgib.md2', 2, 5.0 / 35.0, S_POSS_XDIE4) { A_Fall(); }
	S_POSS_XDIE4('POSS', 15, 'gibs/troopgib.md2', 3, 5.0 / 35.0, S_POSS_XDIE5) { }
	S_POSS_XDIE5('POSS', 16, 'gibs/troopgib.md2', 4, 5.0 / 35.0, S_POSS_XDIE6) { }
	S_POSS_XDIE6('POSS', 17, 'gibs/troopgib.md2', 5, 5.0 / 35.0, S_POSS_XDIE7) { }
	S_POSS_XDIE7('POSS', 18, 'gibs/troopgib.md2', 6, 5.0 / 35.0, S_POSS_XDIE8) { }
	S_POSS_XDIE8('POSS', 19, 'gibs/troopgib.md2', 7, 5.0 / 35.0, S_POSS_XDIE9) { }
	S_POSS_XDIE9('POSS', 20, 'gibs/troopgib.md2', 8, -1.0, S_NULL) { }
	S_POSS_RAISE1('POSS', 10, 'monsters/troopdie.md2', 5, 5.0 / 35.0, S_POSS_RAISE2) { }
	S_POSS_RAISE2('POSS', 9, 'monsters/troopdie.md2', 6, 5.0 / 35.0, S_POSS_RAISE3) { }
	S_POSS_RAISE3('POSS', 8, 'monsters/troopdie.md2', 7, 5.0 / 35.0, S_POSS_RAISE4) { }
	S_POSS_RAISE4('POSS', 7, 'monsters/troopdie.md2', 8, 5.0 / 35.0, S_POSS_RUN1) { }
}

defaultproperties
{
	Health = 20;
	GibsHealth = -20;
	Radius = 20.0;
	Height = 56.0;
	Mass = 100.0;
	StepSpeed = 8.0;
	PainChance = 200;
	SpawnState = S_POSS_STND;
	SeeState = S_POSS_RUN1;
	MissileState = S_POSS_ATK1;
	PainState = S_POSS_PAIN;
	DeathState = S_POSS_DIE1;
	GibsDeathState = S_POSS_XDIE1;
	RaiseState = S_POSS_RAISE1;
	SightSound = 'ZombieSight1';
	ActiveSound = 'ZombieActive';
	AttackSound = 'PistolFire';
	PainSound = 'ZombiePain';
	DeathSound = 'ZombieDeath1';
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.17  2002/05/03 17:11:55  dj_jl
//  Object classes split up into their files.
//
//  Revision 1.16  2002/03/20 19:07:44  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.15  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.14  2002/02/26 17:49:47  dj_jl
//  no message
//
//  Revision 1.13  2002/02/22 18:00:15  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.12  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.11  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.10  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.9  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.8  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.7  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.6  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.5  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.4  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
