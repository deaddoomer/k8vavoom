//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**    Door animation code (opening/closing)
//**    
//**************************************************************************

// MACROS ------------------------------------------------------------------

// CONSTANTS ---------------------------------------------------------------

enum
{
	doorRaise,
	DREV_CLOSEWAITOPEN,
	doorClose,
	doorOpen,
	raiseIn5Mins
};

// TYPES -------------------------------------------------------------------

// FUNCTION PROTOTYPES -----------------------------------------------------

// DATA DECLARATIONS -------------------------------------------------------

// CODE --------------------------------------------------------------------

//==========================================================================
//
//  EV_DoDoor
//
//==========================================================================

int EV_DoDoor(line_t * line, int *args, int type)
{
	int secnum;
	int rtn;
	sector_t *sec;
	VerticalDoor Door;
	float speed;

	speed = itof(args[1]) * 4.0;

	secnum = -1;
	rtn = 0;

	//HACK delay 0 means open
	if (type == doorRaise && !args[2])
	{
		type = doorOpen;
	}

	while ((secnum = FindSectorFromTag(args[0], secnum)) >= 0)
	{
		sec = &GLevel.Sectors[secnum];
		if (sec->SpecialData)
			continue;

		// new door thinker
		rtn = 1;
		Door = NewSpecialThinker(VerticalDoor);
		sec->SpecialData = Door;

		Door.sector = sec;
		Door.type = type;
		Door.topwait = itof(args[2]) / 35.0;
		Door.speed = speed;

		switch (type)
		{
		case doorClose:
			Door.topheight = FindLowestCeilingSurrounding(sec);
			Door.topheight -= 4.0;
			Door.direction = -1;
			if (speed >= 256.0)
			{
				SectorStartSoundName(Door.sector, 'BlazeDoorClose',
					CHAN_VOICE);
			}
			else
			{
				SectorStartSoundName(Door.sector, 'DoorClose', CHAN_VOICE);
			}
			break;

		case DREV_CLOSEWAITOPEN:
			Door.topheight = sec->ceilingheight;
			Door.topwait *= 4.0;
			Door.direction = -1;
			if (speed >= 256.0)
			{
				SectorStartSoundName(Door.sector, 'BlazeDoorClose',
					CHAN_VOICE);
			}
			else
			{
				SectorStartSoundName(Door.sector, 'DoorClose', CHAN_VOICE);
			}
			break;

		case doorRaise:
		case doorOpen:
			Door.direction = 1;
			Door.topheight = FindLowestCeilingSurrounding(sec);
			Door.topheight -= 4.0;
			if (Door.topheight != sec->ceilingheight)
			{
				if (speed >= 256.0)
				{
					SectorStartSoundName(Door.sector, 'BlazeDoorOpen',
						CHAN_VOICE);
				}
				else
				{
					SectorStartSoundName(Door.sector, 'DoorOpen',
						CHAN_VOICE);
				}
			}
			break;
		}

	}
	return rtn;
}

//==========================================================================
//
//  EV_VerticalDoor : open a door manually, no tag value
//
//  int return value?
//
//==========================================================================

int EV_VerticalDoor(line_t * line, Actor thing)
{
	sector_t *sec;
	VerticalDoor Door;
	int side;
	float speed;
	int type;

	side = 0;	// only front sides can be used

	switch (line->special)
	{
	case 11:
		type = doorOpen;
		break;

	case 12:
		type = doorRaise;
		break;

	case 13:
		type = line->arg3 ? doorRaise : doorOpen;
		break;
	}
	speed = itof(line->arg2) * 4.0;

	// if the sector has an active thinker, use it
	sec = GLevel.Sides[line->sidenum[side ^ 1]].sector;

	if (sec->SpecialData)
	{
		Door = VerticalDoor(sec->SpecialData);
		if (type == doorRaise)
		{
			// ONLY FOR "RAISE" DOORS, NOT "OPEN"s
			if (Door.direction == -1)
			{
				Door.direction = 1;	// go back up
			}
			else
			{
				if (!thing.bIsPlayer)
					return 0;	// JDC: bad guys never close doors
				Door.direction = -1;	// start going down immediately
			}
			return 1;
		}
	}

	// for proper sound
	if (speed >= 256.0)
	{
		// BLAZING DOOR
		SectorStartSoundName(sec, 'BlazeDoorOpen', CHAN_VOICE);
	}
	else
	{
		// NORMAL DOOR SOUND
		SectorStartSoundName(sec, 'DoorOpen', CHAN_VOICE);
	}

	// new door thinker
	Door = NewSpecialThinker(VerticalDoor);
	sec->SpecialData = Door;
	Door.sector = sec;
	Door.direction = 1;
	Door.speed = speed;
	Door.topwait = itof(line->arg3) / 35.0;
	Door.type = type;

	// find the top and bottom of the movement range
	Door.topheight = FindLowestCeilingSurrounding(sec);
	Door.topheight -= 4.0;
	return 1;
}

//==========================================================================
//
//  P_SpawnDoorCloseIn30
//
//  Spawn a door that closes after 30 seconds
//
//==========================================================================

void P_SpawnDoorCloseIn30(sector_t * sec)
{
	VerticalDoor Door;

	Door = NewSpecialThinker(VerticalDoor);

	sec->SpecialData = Door;
	sec->special = 0;

	Door.sector = sec;
	Door.direction = 0;
	Door.type = doorRaise;
	Door.speed = 70.0;
	Door.toptime = 30.0;
}

//==========================================================================
//
//  P_SpawnDoorRaiseIn5Mins
//
//  Spawn a door that opens after 5 minutes
//
//==========================================================================

void P_SpawnDoorRaiseIn5Mins(sector_t * sec)
{
	VerticalDoor Door;

	Door = NewSpecialThinker(VerticalDoor);

	sec->SpecialData = Door;
	sec->special = 0;

	Door.sector = sec;
	Door.direction = 2;
	Door.type = raiseIn5Mins;
	Door.speed = 70.0;
	Door.topheight = FindLowestCeilingSurrounding(sec);
	Door.topheight -= 4.0;
	Door.topwait = 150.0 / 35.0;
	Door.toptime = 5.0 * 60.0;
}

//**************************************************************************
//
//  $Log$
//  Revision 1.14  2002/10/26 16:32:20  dj_jl
//  New style of defining classes.
//
//  Revision 1.13  2002/09/07 16:28:24  dj_jl
//  Added Level class.
//
//  Revision 1.12  2002/04/11 16:48:09  dj_jl
//  New base classes for sector thinkers, Tick function.
//
//  Revision 1.11  2002/03/20 19:07:43  dj_jl
//  Got rid of a lots of legacy, beautification.
//
//  Revision 1.10  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.9  2002/01/15 08:12:25  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.8  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.7  2002/01/07 12:21:10  dj_jl
//  Changed copyright year
//
//  Revision 1.6  2001/12/18 18:29:15  dj_jl
//  Added Hexen action specials
//
//  Revision 1.5  2001/09/24 17:13:25  dj_jl
//  Created thinker classes
//
//  Revision 1.4  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.3  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
