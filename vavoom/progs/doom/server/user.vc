//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

float air_control = 1.0 / 256.0;

#define INVERSECOLORMAP		32

//
//  PALETTE MACROS
//

// Palette indices.
// For damage/bonus red-/gold-shifts
#define STARTREDPALS		1
#define STARTBONUSPALS		9
#define NUMREDPALS			8
#define NUMBONUSPALS		4
// Radiation suit, green shift.
#define RADIATIONPAL		13

void SetWeapon(player_t * player, int NewWeapon);
void MovePsprites(player_t * player);
void SetPlayerRunState(player_t * player);
void ChangeWeapon(player_t * player, int newweapon);
boolean G_CheckSpot(int playernum, mthing_t * mthing);
void P_SpawnPlayer(mthing_t * mthing);
void P_UseLines(player_t * player);

boolean onground;

//==========================================================================
//
//  ThrustPlayer
//
//  Moves the given origin along a given angle.
//
//==========================================================================

void ThrustPlayer(player_t * player, float angle, float move)
{
	player->mo->Velocity.x += move * cos(angle) * frametime;
	player->mo->Velocity.y += move * sin(angle) * frametime;
}

//==========================================================================
//
//  CalcHeight
//
//  Calculate the walking / running height adjustment
//
//==========================================================================

void CalcHeight(player_t * player)
{
	float angle;
	float bob;

	// Regular movement bobbing
	// (needs to be calculated for gun swing
	// even if not on ground)
	// OPTIMIZE: tablify angle
	// Note: a LUT allows for effects
	//  like a ramp with low health.
	player->Bob = (player->mo->Velocity.x * player->mo->Velocity.x
		+ player->mo->Velocity.y * player->mo->Velocity.y)
		* frametime * frametime;

	player->Bob /= 4.0;
	if (player->Bob > MAXBOB)
		player->Bob = MAXBOB;

	angle = (180.0 * 35.0 / 10.0) * level->time;
	bob = player->Bob / 2.0 * sin(angle);

	// move viewheight
	if (player->PlayerState == PST_LIVE)
	{
		player->ViewHeight += player->DeltaViewHeight;

		if (player->ViewHeight > VIEWHEIGHT)
		{
			player->ViewHeight = VIEWHEIGHT;
			player->DeltaViewHeight = 0.0;
		}

		if (player->ViewHeight < VIEWHEIGHT / 2.0)
		{
			player->ViewHeight = VIEWHEIGHT / 2.0;
			if (player->DeltaViewHeight <= 0.0)
				player->DeltaViewHeight = 0.00001;
		}

		if (player->DeltaViewHeight)
		{
			player->DeltaViewHeight += 0.25;
			if (!player->DeltaViewHeight)
				player->DeltaViewHeight = 0.00001;
		}
	}
	player->ViewOrg.z = player->mo->Origin.z + player->ViewHeight + bob;

	if (player->ViewOrg.z > player->mo->CeilingZ - 4.0)
		player->ViewOrg.z = player->mo->CeilingZ - 4.0;
}

//==========================================================================
//
//  MovePlayer
//
//==========================================================================

void MovePlayer(player_t * player)
{
	float forward;
	float side;

	// Do not let the player control movement
	//  if not onground.
	onground = player->mo->Origin.z <= player->mo->FloorZ ||
		player->mo->bOnMobj;

	forward = player->ForwardMove * 5.0;
	side = player->SideMove * 5.0;

	if (!onground)
	{
		forward *= air_control;
		side *= air_control;
	}

	if (forward)
	{
		ThrustPlayer(player, player->mo->Angles.yaw, forward);
	}
	if (side)
	{
		ThrustPlayer(player, player->mo->Angles.yaw - 90.0, side);
	}

	if (forward || side)
	{
		SetPlayerRunState(player);
	}

	if ((player->Buttons & BT_JUMP) && onground && !player->JumpTics)
	{
		//  Jump
		player->mo->Velocity.z = 9.0 * 35.0;
		player->JumpTics = 18;
	}
}

//==========================================================================
//
//  CheckWaterJump
//
//==========================================================================

void CheckWaterJump(player_t * player)
{
	TVec start;
	TVec end;
	TVec vforward;

	// check for a jump-out-of-water
	AngleVector(&player->mo->Angles, &vforward);
	start = player->mo->Origin;
	start.z += player->mo->Height * 0.5 + 8.0;
	vforward.z = 0.0;
	vforward = Normalize(vforward);
	end = start + vforward * 24.0;
	if (!TraceLine(start, end))
	{
		// solid at waist
		start.z = player->mo->Origin.z + player->mo->Height;
		end = start + vforward * 24.0;
		player->MoveDir = trace_plane_normal * -50.0;
		if (TraceLine(start, end))
		{
			// open at eye level
			player->mo->bWaterJump = true;
			player->mo->Velocity.z = 320.0;
			player->mo->ReactionTime = 2.0;	// safety net
		}
	}
}

//==========================================================================
//
//  WaterMove
//
//==========================================================================

void WaterMove(player_t * player)
{
	float forward;
	float side;
	TVec vforward;
	TVec vright;
	TVec vup;
	TVec wishvel;

	// Do not let the player control movement
	//  if not onground.
	onground = player->mo->Origin.z <= player->mo->FloorZ ||
		player->mo->bOnMobj;

	AngleVectors(&player->mo->Angles, &vforward, &vright, &vup);

	forward = player->ForwardMove;
	side = player->SideMove;

	wishvel = forward * vforward + side * vright;
	if (!forward && !side /* && !cmd.upmove */ )
		wishvel.z -= 60.0;	// drift towards bottom
//  else
//      wishvel.z += cmd.upmove;

	player->mo->Velocity += 3.5 * frametime * wishvel;

	if (forward || side)
	{
		SetPlayerRunState(player);
	}

	if (player->Buttons & BT_JUMP)
	{
		if (player->mo->WaterType == CONTENTS_WATER)
			player->mo->Velocity.z = 100.0;
		else if (player->mo->WaterType == CONTENTS_NUKAGE ||
			player->mo->WaterType == CONTENTS_SLIME)
			player->mo->Velocity.z = 80.0;
		else
			player->mo->Velocity.z = 50.0;
	}
	CheckWaterJump(player);
}

//==========================================================================
//
//  WaterJump
//
//==========================================================================

void WaterJump(player_t * player)
{
	if (!player->mo->ReactionTime || !player->mo->WaterLevel)
	{
		player->mo->bWaterJump = false;
		player->mo->ReactionTime = 0.0;
	}
	player->mo->Velocity.x = player->MoveDir.x;
	player->mo->Velocity.y = player->MoveDir.y;
}

//==========================================================================
//
//  PlayerInSpecialSector
//
//  Called every tic frame that the player origin is in a special sector
//
//==========================================================================

void PlayerInSpecialSector(player_t * player)
{
	sector_t *sector;

	sector = player->mo->Sector;

	// Falling, not all the way down yet?
	if (player->mo->Origin.z != sector->floorheight)
		return;

	if (sector->special & SECRET_MASK)
	{
		// SECRET SECTOR
		player->SecretCount++;
		centerprint(player, "You found a secret area");
		sector->special &= ~SECRET_MASK;
	}

	// Has hitten ground.
	switch (sector->special & 255)
	{
	case 64 + 5:
		// HELLSLIME DAMAGE
		if (!player->Powers[pw_ironfeet])
			if (!(level->tictime & 0x1f))
				player->mo->Damage(none, none, 10);
		break;

	case 64 + 7:
		// NUKAGE DAMAGE
		if (!player->Powers[pw_ironfeet])
			if (!(level->tictime & 0x1f))
				player->mo->Damage(none, none, 5);
		break;

	case 64 + 16:
		// SUPER HELLSLIME DAMAGE
	case 64 + 4:
		// STROBE HURT
		if (!player->Powers[pw_ironfeet] || (P_Random() < 5))
		{
			if (!(level->tictime & 0x1f))
				player->mo->Damage(none, none, 20);
		}
		break;

	case 64 + 11:
		// EXIT SUPER DAMAGE! (for E1M8 finale)
		player->Cheats &= ~CF_GODMODE;

		if (!(level->tictime & 0x1f))
			player->mo->Damage(none, none, 20);

		if (player->Health <= 10)
			G_ExitLevel();
		break;

	default:
		break;
	};
}

//==========================================================================
//
//  PlayerInContents
//
//==========================================================================

void PlayerInContents(player_t * player)
{
	if (!player->mo->WaterLevel)
	{
		return;
	}
	switch (player->mo->WaterType)
	{
	case CONTENTS_NUKAGE:
		// NUKAGE DAMAGE
		if (!player->Powers[pw_ironfeet])
			if (!(level->tictime & 0x1f))
				player->mo->Damage(none, none, 5);
		break;

	case CONTENTS_SLIME:
		// HELLSLIME DAMAGE
		if (!player->Powers[pw_ironfeet])
			if (!(level->tictime & 0x1f))
				player->mo->Damage(none, none, 10);
		break;

	case CONTENTS_LAVA:
		// SUPER HELLSLIME DAMAGE
		if (!player->Powers[pw_ironfeet] || (P_Random() < 5))
		{
			if (!(level->tictime & 0x1f))
				player->mo->Damage(none, none, 20);
		}
		break;
	}
}

//==========================================================================
//
//  DeathPlayerThink
//
//  Fall on your face when dying. Decrease POV height to floor height.
//
//==========================================================================

void DeathPlayerThink(player_t * player)
{
	float angle;
	float delta;

	MovePsprites(player);

	onground = player->mo->Origin.z <= player->mo->FloorZ ||
		player->mo->bOnMobj;

	if (player->mo->WaterLevel > 1)
	{
		player->mo->Velocity.z = -60.0;	// drift towards bottom
	}

	// fall to the ground
	if (player->ViewHeight > 6.0)
		player->ViewHeight -= 1.0;

	if (player->ViewHeight < 6.0)
		player->ViewHeight = 6.0;

	player->DeltaViewHeight = 0.0;
	CalcHeight(player);

	if (player->Attacker && player->Attacker != player->mo)
	{
		angle = atan2(player->Attacker->Origin.y - player->mo->Origin.y,
			player->Attacker->Origin.x - player->mo->Origin.x);

		delta = AngleMod180(angle - player->ViewAngles.yaw);

		if (delta < 5.0 || delta > -5.0)
		{
			// Looking at killer,
			//  so fade damage flash down.
			player->ViewAngles.yaw = angle;

			if (player->DamageCount)
				player->DamageCount--;
		}
		else if (delta > 0.0)
			player->ViewAngles.yaw += 5.0;
		else
			player->ViewAngles.yaw -= 5.0;
	}
	else if (player->DamageCount)
		player->DamageCount--;

	if (player->Buttons & BT_USE)
		player->PlayerState = PST_REBORN;
}

//==========================================================================
//
//  PlayerImpulse
//
//==========================================================================

void PlayerImpulse(player_t * player)
{
	int impulse;

	impulse = player->Impulse;
	player->Impulse = 0;

	if (impulse <= 7)
	{
		ChangeWeapon(player, impulse - 1);
	}
	else if (impulse == 16)
	{
		//  Suicide
		player->mo->Damage(none, none, 10000);
	}
}

//==========================================================================
//
//  PlayerThink
//
//==========================================================================

void PlayerThink(player_t * player)
{
	if (player->bIsBot)
	{
		player->Bot.Think();
	}

	// fixme: do this in the cheat code
	if (player->Cheats & CF_NOCLIP)
		player->mo->bNoClip = true;
	else
		player->mo->bNoClip = false;

	if (player->mo->bJustAttacked)
	{
		player->ForwardMove = 100.0;
		player->SideMove = 0.0;
		player->mo->bJustAttacked = false;
	}

	if (player->PlayerState == PST_DEAD)
	{
		DeathPlayerThink(player);
		return;
	}

	// Copy view angles
	player->mo->Angles = player->ViewAngles;

	if (player->JumpTics)
	{
		player->JumpTics--;
	}

	// Move around.
	// Reactiontime is used to prevent movement
	//  for a bit after a teleport.
	if (player->mo->ReactionTime)
	{
		player->mo->ReactionTime -= frametime;
		if (player->mo->ReactionTime <= 0.0)
			player->mo->ReactionTime = 0.0;
		if (player->mo->bWaterJump)
			WaterJump(player);
	}
	else
	{
		if (player->mo->WaterLevel > 1)
			WaterMove(player);
		else
			MovePlayer(player);
	}

	CalcHeight(player);

	if (player->mo->Sector->special)
		PlayerInSpecialSector(player);
	PlayerInContents(player);

	// Check for weapon change.
	if (player->Impulse)
	{
		PlayerImpulse(player);
	}

	// check for use
	if (player->Buttons & BT_USE)
	{
		if (!player->bUseDown)
		{
			P_UseLines(player);
			player->bUseDown = true;
		}
	}
	else
	{
		player->bUseDown = false;
	}

	//  cycle psprites
	MovePsprites(player);

	//  Counters, time dependend power ups.

	//  Strength counts up to diminish fade.
	if (player->Powers[pw_strength])
		player->Powers[pw_strength]++;

	if (player->Powers[pw_invulnerability])
		player->Powers[pw_invulnerability]--;

	if (player->Powers[pw_invisibility])
		if (!--player->Powers[pw_invisibility])
			player->mo->Translucency = 0;

	if (player->Powers[pw_infrared])
		player->Powers[pw_infrared]--;

	if (player->Powers[pw_ironfeet])
		player->Powers[pw_ironfeet]--;

	if (player->DamageCount)
		player->DamageCount--;

	if (player->BonusCount)
		player->BonusCount--;

	// Handling colormaps.
	if (player->Powers[pw_invulnerability])
	{
		if (player->Powers[pw_invulnerability] > 4 * 32
			|| (player->Powers[pw_invulnerability] & 8))
			player->FixedColormap = INVERSECOLORMAP;
		else
			player->FixedColormap = 0;
	}
	else if (player->Powers[pw_infrared])
	{
		if (player->Powers[pw_infrared] > 4 * 32
			|| (player->Powers[pw_infrared] & 8))
		{
			// almost full bright
			player->FixedColormap = 1;
		}
		else
			player->FixedColormap = 0;
	}
	else
		player->FixedColormap = 0;
}

//==========================================================================
//
//  SB_PaletteFlash
//
//  Do red-/gold-shifts from damage/items
//
//==========================================================================

void SB_PaletteFlash(player_t * player)
{
	int cnt;
	int bzc;

	player->CShifts[CSHIFT_CONTENTS] = 0;
	if (player->mo->WaterLevel == 3)
	{
		switch (player->mo->WaterType)
		{
		case CONTENTS_WATER:
			player->CShifts[CSHIFT_CONTENTS] = CSHIFT(130, 80, 50, 128);
			break;

		case CONTENTS_BLOOD:
			player->CShifts[CSHIFT_CONTENTS] = CSHIFT(160, 16, 16, 150);
			break;

		case CONTENTS_NUKAGE:
			player->CShifts[CSHIFT_CONTENTS] = CSHIFT(50, 255, 50, 150);
			break;

		case CONTENTS_SLIME:
			player->CShifts[CSHIFT_CONTENTS] = CSHIFT(0, 25, 5, 150);
			break;

		case CONTENTS_LAVA:
			player->CShifts[CSHIFT_CONTENTS] = CSHIFT(255, 80, 0, 150);
			break;
		}
	}

	cnt = player->DamageCount;

	if (player->Powers[pw_strength])
	{
		// slowly fade the berzerk out
		bzc = 12 - (player->Powers[pw_strength] >> 6);

		if (bzc > cnt)
			cnt = bzc;
	}

	if (cnt)
	{
		player->Palette = (cnt + 7) >> 3;

		if (player->Palette >= NUMREDPALS)
			player->Palette = NUMREDPALS - 1;

		player->Palette += STARTREDPALS;
	}
	else if (player->BonusCount)
	{
		player->Palette = (player->BonusCount + 7) >> 3;

		if (player->Palette >= NUMBONUSPALS)
			player->Palette = NUMBONUSPALS - 1;

		player->Palette += STARTBONUSPALS;
	}
	else if (player->Powers[pw_ironfeet] > 4 * 32
		|| player->Powers[pw_ironfeet] & 8)
		player->Palette = RADIATIONPAL;
	else
		player->Palette = 0;
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos(player_t * player)
{
	player->ViewOrg.x = player->mo->Origin.x;
	player->ViewOrg.y = player->mo->Origin.y;

	if (player->PlayerState != PST_DEAD)
	{
		player->ViewAngles = player->mo->Angles;
	}

	SB_PaletteFlash(player);

	player->Stats.flags = player->Keys;
	if ((player->Cheats & CF_GODMODE) || player->Powers[pw_invulnerability])
		player->Stats.flags |= SBF_GOD_MODE;

	if (Weapon(player->ViewEnts[ps_weapon]).Ammo == am_noammo)
		player->ReadyAmmo = 1994;	// means "n/a"
	else
		player->ReadyAmmo = player->Ammo[Weapon(player->ViewEnts[ps_weapon]).Ammo];
}

//==========================================================================
//
//  G_PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialized
//
//==========================================================================

void G_PlayerReborn(int player)
{
	player_t *p;
	BotPlayer b;

	p = &players[player];

	//  Clear player struct
	b = p->Bot;
	ClearPlayer(p);
	p->Bot = b;

	//  Set initial data
	p->bUseDown = true;	// don't do anything immediately
	p->bAttackDown = true;
	p->PlayerState = PST_LIVE;
	p->Health = INITIAL_HEALTH;
	p->WeaponOwned[wp_fist] = true;
	p->WeaponOwned[wp_pistol] = true;
	p->Ammo[am_clip] = INITIAL_AMMO;
	SetWeapon(p, wp_pistol);
}

//==========================================================================
//
//  G_PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void G_PlayerExitMap(int player, boolean clusterChange)
{
	player_t *p;
	int i;

	p = &players[player];

	if (clusterChange)
	{
		p->Keys = 0;
	}

	for (i = 0; i < NUMPOWERS; i++)
	{
		p->Powers[i] = 0;
	}
	p->Items = 0;
	p->mo->Angles.pitch = 0.0;
	p->mo->Translucency = 0;	// cancel invisibility
	p->ExtraLight = 0;	// cancel gun flashes
	p->FixedColormap = 0;	// cancel ir gogles
	p->DamageCount = 0;	// no palette changes 
	p->BonusCount = 0;
}

//==========================================================================
//
//  G_DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void G_DeathMatchSpawnPlayer(int playernum)
{
	int i;
	int j;

	// This check has been moved to p_setup.c:P_LoadThings()
//  if (selections < 4)
//      I_Error("Only %i deathmatch spots, 4 required", selections);

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % level->numdeathmatchstarts;
		if (G_CheckSpot(playernum, &level->deathmatchstarts[i]))
		{
			level->deathmatchstarts[i].type = playernum + 1;
			P_SpawnPlayer(&level->deathmatchstarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	P_SpawnPlayer(&level->playerstarts[playernum]);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn(int playernum)
{
	int i;

	// respawn at the start

	// remove pitch and roll angles from corpse
	players[playernum].mo->Angles.pitch = 0.0;
	players[playernum].mo->Angles.roll = 0.0;

	// first dissasociate the corpse
	players[playernum].mo->Player = NULL;
	players[playernum].mo->bIsPlayer = false;

	// spawn at random spot if in death match
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(playernum);
		return;
	}

	if (G_CheckSpot(playernum,
			&level->playerstarts[RebornPosition * MAXPLAYERS + playernum]))
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
				playernum]);
		return;
	}

	// try to spawn at one of the other players spots
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (G_CheckSpot(playernum,
				&level->playerstarts[RebornPosition * MAXPLAYERS + i]))
		{
			level->playerstarts[RebornPosition * MAXPLAYERS + i].type =
				playernum + 1;	// fake as other player
			P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
					i]);
			level->playerstarts[RebornPosition * MAXPLAYERS + i].type = i + 1;	// restore
			return;
		}
		// he's going to be inside something.  Too bad.
	}
	P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
			playernum]);
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient(int i)
{
	players[i].ViewEnts[ps_weapon] = SpawnObject(Weapon, none);
	players[i].ViewEnts[ps_weapon].Player = &players[i];
	players[i].ViewEnts[ps_flash] = SpawnObject(Weapon, none);
	players[i].ViewEnts[ps_flash].Player = &players[i];
	if (players[i].bIsBot)
	{
		players[i].Bot = SpawnObject(BotPlayer, none);
		players[i].Bot.player = &players[i];
		players[i].Bot.OnBeginPlay();
	}
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(i);
	}
	else
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + i]);
	}
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient(player_t * player)
{
	int i;

	if (player->Bot != none)
	{
		player->Bot.Destroy();
		player->Bot = none;
	}
	if (player->mo)
	{
		player->mo->Player = NULL;
		player->mo->bIsPlayer = false;
		player->mo->Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (player->ViewEnts[i])
		{
			player->ViewEnts[i].Destroy();
			player->ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(player->Name));
	player->mo->PlayFullVolumeSound('Chat', CHAN_AUTO);
}

//==========================================================================
//
//	SetClientModel
//
//==========================================================================

void SetClientModel(player_t *player)
{
	string model;
	string skin;

	model = Info_ValueForKey(ARR2STR(player->UserInfo), "model");
	if (!model || !strgetchar(model, 0))
	{
		player->mo->bFixedModel = false;
		player->mo->ModelSkinNum = 0;
		return;
	}

	player->mo->bFixedModel = true;
	player->mo->ModelIndex = FindModel(va("players/%s/tris.md2", model));
	skin = Info_ValueForKey(ARR2STR(player->UserInfo), "skin");
	if (skin && strgetchar(skin, 0))
	{
		player->mo->ModelSkinNum = FindSkin(va("players/%s/%s", model, skin));
	}
	else
	{
		player->mo->ModelSkinNum = 0;
	}
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged(player_t * player)
{
	if (!player->bSpawned)
	{
		return;
	}
	player->mo->Translation = player->Color;
	SetClientModel(player);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.22  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.21  2002/02/22 18:00:14  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.18  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.17  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.16  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.15  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.14  2002/01/11 08:03:10  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.13  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.12  2002/01/03 18:31:55  dj_jl
//  Fixed view sprites
//
//  Revision 1.11  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.10  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//  Revision 1.9  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.8  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.7  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.6  2001/10/09 17:36:57  dj_jl
//  Added flags for status bar
//
//  Revision 1.5  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.3  2001/08/15 17:06:38  dj_jl
//  Fixed death model angles
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
