//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

float air_control = 1.0 / 256.0;

bool onground;

//==========================================================================
//
//  PlayerThink
//
//==========================================================================

void PlayerThink(player_t * player)
{
	PlayerPawn(player->MO).PlayerTick(frametime);
}

//==========================================================================
//
//  SetViewPos
//
//==========================================================================

void SetViewPos(player_t * player)
{
	PlayerPawn(player->MO).SetViewPos();
}

//==========================================================================
//
//  G_PlayerReborn
//
//  Called after a player dies almost everything is cleared and initialized
//
//==========================================================================

void G_PlayerReborn(int player)
{
	player_t *p;
#ifndef	NO_BOTS
	BotPlayer b;
#endif

	p = &players[player];

	//  Clear player struct
#ifndef	NO_BOTS
	b = p->Bot;
#endif
	ClearPlayer(p);
#ifndef	NO_BOTS
	p->Bot = b;
#endif

	//  Set initial data
	p->bUseDown = true;	// don't do anything immediately
	p->bAttackDown = true;
	p->PlayerState = PST_LIVE;
	p->Health = INITIAL_HEALTH;
#ifdef DDF
	SetInitialWeapons(p);
#else
	p->Ammo[am_clip] = INITIAL_AMMO;
	p->MaxAmmo[am_clip] = maxammo[am_clip];
	p->MaxAmmo[am_shell] = maxammo[am_shell];
	p->MaxAmmo[am_misl] = maxammo[am_misl];
	p->MaxAmmo[am_cell] = maxammo[am_cell];
	p->WeaponOwned[wp_fist] = true;
	p->WeaponOwned[wp_pistol] = true;
	SetWeapon(p, wp_pistol);
#endif
}

//==========================================================================
//
//  G_PlayerExitMap
//
//  Call when a player completes a level.
//
//==========================================================================

void G_PlayerExitMap(int player, bool clusterChange)
{
	player_t *p;
	int i;

	p = &players[player];

	if (clusterChange)
	{
		p->Keys = 0;
	}

	for (i = 0; i < NUMPOWERS; i++)
	{
		p->Powers[i] = 0.0;
	}
	p->Items = 0;
	p->MO.Angles.pitch = 0.0;
	p->MO.Translucency = 0;	// cancel invisibility
	p->ExtraLight = 0;	// cancel gun flashes
	p->FixedColormap = 0;	// cancel ir gogles
	p->DamageFlash = 0.0;	// no palette changes
	p->BonusFlash = 0.0;
}

//==========================================================================
//
//  G_DeathMatchSpawnPlayer
//
//  Spawns a player at one of the random death match spots called at level
// load and each death
//
//==========================================================================

void G_DeathMatchSpawnPlayer(int playernum)
{
	int i;
	int j;

	// This check has been moved to p_setup.c:P_LoadThings()
//  if (selections < 4)
//      I_Error("Only %i deathmatch spots, 4 required", selections);

	for (j = 0; j < 20; j++)
	{
		i = P_Random() % level->numdeathmatchstarts;
		if (G_CheckSpot(playernum, &level->deathmatchstarts[i]))
		{
			level->deathmatchstarts[i].type = playernum + 1;
			P_SpawnPlayer(&level->deathmatchstarts[i]);
			return;
		}
	}

	// no good spot, so the player will probably get stuck 
	P_SpawnPlayer(&level->playerstarts[playernum]);
}

//==========================================================================
//
//  NetGameReborn
//
//==========================================================================

void NetGameReborn(int playernum)
{
	int i;

	// respawn at the start

	// remove pitch and roll angles from corpse
	players[playernum].MO.Angles.pitch = 0.0;
	players[playernum].MO.Angles.roll = 0.0;

	// first dissasociate the corpse
	players[playernum].MO.Player = NULL;
	players[playernum].MO.bIsPlayer = false;

	// spawn at random spot if in death match
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(playernum);
		return;
	}

	if (G_CheckSpot(playernum,
			&level->playerstarts[RebornPosition * MAXPLAYERS + playernum]))
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
				playernum]);
		return;
	}

	// try to spawn at one of the other players spots
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (G_CheckSpot(playernum,
				&level->playerstarts[RebornPosition * MAXPLAYERS + i]))
		{
			level->playerstarts[RebornPosition * MAXPLAYERS + i].type =
				playernum + 1;	// fake as other player
			P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
					i]);
			level->playerstarts[RebornPosition * MAXPLAYERS + i].type = i + 1;	// restore
			return;
		}
		// he's going to be inside something.  Too bad.
	}
	P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS +
			playernum]);
}

//==========================================================================
//
//  PutClientIntoServer
//
//==========================================================================

void PutClientIntoServer(player_t * player)
{
	player->ViewEnts[ps_weapon] = SpawnObject(Weapon, none);
	player->ViewEnts[ps_weapon].Player = player;
	player->ViewEnts[ps_flash] = SpawnObject(Weapon, none);
	player->ViewEnts[ps_flash].Player = player;
#ifndef	NO_BOTS
	if (player->bIsBot)
	{
		player->Bot = SpawnObject(BotPlayer, none);
		player->Bot.player = player;
		player->Bot.OnBeginPlay();
	}
#endif
}

//==========================================================================
//
//  SpawnClient
//
//==========================================================================

void SpawnClient(int i)
{
	if (deathmatch)
	{
		G_DeathMatchSpawnPlayer(i);
	}
	else
	{
		P_SpawnPlayer(&level->playerstarts[RebornPosition * MAXPLAYERS + i]);
	}
}

//==========================================================================
//
//  DisconnectClient
//
//==========================================================================

void DisconnectClient(player_t * player)
{
	int i;

#ifndef	NO_BOTS
	if (player->Bot != none)
	{
		player->Bot.Destroy();
		player->Bot = none;
	}
#endif
	if (player->MO)
	{
		player->MO.Player = NULL;
		player->MO.bIsPlayer = false;
		player->MO.Damage(none, none, 10000);
	}
	for (i = 0; i < NUMPSPRITES; i++)
	{
		if (player->ViewEnts[i])
		{
			player->ViewEnts[i].Destroy();
			player->ViewEnts[i] = none;
		}
	}
	bprint("%s left the game\n", ARR2STR(player->Name));
	player->MO.PlayFullVolumeSound('Chat', CHAN_AUTO);
}

//==========================================================================
//
//	SetClientModel
//
//==========================================================================

void SetClientModel(player_t *player)
{
	string model;
	string skin;

	model = Info_ValueForKey(ARR2STR(player->UserInfo), "model");
	if (!model || !strgetchar(model, 0))
	{
		player->MO.bFixedModel = false;
		player->MO.ModelSkinNum = 0;
		return;
	}

	player->MO.bFixedModel = true;
	player->MO.ModelIndex = FindModel(va("players/%s/tris.md2", model));
	skin = Info_ValueForKey(ARR2STR(player->UserInfo), "skin");
	if (skin && strgetchar(skin, 0))
	{
		player->MO.ModelSkinNum = FindSkin(va("players/%s/%s", model, skin));
	}
	else
	{
		player->MO.ModelSkinNum = 0;
	}
}

//==========================================================================
//
//  UserinfoChanged
//
//==========================================================================

void UserinfoChanged(player_t * player)
{
	if (!player->bSpawned)
	{
		return;
	}
	player->MO.Translation = player->Color;
	SetClientModel(player);
}

//**************************************************************************
//
//  $Log$
//  Revision 1.31  2002/10/26 16:32:21  dj_jl
//  New style of defining classes.
//
//  Revision 1.30  2002/09/07 16:28:25  dj_jl
//  Added Level class.
//
//  Revision 1.29  2002/07/23 13:07:29  dj_jl
//  Final touches for switching to floating-point time, beautification.
//
//  Revision 1.28  2002/06/14 15:51:20  dj_jl
//  A lots of changes, new functions etc for DDF.
//
//  Revision 1.27  2002/05/18 16:59:59  dj_jl
//  Renamed SpawnState to IdleState, other changes.
//
//  Revision 1.26  2002/04/11 16:49:50  dj_jl
//  Tick function.
//
//  Revision 1.25  2002/03/28 18:15:34  dj_jl
//  Renamed mo in player_t to MO.
//
//  Revision 1.24  2002/03/16 17:44:02  dj_jl
//  Added PlayerPawn class, added function Spawn, beautification.
//
//  Revision 1.23  2002/03/04 18:31:35  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.22  2002/03/02 17:41:12  dj_jl
//  Renamed Enemy to Target. Beautification.
//
//  Revision 1.21  2002/02/22 18:00:14  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.20  2002/02/14 19:20:57  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.19  2002/02/06 17:28:52  dj_jl
//  Replaced Actor flags with boolean variables.
//
//  Revision 1.18  2002/01/28 18:50:18  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.17  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//  Revision 1.16  2002/01/15 18:27:00  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.15  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.14  2002/01/11 08:03:10  dj_jl
//  Renamed 'name' to "Name'
//
//  Revision 1.13  2002/01/07 12:21:11  dj_jl
//  Changed copyright year
//
//  Revision 1.12  2002/01/03 18:31:55  dj_jl
//  Fixed view sprites
//
//  Revision 1.11  2001/12/12 18:57:40  dj_jl
//  State functions now are methods of Actor and Weapon classes
//
//  Revision 1.10  2001/12/04 18:36:42  dj_jl
//  Bots, directly from SkullTag!
//
//  Revision 1.9  2001/11/02 18:42:08  dj_jl
//  Damage method
//
//  Revision 1.8  2001/10/22 17:23:12  dj_jl
//  Floatification of angles
//
//  Revision 1.7  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.6  2001/10/09 17:36:57  dj_jl
//  Added flags for status bar
//
//  Revision 1.5  2001/09/24 17:24:09  dj_jl
//  Beautification
//
//  Revision 1.4  2001/08/29 17:42:13  dj_jl
//  Added sound channel
//  
//  Revision 1.3  2001/08/15 17:06:38  dj_jl
//  Fixed death model angles
//  
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
