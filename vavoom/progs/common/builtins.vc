//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//              COMMON BUILTINS
//
//==========================================================================

//
//  Error functions
//

//  Shut down client and server, go to title
native void Error(string format, ...);

//  Exit programm with error
native void FatalError(string format, ...);

//
//  Cvar functions
//

//  Create a new cvar
native void CreateCvar(string Name, string default_value, int flags);

//  Read value
native int GetCvar(string Name);

//  Set cvar value
native void SetCvar(string Name, int value);

//  Read float value
native float GetCvarF(string Name);

//  Set cvar float value
native void SetCvarF(string Name, float value);

//  Read string value
native string GetCvarS(string Name);

//  Set cvar string value
native void SetCvarS(string Name, string value);

//
//  Math functions
//

//  Normalizes angle in range 0..360
native float AngleMod360(float angle);

//  Normalizes angle in range -180..180
native float AngleMod180(float angle);

//  Sine
native float sin(float angle);

//  Cosine
native float cos(float angle);

//  Tangent
native float tan(float angle);

//  Arctangent
native float atan(float slope);

//  Arctangent
native float atan2(float y, float x);

//  Vector length
native float Length(TVec vec);

//  Normalizes vector
native TVec Normalize(TVec vec);

//  Dot product
native float DotProduct(TVec v1, TVec v2);

//  Cross product (perpendicular vector)
native TVec CrossProduct(TVec v1, TVec v2);

//  Creates vectors for given angle vector
native void AngleVectors(TAVec * angles, TVec * forward, TVec * right,
	TVec * up);

//  Simplified version of AngleVectors, creates only forward vector
native void AngleVector(TAVec * angles, TVec * forward);

//  Create angle vector for a vector
native void VectorAngles(TVec * vec, TAVec * angles);

//
//  Random numbers
//

//  Floating random number 0.0 ... 0.999999
native float Random(void);

//  Integer random number 1 .. 255
native int P_Random(void);

//
//  String functions
//

//  Pointer to string hack
native string ptrtos(void *ptr);
#define ARR2STR(array)	ptrtos(&array[0])

//  Get char s[i]
native int strgetchar(string s, int i);

//  Set char s[i]
native void strsetchar(string s, int i, int c);

//  String length
native int strlen(string s);

//  Compare strings
native int strcmp(string s1, string s2);

//  Compare strings ingnoring case
native int stricmp(string s1, string s2);

//  Copy string
native void strcpy(string s1, string s2);

//  Clear string
native void strclr(string s);

//  Append string to string
native void strcat(string s1, string s2);

//  Print into a string
native void sprint(string dest, string format, ...);

//  Does varargs print into a temporary buffer
native string va(string format, ...);

//  Converts string to integer
native int atoi(string str);

//  Converts string to float
native float atof(string str);

//
//  Printing to console
//

//  Print to console
native void print(string format, ...);

//  Print to console only when developer == 1
native void dprint(string format, ...);

//
//  Texture / flat number retrieval
//

native int CheckTextureNumForName(string Name);
native int TextureNumForName(string Name);
native int CheckFlatNumForName(string Name);
native int FlatNumForName(string Name);
native float TextureHeight(int pic);

//
//  Message IO functions
//

native void MSG_Select(int msgtype);
native void MSG_WriteByte(int data);
native void MSG_WriteShort(int data);
native void MSG_WriteLong(int data);
native int MSG_ReadChar(void);
native int MSG_ReadByte(void);
native int MSG_ReadShort(void);
native int MSG_ReadWord(void);
native int MSG_ReadLong(void);

//
//  Misc
//

//  float -> int
native int ftoi(float f);

//  int -> float
native float itof(int f);
native int Cmd_CheckParm(string str);

//  Adds text to command buffer, same as typing it in console
native void CmdBuf_AddText(string format, ...);

//  Reads key value from info string (userinfo or serverinfo)
native string Info_ValueForKey(string info, string key);

//  Checks if WAD lump is present, used to check for shareware/extended WADs
native boolean WadLumpPresent(string Name);

native Object Spawn(classid cid, Object owner);
native void Object::Destroy(void);
native boolean Object::IsA(classid cid);
native boolean Object::IsDestroyed(void);

//==========================================================================
//
//              CLIENT BUILTINS
//
//==========================================================================

#ifdef CLIENT

//
//  Graphics
//

//  Registers a graphic, returns handle
native int R_RegisterPic(string Name, int type);

//  Registers a graphic with custom palette, returns handle
native int R_RegisterPicPal(string Name, int type, string palname);

//  Retrieves pic info
native void R_GetPicInfo(int handle, picinfo_t * info);

//  Draws a pic
native void R_DrawPic(int x, int y, int handle);

//  Draws a translucent pic
native void R_DrawPic2(int x, int y, int handle, int trans);

//  Draws a shadowed pic
native void R_DrawShadowedPic(int x, int y, int handle);

//  Installs a sprite model
native void R_InstallSprite(string Name, int index);

//  Draws a sprite
native void R_DrawSpritePatch(int x, int y, int sprite, int frame, int rot,
	int translation);

//  Installs model
native model_t *InstallModel(string Name);

//  Draws a model
native void R_DrawModelFrame(TVec origin, float angle, model_t * model,
	int frame, string skin);

//  Draws a rectangle filled with a flat
native void R_FillRectWithFlat(int x, int y, int width, int height,
	string Name);

//  Darkens a screen region
native void R_ShadeRect(int x, int y, int w, int h, int shade);

//
//  Text
//

//  Selects active font
native void T_SetFont(int font);

//  Changes text alignement
native void T_SetAlign(int halign, int valign);

//  Enable/disable text shadow
native void T_SetShadow(boolean on);

//  Calculates text width
native int T_TextWidth(string text);

//  Calculates text height
native int T_TextHeight(string text);

//  Draws text
native void T_DrawText(int x, int y, string text);

//  Draws text, but no more than n characters
native void T_DrawNText(int x, int y, string text, int n);

//  Draws a cursor at the end of last drawn string
native void T_DrawCursor(void);

//
//  Client sound stuff
//

//  Plays a sound
native void LocalSound(name Name);

//  Plays a sound and waits untill it finishes
native void LocalSoundTillDone(name Name);

//  Handle shift+key
native int TranslateKey(int c);

native string P_GetMapName(int map);
native string P_TranslateMap(int map);
native boolean SV_GetSaveString(int i, string buf);
native void StartSearch(void);
native slist_t * GetSlist(void);
native void KeyNameForNum(int KeyNr, string NameString);
native void IN_GetBindingKeys(string cmd, int *key1, int *key2);
native void IN_SetBinding(int key, string ondown, string onup);

native void LoadTextLump(string Name, void *buf, int bufsize);

native dlight_t *AllocDlight(int key);
native particle_t *NewParticle(void);

#endif

//==========================================================================
//
//              SERVER BUILTINS
//
//==========================================================================

#ifdef SERVER

//
//  Print functions
//

//  Broadcast message (print to all clients)
native void bprint(string format, ...);

//  Print to client
native void cprint(player_t * player, string format, ...);

//  Client's center message
native void centerprint(player_t * player, string format, ...);

//
//  Map utilites
//

native opening_t *LineOpenings(line_t * linedef, TVec point);

//  Returns 0 - front, 1 - back, -1 - on
native int P_BoxOnLineSide(float *tmbox, line_t * ld);

//
native boolean P_BlockThingsIterator(int x, int y, thing_iter_func_t func);

//
native boolean P_BlockLinesIterator(int x, int y, line_iter_func_t func);

//
native boolean P_PathTraverse(float x1, float y1, float x2, float y2,
	int flags, trav_func_t trav);

//  Find the best gap that the thing could fit in, given a certain Z
// position (z1 is foot, z2 is head).
native sec_region_t *FindThingGap(sec_region_t * gaps, TVec point, float z1,
	float z2);

//  Find the best opening
native opening_t *FindOpening(opening_t * gaps, float z1, float z2);

//  Find best region in sector for a given point
native sec_region_t *PointInRegion(sector_t * sector, TVec p);
native int PointContents(sector_t * sector, TVec p);
native sec_region_t *AddExtraFloor(line_t * line, sector_t * dst);

//	Swap sector's floor and ceiling, it's used by level converter to support
// EDGE and Legacy 3D floors.
native void SwapPlanes(sector_t *s);
native int MapBlock(float val);

//
//  Mobj utilites
//

native MapObject NewMobjThinker(classid cid);
native void RemoveMobjThinker(MapObject mobj);
native void P_SetThingPosition(MapObject thing);
native void P_UnsetThingPosition(MapObject thing);
native boolean P_CheckSight(MapObject mobj1, MapObject mobj2);

//
//  Special thinker utilites
//

native Object NewSpecialThinker(classid);
native void RemoveSpecialThinker(Thinker spec);
native void P_ChangeSwitchTexture(line_t * line, int useAgain);
native Thinker NextThinker(Thinker last, classid id);

//
//  Polyobj functions
//

native void SpawnPolyobj(float x, float y, int tag, int flags);
native void AddAnchorPoint(float x, float y, int tag);
native polyobj_t *GetPolyobj(int polyNum);
native int GetPolyobjMirror(int poly);
native boolean PO_RotatePolyobj(int num, float angle);
native boolean PO_MovePolyobj(int num, float x, float y);

//
//  ACS functions
//

native boolean StartACS(int number, int map, int *args, MapObject activator,
	line_t * line, int side);
native boolean SuspendACS(int number, int map);
native boolean TerminateACS(int number, int map);
native void TagFinished(int tag);
native void PolyobjFinished(int po);
native void ACS::Think(void);
native void ACS::Archive(void);
native void ACS::Unarchive(void);

//
//  Sound functions
//

native void StartSound(MapObject mobj, int sound, int channel);
native void StartSoundAtVolume(MapObject mobj, int sound, int channel,
	int volume);
native void StopSound(MapObject mobj, int channel);
native void SectorStartSound(sector_t * sec, int sound, int channel);
native void SectorStopSound(sector_t * sec, int channel);
native boolean GetSoundPlayingInfo(MapObject mobj, int sound_id);
native int GetSoundID(name Name);
native void SectorStartSequence(sector_t * sector, name sequence);
native void SectorStopSequence(sector_t * sector);
native void PolyobjStartSequence(polyobj_t * mobj, name sequence);
native void PolyobjStopSequence(polyobj_t * mobj);

#define StartSoundName(origin, Name, channel)	StartSound(origin, GetSoundID(Name), channel)
#define SectorStartSoundName(sec, Name, channel)	SectorStartSound(sec, GetSoundID(Name), channel)

//
//  Savegame archieve / unarchieve utilite functions
//

native sector_t *SectorToNum(sector_t * sector);
native sector_t *NumToSector(sector_t * sector);
native void MobjToNum(void *mobj);
native void NumToMobj(void *mobj);
native classid ClassIDToNum(classid cid);
native classid NumToClassID(classid cid);
native name UnarchiveName(name Name);

native void G_ExitLevel(void);
native void G_SecretExitLevel(void);

native int P_GetPlayerNum(player_t * player);
native subsector_t *PointInSubsector(float x, float y);
native void ClearPlayer(player_t * p);
native void G_Completed(int map, int position);
native int TerrainType(int pic);
native void P_ForceLightning(void);
native void SB_Start(void);
native void SetFloorPic(sector_t * sec, int texture);
native void SetCeilPic(sector_t * sec, int texture);
native void SetLineTransluc(line_t * line, int trans);
native void SendFloorSlope(sector_t * sector);
native void SendCeilingSlope(sector_t * sector);
native int FindModel(string Name);
native int FindSkin(string Name);

native void MSG_SelectClientMsg(int msgtype, player_t * client);

#endif

//**************************************************************************
//
//  $Log$
//  Revision 1.29  2002/01/29 18:08:54  dj_jl
//  Fixed saving
//
//  Revision 1.28  2002/01/28 18:50:17  dj_jl
//  Made some functions Actor members.
//  Replaced some pointers with references.
//
//  Revision 1.27  2002/01/15 18:26:58  dj_jl
//  Some property names with logical words starting with capital letter.
//  Moved everything from Entity class into Actor class.
//
//  Revision 1.26  2002/01/15 08:12:25  dj_jl
//  Replaced some pointers with references
//
//  Revision 1.25  2002/01/12 18:02:47  dj_jl
//  Replaced some C style casts with dynamic casts
//
//  Revision 1.24  2002/01/11 18:19:40  dj_jl
//  Started to use names in progs
//
//  Revision 1.23  2002/01/11 08:04:00  dj_jl
//  Renamed 'name' to "Name'
//  Added support for EDGE 3D floors
//
//  Revision 1.22  2002/01/07 12:19:56  dj_jl
//  Changed copyright year
//
//  Revision 1.21  2001/12/27 17:54:25  dj_jl
//  Added some Object methods
//
//  Revision 1.20  2001/12/18 18:33:11  dj_jl
//  Changed keyword extern with native
//
//  Revision 1.19  2001/12/04 18:39:51  dj_jl
//  Model and skin handling on server
//
//  Revision 1.18  2001/12/01 18:10:10  dj_jl
//  Started to use class references
//
//  Revision 1.17  2001/11/09 14:38:45  dj_jl
//  Moved input line to progs
//
//  Revision 1.16  2001/10/27 07:37:39  dj_jl
//  Possibility to create new console variables
//
//  Revision 1.15  2001/10/22 17:23:08  dj_jl
//  Floatification of angles
//
//  Revision 1.14  2001/10/18 17:39:33  dj_jl
//  A lots of changes for Alpha 2
//
//  Revision 1.13  2001/10/12 17:23:33  dj_jl
//  Start on first map in MAPINFO script
//
//  Revision 1.12  2001/10/08 17:22:12  dj_jl
//  Changed slist to be returned by engine
//
//  Revision 1.11  2001/10/02 17:37:19  dj_jl
//  Removed status bar widgets
//
//  Revision 1.10  2001/09/27 17:08:19  dj_jl
//  Removed spawn functions, added mobj classes
//
//  Revision 1.9  2001/09/25 17:13:50  dj_jl
//  Beautification
//
//  Revision 1.8  2001/09/24 17:11:23  dj_jl
//  Created thinker classes
//
//  Revision 1.7  2001/09/20 16:19:59  dj_jl
//  Start using object-oriented stuff, beautification
//  
//  Revision 1.6  2001/08/29 17:42:11  dj_jl
//  Added sound channel
//  
//  Revision 1.5  2001/08/23 17:38:55  dj_jl
//  Fixed Heretic episode 2 finale
//  
//  Revision 1.4  2001/08/15 17:05:11  dj_jl
//  Model setup
//
//  Revision 1.3  2001/07/31 16:57:52  dj_jl
//  Checking for shareware/extended wad by the presence of wad lump
//
//  Revision 1.2  2001/07/27 14:27:51  dj_jl
//  Update with Id-s and Log-s, some fixes
//
//**************************************************************************
