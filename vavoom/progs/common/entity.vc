//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Entity:MapObject
{
	float time;	// state tic counter
	int statenum;
	int nextstate;
	boolean fixed_model;

//==========================================================================
//
//  SetState
//
//  Returns true if the actor is still present.
//
//==========================================================================

boolean SetState(int state)
{
	state_t *st;

	do
	{
		if (!state)
		{
			// Remove mobj
			statenum = 0;
			P_RemoveMobj(&Actor(self));
			return false;
		}

		st = &states[state];
		time = st->time;
		sprite = st->sprite;
		frame = st->frame;
		if (!fixed_model)
			model_index = st->model_index;
		alias_frame = st->model_frame;
		statenum = st->statenum;
		nextstate = st->nextstate;

		// Modified handling.
		// Call action functions when the state is set
		if (st->function)
		{
			st->function(self);
		}

		state = st->nextstate;
	}
	while (!time);
	return true;
}

//==========================================================================
//
//  SetStateNF
//
//  Same as SetState, but does not call the state function.
//
//==========================================================================

boolean SetStateNF(int state)
{
	state_t *st;

	do
	{
		if (!state)
		{
			// Remove mobj
			statenum = 0;
			P_RemoveMobj(&Actor(self));
			return false;
		}

		st = &states[state];
		time = st->time;
		sprite = st->sprite;
		frame = st->frame;
		if (!fixed_model)
			model_index = st->model_index;
		alias_frame = st->model_frame;
		statenum = st->statenum;
		nextstate = st->nextstate;

		state = st->nextstate;
	}
	while (!time);
	return true;
}

//==========================================================================
//
//
//
//==========================================================================

defaultproperties
{
}

}

//**************************************************************************
//
//  $Log$
//  Revision 1.1  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//**************************************************************************
