//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2002 JÆnis Legzdi·ý
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//
//                              ENTITY DATA
//
//  NOTES: Entity
//
//  Entities are used to tell the refresh where to draw an image, tell the
// world simulation when objects are contacted, and tell the sound driver
// how to position a sound.
//
//  The refresh uses the snext and sprev links to follow lists of things in
// sectors as they are being drawn. The sprite, frame, and angle elements
// determine which patch_t is used to draw the sprite if it is visible.
// The sprite and frame values are allmost allways set from state_t
// structures. The xyz origin point represents a point at the bottom middle
// of the sprite (between the feet of a biped). This is the default origin
// position for patch_ts grabbed with lumpy.exe. A walking creature will have
// its z equal to the floor it is standing on.
//
//  The sound code uses the x,y, and z fields to do stereo positioning of any
// sound effited by the Entity.
//
//  The play simulation uses the blocklinks, x,y,z, radius, height to
// determine when mobj_ts are touching each other, touching lines in the map,
// or hit by trace lines (gunshots, lines of sight, etc). The Entity->flags
// element has various bit flags used by the simulation.
//
//  Every Entity is linked into a single sector based on its origin
// coordinates. The subsector_t is found with R_PointInSubsector(x,y), and
// the sector_t can be found with subsector->sector. The sector links are
// only used by the rendering code, the play simulation does not care about
// them at all.
//
//  Any Entity that needs to be acted upon by something else in the play
// world (block movement, be shot, etc) will also need to be linked into the
// blockmap. If the thing has the MF_NOBLOCK flag set, it will not use the
// block links. It can still interact with other things, but only as the
// instigator (missiles will run into other things, but nothing can run into
// a missile). Each block in the grid is 128*128 units, and knows about every
// line_t that it contains a piece of, and every interactable Entity that has
// its origin contained.
//
//  A valid Entity is a Entity that has the proper subsector_t filled in for
// its xy coordinates and is linked into the sector from which the subsector
// was made, or has the MF_NOSECTOR flag set (the subsector_t needs to be
// valid even if MF_NOSECTOR is set), and is linked into a blockmap block or
// has the MF_NOBLOCKMAP flag set. Links should only be modified by the
// P_[Un]SetThingPosition() functions. Do not change the MF_NO? flags while
// a thing is valid.
//
//  Any questions?
//
//**************************************************************************

class Entity:Thinker
	native
	abstract
{

// Info for drawing: position.
TVec Origin;

// Momentums, used to update position.
TVec Velocity;

TAVec Angles;		// orientation

//More drawing info: to determine current sprite.
int SpriteType;		//  How to draw sprite
int SpriteIndex;	// used to find patch_t and flip value
int SpriteFrame;	// might be ORed with FF_FULLBRIGHT

int ModelIndex;
int ModelFrame;
int ModelSkinNum;

int Translucency;
int Translation;

float FloorClip;	// value to use for floor clipping

int Effects;

subsector_t *SubSector;
sector_t *Sector;

// Interaction info, by BLOCKMAP.
// Links in blocks (if needed).
Entity BlockMapNext;
Entity BlockMapPrev;

// The closest interval over all contacted Sectors.
float FloorZ;
float CeilingZ;

//  Closest floor and ceiling, source of floorz and ceilingz
sec_plane_t *Floor;
sec_plane_t *Ceiling;

// If == validcount, already checked.
int ValidCount;

//	Flags
bool bSolid;		// Blocks.
bool bHidden;		// don't update to clients (invisible but touchable)
bool bNoBlockmap;	// don't use the blocklinks (inert but displayable)
bool bIsPlayer;		// PLayer or player-bot

int Health;

// For movement checking.
float Radius;
float Height;

// Additional info record for player avatars only.
// Only valid if type == MT_PLAYER
player_t *Player;

int TID;	// thing identifier
int Special;	// special
int Args[5];	// special arguments

int NetID;

name SpriteName;
float StateTime;	// state tic counter
int StateNum;
int NextState;
bool bFixedModel;

bool bNoGravity;	// don't apply gravity every tic
bool bNoPassMobj;	// Disable z block checking.  If on,
					// this flag will prevent the mobj
					// from passing over/under other mobjs.
bool bColideWithThings;
bool bColideWithWorld;
bool bCheckLineBlocking;
bool bCheckLineBlockMonsters;
bool bDropOff;		// allow jumps from high places
bool bFloat;		// allow moves to any height, no gravity
bool bFly;			// fly mode is active
bool bBlasted;		// missile will pass through ghosts
bool bCantLeaveFloorpic;	// stay within a certain floor type
bool bFloorClip;	// if feet are allowed to be clipped

//  Params
float Mass;
float MaxStepHeight;

//  Water
int WaterLevel;
int WaterType;

//
//	Natives
//

native void Remove(void);

native boolean SetState(int state);

native void PlaySound(name SoundName, int Channel);
native void PlayFullVolumeSound(name SoundName, int Channel);
native void StopSound(int Channel);

native boolean CheckPosition(TVec Pos);
native boolean CheckRelPosition(TVec Pos);
native boolean TryMove(TVec newPos);

native void SlideMove(void);
native void BounceWall(float overbounce);

native boolean CheckWater(void);

native void UpdateVelocity(void);

native Entity CheckOnmobj(void);

native void LinkToWorld(void);
native void UnlinkFromWorld(void);

native boolean CanSee(Entity Other);

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed(void)
{
}

//==========================================================================
//
//	Touch
//
//==========================================================================

boolean Touch(Entity Other)
{
	return !Other.bSolid;
}

//==========================================================================
//
//	BlockedByLine
//
//==========================================================================

void BlockedByLine(line_t * ld)
{
}

//==========================================================================
//
//	PushLine
//
//==========================================================================

void PushLine(void)
{
}

//==========================================================================
//
//	HandleFloorclip
//
//==========================================================================

void HandleFloorclip(void)
{
}

//==========================================================================
//
//	CrossSpecialLine
//
//==========================================================================

void CrossSpecialLine(line_t *ld, int side)
{
}

//==========================================================================
//
//	ApplyFriction
//
//==========================================================================

void ApplyFriction(void)
{
}

//
//	States
//

__states__
{
	S_NULL('', 0, -1.0, S_NULL) { }
}

//==========================================================================
//
//	SetOrigin
//
//==========================================================================

void SetOrigin(TVec NewOrigin)
{
	Origin = NewOrigin;
}

//==========================================================================
//
//
//
//==========================================================================

defaultproperties
{
	bColideWithThings = true;
	bColideWithWorld = true;
}

}

//**************************************************************************
//**************************************************************************

#define GRAVITY			1225.0

struct tmtrace_t
{
	Entity Thing;
	TVec End;
	float BBox[4];
	float FloorZ;
	float CeilingZ;
	float DropOffZ;
	sec_plane_t *Floor;
	sec_plane_t *Ceiling;

	boolean FloatOk;	// if true, move would be ok if
						// within tmtrace.FloorZ - tmtrace.CeilingZ

	// keep track of the line that lowers the ceiling,
	// so missiles don't explode against sky hack walls
	line_t *CeilingLine;

	// keep track of special lines as they are hit,
	// but don't process them until the move is proven valid
	#define MAXSPECIALCROSS	32
	line_t *SpecHit[MAXSPECIALCROSS];
	int NumSpecHit;

	Entity BlockingMobj;
};

tmtrace_t *tmtrace;

#ifdef DOOM
#endif
#ifdef HERETIC
#endif
#ifdef HEXEN
#endif
#ifdef STRIFE
#endif

//**************************************************************************
//
//  $Log$
//  Revision 1.17  2002/08/28 16:36:36  dj_jl
//  Merged MapObject with Entity, some natives, beautification.
//
//  Revision 1.16  2002/07/13 08:01:48  dj_jl
//  Moved some functions to the Entity class.
//
//  Revision 1.15  2002/06/22 07:09:58  dj_jl
//  Made sliding and bouncing functions native.
//
//  Revision 1.14  2002/05/03 17:12:50  dj_jl
//  S_NULL defined in Entity.
//
//  Revision 1.13  2002/04/11 16:52:17  dj_jl
//  Made TryMove native.
//
//  Revision 1.12  2002/03/28 18:20:11  dj_jl
//  Got rid of SetStateNF.
//
//  Revision 1.11  2002/03/16 17:51:16  dj_jl
//  Added function Remove to the Entity class.
//
//  Revision 1.10  2002/03/12 19:20:24  dj_jl
//  Added native and abstract class modifiers
//
//  Revision 1.9  2002/03/09 17:57:00  dj_jl
//  Got rid of function pointers, made most of the physics functions native.
//
//  Revision 1.8  2002/03/04 18:31:35  dj_jl
//  Replaced bNoClip with two seperate flags, beautification.
//
//  Revision 1.7  2002/03/02 17:39:06  dj_jl
//  Beautification
//
//  Revision 1.6  2002/02/22 18:00:05  dj_jl
//  A lots of the renaming, beautification.
//
//  Revision 1.5  2002/02/16 16:27:44  dj_jl
//  Added bool variables
//
//  Revision 1.4  2002/02/14 19:20:53  dj_jl
//  Renamed Entity properties to new naming style
//
//  Revision 1.3  2002/02/09 18:13:46  dj_jl
//  Added flags that determines what line blocking flags to check
//
//  Revision 1.2  2002/02/07 18:50:05  dj_jl
//  Made CheckPosition shared.
//
//  Revision 1.1  2002/01/24 18:19:25  dj_jl
//  Split common class Entity, made SetMobjState an Entity function
//
//**************************************************************************
