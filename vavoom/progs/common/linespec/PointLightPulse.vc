//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: template.vc 1583 2006-06-27 19:05:42Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**	Based on code from GZDoom with following notice:
//**
//** Copyright 2003 Timothy Stump
//** Copyright 2005 Christoph Oelckers
//** All rights reserved.
//**
//** Redistribution and use in source and binary forms, with or without
//** modification, are permitted provided that the following conditions
//** are met:
//**
//** 1. Redistributions of source code must retain the above copyright
//**    notice, this list of conditions and the following disclaimer.
//** 2. Redistributions in binary form must reproduce the above copyright
//**    notice, this list of conditions and the following disclaimer in the
//**    documentation and/or other materials provided with the distribution.
//** 3. The name of the author may not be used to endorse or promote products
//**    derived from this software without specific prior written permission.
//**
//** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//**************************************************************************

class PointLightPulse : DynamicLight
	__mobjinfo__(9801);

enum
{
   CYCLE_Linear,
   CYCLE_Sin,
   CYCLE_Cos,
   CYCLE_SawTooth,
   CYCLE_Square
};

struct Cycler
{
	float		Start;
	float		End;
	float		Current;
	float		Time;
	float		Cycle;
	bool		bIncrement;
	bool		bCycle;
	int			CycleType;
};

float			LastUpdate;
Cycler			Cycler;

//==========================================================================
//
//	SetParams
//
//==========================================================================

final void SetParams(float start, float end, float cycle)
{
	Cycler.Cycle = cycle;
	Cycler.Time = 0.0;
	Cycler.Start = start;
	Cycler.Current = start;
	Cycler.End = end;
	Cycler.bIncrement = true;
}

//==========================================================================
//
//	SetCycleType
//
//==========================================================================

final void SetCycleType(int ct)
{
	Cycler.CycleType = ct;
}

//==========================================================================
//
//	ShouldCycle
//
//==========================================================================

final void ShouldCycle(bool sc)
{
	Cycler.bCycle = sc;
}

//==========================================================================
//
//	GetVal
//
//==========================================================================

final float GetVal()
{
	return Cycler.Current;
}

//==========================================================================
//
//	Update
//
//==========================================================================

final void Update(float diff)
{
	float mult, angle;
	float step = Cycler.End - Cycler.Start;
	
	if (!Cycler.bCycle)
	{
		return;
	}
	
	Cycler.Time += diff;
	if (Cycler.Time >= Cycler.Cycle)
	{
		Cycler.Time = Cycler.Cycle;
	}
	
	mult = Cycler.Time / Cycler.Cycle;
	
	switch (Cycler.CycleType)
	{
	case CYCLE_Linear:
		if (Cycler.bIncrement)
		{
			Cycler.Current = Cycler.Start + (step * mult);
		}
		else
		{
			Cycler.Current = Cycler.End - (step * mult);
		}
		break;
	case CYCLE_Sin:
		angle = 360.0 * mult;
		mult = sin(angle);
		mult = (mult + 1.0) / 2.0;
		Cycler.Current = Cycler.Start + (step * mult);
		break;
	case CYCLE_Cos:
		angle = 360.0 * mult;
		mult = cos(angle);
		mult = (mult + 1.0) / 2.0;
		Cycler.Current = Cycler.Start + (step * mult);
		break;
	case CYCLE_SawTooth:
		Cycler.Current = Cycler.Start + (step * mult);
		break;
	case CYCLE_Square:
		if (Cycler.bIncrement)
		{
			Cycler.Current = Cycler.Start;
		}
		else
		{
			Cycler.Current = Cycler.End;
		}
		break;
	}
	
	if (Cycler.Time == Cycler.Cycle)
	{
		Cycler.Time = 0.0;
		Cycler.bIncrement = !Cycler.bIncrement;
	}
}

//==========================================================================
//
//	Activate
//
//==========================================================================

bool Activate()
{
	bDormant = false;
	float pulseTime = Angles.yaw / 35.0;

	LastUpdate = Level.XLevel.Time;
	SetParams(itof(Args[3]), itof(Args[4]), pulseTime);
	ShouldCycle(true);
	SetCycleType(CYCLE_Sin);
	return true;
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

bool Deactivate()
{
	bDormant = true;
	return true;
}

//==========================================================================
//
//	BeginPlay
//
//==========================================================================

void BeginPlay()
{
	::BeginPlay();

	if (!bDormant)
	{
		Activate();
	}
}

//==========================================================================
//
//	ClientTick
//
//==========================================================================

void ClientTick(float deltaTime)
{
	::ClientTick(deltaTime);

	if (bDormant)
	{
		return;
	}

	float diff = Level.XLevel.Time - LastUpdate;
	LastUpdate = Level.XLevel.Time;
	Update(diff);
	Intensity = GetVal();

	dlight_t* dl = AllocDlight(self);
	dl->origin = Origin;
	dl->colour = RGB(Args[0], Args[1], Args[2]);
	dl->die = Level.XLevel.Time + 0.01;
	dl->radius = IntensityToRadius(Intensity);
}

defaultproperties
{
}