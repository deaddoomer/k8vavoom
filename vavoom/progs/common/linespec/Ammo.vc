//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Ammo : Inventory
	abstract;

//==========================================================================
//
//	GetParentAmmo
//
//==========================================================================

final class<Ammo> GetParentAmmo()
{
	class Ret = Class;
	//	Get parent class that is direct descendant of Ammo class.
	while (GetClassParent(Ret) != Ammo)
	{
		Ret = GetClassParent(Ret);
	}
	return class<Ammo>(Ret);
}

//==========================================================================
//
//	TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	int oldammo;

	Ammo AmmoItem = Ammo(Toucher.FindInventory(GetParentAmmo()));
	if (!AmmoItem)
	{
		AmmoItem = Spawn(GetParentAmmo());
		AmmoItem.AttachToOwner(Toucher);
		AmmoItem.Amount = 0;
	}
	if (AmmoItem.Amount == AmmoItem.MaxAmount)
	{
		return false;
	}
	if (Level.Game.gameskill == sk_baby ||
		(Level.Game.gameskill == sk_nightmare &&
		LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo))
	{
		// extra ammo in baby mode and nightmare mode
		if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
		{
			Amount <<= 1;
		}
		else
		{
			Amount += Amount >> 1;
		}
	}

	oldammo = AmmoItem.Amount;

	AmmoItem.Amount += Amount;
	if (AmmoItem.Amount > AmmoItem.MaxAmount)
	{
		AmmoItem.Amount = AmmoItem.MaxAmount;
	}

	//	If non zero ammo, don't change up weapons,
	// player was lower on purpose.
	if (oldammo <= 0)
	{
		PlayerEx(Toucher.Player).GotAmmo(AmmoItem);
	}
	GoAwayAndDie();
	GiveQuest(Toucher);
	return true;
}

defaultproperties
{
}
