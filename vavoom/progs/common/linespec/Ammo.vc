//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Ammo : Inventory
	abstract;

int				BackpackAmount;
int				BackpackMaxAmount;
int				DropAmount;

//==========================================================================
//
//	GetParentAmmo
//
//==========================================================================

final class<Ammo> GetParentAmmo()
{
	class Ret = Class;
	//	Get parent class that is direct descendant of Ammo class.
	while (GetClassParent(Ret) != Ammo)
	{
		Ret = GetClassParent(Ret);
	}
	return class<Ammo>(Ret);
}

//==========================================================================
//
//	HandlePickup
//
//==========================================================================

bool HandlePickup(Inventory Item)
{
	if (Item.Class == Class ||
		(Ammo(Item) && Ammo(Item).GetParentAmmo() == Class))
	{
		if (Amount == MaxAmount)
		{
			//	We're full.
			return true;
		}

		int ReceiveAmount = Item.Amount;
		if (!bIgnoreSkill && (Level.Game.gameskill == sk_baby ||
			(Level.Game.gameskill == sk_nightmare &&
			LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo)))
		{
			// extra ammo in baby mode and nightmare mode
			if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
			{
				ReceiveAmount <<= 1;
			}
			else
			{
				ReceiveAmount += ReceiveAmount >> 1;
			}
		}

		int oldammo = Amount;

		Amount += ReceiveAmount;
		if (Amount > MaxAmount)
		{
			Amount = MaxAmount;
		}

		//	If non zero ammo, don't change up weapons,
		// player was lower on purpose.
		if (oldammo <= 0 && Owner.Player)
		{
			PlayerEx(Owner.Player).GotAmmo(self);
		}
		Item.bPickupGood = true;
		return true;
	}
	if (Inventory)
	{
		return Inventory.HandlePickup(Item);
	}
	return false;
}

//==========================================================================
//
//	CreateCopy
//
//==========================================================================

Inventory CreateCopy(EntityEx Toucher)
{
	int NewAmount = Amount;
	if (!bIgnoreSkill && (Level.Game.gameskill == sk_baby ||
		(Level.Game.gameskill == sk_nightmare &&
		LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo)))
	{
		// extra ammo in baby mode and nightmare mode
		if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
		{
			NewAmount <<= 1;
		}
		else
		{
			NewAmount += NewAmount >> 1;
		}
	}

	Inventory Copy;
	if (GetClassParent(Class) == Ammo)
	{
		Copy = ::CreateCopy(Toucher);
	}
	else
	{
		Copy = Spawn(GetParentAmmo(),,,, false);
		GoAwayAndDie();
	}
	Copy.Amount = NewAmount;
	//	Don't pick up more ammo that you can carry.
	if (Copy.Amount > Copy.MaxAmount)
	{
		Copy.Amount = Copy.MaxAmount;
	}
	return Copy;
}

defaultproperties
{
	PickupSound = 'misc/ammo_pkup';
	bKeepDepleted = true;
}
