//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Ammo : Inventory
	abstract;

//==========================================================================
//
//	GetParentAmmo
//
//==========================================================================

final class<Ammo> GetParentAmmo()
{
	class Ret = Class;
	//	Get parent class that is direct descendant of Ammo class.
	while (GetClassParent(Ret) != Ammo)
	{
		Ret = GetClassParent(Ret);
	}
	return class<Ammo>(Ret);
}

//==========================================================================
//
//	TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	int oldammo;

	Ammo AmmoItem = Ammo(Toucher.FindInventory(GetParentAmmo()));
	if (AmmoItem)
	{
		if (AmmoItem.Amount == AmmoItem.MaxAmount)
		{
			return false;
		}

		int ReceiveAmount = Amount;
		if (Level.Game.gameskill == sk_baby ||
			(Level.Game.gameskill == sk_nightmare &&
			LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo))
		{
			// extra ammo in baby mode and nightmare mode
			if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
			{
				ReceiveAmount <<= 1;
			}
			else
			{
				ReceiveAmount += ReceiveAmount >> 1;
			}
		}

		oldammo = AmmoItem.Amount;

		AmmoItem.Amount += ReceiveAmount;
		if (AmmoItem.Amount > AmmoItem.MaxAmount)
		{
			AmmoItem.Amount = AmmoItem.MaxAmount;
		}

		//	If non zero ammo, don't change up weapons,
		// player was lower on purpose.
		if (oldammo <= 0)
		{
			PlayerEx(Toucher.Player).GotAmmo(AmmoItem);
		}
		GoAwayAndDie();
		GiveQuest(Toucher);
		return true;
	}
	else
	{
		int NewAmount = Amount;
		if (Level.Game.gameskill == sk_baby ||
			(Level.Game.gameskill == sk_nightmare &&
			LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo))
		{
			// extra ammo in baby mode and nightmare mode
			if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
			{
				NewAmount <<= 1;
			}
			else
			{
				NewAmount += NewAmount >> 1;
			}
		}

		if (GetClassParent(Class) == Ammo)
		{
			if (GoAway())
			{
				//	Must create a copy
				AmmoItem = Spawn(GetParentAmmo());
			}
			else
			{
				//	Use this one
				AmmoItem = self;
			}
		}
		else
		{
			AmmoItem = Spawn(GetParentAmmo());
			GoAwayAndDie();
		}
		AmmoItem.Amount = NewAmount;
		AmmoItem.AttachToOwner(Toucher);
		//	Don't pick up more ammo that you can carry.
		if (AmmoItem.Amount > AmmoItem.MaxAmount)
		{
			AmmoItem.Amount = AmmoItem.MaxAmount;
		}
		GiveQuest(Toucher);
		return true;
	}
}

defaultproperties
{
}
