//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id: template.vc 1583 2006-06-27 19:05:42Z dj_jl $
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**	Based on code from GZDoom with following notice:
//**
//** Copyright 2003 Timothy Stump
//** Copyright 2005 Christoph Oelckers
//** All rights reserved.
//**
//** Redistribution and use in source and binary forms, with or without
//** modification, are permitted provided that the following conditions
//** are met:
//**
//** 1. Redistributions of source code must retain the above copyright
//**    notice, this list of conditions and the following disclaimer.
//** 2. Redistributions in binary form must reproduce the above copyright
//**    notice, this list of conditions and the following disclaimer in the
//**    documentation and/or other materials provided with the distribution.
//** 3. The name of the author may not be used to endorse or promote products
//**    derived from this software without specific prior written permission.
//**
//** THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
//** IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
//** OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//** IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
//** INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
//** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
//** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
//** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//** THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//**************************************************************************

class DynFlickerRandomLight : DynPointLight
	__mobjinfo__(9804);

bool bFlickerRandLight;
int TickCount;

//==========================================================================
//
//	Activate
//
//==========================================================================

bool Activate()
{
	if (::Activate())
	{
		bFlickerRandLight = true;
		return true;
	}
	return false;
}

//==========================================================================
//
//	Deactivate
//
//==========================================================================

bool Deactivate()
{
	if (::Deactivate())
	{
		SetUp = false;
		bFlickerRandLight = false;
		return true;
	}
	return false;
}

//==========================================================================
//
//	BeginPlay
//
//==========================================================================

void BeginPlay()
{
	::BeginPlay();

	if (!bDormant)
	{
		LastUpdate = Angles.yaw;
		bFlickerRandLight = true;
	}
}

//==========================================================================
//
//	ClientTick
//
//==========================================================================

void ClientTick(float deltaTime)
{
	::ClientTick(deltaTime);

	if(bFlickerRandLight)
	{
		if(!SetUp)
		{
			dl = AllocDlight(self);
			dl->origin = Origin;
			dl->colour = RGB(Args[0], Args[1], Args[2]);
			SetUp = true;
		}
		float flickerRange = itof(Args[4]) - itof(Args[3]);
		float amt = itof(P_Random()) / 255.0;
		
		TickCount++;
		
		if (itof(TickCount) > Angles.yaw)
		{
			Intensity = itof(Args[3]) + (amt * flickerRange);
			TickCount = 0;
		}
		dl->radius = Intensity;
	}
}

defaultproperties
{
}