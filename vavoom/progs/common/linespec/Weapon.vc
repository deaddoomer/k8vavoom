//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Weapon : Inventory
	abstract;

const float LOWERSPEED		= 6.0;
const float RAISESPEED		= 6.0;

const float WEAPONBOTTOM	= 128.0;
const float WEAPONTOP		= 32.0;

//	Type of ammo weapon needs to operate.
class<Ammo>		AmmoType1;
class<Ammo>		AmmoType2;
//	How much ammo to give when picked up.
int				AmmoGive1;
int				AmmoGive2;
//	How much ammo used in each shot.
int				AmmoUse1;
int				AmmoUse2;

state			UpState;
state			DownState;
state			ReadyState;
state			AttackState;
state			HoldAttackState;
state			FlashState;

name			UpSound;
name			ReadySound;

//	Weapon slot this weapon is placed in.
int				Slot;
//	Weapons with lower values have greater priority
int				SelectionOrder;
//	Kickback from this weapon
float			Kickback;

float			BotCombatDist;

//	Switch away if got ammo for more powerfull weapon.
bool			bWimpyWeapon;
//	Don't auto fire
bool			bNoAutoFire;
//	This is a powered up version of another weapon
bool			bPoweredUp;
//	Does Heretic staff level 2 style kickback.
bool			bStaff2Kickback;
//	Always use extreme death
bool			bExtremeDeath;
//	It's a melee weapon
bool			bBotMelee;
//	It's a projectile weapon
bool			bBotProjectile;
//	It's a BFG
bool			bBotBfg;

//	Runtime in-inventory references.
Ammo			Ammo1;
Ammo			Ammo2;
Weapon			SisterWeapon;

replication
{
	reliable if (Role == ROLE_Authority && bNetOwner)
		Ammo1, Ammo2;
}

//==========================================================================
//
//	HandlePickup
//
//==========================================================================

bool HandlePickup(Inventory Item)
{
	if (Item.Class == Class)
	{
		if (Weapon(Item).PickupForAmmo(self))
		{
			Item.bPickupGood = true;
		}
		return true;
	}

	if (Inventory)
	{
		return Inventory.HandlePickup(Item);
	}
	return false;
}

//==========================================================================
//
//	PickupForAmmo
//
//==========================================================================

bool PickupForAmmo(Weapon ExistingWeapon)
{
	return false;
}

//==========================================================================
//
//	AddAmmo
//
//	Returns false if the ammo can't be picked up at all
//
//==========================================================================

final bool AddAmmo(EntityEx Toucher, class<Ammo> ammo, int count)
{
	int oldammo;

	if (!ammo)
	{
		return false;
	}

	Ammo AmmoItem = Ammo(Toucher.FindInventory(ammo));
	if (!AmmoItem)
	{
		AmmoItem = Spawn(ammo);
		AmmoItem.AttachToOwner(Toucher);
		AmmoItem.Amount = 0;
	}
	if (!count)
	{
		return false;
	}
	if (AmmoItem.Amount == AmmoItem.MaxAmount)
	{
		return false;
	}

	if (Level.Game.gameskill == sk_baby ||
		(Level.Game.gameskill == sk_nightmare &&
		LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo))
	{
		// extra ammo in baby mode and nightmare mode
		if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
		{
			count <<= 1;
		}
		else
		{
			count += count >> 1;
		}
	}

	oldammo = AmmoItem.Amount;
	AmmoItem.Amount += count;
	if (AmmoItem.Amount > AmmoItem.MaxAmount)
	{
		AmmoItem.Amount = AmmoItem.MaxAmount;
	}

	if (oldammo <= 0)
	{
		PlayerEx(Toucher.Player).GotAmmo(AmmoItem);
	}
	return true;
}

//==========================================================================
//
//	AddExistingAmmo
//
//==========================================================================

final bool AddExistingAmmo(Ammo AmmoItem, int count)
{
	int oldammo;

	if (!AmmoItem || !count)
	{
		return false;
	}
	if (AmmoItem.Amount == AmmoItem.MaxAmount)
	{
		return false;
	}

	if (Level.Game.gameskill == sk_baby ||
		(Level.Game.gameskill == sk_nightmare &&
		LineSpecialGameInfo(Level.Game).bNightmareExtraAmmo))
	{
		// extra ammo in baby mode and nightmare mode
		if (LineSpecialGameInfo(Level.Game).bBabyNightmareDoubleAmmo)
		{
			count <<= 1;
		}
		else
		{
			count += count >> 1;
		}
	}

	oldammo = AmmoItem.Amount;
	AmmoItem.Amount += count;
	if (AmmoItem.Amount > AmmoItem.MaxAmount)
	{
		AmmoItem.Amount = AmmoItem.MaxAmount;
	}

	if (oldammo <= 0 && AmmoItem.Owner.Player)
	{
		PlayerEx(AmmoItem.Owner.Player).GotAmmo(AmmoItem);
	}
	return true;
}

//==========================================================================
//
//	AttachToOwner
//
//==========================================================================

void AttachToOwner(EntityEx NewOwner)
{
	::AttachToOwner(NewOwner);

	//	Set up references to ammo items since they are used a lots.
	if (AmmoType1)
	{
		Ammo1 = Ammo(NewOwner.FindInventory(AmmoType1));
		if (!Ammo1)
		{
			FatalError("Owner has no ammo type %s", GetClassName(AmmoType1));
		}
	}
	else
	{
		Ammo1 = none;
	}
	if (AmmoType2)
	{
		Ammo2 = Ammo(NewOwner.FindInventory(AmmoType2));
		if (!Ammo2)
		{
			FatalError("Owner has no ammo type %s", GetClassName(AmmoType2));
		}
	}
	else
	{
		Ammo2 = none;
	}
}

bool CheckAmmo(bool AutoSwitch, optional bool RequireAmmo)
{
	return false;
}

defaultproperties
{
}
