//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************
//**
//**	Class for Actor state action methods.
//**
//**************************************************************************

class Actor : EntityEx
	abstract;

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed()
{
	// Remove from creature queue
	if (bMonster && bCorpse)
	{
		A_DeQueueCorpse();
	}

	::Destroyed();
}

//**************************************************************************
//	Not documented
//**************************************************************************

//===========================================================================
//
//  A_SetGravity
//
//===========================================================================

final void A_SetGravity(float Grav)
{
	Gravity = Grav;
	if (Gravity < 0.0)
	{
		Gravity = 0.0;
	}
	else if (Gravity > 1.0)
	{
		Gravity = 1.0;
	}
}

//===========================================================================
//
//  A_Respawn
//
//===========================================================================

final void A_Respawn(optional bool Fog)
{
	if (!specified_Fog)
	{
		Fog = true;
	}

	TVec Org;
	Org.x = SpawnPoint.x;
	Org.y = SpawnPoint.y;
	Org.z = GetPlanePointZ(&XLevel.PointInSector(Org)->floor, Org);
	SetOrigin(Org);
	bSolid = true;
	Height = default.Height;
	if (TestLocation())
	{
		Health = default.Health;

		//	Restore default flags
		RespawnResetFlags();
		SetState(IdleState);
		bInvisible = false;
		if (Fog)
		{
			Spawn(TeleportFog, Origin + vector(0.0, 0.0,
				LineSpecialGameInfo(Level.Game).TeleFogHeight));
		}
		if (bCountKill)
		{
			Level.TotalKills++;
		}
	}
	else
	{
		bSolid = false;
	}
}

//==========================================================================
//
//  A_Feathers
//
//==========================================================================

final void A_Feathers()
{
	int i;
	int count;
	EntityEx mo;

	if (Health > 0)
	{
		// Pain
		count = P_Random() < 32 ? 2 : 1;
	}
	else
	{
		// Death
		count = 5 + (P_Random() & 3);
	}
	for (i = 0; i < count; i++)
	{
		mo = Spawn(Feather, Origin + vector(0.0, 0.0, 20.0));
		mo.Target = self;
		mo.Velocity.x = (Random() - Random()) * 35.0;
		mo.Velocity.y = (Random() - Random()) * 35.0;
		mo.Velocity.z = (1.0 + Random() * 2.0) * 35.0;
		mo.SetState(GetStatePlus(mo.IdleState, P_Random() & 7));
	}
}

//==========================================================================
//
//	A_ShootGun
//
//==========================================================================

final void A_ShootGun()
{
	int damage;
	TVec dir;

	if (!Target)
		return;

	PlaySound('monsters/rifle', CHAN_WEAPON);
	A_FaceTarget();
	AimLineAttack(dir, Angles, MISSILERANGE);
	VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 2.0);
	damage = ((P_Random() % 5) + 1) * 3;
	LineAttack(dir, MISSILERANGE, damage, StrifePuff);
}

//==========================================================================
//
//	A_RocketInFlight
//
//==========================================================================

final void A_RocketInFlight()
{
	EntityEx A;

	PlaySound('misc/missileinflight', CHAN_VOICE);
	SpawnPuff(Origin, MISSILERANGE, MiniMissilePuff, false);
	A = Spawn(RocketTrail, Origin - Velocity / 35.0);
	if (A)
	{
		A.Velocity.z = 1.0 * 35.0;
	}
}

//==========================================================================
//
//	A_Bang4Cloud
//
//==========================================================================

final void A_Bang4Cloud()
{
	Spawn(Bang4Cloud, Origin + vector(
		(Random() - Random()) * 5.0 / 8.0,
		(Random() - Random()) * 5.0 / 8.0, 0.0));
}

//==========================================================================
//
//	A_DropFire
//
//==========================================================================

final void A_DropFire()
{
	Actor A = Spawn(FireDroplet, Origin + vector(0.0, 0.0, 24.0));
	A.Velocity.z = -35.0;
	RadiusAttack(Target, 64, 64.0, false, 'Fire');
}

//==========================================================================
//
//	decorate_A_GiveQuestItem
//
//==========================================================================

final void decorate_A_GiveQuestItem(int QuestType)
{
	// This function does a lot more than just this
	if (DeathSound)
	{
		PlaySound(DeathSound, CHAN_VOICE);
		PlaySound(DeathSound, 6);
	}

	//	Give quest item for destroying important object.
	//	Basicly all object using this function does this.
	class<Inventory> QClass = class<Inventory>(FindClass(
		StrToName(va("QuestItem%d", QuestType))));
	if (QClass)
	{
		EntityEx(Level.Game.Players[0].MO).GiveInventoryType(QClass);
		Level.Game.Players[0].cprint(va("$txt_quest_%d", QuestType));
	}
}

//==========================================================================
//
//	A_RemoveForceField
//
//==========================================================================

final void A_RemoveForceField()
{
	int i;
	line_t* line;

	bSpecial = false;
	for (i = 0; i < Sector->linecount; i++)
	{
		line = Sector->lines[i];
		if (line->backsector && line->special == LNSPEC_ForceField)
		{
			line->flags &= ~(ML_BLOCKING|ML_BLOCKEVERYTHING);
			line->special = 0;
			XLevel.Sides[line->sidenum[0]].MidTexture = 0;
			XLevel.Sides[line->sidenum[1]].MidTexture = 0;
		}
	}
}

//==========================================================================
//
//  A_PigPain
//
//==========================================================================

final void A_PigPain()
{
	A_Pain();
	if (Origin.z <= FloorZ)
	{
		Velocity.z = 3.5 * 35.0;
	}
}

//============================================================================
//
//  A_ClassBossHealth
//
//============================================================================

final void A_ClassBossHealth()
{
	if (Level.Game.netgame && !Level.Game.deathmatch)	// co-op only
	{
		if (!Special1)
		{
			Health *= 5;
			Special1 = true;	// has been initialised
		}
	}
}

//**************************************************************************
//**************************************************************************

//==========================================================================
//
//	A_BeShadowyFoe
//
//==========================================================================

final void A_BeShadowyFoe()
{
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
	bFriendly = false;
}

//==========================================================================
//
//  A_FreeTargMobj
//
//==========================================================================

final void A_FreeTargMobj()
{
	Velocity = vector(0.0, 0.0, 0.0);
	Origin.z = CeilingZ + 4.0;
	Gravity = 1.0;
	bSolid = false;
	bShootable = false;
	bFloat = false;
	bCountKill = false;
	bMonster = false;
	bSkullFly = false;
	bNoGravity = true;
	bDropOff = true;
	bCorpse = true;
	bPassMobj = false;
	RenderStyle = STYLE_None;
	Alpha = 0.0;
	Player = none;
	bIsPlayer = false;
	Health = -1000;	// Don't resurrect
}

//==========================================================================
//
//  A_ExecActionSpecial
//
//==========================================================================

final void A_ExecActionSpecial(int Arg1, int Arg2, int Arg3, int Arg4,
	int Arg5, int Special)
{
	Level.ExecuteActionSpecial(Special, Arg1, Arg2, Arg3, Arg4, Arg5, NULL,
		0, self);

}

//==========================================================================
//
//	A_GiveQuestItem
//
//==========================================================================

final void A_GiveQuestItem()
{
	decorate_A_GiveQuestItem(ftoi(Speed / 35.0));
}

//==========================================================================
//
//	A_ItBurnsItBurns
//
//==========================================================================

final void A_ItBurnsItBurns()
{
	DeathSound = 'human/imonfire';
	A_Scream();
	if (bIsPlayer)
	{
		state WaveState = PlayerEx(Player).ReadyWeapon.FindState('BurnWave');
		if (WaveState)
		{
			Player.SetViewState(ps_weapon, WaveState);
			Player.SetViewState(ps_flash, none);
		}
	}
}

//==========================================================================
//
//  A_WeaponReady
//
//  The player can fire the weapon or change to another weapon at this time.
// Follows after getting weapon up, or after previous attack/fire sequence.
//
//==========================================================================

final void A_WeaponReady()
{
	float angle;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (!Wpn)
	{
		return;
	}

	// get out of attack state
	if (StateIsInSequence(State, MissileState) ||
		StateIsInSequence(State, MeleeState))
	{
		SetState(IdleState);
	}

	if (Player.ViewStates[ps_weapon].State == Wpn.GetReadyState() &&
		Wpn.ReadySound && (!Wpn.bReadySndHalf || Random() < 0.5))
	{
		PlaySound(Wpn.ReadySound, CHAN_WEAPON);
	}

	// Put the weapon away if the player has a pending weapon or has died.
	if (PlayerEx(Player).PendingWeapon || Player.MO.Health <= 0)
	{
		Player.SetViewState(ps_weapon, Wpn.GetDownState());
		return;
	}

	// Check for fire.
	if (Player.Buttons & BT_ATTACK)
	{
		if (!Player.bAttackDown || !Wpn.bNoAutoFire)
		{
			Player.bAttackDown = true;
			PlayerEx(Player).FireWeapon();
			return;
		}
	}
	else if (Player.Buttons & BT_ALT_ATTACK && Wpn.FindState('AltFire'))
	{
		if (!Player.bAttackDown || !Wpn.bNoAutoFire)
		{
			Player.bAttackDown = true;
			PlayerEx(Player).AltFireWeapon();
			return;
		}
	}
	else
	{
		Player.bAttackDown = false;
	}

	if (!Wpn.bDontBob)
	{
		// bob the weapon based on movement speed
		angle = AngleMod360(180.0 * XLevel.Time);
		Player.ViewStates[ps_weapon].SX = 1.0 + PlayerEx(Player).Bob *
			cos(angle);
		if (angle >= 180.0)
		{
			angle -= 180.0;
		}
		Player.ViewStates[ps_weapon].SY = Weapon::WEAPONTOP +
			PlayerEx(Player).Bob * sin(angle);
	}
}
