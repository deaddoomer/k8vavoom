//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class MorphedMonster : Actor;

float			UnmorphTime;
class<Actor>	UnmorphFlash;

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	if (!UpdateMorphedMonster())
	{
		::Tick(DeltaTime);
	}
}

//==========================================================================
//
//  UpdateMorphedMonster
//
//  Returns true if the pig morphs.
//
//==========================================================================

final bool UpdateMorphedMonster()
{
	TVec oldOrigin;
	class<EntityEx> originalClass;
	float oldAngle;
	EntityEx oldTarget;
	int oldSpecial;
	int oldTID;
	int oldArgs[5];
	EntityEx mo;

	if (Health <= 0)
	{
		return false;
	}
	if (UnmorphTime > XLevel.Time)
	{
		return false;
	}
	originalClass = SpecialCID;
	if (originalClass.default.bStayMorphed)
	{
		// These must remain morphed
		return false;
	}
	oldOrigin = Origin;
	oldAngle = Angles.yaw;
	oldTarget = Target;
	oldSpecial = Special;
	oldTID = TID;
	oldArgs[0] = Args[0];
	oldArgs[1] = Args[1];
	oldArgs[2] = Args[2];
	oldArgs[3] = Args[3];
	oldArgs[4] = Args[4];

	UnlinkFromWorld();
	mo = Spawn(originalClass, Origin);

	if (!mo.TestLocation())
	{
		// Didn't fit
		mo.Destroy();
		LinkToWorld();
		Special1 = 5 * 35;	// Next try in 5 seconds
		return false;
	}
	LinkToWorld();
	SetTID(0);
	SetState(FindState('FreeTargMobj'));
	mo.Angles.yaw = oldAngle;
	mo.Target = oldTarget;
	mo.Special = oldSpecial;
	mo.Args[0] = oldArgs[0];
	mo.Args[1] = oldArgs[1];
	mo.Args[2] = oldArgs[2];
	mo.Args[3] = oldArgs[3];
	mo.Args[4] = oldArgs[4];
	mo.SetTID(oldTID);
	mo.bNoSightCheck = bNoSightCheck;
	mo.bHuntPlayers = bHuntPlayers;
	mo.bNoHatePlayers = bNoHatePlayers;
	mo.bShadow = bShadow;
	mo.bGhost = bGhost;
	Spawn(UnmorphFlash ? UnmorphFlash : class<Actor>(TeleportFog), oldOrigin +
		vector(0.0, 0.0, LineSpecialGameInfo(Level.Game).TeleFogHeight));
	return true;
}

defaultproperties
{
}
