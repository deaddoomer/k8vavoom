//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Inventory : ScriptedEntity
	abstract;

const float BONUSADD		= 0.2;

int				Amount;
int				MaxAmount;
int				DropAmount;
string			PickupMessage;
name			PickupSound;
float			RespawnTime;
int				QuestID;
name			IconName;

//	Originally these didn't respawn in deathmatch
bool			bBigPowerup;
//	Spawn PickuFlash when picked up.
bool			bPickupFlash;
//	Play pickup sound at full volume
bool			bFullVolPickupSound;
//	Should give quest when picked up
bool			bGiveQuest;
//	Used by HandlePickup.
bool			bPickupGood;

replication
{
	reliable if (Role == ROLE_Authority && bNetOwner)
		Amount, MaxAmount;
}

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed()
{
	if (Role == ROLE_Authority)
	{
		if (Owner)
		{
			EntityEx(Owner).RemoveInventory(self);
		}
		Inventory = none;
	}
	::Destroyed();
}

//==========================================================================
//
//	BecomeItem
//
//==========================================================================

final void BecomeItem()
{
	UnlinkFromWorld();
	bHidden = true;
	bNoBlockmap = true;
	LinkToWorld();
	SetState(S_HELD);
}

//==========================================================================
//
//	BecomePickup
//
//==========================================================================

final void BecomePickup()
{
	UnlinkFromWorld();
	bHidden = false;
	bNoBlockmap = false;
	LinkToWorld();
	SetState(IdleState);
}

//==========================================================================
//
//	AttachToOwner
//
//==========================================================================

final void AttachToOwner(EntityEx NewOwner)
{
	BecomeItem();
	NewOwner.AddInventory(self);
}

//==========================================================================
//
//	DetachedFromOwner
//
//	Event called when item is being removed from Owner's inventory.
//
//==========================================================================

void DetachedFromOwner()
{
}

//==========================================================================
//
//	TouchSpecial
//
//==========================================================================

final void TouchSpecial(EntityEx Toucher)
{
	if (!Toucher.bPickUp)
	{
		// Can't be picked up by toucher
		return;
	}
	if (Toucher.Health <= 0)
	{
		// Toucher is dead
		return;
	}

	if (!TryPickup(Toucher))
	{
		return;
	}

	Toucher.Player.cprint(GetPickupMessage());
	PlayPickupSound(Toucher);
	PlayerEx(Toucher.Player).BonusFlash += BONUSADD;
	DoPickupSpecial(Toucher);
	if (bCountItem)
	{
		Toucher.Player.ItemCount++;
		Level.CurrentItems++;
	}
}

//==========================================================================
//
//	TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	return false;
}

//==========================================================================
//
//	HandlePickup
//
//	Called for each item in touchers in ventory. Returns true if pickup
// should be interrupted. Sets bPickupGood to true if pickup should be
// considered successful.
//
//==========================================================================

bool HandlePickup(Inventory Item)
{
	if (Inventory)
	{
		return Inventory.HandlePickup(Item);
	}
	return false;
}

//==========================================================================
//
//	ShouldStay
//
//	Returns true if item should stay after it's been picked up.
//
//==========================================================================

bool ShouldStay()
{
	return false;
}

//==========================================================================
//
//	ShouldRespawn
//
//==========================================================================

bool ShouldRespawn()
{
	if (bBigPowerup && !LineSpecialGameInfo(Level.Game).bRespawnBigItems)
	{
		return false;
	}
	return LineSpecialGameInfo(Level.Game).bRespawnItems;
}

//==========================================================================
//
//	GoAway
//
//==========================================================================

final bool GoAway()
{
	//	Never respawn dropped items.
	if (bDropped)
	{
		if (bPickupFlash)
		{
			//  Initiate the artifact pickup animation.
			Spawn(PickupFlash, Origin);
		}
		return false;
	}

	if (!ShouldStay())
	{
		if (bPickupFlash)
		{
			//  Initiate the artifact pickup animation.
			Spawn(PickupFlash, Origin);
		}
		if (ShouldRespawn())
		{
			Hide();
		}
		else
		{
			// Don't respawn
			return false;
		}
	}
	return true;
}

//==========================================================================
//
//	GoAwayAndDie
//
//==========================================================================

final void GoAwayAndDie()
{
	if (!GoAway())
	{
		bSpecial = false;
		SetState(S_HOLDANDDESTROY);
	}
}

//==========================================================================
//
//	Hide
//
//==========================================================================

final void Hide()
{
	bSpecial = false;
	bHidden = true;
	if (LineSpecialGameInfo(Level.Game).bRavenStylePickupRespawn)
	{
		SetState(S_HIDESPECIAL1);
		StateTime = 40.0;
		if (bPickupFlash)
		{
			StateTime += 30.0 / 35.0;
		}
	}
	else
	{
		SetState(S_DORMANT_PICKUP1);
		StateTime = 30.0;
	}
	if (RespawnTime)
	{
		StateTime = RespawnTime;
	}
}

//==========================================================================
//
//	GetPickupMessage
//
//==========================================================================

string GetPickupMessage()
{
	return PickupMessage;
}

//==========================================================================
//
//	DoPickupSpecial
//
//==========================================================================

void DoPickupSpecial(EntityEx Toucher)
{
	if (Special)
	{
		Level.ExecuteActionSpecial(Special, Args[0], Args[1], Args[2],
			Args[3], Args[4], NULL, 0, Toucher);
		Special = 0;
	}
}

//==========================================================================
//
//	PlayPickupSound
//
//==========================================================================

void PlayPickupSound(EntityEx Toucher)
{
	if (PickupSound)
	{
		Toucher.PlaySound(PickupSound, CHAN_ITEM, 1.0,
			bFullVolPickupSound ? ATTN_NONE : ATTN_NORMAL);
	}
}

//==========================================================================
//
//	GiveQuest
//
//==========================================================================

final void GiveQuest(EntityEx Toucher)
{
	if (bGiveQuest)
	{
		PlayerEx(Toucher.Player).GiveQuest(QuestID);
	}
}

//==========================================================================
//
//  DoRespawn
//
//==========================================================================

bool DoRespawn()
{
	return true;
}

//==========================================================================
//
//	SpecialDropAction
//
//==========================================================================

bool SpecialDropAction(EntityEx Source)
{
	return false;
}

//==========================================================================
//
//  A_RestoreSpecialThing1
//
//  Make a special thing visible again.
//
//==========================================================================

final void A_RestoreSpecialThing1()
{
	bHidden = false;
	if (DoRespawn())
	{
		PlaySound('misc/spawn', CHAN_VOICE);
	}
}

//==========================================================================
//
//  A_RestoreSpecialThing2
//
//==========================================================================

final void A_RestoreSpecialThing2()
{
	bSpecial = true;
	SetState(IdleState);
}

__states__
{
	//	Hide pickup like in Doom and Strife.
	S_DORMANT_PICKUP1('', 0, 30.0, S_DORMANT_PICKUP2) = none
	S_DORMANT_PICKUP2('', 0, -1.0, none)
	{
		EntityEx	A;

		bHidden = false;
		bSpecial = true;
		SetState(IdleState);

		// spawn a teleport fog at the new spot
		A = Spawn(ItemFog, Origin);
		A.PlaySound('misc/spawn', CHAN_ITEM);
	}

	//	Hide for 40 secs
	S_HIDESPECIAL1('ACLO', 4, 1400.0 / 35.0, S_HIDESPECIAL2) = none
	S_HIDESPECIAL2('ACLO', 0, 4.0 / 35.0, S_HIDESPECIAL3) = A_RestoreSpecialThing1
	S_HIDESPECIAL3('ACLO', 1, 4.0 / 35.0, S_HIDESPECIAL4) = none
	S_HIDESPECIAL4('ACLO', 0, 4.0 / 35.0, S_HIDESPECIAL5) = none
	S_HIDESPECIAL5('ACLO', 1, 4.0 / 35.0, S_HIDESPECIAL6) = none
	S_HIDESPECIAL6('ACLO', 2, 4.0 / 35.0, S_HIDESPECIAL7) = none
	S_HIDESPECIAL7('ACLO', 1, 4.0 / 35.0, S_HIDESPECIAL8) = none
	S_HIDESPECIAL8('ACLO', 2, 4.0 / 35.0, S_HIDESPECIAL9) = none
	S_HIDESPECIAL9('ACLO', 3, 4.0 / 35.0, S_HIDESPECIAL10) = none
	S_HIDESPECIAL10('ACLO', 2, 4.0 / 35.0, S_HIDESPECIAL11) = none
	S_HIDESPECIAL11('ACLO', 3, 4.0 / 35.0, none) = A_RestoreSpecialThing2

	//	Invisible state for held items
	S_HELD('TNT1', 0, -1.0, none) = none

	//	Will destroy item as soon as possible
	S_HOLDANDDESTROY('TNT1', 0, 0.01, none) = none
}

defaultproperties
{
	PickupMessage = "You got a pickup";
	PickupSound = 'misc/i_pkup';
}
