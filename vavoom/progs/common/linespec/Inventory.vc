//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Inventory : ScriptedEntity
	abstract;

int		Amount;
int		MaxAmount;

replication
{
	reliable if (Role == ROLE_Authority && bNetOwner)
		Amount, MaxAmount;
}

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed()
{
	if (Role == ROLE_Authority)
	{
		RemoveFromOwner();
	}
	::Destroyed();
}

//==========================================================================
//
//	BecomeItem
//
//==========================================================================

final void BecomeItem()
{
	UnlinkFromWorld();
	bHidden = true;
	bNoBlockmap = true;
	LinkToWorld();
}

//==========================================================================
//
//	AddToOwner
//
//==========================================================================

final void AddToOwner(EntityEx NewOwner)
{
	if (Owner)
	{
		RemoveFromOwner();
	}

	EntityEx Prev = NewOwner;
	while (Prev.Inventory)
	{
		Prev = Prev.Inventory;
	}
	Prev.Inventory = self;
	Inventory = none;
	Owner = NewOwner;
}

//==========================================================================
//
//	RemoveFromOwner
//
//==========================================================================

final void RemoveFromOwner()
{
	if (!Owner)
	{
		return;
	}

	EntityEx Prev = EntityEx(Owner);
	while (Prev && Prev.Inventory != self)
	{
		Prev = Prev.Inventory;
	}
	Prev.Inventory = Inventory;
	Owner = none;
	Inventory = none;
}

defaultproperties
{
}
