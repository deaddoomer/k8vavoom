//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Inventory : ScriptedEntity
	abstract;

int		Amount;
int		MaxAmount;

//	Originally these didn't respawn in deathmatch
bool	bBigPowerup;

replication
{
	reliable if (Role == ROLE_Authority && bNetOwner)
		Amount, MaxAmount;
}

//==========================================================================
//
//	Destroyed
//
//==========================================================================

void Destroyed()
{
	if (Role == ROLE_Authority)
	{
		if (Owner)
		{
			EntityEx(Owner).RemoveInventory(self);
		}
		Inventory = none;
	}
	::Destroyed();
}

//==========================================================================
//
//	BecomeItem
//
//==========================================================================

final void BecomeItem()
{
	UnlinkFromWorld();
	bHidden = true;
	bNoBlockmap = true;
	LinkToWorld();
	SetState(S_HELD);
}

//==========================================================================
//
//	BecomePickup
//
//==========================================================================

final void BecomePickup()
{
	UnlinkFromWorld();
	bHidden = false;
	bNoBlockmap = false;
	LinkToWorld();
	SetState(IdleState);
}

//==========================================================================
//
//	AttachToOwner
//
//==========================================================================

final void AttachToOwner(EntityEx NewOwner)
{
	BecomeItem();
	NewOwner.AddInventory(self);
}

//==========================================================================
//
//	DetachedFromOwner
//
//	Event called when item is being removed from Owner's inventory.
//
//==========================================================================

void DetachedFromOwner()
{
}

//==========================================================================
//
//	ShouldStay
//
//	Returns true if item should stay after it's been picked up.
//
//==========================================================================

bool ShouldStay()
{
	return false;
}

//==========================================================================
//
//	ShouldRespawn
//
//==========================================================================

bool ShouldRespawn()
{
	if (bBigPowerup && !LineSpecialGameInfo(Level.Game).bRespawnBigItems)
	{
		return false;
	}
	return LineSpecialGameInfo(Level.Game).bRespawnItems;
}

__states__
{
	//	Invisible state for held items
	S_HELD('TNT1', 0, -1.0, none) = none
}

defaultproperties
{
}
