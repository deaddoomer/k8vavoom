//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//==========================================================================
//
//  A_MntrFloorFire
//
//==========================================================================

final void A_MntrFloorFire()
{
	Actor A;

	Origin.z = FloorZ;
	A = Spawn(MinotaurFX3, vector(
		Origin.x + (Random() - Random()) * 4.0,
		Origin.y + (Random() - Random()) * 4.0, ONFLOORZ));
	A.Target = Target;
	A.Velocity.x = 0.00001;	// Force block checking
	A.CheckMissileSpawn();
}

//==========================================================================
//
//  A_DripBlood
//
//==========================================================================

final void A_DripBlood()
{
	EntityEx mo;

	mo = Spawn(Blood, Origin + vector((Random() - Random()) * 8.0,
		(Random() - Random()) * 8.0, 0.0));
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.Gravity = 0.125;
}

//==========================================================================
//
//  A_LichIceImpact
//
//==========================================================================

final void A_LichIceImpact()
{
	int i;
	float angle;
	Actor shard;

	for (i = 0; i < 8; i++)
	{
		shard = Spawn(HeadFX2, Origin);
		angle = itof(i) * 45.0;
		shard.Target = Target;
		shard.Angles.yaw = angle;
		shard.Velocity.x = shard.Speed * cos(angle);
		shard.Velocity.y = shard.Speed * sin(angle);
		shard.Velocity.z = -0.6 * 35.0;
		shard.CheckMissileSpawn();
	}
}

//==========================================================================
//
//  A_LichFireGrow
//
//==========================================================================

final void A_LichFireGrow()
{
	Health--;
	Origin.z += 9.0;
	if (Health == 0)
	{
		SetState(FindState('NoGrow'));
	}
}

//==========================================================================
//
//  A_BlueSpark
//
//==========================================================================

final void A_BlueSpark()
{
	int i;
	Actor spark;

	for (i = 0; i < 2; i++)
	{
		spark = Spawn(Sorcerer2FXSpark, Origin);
		spark.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
		spark.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
		spark.Velocity.z = (1.0 + Random()) * 35.0;
	}
}

//===========================================================================
//
//  A_MacePL1Check
//
//===========================================================================

final void A_MacePL1Check()
{
	float angle;

	if (Special1 == 0)
	{
		return;
	}
	Special1 -= 4;
	if (Special1 > 0)
	{
		return;
	}
	Special1 = 0;
	bNoGravity = false;
	Gravity = 0.125;
	angle = Angles.yaw;
	Velocity.x = 7.0 * cos(angle) * 35.0;
	Velocity.y = 7.0 * sin(angle) * 35.0;
	Velocity.z -= Velocity.z / 2.0;
}

//===========================================================================
//
//  A_MaceBallImpact
//
//===========================================================================

final void A_MaceBallImpact()
{
	if (Origin.z <= FloorZ && HitFloorType())
	{
		// Landed in some sort of liquid
		Destroy();
		return;
	}
	if ((Health != 1234) && (Origin.z <= FloorZ) && Velocity.z)
	{
		// Bounce
		Health = 1234;
		Velocity.z = Velocity.z * 192.0 / 256.0;
		BounceType = BOUNCE_None;
		SetState(IdleState);
		PlaySound('weapons/macebounce', CHAN_VOICE);
	}
	else
	{
		// Explode
		bNoGravity = true;
		Gravity = 1.0;
		SendExplosion(RGB(255, 128, 0), 86.0, Origin);
		PlaySound('weapons/macehit', CHAN_VOICE);
	}
}

//===========================================================================
//
//  A_MaceBallImpact2
//
//===========================================================================

final void A_MaceBallImpact2()
{
	Actor tiny;
	float angle;

	if (Origin.z <= FloorZ && HitFloorType())
	{
		// Landed in some sort of liquid
		Destroy();
		return;
	}
	if ((Origin.z != FloorZ) || (Velocity.z < 2.0 * 35.0))
	{
		// Explode
		Velocity = vector(0.0, 0.0, 0.0);
		bNoGravity = true;
		BounceType = BOUNCE_None;
		Gravity = 1.0;
		SendExplosion(RGB(255, 128, 0), 86.0, Origin);
	}
	else
	{
		// Bounce
		Velocity.z = Velocity.z * 192.0 / 256.0;
		SetState(IdleState);

		tiny = Spawn(MaceFX3, Origin);
		angle = AngleMod360(Angles.yaw + 90.0);
		tiny.Target = Target;
		tiny.Angles.yaw = angle;
		tiny.Velocity.x =
			Velocity.x / 2.0 + (Velocity.z - 35.0) * cos(angle);
		tiny.Velocity.y =
			Velocity.y / 2.0 + (Velocity.z - 35.0) * sin(angle);
		tiny.Velocity.z = Velocity.z;
		tiny.CheckMissileSpawn();

		tiny = Spawn(MaceFX3, Origin);
		angle = AngleMod360(Angles.yaw - 90.0);
		tiny.Target = Target;
		tiny.Angles.yaw = angle;
		tiny.Velocity.x =
			Velocity.x / 2.0 + (Velocity.z - 35.0) * cos(angle);
		tiny.Velocity.y =
			Velocity.y / 2.0 + (Velocity.z - 35.0) * sin(angle);
		tiny.Velocity.z = Velocity.z;
		tiny.CheckMissileSpawn();
	}
}

//==========================================================================
//
//	A_Timebomb
//
//==========================================================================

final void A_Timebomb()
{
	// Time Bombs
	Origin.z += 32.0;
	RenderStyle = STYLE_Add;
	Alpha = 1.0;
	A_Explode();
}

//==========================================================================
//
//  A_PodPain
//
//==========================================================================

final void A_PodPain()
{
	int i;
	int count;
	int chance;
	Actor goo;

	chance = P_Random();
	if (chance < 128)
	{
		return;
	}
	count = chance > 240 ? 2 : 1;
	for (i = 0; i < count; i++)
	{
		goo = Spawn(PodGoo, Origin + vector(0.0, 0.0, 48.0));
		goo.Target = self;
		goo.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
		goo.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
		goo.Velocity.z = (0.5 + Random() * 2.0) * 35.0;
	}
}

//==========================================================================
//
//  A_RemovePod
//
//==========================================================================

final void A_RemovePod()
{
	if (Master && Master.Special1 > 0)
	{
		Master.Special1--;
	}
}

//==========================================================================
//
//  A_MakePod
//
//==========================================================================

final void A_MakePod()
{
	Actor A;
	float x;
	float y;
	float z;

	if (Special1 == 16)
	{
		// Too many generated pods
		return;
	}
	x = Origin.x;
	y = Origin.y;
	z = Origin.z;
	A = Spawn(Pod, vector(x, y, ONFLOORZ));
	if (!A.CheckPosition(A.Origin))
	{
		// Didn't fit
		A.Destroy();
		return;
	}
	A.SetState(A.FindState('Grow'));
	A.Thrust(Random() * 360.0, 4.5);
	A.PlaySound('world/podgrow', CHAN_VOICE);
	Special1++;	// Increment generated pod count
	A.Master = self;	// Link the generator to the pod
}

//==========================================================================
//
//  A_AccTeleGlitter
//
//==========================================================================

final void A_AccTeleGlitter()
{
	if (++Health > 35)
	{
		Velocity.z += Velocity.z / 2.0;
	}
}

//==========================================================================
//
//  A_VolcanoSet
//
//==========================================================================

final void A_VolcanoSet()
{
	StateTime = 3.0 + Random() * 3.5;
}

//==========================================================================
//
//  A_VolcanoBlast
//
//==========================================================================

final void A_VolcanoBlast()
{
	int i;
	int count;
	Actor blast;
	float angle;

	count = 1 + (P_Random() % 3);
	for (i = 0; i < count; i++)
	{
		blast = Spawn(VolcanoBlast, Origin + vector(0.0, 0.0, 44.0));
		blast.Target = self;
		angle = Random() * 360.0;
		blast.Angles.yaw = angle;
		blast.Velocity.x = cos(angle) * 35.0;
		blast.Velocity.y = sin(angle) * 35.0;
		blast.Velocity.z = (2.5 + Random() * 4.0) * 35.0;
		blast.PlaySound('world/volcano/shoot', CHAN_VOICE);
		blast.CheckMissileSpawn();
	}
}

//==========================================================================
//
//  A_VolcBallImpact
//
//==========================================================================

final void A_VolcBallImpact()
{
	int i;
	Actor tiny;
	float angle;

	if (Origin.z <= FloorZ)
	{
		bNoGravity = true;
		Gravity = 1.0;
		Origin.z += 28.0;
	}
	RadiusAttack(Target, 25, 25.0, true);
	for (i = 0; i < 4; i++)
	{
		tiny = Spawn(VolcanoTBlast, Origin);
		tiny.Target = self;
		angle = itof(i) * 90.0;
		tiny.Angles.yaw = angle;
		tiny.Velocity.x = 0.7 * cos(angle) * 35.0;
		tiny.Velocity.y = 0.7 * sin(angle) * 35.0;
		tiny.Velocity.z = (1.0 + Random() * 2.0) * 35.0;
		tiny.CheckMissileSpawn();
	}
}

//==========================================================================
//
//  A_ImpDeath
//
//==========================================================================

final void A_ImpDeath()
{
	bSolid = false;
	bFloorClip = true;
	if (Origin.z <= FloorZ)
	{
		SetState(FindState('Crash'));
	}
}

//==========================================================================
//
//  A_ImpXDeath1
//
//==========================================================================

final void A_ImpXDeath1()
{
	bSolid = false;
	bNoGravity = true;
	bFloorClip = true;
	Special1 = 666;	// Flag the crash routine
}

//==========================================================================
//
//  A_ImpExplode
//
//==========================================================================

final void A_ImpExplode()
{
	Actor mo;

	bNoGravity = false;
	mo = Spawn(HereticImpChunk1, Origin);
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.z = 9.0 * 35.0;
	mo = Spawn(HereticImpChunk2, Origin);
	mo.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
	mo.Velocity.z = 9.0 * 35.0;
	if (Special1 == 666)
	{
		// Extreme death crash
		SetState(FindState('XCrash'));
	}
}

//==========================================================================
//
//  A_KnightAttack
//
//==========================================================================

final void A_KnightAttack()
{
	if (!Target)
	{
		return;
	}
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(3));
		PlaySound('hknight/melee', CHAN_WEAPON);
		return;
	}
	// Throw axe
	PlaySound(AttackSound, CHAN_WEAPON);
	if (bShadow || Random() < 0.15625)
	{
		// Red axe
		SpawnMissile(Target, RedAxe, 36.0);
		return;
	}
	// Green axe
	SpawnMissile(Target, KnightAxe, 36.0);
}

//==========================================================================
//
//  A_WizAtk1
//
//==========================================================================

final void A_WizAtk1()
{
	A_FaceTarget();
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;
	bGhost = false;
}

//==========================================================================
//
//  A_WizAtk2
//
//==========================================================================

final void A_WizAtk2()
{
	A_FaceTarget();
	RenderStyle = STYLE_Translucent;
	Alpha = 0.666;
	bGhost = true;
}

//==========================================================================
//
//  A_WizAtk3
//
//==========================================================================

final void A_WizAtk3()
{
	EntityEx A;
	float angle;
	TAVec ang;

	RenderStyle = STYLE_Normal;
	Alpha = 1.0;
	bGhost = false;
	if (!Target)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
		return;
	}
	A = SpawnMissile(Target, WizardFX1);
	if (A)
	{
		VectorAngles(&A.Velocity, &ang);
		angle = A.Angles.yaw;
		SpawnMissileAngles(WizardFX1,
			AngleMod360(angle - (45.0 / 8.0)), ang.pitch);
		SpawnMissileAngles(WizardFX1,
			AngleMod360(angle + (45.0 / 8.0)), ang.pitch);
	}
}

//==========================================================================
//
//  A_GhostOff
//
//==========================================================================

final void A_GhostOff()
{
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;
	bGhost = false;
}

//==========================================================================
//
//  A_LichAttack
//
//==========================================================================

final void A_LichAttack()
{
	int i;
	Actor fire;
	EntityEx baseFire;
	EntityEx A;
	int randAttack;
	int dist;

	// Ice ball     (close 20% : far 60%)
	// Fire column  (close 40% : far 20%)
	// Whirlwind    (close 40% : far 20%)
	// Distance threshold = 8 cells

	if (!Target)
	{
		return;
	}
	A_FaceTarget();
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(6));
		return;
	}
	dist = DistTo2(Target) > 8.0 * 64.0;
	randAttack = P_Random();
	if (randAttack < (dist ? 150 : 50))
	{
		// Ice ball
		SpawnMissile(Target, HeadFX1);
		PlaySound('ironlich/attack2', CHAN_WEAPON);
	}
	else if (randAttack < (dist ? 200 : 150))
	{
		// Fire column
		baseFire = SpawnMissile(Target, HeadFX3);
		if (baseFire != none)
		{
			baseFire.SetState(baseFire.FindState('Grown'));	// Don't grow
			for (i = 0; i < 5; i++)
			{
				fire = Spawn(HeadFX3, baseFire.Origin);
				if (i == 0)
				{
					PlaySound('ironlich/attack1', CHAN_WEAPON);
				}
				fire.Target = baseFire.Target;
				fire.Angles.yaw = baseFire.Angles.yaw;
				fire.Velocity = baseFire.Velocity;
				fire.MissileDamage = 0;
				fire.Health = (i + 1) * 2;
				fire.CheckMissileSpawn();
			}
		}
	}
	else
	{
		// Whirlwind
		A = SpawnMissile(Target, Whirlwind);
		if (A != none)
		{
			A.Origin.z -= 32.0;
			A.Tracer = Target;
			A.Health = 20 * TICRATE;	// Duration
			A.bSeekerMissile = true;
			PlaySound('ironlich/attack3', CHAN_WEAPON);
		}
	}
}

//==========================================================================
//
//  A_GenWizard
//
//==========================================================================

final void A_GenWizard()
{
	Actor A;

	A = Spawn(Wizard, Origin, vector(0.0, 0.0, 0.0));
	A.Origin.z = Origin.z - A.Height / 2.0;
	if (!A.TestLocation())
	{
		// Didn't fit
		A.Destroy();
		return;
	}
	A.Master = Target;
	Velocity = vector(0.0, 0.0, 0.0);
	SetState(FindState('Death'));
	bMissile = false;
	Spawn(TeleportFog, Origin);
}

//===========================================================================
//
//  A_StaffAttack
//
//===========================================================================

final void A_StaffAttack(int damage, class<Actor> PuffType) self(Actor)
{
	TAVec		angles;
	TVec		dir;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	angles = Angles;
	angles.yaw = AngleMod360(angles.yaw +
		(Random() - Random()) * 45.0 / 8.0);
	AimTarget = AimLineAttack(dir, angles, MELEERANGE);
	LineAttack(dir, MELEERANGE, damage, StaffPuff, true);
	if (AimTarget)
	{
		// turn to face target
		Angles.yaw = atan2(AimTarget.Origin.y - Origin.y,
			AimTarget.Origin.x - Origin.x);
		Player.bFixAngle = true;
	}
}

//===========================================================================
//
//  A_GauntletAttack
//
//===========================================================================

final void A_GauntletAttack(int power) self(Actor)
{
	float			angle;
	int				damage;
	float			slope;
	int				randVal;
	float			dist;
	TAVec			angles;
	TVec			dir;
	class<Actor>	PuffType;
	EntityEx		AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Player.ViewStates[ps_weapon].SX = Random() * 4.0 - 2.0;
	Player.ViewStates[ps_weapon].SY = Weapon::WEAPONTOP + Random() * 4.0;
	angles = Angles;
	if (power)
	{
		damage = HITDICE(2);
		dist = 4.0 * MELEERANGE;
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 16.0);
		PuffType = GauntletPuff2;
	}
	else
	{
		damage = HITDICE(2);
		dist = MELEERANGE + 0.00001;
		angles.yaw = AngleMod360(angles.yaw +
			(Random() - Random()) * 45.0 / 8.0);
		PuffType = GauntletPuff1;
	}
	AimTarget = AimLineAttack(dir, angles, dist);
	LineAttack(dir, dist, damage, PuffType);
	if (!AimTarget)
	{
		if (P_Random() > 64)
		{
			Player.ExtraLight = !Player.ExtraLight;
		}
		PlaySound('weapons/gauntletson', CHAN_WEAPON);
		return;
	}
	randVal = P_Random();
	if (randVal < 64)
	{
		Player.ExtraLight = 0;
	}
	else if (randVal < 160)
	{
		Player.ExtraLight = 1;
	}
	else
	{
		Player.ExtraLight = 2;
	}
	if (Wpn.bPoweredUp)
	{
		GiveBody(damage >> 1);
		PlaySound('weapons/gauntletspowhit', CHAN_WEAPON);
	}
	else
	{
		PlaySound('weapons/gauntletshit', CHAN_WEAPON);
	}
	// turn to face target
	angle = atan2(AimTarget.Origin.y - Origin.y,
		AimTarget.Origin.x - Origin.x);
	if (AngleMod360(angle - Angles.yaw) > 180.0)
	{
		if (AngleMod360(angle - Angles.yaw) < 360.0 - 90.0 / 20.0)
			Angles.yaw = AngleMod360(angle + 90.0 / 21.0);
		else
			Angles.yaw = AngleMod360(Angles.yaw - 90.0 / 20.0);
	}
	else
	{
		if (AngleMod360(angle - Angles.yaw) > 90.0 / 20.0)
			Angles.yaw = AngleMod360(angle - 90.0 / 21.0);
		else
			Angles.yaw = AngleMod360(Angles.yaw + 90.0 / 20.0);
	}
	bJustAttacked = true;
}

//===========================================================================
//
//  A_FireGoldWandPL1
//
//===========================================================================

final void A_FireGoldWandPL1() self(Actor)
{
	int damage;
	TVec dir;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.DepleteAmmo(Wpn.FireMode);
	damage = 7 + (P_Random() & 7);
	Aim(dir, 16.0 * 64.0);
	if (PlayerEx(Player).Refire)
	{
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 8.0);
	}
	LineAttack(dir, MISSILERANGE, damage, GoldWandPuff1);
	PlaySound('weapons/wandhit', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireGoldWandPL2
//
//===========================================================================

final void A_FireGoldWandPL2() self(Actor)
{
	int i;
	int damage;
	float momz;
	TAVec angles;
	TVec dir;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.DepleteAmmo(Wpn.FireMode);
	Aim(dir, 16.0 * 64.0);
	VectorAngles(&dir, &angles);
	SpawnMissileAngles(GoldWandFX2,
		AngleMod360(angles.yaw - (45.0 / 8.0)), angles.pitch);
	SpawnMissileAngles(GoldWandFX2,
		AngleMod360(angles.yaw + (45.0 / 8.0)), angles.pitch);
	VectorRotateAroundZ(&dir, -45.0 / 8.0);
	for (i = 0; i < 5; i++)
	{
		damage = 1 + (P_Random() & 7);
		LineAttack(dir, MISSILERANGE, damage, GoldWandPuff2);
		VectorRotateAroundZ(&dir, (45.0 / 8.0) / 2.0);
	}
	PlaySound('weapons/wandhit', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireCrossbowPL1
//
//===========================================================================

final void A_FireCrossbowPL1() self(Actor)
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.DepleteAmmo(Wpn.FireMode);
	SpawnPlayerMissile(CrossbowFX1);
	SpawnPlayerMissileAngle(CrossbowFX3,
		AngleMod360(Angles.yaw - (45.0 / 10.0)));
	SpawnPlayerMissileAngle(CrossbowFX3,
		AngleMod360(Angles.yaw + (45.0 / 10.0)));
}

//===========================================================================
//
//  A_FireCrossbowPL2
//
//===========================================================================

final void A_FireCrossbowPL2() self(Actor)
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.DepleteAmmo(Wpn.FireMode);
	SpawnPlayerMissile(CrossbowFX2);
	SpawnPlayerMissileAngle(CrossbowFX2,
		AngleMod360(Angles.yaw - (45.0 / 10.0)));
	SpawnPlayerMissileAngle(CrossbowFX2,
		AngleMod360(Angles.yaw + (45.0 / 10.0)));
	SpawnPlayerMissileAngle(CrossbowFX3,
		AngleMod360(Angles.yaw - (45.0 / 5.0)));
	SpawnPlayerMissileAngle(CrossbowFX3,
		AngleMod360(Angles.yaw + (45.0 / 5.0)));
}

//===========================================================================
//
//  A_FireBlasterPL1
//
//===========================================================================

final void A_FireBlasterPL1() self(Actor)
{
	int damage;
	float bulletslope;
	TVec dir;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.DepleteAmmo(Wpn.FireMode);
	Aim(dir, 16.0 * 64.0);
	damage = HITDICE(4);
	if (PlayerEx(Player).Refire)
	{
		VectorRotateAroundZ(&dir, (Random() - Random()) * 45.0 / 8.0);
	}
	LineAttack(dir, MISSILERANGE, damage, BlasterPuff);
	PlaySound('weapons/blastershoot', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireSkullRodPL1
//
//===========================================================================

final void A_FireSkullRodPL1() self(Actor)
{
	EntityEx	A;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	if (!Wpn.DepleteAmmo(Wpn.FireMode))
	{
		return;
	}
	A = SpawnPlayerMissile(HornRodFX1);
	// Randomize the first frame
	if (A && P_Random() > 128)
	{
		A.SetState(GetStatePlus(A.IdleState, 1));
	}
}

//===========================================================================
//
//  A_FireSkullRodPL2
//
//  The special2 field holds the player number that shot the rain missile.
// The specialmobj1 field is used for the seeking routines, special1 as a
// counter for the sound looping.
//
//===========================================================================

final void A_FireSkullRodPL2() self(Actor)
{
	HornRodFX2	A;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.DepleteAmmo(Wpn.FireMode);
	A = HornRodFX2(SpawnPlayerMissileEx(HornRodFX2, true, AimTarget));
	// Use MissileMobj instead of the return value from
	// SpawnPlayerMissile because we need to give info to the mobj
	// even if it exploded immediately.
	if (Level.Game.netgame)
	{
		// Multi-player game
		A.RainColour = Player.GetPlayerNum();
	}
	else
	{
		// Always use red missiles in single player games
		A.RainColour = 2;
	}
	if (AimTarget)
	{
		A.Tracer = AimTarget;
		A.bSeekerMissile = true;
	}
	A.PlaySound('weapons/hornrodpowshoot', CHAN_WEAPON);
}

//===========================================================================
//
//  A_FireMacePL1
//
//===========================================================================

final void A_FireMacePL1() self(Actor)
{
	EntityEx	ball;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;
	if (!Wpn.DepleteAmmo(Wpn.FireMode))
	{
		return;
	}

	if (P_Random() < 28)
	{
		float angle;

		ball = Spawn(MaceFX2, Origin + vector(0.0, 0.0, 28.0 - FloorClip));
		ball.Velocity.z = (2.0 + 173.0 * -tan(Angles.pitch) / 32.0) * 35.0;
		angle = Angles.yaw;
		ball.Target = self;
		ball.Angles.yaw = angle;
		ball.Origin.z += 173.0 * -tan(Angles.pitch) / 16.0;
		ball.Velocity.x = Velocity.x / 2.0 + ball.Speed * cos(angle);
		ball.Velocity.y = Velocity.y / 2.0 + ball.Speed * sin(angle);
		ball.PlaySound('weapons/maceshoot', CHAN_WEAPON);
		ball.CheckMissileSpawn();
		return;
	}

	Player.ViewStates[ps_weapon].SX = Random() * 4.0 - 2.0;
	Player.ViewStates[ps_weapon].SY = Weapon::WEAPONTOP + Random() * 4.0;
	ball = SpawnPlayerMissileAngle(MaceFX1,
		AngleMod360(Angles.yaw + (Random() - 0.5) * 45.0 / 4.0));
	if (ball)
	{
		Actor(ball).Special1 = 16;	// tics till dropoff
	}
}

//===========================================================================
//
//  A_FireMacePL2
//
//===========================================================================

final void A_FireMacePL2() self(Actor)
{
	EntityEx	A;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Wpn.DepleteAmmo(Wpn.FireMode);
	A = SpawnPlayerMissileEx(MaceFX4, false, AimTarget);
	if (A)
	{
		A.Velocity.x += Velocity.x;
		A.Velocity.y += Velocity.y;
		A.Velocity.z = (2.0 + 173.0 * -tan(Angles.pitch) / 32.0) * 35.0;
		if (AimTarget)
		{
			A.Tracer = AimTarget;
			A.bSeekerMissile = true;
		}
	}
	PlaySound('weapons/maceshoot', CHAN_WEAPON);
}

//==========================================================================
//
//	A_SpawnMace
//
//	This is implemented using state so that mace spots spawned by ACS
// scripts work properly. Uses Target to link them.
//
//==========================================================================

final void A_SpawnMace()
{
	EntityEx		Prev;
	EntityEx		Spot;
	EntityEx		First;
	int				SpotCount;
	Mace			M;

	if (Target)
	{
		//	Already done.
		return;
	}

	//	Link all mace spots.
	Prev = none;
	First = none;
	SpotCount = 0;
	foreach AllThinkers(MaceSpawner, Spot)
	{
		if (Prev)
		{
			Prev.Target = Spot;
		}
		else
		{
			First = Spot;
		}
		Prev = Spot;
		SpotCount++;
	}
	Prev.Target = First;

	if (!SpotCount)
	{
		// No maces placed
		return;
	}
	if (!Level.Game.deathmatch && P_Random() < 64)
	{
		// Sometimes doesn't show up if not in deathmatch
		return;
	}
	M = Spawn(Mace);
	M.SpotCount = SpotCount;
	M.FirstSpot = First;
	M.DoRespawn();
}

//===========================================================================
//
//  A_BeakRaise
//
//===========================================================================

final void A_BeakRaise() self(Actor)
{
	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	Player.ViewStates[ps_weapon].SY = Weapon::WEAPONTOP;
	Player.SetViewState(ps_weapon, Wpn.GetReadyState());
}

//===========================================================================
//
//  A_BeakAttackPL1
//
//===========================================================================

final void A_BeakAttackPL1() self(Actor)
{
	int			damage;
	TVec		dir;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	damage = 1 + (P_Random() & 3);
	AimTarget = AimLineAttack(dir, Angles, MELEERANGE);
	LineAttack(dir, MELEERANGE, damage, BeakPuff);
	if (AimTarget)
	{
		Angles.yaw = atan2(AimTarget.Origin.y - Origin.y,
			AimTarget.Origin.x - Origin.x);
		Player.bFixAngle = true;
	}
	PlaySound('chicken/peck', CHAN_VOICE);
	PlayerEx(Player).ChickenPeck = 12;
	Player.ViewStates[ps_weapon].StateTime -= Random() * 0.25;
}

//===========================================================================
//
//  A_BeakAttackPL2
//
//===========================================================================

final void A_BeakAttackPL2() self(Actor)
{
	int			damage;
	TVec		dir;
	EntityEx	AimTarget;

	if (!bIsPlayer)
	{
		return;
	}
	Weapon Wpn = PlayerEx(Player).ReadyWeapon;

	damage = HITDICE(4);
	AimTarget = AimLineAttack(dir, Owner.Angles, MELEERANGE);
	LineAttack(dir, MELEERANGE, damage, BeakPuff);
	if (AimTarget)
	{
		Angles.yaw = atan2(AimTarget.Origin.y - Origin.y,
			AimTarget.Origin.x - Origin.x);
		Player.bFixAngle = true;
	}
	PlaySound('chicken/peck', CHAN_VOICE);
	PlayerEx(Player).ChickenPeck = 12;
	Player.ViewStates[ps_weapon].StateTime -= Random() * 0.125;
}

//==========================================================================
//
//  A_Sor1Chase
//
//==========================================================================

final void A_Sor1Chase()
{
	if (Special1)
	{
		Special1--;
		StateTime -= 0.1;
	}
	A_Chase();
}

//==========================================================================
//
//  A_Srcr1Attack
//
//  Sorcerer demon attack.
//
//==========================================================================

final void A_Srcr1Attack()
{
	EntityEx A;
	TAVec ang;
	float angle;

	if (!Target)
	{
		return;
	}
	PlaySound(AttackSound, CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(8));
		return;
	}
	if (Health > (default.Health / 3) * 2)
	{
		// Spit one fireball
		SpawnMissile(Target, SorcererFX1, 48.0);
	}
	else
	{
		// Spit three fireballs
		A = SpawnMissile(Target, SorcererFX1, 48.0);
		if (A)
		{
			VectorAngles(&A.Velocity, &ang);
			angle = A.Angles.yaw;
			SpawnMissileAngles(SorcererFX1,
				AngleMod360(angle - 3.0), ang.pitch, 48.0);
			SpawnMissileAngles(SorcererFX1,
				AngleMod360(angle + 3.0), ang.pitch, 48.0);
		}
		if (Health < default.Health / 3)
		{
			// Maybe attack again
			if (Special1)
			{
				// Just attacked, so don't attack again
				Special1 = 0;
			}
			else
			{
				// Set state to attack again
				Special1 = 1;
				SetState(FindState('Missile2'));
			}
		}
	}
}

//==========================================================================
//
//  A_Sor1Pain
//
//==========================================================================

final void A_Sor1Pain()
{
	Special1 = 20;	// Number of steps to walk fast
	A_Pain();
}

//==========================================================================
//
//  A_SorcererRise
//
//==========================================================================

final void A_SorcererRise()
{
	Sorcerer2 S2;

	bSolid = false;
	S2 = Spawn(Sorcerer2, Origin);
	S2.SetState(S2.FindState('Rise'));
	S2.Angles.yaw = Angles.yaw;
	S2.Target = Target;
}
