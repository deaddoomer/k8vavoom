//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

//**************************************************************************
//	Monster AI
//**************************************************************************

//==========================================================================
//
//	A_Look
//
//	Stay in state until a player is sighted or has a goal.
//
//==========================================================================

final void A_Look()
{
	EntityEx	targ;
	Entity		Ent;

	//	Set goal now if appropriate.
	if (Special == LNSPEC_ThingSetGoal && Args[0] == 0)
	{
		Goal = none;
		for (Ent = Level.FindMobjFromTID(Args[1], none); Ent;
			Ent = Level.FindMobjFromTID(Args[1], Ent))
		{
			if (!Ent.IsA('PatrolPoint'))
			{
				continue;
			}
			Goal = EntityEx(Ent);
			break;
		}
		Special = 0;
		ReactionTime = itof(Args[2]) + XLevel.Time;
		bChaseGoal = !!Args[3];
	}

	Threshold = 0;	// any shot will wake up
	if (TIDToHate)
	{
		targ = Target;
	}
	else
	{
		targ = Level.CompatSoundTarget || bNoSector ?
			EntityEx(Sector->SoundTarget) : LastHeard;
		//	If it's dead, don't chase it.
		if (targ && targ.Health <= 0)
		{
			targ = none;
		}
		if (targ && targ.bIsPlayer && PlayerEx(targ.Player).bNoTarget)
		{
			return;
		}
	}

	//	Andy Baker's stealth monsters
	if (bStealth)
	{
		VisDir = -1;
	}

	if (targ && targ.bShootable)
	{
		if (bFriendly && targ.bFriendly)
		{
			//	If we find a valid target here, the wandering logic should
			// *not* be activated! If would cause the seestate to be set twice.
			if (!LookForPlayers(bLookAllAround))
			{
				// Let the actor wander around aimlessly looking for a fight
				if (SeeState)
				{
					if (!bInChase)
					{
						SetState(SeeState);
					}
				}
				else
				{
					A_Wander();
				}
			}
		}
		else
		{
			Target = targ;

			if (bAmbush)
			{
				if (!CanSee(Target))
				{
					if (!LookForPlayers(bLookAllAround))
					{
						return;
					}
				}
			}
		}
	}
	else
	{
		if (!LookForPlayers(bLookAllAround))
		{
			return;
		}
	}

	//	Go into chase state
	//	Don't start chasing after a goal if it isn't time yet.
	if (Target == Goal)
	{
		if (ReactionTime > XLevel.Time)
		{
			Target = none;
		}
	}
	else if (SightSound)
	{
		if (bBoss)
		{
			// Full volume
			PlaySound(SightSound, CHAN_VOICE, 1.0, ATTN_NONE);
		}
		else
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
	}

	if (Target)
	{
		SetState(SeeState);
	}
}

//==========================================================================
//
//	A_Look2
//
//==========================================================================

final void A_Look2()
{
	EntityEx	targ;

	Threshold = 0;	// any shot will wake up
	targ = LastHeard;

	if (!bNeutral && targ && targ.bShootable)
	{
		if (bFriendly != targ.bFriendly || Level.bNoAllies)
		{
			Target = targ;
			if (!bStandMustSeeTarget || CanSee(targ))
			{
				Threshold = 10;
				// Let the actor wander around aimlessly looking for a fight
				if (SeeState)
				{
					if (!bInChase)
					{
						SetState(SeeState);
					}
				}
				else
				{
					A_Wander();
				}
				return;
			}
		}
		else
		{
			if (LookForPlayers(bLookAllAround))
			{
				// Let the actor wander around aimlessly looking for a fight
				if (SeeState)
				{
					if (!bInChase)
					{
						SetState(SeeState);
					}
				}
				else
				{
					A_Wander();
				}
				bInCombat = true;
				return;
			}
		}
	}
	if (P_Random() < 30)
	{
		if (!(P_Random() & 1))
			SetState(GetStatePlus(IdleState, 1, true));
		else
			SetState(GetStatePlus(IdleState, 2, true));
	}
	if (!bStanding && P_Random() < 40)
	{
		SetState(GetStatePlus(IdleState, 3, true));
	}
}

//==========================================================================
//
// A_LookEx
//
// [KS] Borrowed the A_Look code to make a parameterized version.
//
//==========================================================================

final void A_LookEx (int flags, float minseedist, float maxseedist, float maxheardist,
			float fov, name wakestate)
{
	EntityEx	targ;
	Entity		Ent;
	float		dist;

	//	Set goal now if appropriate.
	if (Special == LNSPEC_ThingSetGoal && Args[0] == 0)
	{
		Goal = none;
		for (Ent = Level.FindMobjFromTID(Args[1], none); Ent;
			Ent = Level.FindMobjFromTID(Args[1], Ent))
		{
			if (!Ent.IsA('PatrolPoint'))
			{
				continue;
			}
			Goal = EntityEx(Ent);
			break;
		}
		Special = 0;
		ReactionTime = itof(Args[2]) + XLevel.Time;
		bChaseGoal = !!Args[3];
	}

	Threshold = 0;	// any shot will wake up
	if (TIDToHate)
	{
		targ = Target;
	}
	else
	{
		if (!(flags & Entity::LOF_NOSOUNDCHECK))
		{
			targ = Level.CompatSoundTarget || bNoSector ?
				EntityEx(Sector->SoundTarget) : LastHeard;
			//	If it's dead, don't chase it.
			if (targ && targ.Health <= 0)
			{
				targ = none;
			}

			// [KS] If the target is too far away, don't respond to the sound.
			if (maxheardist && DistTo(targ) > maxheardist)
			{
				targ = none;
			}
		}

		if (targ && targ.bIsPlayer && PlayerEx(targ.Player).bNoTarget)
		{
			return;
		}
	}

	//	Andy Baker's stealth monsters
	if (bStealth)
	{
		VisDir = -1;
	}

	if (targ && targ.bShootable)
	{
		if (bFriendly && targ.bFriendly)
		{
			if (!(flags & Entity::LOF_NOSIGHTCHECK))
			{
				//	If we find a valid target here, the wandering logic should
				// *not* be activated! If would cause the seestate to be set twice.
				if (!LookForPlayers(bLookAllAround))
				{
					// Let the actor wander around aimlessly looking for a fight
					if (FindState(wakestate))
					{
						if (!bInChase)
						{
							SetState(FindState(wakestate));
						}
					}
					else
					{
						A_Wander();
					}
				}
			}
			else
			{
				// Let the actor wander around aimlessly looking for a fight
				if (FindState(wakestate))
				{
					if (!bInChase)
					{
						SetState(FindState(wakestate));
					}
				}
				else
				{
					A_Wander();
				}
			}
		}
		else
		{
			Target = targ;

			if (bAmbush)
			{
				if (!CanSee(Target) && (!minseedist || DistTo(Target) < minseedist) &&
					(!maxseedist || DistTo(Target) > maxseedist))
				{
					if (!LookForPlayers(bLookAllAround))
					{
						return;
					}
				}
			}
		}
	}
	else
	{
		if (!(flags & Entity::LOF_NOSIGHTCHECK))
		{
			if (!LookForPlayers(bLookAllAround))
			{
				return;
			}
		}
		else
		{
			return;
		}
	}

	//	Go into chase state
	//	Don't start chasing after a goal if it isn't time yet.
	if (Target == Goal)
	{
		if (ReactionTime > XLevel.Time)
		{
			Target = none;
		}
	}
	else if (SightSound && !(flags & Entity::LOF_NOSEESOUND))
	{
		if (flags & Entity::LOF_FULLVOLSEESOUND)
		{
			// Full volume
			PlaySound(SightSound, CHAN_VOICE, 1.0, ATTN_NONE);
		}
		else
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
	}

	if (Target)
	{
		if (FindState(wakestate))
		{
			SetState(FindState(wakestate));
		}
		else
		{
			SetState(SeeState);
		}
	}
}

//==========================================================================
//
//	A_TurretLook
//
//	Stay in state untill alarm is triggered.
//
//==========================================================================

final void A_TurretLook()
{
	EntityEx targ;

	Threshold = 0;
	targ = LastHeard;
	if (targ && targ.Health > 0 && targ.bShootable &&
		bFriendly != targ.bFriendly)
	{
		Target = targ;
		if (bAmbush && !CanSee(Target))
		{
			return;
		}
		// go into chase state
		if (SightSound)
		{
			PlaySound(SightSound, CHAN_VOICE);
		}
		LastHeard = none;
		Threshold = 10;
		SetState(SeeState);
	}
}

//==========================================================================
//
//	A_Wander
//
//==========================================================================

final void A_Wander()
{
	float	delta;

	bInCombat = false;
	if (bStanding)
	{
		return;
	}

	if (ReactionCount != 0)
	{
		ReactionCount--;
		return;
	}

	// turn towards movement direction if not there yet
	if (MoveDir < DI_NODIR)
	{
		Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;
		delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);

		if (delta > 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw - 45.0);
		}
		else if (delta < 0.0)
		{
			Angles.yaw = AngleMod360(Angles.yaw + 45.0);
		}
	}

	if (--MoveCount < 0 || !StepMove())
	{
		RandomChaseDir();
		MoveCount += 5;
	}
}

//==========================================================================
//
//	DoChase
//
//	Actor has a melee attack, so it tries to close as fast as possible
//
//==========================================================================

void DoChase(bool FastChase, state AMeleeState, state AMissileState,
	bool NightmareFast, bool PlayActive, bool DontMove)
{
	float		delta;
	float		dist;
	float		ang;
	float		oldX;
	float		oldY;
	int			oldFloor;

	if (bInChase)
	{
		return;
	}
	bInChase = true;

	//	Andy Baker's stealth monsters
	if (bStealth)
	{
		VisDir = -1;
	}

	if (ReactionCount)
	{
		ReactionCount--;
	}

	bInCombat = true;
	//	Modify target threshold.
	if (Threshold)
	{
		if (!Target || Target.Health <= 0)
		{
			Threshold = 0;
		}
		else
		{
			Threshold--;
		}
	}

	if (NightmareFast && Level.Game.fastparm)
	{
		//	Monsters move faster in nightmare mode.
		StateTime *= 0.5;
		if (StateTime < 0.1)
		{
			StateTime = 0.1;
		}
	}

	//	Turn towards movement direction if not there yet.
	// killough 9/7/98: keep facing towards target if strafing or backing out
	if (strafecount)
	{
		A_FaceTarget();
	}
	else
	{
		if (MoveDir < 8)
		{
			Angles.yaw = itof(ftoi(Angles.yaw / 45.0)) * 45.0;
			delta = AngleMod180(Angles.yaw - itof(MoveDir) * 45.0);

			if (delta > 0.0)
			{
				Angles.yaw = AngleMod360(Angles.yaw - 45.0);
			}
			else if (delta < 0.0)
			{
				Angles.yaw = AngleMod360(Angles.yaw + 45.0);
			}
		}
	}

	//	If the target is dead and not a goal, stop chasing it.
	if (Target && Target != Goal && Target.Health <= 0)
	{
		Target = none;
	}

	if (!Target || !Target.bShootable)
	{
		//	Look for a new target.
		if (LookForPlayers(true) && Target != Goal)
		{
			//	Got a new target.
			bInChase = false;
			return;
		}
		if (!Target)
		{
			if (bFriendly)
			{
				A_Look();
				if (!Target)
				{
					if (!DontMove)
					{
						A_Wander();
					}
					bInChase = false;
					return;
				}
			}
			else
			{
				SetState(IdleState);
				bInCombat = false;
				bInChase = false;
				return;
			}
		}
	}

	//	Do not attack twice in a row.
	if (bJustAttacked)
	{
		bJustAttacked = false;
		if (!IsFast() && !DontMove)
		{
			NewChaseDir();
		}
		bInChase = false;
		return;
	}

	//	Don't attack if just moving toward goal
	if (Target == Goal || (bChaseGoal && Goal))
	{
		EntityEx SavedTarget = Target;
		Target = Goal;
		bool Result = CheckMeleeRange();
		Target = SavedTarget;

		if (Result)
		{
			// reached the goal

			// Execute the specials of any PatrolSpecials with the same TID
			// as the goal.
			Entity Ent;
			for (Ent = Level.FindMobjFromTID(Goal.TID, none); Ent;
				Ent = Level.FindMobjFromTID(Goal.TID, Ent))
			{
				if (Ent.Class != PatrolSpecial)
				{
					continue;
				}
				Level.ExecuteActionSpecial(Ent.Special, Ent.Args[0],
					Ent.Args[1], Ent.Args[2], Ent.Args[3], Ent.Args[4],
					NULL, 0, self);
			}

			float LastGoalAng = Goal.Angles.yaw;
			int Delay;
			EntityEx NewGoal = none;
			for (Ent = Level.FindMobjFromTID(Goal.Args[0], none); Ent;
				Ent = Level.FindMobjFromTID(Goal.Args[0], Ent))
			{
				if (!Ent.IsA('PatrolPoint'))
				{
					continue;
				}
				NewGoal = EntityEx(Ent);
				break;
			}
			if (NewGoal && Goal == Target)
			{
				Delay = NewGoal.Args[1];
				ReactionTime = itof(Delay) + XLevel.Time;
			}
			else
			{
				Delay = 0;
				ReactionTime = default.ReactionTime;
				Angles.yaw = LastGoalAng;		// Look in direction of last goal
			}
			if (Target == Goal)
			{
				Target = none;
			}
			bJustAttacked = true;
			if (NewGoal && Delay != 0)
			{
				bInCombat = true;
				SetState(IdleState);
			}
			Goal = NewGoal;
			bInChase = false;
			return;
		}
	}

	if (Goal != Target)
	{
		if (FastChase && !DontMove)
		{
			//	Strafe
			if (FastChaseStrafeCount > 0)
			{
				FastChaseStrafeCount--;
			}
			else
			{
				FastChaseStrafeCount = 0;
				Velocity.x = 0.0;
				Velocity.y = 0.0;
				dist = DistTo(Target);
				if (dist < 640.0)
				{
					if (P_Random() < 100)
					{
						ang = atan2(Target.Origin.y - Origin.y,
							Target.Origin.x - Origin.x);
						if (P_Random() < 128)
							ang = AngleMod360(ang + 90.0);
						else
							ang = AngleMod360(ang - 90.0);
						Velocity.x = 13.0 * cos(ang) * 35.0;
						Velocity.y = 13.0 * sin(ang) * 35.0;
						FastChaseStrafeCount = 3;	// strafe time
					}
				}
			}
		}

		// Scared monsters attack less frequently
		if ((!Target.bIsPlayer ||
			 !(PlayerEx(Target.Player).Cheats & PlayerEx::CF_FRIGHTENING)) &&
			!bFrightened ||
			P_Random() < 43)
		{
			//	Check for melee attack.
			if (AMeleeState && CheckMeleeRange())
			{
				if (AttackSound)
				{
					PlaySound(AttackSound, CHAN_WEAPON);
				}
				SetState(AMeleeState);
				bInChase = false;
				return;
			}

			//	Check for missile attack.
			if (AMissileState)
			{
				if (IsFast() || !MoveCount)
				{
					if (CheckMissileRange())
					{
						SetState(AMissileState);
						bJustAttacked = true;
						bInChase = false;
						return;
					}
				}
			}
		}
	}

	//	Possibly choose another target.
	if ((Level.Game.netgame || TIDToHate) && !Threshold)
	{
		if (!CanSee(Target))
		{
			bool PrevNoSightCheck = bNoSightCheck;
			bNoSightCheck = false;
			bool GotNew = LookForPlayers(true);
			bNoSightCheck = PrevNoSightCheck;
			if (GotNew)
			{
				//	Got a new target.
				bInChase = false;
				return;
			}
		}
	}

	if (strafecount)
	{
		strafecount--;
	}

	//	Chase towards player.
	if ((!FastChase || !FastChaseStrafeCount) && !DontMove)
	{
		oldX = Origin.x;
		oldY = Origin.y;
		oldFloor = Sector->floor.pic;
		if (--MoveCount < 0 || !StepMove())
		{
			NewChaseDir();
		}
		if (bCantLeaveFloorpic && Sector->floor.pic != oldFloor)
		{
			TryMove(vector(oldX, oldY, Origin.z), false);
			NewChaseDir();
		}
	}
	else if (DontMove && MoveCount > 0)
	{
		MoveCount = 0;
	}

	//	Make active sound.
	if (PlayActive && P_Random() < 3)
	{
		PlayActiveSound();
	}
	bInChase = false;
}

//==========================================================================
//
//  CheckForResurrect
//
//  Check for ressurecting a body.
//
//==========================================================================

final bool CheckForResurrect(bool UseVileStates)
{
	float viletryx;
	float viletryy;
	Entity Other;

	if (MoveDir != DI_NODIR)
	{
		// check for corpses to raise
		viletryx = Origin.x + Speed / 35.0 * LineSpecialGameInfo(Level.Game).xspeed[MoveDir];
		viletryy = Origin.y + Speed / 35.0 * LineSpecialGameInfo(Level.Game).yspeed[MoveDir];

		//	For all things in radius check whether object is a corpse
		// that can be raised.
		foreach RadiusThings(Other, vector(viletryx, viletryy, 0.0), MAXRADIUS)
		{
			//  Detect a corpse that could be raised.
			float maxdist;
			bool check;

			maxdist = Other.Radius + Radius;

			if (fabs(Other.Origin.x - viletryx) > maxdist ||
				fabs(Other.Origin.y - viletryy) > maxdist)
			{
				continue;	// not actually touching
			}

			if (!CanSee(Other))
			{
				continue;	//  Con't see, possibly in other region
			}

			if (!EntityEx(Other).DoThingRaise())
			{
				continue;
			}
			//	This is now a archvile minion, so hate what he hates.
			EntityEx(Other).CopyFriendliness(self, false);

			// got one!
			EntityEx temp = Target;
			Target = EntityEx(Other);
			A_FaceTarget();
			Target = temp;

			//	Enter heal state.
			state HealState = FindState('Heal');
			if (!HealState && UseVileStates)
			{
				//	For DeHackEd compatibility use Arch-vile heal states if
				// this one doesn't have it's own.
				HealState = FindClassState(Archvile, 'Heal');
			}
			if (HealState)
			{
				SetState(HealState);
			}

			return true;
		}
	}
	return false;
}

//==========================================================================
//
//	A_Chase
//
//==========================================================================

final void A_Chase()
{
	DoChase(false, MeleeState, MissileState,
		LineSpecialGameInfo(Level.Game).bNightmareFastChase, true, false);
}

//==========================================================================
//
//	decorate_A_Chase
//
//==========================================================================

final void decorate_A_Chase(optional state AMeleeState,
	optional state AMissileState, optional int Flags)
{
	if (specified_AMeleeState)
	{
		if ((Flags & 8) && CheckForResurrect(false))
		{
			return;
		}
		DoChase(!!(Flags & 1), AMeleeState, AMissileState, !!(Flags & 4),
			!(Flags & 2), !!(Flags & 16));
	}
	else
	{
		DoChase(false, MeleeState, MissileState,
			LineSpecialGameInfo(Level.Game).bNightmareFastChase, true, false);
	}
}

//============================================================================
//
//  A_FastChase
//
//============================================================================

final void A_FastChase()
{
	DoChase(true, MeleeState, MissileState, true, true, false);
}

//==========================================================================
//
//  A_VileChase
//
//==========================================================================

final void A_VileChase()
{
	if (!CheckForResurrect(true))
	{
		// Return to normal attack.
		A_Chase();
	}
}

//==========================================================================
//
//	A_ExtChase
//
//==========================================================================

final void A_ExtChase(bool UseMelee, bool UseMissile,
	optional bool PlayActive, optional bool NightmareFast)
{
	if (!specified_PlayActive)
	{
		PlayActive = true;
	}
	state Melee = MeleeState;
	if (!UseMelee)
	{
		Melee = none;
	}
	state Missile = MissileState;
	if (!UseMissile)
	{
		Missile = none;
	}
	DoChase(false, Melee, Missile, NightmareFast, PlayActive, false);
}

//==========================================================================
//
//	A_FaceTarget
//
//==========================================================================

final void A_FaceTarget()
{
	if (!Target)
	{
		return;
	}

	//	Andy Baker's stealth monsters
	if (bStealth)
	{
		VisDir = 1;
	}

	bAmbush = false;

	Angles.yaw = atan2(Target.Origin.y - Origin.y,
		Target.Origin.x - Origin.x);

	if (Target.bShadow)
	{
		Angles.yaw = AngleMod360(Angles.yaw + (Random() - Random()) * 45.0);
	}
}

//==========================================================================
//
//	A_Die
//
//==========================================================================

final void A_Die()
{
	Damage(none, none, Health);
}

//==========================================================================
//
//	A_CentaurDefend
//
//==========================================================================

final void A_CentaurDefend()
{
	A_FaceTarget();
	if (CheckMeleeRange() && Random() < 0.125)
	{
		A_UnSetInvulnerable();
		SetState(MeleeState);
	}
}

//==========================================================================
//
//	A_AlertMonsters
//
//==========================================================================

final void A_AlertMonsters()
{
	if (Target && Target.bIsPlayer)
	{
		LineSpecialLevelInfo(Level).NoiseAlert(Target, self);
	}
}

//==========================================================================
//
//	A_ClearTarget
//
//==========================================================================

final void A_ClearTarget()
{
	Target = none;
	LastEnemy = none;
	LastHeard = none;
}

//==========================================================================
//
//	A_ClearSoundTarget
//
//==========================================================================

final void A_ClearSoundTarget()
{
	Entity Ent;
	Sector->SoundTarget = none;
	for (Ent = Sector->ThingList; Ent; Ent = Ent.SNext)
	{
		EntityEx(Ent).LastHeard = none;
	}
}

//==========================================================================
//
//	A_KillMaster
//
//==========================================================================

final void A_KillMaster()
{
	if (Master)
	{
		Master.Damage(self, self, Master.Health,, true);
	}
}

//==========================================================================
//
//	A_KillChildren
//
//==========================================================================

final void A_KillChildren()
{
	Actor A;
	foreach AllThinkers(Actor, A)
	{
		if (A.Master == self)
		{
			A.Damage(self, self, A.Health,, true);
		}
	}
}

//==========================================================================
//
//	A_SentinelBob
//
//==========================================================================

final void A_SentinelBob()
{
	float minz, maxz;

	if (bInFloat)
	{
		Velocity.z = 0.0;
		return;
	}

	if (Threshold)
		return;

	maxz = CeilingZ - Height - 16.0;
	minz = FloorZ + 96.0;
	if (minz > maxz)
	{
		minz = maxz;
	}

	if (minz < Origin.z)
	{
		Velocity.z -= 1.0 * 35.0;
	}
	else
	{
		Velocity.z += 1.0 * 35.0;
	}
	ReactionCount = (minz >= Origin.z) ? 4 : 0;
}

//==========================================================================
//
//	A_Burst
//
//==========================================================================

final void A_Burst(class<Actor> ChunkType)
{
	if (!ChunkType)
	{
		return;
	}

	//	Stop the thing and reset it's height.
	Velocity = vector(0.0, 0.0, 0.0);
	Height = default.Height;

	//	Calculate number of chunks based on the size of the thing.
	int NumChunks = ftoi(Radius * Height) / 32;
	if (NumChunks < 4)
	{
		NumChunks = 4;
	}
	int i = NumChunks + ((P_Random() - P_Random()) % (NumChunks / 4));
	if (i < 24)
	{
		i = 24;
	}
	for (; i >= 0; i--)
	{
		Actor A = Spawn(ChunkType, Origin + vector(
			(Random() - 0.5) * 2.0 * Radius,
			(Random() - 0.5) * 2.0 * Radius,
			Random() * Height));
		if (A)
		{
			A.Velocity.z = (A.Origin.z - Origin.z) / Height * 4.0 * 35.0;
			A.Velocity.x = (Random() - Random()) * 2.0 * 35.0;
			A.Velocity.y = (Random() - Random()) * 2.0 * 35.0;
			A.RenderStyle = RenderStyle;
			A.Alpha = Alpha;
			A.CopyFriendliness(self, true);
		}
	}

	//	If it's a boss, execute special boss death actions.
	if (bBossDeath)
	{
		A_BossDeath();
	}

	//	Drop items and go away.
	A_NoBlocking();
	Destroy();
}
