//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PlayerEx : BasePlayer
	abstract;

//
// Player internal flags, for cheats and debug.
//
const int CF_NOCLIP			= 1;	// No clipping, walk through barriers.
const int CF_GODMODE		= 2;	// No damage, no health loss.

// For screen flashing (red or bright).
float			DamageFlash;
float			BonusFlash;

// Base height above floor for viewz.
float			ViewHeight;
// Bob/squat speed.
float			DeltaViewHeight;
// bounded/scaled total momentum.
float			Bob;

// Who did damage (none for floors/ceilings).
EntityEx		Attacker;

float			JumpTime;
int				LocalQuakeHappening;

TVec			MoveDir;

float			LastSectorDamageTime;

float			HazardTime;
float			LastHazardTime;

// Bit flags, for cheats and debug.
// See cheat_t, above.
int				Cheats;

Weapon			ReadyWeapon;
Weapon			PendingWeapon;	// Is none if not changing.

// Refired shots are less accurate.
int				Refire;

replication
{
	reliable if (!bIsClient)
		Cheats, ReadyWeapon;
}

//==========================================================================
//
//	BestWeapon
//
//	Returns best weapon to use
//
//==========================================================================

Weapon BestWeapon(optional class<Ammo> AmmoType)
{
	bool Powered = HaveTomeOfPower();
	Weapon Best = none;
	Inventory Item;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		//	Must be a weapon
		Weapon Wpn = Weapon(Item);
		if (!Wpn)
		{
			continue;
		}
		//	Check if best one is better that this one.
		if (Best && Wpn.SelectionOrder > Best.SelectionOrder)
		{
			continue;
		}
		//	Possibly limit to specific ammo type.
		if (AmmoType && Wpn.AmmoType1 != AmmoType)
		{
			continue;
		}
		//	Check if it's for the current tome of power state.
		if (Powered && Wpn.SisterWeapon && Wpn.SisterWeapon.bPoweredUp)
		{
			continue;
		}
		if (!Powered && Wpn.bPoweredUp)
		{
			continue;
		}
		//	Make sure it has enough ammo.
		if (!Wpn.CheckAmmo(false))
		{
			continue;
		}
		//	Good one.
		Best = Wpn;
	}
	return Best;
}

//==========================================================================
//
//	GetSlotChangeWeapon
//
//==========================================================================

Weapon GetSlotChangeWeapon(int Slot, Weapon Current, bool bCheckAmmo)
{
	if (Current && Current.Slot != Slot)
	{
		//	Current one is from different slot, so just ignore it.
		Current = none;
	}

	bool Powered = HaveTomeOfPower();
	Weapon Best = none;
	Weapon NextBest = none;
	Inventory Item;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		//	Must be a weapon
		Weapon Wpn = Weapon(Item);
		if (!Wpn)
		{
			continue;
		}
		//	Check if it's for the needed slot.
		if (Wpn.Slot != Slot)
		{
			continue;
		}
		//	Skip current one.
		if (Wpn == Current)
		{
			continue;
		}
		//	Check if it's for the current tome of power state.
		if (Powered && Wpn.SisterWeapon && Wpn.SisterWeapon.bPoweredUp)
		{
			continue;
		}
		if (!Powered && Wpn.bPoweredUp)
		{
			continue;
		}
		//	See if it has enough ammo
		if (bCheckAmmo && !Wpn.CheckAmmo(false))
		{
			continue;
		}
		//	See if this is the best one.
		if (!Best || Best.SelectionOrder > Wpn.SelectionOrder)
		{
			Best = Wpn;
		}
		//	See if this one is best next choice after the current one.
		if (Current && Wpn.SelectionOrder > Current.SelectionOrder &&
			(!NextBest || NextBest.SelectionOrder > Wpn.SelectionOrder))
		{
			NextBest = Wpn;
		}
	}

	if (NextBest)
	{
		return NextBest;
	}
	return Best;
}

//==========================================================================
//
//	GetPrevWeapon
//
//==========================================================================

Weapon GetPrevWeapon(Weapon Current, bool bCheckAmmo)
{
	bool Powered = HaveTomeOfPower();
	Weapon Best = none;
	Weapon NextBest = none;
	Inventory Item;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		//	Must be a weapon
		Weapon Wpn = Weapon(Item);
		if (!Wpn)
		{
			continue;
		}
		//	Skip current one.
		if (Wpn == Current)
		{
			continue;
		}
		//	Check if it's for the current tome of power state.
		if (Powered && Wpn.SisterWeapon && Wpn.SisterWeapon.bPoweredUp)
		{
			continue;
		}
		if (!Powered && Wpn.bPoweredUp)
		{
			continue;
		}
		//	See if it has enough ammo
		if (bCheckAmmo && !Wpn.CheckAmmo(false))
		{
			continue;
		}
		//	See if this is the best one to be selected if we need to wrap.
		if (!Best || Best.Slot < Wpn.Slot || (Best.Slot == Wpn.Slot &&
			Best.SelectionOrder > Wpn.SelectionOrder))
		{
			Best = Wpn;
		}
		//	See if this one is best next choice after the current one.
		if (Current && (Wpn.Slot < Current.Slot ||
				(Wpn.Slot == Current.Slot &&
					Wpn.SelectionOrder > Current.SelectionOrder)) &&
			(!NextBest || Wpn.Slot > NextBest.Slot ||
				(Wpn.Slot == NextBest.Slot &&
					Wpn.SelectionOrder < NextBest.SelectionOrder)))
		{
			NextBest = Wpn;
		}
	}

	if (NextBest)
	{
		return NextBest;
	}
	return Best;
}

//==========================================================================
//
//	GetNextWeapon
//
//==========================================================================

Weapon GetNextWeapon(Weapon Current, bool bCheckAmmo)
{
	bool Powered = HaveTomeOfPower();
	Weapon Best = none;
	Weapon NextBest = none;
	Inventory Item;
	for (Item = EntityEx(MO).Inventory; Item; Item = Item.Inventory)
	{
		//	Must be a weapon
		Weapon Wpn = Weapon(Item);
		if (!Wpn)
		{
			continue;
		}
		//	Skip current one.
		if (Wpn == Current)
		{
			continue;
		}
		//	Check if it's for the current tome of power state.
		if (Powered && Wpn.SisterWeapon && Wpn.SisterWeapon.bPoweredUp)
		{
			continue;
		}
		if (!Powered && Wpn.bPoweredUp)
		{
			continue;
		}
		//	See if it has enough ammo
		if (bCheckAmmo && !Wpn.CheckAmmo(false))
		{
			continue;
		}
		//	See if this is the best one to be selected if we need to wrap.
		if (!Best || Best.Slot > Wpn.Slot || (Best.Slot == Wpn.Slot &&
			Best.SelectionOrder < Wpn.SelectionOrder))
		{
			Best = Wpn;
		}
		//	See if this one is best next choice after the current one.
		if (Current && (Wpn.Slot > Current.Slot ||
				(Wpn.Slot == Current.Slot &&
					Wpn.SelectionOrder < Current.SelectionOrder)) &&
			(!NextBest || Wpn.Slot < NextBest.Slot ||
				(Wpn.Slot == NextBest.Slot &&
					Wpn.SelectionOrder > NextBest.SelectionOrder)))
		{
			NextBest = Wpn;
		}
	}

	if (NextBest)
	{
		return NextBest;
	}
	return Best;
}

float GetWeaponKickBack()
{
	return 0.0;
}

bool IsStaffLevel2()
{
	return false;
}

bool HaveInvulnerabilityPower()
{
	return false;
}

int ArmorAbsorbDamage(EntityEx inflictor, EntityEx source, int damage,
	name DmgType)
{
	return damage;
}

bool IsWeaponAlwaysExtremeDeath()
{
	return false;
}

void StartDeathSlideShow()
{
}

void DropWeapon()
{
}

void GiveQuest(int QuestID)
{
}

void GotAmmo(Ammo NewAmmo)
{
}

bool HaveTomeOfPower()
{
	return false;
}

void FireWeapon()
{
}

void SetWeapon(Weapon Wpn)
{
}

void BringUpWeapon()
{
}

defaultproperties
{
}
