//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class PlayerEx : BasePlayer
	abstract;

//
// Player internal flags, for cheats and debug.
//
const int CF_NOCLIP			= 1;	// No clipping, walk through barriers.
const int CF_GODMODE		= 2;	// No damage, no health loss.

// For screen flashing (red or bright).
float			DamageFlash;
float			BonusFlash;

// Base height above floor for viewz.
float			ViewHeight;
// Bob/squat speed.
float			DeltaViewHeight;
// bounded/scaled total momentum.
float			Bob;

// Who did damage (none for floors/ceilings).
EntityEx		Attacker;

float			JumpTime;
int				LocalQuakeHappening;

TVec			MoveDir;

float			LastSectorDamageTime;

float			HazardTime;
float			LastHazardTime;

// Bit flags, for cheats and debug.
// See cheat_t, above.
int				Cheats;

replication
{
	reliable if (!bIsClient)
		Cheats;
}

float GetWeaponKickBack()
{
	return 0.0;
}

bool IsStaffLevel2()
{
	return false;
}

bool HaveInvulnerabilityPower()
{
	return false;
}

int ArmorAbsorbDamage(EntityEx inflictor, EntityEx source, int damage,
	name DmgType)
{
	return damage;
}

bool IsWeaponAlwaysExtremeDeath()
{
	return false;
}

void StartDeathSlideShow()
{
}

void DropWeapon()
{
}

void GiveQuest(int QuestID)
{
}

void GotAmmo(Ammo NewAmmo)
{
}

defaultproperties
{
}
