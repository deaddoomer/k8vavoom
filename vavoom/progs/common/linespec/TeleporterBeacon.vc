//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class TeleporterBeacon : Inventory
	game(GAME_Strife)
	__mobjinfo__(10);

bool			bRebelSpawned;

//==========================================================================
//
//	TryPickup
//
//==========================================================================

bool TryPickup(EntityEx Toucher)
{
	//	Can't pick it up if already started to spawn rebels.
	if (bRebelSpawned)
	{
		return false;
	}
	return ::TryPickup(Toucher);
}

//==========================================================================
//
//	Use
//
//==========================================================================

bool Use(bool Pickup)
{
	//	Increase item count because ItemThrow also decreases it.
	Amount++;
	EntityEx A = PlayerEx(Owner.Player).InventoryThrow();
	if (A)
	{
		A.SetState(A.SeeState);
		A.Target = EntityEx(Owner);
		Amount--;
		return true;
	}
	else
	{
		Amount--;
	}
	return false;
}

//==========================================================================
//
//	A_SummonRebel
//
//==========================================================================

final void A_SummonRebel()
{
	EntityEx	A;
	EntityEx	TFog;

	A = Spawn(Rebel1, Origin + vector((Random() - 0.5) * 64.0,
		(Random() - 0.5) * 64.0, 0.0));
	if (!A.TryMove(A.Origin, false))
	{
		A.Destroy();
		return;
	}
	//	Once the rebels start teleporting in, you can't pick up the beacon
	// anymore.
	bRebelSpawned = true;
	EntityEx Owner = self.Target;
	int friendNum;
	int i;

	// Set up the new rebel.
	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned)
			continue;
		if (Owner.Player && Level.Game.Players[i] == Owner.Player)
			break;
	}

	friendNum = Owner.Player ? i + 1 : 0;
	A.FriendPlayer = friendNum;
	A.Threshold = 100;
	A.bFriendly = true;
	A.bInCombat = true;
	if (Level.Game.deathmatch)
	{
		A.Health *= 2;
	}
	if (Owner)
	{
		// Rebels are the same colour as their owner
		A.Translation = Owner.Translation;
		// Set the rebel's target to whatever last hurt the player, so long as it's not
		// one of the player's other rebels.
		if (Owner.Target && !A.IsFriend(Owner.Target))
		{
			A.Target = Owner.Target;
		}
	}
	A.SetState (A.SeeState);
	A.Angles = Angles;

	TFog = Spawn(LineSpecialGameInfo(Level.Game).TeleportFogClass, A.Origin);
	TFog.PlaySound('misc/teleport', CHAN_BODY);

	Health--;
	if (Health < 0)
	{
		Destroy();
	}
}

states
{
Spawn:
	BEAC A -1
	Stop
See:
	BEAC A 30
	BEAC A 160 A_SummonRebel
	Loop
}

defaultproperties
{
	ConversationID = 166;
	PickupMessage = "$txt_beacon";
	Health = 5;
	Radius = 16.0;
	Height = 8.0;
	Mass = 3.0;
	MaxAmount = 1;
	IconName = 'i_beac';
	bDropped = true;
	bFloorClip = true;
	bInvBar = true;
}
