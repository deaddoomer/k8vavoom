//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

const float SORC_DEFENSE_HEIGHT			= 45.0;
const int BOUNCE_TIME_UNIT				= (35/2);

const float KORAX_BOLT_HEIGHT = 48.0;
const int KORAX_BOLT_LIFETIME = 3;

//==========================================================================
//
//  A_SmBounce
//
//==========================================================================

final void A_SmBounce()
{
	// give some more momentum (x,y,&z)
	Origin.z = FloorZ + 1.0;
	Velocity.z = (2.0 + Random() * 4.0) * 35.0;
	Velocity.x = Random() * 3.0 * 35.0;
	Velocity.y = Random() * 3.0 * 35.0;
}

//==========================================================================
//
//  A_IceGuyMissileExplode
//
//==========================================================================

final void A_IceGuyMissileExplode()
{
	EntityEx mo;
	int i;

	for (i = 0; i < 8; i++)
	{
		mo = SpawnMissileAngle(IceGuyFX2, itof(i) * 45.0, -0.3 * 35.0, 3.0);
		if (mo)
		{
			mo.Target = Target;
		}
	}
}

//==========================================================================
//
//	A_SerpentHeadCheck
//
//==========================================================================

final void A_SerpentHeadCheck()
{
	if (Origin.z <= FloorZ)
	{
		if (GetFloorType()->bLiquid)
		{
			HitFloorType();
			SetState(none);
		}
		else
		{
			SetState(FindState('Death'));
		}
	}
}

//==========================================================================
//
//	A_FloatGib
//
//==========================================================================

final void A_FloatGib()
{
	FloorClip -= 1.0;
}

//==========================================================================
//
//	A_SinkGib
//
//==========================================================================

final void A_SinkGib()
{
	FloorClip += 1.0;
}

//==========================================================================
//
//	A_DelayGib
//
//==========================================================================

final void A_DelayGib()
{
	StateTime -= Random() * 2.0;
}

//==========================================================================
//
//  A_WraithFX2
//
//  Spawns sparkle tail of missile.
//
//==========================================================================

final void A_WraithFX2()
{
	Actor A;
	float angle;
	int i;

	for (i = 0; i < 2; i++)
	{
		A = Spawn(WraithFX2, Origin);
		if (A)
		{
			if (Random() < 0.5)
			{
				angle = AngleMod360(Angles.yaw + Random() * 90.0);
			}
			else
			{
				angle = AngleMod360(Angles.yaw - Random() * 90.0);
			}
			A.Velocity.z = 0.0;
			A.Velocity.x = (Random() / 2.0 + 1.0) * cos(angle) * 35.0;
			A.Velocity.y = (Random() / 2.0 + 1.0) * sin(angle) * 35.0;
			A.Target = self;
			A.FloorClip = 10.0;
		}
	}
}

//============================================================================
//
//	A_DragonFX2
//
//============================================================================

final void A_DragonFX2()
{
	Actor A;
	int i;
	float delay;

	delay = 0.5 + Random();
	for (i = 1 + (P_Random() & 3); i; i--)
	{
		A = Spawn(DragonExplosion, Origin + vector((Random() - 0.5) * 64.0,
			(Random() - 0.5) * 64.0, (Random() - 0.5) * 16.0));
		if (A)
		{
			A.StateTime = delay + Random() * 0.2 * itof(i);
			A.Target = Target;
		}
	}
}

//==========================================================================
//
//  A_SorcFX1Seek
//
//  Yellow spell - offense
//
//==========================================================================

final void A_SorcFX1Seek()
{
	if (Args[4]-- <= 0)
	{
		if (Args[3]-- <= 0)
		{
			SetState(FindState('Death'));
			PlaySound('SorcererHeadScream', CHAN_VOICE, 1.0, ATTN_NONE);
		}
		else
		{
			Args[4] = BOUNCE_TIME_UNIT;
		}
	}

	SeekerMissile(2.0, 6.0);
}

//==========================================================================
// Blue spell - defense
//==========================================================================
//
// FX2 Variables
//      Special1f       current angle
//      Args[0]     0 = CW,  1 = CCW
//==========================================================================

//==========================================================================
//
//  A_SorcFX2Split
//
//  Split ball in two
//
//==========================================================================

final void A_SorcFX2Split()
{
	Actor A;

	A = Spawn(SorcFX2, Origin,,, false);
	if (A)
	{
		A.Target = Target;
		A.Args[0] = 0;	// CW
		A.Special1f = Angles.yaw;	// Set angle
		A.SetState(A.FindState('Orbit'));
	}
	A = Spawn(SorcFX2, Origin,,, false);
	if (A)
	{
		A.Target = Target;
		A.Args[0] = 1;	// CCW
		A.Special1f = Angles.yaw;	// Set angle
		A.SetState(A.FindState('Orbit'));
	}
	SetState(none);
}

//==========================================================================
//
//  A_SorcFX2Orbit
//
//  Orbit FX2 about sorcerer
//
//==========================================================================

final void A_SorcFX2Orbit()
{
	float angle;
	float x, y, z;
	float dist = Target.Radius;

	if ((Target.Health <= 0) ||	// Sorcerer is dead
		(!Target.Args[0]))	// Time expired
	{
		SetState(FindState('Death'));
		Target.Args[0] = 0;
		Actor(Target).bReflective = false;
		Actor(Target).bInvulnerable = false;
	}

	if (Args[0] && (Target.Args[0]-- <= 0))	// Time expired
	{
		SetState(FindState('Death'));
		Target.Args[0] = 0;
		Actor(Target).bReflective = false;
	}

	// Move to new position based on angle
	if (Args[0])	// Counter clock-wise
	{
		Special1f = AngleMod360(Special1f + 10.0);
		angle = Special1f;
		x = Target.Origin.x + dist * cos(angle);
		y = Target.Origin.y + dist * sin(angle);
		z = Target.Origin.z - Target.FloorClip + SORC_DEFENSE_HEIGHT;
		z += 15.0 * cos(angle);
		// Spawn trailer
		Spawn(SorcFX2T1, vector(x, y, z));
	}
	else	// Clock wise
	{
		Special1f = AngleMod360(Special1f - 10.0);
		angle = Special1f;
		x = Target.Origin.x + dist * cos(angle);
		y = Target.Origin.y + dist * sin(angle);
		z = Target.Origin.z - Target.FloorClip + SORC_DEFENSE_HEIGHT;
		z += 20.0 * sin(angle);
		// Spawn trailer
		Spawn(SorcFX2T1, vector(x, y, z));
	}

	Origin.x = x;
	Origin.y = y;
	Origin.z = z;
}

//==========================================================================
//
//  A_SorcFX4Check
//
//  FX4 - rapid fire balls
//
//==========================================================================

final void A_SorcFX4Check()
{
	if (Special2-- <= 0)
	{
		SetState(FindState('Death'));
	}
}

//==========================================================================
//
//  A_KBoltRaise
//
//==========================================================================

final void A_KBoltRaise()
{
	float z;

	// Spawn a child upward
	z = Origin.z + KORAX_BOLT_HEIGHT;

	if (z + KORAX_BOLT_HEIGHT < CeilingZ)
	{
		Actor A = Spawn(KoraxBolt, vector(Origin.x, Origin.y, z));
		A.Special1 = KORAX_BOLT_LIFETIME;
	}
	else
	{
		// Maybe cap it off here
	}
}

//==========================================================================
//
//  A_KBolt
//
//==========================================================================

final void A_KBolt()
{
	// Countdown lifetime
	if (Special1-- <= 0)
	{
		SetState(none);
	}
}

//==========================================================================
//
//  A_KSpiritSeeker
//
//==========================================================================

final void A_KSpiritSeeker(float thresh, float turnMax)
{
	int dir;
	float dist;
	float delta;
	float angle;
	float newZ;
	float deltaZ;

	if (Tracer == none)
	{
		return;
	}
	dir = FaceActor(Actor(Tracer), delta);
	if (delta > thresh)
	{
		delta /= 2.0;
		if (delta > turnMax)
		{
			delta = turnMax;
		}
	}
	if (dir)
	{
		// Turn clockwise
		Angles.yaw = AngleMod360(Angles.yaw + delta);
	}
	else
	{
		// Turn counter clockwise
		Angles.yaw = AngleMod360(Angles.yaw - delta);
	}
	angle = Angles.yaw;
	Velocity.x = Speed * cos(angle);
	Velocity.y = Speed * sin(angle);

	if (!(XLevel.TicTime & 15) ||
		Origin.z > Tracer.Origin.z + Tracer.Height ||
		Origin.z + Height < Tracer.Origin.z)
	{
		newZ = Tracer.Origin.z + Random() * Tracer.Height;
		deltaZ = newZ - Origin.z;
		if (fabs(deltaZ) > 15.0)
		{
			if (deltaZ > 0.0)
			{
				deltaZ = 15.0;
			}
			else
			{
				deltaZ = -15.0;
			}
		}
		dist = DistTo2(Tracer);
		dist = dist / Speed;
		if (dist < 1.0)
		{
			dist = 1.0;
		}
		Velocity.z = deltaZ / dist;
	}
	return;
}

//==========================================================================
//
//  A_KSpiritWeave
//
//==========================================================================

final void A_KSpiritWeave()
{
	float newX, newY;
	float angle;

	angle = AngleMod360(Angles.yaw + 90.0);
	int WeaveXY = Special2 >> 16;
	int WeaveZ = Special2 & 0xffff;
	newX = Origin.x - cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	newY = Origin.y - sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	WeaveXY = (WeaveXY + (P_Random() % 5)) & 63;
	newX += cos(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	newY += sin(angle) * Level.Game.FloatBobOffsets[WeaveXY] * 4.0;
	TryMove(vector(newX, newY, Origin.z), false);
	Origin.z -= Level.Game.FloatBobOffsets[WeaveZ] * 2.0;
	WeaveZ = (WeaveZ + (P_Random() % 5)) & 63;
	Origin.z += Level.Game.FloatBobOffsets[WeaveZ] * 2.0;
	Special2 = (WeaveXY << 16) | (WeaveZ & 0xffff);
}

//==========================================================================
//
//  A_KSpiritRoam
//
//==========================================================================

final void A_KSpiritRoam()
{
	if (Special1-- <= 0)
	{
		PlaySound('SpiritDie', CHAN_VOICE);
		SetState(FindState('Death'));
	}
	else
	{
		if (Tracer)
		{
			A_KSpiritSeeker(10.0, 20.0);
		}
		A_KSpiritWeave();
		if (Random() < 0.1953125)
		{
			PlaySound('SpiritActive', CHAN_VOICE, 1.0, ATTN_NONE);
		}
	}
}

//==========================================================================
//
//	A_CFlameRotate
//
//==========================================================================

final void A_CFlameRotate()
{
	float an;

	an = AngleMod360(Angles.yaw + 90.0);
	Velocity.x = Special1f + 2.0 * 35.0 * cos(an);
	Velocity.y = Special2f + 2.0 * 35.0 * sin(an);
	Angles.yaw = AngleMod360(Angles.yaw + 90.0 / 15.0);
}

//============================================================================
//
//	CHolyTailFollow
//
//============================================================================

final void CHolyTailFollow(float dist)
{
	EntityEx child;
	float an;
	float oldDistance, newDistance;

	child = Tracer;
	if (child)
	{
		an = atan2(child.Origin.y - Origin.y,
			Origin.x - child.Origin.x);
		oldDistance = DistTo(child);
		if (child.TryMove(vector(Origin.x + dist * cos(an),
				Origin.y + dist * sin(an), child.Origin.z), false))
		{
			newDistance = DistTo2(child) - 1.0;
			if (oldDistance < 1.0)
			{
				if (child.Origin.z < Origin.z)
				{
					child.Origin.z = Origin.z - dist;
				}
				else
				{
					child.Origin.z = Origin.z + dist;
				}
			}
			else
			{
				child.Origin.z = Origin.z + newDistance / oldDistance *
					(child.Origin.z - Origin.z);
			}
		}
		Actor(child).CHolyTailFollow(dist - 1.0);
	}
}

//============================================================================
//
//	CHolyTailRemove
//
//============================================================================

final void CHolyTailRemove()
{
	if (Tracer)
	{
		Actor(Tracer).CHolyTailRemove();
	}
	Destroy();
}

//============================================================================
//
//	A_CHolyTail
//
//============================================================================

final void A_CHolyTail()
{
	EntityEx parent;

	parent = Target;

	if (parent)
	{
		if (!parent.bMissile)
		{
			// Ghost removed, so remove all tail parts
			CHolyTailRemove();
			return;
		}
		else if (TryMove(vector(
				parent.Origin.x - 14.0 * cos(parent.Angles.yaw),
				parent.Origin.y - 14.0 * sin(parent.Angles.yaw), Origin.z), false))
		{
			Origin.z = parent.Origin.z - 5.0;
		}
		CHolyTailFollow(10.0);
	}
}

//===========================================================================
//
// Bat Spawner Variables
//	Special1    frequency counter
//	Args[0]     frequency of spawn (1=fastest, 10=slowest)
//	Args[1]     spread angle (0..255)
//	Args[2]
//	Args[3]     duration of bats (in octics)
//	Args[4]     turn amount per move (in degrees)
//
// Bat Variables
//	Special2  - lifetime counter
//	Args[4]   - turn amount per move (in degrees)
//
//===========================================================================

//===========================================================================
//
//  A_BatSpawnInit
//
//===========================================================================

final void A_BatSpawnInit()
{
	Special1 = 0;	// Frequency count
}

//===========================================================================
//
//  A_BatSpawn
//
//===========================================================================

final void A_BatSpawn()
{
	EntityEx mo;
	float delta;
	float angle;

	// Countdown until next spawn
	if (Special1-- > 0)
	{
		return;
	}
	Special1 = Args[0];	// Reset frequency count

	delta = itof(Args[1]);
	if (delta == 0.0)
		delta = 1.0;
	angle = AngleMod360(Angles.yaw +
		delta * (Random() - 0.5) * 360.0 / 256.0);
	mo = SpawnMissileAngle(Bat, angle, 0.0);
	if (mo)
	{
		mo.Args[0] = P_Random() & 63;	// floatbob index
		mo.Args[4] = Args[4];	// turn degrees
		mo.Special2 = Args[3] << 3;	// Set lifetime
		mo.Target = self;
	}
}

//===========================================================================
//
//  A_BatMove
//
//===========================================================================

final void A_BatMove()
{
	float newangle;
	float newSpeed;

	if (Special2 < 0)
	{
		SetState(FindState('Death'));
	}
	Special2 -= 2;	// Called every 2 tics

	if (Random() < 0.5)
	{
		newangle = AngleMod360(Angles.yaw + itof(Args[4]));
	}
	else
	{
		newangle = AngleMod360(Angles.yaw - itof(Args[4]));
	}

	// Adjust momentum vector to new direction
	newSpeed = Speed * Random() * 4.0;
	Velocity.x = newSpeed * cos(newangle);
	Velocity.y = newSpeed * sin(newangle);

	if (Random() < 0.05859375)
		PlaySound('BatScream', CHAN_VOICE);

	// Handle Z movement
	Origin.z = Target.Origin.z + 2.0 * Level.Game.FloatBobOffsets[Args[0]];
	Args[0] = (Args[0] + 3) & 63;
}

//==========================================================================
//
//	A_TimeBomb
//
//==========================================================================

final void A_TimeBomb()
{
	// Time Bombs
	Origin.z += 32.0;
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;
	A_Explode();
}

//===========================================================================
//
//  A_CheckThrowBomb
//
//===========================================================================

final void A_CheckThrowBomb()
{
	if (!--Health)
	{
		SetState(FindState('Death'));
	}
}

//===========================================================================
//
//  A_CheckThrowBomb2
//
//===========================================================================

final void A_CheckThrowBomb2()
{
	if (fabs(Velocity.x) < 1.5 * 35.0 &&
		fabs(Velocity.y) < 1.5 * 35.0 &&
		Velocity.z < 2.0 * 35.0)
	{
		SetState(GetStatePlus(IdleState, 6, true));
		Origin.z = FloorZ;
		Velocity.z = 0.0;
		BounceType = BOUNCE_None;
		bMissile = false;
	}
	A_CheckThrowBomb();
}

//==========================================================================
//
// Fog Variables:
//
//      Special1    Counter for spawn frequency
//      Special2    Index into floatbob table
//      args[0]     Speed (0..10) of fog
//      args[1]     Angle of spread (0..128)
//      args[2]     Frequency of spawn (1..10)
//      args[3]     Lifetime countdown
//      args[4]     Boolean: fog moving?
//
//==========================================================================

//==========================================================================
//
//  A_FogSpawn
//
//==========================================================================

final void A_FogSpawn()
{
	Actor A;
	float delta;

	if (Special1-- > 0)
	{
		return;
	}

	Special1 = Args[2];	// Reset frequency count

	switch (P_Random() % 3)
	{
	case 0:
		A = Spawn(FogPatchSmall, Origin);
		break;
	case 1:
		A = Spawn(FogPatchMedium, Origin);
		break;
	case 2:
		A = Spawn(FogPatchLarge, Origin);
		break;
	}

	if (A)
	{
		delta = itof(Args[1]);
		if (delta == 0.0)
			delta = 1.0;
		A.Angles.yaw = AngleMod360(Angles.yaw +
			((Random() * delta) - (delta * 0.5)) * 360.0 / 256.0);
		A.Target = self;
		if (Args[0] < 1)
			Args[0] = 1;
		A.Args[0] = (P_Random() % (Args[0])) + 1;	// P_Random speed
		A.Args[3] = Args[3];	// Set lifetime
		A.Args[4] = 1;	// Set to moving
		A.Special2 = P_Random() & 63;
	}
}

//==========================================================================
//
//	A_FogMove
//
//==========================================================================

final void A_FogMove()
{
	float speed;
	float angle;
	int weaveindex;

	if (!Args[4])
		return;

	if (Args[3]-- <= 0)
	{
		SetState(FindState('Death'));
		return;
	}

	if ((Args[3] % 4) == 0)
	{
		Origin.z += Level.Game.FloatBobOffsets[Special2] / 2.0;
		Special2 = (Special2 + 1) & 63;
	}

	speed = itof(Args[0]);
	angle = Angles.yaw;
	Velocity.x = speed * cos(angle) * 35.0;
	Velocity.y = speed * sin(angle) * 35.0;
}

//==========================================================================
//
//  A_PotteryChooseBit
//
//==========================================================================

final void A_PotteryChooseBit()
{
	Special1 = 1 + 2 * (P_Random() % 5);
	SetState(GetStatePlus(FindState('Death'), Special1, true));
	StateTime = 8.0 + Random() * 16.0;
}

//==========================================================================
//
//  A_PotteryCheck
//
//==========================================================================

final void A_PotteryCheck()
{
	int i;
	Actor pmo;

	for (i = 0; i < MAXPLAYERS; i++)
	{
		if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned)
		{
			continue;
		}
		pmo = Actor(Level.Game.Players[i].MO);
		if (CanSee(pmo) && (fabs(AngleMod180(atan2(Origin.y - pmo.Origin.y,
			Origin.x - pmo.Origin.x) - pmo.Angles.yaw)) <= 45.0))
		{
			// Previous state (pottery bit waiting state)
			SetState(GetStatePlus(FindState('Death'), Special1, true));
			return;
		}
	}
}

//============================================================================
//
//  A_CorpseExplode
//
//============================================================================

final void A_CorpseExplode()
{
	Actor A;
	int i;

	for (i = (P_Random() & 3) + 3; i; i--)
	{
		A = Spawn(CorpseBit, Origin);
		A.SetState(GetStatePlus(A.IdleState, P_Random() % 3, true));
		if (A)
		{
			A.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
			A.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
			A.Velocity.z = (Random() * 8.0 + 5.0) * (3.0 / 4.0) * 35.0;
		}
	}
	// Spawn a skull
	A = Spawn(CorpseBit, Origin);
	A.SetState(GetStatePlus(A.IdleState, 3, true));
	if (A)
	{
		A.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
		A.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
		A.Velocity.z = (Random() * 8.0 + 5.0) * (3.0 / 4.0) * 35.0;
		A.PlaySound('FireDemonDeath', CHAN_VOICE);
	}
	Destroy();
}

//==========================================================================
//
//  A_LeafSpawn
//
//==========================================================================

final void A_LeafSpawn()
{
	Actor A;
	int i;

	for (i = (P_Random() & 3) + 1; i; i--)
	{
		A = Spawn(P_Random() & 1 ? class<Actor>(Leaf2) : class<Actor>(Leaf1),
			Origin + vector((Random() - Random()) * 64.0,
			(Random() - Random()) * 64.0, Random() * 64.0));
		if (A)
		{
			A.Thrust(Angles.yaw, Random() * 2.0 + 3.0);
			A.Target = self;
		}
	}
}

//==========================================================================
//
//  A_LeafThrust
//
//==========================================================================

final void A_LeafThrust()
{
	if (Random() > 0.375)
	{
		return;
	}
	Velocity.z += (Random() * 2.0 + 1.0) * 35.0;
}

//==========================================================================
//
//  A_LeafCheck
//
//==========================================================================

final void A_LeafCheck()
{
	Special1++;
	if (Special1 >= 20)
	{
		SetState(none);
		return;
	}
	if (Random() > 0.25)
	{
		if (!Velocity.x && !Velocity.y)
		{
			Thrust(Target.Angles.yaw, Random() * 2.0 + 1.0);
		}
		return;
	}
	SetState(GetStatePlus(IdleState, 7));
	Velocity.z = (Random() * 2.0 + 1.0) * 35.0;
	Thrust(Target.Angles.yaw, Random() * 2.0 + 2.0);
	bMissile = true;
}

//===========================================================================
//
//  A_SoAExplode
//
//  Suit of Armor Explode
//
//===========================================================================

final void A_SoAExplode()
{
	EntityEx A;
	int i;

	for (i = 0; i < 10; i++)
	{
		A = Spawn(ZArmorChunk, Origin + vector((Random() - 0.5) * 16.0,
			(Random() - 0.5) * 16.0, Random() * Height));
		A.SetState(GetStatePlus(A.IdleState, i, true));
		if (A)
		{
			A.Velocity.x = (Random() - Random()) * 4.0 * 35.0;
			A.Velocity.y = (Random() - Random()) * 4.0 * 35.0;
			A.Velocity.z = (Random() * 8.0 + 5.0) * 35.0;
		}
	}
	if (Args[0])
	{
		// Spawn an item. Don't spawn monsters it they are disabled.
		class<EntityEx> Cls = class<EntityEx>(FindClassFromScriptId(Args[0],
			LineSpecialGameInfo(Level.Game).GameFilterFlag));
		if (Cls && (!Level.Game.nomonsters || !Cls.default.bMonster))
		{
			Spawn(Cls, Origin, vector(0.0, 0.0, 0.0));
		}
	}
	A.PlaySound('SuitofArmorBreak', CHAN_VOICE);
	Destroy();
}
