//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Minotaur : Actor
	game(GAME_Heretic)
	__mobjinfo__(9);

//
// Minotaur variables
//

bool bFloorFireRefired;		//  internal to minotaur AI
//  Special1				charge duration countdown

const float ChargeSpeed = 455.0;
const float MinotaurLookDist = 16.0 * 54.0;

float StartTime;			//  minotaur start time

//==========================================================================
//
//  IsServant
//
//==========================================================================

bool IsServant()
{
	return bSummonedMonster;
}

//============================================================================
//
//  IsNotAttackingMaster
//
//============================================================================

bool IsNotAttackingMaster(EntityEx Other)
{
	return bSummonedMonster && Other.bSummonedMonster && Other.Target != Tracer;
}

//==========================================================================
//
//	IsMaster
//
//==========================================================================

bool IsMaster(EntityEx Other)
{
	return bSummonedMonster && Tracer == Other;
}

//==========================================================================
//
//	Slam
//
//==========================================================================

bool Slam(EntityEx Other)
{
	// Slamming minotaurs shouldn't move non-creatures
	if (!Other.bMonster && !Other.bIsPlayer)
	{
		return false;
	}
	return ::Slam(Other);
}

//==========================================================================
//
//  DoSpecialDamage
//
//==========================================================================

int DoSpecialDamage(EntityEx victim, EntityEx source, int damage)
{
	damage = ::DoSpecialDamage(victim, source, damage);
	if (damage != -1 && bSkullFly)
	{
		// Slam only when in charge mode
		MinotaurSlam(Actor(victim));
		return -1;
	}
	return damage;
}

//==========================================================================
//
//  MinotaurSlam
//
//==========================================================================

final void MinotaurSlam(Actor Other)
{
	float angle;
	float thrust;

	angle = atan2(Other.Origin.y - Origin.y, Other.Origin.x - Origin.x);
	thrust = 16.0 + Random() * 4.0;
	Other.Velocity.x += thrust * cos(angle) * 35.0;
	Other.Velocity.y += thrust * sin(angle) * 35.0;
	Other.Damage(none, self, HITDICE(6));
	if (Other.Player)
	{
		Other.ReactionTime = 0.4 + Random() * 0.2;
	}
	Special1 = 0;	// Stop charging
}

//==========================================================================
//
//  ActiveMinotaur
//
//  Search thinker list for minotaur
//
//==========================================================================

final Actor ActiveMinotaur()
{
	Minotaur mo;

	foreach AllThinkers(Minotaur, mo)
	{
		if (!mo.bSummonedMonster)
			continue;
		if (mo.Health <= 0)
			continue;
		if (!mo.bMonster)
			continue;	// for morphed minotaurs
		if (mo.bCorpse)
			continue;
		if ((XLevel.Time - mo.StartTime) >= PowerMinotaur.default.EffectTime)
			continue;
		if (mo.Tracer == Tracer)
			return mo;
	}
	return none;
}

//==========================================================================
//
//	MonsterMorphed
//
//==========================================================================

void MonsterMorphed()
{
	// check for turning off minotaur power for active icon
	if (bSummonedMonster && Tracer && Tracer.Health > 0)
	{
		Inventory Power = Tracer.FindInventory(PowerMinotaur);
		if (!ActiveMinotaur() && Power)
		{
			Power.Destroy();
		}
	}
}

//==========================================================================
//
//  FindEnemySelf
//
//==========================================================================

final EntityEx FindEnemySelf()
{
	Entity Other;

	foreach RoughBlockSearch(Other, 20)
	{
		EntityEx link = EntityEx(Other);

		if (!link.bMonster && (!link.bIsPlayer || link == Tracer))
		{
			continue;
		}
		if (!link.bShootable)
		{
			continue;
		}
		if (link.bDormant)
		{
			continue;
		}
		if (link.bSummonedMonster && (link.Tracer && (link.Tracer == Tracer ||
				link.Tracer.IsTeammate(Tracer))))
		{
			continue;
		}
		if (link.IsTeammate(Tracer))
		{
			continue;
		}
		if (!CanSee(link))
		{
			continue;
		}
		return link;
	}
	return none;
}

//===========================================================================
//
//  FindEnemyMaster
//
//	Minotaur looking around player
//
//===========================================================================

final EntityEx FindEnemyMaster()
{
	Entity Other;

	foreach Tracer.RoughBlockSearch(Other, 20)
	{
		EntityEx link = EntityEx(Other);

		if (!Tracer.bIsPlayer)
		{
			continue;
		}
		if (!link.bMonster && (!link.bIsPlayer || link == Tracer))
		{
			continue;
		}
		if (!link.bShootable)
		{
			continue;
		}
		if (link.bDormant)
		{
			continue;
		}
		if (link.bSummonedMonster && (link.Tracer && (link.Tracer == Tracer ||
				link.Tracer.IsTeammate(Tracer))))
		{
		   continue;
		}
		if (link.IsTeammate(Tracer))
		{
		   continue;
		}
		if (Level.Game.netgame && !Level.Game.deathmatch && link.bIsPlayer)
		{
			continue;
		}
		if (Tracer.CanSee(link))
		{
			return link;
		}
	}
	return none;
}

//==========================================================================
//
//  A_MinotaurLook
//
//  Look for enemy of player
//
//==========================================================================

final void A_MinotaurLook()
{
	Actor mo;
	float dist;
	int i;

	if (!bSummonedMonster)
	{
		A_Look();
		return;
	}

	Target = none;

	if (Level.Game.deathmatch)	// Quick search for players
	{
		for (i = 0; i < MAXPLAYERS; i++)
		{
			if (!Level.Game.Players[i] || !Level.Game.Players[i].bSpawned)
				continue;
			mo = Actor(Level.Game.Players[i].MO);
			if (mo == Tracer)
				continue;
			if (mo.Health <= 0)
				continue;
			if (mo.IsTeammate(Tracer))
			{
				continue;
			}
			dist = DistTo(mo);
			if (dist > MinotaurLookDist)
				continue;
			Target = mo;
			break;
		}
	}

	if (!Target)	// Near player monster search
	{
		if (Tracer && (Tracer.Health > 0) && Tracer.bIsPlayer)
			Target = FindEnemyMaster();
		else
			Target = FindEnemySelf();
	}

	if (!Target)	// Normal monster search
	{
		foreach AllThinkers(Actor, mo)
		{
			if (!mo.bMonster)
				continue;
			if (mo.Health <= 0)
				continue;
			if (!mo.bShootable)
				continue;
			dist = DistTo(mo);
			if (dist > MinotaurLookDist)
				continue;
			if ((mo == Tracer) || (mo == self))
				continue;
			if (mo.bSummonedMonster && (mo.Tracer == Tracer || mo.IsTeammate(Tracer)))
 				continue;
			Target = mo;
			break;	// Found mobj to attack
		}
	}

	if (Target)
	{
		SetState(FindState('SeeNF'));
	}
	else
	{
		SetState(FindState('RoamNF'));
	}
}

//==========================================================================
//
//  A_MinotaurChase
//
//==========================================================================

final void A_MinotaurChase()
{
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;	// In case pain caused him to skip his fade in.

	if (!bSummonedMonster)
	{
		A_Chase();
		return;
	}

	if (XLevel.Time - StartTime >= PowerMinotaur.default.EffectTime)
	{
		Damage(none, none, 10000);
		return;
	}

	if (P_Random() < 30)
		A_MinotaurLook();	// adjust to closest target

	if (!Target || (Target.Health <= 0) || !Target.bShootable)
	{
		// look for a new enemy
		SetState(FindState('Look'));
		return;
	}

	FaceMovementDirection();
	ReactionCount = 0;

	// Melee attack
	if (MeleeState && CheckMeleeRange())
	{
		if (AttackSound)
		{
			PlaySound(AttackSound, CHAN_WEAPON);
		}
		SetState(MeleeState);
		return;
	}

	// Missile attack
	if (MissileState && CheckMissileRange())
	{
		SetState(MissileState);
		return;
	}

	// chase towards target
	if (!StepMove())
	{
		NewChaseDir();
	}

	// Active sound
	if (ActiveSound && P_Random() < 6)
	{
		PlaySound(ActiveSound, CHAN_VOICE);
	}

}

//==========================================================================
//
//  A_MinotaurRoam
//
//==========================================================================

final void A_MinotaurRoam()
{
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;	// In case pain caused him to skip his fade in.

	if (XLevel.Time - StartTime >= PowerMinotaur.default.EffectTime)
	{
		Damage(none, none, 10000);
		return;
	}

	if (P_Random() < 30)
		A_MinotaurLook();	// adjust to closest target

	if (P_Random() < 6)
	{
		//Choose new direction
		MoveDir = P_Random() % 8;
		FaceMovementDirection();
	}
	if (!StepMove())
	{
		// Turn
		if (P_Random() & 1)
			MoveDir = (++MoveDir) % 8;
		else
			MoveDir = (MoveDir + 7) % 8;
		FaceMovementDirection();
	}
}

//==========================================================================
//
//  A_MinotaurAtk1
//
//  Melee attack.
//
//==========================================================================

final void A_MinotaurAtk1()
{
	if (!Target)
	{
		return;
	}

	PlaySound('minotaur/melee', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE(4));
		if (Target.bIsPlayer)
		{
			// Squish the player
			PlayerEx(Target.Player).DeltaViewHeight = -512.0;
		}
	}
}

//==========================================================================
//
//  A_MinotaurDecide
//
//  Choose a missile attack.
//
//==========================================================================

final void A_MinotaurDecide()
{
	float dist;

	if (!Target)
	{
		return;
	}
	if (!bSummonedMonster)
	{
		PlaySound('minotaur/sight', CHAN_VOICE);
	}
	dist = DistTo(Target);

	if (Target.Origin.z + Target.Height > Origin.z &&
		Target.Origin.z + Target.Height < Origin.z + Height &&
		dist < (bSummonedMonster ? 16.0 : 8.0) * 64.0 && dist > 1.0 * 64.0 &&
		P_Random() < (bSummonedMonster ? 230 : 150))
	{
		// Charge attack
		// Don't call the state function right away
		SetState(FindState('Charge'));
		bSkullFly = true;
		A_FaceTarget();
		Velocity = Normalise(Target.Origin - Origin) * ChargeSpeed;
		Special1 = 35 / 2;	// Charge duration
	}
	else if (Target.Origin.z == Target.FloorZ &&
		dist < 9.0 * 64.0 && P_Random() < (bSummonedMonster ? 100 : 220))
	{
		// Floor fire attack
		SetState(FindState('Hammer'));
		bFloorFireRefired = false;
	}
	else
	{
		// Swing attack
		A_FaceTarget();
		// Don't need to call SetState because the current state
		// falls through to the swing attack
	}
}

//==========================================================================
//
//  A_MinotaurAtk2
//
//  Swing attack.
//
//==========================================================================

final void A_MinotaurAtk2()
{
	EntityEx A;
	float angle;
	TAVec ang;

	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/attack2', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE((bSummonedMonster ? 3 : 5)));
		return;
	}
	A = SpawnMissile(Target, MinotaurFX1, 40.0);
	if (A)
	{
		VectorAngles(&A.Velocity, &ang);
		angle = A.Angles.yaw;
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle - (45.0 / 8.0)), ang.pitch, 40.0);
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle + (45.0 / 8.0)), ang.pitch, 40.0);
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle - (45.0 / 16.0)), ang.pitch, 40.0);
		SpawnMissileAngles(MinotaurFX1,
			AngleMod360(angle + (45.0 / 16.0)), ang.pitch, 40.0);
	}
}

//==========================================================================
//
//  A_MinotaurAtk3
//
//  Floor fire attack.
//
//==========================================================================

final void A_MinotaurAtk3()
{
	EntityEx A;

	if (!Target)
	{
		return;
	}
	PlaySound('minotaur/attack3', CHAN_WEAPON);
	if (CheckMeleeRange())
	{
		Target.Damage(self, self, HITDICE((bSummonedMonster ? 3 : 5)));
		if (Target.bIsPlayer)
		{
			// Squish the player
			PlayerEx(Target.Player).DeltaViewHeight = -512.0;
		}
	}
	else
	{
		A = SpawnMissile(Target, MinotaurFX2);
		if (A)
		{
			A.PlaySound('minotaur/attack1', CHAN_VOICE);
		}
	}
	if (Random() < 0.75 && !bFloorFireRefired)
	{
		SetState(FindState('HammerLoop'));
		bFloorFireRefired = true;
	}
}

//==========================================================================
//
//  A_MinotaurCharge
//
//==========================================================================

final void A_MinotaurCharge()
{
	Actor puff;

	if (!Target)
	{
		return;
	}

	if (Special1 > 0)
	{
		class<Actor> PuffType = PhoenixPuff;
		if (bSummonedMonster)
		{
			PuffType = PunchPuff;
		}
		puff = Spawn(PuffType, Origin);
		puff.Velocity.z = 2.0 * 35.0;
		Special1--;
	}
	else
	{
		bSkullFly = false;
		SetState(SeeState);
	}
}

//==========================================================================
//
//  A_MinotaurFade0
//
//==========================================================================

final void A_MinotaurFade0()
{
	RenderStyle = STYLE_Translucent;
	Alpha = 0.333;
}

//==========================================================================
//
//  A_MinotaurFade1
//
//==========================================================================

final void A_MinotaurFade1()
{
	// Second level of transparency
	RenderStyle = STYLE_Translucent;
	Alpha = 0.666;
}

//==========================================================================
//
//  A_MinotaurFade2
//
//==========================================================================

final void A_MinotaurFade2()
{
	// Make fully visible
	RenderStyle = STYLE_Normal;
	Alpha = 1.0;
}

//==========================================================================
//
//  A_SmokePuffExit
//
//==========================================================================

final void A_SmokePuffExit()
{
	Spawn(MinotaurSmokeExit, Origin);
}

states
{
Spawn:
Look:
	MNTR AB 10 A_MinotaurLook
	Loop
See:
	MNTR ABCD 5 A_MinotaurChase
	Loop
SeeNF:
	MNTR A 5
	Goto See+1
Roam:
	MNTR ABCD 5 A_MinotaurRoam
	Loop
RoamNF:
	MNTR A 5
	Goto Roam+1
Melee:
	MNTR V 10 A_FaceTarget
	MNTR W 7 A_FaceTarget
	MNTR X 4 A_MinotaurAtk1
	Goto See
Missile:
	MNTR V 10 A_MinotaurDecide
	MNTR Y 4 A_FaceTarget
	MNTR Z 9 A_MinotaurAtk2
	Goto See
Hammer:
	MNTR V 10 A_FaceTarget
	MNTR W 7 A_FaceTarget
	MNTR X 12 A_MinotaurAtk3
	Goto See
HammerLoop:
	MNTR X 12
	Goto Hammer
Charge:
	MNTR U 2
	MNTR U 2 A_MinotaurCharge
	Wait
Pain:
	MNTR E 3
	MNTR E 6 A_Pain
	Goto See
Death:
	MNTR F 6
	MNTR G 5
	MNTR H 6 A_Scream
	MNTR I 5
	MNTR J 6
	MNTR K 5
	MNTR L 6
	MNTR M 5 A_NoBlocking
	MNTR N 6
	MNTR O 5
	MNTR P 6
	MNTR Q 5
	MNTR R 6
	MNTR S 5
	MNTR T -1 A_BossDeath
	Stop
}

defaultproperties
{
	Health = 3000;
	Radius = 28.0;
	Height = 100.0;
	Mass = 800.0;
	Speed = 16.0 * 35.0;
	PainChance = 0.09765625;
	MissileDamage = 7;
	bSolid = true;
	bShootable = true;
	bCountKill = true;
	bMonster = true;
	bActivateMCross = true;
	bActivatePushWall = true;
	bPassMobj = true;
	bCanUseWalls = true;
	bDropOff = true;
	bFloorClip = true;
	bBoss = true;
	bNoRadiusDamage = true;
	bNoMorph = true;
	bNeverTarget = true;
	bBossDeath = true;
	bSkullFlyInvulnerable = true;
	SightSound = 'minotaur/sight';
	ActiveSound = 'minotaur/active';
	AttackSound = 'minotaur/attack1';
	PainSound = 'minotaur/pain';
	DeathSound = 'minotaur/death';
	DropItemList.Num = 2;
	DropItemList[0].Type = ArtiSuperHealth; DropItemList[0].Amount = 0; DropItemList[0].Chance = 0.19921875;
	DropItemList[1].Type = PhoenixRodAmmo; DropItemList[1].Amount = 10; DropItemList[1].Chance = 0.328125;
}
