//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Thinker : Object
	native
	abstract;

readonly Level			XLevel;		//	Level object.
readonly LevelInfo		Level;		//	Level info object.

native readonly private Thinker	Prev;
native readonly private Thinker	Next;

native void Destroy();

//===========================================================================
//
//  Spawn
//
//===========================================================================

spawner Entity Spawn(class<Entity> type, optional TVec AOrigin, optional mthing_t* mthing)
{
	Entity A;

	A = NewSpecialThinker(type);

	A.Origin = AOrigin;
	A.OnMapSpawn(mthing);
	return A;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float deltaTime)
{
}

defaultproperties
{
}
