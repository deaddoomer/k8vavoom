//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class Widget : Object
	native;

struct ClipRect
{
	float		OriginX;	//	Origin of the widget, in absolote coords.
	float		OriginY;

	float		ScaleX;		//	Accomulative scale.
	float		ScaleY;

	float		ClipX1;		//	Clipping rectangle, in absolute coordinates.
	float		ClipY1;
	float		ClipX2;
	float		ClipY2;
};

//	Parent container widget.
private readonly Widget			ParentWidget;
//	Linked list of child widgets.
private readonly Widget			FirstChildWidget;
private readonly Widget			LastChildWidget;
//	Links in the linked list of widgets.
private readonly Widget			PrevWidget;
private readonly Widget			NextWidget;

//	Position of the widget in the parent widget.
private int						PosX;
private int						PosY;
//	Size of the child area of the widget.
private int						SizeWidth;
private int						SizeHeight;
//	Scaling of the widget.
private float					SizeScaleX;
private float					SizeScaleY;

private readonly ClipRect		ClipRect;

//	Is this widget visible?
private bool					bIsVisible;

//==========================================================================
Widget Parent
{
	get { return ParentWidget; }
}

int X
{
	get { return PosX; }
	set { SetX(value); }
	default PosX;
}

int Y
{
	get { return PosY; }
	set { SetY(value); }
	default PosY;
}

int Width
{
	get { return SizeWidth; }
	set { SetWidth(value); }
	default SizeWidth;
}

int Height
{
	get { return SizeHeight; }
	set { SetHeight(value); }
	default SizeHeight;
}

float ScaleX
{
	get { return SizeScaleX; }
	set { SetScale(value, SizeScaleY); }
	default SizeScaleX;
}

float ScaleY
{
	get { return SizeScaleY; }
	set { SetScale(SizeScaleX, value); }
	default SizeScaleY;
}

bool Visible
{
	get { return IsVisible(); }
	set { SetVisibility(value); }
	default bIsVisible;
}

int OldOriginX
{
	get { return ftoi(ClipRect.OriginX / ClipRect.ScaleX); }
}

int OldOriginY
{
	get { return ftoi(ClipRect.OriginY / ClipRect.ScaleY); }
}

//	Destroys all child widgets.
native final void DestroyAllChildren();

//	Methods to move widget on top or bottom.
native final void Lower();
native final void Raise();

//	Methods to set position, size and scale.
native void SetPos(int NewX, int NewY);//FIXME should be final
native final void SetX(int NewX);
native final void SetY(int NewY);
native final void SetSize(int NewWidth, int NewHeight);
native final void SetWidth(int NewWidth);
native final void SetHeight(int NewHeight);
native final void SetScale(float NewScaleX, float NewScaleY);
native final void SetConfiguration(int NewX, int NewY, int NewWidth,
	int NewHeight, optional float NewScaleX, optional float NewScaleY);

//	Visibility methods.
native final void SetVisibility(bool bNewVisibility);
native final void Show();
native final void Hide();
native final bool IsVisible(optional bool Recurse);

native final void DrawPic(int X, int Y, int Handle, optional float Alpha);
native final void DrawShadowedPic(int X, int Y, int Handle);
native final void FillRectWithFlat(int x, int y, int width, int height,
	name Name);
//  Darkens a screen region
native final void ShadeRect(int x, int y, int w, int h, float shade);

//  Draws text
native final void DrawText(int X, int Y, string Text);
//  Draws text wrapping at the width w
native final int DrawTextW(int x, int y, string Text, int w);

//==========================================================================
//
//	OnChildAdded
//
//	Called when a child widget is added.
//
//==========================================================================

void OnChildAdded(Widget Child)
{
}

//==========================================================================
//
//	OnChildRemoved
//
//	Called when a child widget is removed.
//
//==========================================================================

void OnChildRemoved(Widget Child)
{
}

//==========================================================================
//
//	OnConfigurationChanged
//
//	Called when position or size has been changed.
//
//==========================================================================

void OnConfigurationChanged()
{
}

//==========================================================================
//
//	OnVisibilityChanged
//
//	Called when this widget is shown or hidden.
//
//==========================================================================

void OnVisibilityChanged(bool bNewVisibility)
{
}

//==========================================================================
//
//	OnDraw
//
//	Draws the window.
//
//==========================================================================

void OnDraw()
{
}

//==========================================================================
//
//	OnPostDraw
//
//	Draws the window (AFTER all children are drawn).
//
//==========================================================================

void OnPostDraw()
{
}

defaultproperties
{
	ScaleX = 1.0;
	ScaleY = 1.0;
	Visible = true;
}
