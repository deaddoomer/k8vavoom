//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ClientGameShared : ClientGameBase;

enum
{
	MB_None,
	MB_Quit,
	MB_Control,
	MB_Shareware,
	MB_Nightmare,
	MB_EndGame
};

const int MAX_MENU_STACK	= 32;

StatusBarShared			GSBar;

MenuScreen				menu_stack[MAX_MENU_STACK];
int						menu_sp;

MenuScreen				CurrentMenuScreen;

MenuControlKey			CurrentCtl;
int						ControlColumn;	// menu column for controls

name					MenuStartMap;

//
//  MESSAGE BOX
//
bool					messageToPrint;
int						msgBoxX;
int						msgBoxY;
int						msgBoxW;
int						msgBoxH;
string					messageString;		// ...and here is the message string!
bool					messageNeedsInput;	// timed message = no input from user
int						messageType;
name					MsgBoxFlat;

name					QuitSound;
bool					WaitForQuit;

int						BigSelectorXOffset;
int						BigSelectorYOffset;
int						BigSelectorAnimSpeed;
array<name>				BigSelectorAnimFrames;

//==========================================================================
//
//  SpawnMenu
//
//==========================================================================

final MenuScreen SpawnMenu(class<MenuScreen> CID)
{
	MenuScreen m;

	m = MenuScreen(GRoot.NewChild(CID));
	m.ClGame = self;
	m.CreateMenu();
	return m;
}

//**************************************************************************
//**
//**    Menu stack handling
//**
//**************************************************************************

//==========================================================================
//
//  PushMenuScreen
//
//==========================================================================

final void PushMenuScreen(MenuScreen menu)
{
	int i;

	// avoid stacking menus invoked by hotkeys
	for (i = 0; i < menu_sp; i++)
	{
		if (menu_stack[i].Class == menu.Class)
		{
			int j;

			for (j = i; j < menu_sp; j++)
			{
				menu_stack[j].Destroy();
			}
			menu_sp = i;
			CurrentMenuScreen = none;
			break;
		}
	}

	if (menu_sp >= MAX_MENU_STACK)
		FatalError("PushMenu: menu stack overflow");

	menu_stack[menu_sp++] = menu;

	if (!CurrentMenuScreen)
	{
/*		if (cl.paused)
		{
			S_ResumeSound();
		}
		C_ClearNotify();*/
		CmdBuf_AddText("HideConsole\n");
		LocalSound('menu/activate');
		GRoot.SetMouse(true);
	}
	else
	{
		CurrentMenuScreen.Hide();
	}

	CurrentMenuScreen = menu;
	CurrentMenuScreen.SetFocus();
}

//==========================================================================
//
//  PopMenu
//
//==========================================================================

final void PopMenu()
{
	menu_sp--;

	if (menu_sp < 0)
		FatalError("PopMenu: menu stack underflow");

	menu_stack[menu_sp].Destroy();
	if (menu_sp)
	{
		CurrentMenuScreen = menu_stack[menu_sp - 1];
		CurrentMenuScreen.Show();
		CurrentMenuScreen.Raise();
		CurrentMenuScreen.SetFocus();
		LocalSound('menu/backup');
	}
	else
	{
		CurrentMenuScreen = none;
		LocalSound('menu/clear');
		GRoot.SetMouse(false);
	}
}

//==========================================================================
//
//  ForceMenuOff
//
//==========================================================================

final void ForceMenuOff()
{
	int i;

	for (i = 0; i < menu_sp; i++)
	{
		menu_stack[i].Destroy();
	}
	menu_sp = 0;
	CurrentMenuScreen = none;
	GRoot.SetMouse(false);
}

//==========================================================================
//
//  MessageBoxStartMessage
//
//==========================================================================

final void MessageBoxStartMessage(string text, int type, bool input)
{
	messageToPrint = true;
	messageString = text;
	messageType = type;
	messageNeedsInput = input;

	GRoot.SetFont('smallfont');
	msgBoxW = (GRoot.TextWidth(messageString) + 16) & ~15;
	msgBoxH = (GRoot.TextHeight(messageString) + 16) & ~15;
	if (msgBoxW > 304)
		msgBoxW = 304;
	if (msgBoxH > 184)
		msgBoxH = 184;
	msgBoxX = (640 - msgBoxW) / 2;
	msgBoxY = (480 - msgBoxH) / 2;

	CmdBuf_AddText("HideConsole\n");
}

//==========================================================================
//
//  MessageBoxDrawer
//
//==========================================================================

final void MessageBoxDrawer()
{
	// Horiz. & Vertically centre string and print it.
	if (messageToPrint)
	{
		GRoot.FillRectWithFlat(msgBoxX, msgBoxY, msgBoxW, msgBoxH, MsgBoxFlat);
		DrawBorder(msgBoxX, msgBoxY, msgBoxW, msgBoxH);
		GRoot.SetFont('smallfont');
		GRoot.SetTextAlign(hcentre, vcentre);
		GRoot.DrawText(320, 240, messageString);
	}

	if (WaitForQuit && !IsLocalSoundPlaying(QuitSound))
	{
		CmdBuf_AddText("Quit\n");
	}
}

//==========================================================================
//
//  MessageBoxResponder
//
//==========================================================================

final bool MessageBoxResponder(event_t * event)
{
	if (WaitForQuit)
	{
		return true;
	}

	// Take care of any messages that need input
	if (messageToPrint && event->type == ev_keydown)
	{
		if (messageNeedsInput &&
			event->data1 != K_SPACE &&
			event->data1 != K_n &&
			event->data1 != K_y &&
			event->data1 != K_ESCAPE &&
			event->data1 != K_MOUSE1 && event->data1 != K_MOUSE2)
		{
			return true;
		}

		messageToPrint = false;
		switch (messageType)
		{
		case MB_None:
			break;
		case MB_Quit:
			QuitResponse(event->data1);
			break;
		case MB_Control:
			ControlResponse(event->data1);
			break;
		case MB_Shareware:
			SharewareResponse(event->data1);
			break;
		case MB_Nightmare:
			VerifyNightmare(event->data1);
			break;
		case MB_EndGame:
			EndGameResponse(event->data1);
			break;
		}

//      S_StartSound(sfx1_swtchx);
		return true;
	}
	return false;
}

//==========================================================================
//
//  MessageBoxActive
//
//==========================================================================

final bool MessageBoxActive()
{
	return messageToPrint;
}

//==========================================================================
//
//  ControlResponse
//
//==========================================================================

void ControlResponse(int key)
{
	string kb_down;
	string kb_up;
	int key1;
	int key2;

	if (key != K_ESCAPE)
	{
		kb_down = CurrentCtl.CommandOn;
		kb_up = CurrentCtl.CommandOff;
		IN_GetBindingKeys(kb_down, &key1, &key2);
		if (ControlColumn == 0)
		{
			IN_SetBinding(key1, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
		if (ControlColumn == 1)
		{
			IN_SetBinding(key2, "", "");
			IN_SetBinding(key, kb_down, kb_up);
		}
	}
}

//==========================================================================
//
//  VerifyNightmare
//
//  Realy mightmare skill?
//
//==========================================================================

final void VerifyNightmare(int ch)
{
	if (ch != K_y)
		return;

	NewGame(sk_nightmare);
}

//==========================================================================
//
//  EndGameResponse
//
//==========================================================================

final void EndGameResponse(int ch)
{
	if (ch != K_y)
		return;

	CmdBuf_AddText("Disconnect\n");
}

//==========================================================================
//
//	AddNotifyMessage
//
//==========================================================================

void AddNotifyMessage(string Str)
{
	GSBar.AddNotifyMessage(Str);
}

void menu_quit()
{
}

void NewGame(int skill)
{
}

void DrawBorder(int x, int y, int w, int h)
{
}

void QuitResponse(int key)
{
}

void SharewareResponse(int key)
{
}

defaultproperties
{
}
