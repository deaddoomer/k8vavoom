//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class ClientGameShared : ClientGameBase;

const int MAX_MENU_STACK	= 32;

MenuScreen				menu_stack[MAX_MENU_STACK];
int						menu_sp;

MenuScreen				CurrentMenuScreen;

int						ControlColumn;	// menu column for controls

name					MenuStartMap;

//==========================================================================
//
//  SpawnMenu
//
//==========================================================================

final MenuScreen SpawnMenu(class<MenuScreen> CID)
{
	MenuScreen m;

	m = MenuScreen(GRoot.NewChild(CID));
	m.ClGame = self;
	return m;
}

//**************************************************************************
//**
//**    Menu stack handling
//**
//**************************************************************************

//==========================================================================
//
//  PushMenuScreen
//
//==========================================================================

final void PushMenuScreen(MenuScreen menu)
{
	int i;

	// avoid stacking menus invoked by hotkeys
	for (i = 0; i < menu_sp; i++)
	{
		if (menu_stack[i].Class == menu.Class)
		{
			int j;

			for (j = i; j < menu_sp; j++)
			{
				menu_stack[j].Destroy();
			}
			menu_sp = i;
			CurrentMenuScreen = none;
			break;
		}
	}

	if (menu_sp >= MAX_MENU_STACK)
		FatalError("PushMenu: menu stack overflow");

	menu_stack[menu_sp++] = menu;

	if (!CurrentMenuScreen)
	{
/*		if (cl.paused)
		{
			S_ResumeSound();
		}
		C_ClearNotify();*/
		CmdBuf_AddText("HideConsole\n");
		LocalSound('menu/activate');
		GRoot.SetMouse(true);
	}
	else
	{
		CurrentMenuScreen.Hide();
	}

	CurrentMenuScreen = menu;
	CurrentMenuScreen.SetFocus();
}

//==========================================================================
//
//  PopMenu
//
//==========================================================================

final void PopMenu()
{
	menu_sp--;

	if (menu_sp < 0)
		FatalError("PopMenu: menu stack underflow");

	menu_stack[menu_sp].Destroy();
	if (menu_sp)
	{
		CurrentMenuScreen = menu_stack[menu_sp - 1];
		CurrentMenuScreen.Show();
		CurrentMenuScreen.Raise();
		CurrentMenuScreen.SetFocus();
		LocalSound('menu/backup');
	}
	else
	{
		CurrentMenuScreen = none;
		LocalSound('menu/clear');
		GRoot.SetMouse(false);
	}
}

//==========================================================================
//
//  ForceMenuOff
//
//==========================================================================

final void ForceMenuOff()
{
	int i;

	for (i = 0; i < menu_sp; i++)
	{
		menu_stack[i].Destroy();
	}
	menu_sp = 0;
	CurrentMenuScreen = none;
	GRoot.SetMouse(false);
}

void menu_quit()
{
}

void NewGame(int skill)
{
}

void MessageBoxStartMessage(string text, int type, bool input)
{
}

void DrawBorder(int x, int y, int w, int h)
{
}

defaultproperties
{
}
