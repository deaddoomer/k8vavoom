//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class HudMessage : Widget;

//	ID, used as a priority or to replace a previous message.
int					Id;

array<SplitLine>	MsgLines;
int					MsgColour;

//	Calculated size of the message box.
int					MsgWidth;
int					MsgHeight;

//	Message location
float				MsgX;
float				MsgY;

//	True if text lines should be centred.
bool				bCentreX;

float				HoldTime;
float				Time;

//==========================================================================
//
//	AddHudMessage
//
//==========================================================================

void Init(string Message, int Type, int AId, int Colour, float AMsgX,
	float AMsgY, float AHoldTime, float Time1, float Time2)
{
	int		i;

	Id = AId;
	MsgColour = Colour;
	HoldTime = AHoldTime;

	//	Calculate width and height of the text.
	MsgHeight = SplitText(Message, MsgLines, Width);
	MsgWidth = 0;
	for (i = 0; i < MsgLines.Num; i++)
	{
		if (MsgLines[i].Width > MsgWidth)
		{
			MsgWidth = MsgLines[i].Width;
		}
	}

	//	Position of the message.
	MsgX = AMsgX;
	MsgY = AMsgY;
	if (fabs(MsgX) > 2.0)
	{
		bCentreX = true;
		MsgX = 0.5;
	}
	else
	{
		if (fabs(MsgX) > 1.0)
		{
			bCentreX = true;
		}
		MsgX = MsgX > 1.0 ? MsgX - 1.0 : MsgX < -1.0 ? MsgX + 1.0 : MsgX;
	}
}

//==========================================================================
//
//	OnDraw
//
//==========================================================================

void OnDraw()
{
	int		i;
	int		x;
	int		y;

	if (MsgX > 0.0)
	{
		x = ftoi(itof(Width - MsgWidth) * MsgX);
	}
	else
	{
		x = ftoi(itof(Width) * -MsgX);
	}
	if (MsgY > 0.0)
	{
		y = ftoi(itof(Height - MsgHeight) * MsgY);
	}
	else
	{
		y = ftoi(itof(Height) * -MsgY);
	}

	for (i = 0; i < MsgLines.Num; i++)
	{
		if (bCentreX)
		{
			DrawText(x + (MsgWidth - MsgLines[i].Width) / 2, y,
				MsgLines[i].Text, MsgColour);
		}
		else
		{
			DrawText(x, y, MsgLines[i].Text, MsgColour);
		}
		y += MsgHeight / MsgLines.Num;
	}
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	Time += DeltaTime;
	if (HoldTime && HoldTime < Time)
	{
		Destroy();
	}
}

defaultproperties
{
	Width = 640;
	Height = 480;
	bTickEnabled = true;
}
