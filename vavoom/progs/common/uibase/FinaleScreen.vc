//**************************************************************************
//**
//**    ##   ##    ##    ##   ##   ####     ####   ###     ###
//**    ##   ##  ##  ##  ##   ##  ##  ##   ##  ##  ####   ####
//**     ## ##  ##    ##  ## ##  ##    ## ##    ## ## ## ## ##
//**     ## ##  ########  ## ##  ##    ## ##    ## ##  ###  ##
//**      ###   ##    ##   ###    ##  ##   ##  ##  ##       ##
//**       #    ##    ##    #      ####     ####   ##       ##
//**
//**    $Id$
//**
//**    Copyright (C) 1999-2006 Jānis Legzdiņš
//**
//**    This program is free software; you can redistribute it and/or
//**  modify it under the terms of the GNU General Public License
//**  as published by the Free Software Foundation; either version 2
//**  of the License, or (at your option) any later version.
//**
//**    This program is distributed in the hope that it will be useful,
//**  but WITHOUT ANY WARRANTY; without even the implied warranty of
//**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//**  GNU General Public License for more details.
//**
//**************************************************************************

class FinaleScreen : Widget;

const float TEXTSPEED	= 0.1;
const float TEXTWAIT	= 7.0;

const int CastCount = 17;

ClientGameShared		ClGame;

FinaleBackground		Background;
ActorDisplayWindow		CastWin;

name					FinaleType;
float					FinaleTime;
int						FinaleStage;
float					FinaleEndTime;
string					FinaleText;
int						StrifeFinaleType;
int						FinalePage;
float					FinaleTimer;

int						castnum;
int						castframes;
int						castonmelee;
bool					castattacking;
bool					castdeath;

// Casting by id Software. in order of appearance
class<EntityEx>			castorder[CastCount];
//
// Character cast strings
//
string					caststrings[CastCount];

//==========================================================================
//
//  StartFinale
//
//==========================================================================

final void StartFinale(name AFinaleType)
{
	FinaleType = AFinaleType;
	FinaleTime = 0.0;

	if (!StrStartsWith(va("%n", FinaleType), "EndGame"))
	{
		FinaleType = ClGame.DefaultFinaleType;
	}

	if (FinaleType == 'EndGamePic1')
	{
		if (!IsMapPresent('e2m1') && WadLumpPresent('order'))
		{
			InitPic('order');
		}
		else
		{
			InitPic('credit');
		}
	}
	else if (FinaleType == 'EndGamePic2')
	{
		InitPic('victory2');
	}
	else if (FinaleType == 'EndGamePic3')
	{
		if (WadLumpPresent('endpic'))
		{
			InitPic('endpic');
		}
		else
		{
			// Just show credits screen for extended episodes
			InitPic('credit');
		}
	}
	else if (FinaleType == 'EndGameUnderwater')
	{
		InitUnderwater();
	}
	else if (FinaleType == 'EndGameBunny')
	{
		InitBunnyScroll();
	}
	else if (FinaleType == 'EndGameDemon')
	{
		InitDemonScroll();
	}
	else if (FinaleType == 'EndGameCast')
	{
		StartCast();
	}
	else if (FinaleType == 'EndGameChess')
	{
		InitChess();
	}
	else if (FinaleType == 'EndGameStrife')
	{
		InitStrifeFinale();
	}
	else if (StrStartsWith(va("%n", FinaleType), "EndGameCustomPic"))
	{
		InitPic(StrToName(substr(va("%n", FinaleType), 16,
			strlen(va("%n", FinaleType)) - 16)));
	}
	else
	{
		print("Unknown finale type %n", FinaleType);
		InitPic('credit');
	}
}

//==========================================================================
//
//	OnCreate
//
//==========================================================================

void OnCreate()
{
	::OnCreate();
	Background = NewChild(FinaleBackground);
	Background.FScreen = self;
	Background.ScaleX = itof(Width) / itof(Background.Width);
	Background.ScaleY = itof(Height) / itof(Background.Height);
}

//==========================================================================
//
//	OnVisibilityChanged
//
//==========================================================================

void OnVisibilityChanged(bool bNewVisibility)
{
	bTickEnabled = bNewVisibility;
}

//==========================================================================
//
//  OnPostDraw
//
//==========================================================================

void OnPostDraw()
{
	if (FinaleType == 'EndGameCast')
	{
		CastPostDraw();
	}
	else if (FinaleType == 'EndGameChess')
	{
		ChessPostDraw();
	}
}

//===========================================================================
//
//  Responder
//
//===========================================================================

bool Responder(event_t * event)
{
	if (FinaleType == 'EndGameCast')
	{
		return CastResponder(event);
	}
	return false;
}

//==========================================================================
//
//	Tick
//
//==========================================================================

void Tick(float DeltaTime)
{
	FinaleTime += DeltaTime;
	if (FinaleType == 'EndGameCast')
	{
		CastTicker(DeltaTime);
	}
	else if (FinaleType == 'EndGameChess')
	{
		ChessTicker();
	}
	else if (FinaleType == 'EndGameStrife')
	{
		StrifeFinalTicker(DeltaTime);
	}
}

//==========================================================================
//
//  InitPic
//
//==========================================================================

final void InitPic(name PicName)
{
	Background.InitPic(PicName);
#ifdef FIXME
	S_StartSong(ClGame.DefaultFinaleMusic, P_GetCDEnd1Track(), true);
#else
	CmdBuf_AddText(va("music loop %n\n", ClGame.DefaultFinaleMusic));
#endif
}

//==========================================================================
//
//  InitUnderwater
//
//==========================================================================

final void InitUnderwater()
{
	Background.InitPicPal('e2end', 'e2pal');
#ifdef FIXME
	S_StartSong(ClGame.DefaultFinaleMusic, P_GetCDEnd1Track(), true);
#else
	CmdBuf_AddText(va("music loop %n\n", ClGame.DefaultFinaleMusic));
#endif
}

//==========================================================================
//
//  InitBunnyScroll
//
//==========================================================================

final void InitBunnyScroll()
{
	Background.InitBunnyScroll();
#ifdef FIXME
	S_StartSong("d_bunny", P_GetCDEnd2Track(), true);
#else
	CmdBuf_AddText("music loop d_bunny\n");
#endif
}

//==========================================================================
//
//  InitDemonScroll
//
//==========================================================================

final void InitDemonScroll()
{
	Background.InitDemon();
#ifdef FIXME
	S_StartSong(ClGame.DefaultFinaleMusic, P_GetCDEnd1Track(), true);
#else
	CmdBuf_AddText(va("music loop %n\n", ClGame.DefaultFinaleMusic));
#endif
}

//==========================================================================
//
//	StartCast
//
//==========================================================================

final void StartCast()
{
#ifdef FIXME
	S_StartSong("d_evil", P_GetCDEnd2Track(), true);
#else
	CmdBuf_AddText("music loop d_evil\n");
#endif
	Background.InitPic('bossback');

	if (!CastWin)
	{
		CastWin = ActorDisplayWindow(NewChild(ActorDisplayWindow));
		CastWin.SetPos(0, 0);
		CastWin.SetSize(640, 480);
	}

	castnum = 0;
	CastWin.SetState(FindClassState(castorder[castnum], 'See'));
	CastWin.CastTime = CastWin.StateTime;
	castdeath = false;
	castframes = 0;
	castonmelee = 0;
	castattacking = false;
}

//==========================================================================
//
//  CastSound
//
//==========================================================================

final void DoCastSound(state CurState, class Cls, name State, int Offset,
	name Sound)
{
	state S = FindClassState(Cls, State);
	if (S)
	{
		S = GetStatePlus(S, Offset);
		if (S == CurState)
		{
			LocalSound(Sound);
		}
	}
}

//==========================================================================
//
//  CastSound
//
//==========================================================================

final void CastSound(state State)
{
	// sound hacks....
	DoCastSound(State, DoomPlayer, 'Missile', 0, 'weapons/sshotf');
	DoCastSound(State, ZombieMan, 'Missile', 1, 'grunt/attack');
	DoCastSound(State, ShotgunGuy, 'Missile', 1, 'shotguy/attack');
	DoCastSound(State, ChaingunGuy, 'Missile', 1, 'chainguy/attack');
	DoCastSound(State, ChaingunGuy, 'Missile', 2, 'chainguy/attack');
	DoCastSound(State, ChaingunGuy, 'Missile', 3, 'chainguy/attack');
	DoCastSound(State, DoomImp, 'Melee', 2, 'imp/melee');
	DoCastSound(State, LostSoul, 'Missile', 1, 'skull/melee');
	DoCastSound(State, Demon, 'Melee', 1, 'demon/melee');
	DoCastSound(State, Cacodemon, 'Missile', 1, 'caco/attack');
	DoCastSound(State, BaronOfHell, 'Missile', 1, 'baron/attack');
	DoCastSound(State, HellKnight, 'Missile', 1, 'baron/attack');
	DoCastSound(State, Cyberdemon, 'Missile', 1, 'weapons/rocklf');
	DoCastSound(State, Cyberdemon, 'Missile', 3, 'weapons/rocklf');
	DoCastSound(State, Cyberdemon, 'Missile', 5, 'weapons/rocklf');
	DoCastSound(State, SpiderMastermind, 'Missile', 1, 'spider/attack');
	DoCastSound(State, SpiderMastermind, 'Missile', 2, 'spider/attack');
	DoCastSound(State, Arachnotron, 'Missile', 1, 'baby/attack');
	DoCastSound(State, PainElemental, 'Missile', 2, 'skull/melee');
	DoCastSound(State, Revenant, 'Melee', 1, 'skeleton/swing');
	DoCastSound(State, Revenant, 'Melee', 3, 'skeleton/melee');
	DoCastSound(State, Revenant, 'Missile', 1, 'skeleton/attack');
	DoCastSound(State, Fatso, 'Missile', 1, 'fatso/attack');
	DoCastSound(State, Fatso, 'Missile', 4, 'fatso/attack');
	DoCastSound(State, Fatso, 'Missile', 7, 'fatso/attack');
	DoCastSound(State, Archvile, 'Missile', 1, 'vile/start');
}

//==========================================================================
//
//	CastTicker
//
//==========================================================================

final void CastTicker(float DeltaTime)
{
	CastWin.CastTime -= DeltaTime;
	if (CastWin.CastTime > 0.0)
	{
		return;	// not time to change state yet
	}

	SetNextCastState(CastWin.StateTime, CastWin.NextState);
}

//==========================================================================
//
//  SetNextCastState
//
//==========================================================================

final void SetNextCastState(float StateTime, state NextState)
{
	state	NewState;

	if (StateTime == -1.0 || !NextState)
	{
		// switch from deathstate to next monster
		castnum++;
		castdeath = false;
		if (castnum == CastCount)
		{
			castnum = 0;
		}
		if (castorder[castnum].default.SightSound)
		{
			LocalSound(castorder[castnum].default.SightSound);
		}
		NewState = FindClassState(castorder[castnum], 'See');
		castframes = 0;
	}
	else
	{
		// just advance to next state in animation
//      if (caststate == &states[S1_PLAY_ATK1])
//          goto stopattack;    // Oh, gross hack!
		NewState = NextState;
		if (NewState == FindClassState(castorder[castnum], 'Spawn'))
		{
			NewState = FindClassState(castorder[castnum], 'See');
		}
		castframes++;

		CastSound(NewState);
	}

	if (castframes == 12)
	{
		// go into attack frame
		castattacking = true;
		if (castonmelee)
		{
			NewState = FindClassState(castorder[castnum], 'Melee');
		}
		else
		{
			NewState = FindClassState(castorder[castnum], 'Missile');
		}
		castonmelee ^= 1;
		if (!NewState)
		{
			if (castonmelee)
			{
				NewState = FindClassState(castorder[castnum], 'Melee');
			}
			else
			{
				NewState = FindClassState(castorder[castnum], 'Missile');
			}
		}
	}

	if (castattacking)
	{
		if (castframes == 24 ||
			NewState == FindClassState(castorder[castnum], 'See'))
		{
			castattacking = false;
			castframes = 0;
			NewState = FindClassState(castorder[castnum], 'See');
		}
	}

	CastWin.SetState(NewState);
	CastWin.CastTime = CastWin.StateTime;
	if (CastWin.CastTime < 0.0)
	{
		CastWin.CastTime = 15.0 / 35.0;
	}
}

//==========================================================================
//
//  CastResponder
//
//==========================================================================

final bool CastResponder(event_t* ev)
{
	if (ev->type != ev_keydown)
	{
		return false;
	}

	if (castdeath)
	{
		return true;	// already in dying frames
	}

	// go into death frame
	castdeath = true;
	CastWin.SetState(FindClassState(castorder[castnum], 'Death'));
	CastWin.CastTime = CastWin.StateTime;
	castframes = 0;
	castattacking = false;
	if (castorder[castnum].default.DeathSound)
	{
		LocalSound(castorder[castnum].default.DeathSound);
	}

	return true;
}

//==========================================================================
//
//	CastPostDraw
//
//==========================================================================

final void CastPostDraw()
{
	SetFont('smallfont');
	SetTextAlign(hcentre, vtop);
	DrawText(320, 440, caststrings[castnum]);
}

//==========================================================================
//
//  InitChess
//
//==========================================================================

final void InitChess()
{
	FinaleStage = 0;
	FinaleEndTime = 2.0;
	Background.InitChess();

#ifdef FIXME
	S_StartSong("hall", P_GetCDEnd1Track(), false);	// don't loop the song
#else
	CmdBuf_AddText("music play hall\n");	// don't loop the song
#endif
}

//==========================================================================
//
//  ChessTicker
//
//==========================================================================

final void ChessTicker()
{
	if (FinaleStage < 5 && FinaleTime >= FinaleEndTime)
	{
		FinaleTime = 0.0;
		FinaleStage++;
		switch (FinaleStage)
		{
		case 1:	// Text 1
			GetFinaleText('win1msg');
			break;
		case 2:	// Pic 2, Text 2
			GetFinaleText('win2msg');
			Background.fpage1 = R_RegisterPic('finale2');
#ifdef FIXME
			S_StartSong("orb", P_GetCDEnd2Track(), false);
#else
			CmdBuf_AddText("music play orb\n");
#endif
			break;
		case 3:	// Pic 2 -- Fade out
			FinaleEndTime = 2.0;
			break;
		case 4:	// Pic 3 -- Fade in
			Background.fpage1 = R_RegisterPic('finale3');
			FinaleEndTime = 2.0;
#ifdef FIXME
			S_StartSong("chess", P_GetCDEnd3Track(), true);
#else
			CmdBuf_AddText("music loop chess\n");
#endif
			break;
		case 5:	// Pic 3 , Text 3
			GetFinaleText('win3msg');
			break;
		}
	}
}

//==========================================================================
//
//	GetFinaleText
//
//==========================================================================

final void GetFinaleText(name msgLumpName)
{
	FinaleText = LoadTextLump(msgLumpName);
	FinaleEndTime = itof(strlen(FinaleText)) * TEXTSPEED + TEXTWAIT;
}

//===========================================================================
//
//	TextWrite
//
//===========================================================================

final void TextWrite()
{
	// draw some of the text onto the screen
	int count = ftoi((FinaleTime - 0.3) / TEXTSPEED);
	count = Clamp(count, 0, strlen(FinaleText));

	SetFont('smallfont');
	SetTextAlign(hleft, vtop);
	DrawText(180, (FinaleStage == 5) ? 275 : 145, substr(FinaleText, 0, count));
}

//==========================================================================
//
//	ChessPostDraw
//
//==========================================================================

final void ChessPostDraw()
{
	switch (FinaleStage)
	{
	case 1:
	case 2:
	case 5:
		TextWrite();
		break;
	}
}

//===========================================================================
//
//	InitStrifeFinale
//
//===========================================================================

final void InitStrifeFinale()
{
	FinalePage = StrifeFinaleType * 10;
	FinaleStage = 0;
	PlayStrifeFinalePage();
}

//===========================================================================
//
//	PlayStrifeFinalePage
//
//===========================================================================

final void PlayStrifeFinalePage()
{
	switch (FinalePage)
	{
		//	Happy ending.
	case 0:
		CmdBuf_AddText("music loop d_happy\n");
		Background.InitPic('ss4f1');
		LocalSound('svox/rie01');
		FinaleTimer = 13.0;
		FinalePage = 1;
		break;

	case 1:
		Background.InitPic('ss4f2');
		LocalSound('svox/bbx01');
		FinaleTimer = 11.0;
		FinalePage = 2;
		break;

	case 2:
		Background.InitPic('ss4f3');
		LocalSound('svox/bbx02');
		FinaleTimer = 14.0;
		FinalePage = 3;
		break;

	case 3:
		Background.InitPic('ss4f4');
		FinaleTimer = 28.0;
		FinalePage = -1;
		break;

		//	Sad ending.
	case 10:
		CmdBuf_AddText("music loop d_sad\n");
		Background.InitPic('ss5f1');
		LocalSound('svox/ss501b');
		FinaleTimer = 11.0;
		FinalePage = 11;
		break;

	case 11:
		Background.InitPic('ss5f2');
		LocalSound('svox/ss502b');
		FinaleTimer = 10.0;
		FinalePage = 12;
		break;

	case 12:
		Background.InitPic('ss5f3');
		LocalSound('svox/ss503b');
		FinaleTimer = 11.0;
		FinalePage = -1;
		break;

		//	Dark ending.
	case 20:
		CmdBuf_AddText("music loop d_end\n");
		Background.InitPic('ss6f1');
		LocalSound('svox/ss601a');
		FinaleTimer = 8.0;
		FinalePage = 21;
		break;

	case 21:
		Background.InitPic('ss6f2');
		LocalSound('svox/ss602a');
		FinaleTimer = 8.0;
		FinalePage = 22;
		break;

	case 22:
		Background.InitPic('ss6f3');
		LocalSound('svox/ss603a');
		FinaleTimer = 9.0;
		FinalePage = -1;
		break;

	case -1:
		CmdBuf_AddText("music loop d_fast\n");
		Background.InitPic('credit');
		FinaleStage = 1;
		break;
	}
}

//==========================================================================
//
//	StrifeFinalTicker
//
//==========================================================================

final void StrifeFinalTicker(float DeltaTime)
{
	if (FinaleStage == 0)
	{
		FinaleTimer -= DeltaTime;
		if (FinaleTimer <= 0.0)
		{
			PlayStrifeFinalePage();
		}
	}
}

defaultproperties
{
	bTickEnabled = true;
	Focusable = true;
	Width = 640;
	Height = 480;

	castorder[0] = ZombieMan;
	castorder[1] = ShotgunGuy;
	castorder[2] = ChaingunGuy;
	castorder[3] = DoomImp;
	castorder[4] = Demon;
	castorder[5] = LostSoul;
	castorder[6] = Cacodemon;
	castorder[7] = HellKnight;
	castorder[8] = BaronOfHell;
	castorder[9] = Arachnotron;
	castorder[10] = PainElemental;
	castorder[11] = Revenant;
	castorder[12] = Fatso;
	castorder[13] = Archvile;
	castorder[14] = SpiderMastermind;
	castorder[15] = Cyberdemon;
	castorder[16] = DoomPlayer;

	caststrings[0] = "ZOMBIEMAN";
	caststrings[1] = "SHOTGUN GUY";
	caststrings[2] = "HEAVY WEAPON DUDE";
	caststrings[3] = "IMP";
	caststrings[4] = "DEMON";
	caststrings[5] = "LOST SOUL";
	caststrings[6] = "CACODEMON";
	caststrings[7] = "HELL KNIGHT";
	caststrings[8] = "BARON OF HELL";
	caststrings[9] = "ARACHNOTRON";
	caststrings[10] = "PAIN ELEMENTAL";
	caststrings[11] = "REVENANT";
	caststrings[12] = "MANCUBUS";
	caststrings[13] = "ARCH-VILE";
	caststrings[14] = "THE SPIDER MASTERMIND";
	caststrings[15] = "THE CYBERDEMON";
	caststrings[16] = "OUR HERO";
}
