****************************************************************************
                Compiling DOS sources
****************************************************************************

Compiler and tools:
    * DJGPP (http://www.delorie.com/djgpp)
    * GNU make or RHIDE
Libraries:
    * Allegro game programming library - latest Work In Progress version
  (http://www.talula.demon.co.uk/allegro)
    * OpenGL version: MESA (http://www.mesa3d.org) and Allegro driver for
  MESA (http://www.geocities.com/SiliconValley/7259/)

    To compile with make simply run make in the main directory. If you don't
have MESA edit Makefile and disable OpenGL or run "make NOGL=1". To compile a
dedicated server, execute "make sv". If
  To compile with RHIDE, open a project, that you want to compile and press
F9. If you don't have MESA, simply remove all gl_* files from project and
GL from libraries.

****************************************************************************
                Compiling Windows sources
****************************************************************************

Compiler and tools:
    * Borland C Compiler or Borland C++ Builder 5.0 (http://www.borland.com)
  Compiler itself is freeware.
Libraries:
    * DirectX 7 SDK (http://www.microsoft.com/directx), already included
  in Builder but some headers needed by DirectMusic are missing. In Allogro
  website (http://www.talula.demon.co.uk/allegro) section Work In Progress
  you will find a minimal version of DirectX 7 SDK.

  To compile main executable with Builder, open vavoom95.bpr an make it.
 To compile it with Borland's make, use file vavoom95.mak.
  To compile vcc open vcc.bpr in directory vcc and make it or, to compile
 using make, use file vcc.mak.
  You can also compile main executable with MSVC, but it will abort with
Segmentation violation during startup. I don't know, how MSVC is fucking
with arrays of classes, but in the result chat macros are not constructed
like it is expected. That's why I don't use it anymore. All project files
are removed, so if you wanna try it, you will have to create a new ones.

****************************************************************************
                Compiling LINUX sources
****************************************************************************

Compiler and tools:
    * GNU C++ Compiler, GNU make (every LINUX user must have them)
Libraries:
    * Allegro game programming library - latest Work In Progress version
  (http://www.talula.demon.co.uk/allegro)
    * OpenGL version: MESA (http://www.mesa3d.org) and possibly some other
  libraries.

  First run fixunix.sh to convert text files to UNIX format.
  Then run make in the main directory. If you have problems with OpenGL you
can disable it by editing Makefile configuration part.
  Some parts of Allegro need root privileges. Others don't. For detailed info
see Allogro docs (files readme.lnx and readme.uni). Most likely you will need
them. To give Vavoom root privilegies use the following command:
     su -c "make suid"
or do it manually like this (you must be root to do this):
     chown root.root Vavoom
     chmod 4755 Vavoom
If all users that you want to give rights to use Vavoom are in one group, you
may prefer the following:
     chown root.allegro Vavoom
     chmod 4750 Vavoom
  If you want other users to be able to run Vavoom, give write acces to
directory 'jl' like this:
     chmod 777 jl
or, if all such users are in one group, you may prefer the following:
     chmod 770 jl

****************************************************************************
                Compiling LINUX / UNIX dedicated server
****************************************************************************

Compiler and tools:
    * GNU C++ Compiler, GNU make

  First run fixunix.sh to convert text files to UNIX format.
  Then run "make sv" (without quotes).

****************************************************************************
                Compiling utilites
****************************************************************************

  Each utilite haves a text file with compilig instructions.
  
****************************************************************************
                Compiling PROGS
****************************************************************************

Compiler and tools:
    * vcc (Vavoom C Compiler). You will find it in Vavoom utilites package.
    * One of the following compilers (it is used as preprocessor):
        - GNU C Compiler. DOS version is a part of DJGPP
          (http://www.delorie.com/djgpp), LINUX users must have it.
        - Borland C++ (www.borland.com)

  First make sure vcc is available on path. Add directory utils/bin to the
path or put vcc in any other directory which is included in path or put it
in the directory, where you will use it.
  For each PROGS there is a Makefile and 2 bat files: compile.bat which will
use preprocessor form DJGPP and comp_bcc.bat which will use proprocessor from
Borland C++. Simply run make or one of the bat files.

  To compile PROGS with changes from dehacked patch go to directory
progs/hack_d2. Here you will find an example dehacked patch hack.deh. It is a
dehacked patch from Batman Doom with fixed some bugs that progs don't like.
Replace it with patch that you want to use. Then run hack.bat to create hacked
source files and scripts. Then you must compile progs. Use compile.bat to
use DJGPP as preprocessor or comp_bcc.bat to use Borland C++ proprocessor.
Finally run makewad.bat to create hack.wad which I hope you know how to use.
