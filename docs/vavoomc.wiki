<title>Brief introduction to VavoomC</title>

<h1>Brief introduction to VavoomC</h1>

VavoomC is inspired by C language, but syntactically it is closer to C# or
[https://dlang.org/|D]. It has support for pointers, structs, classes,
dynamic arrays, and dictionaries.


<hr><h1>Class declarations</h1>

Classes are started with the usual <code>class Foo : Boo;</code> thingy.
But we have one thing to remember here: class declaration marks all the
following code as belonging to a newly declared class. I.e. there is no
need to use <code>{}</code> (and you actually can't; class declaration
should end with <code>;</code>).

Also note that you cannot globally change protection for inherited
things, i.e. <code>class Foo : protected Boo;</code> is not supported.

Just like in Unreal Script, <code>defaultproperties</code> part is
supported, but it is optional. Yet if it is present, it must be the last
thing declared, and it must be immediately followed by a new class
declaration (or end of source code -- not just source file).



<hr><h1>Replacement class declaration</h1>

When you are writing mods, it is often necessary to transparently replace
one class with another. This can be done with replacement declaration
syntax:

<blockquote><pre>
class Foo : replaces(Boo);
</pre></blockquote>

This will not only inherit class <code>Foo</code> from <code>Boo</code>,
but most <code>SpawnObject(Boo)</code> calls will spawn <code>Foo</code>
instead. You prolly know this concept from DECORATE already.


There can be some situations when you don't know the exact name of the
class you want to replace, you just want to replace one of the subclasses
of it. This may sound strange, but imagine some mod that wants to replace
<code>LineSpecialLevelInfo</code> class, for example, and
<code>LineSpecialLevelInfo</code> is subclassed in each game, and named
differently. To do this, you can use:

<blockquote><pre>
class Foo : replaces(lastchild of Boo);
</pre></blockquote>

There is also a way to "hard replace" some class, forcing all subclasses of
it to become subclasses of your replacement:

<blockquote><pre>
class Foo : replaces(Boo, forceparents);
</pre></blockquote>

To complement this, there is also "weak"/"decorate" option (the default
one):

<blockquote><pre>
class Foo : replaces(Boo, weak);
class Foo : replaces(Boo, decorate); // exactly the same
</pre></blockquote>



<hr><h1>Default field values</h1>

By default, all fields are initialized to 0/false/none/nullptr. But you can
use <code>defaultproperties</code> part to change default values:

<blockquote><pre>
defaultproperties {
  myfield = 666;
}
</pre></blockquote>

Or, you can simply assign default value in field declaration:

<blockquote><pre>
int myfield = 666;
</pre></blockquote>

Note that while it is technically the same now, and you can use complex
expressions with "inline" form, support for this (complex expressions) will
be dropped in the future. I.e. don't do this:

<blockquote><pre>
int flda = 666;
int fldb = 42;
<span style="color:red">bool fldc = (flda &gt; fldb); // <-- THIS! DON'T!</span>
</pre></blockquote>

Initializing <code>fldc</code> <b>will</b> break without further notice.
You've been warned.

Redeclaring field in subclass is forbidden, and compiler will complain.

Of course, you <i>can</i> use complex expressions in
<code>defaultproperties</code> part, it is allowed. Yes, contrary to Unreal
Script, <code>defaultproperties</code> aren't meant to be easily
machine-parsable, and can contain arbitrary VC code. Just note that it is
NOT a constructor, it is executed only <b>once</b> by the complier (not
each time you creating come object), and not all classes might be properly
defined at that time. So don't use very complex code there: restrict
yourself to calculating some tables and such.

You can access default values with <code>default.name</code> syntax. Most
of the time things like <code>ClassName.default.field</code> and
<code>obj.default.field</code> will work as you may expect.



<hr><h1>Field and method protection</h1>

VC supports <code>public</code>, <code>protected</code>, and
<code>private</code> protection both for fields, and for methods. By
default, everything is public. To change protection, just use the
corresponding modifier keyword, like this:

<blockquote><pre>
protected int myfield;
</pre></blockquote>

You can also mark fields as <code>readonly</code>. It is not really useful
for VC code (as you cannot do anything with such fields, not even assign
default values to them).

Changing protection of inherited fields in subclasses is not supported.



<hr><h1>Method kinds</h1>

VC has several kinds of methods. There are <code>final static</code>
methods, <code>final</code> methods, and "normal" (aka "virtual") methods.

<code>final static</code> is your usual <code>static</code> method from
C++. Note that it <b>must</b> be <code>final</code> for now.

<code>final</code> method locks you from overriding it in subclasses. Note
that you can "seal" a method at any point in the class hierarchy, but doing
this on introduction will "devirtualize" such method, and the compiled code
will be slightly faster.

If neither <code>final</code>, nor <code>static</code> keywords are
specified, you will get a good old virtual method, which you can override
in subclasses. Note that you <b>must</b> use <code>override</code> keyword
for overriden methods.

Changing protection of inherited methods in subclasses is not supported.

There are also special <code>spawner</code> methods: their declared return
type should be <code>Object</code> or <code>class</code>, and actual return
type will be equal to the type of the first argument. This is useful for
various spawn functions (hence the name), to avoid verbose casting.

Note that there are no checks if your returned value is valid, so you can
return incompatible class/object, and everything <b>WILL</b> break.



<hr><h1>Optional method arguments</h1>

VC supports optional arguments with the following syntax:

<blockquote><pre>
void mymethod (int n, optional float f, string s);
</pre></blockquote>

Note that you can freely mix optional and required arguments.

In method body, you can check if optional argument was specified with
automatically declared <code>specified_argname</code> identifier. I.e. for
the example above, it will be <code>specified_f</code>.

Default value for optional argument is
<code>0</code>/<code>false</code>/<code>none</code>/<code>nullptr</code>.

To call a method with optional arguments, use this syntax:

<blockquote><pre>
mymethod(42, default, "boo");
</pre></blockquote>

Note the <code>default</code> keyword. It is required if your optional
argument is not the last one.

It is possible to "marshall" optional flag:

<blockquote><pre>
othermethod(n, f!optional, s);
</pre></blockquote>

This call will "marshall" optional flag for argument <code>f</code>, if it
is present, and if it is necessary.



<hr><h1>Named method arguments</h1>

You can use argument names in method calls:

<blockquote><pre>
void foo (int arg1, string arg2, name arg3);
...
foo(arg2:"boo", arg1:666, arg3:'somename')
// or
foo(arg2:"boo", 'somename', arg1:666)
</pre></blockquote>

Using named argument moves "current position" (as you can see in the
second example).



<hr><h1>Delegates</h1>

VC supports delegate fields. You can declare delegate field like this:

<blockquote><pre>
int delegate (float n) myDelegateField;
</pre></blockquote>

Later, you can assign any <b>virtual</b> method with the matching signature
to such field:

<blockquote><pre>
myDelegateField = &methodName;
</pre></blockquote>

Note the <code>&</code>.

There is the alternative syntax to declare delegates:

<blockquote><pre>
delegate int myDelegateField (float n);
</pre></blockquote>

It looks more like your usual method declaration, but otherwise is fully
equal to the previous form.



<hr><h1>Inline delegates</h1>

You can assign inline delegates to delegate fields:

<blockquote><pre>
myDelegateField = delegate int (float n) { return int(n*666); };
</pre></blockquote>

Note that inline delegates neither closures, nor nested functions, so you
cannot access outer function locals from an inline delegate.



<hr><h1>Class properties</h1>

You can define class properties, which will look and work almost like
ordinary fields, but will use getter/setter methods instead. The syntax is:

<blockquote><pre>
type propname {
  get { return v; }
  set { internalfld = value; }
}
</pre></blockquote>

<div style="color:red"><b>WARNING! This feature is experimental, and may be gone in the future.</b></div>
You can "redirect" setter or getter to any class field:

<blockquote><pre>
type propname {
  get fldname;
  set fldname;
}
</pre></blockquote>

Redirection is free -- that is, it is as effective as direct field access.
You can create public read-only fields by specifying only getter.

Also, default argument name for setter is <code>value</code>, but it can be
changed with:

<blockquote><pre>
type propname {
  set(v) { internalfld = v; }
}
</pre></blockquote>

Here, setter's argument name will be <code>v</code>.

You can define "static properties" with <code>final static</code>:

<blockquote><pre>
final static int staticField {
  get { return 42; }
}
</pre></blockquote>



<b>UFCS and paren-less calls</b>

VC supports limited form of
[https://en.wikipedia.org/wiki/Uniform_Function_Call_Syntax|UFCS], and
paren-less method calls.

For paren-less calls, "assign form" is not supported. I.e. you can do:

<blockquote><pre>
int foo () { return 42; }
...
myvar = obj.foo;
</pre></blockquote>

but you <b>cannot</b> do (yet):

<blockquote><pre>
void foo (int v) { ... }
...
obj.foo = 69;
</pre></blockquote>

This form might be supported in the future, tho.

The same limitation is applied to UFCS. Ah, what is "UFCS", you may ask.
This is a handy rule which allows to call something as a method of an
object, even if it isn't. Still confused? Just look at the example:

<blockquote><pre>
static final float msecs (int v) { return v*1000.0; }

float time = 10.msecs;
</pre></blockquote>

I.e. if the compiler will not find a property/method specified, it will try
to rewrite your code as a function call. In the example, as integer doesn't
have <code>.msecs</code> property, but there is <code>msecs</code> method
that accepts integers, compiler will rewrite your code to:
<code>msecs(10)</code>.

Of course, it works for more complex cases too:

<blockquote><pre>
if (s.strStartsWith("abc")) { ... }
</pre></blockquote>



<hr><h1>Calling superclass methods, and referring to self</h1>

To call superclass' method from an overriden one, use <code>::name()</code>
syntax. To refer to self, use <code>self</code> keyword (not
<code>this</code>, as you may expect from C++!).



<hr><h1>Names and strings</h1>

VC has <code>name</code> type, which is a... well, name. Internally it is
just a number, so comparing names are much faster than comparing strings.
Use names for various long-lived identifiers. To create a name, use single
quotes.

Note that names are case-sensitive, i.e. <code>Boo</code> and
<code>boo</code> are two different names.

Strings in VC are... strings.

You can use string in conditionals: any non-empty string will be treated
as <code>true</code>.

String has built-in <code>.length</code> property.

You can get substring by slicing: <code>s&#91;lo..hi]</code> will return
substring from <code>lo</code> up to (but not including) <code>hi</code>
character. Note that VC doesn't care about encoding, so be careful with
multibyte encodings.

You can concatenate strings with <code>~</code> operator: <code>newstr = s0~s1;</code>.

You can use <code>$</code> as substiture for <code>.length</code> in string indexing.

You can replace substring with <code>s&#91;lo..hi] = "newstr";</code>, which is
the same as:

<blockquote><pre>
s = s&#91;0..lo]~"newstr"~s&#91;hi..$];
</pre></blockquote>

Getting string character with <code>s&#91;n]</code> will return integer.

Setting string character with <code>s&#91;n]</code> accepts integers, one-char strings,
and one-char names.

To make your life slightly easier, <code>==</code> and <code>!=</code> can
compare integers with one-char strings, and one-char names. I.e. you can
write <code>if (s&#91;n] == "a")</code> and it will work.



<hr><h1>Dynamic arrays</h1>

VC supports dynamic arrays. To declare a dynamic array, use
<code>array!type</code> syntax.

Dynamic arrays has built-in <code>.length</code> property.

You can use <code>$</code> as substiture for <code>.length</code> in
indexing.

Assigning to non-existing index will grow an array. I.e. to append element
to an array, you can use <code>arr&#91;$] = value;</code>.

To make room in an array, use <code>.insert(idx&#91;, count])</code>
built-in method.

To remove items from an array, use <code>.remove(idx&#91;, count])</code>
built-in method.

You can swap two array elements with built-in <code>.swap(idx0, idx1)</code> method.

You can "reset" array (set it's length to zero without deallocating the
undelying storage) with <code>.reset()</code> method. This may be useful if
you want to reuse your dynamic array without triggering alot of
allocations.

You can sort array with built-in <code>.sort()</code> method. This methods
accepts one arument, which should be compare delegate:

<blockquote><pre>
delegate int (&#91;ref] type a, &#91;ref] type b);
</pre></blockquote>

This delegate should return negative number if "a &lt; b", positive number
if "a &gt; b", and zero if "a == b". It is important to return consistent
results, because sorting algorithm is stable (timsort).

You can allocate new array member and return pointer to it with
<code>.alloc()</code> method. Be very careful, though, as returned pointer
can be invalidated by any array length mutation!

You can change dynamic array size by manipulating <code>.length</code>
property, like this:

<blockquote><pre>
arr.length += 2;
</pre></blockquote>

or:

<blockquote><pre>
arr.length -= 1;
</pre></blockquote>

Note that decrementing length with <code>-=</code> won't trigger
reallocation, while setting length directly will reallocate the underlying
storage. I.e. to remove last array element without triggering allocation,
use <code>arr.length -= 1;</code> syntax.



<hr><h1>Dictionaries</h1>

VC supports dictionaries (aka "hash tables"). You can declare dictionary
like this:

<blockquote><pre>
dictionary!(keytype, valuetype) dict;
</pre></blockquote>

Key type cannot be array or delegate. Value can be of any type except
static array.

<div style="width:80%;background:#b00;color:#ff0;border:1px solid #ff0;padding:6px;font-weight:bold">
WARNING!
If key type is object, you should *NEVER* <code>delete</code> this object
while it is used as dictionary key. I.e. first remove dictionary entry, and
only then delete an object.
</div>

Built-in dictionary properties:

<blockquote><pre>
.length
  number of entries in dictionary
.capacity
  size of the underlying storage (do not use!)
</pre></blockquote>

Built-in dictionary methods:

<blockquote><pre>
.clear()
  clear dictionary, delete underlying storage
.reset()
  clear dictionary, but don't delete storate
.find(key)
  find key, return pointer to value or nullptr
.remove(key)
  remove key, return true if key was found and removed
.put(key, value)
  put new entry, return true if entry was replaced
.compact()
  compact storage
.rehash()
  rehash keys
</pre></blockquote>

Iteration:

<blockquote><pre>
.firstIndex()
  return index of a first entry
.nextIndex(idx)
  get index of a next entry
.removeAndNextIndex(idx)
  remove entry at the given index, move to next entry
.isValidIndex(idx)
  returns true if index is valid
.keyAtIndex(idx)
  returns pointer to current key
.valueAtIndex(idx)
  returns pointer to current value
</pre></blockquote>

Note that iteration order is unspecified, and you should <b>NEVER</b> modify
dictionary while iterating (except by calling <code>.removeAndNextIndex()</code>).

<div style="width:80%;background:#b00;color:#ff0;border:1px solid #ff0;padding:6px;font-weight:bold">
WARNING! Returned pointers can be invalidated by any dictionary mutation,
         so don't store them anywhere.
</div>

Iteration example:

<blockquote><pre>
for (auto idx = dict.firstIndex();
     dict.isValidIndex(idx);
     idx = dict.nextIndex(idx))
{
  auto key = dict.keyAtIndex(idx); // pointer to key
  auto val = dict.valueAtIndex(idx); // pointer to value
  ...
}
</pre></blockquote>

There is no <code>foreach</code> support for dictionary iteration yet.



<hr><h1><code>.</code> and <code>-></code></h1>

VC supports pointers to structs and <code>-></code> operation, but it will
happily accept <code>.</code> too. Actually, <code>-></code> will be
deprecated in the future, so you'd better forget that it exists.



<hr><h1><code>auto</code> keyword</h1>

VC supports limited form of type inference. You can use <code>auto</code>
as a type placeholder for local variable declaraion, if that declaraion
includes initializer expression. I.e.:

<blockquote><pre>
auto a = 42; // int
auto b = 6.9; // float
auto c = "str"; // guess what
auto e = funcall(); // should be pretty obvious
</pre></blockquote>



<hr><h1>Field/method aliases</h1>

VC doesn't support unions or method overloading, but it has a (limited) way
to assign several names to one field/method: aliases. Alias is exactly what
you may think: a name substitute.

<blockquote><pre>
int blood;
alias gore = blood;
</pre></blockquote>

Here, both <code>blood</code> and <code>gore</code> will refer to
<code>blood</code> field.

Alias can be aliased by another alias, therefore creating a "chain" of
aliases. Aliases are inheritable. Alias resolving is done as a first step
of name resolving.



<hr><h1>Slices and pointers</h1>

VavoomC supports pointers, and pointer indexing. This is absolutely
unsafe, of course, and at least pointer indexing can be disabled via
compiler variable. Yet native classes may require it, so I introduced
so-called "slices". This is just a pointer/length pair, so VM can do bounds
checking on pointer indexing. You cannot create slices in VavoomC code, so
as long as native code does its job ok, VC code can use slices instead of
pointers and still be considered safe. Of course, you can pass slices to
functions. Slice declaraion is: <code>type&#91;]</code> -- i.e. it looks
like an array, but without dimensions. You can "slice a slice", to create a
smaller view onto slice contents.

TL;DR: Some fields of native objects looks like dynamic arrays, and
       should be used like dynamic arrays. Currently you cannot declare
       slice in VC code, so if you didn't understood a word in the
       previous paragraph, don't bother trying, it doesn't worth it. ;-)



<hr><h1>Foreach statement (native iterator form)</h1>

VC has "native" iterators (defined in native code):

<blockquote><pre>
foreach IterFunc(<args>) { ... }
</pre></blockquote>

Look at the respective VC script sources to find available iterators. They
are marked with <code>iterator</code> keyword, and usually contains one or
more <code>out</code> parameters.



<hr><h1>Foreach statement (iota form)</h1>

To do simple integer loops, you can use "foreach iota" statement:

<blockquote><pre>
foreach (auto var; 0..8) { ... }
</pre></blockquote>

This is <b>almost</b> the same as (note the <code>&lt;</code>):

<blockquote><pre>
for (auto var = 0; var < 8; ++var) { ... }
</pre></blockquote>

The main difference is that high loop limit is evaluated only once, so any
in-loop changes of it will go unnoticed. The second difference is that this
form is slightly faster.

Note that mutating the loop variable inside a loop body is working as
expected now, but it is just an accident. Consider such code UB.

You can do backward iteration too:

<blockquote><pre>
foreach (auto var; 0..8; reverse) { ... }
</pre></blockquote>

This goes from 7 to 0 inclusive.



<hr><h1>Foreach statement (range form)</h1>

To iterate over array or slice elements, you can use "range iterators":

<blockquote><pre>
foreach (&#91;ref] auto var; arr) { ... }
foreach (auto idx, &#91;ref] auto var; arr) { ... }
</pre></blockquote>

It is slightly more effective than the usual <code>for</code> loop, but be
aware that changes to dynarray length will not affect the loop (as the
length will be read only once at loop initialisation).



<hr><h1>Foreach statement (script form)</h1>

Finally, you can define your own iterators in VC code. Using them is almost
the same as using ranged iterators:

<blockquote><pre>
foreach (<vardefs>; name(<args>)) { ... }
</pre></blockquote>

I.e. iterator simply should be a function call. Let's see how we can
define iterator (this will also explain what <vardefs> and <args> are):

<blockquote><pre>
<bool|void> iter_opIterInit (ref type arg&#91;, <args>]) { ... }
void iter_opIterDone (ref type arg) { ... }
bool iter_opIterNext (ref type arg&#91;, <loopargs>]) { ... }
</pre></blockquote>

Here, iterator name is <code>iter</code> (i.e. use <code>iter</code> as
name part in <code>foreach</code>).

VM will call <code>_opIterInit</code> first, and its first argument is the
hidden loop indexing variable (you cannot access it from
<code>foreach</code> body, but it will be passed to each iterator
<code>opXXX</code>). <code>_opIterInit</code> can be <code>void</code>, or
it can return <code>bool</code>. In the later case, you can return
<code>false</code> to skip *BOTH* loop body, and iterator finalizer. Also,
<args> from <code>foreach</code> will be passed to initializer.

If initializer succeeds, at each loop start (even at the first iteration),
VM will call <code>_opIterNext</code>, passing hidden indexing variable as
the first arg, and <vardefs> as the other args (and all
<code>_opIterNext</code> parameters should be <code>ref</code>). Return
<code>false</code> from <code>_opIterNext</code> to stop iterating, and
jump to the finalizer.

And finally, VM will call iterator finalizer -- <code>_opIterDone</code>.
Finalizer should be <code>void</code>, and should have exactly one arg --
for hidden indexing variable. Note that finalizer is optional -- you can do
all your finalizing work in <code>_opIterNext</code> before returning
<code>false</code>, and don't define finalizer at all. But note that
<code>return</code> and <code>break</code> will not cleanup iterators
without finalizers.

Usually, hidden indexing variable will be some kind of struct, where you'll
keep all the data required to do the actual iteration.



<hr><h1>Index operator overloading</h1>

You can overload array index operator for classes. To do that, define one
or several <code>opIndex</code> methods, like this:

<blockquote><pre>
int opIndex (string idx) { return ... }
void opIndexAssign (string idx, int val) { ... }
</pre></blockquote>

You can define type-specialized methods too, using pattern
<code>opIndex<indtype></code>, and
<code>opIndex&#91;<indtype>]Assign&#91;<valtype>]</code>. Some examples:

<blockquote><pre>
int opIndexFloat (float v)
int opIndexName (name n)
void opIndexAssignString (int idx, string val)
void opIndexNameAssignString (name n, string val)
</pre></blockquote>

For indexing, VC fill fallback to <code>opIndex</code>, if no specialized
method was found.

For assigning, VC will try methods in this order:

<blockquote><pre>
opIndex<indtype>Assign<valtype>
opIndex<indtype>Assign
opIndexAssign<valtype>
opIndexAssign
</pre></blockquote>



<hr><h1>Optional ref/out arguments</h1>

It is possible. And even if it is not optional, you can use
<code>nullptr</code> if you don't want to pass anything there. The compiler
will create a temporary anonymous local in this case (so you can omit
checks in your code, it is guaranteed that
<code>ref</code>/<code>out</code> argument is always valid and accessible.



<hr><h1>Static array declarations</h1>

Recommended syntax for static arrays is:

<blockquote><pre>
int&#91;42] name;
</pre></blockquote>

insted of C-like <code>int name&#91;42];</code>.
Note that C-like syntax will be dropped in the future.



<hr><h1>Switch cases without breaks</h1>

If you want to omit <code>break</code> in switch case, you should use
<code>goto case;</code> statement instead. VC compiler checks if you have a
proper case termination statement, and will abort with error if you
haven't.

You can use <code>goto case;</code> anywhere inside a branch. There is also
support for both <code>goto case <value>;</code> and <code>goto
default</code>.

Note that last case/default branch can omit proper termination.



<hr><h1>Limited automatic cleanup</h1>

If you want to do some cleanup on leaving scope, you can use
<code>scope(exit)</code> operator. Let me explain it with the sample code:

<blockquote><pre>
void foo () {
  auto reshandle = AquireSomeResource();
  scope(exit) FreeResource(reshandle);
  if (!DoSomethingWith(reshandle)) return;
  DoSomethingElseWith(reshandle);
}
</pre></blockquote>

Here, <code>FreeResource(reshandle);</code> will be automatically called
before leaving the function, so you don't have to manually insert such
calls before each <code>return</code> statement.

Note that cleanup code is called before leaving the *scope*. I.e. the
code

<blockquote><pre>
foreach (auto i; 0..3) {
  scope(exit) writeln(i);
}
</pre></blockquote>

will print "0", "1", and "2".

Also note that cleanup handlers won't be called on system/host errors.



<hr><h1>Struct assignment</h1>

While you cannot pass structs by value, you can assign structs. Note that
this does "deep copy", i.e. if your struct contains dynamic arrays or
dictionaries, they will be cloned, not simply referenced.



<hr><h1>Vector swizzling</h1>

VC supports vector swizzling. Let me show you some examples (again):

<blockquote><pre>
TVec v0 = vector(1, 2, 3);
TVec v1 = v0.yzx; // v1 is `vector(2, 3, 1)` now
TVec v2 = v0.zx; // v2 is `vector(3, 1, 0)` now -- note the last `0`
TVec v3 = v0._mx_y_mz; // v3 is `vector(-1, 2, -3)`
TVec v4 = v0._1_m1_0; // cryptic way to write `vector(1, -1, 0)`
</pre></blockquote>

I.e. you can create new vectors by arbitrary combination of old vector
elements. Underscore can delimit element names, and it is ignored by the
compiler. You can prefix element name with <code>m</code> to negate it. You
can use literals <code>0</code> and <code>1</code> (but not other digits).



<hr><h1><code>.isDestroyed</code> property</h1>

Each object has built-in <code>.isDestroyed</code> property. It can be used to check
if the object is marked for deletion, but isn't collected by garbage collector yet.
This is mostly useful to check if some actor is "going to disappear".

Note that <code>.isDestroyed</code> can be safely used on <code>none</code> value.

<blockquote><pre>
Actor act = none;
if (act.isDestroyed) { ... }  // this is valid!

act = Spawn(...);
act.Destroy();
// the following is still `true`, because `act` only marked for destruction
if (act) { ... }
// but this is `false`:
if (act.isDestroyed) { ... }
</pre></blockquote>
